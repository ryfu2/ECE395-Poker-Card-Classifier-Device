
Attempt3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b3fc  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  0800b6ac  0800b6ac  0000c6ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b89c  0800b89c  0000c89c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b8a4  0800b8a4  0000c8a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b8a8  0800b8a8  0000c8a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000068  24000000  0800b8ac  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000410  24000068  0800b914  0000d068  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000478  0800b914  0000d478  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d068  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017599  00000000  00000000  0000d096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002e17  00000000  00000000  0002462f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000fd0  00000000  00000000  00027448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000c49  00000000  00000000  00028418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000309b1  00000000  00000000  00029061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019300  00000000  00000000  00059a12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00136455  00000000  00000000  00072d12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001a9167  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000046b4  00000000  00000000  001a91ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000059  00000000  00000000  001ad860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000068 	.word	0x24000068
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800b694 	.word	0x0800b694

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	2400006c 	.word	0x2400006c
 80002ec:	0800b694 	.word	0x0800b694

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b96a 	b.w	800068c <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	460c      	mov	r4, r1
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d14e      	bne.n	800047a <__udivmoddi4+0xaa>
 80003dc:	4694      	mov	ip, r2
 80003de:	458c      	cmp	ip, r1
 80003e0:	4686      	mov	lr, r0
 80003e2:	fab2 f282 	clz	r2, r2
 80003e6:	d962      	bls.n	80004ae <__udivmoddi4+0xde>
 80003e8:	b14a      	cbz	r2, 80003fe <__udivmoddi4+0x2e>
 80003ea:	f1c2 0320 	rsb	r3, r2, #32
 80003ee:	4091      	lsls	r1, r2
 80003f0:	fa20 f303 	lsr.w	r3, r0, r3
 80003f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003f8:	4319      	orrs	r1, r3
 80003fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80003fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000402:	fa1f f68c 	uxth.w	r6, ip
 8000406:	fbb1 f4f7 	udiv	r4, r1, r7
 800040a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040e:	fb07 1114 	mls	r1, r7, r4, r1
 8000412:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000416:	fb04 f106 	mul.w	r1, r4, r6
 800041a:	4299      	cmp	r1, r3
 800041c:	d90a      	bls.n	8000434 <__udivmoddi4+0x64>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f104 30ff 	add.w	r0, r4, #4294967295
 8000426:	f080 8112 	bcs.w	800064e <__udivmoddi4+0x27e>
 800042a:	4299      	cmp	r1, r3
 800042c:	f240 810f 	bls.w	800064e <__udivmoddi4+0x27e>
 8000430:	3c02      	subs	r4, #2
 8000432:	4463      	add	r3, ip
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	fa1f f38e 	uxth.w	r3, lr
 800043a:	fbb1 f0f7 	udiv	r0, r1, r7
 800043e:	fb07 1110 	mls	r1, r7, r0, r1
 8000442:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000446:	fb00 f606 	mul.w	r6, r0, r6
 800044a:	429e      	cmp	r6, r3
 800044c:	d90a      	bls.n	8000464 <__udivmoddi4+0x94>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 31ff 	add.w	r1, r0, #4294967295
 8000456:	f080 80fc 	bcs.w	8000652 <__udivmoddi4+0x282>
 800045a:	429e      	cmp	r6, r3
 800045c:	f240 80f9 	bls.w	8000652 <__udivmoddi4+0x282>
 8000460:	4463      	add	r3, ip
 8000462:	3802      	subs	r0, #2
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800046a:	2100      	movs	r1, #0
 800046c:	b11d      	cbz	r5, 8000476 <__udivmoddi4+0xa6>
 800046e:	40d3      	lsrs	r3, r2
 8000470:	2200      	movs	r2, #0
 8000472:	e9c5 3200 	strd	r3, r2, [r5]
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	428b      	cmp	r3, r1
 800047c:	d905      	bls.n	800048a <__udivmoddi4+0xba>
 800047e:	b10d      	cbz	r5, 8000484 <__udivmoddi4+0xb4>
 8000480:	e9c5 0100 	strd	r0, r1, [r5]
 8000484:	2100      	movs	r1, #0
 8000486:	4608      	mov	r0, r1
 8000488:	e7f5      	b.n	8000476 <__udivmoddi4+0xa6>
 800048a:	fab3 f183 	clz	r1, r3
 800048e:	2900      	cmp	r1, #0
 8000490:	d146      	bne.n	8000520 <__udivmoddi4+0x150>
 8000492:	42a3      	cmp	r3, r4
 8000494:	d302      	bcc.n	800049c <__udivmoddi4+0xcc>
 8000496:	4290      	cmp	r0, r2
 8000498:	f0c0 80f0 	bcc.w	800067c <__udivmoddi4+0x2ac>
 800049c:	1a86      	subs	r6, r0, r2
 800049e:	eb64 0303 	sbc.w	r3, r4, r3
 80004a2:	2001      	movs	r0, #1
 80004a4:	2d00      	cmp	r5, #0
 80004a6:	d0e6      	beq.n	8000476 <__udivmoddi4+0xa6>
 80004a8:	e9c5 6300 	strd	r6, r3, [r5]
 80004ac:	e7e3      	b.n	8000476 <__udivmoddi4+0xa6>
 80004ae:	2a00      	cmp	r2, #0
 80004b0:	f040 8090 	bne.w	80005d4 <__udivmoddi4+0x204>
 80004b4:	eba1 040c 	sub.w	r4, r1, ip
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa1f f78c 	uxth.w	r7, ip
 80004c0:	2101      	movs	r1, #1
 80004c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ca:	fb08 4416 	mls	r4, r8, r6, r4
 80004ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004d2:	fb07 f006 	mul.w	r0, r7, r6
 80004d6:	4298      	cmp	r0, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x11c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f106 34ff 	add.w	r4, r6, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x11a>
 80004e4:	4298      	cmp	r0, r3
 80004e6:	f200 80cd 	bhi.w	8000684 <__udivmoddi4+0x2b4>
 80004ea:	4626      	mov	r6, r4
 80004ec:	1a1c      	subs	r4, r3, r0
 80004ee:	fa1f f38e 	uxth.w	r3, lr
 80004f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004f6:	fb08 4410 	mls	r4, r8, r0, r4
 80004fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004fe:	fb00 f707 	mul.w	r7, r0, r7
 8000502:	429f      	cmp	r7, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x148>
 8000506:	eb1c 0303 	adds.w	r3, ip, r3
 800050a:	f100 34ff 	add.w	r4, r0, #4294967295
 800050e:	d202      	bcs.n	8000516 <__udivmoddi4+0x146>
 8000510:	429f      	cmp	r7, r3
 8000512:	f200 80b0 	bhi.w	8000676 <__udivmoddi4+0x2a6>
 8000516:	4620      	mov	r0, r4
 8000518:	1bdb      	subs	r3, r3, r7
 800051a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800051e:	e7a5      	b.n	800046c <__udivmoddi4+0x9c>
 8000520:	f1c1 0620 	rsb	r6, r1, #32
 8000524:	408b      	lsls	r3, r1
 8000526:	fa22 f706 	lsr.w	r7, r2, r6
 800052a:	431f      	orrs	r7, r3
 800052c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000530:	fa04 f301 	lsl.w	r3, r4, r1
 8000534:	ea43 030c 	orr.w	r3, r3, ip
 8000538:	40f4      	lsrs	r4, r6
 800053a:	fa00 f801 	lsl.w	r8, r0, r1
 800053e:	0c38      	lsrs	r0, r7, #16
 8000540:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000544:	fbb4 fef0 	udiv	lr, r4, r0
 8000548:	fa1f fc87 	uxth.w	ip, r7
 800054c:	fb00 441e 	mls	r4, r0, lr, r4
 8000550:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000554:	fb0e f90c 	mul.w	r9, lr, ip
 8000558:	45a1      	cmp	r9, r4
 800055a:	fa02 f201 	lsl.w	r2, r2, r1
 800055e:	d90a      	bls.n	8000576 <__udivmoddi4+0x1a6>
 8000560:	193c      	adds	r4, r7, r4
 8000562:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000566:	f080 8084 	bcs.w	8000672 <__udivmoddi4+0x2a2>
 800056a:	45a1      	cmp	r9, r4
 800056c:	f240 8081 	bls.w	8000672 <__udivmoddi4+0x2a2>
 8000570:	f1ae 0e02 	sub.w	lr, lr, #2
 8000574:	443c      	add	r4, r7
 8000576:	eba4 0409 	sub.w	r4, r4, r9
 800057a:	fa1f f983 	uxth.w	r9, r3
 800057e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000582:	fb00 4413 	mls	r4, r0, r3, r4
 8000586:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800058a:	fb03 fc0c 	mul.w	ip, r3, ip
 800058e:	45a4      	cmp	ip, r4
 8000590:	d907      	bls.n	80005a2 <__udivmoddi4+0x1d2>
 8000592:	193c      	adds	r4, r7, r4
 8000594:	f103 30ff 	add.w	r0, r3, #4294967295
 8000598:	d267      	bcs.n	800066a <__udivmoddi4+0x29a>
 800059a:	45a4      	cmp	ip, r4
 800059c:	d965      	bls.n	800066a <__udivmoddi4+0x29a>
 800059e:	3b02      	subs	r3, #2
 80005a0:	443c      	add	r4, r7
 80005a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005a6:	fba0 9302 	umull	r9, r3, r0, r2
 80005aa:	eba4 040c 	sub.w	r4, r4, ip
 80005ae:	429c      	cmp	r4, r3
 80005b0:	46ce      	mov	lr, r9
 80005b2:	469c      	mov	ip, r3
 80005b4:	d351      	bcc.n	800065a <__udivmoddi4+0x28a>
 80005b6:	d04e      	beq.n	8000656 <__udivmoddi4+0x286>
 80005b8:	b155      	cbz	r5, 80005d0 <__udivmoddi4+0x200>
 80005ba:	ebb8 030e 	subs.w	r3, r8, lr
 80005be:	eb64 040c 	sbc.w	r4, r4, ip
 80005c2:	fa04 f606 	lsl.w	r6, r4, r6
 80005c6:	40cb      	lsrs	r3, r1
 80005c8:	431e      	orrs	r6, r3
 80005ca:	40cc      	lsrs	r4, r1
 80005cc:	e9c5 6400 	strd	r6, r4, [r5]
 80005d0:	2100      	movs	r1, #0
 80005d2:	e750      	b.n	8000476 <__udivmoddi4+0xa6>
 80005d4:	f1c2 0320 	rsb	r3, r2, #32
 80005d8:	fa20 f103 	lsr.w	r1, r0, r3
 80005dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e0:	fa24 f303 	lsr.w	r3, r4, r3
 80005e4:	4094      	lsls	r4, r2
 80005e6:	430c      	orrs	r4, r1
 80005e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80005f0:	fa1f f78c 	uxth.w	r7, ip
 80005f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005f8:	fb08 3110 	mls	r1, r8, r0, r3
 80005fc:	0c23      	lsrs	r3, r4, #16
 80005fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000602:	fb00 f107 	mul.w	r1, r0, r7
 8000606:	4299      	cmp	r1, r3
 8000608:	d908      	bls.n	800061c <__udivmoddi4+0x24c>
 800060a:	eb1c 0303 	adds.w	r3, ip, r3
 800060e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000612:	d22c      	bcs.n	800066e <__udivmoddi4+0x29e>
 8000614:	4299      	cmp	r1, r3
 8000616:	d92a      	bls.n	800066e <__udivmoddi4+0x29e>
 8000618:	3802      	subs	r0, #2
 800061a:	4463      	add	r3, ip
 800061c:	1a5b      	subs	r3, r3, r1
 800061e:	b2a4      	uxth	r4, r4
 8000620:	fbb3 f1f8 	udiv	r1, r3, r8
 8000624:	fb08 3311 	mls	r3, r8, r1, r3
 8000628:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800062c:	fb01 f307 	mul.w	r3, r1, r7
 8000630:	42a3      	cmp	r3, r4
 8000632:	d908      	bls.n	8000646 <__udivmoddi4+0x276>
 8000634:	eb1c 0404 	adds.w	r4, ip, r4
 8000638:	f101 36ff 	add.w	r6, r1, #4294967295
 800063c:	d213      	bcs.n	8000666 <__udivmoddi4+0x296>
 800063e:	42a3      	cmp	r3, r4
 8000640:	d911      	bls.n	8000666 <__udivmoddi4+0x296>
 8000642:	3902      	subs	r1, #2
 8000644:	4464      	add	r4, ip
 8000646:	1ae4      	subs	r4, r4, r3
 8000648:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800064c:	e739      	b.n	80004c2 <__udivmoddi4+0xf2>
 800064e:	4604      	mov	r4, r0
 8000650:	e6f0      	b.n	8000434 <__udivmoddi4+0x64>
 8000652:	4608      	mov	r0, r1
 8000654:	e706      	b.n	8000464 <__udivmoddi4+0x94>
 8000656:	45c8      	cmp	r8, r9
 8000658:	d2ae      	bcs.n	80005b8 <__udivmoddi4+0x1e8>
 800065a:	ebb9 0e02 	subs.w	lr, r9, r2
 800065e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000662:	3801      	subs	r0, #1
 8000664:	e7a8      	b.n	80005b8 <__udivmoddi4+0x1e8>
 8000666:	4631      	mov	r1, r6
 8000668:	e7ed      	b.n	8000646 <__udivmoddi4+0x276>
 800066a:	4603      	mov	r3, r0
 800066c:	e799      	b.n	80005a2 <__udivmoddi4+0x1d2>
 800066e:	4630      	mov	r0, r6
 8000670:	e7d4      	b.n	800061c <__udivmoddi4+0x24c>
 8000672:	46d6      	mov	lr, sl
 8000674:	e77f      	b.n	8000576 <__udivmoddi4+0x1a6>
 8000676:	4463      	add	r3, ip
 8000678:	3802      	subs	r0, #2
 800067a:	e74d      	b.n	8000518 <__udivmoddi4+0x148>
 800067c:	4606      	mov	r6, r0
 800067e:	4623      	mov	r3, r4
 8000680:	4608      	mov	r0, r1
 8000682:	e70f      	b.n	80004a4 <__udivmoddi4+0xd4>
 8000684:	3e02      	subs	r6, #2
 8000686:	4463      	add	r3, ip
 8000688:	e730      	b.n	80004ec <__udivmoddi4+0x11c>
 800068a:	bf00      	nop

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <ov7670_write>:
//DCMI_HandleTypeDef *sp_hdcmi;
//DMA_HandleTypeDef  *sp_hdma_dcmi;
I2C_HandleTypeDef  *sp_hi2c;
uint32_t    s_destAddressForContiuousMode;
uint32_t ov7670_write(uint8_t regAddr, uint8_t data)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b0a0      	sub	sp, #128	@ 0x80
 8000694:	af02      	add	r7, sp, #8
 8000696:	4603      	mov	r3, r0
 8000698:	460a      	mov	r2, r1
 800069a:	71fb      	strb	r3, [r7, #7]
 800069c:	4613      	mov	r3, r2
 800069e:	71bb      	strb	r3, [r7, #6]
  uint16_t SLAVE_ADDR = 0x42;
 80006a0:	2342      	movs	r3, #66	@ 0x42
 80006a2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
  HAL_StatusTypeDef ret;
  uint8_t buffer[2] = {regAddr, data};
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
 80006ac:	79bb      	ldrb	r3, [r7, #6]
 80006ae:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
  ret = HAL_I2C_Master_Transmit(sp_hi2c, 0x42, &buffer, 2, HAL_MAX_DELAY);
 80006b2:	4b1e      	ldr	r3, [pc, #120]	@ (800072c <ov7670_write+0x9c>)
 80006b4:	6818      	ldr	r0, [r3, #0]
 80006b6:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80006ba:	f04f 33ff 	mov.w	r3, #4294967295
 80006be:	9300      	str	r3, [sp, #0]
 80006c0:	2302      	movs	r3, #2
 80006c2:	2142      	movs	r1, #66	@ 0x42
 80006c4:	f005 fd44 	bl	8006150 <HAL_I2C_Master_Transmit>
 80006c8:	4603      	mov	r3, r0
 80006ca:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
  char temp[100];
  sprintf(temp, "Write Status: %d\r\n", ret);
 80006ce:	f897 2075 	ldrb.w	r2, [r7, #117]	@ 0x75
 80006d2:	f107 030c 	add.w	r3, r7, #12
 80006d6:	4916      	ldr	r1, [pc, #88]	@ (8000730 <ov7670_write+0xa0>)
 80006d8:	4618      	mov	r0, r3
 80006da:	f00a fb3b 	bl	800ad54 <siprintf>
  HAL_UART_Transmit(&huart4,temp,strlen(temp),10);
 80006de:	f107 030c 	add.w	r3, r7, #12
 80006e2:	4618      	mov	r0, r3
 80006e4:	f7ff fe04 	bl	80002f0 <strlen>
 80006e8:	4603      	mov	r3, r0
 80006ea:	b29a      	uxth	r2, r3
 80006ec:	f107 010c 	add.w	r1, r7, #12
 80006f0:	230a      	movs	r3, #10
 80006f2:	4810      	ldr	r0, [pc, #64]	@ (8000734 <ov7670_write+0xa4>)
 80006f4:	f009 f916 	bl	8009924 <HAL_UART_Transmit>
  sprintf(temp, "Data: %x is now written into address: %x\r\n",data, regAddr);
 80006f8:	79ba      	ldrb	r2, [r7, #6]
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	f107 000c 	add.w	r0, r7, #12
 8000700:	490d      	ldr	r1, [pc, #52]	@ (8000738 <ov7670_write+0xa8>)
 8000702:	f00a fb27 	bl	800ad54 <siprintf>
  HAL_UART_Transmit(&huart4,temp,strlen(temp),10);
 8000706:	f107 030c 	add.w	r3, r7, #12
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff fdf0 	bl	80002f0 <strlen>
 8000710:	4603      	mov	r3, r0
 8000712:	b29a      	uxth	r2, r3
 8000714:	f107 010c 	add.w	r1, r7, #12
 8000718:	230a      	movs	r3, #10
 800071a:	4806      	ldr	r0, [pc, #24]	@ (8000734 <ov7670_write+0xa4>)
 800071c:	f009 f902 	bl	8009924 <HAL_UART_Transmit>
  return ret;
 8000720:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
}
 8000724:	4618      	mov	r0, r3
 8000726:	3778      	adds	r7, #120	@ 0x78
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	24000084 	.word	0x24000084
 8000730:	0800b6ac 	.word	0x0800b6ac
 8000734:	24000200 	.word	0x24000200
 8000738:	0800b6c0 	.word	0x0800b6c0

0800073c <ov7670_read>:

uint32_t ov7670_read(uint8_t regAddr, uint8_t *data)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b09e      	sub	sp, #120	@ 0x78
 8000740:	af02      	add	r7, sp, #8
 8000742:	4603      	mov	r3, r0
 8000744:	6039      	str	r1, [r7, #0]
 8000746:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef ret;
  uint16_t SLAVE_ADDR = 0x42;
 8000748:	2342      	movs	r3, #66	@ 0x42
 800074a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  ret = HAL_I2C_Master_Transmit(sp_hi2c, 0x43, &regAddr, 1, HAL_MAX_DELAY);
 800074e:	4b30      	ldr	r3, [pc, #192]	@ (8000810 <ov7670_read+0xd4>)
 8000750:	6818      	ldr	r0, [r3, #0]
 8000752:	1dfa      	adds	r2, r7, #7
 8000754:	f04f 33ff 	mov.w	r3, #4294967295
 8000758:	9300      	str	r3, [sp, #0]
 800075a:	2301      	movs	r3, #1
 800075c:	2143      	movs	r1, #67	@ 0x43
 800075e:	f005 fcf7 	bl	8006150 <HAL_I2C_Master_Transmit>
 8000762:	4603      	mov	r3, r0
 8000764:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
  char buffer [100];
  sprintf(buffer, "Read_Transmit Status: %d\r\n", ret);
 8000768:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800076c:	f107 0308 	add.w	r3, r7, #8
 8000770:	4928      	ldr	r1, [pc, #160]	@ (8000814 <ov7670_read+0xd8>)
 8000772:	4618      	mov	r0, r3
 8000774:	f00a faee 	bl	800ad54 <siprintf>
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8000778:	f107 0308 	add.w	r3, r7, #8
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff fdb7 	bl	80002f0 <strlen>
 8000782:	4603      	mov	r3, r0
 8000784:	b29a      	uxth	r2, r3
 8000786:	f107 0108 	add.w	r1, r7, #8
 800078a:	230a      	movs	r3, #10
 800078c:	4822      	ldr	r0, [pc, #136]	@ (8000818 <ov7670_read+0xdc>)
 800078e:	f009 f8c9 	bl	8009924 <HAL_UART_Transmit>
  ret = HAL_I2C_Master_Receive(sp_hi2c, 0x43, data, 1, HAL_MAX_DELAY);
 8000792:	4b1f      	ldr	r3, [pc, #124]	@ (8000810 <ov7670_read+0xd4>)
 8000794:	6818      	ldr	r0, [r3, #0]
 8000796:	f04f 33ff 	mov.w	r3, #4294967295
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	2301      	movs	r3, #1
 800079e:	683a      	ldr	r2, [r7, #0]
 80007a0:	2143      	movs	r1, #67	@ 0x43
 80007a2:	f005 fdc9 	bl	8006338 <HAL_I2C_Master_Receive>
 80007a6:	4603      	mov	r3, r0
 80007a8:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
  sprintf(buffer, "Read_Receive Status: %d\r\n", ret);
 80007ac:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80007b0:	f107 0308 	add.w	r3, r7, #8
 80007b4:	4919      	ldr	r1, [pc, #100]	@ (800081c <ov7670_read+0xe0>)
 80007b6:	4618      	mov	r0, r3
 80007b8:	f00a facc 	bl	800ad54 <siprintf>
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 80007bc:	f107 0308 	add.w	r3, r7, #8
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff fd95 	bl	80002f0 <strlen>
 80007c6:	4603      	mov	r3, r0
 80007c8:	b29a      	uxth	r2, r3
 80007ca:	f107 0108 	add.w	r1, r7, #8
 80007ce:	230a      	movs	r3, #10
 80007d0:	4811      	ldr	r0, [pc, #68]	@ (8000818 <ov7670_read+0xdc>)
 80007d2:	f009 f8a7 	bl	8009924 <HAL_UART_Transmit>
  sprintf(buffer, "Address: %x; Data: %x\r\n", regAddr, *data);
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	461a      	mov	r2, r3
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	f107 0008 	add.w	r0, r7, #8
 80007e2:	490f      	ldr	r1, [pc, #60]	@ (8000820 <ov7670_read+0xe4>)
 80007e4:	f00a fab6 	bl	800ad54 <siprintf>
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 80007e8:	f107 0308 	add.w	r3, r7, #8
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff fd7f 	bl	80002f0 <strlen>
 80007f2:	4603      	mov	r3, r0
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	f107 0108 	add.w	r1, r7, #8
 80007fa:	230a      	movs	r3, #10
 80007fc:	4806      	ldr	r0, [pc, #24]	@ (8000818 <ov7670_read+0xdc>)
 80007fe:	f009 f891 	bl	8009924 <HAL_UART_Transmit>
  return ret;
 8000802:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
}
 8000806:	4618      	mov	r0, r3
 8000808:	3770      	adds	r7, #112	@ 0x70
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	24000084 	.word	0x24000084
 8000814:	0800b6ec 	.word	0x0800b6ec
 8000818:	24000200 	.word	0x24000200
 800081c:	0800b708 	.word	0x0800b708
 8000820:	0800b724 	.word	0x0800b724

08000824 <ov7670_init>:

uint32_t ov7670_init(I2C_HandleTypeDef *p_hi2c)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b09c      	sub	sp, #112	@ 0x70
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
//  sp_hdcmi     = p_hdcmi;
//  sp_hdma_dcmi = p_hdma_dcmi;
  sp_hi2c      = p_hi2c;
 800082c:	4a1e      	ldr	r2, [pc, #120]	@ (80008a8 <ov7670_init+0x84>)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	6013      	str	r3, [r2, #0]
 // s_destAddressForContiuousMode = 0;

  HAL_GPIO_WritePin(CAM_RST_GPIO_Port, CAM_RST_Pin, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	2120      	movs	r1, #32
 8000836:	481d      	ldr	r0, [pc, #116]	@ (80008ac <ov7670_init+0x88>)
 8000838:	f005 fbe0 	bl	8005ffc <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800083c:	2064      	movs	r0, #100	@ 0x64
 800083e:	f001 fa7f 	bl	8001d40 <HAL_Delay>
  HAL_GPIO_WritePin(CAM_RST_GPIO_Port, CAM_RST_Pin, GPIO_PIN_SET);
 8000842:	2201      	movs	r2, #1
 8000844:	2120      	movs	r1, #32
 8000846:	4819      	ldr	r0, [pc, #100]	@ (80008ac <ov7670_init+0x88>)
 8000848:	f005 fbd8 	bl	8005ffc <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800084c:	2064      	movs	r0, #100	@ 0x64
 800084e:	f001 fa77 	bl	8001d40 <HAL_Delay>
  char temp[100];
  sprintf(temp, "Initializing OV7670...\r\n");
 8000852:	f107 030c 	add.w	r3, r7, #12
 8000856:	4916      	ldr	r1, [pc, #88]	@ (80008b0 <ov7670_init+0x8c>)
 8000858:	4618      	mov	r0, r3
 800085a:	f00a fa7b 	bl	800ad54 <siprintf>
  ov7670_write(0x12, 0x80);  // RESET
 800085e:	2180      	movs	r1, #128	@ 0x80
 8000860:	2012      	movs	r0, #18
 8000862:	f7ff ff15 	bl	8000690 <ov7670_write>
  HAL_Delay(100);
 8000866:	2064      	movs	r0, #100	@ 0x64
 8000868:	f001 fa6a 	bl	8001d40 <HAL_Delay>
  HAL_UART_Transmit(&huart4,temp,strlen(temp),10);
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff fd3d 	bl	80002f0 <strlen>
 8000876:	4603      	mov	r3, r0
 8000878:	b29a      	uxth	r2, r3
 800087a:	f107 010c 	add.w	r1, r7, #12
 800087e:	230a      	movs	r3, #10
 8000880:	480c      	ldr	r0, [pc, #48]	@ (80008b4 <ov7670_init+0x90>)
 8000882:	f009 f84f 	bl	8009924 <HAL_UART_Transmit>
  HAL_Delay(100);
 8000886:	2064      	movs	r0, #100	@ 0x64
 8000888:	f001 fa5a 	bl	8001d40 <HAL_Delay>
  uint8_t buffer[4];
  ov7670_read(0x0F, buffer);
 800088c:	f107 0308 	add.w	r3, r7, #8
 8000890:	4619      	mov	r1, r3
 8000892:	200f      	movs	r0, #15
 8000894:	f7ff ff52 	bl	800073c <ov7670_read>
  HAL_Delay(100);
 8000898:	2064      	movs	r0, #100	@ 0x64
 800089a:	f001 fa51 	bl	8001d40 <HAL_Delay>


  return 1;
 800089e:	2301      	movs	r3, #1
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3770      	adds	r7, #112	@ 0x70
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	24000084 	.word	0x24000084
 80008ac:	58020000 	.word	0x58020000
 80008b0:	0800b73c 	.word	0x0800b73c
 80008b4:	24000200 	.word	0x24000200

080008b8 <ov7670_stopCap>:

//DCMI Data Transfer
static uint32_t s_dstAddress;

uint32_t ov7670_stopCap()
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b09a      	sub	sp, #104	@ 0x68
 80008bc:	af00      	add	r7, sp, #0
  char buffer [100];
  HAL_StatusTypeDef ret;
  ret = HAL_DCMI_Stop(sp_hdcmi);
 80008be:	4b08      	ldr	r3, [pc, #32]	@ (80008e0 <ov7670_stopCap+0x28>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4618      	mov	r0, r3
 80008c4:	f001 fcac 	bl	8002220 <HAL_DCMI_Stop>
 80008c8:	4603      	mov	r3, r0
 80008ca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  s_dstAddress = 0;
 80008ce:	4b05      	ldr	r3, [pc, #20]	@ (80008e4 <ov7670_stopCap+0x2c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
  return 0;
 80008d4:	2300      	movs	r3, #0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3768      	adds	r7, #104	@ 0x68
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	24000000 	.word	0x24000000
 80008e4:	24000088 	.word	0x24000088

080008e8 <ov7670_startCap>:

uint32_t ov7670_startCap(uint32_t destAddress)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b09c      	sub	sp, #112	@ 0x70
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret;
  ov7670_stopCap();
 80008f0:	f7ff ffe2 	bl	80008b8 <ov7670_stopCap>
  /* note: continuous mode automatically invokes DCMI, but DMA needs to be invoked manually */
  s_dstAddress = destAddress;
 80008f4:	4a14      	ldr	r2, [pc, #80]	@ (8000948 <ov7670_startCap+0x60>)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6013      	str	r3, [r2, #0]
  ret = HAL_DCMI_Start_DMA(sp_hdcmi,1, destAddress, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT / 2); //mode 1 for single frame
 80008fa:	4b14      	ldr	r3, [pc, #80]	@ (800094c <ov7670_startCap+0x64>)
 80008fc:	6818      	ldr	r0, [r3, #0]
 80008fe:	f44f 5346 	mov.w	r3, #12672	@ 0x3180
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	2101      	movs	r1, #1
 8000906:	f001 fbc9 	bl	800209c <HAL_DCMI_Start_DMA>
 800090a:	4603      	mov	r3, r0
 800090c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  ov7670_stopCap();
 8000910:	f7ff ffd2 	bl	80008b8 <ov7670_stopCap>
  char buffer [100];
  sprintf(buffer, "Return code: %d\r\n", ret);
 8000914:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 8000918:	f107 0308 	add.w	r3, r7, #8
 800091c:	490c      	ldr	r1, [pc, #48]	@ (8000950 <ov7670_startCap+0x68>)
 800091e:	4618      	mov	r0, r3
 8000920:	f00a fa18 	bl	800ad54 <siprintf>
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8000924:	f107 0308 	add.w	r3, r7, #8
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff fce1 	bl	80002f0 <strlen>
 800092e:	4603      	mov	r3, r0
 8000930:	b29a      	uxth	r2, r3
 8000932:	f107 0108 	add.w	r1, r7, #8
 8000936:	230a      	movs	r3, #10
 8000938:	4806      	ldr	r0, [pc, #24]	@ (8000954 <ov7670_startCap+0x6c>)
 800093a:	f008 fff3 	bl	8009924 <HAL_UART_Transmit>
  return 0;
 800093e:	2300      	movs	r3, #0
}
 8000940:	4618      	mov	r0, r3
 8000942:	3770      	adds	r7, #112	@ 0x70
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	24000088 	.word	0x24000088
 800094c:	24000000 	.word	0x24000000
 8000950:	0800b758 	.word	0x0800b758
 8000954:	24000200 	.word	0x24000200

08000958 <HAL_DCMI_FrameEventCallback>:

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  if(s_dstAddress != 0) {
 8000960:	4b09      	ldr	r3, [pc, #36]	@ (8000988 <HAL_DCMI_FrameEventCallback+0x30>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d00b      	beq.n	8000980 <HAL_DCMI_FrameEventCallback+0x28>
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, s_dstAddress, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT / 2);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	3328      	adds	r3, #40	@ 0x28
 8000972:	4619      	mov	r1, r3
 8000974:	4b04      	ldr	r3, [pc, #16]	@ (8000988 <HAL_DCMI_FrameEventCallback+0x30>)
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	f44f 5346 	mov.w	r3, #12672	@ 0x3180
 800097c:	f002 f98e 	bl	8002c9c <HAL_DMA_Start_IT>
  }
}
 8000980:	bf00      	nop
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	24000088 	.word	0x24000088

0800098c <lcd_send_cmd>:
#include "main.h"
I2C_HandleTypeDef  *lcd_sp_hi2c;
extern UART_HandleTypeDef huart4;
uint16_t SLAVE_ADDRESS_LCD = 0x4E;
void lcd_send_cmd (char cmd)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af02      	add	r7, sp, #8
 8000992:	4603      	mov	r3, r0
 8000994:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	f023 030f 	bic.w	r3, r3, #15
 800099c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	011b      	lsls	r3, r3, #4
 80009a2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80009a4:	7bfb      	ldrb	r3, [r7, #15]
 80009a6:	f043 030c 	orr.w	r3, r3, #12
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80009ae:	7bfb      	ldrb	r3, [r7, #15]
 80009b0:	f043 0308 	orr.w	r3, r3, #8
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80009b8:	7bbb      	ldrb	r3, [r7, #14]
 80009ba:	f043 030c 	orr.w	r3, r3, #12
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80009c2:	7bbb      	ldrb	r3, [r7, #14]
 80009c4:	f043 0308 	orr.w	r3, r3, #8
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	72fb      	strb	r3, [r7, #11]
	uint16_t ret = HAL_I2C_Master_Transmit (lcd_sp_hi2c, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80009cc:	4b08      	ldr	r3, [pc, #32]	@ (80009f0 <lcd_send_cmd+0x64>)
 80009ce:	6818      	ldr	r0, [r3, #0]
 80009d0:	4b08      	ldr	r3, [pc, #32]	@ (80009f4 <lcd_send_cmd+0x68>)
 80009d2:	8819      	ldrh	r1, [r3, #0]
 80009d4:	f107 0208 	add.w	r2, r7, #8
 80009d8:	2364      	movs	r3, #100	@ 0x64
 80009da:	9300      	str	r3, [sp, #0]
 80009dc:	2304      	movs	r3, #4
 80009de:	f005 fbb7 	bl	8006150 <HAL_I2C_Master_Transmit>
 80009e2:	4603      	mov	r3, r0
 80009e4:	81bb      	strh	r3, [r7, #12]
}
 80009e6:	bf00      	nop
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	2400008c 	.word	0x2400008c
 80009f4:	24000004 	.word	0x24000004

080009f8 <lcd_send_data>:

void lcd_send_data (char data)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af02      	add	r7, sp, #8
 80009fe:	4603      	mov	r3, r0
 8000a00:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	f023 030f 	bic.w	r3, r3, #15
 8000a08:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	011b      	lsls	r3, r3, #4
 8000a0e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8000a10:	7bfb      	ldrb	r3, [r7, #15]
 8000a12:	f043 030d 	orr.w	r3, r3, #13
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8000a1a:	7bfb      	ldrb	r3, [r7, #15]
 8000a1c:	f043 0309 	orr.w	r3, r3, #9
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8000a24:	7bbb      	ldrb	r3, [r7, #14]
 8000a26:	f043 030d 	orr.w	r3, r3, #13
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8000a2e:	7bbb      	ldrb	r3, [r7, #14]
 8000a30:	f043 0309 	orr.w	r3, r3, #9
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (lcd_sp_hi2c, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000a38:	4b07      	ldr	r3, [pc, #28]	@ (8000a58 <lcd_send_data+0x60>)
 8000a3a:	6818      	ldr	r0, [r3, #0]
 8000a3c:	4b07      	ldr	r3, [pc, #28]	@ (8000a5c <lcd_send_data+0x64>)
 8000a3e:	8819      	ldrh	r1, [r3, #0]
 8000a40:	f107 0208 	add.w	r2, r7, #8
 8000a44:	2364      	movs	r3, #100	@ 0x64
 8000a46:	9300      	str	r3, [sp, #0]
 8000a48:	2304      	movs	r3, #4
 8000a4a:	f005 fb81 	bl	8006150 <HAL_I2C_Master_Transmit>
}
 8000a4e:	bf00      	nop
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	2400008c 	.word	0x2400008c
 8000a5c:	24000004 	.word	0x24000004

08000a60 <lcd_send_string>:
void lcd_send_string (char *str)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	while (*str) {
 8000a68:	e009      	b.n	8000a7e <lcd_send_string+0x1e>
		HAL_Delay(10);
 8000a6a:	200a      	movs	r0, #10
 8000a6c:	f001 f968 	bl	8001d40 <HAL_Delay>
		lcd_send_data (*str++);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	1c5a      	adds	r2, r3, #1
 8000a74:	607a      	str	r2, [r7, #4]
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff ffbd 	bl	80009f8 <lcd_send_data>
	while (*str) {
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d1f1      	bne.n	8000a6a <lcd_send_string+0xa>
	}
}
 8000a86:	bf00      	nop
 8000a88:	bf00      	nop
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <lcd_init>:

void lcd_init (I2C_HandleTypeDef* p_hi2c)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
	lcd_sp_hi2c = p_hi2c;
 8000a98:	4a21      	ldr	r2, [pc, #132]	@ (8000b20 <lcd_init+0x90>)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6013      	str	r3, [r2, #0]
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000a9e:	2032      	movs	r0, #50	@ 0x32
 8000aa0:	f001 f94e 	bl	8001d40 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000aa4:	2030      	movs	r0, #48	@ 0x30
 8000aa6:	f7ff ff71 	bl	800098c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000aaa:	2005      	movs	r0, #5
 8000aac:	f001 f948 	bl	8001d40 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000ab0:	2030      	movs	r0, #48	@ 0x30
 8000ab2:	f7ff ff6b 	bl	800098c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	f001 f942 	bl	8001d40 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000abc:	2030      	movs	r0, #48	@ 0x30
 8000abe:	f7ff ff65 	bl	800098c <lcd_send_cmd>
	HAL_Delay(10);
 8000ac2:	200a      	movs	r0, #10
 8000ac4:	f001 f93c 	bl	8001d40 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000ac8:	2020      	movs	r0, #32
 8000aca:	f7ff ff5f 	bl	800098c <lcd_send_cmd>
	HAL_Delay(10);
 8000ace:	200a      	movs	r0, #10
 8000ad0:	f001 f936 	bl	8001d40 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000ad4:	2028      	movs	r0, #40	@ 0x28
 8000ad6:	f7ff ff59 	bl	800098c <lcd_send_cmd>
	HAL_Delay(1);
 8000ada:	2001      	movs	r0, #1
 8000adc:	f001 f930 	bl	8001d40 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000ae0:	2008      	movs	r0, #8
 8000ae2:	f7ff ff53 	bl	800098c <lcd_send_cmd>
	HAL_Delay(1);
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	f001 f92a 	bl	8001d40 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000aec:	2001      	movs	r0, #1
 8000aee:	f7ff ff4d 	bl	800098c <lcd_send_cmd>
	HAL_Delay(1);
 8000af2:	2001      	movs	r0, #1
 8000af4:	f001 f924 	bl	8001d40 <HAL_Delay>
	HAL_Delay(1);
 8000af8:	2001      	movs	r0, #1
 8000afa:	f001 f921 	bl	8001d40 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000afe:	2006      	movs	r0, #6
 8000b00:	f7ff ff44 	bl	800098c <lcd_send_cmd>
	HAL_Delay(1);
 8000b04:	2001      	movs	r0, #1
 8000b06:	f001 f91b 	bl	8001d40 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000b0a:	200c      	movs	r0, #12
 8000b0c:	f7ff ff3e 	bl	800098c <lcd_send_cmd>
	lcd_send_string("");
 8000b10:	4804      	ldr	r0, [pc, #16]	@ (8000b24 <lcd_init+0x94>)
 8000b12:	f7ff ffa5 	bl	8000a60 <lcd_send_string>
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	2400008c 	.word	0x2400008c
 8000b24:	0800b76c 	.word	0x0800b76c

08000b28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	f5ad 4d46 	sub.w	sp, sp, #50688	@ 0xc600
 8000b2e:	b0b6      	sub	sp, #216	@ 0xd8
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b32:	f001 f873 	bl	8001c1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b36:	f000 f96b 	bl	8000e10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b3a:	f000 fb5d 	bl	80011f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b3e:	f000 fb3b 	bl	80011b8 <MX_DMA_Init>
  MX_USB_OTG_HS_USB_Init();
 8000b42:	f000 fb31 	bl	80011a8 <MX_USB_OTG_HS_USB_Init>
  MX_UART4_Init();
 8000b46:	f000 fa97 	bl	8001078 <MX_UART4_Init>
  MX_I2C1_Init();
 8000b4a:	f000 fa15 	bl	8000f78 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000b4e:	f000 fa53 	bl	8000ff8 <MX_I2C2_Init>
  MX_DCMI_Init();
 8000b52:	f000 f9dd 	bl	8000f10 <MX_DCMI_Init>
  MX_USART3_UART_Init();
 8000b56:	f000 fadb 	bl	8001110 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_init(&hi2c2);
 8000b5a:	48a0      	ldr	r0, [pc, #640]	@ (8000ddc <main+0x2b4>)
 8000b5c:	f7ff ff98 	bl	8000a90 <lcd_init>
  lcd_send_string("Initializing...");
 8000b60:	489f      	ldr	r0, [pc, #636]	@ (8000de0 <main+0x2b8>)
 8000b62:	f7ff ff7d 	bl	8000a60 <lcd_send_string>
  ov7670_init(&hi2c1);
 8000b66:	489f      	ldr	r0, [pc, #636]	@ (8000de4 <main+0x2bc>)
 8000b68:	f7ff fe5c 	bl	8000824 <ov7670_init>
  uint8_t data[100];
  for (int i = 0; i < 128; i++) {
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	f24c 62d4 	movw	r2, #50900	@ 0xc6d4
 8000b72:	443a      	add	r2, r7
 8000b74:	6013      	str	r3, [r2, #0]
 8000b76:	e017      	b.n	8000ba8 <main+0x80>
	  HAL_Delay(100);
 8000b78:	2064      	movs	r0, #100	@ 0x64
 8000b7a:	f001 f8e1 	bl	8001d40 <HAL_Delay>
	  ov7670_read(i,data);
 8000b7e:	f24c 63d4 	movw	r3, #50900	@ 0xc6d4
 8000b82:	443b      	add	r3, r7
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	f24c 6268 	movw	r2, #50792	@ 0xc668
 8000b8c:	443a      	add	r2, r7
 8000b8e:	4611      	mov	r1, r2
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff fdd3 	bl	800073c <ov7670_read>
  for (int i = 0; i < 128; i++) {
 8000b96:	f24c 63d4 	movw	r3, #50900	@ 0xc6d4
 8000b9a:	443b      	add	r3, r7
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	f24c 62d4 	movw	r2, #50900	@ 0xc6d4
 8000ba4:	443a      	add	r2, r7
 8000ba6:	6013      	str	r3, [r2, #0]
 8000ba8:	f24c 63d4 	movw	r3, #50900	@ 0xc6d4
 8000bac:	443b      	add	r3, r7
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b7f      	cmp	r3, #127	@ 0x7f
 8000bb2:	dde1      	ble.n	8000b78 <main+0x50>
  }
  lcd_init(&hi2c2);
 8000bb4:	4889      	ldr	r0, [pc, #548]	@ (8000ddc <main+0x2b4>)
 8000bb6:	f7ff ff6b 	bl	8000a90 <lcd_init>
  lcd_send_string("81 loaded to x15");
 8000bba:	488b      	ldr	r0, [pc, #556]	@ (8000de8 <main+0x2c0>)
 8000bbc:	f7ff ff50 	bl	8000a60 <lcd_send_string>
  HAL_Delay(100);
 8000bc0:	2064      	movs	r0, #100	@ 0x64
 8000bc2:	f001 f8bd 	bl	8001d40 <HAL_Delay>
  ov7670_write(0x15,0x81);
 8000bc6:	2181      	movs	r1, #129	@ 0x81
 8000bc8:	2015      	movs	r0, #21
 8000bca:	f7ff fd61 	bl	8000690 <ov7670_write>
  HAL_Delay(100);
 8000bce:	2064      	movs	r0, #100	@ 0x64
 8000bd0:	f001 f8b6 	bl	8001d40 <HAL_Delay>
  ov7670_read(0x15,data);
 8000bd4:	f24c 6368 	movw	r3, #50792	@ 0xc668
 8000bd8:	443b      	add	r3, r7
 8000bda:	4619      	mov	r1, r3
 8000bdc:	2015      	movs	r0, #21
 8000bde:	f7ff fdad 	bl	800073c <ov7670_read>
  char buffer [100];
  sprintf(buffer, "Addr:0x15; D:%x;", *data);
 8000be2:	f24c 6368 	movw	r3, #50792	@ 0xc668
 8000be6:	443b      	add	r3, r7
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	461a      	mov	r2, r3
 8000bec:	f24c 6304 	movw	r3, #50692	@ 0xc604
 8000bf0:	443b      	add	r3, r7
 8000bf2:	497e      	ldr	r1, [pc, #504]	@ (8000dec <main+0x2c4>)
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f00a f8ad 	bl	800ad54 <siprintf>
  lcd_init(&hi2c2);
 8000bfa:	4878      	ldr	r0, [pc, #480]	@ (8000ddc <main+0x2b4>)
 8000bfc:	f7ff ff48 	bl	8000a90 <lcd_init>
  lcd_send_string(buffer);
 8000c00:	f24c 6304 	movw	r3, #50692	@ 0xc604
 8000c04:	443b      	add	r3, r7
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff ff2a 	bl	8000a60 <lcd_send_string>
  HAL_Delay(100);
 8000c0c:	2064      	movs	r0, #100	@ 0x64
 8000c0e:	f001 f897 	bl	8001d40 <HAL_Delay>
  ov7670_init(&hi2c1);
 8000c12:	4874      	ldr	r0, [pc, #464]	@ (8000de4 <main+0x2bc>)
 8000c14:	f7ff fe06 	bl	8000824 <ov7670_init>
  lcd_init(&hi2c2);
 8000c18:	4870      	ldr	r0, [pc, #448]	@ (8000ddc <main+0x2b4>)
 8000c1a:	f7ff ff39 	bl	8000a90 <lcd_init>
  lcd_send_string("Resetting OV7670...");
 8000c1e:	4874      	ldr	r0, [pc, #464]	@ (8000df0 <main+0x2c8>)
 8000c20:	f7ff ff1e 	bl	8000a60 <lcd_send_string>
  HAL_Delay(100);
 8000c24:	2064      	movs	r0, #100	@ 0x64
 8000c26:	f001 f88b 	bl	8001d40 <HAL_Delay>
  ov7670_read(0x15,data);
 8000c2a:	f24c 6368 	movw	r3, #50792	@ 0xc668
 8000c2e:	443b      	add	r3, r7
 8000c30:	4619      	mov	r1, r3
 8000c32:	2015      	movs	r0, #21
 8000c34:	f7ff fd82 	bl	800073c <ov7670_read>
  sprintf(buffer, "Addr:0x15; D:%x;", *data);
 8000c38:	f24c 6368 	movw	r3, #50792	@ 0xc668
 8000c3c:	443b      	add	r3, r7
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	461a      	mov	r2, r3
 8000c42:	f24c 6304 	movw	r3, #50692	@ 0xc604
 8000c46:	443b      	add	r3, r7
 8000c48:	4968      	ldr	r1, [pc, #416]	@ (8000dec <main+0x2c4>)
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f00a f882 	bl	800ad54 <siprintf>
  lcd_init(&hi2c2);
 8000c50:	4862      	ldr	r0, [pc, #392]	@ (8000ddc <main+0x2b4>)
 8000c52:	f7ff ff1d 	bl	8000a90 <lcd_init>
  lcd_send_string(buffer);
 8000c56:	f24c 6304 	movw	r3, #50692	@ 0xc604
 8000c5a:	443b      	add	r3, r7
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff feff 	bl	8000a60 <lcd_send_string>
  HAL_Delay(100);
 8000c62:	2064      	movs	r0, #100	@ 0x64
 8000c64:	f001 f86c 	bl	8001d40 <HAL_Delay>
  lcd_init(&hi2c2);
 8000c68:	485c      	ldr	r0, [pc, #368]	@ (8000ddc <main+0x2b4>)
 8000c6a:	f7ff ff11 	bl	8000a90 <lcd_init>
  lcd_send_string("Init Completed");
 8000c6e:	4861      	ldr	r0, [pc, #388]	@ (8000df4 <main+0x2cc>)
 8000c70:	f7ff fef6 	bl	8000a60 <lcd_send_string>
  HAL_Delay(100);
 8000c74:	2064      	movs	r0, #100	@ 0x64
 8000c76:	f001 f863 	bl	8001d40 <HAL_Delay>
  ov7670_write(0xc,0x08); //Enable QVGA mode
 8000c7a:	2108      	movs	r1, #8
 8000c7c:	200c      	movs	r0, #12
 8000c7e:	f7ff fd07 	bl	8000690 <ov7670_write>
  ov7670_write(0x12,0x08); //Enable QVGA mode
 8000c82:	2108      	movs	r1, #8
 8000c84:	2012      	movs	r0, #18
 8000c86:	f7ff fd03 	bl	8000690 <ov7670_write>
//  ov7670_write(0x12,0x09);
//  ov7670_write(0x40,0xD0);
  ov7670_read(0x12,data);
 8000c8a:	f24c 6368 	movw	r3, #50792	@ 0xc668
 8000c8e:	443b      	add	r3, r7
 8000c90:	4619      	mov	r1, r3
 8000c92:	2012      	movs	r0, #18
 8000c94:	f7ff fd52 	bl	800073c <ov7670_read>

  lcd_init(&hi2c2);
 8000c98:	4850      	ldr	r0, [pc, #320]	@ (8000ddc <main+0x2b4>)
 8000c9a:	f7ff fef9 	bl	8000a90 <lcd_init>
  lcd_send_string("DCMI Rewriting");
 8000c9e:	4856      	ldr	r0, [pc, #344]	@ (8000df8 <main+0x2d0>)
 8000ca0:	f7ff fede 	bl	8000a60 <lcd_send_string>
  uint32_t imagedata[176 * 144 /2];
  for (int i = 0; i < 176*144 / 2; ++i) {
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	f24c 62d0 	movw	r2, #50896	@ 0xc6d0
 8000caa:	443a      	add	r2, r7
 8000cac:	6013      	str	r3, [r2, #0]
 8000cae:	e013      	b.n	8000cd8 <main+0x1b0>
	  imagedata[i] = 0;
 8000cb0:	f507 63db 	add.w	r3, r7, #1752	@ 0x6d8
 8000cb4:	f2a3 63d4 	subw	r3, r3, #1748	@ 0x6d4
 8000cb8:	f24c 62d0 	movw	r2, #50896	@ 0xc6d0
 8000cbc:	443a      	add	r2, r7
 8000cbe:	6812      	ldr	r2, [r2, #0]
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (int i = 0; i < 176*144 / 2; ++i) {
 8000cc6:	f24c 63d0 	movw	r3, #50896	@ 0xc6d0
 8000cca:	443b      	add	r3, r7
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	f24c 62d0 	movw	r2, #50896	@ 0xc6d0
 8000cd4:	443a      	add	r2, r7
 8000cd6:	6013      	str	r3, [r2, #0]
 8000cd8:	f24c 63d0 	movw	r3, #50896	@ 0xc6d0
 8000cdc:	443b      	add	r3, r7
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f5b3 5f46 	cmp.w	r3, #12672	@ 0x3180
 8000ce4:	dbe4      	blt.n	8000cb0 <main+0x188>
  }
  lcd_init(&hi2c2);
 8000ce6:	483d      	ldr	r0, [pc, #244]	@ (8000ddc <main+0x2b4>)
 8000ce8:	f7ff fed2 	bl	8000a90 <lcd_init>
  lcd_send_string("DCMI Done");
 8000cec:	4843      	ldr	r0, [pc, #268]	@ (8000dfc <main+0x2d4>)
 8000cee:	f7ff feb7 	bl	8000a60 <lcd_send_string>
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8000cf2:	f24c 6304 	movw	r3, #50692	@ 0xc604
 8000cf6:	443b      	add	r3, r7
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff faf9 	bl	80002f0 <strlen>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	b29a      	uxth	r2, r3
 8000d02:	f24c 6104 	movw	r1, #50692	@ 0xc604
 8000d06:	4439      	add	r1, r7
 8000d08:	230a      	movs	r3, #10
 8000d0a:	483d      	ldr	r0, [pc, #244]	@ (8000e00 <main+0x2d8>)
 8000d0c:	f008 fe0a 	bl	8009924 <HAL_UART_Transmit>
  sprintf(buffer, "imagedata address: %x\r\n", imagedata); //240f3924
 8000d10:	4b3c      	ldr	r3, [pc, #240]	@ (8000e04 <main+0x2dc>)
 8000d12:	f503 4346 	add.w	r3, r3, #50688	@ 0xc600
 8000d16:	f103 03d8 	add.w	r3, r3, #216	@ 0xd8
 8000d1a:	443b      	add	r3, r7
 8000d1c:	f24c 6004 	movw	r0, #50692	@ 0xc604
 8000d20:	4438      	add	r0, r7
 8000d22:	461a      	mov	r2, r3
 8000d24:	4938      	ldr	r1, [pc, #224]	@ (8000e08 <main+0x2e0>)
 8000d26:	f00a f815 	bl	800ad54 <siprintf>
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8000d2a:	f24c 6304 	movw	r3, #50692	@ 0xc604
 8000d2e:	443b      	add	r3, r7
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff fadd 	bl	80002f0 <strlen>
 8000d36:	4603      	mov	r3, r0
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	f24c 6104 	movw	r1, #50692	@ 0xc604
 8000d3e:	4439      	add	r1, r7
 8000d40:	230a      	movs	r3, #10
 8000d42:	482f      	ldr	r0, [pc, #188]	@ (8000e00 <main+0x2d8>)
 8000d44:	f008 fdee 	bl	8009924 <HAL_UART_Transmit>
  imagedata[0] = 0xFF;
 8000d48:	f507 63db 	add.w	r3, r7, #1752	@ 0x6d8
 8000d4c:	f2a3 63d4 	subw	r3, r3, #1748	@ 0x6d4
 8000d50:	22ff      	movs	r2, #255	@ 0xff
 8000d52:	601a      	str	r2, [r3, #0]
  ov7670_startCap(imagedata);
 8000d54:	4b2b      	ldr	r3, [pc, #172]	@ (8000e04 <main+0x2dc>)
 8000d56:	f503 4346 	add.w	r3, r3, #50688	@ 0xc600
 8000d5a:	f103 03d8 	add.w	r3, r3, #216	@ 0xd8
 8000d5e:	443b      	add	r3, r7
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff fdc1 	bl	80008e8 <ov7670_startCap>
  for (int i = 0; i < 176*144 / 2; ++i) {
 8000d66:	2300      	movs	r3, #0
 8000d68:	f24c 62cc 	movw	r2, #50892	@ 0xc6cc
 8000d6c:	443a      	add	r2, r7
 8000d6e:	6013      	str	r3, [r2, #0]
 8000d70:	e02b      	b.n	8000dca <main+0x2a2>
	sprintf(buffer, "index: %d, data: %x\r\n",i, imagedata[i]);
 8000d72:	f507 63db 	add.w	r3, r7, #1752	@ 0x6d8
 8000d76:	f2a3 63d4 	subw	r3, r3, #1748	@ 0x6d4
 8000d7a:	f24c 62cc 	movw	r2, #50892	@ 0xc6cc
 8000d7e:	443a      	add	r2, r7
 8000d80:	6812      	ldr	r2, [r2, #0]
 8000d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d86:	f24c 6004 	movw	r0, #50692	@ 0xc604
 8000d8a:	4438      	add	r0, r7
 8000d8c:	f24c 62cc 	movw	r2, #50892	@ 0xc6cc
 8000d90:	443a      	add	r2, r7
 8000d92:	6812      	ldr	r2, [r2, #0]
 8000d94:	491d      	ldr	r1, [pc, #116]	@ (8000e0c <main+0x2e4>)
 8000d96:	f009 ffdd 	bl	800ad54 <siprintf>
	HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8000d9a:	f24c 6304 	movw	r3, #50692	@ 0xc604
 8000d9e:	443b      	add	r3, r7
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff faa5 	bl	80002f0 <strlen>
 8000da6:	4603      	mov	r3, r0
 8000da8:	b29a      	uxth	r2, r3
 8000daa:	f24c 6104 	movw	r1, #50692	@ 0xc604
 8000dae:	4439      	add	r1, r7
 8000db0:	230a      	movs	r3, #10
 8000db2:	4813      	ldr	r0, [pc, #76]	@ (8000e00 <main+0x2d8>)
 8000db4:	f008 fdb6 	bl	8009924 <HAL_UART_Transmit>
  for (int i = 0; i < 176*144 / 2; ++i) {
 8000db8:	f24c 63cc 	movw	r3, #50892	@ 0xc6cc
 8000dbc:	443b      	add	r3, r7
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	f24c 62cc 	movw	r2, #50892	@ 0xc6cc
 8000dc6:	443a      	add	r2, r7
 8000dc8:	6013      	str	r3, [r2, #0]
 8000dca:	f24c 63cc 	movw	r3, #50892	@ 0xc6cc
 8000dce:	443b      	add	r3, r7
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f5b3 5f46 	cmp.w	r3, #12672	@ 0x3180
 8000dd6:	dbcc      	blt.n	8000d72 <main+0x24a>
  }
  while (1)
 8000dd8:	bf00      	nop
 8000dda:	e7fd      	b.n	8000dd8 <main+0x2b0>
 8000ddc:	240001ac 	.word	0x240001ac
 8000de0:	0800b770 	.word	0x0800b770
 8000de4:	24000158 	.word	0x24000158
 8000de8:	0800b780 	.word	0x0800b780
 8000dec:	0800b794 	.word	0x0800b794
 8000df0:	0800b7a8 	.word	0x0800b7a8
 8000df4:	0800b7bc 	.word	0x0800b7bc
 8000df8:	0800b7cc 	.word	0x0800b7cc
 8000dfc:	0800b7dc 	.word	0x0800b7dc
 8000e00:	24000200 	.word	0x24000200
 8000e04:	ffff392c 	.word	0xffff392c
 8000e08:	0800b7e8 	.word	0x0800b7e8
 8000e0c:	0800b800 	.word	0x0800b800

08000e10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b09c      	sub	sp, #112	@ 0x70
 8000e14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e1a:	224c      	movs	r2, #76	@ 0x4c
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f009 ffb8 	bl	800ad94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	2220      	movs	r2, #32
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f009 ffb2 	bl	800ad94 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000e30:	4b35      	ldr	r3, [pc, #212]	@ (8000f08 <SystemClock_Config+0xf8>)
 8000e32:	f04f 32ff 	mov.w	r2, #4294967295
 8000e36:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000e3a:	2004      	movs	r0, #4
 8000e3c:	f005 fec0 	bl	8006bc0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000e40:	2300      	movs	r3, #0
 8000e42:	603b      	str	r3, [r7, #0]
 8000e44:	4b31      	ldr	r3, [pc, #196]	@ (8000f0c <SystemClock_Config+0xfc>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	4a30      	ldr	r2, [pc, #192]	@ (8000f0c <SystemClock_Config+0xfc>)
 8000e4a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e4e:	6193      	str	r3, [r2, #24]
 8000e50:	4b2e      	ldr	r3, [pc, #184]	@ (8000f0c <SystemClock_Config+0xfc>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e58:	603b      	str	r3, [r7, #0]
 8000e5a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e5c:	bf00      	nop
 8000e5e:	4b2b      	ldr	r3, [pc, #172]	@ (8000f0c <SystemClock_Config+0xfc>)
 8000e60:	699b      	ldr	r3, [r3, #24]
 8000e62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e6a:	d1f8      	bne.n	8000e5e <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000e6c:	2323      	movs	r3, #35	@ 0x23
 8000e6e:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e70:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000e74:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000e76:	2301      	movs	r3, #1
 8000e78:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000e7a:	2340      	movs	r3, #64	@ 0x40
 8000e7c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e82:	2302      	movs	r3, #2
 8000e84:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e86:	2302      	movs	r3, #2
 8000e88:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000e8e:	2318      	movs	r3, #24
 8000e90:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e92:	2302      	movs	r3, #2
 8000e94:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e96:	2304      	movs	r3, #4
 8000e98:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000e9e:	230c      	movs	r3, #12
 8000ea0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f005 fee0 	bl	8006c74 <HAL_RCC_OscConfig>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000eba:	f000 fadb 	bl	8001474 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ebe:	233f      	movs	r3, #63	@ 0x3f
 8000ec0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000eda:	2300      	movs	r3, #0
 8000edc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	2102      	movs	r1, #2
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f006 faf8 	bl	80074d8 <HAL_RCC_ClockConfig>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000eee:	f000 fac1 	bl	8001474 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_3);
 8000ef2:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	2000      	movs	r0, #0
 8000efa:	f006 fca3 	bl	8007844 <HAL_RCC_MCOConfig>
}
 8000efe:	bf00      	nop
 8000f00:	3770      	adds	r7, #112	@ 0x70
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	58024400 	.word	0x58024400
 8000f0c:	58024800 	.word	0x58024800

08000f10 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000f14:	4b16      	ldr	r3, [pc, #88]	@ (8000f70 <MX_DCMI_Init+0x60>)
 8000f16:	4a17      	ldr	r2, [pc, #92]	@ (8000f74 <MX_DCMI_Init+0x64>)
 8000f18:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000f1a:	4b15      	ldr	r3, [pc, #84]	@ (8000f70 <MX_DCMI_Init+0x60>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000f20:	4b13      	ldr	r3, [pc, #76]	@ (8000f70 <MX_DCMI_Init+0x60>)
 8000f22:	2220      	movs	r2, #32
 8000f24:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000f26:	4b12      	ldr	r3, [pc, #72]	@ (8000f70 <MX_DCMI_Init+0x60>)
 8000f28:	2280      	movs	r2, #128	@ 0x80
 8000f2a:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000f2c:	4b10      	ldr	r3, [pc, #64]	@ (8000f70 <MX_DCMI_Init+0x60>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000f32:	4b0f      	ldr	r3, [pc, #60]	@ (8000f70 <MX_DCMI_Init+0x60>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000f38:	4b0d      	ldr	r3, [pc, #52]	@ (8000f70 <MX_DCMI_Init+0x60>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f70 <MX_DCMI_Init+0x60>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000f44:	4b0a      	ldr	r3, [pc, #40]	@ (8000f70 <MX_DCMI_Init+0x60>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000f4a:	4b09      	ldr	r3, [pc, #36]	@ (8000f70 <MX_DCMI_Init+0x60>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000f50:	4b07      	ldr	r3, [pc, #28]	@ (8000f70 <MX_DCMI_Init+0x60>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000f56:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <MX_DCMI_Init+0x60>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000f5c:	4804      	ldr	r0, [pc, #16]	@ (8000f70 <MX_DCMI_Init+0x60>)
 8000f5e:	f001 f823 	bl	8001fa8 <HAL_DCMI_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000f68:	f000 fa84 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	24000090 	.word	0x24000090
 8000f74:	48020000 	.word	0x48020000

08000f78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fec <MX_I2C1_Init+0x74>)
 8000f7e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ff0 <MX_I2C1_Init+0x78>)
 8000f80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B0DCFB;
 8000f82:	4b1a      	ldr	r3, [pc, #104]	@ (8000fec <MX_I2C1_Init+0x74>)
 8000f84:	4a1b      	ldr	r2, [pc, #108]	@ (8000ff4 <MX_I2C1_Init+0x7c>)
 8000f86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f88:	4b18      	ldr	r3, [pc, #96]	@ (8000fec <MX_I2C1_Init+0x74>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f8e:	4b17      	ldr	r3, [pc, #92]	@ (8000fec <MX_I2C1_Init+0x74>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f94:	4b15      	ldr	r3, [pc, #84]	@ (8000fec <MX_I2C1_Init+0x74>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f9a:	4b14      	ldr	r3, [pc, #80]	@ (8000fec <MX_I2C1_Init+0x74>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fa0:	4b12      	ldr	r3, [pc, #72]	@ (8000fec <MX_I2C1_Init+0x74>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fa6:	4b11      	ldr	r3, [pc, #68]	@ (8000fec <MX_I2C1_Init+0x74>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fac:	4b0f      	ldr	r3, [pc, #60]	@ (8000fec <MX_I2C1_Init+0x74>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fb2:	480e      	ldr	r0, [pc, #56]	@ (8000fec <MX_I2C1_Init+0x74>)
 8000fb4:	f005 f83c 	bl	8006030 <HAL_I2C_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fbe:	f000 fa59 	bl	8001474 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4809      	ldr	r0, [pc, #36]	@ (8000fec <MX_I2C1_Init+0x74>)
 8000fc6:	f005 fd3f 	bl	8006a48 <HAL_I2CEx_ConfigAnalogFilter>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000fd0:	f000 fa50 	bl	8001474 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4805      	ldr	r0, [pc, #20]	@ (8000fec <MX_I2C1_Init+0x74>)
 8000fd8:	f005 fd81 	bl	8006ade <HAL_I2CEx_ConfigDigitalFilter>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000fe2:	f000 fa47 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	24000158 	.word	0x24000158
 8000ff0:	40005400 	.word	0x40005400
 8000ff4:	10b0dcfb 	.word	0x10b0dcfb

08000ff8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ffc:	4b1b      	ldr	r3, [pc, #108]	@ (800106c <MX_I2C2_Init+0x74>)
 8000ffe:	4a1c      	ldr	r2, [pc, #112]	@ (8001070 <MX_I2C2_Init+0x78>)
 8001000:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10B0DCFB;
 8001002:	4b1a      	ldr	r3, [pc, #104]	@ (800106c <MX_I2C2_Init+0x74>)
 8001004:	4a1b      	ldr	r2, [pc, #108]	@ (8001074 <MX_I2C2_Init+0x7c>)
 8001006:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001008:	4b18      	ldr	r3, [pc, #96]	@ (800106c <MX_I2C2_Init+0x74>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800100e:	4b17      	ldr	r3, [pc, #92]	@ (800106c <MX_I2C2_Init+0x74>)
 8001010:	2201      	movs	r2, #1
 8001012:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001014:	4b15      	ldr	r3, [pc, #84]	@ (800106c <MX_I2C2_Init+0x74>)
 8001016:	2200      	movs	r2, #0
 8001018:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800101a:	4b14      	ldr	r3, [pc, #80]	@ (800106c <MX_I2C2_Init+0x74>)
 800101c:	2200      	movs	r2, #0
 800101e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001020:	4b12      	ldr	r3, [pc, #72]	@ (800106c <MX_I2C2_Init+0x74>)
 8001022:	2200      	movs	r2, #0
 8001024:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001026:	4b11      	ldr	r3, [pc, #68]	@ (800106c <MX_I2C2_Init+0x74>)
 8001028:	2200      	movs	r2, #0
 800102a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800102c:	4b0f      	ldr	r3, [pc, #60]	@ (800106c <MX_I2C2_Init+0x74>)
 800102e:	2200      	movs	r2, #0
 8001030:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001032:	480e      	ldr	r0, [pc, #56]	@ (800106c <MX_I2C2_Init+0x74>)
 8001034:	f004 fffc 	bl	8006030 <HAL_I2C_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800103e:	f000 fa19 	bl	8001474 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001042:	2100      	movs	r1, #0
 8001044:	4809      	ldr	r0, [pc, #36]	@ (800106c <MX_I2C2_Init+0x74>)
 8001046:	f005 fcff 	bl	8006a48 <HAL_I2CEx_ConfigAnalogFilter>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001050:	f000 fa10 	bl	8001474 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001054:	2100      	movs	r1, #0
 8001056:	4805      	ldr	r0, [pc, #20]	@ (800106c <MX_I2C2_Init+0x74>)
 8001058:	f005 fd41 	bl	8006ade <HAL_I2CEx_ConfigDigitalFilter>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001062:	f000 fa07 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	240001ac 	.word	0x240001ac
 8001070:	40005800 	.word	0x40005800
 8001074:	10b0dcfb 	.word	0x10b0dcfb

08001078 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800107c:	4b22      	ldr	r3, [pc, #136]	@ (8001108 <MX_UART4_Init+0x90>)
 800107e:	4a23      	ldr	r2, [pc, #140]	@ (800110c <MX_UART4_Init+0x94>)
 8001080:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001082:	4b21      	ldr	r3, [pc, #132]	@ (8001108 <MX_UART4_Init+0x90>)
 8001084:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001088:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800108a:	4b1f      	ldr	r3, [pc, #124]	@ (8001108 <MX_UART4_Init+0x90>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001090:	4b1d      	ldr	r3, [pc, #116]	@ (8001108 <MX_UART4_Init+0x90>)
 8001092:	2200      	movs	r2, #0
 8001094:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001096:	4b1c      	ldr	r3, [pc, #112]	@ (8001108 <MX_UART4_Init+0x90>)
 8001098:	2200      	movs	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800109c:	4b1a      	ldr	r3, [pc, #104]	@ (8001108 <MX_UART4_Init+0x90>)
 800109e:	220c      	movs	r2, #12
 80010a0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010a2:	4b19      	ldr	r3, [pc, #100]	@ (8001108 <MX_UART4_Init+0x90>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a8:	4b17      	ldr	r3, [pc, #92]	@ (8001108 <MX_UART4_Init+0x90>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ae:	4b16      	ldr	r3, [pc, #88]	@ (8001108 <MX_UART4_Init+0x90>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010b4:	4b14      	ldr	r3, [pc, #80]	@ (8001108 <MX_UART4_Init+0x90>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010ba:	4b13      	ldr	r3, [pc, #76]	@ (8001108 <MX_UART4_Init+0x90>)
 80010bc:	2200      	movs	r2, #0
 80010be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80010c0:	4811      	ldr	r0, [pc, #68]	@ (8001108 <MX_UART4_Init+0x90>)
 80010c2:	f008 fbdf 	bl	8009884 <HAL_UART_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80010cc:	f000 f9d2 	bl	8001474 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010d0:	2100      	movs	r1, #0
 80010d2:	480d      	ldr	r0, [pc, #52]	@ (8001108 <MX_UART4_Init+0x90>)
 80010d4:	f009 fd73 	bl	800abbe <HAL_UARTEx_SetTxFifoThreshold>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80010de:	f000 f9c9 	bl	8001474 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010e2:	2100      	movs	r1, #0
 80010e4:	4808      	ldr	r0, [pc, #32]	@ (8001108 <MX_UART4_Init+0x90>)
 80010e6:	f009 fda8 	bl	800ac3a <HAL_UARTEx_SetRxFifoThreshold>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80010f0:	f000 f9c0 	bl	8001474 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80010f4:	4804      	ldr	r0, [pc, #16]	@ (8001108 <MX_UART4_Init+0x90>)
 80010f6:	f009 fd29 	bl	800ab4c <HAL_UARTEx_DisableFifoMode>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001100:	f000 f9b8 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}
 8001108:	24000200 	.word	0x24000200
 800110c:	40004c00 	.word	0x40004c00

08001110 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001114:	4b22      	ldr	r3, [pc, #136]	@ (80011a0 <MX_USART3_UART_Init+0x90>)
 8001116:	4a23      	ldr	r2, [pc, #140]	@ (80011a4 <MX_USART3_UART_Init+0x94>)
 8001118:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800111a:	4b21      	ldr	r3, [pc, #132]	@ (80011a0 <MX_USART3_UART_Init+0x90>)
 800111c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001120:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001122:	4b1f      	ldr	r3, [pc, #124]	@ (80011a0 <MX_USART3_UART_Init+0x90>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001128:	4b1d      	ldr	r3, [pc, #116]	@ (80011a0 <MX_USART3_UART_Init+0x90>)
 800112a:	2200      	movs	r2, #0
 800112c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800112e:	4b1c      	ldr	r3, [pc, #112]	@ (80011a0 <MX_USART3_UART_Init+0x90>)
 8001130:	2200      	movs	r2, #0
 8001132:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001134:	4b1a      	ldr	r3, [pc, #104]	@ (80011a0 <MX_USART3_UART_Init+0x90>)
 8001136:	220c      	movs	r2, #12
 8001138:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800113a:	4b19      	ldr	r3, [pc, #100]	@ (80011a0 <MX_USART3_UART_Init+0x90>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001140:	4b17      	ldr	r3, [pc, #92]	@ (80011a0 <MX_USART3_UART_Init+0x90>)
 8001142:	2200      	movs	r2, #0
 8001144:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001146:	4b16      	ldr	r3, [pc, #88]	@ (80011a0 <MX_USART3_UART_Init+0x90>)
 8001148:	2200      	movs	r2, #0
 800114a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800114c:	4b14      	ldr	r3, [pc, #80]	@ (80011a0 <MX_USART3_UART_Init+0x90>)
 800114e:	2200      	movs	r2, #0
 8001150:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001152:	4b13      	ldr	r3, [pc, #76]	@ (80011a0 <MX_USART3_UART_Init+0x90>)
 8001154:	2200      	movs	r2, #0
 8001156:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001158:	4811      	ldr	r0, [pc, #68]	@ (80011a0 <MX_USART3_UART_Init+0x90>)
 800115a:	f008 fb93 	bl	8009884 <HAL_UART_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001164:	f000 f986 	bl	8001474 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001168:	2100      	movs	r1, #0
 800116a:	480d      	ldr	r0, [pc, #52]	@ (80011a0 <MX_USART3_UART_Init+0x90>)
 800116c:	f009 fd27 	bl	800abbe <HAL_UARTEx_SetTxFifoThreshold>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001176:	f000 f97d 	bl	8001474 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800117a:	2100      	movs	r1, #0
 800117c:	4808      	ldr	r0, [pc, #32]	@ (80011a0 <MX_USART3_UART_Init+0x90>)
 800117e:	f009 fd5c 	bl	800ac3a <HAL_UARTEx_SetRxFifoThreshold>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001188:	f000 f974 	bl	8001474 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800118c:	4804      	ldr	r0, [pc, #16]	@ (80011a0 <MX_USART3_UART_Init+0x90>)
 800118e:	f009 fcdd 	bl	800ab4c <HAL_UARTEx_DisableFifoMode>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001198:	f000 f96c 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	24000294 	.word	0x24000294
 80011a4:	40004800 	.word	0x40004800

080011a8 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
	...

080011b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011be:	4b0d      	ldr	r3, [pc, #52]	@ (80011f4 <MX_DMA_Init+0x3c>)
 80011c0:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80011c4:	4a0b      	ldr	r2, [pc, #44]	@ (80011f4 <MX_DMA_Init+0x3c>)
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 80011ce:	4b09      	ldr	r3, [pc, #36]	@ (80011f4 <MX_DMA_Init+0x3c>)
 80011d0:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80011dc:	2200      	movs	r2, #0
 80011de:	2100      	movs	r1, #0
 80011e0:	200b      	movs	r0, #11
 80011e2:	f000 feac 	bl	8001f3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80011e6:	200b      	movs	r0, #11
 80011e8:	f000 fec3 	bl	8001f72 <HAL_NVIC_EnableIRQ>

}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	58024400 	.word	0x58024400

080011f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08e      	sub	sp, #56	@ 0x38
 80011fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
 800120c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800120e:	4b92      	ldr	r3, [pc, #584]	@ (8001458 <MX_GPIO_Init+0x260>)
 8001210:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001214:	4a90      	ldr	r2, [pc, #576]	@ (8001458 <MX_GPIO_Init+0x260>)
 8001216:	f043 0310 	orr.w	r3, r3, #16
 800121a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800121e:	4b8e      	ldr	r3, [pc, #568]	@ (8001458 <MX_GPIO_Init+0x260>)
 8001220:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001224:	f003 0310 	and.w	r3, r3, #16
 8001228:	623b      	str	r3, [r7, #32]
 800122a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800122c:	4b8a      	ldr	r3, [pc, #552]	@ (8001458 <MX_GPIO_Init+0x260>)
 800122e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001232:	4a89      	ldr	r2, [pc, #548]	@ (8001458 <MX_GPIO_Init+0x260>)
 8001234:	f043 0304 	orr.w	r3, r3, #4
 8001238:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800123c:	4b86      	ldr	r3, [pc, #536]	@ (8001458 <MX_GPIO_Init+0x260>)
 800123e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001242:	f003 0304 	and.w	r3, r3, #4
 8001246:	61fb      	str	r3, [r7, #28]
 8001248:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800124a:	4b83      	ldr	r3, [pc, #524]	@ (8001458 <MX_GPIO_Init+0x260>)
 800124c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001250:	4a81      	ldr	r2, [pc, #516]	@ (8001458 <MX_GPIO_Init+0x260>)
 8001252:	f043 0320 	orr.w	r3, r3, #32
 8001256:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800125a:	4b7f      	ldr	r3, [pc, #508]	@ (8001458 <MX_GPIO_Init+0x260>)
 800125c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001260:	f003 0320 	and.w	r3, r3, #32
 8001264:	61bb      	str	r3, [r7, #24]
 8001266:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001268:	4b7b      	ldr	r3, [pc, #492]	@ (8001458 <MX_GPIO_Init+0x260>)
 800126a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800126e:	4a7a      	ldr	r2, [pc, #488]	@ (8001458 <MX_GPIO_Init+0x260>)
 8001270:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001274:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001278:	4b77      	ldr	r3, [pc, #476]	@ (8001458 <MX_GPIO_Init+0x260>)
 800127a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800127e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	4b74      	ldr	r3, [pc, #464]	@ (8001458 <MX_GPIO_Init+0x260>)
 8001288:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800128c:	4a72      	ldr	r2, [pc, #456]	@ (8001458 <MX_GPIO_Init+0x260>)
 800128e:	f043 0301 	orr.w	r3, r3, #1
 8001292:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001296:	4b70      	ldr	r3, [pc, #448]	@ (8001458 <MX_GPIO_Init+0x260>)
 8001298:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800129c:	f003 0301 	and.w	r3, r3, #1
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a4:	4b6c      	ldr	r3, [pc, #432]	@ (8001458 <MX_GPIO_Init+0x260>)
 80012a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80012aa:	4a6b      	ldr	r2, [pc, #428]	@ (8001458 <MX_GPIO_Init+0x260>)
 80012ac:	f043 0302 	orr.w	r3, r3, #2
 80012b0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80012b4:	4b68      	ldr	r3, [pc, #416]	@ (8001458 <MX_GPIO_Init+0x260>)
 80012b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c2:	4b65      	ldr	r3, [pc, #404]	@ (8001458 <MX_GPIO_Init+0x260>)
 80012c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80012c8:	4a63      	ldr	r2, [pc, #396]	@ (8001458 <MX_GPIO_Init+0x260>)
 80012ca:	f043 0308 	orr.w	r3, r3, #8
 80012ce:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80012d2:	4b61      	ldr	r3, [pc, #388]	@ (8001458 <MX_GPIO_Init+0x260>)
 80012d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80012d8:	f003 0308 	and.w	r3, r3, #8
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012e0:	4b5d      	ldr	r3, [pc, #372]	@ (8001458 <MX_GPIO_Init+0x260>)
 80012e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80012e6:	4a5c      	ldr	r2, [pc, #368]	@ (8001458 <MX_GPIO_Init+0x260>)
 80012e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012ec:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80012f0:	4b59      	ldr	r3, [pc, #356]	@ (8001458 <MX_GPIO_Init+0x260>)
 80012f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80012f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012fa:	607b      	str	r3, [r7, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80012fe:	2200      	movs	r2, #0
 8001300:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001304:	4855      	ldr	r0, [pc, #340]	@ (800145c <MX_GPIO_Init+0x264>)
 8001306:	f004 fe79 	bl	8005ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAM_RST_GPIO_Port, CAM_RST_Pin, GPIO_PIN_RESET);
 800130a:	2200      	movs	r2, #0
 800130c:	2120      	movs	r1, #32
 800130e:	4854      	ldr	r0, [pc, #336]	@ (8001460 <MX_GPIO_Init+0x268>)
 8001310:	f004 fe74 	bl	8005ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001314:	2200      	movs	r2, #0
 8001316:	f244 0101 	movw	r1, #16385	@ 0x4001
 800131a:	4852      	ldr	r0, [pc, #328]	@ (8001464 <MX_GPIO_Init+0x26c>)
 800131c:	f004 fe6e 	bl	8005ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001320:	2200      	movs	r2, #0
 8001322:	2102      	movs	r1, #2
 8001324:	4850      	ldr	r0, [pc, #320]	@ (8001468 <MX_GPIO_Init+0x270>)
 8001326:	f004 fe69 	bl	8005ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800132a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800132e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001330:	2300      	movs	r3, #0
 8001332:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001338:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800133c:	4619      	mov	r1, r3
 800133e:	484b      	ldr	r0, [pc, #300]	@ (800146c <MX_GPIO_Init+0x274>)
 8001340:	f004 fcac 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8001344:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001348:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134a:	2301      	movs	r3, #1
 800134c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001356:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800135a:	4619      	mov	r1, r3
 800135c:	483f      	ldr	r0, [pc, #252]	@ (800145c <MX_GPIO_Init+0x264>)
 800135e:	f004 fc9d 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : CAM_RST_Pin */
  GPIO_InitStruct.Pin = CAM_RST_Pin;
 8001362:	2320      	movs	r3, #32
 8001364:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001366:	2301      	movs	r3, #1
 8001368:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136e:	2300      	movs	r3, #0
 8001370:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CAM_RST_GPIO_Port, &GPIO_InitStruct);
 8001372:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001376:	4619      	mov	r1, r3
 8001378:	4839      	ldr	r0, [pc, #228]	@ (8001460 <MX_GPIO_Init+0x268>)
 800137a:	f004 fc8f 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800137e:	f244 0301 	movw	r3, #16385	@ 0x4001
 8001382:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001384:	2301      	movs	r3, #1
 8001386:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138c:	2300      	movs	r3, #0
 800138e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001390:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001394:	4619      	mov	r1, r3
 8001396:	4833      	ldr	r0, [pc, #204]	@ (8001464 <MX_GPIO_Init+0x26c>)
 8001398:	f004 fc80 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 800139c:	2380      	movs	r3, #128	@ 0x80
 800139e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013a0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80013aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013ae:	4619      	mov	r1, r3
 80013b0:	482f      	ldr	r0, [pc, #188]	@ (8001470 <MX_GPIO_Init+0x278>)
 80013b2:	f004 fc73 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013bc:	2302      	movs	r3, #2
 80013be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c4:	2300      	movs	r3, #0
 80013c6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80013c8:	2300      	movs	r3, #0
 80013ca:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013d0:	4619      	mov	r1, r3
 80013d2:	4823      	ldr	r0, [pc, #140]	@ (8001460 <MX_GPIO_Init+0x268>)
 80013d4:	f004 fc62 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80013d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013de:	2300      	movs	r3, #0
 80013e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80013e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013ea:	4619      	mov	r1, r3
 80013ec:	481c      	ldr	r0, [pc, #112]	@ (8001460 <MX_GPIO_Init+0x268>)
 80013ee:	f004 fc55 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80013f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f8:	2302      	movs	r3, #2
 80013fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001400:	2300      	movs	r3, #0
 8001402:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001404:	230a      	movs	r3, #10
 8001406:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001408:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800140c:	4619      	mov	r1, r3
 800140e:	4814      	ldr	r0, [pc, #80]	@ (8001460 <MX_GPIO_Init+0x268>)
 8001410:	f004 fc44 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8001414:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001418:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141a:	2302      	movs	r3, #2
 800141c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	2300      	movs	r3, #0
 8001424:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001426:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800142a:	4619      	mov	r1, r3
 800142c:	480c      	ldr	r0, [pc, #48]	@ (8001460 <MX_GPIO_Init+0x268>)
 800142e:	f004 fc35 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001432:	2302      	movs	r3, #2
 8001434:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001436:	2301      	movs	r3, #1
 8001438:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143e:	2300      	movs	r3, #0
 8001440:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001442:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001446:	4619      	mov	r1, r3
 8001448:	4807      	ldr	r0, [pc, #28]	@ (8001468 <MX_GPIO_Init+0x270>)
 800144a:	f004 fc27 	bl	8005c9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800144e:	bf00      	nop
 8001450:	3738      	adds	r7, #56	@ 0x38
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	58024400 	.word	0x58024400
 800145c:	58021400 	.word	0x58021400
 8001460:	58020000 	.word	0x58020000
 8001464:	58020400 	.word	0x58020400
 8001468:	58021000 	.word	0x58021000
 800146c:	58020800 	.word	0x58020800
 8001470:	58021800 	.word	0x58021800

08001474 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001478:	b672      	cpsid	i
}
 800147a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800147c:	bf00      	nop
 800147e:	e7fd      	b.n	800147c <Error_Handler+0x8>

08001480 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001486:	4b0a      	ldr	r3, [pc, #40]	@ (80014b0 <HAL_MspInit+0x30>)
 8001488:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800148c:	4a08      	ldr	r2, [pc, #32]	@ (80014b0 <HAL_MspInit+0x30>)
 800148e:	f043 0302 	orr.w	r3, r3, #2
 8001492:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001496:	4b06      	ldr	r3, [pc, #24]	@ (80014b0 <HAL_MspInit+0x30>)
 8001498:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	607b      	str	r3, [r7, #4]
 80014a2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	58024400 	.word	0x58024400

080014b4 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08e      	sub	sp, #56	@ 0x38
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a77      	ldr	r2, [pc, #476]	@ (80016b0 <HAL_DCMI_MspInit+0x1fc>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	f040 80e7 	bne.w	80016a6 <HAL_DCMI_MspInit+0x1f2>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80014d8:	4b76      	ldr	r3, [pc, #472]	@ (80016b4 <HAL_DCMI_MspInit+0x200>)
 80014da:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 80014de:	4a75      	ldr	r2, [pc, #468]	@ (80016b4 <HAL_DCMI_MspInit+0x200>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	f8c2 313c 	str.w	r3, [r2, #316]	@ 0x13c
 80014e8:	4b72      	ldr	r3, [pc, #456]	@ (80016b4 <HAL_DCMI_MspInit+0x200>)
 80014ea:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	623b      	str	r3, [r7, #32]
 80014f4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014f6:	4b6f      	ldr	r3, [pc, #444]	@ (80016b4 <HAL_DCMI_MspInit+0x200>)
 80014f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80014fc:	4a6d      	ldr	r2, [pc, #436]	@ (80016b4 <HAL_DCMI_MspInit+0x200>)
 80014fe:	f043 0310 	orr.w	r3, r3, #16
 8001502:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001506:	4b6b      	ldr	r3, [pc, #428]	@ (80016b4 <HAL_DCMI_MspInit+0x200>)
 8001508:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800150c:	f003 0310 	and.w	r3, r3, #16
 8001510:	61fb      	str	r3, [r7, #28]
 8001512:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001514:	4b67      	ldr	r3, [pc, #412]	@ (80016b4 <HAL_DCMI_MspInit+0x200>)
 8001516:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800151a:	4a66      	ldr	r2, [pc, #408]	@ (80016b4 <HAL_DCMI_MspInit+0x200>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001524:	4b63      	ldr	r3, [pc, #396]	@ (80016b4 <HAL_DCMI_MspInit+0x200>)
 8001526:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	61bb      	str	r3, [r7, #24]
 8001530:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001532:	4b60      	ldr	r3, [pc, #384]	@ (80016b4 <HAL_DCMI_MspInit+0x200>)
 8001534:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001538:	4a5e      	ldr	r2, [pc, #376]	@ (80016b4 <HAL_DCMI_MspInit+0x200>)
 800153a:	f043 0302 	orr.w	r3, r3, #2
 800153e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001542:	4b5c      	ldr	r3, [pc, #368]	@ (80016b4 <HAL_DCMI_MspInit+0x200>)
 8001544:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	617b      	str	r3, [r7, #20]
 800154e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001550:	4b58      	ldr	r3, [pc, #352]	@ (80016b4 <HAL_DCMI_MspInit+0x200>)
 8001552:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001556:	4a57      	ldr	r2, [pc, #348]	@ (80016b4 <HAL_DCMI_MspInit+0x200>)
 8001558:	f043 0304 	orr.w	r3, r3, #4
 800155c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001560:	4b54      	ldr	r3, [pc, #336]	@ (80016b4 <HAL_DCMI_MspInit+0x200>)
 8001562:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001566:	f003 0304 	and.w	r3, r3, #4
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800156e:	4b51      	ldr	r3, [pc, #324]	@ (80016b4 <HAL_DCMI_MspInit+0x200>)
 8001570:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001574:	4a4f      	ldr	r2, [pc, #316]	@ (80016b4 <HAL_DCMI_MspInit+0x200>)
 8001576:	f043 0308 	orr.w	r3, r3, #8
 800157a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800157e:	4b4d      	ldr	r3, [pc, #308]	@ (80016b4 <HAL_DCMI_MspInit+0x200>)
 8001580:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001584:	f003 0308 	and.w	r3, r3, #8
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	68fb      	ldr	r3, [r7, #12]
    PC7     ------> DCMI_D1
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800158c:	2370      	movs	r3, #112	@ 0x70
 800158e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001594:	2302      	movs	r3, #2
 8001596:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001598:	2303      	movs	r3, #3
 800159a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800159c:	230d      	movs	r3, #13
 800159e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015a4:	4619      	mov	r1, r3
 80015a6:	4844      	ldr	r0, [pc, #272]	@ (80016b8 <HAL_DCMI_MspInit+0x204>)
 80015a8:	f004 fb78 	bl	8005c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80015ac:	2350      	movs	r3, #80	@ 0x50
 80015ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b0:	2302      	movs	r3, #2
 80015b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015b4:	2302      	movs	r3, #2
 80015b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b8:	2303      	movs	r3, #3
 80015ba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80015bc:	230d      	movs	r3, #13
 80015be:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015c4:	4619      	mov	r1, r3
 80015c6:	483d      	ldr	r0, [pc, #244]	@ (80016bc <HAL_DCMI_MspInit+0x208>)
 80015c8:	f004 fb68 	bl	8005c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_7;
 80015cc:	f44f 5302 	mov.w	r3, #8320	@ 0x2080
 80015d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d2:	2302      	movs	r3, #2
 80015d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015d6:	2302      	movs	r3, #2
 80015d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015da:	2303      	movs	r3, #3
 80015dc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80015de:	230d      	movs	r3, #13
 80015e0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015e6:	4619      	mov	r1, r3
 80015e8:	4835      	ldr	r0, [pc, #212]	@ (80016c0 <HAL_DCMI_MspInit+0x20c>)
 80015ea:	f004 fb57 	bl	8005c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 80015ee:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 80015f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f4:	2302      	movs	r3, #2
 80015f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015f8:	2302      	movs	r3, #2
 80015fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fc:	2303      	movs	r3, #3
 80015fe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001600:	230d      	movs	r3, #13
 8001602:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001604:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001608:	4619      	mov	r1, r3
 800160a:	482e      	ldr	r0, [pc, #184]	@ (80016c4 <HAL_DCMI_MspInit+0x210>)
 800160c:	f004 fb46 	bl	8005c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001610:	2308      	movs	r3, #8
 8001612:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001614:	2302      	movs	r3, #2
 8001616:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001618:	2302      	movs	r3, #2
 800161a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161c:	2303      	movs	r3, #3
 800161e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001620:	230d      	movs	r3, #13
 8001622:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001624:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001628:	4619      	mov	r1, r3
 800162a:	4827      	ldr	r0, [pc, #156]	@ (80016c8 <HAL_DCMI_MspInit+0x214>)
 800162c:	f004 fb36 	bl	8005c9c <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB7_FMP);
 8001630:	2020      	movs	r0, #32
 8001632:	f005 faa1 	bl	8006b78 <HAL_I2CEx_EnableFastModePlus>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 8001636:	4b25      	ldr	r3, [pc, #148]	@ (80016cc <HAL_DCMI_MspInit+0x218>)
 8001638:	4a25      	ldr	r2, [pc, #148]	@ (80016d0 <HAL_DCMI_MspInit+0x21c>)
 800163a:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI_PSSI;
 800163c:	4b23      	ldr	r3, [pc, #140]	@ (80016cc <HAL_DCMI_MspInit+0x218>)
 800163e:	224b      	movs	r2, #75	@ 0x4b
 8001640:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001642:	4b22      	ldr	r3, [pc, #136]	@ (80016cc <HAL_DCMI_MspInit+0x218>)
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8001648:	4b20      	ldr	r3, [pc, #128]	@ (80016cc <HAL_DCMI_MspInit+0x218>)
 800164a:	2200      	movs	r2, #0
 800164c:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 800164e:	4b1f      	ldr	r3, [pc, #124]	@ (80016cc <HAL_DCMI_MspInit+0x218>)
 8001650:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001654:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001656:	4b1d      	ldr	r3, [pc, #116]	@ (80016cc <HAL_DCMI_MspInit+0x218>)
 8001658:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800165c:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800165e:	4b1b      	ldr	r3, [pc, #108]	@ (80016cc <HAL_DCMI_MspInit+0x218>)
 8001660:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001664:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8001666:	4b19      	ldr	r3, [pc, #100]	@ (80016cc <HAL_DCMI_MspInit+0x218>)
 8001668:	2200      	movs	r2, #0
 800166a:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800166c:	4b17      	ldr	r3, [pc, #92]	@ (80016cc <HAL_DCMI_MspInit+0x218>)
 800166e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001672:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001674:	4b15      	ldr	r3, [pc, #84]	@ (80016cc <HAL_DCMI_MspInit+0x218>)
 8001676:	2200      	movs	r2, #0
 8001678:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 800167a:	4814      	ldr	r0, [pc, #80]	@ (80016cc <HAL_DCMI_MspInit+0x218>)
 800167c:	f000 ff80 	bl	8002580 <HAL_DMA_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <HAL_DCMI_MspInit+0x1d6>
    {
      Error_Handler();
 8001686:	f7ff fef5 	bl	8001474 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a0f      	ldr	r2, [pc, #60]	@ (80016cc <HAL_DCMI_MspInit+0x218>)
 800168e:	649a      	str	r2, [r3, #72]	@ 0x48
 8001690:	4a0e      	ldr	r2, [pc, #56]	@ (80016cc <HAL_DCMI_MspInit+0x218>)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_PSSI_IRQn, 0, 0);
 8001696:	2200      	movs	r2, #0
 8001698:	2100      	movs	r1, #0
 800169a:	204e      	movs	r0, #78	@ 0x4e
 800169c:	f000 fc4f 	bl	8001f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_PSSI_IRQn);
 80016a0:	204e      	movs	r0, #78	@ 0x4e
 80016a2:	f000 fc66 	bl	8001f72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80016a6:	bf00      	nop
 80016a8:	3738      	adds	r7, #56	@ 0x38
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	48020000 	.word	0x48020000
 80016b4:	58024400 	.word	0x58024400
 80016b8:	58021000 	.word	0x58021000
 80016bc:	58020000 	.word	0x58020000
 80016c0:	58020400 	.word	0x58020400
 80016c4:	58020800 	.word	0x58020800
 80016c8:	58020c00 	.word	0x58020c00
 80016cc:	240000e0 	.word	0x240000e0
 80016d0:	40020010 	.word	0x40020010

080016d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b0bc      	sub	sp, #240	@ 0xf0
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016dc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016ec:	f107 0318 	add.w	r3, r7, #24
 80016f0:	22c0      	movs	r2, #192	@ 0xc0
 80016f2:	2100      	movs	r1, #0
 80016f4:	4618      	mov	r0, r3
 80016f6:	f009 fb4d 	bl	800ad94 <memset>
  if(hi2c->Instance==I2C1)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a4d      	ldr	r2, [pc, #308]	@ (8001834 <HAL_I2C_MspInit+0x160>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d147      	bne.n	8001794 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001704:	f04f 0208 	mov.w	r2, #8
 8001708:	f04f 0300 	mov.w	r3, #0
 800170c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001710:	2300      	movs	r3, #0
 8001712:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001716:	f107 0318 	add.w	r3, r7, #24
 800171a:	4618      	mov	r0, r3
 800171c:	f006 fad2 	bl	8007cc4 <HAL_RCCEx_PeriphCLKConfig>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001726:	f7ff fea5 	bl	8001474 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800172a:	4b43      	ldr	r3, [pc, #268]	@ (8001838 <HAL_I2C_MspInit+0x164>)
 800172c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001730:	4a41      	ldr	r2, [pc, #260]	@ (8001838 <HAL_I2C_MspInit+0x164>)
 8001732:	f043 0302 	orr.w	r3, r3, #2
 8001736:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800173a:	4b3f      	ldr	r3, [pc, #252]	@ (8001838 <HAL_I2C_MspInit+0x164>)
 800173c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	617b      	str	r3, [r7, #20]
 8001746:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001748:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800174c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001750:	2312      	movs	r3, #18
 8001752:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001756:	2301      	movs	r3, #1
 8001758:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175c:	2300      	movs	r3, #0
 800175e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001762:	2304      	movs	r3, #4
 8001764:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001768:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800176c:	4619      	mov	r1, r3
 800176e:	4833      	ldr	r0, [pc, #204]	@ (800183c <HAL_I2C_MspInit+0x168>)
 8001770:	f004 fa94 	bl	8005c9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001774:	4b30      	ldr	r3, [pc, #192]	@ (8001838 <HAL_I2C_MspInit+0x164>)
 8001776:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800177a:	4a2f      	ldr	r2, [pc, #188]	@ (8001838 <HAL_I2C_MspInit+0x164>)
 800177c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001780:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001784:	4b2c      	ldr	r3, [pc, #176]	@ (8001838 <HAL_I2C_MspInit+0x164>)
 8001786:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800178a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800178e:	613b      	str	r3, [r7, #16]
 8001790:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001792:	e04b      	b.n	800182c <HAL_I2C_MspInit+0x158>
  else if(hi2c->Instance==I2C2)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a29      	ldr	r2, [pc, #164]	@ (8001840 <HAL_I2C_MspInit+0x16c>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d146      	bne.n	800182c <HAL_I2C_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800179e:	f04f 0208 	mov.w	r2, #8
 80017a2:	f04f 0300 	mov.w	r3, #0
 80017a6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80017aa:	2300      	movs	r3, #0
 80017ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017b0:	f107 0318 	add.w	r3, r7, #24
 80017b4:	4618      	mov	r0, r3
 80017b6:	f006 fa85 	bl	8007cc4 <HAL_RCCEx_PeriphCLKConfig>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 80017c0:	f7ff fe58 	bl	8001474 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001838 <HAL_I2C_MspInit+0x164>)
 80017c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80017ca:	4a1b      	ldr	r2, [pc, #108]	@ (8001838 <HAL_I2C_MspInit+0x164>)
 80017cc:	f043 0302 	orr.w	r3, r3, #2
 80017d0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80017d4:	4b18      	ldr	r3, [pc, #96]	@ (8001838 <HAL_I2C_MspInit+0x164>)
 80017d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80017e2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80017e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017ea:	2312      	movs	r3, #18
 80017ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017f0:	2301      	movs	r3, #1
 80017f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f6:	2300      	movs	r3, #0
 80017f8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80017fc:	2304      	movs	r3, #4
 80017fe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001802:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001806:	4619      	mov	r1, r3
 8001808:	480c      	ldr	r0, [pc, #48]	@ (800183c <HAL_I2C_MspInit+0x168>)
 800180a:	f004 fa47 	bl	8005c9c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800180e:	4b0a      	ldr	r3, [pc, #40]	@ (8001838 <HAL_I2C_MspInit+0x164>)
 8001810:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001814:	4a08      	ldr	r2, [pc, #32]	@ (8001838 <HAL_I2C_MspInit+0x164>)
 8001816:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800181a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800181e:	4b06      	ldr	r3, [pc, #24]	@ (8001838 <HAL_I2C_MspInit+0x164>)
 8001820:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001824:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	68bb      	ldr	r3, [r7, #8]
}
 800182c:	bf00      	nop
 800182e:	37f0      	adds	r7, #240	@ 0xf0
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40005400 	.word	0x40005400
 8001838:	58024400 	.word	0x58024400
 800183c:	58020400 	.word	0x58020400
 8001840:	40005800 	.word	0x40005800

08001844 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b0bc      	sub	sp, #240	@ 0xf0
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	60da      	str	r2, [r3, #12]
 800185a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800185c:	f107 0318 	add.w	r3, r7, #24
 8001860:	22c0      	movs	r2, #192	@ 0xc0
 8001862:	2100      	movs	r1, #0
 8001864:	4618      	mov	r0, r3
 8001866:	f009 fa95 	bl	800ad94 <memset>
  if(huart->Instance==UART4)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a4d      	ldr	r2, [pc, #308]	@ (80019a4 <HAL_UART_MspInit+0x160>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d146      	bne.n	8001902 <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001874:	f04f 0202 	mov.w	r2, #2
 8001878:	f04f 0300 	mov.w	r3, #0
 800187c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001880:	2300      	movs	r3, #0
 8001882:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001886:	f107 0318 	add.w	r3, r7, #24
 800188a:	4618      	mov	r0, r3
 800188c:	f006 fa1a 	bl	8007cc4 <HAL_RCCEx_PeriphCLKConfig>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001896:	f7ff fded 	bl	8001474 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800189a:	4b43      	ldr	r3, [pc, #268]	@ (80019a8 <HAL_UART_MspInit+0x164>)
 800189c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80018a0:	4a41      	ldr	r2, [pc, #260]	@ (80019a8 <HAL_UART_MspInit+0x164>)
 80018a2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80018a6:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80018aa:	4b3f      	ldr	r3, [pc, #252]	@ (80019a8 <HAL_UART_MspInit+0x164>)
 80018ac:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80018b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b8:	4b3b      	ldr	r3, [pc, #236]	@ (80019a8 <HAL_UART_MspInit+0x164>)
 80018ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80018be:	4a3a      	ldr	r2, [pc, #232]	@ (80019a8 <HAL_UART_MspInit+0x164>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80018c8:	4b37      	ldr	r3, [pc, #220]	@ (80019a8 <HAL_UART_MspInit+0x164>)
 80018ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	613b      	str	r3, [r7, #16]
 80018d4:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018d6:	2303      	movs	r3, #3
 80018d8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018dc:	2302      	movs	r3, #2
 80018de:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e8:	2300      	movs	r3, #0
 80018ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80018ee:	2308      	movs	r3, #8
 80018f0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80018f8:	4619      	mov	r1, r3
 80018fa:	482c      	ldr	r0, [pc, #176]	@ (80019ac <HAL_UART_MspInit+0x168>)
 80018fc:	f004 f9ce 	bl	8005c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001900:	e04b      	b.n	800199a <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART3)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a2a      	ldr	r2, [pc, #168]	@ (80019b0 <HAL_UART_MspInit+0x16c>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d146      	bne.n	800199a <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800190c:	f04f 0202 	mov.w	r2, #2
 8001910:	f04f 0300 	mov.w	r3, #0
 8001914:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001918:	2300      	movs	r3, #0
 800191a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800191e:	f107 0318 	add.w	r3, r7, #24
 8001922:	4618      	mov	r0, r3
 8001924:	f006 f9ce 	bl	8007cc4 <HAL_RCCEx_PeriphCLKConfig>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <HAL_UART_MspInit+0xee>
      Error_Handler();
 800192e:	f7ff fda1 	bl	8001474 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001932:	4b1d      	ldr	r3, [pc, #116]	@ (80019a8 <HAL_UART_MspInit+0x164>)
 8001934:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001938:	4a1b      	ldr	r2, [pc, #108]	@ (80019a8 <HAL_UART_MspInit+0x164>)
 800193a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800193e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001942:	4b19      	ldr	r3, [pc, #100]	@ (80019a8 <HAL_UART_MspInit+0x164>)
 8001944:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001948:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001950:	4b15      	ldr	r3, [pc, #84]	@ (80019a8 <HAL_UART_MspInit+0x164>)
 8001952:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001956:	4a14      	ldr	r2, [pc, #80]	@ (80019a8 <HAL_UART_MspInit+0x164>)
 8001958:	f043 0308 	orr.w	r3, r3, #8
 800195c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001960:	4b11      	ldr	r3, [pc, #68]	@ (80019a8 <HAL_UART_MspInit+0x164>)
 8001962:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001966:	f003 0308 	and.w	r3, r3, #8
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800196e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001972:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001976:	2302      	movs	r3, #2
 8001978:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001982:	2300      	movs	r3, #0
 8001984:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001988:	2307      	movs	r3, #7
 800198a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800198e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001992:	4619      	mov	r1, r3
 8001994:	4807      	ldr	r0, [pc, #28]	@ (80019b4 <HAL_UART_MspInit+0x170>)
 8001996:	f004 f981 	bl	8005c9c <HAL_GPIO_Init>
}
 800199a:	bf00      	nop
 800199c:	37f0      	adds	r7, #240	@ 0xf0
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40004c00 	.word	0x40004c00
 80019a8:	58024400 	.word	0x58024400
 80019ac:	58020000 	.word	0x58020000
 80019b0:	40004800 	.word	0x40004800
 80019b4:	58020c00 	.word	0x58020c00

080019b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019bc:	bf00      	nop
 80019be:	e7fd      	b.n	80019bc <NMI_Handler+0x4>

080019c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019c4:	bf00      	nop
 80019c6:	e7fd      	b.n	80019c4 <HardFault_Handler+0x4>

080019c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019cc:	bf00      	nop
 80019ce:	e7fd      	b.n	80019cc <MemManage_Handler+0x4>

080019d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019d4:	bf00      	nop
 80019d6:	e7fd      	b.n	80019d4 <BusFault_Handler+0x4>

080019d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019dc:	bf00      	nop
 80019de:	e7fd      	b.n	80019dc <UsageFault_Handler+0x4>

080019e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a0e:	f000 f977 	bl	8001d00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b09a      	sub	sp, #104	@ 0x68
 8001a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
  char buffer[100];
  sprintf(buffer, "IRQ firing\r\n");
 8001a1e:	1d3b      	adds	r3, r7, #4
 8001a20:	490a      	ldr	r1, [pc, #40]	@ (8001a4c <DMA1_Stream0_IRQHandler+0x34>)
 8001a22:	4618      	mov	r0, r3
 8001a24:	f009 f996 	bl	800ad54 <siprintf>
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8001a28:	1d3b      	adds	r3, r7, #4
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7fe fc60 	bl	80002f0 <strlen>
 8001a30:	4603      	mov	r3, r0
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	1d39      	adds	r1, r7, #4
 8001a36:	230a      	movs	r3, #10
 8001a38:	4805      	ldr	r0, [pc, #20]	@ (8001a50 <DMA1_Stream0_IRQHandler+0x38>)
 8001a3a:	f007 ff73 	bl	8009924 <HAL_UART_Transmit>
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8001a3e:	4805      	ldr	r0, [pc, #20]	@ (8001a54 <DMA1_Stream0_IRQHandler+0x3c>)
 8001a40:	f002 f8fa 	bl	8003c38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */
  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001a44:	bf00      	nop
 8001a46:	3768      	adds	r7, #104	@ 0x68
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	0800b818 	.word	0x0800b818
 8001a50:	24000200 	.word	0x24000200
 8001a54:	240000e0 	.word	0x240000e0

08001a58 <DCMI_PSSI_IRQHandler>:

/**
  * @brief This function handles DCMI and PSSI global interrupt.
  */
void DCMI_PSSI_IRQHandler(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_PSSI_IRQn 0 */

  /* USER CODE END DCMI_PSSI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8001a5c:	4802      	ldr	r0, [pc, #8]	@ (8001a68 <DCMI_PSSI_IRQHandler+0x10>)
 8001a5e:	f000 fc3f 	bl	80022e0 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_PSSI_IRQn 1 */

  /* USER CODE END DCMI_PSSI_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	24000090 	.word	0x24000090

08001a6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a74:	4a14      	ldr	r2, [pc, #80]	@ (8001ac8 <_sbrk+0x5c>)
 8001a76:	4b15      	ldr	r3, [pc, #84]	@ (8001acc <_sbrk+0x60>)
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a80:	4b13      	ldr	r3, [pc, #76]	@ (8001ad0 <_sbrk+0x64>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d102      	bne.n	8001a8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a88:	4b11      	ldr	r3, [pc, #68]	@ (8001ad0 <_sbrk+0x64>)
 8001a8a:	4a12      	ldr	r2, [pc, #72]	@ (8001ad4 <_sbrk+0x68>)
 8001a8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a8e:	4b10      	ldr	r3, [pc, #64]	@ (8001ad0 <_sbrk+0x64>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4413      	add	r3, r2
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d207      	bcs.n	8001aac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a9c:	f009 f982 	bl	800ada4 <__errno>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	220c      	movs	r2, #12
 8001aa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aaa:	e009      	b.n	8001ac0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aac:	4b08      	ldr	r3, [pc, #32]	@ (8001ad0 <_sbrk+0x64>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ab2:	4b07      	ldr	r3, [pc, #28]	@ (8001ad0 <_sbrk+0x64>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4413      	add	r3, r2
 8001aba:	4a05      	ldr	r2, [pc, #20]	@ (8001ad0 <_sbrk+0x64>)
 8001abc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001abe:	68fb      	ldr	r3, [r7, #12]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3718      	adds	r7, #24
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	24100000 	.word	0x24100000
 8001acc:	00000400 	.word	0x00000400
 8001ad0:	24000328 	.word	0x24000328
 8001ad4:	24000478 	.word	0x24000478

08001ad8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001adc:	4b32      	ldr	r3, [pc, #200]	@ (8001ba8 <SystemInit+0xd0>)
 8001ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ae2:	4a31      	ldr	r2, [pc, #196]	@ (8001ba8 <SystemInit+0xd0>)
 8001ae4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ae8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001aec:	4b2f      	ldr	r3, [pc, #188]	@ (8001bac <SystemInit+0xd4>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 030f 	and.w	r3, r3, #15
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d807      	bhi.n	8001b08 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001af8:	4b2c      	ldr	r3, [pc, #176]	@ (8001bac <SystemInit+0xd4>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f023 030f 	bic.w	r3, r3, #15
 8001b00:	4a2a      	ldr	r2, [pc, #168]	@ (8001bac <SystemInit+0xd4>)
 8001b02:	f043 0303 	orr.w	r3, r3, #3
 8001b06:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001b08:	4b29      	ldr	r3, [pc, #164]	@ (8001bb0 <SystemInit+0xd8>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a28      	ldr	r2, [pc, #160]	@ (8001bb0 <SystemInit+0xd8>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b14:	4b26      	ldr	r3, [pc, #152]	@ (8001bb0 <SystemInit+0xd8>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001b1a:	4b25      	ldr	r3, [pc, #148]	@ (8001bb0 <SystemInit+0xd8>)
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	4924      	ldr	r1, [pc, #144]	@ (8001bb0 <SystemInit+0xd8>)
 8001b20:	4b24      	ldr	r3, [pc, #144]	@ (8001bb4 <SystemInit+0xdc>)
 8001b22:	4013      	ands	r3, r2
 8001b24:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b26:	4b21      	ldr	r3, [pc, #132]	@ (8001bac <SystemInit+0xd4>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 030c 	and.w	r3, r3, #12
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d007      	beq.n	8001b42 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b32:	4b1e      	ldr	r3, [pc, #120]	@ (8001bac <SystemInit+0xd4>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f023 030f 	bic.w	r3, r3, #15
 8001b3a:	4a1c      	ldr	r2, [pc, #112]	@ (8001bac <SystemInit+0xd4>)
 8001b3c:	f043 0303 	orr.w	r3, r3, #3
 8001b40:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001b42:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb0 <SystemInit+0xd8>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001b48:	4b19      	ldr	r3, [pc, #100]	@ (8001bb0 <SystemInit+0xd8>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001b4e:	4b18      	ldr	r3, [pc, #96]	@ (8001bb0 <SystemInit+0xd8>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001b54:	4b16      	ldr	r3, [pc, #88]	@ (8001bb0 <SystemInit+0xd8>)
 8001b56:	4a18      	ldr	r2, [pc, #96]	@ (8001bb8 <SystemInit+0xe0>)
 8001b58:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001b5a:	4b15      	ldr	r3, [pc, #84]	@ (8001bb0 <SystemInit+0xd8>)
 8001b5c:	4a17      	ldr	r2, [pc, #92]	@ (8001bbc <SystemInit+0xe4>)
 8001b5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001b60:	4b13      	ldr	r3, [pc, #76]	@ (8001bb0 <SystemInit+0xd8>)
 8001b62:	4a17      	ldr	r2, [pc, #92]	@ (8001bc0 <SystemInit+0xe8>)
 8001b64:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001b66:	4b12      	ldr	r3, [pc, #72]	@ (8001bb0 <SystemInit+0xd8>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001b6c:	4b10      	ldr	r3, [pc, #64]	@ (8001bb0 <SystemInit+0xd8>)
 8001b6e:	4a14      	ldr	r2, [pc, #80]	@ (8001bc0 <SystemInit+0xe8>)
 8001b70:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001b72:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb0 <SystemInit+0xd8>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001b78:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb0 <SystemInit+0xd8>)
 8001b7a:	4a11      	ldr	r2, [pc, #68]	@ (8001bc0 <SystemInit+0xe8>)
 8001b7c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb0 <SystemInit+0xd8>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b84:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb0 <SystemInit+0xd8>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a09      	ldr	r2, [pc, #36]	@ (8001bb0 <SystemInit+0xd8>)
 8001b8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b8e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001b90:	4b07      	ldr	r3, [pc, #28]	@ (8001bb0 <SystemInit+0xd8>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001b96:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc4 <SystemInit+0xec>)
 8001b98:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001b9c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001b9e:	bf00      	nop
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	e000ed00 	.word	0xe000ed00
 8001bac:	52002000 	.word	0x52002000
 8001bb0:	58024400 	.word	0x58024400
 8001bb4:	eaf6ed7f 	.word	0xeaf6ed7f
 8001bb8:	02020200 	.word	0x02020200
 8001bbc:	01ff0000 	.word	0x01ff0000
 8001bc0:	01010280 	.word	0x01010280
 8001bc4:	52004000 	.word	0x52004000

08001bc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001bc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c00 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001bcc:	f7ff ff84 	bl	8001ad8 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bd0:	480c      	ldr	r0, [pc, #48]	@ (8001c04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bd2:	490d      	ldr	r1, [pc, #52]	@ (8001c08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bd4:	4a0d      	ldr	r2, [pc, #52]	@ (8001c0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd8:	e002      	b.n	8001be0 <LoopCopyDataInit>

08001bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bde:	3304      	adds	r3, #4

08001be0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be4:	d3f9      	bcc.n	8001bda <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001be6:	4a0a      	ldr	r2, [pc, #40]	@ (8001c10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001be8:	4c0a      	ldr	r4, [pc, #40]	@ (8001c14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bec:	e001      	b.n	8001bf2 <LoopFillZerobss>

08001bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bf0:	3204      	adds	r2, #4

08001bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf4:	d3fb      	bcc.n	8001bee <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001bf6:	f009 f8db 	bl	800adb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bfa:	f7fe ff95 	bl	8000b28 <main>
  bx  lr
 8001bfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c00:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001c04:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001c08:	24000068 	.word	0x24000068
  ldr r2, =_sidata
 8001c0c:	0800b8ac 	.word	0x0800b8ac
  ldr r2, =_sbss
 8001c10:	24000068 	.word	0x24000068
  ldr r4, =_ebss
 8001c14:	24000478 	.word	0x24000478

08001c18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c18:	e7fe      	b.n	8001c18 <ADC_IRQHandler>
	...

08001c1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c22:	2003      	movs	r0, #3
 8001c24:	f000 f980 	bl	8001f28 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001c28:	f005 fe76 	bl	8007918 <HAL_RCC_GetSysClockFreq>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	4b15      	ldr	r3, [pc, #84]	@ (8001c84 <HAL_Init+0x68>)
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	0a1b      	lsrs	r3, r3, #8
 8001c34:	f003 030f 	and.w	r3, r3, #15
 8001c38:	4913      	ldr	r1, [pc, #76]	@ (8001c88 <HAL_Init+0x6c>)
 8001c3a:	5ccb      	ldrb	r3, [r1, r3]
 8001c3c:	f003 031f 	and.w	r3, r3, #31
 8001c40:	fa22 f303 	lsr.w	r3, r2, r3
 8001c44:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001c46:	4b0f      	ldr	r3, [pc, #60]	@ (8001c84 <HAL_Init+0x68>)
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	f003 030f 	and.w	r3, r3, #15
 8001c4e:	4a0e      	ldr	r2, [pc, #56]	@ (8001c88 <HAL_Init+0x6c>)
 8001c50:	5cd3      	ldrb	r3, [r2, r3]
 8001c52:	f003 031f 	and.w	r3, r3, #31
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	fa22 f303 	lsr.w	r3, r2, r3
 8001c5c:	4a0b      	ldr	r2, [pc, #44]	@ (8001c8c <HAL_Init+0x70>)
 8001c5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c60:	4a0b      	ldr	r2, [pc, #44]	@ (8001c90 <HAL_Init+0x74>)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c66:	2000      	movs	r0, #0
 8001c68:	f000 f814 	bl	8001c94 <HAL_InitTick>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e002      	b.n	8001c7c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c76:	f7ff fc03 	bl	8001480 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	58024400 	.word	0x58024400
 8001c88:	0800b828 	.word	0x0800b828
 8001c8c:	2400000c 	.word	0x2400000c
 8001c90:	24000008 	.word	0x24000008

08001c94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001c9c:	4b15      	ldr	r3, [pc, #84]	@ (8001cf4 <HAL_InitTick+0x60>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d101      	bne.n	8001ca8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e021      	b.n	8001cec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001ca8:	4b13      	ldr	r3, [pc, #76]	@ (8001cf8 <HAL_InitTick+0x64>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	4b11      	ldr	r3, [pc, #68]	@ (8001cf4 <HAL_InitTick+0x60>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f000 f965 	bl	8001f8e <HAL_SYSTICK_Config>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e00e      	b.n	8001cec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b0f      	cmp	r3, #15
 8001cd2:	d80a      	bhi.n	8001cea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cdc:	f000 f92f 	bl	8001f3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ce0:	4a06      	ldr	r2, [pc, #24]	@ (8001cfc <HAL_InitTick+0x68>)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	e000      	b.n	8001cec <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	24000014 	.word	0x24000014
 8001cf8:	24000008 	.word	0x24000008
 8001cfc:	24000010 	.word	0x24000010

08001d00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d04:	4b06      	ldr	r3, [pc, #24]	@ (8001d20 <HAL_IncTick+0x20>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4b06      	ldr	r3, [pc, #24]	@ (8001d24 <HAL_IncTick+0x24>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4413      	add	r3, r2
 8001d10:	4a04      	ldr	r2, [pc, #16]	@ (8001d24 <HAL_IncTick+0x24>)
 8001d12:	6013      	str	r3, [r2, #0]
}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	24000014 	.word	0x24000014
 8001d24:	2400032c 	.word	0x2400032c

08001d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d2c:	4b03      	ldr	r3, [pc, #12]	@ (8001d3c <HAL_GetTick+0x14>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	2400032c 	.word	0x2400032c

08001d40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d48:	f7ff ffee 	bl	8001d28 <HAL_GetTick>
 8001d4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d58:	d005      	beq.n	8001d66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d84 <HAL_Delay+0x44>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	4413      	add	r3, r2
 8001d64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d66:	bf00      	nop
 8001d68:	f7ff ffde 	bl	8001d28 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d8f7      	bhi.n	8001d68 <HAL_Delay+0x28>
  {
  }
}
 8001d78:	bf00      	nop
 8001d7a:	bf00      	nop
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	24000014 	.word	0x24000014

08001d88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d98:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc8 <__NVIC_SetPriorityGrouping+0x40>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d9e:	68ba      	ldr	r2, [r7, #8]
 8001da0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001da4:	4013      	ands	r3, r2
 8001da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001db0:	4b06      	ldr	r3, [pc, #24]	@ (8001dcc <__NVIC_SetPriorityGrouping+0x44>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001db6:	4a04      	ldr	r2, [pc, #16]	@ (8001dc8 <__NVIC_SetPriorityGrouping+0x40>)
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	60d3      	str	r3, [r2, #12]
}
 8001dbc:	bf00      	nop
 8001dbe:	3714      	adds	r7, #20
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	e000ed00 	.word	0xe000ed00
 8001dcc:	05fa0000 	.word	0x05fa0000

08001dd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dd4:	4b04      	ldr	r3, [pc, #16]	@ (8001de8 <__NVIC_GetPriorityGrouping+0x18>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	0a1b      	lsrs	r3, r3, #8
 8001dda:	f003 0307 	and.w	r3, r3, #7
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001df6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	db0b      	blt.n	8001e16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dfe:	88fb      	ldrh	r3, [r7, #6]
 8001e00:	f003 021f 	and.w	r2, r3, #31
 8001e04:	4907      	ldr	r1, [pc, #28]	@ (8001e24 <__NVIC_EnableIRQ+0x38>)
 8001e06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e0a:	095b      	lsrs	r3, r3, #5
 8001e0c:	2001      	movs	r0, #1
 8001e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	e000e100 	.word	0xe000e100

08001e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	6039      	str	r1, [r7, #0]
 8001e32:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	db0a      	blt.n	8001e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	490c      	ldr	r1, [pc, #48]	@ (8001e74 <__NVIC_SetPriority+0x4c>)
 8001e42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e46:	0112      	lsls	r2, r2, #4
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	440b      	add	r3, r1
 8001e4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e50:	e00a      	b.n	8001e68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	4908      	ldr	r1, [pc, #32]	@ (8001e78 <__NVIC_SetPriority+0x50>)
 8001e58:	88fb      	ldrh	r3, [r7, #6]
 8001e5a:	f003 030f 	and.w	r3, r3, #15
 8001e5e:	3b04      	subs	r3, #4
 8001e60:	0112      	lsls	r2, r2, #4
 8001e62:	b2d2      	uxtb	r2, r2
 8001e64:	440b      	add	r3, r1
 8001e66:	761a      	strb	r2, [r3, #24]
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	e000e100 	.word	0xe000e100
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b089      	sub	sp, #36	@ 0x24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	f1c3 0307 	rsb	r3, r3, #7
 8001e96:	2b04      	cmp	r3, #4
 8001e98:	bf28      	it	cs
 8001e9a:	2304      	movcs	r3, #4
 8001e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	3304      	adds	r3, #4
 8001ea2:	2b06      	cmp	r3, #6
 8001ea4:	d902      	bls.n	8001eac <NVIC_EncodePriority+0x30>
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	3b03      	subs	r3, #3
 8001eaa:	e000      	b.n	8001eae <NVIC_EncodePriority+0x32>
 8001eac:	2300      	movs	r3, #0
 8001eae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43da      	mvns	r2, r3
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	401a      	ands	r2, r3
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ece:	43d9      	mvns	r1, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed4:	4313      	orrs	r3, r2
         );
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3724      	adds	r7, #36	@ 0x24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
	...

08001ee4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ef4:	d301      	bcc.n	8001efa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e00f      	b.n	8001f1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001efa:	4a0a      	ldr	r2, [pc, #40]	@ (8001f24 <SysTick_Config+0x40>)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3b01      	subs	r3, #1
 8001f00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f02:	210f      	movs	r1, #15
 8001f04:	f04f 30ff 	mov.w	r0, #4294967295
 8001f08:	f7ff ff8e 	bl	8001e28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f0c:	4b05      	ldr	r3, [pc, #20]	@ (8001f24 <SysTick_Config+0x40>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f12:	4b04      	ldr	r3, [pc, #16]	@ (8001f24 <SysTick_Config+0x40>)
 8001f14:	2207      	movs	r2, #7
 8001f16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	e000e010 	.word	0xe000e010

08001f28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7ff ff29 	bl	8001d88 <__NVIC_SetPriorityGrouping>
}
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b086      	sub	sp, #24
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	4603      	mov	r3, r0
 8001f46:	60b9      	str	r1, [r7, #8]
 8001f48:	607a      	str	r2, [r7, #4]
 8001f4a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f4c:	f7ff ff40 	bl	8001dd0 <__NVIC_GetPriorityGrouping>
 8001f50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	68b9      	ldr	r1, [r7, #8]
 8001f56:	6978      	ldr	r0, [r7, #20]
 8001f58:	f7ff ff90 	bl	8001e7c <NVIC_EncodePriority>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f62:	4611      	mov	r1, r2
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff ff5f 	bl	8001e28 <__NVIC_SetPriority>
}
 8001f6a:	bf00      	nop
 8001f6c:	3718      	adds	r7, #24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b082      	sub	sp, #8
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	4603      	mov	r3, r0
 8001f7a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff ff33 	bl	8001dec <__NVIC_EnableIRQ>
}
 8001f86:	bf00      	nop
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b082      	sub	sp, #8
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff ffa4 	bl	8001ee4 <SysTick_Config>
 8001f9c:	4603      	mov	r3, r0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
	...

08001fa8 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e069      	b.n	800208e <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d102      	bne.n	8001fcc <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7ff fa74 	bl	80014b4 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2202      	movs	r2, #2
 8001fd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d002      	beq.n	8001fe2 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6819      	ldr	r1, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4b2a      	ldr	r3, [pc, #168]	@ (8002098 <HAL_DCMI_Init+0xf0>)
 8001fee:	400b      	ands	r3, r1
 8001ff0:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6819      	ldr	r1, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	695b      	ldr	r3, [r3, #20]
 8002000:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002006:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002012:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800201e:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002024:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800202a:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002030:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8002036:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	430a      	orrs	r2, r1
 800203e:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	2b10      	cmp	r3, #16
 8002046:	d112      	bne.n	800206e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	7f1b      	ldrb	r3, [r3, #28]
 800204c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	7f5b      	ldrb	r3, [r3, #29]
 8002052:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002054:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	7f9b      	ldrb	r3, [r3, #30]
 800205a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800205c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	7fdb      	ldrb	r3, [r3, #31]
 8002064:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800206a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800206c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68da      	ldr	r2, [r3, #12]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f042 021e 	orr.w	r2, r2, #30
 800207c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	ffe0f007 	.word	0xffe0f007

0800209c <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b088      	sub	sp, #32
 80020a0:	af02      	add	r7, sp, #8
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
 80020a8:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d101      	bne.n	80020b8 <HAL_DCMI_Start_DMA+0x1c>
 80020b4:	2302      	movs	r3, #2
 80020b6:	e0ab      	b.n	8002210 <HAL_DCMI_Start_DMA+0x174>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2202      	movs	r2, #2
 80020c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80020d6:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 0202 	bic.w	r2, r2, #2
 80020e6:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6819      	ldr	r1, [r3, #0]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68ba      	ldr	r2, [r7, #8]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020fc:	4a46      	ldr	r2, [pc, #280]	@ (8002218 <HAL_DCMI_Start_DMA+0x17c>)
 80020fe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002104:	4a45      	ldr	r2, [pc, #276]	@ (800221c <HAL_DCMI_Start_DMA+0x180>)
 8002106:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800210c:	2200      	movs	r2, #0
 800210e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	639a      	str	r2, [r3, #56]	@ 0x38
  hdcmi->XferTransferNumber = 0;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdcmi->XferSize = 0;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2200      	movs	r2, #0
 8002120:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdcmi->pBuffPtr = 0;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	645a      	str	r2, [r3, #68]	@ 0x44

  if (Length <= 0xFFFFU)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800212e:	d219      	bcs.n	8002164 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	3328      	adds	r3, #40	@ 0x28
 800213a:	4619      	mov	r1, r3
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	f000 fdac 	bl	8002c9c <HAL_DMA_Start_IT>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d055      	beq.n	80021f6 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2240      	movs	r2, #64	@ 0x40
 800214e:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e055      	b.n	8002210 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002168:	4a2b      	ldr	r2, [pc, #172]	@ (8002218 <HAL_DCMI_Start_DMA+0x17c>)
 800216a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2201      	movs	r2, #1
 8002170:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferSize = Length;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	63da      	str	r2, [r3, #60]	@ 0x3c
    hdcmi->pBuffPtr = pData;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 800217e:	e009      	b.n	8002194 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002184:	085a      	lsrs	r2, r3, #1
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	63da      	str	r2, [r3, #60]	@ 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800218e:	005a      	lsls	r2, r3, #1
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	639a      	str	r2, [r3, #56]	@ 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002198:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800219c:	d2f0      	bcs.n	8002180 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021a2:	1e9a      	subs	r2, r3, #2
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	4413      	add	r3, r2
 80021ba:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	3328      	adds	r3, #40	@ 0x28
 80021c6:	4619      	mov	r1, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021cc:	9300      	str	r3, [sp, #0]
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	f003 f8b3 	bl	800533c <HAL_DMAEx_MultiBufferStart_IT>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00c      	beq.n	80021f6 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2240      	movs	r2, #64	@ 0x40
 80021e0:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e00c      	b.n	8002210 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f042 0201 	orr.w	r2, r2, #1
 8002204:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	08002421 	.word	0x08002421
 800221c:	08002547 	.word	0x08002547

08002220 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8002228:	4b2b      	ldr	r3, [pc, #172]	@ (80022d8 <HAL_DCMI_Stop+0xb8>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a2b      	ldr	r2, [pc, #172]	@ (80022dc <HAL_DCMI_Stop+0xbc>)
 800222e:	fba2 2303 	umull	r2, r3, r2, r3
 8002232:	0a5b      	lsrs	r3, r3, #9
 8002234:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002238:	fb02 f303 	mul.w	r3, r2, r3
 800223c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800223e:	2300      	movs	r3, #0
 8002240:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002248:	2b01      	cmp	r3, #1
 800224a:	d101      	bne.n	8002250 <HAL_DCMI_Stop+0x30>
 800224c:	2302      	movs	r3, #2
 800224e:	e03f      	b.n	80022d0 <HAL_DCMI_Stop+0xb0>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2202      	movs	r2, #2
 800225c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 0201 	bic.w	r2, r2, #1
 800226e:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	3b01      	subs	r3, #1
 8002274:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d108      	bne.n	800228e <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002280:	f043 0220 	orr.w	r2, r3, #32
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	64da      	str	r2, [r3, #76]	@ 0x4c

      status = HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	72fb      	strb	r3, [r7, #11]
      break;
 800228c:	e006      	b.n	800229c <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1e9      	bne.n	8002270 <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80022aa:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022b0:	4618      	mov	r0, r3
 80022b2:	f000 ff5d 	bl	8003170 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return status;
 80022ce:	7afb      	ldrb	r3, [r7, #11]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	24000008 	.word	0x24000008
 80022dc:	10624dd3 	.word	0x10624dd3

080022e0 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f003 0304 	and.w	r3, r3, #4
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d016      	beq.n	8002328 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2204      	movs	r2, #4
 8002300:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002306:	f043 0202 	orr.w	r2, r3, #2
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2204      	movs	r2, #4
 8002312:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800231a:	4a31      	ldr	r2, [pc, #196]	@ (80023e0 <HAL_DCMI_IRQHandler+0x100>)
 800231c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002322:	4618      	mov	r0, r3
 8002324:	f001 fa42 	bl	80037ac <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d016      	beq.n	8002360 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2202      	movs	r2, #2
 8002338:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800233e:	f043 0201 	orr.w	r2, r3, #1
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2204      	movs	r2, #4
 800234a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002352:	4a23      	ldr	r2, [pc, #140]	@ (80023e0 <HAL_DCMI_IRQHandler+0x100>)
 8002354:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800235a:	4618      	mov	r0, r3
 800235c:	f001 fa26 	bl	80037ac <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f003 0310 	and.w	r3, r3, #16
 8002366:	2b00      	cmp	r3, #0
 8002368:	d006      	beq.n	8002378 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2210      	movs	r2, #16
 8002370:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f840 	bl	80023f8 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f003 0308 	and.w	r3, r3, #8
 800237e:	2b00      	cmp	r3, #0
 8002380:	d006      	beq.n	8002390 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2208      	movs	r2, #8
 8002388:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 f83e 	bl	800240c <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d01d      	beq.n	80023d6 <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d107      	bne.n	80023b8 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68da      	ldr	r2, [r3, #12]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 021e 	bic.w	r2, r2, #30
 80023b6:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68da      	ldr	r2, [r3, #12]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0201 	bic.w	r2, r2, #1
 80023c6:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2201      	movs	r2, #1
 80023ce:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f7fe fac1 	bl	8000958 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 80023d6:	bf00      	nop
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	08002547 	.word	0x08002547

080023e4 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800242c:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002432:	2b00      	cmp	r3, #0
 8002434:	d043      	beq.n	80024be <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002442:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b00      	cmp	r3, #0
 800244e:	d118      	bne.n	8002482 <DCMI_DMAXferCplt+0x62>
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d015      	beq.n	8002482 <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002468:	00da      	lsls	r2, r3, #3
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	4413      	add	r3, r2
 800246e:	2200      	movs	r2, #0
 8002470:	4619      	mov	r1, r3
 8002472:	f003 fac1 	bl	80059f8 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800247a:	1e5a      	subs	r2, r3, #1
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002480:	e044      	b.n	800250c <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d13c      	bne.n	800250c <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024a4:	00da      	lsls	r2, r3, #3
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	4413      	add	r3, r2
 80024aa:	2201      	movs	r2, #1
 80024ac:	4619      	mov	r1, r3
 80024ae:	f003 faa3 	bl	80059f8 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024b6:	1e5a      	subs	r2, r3, #1
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	639a      	str	r2, [r3, #56]	@ 0x38
 80024bc:	e026      	b.n	800250c <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d006      	beq.n	80024dc <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80024d8:	60da      	str	r2, [r3, #12]
 80024da:	e017      	b.n	800250c <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d10f      	bne.n	800250c <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f0:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024f6:	0099      	lsls	r1, r3, #2
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	440a      	add	r2, r1
 8002502:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	639a      	str	r2, [r3, #56]	@ 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002514:	429a      	cmp	r2, r3
 8002516:	d112      	bne.n	800253e <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68da      	ldr	r2, [r3, #12]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f042 0201 	orr.w	r2, r2, #1
 8002526:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b02      	cmp	r3, #2
 8002534:	d103      	bne.n	800253e <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2201      	movs	r2, #1
 800253a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
  }
}
 800253e:	bf00      	nop
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b084      	sub	sp, #16
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002552:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800255a:	2b02      	cmp	r3, #2
 800255c:	d009      	beq.n	8002572 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800256a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f7ff ff36 	bl	80023e4 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8002578:	bf00      	nop
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002588:	f7ff fbce 	bl	8001d28 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e37d      	b.n	8002c94 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a66      	ldr	r2, [pc, #408]	@ (8002738 <HAL_DMA_Init+0x1b8>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d04a      	beq.n	8002638 <HAL_DMA_Init+0xb8>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a65      	ldr	r2, [pc, #404]	@ (800273c <HAL_DMA_Init+0x1bc>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d045      	beq.n	8002638 <HAL_DMA_Init+0xb8>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a63      	ldr	r2, [pc, #396]	@ (8002740 <HAL_DMA_Init+0x1c0>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d040      	beq.n	8002638 <HAL_DMA_Init+0xb8>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a62      	ldr	r2, [pc, #392]	@ (8002744 <HAL_DMA_Init+0x1c4>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d03b      	beq.n	8002638 <HAL_DMA_Init+0xb8>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a60      	ldr	r2, [pc, #384]	@ (8002748 <HAL_DMA_Init+0x1c8>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d036      	beq.n	8002638 <HAL_DMA_Init+0xb8>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a5f      	ldr	r2, [pc, #380]	@ (800274c <HAL_DMA_Init+0x1cc>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d031      	beq.n	8002638 <HAL_DMA_Init+0xb8>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a5d      	ldr	r2, [pc, #372]	@ (8002750 <HAL_DMA_Init+0x1d0>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d02c      	beq.n	8002638 <HAL_DMA_Init+0xb8>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a5c      	ldr	r2, [pc, #368]	@ (8002754 <HAL_DMA_Init+0x1d4>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d027      	beq.n	8002638 <HAL_DMA_Init+0xb8>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a5a      	ldr	r2, [pc, #360]	@ (8002758 <HAL_DMA_Init+0x1d8>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d022      	beq.n	8002638 <HAL_DMA_Init+0xb8>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a59      	ldr	r2, [pc, #356]	@ (800275c <HAL_DMA_Init+0x1dc>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d01d      	beq.n	8002638 <HAL_DMA_Init+0xb8>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a57      	ldr	r2, [pc, #348]	@ (8002760 <HAL_DMA_Init+0x1e0>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d018      	beq.n	8002638 <HAL_DMA_Init+0xb8>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a56      	ldr	r2, [pc, #344]	@ (8002764 <HAL_DMA_Init+0x1e4>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d013      	beq.n	8002638 <HAL_DMA_Init+0xb8>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a54      	ldr	r2, [pc, #336]	@ (8002768 <HAL_DMA_Init+0x1e8>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d00e      	beq.n	8002638 <HAL_DMA_Init+0xb8>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a53      	ldr	r2, [pc, #332]	@ (800276c <HAL_DMA_Init+0x1ec>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d009      	beq.n	8002638 <HAL_DMA_Init+0xb8>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a51      	ldr	r2, [pc, #324]	@ (8002770 <HAL_DMA_Init+0x1f0>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d004      	beq.n	8002638 <HAL_DMA_Init+0xb8>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a50      	ldr	r2, [pc, #320]	@ (8002774 <HAL_DMA_Init+0x1f4>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d101      	bne.n	800263c <HAL_DMA_Init+0xbc>
 8002638:	2301      	movs	r3, #1
 800263a:	e000      	b.n	800263e <HAL_DMA_Init+0xbe>
 800263c:	2300      	movs	r3, #0
 800263e:	2b00      	cmp	r3, #0
 8002640:	f000 813c 	beq.w	80028bc <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2202      	movs	r2, #2
 8002648:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a37      	ldr	r2, [pc, #220]	@ (8002738 <HAL_DMA_Init+0x1b8>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d04a      	beq.n	80026f4 <HAL_DMA_Init+0x174>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a36      	ldr	r2, [pc, #216]	@ (800273c <HAL_DMA_Init+0x1bc>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d045      	beq.n	80026f4 <HAL_DMA_Init+0x174>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a34      	ldr	r2, [pc, #208]	@ (8002740 <HAL_DMA_Init+0x1c0>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d040      	beq.n	80026f4 <HAL_DMA_Init+0x174>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a33      	ldr	r2, [pc, #204]	@ (8002744 <HAL_DMA_Init+0x1c4>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d03b      	beq.n	80026f4 <HAL_DMA_Init+0x174>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a31      	ldr	r2, [pc, #196]	@ (8002748 <HAL_DMA_Init+0x1c8>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d036      	beq.n	80026f4 <HAL_DMA_Init+0x174>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a30      	ldr	r2, [pc, #192]	@ (800274c <HAL_DMA_Init+0x1cc>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d031      	beq.n	80026f4 <HAL_DMA_Init+0x174>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a2e      	ldr	r2, [pc, #184]	@ (8002750 <HAL_DMA_Init+0x1d0>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d02c      	beq.n	80026f4 <HAL_DMA_Init+0x174>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a2d      	ldr	r2, [pc, #180]	@ (8002754 <HAL_DMA_Init+0x1d4>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d027      	beq.n	80026f4 <HAL_DMA_Init+0x174>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a2b      	ldr	r2, [pc, #172]	@ (8002758 <HAL_DMA_Init+0x1d8>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d022      	beq.n	80026f4 <HAL_DMA_Init+0x174>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a2a      	ldr	r2, [pc, #168]	@ (800275c <HAL_DMA_Init+0x1dc>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d01d      	beq.n	80026f4 <HAL_DMA_Init+0x174>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a28      	ldr	r2, [pc, #160]	@ (8002760 <HAL_DMA_Init+0x1e0>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d018      	beq.n	80026f4 <HAL_DMA_Init+0x174>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a27      	ldr	r2, [pc, #156]	@ (8002764 <HAL_DMA_Init+0x1e4>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d013      	beq.n	80026f4 <HAL_DMA_Init+0x174>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a25      	ldr	r2, [pc, #148]	@ (8002768 <HAL_DMA_Init+0x1e8>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d00e      	beq.n	80026f4 <HAL_DMA_Init+0x174>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a24      	ldr	r2, [pc, #144]	@ (800276c <HAL_DMA_Init+0x1ec>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d009      	beq.n	80026f4 <HAL_DMA_Init+0x174>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a22      	ldr	r2, [pc, #136]	@ (8002770 <HAL_DMA_Init+0x1f0>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d004      	beq.n	80026f4 <HAL_DMA_Init+0x174>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a21      	ldr	r2, [pc, #132]	@ (8002774 <HAL_DMA_Init+0x1f4>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d108      	bne.n	8002706 <HAL_DMA_Init+0x186>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f022 0201 	bic.w	r2, r2, #1
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	e007      	b.n	8002716 <HAL_DMA_Init+0x196>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 0201 	bic.w	r2, r2, #1
 8002714:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002716:	e02f      	b.n	8002778 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002718:	f7ff fb06 	bl	8001d28 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b05      	cmp	r3, #5
 8002724:	d928      	bls.n	8002778 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2220      	movs	r2, #32
 800272a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2203      	movs	r2, #3
 8002730:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e2ad      	b.n	8002c94 <HAL_DMA_Init+0x714>
 8002738:	40020010 	.word	0x40020010
 800273c:	40020028 	.word	0x40020028
 8002740:	40020040 	.word	0x40020040
 8002744:	40020058 	.word	0x40020058
 8002748:	40020070 	.word	0x40020070
 800274c:	40020088 	.word	0x40020088
 8002750:	400200a0 	.word	0x400200a0
 8002754:	400200b8 	.word	0x400200b8
 8002758:	40020410 	.word	0x40020410
 800275c:	40020428 	.word	0x40020428
 8002760:	40020440 	.word	0x40020440
 8002764:	40020458 	.word	0x40020458
 8002768:	40020470 	.word	0x40020470
 800276c:	40020488 	.word	0x40020488
 8002770:	400204a0 	.word	0x400204a0
 8002774:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1c8      	bne.n	8002718 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	4b73      	ldr	r3, [pc, #460]	@ (8002960 <HAL_DMA_Init+0x3e0>)
 8002792:	4013      	ands	r3, r2
 8002794:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800279e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027aa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027b6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c8:	2b04      	cmp	r3, #4
 80027ca:	d107      	bne.n	80027dc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d4:	4313      	orrs	r3, r2
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	4313      	orrs	r3, r2
 80027da:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	2b28      	cmp	r3, #40	@ 0x28
 80027e2:	d903      	bls.n	80027ec <HAL_DMA_Init+0x26c>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80027ea:	d91f      	bls.n	800282c <HAL_DMA_Init+0x2ac>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	2b3e      	cmp	r3, #62	@ 0x3e
 80027f2:	d903      	bls.n	80027fc <HAL_DMA_Init+0x27c>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	2b42      	cmp	r3, #66	@ 0x42
 80027fa:	d917      	bls.n	800282c <HAL_DMA_Init+0x2ac>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	2b46      	cmp	r3, #70	@ 0x46
 8002802:	d903      	bls.n	800280c <HAL_DMA_Init+0x28c>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	2b48      	cmp	r3, #72	@ 0x48
 800280a:	d90f      	bls.n	800282c <HAL_DMA_Init+0x2ac>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	2b4e      	cmp	r3, #78	@ 0x4e
 8002812:	d903      	bls.n	800281c <HAL_DMA_Init+0x29c>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	2b52      	cmp	r3, #82	@ 0x52
 800281a:	d907      	bls.n	800282c <HAL_DMA_Init+0x2ac>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2b73      	cmp	r3, #115	@ 0x73
 8002822:	d905      	bls.n	8002830 <HAL_DMA_Init+0x2b0>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b77      	cmp	r3, #119	@ 0x77
 800282a:	d801      	bhi.n	8002830 <HAL_DMA_Init+0x2b0>
 800282c:	2301      	movs	r3, #1
 800282e:	e000      	b.n	8002832 <HAL_DMA_Init+0x2b2>
 8002830:	2300      	movs	r3, #0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800283c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f023 0307 	bic.w	r3, r3, #7
 8002854:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	4313      	orrs	r3, r2
 800285e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002864:	2b04      	cmp	r3, #4
 8002866:	d117      	bne.n	8002898 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800286c:	697a      	ldr	r2, [r7, #20]
 800286e:	4313      	orrs	r3, r2
 8002870:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00e      	beq.n	8002898 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f002 fbd4 	bl	8005028 <DMA_CheckFifoParam>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d008      	beq.n	8002898 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2240      	movs	r2, #64	@ 0x40
 800288a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e1fd      	b.n	8002c94 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f002 fb0f 	bl	8004ec4 <DMA_CalcBaseAndBitshift>
 80028a6:	4603      	mov	r3, r0
 80028a8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ae:	f003 031f 	and.w	r3, r3, #31
 80028b2:	223f      	movs	r2, #63	@ 0x3f
 80028b4:	409a      	lsls	r2, r3
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	609a      	str	r2, [r3, #8]
 80028ba:	e0fd      	b.n	8002ab8 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a28      	ldr	r2, [pc, #160]	@ (8002964 <HAL_DMA_Init+0x3e4>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d04a      	beq.n	800295c <HAL_DMA_Init+0x3dc>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a27      	ldr	r2, [pc, #156]	@ (8002968 <HAL_DMA_Init+0x3e8>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d045      	beq.n	800295c <HAL_DMA_Init+0x3dc>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a25      	ldr	r2, [pc, #148]	@ (800296c <HAL_DMA_Init+0x3ec>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d040      	beq.n	800295c <HAL_DMA_Init+0x3dc>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a24      	ldr	r2, [pc, #144]	@ (8002970 <HAL_DMA_Init+0x3f0>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d03b      	beq.n	800295c <HAL_DMA_Init+0x3dc>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a22      	ldr	r2, [pc, #136]	@ (8002974 <HAL_DMA_Init+0x3f4>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d036      	beq.n	800295c <HAL_DMA_Init+0x3dc>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a21      	ldr	r2, [pc, #132]	@ (8002978 <HAL_DMA_Init+0x3f8>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d031      	beq.n	800295c <HAL_DMA_Init+0x3dc>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a1f      	ldr	r2, [pc, #124]	@ (800297c <HAL_DMA_Init+0x3fc>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d02c      	beq.n	800295c <HAL_DMA_Init+0x3dc>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a1e      	ldr	r2, [pc, #120]	@ (8002980 <HAL_DMA_Init+0x400>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d027      	beq.n	800295c <HAL_DMA_Init+0x3dc>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a1c      	ldr	r2, [pc, #112]	@ (8002984 <HAL_DMA_Init+0x404>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d022      	beq.n	800295c <HAL_DMA_Init+0x3dc>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a1b      	ldr	r2, [pc, #108]	@ (8002988 <HAL_DMA_Init+0x408>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d01d      	beq.n	800295c <HAL_DMA_Init+0x3dc>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a19      	ldr	r2, [pc, #100]	@ (800298c <HAL_DMA_Init+0x40c>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d018      	beq.n	800295c <HAL_DMA_Init+0x3dc>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a18      	ldr	r2, [pc, #96]	@ (8002990 <HAL_DMA_Init+0x410>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d013      	beq.n	800295c <HAL_DMA_Init+0x3dc>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a16      	ldr	r2, [pc, #88]	@ (8002994 <HAL_DMA_Init+0x414>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d00e      	beq.n	800295c <HAL_DMA_Init+0x3dc>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a15      	ldr	r2, [pc, #84]	@ (8002998 <HAL_DMA_Init+0x418>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d009      	beq.n	800295c <HAL_DMA_Init+0x3dc>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a13      	ldr	r2, [pc, #76]	@ (800299c <HAL_DMA_Init+0x41c>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d004      	beq.n	800295c <HAL_DMA_Init+0x3dc>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a12      	ldr	r2, [pc, #72]	@ (80029a0 <HAL_DMA_Init+0x420>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d123      	bne.n	80029a4 <HAL_DMA_Init+0x424>
 800295c:	2301      	movs	r3, #1
 800295e:	e022      	b.n	80029a6 <HAL_DMA_Init+0x426>
 8002960:	fe10803f 	.word	0xfe10803f
 8002964:	48022c08 	.word	0x48022c08
 8002968:	48022c1c 	.word	0x48022c1c
 800296c:	48022c30 	.word	0x48022c30
 8002970:	48022c44 	.word	0x48022c44
 8002974:	48022c58 	.word	0x48022c58
 8002978:	48022c6c 	.word	0x48022c6c
 800297c:	48022c80 	.word	0x48022c80
 8002980:	48022c94 	.word	0x48022c94
 8002984:	58025408 	.word	0x58025408
 8002988:	5802541c 	.word	0x5802541c
 800298c:	58025430 	.word	0x58025430
 8002990:	58025444 	.word	0x58025444
 8002994:	58025458 	.word	0x58025458
 8002998:	5802546c 	.word	0x5802546c
 800299c:	58025480 	.word	0x58025480
 80029a0:	58025494 	.word	0x58025494
 80029a4:	2300      	movs	r3, #0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d07d      	beq.n	8002aa6 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a7f      	ldr	r2, [pc, #508]	@ (8002bac <HAL_DMA_Init+0x62c>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d021      	beq.n	80029f8 <HAL_DMA_Init+0x478>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a7d      	ldr	r2, [pc, #500]	@ (8002bb0 <HAL_DMA_Init+0x630>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d01c      	beq.n	80029f8 <HAL_DMA_Init+0x478>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a7c      	ldr	r2, [pc, #496]	@ (8002bb4 <HAL_DMA_Init+0x634>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d017      	beq.n	80029f8 <HAL_DMA_Init+0x478>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a7a      	ldr	r2, [pc, #488]	@ (8002bb8 <HAL_DMA_Init+0x638>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d012      	beq.n	80029f8 <HAL_DMA_Init+0x478>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a79      	ldr	r2, [pc, #484]	@ (8002bbc <HAL_DMA_Init+0x63c>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d00d      	beq.n	80029f8 <HAL_DMA_Init+0x478>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a77      	ldr	r2, [pc, #476]	@ (8002bc0 <HAL_DMA_Init+0x640>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d008      	beq.n	80029f8 <HAL_DMA_Init+0x478>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a76      	ldr	r2, [pc, #472]	@ (8002bc4 <HAL_DMA_Init+0x644>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d003      	beq.n	80029f8 <HAL_DMA_Init+0x478>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a74      	ldr	r2, [pc, #464]	@ (8002bc8 <HAL_DMA_Init+0x648>)
 80029f6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2202      	movs	r2, #2
 80029fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	4b6e      	ldr	r3, [pc, #440]	@ (8002bcc <HAL_DMA_Init+0x64c>)
 8002a14:	4013      	ands	r3, r2
 8002a16:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	2b40      	cmp	r3, #64	@ 0x40
 8002a1e:	d008      	beq.n	8002a32 <HAL_DMA_Init+0x4b2>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	2b80      	cmp	r3, #128	@ 0x80
 8002a26:	d102      	bne.n	8002a2e <HAL_DMA_Init+0x4ae>
 8002a28:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002a2c:	e002      	b.n	8002a34 <HAL_DMA_Init+0x4b4>
 8002a2e:	2300      	movs	r3, #0
 8002a30:	e000      	b.n	8002a34 <HAL_DMA_Init+0x4b4>
 8002a32:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	68d2      	ldr	r2, [r2, #12]
 8002a38:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002a3a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002a42:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	695b      	ldr	r3, [r3, #20]
 8002a48:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002a4a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002a52:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	69db      	ldr	r3, [r3, #28]
 8002a58:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002a5a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002a62:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	461a      	mov	r2, r3
 8002a78:	4b55      	ldr	r3, [pc, #340]	@ (8002bd0 <HAL_DMA_Init+0x650>)
 8002a7a:	4413      	add	r3, r2
 8002a7c:	4a55      	ldr	r2, [pc, #340]	@ (8002bd4 <HAL_DMA_Init+0x654>)
 8002a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a82:	091b      	lsrs	r3, r3, #4
 8002a84:	009a      	lsls	r2, r3, #2
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f002 fa1a 	bl	8004ec4 <DMA_CalcBaseAndBitshift>
 8002a90:	4603      	mov	r3, r0
 8002a92:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a98:	f003 031f 	and.w	r3, r3, #31
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	409a      	lsls	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	605a      	str	r2, [r3, #4]
 8002aa4:	e008      	b.n	8002ab8 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2240      	movs	r2, #64	@ 0x40
 8002aaa:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2203      	movs	r2, #3
 8002ab0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e0ed      	b.n	8002c94 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a46      	ldr	r2, [pc, #280]	@ (8002bd8 <HAL_DMA_Init+0x658>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d072      	beq.n	8002ba8 <HAL_DMA_Init+0x628>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a45      	ldr	r2, [pc, #276]	@ (8002bdc <HAL_DMA_Init+0x65c>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d06d      	beq.n	8002ba8 <HAL_DMA_Init+0x628>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a43      	ldr	r2, [pc, #268]	@ (8002be0 <HAL_DMA_Init+0x660>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d068      	beq.n	8002ba8 <HAL_DMA_Init+0x628>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a42      	ldr	r2, [pc, #264]	@ (8002be4 <HAL_DMA_Init+0x664>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d063      	beq.n	8002ba8 <HAL_DMA_Init+0x628>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a40      	ldr	r2, [pc, #256]	@ (8002be8 <HAL_DMA_Init+0x668>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d05e      	beq.n	8002ba8 <HAL_DMA_Init+0x628>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a3f      	ldr	r2, [pc, #252]	@ (8002bec <HAL_DMA_Init+0x66c>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d059      	beq.n	8002ba8 <HAL_DMA_Init+0x628>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a3d      	ldr	r2, [pc, #244]	@ (8002bf0 <HAL_DMA_Init+0x670>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d054      	beq.n	8002ba8 <HAL_DMA_Init+0x628>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a3c      	ldr	r2, [pc, #240]	@ (8002bf4 <HAL_DMA_Init+0x674>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d04f      	beq.n	8002ba8 <HAL_DMA_Init+0x628>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a3a      	ldr	r2, [pc, #232]	@ (8002bf8 <HAL_DMA_Init+0x678>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d04a      	beq.n	8002ba8 <HAL_DMA_Init+0x628>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a39      	ldr	r2, [pc, #228]	@ (8002bfc <HAL_DMA_Init+0x67c>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d045      	beq.n	8002ba8 <HAL_DMA_Init+0x628>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a37      	ldr	r2, [pc, #220]	@ (8002c00 <HAL_DMA_Init+0x680>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d040      	beq.n	8002ba8 <HAL_DMA_Init+0x628>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a36      	ldr	r2, [pc, #216]	@ (8002c04 <HAL_DMA_Init+0x684>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d03b      	beq.n	8002ba8 <HAL_DMA_Init+0x628>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a34      	ldr	r2, [pc, #208]	@ (8002c08 <HAL_DMA_Init+0x688>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d036      	beq.n	8002ba8 <HAL_DMA_Init+0x628>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a33      	ldr	r2, [pc, #204]	@ (8002c0c <HAL_DMA_Init+0x68c>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d031      	beq.n	8002ba8 <HAL_DMA_Init+0x628>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a31      	ldr	r2, [pc, #196]	@ (8002c10 <HAL_DMA_Init+0x690>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d02c      	beq.n	8002ba8 <HAL_DMA_Init+0x628>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a30      	ldr	r2, [pc, #192]	@ (8002c14 <HAL_DMA_Init+0x694>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d027      	beq.n	8002ba8 <HAL_DMA_Init+0x628>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a13      	ldr	r2, [pc, #76]	@ (8002bac <HAL_DMA_Init+0x62c>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d022      	beq.n	8002ba8 <HAL_DMA_Init+0x628>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a12      	ldr	r2, [pc, #72]	@ (8002bb0 <HAL_DMA_Init+0x630>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d01d      	beq.n	8002ba8 <HAL_DMA_Init+0x628>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a10      	ldr	r2, [pc, #64]	@ (8002bb4 <HAL_DMA_Init+0x634>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d018      	beq.n	8002ba8 <HAL_DMA_Init+0x628>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a0f      	ldr	r2, [pc, #60]	@ (8002bb8 <HAL_DMA_Init+0x638>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d013      	beq.n	8002ba8 <HAL_DMA_Init+0x628>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a0d      	ldr	r2, [pc, #52]	@ (8002bbc <HAL_DMA_Init+0x63c>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d00e      	beq.n	8002ba8 <HAL_DMA_Init+0x628>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a0c      	ldr	r2, [pc, #48]	@ (8002bc0 <HAL_DMA_Init+0x640>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d009      	beq.n	8002ba8 <HAL_DMA_Init+0x628>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a0a      	ldr	r2, [pc, #40]	@ (8002bc4 <HAL_DMA_Init+0x644>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d004      	beq.n	8002ba8 <HAL_DMA_Init+0x628>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a09      	ldr	r2, [pc, #36]	@ (8002bc8 <HAL_DMA_Init+0x648>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d137      	bne.n	8002c18 <HAL_DMA_Init+0x698>
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e036      	b.n	8002c1a <HAL_DMA_Init+0x69a>
 8002bac:	58025408 	.word	0x58025408
 8002bb0:	5802541c 	.word	0x5802541c
 8002bb4:	58025430 	.word	0x58025430
 8002bb8:	58025444 	.word	0x58025444
 8002bbc:	58025458 	.word	0x58025458
 8002bc0:	5802546c 	.word	0x5802546c
 8002bc4:	58025480 	.word	0x58025480
 8002bc8:	58025494 	.word	0x58025494
 8002bcc:	fffe000f 	.word	0xfffe000f
 8002bd0:	a7fdabf8 	.word	0xa7fdabf8
 8002bd4:	cccccccd 	.word	0xcccccccd
 8002bd8:	40020010 	.word	0x40020010
 8002bdc:	40020028 	.word	0x40020028
 8002be0:	40020040 	.word	0x40020040
 8002be4:	40020058 	.word	0x40020058
 8002be8:	40020070 	.word	0x40020070
 8002bec:	40020088 	.word	0x40020088
 8002bf0:	400200a0 	.word	0x400200a0
 8002bf4:	400200b8 	.word	0x400200b8
 8002bf8:	40020410 	.word	0x40020410
 8002bfc:	40020428 	.word	0x40020428
 8002c00:	40020440 	.word	0x40020440
 8002c04:	40020458 	.word	0x40020458
 8002c08:	40020470 	.word	0x40020470
 8002c0c:	40020488 	.word	0x40020488
 8002c10:	400204a0 	.word	0x400204a0
 8002c14:	400204b8 	.word	0x400204b8
 8002c18:	2300      	movs	r3, #0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d032      	beq.n	8002c84 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f002 fa7e 	bl	8005120 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	2b80      	cmp	r3, #128	@ 0x80
 8002c2a:	d102      	bne.n	8002c32 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002c46:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d010      	beq.n	8002c72 <HAL_DMA_Init+0x6f2>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	2b08      	cmp	r3, #8
 8002c56:	d80c      	bhi.n	8002c72 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f002 fafb 	bl	8005254 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c62:	2200      	movs	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002c6e:	605a      	str	r2, [r3, #4]
 8002c70:	e008      	b.n	8002c84 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3718      	adds	r7, #24
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
 8002ca8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002caa:	2300      	movs	r3, #0
 8002cac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e226      	b.n	8003106 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d101      	bne.n	8002cc6 <HAL_DMA_Start_IT+0x2a>
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	e21f      	b.n	8003106 <HAL_DMA_Start_IT+0x46a>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	f040 820a 	bne.w	80030f0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2202      	movs	r2, #2
 8002ce0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a68      	ldr	r2, [pc, #416]	@ (8002e90 <HAL_DMA_Start_IT+0x1f4>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d04a      	beq.n	8002d8a <HAL_DMA_Start_IT+0xee>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a66      	ldr	r2, [pc, #408]	@ (8002e94 <HAL_DMA_Start_IT+0x1f8>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d045      	beq.n	8002d8a <HAL_DMA_Start_IT+0xee>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a65      	ldr	r2, [pc, #404]	@ (8002e98 <HAL_DMA_Start_IT+0x1fc>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d040      	beq.n	8002d8a <HAL_DMA_Start_IT+0xee>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a63      	ldr	r2, [pc, #396]	@ (8002e9c <HAL_DMA_Start_IT+0x200>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d03b      	beq.n	8002d8a <HAL_DMA_Start_IT+0xee>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a62      	ldr	r2, [pc, #392]	@ (8002ea0 <HAL_DMA_Start_IT+0x204>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d036      	beq.n	8002d8a <HAL_DMA_Start_IT+0xee>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a60      	ldr	r2, [pc, #384]	@ (8002ea4 <HAL_DMA_Start_IT+0x208>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d031      	beq.n	8002d8a <HAL_DMA_Start_IT+0xee>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a5f      	ldr	r2, [pc, #380]	@ (8002ea8 <HAL_DMA_Start_IT+0x20c>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d02c      	beq.n	8002d8a <HAL_DMA_Start_IT+0xee>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a5d      	ldr	r2, [pc, #372]	@ (8002eac <HAL_DMA_Start_IT+0x210>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d027      	beq.n	8002d8a <HAL_DMA_Start_IT+0xee>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a5c      	ldr	r2, [pc, #368]	@ (8002eb0 <HAL_DMA_Start_IT+0x214>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d022      	beq.n	8002d8a <HAL_DMA_Start_IT+0xee>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a5a      	ldr	r2, [pc, #360]	@ (8002eb4 <HAL_DMA_Start_IT+0x218>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d01d      	beq.n	8002d8a <HAL_DMA_Start_IT+0xee>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a59      	ldr	r2, [pc, #356]	@ (8002eb8 <HAL_DMA_Start_IT+0x21c>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d018      	beq.n	8002d8a <HAL_DMA_Start_IT+0xee>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a57      	ldr	r2, [pc, #348]	@ (8002ebc <HAL_DMA_Start_IT+0x220>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d013      	beq.n	8002d8a <HAL_DMA_Start_IT+0xee>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a56      	ldr	r2, [pc, #344]	@ (8002ec0 <HAL_DMA_Start_IT+0x224>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d00e      	beq.n	8002d8a <HAL_DMA_Start_IT+0xee>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a54      	ldr	r2, [pc, #336]	@ (8002ec4 <HAL_DMA_Start_IT+0x228>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d009      	beq.n	8002d8a <HAL_DMA_Start_IT+0xee>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a53      	ldr	r2, [pc, #332]	@ (8002ec8 <HAL_DMA_Start_IT+0x22c>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d004      	beq.n	8002d8a <HAL_DMA_Start_IT+0xee>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a51      	ldr	r2, [pc, #324]	@ (8002ecc <HAL_DMA_Start_IT+0x230>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d108      	bne.n	8002d9c <HAL_DMA_Start_IT+0x100>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 0201 	bic.w	r2, r2, #1
 8002d98:	601a      	str	r2, [r3, #0]
 8002d9a:	e007      	b.n	8002dac <HAL_DMA_Start_IT+0x110>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 0201 	bic.w	r2, r2, #1
 8002daa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	68b9      	ldr	r1, [r7, #8]
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f001 fea2 	bl	8004afc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a34      	ldr	r2, [pc, #208]	@ (8002e90 <HAL_DMA_Start_IT+0x1f4>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d04a      	beq.n	8002e58 <HAL_DMA_Start_IT+0x1bc>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a33      	ldr	r2, [pc, #204]	@ (8002e94 <HAL_DMA_Start_IT+0x1f8>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d045      	beq.n	8002e58 <HAL_DMA_Start_IT+0x1bc>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a31      	ldr	r2, [pc, #196]	@ (8002e98 <HAL_DMA_Start_IT+0x1fc>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d040      	beq.n	8002e58 <HAL_DMA_Start_IT+0x1bc>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a30      	ldr	r2, [pc, #192]	@ (8002e9c <HAL_DMA_Start_IT+0x200>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d03b      	beq.n	8002e58 <HAL_DMA_Start_IT+0x1bc>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a2e      	ldr	r2, [pc, #184]	@ (8002ea0 <HAL_DMA_Start_IT+0x204>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d036      	beq.n	8002e58 <HAL_DMA_Start_IT+0x1bc>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a2d      	ldr	r2, [pc, #180]	@ (8002ea4 <HAL_DMA_Start_IT+0x208>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d031      	beq.n	8002e58 <HAL_DMA_Start_IT+0x1bc>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a2b      	ldr	r2, [pc, #172]	@ (8002ea8 <HAL_DMA_Start_IT+0x20c>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d02c      	beq.n	8002e58 <HAL_DMA_Start_IT+0x1bc>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a2a      	ldr	r2, [pc, #168]	@ (8002eac <HAL_DMA_Start_IT+0x210>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d027      	beq.n	8002e58 <HAL_DMA_Start_IT+0x1bc>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a28      	ldr	r2, [pc, #160]	@ (8002eb0 <HAL_DMA_Start_IT+0x214>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d022      	beq.n	8002e58 <HAL_DMA_Start_IT+0x1bc>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a27      	ldr	r2, [pc, #156]	@ (8002eb4 <HAL_DMA_Start_IT+0x218>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d01d      	beq.n	8002e58 <HAL_DMA_Start_IT+0x1bc>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a25      	ldr	r2, [pc, #148]	@ (8002eb8 <HAL_DMA_Start_IT+0x21c>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d018      	beq.n	8002e58 <HAL_DMA_Start_IT+0x1bc>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a24      	ldr	r2, [pc, #144]	@ (8002ebc <HAL_DMA_Start_IT+0x220>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d013      	beq.n	8002e58 <HAL_DMA_Start_IT+0x1bc>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a22      	ldr	r2, [pc, #136]	@ (8002ec0 <HAL_DMA_Start_IT+0x224>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d00e      	beq.n	8002e58 <HAL_DMA_Start_IT+0x1bc>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a21      	ldr	r2, [pc, #132]	@ (8002ec4 <HAL_DMA_Start_IT+0x228>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d009      	beq.n	8002e58 <HAL_DMA_Start_IT+0x1bc>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a1f      	ldr	r2, [pc, #124]	@ (8002ec8 <HAL_DMA_Start_IT+0x22c>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d004      	beq.n	8002e58 <HAL_DMA_Start_IT+0x1bc>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a1e      	ldr	r2, [pc, #120]	@ (8002ecc <HAL_DMA_Start_IT+0x230>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d101      	bne.n	8002e5c <HAL_DMA_Start_IT+0x1c0>
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e000      	b.n	8002e5e <HAL_DMA_Start_IT+0x1c2>
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d036      	beq.n	8002ed0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f023 021e 	bic.w	r2, r3, #30
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f042 0216 	orr.w	r2, r2, #22
 8002e74:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d03e      	beq.n	8002efc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f042 0208 	orr.w	r2, r2, #8
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	e035      	b.n	8002efc <HAL_DMA_Start_IT+0x260>
 8002e90:	40020010 	.word	0x40020010
 8002e94:	40020028 	.word	0x40020028
 8002e98:	40020040 	.word	0x40020040
 8002e9c:	40020058 	.word	0x40020058
 8002ea0:	40020070 	.word	0x40020070
 8002ea4:	40020088 	.word	0x40020088
 8002ea8:	400200a0 	.word	0x400200a0
 8002eac:	400200b8 	.word	0x400200b8
 8002eb0:	40020410 	.word	0x40020410
 8002eb4:	40020428 	.word	0x40020428
 8002eb8:	40020440 	.word	0x40020440
 8002ebc:	40020458 	.word	0x40020458
 8002ec0:	40020470 	.word	0x40020470
 8002ec4:	40020488 	.word	0x40020488
 8002ec8:	400204a0 	.word	0x400204a0
 8002ecc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f023 020e 	bic.w	r2, r3, #14
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 020a 	orr.w	r2, r2, #10
 8002ee2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d007      	beq.n	8002efc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 0204 	orr.w	r2, r2, #4
 8002efa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a83      	ldr	r2, [pc, #524]	@ (8003110 <HAL_DMA_Start_IT+0x474>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d072      	beq.n	8002fec <HAL_DMA_Start_IT+0x350>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a82      	ldr	r2, [pc, #520]	@ (8003114 <HAL_DMA_Start_IT+0x478>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d06d      	beq.n	8002fec <HAL_DMA_Start_IT+0x350>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a80      	ldr	r2, [pc, #512]	@ (8003118 <HAL_DMA_Start_IT+0x47c>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d068      	beq.n	8002fec <HAL_DMA_Start_IT+0x350>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a7f      	ldr	r2, [pc, #508]	@ (800311c <HAL_DMA_Start_IT+0x480>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d063      	beq.n	8002fec <HAL_DMA_Start_IT+0x350>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a7d      	ldr	r2, [pc, #500]	@ (8003120 <HAL_DMA_Start_IT+0x484>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d05e      	beq.n	8002fec <HAL_DMA_Start_IT+0x350>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a7c      	ldr	r2, [pc, #496]	@ (8003124 <HAL_DMA_Start_IT+0x488>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d059      	beq.n	8002fec <HAL_DMA_Start_IT+0x350>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a7a      	ldr	r2, [pc, #488]	@ (8003128 <HAL_DMA_Start_IT+0x48c>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d054      	beq.n	8002fec <HAL_DMA_Start_IT+0x350>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a79      	ldr	r2, [pc, #484]	@ (800312c <HAL_DMA_Start_IT+0x490>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d04f      	beq.n	8002fec <HAL_DMA_Start_IT+0x350>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a77      	ldr	r2, [pc, #476]	@ (8003130 <HAL_DMA_Start_IT+0x494>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d04a      	beq.n	8002fec <HAL_DMA_Start_IT+0x350>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a76      	ldr	r2, [pc, #472]	@ (8003134 <HAL_DMA_Start_IT+0x498>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d045      	beq.n	8002fec <HAL_DMA_Start_IT+0x350>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a74      	ldr	r2, [pc, #464]	@ (8003138 <HAL_DMA_Start_IT+0x49c>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d040      	beq.n	8002fec <HAL_DMA_Start_IT+0x350>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a73      	ldr	r2, [pc, #460]	@ (800313c <HAL_DMA_Start_IT+0x4a0>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d03b      	beq.n	8002fec <HAL_DMA_Start_IT+0x350>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a71      	ldr	r2, [pc, #452]	@ (8003140 <HAL_DMA_Start_IT+0x4a4>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d036      	beq.n	8002fec <HAL_DMA_Start_IT+0x350>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a70      	ldr	r2, [pc, #448]	@ (8003144 <HAL_DMA_Start_IT+0x4a8>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d031      	beq.n	8002fec <HAL_DMA_Start_IT+0x350>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a6e      	ldr	r2, [pc, #440]	@ (8003148 <HAL_DMA_Start_IT+0x4ac>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d02c      	beq.n	8002fec <HAL_DMA_Start_IT+0x350>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a6d      	ldr	r2, [pc, #436]	@ (800314c <HAL_DMA_Start_IT+0x4b0>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d027      	beq.n	8002fec <HAL_DMA_Start_IT+0x350>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a6b      	ldr	r2, [pc, #428]	@ (8003150 <HAL_DMA_Start_IT+0x4b4>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d022      	beq.n	8002fec <HAL_DMA_Start_IT+0x350>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a6a      	ldr	r2, [pc, #424]	@ (8003154 <HAL_DMA_Start_IT+0x4b8>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d01d      	beq.n	8002fec <HAL_DMA_Start_IT+0x350>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a68      	ldr	r2, [pc, #416]	@ (8003158 <HAL_DMA_Start_IT+0x4bc>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d018      	beq.n	8002fec <HAL_DMA_Start_IT+0x350>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a67      	ldr	r2, [pc, #412]	@ (800315c <HAL_DMA_Start_IT+0x4c0>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d013      	beq.n	8002fec <HAL_DMA_Start_IT+0x350>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a65      	ldr	r2, [pc, #404]	@ (8003160 <HAL_DMA_Start_IT+0x4c4>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d00e      	beq.n	8002fec <HAL_DMA_Start_IT+0x350>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a64      	ldr	r2, [pc, #400]	@ (8003164 <HAL_DMA_Start_IT+0x4c8>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d009      	beq.n	8002fec <HAL_DMA_Start_IT+0x350>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a62      	ldr	r2, [pc, #392]	@ (8003168 <HAL_DMA_Start_IT+0x4cc>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d004      	beq.n	8002fec <HAL_DMA_Start_IT+0x350>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a61      	ldr	r2, [pc, #388]	@ (800316c <HAL_DMA_Start_IT+0x4d0>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d101      	bne.n	8002ff0 <HAL_DMA_Start_IT+0x354>
 8002fec:	2301      	movs	r3, #1
 8002fee:	e000      	b.n	8002ff2 <HAL_DMA_Start_IT+0x356>
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d01a      	beq.n	800302c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d007      	beq.n	8003014 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800300e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003012:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003018:	2b00      	cmp	r3, #0
 800301a:	d007      	beq.n	800302c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003026:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800302a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a37      	ldr	r2, [pc, #220]	@ (8003110 <HAL_DMA_Start_IT+0x474>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d04a      	beq.n	80030cc <HAL_DMA_Start_IT+0x430>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a36      	ldr	r2, [pc, #216]	@ (8003114 <HAL_DMA_Start_IT+0x478>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d045      	beq.n	80030cc <HAL_DMA_Start_IT+0x430>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a34      	ldr	r2, [pc, #208]	@ (8003118 <HAL_DMA_Start_IT+0x47c>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d040      	beq.n	80030cc <HAL_DMA_Start_IT+0x430>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a33      	ldr	r2, [pc, #204]	@ (800311c <HAL_DMA_Start_IT+0x480>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d03b      	beq.n	80030cc <HAL_DMA_Start_IT+0x430>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a31      	ldr	r2, [pc, #196]	@ (8003120 <HAL_DMA_Start_IT+0x484>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d036      	beq.n	80030cc <HAL_DMA_Start_IT+0x430>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a30      	ldr	r2, [pc, #192]	@ (8003124 <HAL_DMA_Start_IT+0x488>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d031      	beq.n	80030cc <HAL_DMA_Start_IT+0x430>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a2e      	ldr	r2, [pc, #184]	@ (8003128 <HAL_DMA_Start_IT+0x48c>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d02c      	beq.n	80030cc <HAL_DMA_Start_IT+0x430>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a2d      	ldr	r2, [pc, #180]	@ (800312c <HAL_DMA_Start_IT+0x490>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d027      	beq.n	80030cc <HAL_DMA_Start_IT+0x430>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a2b      	ldr	r2, [pc, #172]	@ (8003130 <HAL_DMA_Start_IT+0x494>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d022      	beq.n	80030cc <HAL_DMA_Start_IT+0x430>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a2a      	ldr	r2, [pc, #168]	@ (8003134 <HAL_DMA_Start_IT+0x498>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d01d      	beq.n	80030cc <HAL_DMA_Start_IT+0x430>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a28      	ldr	r2, [pc, #160]	@ (8003138 <HAL_DMA_Start_IT+0x49c>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d018      	beq.n	80030cc <HAL_DMA_Start_IT+0x430>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a27      	ldr	r2, [pc, #156]	@ (800313c <HAL_DMA_Start_IT+0x4a0>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d013      	beq.n	80030cc <HAL_DMA_Start_IT+0x430>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a25      	ldr	r2, [pc, #148]	@ (8003140 <HAL_DMA_Start_IT+0x4a4>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d00e      	beq.n	80030cc <HAL_DMA_Start_IT+0x430>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a24      	ldr	r2, [pc, #144]	@ (8003144 <HAL_DMA_Start_IT+0x4a8>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d009      	beq.n	80030cc <HAL_DMA_Start_IT+0x430>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a22      	ldr	r2, [pc, #136]	@ (8003148 <HAL_DMA_Start_IT+0x4ac>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d004      	beq.n	80030cc <HAL_DMA_Start_IT+0x430>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a21      	ldr	r2, [pc, #132]	@ (800314c <HAL_DMA_Start_IT+0x4b0>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d108      	bne.n	80030de <HAL_DMA_Start_IT+0x442>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f042 0201 	orr.w	r2, r2, #1
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	e012      	b.n	8003104 <HAL_DMA_Start_IT+0x468>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f042 0201 	orr.w	r2, r2, #1
 80030ec:	601a      	str	r2, [r3, #0]
 80030ee:	e009      	b.n	8003104 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80030f6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003104:	7dfb      	ldrb	r3, [r7, #23]
}
 8003106:	4618      	mov	r0, r3
 8003108:	3718      	adds	r7, #24
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	40020010 	.word	0x40020010
 8003114:	40020028 	.word	0x40020028
 8003118:	40020040 	.word	0x40020040
 800311c:	40020058 	.word	0x40020058
 8003120:	40020070 	.word	0x40020070
 8003124:	40020088 	.word	0x40020088
 8003128:	400200a0 	.word	0x400200a0
 800312c:	400200b8 	.word	0x400200b8
 8003130:	40020410 	.word	0x40020410
 8003134:	40020428 	.word	0x40020428
 8003138:	40020440 	.word	0x40020440
 800313c:	40020458 	.word	0x40020458
 8003140:	40020470 	.word	0x40020470
 8003144:	40020488 	.word	0x40020488
 8003148:	400204a0 	.word	0x400204a0
 800314c:	400204b8 	.word	0x400204b8
 8003150:	58025408 	.word	0x58025408
 8003154:	5802541c 	.word	0x5802541c
 8003158:	58025430 	.word	0x58025430
 800315c:	58025444 	.word	0x58025444
 8003160:	58025458 	.word	0x58025458
 8003164:	5802546c 	.word	0x5802546c
 8003168:	58025480 	.word	0x58025480
 800316c:	58025494 	.word	0x58025494

08003170 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003178:	f7fe fdd6 	bl	8001d28 <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d101      	bne.n	8003188 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e2dc      	b.n	8003742 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d008      	beq.n	80031a6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2280      	movs	r2, #128	@ 0x80
 8003198:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e2cd      	b.n	8003742 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a76      	ldr	r2, [pc, #472]	@ (8003384 <HAL_DMA_Abort+0x214>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d04a      	beq.n	8003246 <HAL_DMA_Abort+0xd6>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a74      	ldr	r2, [pc, #464]	@ (8003388 <HAL_DMA_Abort+0x218>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d045      	beq.n	8003246 <HAL_DMA_Abort+0xd6>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a73      	ldr	r2, [pc, #460]	@ (800338c <HAL_DMA_Abort+0x21c>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d040      	beq.n	8003246 <HAL_DMA_Abort+0xd6>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a71      	ldr	r2, [pc, #452]	@ (8003390 <HAL_DMA_Abort+0x220>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d03b      	beq.n	8003246 <HAL_DMA_Abort+0xd6>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a70      	ldr	r2, [pc, #448]	@ (8003394 <HAL_DMA_Abort+0x224>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d036      	beq.n	8003246 <HAL_DMA_Abort+0xd6>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a6e      	ldr	r2, [pc, #440]	@ (8003398 <HAL_DMA_Abort+0x228>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d031      	beq.n	8003246 <HAL_DMA_Abort+0xd6>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a6d      	ldr	r2, [pc, #436]	@ (800339c <HAL_DMA_Abort+0x22c>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d02c      	beq.n	8003246 <HAL_DMA_Abort+0xd6>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a6b      	ldr	r2, [pc, #428]	@ (80033a0 <HAL_DMA_Abort+0x230>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d027      	beq.n	8003246 <HAL_DMA_Abort+0xd6>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a6a      	ldr	r2, [pc, #424]	@ (80033a4 <HAL_DMA_Abort+0x234>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d022      	beq.n	8003246 <HAL_DMA_Abort+0xd6>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a68      	ldr	r2, [pc, #416]	@ (80033a8 <HAL_DMA_Abort+0x238>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d01d      	beq.n	8003246 <HAL_DMA_Abort+0xd6>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a67      	ldr	r2, [pc, #412]	@ (80033ac <HAL_DMA_Abort+0x23c>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d018      	beq.n	8003246 <HAL_DMA_Abort+0xd6>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a65      	ldr	r2, [pc, #404]	@ (80033b0 <HAL_DMA_Abort+0x240>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d013      	beq.n	8003246 <HAL_DMA_Abort+0xd6>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a64      	ldr	r2, [pc, #400]	@ (80033b4 <HAL_DMA_Abort+0x244>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d00e      	beq.n	8003246 <HAL_DMA_Abort+0xd6>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a62      	ldr	r2, [pc, #392]	@ (80033b8 <HAL_DMA_Abort+0x248>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d009      	beq.n	8003246 <HAL_DMA_Abort+0xd6>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a61      	ldr	r2, [pc, #388]	@ (80033bc <HAL_DMA_Abort+0x24c>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d004      	beq.n	8003246 <HAL_DMA_Abort+0xd6>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a5f      	ldr	r2, [pc, #380]	@ (80033c0 <HAL_DMA_Abort+0x250>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d101      	bne.n	800324a <HAL_DMA_Abort+0xda>
 8003246:	2301      	movs	r3, #1
 8003248:	e000      	b.n	800324c <HAL_DMA_Abort+0xdc>
 800324a:	2300      	movs	r3, #0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d013      	beq.n	8003278 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 021e 	bic.w	r2, r2, #30
 800325e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	695a      	ldr	r2, [r3, #20]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800326e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	617b      	str	r3, [r7, #20]
 8003276:	e00a      	b.n	800328e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 020e 	bic.w	r2, r2, #14
 8003286:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a3c      	ldr	r2, [pc, #240]	@ (8003384 <HAL_DMA_Abort+0x214>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d072      	beq.n	800337e <HAL_DMA_Abort+0x20e>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a3a      	ldr	r2, [pc, #232]	@ (8003388 <HAL_DMA_Abort+0x218>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d06d      	beq.n	800337e <HAL_DMA_Abort+0x20e>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a39      	ldr	r2, [pc, #228]	@ (800338c <HAL_DMA_Abort+0x21c>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d068      	beq.n	800337e <HAL_DMA_Abort+0x20e>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a37      	ldr	r2, [pc, #220]	@ (8003390 <HAL_DMA_Abort+0x220>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d063      	beq.n	800337e <HAL_DMA_Abort+0x20e>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a36      	ldr	r2, [pc, #216]	@ (8003394 <HAL_DMA_Abort+0x224>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d05e      	beq.n	800337e <HAL_DMA_Abort+0x20e>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a34      	ldr	r2, [pc, #208]	@ (8003398 <HAL_DMA_Abort+0x228>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d059      	beq.n	800337e <HAL_DMA_Abort+0x20e>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a33      	ldr	r2, [pc, #204]	@ (800339c <HAL_DMA_Abort+0x22c>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d054      	beq.n	800337e <HAL_DMA_Abort+0x20e>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a31      	ldr	r2, [pc, #196]	@ (80033a0 <HAL_DMA_Abort+0x230>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d04f      	beq.n	800337e <HAL_DMA_Abort+0x20e>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a30      	ldr	r2, [pc, #192]	@ (80033a4 <HAL_DMA_Abort+0x234>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d04a      	beq.n	800337e <HAL_DMA_Abort+0x20e>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a2e      	ldr	r2, [pc, #184]	@ (80033a8 <HAL_DMA_Abort+0x238>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d045      	beq.n	800337e <HAL_DMA_Abort+0x20e>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a2d      	ldr	r2, [pc, #180]	@ (80033ac <HAL_DMA_Abort+0x23c>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d040      	beq.n	800337e <HAL_DMA_Abort+0x20e>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a2b      	ldr	r2, [pc, #172]	@ (80033b0 <HAL_DMA_Abort+0x240>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d03b      	beq.n	800337e <HAL_DMA_Abort+0x20e>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a2a      	ldr	r2, [pc, #168]	@ (80033b4 <HAL_DMA_Abort+0x244>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d036      	beq.n	800337e <HAL_DMA_Abort+0x20e>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a28      	ldr	r2, [pc, #160]	@ (80033b8 <HAL_DMA_Abort+0x248>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d031      	beq.n	800337e <HAL_DMA_Abort+0x20e>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a27      	ldr	r2, [pc, #156]	@ (80033bc <HAL_DMA_Abort+0x24c>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d02c      	beq.n	800337e <HAL_DMA_Abort+0x20e>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a25      	ldr	r2, [pc, #148]	@ (80033c0 <HAL_DMA_Abort+0x250>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d027      	beq.n	800337e <HAL_DMA_Abort+0x20e>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a24      	ldr	r2, [pc, #144]	@ (80033c4 <HAL_DMA_Abort+0x254>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d022      	beq.n	800337e <HAL_DMA_Abort+0x20e>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a22      	ldr	r2, [pc, #136]	@ (80033c8 <HAL_DMA_Abort+0x258>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d01d      	beq.n	800337e <HAL_DMA_Abort+0x20e>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a21      	ldr	r2, [pc, #132]	@ (80033cc <HAL_DMA_Abort+0x25c>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d018      	beq.n	800337e <HAL_DMA_Abort+0x20e>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a1f      	ldr	r2, [pc, #124]	@ (80033d0 <HAL_DMA_Abort+0x260>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d013      	beq.n	800337e <HAL_DMA_Abort+0x20e>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a1e      	ldr	r2, [pc, #120]	@ (80033d4 <HAL_DMA_Abort+0x264>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d00e      	beq.n	800337e <HAL_DMA_Abort+0x20e>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a1c      	ldr	r2, [pc, #112]	@ (80033d8 <HAL_DMA_Abort+0x268>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d009      	beq.n	800337e <HAL_DMA_Abort+0x20e>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a1b      	ldr	r2, [pc, #108]	@ (80033dc <HAL_DMA_Abort+0x26c>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d004      	beq.n	800337e <HAL_DMA_Abort+0x20e>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a19      	ldr	r2, [pc, #100]	@ (80033e0 <HAL_DMA_Abort+0x270>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d132      	bne.n	80033e4 <HAL_DMA_Abort+0x274>
 800337e:	2301      	movs	r3, #1
 8003380:	e031      	b.n	80033e6 <HAL_DMA_Abort+0x276>
 8003382:	bf00      	nop
 8003384:	40020010 	.word	0x40020010
 8003388:	40020028 	.word	0x40020028
 800338c:	40020040 	.word	0x40020040
 8003390:	40020058 	.word	0x40020058
 8003394:	40020070 	.word	0x40020070
 8003398:	40020088 	.word	0x40020088
 800339c:	400200a0 	.word	0x400200a0
 80033a0:	400200b8 	.word	0x400200b8
 80033a4:	40020410 	.word	0x40020410
 80033a8:	40020428 	.word	0x40020428
 80033ac:	40020440 	.word	0x40020440
 80033b0:	40020458 	.word	0x40020458
 80033b4:	40020470 	.word	0x40020470
 80033b8:	40020488 	.word	0x40020488
 80033bc:	400204a0 	.word	0x400204a0
 80033c0:	400204b8 	.word	0x400204b8
 80033c4:	58025408 	.word	0x58025408
 80033c8:	5802541c 	.word	0x5802541c
 80033cc:	58025430 	.word	0x58025430
 80033d0:	58025444 	.word	0x58025444
 80033d4:	58025458 	.word	0x58025458
 80033d8:	5802546c 	.word	0x5802546c
 80033dc:	58025480 	.word	0x58025480
 80033e0:	58025494 	.word	0x58025494
 80033e4:	2300      	movs	r3, #0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d007      	beq.n	80033fa <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a6d      	ldr	r2, [pc, #436]	@ (80035b4 <HAL_DMA_Abort+0x444>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d04a      	beq.n	800349a <HAL_DMA_Abort+0x32a>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a6b      	ldr	r2, [pc, #428]	@ (80035b8 <HAL_DMA_Abort+0x448>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d045      	beq.n	800349a <HAL_DMA_Abort+0x32a>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a6a      	ldr	r2, [pc, #424]	@ (80035bc <HAL_DMA_Abort+0x44c>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d040      	beq.n	800349a <HAL_DMA_Abort+0x32a>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a68      	ldr	r2, [pc, #416]	@ (80035c0 <HAL_DMA_Abort+0x450>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d03b      	beq.n	800349a <HAL_DMA_Abort+0x32a>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a67      	ldr	r2, [pc, #412]	@ (80035c4 <HAL_DMA_Abort+0x454>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d036      	beq.n	800349a <HAL_DMA_Abort+0x32a>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a65      	ldr	r2, [pc, #404]	@ (80035c8 <HAL_DMA_Abort+0x458>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d031      	beq.n	800349a <HAL_DMA_Abort+0x32a>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a64      	ldr	r2, [pc, #400]	@ (80035cc <HAL_DMA_Abort+0x45c>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d02c      	beq.n	800349a <HAL_DMA_Abort+0x32a>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a62      	ldr	r2, [pc, #392]	@ (80035d0 <HAL_DMA_Abort+0x460>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d027      	beq.n	800349a <HAL_DMA_Abort+0x32a>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a61      	ldr	r2, [pc, #388]	@ (80035d4 <HAL_DMA_Abort+0x464>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d022      	beq.n	800349a <HAL_DMA_Abort+0x32a>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a5f      	ldr	r2, [pc, #380]	@ (80035d8 <HAL_DMA_Abort+0x468>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d01d      	beq.n	800349a <HAL_DMA_Abort+0x32a>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a5e      	ldr	r2, [pc, #376]	@ (80035dc <HAL_DMA_Abort+0x46c>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d018      	beq.n	800349a <HAL_DMA_Abort+0x32a>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a5c      	ldr	r2, [pc, #368]	@ (80035e0 <HAL_DMA_Abort+0x470>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d013      	beq.n	800349a <HAL_DMA_Abort+0x32a>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a5b      	ldr	r2, [pc, #364]	@ (80035e4 <HAL_DMA_Abort+0x474>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d00e      	beq.n	800349a <HAL_DMA_Abort+0x32a>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a59      	ldr	r2, [pc, #356]	@ (80035e8 <HAL_DMA_Abort+0x478>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d009      	beq.n	800349a <HAL_DMA_Abort+0x32a>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a58      	ldr	r2, [pc, #352]	@ (80035ec <HAL_DMA_Abort+0x47c>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d004      	beq.n	800349a <HAL_DMA_Abort+0x32a>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a56      	ldr	r2, [pc, #344]	@ (80035f0 <HAL_DMA_Abort+0x480>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d108      	bne.n	80034ac <HAL_DMA_Abort+0x33c>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 0201 	bic.w	r2, r2, #1
 80034a8:	601a      	str	r2, [r3, #0]
 80034aa:	e007      	b.n	80034bc <HAL_DMA_Abort+0x34c>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f022 0201 	bic.w	r2, r2, #1
 80034ba:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80034bc:	e013      	b.n	80034e6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034be:	f7fe fc33 	bl	8001d28 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b05      	cmp	r3, #5
 80034ca:	d90c      	bls.n	80034e6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2220      	movs	r2, #32
 80034d0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2203      	movs	r2, #3
 80034d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e12d      	b.n	8003742 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1e5      	bne.n	80034be <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a2f      	ldr	r2, [pc, #188]	@ (80035b4 <HAL_DMA_Abort+0x444>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d04a      	beq.n	8003592 <HAL_DMA_Abort+0x422>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a2d      	ldr	r2, [pc, #180]	@ (80035b8 <HAL_DMA_Abort+0x448>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d045      	beq.n	8003592 <HAL_DMA_Abort+0x422>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a2c      	ldr	r2, [pc, #176]	@ (80035bc <HAL_DMA_Abort+0x44c>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d040      	beq.n	8003592 <HAL_DMA_Abort+0x422>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a2a      	ldr	r2, [pc, #168]	@ (80035c0 <HAL_DMA_Abort+0x450>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d03b      	beq.n	8003592 <HAL_DMA_Abort+0x422>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a29      	ldr	r2, [pc, #164]	@ (80035c4 <HAL_DMA_Abort+0x454>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d036      	beq.n	8003592 <HAL_DMA_Abort+0x422>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a27      	ldr	r2, [pc, #156]	@ (80035c8 <HAL_DMA_Abort+0x458>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d031      	beq.n	8003592 <HAL_DMA_Abort+0x422>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a26      	ldr	r2, [pc, #152]	@ (80035cc <HAL_DMA_Abort+0x45c>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d02c      	beq.n	8003592 <HAL_DMA_Abort+0x422>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a24      	ldr	r2, [pc, #144]	@ (80035d0 <HAL_DMA_Abort+0x460>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d027      	beq.n	8003592 <HAL_DMA_Abort+0x422>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a23      	ldr	r2, [pc, #140]	@ (80035d4 <HAL_DMA_Abort+0x464>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d022      	beq.n	8003592 <HAL_DMA_Abort+0x422>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a21      	ldr	r2, [pc, #132]	@ (80035d8 <HAL_DMA_Abort+0x468>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d01d      	beq.n	8003592 <HAL_DMA_Abort+0x422>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a20      	ldr	r2, [pc, #128]	@ (80035dc <HAL_DMA_Abort+0x46c>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d018      	beq.n	8003592 <HAL_DMA_Abort+0x422>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a1e      	ldr	r2, [pc, #120]	@ (80035e0 <HAL_DMA_Abort+0x470>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d013      	beq.n	8003592 <HAL_DMA_Abort+0x422>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a1d      	ldr	r2, [pc, #116]	@ (80035e4 <HAL_DMA_Abort+0x474>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d00e      	beq.n	8003592 <HAL_DMA_Abort+0x422>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a1b      	ldr	r2, [pc, #108]	@ (80035e8 <HAL_DMA_Abort+0x478>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d009      	beq.n	8003592 <HAL_DMA_Abort+0x422>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a1a      	ldr	r2, [pc, #104]	@ (80035ec <HAL_DMA_Abort+0x47c>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d004      	beq.n	8003592 <HAL_DMA_Abort+0x422>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a18      	ldr	r2, [pc, #96]	@ (80035f0 <HAL_DMA_Abort+0x480>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d101      	bne.n	8003596 <HAL_DMA_Abort+0x426>
 8003592:	2301      	movs	r3, #1
 8003594:	e000      	b.n	8003598 <HAL_DMA_Abort+0x428>
 8003596:	2300      	movs	r3, #0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d02b      	beq.n	80035f4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035a0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035a6:	f003 031f 	and.w	r3, r3, #31
 80035aa:	223f      	movs	r2, #63	@ 0x3f
 80035ac:	409a      	lsls	r2, r3
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	609a      	str	r2, [r3, #8]
 80035b2:	e02a      	b.n	800360a <HAL_DMA_Abort+0x49a>
 80035b4:	40020010 	.word	0x40020010
 80035b8:	40020028 	.word	0x40020028
 80035bc:	40020040 	.word	0x40020040
 80035c0:	40020058 	.word	0x40020058
 80035c4:	40020070 	.word	0x40020070
 80035c8:	40020088 	.word	0x40020088
 80035cc:	400200a0 	.word	0x400200a0
 80035d0:	400200b8 	.word	0x400200b8
 80035d4:	40020410 	.word	0x40020410
 80035d8:	40020428 	.word	0x40020428
 80035dc:	40020440 	.word	0x40020440
 80035e0:	40020458 	.word	0x40020458
 80035e4:	40020470 	.word	0x40020470
 80035e8:	40020488 	.word	0x40020488
 80035ec:	400204a0 	.word	0x400204a0
 80035f0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035f8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035fe:	f003 031f 	and.w	r3, r3, #31
 8003602:	2201      	movs	r2, #1
 8003604:	409a      	lsls	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a4f      	ldr	r2, [pc, #316]	@ (800374c <HAL_DMA_Abort+0x5dc>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d072      	beq.n	80036fa <HAL_DMA_Abort+0x58a>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a4d      	ldr	r2, [pc, #308]	@ (8003750 <HAL_DMA_Abort+0x5e0>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d06d      	beq.n	80036fa <HAL_DMA_Abort+0x58a>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a4c      	ldr	r2, [pc, #304]	@ (8003754 <HAL_DMA_Abort+0x5e4>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d068      	beq.n	80036fa <HAL_DMA_Abort+0x58a>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a4a      	ldr	r2, [pc, #296]	@ (8003758 <HAL_DMA_Abort+0x5e8>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d063      	beq.n	80036fa <HAL_DMA_Abort+0x58a>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a49      	ldr	r2, [pc, #292]	@ (800375c <HAL_DMA_Abort+0x5ec>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d05e      	beq.n	80036fa <HAL_DMA_Abort+0x58a>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a47      	ldr	r2, [pc, #284]	@ (8003760 <HAL_DMA_Abort+0x5f0>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d059      	beq.n	80036fa <HAL_DMA_Abort+0x58a>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a46      	ldr	r2, [pc, #280]	@ (8003764 <HAL_DMA_Abort+0x5f4>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d054      	beq.n	80036fa <HAL_DMA_Abort+0x58a>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a44      	ldr	r2, [pc, #272]	@ (8003768 <HAL_DMA_Abort+0x5f8>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d04f      	beq.n	80036fa <HAL_DMA_Abort+0x58a>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a43      	ldr	r2, [pc, #268]	@ (800376c <HAL_DMA_Abort+0x5fc>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d04a      	beq.n	80036fa <HAL_DMA_Abort+0x58a>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a41      	ldr	r2, [pc, #260]	@ (8003770 <HAL_DMA_Abort+0x600>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d045      	beq.n	80036fa <HAL_DMA_Abort+0x58a>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a40      	ldr	r2, [pc, #256]	@ (8003774 <HAL_DMA_Abort+0x604>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d040      	beq.n	80036fa <HAL_DMA_Abort+0x58a>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a3e      	ldr	r2, [pc, #248]	@ (8003778 <HAL_DMA_Abort+0x608>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d03b      	beq.n	80036fa <HAL_DMA_Abort+0x58a>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a3d      	ldr	r2, [pc, #244]	@ (800377c <HAL_DMA_Abort+0x60c>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d036      	beq.n	80036fa <HAL_DMA_Abort+0x58a>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a3b      	ldr	r2, [pc, #236]	@ (8003780 <HAL_DMA_Abort+0x610>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d031      	beq.n	80036fa <HAL_DMA_Abort+0x58a>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a3a      	ldr	r2, [pc, #232]	@ (8003784 <HAL_DMA_Abort+0x614>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d02c      	beq.n	80036fa <HAL_DMA_Abort+0x58a>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a38      	ldr	r2, [pc, #224]	@ (8003788 <HAL_DMA_Abort+0x618>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d027      	beq.n	80036fa <HAL_DMA_Abort+0x58a>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a37      	ldr	r2, [pc, #220]	@ (800378c <HAL_DMA_Abort+0x61c>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d022      	beq.n	80036fa <HAL_DMA_Abort+0x58a>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a35      	ldr	r2, [pc, #212]	@ (8003790 <HAL_DMA_Abort+0x620>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d01d      	beq.n	80036fa <HAL_DMA_Abort+0x58a>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a34      	ldr	r2, [pc, #208]	@ (8003794 <HAL_DMA_Abort+0x624>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d018      	beq.n	80036fa <HAL_DMA_Abort+0x58a>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a32      	ldr	r2, [pc, #200]	@ (8003798 <HAL_DMA_Abort+0x628>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d013      	beq.n	80036fa <HAL_DMA_Abort+0x58a>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a31      	ldr	r2, [pc, #196]	@ (800379c <HAL_DMA_Abort+0x62c>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d00e      	beq.n	80036fa <HAL_DMA_Abort+0x58a>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a2f      	ldr	r2, [pc, #188]	@ (80037a0 <HAL_DMA_Abort+0x630>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d009      	beq.n	80036fa <HAL_DMA_Abort+0x58a>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a2e      	ldr	r2, [pc, #184]	@ (80037a4 <HAL_DMA_Abort+0x634>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d004      	beq.n	80036fa <HAL_DMA_Abort+0x58a>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a2c      	ldr	r2, [pc, #176]	@ (80037a8 <HAL_DMA_Abort+0x638>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d101      	bne.n	80036fe <HAL_DMA_Abort+0x58e>
 80036fa:	2301      	movs	r3, #1
 80036fc:	e000      	b.n	8003700 <HAL_DMA_Abort+0x590>
 80036fe:	2300      	movs	r3, #0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d015      	beq.n	8003730 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800370c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00c      	beq.n	8003730 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003720:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003724:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800372e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3718      	adds	r7, #24
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	40020010 	.word	0x40020010
 8003750:	40020028 	.word	0x40020028
 8003754:	40020040 	.word	0x40020040
 8003758:	40020058 	.word	0x40020058
 800375c:	40020070 	.word	0x40020070
 8003760:	40020088 	.word	0x40020088
 8003764:	400200a0 	.word	0x400200a0
 8003768:	400200b8 	.word	0x400200b8
 800376c:	40020410 	.word	0x40020410
 8003770:	40020428 	.word	0x40020428
 8003774:	40020440 	.word	0x40020440
 8003778:	40020458 	.word	0x40020458
 800377c:	40020470 	.word	0x40020470
 8003780:	40020488 	.word	0x40020488
 8003784:	400204a0 	.word	0x400204a0
 8003788:	400204b8 	.word	0x400204b8
 800378c:	58025408 	.word	0x58025408
 8003790:	5802541c 	.word	0x5802541c
 8003794:	58025430 	.word	0x58025430
 8003798:	58025444 	.word	0x58025444
 800379c:	58025458 	.word	0x58025458
 80037a0:	5802546c 	.word	0x5802546c
 80037a4:	58025480 	.word	0x58025480
 80037a8:	58025494 	.word	0x58025494

080037ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e237      	b.n	8003c2e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d004      	beq.n	80037d4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2280      	movs	r2, #128	@ 0x80
 80037ce:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e22c      	b.n	8003c2e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a5c      	ldr	r2, [pc, #368]	@ (800394c <HAL_DMA_Abort_IT+0x1a0>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d04a      	beq.n	8003874 <HAL_DMA_Abort_IT+0xc8>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a5b      	ldr	r2, [pc, #364]	@ (8003950 <HAL_DMA_Abort_IT+0x1a4>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d045      	beq.n	8003874 <HAL_DMA_Abort_IT+0xc8>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a59      	ldr	r2, [pc, #356]	@ (8003954 <HAL_DMA_Abort_IT+0x1a8>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d040      	beq.n	8003874 <HAL_DMA_Abort_IT+0xc8>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a58      	ldr	r2, [pc, #352]	@ (8003958 <HAL_DMA_Abort_IT+0x1ac>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d03b      	beq.n	8003874 <HAL_DMA_Abort_IT+0xc8>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a56      	ldr	r2, [pc, #344]	@ (800395c <HAL_DMA_Abort_IT+0x1b0>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d036      	beq.n	8003874 <HAL_DMA_Abort_IT+0xc8>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a55      	ldr	r2, [pc, #340]	@ (8003960 <HAL_DMA_Abort_IT+0x1b4>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d031      	beq.n	8003874 <HAL_DMA_Abort_IT+0xc8>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a53      	ldr	r2, [pc, #332]	@ (8003964 <HAL_DMA_Abort_IT+0x1b8>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d02c      	beq.n	8003874 <HAL_DMA_Abort_IT+0xc8>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a52      	ldr	r2, [pc, #328]	@ (8003968 <HAL_DMA_Abort_IT+0x1bc>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d027      	beq.n	8003874 <HAL_DMA_Abort_IT+0xc8>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a50      	ldr	r2, [pc, #320]	@ (800396c <HAL_DMA_Abort_IT+0x1c0>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d022      	beq.n	8003874 <HAL_DMA_Abort_IT+0xc8>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a4f      	ldr	r2, [pc, #316]	@ (8003970 <HAL_DMA_Abort_IT+0x1c4>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d01d      	beq.n	8003874 <HAL_DMA_Abort_IT+0xc8>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a4d      	ldr	r2, [pc, #308]	@ (8003974 <HAL_DMA_Abort_IT+0x1c8>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d018      	beq.n	8003874 <HAL_DMA_Abort_IT+0xc8>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a4c      	ldr	r2, [pc, #304]	@ (8003978 <HAL_DMA_Abort_IT+0x1cc>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d013      	beq.n	8003874 <HAL_DMA_Abort_IT+0xc8>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a4a      	ldr	r2, [pc, #296]	@ (800397c <HAL_DMA_Abort_IT+0x1d0>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d00e      	beq.n	8003874 <HAL_DMA_Abort_IT+0xc8>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a49      	ldr	r2, [pc, #292]	@ (8003980 <HAL_DMA_Abort_IT+0x1d4>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d009      	beq.n	8003874 <HAL_DMA_Abort_IT+0xc8>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a47      	ldr	r2, [pc, #284]	@ (8003984 <HAL_DMA_Abort_IT+0x1d8>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d004      	beq.n	8003874 <HAL_DMA_Abort_IT+0xc8>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a46      	ldr	r2, [pc, #280]	@ (8003988 <HAL_DMA_Abort_IT+0x1dc>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d101      	bne.n	8003878 <HAL_DMA_Abort_IT+0xcc>
 8003874:	2301      	movs	r3, #1
 8003876:	e000      	b.n	800387a <HAL_DMA_Abort_IT+0xce>
 8003878:	2300      	movs	r3, #0
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 8086 	beq.w	800398c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2204      	movs	r2, #4
 8003884:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a2f      	ldr	r2, [pc, #188]	@ (800394c <HAL_DMA_Abort_IT+0x1a0>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d04a      	beq.n	8003928 <HAL_DMA_Abort_IT+0x17c>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a2e      	ldr	r2, [pc, #184]	@ (8003950 <HAL_DMA_Abort_IT+0x1a4>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d045      	beq.n	8003928 <HAL_DMA_Abort_IT+0x17c>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a2c      	ldr	r2, [pc, #176]	@ (8003954 <HAL_DMA_Abort_IT+0x1a8>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d040      	beq.n	8003928 <HAL_DMA_Abort_IT+0x17c>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a2b      	ldr	r2, [pc, #172]	@ (8003958 <HAL_DMA_Abort_IT+0x1ac>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d03b      	beq.n	8003928 <HAL_DMA_Abort_IT+0x17c>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a29      	ldr	r2, [pc, #164]	@ (800395c <HAL_DMA_Abort_IT+0x1b0>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d036      	beq.n	8003928 <HAL_DMA_Abort_IT+0x17c>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a28      	ldr	r2, [pc, #160]	@ (8003960 <HAL_DMA_Abort_IT+0x1b4>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d031      	beq.n	8003928 <HAL_DMA_Abort_IT+0x17c>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a26      	ldr	r2, [pc, #152]	@ (8003964 <HAL_DMA_Abort_IT+0x1b8>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d02c      	beq.n	8003928 <HAL_DMA_Abort_IT+0x17c>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a25      	ldr	r2, [pc, #148]	@ (8003968 <HAL_DMA_Abort_IT+0x1bc>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d027      	beq.n	8003928 <HAL_DMA_Abort_IT+0x17c>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a23      	ldr	r2, [pc, #140]	@ (800396c <HAL_DMA_Abort_IT+0x1c0>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d022      	beq.n	8003928 <HAL_DMA_Abort_IT+0x17c>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a22      	ldr	r2, [pc, #136]	@ (8003970 <HAL_DMA_Abort_IT+0x1c4>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d01d      	beq.n	8003928 <HAL_DMA_Abort_IT+0x17c>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a20      	ldr	r2, [pc, #128]	@ (8003974 <HAL_DMA_Abort_IT+0x1c8>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d018      	beq.n	8003928 <HAL_DMA_Abort_IT+0x17c>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a1f      	ldr	r2, [pc, #124]	@ (8003978 <HAL_DMA_Abort_IT+0x1cc>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d013      	beq.n	8003928 <HAL_DMA_Abort_IT+0x17c>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a1d      	ldr	r2, [pc, #116]	@ (800397c <HAL_DMA_Abort_IT+0x1d0>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d00e      	beq.n	8003928 <HAL_DMA_Abort_IT+0x17c>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a1c      	ldr	r2, [pc, #112]	@ (8003980 <HAL_DMA_Abort_IT+0x1d4>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d009      	beq.n	8003928 <HAL_DMA_Abort_IT+0x17c>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a1a      	ldr	r2, [pc, #104]	@ (8003984 <HAL_DMA_Abort_IT+0x1d8>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d004      	beq.n	8003928 <HAL_DMA_Abort_IT+0x17c>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a19      	ldr	r2, [pc, #100]	@ (8003988 <HAL_DMA_Abort_IT+0x1dc>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d108      	bne.n	800393a <HAL_DMA_Abort_IT+0x18e>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 0201 	bic.w	r2, r2, #1
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	e178      	b.n	8003c2c <HAL_DMA_Abort_IT+0x480>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 0201 	bic.w	r2, r2, #1
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	e16f      	b.n	8003c2c <HAL_DMA_Abort_IT+0x480>
 800394c:	40020010 	.word	0x40020010
 8003950:	40020028 	.word	0x40020028
 8003954:	40020040 	.word	0x40020040
 8003958:	40020058 	.word	0x40020058
 800395c:	40020070 	.word	0x40020070
 8003960:	40020088 	.word	0x40020088
 8003964:	400200a0 	.word	0x400200a0
 8003968:	400200b8 	.word	0x400200b8
 800396c:	40020410 	.word	0x40020410
 8003970:	40020428 	.word	0x40020428
 8003974:	40020440 	.word	0x40020440
 8003978:	40020458 	.word	0x40020458
 800397c:	40020470 	.word	0x40020470
 8003980:	40020488 	.word	0x40020488
 8003984:	400204a0 	.word	0x400204a0
 8003988:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f022 020e 	bic.w	r2, r2, #14
 800399a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a6c      	ldr	r2, [pc, #432]	@ (8003b54 <HAL_DMA_Abort_IT+0x3a8>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d04a      	beq.n	8003a3c <HAL_DMA_Abort_IT+0x290>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a6b      	ldr	r2, [pc, #428]	@ (8003b58 <HAL_DMA_Abort_IT+0x3ac>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d045      	beq.n	8003a3c <HAL_DMA_Abort_IT+0x290>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a69      	ldr	r2, [pc, #420]	@ (8003b5c <HAL_DMA_Abort_IT+0x3b0>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d040      	beq.n	8003a3c <HAL_DMA_Abort_IT+0x290>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a68      	ldr	r2, [pc, #416]	@ (8003b60 <HAL_DMA_Abort_IT+0x3b4>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d03b      	beq.n	8003a3c <HAL_DMA_Abort_IT+0x290>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a66      	ldr	r2, [pc, #408]	@ (8003b64 <HAL_DMA_Abort_IT+0x3b8>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d036      	beq.n	8003a3c <HAL_DMA_Abort_IT+0x290>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a65      	ldr	r2, [pc, #404]	@ (8003b68 <HAL_DMA_Abort_IT+0x3bc>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d031      	beq.n	8003a3c <HAL_DMA_Abort_IT+0x290>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a63      	ldr	r2, [pc, #396]	@ (8003b6c <HAL_DMA_Abort_IT+0x3c0>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d02c      	beq.n	8003a3c <HAL_DMA_Abort_IT+0x290>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a62      	ldr	r2, [pc, #392]	@ (8003b70 <HAL_DMA_Abort_IT+0x3c4>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d027      	beq.n	8003a3c <HAL_DMA_Abort_IT+0x290>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a60      	ldr	r2, [pc, #384]	@ (8003b74 <HAL_DMA_Abort_IT+0x3c8>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d022      	beq.n	8003a3c <HAL_DMA_Abort_IT+0x290>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a5f      	ldr	r2, [pc, #380]	@ (8003b78 <HAL_DMA_Abort_IT+0x3cc>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d01d      	beq.n	8003a3c <HAL_DMA_Abort_IT+0x290>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a5d      	ldr	r2, [pc, #372]	@ (8003b7c <HAL_DMA_Abort_IT+0x3d0>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d018      	beq.n	8003a3c <HAL_DMA_Abort_IT+0x290>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a5c      	ldr	r2, [pc, #368]	@ (8003b80 <HAL_DMA_Abort_IT+0x3d4>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d013      	beq.n	8003a3c <HAL_DMA_Abort_IT+0x290>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a5a      	ldr	r2, [pc, #360]	@ (8003b84 <HAL_DMA_Abort_IT+0x3d8>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d00e      	beq.n	8003a3c <HAL_DMA_Abort_IT+0x290>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a59      	ldr	r2, [pc, #356]	@ (8003b88 <HAL_DMA_Abort_IT+0x3dc>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d009      	beq.n	8003a3c <HAL_DMA_Abort_IT+0x290>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a57      	ldr	r2, [pc, #348]	@ (8003b8c <HAL_DMA_Abort_IT+0x3e0>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d004      	beq.n	8003a3c <HAL_DMA_Abort_IT+0x290>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a56      	ldr	r2, [pc, #344]	@ (8003b90 <HAL_DMA_Abort_IT+0x3e4>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d108      	bne.n	8003a4e <HAL_DMA_Abort_IT+0x2a2>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 0201 	bic.w	r2, r2, #1
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	e007      	b.n	8003a5e <HAL_DMA_Abort_IT+0x2b2>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 0201 	bic.w	r2, r2, #1
 8003a5c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a3c      	ldr	r2, [pc, #240]	@ (8003b54 <HAL_DMA_Abort_IT+0x3a8>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d072      	beq.n	8003b4e <HAL_DMA_Abort_IT+0x3a2>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a3a      	ldr	r2, [pc, #232]	@ (8003b58 <HAL_DMA_Abort_IT+0x3ac>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d06d      	beq.n	8003b4e <HAL_DMA_Abort_IT+0x3a2>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a39      	ldr	r2, [pc, #228]	@ (8003b5c <HAL_DMA_Abort_IT+0x3b0>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d068      	beq.n	8003b4e <HAL_DMA_Abort_IT+0x3a2>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a37      	ldr	r2, [pc, #220]	@ (8003b60 <HAL_DMA_Abort_IT+0x3b4>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d063      	beq.n	8003b4e <HAL_DMA_Abort_IT+0x3a2>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a36      	ldr	r2, [pc, #216]	@ (8003b64 <HAL_DMA_Abort_IT+0x3b8>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d05e      	beq.n	8003b4e <HAL_DMA_Abort_IT+0x3a2>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a34      	ldr	r2, [pc, #208]	@ (8003b68 <HAL_DMA_Abort_IT+0x3bc>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d059      	beq.n	8003b4e <HAL_DMA_Abort_IT+0x3a2>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a33      	ldr	r2, [pc, #204]	@ (8003b6c <HAL_DMA_Abort_IT+0x3c0>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d054      	beq.n	8003b4e <HAL_DMA_Abort_IT+0x3a2>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a31      	ldr	r2, [pc, #196]	@ (8003b70 <HAL_DMA_Abort_IT+0x3c4>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d04f      	beq.n	8003b4e <HAL_DMA_Abort_IT+0x3a2>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a30      	ldr	r2, [pc, #192]	@ (8003b74 <HAL_DMA_Abort_IT+0x3c8>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d04a      	beq.n	8003b4e <HAL_DMA_Abort_IT+0x3a2>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a2e      	ldr	r2, [pc, #184]	@ (8003b78 <HAL_DMA_Abort_IT+0x3cc>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d045      	beq.n	8003b4e <HAL_DMA_Abort_IT+0x3a2>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a2d      	ldr	r2, [pc, #180]	@ (8003b7c <HAL_DMA_Abort_IT+0x3d0>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d040      	beq.n	8003b4e <HAL_DMA_Abort_IT+0x3a2>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a2b      	ldr	r2, [pc, #172]	@ (8003b80 <HAL_DMA_Abort_IT+0x3d4>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d03b      	beq.n	8003b4e <HAL_DMA_Abort_IT+0x3a2>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a2a      	ldr	r2, [pc, #168]	@ (8003b84 <HAL_DMA_Abort_IT+0x3d8>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d036      	beq.n	8003b4e <HAL_DMA_Abort_IT+0x3a2>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a28      	ldr	r2, [pc, #160]	@ (8003b88 <HAL_DMA_Abort_IT+0x3dc>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d031      	beq.n	8003b4e <HAL_DMA_Abort_IT+0x3a2>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a27      	ldr	r2, [pc, #156]	@ (8003b8c <HAL_DMA_Abort_IT+0x3e0>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d02c      	beq.n	8003b4e <HAL_DMA_Abort_IT+0x3a2>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a25      	ldr	r2, [pc, #148]	@ (8003b90 <HAL_DMA_Abort_IT+0x3e4>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d027      	beq.n	8003b4e <HAL_DMA_Abort_IT+0x3a2>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a24      	ldr	r2, [pc, #144]	@ (8003b94 <HAL_DMA_Abort_IT+0x3e8>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d022      	beq.n	8003b4e <HAL_DMA_Abort_IT+0x3a2>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a22      	ldr	r2, [pc, #136]	@ (8003b98 <HAL_DMA_Abort_IT+0x3ec>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d01d      	beq.n	8003b4e <HAL_DMA_Abort_IT+0x3a2>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a21      	ldr	r2, [pc, #132]	@ (8003b9c <HAL_DMA_Abort_IT+0x3f0>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d018      	beq.n	8003b4e <HAL_DMA_Abort_IT+0x3a2>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a1f      	ldr	r2, [pc, #124]	@ (8003ba0 <HAL_DMA_Abort_IT+0x3f4>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d013      	beq.n	8003b4e <HAL_DMA_Abort_IT+0x3a2>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a1e      	ldr	r2, [pc, #120]	@ (8003ba4 <HAL_DMA_Abort_IT+0x3f8>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d00e      	beq.n	8003b4e <HAL_DMA_Abort_IT+0x3a2>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a1c      	ldr	r2, [pc, #112]	@ (8003ba8 <HAL_DMA_Abort_IT+0x3fc>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d009      	beq.n	8003b4e <HAL_DMA_Abort_IT+0x3a2>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a1b      	ldr	r2, [pc, #108]	@ (8003bac <HAL_DMA_Abort_IT+0x400>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d004      	beq.n	8003b4e <HAL_DMA_Abort_IT+0x3a2>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a19      	ldr	r2, [pc, #100]	@ (8003bb0 <HAL_DMA_Abort_IT+0x404>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d132      	bne.n	8003bb4 <HAL_DMA_Abort_IT+0x408>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e031      	b.n	8003bb6 <HAL_DMA_Abort_IT+0x40a>
 8003b52:	bf00      	nop
 8003b54:	40020010 	.word	0x40020010
 8003b58:	40020028 	.word	0x40020028
 8003b5c:	40020040 	.word	0x40020040
 8003b60:	40020058 	.word	0x40020058
 8003b64:	40020070 	.word	0x40020070
 8003b68:	40020088 	.word	0x40020088
 8003b6c:	400200a0 	.word	0x400200a0
 8003b70:	400200b8 	.word	0x400200b8
 8003b74:	40020410 	.word	0x40020410
 8003b78:	40020428 	.word	0x40020428
 8003b7c:	40020440 	.word	0x40020440
 8003b80:	40020458 	.word	0x40020458
 8003b84:	40020470 	.word	0x40020470
 8003b88:	40020488 	.word	0x40020488
 8003b8c:	400204a0 	.word	0x400204a0
 8003b90:	400204b8 	.word	0x400204b8
 8003b94:	58025408 	.word	0x58025408
 8003b98:	5802541c 	.word	0x5802541c
 8003b9c:	58025430 	.word	0x58025430
 8003ba0:	58025444 	.word	0x58025444
 8003ba4:	58025458 	.word	0x58025458
 8003ba8:	5802546c 	.word	0x5802546c
 8003bac:	58025480 	.word	0x58025480
 8003bb0:	58025494 	.word	0x58025494
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d028      	beq.n	8003c0c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bc4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003bc8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bce:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bd4:	f003 031f 	and.w	r3, r3, #31
 8003bd8:	2201      	movs	r2, #1
 8003bda:	409a      	lsls	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003be8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00c      	beq.n	8003c0c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bfc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c00:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003c0a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d003      	beq.n	8003c2c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop

08003c38 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b08a      	sub	sp, #40	@ 0x28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c44:	4b67      	ldr	r3, [pc, #412]	@ (8003de4 <HAL_DMA_IRQHandler+0x1ac>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a67      	ldr	r2, [pc, #412]	@ (8003de8 <HAL_DMA_IRQHandler+0x1b0>)
 8003c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4e:	0a9b      	lsrs	r3, r3, #10
 8003c50:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c56:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c5c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003c5e:	6a3b      	ldr	r3, [r7, #32]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a5f      	ldr	r2, [pc, #380]	@ (8003dec <HAL_DMA_IRQHandler+0x1b4>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d04a      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xd2>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a5d      	ldr	r2, [pc, #372]	@ (8003df0 <HAL_DMA_IRQHandler+0x1b8>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d045      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xd2>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a5c      	ldr	r2, [pc, #368]	@ (8003df4 <HAL_DMA_IRQHandler+0x1bc>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d040      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xd2>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a5a      	ldr	r2, [pc, #360]	@ (8003df8 <HAL_DMA_IRQHandler+0x1c0>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d03b      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xd2>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a59      	ldr	r2, [pc, #356]	@ (8003dfc <HAL_DMA_IRQHandler+0x1c4>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d036      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xd2>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a57      	ldr	r2, [pc, #348]	@ (8003e00 <HAL_DMA_IRQHandler+0x1c8>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d031      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xd2>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a56      	ldr	r2, [pc, #344]	@ (8003e04 <HAL_DMA_IRQHandler+0x1cc>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d02c      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xd2>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a54      	ldr	r2, [pc, #336]	@ (8003e08 <HAL_DMA_IRQHandler+0x1d0>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d027      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xd2>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a53      	ldr	r2, [pc, #332]	@ (8003e0c <HAL_DMA_IRQHandler+0x1d4>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d022      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xd2>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a51      	ldr	r2, [pc, #324]	@ (8003e10 <HAL_DMA_IRQHandler+0x1d8>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d01d      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xd2>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a50      	ldr	r2, [pc, #320]	@ (8003e14 <HAL_DMA_IRQHandler+0x1dc>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d018      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xd2>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a4e      	ldr	r2, [pc, #312]	@ (8003e18 <HAL_DMA_IRQHandler+0x1e0>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d013      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xd2>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a4d      	ldr	r2, [pc, #308]	@ (8003e1c <HAL_DMA_IRQHandler+0x1e4>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d00e      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xd2>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a4b      	ldr	r2, [pc, #300]	@ (8003e20 <HAL_DMA_IRQHandler+0x1e8>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d009      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xd2>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a4a      	ldr	r2, [pc, #296]	@ (8003e24 <HAL_DMA_IRQHandler+0x1ec>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d004      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xd2>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a48      	ldr	r2, [pc, #288]	@ (8003e28 <HAL_DMA_IRQHandler+0x1f0>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d101      	bne.n	8003d0e <HAL_DMA_IRQHandler+0xd6>
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e000      	b.n	8003d10 <HAL_DMA_IRQHandler+0xd8>
 8003d0e:	2300      	movs	r3, #0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f000 842b 	beq.w	800456c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d1a:	f003 031f 	and.w	r3, r3, #31
 8003d1e:	2208      	movs	r2, #8
 8003d20:	409a      	lsls	r2, r3
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	4013      	ands	r3, r2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 80a2 	beq.w	8003e70 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a2e      	ldr	r2, [pc, #184]	@ (8003dec <HAL_DMA_IRQHandler+0x1b4>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d04a      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x194>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a2d      	ldr	r2, [pc, #180]	@ (8003df0 <HAL_DMA_IRQHandler+0x1b8>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d045      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x194>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a2b      	ldr	r2, [pc, #172]	@ (8003df4 <HAL_DMA_IRQHandler+0x1bc>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d040      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x194>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a2a      	ldr	r2, [pc, #168]	@ (8003df8 <HAL_DMA_IRQHandler+0x1c0>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d03b      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x194>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a28      	ldr	r2, [pc, #160]	@ (8003dfc <HAL_DMA_IRQHandler+0x1c4>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d036      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x194>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a27      	ldr	r2, [pc, #156]	@ (8003e00 <HAL_DMA_IRQHandler+0x1c8>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d031      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x194>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a25      	ldr	r2, [pc, #148]	@ (8003e04 <HAL_DMA_IRQHandler+0x1cc>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d02c      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x194>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a24      	ldr	r2, [pc, #144]	@ (8003e08 <HAL_DMA_IRQHandler+0x1d0>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d027      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x194>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a22      	ldr	r2, [pc, #136]	@ (8003e0c <HAL_DMA_IRQHandler+0x1d4>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d022      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x194>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a21      	ldr	r2, [pc, #132]	@ (8003e10 <HAL_DMA_IRQHandler+0x1d8>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d01d      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x194>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a1f      	ldr	r2, [pc, #124]	@ (8003e14 <HAL_DMA_IRQHandler+0x1dc>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d018      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x194>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a1e      	ldr	r2, [pc, #120]	@ (8003e18 <HAL_DMA_IRQHandler+0x1e0>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d013      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x194>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a1c      	ldr	r2, [pc, #112]	@ (8003e1c <HAL_DMA_IRQHandler+0x1e4>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d00e      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x194>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a1b      	ldr	r2, [pc, #108]	@ (8003e20 <HAL_DMA_IRQHandler+0x1e8>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d009      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x194>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a19      	ldr	r2, [pc, #100]	@ (8003e24 <HAL_DMA_IRQHandler+0x1ec>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d004      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x194>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a18      	ldr	r2, [pc, #96]	@ (8003e28 <HAL_DMA_IRQHandler+0x1f0>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d12f      	bne.n	8003e2c <HAL_DMA_IRQHandler+0x1f4>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0304 	and.w	r3, r3, #4
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	bf14      	ite	ne
 8003dda:	2301      	movne	r3, #1
 8003ddc:	2300      	moveq	r3, #0
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	e02e      	b.n	8003e40 <HAL_DMA_IRQHandler+0x208>
 8003de2:	bf00      	nop
 8003de4:	24000008 	.word	0x24000008
 8003de8:	1b4e81b5 	.word	0x1b4e81b5
 8003dec:	40020010 	.word	0x40020010
 8003df0:	40020028 	.word	0x40020028
 8003df4:	40020040 	.word	0x40020040
 8003df8:	40020058 	.word	0x40020058
 8003dfc:	40020070 	.word	0x40020070
 8003e00:	40020088 	.word	0x40020088
 8003e04:	400200a0 	.word	0x400200a0
 8003e08:	400200b8 	.word	0x400200b8
 8003e0c:	40020410 	.word	0x40020410
 8003e10:	40020428 	.word	0x40020428
 8003e14:	40020440 	.word	0x40020440
 8003e18:	40020458 	.word	0x40020458
 8003e1c:	40020470 	.word	0x40020470
 8003e20:	40020488 	.word	0x40020488
 8003e24:	400204a0 	.word	0x400204a0
 8003e28:	400204b8 	.word	0x400204b8
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0308 	and.w	r3, r3, #8
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	bf14      	ite	ne
 8003e3a:	2301      	movne	r3, #1
 8003e3c:	2300      	moveq	r3, #0
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d015      	beq.n	8003e70 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f022 0204 	bic.w	r2, r2, #4
 8003e52:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e58:	f003 031f 	and.w	r3, r3, #31
 8003e5c:	2208      	movs	r2, #8
 8003e5e:	409a      	lsls	r2, r3
 8003e60:	6a3b      	ldr	r3, [r7, #32]
 8003e62:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e68:	f043 0201 	orr.w	r2, r3, #1
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e74:	f003 031f 	and.w	r3, r3, #31
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d06e      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a69      	ldr	r2, [pc, #420]	@ (8004030 <HAL_DMA_IRQHandler+0x3f8>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d04a      	beq.n	8003f26 <HAL_DMA_IRQHandler+0x2ee>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a67      	ldr	r2, [pc, #412]	@ (8004034 <HAL_DMA_IRQHandler+0x3fc>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d045      	beq.n	8003f26 <HAL_DMA_IRQHandler+0x2ee>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a66      	ldr	r2, [pc, #408]	@ (8004038 <HAL_DMA_IRQHandler+0x400>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d040      	beq.n	8003f26 <HAL_DMA_IRQHandler+0x2ee>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a64      	ldr	r2, [pc, #400]	@ (800403c <HAL_DMA_IRQHandler+0x404>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d03b      	beq.n	8003f26 <HAL_DMA_IRQHandler+0x2ee>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a63      	ldr	r2, [pc, #396]	@ (8004040 <HAL_DMA_IRQHandler+0x408>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d036      	beq.n	8003f26 <HAL_DMA_IRQHandler+0x2ee>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a61      	ldr	r2, [pc, #388]	@ (8004044 <HAL_DMA_IRQHandler+0x40c>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d031      	beq.n	8003f26 <HAL_DMA_IRQHandler+0x2ee>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a60      	ldr	r2, [pc, #384]	@ (8004048 <HAL_DMA_IRQHandler+0x410>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d02c      	beq.n	8003f26 <HAL_DMA_IRQHandler+0x2ee>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a5e      	ldr	r2, [pc, #376]	@ (800404c <HAL_DMA_IRQHandler+0x414>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d027      	beq.n	8003f26 <HAL_DMA_IRQHandler+0x2ee>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a5d      	ldr	r2, [pc, #372]	@ (8004050 <HAL_DMA_IRQHandler+0x418>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d022      	beq.n	8003f26 <HAL_DMA_IRQHandler+0x2ee>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a5b      	ldr	r2, [pc, #364]	@ (8004054 <HAL_DMA_IRQHandler+0x41c>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d01d      	beq.n	8003f26 <HAL_DMA_IRQHandler+0x2ee>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a5a      	ldr	r2, [pc, #360]	@ (8004058 <HAL_DMA_IRQHandler+0x420>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d018      	beq.n	8003f26 <HAL_DMA_IRQHandler+0x2ee>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a58      	ldr	r2, [pc, #352]	@ (800405c <HAL_DMA_IRQHandler+0x424>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d013      	beq.n	8003f26 <HAL_DMA_IRQHandler+0x2ee>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a57      	ldr	r2, [pc, #348]	@ (8004060 <HAL_DMA_IRQHandler+0x428>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d00e      	beq.n	8003f26 <HAL_DMA_IRQHandler+0x2ee>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a55      	ldr	r2, [pc, #340]	@ (8004064 <HAL_DMA_IRQHandler+0x42c>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d009      	beq.n	8003f26 <HAL_DMA_IRQHandler+0x2ee>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a54      	ldr	r2, [pc, #336]	@ (8004068 <HAL_DMA_IRQHandler+0x430>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d004      	beq.n	8003f26 <HAL_DMA_IRQHandler+0x2ee>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a52      	ldr	r2, [pc, #328]	@ (800406c <HAL_DMA_IRQHandler+0x434>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d10a      	bne.n	8003f3c <HAL_DMA_IRQHandler+0x304>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	695b      	ldr	r3, [r3, #20]
 8003f2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	bf14      	ite	ne
 8003f34:	2301      	movne	r3, #1
 8003f36:	2300      	moveq	r3, #0
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	e003      	b.n	8003f44 <HAL_DMA_IRQHandler+0x30c>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2300      	movs	r3, #0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00d      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f4c:	f003 031f 	and.w	r3, r3, #31
 8003f50:	2201      	movs	r2, #1
 8003f52:	409a      	lsls	r2, r3
 8003f54:	6a3b      	ldr	r3, [r7, #32]
 8003f56:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f5c:	f043 0202 	orr.w	r2, r3, #2
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f68:	f003 031f 	and.w	r3, r3, #31
 8003f6c:	2204      	movs	r2, #4
 8003f6e:	409a      	lsls	r2, r3
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	4013      	ands	r3, r2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 808f 	beq.w	8004098 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a2c      	ldr	r2, [pc, #176]	@ (8004030 <HAL_DMA_IRQHandler+0x3f8>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d04a      	beq.n	800401a <HAL_DMA_IRQHandler+0x3e2>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a2a      	ldr	r2, [pc, #168]	@ (8004034 <HAL_DMA_IRQHandler+0x3fc>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d045      	beq.n	800401a <HAL_DMA_IRQHandler+0x3e2>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a29      	ldr	r2, [pc, #164]	@ (8004038 <HAL_DMA_IRQHandler+0x400>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d040      	beq.n	800401a <HAL_DMA_IRQHandler+0x3e2>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a27      	ldr	r2, [pc, #156]	@ (800403c <HAL_DMA_IRQHandler+0x404>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d03b      	beq.n	800401a <HAL_DMA_IRQHandler+0x3e2>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a26      	ldr	r2, [pc, #152]	@ (8004040 <HAL_DMA_IRQHandler+0x408>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d036      	beq.n	800401a <HAL_DMA_IRQHandler+0x3e2>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a24      	ldr	r2, [pc, #144]	@ (8004044 <HAL_DMA_IRQHandler+0x40c>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d031      	beq.n	800401a <HAL_DMA_IRQHandler+0x3e2>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a23      	ldr	r2, [pc, #140]	@ (8004048 <HAL_DMA_IRQHandler+0x410>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d02c      	beq.n	800401a <HAL_DMA_IRQHandler+0x3e2>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a21      	ldr	r2, [pc, #132]	@ (800404c <HAL_DMA_IRQHandler+0x414>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d027      	beq.n	800401a <HAL_DMA_IRQHandler+0x3e2>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a20      	ldr	r2, [pc, #128]	@ (8004050 <HAL_DMA_IRQHandler+0x418>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d022      	beq.n	800401a <HAL_DMA_IRQHandler+0x3e2>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a1e      	ldr	r2, [pc, #120]	@ (8004054 <HAL_DMA_IRQHandler+0x41c>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d01d      	beq.n	800401a <HAL_DMA_IRQHandler+0x3e2>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a1d      	ldr	r2, [pc, #116]	@ (8004058 <HAL_DMA_IRQHandler+0x420>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d018      	beq.n	800401a <HAL_DMA_IRQHandler+0x3e2>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a1b      	ldr	r2, [pc, #108]	@ (800405c <HAL_DMA_IRQHandler+0x424>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d013      	beq.n	800401a <HAL_DMA_IRQHandler+0x3e2>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a1a      	ldr	r2, [pc, #104]	@ (8004060 <HAL_DMA_IRQHandler+0x428>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d00e      	beq.n	800401a <HAL_DMA_IRQHandler+0x3e2>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a18      	ldr	r2, [pc, #96]	@ (8004064 <HAL_DMA_IRQHandler+0x42c>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d009      	beq.n	800401a <HAL_DMA_IRQHandler+0x3e2>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a17      	ldr	r2, [pc, #92]	@ (8004068 <HAL_DMA_IRQHandler+0x430>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d004      	beq.n	800401a <HAL_DMA_IRQHandler+0x3e2>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a15      	ldr	r2, [pc, #84]	@ (800406c <HAL_DMA_IRQHandler+0x434>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d12a      	bne.n	8004070 <HAL_DMA_IRQHandler+0x438>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b00      	cmp	r3, #0
 8004026:	bf14      	ite	ne
 8004028:	2301      	movne	r3, #1
 800402a:	2300      	moveq	r3, #0
 800402c:	b2db      	uxtb	r3, r3
 800402e:	e023      	b.n	8004078 <HAL_DMA_IRQHandler+0x440>
 8004030:	40020010 	.word	0x40020010
 8004034:	40020028 	.word	0x40020028
 8004038:	40020040 	.word	0x40020040
 800403c:	40020058 	.word	0x40020058
 8004040:	40020070 	.word	0x40020070
 8004044:	40020088 	.word	0x40020088
 8004048:	400200a0 	.word	0x400200a0
 800404c:	400200b8 	.word	0x400200b8
 8004050:	40020410 	.word	0x40020410
 8004054:	40020428 	.word	0x40020428
 8004058:	40020440 	.word	0x40020440
 800405c:	40020458 	.word	0x40020458
 8004060:	40020470 	.word	0x40020470
 8004064:	40020488 	.word	0x40020488
 8004068:	400204a0 	.word	0x400204a0
 800406c:	400204b8 	.word	0x400204b8
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2300      	movs	r3, #0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00d      	beq.n	8004098 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004080:	f003 031f 	and.w	r3, r3, #31
 8004084:	2204      	movs	r2, #4
 8004086:	409a      	lsls	r2, r3
 8004088:	6a3b      	ldr	r3, [r7, #32]
 800408a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004090:	f043 0204 	orr.w	r2, r3, #4
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800409c:	f003 031f 	and.w	r3, r3, #31
 80040a0:	2210      	movs	r2, #16
 80040a2:	409a      	lsls	r2, r3
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	4013      	ands	r3, r2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f000 80a6 	beq.w	80041fa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a85      	ldr	r2, [pc, #532]	@ (80042c8 <HAL_DMA_IRQHandler+0x690>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d04a      	beq.n	800414e <HAL_DMA_IRQHandler+0x516>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a83      	ldr	r2, [pc, #524]	@ (80042cc <HAL_DMA_IRQHandler+0x694>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d045      	beq.n	800414e <HAL_DMA_IRQHandler+0x516>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a82      	ldr	r2, [pc, #520]	@ (80042d0 <HAL_DMA_IRQHandler+0x698>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d040      	beq.n	800414e <HAL_DMA_IRQHandler+0x516>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a80      	ldr	r2, [pc, #512]	@ (80042d4 <HAL_DMA_IRQHandler+0x69c>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d03b      	beq.n	800414e <HAL_DMA_IRQHandler+0x516>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a7f      	ldr	r2, [pc, #508]	@ (80042d8 <HAL_DMA_IRQHandler+0x6a0>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d036      	beq.n	800414e <HAL_DMA_IRQHandler+0x516>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a7d      	ldr	r2, [pc, #500]	@ (80042dc <HAL_DMA_IRQHandler+0x6a4>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d031      	beq.n	800414e <HAL_DMA_IRQHandler+0x516>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a7c      	ldr	r2, [pc, #496]	@ (80042e0 <HAL_DMA_IRQHandler+0x6a8>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d02c      	beq.n	800414e <HAL_DMA_IRQHandler+0x516>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a7a      	ldr	r2, [pc, #488]	@ (80042e4 <HAL_DMA_IRQHandler+0x6ac>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d027      	beq.n	800414e <HAL_DMA_IRQHandler+0x516>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a79      	ldr	r2, [pc, #484]	@ (80042e8 <HAL_DMA_IRQHandler+0x6b0>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d022      	beq.n	800414e <HAL_DMA_IRQHandler+0x516>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a77      	ldr	r2, [pc, #476]	@ (80042ec <HAL_DMA_IRQHandler+0x6b4>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d01d      	beq.n	800414e <HAL_DMA_IRQHandler+0x516>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a76      	ldr	r2, [pc, #472]	@ (80042f0 <HAL_DMA_IRQHandler+0x6b8>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d018      	beq.n	800414e <HAL_DMA_IRQHandler+0x516>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a74      	ldr	r2, [pc, #464]	@ (80042f4 <HAL_DMA_IRQHandler+0x6bc>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d013      	beq.n	800414e <HAL_DMA_IRQHandler+0x516>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a73      	ldr	r2, [pc, #460]	@ (80042f8 <HAL_DMA_IRQHandler+0x6c0>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d00e      	beq.n	800414e <HAL_DMA_IRQHandler+0x516>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a71      	ldr	r2, [pc, #452]	@ (80042fc <HAL_DMA_IRQHandler+0x6c4>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d009      	beq.n	800414e <HAL_DMA_IRQHandler+0x516>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a70      	ldr	r2, [pc, #448]	@ (8004300 <HAL_DMA_IRQHandler+0x6c8>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d004      	beq.n	800414e <HAL_DMA_IRQHandler+0x516>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a6e      	ldr	r2, [pc, #440]	@ (8004304 <HAL_DMA_IRQHandler+0x6cc>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d10a      	bne.n	8004164 <HAL_DMA_IRQHandler+0x52c>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0308 	and.w	r3, r3, #8
 8004158:	2b00      	cmp	r3, #0
 800415a:	bf14      	ite	ne
 800415c:	2301      	movne	r3, #1
 800415e:	2300      	moveq	r3, #0
 8004160:	b2db      	uxtb	r3, r3
 8004162:	e009      	b.n	8004178 <HAL_DMA_IRQHandler+0x540>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0304 	and.w	r3, r3, #4
 800416e:	2b00      	cmp	r3, #0
 8004170:	bf14      	ite	ne
 8004172:	2301      	movne	r3, #1
 8004174:	2300      	moveq	r3, #0
 8004176:	b2db      	uxtb	r3, r3
 8004178:	2b00      	cmp	r3, #0
 800417a:	d03e      	beq.n	80041fa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004180:	f003 031f 	and.w	r3, r3, #31
 8004184:	2210      	movs	r2, #16
 8004186:	409a      	lsls	r2, r3
 8004188:	6a3b      	ldr	r3, [r7, #32]
 800418a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d018      	beq.n	80041cc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d108      	bne.n	80041ba <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d024      	beq.n	80041fa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	4798      	blx	r3
 80041b8:	e01f      	b.n	80041fa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d01b      	beq.n	80041fa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	4798      	blx	r3
 80041ca:	e016      	b.n	80041fa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d107      	bne.n	80041ea <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f022 0208 	bic.w	r2, r2, #8
 80041e8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041fe:	f003 031f 	and.w	r3, r3, #31
 8004202:	2220      	movs	r2, #32
 8004204:	409a      	lsls	r2, r3
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	4013      	ands	r3, r2
 800420a:	2b00      	cmp	r3, #0
 800420c:	f000 8110 	beq.w	8004430 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a2c      	ldr	r2, [pc, #176]	@ (80042c8 <HAL_DMA_IRQHandler+0x690>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d04a      	beq.n	80042b0 <HAL_DMA_IRQHandler+0x678>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a2b      	ldr	r2, [pc, #172]	@ (80042cc <HAL_DMA_IRQHandler+0x694>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d045      	beq.n	80042b0 <HAL_DMA_IRQHandler+0x678>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a29      	ldr	r2, [pc, #164]	@ (80042d0 <HAL_DMA_IRQHandler+0x698>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d040      	beq.n	80042b0 <HAL_DMA_IRQHandler+0x678>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a28      	ldr	r2, [pc, #160]	@ (80042d4 <HAL_DMA_IRQHandler+0x69c>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d03b      	beq.n	80042b0 <HAL_DMA_IRQHandler+0x678>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a26      	ldr	r2, [pc, #152]	@ (80042d8 <HAL_DMA_IRQHandler+0x6a0>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d036      	beq.n	80042b0 <HAL_DMA_IRQHandler+0x678>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a25      	ldr	r2, [pc, #148]	@ (80042dc <HAL_DMA_IRQHandler+0x6a4>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d031      	beq.n	80042b0 <HAL_DMA_IRQHandler+0x678>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a23      	ldr	r2, [pc, #140]	@ (80042e0 <HAL_DMA_IRQHandler+0x6a8>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d02c      	beq.n	80042b0 <HAL_DMA_IRQHandler+0x678>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a22      	ldr	r2, [pc, #136]	@ (80042e4 <HAL_DMA_IRQHandler+0x6ac>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d027      	beq.n	80042b0 <HAL_DMA_IRQHandler+0x678>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a20      	ldr	r2, [pc, #128]	@ (80042e8 <HAL_DMA_IRQHandler+0x6b0>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d022      	beq.n	80042b0 <HAL_DMA_IRQHandler+0x678>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a1f      	ldr	r2, [pc, #124]	@ (80042ec <HAL_DMA_IRQHandler+0x6b4>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d01d      	beq.n	80042b0 <HAL_DMA_IRQHandler+0x678>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a1d      	ldr	r2, [pc, #116]	@ (80042f0 <HAL_DMA_IRQHandler+0x6b8>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d018      	beq.n	80042b0 <HAL_DMA_IRQHandler+0x678>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a1c      	ldr	r2, [pc, #112]	@ (80042f4 <HAL_DMA_IRQHandler+0x6bc>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d013      	beq.n	80042b0 <HAL_DMA_IRQHandler+0x678>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a1a      	ldr	r2, [pc, #104]	@ (80042f8 <HAL_DMA_IRQHandler+0x6c0>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d00e      	beq.n	80042b0 <HAL_DMA_IRQHandler+0x678>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a19      	ldr	r2, [pc, #100]	@ (80042fc <HAL_DMA_IRQHandler+0x6c4>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d009      	beq.n	80042b0 <HAL_DMA_IRQHandler+0x678>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a17      	ldr	r2, [pc, #92]	@ (8004300 <HAL_DMA_IRQHandler+0x6c8>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d004      	beq.n	80042b0 <HAL_DMA_IRQHandler+0x678>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a16      	ldr	r2, [pc, #88]	@ (8004304 <HAL_DMA_IRQHandler+0x6cc>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d12b      	bne.n	8004308 <HAL_DMA_IRQHandler+0x6d0>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0310 	and.w	r3, r3, #16
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	bf14      	ite	ne
 80042be:	2301      	movne	r3, #1
 80042c0:	2300      	moveq	r3, #0
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	e02a      	b.n	800431c <HAL_DMA_IRQHandler+0x6e4>
 80042c6:	bf00      	nop
 80042c8:	40020010 	.word	0x40020010
 80042cc:	40020028 	.word	0x40020028
 80042d0:	40020040 	.word	0x40020040
 80042d4:	40020058 	.word	0x40020058
 80042d8:	40020070 	.word	0x40020070
 80042dc:	40020088 	.word	0x40020088
 80042e0:	400200a0 	.word	0x400200a0
 80042e4:	400200b8 	.word	0x400200b8
 80042e8:	40020410 	.word	0x40020410
 80042ec:	40020428 	.word	0x40020428
 80042f0:	40020440 	.word	0x40020440
 80042f4:	40020458 	.word	0x40020458
 80042f8:	40020470 	.word	0x40020470
 80042fc:	40020488 	.word	0x40020488
 8004300:	400204a0 	.word	0x400204a0
 8004304:	400204b8 	.word	0x400204b8
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	bf14      	ite	ne
 8004316:	2301      	movne	r3, #1
 8004318:	2300      	moveq	r3, #0
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b00      	cmp	r3, #0
 800431e:	f000 8087 	beq.w	8004430 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004326:	f003 031f 	and.w	r3, r3, #31
 800432a:	2220      	movs	r2, #32
 800432c:	409a      	lsls	r2, r3
 800432e:	6a3b      	ldr	r3, [r7, #32]
 8004330:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b04      	cmp	r3, #4
 800433c:	d139      	bne.n	80043b2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 0216 	bic.w	r2, r2, #22
 800434c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	695a      	ldr	r2, [r3, #20]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800435c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004362:	2b00      	cmp	r3, #0
 8004364:	d103      	bne.n	800436e <HAL_DMA_IRQHandler+0x736>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800436a:	2b00      	cmp	r3, #0
 800436c:	d007      	beq.n	800437e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 0208 	bic.w	r2, r2, #8
 800437c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004382:	f003 031f 	and.w	r3, r3, #31
 8004386:	223f      	movs	r2, #63	@ 0x3f
 8004388:	409a      	lsls	r2, r3
 800438a:	6a3b      	ldr	r3, [r7, #32]
 800438c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2201      	movs	r2, #1
 8004392:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	f000 8382 	beq.w	8004aac <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	4798      	blx	r3
          }
          return;
 80043b0:	e37c      	b.n	8004aac <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d018      	beq.n	80043f2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d108      	bne.n	80043e0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d02c      	beq.n	8004430 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	4798      	blx	r3
 80043de:	e027      	b.n	8004430 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d023      	beq.n	8004430 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	4798      	blx	r3
 80043f0:	e01e      	b.n	8004430 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10f      	bne.n	8004420 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 0210 	bic.w	r2, r2, #16
 800440e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004424:	2b00      	cmp	r3, #0
 8004426:	d003      	beq.n	8004430 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004434:	2b00      	cmp	r3, #0
 8004436:	f000 833e 	beq.w	8004ab6 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	f000 8088 	beq.w	8004558 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2204      	movs	r2, #4
 800444c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a89      	ldr	r2, [pc, #548]	@ (800467c <HAL_DMA_IRQHandler+0xa44>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d04a      	beq.n	80044f0 <HAL_DMA_IRQHandler+0x8b8>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a88      	ldr	r2, [pc, #544]	@ (8004680 <HAL_DMA_IRQHandler+0xa48>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d045      	beq.n	80044f0 <HAL_DMA_IRQHandler+0x8b8>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a86      	ldr	r2, [pc, #536]	@ (8004684 <HAL_DMA_IRQHandler+0xa4c>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d040      	beq.n	80044f0 <HAL_DMA_IRQHandler+0x8b8>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a85      	ldr	r2, [pc, #532]	@ (8004688 <HAL_DMA_IRQHandler+0xa50>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d03b      	beq.n	80044f0 <HAL_DMA_IRQHandler+0x8b8>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a83      	ldr	r2, [pc, #524]	@ (800468c <HAL_DMA_IRQHandler+0xa54>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d036      	beq.n	80044f0 <HAL_DMA_IRQHandler+0x8b8>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a82      	ldr	r2, [pc, #520]	@ (8004690 <HAL_DMA_IRQHandler+0xa58>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d031      	beq.n	80044f0 <HAL_DMA_IRQHandler+0x8b8>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a80      	ldr	r2, [pc, #512]	@ (8004694 <HAL_DMA_IRQHandler+0xa5c>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d02c      	beq.n	80044f0 <HAL_DMA_IRQHandler+0x8b8>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a7f      	ldr	r2, [pc, #508]	@ (8004698 <HAL_DMA_IRQHandler+0xa60>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d027      	beq.n	80044f0 <HAL_DMA_IRQHandler+0x8b8>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a7d      	ldr	r2, [pc, #500]	@ (800469c <HAL_DMA_IRQHandler+0xa64>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d022      	beq.n	80044f0 <HAL_DMA_IRQHandler+0x8b8>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a7c      	ldr	r2, [pc, #496]	@ (80046a0 <HAL_DMA_IRQHandler+0xa68>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d01d      	beq.n	80044f0 <HAL_DMA_IRQHandler+0x8b8>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a7a      	ldr	r2, [pc, #488]	@ (80046a4 <HAL_DMA_IRQHandler+0xa6c>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d018      	beq.n	80044f0 <HAL_DMA_IRQHandler+0x8b8>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a79      	ldr	r2, [pc, #484]	@ (80046a8 <HAL_DMA_IRQHandler+0xa70>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d013      	beq.n	80044f0 <HAL_DMA_IRQHandler+0x8b8>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a77      	ldr	r2, [pc, #476]	@ (80046ac <HAL_DMA_IRQHandler+0xa74>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d00e      	beq.n	80044f0 <HAL_DMA_IRQHandler+0x8b8>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a76      	ldr	r2, [pc, #472]	@ (80046b0 <HAL_DMA_IRQHandler+0xa78>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d009      	beq.n	80044f0 <HAL_DMA_IRQHandler+0x8b8>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a74      	ldr	r2, [pc, #464]	@ (80046b4 <HAL_DMA_IRQHandler+0xa7c>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d004      	beq.n	80044f0 <HAL_DMA_IRQHandler+0x8b8>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a73      	ldr	r2, [pc, #460]	@ (80046b8 <HAL_DMA_IRQHandler+0xa80>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d108      	bne.n	8004502 <HAL_DMA_IRQHandler+0x8ca>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 0201 	bic.w	r2, r2, #1
 80044fe:	601a      	str	r2, [r3, #0]
 8004500:	e007      	b.n	8004512 <HAL_DMA_IRQHandler+0x8da>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 0201 	bic.w	r2, r2, #1
 8004510:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	3301      	adds	r3, #1
 8004516:	60fb      	str	r3, [r7, #12]
 8004518:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800451a:	429a      	cmp	r2, r3
 800451c:	d307      	bcc.n	800452e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1f2      	bne.n	8004512 <HAL_DMA_IRQHandler+0x8da>
 800452c:	e000      	b.n	8004530 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800452e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b00      	cmp	r3, #0
 800453c:	d004      	beq.n	8004548 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2203      	movs	r2, #3
 8004542:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004546:	e003      	b.n	8004550 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800455c:	2b00      	cmp	r3, #0
 800455e:	f000 82aa 	beq.w	8004ab6 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	4798      	blx	r3
 800456a:	e2a4      	b.n	8004ab6 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a52      	ldr	r2, [pc, #328]	@ (80046bc <HAL_DMA_IRQHandler+0xa84>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d04a      	beq.n	800460c <HAL_DMA_IRQHandler+0x9d4>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a51      	ldr	r2, [pc, #324]	@ (80046c0 <HAL_DMA_IRQHandler+0xa88>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d045      	beq.n	800460c <HAL_DMA_IRQHandler+0x9d4>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a4f      	ldr	r2, [pc, #316]	@ (80046c4 <HAL_DMA_IRQHandler+0xa8c>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d040      	beq.n	800460c <HAL_DMA_IRQHandler+0x9d4>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a4e      	ldr	r2, [pc, #312]	@ (80046c8 <HAL_DMA_IRQHandler+0xa90>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d03b      	beq.n	800460c <HAL_DMA_IRQHandler+0x9d4>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a4c      	ldr	r2, [pc, #304]	@ (80046cc <HAL_DMA_IRQHandler+0xa94>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d036      	beq.n	800460c <HAL_DMA_IRQHandler+0x9d4>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a4b      	ldr	r2, [pc, #300]	@ (80046d0 <HAL_DMA_IRQHandler+0xa98>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d031      	beq.n	800460c <HAL_DMA_IRQHandler+0x9d4>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a49      	ldr	r2, [pc, #292]	@ (80046d4 <HAL_DMA_IRQHandler+0xa9c>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d02c      	beq.n	800460c <HAL_DMA_IRQHandler+0x9d4>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a48      	ldr	r2, [pc, #288]	@ (80046d8 <HAL_DMA_IRQHandler+0xaa0>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d027      	beq.n	800460c <HAL_DMA_IRQHandler+0x9d4>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a46      	ldr	r2, [pc, #280]	@ (80046dc <HAL_DMA_IRQHandler+0xaa4>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d022      	beq.n	800460c <HAL_DMA_IRQHandler+0x9d4>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a45      	ldr	r2, [pc, #276]	@ (80046e0 <HAL_DMA_IRQHandler+0xaa8>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d01d      	beq.n	800460c <HAL_DMA_IRQHandler+0x9d4>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a43      	ldr	r2, [pc, #268]	@ (80046e4 <HAL_DMA_IRQHandler+0xaac>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d018      	beq.n	800460c <HAL_DMA_IRQHandler+0x9d4>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a42      	ldr	r2, [pc, #264]	@ (80046e8 <HAL_DMA_IRQHandler+0xab0>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d013      	beq.n	800460c <HAL_DMA_IRQHandler+0x9d4>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a40      	ldr	r2, [pc, #256]	@ (80046ec <HAL_DMA_IRQHandler+0xab4>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d00e      	beq.n	800460c <HAL_DMA_IRQHandler+0x9d4>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a3f      	ldr	r2, [pc, #252]	@ (80046f0 <HAL_DMA_IRQHandler+0xab8>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d009      	beq.n	800460c <HAL_DMA_IRQHandler+0x9d4>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a3d      	ldr	r2, [pc, #244]	@ (80046f4 <HAL_DMA_IRQHandler+0xabc>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d004      	beq.n	800460c <HAL_DMA_IRQHandler+0x9d4>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a3c      	ldr	r2, [pc, #240]	@ (80046f8 <HAL_DMA_IRQHandler+0xac0>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d101      	bne.n	8004610 <HAL_DMA_IRQHandler+0x9d8>
 800460c:	2301      	movs	r3, #1
 800460e:	e000      	b.n	8004612 <HAL_DMA_IRQHandler+0x9da>
 8004610:	2300      	movs	r3, #0
 8004612:	2b00      	cmp	r3, #0
 8004614:	f000 824f 	beq.w	8004ab6 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004624:	f003 031f 	and.w	r3, r3, #31
 8004628:	2204      	movs	r2, #4
 800462a:	409a      	lsls	r2, r3
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	4013      	ands	r3, r2
 8004630:	2b00      	cmp	r3, #0
 8004632:	f000 80dd 	beq.w	80047f0 <HAL_DMA_IRQHandler+0xbb8>
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	2b00      	cmp	r3, #0
 800463e:	f000 80d7 	beq.w	80047f0 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004646:	f003 031f 	and.w	r3, r3, #31
 800464a:	2204      	movs	r2, #4
 800464c:	409a      	lsls	r2, r3
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d059      	beq.n	8004710 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d14a      	bne.n	80046fc <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800466a:	2b00      	cmp	r3, #0
 800466c:	f000 8220 	beq.w	8004ab0 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004678:	e21a      	b.n	8004ab0 <HAL_DMA_IRQHandler+0xe78>
 800467a:	bf00      	nop
 800467c:	40020010 	.word	0x40020010
 8004680:	40020028 	.word	0x40020028
 8004684:	40020040 	.word	0x40020040
 8004688:	40020058 	.word	0x40020058
 800468c:	40020070 	.word	0x40020070
 8004690:	40020088 	.word	0x40020088
 8004694:	400200a0 	.word	0x400200a0
 8004698:	400200b8 	.word	0x400200b8
 800469c:	40020410 	.word	0x40020410
 80046a0:	40020428 	.word	0x40020428
 80046a4:	40020440 	.word	0x40020440
 80046a8:	40020458 	.word	0x40020458
 80046ac:	40020470 	.word	0x40020470
 80046b0:	40020488 	.word	0x40020488
 80046b4:	400204a0 	.word	0x400204a0
 80046b8:	400204b8 	.word	0x400204b8
 80046bc:	48022c08 	.word	0x48022c08
 80046c0:	48022c1c 	.word	0x48022c1c
 80046c4:	48022c30 	.word	0x48022c30
 80046c8:	48022c44 	.word	0x48022c44
 80046cc:	48022c58 	.word	0x48022c58
 80046d0:	48022c6c 	.word	0x48022c6c
 80046d4:	48022c80 	.word	0x48022c80
 80046d8:	48022c94 	.word	0x48022c94
 80046dc:	58025408 	.word	0x58025408
 80046e0:	5802541c 	.word	0x5802541c
 80046e4:	58025430 	.word	0x58025430
 80046e8:	58025444 	.word	0x58025444
 80046ec:	58025458 	.word	0x58025458
 80046f0:	5802546c 	.word	0x5802546c
 80046f4:	58025480 	.word	0x58025480
 80046f8:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 81d5 	beq.w	8004ab0 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800470e:	e1cf      	b.n	8004ab0 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	f003 0320 	and.w	r3, r3, #32
 8004716:	2b00      	cmp	r3, #0
 8004718:	d160      	bne.n	80047dc <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a7f      	ldr	r2, [pc, #508]	@ (800491c <HAL_DMA_IRQHandler+0xce4>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d04a      	beq.n	80047ba <HAL_DMA_IRQHandler+0xb82>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a7d      	ldr	r2, [pc, #500]	@ (8004920 <HAL_DMA_IRQHandler+0xce8>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d045      	beq.n	80047ba <HAL_DMA_IRQHandler+0xb82>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a7c      	ldr	r2, [pc, #496]	@ (8004924 <HAL_DMA_IRQHandler+0xcec>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d040      	beq.n	80047ba <HAL_DMA_IRQHandler+0xb82>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a7a      	ldr	r2, [pc, #488]	@ (8004928 <HAL_DMA_IRQHandler+0xcf0>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d03b      	beq.n	80047ba <HAL_DMA_IRQHandler+0xb82>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a79      	ldr	r2, [pc, #484]	@ (800492c <HAL_DMA_IRQHandler+0xcf4>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d036      	beq.n	80047ba <HAL_DMA_IRQHandler+0xb82>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a77      	ldr	r2, [pc, #476]	@ (8004930 <HAL_DMA_IRQHandler+0xcf8>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d031      	beq.n	80047ba <HAL_DMA_IRQHandler+0xb82>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a76      	ldr	r2, [pc, #472]	@ (8004934 <HAL_DMA_IRQHandler+0xcfc>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d02c      	beq.n	80047ba <HAL_DMA_IRQHandler+0xb82>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a74      	ldr	r2, [pc, #464]	@ (8004938 <HAL_DMA_IRQHandler+0xd00>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d027      	beq.n	80047ba <HAL_DMA_IRQHandler+0xb82>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a73      	ldr	r2, [pc, #460]	@ (800493c <HAL_DMA_IRQHandler+0xd04>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d022      	beq.n	80047ba <HAL_DMA_IRQHandler+0xb82>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a71      	ldr	r2, [pc, #452]	@ (8004940 <HAL_DMA_IRQHandler+0xd08>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d01d      	beq.n	80047ba <HAL_DMA_IRQHandler+0xb82>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a70      	ldr	r2, [pc, #448]	@ (8004944 <HAL_DMA_IRQHandler+0xd0c>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d018      	beq.n	80047ba <HAL_DMA_IRQHandler+0xb82>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a6e      	ldr	r2, [pc, #440]	@ (8004948 <HAL_DMA_IRQHandler+0xd10>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d013      	beq.n	80047ba <HAL_DMA_IRQHandler+0xb82>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a6d      	ldr	r2, [pc, #436]	@ (800494c <HAL_DMA_IRQHandler+0xd14>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d00e      	beq.n	80047ba <HAL_DMA_IRQHandler+0xb82>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a6b      	ldr	r2, [pc, #428]	@ (8004950 <HAL_DMA_IRQHandler+0xd18>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d009      	beq.n	80047ba <HAL_DMA_IRQHandler+0xb82>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a6a      	ldr	r2, [pc, #424]	@ (8004954 <HAL_DMA_IRQHandler+0xd1c>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d004      	beq.n	80047ba <HAL_DMA_IRQHandler+0xb82>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a68      	ldr	r2, [pc, #416]	@ (8004958 <HAL_DMA_IRQHandler+0xd20>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d108      	bne.n	80047cc <HAL_DMA_IRQHandler+0xb94>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f022 0208 	bic.w	r2, r2, #8
 80047c8:	601a      	str	r2, [r3, #0]
 80047ca:	e007      	b.n	80047dc <HAL_DMA_IRQHandler+0xba4>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 0204 	bic.w	r2, r2, #4
 80047da:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f000 8165 	beq.w	8004ab0 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047ee:	e15f      	b.n	8004ab0 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047f4:	f003 031f 	and.w	r3, r3, #31
 80047f8:	2202      	movs	r2, #2
 80047fa:	409a      	lsls	r2, r3
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	4013      	ands	r3, r2
 8004800:	2b00      	cmp	r3, #0
 8004802:	f000 80c5 	beq.w	8004990 <HAL_DMA_IRQHandler+0xd58>
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 80bf 	beq.w	8004990 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004816:	f003 031f 	and.w	r3, r3, #31
 800481a:	2202      	movs	r2, #2
 800481c:	409a      	lsls	r2, r3
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d018      	beq.n	800485e <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d109      	bne.n	800484a <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800483a:	2b00      	cmp	r3, #0
 800483c:	f000 813a 	beq.w	8004ab4 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004848:	e134      	b.n	8004ab4 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800484e:	2b00      	cmp	r3, #0
 8004850:	f000 8130 	beq.w	8004ab4 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800485c:	e12a      	b.n	8004ab4 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	f003 0320 	and.w	r3, r3, #32
 8004864:	2b00      	cmp	r3, #0
 8004866:	f040 8089 	bne.w	800497c <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a2b      	ldr	r2, [pc, #172]	@ (800491c <HAL_DMA_IRQHandler+0xce4>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d04a      	beq.n	800490a <HAL_DMA_IRQHandler+0xcd2>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a29      	ldr	r2, [pc, #164]	@ (8004920 <HAL_DMA_IRQHandler+0xce8>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d045      	beq.n	800490a <HAL_DMA_IRQHandler+0xcd2>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a28      	ldr	r2, [pc, #160]	@ (8004924 <HAL_DMA_IRQHandler+0xcec>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d040      	beq.n	800490a <HAL_DMA_IRQHandler+0xcd2>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a26      	ldr	r2, [pc, #152]	@ (8004928 <HAL_DMA_IRQHandler+0xcf0>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d03b      	beq.n	800490a <HAL_DMA_IRQHandler+0xcd2>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a25      	ldr	r2, [pc, #148]	@ (800492c <HAL_DMA_IRQHandler+0xcf4>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d036      	beq.n	800490a <HAL_DMA_IRQHandler+0xcd2>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a23      	ldr	r2, [pc, #140]	@ (8004930 <HAL_DMA_IRQHandler+0xcf8>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d031      	beq.n	800490a <HAL_DMA_IRQHandler+0xcd2>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a22      	ldr	r2, [pc, #136]	@ (8004934 <HAL_DMA_IRQHandler+0xcfc>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d02c      	beq.n	800490a <HAL_DMA_IRQHandler+0xcd2>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a20      	ldr	r2, [pc, #128]	@ (8004938 <HAL_DMA_IRQHandler+0xd00>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d027      	beq.n	800490a <HAL_DMA_IRQHandler+0xcd2>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a1f      	ldr	r2, [pc, #124]	@ (800493c <HAL_DMA_IRQHandler+0xd04>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d022      	beq.n	800490a <HAL_DMA_IRQHandler+0xcd2>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a1d      	ldr	r2, [pc, #116]	@ (8004940 <HAL_DMA_IRQHandler+0xd08>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d01d      	beq.n	800490a <HAL_DMA_IRQHandler+0xcd2>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a1c      	ldr	r2, [pc, #112]	@ (8004944 <HAL_DMA_IRQHandler+0xd0c>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d018      	beq.n	800490a <HAL_DMA_IRQHandler+0xcd2>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a1a      	ldr	r2, [pc, #104]	@ (8004948 <HAL_DMA_IRQHandler+0xd10>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d013      	beq.n	800490a <HAL_DMA_IRQHandler+0xcd2>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a19      	ldr	r2, [pc, #100]	@ (800494c <HAL_DMA_IRQHandler+0xd14>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d00e      	beq.n	800490a <HAL_DMA_IRQHandler+0xcd2>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a17      	ldr	r2, [pc, #92]	@ (8004950 <HAL_DMA_IRQHandler+0xd18>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d009      	beq.n	800490a <HAL_DMA_IRQHandler+0xcd2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a16      	ldr	r2, [pc, #88]	@ (8004954 <HAL_DMA_IRQHandler+0xd1c>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d004      	beq.n	800490a <HAL_DMA_IRQHandler+0xcd2>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a14      	ldr	r2, [pc, #80]	@ (8004958 <HAL_DMA_IRQHandler+0xd20>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d128      	bne.n	800495c <HAL_DMA_IRQHandler+0xd24>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f022 0214 	bic.w	r2, r2, #20
 8004918:	601a      	str	r2, [r3, #0]
 800491a:	e027      	b.n	800496c <HAL_DMA_IRQHandler+0xd34>
 800491c:	40020010 	.word	0x40020010
 8004920:	40020028 	.word	0x40020028
 8004924:	40020040 	.word	0x40020040
 8004928:	40020058 	.word	0x40020058
 800492c:	40020070 	.word	0x40020070
 8004930:	40020088 	.word	0x40020088
 8004934:	400200a0 	.word	0x400200a0
 8004938:	400200b8 	.word	0x400200b8
 800493c:	40020410 	.word	0x40020410
 8004940:	40020428 	.word	0x40020428
 8004944:	40020440 	.word	0x40020440
 8004948:	40020458 	.word	0x40020458
 800494c:	40020470 	.word	0x40020470
 8004950:	40020488 	.word	0x40020488
 8004954:	400204a0 	.word	0x400204a0
 8004958:	400204b8 	.word	0x400204b8
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f022 020a 	bic.w	r2, r2, #10
 800496a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004980:	2b00      	cmp	r3, #0
 8004982:	f000 8097 	beq.w	8004ab4 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800498e:	e091      	b.n	8004ab4 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004994:	f003 031f 	and.w	r3, r3, #31
 8004998:	2208      	movs	r2, #8
 800499a:	409a      	lsls	r2, r3
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	4013      	ands	r3, r2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f000 8088 	beq.w	8004ab6 <HAL_DMA_IRQHandler+0xe7e>
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	f003 0308 	and.w	r3, r3, #8
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f000 8082 	beq.w	8004ab6 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a41      	ldr	r2, [pc, #260]	@ (8004abc <HAL_DMA_IRQHandler+0xe84>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d04a      	beq.n	8004a52 <HAL_DMA_IRQHandler+0xe1a>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a3f      	ldr	r2, [pc, #252]	@ (8004ac0 <HAL_DMA_IRQHandler+0xe88>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d045      	beq.n	8004a52 <HAL_DMA_IRQHandler+0xe1a>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a3e      	ldr	r2, [pc, #248]	@ (8004ac4 <HAL_DMA_IRQHandler+0xe8c>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d040      	beq.n	8004a52 <HAL_DMA_IRQHandler+0xe1a>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a3c      	ldr	r2, [pc, #240]	@ (8004ac8 <HAL_DMA_IRQHandler+0xe90>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d03b      	beq.n	8004a52 <HAL_DMA_IRQHandler+0xe1a>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a3b      	ldr	r2, [pc, #236]	@ (8004acc <HAL_DMA_IRQHandler+0xe94>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d036      	beq.n	8004a52 <HAL_DMA_IRQHandler+0xe1a>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a39      	ldr	r2, [pc, #228]	@ (8004ad0 <HAL_DMA_IRQHandler+0xe98>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d031      	beq.n	8004a52 <HAL_DMA_IRQHandler+0xe1a>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a38      	ldr	r2, [pc, #224]	@ (8004ad4 <HAL_DMA_IRQHandler+0xe9c>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d02c      	beq.n	8004a52 <HAL_DMA_IRQHandler+0xe1a>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a36      	ldr	r2, [pc, #216]	@ (8004ad8 <HAL_DMA_IRQHandler+0xea0>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d027      	beq.n	8004a52 <HAL_DMA_IRQHandler+0xe1a>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a35      	ldr	r2, [pc, #212]	@ (8004adc <HAL_DMA_IRQHandler+0xea4>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d022      	beq.n	8004a52 <HAL_DMA_IRQHandler+0xe1a>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a33      	ldr	r2, [pc, #204]	@ (8004ae0 <HAL_DMA_IRQHandler+0xea8>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d01d      	beq.n	8004a52 <HAL_DMA_IRQHandler+0xe1a>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a32      	ldr	r2, [pc, #200]	@ (8004ae4 <HAL_DMA_IRQHandler+0xeac>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d018      	beq.n	8004a52 <HAL_DMA_IRQHandler+0xe1a>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a30      	ldr	r2, [pc, #192]	@ (8004ae8 <HAL_DMA_IRQHandler+0xeb0>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d013      	beq.n	8004a52 <HAL_DMA_IRQHandler+0xe1a>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a2f      	ldr	r2, [pc, #188]	@ (8004aec <HAL_DMA_IRQHandler+0xeb4>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d00e      	beq.n	8004a52 <HAL_DMA_IRQHandler+0xe1a>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a2d      	ldr	r2, [pc, #180]	@ (8004af0 <HAL_DMA_IRQHandler+0xeb8>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d009      	beq.n	8004a52 <HAL_DMA_IRQHandler+0xe1a>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a2c      	ldr	r2, [pc, #176]	@ (8004af4 <HAL_DMA_IRQHandler+0xebc>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d004      	beq.n	8004a52 <HAL_DMA_IRQHandler+0xe1a>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a2a      	ldr	r2, [pc, #168]	@ (8004af8 <HAL_DMA_IRQHandler+0xec0>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d108      	bne.n	8004a64 <HAL_DMA_IRQHandler+0xe2c>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f022 021c 	bic.w	r2, r2, #28
 8004a60:	601a      	str	r2, [r3, #0]
 8004a62:	e007      	b.n	8004a74 <HAL_DMA_IRQHandler+0xe3c>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f022 020e 	bic.w	r2, r2, #14
 8004a72:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a78:	f003 031f 	and.w	r3, r3, #31
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	409a      	lsls	r2, r3
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d009      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	4798      	blx	r3
 8004aaa:	e004      	b.n	8004ab6 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8004aac:	bf00      	nop
 8004aae:	e002      	b.n	8004ab6 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ab0:	bf00      	nop
 8004ab2:	e000      	b.n	8004ab6 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ab4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004ab6:	3728      	adds	r7, #40	@ 0x28
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	40020010 	.word	0x40020010
 8004ac0:	40020028 	.word	0x40020028
 8004ac4:	40020040 	.word	0x40020040
 8004ac8:	40020058 	.word	0x40020058
 8004acc:	40020070 	.word	0x40020070
 8004ad0:	40020088 	.word	0x40020088
 8004ad4:	400200a0 	.word	0x400200a0
 8004ad8:	400200b8 	.word	0x400200b8
 8004adc:	40020410 	.word	0x40020410
 8004ae0:	40020428 	.word	0x40020428
 8004ae4:	40020440 	.word	0x40020440
 8004ae8:	40020458 	.word	0x40020458
 8004aec:	40020470 	.word	0x40020470
 8004af0:	40020488 	.word	0x40020488
 8004af4:	400204a0 	.word	0x400204a0
 8004af8:	400204b8 	.word	0x400204b8

08004afc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b087      	sub	sp, #28
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	607a      	str	r2, [r7, #4]
 8004b08:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b0e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b14:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a7f      	ldr	r2, [pc, #508]	@ (8004d18 <DMA_SetConfig+0x21c>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d072      	beq.n	8004c06 <DMA_SetConfig+0x10a>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a7d      	ldr	r2, [pc, #500]	@ (8004d1c <DMA_SetConfig+0x220>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d06d      	beq.n	8004c06 <DMA_SetConfig+0x10a>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a7c      	ldr	r2, [pc, #496]	@ (8004d20 <DMA_SetConfig+0x224>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d068      	beq.n	8004c06 <DMA_SetConfig+0x10a>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a7a      	ldr	r2, [pc, #488]	@ (8004d24 <DMA_SetConfig+0x228>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d063      	beq.n	8004c06 <DMA_SetConfig+0x10a>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a79      	ldr	r2, [pc, #484]	@ (8004d28 <DMA_SetConfig+0x22c>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d05e      	beq.n	8004c06 <DMA_SetConfig+0x10a>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a77      	ldr	r2, [pc, #476]	@ (8004d2c <DMA_SetConfig+0x230>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d059      	beq.n	8004c06 <DMA_SetConfig+0x10a>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a76      	ldr	r2, [pc, #472]	@ (8004d30 <DMA_SetConfig+0x234>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d054      	beq.n	8004c06 <DMA_SetConfig+0x10a>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a74      	ldr	r2, [pc, #464]	@ (8004d34 <DMA_SetConfig+0x238>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d04f      	beq.n	8004c06 <DMA_SetConfig+0x10a>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a73      	ldr	r2, [pc, #460]	@ (8004d38 <DMA_SetConfig+0x23c>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d04a      	beq.n	8004c06 <DMA_SetConfig+0x10a>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a71      	ldr	r2, [pc, #452]	@ (8004d3c <DMA_SetConfig+0x240>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d045      	beq.n	8004c06 <DMA_SetConfig+0x10a>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a70      	ldr	r2, [pc, #448]	@ (8004d40 <DMA_SetConfig+0x244>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d040      	beq.n	8004c06 <DMA_SetConfig+0x10a>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a6e      	ldr	r2, [pc, #440]	@ (8004d44 <DMA_SetConfig+0x248>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d03b      	beq.n	8004c06 <DMA_SetConfig+0x10a>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a6d      	ldr	r2, [pc, #436]	@ (8004d48 <DMA_SetConfig+0x24c>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d036      	beq.n	8004c06 <DMA_SetConfig+0x10a>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a6b      	ldr	r2, [pc, #428]	@ (8004d4c <DMA_SetConfig+0x250>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d031      	beq.n	8004c06 <DMA_SetConfig+0x10a>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a6a      	ldr	r2, [pc, #424]	@ (8004d50 <DMA_SetConfig+0x254>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d02c      	beq.n	8004c06 <DMA_SetConfig+0x10a>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a68      	ldr	r2, [pc, #416]	@ (8004d54 <DMA_SetConfig+0x258>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d027      	beq.n	8004c06 <DMA_SetConfig+0x10a>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a67      	ldr	r2, [pc, #412]	@ (8004d58 <DMA_SetConfig+0x25c>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d022      	beq.n	8004c06 <DMA_SetConfig+0x10a>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a65      	ldr	r2, [pc, #404]	@ (8004d5c <DMA_SetConfig+0x260>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d01d      	beq.n	8004c06 <DMA_SetConfig+0x10a>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a64      	ldr	r2, [pc, #400]	@ (8004d60 <DMA_SetConfig+0x264>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d018      	beq.n	8004c06 <DMA_SetConfig+0x10a>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a62      	ldr	r2, [pc, #392]	@ (8004d64 <DMA_SetConfig+0x268>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d013      	beq.n	8004c06 <DMA_SetConfig+0x10a>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a61      	ldr	r2, [pc, #388]	@ (8004d68 <DMA_SetConfig+0x26c>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d00e      	beq.n	8004c06 <DMA_SetConfig+0x10a>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a5f      	ldr	r2, [pc, #380]	@ (8004d6c <DMA_SetConfig+0x270>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d009      	beq.n	8004c06 <DMA_SetConfig+0x10a>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a5e      	ldr	r2, [pc, #376]	@ (8004d70 <DMA_SetConfig+0x274>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d004      	beq.n	8004c06 <DMA_SetConfig+0x10a>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a5c      	ldr	r2, [pc, #368]	@ (8004d74 <DMA_SetConfig+0x278>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d101      	bne.n	8004c0a <DMA_SetConfig+0x10e>
 8004c06:	2301      	movs	r3, #1
 8004c08:	e000      	b.n	8004c0c <DMA_SetConfig+0x110>
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00d      	beq.n	8004c2c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004c18:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d004      	beq.n	8004c2c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004c2a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a39      	ldr	r2, [pc, #228]	@ (8004d18 <DMA_SetConfig+0x21c>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d04a      	beq.n	8004ccc <DMA_SetConfig+0x1d0>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a38      	ldr	r2, [pc, #224]	@ (8004d1c <DMA_SetConfig+0x220>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d045      	beq.n	8004ccc <DMA_SetConfig+0x1d0>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a36      	ldr	r2, [pc, #216]	@ (8004d20 <DMA_SetConfig+0x224>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d040      	beq.n	8004ccc <DMA_SetConfig+0x1d0>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a35      	ldr	r2, [pc, #212]	@ (8004d24 <DMA_SetConfig+0x228>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d03b      	beq.n	8004ccc <DMA_SetConfig+0x1d0>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a33      	ldr	r2, [pc, #204]	@ (8004d28 <DMA_SetConfig+0x22c>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d036      	beq.n	8004ccc <DMA_SetConfig+0x1d0>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a32      	ldr	r2, [pc, #200]	@ (8004d2c <DMA_SetConfig+0x230>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d031      	beq.n	8004ccc <DMA_SetConfig+0x1d0>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a30      	ldr	r2, [pc, #192]	@ (8004d30 <DMA_SetConfig+0x234>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d02c      	beq.n	8004ccc <DMA_SetConfig+0x1d0>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a2f      	ldr	r2, [pc, #188]	@ (8004d34 <DMA_SetConfig+0x238>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d027      	beq.n	8004ccc <DMA_SetConfig+0x1d0>
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a2d      	ldr	r2, [pc, #180]	@ (8004d38 <DMA_SetConfig+0x23c>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d022      	beq.n	8004ccc <DMA_SetConfig+0x1d0>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a2c      	ldr	r2, [pc, #176]	@ (8004d3c <DMA_SetConfig+0x240>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d01d      	beq.n	8004ccc <DMA_SetConfig+0x1d0>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a2a      	ldr	r2, [pc, #168]	@ (8004d40 <DMA_SetConfig+0x244>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d018      	beq.n	8004ccc <DMA_SetConfig+0x1d0>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a29      	ldr	r2, [pc, #164]	@ (8004d44 <DMA_SetConfig+0x248>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d013      	beq.n	8004ccc <DMA_SetConfig+0x1d0>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a27      	ldr	r2, [pc, #156]	@ (8004d48 <DMA_SetConfig+0x24c>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d00e      	beq.n	8004ccc <DMA_SetConfig+0x1d0>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a26      	ldr	r2, [pc, #152]	@ (8004d4c <DMA_SetConfig+0x250>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d009      	beq.n	8004ccc <DMA_SetConfig+0x1d0>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a24      	ldr	r2, [pc, #144]	@ (8004d50 <DMA_SetConfig+0x254>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d004      	beq.n	8004ccc <DMA_SetConfig+0x1d0>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a23      	ldr	r2, [pc, #140]	@ (8004d54 <DMA_SetConfig+0x258>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d101      	bne.n	8004cd0 <DMA_SetConfig+0x1d4>
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e000      	b.n	8004cd2 <DMA_SetConfig+0x1d6>
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d059      	beq.n	8004d8a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cda:	f003 031f 	and.w	r3, r3, #31
 8004cde:	223f      	movs	r2, #63	@ 0x3f
 8004ce0:	409a      	lsls	r2, r3
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004cf4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	683a      	ldr	r2, [r7, #0]
 8004cfc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	2b40      	cmp	r3, #64	@ 0x40
 8004d04:	d138      	bne.n	8004d78 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68ba      	ldr	r2, [r7, #8]
 8004d14:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004d16:	e0ae      	b.n	8004e76 <DMA_SetConfig+0x37a>
 8004d18:	40020010 	.word	0x40020010
 8004d1c:	40020028 	.word	0x40020028
 8004d20:	40020040 	.word	0x40020040
 8004d24:	40020058 	.word	0x40020058
 8004d28:	40020070 	.word	0x40020070
 8004d2c:	40020088 	.word	0x40020088
 8004d30:	400200a0 	.word	0x400200a0
 8004d34:	400200b8 	.word	0x400200b8
 8004d38:	40020410 	.word	0x40020410
 8004d3c:	40020428 	.word	0x40020428
 8004d40:	40020440 	.word	0x40020440
 8004d44:	40020458 	.word	0x40020458
 8004d48:	40020470 	.word	0x40020470
 8004d4c:	40020488 	.word	0x40020488
 8004d50:	400204a0 	.word	0x400204a0
 8004d54:	400204b8 	.word	0x400204b8
 8004d58:	58025408 	.word	0x58025408
 8004d5c:	5802541c 	.word	0x5802541c
 8004d60:	58025430 	.word	0x58025430
 8004d64:	58025444 	.word	0x58025444
 8004d68:	58025458 	.word	0x58025458
 8004d6c:	5802546c 	.word	0x5802546c
 8004d70:	58025480 	.word	0x58025480
 8004d74:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	60da      	str	r2, [r3, #12]
}
 8004d88:	e075      	b.n	8004e76 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a3d      	ldr	r2, [pc, #244]	@ (8004e84 <DMA_SetConfig+0x388>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d04a      	beq.n	8004e2a <DMA_SetConfig+0x32e>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a3b      	ldr	r2, [pc, #236]	@ (8004e88 <DMA_SetConfig+0x38c>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d045      	beq.n	8004e2a <DMA_SetConfig+0x32e>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a3a      	ldr	r2, [pc, #232]	@ (8004e8c <DMA_SetConfig+0x390>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d040      	beq.n	8004e2a <DMA_SetConfig+0x32e>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a38      	ldr	r2, [pc, #224]	@ (8004e90 <DMA_SetConfig+0x394>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d03b      	beq.n	8004e2a <DMA_SetConfig+0x32e>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a37      	ldr	r2, [pc, #220]	@ (8004e94 <DMA_SetConfig+0x398>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d036      	beq.n	8004e2a <DMA_SetConfig+0x32e>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a35      	ldr	r2, [pc, #212]	@ (8004e98 <DMA_SetConfig+0x39c>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d031      	beq.n	8004e2a <DMA_SetConfig+0x32e>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a34      	ldr	r2, [pc, #208]	@ (8004e9c <DMA_SetConfig+0x3a0>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d02c      	beq.n	8004e2a <DMA_SetConfig+0x32e>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a32      	ldr	r2, [pc, #200]	@ (8004ea0 <DMA_SetConfig+0x3a4>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d027      	beq.n	8004e2a <DMA_SetConfig+0x32e>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a31      	ldr	r2, [pc, #196]	@ (8004ea4 <DMA_SetConfig+0x3a8>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d022      	beq.n	8004e2a <DMA_SetConfig+0x32e>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a2f      	ldr	r2, [pc, #188]	@ (8004ea8 <DMA_SetConfig+0x3ac>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d01d      	beq.n	8004e2a <DMA_SetConfig+0x32e>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a2e      	ldr	r2, [pc, #184]	@ (8004eac <DMA_SetConfig+0x3b0>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d018      	beq.n	8004e2a <DMA_SetConfig+0x32e>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a2c      	ldr	r2, [pc, #176]	@ (8004eb0 <DMA_SetConfig+0x3b4>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d013      	beq.n	8004e2a <DMA_SetConfig+0x32e>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a2b      	ldr	r2, [pc, #172]	@ (8004eb4 <DMA_SetConfig+0x3b8>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d00e      	beq.n	8004e2a <DMA_SetConfig+0x32e>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a29      	ldr	r2, [pc, #164]	@ (8004eb8 <DMA_SetConfig+0x3bc>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d009      	beq.n	8004e2a <DMA_SetConfig+0x32e>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a28      	ldr	r2, [pc, #160]	@ (8004ebc <DMA_SetConfig+0x3c0>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d004      	beq.n	8004e2a <DMA_SetConfig+0x32e>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a26      	ldr	r2, [pc, #152]	@ (8004ec0 <DMA_SetConfig+0x3c4>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d101      	bne.n	8004e2e <DMA_SetConfig+0x332>
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e000      	b.n	8004e30 <DMA_SetConfig+0x334>
 8004e2e:	2300      	movs	r3, #0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d020      	beq.n	8004e76 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e38:	f003 031f 	and.w	r3, r3, #31
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	409a      	lsls	r2, r3
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	683a      	ldr	r2, [r7, #0]
 8004e4a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	2b40      	cmp	r3, #64	@ 0x40
 8004e52:	d108      	bne.n	8004e66 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68ba      	ldr	r2, [r7, #8]
 8004e62:	60da      	str	r2, [r3, #12]
}
 8004e64:	e007      	b.n	8004e76 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68ba      	ldr	r2, [r7, #8]
 8004e6c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	60da      	str	r2, [r3, #12]
}
 8004e76:	bf00      	nop
 8004e78:	371c      	adds	r7, #28
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	48022c08 	.word	0x48022c08
 8004e88:	48022c1c 	.word	0x48022c1c
 8004e8c:	48022c30 	.word	0x48022c30
 8004e90:	48022c44 	.word	0x48022c44
 8004e94:	48022c58 	.word	0x48022c58
 8004e98:	48022c6c 	.word	0x48022c6c
 8004e9c:	48022c80 	.word	0x48022c80
 8004ea0:	48022c94 	.word	0x48022c94
 8004ea4:	58025408 	.word	0x58025408
 8004ea8:	5802541c 	.word	0x5802541c
 8004eac:	58025430 	.word	0x58025430
 8004eb0:	58025444 	.word	0x58025444
 8004eb4:	58025458 	.word	0x58025458
 8004eb8:	5802546c 	.word	0x5802546c
 8004ebc:	58025480 	.word	0x58025480
 8004ec0:	58025494 	.word	0x58025494

08004ec4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a42      	ldr	r2, [pc, #264]	@ (8004fdc <DMA_CalcBaseAndBitshift+0x118>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d04a      	beq.n	8004f6c <DMA_CalcBaseAndBitshift+0xa8>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a41      	ldr	r2, [pc, #260]	@ (8004fe0 <DMA_CalcBaseAndBitshift+0x11c>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d045      	beq.n	8004f6c <DMA_CalcBaseAndBitshift+0xa8>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a3f      	ldr	r2, [pc, #252]	@ (8004fe4 <DMA_CalcBaseAndBitshift+0x120>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d040      	beq.n	8004f6c <DMA_CalcBaseAndBitshift+0xa8>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a3e      	ldr	r2, [pc, #248]	@ (8004fe8 <DMA_CalcBaseAndBitshift+0x124>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d03b      	beq.n	8004f6c <DMA_CalcBaseAndBitshift+0xa8>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a3c      	ldr	r2, [pc, #240]	@ (8004fec <DMA_CalcBaseAndBitshift+0x128>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d036      	beq.n	8004f6c <DMA_CalcBaseAndBitshift+0xa8>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a3b      	ldr	r2, [pc, #236]	@ (8004ff0 <DMA_CalcBaseAndBitshift+0x12c>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d031      	beq.n	8004f6c <DMA_CalcBaseAndBitshift+0xa8>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a39      	ldr	r2, [pc, #228]	@ (8004ff4 <DMA_CalcBaseAndBitshift+0x130>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d02c      	beq.n	8004f6c <DMA_CalcBaseAndBitshift+0xa8>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a38      	ldr	r2, [pc, #224]	@ (8004ff8 <DMA_CalcBaseAndBitshift+0x134>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d027      	beq.n	8004f6c <DMA_CalcBaseAndBitshift+0xa8>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a36      	ldr	r2, [pc, #216]	@ (8004ffc <DMA_CalcBaseAndBitshift+0x138>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d022      	beq.n	8004f6c <DMA_CalcBaseAndBitshift+0xa8>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a35      	ldr	r2, [pc, #212]	@ (8005000 <DMA_CalcBaseAndBitshift+0x13c>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d01d      	beq.n	8004f6c <DMA_CalcBaseAndBitshift+0xa8>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a33      	ldr	r2, [pc, #204]	@ (8005004 <DMA_CalcBaseAndBitshift+0x140>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d018      	beq.n	8004f6c <DMA_CalcBaseAndBitshift+0xa8>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a32      	ldr	r2, [pc, #200]	@ (8005008 <DMA_CalcBaseAndBitshift+0x144>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d013      	beq.n	8004f6c <DMA_CalcBaseAndBitshift+0xa8>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a30      	ldr	r2, [pc, #192]	@ (800500c <DMA_CalcBaseAndBitshift+0x148>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d00e      	beq.n	8004f6c <DMA_CalcBaseAndBitshift+0xa8>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a2f      	ldr	r2, [pc, #188]	@ (8005010 <DMA_CalcBaseAndBitshift+0x14c>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d009      	beq.n	8004f6c <DMA_CalcBaseAndBitshift+0xa8>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a2d      	ldr	r2, [pc, #180]	@ (8005014 <DMA_CalcBaseAndBitshift+0x150>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d004      	beq.n	8004f6c <DMA_CalcBaseAndBitshift+0xa8>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a2c      	ldr	r2, [pc, #176]	@ (8005018 <DMA_CalcBaseAndBitshift+0x154>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d101      	bne.n	8004f70 <DMA_CalcBaseAndBitshift+0xac>
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e000      	b.n	8004f72 <DMA_CalcBaseAndBitshift+0xae>
 8004f70:	2300      	movs	r3, #0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d024      	beq.n	8004fc0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	3b10      	subs	r3, #16
 8004f7e:	4a27      	ldr	r2, [pc, #156]	@ (800501c <DMA_CalcBaseAndBitshift+0x158>)
 8004f80:	fba2 2303 	umull	r2, r3, r2, r3
 8004f84:	091b      	lsrs	r3, r3, #4
 8004f86:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f003 0307 	and.w	r3, r3, #7
 8004f8e:	4a24      	ldr	r2, [pc, #144]	@ (8005020 <DMA_CalcBaseAndBitshift+0x15c>)
 8004f90:	5cd3      	ldrb	r3, [r2, r3]
 8004f92:	461a      	mov	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2b03      	cmp	r3, #3
 8004f9c:	d908      	bls.n	8004fb0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	4b1f      	ldr	r3, [pc, #124]	@ (8005024 <DMA_CalcBaseAndBitshift+0x160>)
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	1d1a      	adds	r2, r3, #4
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	659a      	str	r2, [r3, #88]	@ 0x58
 8004fae:	e00d      	b.n	8004fcc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	4b1b      	ldr	r3, [pc, #108]	@ (8005024 <DMA_CalcBaseAndBitshift+0x160>)
 8004fb8:	4013      	ands	r3, r2
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fbe:	e005      	b.n	8004fcc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3714      	adds	r7, #20
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr
 8004fdc:	40020010 	.word	0x40020010
 8004fe0:	40020028 	.word	0x40020028
 8004fe4:	40020040 	.word	0x40020040
 8004fe8:	40020058 	.word	0x40020058
 8004fec:	40020070 	.word	0x40020070
 8004ff0:	40020088 	.word	0x40020088
 8004ff4:	400200a0 	.word	0x400200a0
 8004ff8:	400200b8 	.word	0x400200b8
 8004ffc:	40020410 	.word	0x40020410
 8005000:	40020428 	.word	0x40020428
 8005004:	40020440 	.word	0x40020440
 8005008:	40020458 	.word	0x40020458
 800500c:	40020470 	.word	0x40020470
 8005010:	40020488 	.word	0x40020488
 8005014:	400204a0 	.word	0x400204a0
 8005018:	400204b8 	.word	0x400204b8
 800501c:	aaaaaaab 	.word	0xaaaaaaab
 8005020:	0800b838 	.word	0x0800b838
 8005024:	fffffc00 	.word	0xfffffc00

08005028 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005030:	2300      	movs	r3, #0
 8005032:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d120      	bne.n	800507e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005040:	2b03      	cmp	r3, #3
 8005042:	d858      	bhi.n	80050f6 <DMA_CheckFifoParam+0xce>
 8005044:	a201      	add	r2, pc, #4	@ (adr r2, 800504c <DMA_CheckFifoParam+0x24>)
 8005046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800504a:	bf00      	nop
 800504c:	0800505d 	.word	0x0800505d
 8005050:	0800506f 	.word	0x0800506f
 8005054:	0800505d 	.word	0x0800505d
 8005058:	080050f7 	.word	0x080050f7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005060:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d048      	beq.n	80050fa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800506c:	e045      	b.n	80050fa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005072:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005076:	d142      	bne.n	80050fe <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800507c:	e03f      	b.n	80050fe <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005086:	d123      	bne.n	80050d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800508c:	2b03      	cmp	r3, #3
 800508e:	d838      	bhi.n	8005102 <DMA_CheckFifoParam+0xda>
 8005090:	a201      	add	r2, pc, #4	@ (adr r2, 8005098 <DMA_CheckFifoParam+0x70>)
 8005092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005096:	bf00      	nop
 8005098:	080050a9 	.word	0x080050a9
 800509c:	080050af 	.word	0x080050af
 80050a0:	080050a9 	.word	0x080050a9
 80050a4:	080050c1 	.word	0x080050c1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	73fb      	strb	r3, [r7, #15]
        break;
 80050ac:	e030      	b.n	8005110 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d025      	beq.n	8005106 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050be:	e022      	b.n	8005106 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80050c8:	d11f      	bne.n	800510a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050ce:	e01c      	b.n	800510a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d902      	bls.n	80050de <DMA_CheckFifoParam+0xb6>
 80050d8:	2b03      	cmp	r3, #3
 80050da:	d003      	beq.n	80050e4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80050dc:	e018      	b.n	8005110 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	73fb      	strb	r3, [r7, #15]
        break;
 80050e2:	e015      	b.n	8005110 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00e      	beq.n	800510e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	73fb      	strb	r3, [r7, #15]
    break;
 80050f4:	e00b      	b.n	800510e <DMA_CheckFifoParam+0xe6>
        break;
 80050f6:	bf00      	nop
 80050f8:	e00a      	b.n	8005110 <DMA_CheckFifoParam+0xe8>
        break;
 80050fa:	bf00      	nop
 80050fc:	e008      	b.n	8005110 <DMA_CheckFifoParam+0xe8>
        break;
 80050fe:	bf00      	nop
 8005100:	e006      	b.n	8005110 <DMA_CheckFifoParam+0xe8>
        break;
 8005102:	bf00      	nop
 8005104:	e004      	b.n	8005110 <DMA_CheckFifoParam+0xe8>
        break;
 8005106:	bf00      	nop
 8005108:	e002      	b.n	8005110 <DMA_CheckFifoParam+0xe8>
        break;
 800510a:	bf00      	nop
 800510c:	e000      	b.n	8005110 <DMA_CheckFifoParam+0xe8>
    break;
 800510e:	bf00      	nop
    }
  }

  return status;
 8005110:	7bfb      	ldrb	r3, [r7, #15]
}
 8005112:	4618      	mov	r0, r3
 8005114:	3714      	adds	r7, #20
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop

08005120 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a38      	ldr	r2, [pc, #224]	@ (8005214 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d022      	beq.n	800517e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a36      	ldr	r2, [pc, #216]	@ (8005218 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d01d      	beq.n	800517e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a35      	ldr	r2, [pc, #212]	@ (800521c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d018      	beq.n	800517e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a33      	ldr	r2, [pc, #204]	@ (8005220 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d013      	beq.n	800517e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a32      	ldr	r2, [pc, #200]	@ (8005224 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d00e      	beq.n	800517e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a30      	ldr	r2, [pc, #192]	@ (8005228 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d009      	beq.n	800517e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a2f      	ldr	r2, [pc, #188]	@ (800522c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d004      	beq.n	800517e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a2d      	ldr	r2, [pc, #180]	@ (8005230 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d101      	bne.n	8005182 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800517e:	2301      	movs	r3, #1
 8005180:	e000      	b.n	8005184 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005182:	2300      	movs	r3, #0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d01a      	beq.n	80051be <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	b2db      	uxtb	r3, r3
 800518e:	3b08      	subs	r3, #8
 8005190:	4a28      	ldr	r2, [pc, #160]	@ (8005234 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005192:	fba2 2303 	umull	r2, r3, r2, r3
 8005196:	091b      	lsrs	r3, r3, #4
 8005198:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	4b26      	ldr	r3, [pc, #152]	@ (8005238 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800519e:	4413      	add	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	461a      	mov	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a24      	ldr	r2, [pc, #144]	@ (800523c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80051ac:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f003 031f 	and.w	r3, r3, #31
 80051b4:	2201      	movs	r2, #1
 80051b6:	409a      	lsls	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80051bc:	e024      	b.n	8005208 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	3b10      	subs	r3, #16
 80051c6:	4a1e      	ldr	r2, [pc, #120]	@ (8005240 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80051c8:	fba2 2303 	umull	r2, r3, r2, r3
 80051cc:	091b      	lsrs	r3, r3, #4
 80051ce:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	4a1c      	ldr	r2, [pc, #112]	@ (8005244 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d806      	bhi.n	80051e6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	4a1b      	ldr	r2, [pc, #108]	@ (8005248 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d902      	bls.n	80051e6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	3308      	adds	r3, #8
 80051e4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	4b18      	ldr	r3, [pc, #96]	@ (800524c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80051ea:	4413      	add	r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	461a      	mov	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a16      	ldr	r2, [pc, #88]	@ (8005250 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80051f8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f003 031f 	and.w	r3, r3, #31
 8005200:	2201      	movs	r2, #1
 8005202:	409a      	lsls	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005208:	bf00      	nop
 800520a:	3714      	adds	r7, #20
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr
 8005214:	58025408 	.word	0x58025408
 8005218:	5802541c 	.word	0x5802541c
 800521c:	58025430 	.word	0x58025430
 8005220:	58025444 	.word	0x58025444
 8005224:	58025458 	.word	0x58025458
 8005228:	5802546c 	.word	0x5802546c
 800522c:	58025480 	.word	0x58025480
 8005230:	58025494 	.word	0x58025494
 8005234:	cccccccd 	.word	0xcccccccd
 8005238:	16009600 	.word	0x16009600
 800523c:	58025880 	.word	0x58025880
 8005240:	aaaaaaab 	.word	0xaaaaaaab
 8005244:	400204b8 	.word	0x400204b8
 8005248:	4002040f 	.word	0x4002040f
 800524c:	10008200 	.word	0x10008200
 8005250:	40020880 	.word	0x40020880

08005254 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	b2db      	uxtb	r3, r3
 8005262:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d04a      	beq.n	8005300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2b08      	cmp	r3, #8
 800526e:	d847      	bhi.n	8005300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a25      	ldr	r2, [pc, #148]	@ (800530c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d022      	beq.n	80052c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a24      	ldr	r2, [pc, #144]	@ (8005310 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d01d      	beq.n	80052c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a22      	ldr	r2, [pc, #136]	@ (8005314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d018      	beq.n	80052c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a21      	ldr	r2, [pc, #132]	@ (8005318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d013      	beq.n	80052c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a1f      	ldr	r2, [pc, #124]	@ (800531c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d00e      	beq.n	80052c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a1e      	ldr	r2, [pc, #120]	@ (8005320 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d009      	beq.n	80052c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a1c      	ldr	r2, [pc, #112]	@ (8005324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d004      	beq.n	80052c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a1b      	ldr	r2, [pc, #108]	@ (8005328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d101      	bne.n	80052c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80052c0:	2301      	movs	r3, #1
 80052c2:	e000      	b.n	80052c6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80052c4:	2300      	movs	r3, #0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00a      	beq.n	80052e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	4b17      	ldr	r3, [pc, #92]	@ (800532c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80052ce:	4413      	add	r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	461a      	mov	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a15      	ldr	r2, [pc, #84]	@ (8005330 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80052dc:	671a      	str	r2, [r3, #112]	@ 0x70
 80052de:	e009      	b.n	80052f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	4b14      	ldr	r3, [pc, #80]	@ (8005334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80052e4:	4413      	add	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	461a      	mov	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a11      	ldr	r2, [pc, #68]	@ (8005338 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80052f2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	3b01      	subs	r3, #1
 80052f8:	2201      	movs	r2, #1
 80052fa:	409a      	lsls	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005300:	bf00      	nop
 8005302:	3714      	adds	r7, #20
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	58025408 	.word	0x58025408
 8005310:	5802541c 	.word	0x5802541c
 8005314:	58025430 	.word	0x58025430
 8005318:	58025444 	.word	0x58025444
 800531c:	58025458 	.word	0x58025458
 8005320:	5802546c 	.word	0x5802546c
 8005324:	58025480 	.word	0x58025480
 8005328:	58025494 	.word	0x58025494
 800532c:	1600963f 	.word	0x1600963f
 8005330:	58025940 	.word	0x58025940
 8005334:	1000823f 	.word	0x1000823f
 8005338:	40020940 	.word	0x40020940

0800533c <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b086      	sub	sp, #24
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	607a      	str	r2, [r7, #4]
 8005348:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800534a:	2300      	movs	r3, #0
 800534c:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	2b80      	cmp	r3, #128	@ 0x80
 8005354:	d105      	bne.n	8005362 <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800535c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e315      	b.n	800598e <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005368:	2b01      	cmp	r3, #1
 800536a:	d101      	bne.n	8005370 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 800536c:	2302      	movs	r3, #2
 800536e:	e30e      	b.n	800598e <HAL_DMAEx_MultiBufferStart_IT+0x652>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800537e:	b2db      	uxtb	r3, r3
 8005380:	2b01      	cmp	r3, #1
 8005382:	f040 82fd 	bne.w	8005980 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2202      	movs	r2, #2
 800538a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	655a      	str	r2, [r3, #84]	@ 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a82      	ldr	r2, [pc, #520]	@ (80055a4 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d04a      	beq.n	8005434 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a81      	ldr	r2, [pc, #516]	@ (80055a8 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d045      	beq.n	8005434 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a7f      	ldr	r2, [pc, #508]	@ (80055ac <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d040      	beq.n	8005434 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a7e      	ldr	r2, [pc, #504]	@ (80055b0 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d03b      	beq.n	8005434 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a7c      	ldr	r2, [pc, #496]	@ (80055b4 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d036      	beq.n	8005434 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a7b      	ldr	r2, [pc, #492]	@ (80055b8 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d031      	beq.n	8005434 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a79      	ldr	r2, [pc, #484]	@ (80055bc <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d02c      	beq.n	8005434 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a78      	ldr	r2, [pc, #480]	@ (80055c0 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d027      	beq.n	8005434 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a76      	ldr	r2, [pc, #472]	@ (80055c4 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d022      	beq.n	8005434 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a75      	ldr	r2, [pc, #468]	@ (80055c8 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d01d      	beq.n	8005434 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a73      	ldr	r2, [pc, #460]	@ (80055cc <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d018      	beq.n	8005434 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a72      	ldr	r2, [pc, #456]	@ (80055d0 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d013      	beq.n	8005434 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a70      	ldr	r2, [pc, #448]	@ (80055d4 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d00e      	beq.n	8005434 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a6f      	ldr	r2, [pc, #444]	@ (80055d8 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d009      	beq.n	8005434 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a6d      	ldr	r2, [pc, #436]	@ (80055dc <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d004      	beq.n	8005434 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a6c      	ldr	r2, [pc, #432]	@ (80055e0 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d101      	bne.n	8005438 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8005434:	2301      	movs	r3, #1
 8005436:	e000      	b.n	800543a <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8005438:	2300      	movs	r3, #0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d018      	beq.n	8005470 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800544c:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	683a      	ldr	r2, [r7, #0]
 8005454:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800545a:	3308      	adds	r3, #8
 800545c:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005462:	f003 031f 	and.w	r3, r3, #31
 8005466:	223f      	movs	r2, #63	@ 0x3f
 8005468:	409a      	lsls	r2, r3
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	601a      	str	r2, [r3, #0]
 800546e:	e018      	b.n	80054a2 <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	6819      	ldr	r1, [r3, #0]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	f248 0320 	movw	r3, #32800	@ 0x8020
 800547e:	430b      	orrs	r3, r1
 8005480:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800548e:	3304      	adds	r3, #4
 8005490:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005496:	f003 031f 	and.w	r3, r3, #31
 800549a:	2201      	movs	r2, #1
 800549c:	409a      	lsls	r2, r3
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80054a2:	6a3b      	ldr	r3, [r7, #32]
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	68b9      	ldr	r1, [r7, #8]
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f000 fb41 	bl	8005b30 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a3c      	ldr	r2, [pc, #240]	@ (80055a4 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d072      	beq.n	800559e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a3a      	ldr	r2, [pc, #232]	@ (80055a8 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d06d      	beq.n	800559e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a39      	ldr	r2, [pc, #228]	@ (80055ac <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d068      	beq.n	800559e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a37      	ldr	r2, [pc, #220]	@ (80055b0 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d063      	beq.n	800559e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a36      	ldr	r2, [pc, #216]	@ (80055b4 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d05e      	beq.n	800559e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a34      	ldr	r2, [pc, #208]	@ (80055b8 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d059      	beq.n	800559e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a33      	ldr	r2, [pc, #204]	@ (80055bc <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d054      	beq.n	800559e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a31      	ldr	r2, [pc, #196]	@ (80055c0 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d04f      	beq.n	800559e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a30      	ldr	r2, [pc, #192]	@ (80055c4 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d04a      	beq.n	800559e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a2e      	ldr	r2, [pc, #184]	@ (80055c8 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d045      	beq.n	800559e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a2d      	ldr	r2, [pc, #180]	@ (80055cc <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d040      	beq.n	800559e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a2b      	ldr	r2, [pc, #172]	@ (80055d0 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d03b      	beq.n	800559e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a2a      	ldr	r2, [pc, #168]	@ (80055d4 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d036      	beq.n	800559e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a28      	ldr	r2, [pc, #160]	@ (80055d8 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d031      	beq.n	800559e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a27      	ldr	r2, [pc, #156]	@ (80055dc <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d02c      	beq.n	800559e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a25      	ldr	r2, [pc, #148]	@ (80055e0 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d027      	beq.n	800559e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a24      	ldr	r2, [pc, #144]	@ (80055e4 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d022      	beq.n	800559e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a22      	ldr	r2, [pc, #136]	@ (80055e8 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d01d      	beq.n	800559e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a21      	ldr	r2, [pc, #132]	@ (80055ec <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d018      	beq.n	800559e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a1f      	ldr	r2, [pc, #124]	@ (80055f0 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d013      	beq.n	800559e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a1e      	ldr	r2, [pc, #120]	@ (80055f4 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d00e      	beq.n	800559e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a1c      	ldr	r2, [pc, #112]	@ (80055f8 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d009      	beq.n	800559e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a1b      	ldr	r2, [pc, #108]	@ (80055fc <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d004      	beq.n	800559e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a19      	ldr	r2, [pc, #100]	@ (8005600 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d132      	bne.n	8005604 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 800559e:	2301      	movs	r3, #1
 80055a0:	e031      	b.n	8005606 <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 80055a2:	bf00      	nop
 80055a4:	40020010 	.word	0x40020010
 80055a8:	40020028 	.word	0x40020028
 80055ac:	40020040 	.word	0x40020040
 80055b0:	40020058 	.word	0x40020058
 80055b4:	40020070 	.word	0x40020070
 80055b8:	40020088 	.word	0x40020088
 80055bc:	400200a0 	.word	0x400200a0
 80055c0:	400200b8 	.word	0x400200b8
 80055c4:	40020410 	.word	0x40020410
 80055c8:	40020428 	.word	0x40020428
 80055cc:	40020440 	.word	0x40020440
 80055d0:	40020458 	.word	0x40020458
 80055d4:	40020470 	.word	0x40020470
 80055d8:	40020488 	.word	0x40020488
 80055dc:	400204a0 	.word	0x400204a0
 80055e0:	400204b8 	.word	0x400204b8
 80055e4:	58025408 	.word	0x58025408
 80055e8:	5802541c 	.word	0x5802541c
 80055ec:	58025430 	.word	0x58025430
 80055f0:	58025444 	.word	0x58025444
 80055f4:	58025458 	.word	0x58025458
 80055f8:	5802546c 	.word	0x5802546c
 80055fc:	58025480 	.word	0x58025480
 8005600:	58025494 	.word	0x58025494
 8005604:	2300      	movs	r3, #0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00d      	beq.n	8005626 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005612:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005618:	2b00      	cmp	r3, #0
 800561a:	d004      	beq.n	8005626 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005624:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a3b      	ldr	r2, [pc, #236]	@ (8005718 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d04a      	beq.n	80056c6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a39      	ldr	r2, [pc, #228]	@ (800571c <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d045      	beq.n	80056c6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a38      	ldr	r2, [pc, #224]	@ (8005720 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d040      	beq.n	80056c6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a36      	ldr	r2, [pc, #216]	@ (8005724 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d03b      	beq.n	80056c6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a35      	ldr	r2, [pc, #212]	@ (8005728 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d036      	beq.n	80056c6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a33      	ldr	r2, [pc, #204]	@ (800572c <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d031      	beq.n	80056c6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a32      	ldr	r2, [pc, #200]	@ (8005730 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d02c      	beq.n	80056c6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a30      	ldr	r2, [pc, #192]	@ (8005734 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d027      	beq.n	80056c6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a2f      	ldr	r2, [pc, #188]	@ (8005738 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d022      	beq.n	80056c6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a2d      	ldr	r2, [pc, #180]	@ (800573c <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d01d      	beq.n	80056c6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a2c      	ldr	r2, [pc, #176]	@ (8005740 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d018      	beq.n	80056c6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a2a      	ldr	r2, [pc, #168]	@ (8005744 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d013      	beq.n	80056c6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a29      	ldr	r2, [pc, #164]	@ (8005748 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d00e      	beq.n	80056c6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a27      	ldr	r2, [pc, #156]	@ (800574c <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d009      	beq.n	80056c6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a26      	ldr	r2, [pc, #152]	@ (8005750 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d004      	beq.n	80056c6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a24      	ldr	r2, [pc, #144]	@ (8005754 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d101      	bne.n	80056ca <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 80056c6:	2301      	movs	r3, #1
 80056c8:	e000      	b.n	80056cc <HAL_DMAEx_MultiBufferStart_IT+0x390>
 80056ca:	2300      	movs	r3, #0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d043      	beq.n	8005758 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f023 021e 	bic.w	r2, r3, #30
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f042 0216 	orr.w	r2, r2, #22
 80056e2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	695a      	ldr	r2, [r3, #20]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80056f2:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d103      	bne.n	8005704 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005700:	2b00      	cmp	r3, #0
 8005702:	d043      	beq.n	800578c <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f042 0208 	orr.w	r2, r2, #8
 8005712:	601a      	str	r2, [r3, #0]
 8005714:	e03a      	b.n	800578c <HAL_DMAEx_MultiBufferStart_IT+0x450>
 8005716:	bf00      	nop
 8005718:	40020010 	.word	0x40020010
 800571c:	40020028 	.word	0x40020028
 8005720:	40020040 	.word	0x40020040
 8005724:	40020058 	.word	0x40020058
 8005728:	40020070 	.word	0x40020070
 800572c:	40020088 	.word	0x40020088
 8005730:	400200a0 	.word	0x400200a0
 8005734:	400200b8 	.word	0x400200b8
 8005738:	40020410 	.word	0x40020410
 800573c:	40020428 	.word	0x40020428
 8005740:	40020440 	.word	0x40020440
 8005744:	40020458 	.word	0x40020458
 8005748:	40020470 	.word	0x40020470
 800574c:	40020488 	.word	0x40020488
 8005750:	400204a0 	.word	0x400204a0
 8005754:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f023 020e 	bic.w	r2, r3, #14
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f042 020a 	orr.w	r2, r2, #10
 800576a:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005770:	2b00      	cmp	r3, #0
 8005772:	d103      	bne.n	800577c <HAL_DMAEx_MultiBufferStart_IT+0x440>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005778:	2b00      	cmp	r3, #0
 800577a:	d007      	beq.n	800578c <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f042 0204 	orr.w	r2, r2, #4
 800578a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a81      	ldr	r2, [pc, #516]	@ (8005998 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d072      	beq.n	800587c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a80      	ldr	r2, [pc, #512]	@ (800599c <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d06d      	beq.n	800587c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a7e      	ldr	r2, [pc, #504]	@ (80059a0 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d068      	beq.n	800587c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a7d      	ldr	r2, [pc, #500]	@ (80059a4 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d063      	beq.n	800587c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a7b      	ldr	r2, [pc, #492]	@ (80059a8 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d05e      	beq.n	800587c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a7a      	ldr	r2, [pc, #488]	@ (80059ac <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d059      	beq.n	800587c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a78      	ldr	r2, [pc, #480]	@ (80059b0 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d054      	beq.n	800587c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a77      	ldr	r2, [pc, #476]	@ (80059b4 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d04f      	beq.n	800587c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a75      	ldr	r2, [pc, #468]	@ (80059b8 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d04a      	beq.n	800587c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a74      	ldr	r2, [pc, #464]	@ (80059bc <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d045      	beq.n	800587c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a72      	ldr	r2, [pc, #456]	@ (80059c0 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d040      	beq.n	800587c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a71      	ldr	r2, [pc, #452]	@ (80059c4 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d03b      	beq.n	800587c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a6f      	ldr	r2, [pc, #444]	@ (80059c8 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d036      	beq.n	800587c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a6e      	ldr	r2, [pc, #440]	@ (80059cc <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d031      	beq.n	800587c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a6c      	ldr	r2, [pc, #432]	@ (80059d0 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d02c      	beq.n	800587c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a6b      	ldr	r2, [pc, #428]	@ (80059d4 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d027      	beq.n	800587c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a69      	ldr	r2, [pc, #420]	@ (80059d8 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d022      	beq.n	800587c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a68      	ldr	r2, [pc, #416]	@ (80059dc <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d01d      	beq.n	800587c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a66      	ldr	r2, [pc, #408]	@ (80059e0 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d018      	beq.n	800587c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a65      	ldr	r2, [pc, #404]	@ (80059e4 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d013      	beq.n	800587c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a63      	ldr	r2, [pc, #396]	@ (80059e8 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d00e      	beq.n	800587c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a62      	ldr	r2, [pc, #392]	@ (80059ec <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d009      	beq.n	800587c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a60      	ldr	r2, [pc, #384]	@ (80059f0 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d004      	beq.n	800587c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a5f      	ldr	r2, [pc, #380]	@ (80059f4 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d101      	bne.n	8005880 <HAL_DMAEx_MultiBufferStart_IT+0x544>
 800587c:	2301      	movs	r3, #1
 800587e:	e000      	b.n	8005882 <HAL_DMAEx_MultiBufferStart_IT+0x546>
 8005880:	2300      	movs	r3, #0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d01a      	beq.n	80058bc <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d007      	beq.n	80058a4 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800589e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058a2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d007      	beq.n	80058bc <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058ba:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a35      	ldr	r2, [pc, #212]	@ (8005998 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d04a      	beq.n	800595c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a34      	ldr	r2, [pc, #208]	@ (800599c <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d045      	beq.n	800595c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a32      	ldr	r2, [pc, #200]	@ (80059a0 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d040      	beq.n	800595c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a31      	ldr	r2, [pc, #196]	@ (80059a4 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d03b      	beq.n	800595c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a2f      	ldr	r2, [pc, #188]	@ (80059a8 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d036      	beq.n	800595c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a2e      	ldr	r2, [pc, #184]	@ (80059ac <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d031      	beq.n	800595c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a2c      	ldr	r2, [pc, #176]	@ (80059b0 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d02c      	beq.n	800595c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a2b      	ldr	r2, [pc, #172]	@ (80059b4 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d027      	beq.n	800595c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a29      	ldr	r2, [pc, #164]	@ (80059b8 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d022      	beq.n	800595c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a28      	ldr	r2, [pc, #160]	@ (80059bc <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d01d      	beq.n	800595c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a26      	ldr	r2, [pc, #152]	@ (80059c0 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d018      	beq.n	800595c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a25      	ldr	r2, [pc, #148]	@ (80059c4 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d013      	beq.n	800595c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a23      	ldr	r2, [pc, #140]	@ (80059c8 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d00e      	beq.n	800595c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a22      	ldr	r2, [pc, #136]	@ (80059cc <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d009      	beq.n	800595c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a20      	ldr	r2, [pc, #128]	@ (80059d0 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d004      	beq.n	800595c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a1f      	ldr	r2, [pc, #124]	@ (80059d4 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d108      	bne.n	800596e <HAL_DMAEx_MultiBufferStart_IT+0x632>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f042 0201 	orr.w	r2, r2, #1
 800596a:	601a      	str	r2, [r3, #0]
 800596c:	e00e      	b.n	800598c <HAL_DMAEx_MultiBufferStart_IT+0x650>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f042 0201 	orr.w	r2, r2, #1
 800597c:	601a      	str	r2, [r3, #0]
 800597e:	e005      	b.n	800598c <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005986:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    status = HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800598c:	7dfb      	ldrb	r3, [r7, #23]
}
 800598e:	4618      	mov	r0, r3
 8005990:	3718      	adds	r7, #24
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	40020010 	.word	0x40020010
 800599c:	40020028 	.word	0x40020028
 80059a0:	40020040 	.word	0x40020040
 80059a4:	40020058 	.word	0x40020058
 80059a8:	40020070 	.word	0x40020070
 80059ac:	40020088 	.word	0x40020088
 80059b0:	400200a0 	.word	0x400200a0
 80059b4:	400200b8 	.word	0x400200b8
 80059b8:	40020410 	.word	0x40020410
 80059bc:	40020428 	.word	0x40020428
 80059c0:	40020440 	.word	0x40020440
 80059c4:	40020458 	.word	0x40020458
 80059c8:	40020470 	.word	0x40020470
 80059cc:	40020488 	.word	0x40020488
 80059d0:	400204a0 	.word	0x400204a0
 80059d4:	400204b8 	.word	0x400204b8
 80059d8:	58025408 	.word	0x58025408
 80059dc:	5802541c 	.word	0x5802541c
 80059e0:	58025430 	.word	0x58025430
 80059e4:	58025444 	.word	0x58025444
 80059e8:	58025458 	.word	0x58025458
 80059ec:	5802546c 	.word	0x5802546c
 80059f0:	58025480 	.word	0x58025480
 80059f4:	58025494 	.word	0x58025494

080059f8 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	4613      	mov	r3, r2
 8005a04:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a39      	ldr	r2, [pc, #228]	@ (8005af0 <HAL_DMAEx_ChangeMemory+0xf8>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d04a      	beq.n	8005aa6 <HAL_DMAEx_ChangeMemory+0xae>
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a37      	ldr	r2, [pc, #220]	@ (8005af4 <HAL_DMAEx_ChangeMemory+0xfc>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d045      	beq.n	8005aa6 <HAL_DMAEx_ChangeMemory+0xae>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a36      	ldr	r2, [pc, #216]	@ (8005af8 <HAL_DMAEx_ChangeMemory+0x100>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d040      	beq.n	8005aa6 <HAL_DMAEx_ChangeMemory+0xae>
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a34      	ldr	r2, [pc, #208]	@ (8005afc <HAL_DMAEx_ChangeMemory+0x104>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d03b      	beq.n	8005aa6 <HAL_DMAEx_ChangeMemory+0xae>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a33      	ldr	r2, [pc, #204]	@ (8005b00 <HAL_DMAEx_ChangeMemory+0x108>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d036      	beq.n	8005aa6 <HAL_DMAEx_ChangeMemory+0xae>
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a31      	ldr	r2, [pc, #196]	@ (8005b04 <HAL_DMAEx_ChangeMemory+0x10c>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d031      	beq.n	8005aa6 <HAL_DMAEx_ChangeMemory+0xae>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a30      	ldr	r2, [pc, #192]	@ (8005b08 <HAL_DMAEx_ChangeMemory+0x110>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d02c      	beq.n	8005aa6 <HAL_DMAEx_ChangeMemory+0xae>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a2e      	ldr	r2, [pc, #184]	@ (8005b0c <HAL_DMAEx_ChangeMemory+0x114>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d027      	beq.n	8005aa6 <HAL_DMAEx_ChangeMemory+0xae>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a2d      	ldr	r2, [pc, #180]	@ (8005b10 <HAL_DMAEx_ChangeMemory+0x118>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d022      	beq.n	8005aa6 <HAL_DMAEx_ChangeMemory+0xae>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a2b      	ldr	r2, [pc, #172]	@ (8005b14 <HAL_DMAEx_ChangeMemory+0x11c>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d01d      	beq.n	8005aa6 <HAL_DMAEx_ChangeMemory+0xae>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a2a      	ldr	r2, [pc, #168]	@ (8005b18 <HAL_DMAEx_ChangeMemory+0x120>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d018      	beq.n	8005aa6 <HAL_DMAEx_ChangeMemory+0xae>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a28      	ldr	r2, [pc, #160]	@ (8005b1c <HAL_DMAEx_ChangeMemory+0x124>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d013      	beq.n	8005aa6 <HAL_DMAEx_ChangeMemory+0xae>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a27      	ldr	r2, [pc, #156]	@ (8005b20 <HAL_DMAEx_ChangeMemory+0x128>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d00e      	beq.n	8005aa6 <HAL_DMAEx_ChangeMemory+0xae>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a25      	ldr	r2, [pc, #148]	@ (8005b24 <HAL_DMAEx_ChangeMemory+0x12c>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d009      	beq.n	8005aa6 <HAL_DMAEx_ChangeMemory+0xae>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a24      	ldr	r2, [pc, #144]	@ (8005b28 <HAL_DMAEx_ChangeMemory+0x130>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d004      	beq.n	8005aa6 <HAL_DMAEx_ChangeMemory+0xae>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a22      	ldr	r2, [pc, #136]	@ (8005b2c <HAL_DMAEx_ChangeMemory+0x134>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d101      	bne.n	8005aaa <HAL_DMAEx_ChangeMemory+0xb2>
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e000      	b.n	8005aac <HAL_DMAEx_ChangeMemory+0xb4>
 8005aaa:	2300      	movs	r3, #0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00c      	beq.n	8005aca <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 8005ab0:	79fb      	ldrb	r3, [r7, #7]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d104      	bne.n	8005ac0 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68ba      	ldr	r2, [r7, #8]
 8005abc:	60da      	str	r2, [r3, #12]
 8005abe:	e010      	b.n	8005ae2 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68ba      	ldr	r2, [r7, #8]
 8005ac6:	611a      	str	r2, [r3, #16]
 8005ac8:	e00b      	b.n	8005ae2 <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 8005aca:	79fb      	ldrb	r3, [r7, #7]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d104      	bne.n	8005ada <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68ba      	ldr	r2, [r7, #8]
 8005ad6:	60da      	str	r2, [r3, #12]
 8005ad8:	e003      	b.n	8005ae2 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68ba      	ldr	r2, [r7, #8]
 8005ae0:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3714      	adds	r7, #20
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr
 8005af0:	40020010 	.word	0x40020010
 8005af4:	40020028 	.word	0x40020028
 8005af8:	40020040 	.word	0x40020040
 8005afc:	40020058 	.word	0x40020058
 8005b00:	40020070 	.word	0x40020070
 8005b04:	40020088 	.word	0x40020088
 8005b08:	400200a0 	.word	0x400200a0
 8005b0c:	400200b8 	.word	0x400200b8
 8005b10:	40020410 	.word	0x40020410
 8005b14:	40020428 	.word	0x40020428
 8005b18:	40020440 	.word	0x40020440
 8005b1c:	40020458 	.word	0x40020458
 8005b20:	40020470 	.word	0x40020470
 8005b24:	40020488 	.word	0x40020488
 8005b28:	400204a0 	.word	0x400204a0
 8005b2c:	400204b8 	.word	0x400204b8

08005b30 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	607a      	str	r2, [r7, #4]
 8005b3c:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a46      	ldr	r2, [pc, #280]	@ (8005c5c <DMA_MultiBufferSetConfig+0x12c>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d04a      	beq.n	8005bde <DMA_MultiBufferSetConfig+0xae>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a44      	ldr	r2, [pc, #272]	@ (8005c60 <DMA_MultiBufferSetConfig+0x130>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d045      	beq.n	8005bde <DMA_MultiBufferSetConfig+0xae>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a43      	ldr	r2, [pc, #268]	@ (8005c64 <DMA_MultiBufferSetConfig+0x134>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d040      	beq.n	8005bde <DMA_MultiBufferSetConfig+0xae>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a41      	ldr	r2, [pc, #260]	@ (8005c68 <DMA_MultiBufferSetConfig+0x138>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d03b      	beq.n	8005bde <DMA_MultiBufferSetConfig+0xae>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a40      	ldr	r2, [pc, #256]	@ (8005c6c <DMA_MultiBufferSetConfig+0x13c>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d036      	beq.n	8005bde <DMA_MultiBufferSetConfig+0xae>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a3e      	ldr	r2, [pc, #248]	@ (8005c70 <DMA_MultiBufferSetConfig+0x140>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d031      	beq.n	8005bde <DMA_MultiBufferSetConfig+0xae>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a3d      	ldr	r2, [pc, #244]	@ (8005c74 <DMA_MultiBufferSetConfig+0x144>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d02c      	beq.n	8005bde <DMA_MultiBufferSetConfig+0xae>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a3b      	ldr	r2, [pc, #236]	@ (8005c78 <DMA_MultiBufferSetConfig+0x148>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d027      	beq.n	8005bde <DMA_MultiBufferSetConfig+0xae>
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a3a      	ldr	r2, [pc, #232]	@ (8005c7c <DMA_MultiBufferSetConfig+0x14c>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d022      	beq.n	8005bde <DMA_MultiBufferSetConfig+0xae>
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a38      	ldr	r2, [pc, #224]	@ (8005c80 <DMA_MultiBufferSetConfig+0x150>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d01d      	beq.n	8005bde <DMA_MultiBufferSetConfig+0xae>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a37      	ldr	r2, [pc, #220]	@ (8005c84 <DMA_MultiBufferSetConfig+0x154>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d018      	beq.n	8005bde <DMA_MultiBufferSetConfig+0xae>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a35      	ldr	r2, [pc, #212]	@ (8005c88 <DMA_MultiBufferSetConfig+0x158>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d013      	beq.n	8005bde <DMA_MultiBufferSetConfig+0xae>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a34      	ldr	r2, [pc, #208]	@ (8005c8c <DMA_MultiBufferSetConfig+0x15c>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d00e      	beq.n	8005bde <DMA_MultiBufferSetConfig+0xae>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a32      	ldr	r2, [pc, #200]	@ (8005c90 <DMA_MultiBufferSetConfig+0x160>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d009      	beq.n	8005bde <DMA_MultiBufferSetConfig+0xae>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a31      	ldr	r2, [pc, #196]	@ (8005c94 <DMA_MultiBufferSetConfig+0x164>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d004      	beq.n	8005bde <DMA_MultiBufferSetConfig+0xae>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a2f      	ldr	r2, [pc, #188]	@ (8005c98 <DMA_MultiBufferSetConfig+0x168>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d101      	bne.n	8005be2 <DMA_MultiBufferSetConfig+0xb2>
 8005bde:	2301      	movs	r3, #1
 8005be0:	e000      	b.n	8005be4 <DMA_MultiBufferSetConfig+0xb4>
 8005be2:	2300      	movs	r3, #0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d019      	beq.n	8005c1c <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	683a      	ldr	r2, [r7, #0]
 8005bee:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	2b40      	cmp	r3, #64	@ 0x40
 8005bf6:	d108      	bne.n	8005c0a <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8005c08:	e021      	b.n	8005c4e <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68ba      	ldr	r2, [r7, #8]
 8005c10:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	60da      	str	r2, [r3, #12]
}
 8005c1a:	e018      	b.n	8005c4e <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	683a      	ldr	r2, [r7, #0]
 8005c22:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	2b40      	cmp	r3, #64	@ 0x40
 8005c2a:	d108      	bne.n	8005c3e <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	60da      	str	r2, [r3, #12]
}
 8005c3c:	e007      	b.n	8005c4e <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68ba      	ldr	r2, [r7, #8]
 8005c44:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	60da      	str	r2, [r3, #12]
}
 8005c4e:	bf00      	nop
 8005c50:	3714      	adds	r7, #20
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	40020010 	.word	0x40020010
 8005c60:	40020028 	.word	0x40020028
 8005c64:	40020040 	.word	0x40020040
 8005c68:	40020058 	.word	0x40020058
 8005c6c:	40020070 	.word	0x40020070
 8005c70:	40020088 	.word	0x40020088
 8005c74:	400200a0 	.word	0x400200a0
 8005c78:	400200b8 	.word	0x400200b8
 8005c7c:	40020410 	.word	0x40020410
 8005c80:	40020428 	.word	0x40020428
 8005c84:	40020440 	.word	0x40020440
 8005c88:	40020458 	.word	0x40020458
 8005c8c:	40020470 	.word	0x40020470
 8005c90:	40020488 	.word	0x40020488
 8005c94:	400204a0 	.word	0x400204a0
 8005c98:	400204b8 	.word	0x400204b8

08005c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b089      	sub	sp, #36	@ 0x24
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005caa:	4b89      	ldr	r3, [pc, #548]	@ (8005ed0 <HAL_GPIO_Init+0x234>)
 8005cac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005cae:	e194      	b.n	8005fda <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	2101      	movs	r1, #1
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	f000 8186 	beq.w	8005fd4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f003 0303 	and.w	r3, r3, #3
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d005      	beq.n	8005ce0 <HAL_GPIO_Init+0x44>
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	f003 0303 	and.w	r3, r3, #3
 8005cdc:	2b02      	cmp	r3, #2
 8005cde:	d130      	bne.n	8005d42 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	005b      	lsls	r3, r3, #1
 8005cea:	2203      	movs	r2, #3
 8005cec:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf0:	43db      	mvns	r3, r3
 8005cf2:	69ba      	ldr	r2, [r7, #24]
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	68da      	ldr	r2, [r3, #12]
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	005b      	lsls	r3, r3, #1
 8005d00:	fa02 f303 	lsl.w	r3, r2, r3
 8005d04:	69ba      	ldr	r2, [r7, #24]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	69ba      	ldr	r2, [r7, #24]
 8005d0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005d16:	2201      	movs	r2, #1
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1e:	43db      	mvns	r3, r3
 8005d20:	69ba      	ldr	r2, [r7, #24]
 8005d22:	4013      	ands	r3, r2
 8005d24:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	091b      	lsrs	r3, r3, #4
 8005d2c:	f003 0201 	and.w	r2, r3, #1
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	fa02 f303 	lsl.w	r3, r2, r3
 8005d36:	69ba      	ldr	r2, [r7, #24]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	69ba      	ldr	r2, [r7, #24]
 8005d40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	f003 0303 	and.w	r3, r3, #3
 8005d4a:	2b03      	cmp	r3, #3
 8005d4c:	d017      	beq.n	8005d7e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	005b      	lsls	r3, r3, #1
 8005d58:	2203      	movs	r2, #3
 8005d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5e:	43db      	mvns	r3, r3
 8005d60:	69ba      	ldr	r2, [r7, #24]
 8005d62:	4013      	ands	r3, r2
 8005d64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	689a      	ldr	r2, [r3, #8]
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	005b      	lsls	r3, r3, #1
 8005d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d72:	69ba      	ldr	r2, [r7, #24]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	69ba      	ldr	r2, [r7, #24]
 8005d7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	f003 0303 	and.w	r3, r3, #3
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	d123      	bne.n	8005dd2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	08da      	lsrs	r2, r3, #3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	3208      	adds	r2, #8
 8005d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	f003 0307 	and.w	r3, r3, #7
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	220f      	movs	r2, #15
 8005da2:	fa02 f303 	lsl.w	r3, r2, r3
 8005da6:	43db      	mvns	r3, r3
 8005da8:	69ba      	ldr	r2, [r7, #24]
 8005daa:	4013      	ands	r3, r2
 8005dac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	691a      	ldr	r2, [r3, #16]
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	f003 0307 	and.w	r3, r3, #7
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	fa02 f303 	lsl.w	r3, r2, r3
 8005dbe:	69ba      	ldr	r2, [r7, #24]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	08da      	lsrs	r2, r3, #3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	3208      	adds	r2, #8
 8005dcc:	69b9      	ldr	r1, [r7, #24]
 8005dce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	005b      	lsls	r3, r3, #1
 8005ddc:	2203      	movs	r2, #3
 8005dde:	fa02 f303 	lsl.w	r3, r2, r3
 8005de2:	43db      	mvns	r3, r3
 8005de4:	69ba      	ldr	r2, [r7, #24]
 8005de6:	4013      	ands	r3, r2
 8005de8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	f003 0203 	and.w	r2, r3, #3
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	005b      	lsls	r3, r3, #1
 8005df6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfa:	69ba      	ldr	r2, [r7, #24]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	69ba      	ldr	r2, [r7, #24]
 8005e04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	f000 80e0 	beq.w	8005fd4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e14:	4b2f      	ldr	r3, [pc, #188]	@ (8005ed4 <HAL_GPIO_Init+0x238>)
 8005e16:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8005e1a:	4a2e      	ldr	r2, [pc, #184]	@ (8005ed4 <HAL_GPIO_Init+0x238>)
 8005e1c:	f043 0302 	orr.w	r3, r3, #2
 8005e20:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8005e24:	4b2b      	ldr	r3, [pc, #172]	@ (8005ed4 <HAL_GPIO_Init+0x238>)
 8005e26:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8005e2a:	f003 0302 	and.w	r3, r3, #2
 8005e2e:	60fb      	str	r3, [r7, #12]
 8005e30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005e32:	4a29      	ldr	r2, [pc, #164]	@ (8005ed8 <HAL_GPIO_Init+0x23c>)
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	089b      	lsrs	r3, r3, #2
 8005e38:	3302      	adds	r3, #2
 8005e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	f003 0303 	and.w	r3, r3, #3
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	220f      	movs	r2, #15
 8005e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4e:	43db      	mvns	r3, r3
 8005e50:	69ba      	ldr	r2, [r7, #24]
 8005e52:	4013      	ands	r3, r2
 8005e54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a20      	ldr	r2, [pc, #128]	@ (8005edc <HAL_GPIO_Init+0x240>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d052      	beq.n	8005f04 <HAL_GPIO_Init+0x268>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a1f      	ldr	r2, [pc, #124]	@ (8005ee0 <HAL_GPIO_Init+0x244>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d031      	beq.n	8005eca <HAL_GPIO_Init+0x22e>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a1e      	ldr	r2, [pc, #120]	@ (8005ee4 <HAL_GPIO_Init+0x248>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d02b      	beq.n	8005ec6 <HAL_GPIO_Init+0x22a>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a1d      	ldr	r2, [pc, #116]	@ (8005ee8 <HAL_GPIO_Init+0x24c>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d025      	beq.n	8005ec2 <HAL_GPIO_Init+0x226>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a1c      	ldr	r2, [pc, #112]	@ (8005eec <HAL_GPIO_Init+0x250>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d01f      	beq.n	8005ebe <HAL_GPIO_Init+0x222>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a1b      	ldr	r2, [pc, #108]	@ (8005ef0 <HAL_GPIO_Init+0x254>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d019      	beq.n	8005eba <HAL_GPIO_Init+0x21e>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a1a      	ldr	r2, [pc, #104]	@ (8005ef4 <HAL_GPIO_Init+0x258>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d013      	beq.n	8005eb6 <HAL_GPIO_Init+0x21a>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a19      	ldr	r2, [pc, #100]	@ (8005ef8 <HAL_GPIO_Init+0x25c>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d00d      	beq.n	8005eb2 <HAL_GPIO_Init+0x216>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a18      	ldr	r2, [pc, #96]	@ (8005efc <HAL_GPIO_Init+0x260>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d007      	beq.n	8005eae <HAL_GPIO_Init+0x212>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a17      	ldr	r2, [pc, #92]	@ (8005f00 <HAL_GPIO_Init+0x264>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d101      	bne.n	8005eaa <HAL_GPIO_Init+0x20e>
 8005ea6:	2309      	movs	r3, #9
 8005ea8:	e02d      	b.n	8005f06 <HAL_GPIO_Init+0x26a>
 8005eaa:	230a      	movs	r3, #10
 8005eac:	e02b      	b.n	8005f06 <HAL_GPIO_Init+0x26a>
 8005eae:	2308      	movs	r3, #8
 8005eb0:	e029      	b.n	8005f06 <HAL_GPIO_Init+0x26a>
 8005eb2:	2307      	movs	r3, #7
 8005eb4:	e027      	b.n	8005f06 <HAL_GPIO_Init+0x26a>
 8005eb6:	2306      	movs	r3, #6
 8005eb8:	e025      	b.n	8005f06 <HAL_GPIO_Init+0x26a>
 8005eba:	2305      	movs	r3, #5
 8005ebc:	e023      	b.n	8005f06 <HAL_GPIO_Init+0x26a>
 8005ebe:	2304      	movs	r3, #4
 8005ec0:	e021      	b.n	8005f06 <HAL_GPIO_Init+0x26a>
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e01f      	b.n	8005f06 <HAL_GPIO_Init+0x26a>
 8005ec6:	2302      	movs	r3, #2
 8005ec8:	e01d      	b.n	8005f06 <HAL_GPIO_Init+0x26a>
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e01b      	b.n	8005f06 <HAL_GPIO_Init+0x26a>
 8005ece:	bf00      	nop
 8005ed0:	58000080 	.word	0x58000080
 8005ed4:	58024400 	.word	0x58024400
 8005ed8:	58000400 	.word	0x58000400
 8005edc:	58020000 	.word	0x58020000
 8005ee0:	58020400 	.word	0x58020400
 8005ee4:	58020800 	.word	0x58020800
 8005ee8:	58020c00 	.word	0x58020c00
 8005eec:	58021000 	.word	0x58021000
 8005ef0:	58021400 	.word	0x58021400
 8005ef4:	58021800 	.word	0x58021800
 8005ef8:	58021c00 	.word	0x58021c00
 8005efc:	58022000 	.word	0x58022000
 8005f00:	58022400 	.word	0x58022400
 8005f04:	2300      	movs	r3, #0
 8005f06:	69fa      	ldr	r2, [r7, #28]
 8005f08:	f002 0203 	and.w	r2, r2, #3
 8005f0c:	0092      	lsls	r2, r2, #2
 8005f0e:	4093      	lsls	r3, r2
 8005f10:	69ba      	ldr	r2, [r7, #24]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f16:	4938      	ldr	r1, [pc, #224]	@ (8005ff8 <HAL_GPIO_Init+0x35c>)
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	089b      	lsrs	r3, r3, #2
 8005f1c:	3302      	adds	r3, #2
 8005f1e:	69ba      	ldr	r2, [r7, #24]
 8005f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	43db      	mvns	r3, r3
 8005f30:	69ba      	ldr	r2, [r7, #24]
 8005f32:	4013      	ands	r3, r2
 8005f34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d003      	beq.n	8005f4a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005f42:	69ba      	ldr	r2, [r7, #24]
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005f4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005f52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	43db      	mvns	r3, r3
 8005f5e:	69ba      	ldr	r2, [r7, #24]
 8005f60:	4013      	ands	r3, r2
 8005f62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d003      	beq.n	8005f78 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005f70:	69ba      	ldr	r2, [r7, #24]
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005f78:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	43db      	mvns	r3, r3
 8005f8a:	69ba      	ldr	r2, [r7, #24]
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d003      	beq.n	8005fa4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005f9c:	69ba      	ldr	r2, [r7, #24]
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	69ba      	ldr	r2, [r7, #24]
 8005fa8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	43db      	mvns	r3, r3
 8005fb4:	69ba      	ldr	r2, [r7, #24]
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d003      	beq.n	8005fce <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005fc6:	69ba      	ldr	r2, [r7, #24]
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	69ba      	ldr	r2, [r7, #24]
 8005fd2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f47f ae63 	bne.w	8005cb0 <HAL_GPIO_Init+0x14>
  }
}
 8005fea:	bf00      	nop
 8005fec:	bf00      	nop
 8005fee:	3724      	adds	r7, #36	@ 0x24
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr
 8005ff8:	58000400 	.word	0x58000400

08005ffc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	460b      	mov	r3, r1
 8006006:	807b      	strh	r3, [r7, #2]
 8006008:	4613      	mov	r3, r2
 800600a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800600c:	787b      	ldrb	r3, [r7, #1]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d003      	beq.n	800601a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006012:	887a      	ldrh	r2, [r7, #2]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006018:	e003      	b.n	8006022 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800601a:	887b      	ldrh	r3, [r7, #2]
 800601c:	041a      	lsls	r2, r3, #16
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	619a      	str	r2, [r3, #24]
}
 8006022:	bf00      	nop
 8006024:	370c      	adds	r7, #12
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
	...

08006030 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d101      	bne.n	8006042 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e07f      	b.n	8006142 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006048:	b2db      	uxtb	r3, r3
 800604a:	2b00      	cmp	r3, #0
 800604c:	d106      	bne.n	800605c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f7fb fb3c 	bl	80016d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2224      	movs	r2, #36	@ 0x24
 8006060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f022 0201 	bic.w	r2, r2, #1
 8006072:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	685a      	ldr	r2, [r3, #4]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006080:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	689a      	ldr	r2, [r3, #8]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006090:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	2b01      	cmp	r3, #1
 8006098:	d107      	bne.n	80060aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	689a      	ldr	r2, [r3, #8]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80060a6:	609a      	str	r2, [r3, #8]
 80060a8:	e006      	b.n	80060b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	689a      	ldr	r2, [r3, #8]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80060b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	2b02      	cmp	r3, #2
 80060be:	d104      	bne.n	80060ca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80060c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	6859      	ldr	r1, [r3, #4]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	4b1d      	ldr	r3, [pc, #116]	@ (800614c <HAL_I2C_Init+0x11c>)
 80060d6:	430b      	orrs	r3, r1
 80060d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68da      	ldr	r2, [r3, #12]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80060e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	691a      	ldr	r2, [r3, #16]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	699b      	ldr	r3, [r3, #24]
 80060fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	430a      	orrs	r2, r1
 8006102:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	69d9      	ldr	r1, [r3, #28]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a1a      	ldr	r2, [r3, #32]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	430a      	orrs	r2, r1
 8006112:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f042 0201 	orr.w	r2, r2, #1
 8006122:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2220      	movs	r2, #32
 800612e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3708      	adds	r7, #8
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	02008000 	.word	0x02008000

08006150 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b088      	sub	sp, #32
 8006154:	af02      	add	r7, sp, #8
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	607a      	str	r2, [r7, #4]
 800615a:	461a      	mov	r2, r3
 800615c:	460b      	mov	r3, r1
 800615e:	817b      	strh	r3, [r7, #10]
 8006160:	4613      	mov	r3, r2
 8006162:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800616a:	b2db      	uxtb	r3, r3
 800616c:	2b20      	cmp	r3, #32
 800616e:	f040 80da 	bne.w	8006326 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006178:	2b01      	cmp	r3, #1
 800617a:	d101      	bne.n	8006180 <HAL_I2C_Master_Transmit+0x30>
 800617c:	2302      	movs	r3, #2
 800617e:	e0d3      	b.n	8006328 <HAL_I2C_Master_Transmit+0x1d8>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006188:	f7fb fdce 	bl	8001d28 <HAL_GetTick>
 800618c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	9300      	str	r3, [sp, #0]
 8006192:	2319      	movs	r3, #25
 8006194:	2201      	movs	r2, #1
 8006196:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f000 f9e6 	bl	800656c <I2C_WaitOnFlagUntilTimeout>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d001      	beq.n	80061aa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e0be      	b.n	8006328 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2221      	movs	r2, #33	@ 0x21
 80061ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2210      	movs	r2, #16
 80061b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	893a      	ldrh	r2, [r7, #8]
 80061ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2200      	movs	r2, #0
 80061d0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	2bff      	cmp	r3, #255	@ 0xff
 80061da:	d90e      	bls.n	80061fa <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	22ff      	movs	r2, #255	@ 0xff
 80061e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061e6:	b2da      	uxtb	r2, r3
 80061e8:	8979      	ldrh	r1, [r7, #10]
 80061ea:	4b51      	ldr	r3, [pc, #324]	@ (8006330 <HAL_I2C_Master_Transmit+0x1e0>)
 80061ec:	9300      	str	r3, [sp, #0]
 80061ee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80061f2:	68f8      	ldr	r0, [r7, #12]
 80061f4:	f000 fbf6 	bl	80069e4 <I2C_TransferConfig>
 80061f8:	e06c      	b.n	80062d4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061fe:	b29a      	uxth	r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006208:	b2da      	uxtb	r2, r3
 800620a:	8979      	ldrh	r1, [r7, #10]
 800620c:	4b48      	ldr	r3, [pc, #288]	@ (8006330 <HAL_I2C_Master_Transmit+0x1e0>)
 800620e:	9300      	str	r3, [sp, #0]
 8006210:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f000 fbe5 	bl	80069e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800621a:	e05b      	b.n	80062d4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800621c:	697a      	ldr	r2, [r7, #20]
 800621e:	6a39      	ldr	r1, [r7, #32]
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f000 f9f2 	bl	800660a <I2C_WaitOnTXISFlagUntilTimeout>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d001      	beq.n	8006230 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e07b      	b.n	8006328 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006234:	781a      	ldrb	r2, [r3, #0]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006240:	1c5a      	adds	r2, r3, #1
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800624a:	b29b      	uxth	r3, r3
 800624c:	3b01      	subs	r3, #1
 800624e:	b29a      	uxth	r2, r3
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006258:	3b01      	subs	r3, #1
 800625a:	b29a      	uxth	r2, r3
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006264:	b29b      	uxth	r3, r3
 8006266:	2b00      	cmp	r3, #0
 8006268:	d034      	beq.n	80062d4 <HAL_I2C_Master_Transmit+0x184>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800626e:	2b00      	cmp	r3, #0
 8006270:	d130      	bne.n	80062d4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	9300      	str	r3, [sp, #0]
 8006276:	6a3b      	ldr	r3, [r7, #32]
 8006278:	2200      	movs	r2, #0
 800627a:	2180      	movs	r1, #128	@ 0x80
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f000 f975 	bl	800656c <I2C_WaitOnFlagUntilTimeout>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d001      	beq.n	800628c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e04d      	b.n	8006328 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006290:	b29b      	uxth	r3, r3
 8006292:	2bff      	cmp	r3, #255	@ 0xff
 8006294:	d90e      	bls.n	80062b4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	22ff      	movs	r2, #255	@ 0xff
 800629a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062a0:	b2da      	uxtb	r2, r3
 80062a2:	8979      	ldrh	r1, [r7, #10]
 80062a4:	2300      	movs	r3, #0
 80062a6:	9300      	str	r3, [sp, #0]
 80062a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f000 fb99 	bl	80069e4 <I2C_TransferConfig>
 80062b2:	e00f      	b.n	80062d4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062b8:	b29a      	uxth	r2, r3
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062c2:	b2da      	uxtb	r2, r3
 80062c4:	8979      	ldrh	r1, [r7, #10]
 80062c6:	2300      	movs	r3, #0
 80062c8:	9300      	str	r3, [sp, #0]
 80062ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	f000 fb88 	bl	80069e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062d8:	b29b      	uxth	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d19e      	bne.n	800621c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	6a39      	ldr	r1, [r7, #32]
 80062e2:	68f8      	ldr	r0, [r7, #12]
 80062e4:	f000 f9d8 	bl	8006698 <I2C_WaitOnSTOPFlagUntilTimeout>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d001      	beq.n	80062f2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e01a      	b.n	8006328 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2220      	movs	r2, #32
 80062f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	6859      	ldr	r1, [r3, #4]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	4b0b      	ldr	r3, [pc, #44]	@ (8006334 <HAL_I2C_Master_Transmit+0x1e4>)
 8006306:	400b      	ands	r3, r1
 8006308:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2220      	movs	r2, #32
 800630e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2200      	movs	r2, #0
 8006316:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2200      	movs	r2, #0
 800631e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006322:	2300      	movs	r3, #0
 8006324:	e000      	b.n	8006328 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8006326:	2302      	movs	r3, #2
  }
}
 8006328:	4618      	mov	r0, r3
 800632a:	3718      	adds	r7, #24
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	80002000 	.word	0x80002000
 8006334:	fe00e800 	.word	0xfe00e800

08006338 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b088      	sub	sp, #32
 800633c:	af02      	add	r7, sp, #8
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	607a      	str	r2, [r7, #4]
 8006342:	461a      	mov	r2, r3
 8006344:	460b      	mov	r3, r1
 8006346:	817b      	strh	r3, [r7, #10]
 8006348:	4613      	mov	r3, r2
 800634a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006352:	b2db      	uxtb	r3, r3
 8006354:	2b20      	cmp	r3, #32
 8006356:	f040 80db 	bne.w	8006510 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006360:	2b01      	cmp	r3, #1
 8006362:	d101      	bne.n	8006368 <HAL_I2C_Master_Receive+0x30>
 8006364:	2302      	movs	r3, #2
 8006366:	e0d4      	b.n	8006512 <HAL_I2C_Master_Receive+0x1da>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006370:	f7fb fcda 	bl	8001d28 <HAL_GetTick>
 8006374:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	9300      	str	r3, [sp, #0]
 800637a:	2319      	movs	r3, #25
 800637c:	2201      	movs	r2, #1
 800637e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f000 f8f2 	bl	800656c <I2C_WaitOnFlagUntilTimeout>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d001      	beq.n	8006392 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e0bf      	b.n	8006512 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2222      	movs	r2, #34	@ 0x22
 8006396:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2210      	movs	r2, #16
 800639e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	893a      	ldrh	r2, [r7, #8]
 80063b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2200      	movs	r2, #0
 80063b8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063be:	b29b      	uxth	r3, r3
 80063c0:	2bff      	cmp	r3, #255	@ 0xff
 80063c2:	d90e      	bls.n	80063e2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	22ff      	movs	r2, #255	@ 0xff
 80063c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063ce:	b2da      	uxtb	r2, r3
 80063d0:	8979      	ldrh	r1, [r7, #10]
 80063d2:	4b52      	ldr	r3, [pc, #328]	@ (800651c <HAL_I2C_Master_Receive+0x1e4>)
 80063d4:	9300      	str	r3, [sp, #0]
 80063d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80063da:	68f8      	ldr	r0, [r7, #12]
 80063dc:	f000 fb02 	bl	80069e4 <I2C_TransferConfig>
 80063e0:	e06d      	b.n	80064be <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063e6:	b29a      	uxth	r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063f0:	b2da      	uxtb	r2, r3
 80063f2:	8979      	ldrh	r1, [r7, #10]
 80063f4:	4b49      	ldr	r3, [pc, #292]	@ (800651c <HAL_I2C_Master_Receive+0x1e4>)
 80063f6:	9300      	str	r3, [sp, #0]
 80063f8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f000 faf1 	bl	80069e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006402:	e05c      	b.n	80064be <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006404:	697a      	ldr	r2, [r7, #20]
 8006406:	6a39      	ldr	r1, [r7, #32]
 8006408:	68f8      	ldr	r0, [r7, #12]
 800640a:	f000 f989 	bl	8006720 <I2C_WaitOnRXNEFlagUntilTimeout>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d001      	beq.n	8006418 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e07c      	b.n	8006512 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006422:	b2d2      	uxtb	r2, r2
 8006424:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800642a:	1c5a      	adds	r2, r3, #1
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006434:	3b01      	subs	r3, #1
 8006436:	b29a      	uxth	r2, r3
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006440:	b29b      	uxth	r3, r3
 8006442:	3b01      	subs	r3, #1
 8006444:	b29a      	uxth	r2, r3
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800644e:	b29b      	uxth	r3, r3
 8006450:	2b00      	cmp	r3, #0
 8006452:	d034      	beq.n	80064be <HAL_I2C_Master_Receive+0x186>
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006458:	2b00      	cmp	r3, #0
 800645a:	d130      	bne.n	80064be <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	9300      	str	r3, [sp, #0]
 8006460:	6a3b      	ldr	r3, [r7, #32]
 8006462:	2200      	movs	r2, #0
 8006464:	2180      	movs	r1, #128	@ 0x80
 8006466:	68f8      	ldr	r0, [r7, #12]
 8006468:	f000 f880 	bl	800656c <I2C_WaitOnFlagUntilTimeout>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d001      	beq.n	8006476 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e04d      	b.n	8006512 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800647a:	b29b      	uxth	r3, r3
 800647c:	2bff      	cmp	r3, #255	@ 0xff
 800647e:	d90e      	bls.n	800649e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	22ff      	movs	r2, #255	@ 0xff
 8006484:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800648a:	b2da      	uxtb	r2, r3
 800648c:	8979      	ldrh	r1, [r7, #10]
 800648e:	2300      	movs	r3, #0
 8006490:	9300      	str	r3, [sp, #0]
 8006492:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f000 faa4 	bl	80069e4 <I2C_TransferConfig>
 800649c:	e00f      	b.n	80064be <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064ac:	b2da      	uxtb	r2, r3
 80064ae:	8979      	ldrh	r1, [r7, #10]
 80064b0:	2300      	movs	r3, #0
 80064b2:	9300      	str	r3, [sp, #0]
 80064b4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80064b8:	68f8      	ldr	r0, [r7, #12]
 80064ba:	f000 fa93 	bl	80069e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d19d      	bne.n	8006404 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064c8:	697a      	ldr	r2, [r7, #20]
 80064ca:	6a39      	ldr	r1, [r7, #32]
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f000 f8e3 	bl	8006698 <I2C_WaitOnSTOPFlagUntilTimeout>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d001      	beq.n	80064dc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e01a      	b.n	8006512 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2220      	movs	r2, #32
 80064e2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	6859      	ldr	r1, [r3, #4]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	4b0c      	ldr	r3, [pc, #48]	@ (8006520 <HAL_I2C_Master_Receive+0x1e8>)
 80064f0:	400b      	ands	r3, r1
 80064f2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2220      	movs	r2, #32
 80064f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2200      	movs	r2, #0
 8006500:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2200      	movs	r2, #0
 8006508:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800650c:	2300      	movs	r3, #0
 800650e:	e000      	b.n	8006512 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006510:	2302      	movs	r3, #2
  }
}
 8006512:	4618      	mov	r0, r3
 8006514:	3718      	adds	r7, #24
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	80002400 	.word	0x80002400
 8006520:	fe00e800 	.word	0xfe00e800

08006524 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	699b      	ldr	r3, [r3, #24]
 8006532:	f003 0302 	and.w	r3, r3, #2
 8006536:	2b02      	cmp	r3, #2
 8006538:	d103      	bne.n	8006542 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2200      	movs	r2, #0
 8006540:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	699b      	ldr	r3, [r3, #24]
 8006548:	f003 0301 	and.w	r3, r3, #1
 800654c:	2b01      	cmp	r3, #1
 800654e:	d007      	beq.n	8006560 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	699a      	ldr	r2, [r3, #24]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f042 0201 	orr.w	r2, r2, #1
 800655e:	619a      	str	r2, [r3, #24]
  }
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	603b      	str	r3, [r7, #0]
 8006578:	4613      	mov	r3, r2
 800657a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800657c:	e031      	b.n	80065e2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006584:	d02d      	beq.n	80065e2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006586:	f7fb fbcf 	bl	8001d28 <HAL_GetTick>
 800658a:	4602      	mov	r2, r0
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	683a      	ldr	r2, [r7, #0]
 8006592:	429a      	cmp	r2, r3
 8006594:	d302      	bcc.n	800659c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d122      	bne.n	80065e2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	699a      	ldr	r2, [r3, #24]
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	4013      	ands	r3, r2
 80065a6:	68ba      	ldr	r2, [r7, #8]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	bf0c      	ite	eq
 80065ac:	2301      	moveq	r3, #1
 80065ae:	2300      	movne	r3, #0
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	461a      	mov	r2, r3
 80065b4:	79fb      	ldrb	r3, [r7, #7]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d113      	bne.n	80065e2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065be:	f043 0220 	orr.w	r2, r3, #32
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2220      	movs	r2, #32
 80065ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	e00f      	b.n	8006602 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	699a      	ldr	r2, [r3, #24]
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	4013      	ands	r3, r2
 80065ec:	68ba      	ldr	r2, [r7, #8]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	bf0c      	ite	eq
 80065f2:	2301      	moveq	r3, #1
 80065f4:	2300      	movne	r3, #0
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	461a      	mov	r2, r3
 80065fa:	79fb      	ldrb	r3, [r7, #7]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d0be      	beq.n	800657e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3710      	adds	r7, #16
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}

0800660a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800660a:	b580      	push	{r7, lr}
 800660c:	b084      	sub	sp, #16
 800660e:	af00      	add	r7, sp, #0
 8006610:	60f8      	str	r0, [r7, #12]
 8006612:	60b9      	str	r1, [r7, #8]
 8006614:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006616:	e033      	b.n	8006680 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	68b9      	ldr	r1, [r7, #8]
 800661c:	68f8      	ldr	r0, [r7, #12]
 800661e:	f000 f901 	bl	8006824 <I2C_IsErrorOccurred>
 8006622:	4603      	mov	r3, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d001      	beq.n	800662c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	e031      	b.n	8006690 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006632:	d025      	beq.n	8006680 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006634:	f7fb fb78 	bl	8001d28 <HAL_GetTick>
 8006638:	4602      	mov	r2, r0
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	68ba      	ldr	r2, [r7, #8]
 8006640:	429a      	cmp	r2, r3
 8006642:	d302      	bcc.n	800664a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d11a      	bne.n	8006680 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	699b      	ldr	r3, [r3, #24]
 8006650:	f003 0302 	and.w	r3, r3, #2
 8006654:	2b02      	cmp	r3, #2
 8006656:	d013      	beq.n	8006680 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800665c:	f043 0220 	orr.w	r2, r3, #32
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2220      	movs	r2, #32
 8006668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2200      	movs	r2, #0
 8006670:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2200      	movs	r2, #0
 8006678:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e007      	b.n	8006690 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	f003 0302 	and.w	r3, r3, #2
 800668a:	2b02      	cmp	r3, #2
 800668c:	d1c4      	bne.n	8006618 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	3710      	adds	r7, #16
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80066a4:	e02f      	b.n	8006706 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	68b9      	ldr	r1, [r7, #8]
 80066aa:	68f8      	ldr	r0, [r7, #12]
 80066ac:	f000 f8ba 	bl	8006824 <I2C_IsErrorOccurred>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d001      	beq.n	80066ba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e02d      	b.n	8006716 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066ba:	f7fb fb35 	bl	8001d28 <HAL_GetTick>
 80066be:	4602      	mov	r2, r0
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	68ba      	ldr	r2, [r7, #8]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d302      	bcc.n	80066d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d11a      	bne.n	8006706 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	699b      	ldr	r3, [r3, #24]
 80066d6:	f003 0320 	and.w	r3, r3, #32
 80066da:	2b20      	cmp	r3, #32
 80066dc:	d013      	beq.n	8006706 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066e2:	f043 0220 	orr.w	r2, r3, #32
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2220      	movs	r2, #32
 80066ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e007      	b.n	8006716 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	699b      	ldr	r3, [r3, #24]
 800670c:	f003 0320 	and.w	r3, r3, #32
 8006710:	2b20      	cmp	r3, #32
 8006712:	d1c8      	bne.n	80066a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3710      	adds	r7, #16
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
	...

08006720 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800672c:	e06b      	b.n	8006806 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	68b9      	ldr	r1, [r7, #8]
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f000 f876 	bl	8006824 <I2C_IsErrorOccurred>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d001      	beq.n	8006742 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e069      	b.n	8006816 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	699b      	ldr	r3, [r3, #24]
 8006748:	f003 0320 	and.w	r3, r3, #32
 800674c:	2b20      	cmp	r3, #32
 800674e:	d138      	bne.n	80067c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	699b      	ldr	r3, [r3, #24]
 8006756:	f003 0304 	and.w	r3, r3, #4
 800675a:	2b04      	cmp	r3, #4
 800675c:	d105      	bne.n	800676a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006762:	2b00      	cmp	r3, #0
 8006764:	d001      	beq.n	800676a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8006766:	2300      	movs	r3, #0
 8006768:	e055      	b.n	8006816 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	699b      	ldr	r3, [r3, #24]
 8006770:	f003 0310 	and.w	r3, r3, #16
 8006774:	2b10      	cmp	r3, #16
 8006776:	d107      	bne.n	8006788 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2210      	movs	r2, #16
 800677e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2204      	movs	r2, #4
 8006784:	645a      	str	r2, [r3, #68]	@ 0x44
 8006786:	e002      	b.n	800678e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2200      	movs	r2, #0
 800678c:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2220      	movs	r2, #32
 8006794:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	6859      	ldr	r1, [r3, #4]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	4b1f      	ldr	r3, [pc, #124]	@ (8006820 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80067a2:	400b      	ands	r3, r1
 80067a4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2220      	movs	r2, #32
 80067aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e029      	b.n	8006816 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067c2:	f7fb fab1 	bl	8001d28 <HAL_GetTick>
 80067c6:	4602      	mov	r2, r0
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	68ba      	ldr	r2, [r7, #8]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d302      	bcc.n	80067d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d116      	bne.n	8006806 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	699b      	ldr	r3, [r3, #24]
 80067de:	f003 0304 	and.w	r3, r3, #4
 80067e2:	2b04      	cmp	r3, #4
 80067e4:	d00f      	beq.n	8006806 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067ea:	f043 0220 	orr.w	r2, r3, #32
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2220      	movs	r2, #32
 80067f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e007      	b.n	8006816 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	f003 0304 	and.w	r3, r3, #4
 8006810:	2b04      	cmp	r3, #4
 8006812:	d18c      	bne.n	800672e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	3710      	adds	r7, #16
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	fe00e800 	.word	0xfe00e800

08006824 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b08a      	sub	sp, #40	@ 0x28
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006830:	2300      	movs	r3, #0
 8006832:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	699b      	ldr	r3, [r3, #24]
 800683c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800683e:	2300      	movs	r3, #0
 8006840:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	f003 0310 	and.w	r3, r3, #16
 800684c:	2b00      	cmp	r3, #0
 800684e:	d068      	beq.n	8006922 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2210      	movs	r2, #16
 8006856:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006858:	e049      	b.n	80068ee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006860:	d045      	beq.n	80068ee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006862:	f7fb fa61 	bl	8001d28 <HAL_GetTick>
 8006866:	4602      	mov	r2, r0
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	68ba      	ldr	r2, [r7, #8]
 800686e:	429a      	cmp	r2, r3
 8006870:	d302      	bcc.n	8006878 <I2C_IsErrorOccurred+0x54>
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d13a      	bne.n	80068ee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006882:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800688a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006896:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800689a:	d121      	bne.n	80068e0 <I2C_IsErrorOccurred+0xbc>
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80068a2:	d01d      	beq.n	80068e0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80068a4:	7cfb      	ldrb	r3, [r7, #19]
 80068a6:	2b20      	cmp	r3, #32
 80068a8:	d01a      	beq.n	80068e0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	685a      	ldr	r2, [r3, #4]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80068b8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80068ba:	f7fb fa35 	bl	8001d28 <HAL_GetTick>
 80068be:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068c0:	e00e      	b.n	80068e0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80068c2:	f7fb fa31 	bl	8001d28 <HAL_GetTick>
 80068c6:	4602      	mov	r2, r0
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	1ad3      	subs	r3, r2, r3
 80068cc:	2b19      	cmp	r3, #25
 80068ce:	d907      	bls.n	80068e0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80068d0:	6a3b      	ldr	r3, [r7, #32]
 80068d2:	f043 0320 	orr.w	r3, r3, #32
 80068d6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80068de:	e006      	b.n	80068ee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	f003 0320 	and.w	r3, r3, #32
 80068ea:	2b20      	cmp	r3, #32
 80068ec:	d1e9      	bne.n	80068c2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	699b      	ldr	r3, [r3, #24]
 80068f4:	f003 0320 	and.w	r3, r3, #32
 80068f8:	2b20      	cmp	r3, #32
 80068fa:	d003      	beq.n	8006904 <I2C_IsErrorOccurred+0xe0>
 80068fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006900:	2b00      	cmp	r3, #0
 8006902:	d0aa      	beq.n	800685a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006904:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006908:	2b00      	cmp	r3, #0
 800690a:	d103      	bne.n	8006914 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2220      	movs	r2, #32
 8006912:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006914:	6a3b      	ldr	r3, [r7, #32]
 8006916:	f043 0304 	orr.w	r3, r3, #4
 800691a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	699b      	ldr	r3, [r3, #24]
 8006928:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006930:	2b00      	cmp	r3, #0
 8006932:	d00b      	beq.n	800694c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006934:	6a3b      	ldr	r3, [r7, #32]
 8006936:	f043 0301 	orr.w	r3, r3, #1
 800693a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006944:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800694c:	69bb      	ldr	r3, [r7, #24]
 800694e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006952:	2b00      	cmp	r3, #0
 8006954:	d00b      	beq.n	800696e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006956:	6a3b      	ldr	r3, [r7, #32]
 8006958:	f043 0308 	orr.w	r3, r3, #8
 800695c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006966:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00b      	beq.n	8006990 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006978:	6a3b      	ldr	r3, [r7, #32]
 800697a:	f043 0302 	orr.w	r3, r3, #2
 800697e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006988:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006990:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006994:	2b00      	cmp	r3, #0
 8006996:	d01c      	beq.n	80069d2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	f7ff fdc3 	bl	8006524 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	6859      	ldr	r1, [r3, #4]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	4b0d      	ldr	r3, [pc, #52]	@ (80069e0 <I2C_IsErrorOccurred+0x1bc>)
 80069aa:	400b      	ands	r3, r1
 80069ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069b2:	6a3b      	ldr	r3, [r7, #32]
 80069b4:	431a      	orrs	r2, r3
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2220      	movs	r2, #32
 80069be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80069d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3728      	adds	r7, #40	@ 0x28
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	fe00e800 	.word	0xfe00e800

080069e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b087      	sub	sp, #28
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	607b      	str	r3, [r7, #4]
 80069ee:	460b      	mov	r3, r1
 80069f0:	817b      	strh	r3, [r7, #10]
 80069f2:	4613      	mov	r3, r2
 80069f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80069f6:	897b      	ldrh	r3, [r7, #10]
 80069f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80069fc:	7a7b      	ldrb	r3, [r7, #9]
 80069fe:	041b      	lsls	r3, r3, #16
 8006a00:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a04:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a0a:	6a3b      	ldr	r3, [r7, #32]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006a12:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	685a      	ldr	r2, [r3, #4]
 8006a1a:	6a3b      	ldr	r3, [r7, #32]
 8006a1c:	0d5b      	lsrs	r3, r3, #21
 8006a1e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006a22:	4b08      	ldr	r3, [pc, #32]	@ (8006a44 <I2C_TransferConfig+0x60>)
 8006a24:	430b      	orrs	r3, r1
 8006a26:	43db      	mvns	r3, r3
 8006a28:	ea02 0103 	and.w	r1, r2, r3
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	697a      	ldr	r2, [r7, #20]
 8006a32:	430a      	orrs	r2, r1
 8006a34:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006a36:	bf00      	nop
 8006a38:	371c      	adds	r7, #28
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop
 8006a44:	03ff63ff 	.word	0x03ff63ff

08006a48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	2b20      	cmp	r3, #32
 8006a5c:	d138      	bne.n	8006ad0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d101      	bne.n	8006a6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006a68:	2302      	movs	r3, #2
 8006a6a:	e032      	b.n	8006ad2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2224      	movs	r2, #36	@ 0x24
 8006a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f022 0201 	bic.w	r2, r2, #1
 8006a8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006a9a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	6819      	ldr	r1, [r3, #0]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	683a      	ldr	r2, [r7, #0]
 8006aa8:	430a      	orrs	r2, r1
 8006aaa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f042 0201 	orr.w	r2, r2, #1
 8006aba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2220      	movs	r2, #32
 8006ac0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006acc:	2300      	movs	r3, #0
 8006ace:	e000      	b.n	8006ad2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006ad0:	2302      	movs	r3, #2
  }
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	370c      	adds	r7, #12
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr

08006ade <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006ade:	b480      	push	{r7}
 8006ae0:	b085      	sub	sp, #20
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
 8006ae6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	2b20      	cmp	r3, #32
 8006af2:	d139      	bne.n	8006b68 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d101      	bne.n	8006b02 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006afe:	2302      	movs	r3, #2
 8006b00:	e033      	b.n	8006b6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2201      	movs	r2, #1
 8006b06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2224      	movs	r2, #36	@ 0x24
 8006b0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f022 0201 	bic.w	r2, r2, #1
 8006b20:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006b30:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	021b      	lsls	r3, r3, #8
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f042 0201 	orr.w	r2, r2, #1
 8006b52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2220      	movs	r2, #32
 8006b58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006b64:	2300      	movs	r3, #0
 8006b66:	e000      	b.n	8006b6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006b68:	2302      	movs	r3, #2
  }
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3714      	adds	r7, #20
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr
	...

08006b78 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b80:	4b0d      	ldr	r3, [pc, #52]	@ (8006bb8 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8006b82:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8006b86:	4a0c      	ldr	r2, [pc, #48]	@ (8006bb8 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8006b88:	f043 0302 	orr.w	r3, r3, #2
 8006b8c:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8006b90:	4b09      	ldr	r3, [pc, #36]	@ (8006bb8 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8006b92:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8006b96:	f003 0302 	and.w	r3, r3, #2
 8006b9a:	60fb      	str	r3, [r7, #12]
 8006b9c:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8006b9e:	4b07      	ldr	r3, [pc, #28]	@ (8006bbc <HAL_I2CEx_EnableFastModePlus+0x44>)
 8006ba0:	685a      	ldr	r2, [r3, #4]
 8006ba2:	4906      	ldr	r1, [pc, #24]	@ (8006bbc <HAL_I2CEx_EnableFastModePlus+0x44>)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	604b      	str	r3, [r1, #4]
}
 8006baa:	bf00      	nop
 8006bac:	3714      	adds	r7, #20
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr
 8006bb6:	bf00      	nop
 8006bb8:	58024400 	.word	0x58024400
 8006bbc:	58000400 	.word	0x58000400

08006bc0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006bc8:	4b29      	ldr	r3, [pc, #164]	@ (8006c70 <HAL_PWREx_ConfigSupply+0xb0>)
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	f003 0307 	and.w	r3, r3, #7
 8006bd0:	2b06      	cmp	r3, #6
 8006bd2:	d00a      	beq.n	8006bea <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006bd4:	4b26      	ldr	r3, [pc, #152]	@ (8006c70 <HAL_PWREx_ConfigSupply+0xb0>)
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d001      	beq.n	8006be6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	e040      	b.n	8006c68 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006be6:	2300      	movs	r3, #0
 8006be8:	e03e      	b.n	8006c68 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006bea:	4b21      	ldr	r3, [pc, #132]	@ (8006c70 <HAL_PWREx_ConfigSupply+0xb0>)
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8006bf2:	491f      	ldr	r1, [pc, #124]	@ (8006c70 <HAL_PWREx_ConfigSupply+0xb0>)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006bfa:	f7fb f895 	bl	8001d28 <HAL_GetTick>
 8006bfe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006c00:	e009      	b.n	8006c16 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006c02:	f7fb f891 	bl	8001d28 <HAL_GetTick>
 8006c06:	4602      	mov	r2, r0
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006c10:	d901      	bls.n	8006c16 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e028      	b.n	8006c68 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006c16:	4b16      	ldr	r3, [pc, #88]	@ (8006c70 <HAL_PWREx_ConfigSupply+0xb0>)
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c22:	d1ee      	bne.n	8006c02 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2b1e      	cmp	r3, #30
 8006c28:	d008      	beq.n	8006c3c <HAL_PWREx_ConfigSupply+0x7c>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c2e:	d005      	beq.n	8006c3c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2b1d      	cmp	r3, #29
 8006c34:	d002      	beq.n	8006c3c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2b2d      	cmp	r3, #45	@ 0x2d
 8006c3a:	d114      	bne.n	8006c66 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006c3c:	f7fb f874 	bl	8001d28 <HAL_GetTick>
 8006c40:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006c42:	e009      	b.n	8006c58 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006c44:	f7fb f870 	bl	8001d28 <HAL_GetTick>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006c52:	d901      	bls.n	8006c58 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	e007      	b.n	8006c68 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006c58:	4b05      	ldr	r3, [pc, #20]	@ (8006c70 <HAL_PWREx_ConfigSupply+0xb0>)
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c64:	d1ee      	bne.n	8006c44 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3710      	adds	r7, #16
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	58024800 	.word	0x58024800

08006c74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b08c      	sub	sp, #48	@ 0x30
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d102      	bne.n	8006c88 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	f000 bc1f 	b.w	80074c6 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 0301 	and.w	r3, r3, #1
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	f000 80b3 	beq.w	8006dfc <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c96:	4b95      	ldr	r3, [pc, #596]	@ (8006eec <HAL_RCC_OscConfig+0x278>)
 8006c98:	691b      	ldr	r3, [r3, #16]
 8006c9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006ca0:	4b92      	ldr	r3, [pc, #584]	@ (8006eec <HAL_RCC_OscConfig+0x278>)
 8006ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006ca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ca8:	2b10      	cmp	r3, #16
 8006caa:	d007      	beq.n	8006cbc <HAL_RCC_OscConfig+0x48>
 8006cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cae:	2b18      	cmp	r3, #24
 8006cb0:	d112      	bne.n	8006cd8 <HAL_RCC_OscConfig+0x64>
 8006cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb4:	f003 0303 	and.w	r3, r3, #3
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	d10d      	bne.n	8006cd8 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cbc:	4b8b      	ldr	r3, [pc, #556]	@ (8006eec <HAL_RCC_OscConfig+0x278>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	f000 8098 	beq.w	8006dfa <HAL_RCC_OscConfig+0x186>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f040 8093 	bne.w	8006dfa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e3f6      	b.n	80074c6 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ce0:	d106      	bne.n	8006cf0 <HAL_RCC_OscConfig+0x7c>
 8006ce2:	4b82      	ldr	r3, [pc, #520]	@ (8006eec <HAL_RCC_OscConfig+0x278>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a81      	ldr	r2, [pc, #516]	@ (8006eec <HAL_RCC_OscConfig+0x278>)
 8006ce8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cec:	6013      	str	r3, [r2, #0]
 8006cee:	e058      	b.n	8006da2 <HAL_RCC_OscConfig+0x12e>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d112      	bne.n	8006d1e <HAL_RCC_OscConfig+0xaa>
 8006cf8:	4b7c      	ldr	r3, [pc, #496]	@ (8006eec <HAL_RCC_OscConfig+0x278>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a7b      	ldr	r2, [pc, #492]	@ (8006eec <HAL_RCC_OscConfig+0x278>)
 8006cfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d02:	6013      	str	r3, [r2, #0]
 8006d04:	4b79      	ldr	r3, [pc, #484]	@ (8006eec <HAL_RCC_OscConfig+0x278>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a78      	ldr	r2, [pc, #480]	@ (8006eec <HAL_RCC_OscConfig+0x278>)
 8006d0a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006d0e:	6013      	str	r3, [r2, #0]
 8006d10:	4b76      	ldr	r3, [pc, #472]	@ (8006eec <HAL_RCC_OscConfig+0x278>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a75      	ldr	r2, [pc, #468]	@ (8006eec <HAL_RCC_OscConfig+0x278>)
 8006d16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006d1a:	6013      	str	r3, [r2, #0]
 8006d1c:	e041      	b.n	8006da2 <HAL_RCC_OscConfig+0x12e>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006d26:	d112      	bne.n	8006d4e <HAL_RCC_OscConfig+0xda>
 8006d28:	4b70      	ldr	r3, [pc, #448]	@ (8006eec <HAL_RCC_OscConfig+0x278>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a6f      	ldr	r2, [pc, #444]	@ (8006eec <HAL_RCC_OscConfig+0x278>)
 8006d2e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006d32:	6013      	str	r3, [r2, #0]
 8006d34:	4b6d      	ldr	r3, [pc, #436]	@ (8006eec <HAL_RCC_OscConfig+0x278>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a6c      	ldr	r2, [pc, #432]	@ (8006eec <HAL_RCC_OscConfig+0x278>)
 8006d3a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006d3e:	6013      	str	r3, [r2, #0]
 8006d40:	4b6a      	ldr	r3, [pc, #424]	@ (8006eec <HAL_RCC_OscConfig+0x278>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a69      	ldr	r2, [pc, #420]	@ (8006eec <HAL_RCC_OscConfig+0x278>)
 8006d46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d4a:	6013      	str	r3, [r2, #0]
 8006d4c:	e029      	b.n	8006da2 <HAL_RCC_OscConfig+0x12e>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8006d56:	d112      	bne.n	8006d7e <HAL_RCC_OscConfig+0x10a>
 8006d58:	4b64      	ldr	r3, [pc, #400]	@ (8006eec <HAL_RCC_OscConfig+0x278>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a63      	ldr	r2, [pc, #396]	@ (8006eec <HAL_RCC_OscConfig+0x278>)
 8006d5e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006d62:	6013      	str	r3, [r2, #0]
 8006d64:	4b61      	ldr	r3, [pc, #388]	@ (8006eec <HAL_RCC_OscConfig+0x278>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a60      	ldr	r2, [pc, #384]	@ (8006eec <HAL_RCC_OscConfig+0x278>)
 8006d6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d6e:	6013      	str	r3, [r2, #0]
 8006d70:	4b5e      	ldr	r3, [pc, #376]	@ (8006eec <HAL_RCC_OscConfig+0x278>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a5d      	ldr	r2, [pc, #372]	@ (8006eec <HAL_RCC_OscConfig+0x278>)
 8006d76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d7a:	6013      	str	r3, [r2, #0]
 8006d7c:	e011      	b.n	8006da2 <HAL_RCC_OscConfig+0x12e>
 8006d7e:	4b5b      	ldr	r3, [pc, #364]	@ (8006eec <HAL_RCC_OscConfig+0x278>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a5a      	ldr	r2, [pc, #360]	@ (8006eec <HAL_RCC_OscConfig+0x278>)
 8006d84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d88:	6013      	str	r3, [r2, #0]
 8006d8a:	4b58      	ldr	r3, [pc, #352]	@ (8006eec <HAL_RCC_OscConfig+0x278>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a57      	ldr	r2, [pc, #348]	@ (8006eec <HAL_RCC_OscConfig+0x278>)
 8006d90:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006d94:	6013      	str	r3, [r2, #0]
 8006d96:	4b55      	ldr	r3, [pc, #340]	@ (8006eec <HAL_RCC_OscConfig+0x278>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a54      	ldr	r2, [pc, #336]	@ (8006eec <HAL_RCC_OscConfig+0x278>)
 8006d9c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006da0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d013      	beq.n	8006dd2 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006daa:	f7fa ffbd 	bl	8001d28 <HAL_GetTick>
 8006dae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006db0:	e008      	b.n	8006dc4 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006db2:	f7fa ffb9 	bl	8001d28 <HAL_GetTick>
 8006db6:	4602      	mov	r2, r0
 8006db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dba:	1ad3      	subs	r3, r2, r3
 8006dbc:	2b64      	cmp	r3, #100	@ 0x64
 8006dbe:	d901      	bls.n	8006dc4 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	e380      	b.n	80074c6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006dc4:	4b49      	ldr	r3, [pc, #292]	@ (8006eec <HAL_RCC_OscConfig+0x278>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d0f0      	beq.n	8006db2 <HAL_RCC_OscConfig+0x13e>
 8006dd0:	e014      	b.n	8006dfc <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dd2:	f7fa ffa9 	bl	8001d28 <HAL_GetTick>
 8006dd6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006dd8:	e008      	b.n	8006dec <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006dda:	f7fa ffa5 	bl	8001d28 <HAL_GetTick>
 8006dde:	4602      	mov	r2, r0
 8006de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de2:	1ad3      	subs	r3, r2, r3
 8006de4:	2b64      	cmp	r3, #100	@ 0x64
 8006de6:	d901      	bls.n	8006dec <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8006de8:	2303      	movs	r3, #3
 8006dea:	e36c      	b.n	80074c6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006dec:	4b3f      	ldr	r3, [pc, #252]	@ (8006eec <HAL_RCC_OscConfig+0x278>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d1f0      	bne.n	8006dda <HAL_RCC_OscConfig+0x166>
 8006df8:	e000      	b.n	8006dfc <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dfa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 0302 	and.w	r3, r3, #2
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	f000 808c 	beq.w	8006f22 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e0a:	4b38      	ldr	r3, [pc, #224]	@ (8006eec <HAL_RCC_OscConfig+0x278>)
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e12:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006e14:	4b35      	ldr	r3, [pc, #212]	@ (8006eec <HAL_RCC_OscConfig+0x278>)
 8006e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e18:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006e1a:	6a3b      	ldr	r3, [r7, #32]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d007      	beq.n	8006e30 <HAL_RCC_OscConfig+0x1bc>
 8006e20:	6a3b      	ldr	r3, [r7, #32]
 8006e22:	2b18      	cmp	r3, #24
 8006e24:	d137      	bne.n	8006e96 <HAL_RCC_OscConfig+0x222>
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	f003 0303 	and.w	r3, r3, #3
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d132      	bne.n	8006e96 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e30:	4b2e      	ldr	r3, [pc, #184]	@ (8006eec <HAL_RCC_OscConfig+0x278>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 0304 	and.w	r3, r3, #4
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d005      	beq.n	8006e48 <HAL_RCC_OscConfig+0x1d4>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d101      	bne.n	8006e48 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	e33e      	b.n	80074c6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006e48:	4b28      	ldr	r3, [pc, #160]	@ (8006eec <HAL_RCC_OscConfig+0x278>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f023 0219 	bic.w	r2, r3, #25
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	4925      	ldr	r1, [pc, #148]	@ (8006eec <HAL_RCC_OscConfig+0x278>)
 8006e56:	4313      	orrs	r3, r2
 8006e58:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e5a:	f7fa ff65 	bl	8001d28 <HAL_GetTick>
 8006e5e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e60:	e008      	b.n	8006e74 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e62:	f7fa ff61 	bl	8001d28 <HAL_GetTick>
 8006e66:	4602      	mov	r2, r0
 8006e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e6a:	1ad3      	subs	r3, r2, r3
 8006e6c:	2b02      	cmp	r3, #2
 8006e6e:	d901      	bls.n	8006e74 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8006e70:	2303      	movs	r3, #3
 8006e72:	e328      	b.n	80074c6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e74:	4b1d      	ldr	r3, [pc, #116]	@ (8006eec <HAL_RCC_OscConfig+0x278>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 0304 	and.w	r3, r3, #4
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d0f0      	beq.n	8006e62 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e80:	4b1a      	ldr	r3, [pc, #104]	@ (8006eec <HAL_RCC_OscConfig+0x278>)
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	061b      	lsls	r3, r3, #24
 8006e8e:	4917      	ldr	r1, [pc, #92]	@ (8006eec <HAL_RCC_OscConfig+0x278>)
 8006e90:	4313      	orrs	r3, r2
 8006e92:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e94:	e045      	b.n	8006f22 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d028      	beq.n	8006ef0 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006e9e:	4b13      	ldr	r3, [pc, #76]	@ (8006eec <HAL_RCC_OscConfig+0x278>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f023 0219 	bic.w	r2, r3, #25
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	4910      	ldr	r1, [pc, #64]	@ (8006eec <HAL_RCC_OscConfig+0x278>)
 8006eac:	4313      	orrs	r3, r2
 8006eae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eb0:	f7fa ff3a 	bl	8001d28 <HAL_GetTick>
 8006eb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006eb6:	e008      	b.n	8006eca <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006eb8:	f7fa ff36 	bl	8001d28 <HAL_GetTick>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	d901      	bls.n	8006eca <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	e2fd      	b.n	80074c6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006eca:	4b08      	ldr	r3, [pc, #32]	@ (8006eec <HAL_RCC_OscConfig+0x278>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 0304 	and.w	r3, r3, #4
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d0f0      	beq.n	8006eb8 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ed6:	4b05      	ldr	r3, [pc, #20]	@ (8006eec <HAL_RCC_OscConfig+0x278>)
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	061b      	lsls	r3, r3, #24
 8006ee4:	4901      	ldr	r1, [pc, #4]	@ (8006eec <HAL_RCC_OscConfig+0x278>)
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	604b      	str	r3, [r1, #4]
 8006eea:	e01a      	b.n	8006f22 <HAL_RCC_OscConfig+0x2ae>
 8006eec:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ef0:	4b97      	ldr	r3, [pc, #604]	@ (8007150 <HAL_RCC_OscConfig+0x4dc>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a96      	ldr	r2, [pc, #600]	@ (8007150 <HAL_RCC_OscConfig+0x4dc>)
 8006ef6:	f023 0301 	bic.w	r3, r3, #1
 8006efa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006efc:	f7fa ff14 	bl	8001d28 <HAL_GetTick>
 8006f00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006f02:	e008      	b.n	8006f16 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f04:	f7fa ff10 	bl	8001d28 <HAL_GetTick>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f0c:	1ad3      	subs	r3, r2, r3
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	d901      	bls.n	8006f16 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8006f12:	2303      	movs	r3, #3
 8006f14:	e2d7      	b.n	80074c6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006f16:	4b8e      	ldr	r3, [pc, #568]	@ (8007150 <HAL_RCC_OscConfig+0x4dc>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 0304 	and.w	r3, r3, #4
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1f0      	bne.n	8006f04 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f003 0310 	and.w	r3, r3, #16
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d06a      	beq.n	8007004 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f2e:	4b88      	ldr	r3, [pc, #544]	@ (8007150 <HAL_RCC_OscConfig+0x4dc>)
 8006f30:	691b      	ldr	r3, [r3, #16]
 8006f32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f36:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006f38:	4b85      	ldr	r3, [pc, #532]	@ (8007150 <HAL_RCC_OscConfig+0x4dc>)
 8006f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f3c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006f3e:	69bb      	ldr	r3, [r7, #24]
 8006f40:	2b08      	cmp	r3, #8
 8006f42:	d007      	beq.n	8006f54 <HAL_RCC_OscConfig+0x2e0>
 8006f44:	69bb      	ldr	r3, [r7, #24]
 8006f46:	2b18      	cmp	r3, #24
 8006f48:	d11b      	bne.n	8006f82 <HAL_RCC_OscConfig+0x30e>
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	f003 0303 	and.w	r3, r3, #3
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d116      	bne.n	8006f82 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006f54:	4b7e      	ldr	r3, [pc, #504]	@ (8007150 <HAL_RCC_OscConfig+0x4dc>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d005      	beq.n	8006f6c <HAL_RCC_OscConfig+0x2f8>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	69db      	ldr	r3, [r3, #28]
 8006f64:	2b80      	cmp	r3, #128	@ 0x80
 8006f66:	d001      	beq.n	8006f6c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e2ac      	b.n	80074c6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006f6c:	4b78      	ldr	r3, [pc, #480]	@ (8007150 <HAL_RCC_OscConfig+0x4dc>)
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6a1b      	ldr	r3, [r3, #32]
 8006f78:	061b      	lsls	r3, r3, #24
 8006f7a:	4975      	ldr	r1, [pc, #468]	@ (8007150 <HAL_RCC_OscConfig+0x4dc>)
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006f80:	e040      	b.n	8007004 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	69db      	ldr	r3, [r3, #28]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d023      	beq.n	8006fd2 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006f8a:	4b71      	ldr	r3, [pc, #452]	@ (8007150 <HAL_RCC_OscConfig+0x4dc>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a70      	ldr	r2, [pc, #448]	@ (8007150 <HAL_RCC_OscConfig+0x4dc>)
 8006f90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f96:	f7fa fec7 	bl	8001d28 <HAL_GetTick>
 8006f9a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006f9c:	e008      	b.n	8006fb0 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006f9e:	f7fa fec3 	bl	8001d28 <HAL_GetTick>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa6:	1ad3      	subs	r3, r2, r3
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	d901      	bls.n	8006fb0 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8006fac:	2303      	movs	r3, #3
 8006fae:	e28a      	b.n	80074c6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006fb0:	4b67      	ldr	r3, [pc, #412]	@ (8007150 <HAL_RCC_OscConfig+0x4dc>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d0f0      	beq.n	8006f9e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006fbc:	4b64      	ldr	r3, [pc, #400]	@ (8007150 <HAL_RCC_OscConfig+0x4dc>)
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6a1b      	ldr	r3, [r3, #32]
 8006fc8:	061b      	lsls	r3, r3, #24
 8006fca:	4961      	ldr	r1, [pc, #388]	@ (8007150 <HAL_RCC_OscConfig+0x4dc>)
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	60cb      	str	r3, [r1, #12]
 8006fd0:	e018      	b.n	8007004 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006fd2:	4b5f      	ldr	r3, [pc, #380]	@ (8007150 <HAL_RCC_OscConfig+0x4dc>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a5e      	ldr	r2, [pc, #376]	@ (8007150 <HAL_RCC_OscConfig+0x4dc>)
 8006fd8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006fdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fde:	f7fa fea3 	bl	8001d28 <HAL_GetTick>
 8006fe2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006fe4:	e008      	b.n	8006ff8 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006fe6:	f7fa fe9f 	bl	8001d28 <HAL_GetTick>
 8006fea:	4602      	mov	r2, r0
 8006fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fee:	1ad3      	subs	r3, r2, r3
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	d901      	bls.n	8006ff8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	e266      	b.n	80074c6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006ff8:	4b55      	ldr	r3, [pc, #340]	@ (8007150 <HAL_RCC_OscConfig+0x4dc>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007000:	2b00      	cmp	r3, #0
 8007002:	d1f0      	bne.n	8006fe6 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 0308 	and.w	r3, r3, #8
 800700c:	2b00      	cmp	r3, #0
 800700e:	d036      	beq.n	800707e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	695b      	ldr	r3, [r3, #20]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d019      	beq.n	800704c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007018:	4b4d      	ldr	r3, [pc, #308]	@ (8007150 <HAL_RCC_OscConfig+0x4dc>)
 800701a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800701c:	4a4c      	ldr	r2, [pc, #304]	@ (8007150 <HAL_RCC_OscConfig+0x4dc>)
 800701e:	f043 0301 	orr.w	r3, r3, #1
 8007022:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007024:	f7fa fe80 	bl	8001d28 <HAL_GetTick>
 8007028:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800702a:	e008      	b.n	800703e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800702c:	f7fa fe7c 	bl	8001d28 <HAL_GetTick>
 8007030:	4602      	mov	r2, r0
 8007032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	2b02      	cmp	r3, #2
 8007038:	d901      	bls.n	800703e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800703a:	2303      	movs	r3, #3
 800703c:	e243      	b.n	80074c6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800703e:	4b44      	ldr	r3, [pc, #272]	@ (8007150 <HAL_RCC_OscConfig+0x4dc>)
 8007040:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007042:	f003 0302 	and.w	r3, r3, #2
 8007046:	2b00      	cmp	r3, #0
 8007048:	d0f0      	beq.n	800702c <HAL_RCC_OscConfig+0x3b8>
 800704a:	e018      	b.n	800707e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800704c:	4b40      	ldr	r3, [pc, #256]	@ (8007150 <HAL_RCC_OscConfig+0x4dc>)
 800704e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007050:	4a3f      	ldr	r2, [pc, #252]	@ (8007150 <HAL_RCC_OscConfig+0x4dc>)
 8007052:	f023 0301 	bic.w	r3, r3, #1
 8007056:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007058:	f7fa fe66 	bl	8001d28 <HAL_GetTick>
 800705c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800705e:	e008      	b.n	8007072 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007060:	f7fa fe62 	bl	8001d28 <HAL_GetTick>
 8007064:	4602      	mov	r2, r0
 8007066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	2b02      	cmp	r3, #2
 800706c:	d901      	bls.n	8007072 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800706e:	2303      	movs	r3, #3
 8007070:	e229      	b.n	80074c6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007072:	4b37      	ldr	r3, [pc, #220]	@ (8007150 <HAL_RCC_OscConfig+0x4dc>)
 8007074:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007076:	f003 0302 	and.w	r3, r3, #2
 800707a:	2b00      	cmp	r3, #0
 800707c:	d1f0      	bne.n	8007060 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 0320 	and.w	r3, r3, #32
 8007086:	2b00      	cmp	r3, #0
 8007088:	d036      	beq.n	80070f8 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	699b      	ldr	r3, [r3, #24]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d019      	beq.n	80070c6 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007092:	4b2f      	ldr	r3, [pc, #188]	@ (8007150 <HAL_RCC_OscConfig+0x4dc>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a2e      	ldr	r2, [pc, #184]	@ (8007150 <HAL_RCC_OscConfig+0x4dc>)
 8007098:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800709c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800709e:	f7fa fe43 	bl	8001d28 <HAL_GetTick>
 80070a2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80070a4:	e008      	b.n	80070b8 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80070a6:	f7fa fe3f 	bl	8001d28 <HAL_GetTick>
 80070aa:	4602      	mov	r2, r0
 80070ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ae:	1ad3      	subs	r3, r2, r3
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	d901      	bls.n	80070b8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80070b4:	2303      	movs	r3, #3
 80070b6:	e206      	b.n	80074c6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80070b8:	4b25      	ldr	r3, [pc, #148]	@ (8007150 <HAL_RCC_OscConfig+0x4dc>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d0f0      	beq.n	80070a6 <HAL_RCC_OscConfig+0x432>
 80070c4:	e018      	b.n	80070f8 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80070c6:	4b22      	ldr	r3, [pc, #136]	@ (8007150 <HAL_RCC_OscConfig+0x4dc>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a21      	ldr	r2, [pc, #132]	@ (8007150 <HAL_RCC_OscConfig+0x4dc>)
 80070cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80070d0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80070d2:	f7fa fe29 	bl	8001d28 <HAL_GetTick>
 80070d6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80070d8:	e008      	b.n	80070ec <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80070da:	f7fa fe25 	bl	8001d28 <HAL_GetTick>
 80070de:	4602      	mov	r2, r0
 80070e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070e2:	1ad3      	subs	r3, r2, r3
 80070e4:	2b02      	cmp	r3, #2
 80070e6:	d901      	bls.n	80070ec <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80070e8:	2303      	movs	r3, #3
 80070ea:	e1ec      	b.n	80074c6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80070ec:	4b18      	ldr	r3, [pc, #96]	@ (8007150 <HAL_RCC_OscConfig+0x4dc>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d1f0      	bne.n	80070da <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 0304 	and.w	r3, r3, #4
 8007100:	2b00      	cmp	r3, #0
 8007102:	f000 80af 	beq.w	8007264 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007106:	4b13      	ldr	r3, [pc, #76]	@ (8007154 <HAL_RCC_OscConfig+0x4e0>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a12      	ldr	r2, [pc, #72]	@ (8007154 <HAL_RCC_OscConfig+0x4e0>)
 800710c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007110:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007112:	f7fa fe09 	bl	8001d28 <HAL_GetTick>
 8007116:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007118:	e008      	b.n	800712c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800711a:	f7fa fe05 	bl	8001d28 <HAL_GetTick>
 800711e:	4602      	mov	r2, r0
 8007120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007122:	1ad3      	subs	r3, r2, r3
 8007124:	2b64      	cmp	r3, #100	@ 0x64
 8007126:	d901      	bls.n	800712c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8007128:	2303      	movs	r3, #3
 800712a:	e1cc      	b.n	80074c6 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800712c:	4b09      	ldr	r3, [pc, #36]	@ (8007154 <HAL_RCC_OscConfig+0x4e0>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007134:	2b00      	cmp	r3, #0
 8007136:	d0f0      	beq.n	800711a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	2b01      	cmp	r3, #1
 800713e:	d10b      	bne.n	8007158 <HAL_RCC_OscConfig+0x4e4>
 8007140:	4b03      	ldr	r3, [pc, #12]	@ (8007150 <HAL_RCC_OscConfig+0x4dc>)
 8007142:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007144:	4a02      	ldr	r2, [pc, #8]	@ (8007150 <HAL_RCC_OscConfig+0x4dc>)
 8007146:	f043 0301 	orr.w	r3, r3, #1
 800714a:	6713      	str	r3, [r2, #112]	@ 0x70
 800714c:	e05b      	b.n	8007206 <HAL_RCC_OscConfig+0x592>
 800714e:	bf00      	nop
 8007150:	58024400 	.word	0x58024400
 8007154:	58024800 	.word	0x58024800
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d112      	bne.n	8007186 <HAL_RCC_OscConfig+0x512>
 8007160:	4b9d      	ldr	r3, [pc, #628]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 8007162:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007164:	4a9c      	ldr	r2, [pc, #624]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 8007166:	f023 0301 	bic.w	r3, r3, #1
 800716a:	6713      	str	r3, [r2, #112]	@ 0x70
 800716c:	4b9a      	ldr	r3, [pc, #616]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 800716e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007170:	4a99      	ldr	r2, [pc, #612]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 8007172:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007176:	6713      	str	r3, [r2, #112]	@ 0x70
 8007178:	4b97      	ldr	r3, [pc, #604]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 800717a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800717c:	4a96      	ldr	r2, [pc, #600]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 800717e:	f023 0304 	bic.w	r3, r3, #4
 8007182:	6713      	str	r3, [r2, #112]	@ 0x70
 8007184:	e03f      	b.n	8007206 <HAL_RCC_OscConfig+0x592>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	2b05      	cmp	r3, #5
 800718c:	d112      	bne.n	80071b4 <HAL_RCC_OscConfig+0x540>
 800718e:	4b92      	ldr	r3, [pc, #584]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 8007190:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007192:	4a91      	ldr	r2, [pc, #580]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 8007194:	f043 0304 	orr.w	r3, r3, #4
 8007198:	6713      	str	r3, [r2, #112]	@ 0x70
 800719a:	4b8f      	ldr	r3, [pc, #572]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 800719c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800719e:	4a8e      	ldr	r2, [pc, #568]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 80071a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80071a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80071a6:	4b8c      	ldr	r3, [pc, #560]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 80071a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071aa:	4a8b      	ldr	r2, [pc, #556]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 80071ac:	f043 0301 	orr.w	r3, r3, #1
 80071b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80071b2:	e028      	b.n	8007206 <HAL_RCC_OscConfig+0x592>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	2b85      	cmp	r3, #133	@ 0x85
 80071ba:	d112      	bne.n	80071e2 <HAL_RCC_OscConfig+0x56e>
 80071bc:	4b86      	ldr	r3, [pc, #536]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 80071be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071c0:	4a85      	ldr	r2, [pc, #532]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 80071c2:	f043 0304 	orr.w	r3, r3, #4
 80071c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80071c8:	4b83      	ldr	r3, [pc, #524]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 80071ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071cc:	4a82      	ldr	r2, [pc, #520]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 80071ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80071d4:	4b80      	ldr	r3, [pc, #512]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 80071d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071d8:	4a7f      	ldr	r2, [pc, #508]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 80071da:	f043 0301 	orr.w	r3, r3, #1
 80071de:	6713      	str	r3, [r2, #112]	@ 0x70
 80071e0:	e011      	b.n	8007206 <HAL_RCC_OscConfig+0x592>
 80071e2:	4b7d      	ldr	r3, [pc, #500]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 80071e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071e6:	4a7c      	ldr	r2, [pc, #496]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 80071e8:	f023 0301 	bic.w	r3, r3, #1
 80071ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80071ee:	4b7a      	ldr	r3, [pc, #488]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 80071f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071f2:	4a79      	ldr	r2, [pc, #484]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 80071f4:	f023 0304 	bic.w	r3, r3, #4
 80071f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80071fa:	4b77      	ldr	r3, [pc, #476]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 80071fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071fe:	4a76      	ldr	r2, [pc, #472]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 8007200:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007204:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d015      	beq.n	800723a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800720e:	f7fa fd8b 	bl	8001d28 <HAL_GetTick>
 8007212:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007214:	e00a      	b.n	800722c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007216:	f7fa fd87 	bl	8001d28 <HAL_GetTick>
 800721a:	4602      	mov	r2, r0
 800721c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800721e:	1ad3      	subs	r3, r2, r3
 8007220:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007224:	4293      	cmp	r3, r2
 8007226:	d901      	bls.n	800722c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8007228:	2303      	movs	r3, #3
 800722a:	e14c      	b.n	80074c6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800722c:	4b6a      	ldr	r3, [pc, #424]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 800722e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007230:	f003 0302 	and.w	r3, r3, #2
 8007234:	2b00      	cmp	r3, #0
 8007236:	d0ee      	beq.n	8007216 <HAL_RCC_OscConfig+0x5a2>
 8007238:	e014      	b.n	8007264 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800723a:	f7fa fd75 	bl	8001d28 <HAL_GetTick>
 800723e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007240:	e00a      	b.n	8007258 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007242:	f7fa fd71 	bl	8001d28 <HAL_GetTick>
 8007246:	4602      	mov	r2, r0
 8007248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800724a:	1ad3      	subs	r3, r2, r3
 800724c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007250:	4293      	cmp	r3, r2
 8007252:	d901      	bls.n	8007258 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8007254:	2303      	movs	r3, #3
 8007256:	e136      	b.n	80074c6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007258:	4b5f      	ldr	r3, [pc, #380]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 800725a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800725c:	f003 0302 	and.w	r3, r3, #2
 8007260:	2b00      	cmp	r3, #0
 8007262:	d1ee      	bne.n	8007242 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007268:	2b00      	cmp	r3, #0
 800726a:	f000 812b 	beq.w	80074c4 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800726e:	4b5a      	ldr	r3, [pc, #360]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 8007270:	691b      	ldr	r3, [r3, #16]
 8007272:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007276:	2b18      	cmp	r3, #24
 8007278:	f000 80bb 	beq.w	80073f2 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007280:	2b02      	cmp	r3, #2
 8007282:	f040 8095 	bne.w	80073b0 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007286:	4b54      	ldr	r3, [pc, #336]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a53      	ldr	r2, [pc, #332]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 800728c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007290:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007292:	f7fa fd49 	bl	8001d28 <HAL_GetTick>
 8007296:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007298:	e008      	b.n	80072ac <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800729a:	f7fa fd45 	bl	8001d28 <HAL_GetTick>
 800729e:	4602      	mov	r2, r0
 80072a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a2:	1ad3      	subs	r3, r2, r3
 80072a4:	2b02      	cmp	r3, #2
 80072a6:	d901      	bls.n	80072ac <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80072a8:	2303      	movs	r3, #3
 80072aa:	e10c      	b.n	80074c6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80072ac:	4b4a      	ldr	r3, [pc, #296]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d1f0      	bne.n	800729a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80072b8:	4b47      	ldr	r3, [pc, #284]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 80072ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80072bc:	4b47      	ldr	r3, [pc, #284]	@ (80073dc <HAL_RCC_OscConfig+0x768>)
 80072be:	4013      	ands	r3, r2
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80072c8:	0112      	lsls	r2, r2, #4
 80072ca:	430a      	orrs	r2, r1
 80072cc:	4942      	ldr	r1, [pc, #264]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 80072ce:	4313      	orrs	r3, r2
 80072d0:	628b      	str	r3, [r1, #40]	@ 0x28
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072d6:	3b01      	subs	r3, #1
 80072d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072e0:	3b01      	subs	r3, #1
 80072e2:	025b      	lsls	r3, r3, #9
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	431a      	orrs	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ec:	3b01      	subs	r3, #1
 80072ee:	041b      	lsls	r3, r3, #16
 80072f0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80072f4:	431a      	orrs	r2, r3
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072fa:	3b01      	subs	r3, #1
 80072fc:	061b      	lsls	r3, r3, #24
 80072fe:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007302:	4935      	ldr	r1, [pc, #212]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 8007304:	4313      	orrs	r3, r2
 8007306:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007308:	4b33      	ldr	r3, [pc, #204]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 800730a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800730c:	4a32      	ldr	r2, [pc, #200]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 800730e:	f023 0301 	bic.w	r3, r3, #1
 8007312:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007314:	4b30      	ldr	r3, [pc, #192]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 8007316:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007318:	4b31      	ldr	r3, [pc, #196]	@ (80073e0 <HAL_RCC_OscConfig+0x76c>)
 800731a:	4013      	ands	r3, r2
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007320:	00d2      	lsls	r2, r2, #3
 8007322:	492d      	ldr	r1, [pc, #180]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 8007324:	4313      	orrs	r3, r2
 8007326:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007328:	4b2b      	ldr	r3, [pc, #172]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 800732a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800732c:	f023 020c 	bic.w	r2, r3, #12
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007334:	4928      	ldr	r1, [pc, #160]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 8007336:	4313      	orrs	r3, r2
 8007338:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800733a:	4b27      	ldr	r3, [pc, #156]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 800733c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800733e:	f023 0202 	bic.w	r2, r3, #2
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007346:	4924      	ldr	r1, [pc, #144]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 8007348:	4313      	orrs	r3, r2
 800734a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800734c:	4b22      	ldr	r3, [pc, #136]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 800734e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007350:	4a21      	ldr	r2, [pc, #132]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 8007352:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007356:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007358:	4b1f      	ldr	r3, [pc, #124]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 800735a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800735c:	4a1e      	ldr	r2, [pc, #120]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 800735e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007362:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007364:	4b1c      	ldr	r3, [pc, #112]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 8007366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007368:	4a1b      	ldr	r2, [pc, #108]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 800736a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800736e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007370:	4b19      	ldr	r3, [pc, #100]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 8007372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007374:	4a18      	ldr	r2, [pc, #96]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 8007376:	f043 0301 	orr.w	r3, r3, #1
 800737a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800737c:	4b16      	ldr	r3, [pc, #88]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a15      	ldr	r2, [pc, #84]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 8007382:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007386:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007388:	f7fa fcce 	bl	8001d28 <HAL_GetTick>
 800738c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800738e:	e008      	b.n	80073a2 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007390:	f7fa fcca 	bl	8001d28 <HAL_GetTick>
 8007394:	4602      	mov	r2, r0
 8007396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007398:	1ad3      	subs	r3, r2, r3
 800739a:	2b02      	cmp	r3, #2
 800739c:	d901      	bls.n	80073a2 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800739e:	2303      	movs	r3, #3
 80073a0:	e091      	b.n	80074c6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80073a2:	4b0d      	ldr	r3, [pc, #52]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d0f0      	beq.n	8007390 <HAL_RCC_OscConfig+0x71c>
 80073ae:	e089      	b.n	80074c4 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073b0:	4b09      	ldr	r3, [pc, #36]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a08      	ldr	r2, [pc, #32]	@ (80073d8 <HAL_RCC_OscConfig+0x764>)
 80073b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80073ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073bc:	f7fa fcb4 	bl	8001d28 <HAL_GetTick>
 80073c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80073c2:	e00f      	b.n	80073e4 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073c4:	f7fa fcb0 	bl	8001d28 <HAL_GetTick>
 80073c8:	4602      	mov	r2, r0
 80073ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073cc:	1ad3      	subs	r3, r2, r3
 80073ce:	2b02      	cmp	r3, #2
 80073d0:	d908      	bls.n	80073e4 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80073d2:	2303      	movs	r3, #3
 80073d4:	e077      	b.n	80074c6 <HAL_RCC_OscConfig+0x852>
 80073d6:	bf00      	nop
 80073d8:	58024400 	.word	0x58024400
 80073dc:	fffffc0c 	.word	0xfffffc0c
 80073e0:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80073e4:	4b3a      	ldr	r3, [pc, #232]	@ (80074d0 <HAL_RCC_OscConfig+0x85c>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d1e9      	bne.n	80073c4 <HAL_RCC_OscConfig+0x750>
 80073f0:	e068      	b.n	80074c4 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80073f2:	4b37      	ldr	r3, [pc, #220]	@ (80074d0 <HAL_RCC_OscConfig+0x85c>)
 80073f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073f6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80073f8:	4b35      	ldr	r3, [pc, #212]	@ (80074d0 <HAL_RCC_OscConfig+0x85c>)
 80073fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073fc:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007402:	2b01      	cmp	r3, #1
 8007404:	d031      	beq.n	800746a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	f003 0203 	and.w	r2, r3, #3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007410:	429a      	cmp	r2, r3
 8007412:	d12a      	bne.n	800746a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	091b      	lsrs	r3, r3, #4
 8007418:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007420:	429a      	cmp	r2, r3
 8007422:	d122      	bne.n	800746a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800742e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007430:	429a      	cmp	r2, r3
 8007432:	d11a      	bne.n	800746a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	0a5b      	lsrs	r3, r3, #9
 8007438:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007440:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007442:	429a      	cmp	r2, r3
 8007444:	d111      	bne.n	800746a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	0c1b      	lsrs	r3, r3, #16
 800744a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007452:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007454:	429a      	cmp	r2, r3
 8007456:	d108      	bne.n	800746a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	0e1b      	lsrs	r3, r3, #24
 800745c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007464:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007466:	429a      	cmp	r2, r3
 8007468:	d001      	beq.n	800746e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	e02b      	b.n	80074c6 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800746e:	4b18      	ldr	r3, [pc, #96]	@ (80074d0 <HAL_RCC_OscConfig+0x85c>)
 8007470:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007472:	08db      	lsrs	r3, r3, #3
 8007474:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007478:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800747e:	693a      	ldr	r2, [r7, #16]
 8007480:	429a      	cmp	r2, r3
 8007482:	d01f      	beq.n	80074c4 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007484:	4b12      	ldr	r3, [pc, #72]	@ (80074d0 <HAL_RCC_OscConfig+0x85c>)
 8007486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007488:	4a11      	ldr	r2, [pc, #68]	@ (80074d0 <HAL_RCC_OscConfig+0x85c>)
 800748a:	f023 0301 	bic.w	r3, r3, #1
 800748e:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007490:	f7fa fc4a 	bl	8001d28 <HAL_GetTick>
 8007494:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007496:	bf00      	nop
 8007498:	f7fa fc46 	bl	8001d28 <HAL_GetTick>
 800749c:	4602      	mov	r2, r0
 800749e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d0f9      	beq.n	8007498 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80074a4:	4b0a      	ldr	r3, [pc, #40]	@ (80074d0 <HAL_RCC_OscConfig+0x85c>)
 80074a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80074a8:	4b0a      	ldr	r3, [pc, #40]	@ (80074d4 <HAL_RCC_OscConfig+0x860>)
 80074aa:	4013      	ands	r3, r2
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80074b0:	00d2      	lsls	r2, r2, #3
 80074b2:	4907      	ldr	r1, [pc, #28]	@ (80074d0 <HAL_RCC_OscConfig+0x85c>)
 80074b4:	4313      	orrs	r3, r2
 80074b6:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80074b8:	4b05      	ldr	r3, [pc, #20]	@ (80074d0 <HAL_RCC_OscConfig+0x85c>)
 80074ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074bc:	4a04      	ldr	r2, [pc, #16]	@ (80074d0 <HAL_RCC_OscConfig+0x85c>)
 80074be:	f043 0301 	orr.w	r3, r3, #1
 80074c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3730      	adds	r7, #48	@ 0x30
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	58024400 	.word	0x58024400
 80074d4:	ffff0007 	.word	0xffff0007

080074d8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b086      	sub	sp, #24
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d101      	bne.n	80074ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	e19c      	b.n	8007826 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80074ec:	4b8a      	ldr	r3, [pc, #552]	@ (8007718 <HAL_RCC_ClockConfig+0x240>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 030f 	and.w	r3, r3, #15
 80074f4:	683a      	ldr	r2, [r7, #0]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d910      	bls.n	800751c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074fa:	4b87      	ldr	r3, [pc, #540]	@ (8007718 <HAL_RCC_ClockConfig+0x240>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f023 020f 	bic.w	r2, r3, #15
 8007502:	4985      	ldr	r1, [pc, #532]	@ (8007718 <HAL_RCC_ClockConfig+0x240>)
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	4313      	orrs	r3, r2
 8007508:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800750a:	4b83      	ldr	r3, [pc, #524]	@ (8007718 <HAL_RCC_ClockConfig+0x240>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f003 030f 	and.w	r3, r3, #15
 8007512:	683a      	ldr	r2, [r7, #0]
 8007514:	429a      	cmp	r2, r3
 8007516:	d001      	beq.n	800751c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	e184      	b.n	8007826 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f003 0304 	and.w	r3, r3, #4
 8007524:	2b00      	cmp	r3, #0
 8007526:	d010      	beq.n	800754a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	691a      	ldr	r2, [r3, #16]
 800752c:	4b7b      	ldr	r3, [pc, #492]	@ (800771c <HAL_RCC_ClockConfig+0x244>)
 800752e:	699b      	ldr	r3, [r3, #24]
 8007530:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007534:	429a      	cmp	r2, r3
 8007536:	d908      	bls.n	800754a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007538:	4b78      	ldr	r3, [pc, #480]	@ (800771c <HAL_RCC_ClockConfig+0x244>)
 800753a:	699b      	ldr	r3, [r3, #24]
 800753c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	691b      	ldr	r3, [r3, #16]
 8007544:	4975      	ldr	r1, [pc, #468]	@ (800771c <HAL_RCC_ClockConfig+0x244>)
 8007546:	4313      	orrs	r3, r2
 8007548:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f003 0308 	and.w	r3, r3, #8
 8007552:	2b00      	cmp	r3, #0
 8007554:	d010      	beq.n	8007578 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	695a      	ldr	r2, [r3, #20]
 800755a:	4b70      	ldr	r3, [pc, #448]	@ (800771c <HAL_RCC_ClockConfig+0x244>)
 800755c:	69db      	ldr	r3, [r3, #28]
 800755e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007562:	429a      	cmp	r2, r3
 8007564:	d908      	bls.n	8007578 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007566:	4b6d      	ldr	r3, [pc, #436]	@ (800771c <HAL_RCC_ClockConfig+0x244>)
 8007568:	69db      	ldr	r3, [r3, #28]
 800756a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	695b      	ldr	r3, [r3, #20]
 8007572:	496a      	ldr	r1, [pc, #424]	@ (800771c <HAL_RCC_ClockConfig+0x244>)
 8007574:	4313      	orrs	r3, r2
 8007576:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 0310 	and.w	r3, r3, #16
 8007580:	2b00      	cmp	r3, #0
 8007582:	d010      	beq.n	80075a6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	699a      	ldr	r2, [r3, #24]
 8007588:	4b64      	ldr	r3, [pc, #400]	@ (800771c <HAL_RCC_ClockConfig+0x244>)
 800758a:	69db      	ldr	r3, [r3, #28]
 800758c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007590:	429a      	cmp	r2, r3
 8007592:	d908      	bls.n	80075a6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007594:	4b61      	ldr	r3, [pc, #388]	@ (800771c <HAL_RCC_ClockConfig+0x244>)
 8007596:	69db      	ldr	r3, [r3, #28]
 8007598:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	699b      	ldr	r3, [r3, #24]
 80075a0:	495e      	ldr	r1, [pc, #376]	@ (800771c <HAL_RCC_ClockConfig+0x244>)
 80075a2:	4313      	orrs	r3, r2
 80075a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f003 0320 	and.w	r3, r3, #32
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d010      	beq.n	80075d4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	69da      	ldr	r2, [r3, #28]
 80075b6:	4b59      	ldr	r3, [pc, #356]	@ (800771c <HAL_RCC_ClockConfig+0x244>)
 80075b8:	6a1b      	ldr	r3, [r3, #32]
 80075ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80075be:	429a      	cmp	r2, r3
 80075c0:	d908      	bls.n	80075d4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80075c2:	4b56      	ldr	r3, [pc, #344]	@ (800771c <HAL_RCC_ClockConfig+0x244>)
 80075c4:	6a1b      	ldr	r3, [r3, #32]
 80075c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	69db      	ldr	r3, [r3, #28]
 80075ce:	4953      	ldr	r1, [pc, #332]	@ (800771c <HAL_RCC_ClockConfig+0x244>)
 80075d0:	4313      	orrs	r3, r2
 80075d2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f003 0302 	and.w	r3, r3, #2
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d010      	beq.n	8007602 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	68da      	ldr	r2, [r3, #12]
 80075e4:	4b4d      	ldr	r3, [pc, #308]	@ (800771c <HAL_RCC_ClockConfig+0x244>)
 80075e6:	699b      	ldr	r3, [r3, #24]
 80075e8:	f003 030f 	and.w	r3, r3, #15
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d908      	bls.n	8007602 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075f0:	4b4a      	ldr	r3, [pc, #296]	@ (800771c <HAL_RCC_ClockConfig+0x244>)
 80075f2:	699b      	ldr	r3, [r3, #24]
 80075f4:	f023 020f 	bic.w	r2, r3, #15
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	4947      	ldr	r1, [pc, #284]	@ (800771c <HAL_RCC_ClockConfig+0x244>)
 80075fe:	4313      	orrs	r3, r2
 8007600:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f003 0301 	and.w	r3, r3, #1
 800760a:	2b00      	cmp	r3, #0
 800760c:	d055      	beq.n	80076ba <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800760e:	4b43      	ldr	r3, [pc, #268]	@ (800771c <HAL_RCC_ClockConfig+0x244>)
 8007610:	699b      	ldr	r3, [r3, #24]
 8007612:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	4940      	ldr	r1, [pc, #256]	@ (800771c <HAL_RCC_ClockConfig+0x244>)
 800761c:	4313      	orrs	r3, r2
 800761e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	2b02      	cmp	r3, #2
 8007626:	d107      	bne.n	8007638 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007628:	4b3c      	ldr	r3, [pc, #240]	@ (800771c <HAL_RCC_ClockConfig+0x244>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007630:	2b00      	cmp	r3, #0
 8007632:	d121      	bne.n	8007678 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	e0f6      	b.n	8007826 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	2b03      	cmp	r3, #3
 800763e:	d107      	bne.n	8007650 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007640:	4b36      	ldr	r3, [pc, #216]	@ (800771c <HAL_RCC_ClockConfig+0x244>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007648:	2b00      	cmp	r3, #0
 800764a:	d115      	bne.n	8007678 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	e0ea      	b.n	8007826 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	2b01      	cmp	r3, #1
 8007656:	d107      	bne.n	8007668 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007658:	4b30      	ldr	r3, [pc, #192]	@ (800771c <HAL_RCC_ClockConfig+0x244>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007660:	2b00      	cmp	r3, #0
 8007662:	d109      	bne.n	8007678 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007664:	2301      	movs	r3, #1
 8007666:	e0de      	b.n	8007826 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007668:	4b2c      	ldr	r3, [pc, #176]	@ (800771c <HAL_RCC_ClockConfig+0x244>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f003 0304 	and.w	r3, r3, #4
 8007670:	2b00      	cmp	r3, #0
 8007672:	d101      	bne.n	8007678 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007674:	2301      	movs	r3, #1
 8007676:	e0d6      	b.n	8007826 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007678:	4b28      	ldr	r3, [pc, #160]	@ (800771c <HAL_RCC_ClockConfig+0x244>)
 800767a:	691b      	ldr	r3, [r3, #16]
 800767c:	f023 0207 	bic.w	r2, r3, #7
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	4925      	ldr	r1, [pc, #148]	@ (800771c <HAL_RCC_ClockConfig+0x244>)
 8007686:	4313      	orrs	r3, r2
 8007688:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800768a:	f7fa fb4d 	bl	8001d28 <HAL_GetTick>
 800768e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007690:	e00a      	b.n	80076a8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007692:	f7fa fb49 	bl	8001d28 <HAL_GetTick>
 8007696:	4602      	mov	r2, r0
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	1ad3      	subs	r3, r2, r3
 800769c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d901      	bls.n	80076a8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80076a4:	2303      	movs	r3, #3
 80076a6:	e0be      	b.n	8007826 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076a8:	4b1c      	ldr	r3, [pc, #112]	@ (800771c <HAL_RCC_ClockConfig+0x244>)
 80076aa:	691b      	ldr	r3, [r3, #16]
 80076ac:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	00db      	lsls	r3, r3, #3
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d1eb      	bne.n	8007692 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 0302 	and.w	r3, r3, #2
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d010      	beq.n	80076e8 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	68da      	ldr	r2, [r3, #12]
 80076ca:	4b14      	ldr	r3, [pc, #80]	@ (800771c <HAL_RCC_ClockConfig+0x244>)
 80076cc:	699b      	ldr	r3, [r3, #24]
 80076ce:	f003 030f 	and.w	r3, r3, #15
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d208      	bcs.n	80076e8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076d6:	4b11      	ldr	r3, [pc, #68]	@ (800771c <HAL_RCC_ClockConfig+0x244>)
 80076d8:	699b      	ldr	r3, [r3, #24]
 80076da:	f023 020f 	bic.w	r2, r3, #15
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	490e      	ldr	r1, [pc, #56]	@ (800771c <HAL_RCC_ClockConfig+0x244>)
 80076e4:	4313      	orrs	r3, r2
 80076e6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80076e8:	4b0b      	ldr	r3, [pc, #44]	@ (8007718 <HAL_RCC_ClockConfig+0x240>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 030f 	and.w	r3, r3, #15
 80076f0:	683a      	ldr	r2, [r7, #0]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d214      	bcs.n	8007720 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076f6:	4b08      	ldr	r3, [pc, #32]	@ (8007718 <HAL_RCC_ClockConfig+0x240>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f023 020f 	bic.w	r2, r3, #15
 80076fe:	4906      	ldr	r1, [pc, #24]	@ (8007718 <HAL_RCC_ClockConfig+0x240>)
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	4313      	orrs	r3, r2
 8007704:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007706:	4b04      	ldr	r3, [pc, #16]	@ (8007718 <HAL_RCC_ClockConfig+0x240>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f003 030f 	and.w	r3, r3, #15
 800770e:	683a      	ldr	r2, [r7, #0]
 8007710:	429a      	cmp	r2, r3
 8007712:	d005      	beq.n	8007720 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	e086      	b.n	8007826 <HAL_RCC_ClockConfig+0x34e>
 8007718:	52002000 	.word	0x52002000
 800771c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f003 0304 	and.w	r3, r3, #4
 8007728:	2b00      	cmp	r3, #0
 800772a:	d010      	beq.n	800774e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	691a      	ldr	r2, [r3, #16]
 8007730:	4b3f      	ldr	r3, [pc, #252]	@ (8007830 <HAL_RCC_ClockConfig+0x358>)
 8007732:	699b      	ldr	r3, [r3, #24]
 8007734:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007738:	429a      	cmp	r2, r3
 800773a:	d208      	bcs.n	800774e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800773c:	4b3c      	ldr	r3, [pc, #240]	@ (8007830 <HAL_RCC_ClockConfig+0x358>)
 800773e:	699b      	ldr	r3, [r3, #24]
 8007740:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	691b      	ldr	r3, [r3, #16]
 8007748:	4939      	ldr	r1, [pc, #228]	@ (8007830 <HAL_RCC_ClockConfig+0x358>)
 800774a:	4313      	orrs	r3, r2
 800774c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 0308 	and.w	r3, r3, #8
 8007756:	2b00      	cmp	r3, #0
 8007758:	d010      	beq.n	800777c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	695a      	ldr	r2, [r3, #20]
 800775e:	4b34      	ldr	r3, [pc, #208]	@ (8007830 <HAL_RCC_ClockConfig+0x358>)
 8007760:	69db      	ldr	r3, [r3, #28]
 8007762:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007766:	429a      	cmp	r2, r3
 8007768:	d208      	bcs.n	800777c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800776a:	4b31      	ldr	r3, [pc, #196]	@ (8007830 <HAL_RCC_ClockConfig+0x358>)
 800776c:	69db      	ldr	r3, [r3, #28]
 800776e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	695b      	ldr	r3, [r3, #20]
 8007776:	492e      	ldr	r1, [pc, #184]	@ (8007830 <HAL_RCC_ClockConfig+0x358>)
 8007778:	4313      	orrs	r3, r2
 800777a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f003 0310 	and.w	r3, r3, #16
 8007784:	2b00      	cmp	r3, #0
 8007786:	d010      	beq.n	80077aa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	699a      	ldr	r2, [r3, #24]
 800778c:	4b28      	ldr	r3, [pc, #160]	@ (8007830 <HAL_RCC_ClockConfig+0x358>)
 800778e:	69db      	ldr	r3, [r3, #28]
 8007790:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007794:	429a      	cmp	r2, r3
 8007796:	d208      	bcs.n	80077aa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007798:	4b25      	ldr	r3, [pc, #148]	@ (8007830 <HAL_RCC_ClockConfig+0x358>)
 800779a:	69db      	ldr	r3, [r3, #28]
 800779c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	699b      	ldr	r3, [r3, #24]
 80077a4:	4922      	ldr	r1, [pc, #136]	@ (8007830 <HAL_RCC_ClockConfig+0x358>)
 80077a6:	4313      	orrs	r3, r2
 80077a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f003 0320 	and.w	r3, r3, #32
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d010      	beq.n	80077d8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	69da      	ldr	r2, [r3, #28]
 80077ba:	4b1d      	ldr	r3, [pc, #116]	@ (8007830 <HAL_RCC_ClockConfig+0x358>)
 80077bc:	6a1b      	ldr	r3, [r3, #32]
 80077be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d208      	bcs.n	80077d8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80077c6:	4b1a      	ldr	r3, [pc, #104]	@ (8007830 <HAL_RCC_ClockConfig+0x358>)
 80077c8:	6a1b      	ldr	r3, [r3, #32]
 80077ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	69db      	ldr	r3, [r3, #28]
 80077d2:	4917      	ldr	r1, [pc, #92]	@ (8007830 <HAL_RCC_ClockConfig+0x358>)
 80077d4:	4313      	orrs	r3, r2
 80077d6:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80077d8:	f000 f89e 	bl	8007918 <HAL_RCC_GetSysClockFreq>
 80077dc:	4602      	mov	r2, r0
 80077de:	4b14      	ldr	r3, [pc, #80]	@ (8007830 <HAL_RCC_ClockConfig+0x358>)
 80077e0:	699b      	ldr	r3, [r3, #24]
 80077e2:	0a1b      	lsrs	r3, r3, #8
 80077e4:	f003 030f 	and.w	r3, r3, #15
 80077e8:	4912      	ldr	r1, [pc, #72]	@ (8007834 <HAL_RCC_ClockConfig+0x35c>)
 80077ea:	5ccb      	ldrb	r3, [r1, r3]
 80077ec:	f003 031f 	and.w	r3, r3, #31
 80077f0:	fa22 f303 	lsr.w	r3, r2, r3
 80077f4:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80077f6:	4b0e      	ldr	r3, [pc, #56]	@ (8007830 <HAL_RCC_ClockConfig+0x358>)
 80077f8:	699b      	ldr	r3, [r3, #24]
 80077fa:	f003 030f 	and.w	r3, r3, #15
 80077fe:	4a0d      	ldr	r2, [pc, #52]	@ (8007834 <HAL_RCC_ClockConfig+0x35c>)
 8007800:	5cd3      	ldrb	r3, [r2, r3]
 8007802:	f003 031f 	and.w	r3, r3, #31
 8007806:	693a      	ldr	r2, [r7, #16]
 8007808:	fa22 f303 	lsr.w	r3, r2, r3
 800780c:	4a0a      	ldr	r2, [pc, #40]	@ (8007838 <HAL_RCC_ClockConfig+0x360>)
 800780e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007810:	4a0a      	ldr	r2, [pc, #40]	@ (800783c <HAL_RCC_ClockConfig+0x364>)
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007816:	4b0a      	ldr	r3, [pc, #40]	@ (8007840 <HAL_RCC_ClockConfig+0x368>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4618      	mov	r0, r3
 800781c:	f7fa fa3a 	bl	8001c94 <HAL_InitTick>
 8007820:	4603      	mov	r3, r0
 8007822:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007824:	7bfb      	ldrb	r3, [r7, #15]
}
 8007826:	4618      	mov	r0, r3
 8007828:	3718      	adds	r7, #24
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	58024400 	.word	0x58024400
 8007834:	0800b828 	.word	0x0800b828
 8007838:	2400000c 	.word	0x2400000c
 800783c:	24000008 	.word	0x24000008
 8007840:	24000010 	.word	0x24000010

08007844 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b08c      	sub	sp, #48	@ 0x30
 8007848:	af00      	add	r7, sp, #0
 800784a:	60f8      	str	r0, [r7, #12]
 800784c:	60b9      	str	r1, [r7, #8]
 800784e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d12a      	bne.n	80078ac <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8007856:	4b2d      	ldr	r3, [pc, #180]	@ (800790c <HAL_RCC_MCOConfig+0xc8>)
 8007858:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800785c:	4a2b      	ldr	r2, [pc, #172]	@ (800790c <HAL_RCC_MCOConfig+0xc8>)
 800785e:	f043 0301 	orr.w	r3, r3, #1
 8007862:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8007866:	4b29      	ldr	r3, [pc, #164]	@ (800790c <HAL_RCC_MCOConfig+0xc8>)
 8007868:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800786c:	f003 0301 	and.w	r3, r3, #1
 8007870:	61bb      	str	r3, [r7, #24]
 8007872:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8007874:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800787a:	2302      	movs	r3, #2
 800787c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800787e:	2303      	movs	r3, #3
 8007880:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007882:	2300      	movs	r3, #0
 8007884:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007886:	2300      	movs	r3, #0
 8007888:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800788a:	f107 031c 	add.w	r3, r7, #28
 800788e:	4619      	mov	r1, r3
 8007890:	481f      	ldr	r0, [pc, #124]	@ (8007910 <HAL_RCC_MCOConfig+0xcc>)
 8007892:	f7fe fa03 	bl	8005c9c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8007896:	4b1d      	ldr	r3, [pc, #116]	@ (800790c <HAL_RCC_MCOConfig+0xc8>)
 8007898:	691b      	ldr	r3, [r3, #16]
 800789a:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 800789e:	68b9      	ldr	r1, [r7, #8]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	430b      	orrs	r3, r1
 80078a4:	4919      	ldr	r1, [pc, #100]	@ (800790c <HAL_RCC_MCOConfig+0xc8>)
 80078a6:	4313      	orrs	r3, r2
 80078a8:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 80078aa:	e02a      	b.n	8007902 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 80078ac:	4b17      	ldr	r3, [pc, #92]	@ (800790c <HAL_RCC_MCOConfig+0xc8>)
 80078ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80078b2:	4a16      	ldr	r2, [pc, #88]	@ (800790c <HAL_RCC_MCOConfig+0xc8>)
 80078b4:	f043 0304 	orr.w	r3, r3, #4
 80078b8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80078bc:	4b13      	ldr	r3, [pc, #76]	@ (800790c <HAL_RCC_MCOConfig+0xc8>)
 80078be:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80078c2:	f003 0304 	and.w	r3, r3, #4
 80078c6:	617b      	str	r3, [r7, #20]
 80078c8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80078ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80078ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078d0:	2302      	movs	r3, #2
 80078d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078d4:	2303      	movs	r3, #3
 80078d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078d8:	2300      	movs	r3, #0
 80078da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80078dc:	2300      	movs	r3, #0
 80078de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80078e0:	f107 031c 	add.w	r3, r7, #28
 80078e4:	4619      	mov	r1, r3
 80078e6:	480b      	ldr	r0, [pc, #44]	@ (8007914 <HAL_RCC_MCOConfig+0xd0>)
 80078e8:	f7fe f9d8 	bl	8005c9c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80078ec:	4b07      	ldr	r3, [pc, #28]	@ (800790c <HAL_RCC_MCOConfig+0xc8>)
 80078ee:	691b      	ldr	r3, [r3, #16]
 80078f0:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	01d9      	lsls	r1, r3, #7
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	430b      	orrs	r3, r1
 80078fc:	4903      	ldr	r1, [pc, #12]	@ (800790c <HAL_RCC_MCOConfig+0xc8>)
 80078fe:	4313      	orrs	r3, r2
 8007900:	610b      	str	r3, [r1, #16]
}
 8007902:	bf00      	nop
 8007904:	3730      	adds	r7, #48	@ 0x30
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	58024400 	.word	0x58024400
 8007910:	58020000 	.word	0x58020000
 8007914:	58020800 	.word	0x58020800

08007918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007918:	b480      	push	{r7}
 800791a:	b089      	sub	sp, #36	@ 0x24
 800791c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800791e:	4bb3      	ldr	r3, [pc, #716]	@ (8007bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007920:	691b      	ldr	r3, [r3, #16]
 8007922:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007926:	2b18      	cmp	r3, #24
 8007928:	f200 8155 	bhi.w	8007bd6 <HAL_RCC_GetSysClockFreq+0x2be>
 800792c:	a201      	add	r2, pc, #4	@ (adr r2, 8007934 <HAL_RCC_GetSysClockFreq+0x1c>)
 800792e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007932:	bf00      	nop
 8007934:	08007999 	.word	0x08007999
 8007938:	08007bd7 	.word	0x08007bd7
 800793c:	08007bd7 	.word	0x08007bd7
 8007940:	08007bd7 	.word	0x08007bd7
 8007944:	08007bd7 	.word	0x08007bd7
 8007948:	08007bd7 	.word	0x08007bd7
 800794c:	08007bd7 	.word	0x08007bd7
 8007950:	08007bd7 	.word	0x08007bd7
 8007954:	080079bf 	.word	0x080079bf
 8007958:	08007bd7 	.word	0x08007bd7
 800795c:	08007bd7 	.word	0x08007bd7
 8007960:	08007bd7 	.word	0x08007bd7
 8007964:	08007bd7 	.word	0x08007bd7
 8007968:	08007bd7 	.word	0x08007bd7
 800796c:	08007bd7 	.word	0x08007bd7
 8007970:	08007bd7 	.word	0x08007bd7
 8007974:	080079c5 	.word	0x080079c5
 8007978:	08007bd7 	.word	0x08007bd7
 800797c:	08007bd7 	.word	0x08007bd7
 8007980:	08007bd7 	.word	0x08007bd7
 8007984:	08007bd7 	.word	0x08007bd7
 8007988:	08007bd7 	.word	0x08007bd7
 800798c:	08007bd7 	.word	0x08007bd7
 8007990:	08007bd7 	.word	0x08007bd7
 8007994:	080079cb 	.word	0x080079cb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007998:	4b94      	ldr	r3, [pc, #592]	@ (8007bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f003 0320 	and.w	r3, r3, #32
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d009      	beq.n	80079b8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80079a4:	4b91      	ldr	r3, [pc, #580]	@ (8007bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	08db      	lsrs	r3, r3, #3
 80079aa:	f003 0303 	and.w	r3, r3, #3
 80079ae:	4a90      	ldr	r2, [pc, #576]	@ (8007bf0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80079b0:	fa22 f303 	lsr.w	r3, r2, r3
 80079b4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80079b6:	e111      	b.n	8007bdc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80079b8:	4b8d      	ldr	r3, [pc, #564]	@ (8007bf0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80079ba:	61bb      	str	r3, [r7, #24]
      break;
 80079bc:	e10e      	b.n	8007bdc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80079be:	4b8d      	ldr	r3, [pc, #564]	@ (8007bf4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80079c0:	61bb      	str	r3, [r7, #24]
      break;
 80079c2:	e10b      	b.n	8007bdc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80079c4:	4b8c      	ldr	r3, [pc, #560]	@ (8007bf8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80079c6:	61bb      	str	r3, [r7, #24]
      break;
 80079c8:	e108      	b.n	8007bdc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80079ca:	4b88      	ldr	r3, [pc, #544]	@ (8007bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079ce:	f003 0303 	and.w	r3, r3, #3
 80079d2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80079d4:	4b85      	ldr	r3, [pc, #532]	@ (8007bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079d8:	091b      	lsrs	r3, r3, #4
 80079da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80079de:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80079e0:	4b82      	ldr	r3, [pc, #520]	@ (8007bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079e4:	f003 0301 	and.w	r3, r3, #1
 80079e8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80079ea:	4b80      	ldr	r3, [pc, #512]	@ (8007bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079ee:	08db      	lsrs	r3, r3, #3
 80079f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80079f4:	68fa      	ldr	r2, [r7, #12]
 80079f6:	fb02 f303 	mul.w	r3, r2, r3
 80079fa:	ee07 3a90 	vmov	s15, r3
 80079fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a02:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f000 80e1 	beq.w	8007bd0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	2b02      	cmp	r3, #2
 8007a12:	f000 8083 	beq.w	8007b1c <HAL_RCC_GetSysClockFreq+0x204>
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	2b02      	cmp	r3, #2
 8007a1a:	f200 80a1 	bhi.w	8007b60 <HAL_RCC_GetSysClockFreq+0x248>
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d003      	beq.n	8007a2c <HAL_RCC_GetSysClockFreq+0x114>
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d056      	beq.n	8007ad8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007a2a:	e099      	b.n	8007b60 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a2c:	4b6f      	ldr	r3, [pc, #444]	@ (8007bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f003 0320 	and.w	r3, r3, #32
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d02d      	beq.n	8007a94 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a38:	4b6c      	ldr	r3, [pc, #432]	@ (8007bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	08db      	lsrs	r3, r3, #3
 8007a3e:	f003 0303 	and.w	r3, r3, #3
 8007a42:	4a6b      	ldr	r2, [pc, #428]	@ (8007bf0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007a44:	fa22 f303 	lsr.w	r3, r2, r3
 8007a48:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	ee07 3a90 	vmov	s15, r3
 8007a50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	ee07 3a90 	vmov	s15, r3
 8007a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a62:	4b62      	ldr	r3, [pc, #392]	@ (8007bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a6a:	ee07 3a90 	vmov	s15, r3
 8007a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a72:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a76:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007bfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a8e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007a92:	e087      	b.n	8007ba4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	ee07 3a90 	vmov	s15, r3
 8007a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a9e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007c00 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007aa6:	4b51      	ldr	r3, [pc, #324]	@ (8007bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aae:	ee07 3a90 	vmov	s15, r3
 8007ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ab6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007aba:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007bfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007abe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ac6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ad2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007ad6:	e065      	b.n	8007ba4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	ee07 3a90 	vmov	s15, r3
 8007ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ae2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007c04 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007aea:	4b40      	ldr	r3, [pc, #256]	@ (8007bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007af2:	ee07 3a90 	vmov	s15, r3
 8007af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007afa:	ed97 6a02 	vldr	s12, [r7, #8]
 8007afe:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007bfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007b1a:	e043      	b.n	8007ba4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	ee07 3a90 	vmov	s15, r3
 8007b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b26:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007c08 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b2e:	4b2f      	ldr	r3, [pc, #188]	@ (8007bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b36:	ee07 3a90 	vmov	s15, r3
 8007b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b42:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007bfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007b5e:	e021      	b.n	8007ba4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	ee07 3a90 	vmov	s15, r3
 8007b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b6a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007c04 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b72:	4b1e      	ldr	r3, [pc, #120]	@ (8007bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b7a:	ee07 3a90 	vmov	s15, r3
 8007b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b82:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b86:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007bfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007ba2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007ba4:	4b11      	ldr	r3, [pc, #68]	@ (8007bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ba8:	0a5b      	lsrs	r3, r3, #9
 8007baa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007bae:	3301      	adds	r3, #1
 8007bb0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	ee07 3a90 	vmov	s15, r3
 8007bb8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007bbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bc8:	ee17 3a90 	vmov	r3, s15
 8007bcc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007bce:	e005      	b.n	8007bdc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	61bb      	str	r3, [r7, #24]
      break;
 8007bd4:	e002      	b.n	8007bdc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007bd6:	4b07      	ldr	r3, [pc, #28]	@ (8007bf4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007bd8:	61bb      	str	r3, [r7, #24]
      break;
 8007bda:	bf00      	nop
  }

  return sysclockfreq;
 8007bdc:	69bb      	ldr	r3, [r7, #24]
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3724      	adds	r7, #36	@ 0x24
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr
 8007bea:	bf00      	nop
 8007bec:	58024400 	.word	0x58024400
 8007bf0:	03d09000 	.word	0x03d09000
 8007bf4:	003d0900 	.word	0x003d0900
 8007bf8:	007a1200 	.word	0x007a1200
 8007bfc:	46000000 	.word	0x46000000
 8007c00:	4c742400 	.word	0x4c742400
 8007c04:	4a742400 	.word	0x4a742400
 8007c08:	4af42400 	.word	0x4af42400

08007c0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b082      	sub	sp, #8
 8007c10:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8007c12:	f7ff fe81 	bl	8007918 <HAL_RCC_GetSysClockFreq>
 8007c16:	4602      	mov	r2, r0
 8007c18:	4b10      	ldr	r3, [pc, #64]	@ (8007c5c <HAL_RCC_GetHCLKFreq+0x50>)
 8007c1a:	699b      	ldr	r3, [r3, #24]
 8007c1c:	0a1b      	lsrs	r3, r3, #8
 8007c1e:	f003 030f 	and.w	r3, r3, #15
 8007c22:	490f      	ldr	r1, [pc, #60]	@ (8007c60 <HAL_RCC_GetHCLKFreq+0x54>)
 8007c24:	5ccb      	ldrb	r3, [r1, r3]
 8007c26:	f003 031f 	and.w	r3, r3, #31
 8007c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8007c2e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007c30:	4b0a      	ldr	r3, [pc, #40]	@ (8007c5c <HAL_RCC_GetHCLKFreq+0x50>)
 8007c32:	699b      	ldr	r3, [r3, #24]
 8007c34:	f003 030f 	and.w	r3, r3, #15
 8007c38:	4a09      	ldr	r2, [pc, #36]	@ (8007c60 <HAL_RCC_GetHCLKFreq+0x54>)
 8007c3a:	5cd3      	ldrb	r3, [r2, r3]
 8007c3c:	f003 031f 	and.w	r3, r3, #31
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	fa22 f303 	lsr.w	r3, r2, r3
 8007c46:	4a07      	ldr	r2, [pc, #28]	@ (8007c64 <HAL_RCC_GetHCLKFreq+0x58>)
 8007c48:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007c4a:	4a07      	ldr	r2, [pc, #28]	@ (8007c68 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007c50:	4b04      	ldr	r3, [pc, #16]	@ (8007c64 <HAL_RCC_GetHCLKFreq+0x58>)
 8007c52:	681b      	ldr	r3, [r3, #0]
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3708      	adds	r7, #8
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}
 8007c5c:	58024400 	.word	0x58024400
 8007c60:	0800b828 	.word	0x0800b828
 8007c64:	2400000c 	.word	0x2400000c
 8007c68:	24000008 	.word	0x24000008

08007c6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8007c70:	f7ff ffcc 	bl	8007c0c <HAL_RCC_GetHCLKFreq>
 8007c74:	4602      	mov	r2, r0
 8007c76:	4b06      	ldr	r3, [pc, #24]	@ (8007c90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c78:	69db      	ldr	r3, [r3, #28]
 8007c7a:	091b      	lsrs	r3, r3, #4
 8007c7c:	f003 0307 	and.w	r3, r3, #7
 8007c80:	4904      	ldr	r1, [pc, #16]	@ (8007c94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007c82:	5ccb      	ldrb	r3, [r1, r3]
 8007c84:	f003 031f 	and.w	r3, r3, #31
 8007c88:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	58024400 	.word	0x58024400
 8007c94:	0800b828 	.word	0x0800b828

08007c98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8007c9c:	f7ff ffb6 	bl	8007c0c <HAL_RCC_GetHCLKFreq>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	4b06      	ldr	r3, [pc, #24]	@ (8007cbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ca4:	69db      	ldr	r3, [r3, #28]
 8007ca6:	0a1b      	lsrs	r3, r3, #8
 8007ca8:	f003 0307 	and.w	r3, r3, #7
 8007cac:	4904      	ldr	r1, [pc, #16]	@ (8007cc0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007cae:	5ccb      	ldrb	r3, [r1, r3]
 8007cb0:	f003 031f 	and.w	r3, r3, #31
 8007cb4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	bd80      	pop	{r7, pc}
 8007cbc:	58024400 	.word	0x58024400
 8007cc0:	0800b828 	.word	0x0800b828

08007cc4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007cc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007cc8:	b0c8      	sub	sp, #288	@ 0x120
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007cdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007ce8:	2500      	movs	r5, #0
 8007cea:	ea54 0305 	orrs.w	r3, r4, r5
 8007cee:	d049      	beq.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007cf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007cf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007cf6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007cfa:	d02f      	beq.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007cfc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007d00:	d828      	bhi.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007d02:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d06:	d01a      	beq.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007d08:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d0c:	d822      	bhi.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d003      	beq.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007d12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d16:	d007      	beq.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007d18:	e01c      	b.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d1a:	4ba7      	ldr	r3, [pc, #668]	@ (8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d1e:	4aa6      	ldr	r2, [pc, #664]	@ (8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007d26:	e01a      	b.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007d28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d2c:	3308      	adds	r3, #8
 8007d2e:	2102      	movs	r1, #2
 8007d30:	4618      	mov	r0, r3
 8007d32:	f001 fc43 	bl	80095bc <RCCEx_PLL2_Config>
 8007d36:	4603      	mov	r3, r0
 8007d38:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007d3c:	e00f      	b.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d42:	3328      	adds	r3, #40	@ 0x28
 8007d44:	2102      	movs	r1, #2
 8007d46:	4618      	mov	r0, r3
 8007d48:	f001 fcea 	bl	8009720 <RCCEx_PLL3_Config>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007d52:	e004      	b.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d54:	2301      	movs	r3, #1
 8007d56:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007d5a:	e000      	b.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007d5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d5e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d10a      	bne.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007d66:	4b94      	ldr	r3, [pc, #592]	@ (8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d6a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007d6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d74:	4a90      	ldr	r2, [pc, #576]	@ (8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d76:	430b      	orrs	r3, r1
 8007d78:	6513      	str	r3, [r2, #80]	@ 0x50
 8007d7a:	e003      	b.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d7c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007d80:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007d84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d8c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007d90:	f04f 0900 	mov.w	r9, #0
 8007d94:	ea58 0309 	orrs.w	r3, r8, r9
 8007d98:	d047      	beq.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007d9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007da0:	2b04      	cmp	r3, #4
 8007da2:	d82a      	bhi.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007da4:	a201      	add	r2, pc, #4	@ (adr r2, 8007dac <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007daa:	bf00      	nop
 8007dac:	08007dc1 	.word	0x08007dc1
 8007db0:	08007dcf 	.word	0x08007dcf
 8007db4:	08007de5 	.word	0x08007de5
 8007db8:	08007e03 	.word	0x08007e03
 8007dbc:	08007e03 	.word	0x08007e03
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dc0:	4b7d      	ldr	r3, [pc, #500]	@ (8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dc4:	4a7c      	ldr	r2, [pc, #496]	@ (8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007dc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007dca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007dcc:	e01a      	b.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007dce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007dd2:	3308      	adds	r3, #8
 8007dd4:	2100      	movs	r1, #0
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f001 fbf0 	bl	80095bc <RCCEx_PLL2_Config>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007de2:	e00f      	b.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007de4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007de8:	3328      	adds	r3, #40	@ 0x28
 8007dea:	2100      	movs	r1, #0
 8007dec:	4618      	mov	r0, r3
 8007dee:	f001 fc97 	bl	8009720 <RCCEx_PLL3_Config>
 8007df2:	4603      	mov	r3, r0
 8007df4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007df8:	e004      	b.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007e00:	e000      	b.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007e02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e04:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d10a      	bne.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007e0c:	4b6a      	ldr	r3, [pc, #424]	@ (8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e10:	f023 0107 	bic.w	r1, r3, #7
 8007e14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e1a:	4a67      	ldr	r2, [pc, #412]	@ (8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e1c:	430b      	orrs	r3, r1
 8007e1e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007e20:	e003      	b.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e22:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007e26:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8007e2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e32:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007e36:	f04f 0b00 	mov.w	fp, #0
 8007e3a:	ea5a 030b 	orrs.w	r3, sl, fp
 8007e3e:	d054      	beq.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8007e40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e46:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007e4a:	d036      	beq.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8007e4c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007e50:	d82f      	bhi.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007e52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e56:	d032      	beq.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007e58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e5c:	d829      	bhi.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007e5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007e60:	d02f      	beq.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8007e62:	2bc0      	cmp	r3, #192	@ 0xc0
 8007e64:	d825      	bhi.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007e66:	2b80      	cmp	r3, #128	@ 0x80
 8007e68:	d018      	beq.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8007e6a:	2b80      	cmp	r3, #128	@ 0x80
 8007e6c:	d821      	bhi.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d002      	beq.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8007e72:	2b40      	cmp	r3, #64	@ 0x40
 8007e74:	d007      	beq.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8007e76:	e01c      	b.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e78:	4b4f      	ldr	r3, [pc, #316]	@ (8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e7c:	4a4e      	ldr	r2, [pc, #312]	@ (8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007e84:	e01e      	b.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e8a:	3308      	adds	r3, #8
 8007e8c:	2100      	movs	r1, #0
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f001 fb94 	bl	80095bc <RCCEx_PLL2_Config>
 8007e94:	4603      	mov	r3, r0
 8007e96:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007e9a:	e013      	b.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ea0:	3328      	adds	r3, #40	@ 0x28
 8007ea2:	2100      	movs	r1, #0
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f001 fc3b 	bl	8009720 <RCCEx_PLL3_Config>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007eb0:	e008      	b.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007eb8:	e004      	b.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007eba:	bf00      	nop
 8007ebc:	e002      	b.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007ebe:	bf00      	nop
 8007ec0:	e000      	b.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007ec2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ec4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d10a      	bne.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8007ecc:	4b3a      	ldr	r3, [pc, #232]	@ (8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ece:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ed0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007ed4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ed8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007eda:	4a37      	ldr	r2, [pc, #220]	@ (8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007edc:	430b      	orrs	r3, r1
 8007ede:	6513      	str	r3, [r2, #80]	@ 0x50
 8007ee0:	e003      	b.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ee2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007ee6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8007eea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007ef6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007efa:	2300      	movs	r3, #0
 8007efc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007f00:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007f04:	460b      	mov	r3, r1
 8007f06:	4313      	orrs	r3, r2
 8007f08:	d05c      	beq.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8007f0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f10:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007f14:	d03b      	beq.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007f16:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007f1a:	d834      	bhi.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007f1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f20:	d037      	beq.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8007f22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f26:	d82e      	bhi.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007f28:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007f2c:	d033      	beq.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007f2e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007f32:	d828      	bhi.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007f34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f38:	d01a      	beq.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8007f3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f3e:	d822      	bhi.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d003      	beq.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8007f44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f48:	d007      	beq.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x296>
 8007f4a:	e01c      	b.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f4c:	4b1a      	ldr	r3, [pc, #104]	@ (8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f50:	4a19      	ldr	r2, [pc, #100]	@ (8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007f58:	e01e      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f5e:	3308      	adds	r3, #8
 8007f60:	2100      	movs	r1, #0
 8007f62:	4618      	mov	r0, r3
 8007f64:	f001 fb2a 	bl	80095bc <RCCEx_PLL2_Config>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007f6e:	e013      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007f70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f74:	3328      	adds	r3, #40	@ 0x28
 8007f76:	2100      	movs	r1, #0
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f001 fbd1 	bl	8009720 <RCCEx_PLL3_Config>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007f84:	e008      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007f8c:	e004      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8007f8e:	bf00      	nop
 8007f90:	e002      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8007f92:	bf00      	nop
 8007f94:	e000      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8007f96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f98:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d10d      	bne.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8007fa0:	4b05      	ldr	r3, [pc, #20]	@ (8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fa4:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8007fa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007fae:	4a02      	ldr	r2, [pc, #8]	@ (8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fb0:	430b      	orrs	r3, r1
 8007fb2:	6513      	str	r3, [r2, #80]	@ 0x50
 8007fb4:	e006      	b.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8007fb6:	bf00      	nop
 8007fb8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fbc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007fc0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007fc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fcc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007fd0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007fda:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007fde:	460b      	mov	r3, r1
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	d03a      	beq.n	800805a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8007fe4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fea:	2b30      	cmp	r3, #48	@ 0x30
 8007fec:	d01f      	beq.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8007fee:	2b30      	cmp	r3, #48	@ 0x30
 8007ff0:	d819      	bhi.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8007ff2:	2b20      	cmp	r3, #32
 8007ff4:	d00c      	beq.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8007ff6:	2b20      	cmp	r3, #32
 8007ff8:	d815      	bhi.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d019      	beq.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007ffe:	2b10      	cmp	r3, #16
 8008000:	d111      	bne.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008002:	4bae      	ldr	r3, [pc, #696]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008006:	4aad      	ldr	r2, [pc, #692]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008008:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800800c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800800e:	e011      	b.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008010:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008014:	3308      	adds	r3, #8
 8008016:	2102      	movs	r1, #2
 8008018:	4618      	mov	r0, r3
 800801a:	f001 facf 	bl	80095bc <RCCEx_PLL2_Config>
 800801e:	4603      	mov	r3, r0
 8008020:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008024:	e006      	b.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008026:	2301      	movs	r3, #1
 8008028:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800802c:	e002      	b.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800802e:	bf00      	nop
 8008030:	e000      	b.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8008032:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008034:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008038:	2b00      	cmp	r3, #0
 800803a:	d10a      	bne.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800803c:	4b9f      	ldr	r3, [pc, #636]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800803e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008040:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008044:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800804a:	4a9c      	ldr	r2, [pc, #624]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800804c:	430b      	orrs	r3, r1
 800804e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008050:	e003      	b.n	800805a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008052:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008056:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800805a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800805e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008062:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008066:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800806a:	2300      	movs	r3, #0
 800806c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008070:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008074:	460b      	mov	r3, r1
 8008076:	4313      	orrs	r3, r2
 8008078:	d051      	beq.n	800811e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800807a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800807e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008080:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008084:	d035      	beq.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8008086:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800808a:	d82e      	bhi.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0x426>
 800808c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008090:	d031      	beq.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8008092:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008096:	d828      	bhi.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008098:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800809c:	d01a      	beq.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800809e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080a2:	d822      	bhi.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0x426>
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d003      	beq.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80080a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080ac:	d007      	beq.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80080ae:	e01c      	b.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080b0:	4b82      	ldr	r3, [pc, #520]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80080b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080b4:	4a81      	ldr	r2, [pc, #516]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80080b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80080bc:	e01c      	b.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080c2:	3308      	adds	r3, #8
 80080c4:	2100      	movs	r1, #0
 80080c6:	4618      	mov	r0, r3
 80080c8:	f001 fa78 	bl	80095bc <RCCEx_PLL2_Config>
 80080cc:	4603      	mov	r3, r0
 80080ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80080d2:	e011      	b.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80080d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080d8:	3328      	adds	r3, #40	@ 0x28
 80080da:	2100      	movs	r1, #0
 80080dc:	4618      	mov	r0, r3
 80080de:	f001 fb1f 	bl	8009720 <RCCEx_PLL3_Config>
 80080e2:	4603      	mov	r3, r0
 80080e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80080e8:	e006      	b.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080ea:	2301      	movs	r3, #1
 80080ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80080f0:	e002      	b.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80080f2:	bf00      	nop
 80080f4:	e000      	b.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80080f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d10a      	bne.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008100:	4b6e      	ldr	r3, [pc, #440]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008102:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008104:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008108:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800810c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800810e:	4a6b      	ldr	r2, [pc, #428]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008110:	430b      	orrs	r3, r1
 8008112:	6513      	str	r3, [r2, #80]	@ 0x50
 8008114:	e003      	b.n	800811e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008116:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800811a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800811e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008126:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800812a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800812e:	2300      	movs	r3, #0
 8008130:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008134:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008138:	460b      	mov	r3, r1
 800813a:	4313      	orrs	r3, r2
 800813c:	d053      	beq.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800813e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008142:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008144:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008148:	d033      	beq.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800814a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800814e:	d82c      	bhi.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008150:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008154:	d02f      	beq.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8008156:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800815a:	d826      	bhi.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800815c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008160:	d02b      	beq.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008162:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008166:	d820      	bhi.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008168:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800816c:	d012      	beq.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800816e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008172:	d81a      	bhi.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008174:	2b00      	cmp	r3, #0
 8008176:	d022      	beq.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8008178:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800817c:	d115      	bne.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800817e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008182:	3308      	adds	r3, #8
 8008184:	2101      	movs	r1, #1
 8008186:	4618      	mov	r0, r3
 8008188:	f001 fa18 	bl	80095bc <RCCEx_PLL2_Config>
 800818c:	4603      	mov	r3, r0
 800818e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008192:	e015      	b.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008194:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008198:	3328      	adds	r3, #40	@ 0x28
 800819a:	2101      	movs	r1, #1
 800819c:	4618      	mov	r0, r3
 800819e:	f001 fabf 	bl	8009720 <RCCEx_PLL3_Config>
 80081a2:	4603      	mov	r3, r0
 80081a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80081a8:	e00a      	b.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081aa:	2301      	movs	r3, #1
 80081ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80081b0:	e006      	b.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80081b2:	bf00      	nop
 80081b4:	e004      	b.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80081b6:	bf00      	nop
 80081b8:	e002      	b.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80081ba:	bf00      	nop
 80081bc:	e000      	b.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80081be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d10a      	bne.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80081c8:	4b3c      	ldr	r3, [pc, #240]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80081ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081cc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80081d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80081d6:	4a39      	ldr	r2, [pc, #228]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80081d8:	430b      	orrs	r3, r1
 80081da:	6513      	str	r3, [r2, #80]	@ 0x50
 80081dc:	e003      	b.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081de:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80081e2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80081e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ee:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80081f2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80081f6:	2300      	movs	r3, #0
 80081f8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80081fc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008200:	460b      	mov	r3, r1
 8008202:	4313      	orrs	r3, r2
 8008204:	d060      	beq.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008206:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800820a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800820e:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8008212:	d039      	beq.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8008214:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8008218:	d832      	bhi.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800821a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800821e:	d035      	beq.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8008220:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008224:	d82c      	bhi.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008226:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800822a:	d031      	beq.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800822c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008230:	d826      	bhi.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008232:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008236:	d02d      	beq.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8008238:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800823c:	d820      	bhi.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800823e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008242:	d012      	beq.n	800826a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008244:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008248:	d81a      	bhi.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800824a:	2b00      	cmp	r3, #0
 800824c:	d024      	beq.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800824e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008252:	d115      	bne.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008254:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008258:	3308      	adds	r3, #8
 800825a:	2101      	movs	r1, #1
 800825c:	4618      	mov	r0, r3
 800825e:	f001 f9ad 	bl	80095bc <RCCEx_PLL2_Config>
 8008262:	4603      	mov	r3, r0
 8008264:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008268:	e017      	b.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800826a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800826e:	3328      	adds	r3, #40	@ 0x28
 8008270:	2101      	movs	r1, #1
 8008272:	4618      	mov	r0, r3
 8008274:	f001 fa54 	bl	8009720 <RCCEx_PLL3_Config>
 8008278:	4603      	mov	r3, r0
 800827a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800827e:	e00c      	b.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008286:	e008      	b.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008288:	bf00      	nop
 800828a:	e006      	b.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800828c:	bf00      	nop
 800828e:	e004      	b.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008290:	bf00      	nop
 8008292:	e002      	b.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008294:	bf00      	nop
 8008296:	e000      	b.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008298:	bf00      	nop
    }

    if (ret == HAL_OK)
 800829a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d10e      	bne.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80082a2:	4b06      	ldr	r3, [pc, #24]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80082a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082a6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80082aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80082b2:	4a02      	ldr	r2, [pc, #8]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80082b4:	430b      	orrs	r3, r1
 80082b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80082b8:	e006      	b.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80082ba:	bf00      	nop
 80082bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80082c4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80082c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80082d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80082d8:	2300      	movs	r3, #0
 80082da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80082de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80082e2:	460b      	mov	r3, r1
 80082e4:	4313      	orrs	r3, r2
 80082e6:	d037      	beq.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80082e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80082ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082f2:	d00e      	beq.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80082f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082f8:	d816      	bhi.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d018      	beq.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80082fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008302:	d111      	bne.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008304:	4bc4      	ldr	r3, [pc, #784]	@ (8008618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008308:	4ac3      	ldr	r2, [pc, #780]	@ (8008618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800830a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800830e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008310:	e00f      	b.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008312:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008316:	3308      	adds	r3, #8
 8008318:	2101      	movs	r1, #1
 800831a:	4618      	mov	r0, r3
 800831c:	f001 f94e 	bl	80095bc <RCCEx_PLL2_Config>
 8008320:	4603      	mov	r3, r0
 8008322:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008326:	e004      	b.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800832e:	e000      	b.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8008330:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008332:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008336:	2b00      	cmp	r3, #0
 8008338:	d10a      	bne.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800833a:	4bb7      	ldr	r3, [pc, #732]	@ (8008618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800833c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800833e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008342:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008346:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008348:	4ab3      	ldr	r2, [pc, #716]	@ (8008618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800834a:	430b      	orrs	r3, r1
 800834c:	6513      	str	r3, [r2, #80]	@ 0x50
 800834e:	e003      	b.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008350:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008354:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008358:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800835c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008360:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008364:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008368:	2300      	movs	r3, #0
 800836a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800836e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008372:	460b      	mov	r3, r1
 8008374:	4313      	orrs	r3, r2
 8008376:	d039      	beq.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008378:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800837c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800837e:	2b03      	cmp	r3, #3
 8008380:	d81c      	bhi.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8008382:	a201      	add	r2, pc, #4	@ (adr r2, 8008388 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8008384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008388:	080083c5 	.word	0x080083c5
 800838c:	08008399 	.word	0x08008399
 8008390:	080083a7 	.word	0x080083a7
 8008394:	080083c5 	.word	0x080083c5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008398:	4b9f      	ldr	r3, [pc, #636]	@ (8008618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800839a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800839c:	4a9e      	ldr	r2, [pc, #632]	@ (8008618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800839e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80083a4:	e00f      	b.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80083a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083aa:	3308      	adds	r3, #8
 80083ac:	2102      	movs	r1, #2
 80083ae:	4618      	mov	r0, r3
 80083b0:	f001 f904 	bl	80095bc <RCCEx_PLL2_Config>
 80083b4:	4603      	mov	r3, r0
 80083b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80083ba:	e004      	b.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80083bc:	2301      	movs	r3, #1
 80083be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80083c2:	e000      	b.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80083c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083c6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d10a      	bne.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80083ce:	4b92      	ldr	r3, [pc, #584]	@ (8008618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80083d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083d2:	f023 0103 	bic.w	r1, r3, #3
 80083d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083dc:	4a8e      	ldr	r2, [pc, #568]	@ (8008618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80083de:	430b      	orrs	r3, r1
 80083e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80083e2:	e003      	b.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80083e8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80083ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80083f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80083fc:	2300      	movs	r3, #0
 80083fe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008402:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008406:	460b      	mov	r3, r1
 8008408:	4313      	orrs	r3, r2
 800840a:	f000 8099 	beq.w	8008540 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800840e:	4b83      	ldr	r3, [pc, #524]	@ (800861c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a82      	ldr	r2, [pc, #520]	@ (800861c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008414:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008418:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800841a:	f7f9 fc85 	bl	8001d28 <HAL_GetTick>
 800841e:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008422:	e00b      	b.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008424:	f7f9 fc80 	bl	8001d28 <HAL_GetTick>
 8008428:	4602      	mov	r2, r0
 800842a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800842e:	1ad3      	subs	r3, r2, r3
 8008430:	2b64      	cmp	r3, #100	@ 0x64
 8008432:	d903      	bls.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8008434:	2303      	movs	r3, #3
 8008436:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800843a:	e005      	b.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800843c:	4b77      	ldr	r3, [pc, #476]	@ (800861c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008444:	2b00      	cmp	r3, #0
 8008446:	d0ed      	beq.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8008448:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800844c:	2b00      	cmp	r3, #0
 800844e:	d173      	bne.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008450:	4b71      	ldr	r3, [pc, #452]	@ (8008618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008452:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008454:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008458:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800845c:	4053      	eors	r3, r2
 800845e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008462:	2b00      	cmp	r3, #0
 8008464:	d015      	beq.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008466:	4b6c      	ldr	r3, [pc, #432]	@ (8008618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800846a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800846e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008472:	4b69      	ldr	r3, [pc, #420]	@ (8008618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008476:	4a68      	ldr	r2, [pc, #416]	@ (8008618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008478:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800847c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800847e:	4b66      	ldr	r3, [pc, #408]	@ (8008618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008482:	4a65      	ldr	r2, [pc, #404]	@ (8008618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008484:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008488:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800848a:	4a63      	ldr	r2, [pc, #396]	@ (8008618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800848c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008490:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008492:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008496:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800849a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800849e:	d118      	bne.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084a0:	f7f9 fc42 	bl	8001d28 <HAL_GetTick>
 80084a4:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80084a8:	e00d      	b.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084aa:	f7f9 fc3d 	bl	8001d28 <HAL_GetTick>
 80084ae:	4602      	mov	r2, r0
 80084b0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80084b4:	1ad2      	subs	r2, r2, r3
 80084b6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d903      	bls.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80084be:	2303      	movs	r3, #3
 80084c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 80084c4:	e005      	b.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80084c6:	4b54      	ldr	r3, [pc, #336]	@ (8008618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80084c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084ca:	f003 0302 	and.w	r3, r3, #2
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d0eb      	beq.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80084d2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d129      	bne.n	800852e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80084da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80084e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80084e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80084ea:	d10e      	bne.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x846>
 80084ec:	4b4a      	ldr	r3, [pc, #296]	@ (8008618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80084ee:	691b      	ldr	r3, [r3, #16]
 80084f0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80084f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80084fc:	091a      	lsrs	r2, r3, #4
 80084fe:	4b48      	ldr	r3, [pc, #288]	@ (8008620 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8008500:	4013      	ands	r3, r2
 8008502:	4a45      	ldr	r2, [pc, #276]	@ (8008618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008504:	430b      	orrs	r3, r1
 8008506:	6113      	str	r3, [r2, #16]
 8008508:	e005      	b.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800850a:	4b43      	ldr	r3, [pc, #268]	@ (8008618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800850c:	691b      	ldr	r3, [r3, #16]
 800850e:	4a42      	ldr	r2, [pc, #264]	@ (8008618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008510:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008514:	6113      	str	r3, [r2, #16]
 8008516:	4b40      	ldr	r3, [pc, #256]	@ (8008618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008518:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800851a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800851e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008522:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008526:	4a3c      	ldr	r2, [pc, #240]	@ (8008618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008528:	430b      	orrs	r3, r1
 800852a:	6713      	str	r3, [r2, #112]	@ 0x70
 800852c:	e008      	b.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800852e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008532:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8008536:	e003      	b.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008538:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800853c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008540:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008548:	f002 0301 	and.w	r3, r2, #1
 800854c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008550:	2300      	movs	r3, #0
 8008552:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008556:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800855a:	460b      	mov	r3, r1
 800855c:	4313      	orrs	r3, r2
 800855e:	f000 8090 	beq.w	8008682 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008562:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008566:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800856a:	2b28      	cmp	r3, #40	@ 0x28
 800856c:	d870      	bhi.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800856e:	a201      	add	r2, pc, #4	@ (adr r2, 8008574 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8008570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008574:	08008659 	.word	0x08008659
 8008578:	08008651 	.word	0x08008651
 800857c:	08008651 	.word	0x08008651
 8008580:	08008651 	.word	0x08008651
 8008584:	08008651 	.word	0x08008651
 8008588:	08008651 	.word	0x08008651
 800858c:	08008651 	.word	0x08008651
 8008590:	08008651 	.word	0x08008651
 8008594:	08008625 	.word	0x08008625
 8008598:	08008651 	.word	0x08008651
 800859c:	08008651 	.word	0x08008651
 80085a0:	08008651 	.word	0x08008651
 80085a4:	08008651 	.word	0x08008651
 80085a8:	08008651 	.word	0x08008651
 80085ac:	08008651 	.word	0x08008651
 80085b0:	08008651 	.word	0x08008651
 80085b4:	0800863b 	.word	0x0800863b
 80085b8:	08008651 	.word	0x08008651
 80085bc:	08008651 	.word	0x08008651
 80085c0:	08008651 	.word	0x08008651
 80085c4:	08008651 	.word	0x08008651
 80085c8:	08008651 	.word	0x08008651
 80085cc:	08008651 	.word	0x08008651
 80085d0:	08008651 	.word	0x08008651
 80085d4:	08008659 	.word	0x08008659
 80085d8:	08008651 	.word	0x08008651
 80085dc:	08008651 	.word	0x08008651
 80085e0:	08008651 	.word	0x08008651
 80085e4:	08008651 	.word	0x08008651
 80085e8:	08008651 	.word	0x08008651
 80085ec:	08008651 	.word	0x08008651
 80085f0:	08008651 	.word	0x08008651
 80085f4:	08008659 	.word	0x08008659
 80085f8:	08008651 	.word	0x08008651
 80085fc:	08008651 	.word	0x08008651
 8008600:	08008651 	.word	0x08008651
 8008604:	08008651 	.word	0x08008651
 8008608:	08008651 	.word	0x08008651
 800860c:	08008651 	.word	0x08008651
 8008610:	08008651 	.word	0x08008651
 8008614:	08008659 	.word	0x08008659
 8008618:	58024400 	.word	0x58024400
 800861c:	58024800 	.word	0x58024800
 8008620:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008624:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008628:	3308      	adds	r3, #8
 800862a:	2101      	movs	r1, #1
 800862c:	4618      	mov	r0, r3
 800862e:	f000 ffc5 	bl	80095bc <RCCEx_PLL2_Config>
 8008632:	4603      	mov	r3, r0
 8008634:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008638:	e00f      	b.n	800865a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800863a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800863e:	3328      	adds	r3, #40	@ 0x28
 8008640:	2101      	movs	r1, #1
 8008642:	4618      	mov	r0, r3
 8008644:	f001 f86c 	bl	8009720 <RCCEx_PLL3_Config>
 8008648:	4603      	mov	r3, r0
 800864a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800864e:	e004      	b.n	800865a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008650:	2301      	movs	r3, #1
 8008652:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008656:	e000      	b.n	800865a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8008658:	bf00      	nop
    }

    if (ret == HAL_OK)
 800865a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800865e:	2b00      	cmp	r3, #0
 8008660:	d10b      	bne.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008662:	4bc0      	ldr	r3, [pc, #768]	@ (8008964 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008666:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800866a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800866e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008672:	4abc      	ldr	r2, [pc, #752]	@ (8008964 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008674:	430b      	orrs	r3, r1
 8008676:	6553      	str	r3, [r2, #84]	@ 0x54
 8008678:	e003      	b.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800867a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800867e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008682:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800868a:	f002 0302 	and.w	r3, r2, #2
 800868e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008692:	2300      	movs	r3, #0
 8008694:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008698:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800869c:	460b      	mov	r3, r1
 800869e:	4313      	orrs	r3, r2
 80086a0:	d043      	beq.n	800872a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80086a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086aa:	2b05      	cmp	r3, #5
 80086ac:	d824      	bhi.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80086ae:	a201      	add	r2, pc, #4	@ (adr r2, 80086b4 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80086b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b4:	08008701 	.word	0x08008701
 80086b8:	080086cd 	.word	0x080086cd
 80086bc:	080086e3 	.word	0x080086e3
 80086c0:	08008701 	.word	0x08008701
 80086c4:	08008701 	.word	0x08008701
 80086c8:	08008701 	.word	0x08008701
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80086cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086d0:	3308      	adds	r3, #8
 80086d2:	2101      	movs	r1, #1
 80086d4:	4618      	mov	r0, r3
 80086d6:	f000 ff71 	bl	80095bc <RCCEx_PLL2_Config>
 80086da:	4603      	mov	r3, r0
 80086dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80086e0:	e00f      	b.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80086e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086e6:	3328      	adds	r3, #40	@ 0x28
 80086e8:	2101      	movs	r1, #1
 80086ea:	4618      	mov	r0, r3
 80086ec:	f001 f818 	bl	8009720 <RCCEx_PLL3_Config>
 80086f0:	4603      	mov	r3, r0
 80086f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80086f6:	e004      	b.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086f8:	2301      	movs	r3, #1
 80086fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80086fe:	e000      	b.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8008700:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008702:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008706:	2b00      	cmp	r3, #0
 8008708:	d10b      	bne.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800870a:	4b96      	ldr	r3, [pc, #600]	@ (8008964 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800870c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800870e:	f023 0107 	bic.w	r1, r3, #7
 8008712:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008716:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800871a:	4a92      	ldr	r2, [pc, #584]	@ (8008964 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800871c:	430b      	orrs	r3, r1
 800871e:	6553      	str	r3, [r2, #84]	@ 0x54
 8008720:	e003      	b.n	800872a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008722:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008726:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800872a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800872e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008732:	f002 0304 	and.w	r3, r2, #4
 8008736:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800873a:	2300      	movs	r3, #0
 800873c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008740:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008744:	460b      	mov	r3, r1
 8008746:	4313      	orrs	r3, r2
 8008748:	d043      	beq.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800874a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800874e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008752:	2b05      	cmp	r3, #5
 8008754:	d824      	bhi.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8008756:	a201      	add	r2, pc, #4	@ (adr r2, 800875c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8008758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800875c:	080087a9 	.word	0x080087a9
 8008760:	08008775 	.word	0x08008775
 8008764:	0800878b 	.word	0x0800878b
 8008768:	080087a9 	.word	0x080087a9
 800876c:	080087a9 	.word	0x080087a9
 8008770:	080087a9 	.word	0x080087a9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008774:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008778:	3308      	adds	r3, #8
 800877a:	2101      	movs	r1, #1
 800877c:	4618      	mov	r0, r3
 800877e:	f000 ff1d 	bl	80095bc <RCCEx_PLL2_Config>
 8008782:	4603      	mov	r3, r0
 8008784:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008788:	e00f      	b.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800878a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800878e:	3328      	adds	r3, #40	@ 0x28
 8008790:	2101      	movs	r1, #1
 8008792:	4618      	mov	r0, r3
 8008794:	f000 ffc4 	bl	8009720 <RCCEx_PLL3_Config>
 8008798:	4603      	mov	r3, r0
 800879a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800879e:	e004      	b.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087a0:	2301      	movs	r3, #1
 80087a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80087a6:	e000      	b.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80087a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087aa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d10b      	bne.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80087b2:	4b6c      	ldr	r3, [pc, #432]	@ (8008964 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80087b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087b6:	f023 0107 	bic.w	r1, r3, #7
 80087ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80087c2:	4a68      	ldr	r2, [pc, #416]	@ (8008964 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80087c4:	430b      	orrs	r3, r1
 80087c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80087c8:	e003      	b.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087ca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80087ce:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80087d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087da:	f002 0320 	and.w	r3, r2, #32
 80087de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80087e2:	2300      	movs	r3, #0
 80087e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80087e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80087ec:	460b      	mov	r3, r1
 80087ee:	4313      	orrs	r3, r2
 80087f0:	d055      	beq.n	800889e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80087f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80087fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80087fe:	d033      	beq.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8008800:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008804:	d82c      	bhi.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008806:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800880a:	d02f      	beq.n	800886c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800880c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008810:	d826      	bhi.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008812:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008816:	d02b      	beq.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8008818:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800881c:	d820      	bhi.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800881e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008822:	d012      	beq.n	800884a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8008824:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008828:	d81a      	bhi.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800882a:	2b00      	cmp	r3, #0
 800882c:	d022      	beq.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800882e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008832:	d115      	bne.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008834:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008838:	3308      	adds	r3, #8
 800883a:	2100      	movs	r1, #0
 800883c:	4618      	mov	r0, r3
 800883e:	f000 febd 	bl	80095bc <RCCEx_PLL2_Config>
 8008842:	4603      	mov	r3, r0
 8008844:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008848:	e015      	b.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800884a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800884e:	3328      	adds	r3, #40	@ 0x28
 8008850:	2102      	movs	r1, #2
 8008852:	4618      	mov	r0, r3
 8008854:	f000 ff64 	bl	8009720 <RCCEx_PLL3_Config>
 8008858:	4603      	mov	r3, r0
 800885a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800885e:	e00a      	b.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008860:	2301      	movs	r3, #1
 8008862:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008866:	e006      	b.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008868:	bf00      	nop
 800886a:	e004      	b.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800886c:	bf00      	nop
 800886e:	e002      	b.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008870:	bf00      	nop
 8008872:	e000      	b.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008874:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008876:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800887a:	2b00      	cmp	r3, #0
 800887c:	d10b      	bne.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800887e:	4b39      	ldr	r3, [pc, #228]	@ (8008964 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008882:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008886:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800888a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800888e:	4a35      	ldr	r2, [pc, #212]	@ (8008964 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008890:	430b      	orrs	r3, r1
 8008892:	6553      	str	r3, [r2, #84]	@ 0x54
 8008894:	e003      	b.n	800889e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008896:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800889a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800889e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80088aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80088ae:	2300      	movs	r3, #0
 80088b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80088b4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80088b8:	460b      	mov	r3, r1
 80088ba:	4313      	orrs	r3, r2
 80088bc:	d058      	beq.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80088be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80088c6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80088ca:	d033      	beq.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80088cc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80088d0:	d82c      	bhi.n	800892c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80088d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088d6:	d02f      	beq.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80088d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088dc:	d826      	bhi.n	800892c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80088de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80088e2:	d02b      	beq.n	800893c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80088e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80088e8:	d820      	bhi.n	800892c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80088ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80088ee:	d012      	beq.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80088f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80088f4:	d81a      	bhi.n	800892c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d022      	beq.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80088fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088fe:	d115      	bne.n	800892c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008900:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008904:	3308      	adds	r3, #8
 8008906:	2100      	movs	r1, #0
 8008908:	4618      	mov	r0, r3
 800890a:	f000 fe57 	bl	80095bc <RCCEx_PLL2_Config>
 800890e:	4603      	mov	r3, r0
 8008910:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008914:	e015      	b.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008916:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800891a:	3328      	adds	r3, #40	@ 0x28
 800891c:	2102      	movs	r1, #2
 800891e:	4618      	mov	r0, r3
 8008920:	f000 fefe 	bl	8009720 <RCCEx_PLL3_Config>
 8008924:	4603      	mov	r3, r0
 8008926:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800892a:	e00a      	b.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800892c:	2301      	movs	r3, #1
 800892e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008932:	e006      	b.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008934:	bf00      	nop
 8008936:	e004      	b.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008938:	bf00      	nop
 800893a:	e002      	b.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800893c:	bf00      	nop
 800893e:	e000      	b.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008940:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008942:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008946:	2b00      	cmp	r3, #0
 8008948:	d10e      	bne.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800894a:	4b06      	ldr	r3, [pc, #24]	@ (8008964 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800894c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800894e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008952:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008956:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800895a:	4a02      	ldr	r2, [pc, #8]	@ (8008964 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800895c:	430b      	orrs	r3, r1
 800895e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008960:	e006      	b.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8008962:	bf00      	nop
 8008964:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008968:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800896c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008970:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008978:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800897c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008980:	2300      	movs	r3, #0
 8008982:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008986:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800898a:	460b      	mov	r3, r1
 800898c:	4313      	orrs	r3, r2
 800898e:	d055      	beq.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008990:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008994:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008998:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800899c:	d033      	beq.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800899e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80089a2:	d82c      	bhi.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80089a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80089a8:	d02f      	beq.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80089aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80089ae:	d826      	bhi.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80089b0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80089b4:	d02b      	beq.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80089b6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80089ba:	d820      	bhi.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80089bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80089c0:	d012      	beq.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80089c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80089c6:	d81a      	bhi.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d022      	beq.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80089cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089d0:	d115      	bne.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80089d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089d6:	3308      	adds	r3, #8
 80089d8:	2100      	movs	r1, #0
 80089da:	4618      	mov	r0, r3
 80089dc:	f000 fdee 	bl	80095bc <RCCEx_PLL2_Config>
 80089e0:	4603      	mov	r3, r0
 80089e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80089e6:	e015      	b.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80089e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089ec:	3328      	adds	r3, #40	@ 0x28
 80089ee:	2102      	movs	r1, #2
 80089f0:	4618      	mov	r0, r3
 80089f2:	f000 fe95 	bl	8009720 <RCCEx_PLL3_Config>
 80089f6:	4603      	mov	r3, r0
 80089f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80089fc:	e00a      	b.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008a04:	e006      	b.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008a06:	bf00      	nop
 8008a08:	e004      	b.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008a0a:	bf00      	nop
 8008a0c:	e002      	b.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008a0e:	bf00      	nop
 8008a10:	e000      	b.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008a12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a14:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d10b      	bne.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008a1c:	4ba1      	ldr	r3, [pc, #644]	@ (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a20:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008a24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a28:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008a2c:	4a9d      	ldr	r2, [pc, #628]	@ (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008a2e:	430b      	orrs	r3, r1
 8008a30:	6593      	str	r3, [r2, #88]	@ 0x58
 8008a32:	e003      	b.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a34:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a38:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008a3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a44:	f002 0308 	and.w	r3, r2, #8
 8008a48:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008a52:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008a56:	460b      	mov	r3, r1
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	d01e      	beq.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008a5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a68:	d10c      	bne.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008a6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a6e:	3328      	adds	r3, #40	@ 0x28
 8008a70:	2102      	movs	r1, #2
 8008a72:	4618      	mov	r0, r3
 8008a74:	f000 fe54 	bl	8009720 <RCCEx_PLL3_Config>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d002      	beq.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008a84:	4b87      	ldr	r3, [pc, #540]	@ (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008a86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a88:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008a8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a94:	4a83      	ldr	r2, [pc, #524]	@ (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008a96:	430b      	orrs	r3, r1
 8008a98:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008a9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa2:	f002 0310 	and.w	r3, r2, #16
 8008aa6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008aaa:	2300      	movs	r3, #0
 8008aac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008ab0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	d01e      	beq.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008aba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008abe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008ac2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ac6:	d10c      	bne.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008ac8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008acc:	3328      	adds	r3, #40	@ 0x28
 8008ace:	2102      	movs	r1, #2
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f000 fe25 	bl	8009720 <RCCEx_PLL3_Config>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d002      	beq.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8008adc:	2301      	movs	r3, #1
 8008ade:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008ae2:	4b70      	ldr	r3, [pc, #448]	@ (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ae6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008aea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008aee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008af2:	4a6c      	ldr	r2, [pc, #432]	@ (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008af4:	430b      	orrs	r3, r1
 8008af6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008af8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b00:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008b04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008b08:	2300      	movs	r3, #0
 8008b0a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008b0e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008b12:	460b      	mov	r3, r1
 8008b14:	4313      	orrs	r3, r2
 8008b16:	d03e      	beq.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008b18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b1c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008b20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b24:	d022      	beq.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8008b26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b2a:	d81b      	bhi.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d003      	beq.n	8008b38 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8008b30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b34:	d00b      	beq.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8008b36:	e015      	b.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b3c:	3308      	adds	r3, #8
 8008b3e:	2100      	movs	r1, #0
 8008b40:	4618      	mov	r0, r3
 8008b42:	f000 fd3b 	bl	80095bc <RCCEx_PLL2_Config>
 8008b46:	4603      	mov	r3, r0
 8008b48:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008b4c:	e00f      	b.n	8008b6e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008b4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b52:	3328      	adds	r3, #40	@ 0x28
 8008b54:	2102      	movs	r1, #2
 8008b56:	4618      	mov	r0, r3
 8008b58:	f000 fde2 	bl	8009720 <RCCEx_PLL3_Config>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008b62:	e004      	b.n	8008b6e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b64:	2301      	movs	r3, #1
 8008b66:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008b6a:	e000      	b.n	8008b6e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8008b6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b6e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d10b      	bne.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008b76:	4b4b      	ldr	r3, [pc, #300]	@ (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b7a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008b7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b82:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008b86:	4a47      	ldr	r2, [pc, #284]	@ (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008b88:	430b      	orrs	r3, r1
 8008b8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8008b8c:	e003      	b.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b8e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b92:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008b96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b9e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008ba2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008ba8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008bac:	460b      	mov	r3, r1
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	d03b      	beq.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008bb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008bbe:	d01f      	beq.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8008bc0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008bc4:	d818      	bhi.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8008bc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008bca:	d003      	beq.n	8008bd4 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8008bcc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008bd0:	d007      	beq.n	8008be2 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8008bd2:	e011      	b.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bd4:	4b33      	ldr	r3, [pc, #204]	@ (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bd8:	4a32      	ldr	r2, [pc, #200]	@ (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008bda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008bde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008be0:	e00f      	b.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008be2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008be6:	3328      	adds	r3, #40	@ 0x28
 8008be8:	2101      	movs	r1, #1
 8008bea:	4618      	mov	r0, r3
 8008bec:	f000 fd98 	bl	8009720 <RCCEx_PLL3_Config>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8008bf6:	e004      	b.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008bfe:	e000      	b.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8008c00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c02:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d10b      	bne.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008c0a:	4b26      	ldr	r3, [pc, #152]	@ (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c0e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008c12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c1a:	4a22      	ldr	r2, [pc, #136]	@ (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c1c:	430b      	orrs	r3, r1
 8008c1e:	6553      	str	r3, [r2, #84]	@ 0x54
 8008c20:	e003      	b.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c22:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c26:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008c2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c32:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008c36:	673b      	str	r3, [r7, #112]	@ 0x70
 8008c38:	2300      	movs	r3, #0
 8008c3a:	677b      	str	r3, [r7, #116]	@ 0x74
 8008c3c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008c40:	460b      	mov	r3, r1
 8008c42:	4313      	orrs	r3, r2
 8008c44:	d034      	beq.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008c46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d003      	beq.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8008c50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c54:	d007      	beq.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8008c56:	e011      	b.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c58:	4b12      	ldr	r3, [pc, #72]	@ (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c5c:	4a11      	ldr	r2, [pc, #68]	@ (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008c64:	e00e      	b.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008c66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c6a:	3308      	adds	r3, #8
 8008c6c:	2102      	movs	r1, #2
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f000 fca4 	bl	80095bc <RCCEx_PLL2_Config>
 8008c74:	4603      	mov	r3, r0
 8008c76:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008c7a:	e003      	b.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008c82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c84:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d10d      	bne.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008c8c:	4b05      	ldr	r3, [pc, #20]	@ (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c90:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008c94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c9a:	4a02      	ldr	r2, [pc, #8]	@ (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c9c:	430b      	orrs	r3, r1
 8008c9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008ca0:	e006      	b.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8008ca2:	bf00      	nop
 8008ca4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ca8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008cac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008cb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008cbc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008cc2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	d00c      	beq.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008ccc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cd0:	3328      	adds	r3, #40	@ 0x28
 8008cd2:	2102      	movs	r1, #2
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f000 fd23 	bl	8009720 <RCCEx_PLL3_Config>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d002      	beq.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008ce6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cee:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008cf2:	663b      	str	r3, [r7, #96]	@ 0x60
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	667b      	str	r3, [r7, #100]	@ 0x64
 8008cf8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	d038      	beq.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008d02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008d0e:	d018      	beq.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8008d10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008d14:	d811      	bhi.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8008d16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d1a:	d014      	beq.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8008d1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d20:	d80b      	bhi.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d011      	beq.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8008d26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d2a:	d106      	bne.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d2c:	4bc3      	ldr	r3, [pc, #780]	@ (800903c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d30:	4ac2      	ldr	r2, [pc, #776]	@ (800903c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008d32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008d38:	e008      	b.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008d40:	e004      	b.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008d42:	bf00      	nop
 8008d44:	e002      	b.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008d46:	bf00      	nop
 8008d48:	e000      	b.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008d4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d4c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d10b      	bne.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008d54:	4bb9      	ldr	r3, [pc, #740]	@ (800903c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008d56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d58:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008d5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d64:	4ab5      	ldr	r2, [pc, #724]	@ (800903c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008d66:	430b      	orrs	r3, r1
 8008d68:	6553      	str	r3, [r2, #84]	@ 0x54
 8008d6a:	e003      	b.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d6c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d70:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008d74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d7c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008d80:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008d82:	2300      	movs	r3, #0
 8008d84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d86:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008d8a:	460b      	mov	r3, r1
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	d009      	beq.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008d90:	4baa      	ldr	r3, [pc, #680]	@ (800903c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008d92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d94:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008d98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008d9e:	4aa7      	ldr	r2, [pc, #668]	@ (800903c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008da0:	430b      	orrs	r3, r1
 8008da2:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008da4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dac:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008db0:	653b      	str	r3, [r7, #80]	@ 0x50
 8008db2:	2300      	movs	r3, #0
 8008db4:	657b      	str	r3, [r7, #84]	@ 0x54
 8008db6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008dba:	460b      	mov	r3, r1
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	d009      	beq.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008dc0:	4b9e      	ldr	r3, [pc, #632]	@ (800903c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008dc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dc4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008dc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dce:	4a9b      	ldr	r2, [pc, #620]	@ (800903c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008dd0:	430b      	orrs	r3, r1
 8008dd2:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8008dd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ddc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008de0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008de2:	2300      	movs	r3, #0
 8008de4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008de6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008dea:	460b      	mov	r3, r1
 8008dec:	4313      	orrs	r3, r2
 8008dee:	d009      	beq.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8008df0:	4b92      	ldr	r3, [pc, #584]	@ (800903c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008df4:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8008df8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008dfe:	4a8f      	ldr	r2, [pc, #572]	@ (800903c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e00:	430b      	orrs	r3, r1
 8008e02:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008e04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e0c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008e10:	643b      	str	r3, [r7, #64]	@ 0x40
 8008e12:	2300      	movs	r3, #0
 8008e14:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e16:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008e1a:	460b      	mov	r3, r1
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	d00e      	beq.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008e20:	4b86      	ldr	r3, [pc, #536]	@ (800903c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e22:	691b      	ldr	r3, [r3, #16]
 8008e24:	4a85      	ldr	r2, [pc, #532]	@ (800903c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e26:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008e2a:	6113      	str	r3, [r2, #16]
 8008e2c:	4b83      	ldr	r3, [pc, #524]	@ (800903c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e2e:	6919      	ldr	r1, [r3, #16]
 8008e30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e34:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008e38:	4a80      	ldr	r2, [pc, #512]	@ (800903c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e3a:	430b      	orrs	r3, r1
 8008e3c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008e3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e46:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008e4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e50:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008e54:	460b      	mov	r3, r1
 8008e56:	4313      	orrs	r3, r2
 8008e58:	d009      	beq.n	8008e6e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008e5a:	4b78      	ldr	r3, [pc, #480]	@ (800903c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e5e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008e62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e68:	4a74      	ldr	r2, [pc, #464]	@ (800903c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e6a:	430b      	orrs	r3, r1
 8008e6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008e6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e76:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008e7a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e80:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008e84:	460b      	mov	r3, r1
 8008e86:	4313      	orrs	r3, r2
 8008e88:	d00a      	beq.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008e8a:	4b6c      	ldr	r3, [pc, #432]	@ (800903c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e8e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008e92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008e9a:	4a68      	ldr	r2, [pc, #416]	@ (800903c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e9c:	430b      	orrs	r3, r1
 8008e9e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008ea0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea8:	2100      	movs	r1, #0
 8008eaa:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008eac:	f003 0301 	and.w	r3, r3, #1
 8008eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008eb2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008eb6:	460b      	mov	r3, r1
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	d011      	beq.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ebc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ec0:	3308      	adds	r3, #8
 8008ec2:	2100      	movs	r1, #0
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f000 fb79 	bl	80095bc <RCCEx_PLL2_Config>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008ed0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d003      	beq.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ed8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008edc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008ee0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee8:	2100      	movs	r1, #0
 8008eea:	6239      	str	r1, [r7, #32]
 8008eec:	f003 0302 	and.w	r3, r3, #2
 8008ef0:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ef2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008ef6:	460b      	mov	r3, r1
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	d011      	beq.n	8008f20 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008efc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f00:	3308      	adds	r3, #8
 8008f02:	2101      	movs	r1, #1
 8008f04:	4618      	mov	r0, r3
 8008f06:	f000 fb59 	bl	80095bc <RCCEx_PLL2_Config>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008f10:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d003      	beq.n	8008f20 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f18:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f1c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008f20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f28:	2100      	movs	r1, #0
 8008f2a:	61b9      	str	r1, [r7, #24]
 8008f2c:	f003 0304 	and.w	r3, r3, #4
 8008f30:	61fb      	str	r3, [r7, #28]
 8008f32:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008f36:	460b      	mov	r3, r1
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	d011      	beq.n	8008f60 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008f3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f40:	3308      	adds	r3, #8
 8008f42:	2102      	movs	r1, #2
 8008f44:	4618      	mov	r0, r3
 8008f46:	f000 fb39 	bl	80095bc <RCCEx_PLL2_Config>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008f50:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d003      	beq.n	8008f60 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f58:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f5c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008f60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f68:	2100      	movs	r1, #0
 8008f6a:	6139      	str	r1, [r7, #16]
 8008f6c:	f003 0308 	and.w	r3, r3, #8
 8008f70:	617b      	str	r3, [r7, #20]
 8008f72:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008f76:	460b      	mov	r3, r1
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	d011      	beq.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008f7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f80:	3328      	adds	r3, #40	@ 0x28
 8008f82:	2100      	movs	r1, #0
 8008f84:	4618      	mov	r0, r3
 8008f86:	f000 fbcb 	bl	8009720 <RCCEx_PLL3_Config>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8008f90:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d003      	beq.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f98:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f9c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008fa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa8:	2100      	movs	r1, #0
 8008faa:	60b9      	str	r1, [r7, #8]
 8008fac:	f003 0310 	and.w	r3, r3, #16
 8008fb0:	60fb      	str	r3, [r7, #12]
 8008fb2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008fb6:	460b      	mov	r3, r1
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	d011      	beq.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008fbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fc0:	3328      	adds	r3, #40	@ 0x28
 8008fc2:	2101      	movs	r1, #1
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f000 fbab 	bl	8009720 <RCCEx_PLL3_Config>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008fd0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d003      	beq.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fd8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008fdc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008fe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe8:	2100      	movs	r1, #0
 8008fea:	6039      	str	r1, [r7, #0]
 8008fec:	f003 0320 	and.w	r3, r3, #32
 8008ff0:	607b      	str	r3, [r7, #4]
 8008ff2:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	d011      	beq.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008ffc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009000:	3328      	adds	r3, #40	@ 0x28
 8009002:	2102      	movs	r1, #2
 8009004:	4618      	mov	r0, r3
 8009006:	f000 fb8b 	bl	8009720 <RCCEx_PLL3_Config>
 800900a:	4603      	mov	r3, r0
 800900c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009010:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009014:	2b00      	cmp	r3, #0
 8009016:	d003      	beq.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009018:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800901c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8009020:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8009024:	2b00      	cmp	r3, #0
 8009026:	d101      	bne.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8009028:	2300      	movs	r3, #0
 800902a:	e000      	b.n	800902e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800902c:	2301      	movs	r3, #1
}
 800902e:	4618      	mov	r0, r3
 8009030:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8009034:	46bd      	mov	sp, r7
 8009036:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800903a:	bf00      	nop
 800903c:	58024400 	.word	0x58024400

08009040 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8009044:	f7fe fde2 	bl	8007c0c <HAL_RCC_GetHCLKFreq>
 8009048:	4602      	mov	r2, r0
 800904a:	4b06      	ldr	r3, [pc, #24]	@ (8009064 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800904c:	6a1b      	ldr	r3, [r3, #32]
 800904e:	091b      	lsrs	r3, r3, #4
 8009050:	f003 0307 	and.w	r3, r3, #7
 8009054:	4904      	ldr	r1, [pc, #16]	@ (8009068 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009056:	5ccb      	ldrb	r3, [r1, r3]
 8009058:	f003 031f 	and.w	r3, r3, #31
 800905c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8009060:	4618      	mov	r0, r3
 8009062:	bd80      	pop	{r7, pc}
 8009064:	58024400 	.word	0x58024400
 8009068:	0800b828 	.word	0x0800b828

0800906c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800906c:	b480      	push	{r7}
 800906e:	b089      	sub	sp, #36	@ 0x24
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009074:	4ba1      	ldr	r3, [pc, #644]	@ (80092fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009078:	f003 0303 	and.w	r3, r3, #3
 800907c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800907e:	4b9f      	ldr	r3, [pc, #636]	@ (80092fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009082:	0b1b      	lsrs	r3, r3, #12
 8009084:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009088:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800908a:	4b9c      	ldr	r3, [pc, #624]	@ (80092fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800908c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800908e:	091b      	lsrs	r3, r3, #4
 8009090:	f003 0301 	and.w	r3, r3, #1
 8009094:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009096:	4b99      	ldr	r3, [pc, #612]	@ (80092fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800909a:	08db      	lsrs	r3, r3, #3
 800909c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80090a0:	693a      	ldr	r2, [r7, #16]
 80090a2:	fb02 f303 	mul.w	r3, r2, r3
 80090a6:	ee07 3a90 	vmov	s15, r3
 80090aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	f000 8111 	beq.w	80092dc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80090ba:	69bb      	ldr	r3, [r7, #24]
 80090bc:	2b02      	cmp	r3, #2
 80090be:	f000 8083 	beq.w	80091c8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80090c2:	69bb      	ldr	r3, [r7, #24]
 80090c4:	2b02      	cmp	r3, #2
 80090c6:	f200 80a1 	bhi.w	800920c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80090ca:	69bb      	ldr	r3, [r7, #24]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d003      	beq.n	80090d8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80090d0:	69bb      	ldr	r3, [r7, #24]
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	d056      	beq.n	8009184 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80090d6:	e099      	b.n	800920c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090d8:	4b88      	ldr	r3, [pc, #544]	@ (80092fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f003 0320 	and.w	r3, r3, #32
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d02d      	beq.n	8009140 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80090e4:	4b85      	ldr	r3, [pc, #532]	@ (80092fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	08db      	lsrs	r3, r3, #3
 80090ea:	f003 0303 	and.w	r3, r3, #3
 80090ee:	4a84      	ldr	r2, [pc, #528]	@ (8009300 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80090f0:	fa22 f303 	lsr.w	r3, r2, r3
 80090f4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	ee07 3a90 	vmov	s15, r3
 80090fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	ee07 3a90 	vmov	s15, r3
 8009106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800910a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800910e:	4b7b      	ldr	r3, [pc, #492]	@ (80092fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009116:	ee07 3a90 	vmov	s15, r3
 800911a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800911e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009122:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009304 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800912a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800912e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800913a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800913e:	e087      	b.n	8009250 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	ee07 3a90 	vmov	s15, r3
 8009146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800914a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009308 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800914e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009152:	4b6a      	ldr	r3, [pc, #424]	@ (80092fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800915a:	ee07 3a90 	vmov	s15, r3
 800915e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009162:	ed97 6a03 	vldr	s12, [r7, #12]
 8009166:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009304 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800916a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800916e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009172:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800917a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800917e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009182:	e065      	b.n	8009250 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	ee07 3a90 	vmov	s15, r3
 800918a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800918e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800930c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009196:	4b59      	ldr	r3, [pc, #356]	@ (80092fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800919a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800919e:	ee07 3a90 	vmov	s15, r3
 80091a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80091aa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009304 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80091ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091c6:	e043      	b.n	8009250 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	ee07 3a90 	vmov	s15, r3
 80091ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091d2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009310 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80091d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091da:	4b48      	ldr	r3, [pc, #288]	@ (80092fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091e2:	ee07 3a90 	vmov	s15, r3
 80091e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80091ee:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009304 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80091f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009206:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800920a:	e021      	b.n	8009250 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	ee07 3a90 	vmov	s15, r3
 8009212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009216:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800930c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800921a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800921e:	4b37      	ldr	r3, [pc, #220]	@ (80092fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009226:	ee07 3a90 	vmov	s15, r3
 800922a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800922e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009232:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009304 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800923a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800923e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800924a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800924e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009250:	4b2a      	ldr	r3, [pc, #168]	@ (80092fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009254:	0a5b      	lsrs	r3, r3, #9
 8009256:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800925a:	ee07 3a90 	vmov	s15, r3
 800925e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009262:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009266:	ee37 7a87 	vadd.f32	s14, s15, s14
 800926a:	edd7 6a07 	vldr	s13, [r7, #28]
 800926e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009272:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009276:	ee17 2a90 	vmov	r2, s15
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800927e:	4b1f      	ldr	r3, [pc, #124]	@ (80092fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009282:	0c1b      	lsrs	r3, r3, #16
 8009284:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009288:	ee07 3a90 	vmov	s15, r3
 800928c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009290:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009294:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009298:	edd7 6a07 	vldr	s13, [r7, #28]
 800929c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092a4:	ee17 2a90 	vmov	r2, s15
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80092ac:	4b13      	ldr	r3, [pc, #76]	@ (80092fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092b0:	0e1b      	lsrs	r3, r3, #24
 80092b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092b6:	ee07 3a90 	vmov	s15, r3
 80092ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80092c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80092ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092d2:	ee17 2a90 	vmov	r2, s15
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80092da:	e008      	b.n	80092ee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2200      	movs	r2, #0
 80092e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2200      	movs	r2, #0
 80092e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2200      	movs	r2, #0
 80092ec:	609a      	str	r2, [r3, #8]
}
 80092ee:	bf00      	nop
 80092f0:	3724      	adds	r7, #36	@ 0x24
 80092f2:	46bd      	mov	sp, r7
 80092f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f8:	4770      	bx	lr
 80092fa:	bf00      	nop
 80092fc:	58024400 	.word	0x58024400
 8009300:	03d09000 	.word	0x03d09000
 8009304:	46000000 	.word	0x46000000
 8009308:	4c742400 	.word	0x4c742400
 800930c:	4a742400 	.word	0x4a742400
 8009310:	4af42400 	.word	0x4af42400

08009314 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009314:	b480      	push	{r7}
 8009316:	b089      	sub	sp, #36	@ 0x24
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800931c:	4ba1      	ldr	r3, [pc, #644]	@ (80095a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800931e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009320:	f003 0303 	and.w	r3, r3, #3
 8009324:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009326:	4b9f      	ldr	r3, [pc, #636]	@ (80095a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800932a:	0d1b      	lsrs	r3, r3, #20
 800932c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009330:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009332:	4b9c      	ldr	r3, [pc, #624]	@ (80095a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009336:	0a1b      	lsrs	r3, r3, #8
 8009338:	f003 0301 	and.w	r3, r3, #1
 800933c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800933e:	4b99      	ldr	r3, [pc, #612]	@ (80095a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009342:	08db      	lsrs	r3, r3, #3
 8009344:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009348:	693a      	ldr	r2, [r7, #16]
 800934a:	fb02 f303 	mul.w	r3, r2, r3
 800934e:	ee07 3a90 	vmov	s15, r3
 8009352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009356:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	2b00      	cmp	r3, #0
 800935e:	f000 8111 	beq.w	8009584 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009362:	69bb      	ldr	r3, [r7, #24]
 8009364:	2b02      	cmp	r3, #2
 8009366:	f000 8083 	beq.w	8009470 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800936a:	69bb      	ldr	r3, [r7, #24]
 800936c:	2b02      	cmp	r3, #2
 800936e:	f200 80a1 	bhi.w	80094b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009372:	69bb      	ldr	r3, [r7, #24]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d003      	beq.n	8009380 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009378:	69bb      	ldr	r3, [r7, #24]
 800937a:	2b01      	cmp	r3, #1
 800937c:	d056      	beq.n	800942c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800937e:	e099      	b.n	80094b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009380:	4b88      	ldr	r3, [pc, #544]	@ (80095a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f003 0320 	and.w	r3, r3, #32
 8009388:	2b00      	cmp	r3, #0
 800938a:	d02d      	beq.n	80093e8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800938c:	4b85      	ldr	r3, [pc, #532]	@ (80095a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	08db      	lsrs	r3, r3, #3
 8009392:	f003 0303 	and.w	r3, r3, #3
 8009396:	4a84      	ldr	r2, [pc, #528]	@ (80095a8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009398:	fa22 f303 	lsr.w	r3, r2, r3
 800939c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	ee07 3a90 	vmov	s15, r3
 80093a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	ee07 3a90 	vmov	s15, r3
 80093ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093b6:	4b7b      	ldr	r3, [pc, #492]	@ (80095a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093be:	ee07 3a90 	vmov	s15, r3
 80093c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80093ca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80095ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80093ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80093e6:	e087      	b.n	80094f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	ee07 3a90 	vmov	s15, r3
 80093ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093f2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80095b0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80093f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093fa:	4b6a      	ldr	r3, [pc, #424]	@ (80095a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009402:	ee07 3a90 	vmov	s15, r3
 8009406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800940a:	ed97 6a03 	vldr	s12, [r7, #12]
 800940e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80095ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800941a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800941e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009426:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800942a:	e065      	b.n	80094f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	ee07 3a90 	vmov	s15, r3
 8009432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009436:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80095b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800943a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800943e:	4b59      	ldr	r3, [pc, #356]	@ (80095a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009446:	ee07 3a90 	vmov	s15, r3
 800944a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800944e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009452:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80095ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800945a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800945e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800946a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800946e:	e043      	b.n	80094f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	ee07 3a90 	vmov	s15, r3
 8009476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800947a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80095b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800947e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009482:	4b48      	ldr	r3, [pc, #288]	@ (80095a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800948a:	ee07 3a90 	vmov	s15, r3
 800948e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009492:	ed97 6a03 	vldr	s12, [r7, #12]
 8009496:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80095ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800949a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800949e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094b2:	e021      	b.n	80094f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	ee07 3a90 	vmov	s15, r3
 80094ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094be:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80095b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80094c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094c6:	4b37      	ldr	r3, [pc, #220]	@ (80095a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094ce:	ee07 3a90 	vmov	s15, r3
 80094d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80094da:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80095ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80094de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094f6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80094f8:	4b2a      	ldr	r3, [pc, #168]	@ (80095a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094fc:	0a5b      	lsrs	r3, r3, #9
 80094fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009502:	ee07 3a90 	vmov	s15, r3
 8009506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800950a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800950e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009512:	edd7 6a07 	vldr	s13, [r7, #28]
 8009516:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800951a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800951e:	ee17 2a90 	vmov	r2, s15
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009526:	4b1f      	ldr	r3, [pc, #124]	@ (80095a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800952a:	0c1b      	lsrs	r3, r3, #16
 800952c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009530:	ee07 3a90 	vmov	s15, r3
 8009534:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009538:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800953c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009540:	edd7 6a07 	vldr	s13, [r7, #28]
 8009544:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009548:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800954c:	ee17 2a90 	vmov	r2, s15
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009554:	4b13      	ldr	r3, [pc, #76]	@ (80095a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009558:	0e1b      	lsrs	r3, r3, #24
 800955a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800955e:	ee07 3a90 	vmov	s15, r3
 8009562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009566:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800956a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800956e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009572:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009576:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800957a:	ee17 2a90 	vmov	r2, s15
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009582:	e008      	b.n	8009596 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2200      	movs	r2, #0
 8009588:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2200      	movs	r2, #0
 800958e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2200      	movs	r2, #0
 8009594:	609a      	str	r2, [r3, #8]
}
 8009596:	bf00      	nop
 8009598:	3724      	adds	r7, #36	@ 0x24
 800959a:	46bd      	mov	sp, r7
 800959c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a0:	4770      	bx	lr
 80095a2:	bf00      	nop
 80095a4:	58024400 	.word	0x58024400
 80095a8:	03d09000 	.word	0x03d09000
 80095ac:	46000000 	.word	0x46000000
 80095b0:	4c742400 	.word	0x4c742400
 80095b4:	4a742400 	.word	0x4a742400
 80095b8:	4af42400 	.word	0x4af42400

080095bc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b084      	sub	sp, #16
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80095c6:	2300      	movs	r3, #0
 80095c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80095ca:	4b53      	ldr	r3, [pc, #332]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 80095cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095ce:	f003 0303 	and.w	r3, r3, #3
 80095d2:	2b03      	cmp	r3, #3
 80095d4:	d101      	bne.n	80095da <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80095d6:	2301      	movs	r3, #1
 80095d8:	e099      	b.n	800970e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80095da:	4b4f      	ldr	r3, [pc, #316]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4a4e      	ldr	r2, [pc, #312]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 80095e0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80095e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095e6:	f7f8 fb9f 	bl	8001d28 <HAL_GetTick>
 80095ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80095ec:	e008      	b.n	8009600 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80095ee:	f7f8 fb9b 	bl	8001d28 <HAL_GetTick>
 80095f2:	4602      	mov	r2, r0
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	1ad3      	subs	r3, r2, r3
 80095f8:	2b02      	cmp	r3, #2
 80095fa:	d901      	bls.n	8009600 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80095fc:	2303      	movs	r3, #3
 80095fe:	e086      	b.n	800970e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009600:	4b45      	ldr	r3, [pc, #276]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009608:	2b00      	cmp	r3, #0
 800960a:	d1f0      	bne.n	80095ee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800960c:	4b42      	ldr	r3, [pc, #264]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 800960e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009610:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	031b      	lsls	r3, r3, #12
 800961a:	493f      	ldr	r1, [pc, #252]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 800961c:	4313      	orrs	r3, r2
 800961e:	628b      	str	r3, [r1, #40]	@ 0x28
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	3b01      	subs	r3, #1
 8009626:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	689b      	ldr	r3, [r3, #8]
 800962e:	3b01      	subs	r3, #1
 8009630:	025b      	lsls	r3, r3, #9
 8009632:	b29b      	uxth	r3, r3
 8009634:	431a      	orrs	r2, r3
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	68db      	ldr	r3, [r3, #12]
 800963a:	3b01      	subs	r3, #1
 800963c:	041b      	lsls	r3, r3, #16
 800963e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009642:	431a      	orrs	r2, r3
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	691b      	ldr	r3, [r3, #16]
 8009648:	3b01      	subs	r3, #1
 800964a:	061b      	lsls	r3, r3, #24
 800964c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009650:	4931      	ldr	r1, [pc, #196]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 8009652:	4313      	orrs	r3, r2
 8009654:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009656:	4b30      	ldr	r3, [pc, #192]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 8009658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800965a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	695b      	ldr	r3, [r3, #20]
 8009662:	492d      	ldr	r1, [pc, #180]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 8009664:	4313      	orrs	r3, r2
 8009666:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009668:	4b2b      	ldr	r3, [pc, #172]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 800966a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800966c:	f023 0220 	bic.w	r2, r3, #32
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	699b      	ldr	r3, [r3, #24]
 8009674:	4928      	ldr	r1, [pc, #160]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 8009676:	4313      	orrs	r3, r2
 8009678:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800967a:	4b27      	ldr	r3, [pc, #156]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 800967c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800967e:	4a26      	ldr	r2, [pc, #152]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 8009680:	f023 0310 	bic.w	r3, r3, #16
 8009684:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009686:	4b24      	ldr	r3, [pc, #144]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 8009688:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800968a:	4b24      	ldr	r3, [pc, #144]	@ (800971c <RCCEx_PLL2_Config+0x160>)
 800968c:	4013      	ands	r3, r2
 800968e:	687a      	ldr	r2, [r7, #4]
 8009690:	69d2      	ldr	r2, [r2, #28]
 8009692:	00d2      	lsls	r2, r2, #3
 8009694:	4920      	ldr	r1, [pc, #128]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 8009696:	4313      	orrs	r3, r2
 8009698:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800969a:	4b1f      	ldr	r3, [pc, #124]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 800969c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800969e:	4a1e      	ldr	r2, [pc, #120]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 80096a0:	f043 0310 	orr.w	r3, r3, #16
 80096a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d106      	bne.n	80096ba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80096ac:	4b1a      	ldr	r3, [pc, #104]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 80096ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096b0:	4a19      	ldr	r2, [pc, #100]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 80096b2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80096b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80096b8:	e00f      	b.n	80096da <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	2b01      	cmp	r3, #1
 80096be:	d106      	bne.n	80096ce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80096c0:	4b15      	ldr	r3, [pc, #84]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 80096c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096c4:	4a14      	ldr	r2, [pc, #80]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 80096c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80096ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80096cc:	e005      	b.n	80096da <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80096ce:	4b12      	ldr	r3, [pc, #72]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 80096d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096d2:	4a11      	ldr	r2, [pc, #68]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 80096d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80096d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80096da:	4b0f      	ldr	r3, [pc, #60]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4a0e      	ldr	r2, [pc, #56]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 80096e0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80096e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096e6:	f7f8 fb1f 	bl	8001d28 <HAL_GetTick>
 80096ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80096ec:	e008      	b.n	8009700 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80096ee:	f7f8 fb1b 	bl	8001d28 <HAL_GetTick>
 80096f2:	4602      	mov	r2, r0
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	1ad3      	subs	r3, r2, r3
 80096f8:	2b02      	cmp	r3, #2
 80096fa:	d901      	bls.n	8009700 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80096fc:	2303      	movs	r3, #3
 80096fe:	e006      	b.n	800970e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009700:	4b05      	ldr	r3, [pc, #20]	@ (8009718 <RCCEx_PLL2_Config+0x15c>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009708:	2b00      	cmp	r3, #0
 800970a:	d0f0      	beq.n	80096ee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800970c:	7bfb      	ldrb	r3, [r7, #15]
}
 800970e:	4618      	mov	r0, r3
 8009710:	3710      	adds	r7, #16
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
 8009716:	bf00      	nop
 8009718:	58024400 	.word	0x58024400
 800971c:	ffff0007 	.word	0xffff0007

08009720 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b084      	sub	sp, #16
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800972a:	2300      	movs	r3, #0
 800972c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800972e:	4b53      	ldr	r3, [pc, #332]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 8009730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009732:	f003 0303 	and.w	r3, r3, #3
 8009736:	2b03      	cmp	r3, #3
 8009738:	d101      	bne.n	800973e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800973a:	2301      	movs	r3, #1
 800973c:	e099      	b.n	8009872 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800973e:	4b4f      	ldr	r3, [pc, #316]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4a4e      	ldr	r2, [pc, #312]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 8009744:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009748:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800974a:	f7f8 faed 	bl	8001d28 <HAL_GetTick>
 800974e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009750:	e008      	b.n	8009764 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009752:	f7f8 fae9 	bl	8001d28 <HAL_GetTick>
 8009756:	4602      	mov	r2, r0
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	1ad3      	subs	r3, r2, r3
 800975c:	2b02      	cmp	r3, #2
 800975e:	d901      	bls.n	8009764 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009760:	2303      	movs	r3, #3
 8009762:	e086      	b.n	8009872 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009764:	4b45      	ldr	r3, [pc, #276]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800976c:	2b00      	cmp	r3, #0
 800976e:	d1f0      	bne.n	8009752 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009770:	4b42      	ldr	r3, [pc, #264]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 8009772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009774:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	051b      	lsls	r3, r3, #20
 800977e:	493f      	ldr	r1, [pc, #252]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 8009780:	4313      	orrs	r3, r2
 8009782:	628b      	str	r3, [r1, #40]	@ 0x28
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	3b01      	subs	r3, #1
 800978a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	3b01      	subs	r3, #1
 8009794:	025b      	lsls	r3, r3, #9
 8009796:	b29b      	uxth	r3, r3
 8009798:	431a      	orrs	r2, r3
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	68db      	ldr	r3, [r3, #12]
 800979e:	3b01      	subs	r3, #1
 80097a0:	041b      	lsls	r3, r3, #16
 80097a2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80097a6:	431a      	orrs	r2, r3
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	691b      	ldr	r3, [r3, #16]
 80097ac:	3b01      	subs	r3, #1
 80097ae:	061b      	lsls	r3, r3, #24
 80097b0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80097b4:	4931      	ldr	r1, [pc, #196]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 80097b6:	4313      	orrs	r3, r2
 80097b8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80097ba:	4b30      	ldr	r3, [pc, #192]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 80097bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097be:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	695b      	ldr	r3, [r3, #20]
 80097c6:	492d      	ldr	r1, [pc, #180]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 80097c8:	4313      	orrs	r3, r2
 80097ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80097cc:	4b2b      	ldr	r3, [pc, #172]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 80097ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097d0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	699b      	ldr	r3, [r3, #24]
 80097d8:	4928      	ldr	r1, [pc, #160]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 80097da:	4313      	orrs	r3, r2
 80097dc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80097de:	4b27      	ldr	r3, [pc, #156]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 80097e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097e2:	4a26      	ldr	r2, [pc, #152]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 80097e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80097e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80097ea:	4b24      	ldr	r3, [pc, #144]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 80097ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80097ee:	4b24      	ldr	r3, [pc, #144]	@ (8009880 <RCCEx_PLL3_Config+0x160>)
 80097f0:	4013      	ands	r3, r2
 80097f2:	687a      	ldr	r2, [r7, #4]
 80097f4:	69d2      	ldr	r2, [r2, #28]
 80097f6:	00d2      	lsls	r2, r2, #3
 80097f8:	4920      	ldr	r1, [pc, #128]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 80097fa:	4313      	orrs	r3, r2
 80097fc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80097fe:	4b1f      	ldr	r3, [pc, #124]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 8009800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009802:	4a1e      	ldr	r2, [pc, #120]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 8009804:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009808:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d106      	bne.n	800981e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009810:	4b1a      	ldr	r3, [pc, #104]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 8009812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009814:	4a19      	ldr	r2, [pc, #100]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 8009816:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800981a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800981c:	e00f      	b.n	800983e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	2b01      	cmp	r3, #1
 8009822:	d106      	bne.n	8009832 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009824:	4b15      	ldr	r3, [pc, #84]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 8009826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009828:	4a14      	ldr	r2, [pc, #80]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 800982a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800982e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009830:	e005      	b.n	800983e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009832:	4b12      	ldr	r3, [pc, #72]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 8009834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009836:	4a11      	ldr	r2, [pc, #68]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 8009838:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800983c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800983e:	4b0f      	ldr	r3, [pc, #60]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4a0e      	ldr	r2, [pc, #56]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 8009844:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009848:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800984a:	f7f8 fa6d 	bl	8001d28 <HAL_GetTick>
 800984e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009850:	e008      	b.n	8009864 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009852:	f7f8 fa69 	bl	8001d28 <HAL_GetTick>
 8009856:	4602      	mov	r2, r0
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	1ad3      	subs	r3, r2, r3
 800985c:	2b02      	cmp	r3, #2
 800985e:	d901      	bls.n	8009864 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009860:	2303      	movs	r3, #3
 8009862:	e006      	b.n	8009872 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009864:	4b05      	ldr	r3, [pc, #20]	@ (800987c <RCCEx_PLL3_Config+0x15c>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800986c:	2b00      	cmp	r3, #0
 800986e:	d0f0      	beq.n	8009852 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009870:	7bfb      	ldrb	r3, [r7, #15]
}
 8009872:	4618      	mov	r0, r3
 8009874:	3710      	adds	r7, #16
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}
 800987a:	bf00      	nop
 800987c:	58024400 	.word	0x58024400
 8009880:	ffff0007 	.word	0xffff0007

08009884 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b082      	sub	sp, #8
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d101      	bne.n	8009896 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009892:	2301      	movs	r3, #1
 8009894:	e042      	b.n	800991c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800989c:	2b00      	cmp	r3, #0
 800989e:	d106      	bne.n	80098ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2200      	movs	r2, #0
 80098a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f7f7 ffcb 	bl	8001844 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2224      	movs	r2, #36	@ 0x24
 80098b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f022 0201 	bic.w	r2, r2, #1
 80098c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 f8ba 	bl	8009a40 <UART_SetConfig>
 80098cc:	4603      	mov	r3, r0
 80098ce:	2b01      	cmp	r3, #1
 80098d0:	d101      	bne.n	80098d6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80098d2:	2301      	movs	r3, #1
 80098d4:	e022      	b.n	800991c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d002      	beq.n	80098e4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 ff1a 	bl	800a718 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	685a      	ldr	r2, [r3, #4]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80098f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	689a      	ldr	r2, [r3, #8]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009902:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	681a      	ldr	r2, [r3, #0]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f042 0201 	orr.w	r2, r2, #1
 8009912:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f000 ffa1 	bl	800a85c <UART_CheckIdleState>
 800991a:	4603      	mov	r3, r0
}
 800991c:	4618      	mov	r0, r3
 800991e:	3708      	adds	r7, #8
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b08a      	sub	sp, #40	@ 0x28
 8009928:	af02      	add	r7, sp, #8
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	603b      	str	r3, [r7, #0]
 8009930:	4613      	mov	r3, r2
 8009932:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800993a:	2b20      	cmp	r3, #32
 800993c:	d17b      	bne.n	8009a36 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d002      	beq.n	800994a <HAL_UART_Transmit+0x26>
 8009944:	88fb      	ldrh	r3, [r7, #6]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d101      	bne.n	800994e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800994a:	2301      	movs	r3, #1
 800994c:	e074      	b.n	8009a38 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2200      	movs	r2, #0
 8009952:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2221      	movs	r2, #33	@ 0x21
 800995a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800995e:	f7f8 f9e3 	bl	8001d28 <HAL_GetTick>
 8009962:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	88fa      	ldrh	r2, [r7, #6]
 8009968:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	88fa      	ldrh	r2, [r7, #6]
 8009970:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	689b      	ldr	r3, [r3, #8]
 8009978:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800997c:	d108      	bne.n	8009990 <HAL_UART_Transmit+0x6c>
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	691b      	ldr	r3, [r3, #16]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d104      	bne.n	8009990 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009986:	2300      	movs	r3, #0
 8009988:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	61bb      	str	r3, [r7, #24]
 800998e:	e003      	b.n	8009998 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009994:	2300      	movs	r3, #0
 8009996:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009998:	e030      	b.n	80099fc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	9300      	str	r3, [sp, #0]
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	2200      	movs	r2, #0
 80099a2:	2180      	movs	r1, #128	@ 0x80
 80099a4:	68f8      	ldr	r0, [r7, #12]
 80099a6:	f001 f803 	bl	800a9b0 <UART_WaitOnFlagUntilTimeout>
 80099aa:	4603      	mov	r3, r0
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d005      	beq.n	80099bc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2220      	movs	r2, #32
 80099b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80099b8:	2303      	movs	r3, #3
 80099ba:	e03d      	b.n	8009a38 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80099bc:	69fb      	ldr	r3, [r7, #28]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d10b      	bne.n	80099da <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80099c2:	69bb      	ldr	r3, [r7, #24]
 80099c4:	881b      	ldrh	r3, [r3, #0]
 80099c6:	461a      	mov	r2, r3
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80099d0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80099d2:	69bb      	ldr	r3, [r7, #24]
 80099d4:	3302      	adds	r3, #2
 80099d6:	61bb      	str	r3, [r7, #24]
 80099d8:	e007      	b.n	80099ea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80099da:	69fb      	ldr	r3, [r7, #28]
 80099dc:	781a      	ldrb	r2, [r3, #0]
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80099e4:	69fb      	ldr	r3, [r7, #28]
 80099e6:	3301      	adds	r3, #1
 80099e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	3b01      	subs	r3, #1
 80099f4:	b29a      	uxth	r2, r3
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009a02:	b29b      	uxth	r3, r3
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d1c8      	bne.n	800999a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	9300      	str	r3, [sp, #0]
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	2140      	movs	r1, #64	@ 0x40
 8009a12:	68f8      	ldr	r0, [r7, #12]
 8009a14:	f000 ffcc 	bl	800a9b0 <UART_WaitOnFlagUntilTimeout>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d005      	beq.n	8009a2a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2220      	movs	r2, #32
 8009a22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009a26:	2303      	movs	r3, #3
 8009a28:	e006      	b.n	8009a38 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	2220      	movs	r2, #32
 8009a2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009a32:	2300      	movs	r3, #0
 8009a34:	e000      	b.n	8009a38 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009a36:	2302      	movs	r3, #2
  }
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3720      	adds	r7, #32
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a44:	b092      	sub	sp, #72	@ 0x48
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	689a      	ldr	r2, [r3, #8]
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	691b      	ldr	r3, [r3, #16]
 8009a58:	431a      	orrs	r2, r3
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	695b      	ldr	r3, [r3, #20]
 8009a5e:	431a      	orrs	r2, r3
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	69db      	ldr	r3, [r3, #28]
 8009a64:	4313      	orrs	r3, r2
 8009a66:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	681a      	ldr	r2, [r3, #0]
 8009a6e:	4bbe      	ldr	r3, [pc, #760]	@ (8009d68 <UART_SetConfig+0x328>)
 8009a70:	4013      	ands	r3, r2
 8009a72:	697a      	ldr	r2, [r7, #20]
 8009a74:	6812      	ldr	r2, [r2, #0]
 8009a76:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009a78:	430b      	orrs	r3, r1
 8009a7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	68da      	ldr	r2, [r3, #12]
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	430a      	orrs	r2, r1
 8009a90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	699b      	ldr	r3, [r3, #24]
 8009a96:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4ab3      	ldr	r2, [pc, #716]	@ (8009d6c <UART_SetConfig+0x32c>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d004      	beq.n	8009aac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	6a1b      	ldr	r3, [r3, #32]
 8009aa6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	689a      	ldr	r2, [r3, #8]
 8009ab2:	4baf      	ldr	r3, [pc, #700]	@ (8009d70 <UART_SetConfig+0x330>)
 8009ab4:	4013      	ands	r3, r2
 8009ab6:	697a      	ldr	r2, [r7, #20]
 8009ab8:	6812      	ldr	r2, [r2, #0]
 8009aba:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009abc:	430b      	orrs	r3, r1
 8009abe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ac6:	f023 010f 	bic.w	r1, r3, #15
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	430a      	orrs	r2, r1
 8009ad4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4aa6      	ldr	r2, [pc, #664]	@ (8009d74 <UART_SetConfig+0x334>)
 8009adc:	4293      	cmp	r3, r2
 8009ade:	d177      	bne.n	8009bd0 <UART_SetConfig+0x190>
 8009ae0:	4ba5      	ldr	r3, [pc, #660]	@ (8009d78 <UART_SetConfig+0x338>)
 8009ae2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ae4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009ae8:	2b28      	cmp	r3, #40	@ 0x28
 8009aea:	d86d      	bhi.n	8009bc8 <UART_SetConfig+0x188>
 8009aec:	a201      	add	r2, pc, #4	@ (adr r2, 8009af4 <UART_SetConfig+0xb4>)
 8009aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af2:	bf00      	nop
 8009af4:	08009b99 	.word	0x08009b99
 8009af8:	08009bc9 	.word	0x08009bc9
 8009afc:	08009bc9 	.word	0x08009bc9
 8009b00:	08009bc9 	.word	0x08009bc9
 8009b04:	08009bc9 	.word	0x08009bc9
 8009b08:	08009bc9 	.word	0x08009bc9
 8009b0c:	08009bc9 	.word	0x08009bc9
 8009b10:	08009bc9 	.word	0x08009bc9
 8009b14:	08009ba1 	.word	0x08009ba1
 8009b18:	08009bc9 	.word	0x08009bc9
 8009b1c:	08009bc9 	.word	0x08009bc9
 8009b20:	08009bc9 	.word	0x08009bc9
 8009b24:	08009bc9 	.word	0x08009bc9
 8009b28:	08009bc9 	.word	0x08009bc9
 8009b2c:	08009bc9 	.word	0x08009bc9
 8009b30:	08009bc9 	.word	0x08009bc9
 8009b34:	08009ba9 	.word	0x08009ba9
 8009b38:	08009bc9 	.word	0x08009bc9
 8009b3c:	08009bc9 	.word	0x08009bc9
 8009b40:	08009bc9 	.word	0x08009bc9
 8009b44:	08009bc9 	.word	0x08009bc9
 8009b48:	08009bc9 	.word	0x08009bc9
 8009b4c:	08009bc9 	.word	0x08009bc9
 8009b50:	08009bc9 	.word	0x08009bc9
 8009b54:	08009bb1 	.word	0x08009bb1
 8009b58:	08009bc9 	.word	0x08009bc9
 8009b5c:	08009bc9 	.word	0x08009bc9
 8009b60:	08009bc9 	.word	0x08009bc9
 8009b64:	08009bc9 	.word	0x08009bc9
 8009b68:	08009bc9 	.word	0x08009bc9
 8009b6c:	08009bc9 	.word	0x08009bc9
 8009b70:	08009bc9 	.word	0x08009bc9
 8009b74:	08009bb9 	.word	0x08009bb9
 8009b78:	08009bc9 	.word	0x08009bc9
 8009b7c:	08009bc9 	.word	0x08009bc9
 8009b80:	08009bc9 	.word	0x08009bc9
 8009b84:	08009bc9 	.word	0x08009bc9
 8009b88:	08009bc9 	.word	0x08009bc9
 8009b8c:	08009bc9 	.word	0x08009bc9
 8009b90:	08009bc9 	.word	0x08009bc9
 8009b94:	08009bc1 	.word	0x08009bc1
 8009b98:	2301      	movs	r3, #1
 8009b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b9e:	e326      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009ba0:	2304      	movs	r3, #4
 8009ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ba6:	e322      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009ba8:	2308      	movs	r3, #8
 8009baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bae:	e31e      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009bb0:	2310      	movs	r3, #16
 8009bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bb6:	e31a      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009bb8:	2320      	movs	r3, #32
 8009bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bbe:	e316      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009bc0:	2340      	movs	r3, #64	@ 0x40
 8009bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bc6:	e312      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009bc8:	2380      	movs	r3, #128	@ 0x80
 8009bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bce:	e30e      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009bd0:	697b      	ldr	r3, [r7, #20]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4a69      	ldr	r2, [pc, #420]	@ (8009d7c <UART_SetConfig+0x33c>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d130      	bne.n	8009c3c <UART_SetConfig+0x1fc>
 8009bda:	4b67      	ldr	r3, [pc, #412]	@ (8009d78 <UART_SetConfig+0x338>)
 8009bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bde:	f003 0307 	and.w	r3, r3, #7
 8009be2:	2b05      	cmp	r3, #5
 8009be4:	d826      	bhi.n	8009c34 <UART_SetConfig+0x1f4>
 8009be6:	a201      	add	r2, pc, #4	@ (adr r2, 8009bec <UART_SetConfig+0x1ac>)
 8009be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bec:	08009c05 	.word	0x08009c05
 8009bf0:	08009c0d 	.word	0x08009c0d
 8009bf4:	08009c15 	.word	0x08009c15
 8009bf8:	08009c1d 	.word	0x08009c1d
 8009bfc:	08009c25 	.word	0x08009c25
 8009c00:	08009c2d 	.word	0x08009c2d
 8009c04:	2300      	movs	r3, #0
 8009c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c0a:	e2f0      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009c0c:	2304      	movs	r3, #4
 8009c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c12:	e2ec      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009c14:	2308      	movs	r3, #8
 8009c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c1a:	e2e8      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009c1c:	2310      	movs	r3, #16
 8009c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c22:	e2e4      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009c24:	2320      	movs	r3, #32
 8009c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c2a:	e2e0      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009c2c:	2340      	movs	r3, #64	@ 0x40
 8009c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c32:	e2dc      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009c34:	2380      	movs	r3, #128	@ 0x80
 8009c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c3a:	e2d8      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4a4f      	ldr	r2, [pc, #316]	@ (8009d80 <UART_SetConfig+0x340>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d130      	bne.n	8009ca8 <UART_SetConfig+0x268>
 8009c46:	4b4c      	ldr	r3, [pc, #304]	@ (8009d78 <UART_SetConfig+0x338>)
 8009c48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c4a:	f003 0307 	and.w	r3, r3, #7
 8009c4e:	2b05      	cmp	r3, #5
 8009c50:	d826      	bhi.n	8009ca0 <UART_SetConfig+0x260>
 8009c52:	a201      	add	r2, pc, #4	@ (adr r2, 8009c58 <UART_SetConfig+0x218>)
 8009c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c58:	08009c71 	.word	0x08009c71
 8009c5c:	08009c79 	.word	0x08009c79
 8009c60:	08009c81 	.word	0x08009c81
 8009c64:	08009c89 	.word	0x08009c89
 8009c68:	08009c91 	.word	0x08009c91
 8009c6c:	08009c99 	.word	0x08009c99
 8009c70:	2300      	movs	r3, #0
 8009c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c76:	e2ba      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009c78:	2304      	movs	r3, #4
 8009c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c7e:	e2b6      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009c80:	2308      	movs	r3, #8
 8009c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c86:	e2b2      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009c88:	2310      	movs	r3, #16
 8009c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c8e:	e2ae      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009c90:	2320      	movs	r3, #32
 8009c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c96:	e2aa      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009c98:	2340      	movs	r3, #64	@ 0x40
 8009c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c9e:	e2a6      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009ca0:	2380      	movs	r3, #128	@ 0x80
 8009ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ca6:	e2a2      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4a35      	ldr	r2, [pc, #212]	@ (8009d84 <UART_SetConfig+0x344>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d130      	bne.n	8009d14 <UART_SetConfig+0x2d4>
 8009cb2:	4b31      	ldr	r3, [pc, #196]	@ (8009d78 <UART_SetConfig+0x338>)
 8009cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cb6:	f003 0307 	and.w	r3, r3, #7
 8009cba:	2b05      	cmp	r3, #5
 8009cbc:	d826      	bhi.n	8009d0c <UART_SetConfig+0x2cc>
 8009cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8009cc4 <UART_SetConfig+0x284>)
 8009cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cc4:	08009cdd 	.word	0x08009cdd
 8009cc8:	08009ce5 	.word	0x08009ce5
 8009ccc:	08009ced 	.word	0x08009ced
 8009cd0:	08009cf5 	.word	0x08009cf5
 8009cd4:	08009cfd 	.word	0x08009cfd
 8009cd8:	08009d05 	.word	0x08009d05
 8009cdc:	2300      	movs	r3, #0
 8009cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ce2:	e284      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009ce4:	2304      	movs	r3, #4
 8009ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cea:	e280      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009cec:	2308      	movs	r3, #8
 8009cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cf2:	e27c      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009cf4:	2310      	movs	r3, #16
 8009cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cfa:	e278      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009cfc:	2320      	movs	r3, #32
 8009cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d02:	e274      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009d04:	2340      	movs	r3, #64	@ 0x40
 8009d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d0a:	e270      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009d0c:	2380      	movs	r3, #128	@ 0x80
 8009d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d12:	e26c      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4a1b      	ldr	r2, [pc, #108]	@ (8009d88 <UART_SetConfig+0x348>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d142      	bne.n	8009da4 <UART_SetConfig+0x364>
 8009d1e:	4b16      	ldr	r3, [pc, #88]	@ (8009d78 <UART_SetConfig+0x338>)
 8009d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d22:	f003 0307 	and.w	r3, r3, #7
 8009d26:	2b05      	cmp	r3, #5
 8009d28:	d838      	bhi.n	8009d9c <UART_SetConfig+0x35c>
 8009d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8009d30 <UART_SetConfig+0x2f0>)
 8009d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d30:	08009d49 	.word	0x08009d49
 8009d34:	08009d51 	.word	0x08009d51
 8009d38:	08009d59 	.word	0x08009d59
 8009d3c:	08009d61 	.word	0x08009d61
 8009d40:	08009d8d 	.word	0x08009d8d
 8009d44:	08009d95 	.word	0x08009d95
 8009d48:	2300      	movs	r3, #0
 8009d4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d4e:	e24e      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009d50:	2304      	movs	r3, #4
 8009d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d56:	e24a      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009d58:	2308      	movs	r3, #8
 8009d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d5e:	e246      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009d60:	2310      	movs	r3, #16
 8009d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d66:	e242      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009d68:	cfff69f3 	.word	0xcfff69f3
 8009d6c:	58000c00 	.word	0x58000c00
 8009d70:	11fff4ff 	.word	0x11fff4ff
 8009d74:	40011000 	.word	0x40011000
 8009d78:	58024400 	.word	0x58024400
 8009d7c:	40004400 	.word	0x40004400
 8009d80:	40004800 	.word	0x40004800
 8009d84:	40004c00 	.word	0x40004c00
 8009d88:	40005000 	.word	0x40005000
 8009d8c:	2320      	movs	r3, #32
 8009d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d92:	e22c      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009d94:	2340      	movs	r3, #64	@ 0x40
 8009d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d9a:	e228      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009d9c:	2380      	movs	r3, #128	@ 0x80
 8009d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009da2:	e224      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	4ab1      	ldr	r2, [pc, #708]	@ (800a070 <UART_SetConfig+0x630>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d176      	bne.n	8009e9c <UART_SetConfig+0x45c>
 8009dae:	4bb1      	ldr	r3, [pc, #708]	@ (800a074 <UART_SetConfig+0x634>)
 8009db0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009db2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009db6:	2b28      	cmp	r3, #40	@ 0x28
 8009db8:	d86c      	bhi.n	8009e94 <UART_SetConfig+0x454>
 8009dba:	a201      	add	r2, pc, #4	@ (adr r2, 8009dc0 <UART_SetConfig+0x380>)
 8009dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dc0:	08009e65 	.word	0x08009e65
 8009dc4:	08009e95 	.word	0x08009e95
 8009dc8:	08009e95 	.word	0x08009e95
 8009dcc:	08009e95 	.word	0x08009e95
 8009dd0:	08009e95 	.word	0x08009e95
 8009dd4:	08009e95 	.word	0x08009e95
 8009dd8:	08009e95 	.word	0x08009e95
 8009ddc:	08009e95 	.word	0x08009e95
 8009de0:	08009e6d 	.word	0x08009e6d
 8009de4:	08009e95 	.word	0x08009e95
 8009de8:	08009e95 	.word	0x08009e95
 8009dec:	08009e95 	.word	0x08009e95
 8009df0:	08009e95 	.word	0x08009e95
 8009df4:	08009e95 	.word	0x08009e95
 8009df8:	08009e95 	.word	0x08009e95
 8009dfc:	08009e95 	.word	0x08009e95
 8009e00:	08009e75 	.word	0x08009e75
 8009e04:	08009e95 	.word	0x08009e95
 8009e08:	08009e95 	.word	0x08009e95
 8009e0c:	08009e95 	.word	0x08009e95
 8009e10:	08009e95 	.word	0x08009e95
 8009e14:	08009e95 	.word	0x08009e95
 8009e18:	08009e95 	.word	0x08009e95
 8009e1c:	08009e95 	.word	0x08009e95
 8009e20:	08009e7d 	.word	0x08009e7d
 8009e24:	08009e95 	.word	0x08009e95
 8009e28:	08009e95 	.word	0x08009e95
 8009e2c:	08009e95 	.word	0x08009e95
 8009e30:	08009e95 	.word	0x08009e95
 8009e34:	08009e95 	.word	0x08009e95
 8009e38:	08009e95 	.word	0x08009e95
 8009e3c:	08009e95 	.word	0x08009e95
 8009e40:	08009e85 	.word	0x08009e85
 8009e44:	08009e95 	.word	0x08009e95
 8009e48:	08009e95 	.word	0x08009e95
 8009e4c:	08009e95 	.word	0x08009e95
 8009e50:	08009e95 	.word	0x08009e95
 8009e54:	08009e95 	.word	0x08009e95
 8009e58:	08009e95 	.word	0x08009e95
 8009e5c:	08009e95 	.word	0x08009e95
 8009e60:	08009e8d 	.word	0x08009e8d
 8009e64:	2301      	movs	r3, #1
 8009e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e6a:	e1c0      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009e6c:	2304      	movs	r3, #4
 8009e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e72:	e1bc      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009e74:	2308      	movs	r3, #8
 8009e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e7a:	e1b8      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009e7c:	2310      	movs	r3, #16
 8009e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e82:	e1b4      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009e84:	2320      	movs	r3, #32
 8009e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e8a:	e1b0      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009e8c:	2340      	movs	r3, #64	@ 0x40
 8009e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e92:	e1ac      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009e94:	2380      	movs	r3, #128	@ 0x80
 8009e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e9a:	e1a8      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4a75      	ldr	r2, [pc, #468]	@ (800a078 <UART_SetConfig+0x638>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d130      	bne.n	8009f08 <UART_SetConfig+0x4c8>
 8009ea6:	4b73      	ldr	r3, [pc, #460]	@ (800a074 <UART_SetConfig+0x634>)
 8009ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009eaa:	f003 0307 	and.w	r3, r3, #7
 8009eae:	2b05      	cmp	r3, #5
 8009eb0:	d826      	bhi.n	8009f00 <UART_SetConfig+0x4c0>
 8009eb2:	a201      	add	r2, pc, #4	@ (adr r2, 8009eb8 <UART_SetConfig+0x478>)
 8009eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eb8:	08009ed1 	.word	0x08009ed1
 8009ebc:	08009ed9 	.word	0x08009ed9
 8009ec0:	08009ee1 	.word	0x08009ee1
 8009ec4:	08009ee9 	.word	0x08009ee9
 8009ec8:	08009ef1 	.word	0x08009ef1
 8009ecc:	08009ef9 	.word	0x08009ef9
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ed6:	e18a      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009ed8:	2304      	movs	r3, #4
 8009eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ede:	e186      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009ee0:	2308      	movs	r3, #8
 8009ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ee6:	e182      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009ee8:	2310      	movs	r3, #16
 8009eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eee:	e17e      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009ef0:	2320      	movs	r3, #32
 8009ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ef6:	e17a      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009ef8:	2340      	movs	r3, #64	@ 0x40
 8009efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009efe:	e176      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009f00:	2380      	movs	r3, #128	@ 0x80
 8009f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f06:	e172      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	4a5b      	ldr	r2, [pc, #364]	@ (800a07c <UART_SetConfig+0x63c>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d130      	bne.n	8009f74 <UART_SetConfig+0x534>
 8009f12:	4b58      	ldr	r3, [pc, #352]	@ (800a074 <UART_SetConfig+0x634>)
 8009f14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f16:	f003 0307 	and.w	r3, r3, #7
 8009f1a:	2b05      	cmp	r3, #5
 8009f1c:	d826      	bhi.n	8009f6c <UART_SetConfig+0x52c>
 8009f1e:	a201      	add	r2, pc, #4	@ (adr r2, 8009f24 <UART_SetConfig+0x4e4>)
 8009f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f24:	08009f3d 	.word	0x08009f3d
 8009f28:	08009f45 	.word	0x08009f45
 8009f2c:	08009f4d 	.word	0x08009f4d
 8009f30:	08009f55 	.word	0x08009f55
 8009f34:	08009f5d 	.word	0x08009f5d
 8009f38:	08009f65 	.word	0x08009f65
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f42:	e154      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009f44:	2304      	movs	r3, #4
 8009f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f4a:	e150      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009f4c:	2308      	movs	r3, #8
 8009f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f52:	e14c      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009f54:	2310      	movs	r3, #16
 8009f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f5a:	e148      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009f5c:	2320      	movs	r3, #32
 8009f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f62:	e144      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009f64:	2340      	movs	r3, #64	@ 0x40
 8009f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f6a:	e140      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009f6c:	2380      	movs	r3, #128	@ 0x80
 8009f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f72:	e13c      	b.n	800a1ee <UART_SetConfig+0x7ae>
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	4a41      	ldr	r2, [pc, #260]	@ (800a080 <UART_SetConfig+0x640>)
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	f040 8082 	bne.w	800a084 <UART_SetConfig+0x644>
 8009f80:	4b3c      	ldr	r3, [pc, #240]	@ (800a074 <UART_SetConfig+0x634>)
 8009f82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f84:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009f88:	2b28      	cmp	r3, #40	@ 0x28
 8009f8a:	d86d      	bhi.n	800a068 <UART_SetConfig+0x628>
 8009f8c:	a201      	add	r2, pc, #4	@ (adr r2, 8009f94 <UART_SetConfig+0x554>)
 8009f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f92:	bf00      	nop
 8009f94:	0800a039 	.word	0x0800a039
 8009f98:	0800a069 	.word	0x0800a069
 8009f9c:	0800a069 	.word	0x0800a069
 8009fa0:	0800a069 	.word	0x0800a069
 8009fa4:	0800a069 	.word	0x0800a069
 8009fa8:	0800a069 	.word	0x0800a069
 8009fac:	0800a069 	.word	0x0800a069
 8009fb0:	0800a069 	.word	0x0800a069
 8009fb4:	0800a041 	.word	0x0800a041
 8009fb8:	0800a069 	.word	0x0800a069
 8009fbc:	0800a069 	.word	0x0800a069
 8009fc0:	0800a069 	.word	0x0800a069
 8009fc4:	0800a069 	.word	0x0800a069
 8009fc8:	0800a069 	.word	0x0800a069
 8009fcc:	0800a069 	.word	0x0800a069
 8009fd0:	0800a069 	.word	0x0800a069
 8009fd4:	0800a049 	.word	0x0800a049
 8009fd8:	0800a069 	.word	0x0800a069
 8009fdc:	0800a069 	.word	0x0800a069
 8009fe0:	0800a069 	.word	0x0800a069
 8009fe4:	0800a069 	.word	0x0800a069
 8009fe8:	0800a069 	.word	0x0800a069
 8009fec:	0800a069 	.word	0x0800a069
 8009ff0:	0800a069 	.word	0x0800a069
 8009ff4:	0800a051 	.word	0x0800a051
 8009ff8:	0800a069 	.word	0x0800a069
 8009ffc:	0800a069 	.word	0x0800a069
 800a000:	0800a069 	.word	0x0800a069
 800a004:	0800a069 	.word	0x0800a069
 800a008:	0800a069 	.word	0x0800a069
 800a00c:	0800a069 	.word	0x0800a069
 800a010:	0800a069 	.word	0x0800a069
 800a014:	0800a059 	.word	0x0800a059
 800a018:	0800a069 	.word	0x0800a069
 800a01c:	0800a069 	.word	0x0800a069
 800a020:	0800a069 	.word	0x0800a069
 800a024:	0800a069 	.word	0x0800a069
 800a028:	0800a069 	.word	0x0800a069
 800a02c:	0800a069 	.word	0x0800a069
 800a030:	0800a069 	.word	0x0800a069
 800a034:	0800a061 	.word	0x0800a061
 800a038:	2301      	movs	r3, #1
 800a03a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a03e:	e0d6      	b.n	800a1ee <UART_SetConfig+0x7ae>
 800a040:	2304      	movs	r3, #4
 800a042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a046:	e0d2      	b.n	800a1ee <UART_SetConfig+0x7ae>
 800a048:	2308      	movs	r3, #8
 800a04a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a04e:	e0ce      	b.n	800a1ee <UART_SetConfig+0x7ae>
 800a050:	2310      	movs	r3, #16
 800a052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a056:	e0ca      	b.n	800a1ee <UART_SetConfig+0x7ae>
 800a058:	2320      	movs	r3, #32
 800a05a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a05e:	e0c6      	b.n	800a1ee <UART_SetConfig+0x7ae>
 800a060:	2340      	movs	r3, #64	@ 0x40
 800a062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a066:	e0c2      	b.n	800a1ee <UART_SetConfig+0x7ae>
 800a068:	2380      	movs	r3, #128	@ 0x80
 800a06a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a06e:	e0be      	b.n	800a1ee <UART_SetConfig+0x7ae>
 800a070:	40011400 	.word	0x40011400
 800a074:	58024400 	.word	0x58024400
 800a078:	40007800 	.word	0x40007800
 800a07c:	40007c00 	.word	0x40007c00
 800a080:	40011800 	.word	0x40011800
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4aad      	ldr	r2, [pc, #692]	@ (800a340 <UART_SetConfig+0x900>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d176      	bne.n	800a17c <UART_SetConfig+0x73c>
 800a08e:	4bad      	ldr	r3, [pc, #692]	@ (800a344 <UART_SetConfig+0x904>)
 800a090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a092:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a096:	2b28      	cmp	r3, #40	@ 0x28
 800a098:	d86c      	bhi.n	800a174 <UART_SetConfig+0x734>
 800a09a:	a201      	add	r2, pc, #4	@ (adr r2, 800a0a0 <UART_SetConfig+0x660>)
 800a09c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0a0:	0800a145 	.word	0x0800a145
 800a0a4:	0800a175 	.word	0x0800a175
 800a0a8:	0800a175 	.word	0x0800a175
 800a0ac:	0800a175 	.word	0x0800a175
 800a0b0:	0800a175 	.word	0x0800a175
 800a0b4:	0800a175 	.word	0x0800a175
 800a0b8:	0800a175 	.word	0x0800a175
 800a0bc:	0800a175 	.word	0x0800a175
 800a0c0:	0800a14d 	.word	0x0800a14d
 800a0c4:	0800a175 	.word	0x0800a175
 800a0c8:	0800a175 	.word	0x0800a175
 800a0cc:	0800a175 	.word	0x0800a175
 800a0d0:	0800a175 	.word	0x0800a175
 800a0d4:	0800a175 	.word	0x0800a175
 800a0d8:	0800a175 	.word	0x0800a175
 800a0dc:	0800a175 	.word	0x0800a175
 800a0e0:	0800a155 	.word	0x0800a155
 800a0e4:	0800a175 	.word	0x0800a175
 800a0e8:	0800a175 	.word	0x0800a175
 800a0ec:	0800a175 	.word	0x0800a175
 800a0f0:	0800a175 	.word	0x0800a175
 800a0f4:	0800a175 	.word	0x0800a175
 800a0f8:	0800a175 	.word	0x0800a175
 800a0fc:	0800a175 	.word	0x0800a175
 800a100:	0800a15d 	.word	0x0800a15d
 800a104:	0800a175 	.word	0x0800a175
 800a108:	0800a175 	.word	0x0800a175
 800a10c:	0800a175 	.word	0x0800a175
 800a110:	0800a175 	.word	0x0800a175
 800a114:	0800a175 	.word	0x0800a175
 800a118:	0800a175 	.word	0x0800a175
 800a11c:	0800a175 	.word	0x0800a175
 800a120:	0800a165 	.word	0x0800a165
 800a124:	0800a175 	.word	0x0800a175
 800a128:	0800a175 	.word	0x0800a175
 800a12c:	0800a175 	.word	0x0800a175
 800a130:	0800a175 	.word	0x0800a175
 800a134:	0800a175 	.word	0x0800a175
 800a138:	0800a175 	.word	0x0800a175
 800a13c:	0800a175 	.word	0x0800a175
 800a140:	0800a16d 	.word	0x0800a16d
 800a144:	2301      	movs	r3, #1
 800a146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a14a:	e050      	b.n	800a1ee <UART_SetConfig+0x7ae>
 800a14c:	2304      	movs	r3, #4
 800a14e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a152:	e04c      	b.n	800a1ee <UART_SetConfig+0x7ae>
 800a154:	2308      	movs	r3, #8
 800a156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a15a:	e048      	b.n	800a1ee <UART_SetConfig+0x7ae>
 800a15c:	2310      	movs	r3, #16
 800a15e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a162:	e044      	b.n	800a1ee <UART_SetConfig+0x7ae>
 800a164:	2320      	movs	r3, #32
 800a166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a16a:	e040      	b.n	800a1ee <UART_SetConfig+0x7ae>
 800a16c:	2340      	movs	r3, #64	@ 0x40
 800a16e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a172:	e03c      	b.n	800a1ee <UART_SetConfig+0x7ae>
 800a174:	2380      	movs	r3, #128	@ 0x80
 800a176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a17a:	e038      	b.n	800a1ee <UART_SetConfig+0x7ae>
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4a71      	ldr	r2, [pc, #452]	@ (800a348 <UART_SetConfig+0x908>)
 800a182:	4293      	cmp	r3, r2
 800a184:	d130      	bne.n	800a1e8 <UART_SetConfig+0x7a8>
 800a186:	4b6f      	ldr	r3, [pc, #444]	@ (800a344 <UART_SetConfig+0x904>)
 800a188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a18a:	f003 0307 	and.w	r3, r3, #7
 800a18e:	2b05      	cmp	r3, #5
 800a190:	d826      	bhi.n	800a1e0 <UART_SetConfig+0x7a0>
 800a192:	a201      	add	r2, pc, #4	@ (adr r2, 800a198 <UART_SetConfig+0x758>)
 800a194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a198:	0800a1b1 	.word	0x0800a1b1
 800a19c:	0800a1b9 	.word	0x0800a1b9
 800a1a0:	0800a1c1 	.word	0x0800a1c1
 800a1a4:	0800a1c9 	.word	0x0800a1c9
 800a1a8:	0800a1d1 	.word	0x0800a1d1
 800a1ac:	0800a1d9 	.word	0x0800a1d9
 800a1b0:	2302      	movs	r3, #2
 800a1b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1b6:	e01a      	b.n	800a1ee <UART_SetConfig+0x7ae>
 800a1b8:	2304      	movs	r3, #4
 800a1ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1be:	e016      	b.n	800a1ee <UART_SetConfig+0x7ae>
 800a1c0:	2308      	movs	r3, #8
 800a1c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1c6:	e012      	b.n	800a1ee <UART_SetConfig+0x7ae>
 800a1c8:	2310      	movs	r3, #16
 800a1ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1ce:	e00e      	b.n	800a1ee <UART_SetConfig+0x7ae>
 800a1d0:	2320      	movs	r3, #32
 800a1d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1d6:	e00a      	b.n	800a1ee <UART_SetConfig+0x7ae>
 800a1d8:	2340      	movs	r3, #64	@ 0x40
 800a1da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1de:	e006      	b.n	800a1ee <UART_SetConfig+0x7ae>
 800a1e0:	2380      	movs	r3, #128	@ 0x80
 800a1e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1e6:	e002      	b.n	800a1ee <UART_SetConfig+0x7ae>
 800a1e8:	2380      	movs	r3, #128	@ 0x80
 800a1ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	4a55      	ldr	r2, [pc, #340]	@ (800a348 <UART_SetConfig+0x908>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	f040 80f8 	bne.w	800a3ea <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a1fa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a1fe:	2b20      	cmp	r3, #32
 800a200:	dc46      	bgt.n	800a290 <UART_SetConfig+0x850>
 800a202:	2b02      	cmp	r3, #2
 800a204:	db75      	blt.n	800a2f2 <UART_SetConfig+0x8b2>
 800a206:	3b02      	subs	r3, #2
 800a208:	2b1e      	cmp	r3, #30
 800a20a:	d872      	bhi.n	800a2f2 <UART_SetConfig+0x8b2>
 800a20c:	a201      	add	r2, pc, #4	@ (adr r2, 800a214 <UART_SetConfig+0x7d4>)
 800a20e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a212:	bf00      	nop
 800a214:	0800a297 	.word	0x0800a297
 800a218:	0800a2f3 	.word	0x0800a2f3
 800a21c:	0800a29f 	.word	0x0800a29f
 800a220:	0800a2f3 	.word	0x0800a2f3
 800a224:	0800a2f3 	.word	0x0800a2f3
 800a228:	0800a2f3 	.word	0x0800a2f3
 800a22c:	0800a2af 	.word	0x0800a2af
 800a230:	0800a2f3 	.word	0x0800a2f3
 800a234:	0800a2f3 	.word	0x0800a2f3
 800a238:	0800a2f3 	.word	0x0800a2f3
 800a23c:	0800a2f3 	.word	0x0800a2f3
 800a240:	0800a2f3 	.word	0x0800a2f3
 800a244:	0800a2f3 	.word	0x0800a2f3
 800a248:	0800a2f3 	.word	0x0800a2f3
 800a24c:	0800a2bf 	.word	0x0800a2bf
 800a250:	0800a2f3 	.word	0x0800a2f3
 800a254:	0800a2f3 	.word	0x0800a2f3
 800a258:	0800a2f3 	.word	0x0800a2f3
 800a25c:	0800a2f3 	.word	0x0800a2f3
 800a260:	0800a2f3 	.word	0x0800a2f3
 800a264:	0800a2f3 	.word	0x0800a2f3
 800a268:	0800a2f3 	.word	0x0800a2f3
 800a26c:	0800a2f3 	.word	0x0800a2f3
 800a270:	0800a2f3 	.word	0x0800a2f3
 800a274:	0800a2f3 	.word	0x0800a2f3
 800a278:	0800a2f3 	.word	0x0800a2f3
 800a27c:	0800a2f3 	.word	0x0800a2f3
 800a280:	0800a2f3 	.word	0x0800a2f3
 800a284:	0800a2f3 	.word	0x0800a2f3
 800a288:	0800a2f3 	.word	0x0800a2f3
 800a28c:	0800a2e5 	.word	0x0800a2e5
 800a290:	2b40      	cmp	r3, #64	@ 0x40
 800a292:	d02a      	beq.n	800a2ea <UART_SetConfig+0x8aa>
 800a294:	e02d      	b.n	800a2f2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a296:	f7fe fed3 	bl	8009040 <HAL_RCCEx_GetD3PCLK1Freq>
 800a29a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a29c:	e02f      	b.n	800a2fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a29e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f7fe fee2 	bl	800906c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a2a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2ac:	e027      	b.n	800a2fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2ae:	f107 0318 	add.w	r3, r7, #24
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f7ff f82e 	bl	8009314 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a2b8:	69fb      	ldr	r3, [r7, #28]
 800a2ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2bc:	e01f      	b.n	800a2fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2be:	4b21      	ldr	r3, [pc, #132]	@ (800a344 <UART_SetConfig+0x904>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f003 0320 	and.w	r3, r3, #32
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d009      	beq.n	800a2de <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a2ca:	4b1e      	ldr	r3, [pc, #120]	@ (800a344 <UART_SetConfig+0x904>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	08db      	lsrs	r3, r3, #3
 800a2d0:	f003 0303 	and.w	r3, r3, #3
 800a2d4:	4a1d      	ldr	r2, [pc, #116]	@ (800a34c <UART_SetConfig+0x90c>)
 800a2d6:	fa22 f303 	lsr.w	r3, r2, r3
 800a2da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a2dc:	e00f      	b.n	800a2fe <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a2de:	4b1b      	ldr	r3, [pc, #108]	@ (800a34c <UART_SetConfig+0x90c>)
 800a2e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2e2:	e00c      	b.n	800a2fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a2e4:	4b1a      	ldr	r3, [pc, #104]	@ (800a350 <UART_SetConfig+0x910>)
 800a2e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2e8:	e009      	b.n	800a2fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a2ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2f0:	e005      	b.n	800a2fe <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a2fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a2fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a300:	2b00      	cmp	r3, #0
 800a302:	f000 81ee 	beq.w	800a6e2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a30a:	4a12      	ldr	r2, [pc, #72]	@ (800a354 <UART_SetConfig+0x914>)
 800a30c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a310:	461a      	mov	r2, r3
 800a312:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a314:	fbb3 f3f2 	udiv	r3, r3, r2
 800a318:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	685a      	ldr	r2, [r3, #4]
 800a31e:	4613      	mov	r3, r2
 800a320:	005b      	lsls	r3, r3, #1
 800a322:	4413      	add	r3, r2
 800a324:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a326:	429a      	cmp	r2, r3
 800a328:	d305      	bcc.n	800a336 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a330:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a332:	429a      	cmp	r2, r3
 800a334:	d910      	bls.n	800a358 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800a336:	2301      	movs	r3, #1
 800a338:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a33c:	e1d1      	b.n	800a6e2 <UART_SetConfig+0xca2>
 800a33e:	bf00      	nop
 800a340:	40011c00 	.word	0x40011c00
 800a344:	58024400 	.word	0x58024400
 800a348:	58000c00 	.word	0x58000c00
 800a34c:	03d09000 	.word	0x03d09000
 800a350:	003d0900 	.word	0x003d0900
 800a354:	0800b840 	.word	0x0800b840
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a358:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a35a:	2200      	movs	r2, #0
 800a35c:	60bb      	str	r3, [r7, #8]
 800a35e:	60fa      	str	r2, [r7, #12]
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a364:	4ac0      	ldr	r2, [pc, #768]	@ (800a668 <UART_SetConfig+0xc28>)
 800a366:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	2200      	movs	r2, #0
 800a36e:	603b      	str	r3, [r7, #0]
 800a370:	607a      	str	r2, [r7, #4]
 800a372:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a376:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a37a:	f7f6 f811 	bl	80003a0 <__aeabi_uldivmod>
 800a37e:	4602      	mov	r2, r0
 800a380:	460b      	mov	r3, r1
 800a382:	4610      	mov	r0, r2
 800a384:	4619      	mov	r1, r3
 800a386:	f04f 0200 	mov.w	r2, #0
 800a38a:	f04f 0300 	mov.w	r3, #0
 800a38e:	020b      	lsls	r3, r1, #8
 800a390:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a394:	0202      	lsls	r2, r0, #8
 800a396:	6979      	ldr	r1, [r7, #20]
 800a398:	6849      	ldr	r1, [r1, #4]
 800a39a:	0849      	lsrs	r1, r1, #1
 800a39c:	2000      	movs	r0, #0
 800a39e:	460c      	mov	r4, r1
 800a3a0:	4605      	mov	r5, r0
 800a3a2:	eb12 0804 	adds.w	r8, r2, r4
 800a3a6:	eb43 0905 	adc.w	r9, r3, r5
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	469a      	mov	sl, r3
 800a3b2:	4693      	mov	fp, r2
 800a3b4:	4652      	mov	r2, sl
 800a3b6:	465b      	mov	r3, fp
 800a3b8:	4640      	mov	r0, r8
 800a3ba:	4649      	mov	r1, r9
 800a3bc:	f7f5 fff0 	bl	80003a0 <__aeabi_uldivmod>
 800a3c0:	4602      	mov	r2, r0
 800a3c2:	460b      	mov	r3, r1
 800a3c4:	4613      	mov	r3, r2
 800a3c6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a3c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a3ce:	d308      	bcc.n	800a3e2 <UART_SetConfig+0x9a2>
 800a3d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a3d6:	d204      	bcs.n	800a3e2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a3de:	60da      	str	r2, [r3, #12]
 800a3e0:	e17f      	b.n	800a6e2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a3e8:	e17b      	b.n	800a6e2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	69db      	ldr	r3, [r3, #28]
 800a3ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a3f2:	f040 80bd 	bne.w	800a570 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800a3f6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a3fa:	2b20      	cmp	r3, #32
 800a3fc:	dc48      	bgt.n	800a490 <UART_SetConfig+0xa50>
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	db7b      	blt.n	800a4fa <UART_SetConfig+0xaba>
 800a402:	2b20      	cmp	r3, #32
 800a404:	d879      	bhi.n	800a4fa <UART_SetConfig+0xaba>
 800a406:	a201      	add	r2, pc, #4	@ (adr r2, 800a40c <UART_SetConfig+0x9cc>)
 800a408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a40c:	0800a497 	.word	0x0800a497
 800a410:	0800a49f 	.word	0x0800a49f
 800a414:	0800a4fb 	.word	0x0800a4fb
 800a418:	0800a4fb 	.word	0x0800a4fb
 800a41c:	0800a4a7 	.word	0x0800a4a7
 800a420:	0800a4fb 	.word	0x0800a4fb
 800a424:	0800a4fb 	.word	0x0800a4fb
 800a428:	0800a4fb 	.word	0x0800a4fb
 800a42c:	0800a4b7 	.word	0x0800a4b7
 800a430:	0800a4fb 	.word	0x0800a4fb
 800a434:	0800a4fb 	.word	0x0800a4fb
 800a438:	0800a4fb 	.word	0x0800a4fb
 800a43c:	0800a4fb 	.word	0x0800a4fb
 800a440:	0800a4fb 	.word	0x0800a4fb
 800a444:	0800a4fb 	.word	0x0800a4fb
 800a448:	0800a4fb 	.word	0x0800a4fb
 800a44c:	0800a4c7 	.word	0x0800a4c7
 800a450:	0800a4fb 	.word	0x0800a4fb
 800a454:	0800a4fb 	.word	0x0800a4fb
 800a458:	0800a4fb 	.word	0x0800a4fb
 800a45c:	0800a4fb 	.word	0x0800a4fb
 800a460:	0800a4fb 	.word	0x0800a4fb
 800a464:	0800a4fb 	.word	0x0800a4fb
 800a468:	0800a4fb 	.word	0x0800a4fb
 800a46c:	0800a4fb 	.word	0x0800a4fb
 800a470:	0800a4fb 	.word	0x0800a4fb
 800a474:	0800a4fb 	.word	0x0800a4fb
 800a478:	0800a4fb 	.word	0x0800a4fb
 800a47c:	0800a4fb 	.word	0x0800a4fb
 800a480:	0800a4fb 	.word	0x0800a4fb
 800a484:	0800a4fb 	.word	0x0800a4fb
 800a488:	0800a4fb 	.word	0x0800a4fb
 800a48c:	0800a4ed 	.word	0x0800a4ed
 800a490:	2b40      	cmp	r3, #64	@ 0x40
 800a492:	d02e      	beq.n	800a4f2 <UART_SetConfig+0xab2>
 800a494:	e031      	b.n	800a4fa <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a496:	f7fd fbe9 	bl	8007c6c <HAL_RCC_GetPCLK1Freq>
 800a49a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a49c:	e033      	b.n	800a506 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a49e:	f7fd fbfb 	bl	8007c98 <HAL_RCC_GetPCLK2Freq>
 800a4a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a4a4:	e02f      	b.n	800a506 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f7fe fdde 	bl	800906c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a4b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4b4:	e027      	b.n	800a506 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4b6:	f107 0318 	add.w	r3, r7, #24
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f7fe ff2a 	bl	8009314 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a4c0:	69fb      	ldr	r3, [r7, #28]
 800a4c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4c4:	e01f      	b.n	800a506 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a4c6:	4b69      	ldr	r3, [pc, #420]	@ (800a66c <UART_SetConfig+0xc2c>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f003 0320 	and.w	r3, r3, #32
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d009      	beq.n	800a4e6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a4d2:	4b66      	ldr	r3, [pc, #408]	@ (800a66c <UART_SetConfig+0xc2c>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	08db      	lsrs	r3, r3, #3
 800a4d8:	f003 0303 	and.w	r3, r3, #3
 800a4dc:	4a64      	ldr	r2, [pc, #400]	@ (800a670 <UART_SetConfig+0xc30>)
 800a4de:	fa22 f303 	lsr.w	r3, r2, r3
 800a4e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a4e4:	e00f      	b.n	800a506 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800a4e6:	4b62      	ldr	r3, [pc, #392]	@ (800a670 <UART_SetConfig+0xc30>)
 800a4e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4ea:	e00c      	b.n	800a506 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a4ec:	4b61      	ldr	r3, [pc, #388]	@ (800a674 <UART_SetConfig+0xc34>)
 800a4ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4f0:	e009      	b.n	800a506 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a4f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a4f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4f8:	e005      	b.n	800a506 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a4fe:	2301      	movs	r3, #1
 800a500:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a504:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a506:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a508:	2b00      	cmp	r3, #0
 800a50a:	f000 80ea 	beq.w	800a6e2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a512:	4a55      	ldr	r2, [pc, #340]	@ (800a668 <UART_SetConfig+0xc28>)
 800a514:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a518:	461a      	mov	r2, r3
 800a51a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a51c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a520:	005a      	lsls	r2, r3, #1
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	685b      	ldr	r3, [r3, #4]
 800a526:	085b      	lsrs	r3, r3, #1
 800a528:	441a      	add	r2, r3
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a532:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a536:	2b0f      	cmp	r3, #15
 800a538:	d916      	bls.n	800a568 <UART_SetConfig+0xb28>
 800a53a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a53c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a540:	d212      	bcs.n	800a568 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a544:	b29b      	uxth	r3, r3
 800a546:	f023 030f 	bic.w	r3, r3, #15
 800a54a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a54c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a54e:	085b      	lsrs	r3, r3, #1
 800a550:	b29b      	uxth	r3, r3
 800a552:	f003 0307 	and.w	r3, r3, #7
 800a556:	b29a      	uxth	r2, r3
 800a558:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a55a:	4313      	orrs	r3, r2
 800a55c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a564:	60da      	str	r2, [r3, #12]
 800a566:	e0bc      	b.n	800a6e2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a568:	2301      	movs	r3, #1
 800a56a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a56e:	e0b8      	b.n	800a6e2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a570:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a574:	2b20      	cmp	r3, #32
 800a576:	dc4b      	bgt.n	800a610 <UART_SetConfig+0xbd0>
 800a578:	2b00      	cmp	r3, #0
 800a57a:	f2c0 8087 	blt.w	800a68c <UART_SetConfig+0xc4c>
 800a57e:	2b20      	cmp	r3, #32
 800a580:	f200 8084 	bhi.w	800a68c <UART_SetConfig+0xc4c>
 800a584:	a201      	add	r2, pc, #4	@ (adr r2, 800a58c <UART_SetConfig+0xb4c>)
 800a586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a58a:	bf00      	nop
 800a58c:	0800a617 	.word	0x0800a617
 800a590:	0800a61f 	.word	0x0800a61f
 800a594:	0800a68d 	.word	0x0800a68d
 800a598:	0800a68d 	.word	0x0800a68d
 800a59c:	0800a627 	.word	0x0800a627
 800a5a0:	0800a68d 	.word	0x0800a68d
 800a5a4:	0800a68d 	.word	0x0800a68d
 800a5a8:	0800a68d 	.word	0x0800a68d
 800a5ac:	0800a637 	.word	0x0800a637
 800a5b0:	0800a68d 	.word	0x0800a68d
 800a5b4:	0800a68d 	.word	0x0800a68d
 800a5b8:	0800a68d 	.word	0x0800a68d
 800a5bc:	0800a68d 	.word	0x0800a68d
 800a5c0:	0800a68d 	.word	0x0800a68d
 800a5c4:	0800a68d 	.word	0x0800a68d
 800a5c8:	0800a68d 	.word	0x0800a68d
 800a5cc:	0800a647 	.word	0x0800a647
 800a5d0:	0800a68d 	.word	0x0800a68d
 800a5d4:	0800a68d 	.word	0x0800a68d
 800a5d8:	0800a68d 	.word	0x0800a68d
 800a5dc:	0800a68d 	.word	0x0800a68d
 800a5e0:	0800a68d 	.word	0x0800a68d
 800a5e4:	0800a68d 	.word	0x0800a68d
 800a5e8:	0800a68d 	.word	0x0800a68d
 800a5ec:	0800a68d 	.word	0x0800a68d
 800a5f0:	0800a68d 	.word	0x0800a68d
 800a5f4:	0800a68d 	.word	0x0800a68d
 800a5f8:	0800a68d 	.word	0x0800a68d
 800a5fc:	0800a68d 	.word	0x0800a68d
 800a600:	0800a68d 	.word	0x0800a68d
 800a604:	0800a68d 	.word	0x0800a68d
 800a608:	0800a68d 	.word	0x0800a68d
 800a60c:	0800a67f 	.word	0x0800a67f
 800a610:	2b40      	cmp	r3, #64	@ 0x40
 800a612:	d037      	beq.n	800a684 <UART_SetConfig+0xc44>
 800a614:	e03a      	b.n	800a68c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a616:	f7fd fb29 	bl	8007c6c <HAL_RCC_GetPCLK1Freq>
 800a61a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a61c:	e03c      	b.n	800a698 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a61e:	f7fd fb3b 	bl	8007c98 <HAL_RCC_GetPCLK2Freq>
 800a622:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a624:	e038      	b.n	800a698 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a626:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a62a:	4618      	mov	r0, r3
 800a62c:	f7fe fd1e 	bl	800906c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a632:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a634:	e030      	b.n	800a698 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a636:	f107 0318 	add.w	r3, r7, #24
 800a63a:	4618      	mov	r0, r3
 800a63c:	f7fe fe6a 	bl	8009314 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a640:	69fb      	ldr	r3, [r7, #28]
 800a642:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a644:	e028      	b.n	800a698 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a646:	4b09      	ldr	r3, [pc, #36]	@ (800a66c <UART_SetConfig+0xc2c>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f003 0320 	and.w	r3, r3, #32
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d012      	beq.n	800a678 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a652:	4b06      	ldr	r3, [pc, #24]	@ (800a66c <UART_SetConfig+0xc2c>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	08db      	lsrs	r3, r3, #3
 800a658:	f003 0303 	and.w	r3, r3, #3
 800a65c:	4a04      	ldr	r2, [pc, #16]	@ (800a670 <UART_SetConfig+0xc30>)
 800a65e:	fa22 f303 	lsr.w	r3, r2, r3
 800a662:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a664:	e018      	b.n	800a698 <UART_SetConfig+0xc58>
 800a666:	bf00      	nop
 800a668:	0800b840 	.word	0x0800b840
 800a66c:	58024400 	.word	0x58024400
 800a670:	03d09000 	.word	0x03d09000
 800a674:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a678:	4b24      	ldr	r3, [pc, #144]	@ (800a70c <UART_SetConfig+0xccc>)
 800a67a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a67c:	e00c      	b.n	800a698 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a67e:	4b24      	ldr	r3, [pc, #144]	@ (800a710 <UART_SetConfig+0xcd0>)
 800a680:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a682:	e009      	b.n	800a698 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a684:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a688:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a68a:	e005      	b.n	800a698 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a68c:	2300      	movs	r3, #0
 800a68e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a690:	2301      	movs	r3, #1
 800a692:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a696:	bf00      	nop
    }

    if (pclk != 0U)
 800a698:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d021      	beq.n	800a6e2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6a2:	4a1c      	ldr	r2, [pc, #112]	@ (800a714 <UART_SetConfig+0xcd4>)
 800a6a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6ac:	fbb3 f2f2 	udiv	r2, r3, r2
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	685b      	ldr	r3, [r3, #4]
 800a6b4:	085b      	lsrs	r3, r3, #1
 800a6b6:	441a      	add	r2, r3
 800a6b8:	697b      	ldr	r3, [r7, #20]
 800a6ba:	685b      	ldr	r3, [r3, #4]
 800a6bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6c0:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a6c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6c4:	2b0f      	cmp	r3, #15
 800a6c6:	d909      	bls.n	800a6dc <UART_SetConfig+0xc9c>
 800a6c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a6ce:	d205      	bcs.n	800a6dc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a6d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6d2:	b29a      	uxth	r2, r3
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	60da      	str	r2, [r3, #12]
 800a6da:	e002      	b.n	800a6e2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a6dc:	2301      	movs	r3, #1
 800a6de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	2201      	movs	r2, #1
 800a6e6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	2201      	movs	r2, #1
 800a6ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a6fe:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a702:	4618      	mov	r0, r3
 800a704:	3748      	adds	r7, #72	@ 0x48
 800a706:	46bd      	mov	sp, r7
 800a708:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a70c:	03d09000 	.word	0x03d09000
 800a710:	003d0900 	.word	0x003d0900
 800a714:	0800b840 	.word	0x0800b840

0800a718 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a718:	b480      	push	{r7}
 800a71a:	b083      	sub	sp, #12
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a724:	f003 0301 	and.w	r3, r3, #1
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d00a      	beq.n	800a742 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	430a      	orrs	r2, r1
 800a740:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a746:	f003 0302 	and.w	r3, r3, #2
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d00a      	beq.n	800a764 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	685b      	ldr	r3, [r3, #4]
 800a754:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	430a      	orrs	r2, r1
 800a762:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a768:	f003 0304 	and.w	r3, r3, #4
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d00a      	beq.n	800a786 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	685b      	ldr	r3, [r3, #4]
 800a776:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	430a      	orrs	r2, r1
 800a784:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a78a:	f003 0308 	and.w	r3, r3, #8
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d00a      	beq.n	800a7a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	430a      	orrs	r2, r1
 800a7a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7ac:	f003 0310 	and.w	r3, r3, #16
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d00a      	beq.n	800a7ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	689b      	ldr	r3, [r3, #8]
 800a7ba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	430a      	orrs	r2, r1
 800a7c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7ce:	f003 0320 	and.w	r3, r3, #32
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d00a      	beq.n	800a7ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	689b      	ldr	r3, [r3, #8]
 800a7dc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	430a      	orrs	r2, r1
 800a7ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d01a      	beq.n	800a82e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	685b      	ldr	r3, [r3, #4]
 800a7fe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	430a      	orrs	r2, r1
 800a80c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a812:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a816:	d10a      	bne.n	800a82e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	685b      	ldr	r3, [r3, #4]
 800a81e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	430a      	orrs	r2, r1
 800a82c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a836:	2b00      	cmp	r3, #0
 800a838:	d00a      	beq.n	800a850 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	685b      	ldr	r3, [r3, #4]
 800a840:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	430a      	orrs	r2, r1
 800a84e:	605a      	str	r2, [r3, #4]
  }
}
 800a850:	bf00      	nop
 800a852:	370c      	adds	r7, #12
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr

0800a85c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b098      	sub	sp, #96	@ 0x60
 800a860:	af02      	add	r7, sp, #8
 800a862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2200      	movs	r2, #0
 800a868:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a86c:	f7f7 fa5c 	bl	8001d28 <HAL_GetTick>
 800a870:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f003 0308 	and.w	r3, r3, #8
 800a87c:	2b08      	cmp	r3, #8
 800a87e:	d12f      	bne.n	800a8e0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a880:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a884:	9300      	str	r3, [sp, #0]
 800a886:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a888:	2200      	movs	r2, #0
 800a88a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f000 f88e 	bl	800a9b0 <UART_WaitOnFlagUntilTimeout>
 800a894:	4603      	mov	r3, r0
 800a896:	2b00      	cmp	r3, #0
 800a898:	d022      	beq.n	800a8e0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8a2:	e853 3f00 	ldrex	r3, [r3]
 800a8a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a8a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a8ae:	653b      	str	r3, [r7, #80]	@ 0x50
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	461a      	mov	r2, r3
 800a8b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a8b8:	647b      	str	r3, [r7, #68]	@ 0x44
 800a8ba:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a8be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a8c0:	e841 2300 	strex	r3, r2, [r1]
 800a8c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a8c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d1e6      	bne.n	800a89a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2220      	movs	r2, #32
 800a8d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a8dc:	2303      	movs	r3, #3
 800a8de:	e063      	b.n	800a9a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f003 0304 	and.w	r3, r3, #4
 800a8ea:	2b04      	cmp	r3, #4
 800a8ec:	d149      	bne.n	800a982 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a8ee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a8f2:	9300      	str	r3, [sp, #0]
 800a8f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f000 f857 	bl	800a9b0 <UART_WaitOnFlagUntilTimeout>
 800a902:	4603      	mov	r3, r0
 800a904:	2b00      	cmp	r3, #0
 800a906:	d03c      	beq.n	800a982 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a90e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a910:	e853 3f00 	ldrex	r3, [r3]
 800a914:	623b      	str	r3, [r7, #32]
   return(result);
 800a916:	6a3b      	ldr	r3, [r7, #32]
 800a918:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a91c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	461a      	mov	r2, r3
 800a924:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a926:	633b      	str	r3, [r7, #48]	@ 0x30
 800a928:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a92a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a92c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a92e:	e841 2300 	strex	r3, r2, [r1]
 800a932:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a936:	2b00      	cmp	r3, #0
 800a938:	d1e6      	bne.n	800a908 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	3308      	adds	r3, #8
 800a940:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	e853 3f00 	ldrex	r3, [r3]
 800a948:	60fb      	str	r3, [r7, #12]
   return(result);
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	f023 0301 	bic.w	r3, r3, #1
 800a950:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	3308      	adds	r3, #8
 800a958:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a95a:	61fa      	str	r2, [r7, #28]
 800a95c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a95e:	69b9      	ldr	r1, [r7, #24]
 800a960:	69fa      	ldr	r2, [r7, #28]
 800a962:	e841 2300 	strex	r3, r2, [r1]
 800a966:	617b      	str	r3, [r7, #20]
   return(result);
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d1e5      	bne.n	800a93a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2220      	movs	r2, #32
 800a972:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2200      	movs	r2, #0
 800a97a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a97e:	2303      	movs	r3, #3
 800a980:	e012      	b.n	800a9a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2220      	movs	r2, #32
 800a986:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2220      	movs	r2, #32
 800a98e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2200      	movs	r2, #0
 800a996:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2200      	movs	r2, #0
 800a99c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a9a6:	2300      	movs	r3, #0
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3758      	adds	r7, #88	@ 0x58
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}

0800a9b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b084      	sub	sp, #16
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	60f8      	str	r0, [r7, #12]
 800a9b8:	60b9      	str	r1, [r7, #8]
 800a9ba:	603b      	str	r3, [r7, #0]
 800a9bc:	4613      	mov	r3, r2
 800a9be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a9c0:	e049      	b.n	800aa56 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a9c2:	69bb      	ldr	r3, [r7, #24]
 800a9c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9c8:	d045      	beq.n	800aa56 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a9ca:	f7f7 f9ad 	bl	8001d28 <HAL_GetTick>
 800a9ce:	4602      	mov	r2, r0
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	1ad3      	subs	r3, r2, r3
 800a9d4:	69ba      	ldr	r2, [r7, #24]
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d302      	bcc.n	800a9e0 <UART_WaitOnFlagUntilTimeout+0x30>
 800a9da:	69bb      	ldr	r3, [r7, #24]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d101      	bne.n	800a9e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a9e0:	2303      	movs	r3, #3
 800a9e2:	e048      	b.n	800aa76 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f003 0304 	and.w	r3, r3, #4
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d031      	beq.n	800aa56 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	69db      	ldr	r3, [r3, #28]
 800a9f8:	f003 0308 	and.w	r3, r3, #8
 800a9fc:	2b08      	cmp	r3, #8
 800a9fe:	d110      	bne.n	800aa22 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	2208      	movs	r2, #8
 800aa06:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800aa08:	68f8      	ldr	r0, [r7, #12]
 800aa0a:	f000 f839 	bl	800aa80 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	2208      	movs	r2, #8
 800aa12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 800aa1e:	2301      	movs	r3, #1
 800aa20:	e029      	b.n	800aa76 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	69db      	ldr	r3, [r3, #28]
 800aa28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aa2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aa30:	d111      	bne.n	800aa56 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aa3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aa3c:	68f8      	ldr	r0, [r7, #12]
 800aa3e:	f000 f81f 	bl	800aa80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	2220      	movs	r2, #32
 800aa46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800aa52:	2303      	movs	r3, #3
 800aa54:	e00f      	b.n	800aa76 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	69da      	ldr	r2, [r3, #28]
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	4013      	ands	r3, r2
 800aa60:	68ba      	ldr	r2, [r7, #8]
 800aa62:	429a      	cmp	r2, r3
 800aa64:	bf0c      	ite	eq
 800aa66:	2301      	moveq	r3, #1
 800aa68:	2300      	movne	r3, #0
 800aa6a:	b2db      	uxtb	r3, r3
 800aa6c:	461a      	mov	r2, r3
 800aa6e:	79fb      	ldrb	r3, [r7, #7]
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d0a6      	beq.n	800a9c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aa74:	2300      	movs	r3, #0
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3710      	adds	r7, #16
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}
	...

0800aa80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b095      	sub	sp, #84	@ 0x54
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa90:	e853 3f00 	ldrex	r3, [r3]
 800aa94:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aa96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aa9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aaa6:	643b      	str	r3, [r7, #64]	@ 0x40
 800aaa8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaaa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aaac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aaae:	e841 2300 	strex	r3, r2, [r1]
 800aab2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d1e6      	bne.n	800aa88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	3308      	adds	r3, #8
 800aac0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aac2:	6a3b      	ldr	r3, [r7, #32]
 800aac4:	e853 3f00 	ldrex	r3, [r3]
 800aac8:	61fb      	str	r3, [r7, #28]
   return(result);
 800aaca:	69fa      	ldr	r2, [r7, #28]
 800aacc:	4b1e      	ldr	r3, [pc, #120]	@ (800ab48 <UART_EndRxTransfer+0xc8>)
 800aace:	4013      	ands	r3, r2
 800aad0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	3308      	adds	r3, #8
 800aad8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aada:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aadc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aade:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aae0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aae2:	e841 2300 	strex	r3, r2, [r1]
 800aae6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d1e5      	bne.n	800aaba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	d118      	bne.n	800ab28 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	e853 3f00 	ldrex	r3, [r3]
 800ab02:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	f023 0310 	bic.w	r3, r3, #16
 800ab0a:	647b      	str	r3, [r7, #68]	@ 0x44
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	461a      	mov	r2, r3
 800ab12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab14:	61bb      	str	r3, [r7, #24]
 800ab16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab18:	6979      	ldr	r1, [r7, #20]
 800ab1a:	69ba      	ldr	r2, [r7, #24]
 800ab1c:	e841 2300 	strex	r3, r2, [r1]
 800ab20:	613b      	str	r3, [r7, #16]
   return(result);
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d1e6      	bne.n	800aaf6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2220      	movs	r2, #32
 800ab2c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2200      	movs	r2, #0
 800ab34:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ab3c:	bf00      	nop
 800ab3e:	3754      	adds	r7, #84	@ 0x54
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr
 800ab48:	effffffe 	.word	0xeffffffe

0800ab4c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b085      	sub	sp, #20
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ab5a:	2b01      	cmp	r3, #1
 800ab5c:	d101      	bne.n	800ab62 <HAL_UARTEx_DisableFifoMode+0x16>
 800ab5e:	2302      	movs	r3, #2
 800ab60:	e027      	b.n	800abb2 <HAL_UARTEx_DisableFifoMode+0x66>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2201      	movs	r2, #1
 800ab66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2224      	movs	r2, #36	@ 0x24
 800ab6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	681a      	ldr	r2, [r3, #0]
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f022 0201 	bic.w	r2, r2, #1
 800ab88:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ab90:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2200      	movs	r2, #0
 800ab96:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	68fa      	ldr	r2, [r7, #12]
 800ab9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2220      	movs	r2, #32
 800aba4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2200      	movs	r2, #0
 800abac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800abb0:	2300      	movs	r3, #0
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3714      	adds	r7, #20
 800abb6:	46bd      	mov	sp, r7
 800abb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbc:	4770      	bx	lr

0800abbe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800abbe:	b580      	push	{r7, lr}
 800abc0:	b084      	sub	sp, #16
 800abc2:	af00      	add	r7, sp, #0
 800abc4:	6078      	str	r0, [r7, #4]
 800abc6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800abce:	2b01      	cmp	r3, #1
 800abd0:	d101      	bne.n	800abd6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800abd2:	2302      	movs	r3, #2
 800abd4:	e02d      	b.n	800ac32 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2201      	movs	r2, #1
 800abda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2224      	movs	r2, #36	@ 0x24
 800abe2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	681a      	ldr	r2, [r3, #0]
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f022 0201 	bic.w	r2, r2, #1
 800abfc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	689b      	ldr	r3, [r3, #8]
 800ac04:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	683a      	ldr	r2, [r7, #0]
 800ac0e:	430a      	orrs	r2, r1
 800ac10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f000 f850 	bl	800acb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	68fa      	ldr	r2, [r7, #12]
 800ac1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2220      	movs	r2, #32
 800ac24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ac30:	2300      	movs	r3, #0
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3710      	adds	r7, #16
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}

0800ac3a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ac3a:	b580      	push	{r7, lr}
 800ac3c:	b084      	sub	sp, #16
 800ac3e:	af00      	add	r7, sp, #0
 800ac40:	6078      	str	r0, [r7, #4]
 800ac42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ac4a:	2b01      	cmp	r3, #1
 800ac4c:	d101      	bne.n	800ac52 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ac4e:	2302      	movs	r3, #2
 800ac50:	e02d      	b.n	800acae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2201      	movs	r2, #1
 800ac56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2224      	movs	r2, #36	@ 0x24
 800ac5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	681a      	ldr	r2, [r3, #0]
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f022 0201 	bic.w	r2, r2, #1
 800ac78:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	689b      	ldr	r3, [r3, #8]
 800ac80:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	683a      	ldr	r2, [r7, #0]
 800ac8a:	430a      	orrs	r2, r1
 800ac8c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f000 f812 	bl	800acb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	68fa      	ldr	r2, [r7, #12]
 800ac9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2220      	movs	r2, #32
 800aca0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2200      	movs	r2, #0
 800aca8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800acac:	2300      	movs	r3, #0
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3710      	adds	r7, #16
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}
	...

0800acb8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800acb8:	b480      	push	{r7}
 800acba:	b085      	sub	sp, #20
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d108      	bne.n	800acda <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2201      	movs	r2, #1
 800accc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2201      	movs	r2, #1
 800acd4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800acd8:	e031      	b.n	800ad3e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800acda:	2310      	movs	r3, #16
 800acdc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800acde:	2310      	movs	r3, #16
 800ace0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	689b      	ldr	r3, [r3, #8]
 800ace8:	0e5b      	lsrs	r3, r3, #25
 800acea:	b2db      	uxtb	r3, r3
 800acec:	f003 0307 	and.w	r3, r3, #7
 800acf0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	689b      	ldr	r3, [r3, #8]
 800acf8:	0f5b      	lsrs	r3, r3, #29
 800acfa:	b2db      	uxtb	r3, r3
 800acfc:	f003 0307 	and.w	r3, r3, #7
 800ad00:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ad02:	7bbb      	ldrb	r3, [r7, #14]
 800ad04:	7b3a      	ldrb	r2, [r7, #12]
 800ad06:	4911      	ldr	r1, [pc, #68]	@ (800ad4c <UARTEx_SetNbDataToProcess+0x94>)
 800ad08:	5c8a      	ldrb	r2, [r1, r2]
 800ad0a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ad0e:	7b3a      	ldrb	r2, [r7, #12]
 800ad10:	490f      	ldr	r1, [pc, #60]	@ (800ad50 <UARTEx_SetNbDataToProcess+0x98>)
 800ad12:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ad14:	fb93 f3f2 	sdiv	r3, r3, r2
 800ad18:	b29a      	uxth	r2, r3
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ad20:	7bfb      	ldrb	r3, [r7, #15]
 800ad22:	7b7a      	ldrb	r2, [r7, #13]
 800ad24:	4909      	ldr	r1, [pc, #36]	@ (800ad4c <UARTEx_SetNbDataToProcess+0x94>)
 800ad26:	5c8a      	ldrb	r2, [r1, r2]
 800ad28:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ad2c:	7b7a      	ldrb	r2, [r7, #13]
 800ad2e:	4908      	ldr	r1, [pc, #32]	@ (800ad50 <UARTEx_SetNbDataToProcess+0x98>)
 800ad30:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ad32:	fb93 f3f2 	sdiv	r3, r3, r2
 800ad36:	b29a      	uxth	r2, r3
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ad3e:	bf00      	nop
 800ad40:	3714      	adds	r7, #20
 800ad42:	46bd      	mov	sp, r7
 800ad44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad48:	4770      	bx	lr
 800ad4a:	bf00      	nop
 800ad4c:	0800b858 	.word	0x0800b858
 800ad50:	0800b860 	.word	0x0800b860

0800ad54 <siprintf>:
 800ad54:	b40e      	push	{r1, r2, r3}
 800ad56:	b500      	push	{lr}
 800ad58:	b09c      	sub	sp, #112	@ 0x70
 800ad5a:	ab1d      	add	r3, sp, #116	@ 0x74
 800ad5c:	9002      	str	r0, [sp, #8]
 800ad5e:	9006      	str	r0, [sp, #24]
 800ad60:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ad64:	4809      	ldr	r0, [pc, #36]	@ (800ad8c <siprintf+0x38>)
 800ad66:	9107      	str	r1, [sp, #28]
 800ad68:	9104      	str	r1, [sp, #16]
 800ad6a:	4909      	ldr	r1, [pc, #36]	@ (800ad90 <siprintf+0x3c>)
 800ad6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad70:	9105      	str	r1, [sp, #20]
 800ad72:	6800      	ldr	r0, [r0, #0]
 800ad74:	9301      	str	r3, [sp, #4]
 800ad76:	a902      	add	r1, sp, #8
 800ad78:	f000 f994 	bl	800b0a4 <_svfiprintf_r>
 800ad7c:	9b02      	ldr	r3, [sp, #8]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	701a      	strb	r2, [r3, #0]
 800ad82:	b01c      	add	sp, #112	@ 0x70
 800ad84:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad88:	b003      	add	sp, #12
 800ad8a:	4770      	bx	lr
 800ad8c:	24000018 	.word	0x24000018
 800ad90:	ffff0208 	.word	0xffff0208

0800ad94 <memset>:
 800ad94:	4402      	add	r2, r0
 800ad96:	4603      	mov	r3, r0
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	d100      	bne.n	800ad9e <memset+0xa>
 800ad9c:	4770      	bx	lr
 800ad9e:	f803 1b01 	strb.w	r1, [r3], #1
 800ada2:	e7f9      	b.n	800ad98 <memset+0x4>

0800ada4 <__errno>:
 800ada4:	4b01      	ldr	r3, [pc, #4]	@ (800adac <__errno+0x8>)
 800ada6:	6818      	ldr	r0, [r3, #0]
 800ada8:	4770      	bx	lr
 800adaa:	bf00      	nop
 800adac:	24000018 	.word	0x24000018

0800adb0 <__libc_init_array>:
 800adb0:	b570      	push	{r4, r5, r6, lr}
 800adb2:	4d0d      	ldr	r5, [pc, #52]	@ (800ade8 <__libc_init_array+0x38>)
 800adb4:	4c0d      	ldr	r4, [pc, #52]	@ (800adec <__libc_init_array+0x3c>)
 800adb6:	1b64      	subs	r4, r4, r5
 800adb8:	10a4      	asrs	r4, r4, #2
 800adba:	2600      	movs	r6, #0
 800adbc:	42a6      	cmp	r6, r4
 800adbe:	d109      	bne.n	800add4 <__libc_init_array+0x24>
 800adc0:	4d0b      	ldr	r5, [pc, #44]	@ (800adf0 <__libc_init_array+0x40>)
 800adc2:	4c0c      	ldr	r4, [pc, #48]	@ (800adf4 <__libc_init_array+0x44>)
 800adc4:	f000 fc66 	bl	800b694 <_init>
 800adc8:	1b64      	subs	r4, r4, r5
 800adca:	10a4      	asrs	r4, r4, #2
 800adcc:	2600      	movs	r6, #0
 800adce:	42a6      	cmp	r6, r4
 800add0:	d105      	bne.n	800adde <__libc_init_array+0x2e>
 800add2:	bd70      	pop	{r4, r5, r6, pc}
 800add4:	f855 3b04 	ldr.w	r3, [r5], #4
 800add8:	4798      	blx	r3
 800adda:	3601      	adds	r6, #1
 800addc:	e7ee      	b.n	800adbc <__libc_init_array+0xc>
 800adde:	f855 3b04 	ldr.w	r3, [r5], #4
 800ade2:	4798      	blx	r3
 800ade4:	3601      	adds	r6, #1
 800ade6:	e7f2      	b.n	800adce <__libc_init_array+0x1e>
 800ade8:	0800b8a4 	.word	0x0800b8a4
 800adec:	0800b8a4 	.word	0x0800b8a4
 800adf0:	0800b8a4 	.word	0x0800b8a4
 800adf4:	0800b8a8 	.word	0x0800b8a8

0800adf8 <__retarget_lock_acquire_recursive>:
 800adf8:	4770      	bx	lr

0800adfa <__retarget_lock_release_recursive>:
 800adfa:	4770      	bx	lr

0800adfc <_free_r>:
 800adfc:	b538      	push	{r3, r4, r5, lr}
 800adfe:	4605      	mov	r5, r0
 800ae00:	2900      	cmp	r1, #0
 800ae02:	d041      	beq.n	800ae88 <_free_r+0x8c>
 800ae04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae08:	1f0c      	subs	r4, r1, #4
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	bfb8      	it	lt
 800ae0e:	18e4      	addlt	r4, r4, r3
 800ae10:	f000 f8e0 	bl	800afd4 <__malloc_lock>
 800ae14:	4a1d      	ldr	r2, [pc, #116]	@ (800ae8c <_free_r+0x90>)
 800ae16:	6813      	ldr	r3, [r2, #0]
 800ae18:	b933      	cbnz	r3, 800ae28 <_free_r+0x2c>
 800ae1a:	6063      	str	r3, [r4, #4]
 800ae1c:	6014      	str	r4, [r2, #0]
 800ae1e:	4628      	mov	r0, r5
 800ae20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae24:	f000 b8dc 	b.w	800afe0 <__malloc_unlock>
 800ae28:	42a3      	cmp	r3, r4
 800ae2a:	d908      	bls.n	800ae3e <_free_r+0x42>
 800ae2c:	6820      	ldr	r0, [r4, #0]
 800ae2e:	1821      	adds	r1, r4, r0
 800ae30:	428b      	cmp	r3, r1
 800ae32:	bf01      	itttt	eq
 800ae34:	6819      	ldreq	r1, [r3, #0]
 800ae36:	685b      	ldreq	r3, [r3, #4]
 800ae38:	1809      	addeq	r1, r1, r0
 800ae3a:	6021      	streq	r1, [r4, #0]
 800ae3c:	e7ed      	b.n	800ae1a <_free_r+0x1e>
 800ae3e:	461a      	mov	r2, r3
 800ae40:	685b      	ldr	r3, [r3, #4]
 800ae42:	b10b      	cbz	r3, 800ae48 <_free_r+0x4c>
 800ae44:	42a3      	cmp	r3, r4
 800ae46:	d9fa      	bls.n	800ae3e <_free_r+0x42>
 800ae48:	6811      	ldr	r1, [r2, #0]
 800ae4a:	1850      	adds	r0, r2, r1
 800ae4c:	42a0      	cmp	r0, r4
 800ae4e:	d10b      	bne.n	800ae68 <_free_r+0x6c>
 800ae50:	6820      	ldr	r0, [r4, #0]
 800ae52:	4401      	add	r1, r0
 800ae54:	1850      	adds	r0, r2, r1
 800ae56:	4283      	cmp	r3, r0
 800ae58:	6011      	str	r1, [r2, #0]
 800ae5a:	d1e0      	bne.n	800ae1e <_free_r+0x22>
 800ae5c:	6818      	ldr	r0, [r3, #0]
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	6053      	str	r3, [r2, #4]
 800ae62:	4408      	add	r0, r1
 800ae64:	6010      	str	r0, [r2, #0]
 800ae66:	e7da      	b.n	800ae1e <_free_r+0x22>
 800ae68:	d902      	bls.n	800ae70 <_free_r+0x74>
 800ae6a:	230c      	movs	r3, #12
 800ae6c:	602b      	str	r3, [r5, #0]
 800ae6e:	e7d6      	b.n	800ae1e <_free_r+0x22>
 800ae70:	6820      	ldr	r0, [r4, #0]
 800ae72:	1821      	adds	r1, r4, r0
 800ae74:	428b      	cmp	r3, r1
 800ae76:	bf04      	itt	eq
 800ae78:	6819      	ldreq	r1, [r3, #0]
 800ae7a:	685b      	ldreq	r3, [r3, #4]
 800ae7c:	6063      	str	r3, [r4, #4]
 800ae7e:	bf04      	itt	eq
 800ae80:	1809      	addeq	r1, r1, r0
 800ae82:	6021      	streq	r1, [r4, #0]
 800ae84:	6054      	str	r4, [r2, #4]
 800ae86:	e7ca      	b.n	800ae1e <_free_r+0x22>
 800ae88:	bd38      	pop	{r3, r4, r5, pc}
 800ae8a:	bf00      	nop
 800ae8c:	24000474 	.word	0x24000474

0800ae90 <sbrk_aligned>:
 800ae90:	b570      	push	{r4, r5, r6, lr}
 800ae92:	4e0f      	ldr	r6, [pc, #60]	@ (800aed0 <sbrk_aligned+0x40>)
 800ae94:	460c      	mov	r4, r1
 800ae96:	6831      	ldr	r1, [r6, #0]
 800ae98:	4605      	mov	r5, r0
 800ae9a:	b911      	cbnz	r1, 800aea2 <sbrk_aligned+0x12>
 800ae9c:	f000 fba6 	bl	800b5ec <_sbrk_r>
 800aea0:	6030      	str	r0, [r6, #0]
 800aea2:	4621      	mov	r1, r4
 800aea4:	4628      	mov	r0, r5
 800aea6:	f000 fba1 	bl	800b5ec <_sbrk_r>
 800aeaa:	1c43      	adds	r3, r0, #1
 800aeac:	d103      	bne.n	800aeb6 <sbrk_aligned+0x26>
 800aeae:	f04f 34ff 	mov.w	r4, #4294967295
 800aeb2:	4620      	mov	r0, r4
 800aeb4:	bd70      	pop	{r4, r5, r6, pc}
 800aeb6:	1cc4      	adds	r4, r0, #3
 800aeb8:	f024 0403 	bic.w	r4, r4, #3
 800aebc:	42a0      	cmp	r0, r4
 800aebe:	d0f8      	beq.n	800aeb2 <sbrk_aligned+0x22>
 800aec0:	1a21      	subs	r1, r4, r0
 800aec2:	4628      	mov	r0, r5
 800aec4:	f000 fb92 	bl	800b5ec <_sbrk_r>
 800aec8:	3001      	adds	r0, #1
 800aeca:	d1f2      	bne.n	800aeb2 <sbrk_aligned+0x22>
 800aecc:	e7ef      	b.n	800aeae <sbrk_aligned+0x1e>
 800aece:	bf00      	nop
 800aed0:	24000470 	.word	0x24000470

0800aed4 <_malloc_r>:
 800aed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aed8:	1ccd      	adds	r5, r1, #3
 800aeda:	f025 0503 	bic.w	r5, r5, #3
 800aede:	3508      	adds	r5, #8
 800aee0:	2d0c      	cmp	r5, #12
 800aee2:	bf38      	it	cc
 800aee4:	250c      	movcc	r5, #12
 800aee6:	2d00      	cmp	r5, #0
 800aee8:	4606      	mov	r6, r0
 800aeea:	db01      	blt.n	800aef0 <_malloc_r+0x1c>
 800aeec:	42a9      	cmp	r1, r5
 800aeee:	d904      	bls.n	800aefa <_malloc_r+0x26>
 800aef0:	230c      	movs	r3, #12
 800aef2:	6033      	str	r3, [r6, #0]
 800aef4:	2000      	movs	r0, #0
 800aef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aefa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800afd0 <_malloc_r+0xfc>
 800aefe:	f000 f869 	bl	800afd4 <__malloc_lock>
 800af02:	f8d8 3000 	ldr.w	r3, [r8]
 800af06:	461c      	mov	r4, r3
 800af08:	bb44      	cbnz	r4, 800af5c <_malloc_r+0x88>
 800af0a:	4629      	mov	r1, r5
 800af0c:	4630      	mov	r0, r6
 800af0e:	f7ff ffbf 	bl	800ae90 <sbrk_aligned>
 800af12:	1c43      	adds	r3, r0, #1
 800af14:	4604      	mov	r4, r0
 800af16:	d158      	bne.n	800afca <_malloc_r+0xf6>
 800af18:	f8d8 4000 	ldr.w	r4, [r8]
 800af1c:	4627      	mov	r7, r4
 800af1e:	2f00      	cmp	r7, #0
 800af20:	d143      	bne.n	800afaa <_malloc_r+0xd6>
 800af22:	2c00      	cmp	r4, #0
 800af24:	d04b      	beq.n	800afbe <_malloc_r+0xea>
 800af26:	6823      	ldr	r3, [r4, #0]
 800af28:	4639      	mov	r1, r7
 800af2a:	4630      	mov	r0, r6
 800af2c:	eb04 0903 	add.w	r9, r4, r3
 800af30:	f000 fb5c 	bl	800b5ec <_sbrk_r>
 800af34:	4581      	cmp	r9, r0
 800af36:	d142      	bne.n	800afbe <_malloc_r+0xea>
 800af38:	6821      	ldr	r1, [r4, #0]
 800af3a:	1a6d      	subs	r5, r5, r1
 800af3c:	4629      	mov	r1, r5
 800af3e:	4630      	mov	r0, r6
 800af40:	f7ff ffa6 	bl	800ae90 <sbrk_aligned>
 800af44:	3001      	adds	r0, #1
 800af46:	d03a      	beq.n	800afbe <_malloc_r+0xea>
 800af48:	6823      	ldr	r3, [r4, #0]
 800af4a:	442b      	add	r3, r5
 800af4c:	6023      	str	r3, [r4, #0]
 800af4e:	f8d8 3000 	ldr.w	r3, [r8]
 800af52:	685a      	ldr	r2, [r3, #4]
 800af54:	bb62      	cbnz	r2, 800afb0 <_malloc_r+0xdc>
 800af56:	f8c8 7000 	str.w	r7, [r8]
 800af5a:	e00f      	b.n	800af7c <_malloc_r+0xa8>
 800af5c:	6822      	ldr	r2, [r4, #0]
 800af5e:	1b52      	subs	r2, r2, r5
 800af60:	d420      	bmi.n	800afa4 <_malloc_r+0xd0>
 800af62:	2a0b      	cmp	r2, #11
 800af64:	d917      	bls.n	800af96 <_malloc_r+0xc2>
 800af66:	1961      	adds	r1, r4, r5
 800af68:	42a3      	cmp	r3, r4
 800af6a:	6025      	str	r5, [r4, #0]
 800af6c:	bf18      	it	ne
 800af6e:	6059      	strne	r1, [r3, #4]
 800af70:	6863      	ldr	r3, [r4, #4]
 800af72:	bf08      	it	eq
 800af74:	f8c8 1000 	streq.w	r1, [r8]
 800af78:	5162      	str	r2, [r4, r5]
 800af7a:	604b      	str	r3, [r1, #4]
 800af7c:	4630      	mov	r0, r6
 800af7e:	f000 f82f 	bl	800afe0 <__malloc_unlock>
 800af82:	f104 000b 	add.w	r0, r4, #11
 800af86:	1d23      	adds	r3, r4, #4
 800af88:	f020 0007 	bic.w	r0, r0, #7
 800af8c:	1ac2      	subs	r2, r0, r3
 800af8e:	bf1c      	itt	ne
 800af90:	1a1b      	subne	r3, r3, r0
 800af92:	50a3      	strne	r3, [r4, r2]
 800af94:	e7af      	b.n	800aef6 <_malloc_r+0x22>
 800af96:	6862      	ldr	r2, [r4, #4]
 800af98:	42a3      	cmp	r3, r4
 800af9a:	bf0c      	ite	eq
 800af9c:	f8c8 2000 	streq.w	r2, [r8]
 800afa0:	605a      	strne	r2, [r3, #4]
 800afa2:	e7eb      	b.n	800af7c <_malloc_r+0xa8>
 800afa4:	4623      	mov	r3, r4
 800afa6:	6864      	ldr	r4, [r4, #4]
 800afa8:	e7ae      	b.n	800af08 <_malloc_r+0x34>
 800afaa:	463c      	mov	r4, r7
 800afac:	687f      	ldr	r7, [r7, #4]
 800afae:	e7b6      	b.n	800af1e <_malloc_r+0x4a>
 800afb0:	461a      	mov	r2, r3
 800afb2:	685b      	ldr	r3, [r3, #4]
 800afb4:	42a3      	cmp	r3, r4
 800afb6:	d1fb      	bne.n	800afb0 <_malloc_r+0xdc>
 800afb8:	2300      	movs	r3, #0
 800afba:	6053      	str	r3, [r2, #4]
 800afbc:	e7de      	b.n	800af7c <_malloc_r+0xa8>
 800afbe:	230c      	movs	r3, #12
 800afc0:	6033      	str	r3, [r6, #0]
 800afc2:	4630      	mov	r0, r6
 800afc4:	f000 f80c 	bl	800afe0 <__malloc_unlock>
 800afc8:	e794      	b.n	800aef4 <_malloc_r+0x20>
 800afca:	6005      	str	r5, [r0, #0]
 800afcc:	e7d6      	b.n	800af7c <_malloc_r+0xa8>
 800afce:	bf00      	nop
 800afd0:	24000474 	.word	0x24000474

0800afd4 <__malloc_lock>:
 800afd4:	4801      	ldr	r0, [pc, #4]	@ (800afdc <__malloc_lock+0x8>)
 800afd6:	f7ff bf0f 	b.w	800adf8 <__retarget_lock_acquire_recursive>
 800afda:	bf00      	nop
 800afdc:	2400046c 	.word	0x2400046c

0800afe0 <__malloc_unlock>:
 800afe0:	4801      	ldr	r0, [pc, #4]	@ (800afe8 <__malloc_unlock+0x8>)
 800afe2:	f7ff bf0a 	b.w	800adfa <__retarget_lock_release_recursive>
 800afe6:	bf00      	nop
 800afe8:	2400046c 	.word	0x2400046c

0800afec <__ssputs_r>:
 800afec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aff0:	688e      	ldr	r6, [r1, #8]
 800aff2:	461f      	mov	r7, r3
 800aff4:	42be      	cmp	r6, r7
 800aff6:	680b      	ldr	r3, [r1, #0]
 800aff8:	4682      	mov	sl, r0
 800affa:	460c      	mov	r4, r1
 800affc:	4690      	mov	r8, r2
 800affe:	d82d      	bhi.n	800b05c <__ssputs_r+0x70>
 800b000:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b004:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b008:	d026      	beq.n	800b058 <__ssputs_r+0x6c>
 800b00a:	6965      	ldr	r5, [r4, #20]
 800b00c:	6909      	ldr	r1, [r1, #16]
 800b00e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b012:	eba3 0901 	sub.w	r9, r3, r1
 800b016:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b01a:	1c7b      	adds	r3, r7, #1
 800b01c:	444b      	add	r3, r9
 800b01e:	106d      	asrs	r5, r5, #1
 800b020:	429d      	cmp	r5, r3
 800b022:	bf38      	it	cc
 800b024:	461d      	movcc	r5, r3
 800b026:	0553      	lsls	r3, r2, #21
 800b028:	d527      	bpl.n	800b07a <__ssputs_r+0x8e>
 800b02a:	4629      	mov	r1, r5
 800b02c:	f7ff ff52 	bl	800aed4 <_malloc_r>
 800b030:	4606      	mov	r6, r0
 800b032:	b360      	cbz	r0, 800b08e <__ssputs_r+0xa2>
 800b034:	6921      	ldr	r1, [r4, #16]
 800b036:	464a      	mov	r2, r9
 800b038:	f000 fae8 	bl	800b60c <memcpy>
 800b03c:	89a3      	ldrh	r3, [r4, #12]
 800b03e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b042:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b046:	81a3      	strh	r3, [r4, #12]
 800b048:	6126      	str	r6, [r4, #16]
 800b04a:	6165      	str	r5, [r4, #20]
 800b04c:	444e      	add	r6, r9
 800b04e:	eba5 0509 	sub.w	r5, r5, r9
 800b052:	6026      	str	r6, [r4, #0]
 800b054:	60a5      	str	r5, [r4, #8]
 800b056:	463e      	mov	r6, r7
 800b058:	42be      	cmp	r6, r7
 800b05a:	d900      	bls.n	800b05e <__ssputs_r+0x72>
 800b05c:	463e      	mov	r6, r7
 800b05e:	6820      	ldr	r0, [r4, #0]
 800b060:	4632      	mov	r2, r6
 800b062:	4641      	mov	r1, r8
 800b064:	f000 faa8 	bl	800b5b8 <memmove>
 800b068:	68a3      	ldr	r3, [r4, #8]
 800b06a:	1b9b      	subs	r3, r3, r6
 800b06c:	60a3      	str	r3, [r4, #8]
 800b06e:	6823      	ldr	r3, [r4, #0]
 800b070:	4433      	add	r3, r6
 800b072:	6023      	str	r3, [r4, #0]
 800b074:	2000      	movs	r0, #0
 800b076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b07a:	462a      	mov	r2, r5
 800b07c:	f000 fad4 	bl	800b628 <_realloc_r>
 800b080:	4606      	mov	r6, r0
 800b082:	2800      	cmp	r0, #0
 800b084:	d1e0      	bne.n	800b048 <__ssputs_r+0x5c>
 800b086:	6921      	ldr	r1, [r4, #16]
 800b088:	4650      	mov	r0, sl
 800b08a:	f7ff feb7 	bl	800adfc <_free_r>
 800b08e:	230c      	movs	r3, #12
 800b090:	f8ca 3000 	str.w	r3, [sl]
 800b094:	89a3      	ldrh	r3, [r4, #12]
 800b096:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b09a:	81a3      	strh	r3, [r4, #12]
 800b09c:	f04f 30ff 	mov.w	r0, #4294967295
 800b0a0:	e7e9      	b.n	800b076 <__ssputs_r+0x8a>
	...

0800b0a4 <_svfiprintf_r>:
 800b0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0a8:	4698      	mov	r8, r3
 800b0aa:	898b      	ldrh	r3, [r1, #12]
 800b0ac:	061b      	lsls	r3, r3, #24
 800b0ae:	b09d      	sub	sp, #116	@ 0x74
 800b0b0:	4607      	mov	r7, r0
 800b0b2:	460d      	mov	r5, r1
 800b0b4:	4614      	mov	r4, r2
 800b0b6:	d510      	bpl.n	800b0da <_svfiprintf_r+0x36>
 800b0b8:	690b      	ldr	r3, [r1, #16]
 800b0ba:	b973      	cbnz	r3, 800b0da <_svfiprintf_r+0x36>
 800b0bc:	2140      	movs	r1, #64	@ 0x40
 800b0be:	f7ff ff09 	bl	800aed4 <_malloc_r>
 800b0c2:	6028      	str	r0, [r5, #0]
 800b0c4:	6128      	str	r0, [r5, #16]
 800b0c6:	b930      	cbnz	r0, 800b0d6 <_svfiprintf_r+0x32>
 800b0c8:	230c      	movs	r3, #12
 800b0ca:	603b      	str	r3, [r7, #0]
 800b0cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b0d0:	b01d      	add	sp, #116	@ 0x74
 800b0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0d6:	2340      	movs	r3, #64	@ 0x40
 800b0d8:	616b      	str	r3, [r5, #20]
 800b0da:	2300      	movs	r3, #0
 800b0dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0de:	2320      	movs	r3, #32
 800b0e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b0e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0e8:	2330      	movs	r3, #48	@ 0x30
 800b0ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b288 <_svfiprintf_r+0x1e4>
 800b0ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b0f2:	f04f 0901 	mov.w	r9, #1
 800b0f6:	4623      	mov	r3, r4
 800b0f8:	469a      	mov	sl, r3
 800b0fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0fe:	b10a      	cbz	r2, 800b104 <_svfiprintf_r+0x60>
 800b100:	2a25      	cmp	r2, #37	@ 0x25
 800b102:	d1f9      	bne.n	800b0f8 <_svfiprintf_r+0x54>
 800b104:	ebba 0b04 	subs.w	fp, sl, r4
 800b108:	d00b      	beq.n	800b122 <_svfiprintf_r+0x7e>
 800b10a:	465b      	mov	r3, fp
 800b10c:	4622      	mov	r2, r4
 800b10e:	4629      	mov	r1, r5
 800b110:	4638      	mov	r0, r7
 800b112:	f7ff ff6b 	bl	800afec <__ssputs_r>
 800b116:	3001      	adds	r0, #1
 800b118:	f000 80a7 	beq.w	800b26a <_svfiprintf_r+0x1c6>
 800b11c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b11e:	445a      	add	r2, fp
 800b120:	9209      	str	r2, [sp, #36]	@ 0x24
 800b122:	f89a 3000 	ldrb.w	r3, [sl]
 800b126:	2b00      	cmp	r3, #0
 800b128:	f000 809f 	beq.w	800b26a <_svfiprintf_r+0x1c6>
 800b12c:	2300      	movs	r3, #0
 800b12e:	f04f 32ff 	mov.w	r2, #4294967295
 800b132:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b136:	f10a 0a01 	add.w	sl, sl, #1
 800b13a:	9304      	str	r3, [sp, #16]
 800b13c:	9307      	str	r3, [sp, #28]
 800b13e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b142:	931a      	str	r3, [sp, #104]	@ 0x68
 800b144:	4654      	mov	r4, sl
 800b146:	2205      	movs	r2, #5
 800b148:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b14c:	484e      	ldr	r0, [pc, #312]	@ (800b288 <_svfiprintf_r+0x1e4>)
 800b14e:	f7f5 f8d7 	bl	8000300 <memchr>
 800b152:	9a04      	ldr	r2, [sp, #16]
 800b154:	b9d8      	cbnz	r0, 800b18e <_svfiprintf_r+0xea>
 800b156:	06d0      	lsls	r0, r2, #27
 800b158:	bf44      	itt	mi
 800b15a:	2320      	movmi	r3, #32
 800b15c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b160:	0711      	lsls	r1, r2, #28
 800b162:	bf44      	itt	mi
 800b164:	232b      	movmi	r3, #43	@ 0x2b
 800b166:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b16a:	f89a 3000 	ldrb.w	r3, [sl]
 800b16e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b170:	d015      	beq.n	800b19e <_svfiprintf_r+0xfa>
 800b172:	9a07      	ldr	r2, [sp, #28]
 800b174:	4654      	mov	r4, sl
 800b176:	2000      	movs	r0, #0
 800b178:	f04f 0c0a 	mov.w	ip, #10
 800b17c:	4621      	mov	r1, r4
 800b17e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b182:	3b30      	subs	r3, #48	@ 0x30
 800b184:	2b09      	cmp	r3, #9
 800b186:	d94b      	bls.n	800b220 <_svfiprintf_r+0x17c>
 800b188:	b1b0      	cbz	r0, 800b1b8 <_svfiprintf_r+0x114>
 800b18a:	9207      	str	r2, [sp, #28]
 800b18c:	e014      	b.n	800b1b8 <_svfiprintf_r+0x114>
 800b18e:	eba0 0308 	sub.w	r3, r0, r8
 800b192:	fa09 f303 	lsl.w	r3, r9, r3
 800b196:	4313      	orrs	r3, r2
 800b198:	9304      	str	r3, [sp, #16]
 800b19a:	46a2      	mov	sl, r4
 800b19c:	e7d2      	b.n	800b144 <_svfiprintf_r+0xa0>
 800b19e:	9b03      	ldr	r3, [sp, #12]
 800b1a0:	1d19      	adds	r1, r3, #4
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	9103      	str	r1, [sp, #12]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	bfbb      	ittet	lt
 800b1aa:	425b      	neglt	r3, r3
 800b1ac:	f042 0202 	orrlt.w	r2, r2, #2
 800b1b0:	9307      	strge	r3, [sp, #28]
 800b1b2:	9307      	strlt	r3, [sp, #28]
 800b1b4:	bfb8      	it	lt
 800b1b6:	9204      	strlt	r2, [sp, #16]
 800b1b8:	7823      	ldrb	r3, [r4, #0]
 800b1ba:	2b2e      	cmp	r3, #46	@ 0x2e
 800b1bc:	d10a      	bne.n	800b1d4 <_svfiprintf_r+0x130>
 800b1be:	7863      	ldrb	r3, [r4, #1]
 800b1c0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b1c2:	d132      	bne.n	800b22a <_svfiprintf_r+0x186>
 800b1c4:	9b03      	ldr	r3, [sp, #12]
 800b1c6:	1d1a      	adds	r2, r3, #4
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	9203      	str	r2, [sp, #12]
 800b1cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b1d0:	3402      	adds	r4, #2
 800b1d2:	9305      	str	r3, [sp, #20]
 800b1d4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b298 <_svfiprintf_r+0x1f4>
 800b1d8:	7821      	ldrb	r1, [r4, #0]
 800b1da:	2203      	movs	r2, #3
 800b1dc:	4650      	mov	r0, sl
 800b1de:	f7f5 f88f 	bl	8000300 <memchr>
 800b1e2:	b138      	cbz	r0, 800b1f4 <_svfiprintf_r+0x150>
 800b1e4:	9b04      	ldr	r3, [sp, #16]
 800b1e6:	eba0 000a 	sub.w	r0, r0, sl
 800b1ea:	2240      	movs	r2, #64	@ 0x40
 800b1ec:	4082      	lsls	r2, r0
 800b1ee:	4313      	orrs	r3, r2
 800b1f0:	3401      	adds	r4, #1
 800b1f2:	9304      	str	r3, [sp, #16]
 800b1f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1f8:	4824      	ldr	r0, [pc, #144]	@ (800b28c <_svfiprintf_r+0x1e8>)
 800b1fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b1fe:	2206      	movs	r2, #6
 800b200:	f7f5 f87e 	bl	8000300 <memchr>
 800b204:	2800      	cmp	r0, #0
 800b206:	d036      	beq.n	800b276 <_svfiprintf_r+0x1d2>
 800b208:	4b21      	ldr	r3, [pc, #132]	@ (800b290 <_svfiprintf_r+0x1ec>)
 800b20a:	bb1b      	cbnz	r3, 800b254 <_svfiprintf_r+0x1b0>
 800b20c:	9b03      	ldr	r3, [sp, #12]
 800b20e:	3307      	adds	r3, #7
 800b210:	f023 0307 	bic.w	r3, r3, #7
 800b214:	3308      	adds	r3, #8
 800b216:	9303      	str	r3, [sp, #12]
 800b218:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b21a:	4433      	add	r3, r6
 800b21c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b21e:	e76a      	b.n	800b0f6 <_svfiprintf_r+0x52>
 800b220:	fb0c 3202 	mla	r2, ip, r2, r3
 800b224:	460c      	mov	r4, r1
 800b226:	2001      	movs	r0, #1
 800b228:	e7a8      	b.n	800b17c <_svfiprintf_r+0xd8>
 800b22a:	2300      	movs	r3, #0
 800b22c:	3401      	adds	r4, #1
 800b22e:	9305      	str	r3, [sp, #20]
 800b230:	4619      	mov	r1, r3
 800b232:	f04f 0c0a 	mov.w	ip, #10
 800b236:	4620      	mov	r0, r4
 800b238:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b23c:	3a30      	subs	r2, #48	@ 0x30
 800b23e:	2a09      	cmp	r2, #9
 800b240:	d903      	bls.n	800b24a <_svfiprintf_r+0x1a6>
 800b242:	2b00      	cmp	r3, #0
 800b244:	d0c6      	beq.n	800b1d4 <_svfiprintf_r+0x130>
 800b246:	9105      	str	r1, [sp, #20]
 800b248:	e7c4      	b.n	800b1d4 <_svfiprintf_r+0x130>
 800b24a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b24e:	4604      	mov	r4, r0
 800b250:	2301      	movs	r3, #1
 800b252:	e7f0      	b.n	800b236 <_svfiprintf_r+0x192>
 800b254:	ab03      	add	r3, sp, #12
 800b256:	9300      	str	r3, [sp, #0]
 800b258:	462a      	mov	r2, r5
 800b25a:	4b0e      	ldr	r3, [pc, #56]	@ (800b294 <_svfiprintf_r+0x1f0>)
 800b25c:	a904      	add	r1, sp, #16
 800b25e:	4638      	mov	r0, r7
 800b260:	f3af 8000 	nop.w
 800b264:	1c42      	adds	r2, r0, #1
 800b266:	4606      	mov	r6, r0
 800b268:	d1d6      	bne.n	800b218 <_svfiprintf_r+0x174>
 800b26a:	89ab      	ldrh	r3, [r5, #12]
 800b26c:	065b      	lsls	r3, r3, #25
 800b26e:	f53f af2d 	bmi.w	800b0cc <_svfiprintf_r+0x28>
 800b272:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b274:	e72c      	b.n	800b0d0 <_svfiprintf_r+0x2c>
 800b276:	ab03      	add	r3, sp, #12
 800b278:	9300      	str	r3, [sp, #0]
 800b27a:	462a      	mov	r2, r5
 800b27c:	4b05      	ldr	r3, [pc, #20]	@ (800b294 <_svfiprintf_r+0x1f0>)
 800b27e:	a904      	add	r1, sp, #16
 800b280:	4638      	mov	r0, r7
 800b282:	f000 f879 	bl	800b378 <_printf_i>
 800b286:	e7ed      	b.n	800b264 <_svfiprintf_r+0x1c0>
 800b288:	0800b868 	.word	0x0800b868
 800b28c:	0800b872 	.word	0x0800b872
 800b290:	00000000 	.word	0x00000000
 800b294:	0800afed 	.word	0x0800afed
 800b298:	0800b86e 	.word	0x0800b86e

0800b29c <_printf_common>:
 800b29c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2a0:	4616      	mov	r6, r2
 800b2a2:	4698      	mov	r8, r3
 800b2a4:	688a      	ldr	r2, [r1, #8]
 800b2a6:	690b      	ldr	r3, [r1, #16]
 800b2a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b2ac:	4293      	cmp	r3, r2
 800b2ae:	bfb8      	it	lt
 800b2b0:	4613      	movlt	r3, r2
 800b2b2:	6033      	str	r3, [r6, #0]
 800b2b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b2b8:	4607      	mov	r7, r0
 800b2ba:	460c      	mov	r4, r1
 800b2bc:	b10a      	cbz	r2, 800b2c2 <_printf_common+0x26>
 800b2be:	3301      	adds	r3, #1
 800b2c0:	6033      	str	r3, [r6, #0]
 800b2c2:	6823      	ldr	r3, [r4, #0]
 800b2c4:	0699      	lsls	r1, r3, #26
 800b2c6:	bf42      	ittt	mi
 800b2c8:	6833      	ldrmi	r3, [r6, #0]
 800b2ca:	3302      	addmi	r3, #2
 800b2cc:	6033      	strmi	r3, [r6, #0]
 800b2ce:	6825      	ldr	r5, [r4, #0]
 800b2d0:	f015 0506 	ands.w	r5, r5, #6
 800b2d4:	d106      	bne.n	800b2e4 <_printf_common+0x48>
 800b2d6:	f104 0a19 	add.w	sl, r4, #25
 800b2da:	68e3      	ldr	r3, [r4, #12]
 800b2dc:	6832      	ldr	r2, [r6, #0]
 800b2de:	1a9b      	subs	r3, r3, r2
 800b2e0:	42ab      	cmp	r3, r5
 800b2e2:	dc26      	bgt.n	800b332 <_printf_common+0x96>
 800b2e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b2e8:	6822      	ldr	r2, [r4, #0]
 800b2ea:	3b00      	subs	r3, #0
 800b2ec:	bf18      	it	ne
 800b2ee:	2301      	movne	r3, #1
 800b2f0:	0692      	lsls	r2, r2, #26
 800b2f2:	d42b      	bmi.n	800b34c <_printf_common+0xb0>
 800b2f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b2f8:	4641      	mov	r1, r8
 800b2fa:	4638      	mov	r0, r7
 800b2fc:	47c8      	blx	r9
 800b2fe:	3001      	adds	r0, #1
 800b300:	d01e      	beq.n	800b340 <_printf_common+0xa4>
 800b302:	6823      	ldr	r3, [r4, #0]
 800b304:	6922      	ldr	r2, [r4, #16]
 800b306:	f003 0306 	and.w	r3, r3, #6
 800b30a:	2b04      	cmp	r3, #4
 800b30c:	bf02      	ittt	eq
 800b30e:	68e5      	ldreq	r5, [r4, #12]
 800b310:	6833      	ldreq	r3, [r6, #0]
 800b312:	1aed      	subeq	r5, r5, r3
 800b314:	68a3      	ldr	r3, [r4, #8]
 800b316:	bf0c      	ite	eq
 800b318:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b31c:	2500      	movne	r5, #0
 800b31e:	4293      	cmp	r3, r2
 800b320:	bfc4      	itt	gt
 800b322:	1a9b      	subgt	r3, r3, r2
 800b324:	18ed      	addgt	r5, r5, r3
 800b326:	2600      	movs	r6, #0
 800b328:	341a      	adds	r4, #26
 800b32a:	42b5      	cmp	r5, r6
 800b32c:	d11a      	bne.n	800b364 <_printf_common+0xc8>
 800b32e:	2000      	movs	r0, #0
 800b330:	e008      	b.n	800b344 <_printf_common+0xa8>
 800b332:	2301      	movs	r3, #1
 800b334:	4652      	mov	r2, sl
 800b336:	4641      	mov	r1, r8
 800b338:	4638      	mov	r0, r7
 800b33a:	47c8      	blx	r9
 800b33c:	3001      	adds	r0, #1
 800b33e:	d103      	bne.n	800b348 <_printf_common+0xac>
 800b340:	f04f 30ff 	mov.w	r0, #4294967295
 800b344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b348:	3501      	adds	r5, #1
 800b34a:	e7c6      	b.n	800b2da <_printf_common+0x3e>
 800b34c:	18e1      	adds	r1, r4, r3
 800b34e:	1c5a      	adds	r2, r3, #1
 800b350:	2030      	movs	r0, #48	@ 0x30
 800b352:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b356:	4422      	add	r2, r4
 800b358:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b35c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b360:	3302      	adds	r3, #2
 800b362:	e7c7      	b.n	800b2f4 <_printf_common+0x58>
 800b364:	2301      	movs	r3, #1
 800b366:	4622      	mov	r2, r4
 800b368:	4641      	mov	r1, r8
 800b36a:	4638      	mov	r0, r7
 800b36c:	47c8      	blx	r9
 800b36e:	3001      	adds	r0, #1
 800b370:	d0e6      	beq.n	800b340 <_printf_common+0xa4>
 800b372:	3601      	adds	r6, #1
 800b374:	e7d9      	b.n	800b32a <_printf_common+0x8e>
	...

0800b378 <_printf_i>:
 800b378:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b37c:	7e0f      	ldrb	r7, [r1, #24]
 800b37e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b380:	2f78      	cmp	r7, #120	@ 0x78
 800b382:	4691      	mov	r9, r2
 800b384:	4680      	mov	r8, r0
 800b386:	460c      	mov	r4, r1
 800b388:	469a      	mov	sl, r3
 800b38a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b38e:	d807      	bhi.n	800b3a0 <_printf_i+0x28>
 800b390:	2f62      	cmp	r7, #98	@ 0x62
 800b392:	d80a      	bhi.n	800b3aa <_printf_i+0x32>
 800b394:	2f00      	cmp	r7, #0
 800b396:	f000 80d2 	beq.w	800b53e <_printf_i+0x1c6>
 800b39a:	2f58      	cmp	r7, #88	@ 0x58
 800b39c:	f000 80b9 	beq.w	800b512 <_printf_i+0x19a>
 800b3a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b3a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b3a8:	e03a      	b.n	800b420 <_printf_i+0xa8>
 800b3aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b3ae:	2b15      	cmp	r3, #21
 800b3b0:	d8f6      	bhi.n	800b3a0 <_printf_i+0x28>
 800b3b2:	a101      	add	r1, pc, #4	@ (adr r1, 800b3b8 <_printf_i+0x40>)
 800b3b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b3b8:	0800b411 	.word	0x0800b411
 800b3bc:	0800b425 	.word	0x0800b425
 800b3c0:	0800b3a1 	.word	0x0800b3a1
 800b3c4:	0800b3a1 	.word	0x0800b3a1
 800b3c8:	0800b3a1 	.word	0x0800b3a1
 800b3cc:	0800b3a1 	.word	0x0800b3a1
 800b3d0:	0800b425 	.word	0x0800b425
 800b3d4:	0800b3a1 	.word	0x0800b3a1
 800b3d8:	0800b3a1 	.word	0x0800b3a1
 800b3dc:	0800b3a1 	.word	0x0800b3a1
 800b3e0:	0800b3a1 	.word	0x0800b3a1
 800b3e4:	0800b525 	.word	0x0800b525
 800b3e8:	0800b44f 	.word	0x0800b44f
 800b3ec:	0800b4df 	.word	0x0800b4df
 800b3f0:	0800b3a1 	.word	0x0800b3a1
 800b3f4:	0800b3a1 	.word	0x0800b3a1
 800b3f8:	0800b547 	.word	0x0800b547
 800b3fc:	0800b3a1 	.word	0x0800b3a1
 800b400:	0800b44f 	.word	0x0800b44f
 800b404:	0800b3a1 	.word	0x0800b3a1
 800b408:	0800b3a1 	.word	0x0800b3a1
 800b40c:	0800b4e7 	.word	0x0800b4e7
 800b410:	6833      	ldr	r3, [r6, #0]
 800b412:	1d1a      	adds	r2, r3, #4
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	6032      	str	r2, [r6, #0]
 800b418:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b41c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b420:	2301      	movs	r3, #1
 800b422:	e09d      	b.n	800b560 <_printf_i+0x1e8>
 800b424:	6833      	ldr	r3, [r6, #0]
 800b426:	6820      	ldr	r0, [r4, #0]
 800b428:	1d19      	adds	r1, r3, #4
 800b42a:	6031      	str	r1, [r6, #0]
 800b42c:	0606      	lsls	r6, r0, #24
 800b42e:	d501      	bpl.n	800b434 <_printf_i+0xbc>
 800b430:	681d      	ldr	r5, [r3, #0]
 800b432:	e003      	b.n	800b43c <_printf_i+0xc4>
 800b434:	0645      	lsls	r5, r0, #25
 800b436:	d5fb      	bpl.n	800b430 <_printf_i+0xb8>
 800b438:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b43c:	2d00      	cmp	r5, #0
 800b43e:	da03      	bge.n	800b448 <_printf_i+0xd0>
 800b440:	232d      	movs	r3, #45	@ 0x2d
 800b442:	426d      	negs	r5, r5
 800b444:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b448:	4859      	ldr	r0, [pc, #356]	@ (800b5b0 <_printf_i+0x238>)
 800b44a:	230a      	movs	r3, #10
 800b44c:	e011      	b.n	800b472 <_printf_i+0xfa>
 800b44e:	6821      	ldr	r1, [r4, #0]
 800b450:	6833      	ldr	r3, [r6, #0]
 800b452:	0608      	lsls	r0, r1, #24
 800b454:	f853 5b04 	ldr.w	r5, [r3], #4
 800b458:	d402      	bmi.n	800b460 <_printf_i+0xe8>
 800b45a:	0649      	lsls	r1, r1, #25
 800b45c:	bf48      	it	mi
 800b45e:	b2ad      	uxthmi	r5, r5
 800b460:	2f6f      	cmp	r7, #111	@ 0x6f
 800b462:	4853      	ldr	r0, [pc, #332]	@ (800b5b0 <_printf_i+0x238>)
 800b464:	6033      	str	r3, [r6, #0]
 800b466:	bf14      	ite	ne
 800b468:	230a      	movne	r3, #10
 800b46a:	2308      	moveq	r3, #8
 800b46c:	2100      	movs	r1, #0
 800b46e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b472:	6866      	ldr	r6, [r4, #4]
 800b474:	60a6      	str	r6, [r4, #8]
 800b476:	2e00      	cmp	r6, #0
 800b478:	bfa2      	ittt	ge
 800b47a:	6821      	ldrge	r1, [r4, #0]
 800b47c:	f021 0104 	bicge.w	r1, r1, #4
 800b480:	6021      	strge	r1, [r4, #0]
 800b482:	b90d      	cbnz	r5, 800b488 <_printf_i+0x110>
 800b484:	2e00      	cmp	r6, #0
 800b486:	d04b      	beq.n	800b520 <_printf_i+0x1a8>
 800b488:	4616      	mov	r6, r2
 800b48a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b48e:	fb03 5711 	mls	r7, r3, r1, r5
 800b492:	5dc7      	ldrb	r7, [r0, r7]
 800b494:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b498:	462f      	mov	r7, r5
 800b49a:	42bb      	cmp	r3, r7
 800b49c:	460d      	mov	r5, r1
 800b49e:	d9f4      	bls.n	800b48a <_printf_i+0x112>
 800b4a0:	2b08      	cmp	r3, #8
 800b4a2:	d10b      	bne.n	800b4bc <_printf_i+0x144>
 800b4a4:	6823      	ldr	r3, [r4, #0]
 800b4a6:	07df      	lsls	r7, r3, #31
 800b4a8:	d508      	bpl.n	800b4bc <_printf_i+0x144>
 800b4aa:	6923      	ldr	r3, [r4, #16]
 800b4ac:	6861      	ldr	r1, [r4, #4]
 800b4ae:	4299      	cmp	r1, r3
 800b4b0:	bfde      	ittt	le
 800b4b2:	2330      	movle	r3, #48	@ 0x30
 800b4b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b4b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b4bc:	1b92      	subs	r2, r2, r6
 800b4be:	6122      	str	r2, [r4, #16]
 800b4c0:	f8cd a000 	str.w	sl, [sp]
 800b4c4:	464b      	mov	r3, r9
 800b4c6:	aa03      	add	r2, sp, #12
 800b4c8:	4621      	mov	r1, r4
 800b4ca:	4640      	mov	r0, r8
 800b4cc:	f7ff fee6 	bl	800b29c <_printf_common>
 800b4d0:	3001      	adds	r0, #1
 800b4d2:	d14a      	bne.n	800b56a <_printf_i+0x1f2>
 800b4d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b4d8:	b004      	add	sp, #16
 800b4da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4de:	6823      	ldr	r3, [r4, #0]
 800b4e0:	f043 0320 	orr.w	r3, r3, #32
 800b4e4:	6023      	str	r3, [r4, #0]
 800b4e6:	4833      	ldr	r0, [pc, #204]	@ (800b5b4 <_printf_i+0x23c>)
 800b4e8:	2778      	movs	r7, #120	@ 0x78
 800b4ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b4ee:	6823      	ldr	r3, [r4, #0]
 800b4f0:	6831      	ldr	r1, [r6, #0]
 800b4f2:	061f      	lsls	r7, r3, #24
 800b4f4:	f851 5b04 	ldr.w	r5, [r1], #4
 800b4f8:	d402      	bmi.n	800b500 <_printf_i+0x188>
 800b4fa:	065f      	lsls	r7, r3, #25
 800b4fc:	bf48      	it	mi
 800b4fe:	b2ad      	uxthmi	r5, r5
 800b500:	6031      	str	r1, [r6, #0]
 800b502:	07d9      	lsls	r1, r3, #31
 800b504:	bf44      	itt	mi
 800b506:	f043 0320 	orrmi.w	r3, r3, #32
 800b50a:	6023      	strmi	r3, [r4, #0]
 800b50c:	b11d      	cbz	r5, 800b516 <_printf_i+0x19e>
 800b50e:	2310      	movs	r3, #16
 800b510:	e7ac      	b.n	800b46c <_printf_i+0xf4>
 800b512:	4827      	ldr	r0, [pc, #156]	@ (800b5b0 <_printf_i+0x238>)
 800b514:	e7e9      	b.n	800b4ea <_printf_i+0x172>
 800b516:	6823      	ldr	r3, [r4, #0]
 800b518:	f023 0320 	bic.w	r3, r3, #32
 800b51c:	6023      	str	r3, [r4, #0]
 800b51e:	e7f6      	b.n	800b50e <_printf_i+0x196>
 800b520:	4616      	mov	r6, r2
 800b522:	e7bd      	b.n	800b4a0 <_printf_i+0x128>
 800b524:	6833      	ldr	r3, [r6, #0]
 800b526:	6825      	ldr	r5, [r4, #0]
 800b528:	6961      	ldr	r1, [r4, #20]
 800b52a:	1d18      	adds	r0, r3, #4
 800b52c:	6030      	str	r0, [r6, #0]
 800b52e:	062e      	lsls	r6, r5, #24
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	d501      	bpl.n	800b538 <_printf_i+0x1c0>
 800b534:	6019      	str	r1, [r3, #0]
 800b536:	e002      	b.n	800b53e <_printf_i+0x1c6>
 800b538:	0668      	lsls	r0, r5, #25
 800b53a:	d5fb      	bpl.n	800b534 <_printf_i+0x1bc>
 800b53c:	8019      	strh	r1, [r3, #0]
 800b53e:	2300      	movs	r3, #0
 800b540:	6123      	str	r3, [r4, #16]
 800b542:	4616      	mov	r6, r2
 800b544:	e7bc      	b.n	800b4c0 <_printf_i+0x148>
 800b546:	6833      	ldr	r3, [r6, #0]
 800b548:	1d1a      	adds	r2, r3, #4
 800b54a:	6032      	str	r2, [r6, #0]
 800b54c:	681e      	ldr	r6, [r3, #0]
 800b54e:	6862      	ldr	r2, [r4, #4]
 800b550:	2100      	movs	r1, #0
 800b552:	4630      	mov	r0, r6
 800b554:	f7f4 fed4 	bl	8000300 <memchr>
 800b558:	b108      	cbz	r0, 800b55e <_printf_i+0x1e6>
 800b55a:	1b80      	subs	r0, r0, r6
 800b55c:	6060      	str	r0, [r4, #4]
 800b55e:	6863      	ldr	r3, [r4, #4]
 800b560:	6123      	str	r3, [r4, #16]
 800b562:	2300      	movs	r3, #0
 800b564:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b568:	e7aa      	b.n	800b4c0 <_printf_i+0x148>
 800b56a:	6923      	ldr	r3, [r4, #16]
 800b56c:	4632      	mov	r2, r6
 800b56e:	4649      	mov	r1, r9
 800b570:	4640      	mov	r0, r8
 800b572:	47d0      	blx	sl
 800b574:	3001      	adds	r0, #1
 800b576:	d0ad      	beq.n	800b4d4 <_printf_i+0x15c>
 800b578:	6823      	ldr	r3, [r4, #0]
 800b57a:	079b      	lsls	r3, r3, #30
 800b57c:	d413      	bmi.n	800b5a6 <_printf_i+0x22e>
 800b57e:	68e0      	ldr	r0, [r4, #12]
 800b580:	9b03      	ldr	r3, [sp, #12]
 800b582:	4298      	cmp	r0, r3
 800b584:	bfb8      	it	lt
 800b586:	4618      	movlt	r0, r3
 800b588:	e7a6      	b.n	800b4d8 <_printf_i+0x160>
 800b58a:	2301      	movs	r3, #1
 800b58c:	4632      	mov	r2, r6
 800b58e:	4649      	mov	r1, r9
 800b590:	4640      	mov	r0, r8
 800b592:	47d0      	blx	sl
 800b594:	3001      	adds	r0, #1
 800b596:	d09d      	beq.n	800b4d4 <_printf_i+0x15c>
 800b598:	3501      	adds	r5, #1
 800b59a:	68e3      	ldr	r3, [r4, #12]
 800b59c:	9903      	ldr	r1, [sp, #12]
 800b59e:	1a5b      	subs	r3, r3, r1
 800b5a0:	42ab      	cmp	r3, r5
 800b5a2:	dcf2      	bgt.n	800b58a <_printf_i+0x212>
 800b5a4:	e7eb      	b.n	800b57e <_printf_i+0x206>
 800b5a6:	2500      	movs	r5, #0
 800b5a8:	f104 0619 	add.w	r6, r4, #25
 800b5ac:	e7f5      	b.n	800b59a <_printf_i+0x222>
 800b5ae:	bf00      	nop
 800b5b0:	0800b879 	.word	0x0800b879
 800b5b4:	0800b88a 	.word	0x0800b88a

0800b5b8 <memmove>:
 800b5b8:	4288      	cmp	r0, r1
 800b5ba:	b510      	push	{r4, lr}
 800b5bc:	eb01 0402 	add.w	r4, r1, r2
 800b5c0:	d902      	bls.n	800b5c8 <memmove+0x10>
 800b5c2:	4284      	cmp	r4, r0
 800b5c4:	4623      	mov	r3, r4
 800b5c6:	d807      	bhi.n	800b5d8 <memmove+0x20>
 800b5c8:	1e43      	subs	r3, r0, #1
 800b5ca:	42a1      	cmp	r1, r4
 800b5cc:	d008      	beq.n	800b5e0 <memmove+0x28>
 800b5ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b5d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b5d6:	e7f8      	b.n	800b5ca <memmove+0x12>
 800b5d8:	4402      	add	r2, r0
 800b5da:	4601      	mov	r1, r0
 800b5dc:	428a      	cmp	r2, r1
 800b5de:	d100      	bne.n	800b5e2 <memmove+0x2a>
 800b5e0:	bd10      	pop	{r4, pc}
 800b5e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b5e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b5ea:	e7f7      	b.n	800b5dc <memmove+0x24>

0800b5ec <_sbrk_r>:
 800b5ec:	b538      	push	{r3, r4, r5, lr}
 800b5ee:	4d06      	ldr	r5, [pc, #24]	@ (800b608 <_sbrk_r+0x1c>)
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	4604      	mov	r4, r0
 800b5f4:	4608      	mov	r0, r1
 800b5f6:	602b      	str	r3, [r5, #0]
 800b5f8:	f7f6 fa38 	bl	8001a6c <_sbrk>
 800b5fc:	1c43      	adds	r3, r0, #1
 800b5fe:	d102      	bne.n	800b606 <_sbrk_r+0x1a>
 800b600:	682b      	ldr	r3, [r5, #0]
 800b602:	b103      	cbz	r3, 800b606 <_sbrk_r+0x1a>
 800b604:	6023      	str	r3, [r4, #0]
 800b606:	bd38      	pop	{r3, r4, r5, pc}
 800b608:	24000468 	.word	0x24000468

0800b60c <memcpy>:
 800b60c:	440a      	add	r2, r1
 800b60e:	4291      	cmp	r1, r2
 800b610:	f100 33ff 	add.w	r3, r0, #4294967295
 800b614:	d100      	bne.n	800b618 <memcpy+0xc>
 800b616:	4770      	bx	lr
 800b618:	b510      	push	{r4, lr}
 800b61a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b61e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b622:	4291      	cmp	r1, r2
 800b624:	d1f9      	bne.n	800b61a <memcpy+0xe>
 800b626:	bd10      	pop	{r4, pc}

0800b628 <_realloc_r>:
 800b628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b62c:	4680      	mov	r8, r0
 800b62e:	4615      	mov	r5, r2
 800b630:	460c      	mov	r4, r1
 800b632:	b921      	cbnz	r1, 800b63e <_realloc_r+0x16>
 800b634:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b638:	4611      	mov	r1, r2
 800b63a:	f7ff bc4b 	b.w	800aed4 <_malloc_r>
 800b63e:	b92a      	cbnz	r2, 800b64c <_realloc_r+0x24>
 800b640:	f7ff fbdc 	bl	800adfc <_free_r>
 800b644:	2400      	movs	r4, #0
 800b646:	4620      	mov	r0, r4
 800b648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b64c:	f000 f81a 	bl	800b684 <_malloc_usable_size_r>
 800b650:	4285      	cmp	r5, r0
 800b652:	4606      	mov	r6, r0
 800b654:	d802      	bhi.n	800b65c <_realloc_r+0x34>
 800b656:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b65a:	d8f4      	bhi.n	800b646 <_realloc_r+0x1e>
 800b65c:	4629      	mov	r1, r5
 800b65e:	4640      	mov	r0, r8
 800b660:	f7ff fc38 	bl	800aed4 <_malloc_r>
 800b664:	4607      	mov	r7, r0
 800b666:	2800      	cmp	r0, #0
 800b668:	d0ec      	beq.n	800b644 <_realloc_r+0x1c>
 800b66a:	42b5      	cmp	r5, r6
 800b66c:	462a      	mov	r2, r5
 800b66e:	4621      	mov	r1, r4
 800b670:	bf28      	it	cs
 800b672:	4632      	movcs	r2, r6
 800b674:	f7ff ffca 	bl	800b60c <memcpy>
 800b678:	4621      	mov	r1, r4
 800b67a:	4640      	mov	r0, r8
 800b67c:	f7ff fbbe 	bl	800adfc <_free_r>
 800b680:	463c      	mov	r4, r7
 800b682:	e7e0      	b.n	800b646 <_realloc_r+0x1e>

0800b684 <_malloc_usable_size_r>:
 800b684:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b688:	1f18      	subs	r0, r3, #4
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	bfbc      	itt	lt
 800b68e:	580b      	ldrlt	r3, [r1, r0]
 800b690:	18c0      	addlt	r0, r0, r3
 800b692:	4770      	bx	lr

0800b694 <_init>:
 800b694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b696:	bf00      	nop
 800b698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b69a:	bc08      	pop	{r3}
 800b69c:	469e      	mov	lr, r3
 800b69e:	4770      	bx	lr

0800b6a0 <_fini>:
 800b6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6a2:	bf00      	nop
 800b6a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6a6:	bc08      	pop	{r3}
 800b6a8:	469e      	mov	lr, r3
 800b6aa:	4770      	bx	lr
