
PCB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e28  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080050c0  080050c0  000060c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080050f8  080050f8  000060f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005100  08005100  00006100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08005104  08005104  00006104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08005108  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000b4  24000010  08005118  00007010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240000c4  08005118  000070c4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000edf4  00000000  00000000  0000703e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001c4d  00000000  00000000  00015e32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000a00  00000000  00000000  00017a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000007b1  00000000  00000000  00018480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035622  00000000  00000000  00018c31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000e07e  00000000  00000000  0004e253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015587f  00000000  00000000  0005c2d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001b1b50  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000028d0  00000000  00000000  001b1b94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000053  00000000  00000000  001b4464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080050a8 	.word	0x080050a8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080050a8 	.word	0x080050a8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005cc:	f000 f8da 	bl	8000784 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d0:	f000 fa6e 	bl	8000ab0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d4:	f000 f806 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d8:	f000 f8ba 	bl	8000750 <MX_GPIO_Init>
  MX_UART4_Init();
 80005dc:	f000 f86c 	bl	80006b8 <MX_UART4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e0:	bf00      	nop
 80005e2:	e7fd      	b.n	80005e0 <main+0x18>

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b09c      	sub	sp, #112	@ 0x70
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005ee:	224c      	movs	r2, #76	@ 0x4c
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f004 fd2c 	bl	8005050 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	2220      	movs	r2, #32
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f004 fd26 	bl	8005050 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000604:	2002      	movs	r0, #2
 8000606:	f000 fe01 	bl	800120c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800060a:	2300      	movs	r3, #0
 800060c:	603b      	str	r3, [r7, #0]
 800060e:	4b28      	ldr	r3, [pc, #160]	@ (80006b0 <SystemClock_Config+0xcc>)
 8000610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000612:	4a27      	ldr	r2, [pc, #156]	@ (80006b0 <SystemClock_Config+0xcc>)
 8000614:	f023 0301 	bic.w	r3, r3, #1
 8000618:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800061a:	4b25      	ldr	r3, [pc, #148]	@ (80006b0 <SystemClock_Config+0xcc>)
 800061c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	603b      	str	r3, [r7, #0]
 8000624:	4b23      	ldr	r3, [pc, #140]	@ (80006b4 <SystemClock_Config+0xd0>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800062c:	4a21      	ldr	r2, [pc, #132]	@ (80006b4 <SystemClock_Config+0xd0>)
 800062e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000632:	6193      	str	r3, [r2, #24]
 8000634:	4b1f      	ldr	r3, [pc, #124]	@ (80006b4 <SystemClock_Config+0xd0>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800063c:	603b      	str	r3, [r7, #0]
 800063e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000640:	bf00      	nop
 8000642:	4b1c      	ldr	r3, [pc, #112]	@ (80006b4 <SystemClock_Config+0xd0>)
 8000644:	699b      	ldr	r3, [r3, #24]
 8000646:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800064a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800064e:	d1f8      	bne.n	8000642 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000650:	2302      	movs	r3, #2
 8000652:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000654:	2301      	movs	r3, #1
 8000656:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000658:	2340      	movs	r3, #64	@ 0x40
 800065a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800065c:	2300      	movs	r3, #0
 800065e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000660:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000664:	4618      	mov	r0, r3
 8000666:	f000 fe0b 	bl	8001280 <HAL_RCC_OscConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000670:	f000 f8b4 	bl	80007dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000674:	233f      	movs	r3, #63	@ 0x3f
 8000676:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000678:	2300      	movs	r3, #0
 800067a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000688:	2340      	movs	r3, #64	@ 0x40
 800068a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	2101      	movs	r1, #1
 8000698:	4618      	mov	r0, r3
 800069a:	f001 fa4b 	bl	8001b34 <HAL_RCC_ClockConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006a4:	f000 f89a 	bl	80007dc <Error_Handler>
  }
}
 80006a8:	bf00      	nop
 80006aa:	3770      	adds	r7, #112	@ 0x70
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	58000400 	.word	0x58000400
 80006b4:	58024800 	.word	0x58024800

080006b8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80006bc:	4b22      	ldr	r3, [pc, #136]	@ (8000748 <MX_UART4_Init+0x90>)
 80006be:	4a23      	ldr	r2, [pc, #140]	@ (800074c <MX_UART4_Init+0x94>)
 80006c0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80006c2:	4b21      	ldr	r3, [pc, #132]	@ (8000748 <MX_UART4_Init+0x90>)
 80006c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006c8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80006ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000748 <MX_UART4_Init+0x90>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80006d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000748 <MX_UART4_Init+0x90>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80006d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000748 <MX_UART4_Init+0x90>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80006dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000748 <MX_UART4_Init+0x90>)
 80006de:	220c      	movs	r2, #12
 80006e0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e2:	4b19      	ldr	r3, [pc, #100]	@ (8000748 <MX_UART4_Init+0x90>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e8:	4b17      	ldr	r3, [pc, #92]	@ (8000748 <MX_UART4_Init+0x90>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ee:	4b16      	ldr	r3, [pc, #88]	@ (8000748 <MX_UART4_Init+0x90>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006f4:	4b14      	ldr	r3, [pc, #80]	@ (8000748 <MX_UART4_Init+0x90>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006fa:	4b13      	ldr	r3, [pc, #76]	@ (8000748 <MX_UART4_Init+0x90>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000700:	4811      	ldr	r0, [pc, #68]	@ (8000748 <MX_UART4_Init+0x90>)
 8000702:	f003 fbcf 	bl	8003ea4 <HAL_UART_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800070c:	f000 f866 	bl	80007dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000710:	2100      	movs	r1, #0
 8000712:	480d      	ldr	r0, [pc, #52]	@ (8000748 <MX_UART4_Init+0x90>)
 8000714:	f004 fbd1 	bl	8004eba <HAL_UARTEx_SetTxFifoThreshold>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800071e:	f000 f85d 	bl	80007dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000722:	2100      	movs	r1, #0
 8000724:	4808      	ldr	r0, [pc, #32]	@ (8000748 <MX_UART4_Init+0x90>)
 8000726:	f004 fc06 	bl	8004f36 <HAL_UARTEx_SetRxFifoThreshold>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000730:	f000 f854 	bl	80007dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000734:	4804      	ldr	r0, [pc, #16]	@ (8000748 <MX_UART4_Init+0x90>)
 8000736:	f004 fb87 	bl	8004e48 <HAL_UARTEx_DisableFifoMode>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000740:	f000 f84c 	bl	80007dc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	2400002c 	.word	0x2400002c
 800074c:	40004c00 	.word	0x40004c00

08000750 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	4b0a      	ldr	r3, [pc, #40]	@ (8000780 <MX_GPIO_Init+0x30>)
 8000758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800075c:	4a08      	ldr	r2, [pc, #32]	@ (8000780 <MX_GPIO_Init+0x30>)
 800075e:	f043 0301 	orr.w	r3, r3, #1
 8000762:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000766:	4b06      	ldr	r3, [pc, #24]	@ (8000780 <MX_GPIO_Init+0x30>)
 8000768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800076c:	f003 0301 	and.w	r3, r3, #1
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000774:	bf00      	nop
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	58024400 	.word	0x58024400

08000784 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800078a:	463b      	mov	r3, r7
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000796:	f000 fb0d 	bl	8000db4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800079a:	2301      	movs	r3, #1
 800079c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800079e:	2300      	movs	r3, #0
 80007a0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80007a6:	231f      	movs	r3, #31
 80007a8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80007aa:	2387      	movs	r3, #135	@ 0x87
 80007ac:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80007b2:	2300      	movs	r3, #0
 80007b4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80007b6:	2301      	movs	r3, #1
 80007b8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80007ba:	2301      	movs	r3, #1
 80007bc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80007be:	2300      	movs	r3, #0
 80007c0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80007c2:	2300      	movs	r3, #0
 80007c4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007c6:	463b      	mov	r3, r7
 80007c8:	4618      	mov	r0, r3
 80007ca:	f000 fb2b 	bl	8000e24 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80007ce:	2004      	movs	r0, #4
 80007d0:	f000 fb08 	bl	8000de4 <HAL_MPU_Enable>

}
 80007d4:	bf00      	nop
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e0:	b672      	cpsid	i
}
 80007e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e4:	bf00      	nop
 80007e6:	e7fd      	b.n	80007e4 <Error_Handler+0x8>

080007e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000818 <HAL_MspInit+0x30>)
 80007f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80007f4:	4a08      	ldr	r2, [pc, #32]	@ (8000818 <HAL_MspInit+0x30>)
 80007f6:	f043 0302 	orr.w	r3, r3, #2
 80007fa:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80007fe:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <HAL_MspInit+0x30>)
 8000800:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000804:	f003 0302 	and.w	r3, r3, #2
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800080c:	bf00      	nop
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr
 8000818:	58024400 	.word	0x58024400

0800081c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b0ba      	sub	sp, #232	@ 0xe8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000824:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000834:	f107 0310 	add.w	r3, r7, #16
 8000838:	22c0      	movs	r2, #192	@ 0xc0
 800083a:	2100      	movs	r1, #0
 800083c:	4618      	mov	r0, r3
 800083e:	f004 fc07 	bl	8005050 <memset>
  if(huart->Instance==UART4)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a26      	ldr	r2, [pc, #152]	@ (80008e0 <HAL_UART_MspInit+0xc4>)
 8000848:	4293      	cmp	r3, r2
 800084a:	d145      	bne.n	80008d8 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800084c:	f04f 0202 	mov.w	r2, #2
 8000850:	f04f 0300 	mov.w	r3, #0
 8000854:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000858:	2300      	movs	r3, #0
 800085a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800085e:	f107 0310 	add.w	r3, r7, #16
 8000862:	4618      	mov	r0, r3
 8000864:	f001 fcf2 	bl	800224c <HAL_RCCEx_PeriphCLKConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800086e:	f7ff ffb5 	bl	80007dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000872:	4b1c      	ldr	r3, [pc, #112]	@ (80008e4 <HAL_UART_MspInit+0xc8>)
 8000874:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000878:	4a1a      	ldr	r2, [pc, #104]	@ (80008e4 <HAL_UART_MspInit+0xc8>)
 800087a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800087e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000882:	4b18      	ldr	r3, [pc, #96]	@ (80008e4 <HAL_UART_MspInit+0xc8>)
 8000884:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000888:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000890:	4b14      	ldr	r3, [pc, #80]	@ (80008e4 <HAL_UART_MspInit+0xc8>)
 8000892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000896:	4a13      	ldr	r2, [pc, #76]	@ (80008e4 <HAL_UART_MspInit+0xc8>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008a0:	4b10      	ldr	r3, [pc, #64]	@ (80008e4 <HAL_UART_MspInit+0xc8>)
 80008a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008ae:	2303      	movs	r3, #3
 80008b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b4:	2302      	movs	r3, #2
 80008b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2300      	movs	r3, #0
 80008c2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80008c6:	2308      	movs	r3, #8
 80008c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008cc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80008d0:	4619      	mov	r1, r3
 80008d2:	4805      	ldr	r0, [pc, #20]	@ (80008e8 <HAL_UART_MspInit+0xcc>)
 80008d4:	f000 faea 	bl	8000eac <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80008d8:	bf00      	nop
 80008da:	37e8      	adds	r7, #232	@ 0xe8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40004c00 	.word	0x40004c00
 80008e4:	58024400 	.word	0x58024400
 80008e8:	58020000 	.word	0x58020000

080008ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <NMI_Handler+0x4>

080008f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <HardFault_Handler+0x4>

080008fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <MemManage_Handler+0x4>

08000904 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <BusFault_Handler+0x4>

0800090c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000910:	bf00      	nop
 8000912:	e7fd      	b.n	8000910 <UsageFault_Handler+0x4>

08000914 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr

0800093e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000942:	f000 f927 	bl	8000b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
	...

0800094c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000950:	4b37      	ldr	r3, [pc, #220]	@ (8000a30 <SystemInit+0xe4>)
 8000952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000956:	4a36      	ldr	r2, [pc, #216]	@ (8000a30 <SystemInit+0xe4>)
 8000958:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800095c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000960:	4b34      	ldr	r3, [pc, #208]	@ (8000a34 <SystemInit+0xe8>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f003 030f 	and.w	r3, r3, #15
 8000968:	2b06      	cmp	r3, #6
 800096a:	d807      	bhi.n	800097c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800096c:	4b31      	ldr	r3, [pc, #196]	@ (8000a34 <SystemInit+0xe8>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f023 030f 	bic.w	r3, r3, #15
 8000974:	4a2f      	ldr	r2, [pc, #188]	@ (8000a34 <SystemInit+0xe8>)
 8000976:	f043 0307 	orr.w	r3, r3, #7
 800097a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800097c:	4b2e      	ldr	r3, [pc, #184]	@ (8000a38 <SystemInit+0xec>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a2d      	ldr	r2, [pc, #180]	@ (8000a38 <SystemInit+0xec>)
 8000982:	f043 0301 	orr.w	r3, r3, #1
 8000986:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000988:	4b2b      	ldr	r3, [pc, #172]	@ (8000a38 <SystemInit+0xec>)
 800098a:	2200      	movs	r2, #0
 800098c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800098e:	4b2a      	ldr	r3, [pc, #168]	@ (8000a38 <SystemInit+0xec>)
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	4929      	ldr	r1, [pc, #164]	@ (8000a38 <SystemInit+0xec>)
 8000994:	4b29      	ldr	r3, [pc, #164]	@ (8000a3c <SystemInit+0xf0>)
 8000996:	4013      	ands	r3, r2
 8000998:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800099a:	4b26      	ldr	r3, [pc, #152]	@ (8000a34 <SystemInit+0xe8>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f003 0308 	and.w	r3, r3, #8
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d007      	beq.n	80009b6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009a6:	4b23      	ldr	r3, [pc, #140]	@ (8000a34 <SystemInit+0xe8>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f023 030f 	bic.w	r3, r3, #15
 80009ae:	4a21      	ldr	r2, [pc, #132]	@ (8000a34 <SystemInit+0xe8>)
 80009b0:	f043 0307 	orr.w	r3, r3, #7
 80009b4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80009b6:	4b20      	ldr	r3, [pc, #128]	@ (8000a38 <SystemInit+0xec>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80009bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000a38 <SystemInit+0xec>)
 80009be:	2200      	movs	r2, #0
 80009c0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80009c2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a38 <SystemInit+0xec>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80009c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a38 <SystemInit+0xec>)
 80009ca:	4a1d      	ldr	r2, [pc, #116]	@ (8000a40 <SystemInit+0xf4>)
 80009cc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80009ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000a38 <SystemInit+0xec>)
 80009d0:	4a1c      	ldr	r2, [pc, #112]	@ (8000a44 <SystemInit+0xf8>)
 80009d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80009d4:	4b18      	ldr	r3, [pc, #96]	@ (8000a38 <SystemInit+0xec>)
 80009d6:	4a1c      	ldr	r2, [pc, #112]	@ (8000a48 <SystemInit+0xfc>)
 80009d8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80009da:	4b17      	ldr	r3, [pc, #92]	@ (8000a38 <SystemInit+0xec>)
 80009dc:	2200      	movs	r2, #0
 80009de:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80009e0:	4b15      	ldr	r3, [pc, #84]	@ (8000a38 <SystemInit+0xec>)
 80009e2:	4a19      	ldr	r2, [pc, #100]	@ (8000a48 <SystemInit+0xfc>)
 80009e4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80009e6:	4b14      	ldr	r3, [pc, #80]	@ (8000a38 <SystemInit+0xec>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80009ec:	4b12      	ldr	r3, [pc, #72]	@ (8000a38 <SystemInit+0xec>)
 80009ee:	4a16      	ldr	r2, [pc, #88]	@ (8000a48 <SystemInit+0xfc>)
 80009f0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80009f2:	4b11      	ldr	r3, [pc, #68]	@ (8000a38 <SystemInit+0xec>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a38 <SystemInit+0xec>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a0e      	ldr	r2, [pc, #56]	@ (8000a38 <SystemInit+0xec>)
 80009fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000a02:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	@ (8000a38 <SystemInit+0xec>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000a0a:	4b10      	ldr	r3, [pc, #64]	@ (8000a4c <SystemInit+0x100>)
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	4b10      	ldr	r3, [pc, #64]	@ (8000a50 <SystemInit+0x104>)
 8000a10:	4013      	ands	r3, r2
 8000a12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000a16:	d202      	bcs.n	8000a1e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000a18:	4b0e      	ldr	r3, [pc, #56]	@ (8000a54 <SystemInit+0x108>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a58 <SystemInit+0x10c>)
 8000a20:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000a24:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	e000ed00 	.word	0xe000ed00
 8000a34:	52002000 	.word	0x52002000
 8000a38:	58024400 	.word	0x58024400
 8000a3c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a40:	02020200 	.word	0x02020200
 8000a44:	01ff0000 	.word	0x01ff0000
 8000a48:	01010280 	.word	0x01010280
 8000a4c:	5c001000 	.word	0x5c001000
 8000a50:	ffff0000 	.word	0xffff0000
 8000a54:	51008108 	.word	0x51008108
 8000a58:	52004000 	.word	0x52004000

08000a5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000a5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a94 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a60:	f7ff ff74 	bl	800094c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a64:	480c      	ldr	r0, [pc, #48]	@ (8000a98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a66:	490d      	ldr	r1, [pc, #52]	@ (8000a9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a68:	4a0d      	ldr	r2, [pc, #52]	@ (8000aa0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a6c:	e002      	b.n	8000a74 <LoopCopyDataInit>

08000a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a72:	3304      	adds	r3, #4

08000a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a78:	d3f9      	bcc.n	8000a6e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a7c:	4c0a      	ldr	r4, [pc, #40]	@ (8000aa8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a80:	e001      	b.n	8000a86 <LoopFillZerobss>

08000a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a84:	3204      	adds	r2, #4

08000a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a88:	d3fb      	bcc.n	8000a82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a8a:	f004 fae9 	bl	8005060 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a8e:	f7ff fd9b 	bl	80005c8 <main>
  bx  lr
 8000a92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a94:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000a98:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000a9c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000aa0:	08005108 	.word	0x08005108
  ldr r2, =_sbss
 8000aa4:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000aa8:	240000c4 	.word	0x240000c4

08000aac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aac:	e7fe      	b.n	8000aac <ADC3_IRQHandler>
	...

08000ab0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab6:	2003      	movs	r0, #3
 8000ab8:	f000 f94a 	bl	8000d50 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000abc:	f001 f9f0 	bl	8001ea0 <HAL_RCC_GetSysClockFreq>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	4b15      	ldr	r3, [pc, #84]	@ (8000b18 <HAL_Init+0x68>)
 8000ac4:	699b      	ldr	r3, [r3, #24]
 8000ac6:	0a1b      	lsrs	r3, r3, #8
 8000ac8:	f003 030f 	and.w	r3, r3, #15
 8000acc:	4913      	ldr	r1, [pc, #76]	@ (8000b1c <HAL_Init+0x6c>)
 8000ace:	5ccb      	ldrb	r3, [r1, r3]
 8000ad0:	f003 031f 	and.w	r3, r3, #31
 8000ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ad8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ada:	4b0f      	ldr	r3, [pc, #60]	@ (8000b18 <HAL_Init+0x68>)
 8000adc:	699b      	ldr	r3, [r3, #24]
 8000ade:	f003 030f 	and.w	r3, r3, #15
 8000ae2:	4a0e      	ldr	r2, [pc, #56]	@ (8000b1c <HAL_Init+0x6c>)
 8000ae4:	5cd3      	ldrb	r3, [r2, r3]
 8000ae6:	f003 031f 	and.w	r3, r3, #31
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	fa22 f303 	lsr.w	r3, r2, r3
 8000af0:	4a0b      	ldr	r2, [pc, #44]	@ (8000b20 <HAL_Init+0x70>)
 8000af2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000af4:	4a0b      	ldr	r2, [pc, #44]	@ (8000b24 <HAL_Init+0x74>)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000afa:	200f      	movs	r0, #15
 8000afc:	f000 f814 	bl	8000b28 <HAL_InitTick>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	e002      	b.n	8000b10 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000b0a:	f7ff fe6d 	bl	80007e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b0e:	2300      	movs	r3, #0
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	58024400 	.word	0x58024400
 8000b1c:	080050c0 	.word	0x080050c0
 8000b20:	24000004 	.word	0x24000004
 8000b24:	24000000 	.word	0x24000000

08000b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000b30:	4b15      	ldr	r3, [pc, #84]	@ (8000b88 <HAL_InitTick+0x60>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d101      	bne.n	8000b3c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	e021      	b.n	8000b80 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000b3c:	4b13      	ldr	r3, [pc, #76]	@ (8000b8c <HAL_InitTick+0x64>)
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <HAL_InitTick+0x60>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	4619      	mov	r1, r3
 8000b46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b52:	4618      	mov	r0, r3
 8000b54:	f000 f921 	bl	8000d9a <HAL_SYSTICK_Config>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e00e      	b.n	8000b80 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2b0f      	cmp	r3, #15
 8000b66:	d80a      	bhi.n	8000b7e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	6879      	ldr	r1, [r7, #4]
 8000b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b70:	f000 f8f9 	bl	8000d66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b74:	4a06      	ldr	r2, [pc, #24]	@ (8000b90 <HAL_InitTick+0x68>)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	e000      	b.n	8000b80 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	2400000c 	.word	0x2400000c
 8000b8c:	24000000 	.word	0x24000000
 8000b90:	24000008 	.word	0x24000008

08000b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b98:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <HAL_IncTick+0x20>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <HAL_IncTick+0x24>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	4a04      	ldr	r2, [pc, #16]	@ (8000bb8 <HAL_IncTick+0x24>)
 8000ba6:	6013      	str	r3, [r2, #0]
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	2400000c 	.word	0x2400000c
 8000bb8:	240000c0 	.word	0x240000c0

08000bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc0:	4b03      	ldr	r3, [pc, #12]	@ (8000bd0 <HAL_GetTick+0x14>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	240000c0 	.word	0x240000c0

08000bd4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000bd8:	4b03      	ldr	r3, [pc, #12]	@ (8000be8 <HAL_GetREVID+0x14>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	0c1b      	lsrs	r3, r3, #16
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	5c001000 	.word	0x5c001000

08000bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8000c2c <__NVIC_SetPriorityGrouping+0x40>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c02:	68ba      	ldr	r2, [r7, #8]
 8000c04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c08:	4013      	ands	r3, r2
 8000c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c14:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000c16:	4313      	orrs	r3, r2
 8000c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c1a:	4a04      	ldr	r2, [pc, #16]	@ (8000c2c <__NVIC_SetPriorityGrouping+0x40>)
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	60d3      	str	r3, [r2, #12]
}
 8000c20:	bf00      	nop
 8000c22:	3714      	adds	r7, #20
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	e000ed00 	.word	0xe000ed00
 8000c30:	05fa0000 	.word	0x05fa0000

08000c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c38:	4b04      	ldr	r3, [pc, #16]	@ (8000c4c <__NVIC_GetPriorityGrouping+0x18>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	0a1b      	lsrs	r3, r3, #8
 8000c3e:	f003 0307 	and.w	r3, r3, #7
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	6039      	str	r1, [r7, #0]
 8000c5a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	db0a      	blt.n	8000c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	490c      	ldr	r1, [pc, #48]	@ (8000c9c <__NVIC_SetPriority+0x4c>)
 8000c6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c6e:	0112      	lsls	r2, r2, #4
 8000c70:	b2d2      	uxtb	r2, r2
 8000c72:	440b      	add	r3, r1
 8000c74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c78:	e00a      	b.n	8000c90 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	4908      	ldr	r1, [pc, #32]	@ (8000ca0 <__NVIC_SetPriority+0x50>)
 8000c80:	88fb      	ldrh	r3, [r7, #6]
 8000c82:	f003 030f 	and.w	r3, r3, #15
 8000c86:	3b04      	subs	r3, #4
 8000c88:	0112      	lsls	r2, r2, #4
 8000c8a:	b2d2      	uxtb	r2, r2
 8000c8c:	440b      	add	r3, r1
 8000c8e:	761a      	strb	r2, [r3, #24]
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000e100 	.word	0xe000e100
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b089      	sub	sp, #36	@ 0x24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	f1c3 0307 	rsb	r3, r3, #7
 8000cbe:	2b04      	cmp	r3, #4
 8000cc0:	bf28      	it	cs
 8000cc2:	2304      	movcs	r3, #4
 8000cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3304      	adds	r3, #4
 8000cca:	2b06      	cmp	r3, #6
 8000ccc:	d902      	bls.n	8000cd4 <NVIC_EncodePriority+0x30>
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3b03      	subs	r3, #3
 8000cd2:	e000      	b.n	8000cd6 <NVIC_EncodePriority+0x32>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43da      	mvns	r2, r3
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	401a      	ands	r2, r3
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cec:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf6:	43d9      	mvns	r1, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cfc:	4313      	orrs	r3, r2
         );
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3724      	adds	r7, #36	@ 0x24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
	...

08000d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d1c:	d301      	bcc.n	8000d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e00f      	b.n	8000d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d22:	4a0a      	ldr	r2, [pc, #40]	@ (8000d4c <SysTick_Config+0x40>)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3b01      	subs	r3, #1
 8000d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d2a:	210f      	movs	r1, #15
 8000d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d30:	f7ff ff8e 	bl	8000c50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d34:	4b05      	ldr	r3, [pc, #20]	@ (8000d4c <SysTick_Config+0x40>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d3a:	4b04      	ldr	r3, [pc, #16]	@ (8000d4c <SysTick_Config+0x40>)
 8000d3c:	2207      	movs	r2, #7
 8000d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	e000e010 	.word	0xe000e010

08000d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f7ff ff47 	bl	8000bec <__NVIC_SetPriorityGrouping>
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b086      	sub	sp, #24
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	60b9      	str	r1, [r7, #8]
 8000d70:	607a      	str	r2, [r7, #4]
 8000d72:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d74:	f7ff ff5e 	bl	8000c34 <__NVIC_GetPriorityGrouping>
 8000d78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	68b9      	ldr	r1, [r7, #8]
 8000d7e:	6978      	ldr	r0, [r7, #20]
 8000d80:	f7ff ff90 	bl	8000ca4 <NVIC_EncodePriority>
 8000d84:	4602      	mov	r2, r0
 8000d86:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d8a:	4611      	mov	r1, r2
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ff5f 	bl	8000c50 <__NVIC_SetPriority>
}
 8000d92:	bf00      	nop
 8000d94:	3718      	adds	r7, #24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f7ff ffb2 	bl	8000d0c <SysTick_Config>
 8000da8:	4603      	mov	r3, r0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
	...

08000db4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000db8:	f3bf 8f5f 	dmb	sy
}
 8000dbc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000dbe:	4b07      	ldr	r3, [pc, #28]	@ (8000ddc <HAL_MPU_Disable+0x28>)
 8000dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dc2:	4a06      	ldr	r2, [pc, #24]	@ (8000ddc <HAL_MPU_Disable+0x28>)
 8000dc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000dc8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000dca:	4b05      	ldr	r3, [pc, #20]	@ (8000de0 <HAL_MPU_Disable+0x2c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	605a      	str	r2, [r3, #4]
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000ed00 	.word	0xe000ed00
 8000de0:	e000ed90 	.word	0xe000ed90

08000de4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000dec:	4a0b      	ldr	r2, [pc, #44]	@ (8000e1c <HAL_MPU_Enable+0x38>)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000df6:	4b0a      	ldr	r3, [pc, #40]	@ (8000e20 <HAL_MPU_Enable+0x3c>)
 8000df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dfa:	4a09      	ldr	r2, [pc, #36]	@ (8000e20 <HAL_MPU_Enable+0x3c>)
 8000dfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e00:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000e02:	f3bf 8f4f 	dsb	sy
}
 8000e06:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e08:	f3bf 8f6f 	isb	sy
}
 8000e0c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	e000ed90 	.word	0xe000ed90
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	785a      	ldrb	r2, [r3, #1]
 8000e30:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea8 <HAL_MPU_ConfigRegion+0x84>)
 8000e32:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d029      	beq.n	8000e90 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8000e3c:	4a1a      	ldr	r2, [pc, #104]	@ (8000ea8 <HAL_MPU_ConfigRegion+0x84>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	7b1b      	ldrb	r3, [r3, #12]
 8000e48:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	7adb      	ldrb	r3, [r3, #11]
 8000e4e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e50:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	7a9b      	ldrb	r3, [r3, #10]
 8000e56:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000e58:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	7b5b      	ldrb	r3, [r3, #13]
 8000e5e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000e60:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	7b9b      	ldrb	r3, [r3, #14]
 8000e66:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000e68:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	7bdb      	ldrb	r3, [r3, #15]
 8000e6e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000e70:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	7a5b      	ldrb	r3, [r3, #9]
 8000e76:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000e78:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	7a1b      	ldrb	r3, [r3, #8]
 8000e7e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000e80:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	7812      	ldrb	r2, [r2, #0]
 8000e86:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e88:	4a07      	ldr	r2, [pc, #28]	@ (8000ea8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000e8a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e8c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000e8e:	e005      	b.n	8000e9c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8000e90:	4b05      	ldr	r3, [pc, #20]	@ (8000ea8 <HAL_MPU_ConfigRegion+0x84>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8000e96:	4b04      	ldr	r3, [pc, #16]	@ (8000ea8 <HAL_MPU_ConfigRegion+0x84>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	611a      	str	r2, [r3, #16]
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000ed90 	.word	0xe000ed90

08000eac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b089      	sub	sp, #36	@ 0x24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000eba:	4b89      	ldr	r3, [pc, #548]	@ (80010e0 <HAL_GPIO_Init+0x234>)
 8000ebc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000ebe:	e194      	b.n	80011ea <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ecc:	4013      	ands	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	f000 8186 	beq.w	80011e4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f003 0303 	and.w	r3, r3, #3
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d005      	beq.n	8000ef0 <HAL_GPIO_Init+0x44>
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 0303 	and.w	r3, r3, #3
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d130      	bne.n	8000f52 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	2203      	movs	r2, #3
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	68da      	ldr	r2, [r3, #12]
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f26:	2201      	movs	r2, #1
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4013      	ands	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	091b      	lsrs	r3, r3, #4
 8000f3c:	f003 0201 	and.w	r2, r3, #1
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f003 0303 	and.w	r3, r3, #3
 8000f5a:	2b03      	cmp	r3, #3
 8000f5c:	d017      	beq.n	8000f8e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	68db      	ldr	r3, [r3, #12]
 8000f62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	2203      	movs	r2, #3
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4013      	ands	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	689a      	ldr	r2, [r3, #8]
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f003 0303 	and.w	r3, r3, #3
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d123      	bne.n	8000fe2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	08da      	lsrs	r2, r3, #3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	3208      	adds	r2, #8
 8000fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	220f      	movs	r2, #15
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	691a      	ldr	r2, [r3, #16]
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	f003 0307 	and.w	r3, r3, #7
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	08da      	lsrs	r2, r3, #3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3208      	adds	r2, #8
 8000fdc:	69b9      	ldr	r1, [r7, #24]
 8000fde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	2203      	movs	r2, #3
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f003 0203 	and.w	r2, r3, #3
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4313      	orrs	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800101e:	2b00      	cmp	r3, #0
 8001020:	f000 80e0 	beq.w	80011e4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001024:	4b2f      	ldr	r3, [pc, #188]	@ (80010e4 <HAL_GPIO_Init+0x238>)
 8001026:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800102a:	4a2e      	ldr	r2, [pc, #184]	@ (80010e4 <HAL_GPIO_Init+0x238>)
 800102c:	f043 0302 	orr.w	r3, r3, #2
 8001030:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001034:	4b2b      	ldr	r3, [pc, #172]	@ (80010e4 <HAL_GPIO_Init+0x238>)
 8001036:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001042:	4a29      	ldr	r2, [pc, #164]	@ (80010e8 <HAL_GPIO_Init+0x23c>)
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	089b      	lsrs	r3, r3, #2
 8001048:	3302      	adds	r3, #2
 800104a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800104e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	f003 0303 	and.w	r3, r3, #3
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	220f      	movs	r2, #15
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43db      	mvns	r3, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4013      	ands	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a20      	ldr	r2, [pc, #128]	@ (80010ec <HAL_GPIO_Init+0x240>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d052      	beq.n	8001114 <HAL_GPIO_Init+0x268>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a1f      	ldr	r2, [pc, #124]	@ (80010f0 <HAL_GPIO_Init+0x244>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d031      	beq.n	80010da <HAL_GPIO_Init+0x22e>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a1e      	ldr	r2, [pc, #120]	@ (80010f4 <HAL_GPIO_Init+0x248>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d02b      	beq.n	80010d6 <HAL_GPIO_Init+0x22a>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a1d      	ldr	r2, [pc, #116]	@ (80010f8 <HAL_GPIO_Init+0x24c>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d025      	beq.n	80010d2 <HAL_GPIO_Init+0x226>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a1c      	ldr	r2, [pc, #112]	@ (80010fc <HAL_GPIO_Init+0x250>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d01f      	beq.n	80010ce <HAL_GPIO_Init+0x222>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a1b      	ldr	r2, [pc, #108]	@ (8001100 <HAL_GPIO_Init+0x254>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d019      	beq.n	80010ca <HAL_GPIO_Init+0x21e>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a1a      	ldr	r2, [pc, #104]	@ (8001104 <HAL_GPIO_Init+0x258>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d013      	beq.n	80010c6 <HAL_GPIO_Init+0x21a>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a19      	ldr	r2, [pc, #100]	@ (8001108 <HAL_GPIO_Init+0x25c>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d00d      	beq.n	80010c2 <HAL_GPIO_Init+0x216>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a18      	ldr	r2, [pc, #96]	@ (800110c <HAL_GPIO_Init+0x260>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d007      	beq.n	80010be <HAL_GPIO_Init+0x212>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a17      	ldr	r2, [pc, #92]	@ (8001110 <HAL_GPIO_Init+0x264>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d101      	bne.n	80010ba <HAL_GPIO_Init+0x20e>
 80010b6:	2309      	movs	r3, #9
 80010b8:	e02d      	b.n	8001116 <HAL_GPIO_Init+0x26a>
 80010ba:	230a      	movs	r3, #10
 80010bc:	e02b      	b.n	8001116 <HAL_GPIO_Init+0x26a>
 80010be:	2308      	movs	r3, #8
 80010c0:	e029      	b.n	8001116 <HAL_GPIO_Init+0x26a>
 80010c2:	2307      	movs	r3, #7
 80010c4:	e027      	b.n	8001116 <HAL_GPIO_Init+0x26a>
 80010c6:	2306      	movs	r3, #6
 80010c8:	e025      	b.n	8001116 <HAL_GPIO_Init+0x26a>
 80010ca:	2305      	movs	r3, #5
 80010cc:	e023      	b.n	8001116 <HAL_GPIO_Init+0x26a>
 80010ce:	2304      	movs	r3, #4
 80010d0:	e021      	b.n	8001116 <HAL_GPIO_Init+0x26a>
 80010d2:	2303      	movs	r3, #3
 80010d4:	e01f      	b.n	8001116 <HAL_GPIO_Init+0x26a>
 80010d6:	2302      	movs	r3, #2
 80010d8:	e01d      	b.n	8001116 <HAL_GPIO_Init+0x26a>
 80010da:	2301      	movs	r3, #1
 80010dc:	e01b      	b.n	8001116 <HAL_GPIO_Init+0x26a>
 80010de:	bf00      	nop
 80010e0:	58000080 	.word	0x58000080
 80010e4:	58024400 	.word	0x58024400
 80010e8:	58000400 	.word	0x58000400
 80010ec:	58020000 	.word	0x58020000
 80010f0:	58020400 	.word	0x58020400
 80010f4:	58020800 	.word	0x58020800
 80010f8:	58020c00 	.word	0x58020c00
 80010fc:	58021000 	.word	0x58021000
 8001100:	58021400 	.word	0x58021400
 8001104:	58021800 	.word	0x58021800
 8001108:	58021c00 	.word	0x58021c00
 800110c:	58022000 	.word	0x58022000
 8001110:	58022400 	.word	0x58022400
 8001114:	2300      	movs	r3, #0
 8001116:	69fa      	ldr	r2, [r7, #28]
 8001118:	f002 0203 	and.w	r2, r2, #3
 800111c:	0092      	lsls	r2, r2, #2
 800111e:	4093      	lsls	r3, r2
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001126:	4938      	ldr	r1, [pc, #224]	@ (8001208 <HAL_GPIO_Init+0x35c>)
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	089b      	lsrs	r3, r3, #2
 800112c:	3302      	adds	r3, #2
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001134:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	43db      	mvns	r3, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4013      	ands	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800115a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001162:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d003      	beq.n	8001188 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	4313      	orrs	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001188:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d003      	beq.n	80011b4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	43db      	mvns	r3, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4013      	ands	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	3301      	adds	r3, #1
 80011e8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	fa22 f303 	lsr.w	r3, r2, r3
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	f47f ae63 	bne.w	8000ec0 <HAL_GPIO_Init+0x14>
  }
}
 80011fa:	bf00      	nop
 80011fc:	bf00      	nop
 80011fe:	3724      	adds	r7, #36	@ 0x24
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	58000400 	.word	0x58000400

0800120c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001214:	4b19      	ldr	r3, [pc, #100]	@ (800127c <HAL_PWREx_ConfigSupply+0x70>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	f003 0304 	and.w	r3, r3, #4
 800121c:	2b04      	cmp	r3, #4
 800121e:	d00a      	beq.n	8001236 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001220:	4b16      	ldr	r3, [pc, #88]	@ (800127c <HAL_PWREx_ConfigSupply+0x70>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	f003 0307 	and.w	r3, r3, #7
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	429a      	cmp	r2, r3
 800122c:	d001      	beq.n	8001232 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e01f      	b.n	8001272 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001232:	2300      	movs	r3, #0
 8001234:	e01d      	b.n	8001272 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001236:	4b11      	ldr	r3, [pc, #68]	@ (800127c <HAL_PWREx_ConfigSupply+0x70>)
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	f023 0207 	bic.w	r2, r3, #7
 800123e:	490f      	ldr	r1, [pc, #60]	@ (800127c <HAL_PWREx_ConfigSupply+0x70>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4313      	orrs	r3, r2
 8001244:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001246:	f7ff fcb9 	bl	8000bbc <HAL_GetTick>
 800124a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800124c:	e009      	b.n	8001262 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800124e:	f7ff fcb5 	bl	8000bbc <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800125c:	d901      	bls.n	8001262 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e007      	b.n	8001272 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001262:	4b06      	ldr	r3, [pc, #24]	@ (800127c <HAL_PWREx_ConfigSupply+0x70>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800126a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800126e:	d1ee      	bne.n	800124e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	58024800 	.word	0x58024800

08001280 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08c      	sub	sp, #48	@ 0x30
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d102      	bne.n	8001294 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	f000 bc48 	b.w	8001b24 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	2b00      	cmp	r3, #0
 800129e:	f000 8088 	beq.w	80013b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012a2:	4b99      	ldr	r3, [pc, #612]	@ (8001508 <HAL_RCC_OscConfig+0x288>)
 80012a4:	691b      	ldr	r3, [r3, #16]
 80012a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80012aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80012ac:	4b96      	ldr	r3, [pc, #600]	@ (8001508 <HAL_RCC_OscConfig+0x288>)
 80012ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80012b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012b4:	2b10      	cmp	r3, #16
 80012b6:	d007      	beq.n	80012c8 <HAL_RCC_OscConfig+0x48>
 80012b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012ba:	2b18      	cmp	r3, #24
 80012bc:	d111      	bne.n	80012e2 <HAL_RCC_OscConfig+0x62>
 80012be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012c0:	f003 0303 	and.w	r3, r3, #3
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d10c      	bne.n	80012e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c8:	4b8f      	ldr	r3, [pc, #572]	@ (8001508 <HAL_RCC_OscConfig+0x288>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d06d      	beq.n	80013b0 <HAL_RCC_OscConfig+0x130>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d169      	bne.n	80013b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	f000 bc21 	b.w	8001b24 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012ea:	d106      	bne.n	80012fa <HAL_RCC_OscConfig+0x7a>
 80012ec:	4b86      	ldr	r3, [pc, #536]	@ (8001508 <HAL_RCC_OscConfig+0x288>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a85      	ldr	r2, [pc, #532]	@ (8001508 <HAL_RCC_OscConfig+0x288>)
 80012f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012f6:	6013      	str	r3, [r2, #0]
 80012f8:	e02e      	b.n	8001358 <HAL_RCC_OscConfig+0xd8>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d10c      	bne.n	800131c <HAL_RCC_OscConfig+0x9c>
 8001302:	4b81      	ldr	r3, [pc, #516]	@ (8001508 <HAL_RCC_OscConfig+0x288>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a80      	ldr	r2, [pc, #512]	@ (8001508 <HAL_RCC_OscConfig+0x288>)
 8001308:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800130c:	6013      	str	r3, [r2, #0]
 800130e:	4b7e      	ldr	r3, [pc, #504]	@ (8001508 <HAL_RCC_OscConfig+0x288>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a7d      	ldr	r2, [pc, #500]	@ (8001508 <HAL_RCC_OscConfig+0x288>)
 8001314:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001318:	6013      	str	r3, [r2, #0]
 800131a:	e01d      	b.n	8001358 <HAL_RCC_OscConfig+0xd8>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001324:	d10c      	bne.n	8001340 <HAL_RCC_OscConfig+0xc0>
 8001326:	4b78      	ldr	r3, [pc, #480]	@ (8001508 <HAL_RCC_OscConfig+0x288>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a77      	ldr	r2, [pc, #476]	@ (8001508 <HAL_RCC_OscConfig+0x288>)
 800132c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001330:	6013      	str	r3, [r2, #0]
 8001332:	4b75      	ldr	r3, [pc, #468]	@ (8001508 <HAL_RCC_OscConfig+0x288>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a74      	ldr	r2, [pc, #464]	@ (8001508 <HAL_RCC_OscConfig+0x288>)
 8001338:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800133c:	6013      	str	r3, [r2, #0]
 800133e:	e00b      	b.n	8001358 <HAL_RCC_OscConfig+0xd8>
 8001340:	4b71      	ldr	r3, [pc, #452]	@ (8001508 <HAL_RCC_OscConfig+0x288>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a70      	ldr	r2, [pc, #448]	@ (8001508 <HAL_RCC_OscConfig+0x288>)
 8001346:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800134a:	6013      	str	r3, [r2, #0]
 800134c:	4b6e      	ldr	r3, [pc, #440]	@ (8001508 <HAL_RCC_OscConfig+0x288>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a6d      	ldr	r2, [pc, #436]	@ (8001508 <HAL_RCC_OscConfig+0x288>)
 8001352:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001356:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d013      	beq.n	8001388 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001360:	f7ff fc2c 	bl	8000bbc <HAL_GetTick>
 8001364:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001368:	f7ff fc28 	bl	8000bbc <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b64      	cmp	r3, #100	@ 0x64
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e3d4      	b.n	8001b24 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800137a:	4b63      	ldr	r3, [pc, #396]	@ (8001508 <HAL_RCC_OscConfig+0x288>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d0f0      	beq.n	8001368 <HAL_RCC_OscConfig+0xe8>
 8001386:	e014      	b.n	80013b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001388:	f7ff fc18 	bl	8000bbc <HAL_GetTick>
 800138c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001390:	f7ff fc14 	bl	8000bbc <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b64      	cmp	r3, #100	@ 0x64
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e3c0      	b.n	8001b24 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013a2:	4b59      	ldr	r3, [pc, #356]	@ (8001508 <HAL_RCC_OscConfig+0x288>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1f0      	bne.n	8001390 <HAL_RCC_OscConfig+0x110>
 80013ae:	e000      	b.n	80013b2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f000 80ca 	beq.w	8001554 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013c0:	4b51      	ldr	r3, [pc, #324]	@ (8001508 <HAL_RCC_OscConfig+0x288>)
 80013c2:	691b      	ldr	r3, [r3, #16]
 80013c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80013c8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80013ca:	4b4f      	ldr	r3, [pc, #316]	@ (8001508 <HAL_RCC_OscConfig+0x288>)
 80013cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ce:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80013d0:	6a3b      	ldr	r3, [r7, #32]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d007      	beq.n	80013e6 <HAL_RCC_OscConfig+0x166>
 80013d6:	6a3b      	ldr	r3, [r7, #32]
 80013d8:	2b18      	cmp	r3, #24
 80013da:	d156      	bne.n	800148a <HAL_RCC_OscConfig+0x20a>
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	f003 0303 	and.w	r3, r3, #3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d151      	bne.n	800148a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013e6:	4b48      	ldr	r3, [pc, #288]	@ (8001508 <HAL_RCC_OscConfig+0x288>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0304 	and.w	r3, r3, #4
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d005      	beq.n	80013fe <HAL_RCC_OscConfig+0x17e>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e392      	b.n	8001b24 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80013fe:	4b42      	ldr	r3, [pc, #264]	@ (8001508 <HAL_RCC_OscConfig+0x288>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f023 0219 	bic.w	r2, r3, #25
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	493f      	ldr	r1, [pc, #252]	@ (8001508 <HAL_RCC_OscConfig+0x288>)
 800140c:	4313      	orrs	r3, r2
 800140e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001410:	f7ff fbd4 	bl	8000bbc <HAL_GetTick>
 8001414:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001418:	f7ff fbd0 	bl	8000bbc <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b02      	cmp	r3, #2
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e37c      	b.n	8001b24 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800142a:	4b37      	ldr	r3, [pc, #220]	@ (8001508 <HAL_RCC_OscConfig+0x288>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0304 	and.w	r3, r3, #4
 8001432:	2b00      	cmp	r3, #0
 8001434:	d0f0      	beq.n	8001418 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001436:	f7ff fbcd 	bl	8000bd4 <HAL_GetREVID>
 800143a:	4603      	mov	r3, r0
 800143c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001440:	4293      	cmp	r3, r2
 8001442:	d817      	bhi.n	8001474 <HAL_RCC_OscConfig+0x1f4>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	691b      	ldr	r3, [r3, #16]
 8001448:	2b40      	cmp	r3, #64	@ 0x40
 800144a:	d108      	bne.n	800145e <HAL_RCC_OscConfig+0x1de>
 800144c:	4b2e      	ldr	r3, [pc, #184]	@ (8001508 <HAL_RCC_OscConfig+0x288>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001454:	4a2c      	ldr	r2, [pc, #176]	@ (8001508 <HAL_RCC_OscConfig+0x288>)
 8001456:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800145a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800145c:	e07a      	b.n	8001554 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800145e:	4b2a      	ldr	r3, [pc, #168]	@ (8001508 <HAL_RCC_OscConfig+0x288>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	031b      	lsls	r3, r3, #12
 800146c:	4926      	ldr	r1, [pc, #152]	@ (8001508 <HAL_RCC_OscConfig+0x288>)
 800146e:	4313      	orrs	r3, r2
 8001470:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001472:	e06f      	b.n	8001554 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001474:	4b24      	ldr	r3, [pc, #144]	@ (8001508 <HAL_RCC_OscConfig+0x288>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	691b      	ldr	r3, [r3, #16]
 8001480:	061b      	lsls	r3, r3, #24
 8001482:	4921      	ldr	r1, [pc, #132]	@ (8001508 <HAL_RCC_OscConfig+0x288>)
 8001484:	4313      	orrs	r3, r2
 8001486:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001488:	e064      	b.n	8001554 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d047      	beq.n	8001522 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001492:	4b1d      	ldr	r3, [pc, #116]	@ (8001508 <HAL_RCC_OscConfig+0x288>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f023 0219 	bic.w	r2, r3, #25
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	491a      	ldr	r1, [pc, #104]	@ (8001508 <HAL_RCC_OscConfig+0x288>)
 80014a0:	4313      	orrs	r3, r2
 80014a2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a4:	f7ff fb8a 	bl	8000bbc <HAL_GetTick>
 80014a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ac:	f7ff fb86 	bl	8000bbc <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e332      	b.n	8001b24 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014be:	4b12      	ldr	r3, [pc, #72]	@ (8001508 <HAL_RCC_OscConfig+0x288>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0304 	and.w	r3, r3, #4
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0f0      	beq.n	80014ac <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ca:	f7ff fb83 	bl	8000bd4 <HAL_GetREVID>
 80014ce:	4603      	mov	r3, r0
 80014d0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d819      	bhi.n	800150c <HAL_RCC_OscConfig+0x28c>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	691b      	ldr	r3, [r3, #16]
 80014dc:	2b40      	cmp	r3, #64	@ 0x40
 80014de:	d108      	bne.n	80014f2 <HAL_RCC_OscConfig+0x272>
 80014e0:	4b09      	ldr	r3, [pc, #36]	@ (8001508 <HAL_RCC_OscConfig+0x288>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80014e8:	4a07      	ldr	r2, [pc, #28]	@ (8001508 <HAL_RCC_OscConfig+0x288>)
 80014ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014ee:	6053      	str	r3, [r2, #4]
 80014f0:	e030      	b.n	8001554 <HAL_RCC_OscConfig+0x2d4>
 80014f2:	4b05      	ldr	r3, [pc, #20]	@ (8001508 <HAL_RCC_OscConfig+0x288>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	031b      	lsls	r3, r3, #12
 8001500:	4901      	ldr	r1, [pc, #4]	@ (8001508 <HAL_RCC_OscConfig+0x288>)
 8001502:	4313      	orrs	r3, r2
 8001504:	604b      	str	r3, [r1, #4]
 8001506:	e025      	b.n	8001554 <HAL_RCC_OscConfig+0x2d4>
 8001508:	58024400 	.word	0x58024400
 800150c:	4b9a      	ldr	r3, [pc, #616]	@ (8001778 <HAL_RCC_OscConfig+0x4f8>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	691b      	ldr	r3, [r3, #16]
 8001518:	061b      	lsls	r3, r3, #24
 800151a:	4997      	ldr	r1, [pc, #604]	@ (8001778 <HAL_RCC_OscConfig+0x4f8>)
 800151c:	4313      	orrs	r3, r2
 800151e:	604b      	str	r3, [r1, #4]
 8001520:	e018      	b.n	8001554 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001522:	4b95      	ldr	r3, [pc, #596]	@ (8001778 <HAL_RCC_OscConfig+0x4f8>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a94      	ldr	r2, [pc, #592]	@ (8001778 <HAL_RCC_OscConfig+0x4f8>)
 8001528:	f023 0301 	bic.w	r3, r3, #1
 800152c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152e:	f7ff fb45 	bl	8000bbc <HAL_GetTick>
 8001532:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001536:	f7ff fb41 	bl	8000bbc <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e2ed      	b.n	8001b24 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001548:	4b8b      	ldr	r3, [pc, #556]	@ (8001778 <HAL_RCC_OscConfig+0x4f8>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1f0      	bne.n	8001536 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0310 	and.w	r3, r3, #16
 800155c:	2b00      	cmp	r3, #0
 800155e:	f000 80a9 	beq.w	80016b4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001562:	4b85      	ldr	r3, [pc, #532]	@ (8001778 <HAL_RCC_OscConfig+0x4f8>)
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800156a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800156c:	4b82      	ldr	r3, [pc, #520]	@ (8001778 <HAL_RCC_OscConfig+0x4f8>)
 800156e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001570:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	2b08      	cmp	r3, #8
 8001576:	d007      	beq.n	8001588 <HAL_RCC_OscConfig+0x308>
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	2b18      	cmp	r3, #24
 800157c:	d13a      	bne.n	80015f4 <HAL_RCC_OscConfig+0x374>
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	f003 0303 	and.w	r3, r3, #3
 8001584:	2b01      	cmp	r3, #1
 8001586:	d135      	bne.n	80015f4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001588:	4b7b      	ldr	r3, [pc, #492]	@ (8001778 <HAL_RCC_OscConfig+0x4f8>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001590:	2b00      	cmp	r3, #0
 8001592:	d005      	beq.n	80015a0 <HAL_RCC_OscConfig+0x320>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	69db      	ldr	r3, [r3, #28]
 8001598:	2b80      	cmp	r3, #128	@ 0x80
 800159a:	d001      	beq.n	80015a0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e2c1      	b.n	8001b24 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80015a0:	f7ff fb18 	bl	8000bd4 <HAL_GetREVID>
 80015a4:	4603      	mov	r3, r0
 80015a6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d817      	bhi.n	80015de <HAL_RCC_OscConfig+0x35e>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a1b      	ldr	r3, [r3, #32]
 80015b2:	2b20      	cmp	r3, #32
 80015b4:	d108      	bne.n	80015c8 <HAL_RCC_OscConfig+0x348>
 80015b6:	4b70      	ldr	r3, [pc, #448]	@ (8001778 <HAL_RCC_OscConfig+0x4f8>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80015be:	4a6e      	ldr	r2, [pc, #440]	@ (8001778 <HAL_RCC_OscConfig+0x4f8>)
 80015c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80015c4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80015c6:	e075      	b.n	80016b4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80015c8:	4b6b      	ldr	r3, [pc, #428]	@ (8001778 <HAL_RCC_OscConfig+0x4f8>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a1b      	ldr	r3, [r3, #32]
 80015d4:	069b      	lsls	r3, r3, #26
 80015d6:	4968      	ldr	r1, [pc, #416]	@ (8001778 <HAL_RCC_OscConfig+0x4f8>)
 80015d8:	4313      	orrs	r3, r2
 80015da:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80015dc:	e06a      	b.n	80016b4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80015de:	4b66      	ldr	r3, [pc, #408]	@ (8001778 <HAL_RCC_OscConfig+0x4f8>)
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a1b      	ldr	r3, [r3, #32]
 80015ea:	061b      	lsls	r3, r3, #24
 80015ec:	4962      	ldr	r1, [pc, #392]	@ (8001778 <HAL_RCC_OscConfig+0x4f8>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80015f2:	e05f      	b.n	80016b4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	69db      	ldr	r3, [r3, #28]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d042      	beq.n	8001682 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80015fc:	4b5e      	ldr	r3, [pc, #376]	@ (8001778 <HAL_RCC_OscConfig+0x4f8>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a5d      	ldr	r2, [pc, #372]	@ (8001778 <HAL_RCC_OscConfig+0x4f8>)
 8001602:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001606:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001608:	f7ff fad8 	bl	8000bbc <HAL_GetTick>
 800160c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001610:	f7ff fad4 	bl	8000bbc <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e280      	b.n	8001b24 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001622:	4b55      	ldr	r3, [pc, #340]	@ (8001778 <HAL_RCC_OscConfig+0x4f8>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800162a:	2b00      	cmp	r3, #0
 800162c:	d0f0      	beq.n	8001610 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800162e:	f7ff fad1 	bl	8000bd4 <HAL_GetREVID>
 8001632:	4603      	mov	r3, r0
 8001634:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001638:	4293      	cmp	r3, r2
 800163a:	d817      	bhi.n	800166c <HAL_RCC_OscConfig+0x3ec>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	2b20      	cmp	r3, #32
 8001642:	d108      	bne.n	8001656 <HAL_RCC_OscConfig+0x3d6>
 8001644:	4b4c      	ldr	r3, [pc, #304]	@ (8001778 <HAL_RCC_OscConfig+0x4f8>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800164c:	4a4a      	ldr	r2, [pc, #296]	@ (8001778 <HAL_RCC_OscConfig+0x4f8>)
 800164e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001652:	6053      	str	r3, [r2, #4]
 8001654:	e02e      	b.n	80016b4 <HAL_RCC_OscConfig+0x434>
 8001656:	4b48      	ldr	r3, [pc, #288]	@ (8001778 <HAL_RCC_OscConfig+0x4f8>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a1b      	ldr	r3, [r3, #32]
 8001662:	069b      	lsls	r3, r3, #26
 8001664:	4944      	ldr	r1, [pc, #272]	@ (8001778 <HAL_RCC_OscConfig+0x4f8>)
 8001666:	4313      	orrs	r3, r2
 8001668:	604b      	str	r3, [r1, #4]
 800166a:	e023      	b.n	80016b4 <HAL_RCC_OscConfig+0x434>
 800166c:	4b42      	ldr	r3, [pc, #264]	@ (8001778 <HAL_RCC_OscConfig+0x4f8>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	061b      	lsls	r3, r3, #24
 800167a:	493f      	ldr	r1, [pc, #252]	@ (8001778 <HAL_RCC_OscConfig+0x4f8>)
 800167c:	4313      	orrs	r3, r2
 800167e:	60cb      	str	r3, [r1, #12]
 8001680:	e018      	b.n	80016b4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001682:	4b3d      	ldr	r3, [pc, #244]	@ (8001778 <HAL_RCC_OscConfig+0x4f8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a3c      	ldr	r2, [pc, #240]	@ (8001778 <HAL_RCC_OscConfig+0x4f8>)
 8001688:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800168c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168e:	f7ff fa95 	bl	8000bbc <HAL_GetTick>
 8001692:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001696:	f7ff fa91 	bl	8000bbc <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e23d      	b.n	8001b24 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80016a8:	4b33      	ldr	r3, [pc, #204]	@ (8001778 <HAL_RCC_OscConfig+0x4f8>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1f0      	bne.n	8001696 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0308 	and.w	r3, r3, #8
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d036      	beq.n	800172e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	695b      	ldr	r3, [r3, #20]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d019      	beq.n	80016fc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001778 <HAL_RCC_OscConfig+0x4f8>)
 80016ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016cc:	4a2a      	ldr	r2, [pc, #168]	@ (8001778 <HAL_RCC_OscConfig+0x4f8>)
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d4:	f7ff fa72 	bl	8000bbc <HAL_GetTick>
 80016d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016dc:	f7ff fa6e 	bl	8000bbc <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e21a      	b.n	8001b24 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80016ee:	4b22      	ldr	r3, [pc, #136]	@ (8001778 <HAL_RCC_OscConfig+0x4f8>)
 80016f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0f0      	beq.n	80016dc <HAL_RCC_OscConfig+0x45c>
 80016fa:	e018      	b.n	800172e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001778 <HAL_RCC_OscConfig+0x4f8>)
 80016fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001700:	4a1d      	ldr	r2, [pc, #116]	@ (8001778 <HAL_RCC_OscConfig+0x4f8>)
 8001702:	f023 0301 	bic.w	r3, r3, #1
 8001706:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001708:	f7ff fa58 	bl	8000bbc <HAL_GetTick>
 800170c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001710:	f7ff fa54 	bl	8000bbc <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b02      	cmp	r3, #2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e200      	b.n	8001b24 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001722:	4b15      	ldr	r3, [pc, #84]	@ (8001778 <HAL_RCC_OscConfig+0x4f8>)
 8001724:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1f0      	bne.n	8001710 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0320 	and.w	r3, r3, #32
 8001736:	2b00      	cmp	r3, #0
 8001738:	d039      	beq.n	80017ae <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	699b      	ldr	r3, [r3, #24]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d01c      	beq.n	800177c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001742:	4b0d      	ldr	r3, [pc, #52]	@ (8001778 <HAL_RCC_OscConfig+0x4f8>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a0c      	ldr	r2, [pc, #48]	@ (8001778 <HAL_RCC_OscConfig+0x4f8>)
 8001748:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800174c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800174e:	f7ff fa35 	bl	8000bbc <HAL_GetTick>
 8001752:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001756:	f7ff fa31 	bl	8000bbc <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e1dd      	b.n	8001b24 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001768:	4b03      	ldr	r3, [pc, #12]	@ (8001778 <HAL_RCC_OscConfig+0x4f8>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d0f0      	beq.n	8001756 <HAL_RCC_OscConfig+0x4d6>
 8001774:	e01b      	b.n	80017ae <HAL_RCC_OscConfig+0x52e>
 8001776:	bf00      	nop
 8001778:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800177c:	4b9b      	ldr	r3, [pc, #620]	@ (80019ec <HAL_RCC_OscConfig+0x76c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a9a      	ldr	r2, [pc, #616]	@ (80019ec <HAL_RCC_OscConfig+0x76c>)
 8001782:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001786:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001788:	f7ff fa18 	bl	8000bbc <HAL_GetTick>
 800178c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001790:	f7ff fa14 	bl	8000bbc <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e1c0      	b.n	8001b24 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80017a2:	4b92      	ldr	r3, [pc, #584]	@ (80019ec <HAL_RCC_OscConfig+0x76c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f0      	bne.n	8001790 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0304 	and.w	r3, r3, #4
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f000 8081 	beq.w	80018be <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80017bc:	4b8c      	ldr	r3, [pc, #560]	@ (80019f0 <HAL_RCC_OscConfig+0x770>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a8b      	ldr	r2, [pc, #556]	@ (80019f0 <HAL_RCC_OscConfig+0x770>)
 80017c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80017c8:	f7ff f9f8 	bl	8000bbc <HAL_GetTick>
 80017cc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017d0:	f7ff f9f4 	bl	8000bbc <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b64      	cmp	r3, #100	@ 0x64
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e1a0      	b.n	8001b24 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80017e2:	4b83      	ldr	r3, [pc, #524]	@ (80019f0 <HAL_RCC_OscConfig+0x770>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0f0      	beq.n	80017d0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d106      	bne.n	8001804 <HAL_RCC_OscConfig+0x584>
 80017f6:	4b7d      	ldr	r3, [pc, #500]	@ (80019ec <HAL_RCC_OscConfig+0x76c>)
 80017f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017fa:	4a7c      	ldr	r2, [pc, #496]	@ (80019ec <HAL_RCC_OscConfig+0x76c>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	6713      	str	r3, [r2, #112]	@ 0x70
 8001802:	e02d      	b.n	8001860 <HAL_RCC_OscConfig+0x5e0>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d10c      	bne.n	8001826 <HAL_RCC_OscConfig+0x5a6>
 800180c:	4b77      	ldr	r3, [pc, #476]	@ (80019ec <HAL_RCC_OscConfig+0x76c>)
 800180e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001810:	4a76      	ldr	r2, [pc, #472]	@ (80019ec <HAL_RCC_OscConfig+0x76c>)
 8001812:	f023 0301 	bic.w	r3, r3, #1
 8001816:	6713      	str	r3, [r2, #112]	@ 0x70
 8001818:	4b74      	ldr	r3, [pc, #464]	@ (80019ec <HAL_RCC_OscConfig+0x76c>)
 800181a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800181c:	4a73      	ldr	r2, [pc, #460]	@ (80019ec <HAL_RCC_OscConfig+0x76c>)
 800181e:	f023 0304 	bic.w	r3, r3, #4
 8001822:	6713      	str	r3, [r2, #112]	@ 0x70
 8001824:	e01c      	b.n	8001860 <HAL_RCC_OscConfig+0x5e0>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	2b05      	cmp	r3, #5
 800182c:	d10c      	bne.n	8001848 <HAL_RCC_OscConfig+0x5c8>
 800182e:	4b6f      	ldr	r3, [pc, #444]	@ (80019ec <HAL_RCC_OscConfig+0x76c>)
 8001830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001832:	4a6e      	ldr	r2, [pc, #440]	@ (80019ec <HAL_RCC_OscConfig+0x76c>)
 8001834:	f043 0304 	orr.w	r3, r3, #4
 8001838:	6713      	str	r3, [r2, #112]	@ 0x70
 800183a:	4b6c      	ldr	r3, [pc, #432]	@ (80019ec <HAL_RCC_OscConfig+0x76c>)
 800183c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800183e:	4a6b      	ldr	r2, [pc, #428]	@ (80019ec <HAL_RCC_OscConfig+0x76c>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	6713      	str	r3, [r2, #112]	@ 0x70
 8001846:	e00b      	b.n	8001860 <HAL_RCC_OscConfig+0x5e0>
 8001848:	4b68      	ldr	r3, [pc, #416]	@ (80019ec <HAL_RCC_OscConfig+0x76c>)
 800184a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800184c:	4a67      	ldr	r2, [pc, #412]	@ (80019ec <HAL_RCC_OscConfig+0x76c>)
 800184e:	f023 0301 	bic.w	r3, r3, #1
 8001852:	6713      	str	r3, [r2, #112]	@ 0x70
 8001854:	4b65      	ldr	r3, [pc, #404]	@ (80019ec <HAL_RCC_OscConfig+0x76c>)
 8001856:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001858:	4a64      	ldr	r2, [pc, #400]	@ (80019ec <HAL_RCC_OscConfig+0x76c>)
 800185a:	f023 0304 	bic.w	r3, r3, #4
 800185e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d015      	beq.n	8001894 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001868:	f7ff f9a8 	bl	8000bbc <HAL_GetTick>
 800186c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800186e:	e00a      	b.n	8001886 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001870:	f7ff f9a4 	bl	8000bbc <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800187e:	4293      	cmp	r3, r2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e14e      	b.n	8001b24 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001886:	4b59      	ldr	r3, [pc, #356]	@ (80019ec <HAL_RCC_OscConfig+0x76c>)
 8001888:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d0ee      	beq.n	8001870 <HAL_RCC_OscConfig+0x5f0>
 8001892:	e014      	b.n	80018be <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001894:	f7ff f992 	bl	8000bbc <HAL_GetTick>
 8001898:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800189a:	e00a      	b.n	80018b2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800189c:	f7ff f98e 	bl	8000bbc <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e138      	b.n	8001b24 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018b2:	4b4e      	ldr	r3, [pc, #312]	@ (80019ec <HAL_RCC_OscConfig+0x76c>)
 80018b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1ee      	bne.n	800189c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f000 812d 	beq.w	8001b22 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80018c8:	4b48      	ldr	r3, [pc, #288]	@ (80019ec <HAL_RCC_OscConfig+0x76c>)
 80018ca:	691b      	ldr	r3, [r3, #16]
 80018cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80018d0:	2b18      	cmp	r3, #24
 80018d2:	f000 80bd 	beq.w	8001a50 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018da:	2b02      	cmp	r3, #2
 80018dc:	f040 809e 	bne.w	8001a1c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018e0:	4b42      	ldr	r3, [pc, #264]	@ (80019ec <HAL_RCC_OscConfig+0x76c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a41      	ldr	r2, [pc, #260]	@ (80019ec <HAL_RCC_OscConfig+0x76c>)
 80018e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ec:	f7ff f966 	bl	8000bbc <HAL_GetTick>
 80018f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f4:	f7ff f962 	bl	8000bbc <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e10e      	b.n	8001b24 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001906:	4b39      	ldr	r3, [pc, #228]	@ (80019ec <HAL_RCC_OscConfig+0x76c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1f0      	bne.n	80018f4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001912:	4b36      	ldr	r3, [pc, #216]	@ (80019ec <HAL_RCC_OscConfig+0x76c>)
 8001914:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001916:	4b37      	ldr	r3, [pc, #220]	@ (80019f4 <HAL_RCC_OscConfig+0x774>)
 8001918:	4013      	ands	r3, r2
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001922:	0112      	lsls	r2, r2, #4
 8001924:	430a      	orrs	r2, r1
 8001926:	4931      	ldr	r1, [pc, #196]	@ (80019ec <HAL_RCC_OscConfig+0x76c>)
 8001928:	4313      	orrs	r3, r2
 800192a:	628b      	str	r3, [r1, #40]	@ 0x28
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001930:	3b01      	subs	r3, #1
 8001932:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800193a:	3b01      	subs	r3, #1
 800193c:	025b      	lsls	r3, r3, #9
 800193e:	b29b      	uxth	r3, r3
 8001940:	431a      	orrs	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001946:	3b01      	subs	r3, #1
 8001948:	041b      	lsls	r3, r3, #16
 800194a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800194e:	431a      	orrs	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001954:	3b01      	subs	r3, #1
 8001956:	061b      	lsls	r3, r3, #24
 8001958:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800195c:	4923      	ldr	r1, [pc, #140]	@ (80019ec <HAL_RCC_OscConfig+0x76c>)
 800195e:	4313      	orrs	r3, r2
 8001960:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001962:	4b22      	ldr	r3, [pc, #136]	@ (80019ec <HAL_RCC_OscConfig+0x76c>)
 8001964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001966:	4a21      	ldr	r2, [pc, #132]	@ (80019ec <HAL_RCC_OscConfig+0x76c>)
 8001968:	f023 0301 	bic.w	r3, r3, #1
 800196c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800196e:	4b1f      	ldr	r3, [pc, #124]	@ (80019ec <HAL_RCC_OscConfig+0x76c>)
 8001970:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001972:	4b21      	ldr	r3, [pc, #132]	@ (80019f8 <HAL_RCC_OscConfig+0x778>)
 8001974:	4013      	ands	r3, r2
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800197a:	00d2      	lsls	r2, r2, #3
 800197c:	491b      	ldr	r1, [pc, #108]	@ (80019ec <HAL_RCC_OscConfig+0x76c>)
 800197e:	4313      	orrs	r3, r2
 8001980:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001982:	4b1a      	ldr	r3, [pc, #104]	@ (80019ec <HAL_RCC_OscConfig+0x76c>)
 8001984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001986:	f023 020c 	bic.w	r2, r3, #12
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198e:	4917      	ldr	r1, [pc, #92]	@ (80019ec <HAL_RCC_OscConfig+0x76c>)
 8001990:	4313      	orrs	r3, r2
 8001992:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001994:	4b15      	ldr	r3, [pc, #84]	@ (80019ec <HAL_RCC_OscConfig+0x76c>)
 8001996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001998:	f023 0202 	bic.w	r2, r3, #2
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a0:	4912      	ldr	r1, [pc, #72]	@ (80019ec <HAL_RCC_OscConfig+0x76c>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80019a6:	4b11      	ldr	r3, [pc, #68]	@ (80019ec <HAL_RCC_OscConfig+0x76c>)
 80019a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019aa:	4a10      	ldr	r2, [pc, #64]	@ (80019ec <HAL_RCC_OscConfig+0x76c>)
 80019ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80019b2:	4b0e      	ldr	r3, [pc, #56]	@ (80019ec <HAL_RCC_OscConfig+0x76c>)
 80019b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b6:	4a0d      	ldr	r2, [pc, #52]	@ (80019ec <HAL_RCC_OscConfig+0x76c>)
 80019b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80019be:	4b0b      	ldr	r3, [pc, #44]	@ (80019ec <HAL_RCC_OscConfig+0x76c>)
 80019c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019c2:	4a0a      	ldr	r2, [pc, #40]	@ (80019ec <HAL_RCC_OscConfig+0x76c>)
 80019c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80019ca:	4b08      	ldr	r3, [pc, #32]	@ (80019ec <HAL_RCC_OscConfig+0x76c>)
 80019cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ce:	4a07      	ldr	r2, [pc, #28]	@ (80019ec <HAL_RCC_OscConfig+0x76c>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019d6:	4b05      	ldr	r3, [pc, #20]	@ (80019ec <HAL_RCC_OscConfig+0x76c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a04      	ldr	r2, [pc, #16]	@ (80019ec <HAL_RCC_OscConfig+0x76c>)
 80019dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e2:	f7ff f8eb 	bl	8000bbc <HAL_GetTick>
 80019e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019e8:	e011      	b.n	8001a0e <HAL_RCC_OscConfig+0x78e>
 80019ea:	bf00      	nop
 80019ec:	58024400 	.word	0x58024400
 80019f0:	58024800 	.word	0x58024800
 80019f4:	fffffc0c 	.word	0xfffffc0c
 80019f8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019fc:	f7ff f8de 	bl	8000bbc <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e08a      	b.n	8001b24 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a0e:	4b47      	ldr	r3, [pc, #284]	@ (8001b2c <HAL_RCC_OscConfig+0x8ac>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d0f0      	beq.n	80019fc <HAL_RCC_OscConfig+0x77c>
 8001a1a:	e082      	b.n	8001b22 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a1c:	4b43      	ldr	r3, [pc, #268]	@ (8001b2c <HAL_RCC_OscConfig+0x8ac>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a42      	ldr	r2, [pc, #264]	@ (8001b2c <HAL_RCC_OscConfig+0x8ac>)
 8001a22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a28:	f7ff f8c8 	bl	8000bbc <HAL_GetTick>
 8001a2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a30:	f7ff f8c4 	bl	8000bbc <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e070      	b.n	8001b24 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a42:	4b3a      	ldr	r3, [pc, #232]	@ (8001b2c <HAL_RCC_OscConfig+0x8ac>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1f0      	bne.n	8001a30 <HAL_RCC_OscConfig+0x7b0>
 8001a4e:	e068      	b.n	8001b22 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001a50:	4b36      	ldr	r3, [pc, #216]	@ (8001b2c <HAL_RCC_OscConfig+0x8ac>)
 8001a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a54:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001a56:	4b35      	ldr	r3, [pc, #212]	@ (8001b2c <HAL_RCC_OscConfig+0x8ac>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d031      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	f003 0203 	and.w	r2, r3, #3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d12a      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	091b      	lsrs	r3, r3, #4
 8001a76:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d122      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d11a      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	0a5b      	lsrs	r3, r3, #9
 8001a96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a9e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d111      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	0c1b      	lsrs	r3, r3, #16
 8001aa8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ab0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d108      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	0e1b      	lsrs	r3, r3, #24
 8001aba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ac2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d001      	beq.n	8001acc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e02b      	b.n	8001b24 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001acc:	4b17      	ldr	r3, [pc, #92]	@ (8001b2c <HAL_RCC_OscConfig+0x8ac>)
 8001ace:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ad0:	08db      	lsrs	r3, r3, #3
 8001ad2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001ad6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d01f      	beq.n	8001b22 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001ae2:	4b12      	ldr	r3, [pc, #72]	@ (8001b2c <HAL_RCC_OscConfig+0x8ac>)
 8001ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ae6:	4a11      	ldr	r2, [pc, #68]	@ (8001b2c <HAL_RCC_OscConfig+0x8ac>)
 8001ae8:	f023 0301 	bic.w	r3, r3, #1
 8001aec:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001aee:	f7ff f865 	bl	8000bbc <HAL_GetTick>
 8001af2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001af4:	bf00      	nop
 8001af6:	f7ff f861 	bl	8000bbc <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d0f9      	beq.n	8001af6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001b02:	4b0a      	ldr	r3, [pc, #40]	@ (8001b2c <HAL_RCC_OscConfig+0x8ac>)
 8001b04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b06:	4b0a      	ldr	r3, [pc, #40]	@ (8001b30 <HAL_RCC_OscConfig+0x8b0>)
 8001b08:	4013      	ands	r3, r2
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001b0e:	00d2      	lsls	r2, r2, #3
 8001b10:	4906      	ldr	r1, [pc, #24]	@ (8001b2c <HAL_RCC_OscConfig+0x8ac>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001b16:	4b05      	ldr	r3, [pc, #20]	@ (8001b2c <HAL_RCC_OscConfig+0x8ac>)
 8001b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b1a:	4a04      	ldr	r2, [pc, #16]	@ (8001b2c <HAL_RCC_OscConfig+0x8ac>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3730      	adds	r7, #48	@ 0x30
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	58024400 	.word	0x58024400
 8001b30:	ffff0007 	.word	0xffff0007

08001b34 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d101      	bne.n	8001b48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e19c      	b.n	8001e82 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b48:	4b8a      	ldr	r3, [pc, #552]	@ (8001d74 <HAL_RCC_ClockConfig+0x240>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 030f 	and.w	r3, r3, #15
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d910      	bls.n	8001b78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b56:	4b87      	ldr	r3, [pc, #540]	@ (8001d74 <HAL_RCC_ClockConfig+0x240>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f023 020f 	bic.w	r2, r3, #15
 8001b5e:	4985      	ldr	r1, [pc, #532]	@ (8001d74 <HAL_RCC_ClockConfig+0x240>)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b66:	4b83      	ldr	r3, [pc, #524]	@ (8001d74 <HAL_RCC_ClockConfig+0x240>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 030f 	and.w	r3, r3, #15
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d001      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e184      	b.n	8001e82 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d010      	beq.n	8001ba6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	691a      	ldr	r2, [r3, #16]
 8001b88:	4b7b      	ldr	r3, [pc, #492]	@ (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d908      	bls.n	8001ba6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001b94:	4b78      	ldr	r3, [pc, #480]	@ (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	4975      	ldr	r1, [pc, #468]	@ (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0308 	and.w	r3, r3, #8
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d010      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	695a      	ldr	r2, [r3, #20]
 8001bb6:	4b70      	ldr	r3, [pc, #448]	@ (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001bb8:	69db      	ldr	r3, [r3, #28]
 8001bba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d908      	bls.n	8001bd4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001bc2:	4b6d      	ldr	r3, [pc, #436]	@ (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	496a      	ldr	r1, [pc, #424]	@ (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0310 	and.w	r3, r3, #16
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d010      	beq.n	8001c02 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	699a      	ldr	r2, [r3, #24]
 8001be4:	4b64      	ldr	r3, [pc, #400]	@ (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001be6:	69db      	ldr	r3, [r3, #28]
 8001be8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d908      	bls.n	8001c02 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001bf0:	4b61      	ldr	r3, [pc, #388]	@ (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001bf2:	69db      	ldr	r3, [r3, #28]
 8001bf4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	495e      	ldr	r1, [pc, #376]	@ (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0320 	and.w	r3, r3, #32
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d010      	beq.n	8001c30 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69da      	ldr	r2, [r3, #28]
 8001c12:	4b59      	ldr	r3, [pc, #356]	@ (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001c14:	6a1b      	ldr	r3, [r3, #32]
 8001c16:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d908      	bls.n	8001c30 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001c1e:	4b56      	ldr	r3, [pc, #344]	@ (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001c20:	6a1b      	ldr	r3, [r3, #32]
 8001c22:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	4953      	ldr	r1, [pc, #332]	@ (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d010      	beq.n	8001c5e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68da      	ldr	r2, [r3, #12]
 8001c40:	4b4d      	ldr	r3, [pc, #308]	@ (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	f003 030f 	and.w	r3, r3, #15
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d908      	bls.n	8001c5e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c4c:	4b4a      	ldr	r3, [pc, #296]	@ (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	f023 020f 	bic.w	r2, r3, #15
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	4947      	ldr	r1, [pc, #284]	@ (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d055      	beq.n	8001d16 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001c6a:	4b43      	ldr	r3, [pc, #268]	@ (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	4940      	ldr	r1, [pc, #256]	@ (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d107      	bne.n	8001c94 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c84:	4b3c      	ldr	r3, [pc, #240]	@ (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d121      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e0f6      	b.n	8001e82 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b03      	cmp	r3, #3
 8001c9a:	d107      	bne.n	8001cac <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c9c:	4b36      	ldr	r3, [pc, #216]	@ (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d115      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e0ea      	b.n	8001e82 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d107      	bne.n	8001cc4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001cb4:	4b30      	ldr	r3, [pc, #192]	@ (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d109      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e0de      	b.n	8001e82 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cc4:	4b2c      	ldr	r3, [pc, #176]	@ (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e0d6      	b.n	8001e82 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cd4:	4b28      	ldr	r3, [pc, #160]	@ (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	f023 0207 	bic.w	r2, r3, #7
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	4925      	ldr	r1, [pc, #148]	@ (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ce6:	f7fe ff69 	bl	8000bbc <HAL_GetTick>
 8001cea:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cec:	e00a      	b.n	8001d04 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cee:	f7fe ff65 	bl	8000bbc <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e0be      	b.n	8001e82 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d04:	4b1c      	ldr	r3, [pc, #112]	@ (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d1eb      	bne.n	8001cee <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d010      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	68da      	ldr	r2, [r3, #12]
 8001d26:	4b14      	ldr	r3, [pc, #80]	@ (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d208      	bcs.n	8001d44 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d32:	4b11      	ldr	r3, [pc, #68]	@ (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	f023 020f 	bic.w	r2, r3, #15
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	490e      	ldr	r1, [pc, #56]	@ (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d44:	4b0b      	ldr	r3, [pc, #44]	@ (8001d74 <HAL_RCC_ClockConfig+0x240>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 030f 	and.w	r3, r3, #15
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d214      	bcs.n	8001d7c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d52:	4b08      	ldr	r3, [pc, #32]	@ (8001d74 <HAL_RCC_ClockConfig+0x240>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f023 020f 	bic.w	r2, r3, #15
 8001d5a:	4906      	ldr	r1, [pc, #24]	@ (8001d74 <HAL_RCC_ClockConfig+0x240>)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d62:	4b04      	ldr	r3, [pc, #16]	@ (8001d74 <HAL_RCC_ClockConfig+0x240>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d005      	beq.n	8001d7c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e086      	b.n	8001e82 <HAL_RCC_ClockConfig+0x34e>
 8001d74:	52002000 	.word	0x52002000
 8001d78:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d010      	beq.n	8001daa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	691a      	ldr	r2, [r3, #16]
 8001d8c:	4b3f      	ldr	r3, [pc, #252]	@ (8001e8c <HAL_RCC_ClockConfig+0x358>)
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d208      	bcs.n	8001daa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001d98:	4b3c      	ldr	r3, [pc, #240]	@ (8001e8c <HAL_RCC_ClockConfig+0x358>)
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	4939      	ldr	r1, [pc, #228]	@ (8001e8c <HAL_RCC_ClockConfig+0x358>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0308 	and.w	r3, r3, #8
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d010      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	695a      	ldr	r2, [r3, #20]
 8001dba:	4b34      	ldr	r3, [pc, #208]	@ (8001e8c <HAL_RCC_ClockConfig+0x358>)
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d208      	bcs.n	8001dd8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001dc6:	4b31      	ldr	r3, [pc, #196]	@ (8001e8c <HAL_RCC_ClockConfig+0x358>)
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	492e      	ldr	r1, [pc, #184]	@ (8001e8c <HAL_RCC_ClockConfig+0x358>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0310 	and.w	r3, r3, #16
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d010      	beq.n	8001e06 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	699a      	ldr	r2, [r3, #24]
 8001de8:	4b28      	ldr	r3, [pc, #160]	@ (8001e8c <HAL_RCC_ClockConfig+0x358>)
 8001dea:	69db      	ldr	r3, [r3, #28]
 8001dec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d208      	bcs.n	8001e06 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001df4:	4b25      	ldr	r3, [pc, #148]	@ (8001e8c <HAL_RCC_ClockConfig+0x358>)
 8001df6:	69db      	ldr	r3, [r3, #28]
 8001df8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	4922      	ldr	r1, [pc, #136]	@ (8001e8c <HAL_RCC_ClockConfig+0x358>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0320 	and.w	r3, r3, #32
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d010      	beq.n	8001e34 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	69da      	ldr	r2, [r3, #28]
 8001e16:	4b1d      	ldr	r3, [pc, #116]	@ (8001e8c <HAL_RCC_ClockConfig+0x358>)
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d208      	bcs.n	8001e34 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001e22:	4b1a      	ldr	r3, [pc, #104]	@ (8001e8c <HAL_RCC_ClockConfig+0x358>)
 8001e24:	6a1b      	ldr	r3, [r3, #32]
 8001e26:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	4917      	ldr	r1, [pc, #92]	@ (8001e8c <HAL_RCC_ClockConfig+0x358>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001e34:	f000 f834 	bl	8001ea0 <HAL_RCC_GetSysClockFreq>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	4b14      	ldr	r3, [pc, #80]	@ (8001e8c <HAL_RCC_ClockConfig+0x358>)
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	0a1b      	lsrs	r3, r3, #8
 8001e40:	f003 030f 	and.w	r3, r3, #15
 8001e44:	4912      	ldr	r1, [pc, #72]	@ (8001e90 <HAL_RCC_ClockConfig+0x35c>)
 8001e46:	5ccb      	ldrb	r3, [r1, r3]
 8001e48:	f003 031f 	and.w	r3, r3, #31
 8001e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e50:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001e52:	4b0e      	ldr	r3, [pc, #56]	@ (8001e8c <HAL_RCC_ClockConfig+0x358>)
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	4a0d      	ldr	r2, [pc, #52]	@ (8001e90 <HAL_RCC_ClockConfig+0x35c>)
 8001e5c:	5cd3      	ldrb	r3, [r2, r3]
 8001e5e:	f003 031f 	and.w	r3, r3, #31
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	fa22 f303 	lsr.w	r3, r2, r3
 8001e68:	4a0a      	ldr	r2, [pc, #40]	@ (8001e94 <HAL_RCC_ClockConfig+0x360>)
 8001e6a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e6c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e98 <HAL_RCC_ClockConfig+0x364>)
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001e72:	4b0a      	ldr	r3, [pc, #40]	@ (8001e9c <HAL_RCC_ClockConfig+0x368>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7fe fe56 	bl	8000b28 <HAL_InitTick>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	58024400 	.word	0x58024400
 8001e90:	080050c0 	.word	0x080050c0
 8001e94:	24000004 	.word	0x24000004
 8001e98:	24000000 	.word	0x24000000
 8001e9c:	24000008 	.word	0x24000008

08001ea0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b089      	sub	sp, #36	@ 0x24
 8001ea4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ea6:	4bb3      	ldr	r3, [pc, #716]	@ (8002174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001eae:	2b18      	cmp	r3, #24
 8001eb0:	f200 8155 	bhi.w	800215e <HAL_RCC_GetSysClockFreq+0x2be>
 8001eb4:	a201      	add	r2, pc, #4	@ (adr r2, 8001ebc <HAL_RCC_GetSysClockFreq+0x1c>)
 8001eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eba:	bf00      	nop
 8001ebc:	08001f21 	.word	0x08001f21
 8001ec0:	0800215f 	.word	0x0800215f
 8001ec4:	0800215f 	.word	0x0800215f
 8001ec8:	0800215f 	.word	0x0800215f
 8001ecc:	0800215f 	.word	0x0800215f
 8001ed0:	0800215f 	.word	0x0800215f
 8001ed4:	0800215f 	.word	0x0800215f
 8001ed8:	0800215f 	.word	0x0800215f
 8001edc:	08001f47 	.word	0x08001f47
 8001ee0:	0800215f 	.word	0x0800215f
 8001ee4:	0800215f 	.word	0x0800215f
 8001ee8:	0800215f 	.word	0x0800215f
 8001eec:	0800215f 	.word	0x0800215f
 8001ef0:	0800215f 	.word	0x0800215f
 8001ef4:	0800215f 	.word	0x0800215f
 8001ef8:	0800215f 	.word	0x0800215f
 8001efc:	08001f4d 	.word	0x08001f4d
 8001f00:	0800215f 	.word	0x0800215f
 8001f04:	0800215f 	.word	0x0800215f
 8001f08:	0800215f 	.word	0x0800215f
 8001f0c:	0800215f 	.word	0x0800215f
 8001f10:	0800215f 	.word	0x0800215f
 8001f14:	0800215f 	.word	0x0800215f
 8001f18:	0800215f 	.word	0x0800215f
 8001f1c:	08001f53 	.word	0x08001f53
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f20:	4b94      	ldr	r3, [pc, #592]	@ (8002174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0320 	and.w	r3, r3, #32
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d009      	beq.n	8001f40 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001f2c:	4b91      	ldr	r3, [pc, #580]	@ (8002174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	08db      	lsrs	r3, r3, #3
 8001f32:	f003 0303 	and.w	r3, r3, #3
 8001f36:	4a90      	ldr	r2, [pc, #576]	@ (8002178 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001f38:	fa22 f303 	lsr.w	r3, r2, r3
 8001f3c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001f3e:	e111      	b.n	8002164 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001f40:	4b8d      	ldr	r3, [pc, #564]	@ (8002178 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001f42:	61bb      	str	r3, [r7, #24]
      break;
 8001f44:	e10e      	b.n	8002164 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001f46:	4b8d      	ldr	r3, [pc, #564]	@ (800217c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001f48:	61bb      	str	r3, [r7, #24]
      break;
 8001f4a:	e10b      	b.n	8002164 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001f4c:	4b8c      	ldr	r3, [pc, #560]	@ (8002180 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001f4e:	61bb      	str	r3, [r7, #24]
      break;
 8001f50:	e108      	b.n	8002164 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001f52:	4b88      	ldr	r3, [pc, #544]	@ (8002174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f56:	f003 0303 	and.w	r3, r3, #3
 8001f5a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001f5c:	4b85      	ldr	r3, [pc, #532]	@ (8002174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f60:	091b      	lsrs	r3, r3, #4
 8001f62:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f66:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001f68:	4b82      	ldr	r3, [pc, #520]	@ (8002174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001f72:	4b80      	ldr	r3, [pc, #512]	@ (8002174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f76:	08db      	lsrs	r3, r3, #3
 8001f78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	fb02 f303 	mul.w	r3, r2, r3
 8001f82:	ee07 3a90 	vmov	s15, r3
 8001f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f8a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 80e1 	beq.w	8002158 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	f000 8083 	beq.w	80020a4 <HAL_RCC_GetSysClockFreq+0x204>
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	f200 80a1 	bhi.w	80020e8 <HAL_RCC_GetSysClockFreq+0x248>
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d003      	beq.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x114>
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d056      	beq.n	8002060 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001fb2:	e099      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001fb4:	4b6f      	ldr	r3, [pc, #444]	@ (8002174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0320 	and.w	r3, r3, #32
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d02d      	beq.n	800201c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001fc0:	4b6c      	ldr	r3, [pc, #432]	@ (8002174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	08db      	lsrs	r3, r3, #3
 8001fc6:	f003 0303 	and.w	r3, r3, #3
 8001fca:	4a6b      	ldr	r2, [pc, #428]	@ (8002178 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	ee07 3a90 	vmov	s15, r3
 8001fd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	ee07 3a90 	vmov	s15, r3
 8001fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fea:	4b62      	ldr	r3, [pc, #392]	@ (8002174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ff2:	ee07 3a90 	vmov	s15, r3
 8001ff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ffa:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ffe:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002184 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800200a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800200e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002016:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800201a:	e087      	b.n	800212c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	ee07 3a90 	vmov	s15, r3
 8002022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002026:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002188 <HAL_RCC_GetSysClockFreq+0x2e8>
 800202a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800202e:	4b51      	ldr	r3, [pc, #324]	@ (8002174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002036:	ee07 3a90 	vmov	s15, r3
 800203a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800203e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002042:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002184 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800204a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800204e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800205a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800205e:	e065      	b.n	800212c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	ee07 3a90 	vmov	s15, r3
 8002066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800206a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800218c <HAL_RCC_GetSysClockFreq+0x2ec>
 800206e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002072:	4b40      	ldr	r3, [pc, #256]	@ (8002174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800207a:	ee07 3a90 	vmov	s15, r3
 800207e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002082:	ed97 6a02 	vldr	s12, [r7, #8]
 8002086:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002184 <HAL_RCC_GetSysClockFreq+0x2e4>
 800208a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800208e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002092:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800209a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800209e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80020a2:	e043      	b.n	800212c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	ee07 3a90 	vmov	s15, r3
 80020aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020ae:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002190 <HAL_RCC_GetSysClockFreq+0x2f0>
 80020b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020b6:	4b2f      	ldr	r3, [pc, #188]	@ (8002174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020be:	ee07 3a90 	vmov	s15, r3
 80020c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80020ca:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002184 <HAL_RCC_GetSysClockFreq+0x2e4>
 80020ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80020da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80020e6:	e021      	b.n	800212c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	ee07 3a90 	vmov	s15, r3
 80020ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020f2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800218c <HAL_RCC_GetSysClockFreq+0x2ec>
 80020f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002102:	ee07 3a90 	vmov	s15, r3
 8002106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800210a:	ed97 6a02 	vldr	s12, [r7, #8]
 800210e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002184 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800211a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800211e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002126:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800212a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800212c:	4b11      	ldr	r3, [pc, #68]	@ (8002174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800212e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002130:	0a5b      	lsrs	r3, r3, #9
 8002132:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002136:	3301      	adds	r3, #1
 8002138:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	ee07 3a90 	vmov	s15, r3
 8002140:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002144:	edd7 6a07 	vldr	s13, [r7, #28]
 8002148:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800214c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002150:	ee17 3a90 	vmov	r3, s15
 8002154:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002156:	e005      	b.n	8002164 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002158:	2300      	movs	r3, #0
 800215a:	61bb      	str	r3, [r7, #24]
      break;
 800215c:	e002      	b.n	8002164 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800215e:	4b07      	ldr	r3, [pc, #28]	@ (800217c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002160:	61bb      	str	r3, [r7, #24]
      break;
 8002162:	bf00      	nop
  }

  return sysclockfreq;
 8002164:	69bb      	ldr	r3, [r7, #24]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3724      	adds	r7, #36	@ 0x24
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	58024400 	.word	0x58024400
 8002178:	03d09000 	.word	0x03d09000
 800217c:	003d0900 	.word	0x003d0900
 8002180:	017d7840 	.word	0x017d7840
 8002184:	46000000 	.word	0x46000000
 8002188:	4c742400 	.word	0x4c742400
 800218c:	4a742400 	.word	0x4a742400
 8002190:	4bbebc20 	.word	0x4bbebc20

08002194 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800219a:	f7ff fe81 	bl	8001ea0 <HAL_RCC_GetSysClockFreq>
 800219e:	4602      	mov	r2, r0
 80021a0:	4b10      	ldr	r3, [pc, #64]	@ (80021e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	0a1b      	lsrs	r3, r3, #8
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	490f      	ldr	r1, [pc, #60]	@ (80021e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80021ac:	5ccb      	ldrb	r3, [r1, r3]
 80021ae:	f003 031f 	and.w	r3, r3, #31
 80021b2:	fa22 f303 	lsr.w	r3, r2, r3
 80021b6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80021b8:	4b0a      	ldr	r3, [pc, #40]	@ (80021e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	f003 030f 	and.w	r3, r3, #15
 80021c0:	4a09      	ldr	r2, [pc, #36]	@ (80021e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80021c2:	5cd3      	ldrb	r3, [r2, r3]
 80021c4:	f003 031f 	and.w	r3, r3, #31
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	fa22 f303 	lsr.w	r3, r2, r3
 80021ce:	4a07      	ldr	r2, [pc, #28]	@ (80021ec <HAL_RCC_GetHCLKFreq+0x58>)
 80021d0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80021d2:	4a07      	ldr	r2, [pc, #28]	@ (80021f0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80021d8:	4b04      	ldr	r3, [pc, #16]	@ (80021ec <HAL_RCC_GetHCLKFreq+0x58>)
 80021da:	681b      	ldr	r3, [r3, #0]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	58024400 	.word	0x58024400
 80021e8:	080050c0 	.word	0x080050c0
 80021ec:	24000004 	.word	0x24000004
 80021f0:	24000000 	.word	0x24000000

080021f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80021f8:	f7ff ffcc 	bl	8002194 <HAL_RCC_GetHCLKFreq>
 80021fc:	4602      	mov	r2, r0
 80021fe:	4b06      	ldr	r3, [pc, #24]	@ (8002218 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	091b      	lsrs	r3, r3, #4
 8002204:	f003 0307 	and.w	r3, r3, #7
 8002208:	4904      	ldr	r1, [pc, #16]	@ (800221c <HAL_RCC_GetPCLK1Freq+0x28>)
 800220a:	5ccb      	ldrb	r3, [r1, r3]
 800220c:	f003 031f 	and.w	r3, r3, #31
 8002210:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002214:	4618      	mov	r0, r3
 8002216:	bd80      	pop	{r7, pc}
 8002218:	58024400 	.word	0x58024400
 800221c:	080050c0 	.word	0x080050c0

08002220 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002224:	f7ff ffb6 	bl	8002194 <HAL_RCC_GetHCLKFreq>
 8002228:	4602      	mov	r2, r0
 800222a:	4b06      	ldr	r3, [pc, #24]	@ (8002244 <HAL_RCC_GetPCLK2Freq+0x24>)
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	0a1b      	lsrs	r3, r3, #8
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	4904      	ldr	r1, [pc, #16]	@ (8002248 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002236:	5ccb      	ldrb	r3, [r1, r3]
 8002238:	f003 031f 	and.w	r3, r3, #31
 800223c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002240:	4618      	mov	r0, r3
 8002242:	bd80      	pop	{r7, pc}
 8002244:	58024400 	.word	0x58024400
 8002248:	080050c0 	.word	0x080050c0

0800224c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800224c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002250:	b0ca      	sub	sp, #296	@ 0x128
 8002252:	af00      	add	r7, sp, #0
 8002254:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002258:	2300      	movs	r3, #0
 800225a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800225e:	2300      	movs	r3, #0
 8002260:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800226c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002270:	2500      	movs	r5, #0
 8002272:	ea54 0305 	orrs.w	r3, r4, r5
 8002276:	d049      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002278:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800227c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800227e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002282:	d02f      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002284:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002288:	d828      	bhi.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800228a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800228e:	d01a      	beq.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002290:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002294:	d822      	bhi.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800229a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800229e:	d007      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80022a0:	e01c      	b.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80022a2:	4bb8      	ldr	r3, [pc, #736]	@ (8002584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80022a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a6:	4ab7      	ldr	r2, [pc, #732]	@ (8002584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80022a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80022ae:	e01a      	b.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80022b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80022b4:	3308      	adds	r3, #8
 80022b6:	2102      	movs	r1, #2
 80022b8:	4618      	mov	r0, r3
 80022ba:	f001 fc8f 	bl	8003bdc <RCCEx_PLL2_Config>
 80022be:	4603      	mov	r3, r0
 80022c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80022c4:	e00f      	b.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80022c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80022ca:	3328      	adds	r3, #40	@ 0x28
 80022cc:	2102      	movs	r1, #2
 80022ce:	4618      	mov	r0, r3
 80022d0:	f001 fd36 	bl	8003d40 <RCCEx_PLL3_Config>
 80022d4:	4603      	mov	r3, r0
 80022d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80022da:	e004      	b.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80022e2:	e000      	b.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80022e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80022e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10a      	bne.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80022ee:	4ba5      	ldr	r3, [pc, #660]	@ (8002584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80022f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022f2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80022f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80022fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80022fc:	4aa1      	ldr	r2, [pc, #644]	@ (8002584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80022fe:	430b      	orrs	r3, r1
 8002300:	6513      	str	r3, [r2, #80]	@ 0x50
 8002302:	e003      	b.n	800230c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002304:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002308:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800230c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002314:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002318:	f04f 0900 	mov.w	r9, #0
 800231c:	ea58 0309 	orrs.w	r3, r8, r9
 8002320:	d047      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002328:	2b04      	cmp	r3, #4
 800232a:	d82a      	bhi.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800232c:	a201      	add	r2, pc, #4	@ (adr r2, 8002334 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800232e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002332:	bf00      	nop
 8002334:	08002349 	.word	0x08002349
 8002338:	08002357 	.word	0x08002357
 800233c:	0800236d 	.word	0x0800236d
 8002340:	0800238b 	.word	0x0800238b
 8002344:	0800238b 	.word	0x0800238b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002348:	4b8e      	ldr	r3, [pc, #568]	@ (8002584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800234a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800234c:	4a8d      	ldr	r2, [pc, #564]	@ (8002584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800234e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002352:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002354:	e01a      	b.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800235a:	3308      	adds	r3, #8
 800235c:	2100      	movs	r1, #0
 800235e:	4618      	mov	r0, r3
 8002360:	f001 fc3c 	bl	8003bdc <RCCEx_PLL2_Config>
 8002364:	4603      	mov	r3, r0
 8002366:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800236a:	e00f      	b.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800236c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002370:	3328      	adds	r3, #40	@ 0x28
 8002372:	2100      	movs	r1, #0
 8002374:	4618      	mov	r0, r3
 8002376:	f001 fce3 	bl	8003d40 <RCCEx_PLL3_Config>
 800237a:	4603      	mov	r3, r0
 800237c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002380:	e004      	b.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002388:	e000      	b.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800238a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800238c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10a      	bne.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002394:	4b7b      	ldr	r3, [pc, #492]	@ (8002584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002396:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002398:	f023 0107 	bic.w	r1, r3, #7
 800239c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80023a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a2:	4a78      	ldr	r2, [pc, #480]	@ (8002584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80023a4:	430b      	orrs	r3, r1
 80023a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80023a8:	e003      	b.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80023ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80023b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80023b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ba:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80023be:	f04f 0b00 	mov.w	fp, #0
 80023c2:	ea5a 030b 	orrs.w	r3, sl, fp
 80023c6:	d04c      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80023c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80023cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023d2:	d030      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80023d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023d8:	d829      	bhi.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80023da:	2bc0      	cmp	r3, #192	@ 0xc0
 80023dc:	d02d      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80023de:	2bc0      	cmp	r3, #192	@ 0xc0
 80023e0:	d825      	bhi.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80023e2:	2b80      	cmp	r3, #128	@ 0x80
 80023e4:	d018      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80023e6:	2b80      	cmp	r3, #128	@ 0x80
 80023e8:	d821      	bhi.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d002      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80023ee:	2b40      	cmp	r3, #64	@ 0x40
 80023f0:	d007      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80023f2:	e01c      	b.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023f4:	4b63      	ldr	r3, [pc, #396]	@ (8002584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80023f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f8:	4a62      	ldr	r2, [pc, #392]	@ (8002584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80023fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002400:	e01c      	b.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002406:	3308      	adds	r3, #8
 8002408:	2100      	movs	r1, #0
 800240a:	4618      	mov	r0, r3
 800240c:	f001 fbe6 	bl	8003bdc <RCCEx_PLL2_Config>
 8002410:	4603      	mov	r3, r0
 8002412:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002416:	e011      	b.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002418:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800241c:	3328      	adds	r3, #40	@ 0x28
 800241e:	2100      	movs	r1, #0
 8002420:	4618      	mov	r0, r3
 8002422:	f001 fc8d 	bl	8003d40 <RCCEx_PLL3_Config>
 8002426:	4603      	mov	r3, r0
 8002428:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800242c:	e006      	b.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002434:	e002      	b.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002436:	bf00      	nop
 8002438:	e000      	b.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800243a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800243c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10a      	bne.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002444:	4b4f      	ldr	r3, [pc, #316]	@ (8002584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002446:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002448:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800244c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002450:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002452:	4a4c      	ldr	r2, [pc, #304]	@ (8002584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002454:	430b      	orrs	r3, r1
 8002456:	6513      	str	r3, [r2, #80]	@ 0x50
 8002458:	e003      	b.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800245a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800245e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800246a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800246e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002472:	2300      	movs	r3, #0
 8002474:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002478:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800247c:	460b      	mov	r3, r1
 800247e:	4313      	orrs	r3, r2
 8002480:	d053      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002486:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800248a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800248e:	d035      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002490:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002494:	d82e      	bhi.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002496:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800249a:	d031      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800249c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80024a0:	d828      	bhi.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80024a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024a6:	d01a      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x292>
 80024a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024ac:	d822      	bhi.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80024b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80024b6:	d007      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80024b8:	e01c      	b.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024ba:	4b32      	ldr	r3, [pc, #200]	@ (8002584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80024bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024be:	4a31      	ldr	r2, [pc, #196]	@ (8002584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80024c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80024c6:	e01c      	b.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80024c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80024cc:	3308      	adds	r3, #8
 80024ce:	2100      	movs	r1, #0
 80024d0:	4618      	mov	r0, r3
 80024d2:	f001 fb83 	bl	8003bdc <RCCEx_PLL2_Config>
 80024d6:	4603      	mov	r3, r0
 80024d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80024dc:	e011      	b.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80024de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80024e2:	3328      	adds	r3, #40	@ 0x28
 80024e4:	2100      	movs	r1, #0
 80024e6:	4618      	mov	r0, r3
 80024e8:	f001 fc2a 	bl	8003d40 <RCCEx_PLL3_Config>
 80024ec:	4603      	mov	r3, r0
 80024ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80024f2:	e006      	b.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80024fa:	e002      	b.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80024fc:	bf00      	nop
 80024fe:	e000      	b.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002500:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002502:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10b      	bne.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800250a:	4b1e      	ldr	r3, [pc, #120]	@ (8002584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800250c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800250e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002516:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800251a:	4a1a      	ldr	r2, [pc, #104]	@ (8002584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800251c:	430b      	orrs	r3, r1
 800251e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002520:	e003      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002522:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002526:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800252a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800252e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002532:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002536:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800253a:	2300      	movs	r3, #0
 800253c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002540:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002544:	460b      	mov	r3, r1
 8002546:	4313      	orrs	r3, r2
 8002548:	d056      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800254a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800254e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002552:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002556:	d038      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002558:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800255c:	d831      	bhi.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800255e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002562:	d034      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002564:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002568:	d82b      	bhi.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800256a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800256e:	d01d      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002570:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002574:	d825      	bhi.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002576:	2b00      	cmp	r3, #0
 8002578:	d006      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800257a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800257e:	d00a      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002580:	e01f      	b.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002582:	bf00      	nop
 8002584:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002588:	4ba2      	ldr	r3, [pc, #648]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800258a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800258c:	4aa1      	ldr	r2, [pc, #644]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800258e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002592:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002594:	e01c      	b.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800259a:	3308      	adds	r3, #8
 800259c:	2100      	movs	r1, #0
 800259e:	4618      	mov	r0, r3
 80025a0:	f001 fb1c 	bl	8003bdc <RCCEx_PLL2_Config>
 80025a4:	4603      	mov	r3, r0
 80025a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80025aa:	e011      	b.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80025ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025b0:	3328      	adds	r3, #40	@ 0x28
 80025b2:	2100      	movs	r1, #0
 80025b4:	4618      	mov	r0, r3
 80025b6:	f001 fbc3 	bl	8003d40 <RCCEx_PLL3_Config>
 80025ba:	4603      	mov	r3, r0
 80025bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80025c0:	e006      	b.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80025c8:	e002      	b.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80025ca:	bf00      	nop
 80025cc:	e000      	b.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80025ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80025d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10b      	bne.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80025d8:	4b8e      	ldr	r3, [pc, #568]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80025da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025dc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80025e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80025e8:	4a8a      	ldr	r2, [pc, #552]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80025ea:	430b      	orrs	r3, r1
 80025ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80025ee:	e003      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80025f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80025f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002600:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002604:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002608:	2300      	movs	r3, #0
 800260a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800260e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002612:	460b      	mov	r3, r1
 8002614:	4313      	orrs	r3, r2
 8002616:	d03a      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800261c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800261e:	2b30      	cmp	r3, #48	@ 0x30
 8002620:	d01f      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002622:	2b30      	cmp	r3, #48	@ 0x30
 8002624:	d819      	bhi.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002626:	2b20      	cmp	r3, #32
 8002628:	d00c      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800262a:	2b20      	cmp	r3, #32
 800262c:	d815      	bhi.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800262e:	2b00      	cmp	r3, #0
 8002630:	d019      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002632:	2b10      	cmp	r3, #16
 8002634:	d111      	bne.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002636:	4b77      	ldr	r3, [pc, #476]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800263a:	4a76      	ldr	r2, [pc, #472]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800263c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002640:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002642:	e011      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002644:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002648:	3308      	adds	r3, #8
 800264a:	2102      	movs	r1, #2
 800264c:	4618      	mov	r0, r3
 800264e:	f001 fac5 	bl	8003bdc <RCCEx_PLL2_Config>
 8002652:	4603      	mov	r3, r0
 8002654:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002658:	e006      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002660:	e002      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002662:	bf00      	nop
 8002664:	e000      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002666:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002668:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800266c:	2b00      	cmp	r3, #0
 800266e:	d10a      	bne.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002670:	4b68      	ldr	r3, [pc, #416]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002672:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002674:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800267c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800267e:	4a65      	ldr	r2, [pc, #404]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002680:	430b      	orrs	r3, r1
 8002682:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002684:	e003      	b.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002686:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800268a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800268e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002696:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800269a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800269e:	2300      	movs	r3, #0
 80026a0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80026a4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80026a8:	460b      	mov	r3, r1
 80026aa:	4313      	orrs	r3, r2
 80026ac:	d051      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80026ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80026b8:	d035      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80026ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80026be:	d82e      	bhi.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80026c0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80026c4:	d031      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80026c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80026ca:	d828      	bhi.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80026cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026d0:	d01a      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80026d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026d6:	d822      	bhi.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d003      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80026dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026e0:	d007      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80026e2:	e01c      	b.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026e4:	4b4b      	ldr	r3, [pc, #300]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80026e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026e8:	4a4a      	ldr	r2, [pc, #296]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80026ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80026f0:	e01c      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80026f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026f6:	3308      	adds	r3, #8
 80026f8:	2100      	movs	r1, #0
 80026fa:	4618      	mov	r0, r3
 80026fc:	f001 fa6e 	bl	8003bdc <RCCEx_PLL2_Config>
 8002700:	4603      	mov	r3, r0
 8002702:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002706:	e011      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800270c:	3328      	adds	r3, #40	@ 0x28
 800270e:	2100      	movs	r1, #0
 8002710:	4618      	mov	r0, r3
 8002712:	f001 fb15 	bl	8003d40 <RCCEx_PLL3_Config>
 8002716:	4603      	mov	r3, r0
 8002718:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800271c:	e006      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002724:	e002      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002726:	bf00      	nop
 8002728:	e000      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800272a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800272c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002730:	2b00      	cmp	r3, #0
 8002732:	d10a      	bne.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002734:	4b37      	ldr	r3, [pc, #220]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002736:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002738:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800273c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002740:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002742:	4a34      	ldr	r2, [pc, #208]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002744:	430b      	orrs	r3, r1
 8002746:	6513      	str	r3, [r2, #80]	@ 0x50
 8002748:	e003      	b.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800274a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800274e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800275e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002762:	2300      	movs	r3, #0
 8002764:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002768:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800276c:	460b      	mov	r3, r1
 800276e:	4313      	orrs	r3, r2
 8002770:	d056      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002776:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002778:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800277c:	d033      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800277e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002782:	d82c      	bhi.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002784:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002788:	d02f      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800278a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800278e:	d826      	bhi.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002790:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002794:	d02b      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002796:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800279a:	d820      	bhi.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x592>
 800279c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80027a0:	d012      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80027a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80027a6:	d81a      	bhi.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x592>
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d022      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80027ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027b0:	d115      	bne.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80027b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027b6:	3308      	adds	r3, #8
 80027b8:	2101      	movs	r1, #1
 80027ba:	4618      	mov	r0, r3
 80027bc:	f001 fa0e 	bl	8003bdc <RCCEx_PLL2_Config>
 80027c0:	4603      	mov	r3, r0
 80027c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80027c6:	e015      	b.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80027c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027cc:	3328      	adds	r3, #40	@ 0x28
 80027ce:	2101      	movs	r1, #1
 80027d0:	4618      	mov	r0, r3
 80027d2:	f001 fab5 	bl	8003d40 <RCCEx_PLL3_Config>
 80027d6:	4603      	mov	r3, r0
 80027d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80027dc:	e00a      	b.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80027e4:	e006      	b.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80027e6:	bf00      	nop
 80027e8:	e004      	b.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80027ea:	bf00      	nop
 80027ec:	e002      	b.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80027ee:	bf00      	nop
 80027f0:	e000      	b.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80027f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d10d      	bne.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80027fc:	4b05      	ldr	r3, [pc, #20]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002800:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002808:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800280a:	4a02      	ldr	r2, [pc, #8]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800280c:	430b      	orrs	r3, r1
 800280e:	6513      	str	r3, [r2, #80]	@ 0x50
 8002810:	e006      	b.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002812:	bf00      	nop
 8002814:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002818:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800281c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002828:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800282c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002830:	2300      	movs	r3, #0
 8002832:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002836:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800283a:	460b      	mov	r3, r1
 800283c:	4313      	orrs	r3, r2
 800283e:	d055      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002844:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002848:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800284c:	d033      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800284e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002852:	d82c      	bhi.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002854:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002858:	d02f      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800285a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800285e:	d826      	bhi.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002860:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002864:	d02b      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002866:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800286a:	d820      	bhi.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 800286c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002870:	d012      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002872:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002876:	d81a      	bhi.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002878:	2b00      	cmp	r3, #0
 800287a:	d022      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800287c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002880:	d115      	bne.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002886:	3308      	adds	r3, #8
 8002888:	2101      	movs	r1, #1
 800288a:	4618      	mov	r0, r3
 800288c:	f001 f9a6 	bl	8003bdc <RCCEx_PLL2_Config>
 8002890:	4603      	mov	r3, r0
 8002892:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002896:	e015      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800289c:	3328      	adds	r3, #40	@ 0x28
 800289e:	2101      	movs	r1, #1
 80028a0:	4618      	mov	r0, r3
 80028a2:	f001 fa4d 	bl	8003d40 <RCCEx_PLL3_Config>
 80028a6:	4603      	mov	r3, r0
 80028a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80028ac:	e00a      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80028b4:	e006      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80028b6:	bf00      	nop
 80028b8:	e004      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80028ba:	bf00      	nop
 80028bc:	e002      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80028be:	bf00      	nop
 80028c0:	e000      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80028c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10b      	bne.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80028cc:	4ba3      	ldr	r3, [pc, #652]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80028ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028d0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80028d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80028dc:	4a9f      	ldr	r2, [pc, #636]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80028de:	430b      	orrs	r3, r1
 80028e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80028e2:	e003      	b.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80028e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80028ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80028f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80028fc:	2300      	movs	r3, #0
 80028fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002902:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002906:	460b      	mov	r3, r1
 8002908:	4313      	orrs	r3, r2
 800290a:	d037      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800290c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002912:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002916:	d00e      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002918:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800291c:	d816      	bhi.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800291e:	2b00      	cmp	r3, #0
 8002920:	d018      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002922:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002926:	d111      	bne.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002928:	4b8c      	ldr	r3, [pc, #560]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800292a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800292c:	4a8b      	ldr	r2, [pc, #556]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800292e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002932:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002934:	e00f      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800293a:	3308      	adds	r3, #8
 800293c:	2101      	movs	r1, #1
 800293e:	4618      	mov	r0, r3
 8002940:	f001 f94c 	bl	8003bdc <RCCEx_PLL2_Config>
 8002944:	4603      	mov	r3, r0
 8002946:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800294a:	e004      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002952:	e000      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002954:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002956:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10a      	bne.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800295e:	4b7f      	ldr	r3, [pc, #508]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002960:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002962:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800296a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800296c:	4a7b      	ldr	r2, [pc, #492]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800296e:	430b      	orrs	r3, r1
 8002970:	6513      	str	r3, [r2, #80]	@ 0x50
 8002972:	e003      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002974:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002978:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800297c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002984:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002988:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800298c:	2300      	movs	r3, #0
 800298e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002992:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002996:	460b      	mov	r3, r1
 8002998:	4313      	orrs	r3, r2
 800299a:	d039      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800299c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029a2:	2b03      	cmp	r3, #3
 80029a4:	d81c      	bhi.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80029a6:	a201      	add	r2, pc, #4	@ (adr r2, 80029ac <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80029a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ac:	080029e9 	.word	0x080029e9
 80029b0:	080029bd 	.word	0x080029bd
 80029b4:	080029cb 	.word	0x080029cb
 80029b8:	080029e9 	.word	0x080029e9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029bc:	4b67      	ldr	r3, [pc, #412]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80029be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c0:	4a66      	ldr	r2, [pc, #408]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80029c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80029c8:	e00f      	b.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80029ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029ce:	3308      	adds	r3, #8
 80029d0:	2102      	movs	r1, #2
 80029d2:	4618      	mov	r0, r3
 80029d4:	f001 f902 	bl	8003bdc <RCCEx_PLL2_Config>
 80029d8:	4603      	mov	r3, r0
 80029da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80029de:	e004      	b.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80029e6:	e000      	b.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80029e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10a      	bne.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80029f2:	4b5a      	ldr	r3, [pc, #360]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80029f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029f6:	f023 0103 	bic.w	r1, r3, #3
 80029fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a00:	4a56      	ldr	r2, [pc, #344]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002a02:	430b      	orrs	r3, r1
 8002a04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a06:	e003      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a18:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002a1c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002a20:	2300      	movs	r3, #0
 8002a22:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002a26:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	f000 809f 	beq.w	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a32:	4b4b      	ldr	r3, [pc, #300]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a4a      	ldr	r2, [pc, #296]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002a38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a3e:	f7fe f8bd 	bl	8000bbc <HAL_GetTick>
 8002a42:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a46:	e00b      	b.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a48:	f7fe f8b8 	bl	8000bbc <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b64      	cmp	r3, #100	@ 0x64
 8002a56:	d903      	bls.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002a5e:	e005      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a60:	4b3f      	ldr	r3, [pc, #252]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d0ed      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8002a6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d179      	bne.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002a74:	4b39      	ldr	r3, [pc, #228]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002a76:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a7c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002a80:	4053      	eors	r3, r2
 8002a82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d015      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a8a:	4b34      	ldr	r3, [pc, #208]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a92:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a96:	4b31      	ldr	r3, [pc, #196]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a9a:	4a30      	ldr	r2, [pc, #192]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002a9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aa0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002aa2:	4b2e      	ldr	r3, [pc, #184]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa6:	4a2d      	ldr	r2, [pc, #180]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002aa8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aac:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002aae:	4a2b      	ldr	r2, [pc, #172]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ab0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ab4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002abe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ac2:	d118      	bne.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac4:	f7fe f87a 	bl	8000bbc <HAL_GetTick>
 8002ac8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002acc:	e00d      	b.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ace:	f7fe f875 	bl	8000bbc <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002ad8:	1ad2      	subs	r2, r2, r3
 8002ada:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d903      	bls.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8002ae8:	e005      	b.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002aea:	4b1c      	ldr	r3, [pc, #112]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d0eb      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8002af6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d129      	bne.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b02:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002b06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b0e:	d10e      	bne.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8002b10:	4b12      	ldr	r3, [pc, #72]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002b20:	091a      	lsrs	r2, r3, #4
 8002b22:	4b10      	ldr	r3, [pc, #64]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002b24:	4013      	ands	r3, r2
 8002b26:	4a0d      	ldr	r2, [pc, #52]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b28:	430b      	orrs	r3, r1
 8002b2a:	6113      	str	r3, [r2, #16]
 8002b2c:	e005      	b.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8002b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	4a0a      	ldr	r2, [pc, #40]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b34:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002b38:	6113      	str	r3, [r2, #16]
 8002b3a:	4b08      	ldr	r3, [pc, #32]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b3c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b42:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002b46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b4a:	4a04      	ldr	r2, [pc, #16]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b4c:	430b      	orrs	r3, r1
 8002b4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b50:	e00e      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8002b5a:	e009      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8002b5c:	58024400 	.word	0x58024400
 8002b60:	58024800 	.word	0x58024800
 8002b64:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b78:	f002 0301 	and.w	r3, r2, #1
 8002b7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002b80:	2300      	movs	r3, #0
 8002b82:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002b86:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	f000 8089 	beq.w	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b98:	2b28      	cmp	r3, #40	@ 0x28
 8002b9a:	d86b      	bhi.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8002b9c:	a201      	add	r2, pc, #4	@ (adr r2, 8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba2:	bf00      	nop
 8002ba4:	08002c7d 	.word	0x08002c7d
 8002ba8:	08002c75 	.word	0x08002c75
 8002bac:	08002c75 	.word	0x08002c75
 8002bb0:	08002c75 	.word	0x08002c75
 8002bb4:	08002c75 	.word	0x08002c75
 8002bb8:	08002c75 	.word	0x08002c75
 8002bbc:	08002c75 	.word	0x08002c75
 8002bc0:	08002c75 	.word	0x08002c75
 8002bc4:	08002c49 	.word	0x08002c49
 8002bc8:	08002c75 	.word	0x08002c75
 8002bcc:	08002c75 	.word	0x08002c75
 8002bd0:	08002c75 	.word	0x08002c75
 8002bd4:	08002c75 	.word	0x08002c75
 8002bd8:	08002c75 	.word	0x08002c75
 8002bdc:	08002c75 	.word	0x08002c75
 8002be0:	08002c75 	.word	0x08002c75
 8002be4:	08002c5f 	.word	0x08002c5f
 8002be8:	08002c75 	.word	0x08002c75
 8002bec:	08002c75 	.word	0x08002c75
 8002bf0:	08002c75 	.word	0x08002c75
 8002bf4:	08002c75 	.word	0x08002c75
 8002bf8:	08002c75 	.word	0x08002c75
 8002bfc:	08002c75 	.word	0x08002c75
 8002c00:	08002c75 	.word	0x08002c75
 8002c04:	08002c7d 	.word	0x08002c7d
 8002c08:	08002c75 	.word	0x08002c75
 8002c0c:	08002c75 	.word	0x08002c75
 8002c10:	08002c75 	.word	0x08002c75
 8002c14:	08002c75 	.word	0x08002c75
 8002c18:	08002c75 	.word	0x08002c75
 8002c1c:	08002c75 	.word	0x08002c75
 8002c20:	08002c75 	.word	0x08002c75
 8002c24:	08002c7d 	.word	0x08002c7d
 8002c28:	08002c75 	.word	0x08002c75
 8002c2c:	08002c75 	.word	0x08002c75
 8002c30:	08002c75 	.word	0x08002c75
 8002c34:	08002c75 	.word	0x08002c75
 8002c38:	08002c75 	.word	0x08002c75
 8002c3c:	08002c75 	.word	0x08002c75
 8002c40:	08002c75 	.word	0x08002c75
 8002c44:	08002c7d 	.word	0x08002c7d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c4c:	3308      	adds	r3, #8
 8002c4e:	2101      	movs	r1, #1
 8002c50:	4618      	mov	r0, r3
 8002c52:	f000 ffc3 	bl	8003bdc <RCCEx_PLL2_Config>
 8002c56:	4603      	mov	r3, r0
 8002c58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002c5c:	e00f      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c62:	3328      	adds	r3, #40	@ 0x28
 8002c64:	2101      	movs	r1, #1
 8002c66:	4618      	mov	r0, r3
 8002c68:	f001 f86a 	bl	8003d40 <RCCEx_PLL3_Config>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002c72:	e004      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c7a:	e000      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8002c7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10a      	bne.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002c86:	4bbf      	ldr	r3, [pc, #764]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002c88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c8a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c94:	4abb      	ldr	r2, [pc, #748]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002c96:	430b      	orrs	r3, r1
 8002c98:	6553      	str	r3, [r2, #84]	@ 0x54
 8002c9a:	e003      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ca0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cac:	f002 0302 	and.w	r3, r2, #2
 8002cb0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002cba:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	d041      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002cca:	2b05      	cmp	r3, #5
 8002ccc:	d824      	bhi.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8002cce:	a201      	add	r2, pc, #4	@ (adr r2, 8002cd4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8002cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd4:	08002d21 	.word	0x08002d21
 8002cd8:	08002ced 	.word	0x08002ced
 8002cdc:	08002d03 	.word	0x08002d03
 8002ce0:	08002d21 	.word	0x08002d21
 8002ce4:	08002d21 	.word	0x08002d21
 8002ce8:	08002d21 	.word	0x08002d21
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cf0:	3308      	adds	r3, #8
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f000 ff71 	bl	8003bdc <RCCEx_PLL2_Config>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002d00:	e00f      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d06:	3328      	adds	r3, #40	@ 0x28
 8002d08:	2101      	movs	r1, #1
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f001 f818 	bl	8003d40 <RCCEx_PLL3_Config>
 8002d10:	4603      	mov	r3, r0
 8002d12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002d16:	e004      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d1e:	e000      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8002d20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10a      	bne.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002d2a:	4b96      	ldr	r3, [pc, #600]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d2e:	f023 0107 	bic.w	r1, r3, #7
 8002d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d36:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d38:	4a92      	ldr	r2, [pc, #584]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002d3a:	430b      	orrs	r3, r1
 8002d3c:	6553      	str	r3, [r2, #84]	@ 0x54
 8002d3e:	e003      	b.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d50:	f002 0304 	and.w	r3, r2, #4
 8002d54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002d58:	2300      	movs	r3, #0
 8002d5a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d5e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8002d62:	460b      	mov	r3, r1
 8002d64:	4313      	orrs	r3, r2
 8002d66:	d044      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d70:	2b05      	cmp	r3, #5
 8002d72:	d825      	bhi.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8002d74:	a201      	add	r2, pc, #4	@ (adr r2, 8002d7c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8002d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7a:	bf00      	nop
 8002d7c:	08002dc9 	.word	0x08002dc9
 8002d80:	08002d95 	.word	0x08002d95
 8002d84:	08002dab 	.word	0x08002dab
 8002d88:	08002dc9 	.word	0x08002dc9
 8002d8c:	08002dc9 	.word	0x08002dc9
 8002d90:	08002dc9 	.word	0x08002dc9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d98:	3308      	adds	r3, #8
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f000 ff1d 	bl	8003bdc <RCCEx_PLL2_Config>
 8002da2:	4603      	mov	r3, r0
 8002da4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002da8:	e00f      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dae:	3328      	adds	r3, #40	@ 0x28
 8002db0:	2101      	movs	r1, #1
 8002db2:	4618      	mov	r0, r3
 8002db4:	f000 ffc4 	bl	8003d40 <RCCEx_PLL3_Config>
 8002db8:	4603      	mov	r3, r0
 8002dba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002dbe:	e004      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002dc6:	e000      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8002dc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10b      	bne.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002dd2:	4b6c      	ldr	r3, [pc, #432]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dd6:	f023 0107 	bic.w	r1, r3, #7
 8002dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002de2:	4a68      	ldr	r2, [pc, #416]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002de4:	430b      	orrs	r3, r1
 8002de6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002de8:	e003      	b.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002dee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfa:	f002 0320 	and.w	r3, r2, #32
 8002dfe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002e02:	2300      	movs	r3, #0
 8002e04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002e08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	d055      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8002e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e1e:	d033      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8002e20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e24:	d82c      	bhi.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002e26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e2a:	d02f      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8002e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e30:	d826      	bhi.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002e32:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002e36:	d02b      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8002e38:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002e3c:	d820      	bhi.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002e3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e42:	d012      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8002e44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e48:	d81a      	bhi.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d022      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8002e4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e52:	d115      	bne.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e58:	3308      	adds	r3, #8
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f000 febd 	bl	8003bdc <RCCEx_PLL2_Config>
 8002e62:	4603      	mov	r3, r0
 8002e64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002e68:	e015      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e6e:	3328      	adds	r3, #40	@ 0x28
 8002e70:	2102      	movs	r1, #2
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 ff64 	bl	8003d40 <RCCEx_PLL3_Config>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002e7e:	e00a      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e86:	e006      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002e88:	bf00      	nop
 8002e8a:	e004      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002e8c:	bf00      	nop
 8002e8e:	e002      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002e90:	bf00      	nop
 8002e92:	e000      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002e94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d10b      	bne.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e9e:	4b39      	ldr	r3, [pc, #228]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ea2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eae:	4a35      	ldr	r2, [pc, #212]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002eb0:	430b      	orrs	r3, r1
 8002eb2:	6553      	str	r3, [r2, #84]	@ 0x54
 8002eb4:	e003      	b.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002eba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8002eca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002ece:	2300      	movs	r3, #0
 8002ed0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002ed4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	4313      	orrs	r3, r2
 8002edc:	d058      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8002ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ee2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002ee6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8002eea:	d033      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8002eec:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8002ef0:	d82c      	bhi.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002ef2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ef6:	d02f      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8002ef8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002efc:	d826      	bhi.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002efe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002f02:	d02b      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8002f04:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002f08:	d820      	bhi.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002f0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f0e:	d012      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8002f10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f14:	d81a      	bhi.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d022      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8002f1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f1e:	d115      	bne.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f24:	3308      	adds	r3, #8
 8002f26:	2100      	movs	r1, #0
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f000 fe57 	bl	8003bdc <RCCEx_PLL2_Config>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002f34:	e015      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f3a:	3328      	adds	r3, #40	@ 0x28
 8002f3c:	2102      	movs	r1, #2
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 fefe 	bl	8003d40 <RCCEx_PLL3_Config>
 8002f44:	4603      	mov	r3, r0
 8002f46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002f4a:	e00a      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f52:	e006      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002f54:	bf00      	nop
 8002f56:	e004      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002f58:	bf00      	nop
 8002f5a:	e002      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002f5c:	bf00      	nop
 8002f5e:	e000      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002f60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10e      	bne.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f6a:	4b06      	ldr	r3, [pc, #24]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f6e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8002f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f76:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002f7a:	4a02      	ldr	r2, [pc, #8]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002f7c:	430b      	orrs	r3, r1
 8002f7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f80:	e006      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8002f82:	bf00      	nop
 8002f84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f98:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8002f9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002fa6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8002faa:	460b      	mov	r3, r1
 8002fac:	4313      	orrs	r3, r2
 8002fae:	d055      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8002fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fb4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002fb8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8002fbc:	d033      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8002fbe:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8002fc2:	d82c      	bhi.n	800301e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002fc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fc8:	d02f      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8002fca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fce:	d826      	bhi.n	800301e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002fd0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8002fd4:	d02b      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8002fd6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8002fda:	d820      	bhi.n	800301e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002fdc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002fe0:	d012      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8002fe2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002fe6:	d81a      	bhi.n	800301e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d022      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8002fec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ff0:	d115      	bne.n	800301e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ff6:	3308      	adds	r3, #8
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f000 fdee 	bl	8003bdc <RCCEx_PLL2_Config>
 8003000:	4603      	mov	r3, r0
 8003002:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003006:	e015      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800300c:	3328      	adds	r3, #40	@ 0x28
 800300e:	2102      	movs	r1, #2
 8003010:	4618      	mov	r0, r3
 8003012:	f000 fe95 	bl	8003d40 <RCCEx_PLL3_Config>
 8003016:	4603      	mov	r3, r0
 8003018:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800301c:	e00a      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003024:	e006      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003026:	bf00      	nop
 8003028:	e004      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800302a:	bf00      	nop
 800302c:	e002      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800302e:	bf00      	nop
 8003030:	e000      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003032:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003034:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003038:	2b00      	cmp	r3, #0
 800303a:	d10b      	bne.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800303c:	4ba1      	ldr	r3, [pc, #644]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800303e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003040:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003048:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800304c:	4a9d      	ldr	r2, [pc, #628]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800304e:	430b      	orrs	r3, r1
 8003050:	6593      	str	r3, [r2, #88]	@ 0x58
 8003052:	e003      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003054:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003058:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800305c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003064:	f002 0308 	and.w	r3, r2, #8
 8003068:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800306c:	2300      	movs	r3, #0
 800306e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003072:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003076:	460b      	mov	r3, r1
 8003078:	4313      	orrs	r3, r2
 800307a:	d01e      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800307c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003080:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003084:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003088:	d10c      	bne.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800308a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800308e:	3328      	adds	r3, #40	@ 0x28
 8003090:	2102      	movs	r1, #2
 8003092:	4618      	mov	r0, r3
 8003094:	f000 fe54 	bl	8003d40 <RCCEx_PLL3_Config>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d002      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80030a4:	4b87      	ldr	r3, [pc, #540]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80030a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030a8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80030ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030b4:	4a83      	ldr	r2, [pc, #524]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80030b6:	430b      	orrs	r3, r1
 80030b8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80030ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c2:	f002 0310 	and.w	r3, r2, #16
 80030c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80030ca:	2300      	movs	r3, #0
 80030cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80030d0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80030d4:	460b      	mov	r3, r1
 80030d6:	4313      	orrs	r3, r2
 80030d8:	d01e      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80030da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80030e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030e6:	d10c      	bne.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80030e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030ec:	3328      	adds	r3, #40	@ 0x28
 80030ee:	2102      	movs	r1, #2
 80030f0:	4618      	mov	r0, r3
 80030f2:	f000 fe25 	bl	8003d40 <RCCEx_PLL3_Config>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d002      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003102:	4b70      	ldr	r3, [pc, #448]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003106:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800310a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800310e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003112:	4a6c      	ldr	r2, [pc, #432]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003114:	430b      	orrs	r3, r1
 8003116:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003118:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800311c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003120:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003124:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003128:	2300      	movs	r3, #0
 800312a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800312e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003132:	460b      	mov	r3, r1
 8003134:	4313      	orrs	r3, r2
 8003136:	d03e      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800313c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003140:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003144:	d022      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003146:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800314a:	d81b      	bhi.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003150:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003154:	d00b      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003156:	e015      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800315c:	3308      	adds	r3, #8
 800315e:	2100      	movs	r1, #0
 8003160:	4618      	mov	r0, r3
 8003162:	f000 fd3b 	bl	8003bdc <RCCEx_PLL2_Config>
 8003166:	4603      	mov	r3, r0
 8003168:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800316c:	e00f      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800316e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003172:	3328      	adds	r3, #40	@ 0x28
 8003174:	2102      	movs	r1, #2
 8003176:	4618      	mov	r0, r3
 8003178:	f000 fde2 	bl	8003d40 <RCCEx_PLL3_Config>
 800317c:	4603      	mov	r3, r0
 800317e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003182:	e004      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800318a:	e000      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800318c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800318e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10b      	bne.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003196:	4b4b      	ldr	r3, [pc, #300]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800319a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800319e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80031a6:	4a47      	ldr	r2, [pc, #284]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80031a8:	430b      	orrs	r3, r1
 80031aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80031ac:	e003      	b.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80031b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031be:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80031c2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80031c4:	2300      	movs	r3, #0
 80031c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80031c8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80031cc:	460b      	mov	r3, r1
 80031ce:	4313      	orrs	r3, r2
 80031d0:	d03b      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80031d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031da:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80031de:	d01f      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80031e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80031e4:	d818      	bhi.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80031e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031ea:	d003      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80031ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80031f0:	d007      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80031f2:	e011      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031f4:	4b33      	ldr	r3, [pc, #204]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80031f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f8:	4a32      	ldr	r2, [pc, #200]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80031fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003200:	e00f      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003206:	3328      	adds	r3, #40	@ 0x28
 8003208:	2101      	movs	r1, #1
 800320a:	4618      	mov	r0, r3
 800320c:	f000 fd98 	bl	8003d40 <RCCEx_PLL3_Config>
 8003210:	4603      	mov	r3, r0
 8003212:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003216:	e004      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800321e:	e000      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003220:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003222:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10b      	bne.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800322a:	4b26      	ldr	r3, [pc, #152]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800322c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800322e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003236:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800323a:	4a22      	ldr	r2, [pc, #136]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800323c:	430b      	orrs	r3, r1
 800323e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003240:	e003      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003242:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003246:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800324a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800324e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003252:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003256:	673b      	str	r3, [r7, #112]	@ 0x70
 8003258:	2300      	movs	r3, #0
 800325a:	677b      	str	r3, [r7, #116]	@ 0x74
 800325c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003260:	460b      	mov	r3, r1
 8003262:	4313      	orrs	r3, r2
 8003264:	d034      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800326a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800326c:	2b00      	cmp	r3, #0
 800326e:	d003      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003270:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003274:	d007      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003276:	e011      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003278:	4b12      	ldr	r3, [pc, #72]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800327a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800327c:	4a11      	ldr	r2, [pc, #68]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800327e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003282:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003284:	e00e      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800328a:	3308      	adds	r3, #8
 800328c:	2102      	movs	r1, #2
 800328e:	4618      	mov	r0, r3
 8003290:	f000 fca4 	bl	8003bdc <RCCEx_PLL2_Config>
 8003294:	4603      	mov	r3, r0
 8003296:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800329a:	e003      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d10d      	bne.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80032ac:	4b05      	ldr	r3, [pc, #20]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80032ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032b0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80032b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032ba:	4a02      	ldr	r2, [pc, #8]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80032bc:	430b      	orrs	r3, r1
 80032be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032c0:	e006      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80032c2:	bf00      	nop
 80032c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80032d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80032dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80032de:	2300      	movs	r3, #0
 80032e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80032e2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80032e6:	460b      	mov	r3, r1
 80032e8:	4313      	orrs	r3, r2
 80032ea:	d00c      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80032ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032f0:	3328      	adds	r3, #40	@ 0x28
 80032f2:	2102      	movs	r1, #2
 80032f4:	4618      	mov	r0, r3
 80032f6:	f000 fd23 	bl	8003d40 <RCCEx_PLL3_Config>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d002      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800330a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003312:	663b      	str	r3, [r7, #96]	@ 0x60
 8003314:	2300      	movs	r3, #0
 8003316:	667b      	str	r3, [r7, #100]	@ 0x64
 8003318:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800331c:	460b      	mov	r3, r1
 800331e:	4313      	orrs	r3, r2
 8003320:	d038      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003326:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800332a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800332e:	d018      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003330:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003334:	d811      	bhi.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003336:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800333a:	d014      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800333c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003340:	d80b      	bhi.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003342:	2b00      	cmp	r3, #0
 8003344:	d011      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003346:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800334a:	d106      	bne.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800334c:	4bc3      	ldr	r3, [pc, #780]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800334e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003350:	4ac2      	ldr	r2, [pc, #776]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003352:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003356:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003358:	e008      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003360:	e004      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003362:	bf00      	nop
 8003364:	e002      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003366:	bf00      	nop
 8003368:	e000      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800336a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800336c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003370:	2b00      	cmp	r3, #0
 8003372:	d10b      	bne.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003374:	4bb9      	ldr	r3, [pc, #740]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003378:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800337c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003380:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003384:	4ab5      	ldr	r2, [pc, #724]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003386:	430b      	orrs	r3, r1
 8003388:	6553      	str	r3, [r2, #84]	@ 0x54
 800338a:	e003      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800338c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003390:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80033a0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80033a2:	2300      	movs	r3, #0
 80033a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80033a6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80033aa:	460b      	mov	r3, r1
 80033ac:	4313      	orrs	r3, r2
 80033ae:	d009      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80033b0:	4baa      	ldr	r3, [pc, #680]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80033b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033b4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80033b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033be:	4aa7      	ldr	r2, [pc, #668]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80033c0:	430b      	orrs	r3, r1
 80033c2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80033c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033cc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80033d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80033d2:	2300      	movs	r3, #0
 80033d4:	657b      	str	r3, [r7, #84]	@ 0x54
 80033d6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80033da:	460b      	mov	r3, r1
 80033dc:	4313      	orrs	r3, r2
 80033de:	d00a      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80033e0:	4b9e      	ldr	r3, [pc, #632]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80033e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80033f0:	4a9a      	ldr	r2, [pc, #616]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80033f2:	430b      	orrs	r3, r1
 80033f4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80033f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033fe:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003402:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003404:	2300      	movs	r3, #0
 8003406:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003408:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800340c:	460b      	mov	r3, r1
 800340e:	4313      	orrs	r3, r2
 8003410:	d009      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003412:	4b92      	ldr	r3, [pc, #584]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003414:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003416:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800341a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800341e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003420:	4a8e      	ldr	r2, [pc, #568]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003422:	430b      	orrs	r3, r1
 8003424:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800342a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003432:	643b      	str	r3, [r7, #64]	@ 0x40
 8003434:	2300      	movs	r3, #0
 8003436:	647b      	str	r3, [r7, #68]	@ 0x44
 8003438:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800343c:	460b      	mov	r3, r1
 800343e:	4313      	orrs	r3, r2
 8003440:	d00e      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003442:	4b86      	ldr	r3, [pc, #536]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	4a85      	ldr	r2, [pc, #532]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003448:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800344c:	6113      	str	r3, [r2, #16]
 800344e:	4b83      	ldr	r3, [pc, #524]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003450:	6919      	ldr	r1, [r3, #16]
 8003452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003456:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800345a:	4a80      	ldr	r2, [pc, #512]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800345c:	430b      	orrs	r3, r1
 800345e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003468:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800346c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800346e:	2300      	movs	r3, #0
 8003470:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003472:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003476:	460b      	mov	r3, r1
 8003478:	4313      	orrs	r3, r2
 800347a:	d009      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800347c:	4b77      	ldr	r3, [pc, #476]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800347e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003480:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003488:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800348a:	4a74      	ldr	r2, [pc, #464]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800348c:	430b      	orrs	r3, r1
 800348e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003498:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800349c:	633b      	str	r3, [r7, #48]	@ 0x30
 800349e:	2300      	movs	r3, #0
 80034a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80034a2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80034a6:	460b      	mov	r3, r1
 80034a8:	4313      	orrs	r3, r2
 80034aa:	d00a      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80034ac:	4b6b      	ldr	r3, [pc, #428]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80034ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034b0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80034b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80034bc:	4a67      	ldr	r2, [pc, #412]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80034be:	430b      	orrs	r3, r1
 80034c0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80034c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ca:	2100      	movs	r1, #0
 80034cc:	62b9      	str	r1, [r7, #40]	@ 0x28
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034d4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80034d8:	460b      	mov	r3, r1
 80034da:	4313      	orrs	r3, r2
 80034dc:	d011      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034e2:	3308      	adds	r3, #8
 80034e4:	2100      	movs	r1, #0
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 fb78 	bl	8003bdc <RCCEx_PLL2_Config>
 80034ec:	4603      	mov	r3, r0
 80034ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80034f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350a:	2100      	movs	r1, #0
 800350c:	6239      	str	r1, [r7, #32]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	627b      	str	r3, [r7, #36]	@ 0x24
 8003514:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003518:	460b      	mov	r3, r1
 800351a:	4313      	orrs	r3, r2
 800351c:	d011      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800351e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003522:	3308      	adds	r3, #8
 8003524:	2101      	movs	r1, #1
 8003526:	4618      	mov	r0, r3
 8003528:	f000 fb58 	bl	8003bdc <RCCEx_PLL2_Config>
 800352c:	4603      	mov	r3, r0
 800352e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003532:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800353a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800353e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354a:	2100      	movs	r1, #0
 800354c:	61b9      	str	r1, [r7, #24]
 800354e:	f003 0304 	and.w	r3, r3, #4
 8003552:	61fb      	str	r3, [r7, #28]
 8003554:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003558:	460b      	mov	r3, r1
 800355a:	4313      	orrs	r3, r2
 800355c:	d011      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800355e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003562:	3308      	adds	r3, #8
 8003564:	2102      	movs	r1, #2
 8003566:	4618      	mov	r0, r3
 8003568:	f000 fb38 	bl	8003bdc <RCCEx_PLL2_Config>
 800356c:	4603      	mov	r3, r0
 800356e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003572:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800357a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800357e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800358a:	2100      	movs	r1, #0
 800358c:	6139      	str	r1, [r7, #16]
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	617b      	str	r3, [r7, #20]
 8003594:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003598:	460b      	mov	r3, r1
 800359a:	4313      	orrs	r3, r2
 800359c:	d011      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800359e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035a2:	3328      	adds	r3, #40	@ 0x28
 80035a4:	2100      	movs	r1, #0
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 fbca 	bl	8003d40 <RCCEx_PLL3_Config>
 80035ac:	4603      	mov	r3, r0
 80035ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80035b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80035c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ca:	2100      	movs	r1, #0
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	f003 0310 	and.w	r3, r3, #16
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80035d8:	460b      	mov	r3, r1
 80035da:	4313      	orrs	r3, r2
 80035dc:	d011      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80035de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035e2:	3328      	adds	r3, #40	@ 0x28
 80035e4:	2101      	movs	r1, #1
 80035e6:	4618      	mov	r0, r3
 80035e8:	f000 fbaa 	bl	8003d40 <RCCEx_PLL3_Config>
 80035ec:	4603      	mov	r3, r0
 80035ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80035f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360a:	2100      	movs	r1, #0
 800360c:	6039      	str	r1, [r7, #0]
 800360e:	f003 0320 	and.w	r3, r3, #32
 8003612:	607b      	str	r3, [r7, #4]
 8003614:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003618:	460b      	mov	r3, r1
 800361a:	4313      	orrs	r3, r2
 800361c:	d011      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800361e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003622:	3328      	adds	r3, #40	@ 0x28
 8003624:	2102      	movs	r1, #2
 8003626:	4618      	mov	r0, r3
 8003628:	f000 fb8a 	bl	8003d40 <RCCEx_PLL3_Config>
 800362c:	4603      	mov	r3, r0
 800362e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003632:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800363a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800363e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003642:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800364a:	2300      	movs	r3, #0
 800364c:	e000      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
}
 8003650:	4618      	mov	r0, r3
 8003652:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8003656:	46bd      	mov	sp, r7
 8003658:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800365c:	58024400 	.word	0x58024400

08003660 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003664:	f7fe fd96 	bl	8002194 <HAL_RCC_GetHCLKFreq>
 8003668:	4602      	mov	r2, r0
 800366a:	4b06      	ldr	r3, [pc, #24]	@ (8003684 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	091b      	lsrs	r3, r3, #4
 8003670:	f003 0307 	and.w	r3, r3, #7
 8003674:	4904      	ldr	r1, [pc, #16]	@ (8003688 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003676:	5ccb      	ldrb	r3, [r1, r3]
 8003678:	f003 031f 	and.w	r3, r3, #31
 800367c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003680:	4618      	mov	r0, r3
 8003682:	bd80      	pop	{r7, pc}
 8003684:	58024400 	.word	0x58024400
 8003688:	080050c0 	.word	0x080050c0

0800368c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800368c:	b480      	push	{r7}
 800368e:	b089      	sub	sp, #36	@ 0x24
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003694:	4ba1      	ldr	r3, [pc, #644]	@ (800391c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003698:	f003 0303 	and.w	r3, r3, #3
 800369c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800369e:	4b9f      	ldr	r3, [pc, #636]	@ (800391c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036a2:	0b1b      	lsrs	r3, r3, #12
 80036a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80036a8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80036aa:	4b9c      	ldr	r3, [pc, #624]	@ (800391c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ae:	091b      	lsrs	r3, r3, #4
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80036b6:	4b99      	ldr	r3, [pc, #612]	@ (800391c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ba:	08db      	lsrs	r3, r3, #3
 80036bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	fb02 f303 	mul.w	r3, r2, r3
 80036c6:	ee07 3a90 	vmov	s15, r3
 80036ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f000 8111 	beq.w	80038fc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	2b02      	cmp	r3, #2
 80036de:	f000 8083 	beq.w	80037e8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	f200 80a1 	bhi.w	800382c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d003      	beq.n	80036f8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d056      	beq.n	80037a4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80036f6:	e099      	b.n	800382c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036f8:	4b88      	ldr	r3, [pc, #544]	@ (800391c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0320 	and.w	r3, r3, #32
 8003700:	2b00      	cmp	r3, #0
 8003702:	d02d      	beq.n	8003760 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003704:	4b85      	ldr	r3, [pc, #532]	@ (800391c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	08db      	lsrs	r3, r3, #3
 800370a:	f003 0303 	and.w	r3, r3, #3
 800370e:	4a84      	ldr	r2, [pc, #528]	@ (8003920 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003710:	fa22 f303 	lsr.w	r3, r2, r3
 8003714:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	ee07 3a90 	vmov	s15, r3
 800371c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	ee07 3a90 	vmov	s15, r3
 8003726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800372a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800372e:	4b7b      	ldr	r3, [pc, #492]	@ (800391c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003736:	ee07 3a90 	vmov	s15, r3
 800373a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800373e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003742:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003924 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800374a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800374e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800375a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800375e:	e087      	b.n	8003870 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	ee07 3a90 	vmov	s15, r3
 8003766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800376a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003928 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800376e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003772:	4b6a      	ldr	r3, [pc, #424]	@ (800391c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800377a:	ee07 3a90 	vmov	s15, r3
 800377e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003782:	ed97 6a03 	vldr	s12, [r7, #12]
 8003786:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003924 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800378a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800378e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003792:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800379a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800379e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80037a2:	e065      	b.n	8003870 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	ee07 3a90 	vmov	s15, r3
 80037aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ae:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800392c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80037b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037b6:	4b59      	ldr	r3, [pc, #356]	@ (800391c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037be:	ee07 3a90 	vmov	s15, r3
 80037c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80037ca:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003924 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80037ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80037da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80037e6:	e043      	b.n	8003870 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	ee07 3a90 	vmov	s15, r3
 80037ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037f2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003930 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80037f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037fa:	4b48      	ldr	r3, [pc, #288]	@ (800391c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003802:	ee07 3a90 	vmov	s15, r3
 8003806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800380a:	ed97 6a03 	vldr	s12, [r7, #12]
 800380e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003924 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800381a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800381e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003826:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800382a:	e021      	b.n	8003870 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	ee07 3a90 	vmov	s15, r3
 8003832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003836:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800392c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800383a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800383e:	4b37      	ldr	r3, [pc, #220]	@ (800391c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003846:	ee07 3a90 	vmov	s15, r3
 800384a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800384e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003852:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003924 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800385a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800385e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800386a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800386e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003870:	4b2a      	ldr	r3, [pc, #168]	@ (800391c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003874:	0a5b      	lsrs	r3, r3, #9
 8003876:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800387a:	ee07 3a90 	vmov	s15, r3
 800387e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003882:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003886:	ee37 7a87 	vadd.f32	s14, s15, s14
 800388a:	edd7 6a07 	vldr	s13, [r7, #28]
 800388e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003892:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003896:	ee17 2a90 	vmov	r2, s15
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800389e:	4b1f      	ldr	r3, [pc, #124]	@ (800391c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038a2:	0c1b      	lsrs	r3, r3, #16
 80038a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038a8:	ee07 3a90 	vmov	s15, r3
 80038ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80038b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80038b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80038bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038c4:	ee17 2a90 	vmov	r2, s15
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80038cc:	4b13      	ldr	r3, [pc, #76]	@ (800391c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038d0:	0e1b      	lsrs	r3, r3, #24
 80038d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038d6:	ee07 3a90 	vmov	s15, r3
 80038da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80038e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80038e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80038ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038f2:	ee17 2a90 	vmov	r2, s15
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80038fa:	e008      	b.n	800390e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	609a      	str	r2, [r3, #8]
}
 800390e:	bf00      	nop
 8003910:	3724      	adds	r7, #36	@ 0x24
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	58024400 	.word	0x58024400
 8003920:	03d09000 	.word	0x03d09000
 8003924:	46000000 	.word	0x46000000
 8003928:	4c742400 	.word	0x4c742400
 800392c:	4a742400 	.word	0x4a742400
 8003930:	4bbebc20 	.word	0x4bbebc20

08003934 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003934:	b480      	push	{r7}
 8003936:	b089      	sub	sp, #36	@ 0x24
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800393c:	4ba1      	ldr	r3, [pc, #644]	@ (8003bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800393e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003940:	f003 0303 	and.w	r3, r3, #3
 8003944:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003946:	4b9f      	ldr	r3, [pc, #636]	@ (8003bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800394a:	0d1b      	lsrs	r3, r3, #20
 800394c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003950:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003952:	4b9c      	ldr	r3, [pc, #624]	@ (8003bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003956:	0a1b      	lsrs	r3, r3, #8
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800395e:	4b99      	ldr	r3, [pc, #612]	@ (8003bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003962:	08db      	lsrs	r3, r3, #3
 8003964:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	fb02 f303 	mul.w	r3, r2, r3
 800396e:	ee07 3a90 	vmov	s15, r3
 8003972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003976:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2b00      	cmp	r3, #0
 800397e:	f000 8111 	beq.w	8003ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	2b02      	cmp	r3, #2
 8003986:	f000 8083 	beq.w	8003a90 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	2b02      	cmp	r3, #2
 800398e:	f200 80a1 	bhi.w	8003ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d003      	beq.n	80039a0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d056      	beq.n	8003a4c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800399e:	e099      	b.n	8003ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80039a0:	4b88      	ldr	r3, [pc, #544]	@ (8003bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0320 	and.w	r3, r3, #32
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d02d      	beq.n	8003a08 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80039ac:	4b85      	ldr	r3, [pc, #532]	@ (8003bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	08db      	lsrs	r3, r3, #3
 80039b2:	f003 0303 	and.w	r3, r3, #3
 80039b6:	4a84      	ldr	r2, [pc, #528]	@ (8003bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80039b8:	fa22 f303 	lsr.w	r3, r2, r3
 80039bc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	ee07 3a90 	vmov	s15, r3
 80039c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	ee07 3a90 	vmov	s15, r3
 80039ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039d6:	4b7b      	ldr	r3, [pc, #492]	@ (8003bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039de:	ee07 3a90 	vmov	s15, r3
 80039e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80039ea:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003bcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80039ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a02:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003a06:	e087      	b.n	8003b18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	ee07 3a90 	vmov	s15, r3
 8003a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a12:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a1a:	4b6a      	ldr	r3, [pc, #424]	@ (8003bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a22:	ee07 3a90 	vmov	s15, r3
 8003a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a2e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003bcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a4a:	e065      	b.n	8003b18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	ee07 3a90 	vmov	s15, r3
 8003a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a56:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a5e:	4b59      	ldr	r3, [pc, #356]	@ (8003bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a66:	ee07 3a90 	vmov	s15, r3
 8003a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a72:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003bcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003a76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a8e:	e043      	b.n	8003b18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	ee07 3a90 	vmov	s15, r3
 8003a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a9a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003a9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aa2:	4b48      	ldr	r3, [pc, #288]	@ (8003bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aaa:	ee07 3a90 	vmov	s15, r3
 8003aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ab2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ab6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003bcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003aba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003abe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ac2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ace:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ad2:	e021      	b.n	8003b18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	ee07 3a90 	vmov	s15, r3
 8003ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ade:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ae6:	4b37      	ldr	r3, [pc, #220]	@ (8003bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aee:	ee07 3a90 	vmov	s15, r3
 8003af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003af6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003afa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003bcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003afe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b16:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003b18:	4b2a      	ldr	r3, [pc, #168]	@ (8003bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b1c:	0a5b      	lsrs	r3, r3, #9
 8003b1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b22:	ee07 3a90 	vmov	s15, r3
 8003b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003b2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b32:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b3e:	ee17 2a90 	vmov	r2, s15
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003b46:	4b1f      	ldr	r3, [pc, #124]	@ (8003bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4a:	0c1b      	lsrs	r3, r3, #16
 8003b4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b50:	ee07 3a90 	vmov	s15, r3
 8003b54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b58:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003b5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b60:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b6c:	ee17 2a90 	vmov	r2, s15
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003b74:	4b13      	ldr	r3, [pc, #76]	@ (8003bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b78:	0e1b      	lsrs	r3, r3, #24
 8003b7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b7e:	ee07 3a90 	vmov	s15, r3
 8003b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003b8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b9a:	ee17 2a90 	vmov	r2, s15
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	609a      	str	r2, [r3, #8]
}
 8003bb6:	bf00      	nop
 8003bb8:	3724      	adds	r7, #36	@ 0x24
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	58024400 	.word	0x58024400
 8003bc8:	03d09000 	.word	0x03d09000
 8003bcc:	46000000 	.word	0x46000000
 8003bd0:	4c742400 	.word	0x4c742400
 8003bd4:	4a742400 	.word	0x4a742400
 8003bd8:	4bbebc20 	.word	0x4bbebc20

08003bdc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003be6:	2300      	movs	r3, #0
 8003be8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003bea:	4b53      	ldr	r3, [pc, #332]	@ (8003d38 <RCCEx_PLL2_Config+0x15c>)
 8003bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bee:	f003 0303 	and.w	r3, r3, #3
 8003bf2:	2b03      	cmp	r3, #3
 8003bf4:	d101      	bne.n	8003bfa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e099      	b.n	8003d2e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003bfa:	4b4f      	ldr	r3, [pc, #316]	@ (8003d38 <RCCEx_PLL2_Config+0x15c>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a4e      	ldr	r2, [pc, #312]	@ (8003d38 <RCCEx_PLL2_Config+0x15c>)
 8003c00:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003c04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c06:	f7fc ffd9 	bl	8000bbc <HAL_GetTick>
 8003c0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003c0c:	e008      	b.n	8003c20 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003c0e:	f7fc ffd5 	bl	8000bbc <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d901      	bls.n	8003c20 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e086      	b.n	8003d2e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003c20:	4b45      	ldr	r3, [pc, #276]	@ (8003d38 <RCCEx_PLL2_Config+0x15c>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1f0      	bne.n	8003c0e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003c2c:	4b42      	ldr	r3, [pc, #264]	@ (8003d38 <RCCEx_PLL2_Config+0x15c>)
 8003c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c30:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	031b      	lsls	r3, r3, #12
 8003c3a:	493f      	ldr	r1, [pc, #252]	@ (8003d38 <RCCEx_PLL2_Config+0x15c>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	628b      	str	r3, [r1, #40]	@ 0x28
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	3b01      	subs	r3, #1
 8003c46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	025b      	lsls	r3, r3, #9
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	431a      	orrs	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	041b      	lsls	r3, r3, #16
 8003c5e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003c62:	431a      	orrs	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	061b      	lsls	r3, r3, #24
 8003c6c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003c70:	4931      	ldr	r1, [pc, #196]	@ (8003d38 <RCCEx_PLL2_Config+0x15c>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003c76:	4b30      	ldr	r3, [pc, #192]	@ (8003d38 <RCCEx_PLL2_Config+0x15c>)
 8003c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c7a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	492d      	ldr	r1, [pc, #180]	@ (8003d38 <RCCEx_PLL2_Config+0x15c>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003c88:	4b2b      	ldr	r3, [pc, #172]	@ (8003d38 <RCCEx_PLL2_Config+0x15c>)
 8003c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c8c:	f023 0220 	bic.w	r2, r3, #32
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	4928      	ldr	r1, [pc, #160]	@ (8003d38 <RCCEx_PLL2_Config+0x15c>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003c9a:	4b27      	ldr	r3, [pc, #156]	@ (8003d38 <RCCEx_PLL2_Config+0x15c>)
 8003c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c9e:	4a26      	ldr	r2, [pc, #152]	@ (8003d38 <RCCEx_PLL2_Config+0x15c>)
 8003ca0:	f023 0310 	bic.w	r3, r3, #16
 8003ca4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003ca6:	4b24      	ldr	r3, [pc, #144]	@ (8003d38 <RCCEx_PLL2_Config+0x15c>)
 8003ca8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003caa:	4b24      	ldr	r3, [pc, #144]	@ (8003d3c <RCCEx_PLL2_Config+0x160>)
 8003cac:	4013      	ands	r3, r2
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	69d2      	ldr	r2, [r2, #28]
 8003cb2:	00d2      	lsls	r2, r2, #3
 8003cb4:	4920      	ldr	r1, [pc, #128]	@ (8003d38 <RCCEx_PLL2_Config+0x15c>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003cba:	4b1f      	ldr	r3, [pc, #124]	@ (8003d38 <RCCEx_PLL2_Config+0x15c>)
 8003cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cbe:	4a1e      	ldr	r2, [pc, #120]	@ (8003d38 <RCCEx_PLL2_Config+0x15c>)
 8003cc0:	f043 0310 	orr.w	r3, r3, #16
 8003cc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d106      	bne.n	8003cda <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003ccc:	4b1a      	ldr	r3, [pc, #104]	@ (8003d38 <RCCEx_PLL2_Config+0x15c>)
 8003cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd0:	4a19      	ldr	r2, [pc, #100]	@ (8003d38 <RCCEx_PLL2_Config+0x15c>)
 8003cd2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003cd6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003cd8:	e00f      	b.n	8003cfa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d106      	bne.n	8003cee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003ce0:	4b15      	ldr	r3, [pc, #84]	@ (8003d38 <RCCEx_PLL2_Config+0x15c>)
 8003ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce4:	4a14      	ldr	r2, [pc, #80]	@ (8003d38 <RCCEx_PLL2_Config+0x15c>)
 8003ce6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003cec:	e005      	b.n	8003cfa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003cee:	4b12      	ldr	r3, [pc, #72]	@ (8003d38 <RCCEx_PLL2_Config+0x15c>)
 8003cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf2:	4a11      	ldr	r2, [pc, #68]	@ (8003d38 <RCCEx_PLL2_Config+0x15c>)
 8003cf4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003cf8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003cfa:	4b0f      	ldr	r3, [pc, #60]	@ (8003d38 <RCCEx_PLL2_Config+0x15c>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a0e      	ldr	r2, [pc, #56]	@ (8003d38 <RCCEx_PLL2_Config+0x15c>)
 8003d00:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003d04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d06:	f7fc ff59 	bl	8000bbc <HAL_GetTick>
 8003d0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003d0c:	e008      	b.n	8003d20 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003d0e:	f7fc ff55 	bl	8000bbc <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d901      	bls.n	8003d20 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e006      	b.n	8003d2e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003d20:	4b05      	ldr	r3, [pc, #20]	@ (8003d38 <RCCEx_PLL2_Config+0x15c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d0f0      	beq.n	8003d0e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3710      	adds	r7, #16
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	58024400 	.word	0x58024400
 8003d3c:	ffff0007 	.word	0xffff0007

08003d40 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003d4e:	4b53      	ldr	r3, [pc, #332]	@ (8003e9c <RCCEx_PLL3_Config+0x15c>)
 8003d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d52:	f003 0303 	and.w	r3, r3, #3
 8003d56:	2b03      	cmp	r3, #3
 8003d58:	d101      	bne.n	8003d5e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e099      	b.n	8003e92 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003d5e:	4b4f      	ldr	r3, [pc, #316]	@ (8003e9c <RCCEx_PLL3_Config+0x15c>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a4e      	ldr	r2, [pc, #312]	@ (8003e9c <RCCEx_PLL3_Config+0x15c>)
 8003d64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d6a:	f7fc ff27 	bl	8000bbc <HAL_GetTick>
 8003d6e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003d70:	e008      	b.n	8003d84 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003d72:	f7fc ff23 	bl	8000bbc <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d901      	bls.n	8003d84 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e086      	b.n	8003e92 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003d84:	4b45      	ldr	r3, [pc, #276]	@ (8003e9c <RCCEx_PLL3_Config+0x15c>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1f0      	bne.n	8003d72 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003d90:	4b42      	ldr	r3, [pc, #264]	@ (8003e9c <RCCEx_PLL3_Config+0x15c>)
 8003d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d94:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	051b      	lsls	r3, r3, #20
 8003d9e:	493f      	ldr	r1, [pc, #252]	@ (8003e9c <RCCEx_PLL3_Config+0x15c>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	628b      	str	r3, [r1, #40]	@ 0x28
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	3b01      	subs	r3, #1
 8003daa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	3b01      	subs	r3, #1
 8003db4:	025b      	lsls	r3, r3, #9
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	431a      	orrs	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	041b      	lsls	r3, r3, #16
 8003dc2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	061b      	lsls	r3, r3, #24
 8003dd0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003dd4:	4931      	ldr	r1, [pc, #196]	@ (8003e9c <RCCEx_PLL3_Config+0x15c>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003dda:	4b30      	ldr	r3, [pc, #192]	@ (8003e9c <RCCEx_PLL3_Config+0x15c>)
 8003ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dde:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	492d      	ldr	r1, [pc, #180]	@ (8003e9c <RCCEx_PLL3_Config+0x15c>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003dec:	4b2b      	ldr	r3, [pc, #172]	@ (8003e9c <RCCEx_PLL3_Config+0x15c>)
 8003dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003df0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	4928      	ldr	r1, [pc, #160]	@ (8003e9c <RCCEx_PLL3_Config+0x15c>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003dfe:	4b27      	ldr	r3, [pc, #156]	@ (8003e9c <RCCEx_PLL3_Config+0x15c>)
 8003e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e02:	4a26      	ldr	r2, [pc, #152]	@ (8003e9c <RCCEx_PLL3_Config+0x15c>)
 8003e04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e08:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003e0a:	4b24      	ldr	r3, [pc, #144]	@ (8003e9c <RCCEx_PLL3_Config+0x15c>)
 8003e0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e0e:	4b24      	ldr	r3, [pc, #144]	@ (8003ea0 <RCCEx_PLL3_Config+0x160>)
 8003e10:	4013      	ands	r3, r2
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	69d2      	ldr	r2, [r2, #28]
 8003e16:	00d2      	lsls	r2, r2, #3
 8003e18:	4920      	ldr	r1, [pc, #128]	@ (8003e9c <RCCEx_PLL3_Config+0x15c>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003e1e:	4b1f      	ldr	r3, [pc, #124]	@ (8003e9c <RCCEx_PLL3_Config+0x15c>)
 8003e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e22:	4a1e      	ldr	r2, [pc, #120]	@ (8003e9c <RCCEx_PLL3_Config+0x15c>)
 8003e24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e28:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d106      	bne.n	8003e3e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003e30:	4b1a      	ldr	r3, [pc, #104]	@ (8003e9c <RCCEx_PLL3_Config+0x15c>)
 8003e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e34:	4a19      	ldr	r2, [pc, #100]	@ (8003e9c <RCCEx_PLL3_Config+0x15c>)
 8003e36:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003e3a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003e3c:	e00f      	b.n	8003e5e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d106      	bne.n	8003e52 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003e44:	4b15      	ldr	r3, [pc, #84]	@ (8003e9c <RCCEx_PLL3_Config+0x15c>)
 8003e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e48:	4a14      	ldr	r2, [pc, #80]	@ (8003e9c <RCCEx_PLL3_Config+0x15c>)
 8003e4a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003e4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003e50:	e005      	b.n	8003e5e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003e52:	4b12      	ldr	r3, [pc, #72]	@ (8003e9c <RCCEx_PLL3_Config+0x15c>)
 8003e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e56:	4a11      	ldr	r2, [pc, #68]	@ (8003e9c <RCCEx_PLL3_Config+0x15c>)
 8003e58:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e5c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003e5e:	4b0f      	ldr	r3, [pc, #60]	@ (8003e9c <RCCEx_PLL3_Config+0x15c>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a0e      	ldr	r2, [pc, #56]	@ (8003e9c <RCCEx_PLL3_Config+0x15c>)
 8003e64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e6a:	f7fc fea7 	bl	8000bbc <HAL_GetTick>
 8003e6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003e70:	e008      	b.n	8003e84 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003e72:	f7fc fea3 	bl	8000bbc <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d901      	bls.n	8003e84 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e006      	b.n	8003e92 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003e84:	4b05      	ldr	r3, [pc, #20]	@ (8003e9c <RCCEx_PLL3_Config+0x15c>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d0f0      	beq.n	8003e72 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	58024400 	.word	0x58024400
 8003ea0:	ffff0007 	.word	0xffff0007

08003ea4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e042      	b.n	8003f3c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d106      	bne.n	8003ece <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f7fc fca7 	bl	800081c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2224      	movs	r2, #36	@ 0x24
 8003ed2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 0201 	bic.w	r2, r2, #1
 8003ee4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f82c 	bl	8003f44 <UART_SetConfig>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d101      	bne.n	8003ef6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e022      	b.n	8003f3c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d002      	beq.n	8003f04 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 fd88 	bl	8004a14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	689a      	ldr	r2, [r3, #8]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f042 0201 	orr.w	r2, r2, #1
 8003f32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 fe0f 	bl	8004b58 <UART_CheckIdleState>
 8003f3a:	4603      	mov	r3, r0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3708      	adds	r7, #8
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f48:	b092      	sub	sp, #72	@ 0x48
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	689a      	ldr	r2, [r3, #8]
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	431a      	orrs	r2, r3
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	431a      	orrs	r2, r3
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	69db      	ldr	r3, [r3, #28]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	4bbe      	ldr	r3, [pc, #760]	@ (800426c <UART_SetConfig+0x328>)
 8003f74:	4013      	ands	r3, r2
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	6812      	ldr	r2, [r2, #0]
 8003f7a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003f7c:	430b      	orrs	r3, r1
 8003f7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	68da      	ldr	r2, [r3, #12]
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	430a      	orrs	r2, r1
 8003f94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4ab3      	ldr	r2, [pc, #716]	@ (8004270 <UART_SetConfig+0x32c>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d004      	beq.n	8003fb0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fac:	4313      	orrs	r3, r2
 8003fae:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689a      	ldr	r2, [r3, #8]
 8003fb6:	4baf      	ldr	r3, [pc, #700]	@ (8004274 <UART_SetConfig+0x330>)
 8003fb8:	4013      	ands	r3, r2
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	6812      	ldr	r2, [r2, #0]
 8003fbe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003fc0:	430b      	orrs	r3, r1
 8003fc2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fca:	f023 010f 	bic.w	r1, r3, #15
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4aa6      	ldr	r2, [pc, #664]	@ (8004278 <UART_SetConfig+0x334>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d177      	bne.n	80040d4 <UART_SetConfig+0x190>
 8003fe4:	4ba5      	ldr	r3, [pc, #660]	@ (800427c <UART_SetConfig+0x338>)
 8003fe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fe8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003fec:	2b28      	cmp	r3, #40	@ 0x28
 8003fee:	d86d      	bhi.n	80040cc <UART_SetConfig+0x188>
 8003ff0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ff8 <UART_SetConfig+0xb4>)
 8003ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff6:	bf00      	nop
 8003ff8:	0800409d 	.word	0x0800409d
 8003ffc:	080040cd 	.word	0x080040cd
 8004000:	080040cd 	.word	0x080040cd
 8004004:	080040cd 	.word	0x080040cd
 8004008:	080040cd 	.word	0x080040cd
 800400c:	080040cd 	.word	0x080040cd
 8004010:	080040cd 	.word	0x080040cd
 8004014:	080040cd 	.word	0x080040cd
 8004018:	080040a5 	.word	0x080040a5
 800401c:	080040cd 	.word	0x080040cd
 8004020:	080040cd 	.word	0x080040cd
 8004024:	080040cd 	.word	0x080040cd
 8004028:	080040cd 	.word	0x080040cd
 800402c:	080040cd 	.word	0x080040cd
 8004030:	080040cd 	.word	0x080040cd
 8004034:	080040cd 	.word	0x080040cd
 8004038:	080040ad 	.word	0x080040ad
 800403c:	080040cd 	.word	0x080040cd
 8004040:	080040cd 	.word	0x080040cd
 8004044:	080040cd 	.word	0x080040cd
 8004048:	080040cd 	.word	0x080040cd
 800404c:	080040cd 	.word	0x080040cd
 8004050:	080040cd 	.word	0x080040cd
 8004054:	080040cd 	.word	0x080040cd
 8004058:	080040b5 	.word	0x080040b5
 800405c:	080040cd 	.word	0x080040cd
 8004060:	080040cd 	.word	0x080040cd
 8004064:	080040cd 	.word	0x080040cd
 8004068:	080040cd 	.word	0x080040cd
 800406c:	080040cd 	.word	0x080040cd
 8004070:	080040cd 	.word	0x080040cd
 8004074:	080040cd 	.word	0x080040cd
 8004078:	080040bd 	.word	0x080040bd
 800407c:	080040cd 	.word	0x080040cd
 8004080:	080040cd 	.word	0x080040cd
 8004084:	080040cd 	.word	0x080040cd
 8004088:	080040cd 	.word	0x080040cd
 800408c:	080040cd 	.word	0x080040cd
 8004090:	080040cd 	.word	0x080040cd
 8004094:	080040cd 	.word	0x080040cd
 8004098:	080040c5 	.word	0x080040c5
 800409c:	2301      	movs	r3, #1
 800409e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80040a2:	e222      	b.n	80044ea <UART_SetConfig+0x5a6>
 80040a4:	2304      	movs	r3, #4
 80040a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80040aa:	e21e      	b.n	80044ea <UART_SetConfig+0x5a6>
 80040ac:	2308      	movs	r3, #8
 80040ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80040b2:	e21a      	b.n	80044ea <UART_SetConfig+0x5a6>
 80040b4:	2310      	movs	r3, #16
 80040b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80040ba:	e216      	b.n	80044ea <UART_SetConfig+0x5a6>
 80040bc:	2320      	movs	r3, #32
 80040be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80040c2:	e212      	b.n	80044ea <UART_SetConfig+0x5a6>
 80040c4:	2340      	movs	r3, #64	@ 0x40
 80040c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80040ca:	e20e      	b.n	80044ea <UART_SetConfig+0x5a6>
 80040cc:	2380      	movs	r3, #128	@ 0x80
 80040ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80040d2:	e20a      	b.n	80044ea <UART_SetConfig+0x5a6>
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a69      	ldr	r2, [pc, #420]	@ (8004280 <UART_SetConfig+0x33c>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d130      	bne.n	8004140 <UART_SetConfig+0x1fc>
 80040de:	4b67      	ldr	r3, [pc, #412]	@ (800427c <UART_SetConfig+0x338>)
 80040e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040e2:	f003 0307 	and.w	r3, r3, #7
 80040e6:	2b05      	cmp	r3, #5
 80040e8:	d826      	bhi.n	8004138 <UART_SetConfig+0x1f4>
 80040ea:	a201      	add	r2, pc, #4	@ (adr r2, 80040f0 <UART_SetConfig+0x1ac>)
 80040ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f0:	08004109 	.word	0x08004109
 80040f4:	08004111 	.word	0x08004111
 80040f8:	08004119 	.word	0x08004119
 80040fc:	08004121 	.word	0x08004121
 8004100:	08004129 	.word	0x08004129
 8004104:	08004131 	.word	0x08004131
 8004108:	2300      	movs	r3, #0
 800410a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800410e:	e1ec      	b.n	80044ea <UART_SetConfig+0x5a6>
 8004110:	2304      	movs	r3, #4
 8004112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004116:	e1e8      	b.n	80044ea <UART_SetConfig+0x5a6>
 8004118:	2308      	movs	r3, #8
 800411a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800411e:	e1e4      	b.n	80044ea <UART_SetConfig+0x5a6>
 8004120:	2310      	movs	r3, #16
 8004122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004126:	e1e0      	b.n	80044ea <UART_SetConfig+0x5a6>
 8004128:	2320      	movs	r3, #32
 800412a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800412e:	e1dc      	b.n	80044ea <UART_SetConfig+0x5a6>
 8004130:	2340      	movs	r3, #64	@ 0x40
 8004132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004136:	e1d8      	b.n	80044ea <UART_SetConfig+0x5a6>
 8004138:	2380      	movs	r3, #128	@ 0x80
 800413a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800413e:	e1d4      	b.n	80044ea <UART_SetConfig+0x5a6>
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a4f      	ldr	r2, [pc, #316]	@ (8004284 <UART_SetConfig+0x340>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d130      	bne.n	80041ac <UART_SetConfig+0x268>
 800414a:	4b4c      	ldr	r3, [pc, #304]	@ (800427c <UART_SetConfig+0x338>)
 800414c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800414e:	f003 0307 	and.w	r3, r3, #7
 8004152:	2b05      	cmp	r3, #5
 8004154:	d826      	bhi.n	80041a4 <UART_SetConfig+0x260>
 8004156:	a201      	add	r2, pc, #4	@ (adr r2, 800415c <UART_SetConfig+0x218>)
 8004158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415c:	08004175 	.word	0x08004175
 8004160:	0800417d 	.word	0x0800417d
 8004164:	08004185 	.word	0x08004185
 8004168:	0800418d 	.word	0x0800418d
 800416c:	08004195 	.word	0x08004195
 8004170:	0800419d 	.word	0x0800419d
 8004174:	2300      	movs	r3, #0
 8004176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800417a:	e1b6      	b.n	80044ea <UART_SetConfig+0x5a6>
 800417c:	2304      	movs	r3, #4
 800417e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004182:	e1b2      	b.n	80044ea <UART_SetConfig+0x5a6>
 8004184:	2308      	movs	r3, #8
 8004186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800418a:	e1ae      	b.n	80044ea <UART_SetConfig+0x5a6>
 800418c:	2310      	movs	r3, #16
 800418e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004192:	e1aa      	b.n	80044ea <UART_SetConfig+0x5a6>
 8004194:	2320      	movs	r3, #32
 8004196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800419a:	e1a6      	b.n	80044ea <UART_SetConfig+0x5a6>
 800419c:	2340      	movs	r3, #64	@ 0x40
 800419e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80041a2:	e1a2      	b.n	80044ea <UART_SetConfig+0x5a6>
 80041a4:	2380      	movs	r3, #128	@ 0x80
 80041a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80041aa:	e19e      	b.n	80044ea <UART_SetConfig+0x5a6>
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a35      	ldr	r2, [pc, #212]	@ (8004288 <UART_SetConfig+0x344>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d130      	bne.n	8004218 <UART_SetConfig+0x2d4>
 80041b6:	4b31      	ldr	r3, [pc, #196]	@ (800427c <UART_SetConfig+0x338>)
 80041b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ba:	f003 0307 	and.w	r3, r3, #7
 80041be:	2b05      	cmp	r3, #5
 80041c0:	d826      	bhi.n	8004210 <UART_SetConfig+0x2cc>
 80041c2:	a201      	add	r2, pc, #4	@ (adr r2, 80041c8 <UART_SetConfig+0x284>)
 80041c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c8:	080041e1 	.word	0x080041e1
 80041cc:	080041e9 	.word	0x080041e9
 80041d0:	080041f1 	.word	0x080041f1
 80041d4:	080041f9 	.word	0x080041f9
 80041d8:	08004201 	.word	0x08004201
 80041dc:	08004209 	.word	0x08004209
 80041e0:	2300      	movs	r3, #0
 80041e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80041e6:	e180      	b.n	80044ea <UART_SetConfig+0x5a6>
 80041e8:	2304      	movs	r3, #4
 80041ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80041ee:	e17c      	b.n	80044ea <UART_SetConfig+0x5a6>
 80041f0:	2308      	movs	r3, #8
 80041f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80041f6:	e178      	b.n	80044ea <UART_SetConfig+0x5a6>
 80041f8:	2310      	movs	r3, #16
 80041fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80041fe:	e174      	b.n	80044ea <UART_SetConfig+0x5a6>
 8004200:	2320      	movs	r3, #32
 8004202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004206:	e170      	b.n	80044ea <UART_SetConfig+0x5a6>
 8004208:	2340      	movs	r3, #64	@ 0x40
 800420a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800420e:	e16c      	b.n	80044ea <UART_SetConfig+0x5a6>
 8004210:	2380      	movs	r3, #128	@ 0x80
 8004212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004216:	e168      	b.n	80044ea <UART_SetConfig+0x5a6>
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a1b      	ldr	r2, [pc, #108]	@ (800428c <UART_SetConfig+0x348>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d142      	bne.n	80042a8 <UART_SetConfig+0x364>
 8004222:	4b16      	ldr	r3, [pc, #88]	@ (800427c <UART_SetConfig+0x338>)
 8004224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004226:	f003 0307 	and.w	r3, r3, #7
 800422a:	2b05      	cmp	r3, #5
 800422c:	d838      	bhi.n	80042a0 <UART_SetConfig+0x35c>
 800422e:	a201      	add	r2, pc, #4	@ (adr r2, 8004234 <UART_SetConfig+0x2f0>)
 8004230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004234:	0800424d 	.word	0x0800424d
 8004238:	08004255 	.word	0x08004255
 800423c:	0800425d 	.word	0x0800425d
 8004240:	08004265 	.word	0x08004265
 8004244:	08004291 	.word	0x08004291
 8004248:	08004299 	.word	0x08004299
 800424c:	2300      	movs	r3, #0
 800424e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004252:	e14a      	b.n	80044ea <UART_SetConfig+0x5a6>
 8004254:	2304      	movs	r3, #4
 8004256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800425a:	e146      	b.n	80044ea <UART_SetConfig+0x5a6>
 800425c:	2308      	movs	r3, #8
 800425e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004262:	e142      	b.n	80044ea <UART_SetConfig+0x5a6>
 8004264:	2310      	movs	r3, #16
 8004266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800426a:	e13e      	b.n	80044ea <UART_SetConfig+0x5a6>
 800426c:	cfff69f3 	.word	0xcfff69f3
 8004270:	58000c00 	.word	0x58000c00
 8004274:	11fff4ff 	.word	0x11fff4ff
 8004278:	40011000 	.word	0x40011000
 800427c:	58024400 	.word	0x58024400
 8004280:	40004400 	.word	0x40004400
 8004284:	40004800 	.word	0x40004800
 8004288:	40004c00 	.word	0x40004c00
 800428c:	40005000 	.word	0x40005000
 8004290:	2320      	movs	r3, #32
 8004292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004296:	e128      	b.n	80044ea <UART_SetConfig+0x5a6>
 8004298:	2340      	movs	r3, #64	@ 0x40
 800429a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800429e:	e124      	b.n	80044ea <UART_SetConfig+0x5a6>
 80042a0:	2380      	movs	r3, #128	@ 0x80
 80042a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80042a6:	e120      	b.n	80044ea <UART_SetConfig+0x5a6>
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4acb      	ldr	r2, [pc, #812]	@ (80045dc <UART_SetConfig+0x698>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d176      	bne.n	80043a0 <UART_SetConfig+0x45c>
 80042b2:	4bcb      	ldr	r3, [pc, #812]	@ (80045e0 <UART_SetConfig+0x69c>)
 80042b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042ba:	2b28      	cmp	r3, #40	@ 0x28
 80042bc:	d86c      	bhi.n	8004398 <UART_SetConfig+0x454>
 80042be:	a201      	add	r2, pc, #4	@ (adr r2, 80042c4 <UART_SetConfig+0x380>)
 80042c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c4:	08004369 	.word	0x08004369
 80042c8:	08004399 	.word	0x08004399
 80042cc:	08004399 	.word	0x08004399
 80042d0:	08004399 	.word	0x08004399
 80042d4:	08004399 	.word	0x08004399
 80042d8:	08004399 	.word	0x08004399
 80042dc:	08004399 	.word	0x08004399
 80042e0:	08004399 	.word	0x08004399
 80042e4:	08004371 	.word	0x08004371
 80042e8:	08004399 	.word	0x08004399
 80042ec:	08004399 	.word	0x08004399
 80042f0:	08004399 	.word	0x08004399
 80042f4:	08004399 	.word	0x08004399
 80042f8:	08004399 	.word	0x08004399
 80042fc:	08004399 	.word	0x08004399
 8004300:	08004399 	.word	0x08004399
 8004304:	08004379 	.word	0x08004379
 8004308:	08004399 	.word	0x08004399
 800430c:	08004399 	.word	0x08004399
 8004310:	08004399 	.word	0x08004399
 8004314:	08004399 	.word	0x08004399
 8004318:	08004399 	.word	0x08004399
 800431c:	08004399 	.word	0x08004399
 8004320:	08004399 	.word	0x08004399
 8004324:	08004381 	.word	0x08004381
 8004328:	08004399 	.word	0x08004399
 800432c:	08004399 	.word	0x08004399
 8004330:	08004399 	.word	0x08004399
 8004334:	08004399 	.word	0x08004399
 8004338:	08004399 	.word	0x08004399
 800433c:	08004399 	.word	0x08004399
 8004340:	08004399 	.word	0x08004399
 8004344:	08004389 	.word	0x08004389
 8004348:	08004399 	.word	0x08004399
 800434c:	08004399 	.word	0x08004399
 8004350:	08004399 	.word	0x08004399
 8004354:	08004399 	.word	0x08004399
 8004358:	08004399 	.word	0x08004399
 800435c:	08004399 	.word	0x08004399
 8004360:	08004399 	.word	0x08004399
 8004364:	08004391 	.word	0x08004391
 8004368:	2301      	movs	r3, #1
 800436a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800436e:	e0bc      	b.n	80044ea <UART_SetConfig+0x5a6>
 8004370:	2304      	movs	r3, #4
 8004372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004376:	e0b8      	b.n	80044ea <UART_SetConfig+0x5a6>
 8004378:	2308      	movs	r3, #8
 800437a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800437e:	e0b4      	b.n	80044ea <UART_SetConfig+0x5a6>
 8004380:	2310      	movs	r3, #16
 8004382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004386:	e0b0      	b.n	80044ea <UART_SetConfig+0x5a6>
 8004388:	2320      	movs	r3, #32
 800438a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800438e:	e0ac      	b.n	80044ea <UART_SetConfig+0x5a6>
 8004390:	2340      	movs	r3, #64	@ 0x40
 8004392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004396:	e0a8      	b.n	80044ea <UART_SetConfig+0x5a6>
 8004398:	2380      	movs	r3, #128	@ 0x80
 800439a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800439e:	e0a4      	b.n	80044ea <UART_SetConfig+0x5a6>
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a8f      	ldr	r2, [pc, #572]	@ (80045e4 <UART_SetConfig+0x6a0>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d130      	bne.n	800440c <UART_SetConfig+0x4c8>
 80043aa:	4b8d      	ldr	r3, [pc, #564]	@ (80045e0 <UART_SetConfig+0x69c>)
 80043ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043ae:	f003 0307 	and.w	r3, r3, #7
 80043b2:	2b05      	cmp	r3, #5
 80043b4:	d826      	bhi.n	8004404 <UART_SetConfig+0x4c0>
 80043b6:	a201      	add	r2, pc, #4	@ (adr r2, 80043bc <UART_SetConfig+0x478>)
 80043b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043bc:	080043d5 	.word	0x080043d5
 80043c0:	080043dd 	.word	0x080043dd
 80043c4:	080043e5 	.word	0x080043e5
 80043c8:	080043ed 	.word	0x080043ed
 80043cc:	080043f5 	.word	0x080043f5
 80043d0:	080043fd 	.word	0x080043fd
 80043d4:	2300      	movs	r3, #0
 80043d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043da:	e086      	b.n	80044ea <UART_SetConfig+0x5a6>
 80043dc:	2304      	movs	r3, #4
 80043de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043e2:	e082      	b.n	80044ea <UART_SetConfig+0x5a6>
 80043e4:	2308      	movs	r3, #8
 80043e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043ea:	e07e      	b.n	80044ea <UART_SetConfig+0x5a6>
 80043ec:	2310      	movs	r3, #16
 80043ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043f2:	e07a      	b.n	80044ea <UART_SetConfig+0x5a6>
 80043f4:	2320      	movs	r3, #32
 80043f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043fa:	e076      	b.n	80044ea <UART_SetConfig+0x5a6>
 80043fc:	2340      	movs	r3, #64	@ 0x40
 80043fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004402:	e072      	b.n	80044ea <UART_SetConfig+0x5a6>
 8004404:	2380      	movs	r3, #128	@ 0x80
 8004406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800440a:	e06e      	b.n	80044ea <UART_SetConfig+0x5a6>
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a75      	ldr	r2, [pc, #468]	@ (80045e8 <UART_SetConfig+0x6a4>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d130      	bne.n	8004478 <UART_SetConfig+0x534>
 8004416:	4b72      	ldr	r3, [pc, #456]	@ (80045e0 <UART_SetConfig+0x69c>)
 8004418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800441a:	f003 0307 	and.w	r3, r3, #7
 800441e:	2b05      	cmp	r3, #5
 8004420:	d826      	bhi.n	8004470 <UART_SetConfig+0x52c>
 8004422:	a201      	add	r2, pc, #4	@ (adr r2, 8004428 <UART_SetConfig+0x4e4>)
 8004424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004428:	08004441 	.word	0x08004441
 800442c:	08004449 	.word	0x08004449
 8004430:	08004451 	.word	0x08004451
 8004434:	08004459 	.word	0x08004459
 8004438:	08004461 	.word	0x08004461
 800443c:	08004469 	.word	0x08004469
 8004440:	2300      	movs	r3, #0
 8004442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004446:	e050      	b.n	80044ea <UART_SetConfig+0x5a6>
 8004448:	2304      	movs	r3, #4
 800444a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800444e:	e04c      	b.n	80044ea <UART_SetConfig+0x5a6>
 8004450:	2308      	movs	r3, #8
 8004452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004456:	e048      	b.n	80044ea <UART_SetConfig+0x5a6>
 8004458:	2310      	movs	r3, #16
 800445a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800445e:	e044      	b.n	80044ea <UART_SetConfig+0x5a6>
 8004460:	2320      	movs	r3, #32
 8004462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004466:	e040      	b.n	80044ea <UART_SetConfig+0x5a6>
 8004468:	2340      	movs	r3, #64	@ 0x40
 800446a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800446e:	e03c      	b.n	80044ea <UART_SetConfig+0x5a6>
 8004470:	2380      	movs	r3, #128	@ 0x80
 8004472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004476:	e038      	b.n	80044ea <UART_SetConfig+0x5a6>
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a5b      	ldr	r2, [pc, #364]	@ (80045ec <UART_SetConfig+0x6a8>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d130      	bne.n	80044e4 <UART_SetConfig+0x5a0>
 8004482:	4b57      	ldr	r3, [pc, #348]	@ (80045e0 <UART_SetConfig+0x69c>)
 8004484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004486:	f003 0307 	and.w	r3, r3, #7
 800448a:	2b05      	cmp	r3, #5
 800448c:	d826      	bhi.n	80044dc <UART_SetConfig+0x598>
 800448e:	a201      	add	r2, pc, #4	@ (adr r2, 8004494 <UART_SetConfig+0x550>)
 8004490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004494:	080044ad 	.word	0x080044ad
 8004498:	080044b5 	.word	0x080044b5
 800449c:	080044bd 	.word	0x080044bd
 80044a0:	080044c5 	.word	0x080044c5
 80044a4:	080044cd 	.word	0x080044cd
 80044a8:	080044d5 	.word	0x080044d5
 80044ac:	2302      	movs	r3, #2
 80044ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044b2:	e01a      	b.n	80044ea <UART_SetConfig+0x5a6>
 80044b4:	2304      	movs	r3, #4
 80044b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044ba:	e016      	b.n	80044ea <UART_SetConfig+0x5a6>
 80044bc:	2308      	movs	r3, #8
 80044be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044c2:	e012      	b.n	80044ea <UART_SetConfig+0x5a6>
 80044c4:	2310      	movs	r3, #16
 80044c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044ca:	e00e      	b.n	80044ea <UART_SetConfig+0x5a6>
 80044cc:	2320      	movs	r3, #32
 80044ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044d2:	e00a      	b.n	80044ea <UART_SetConfig+0x5a6>
 80044d4:	2340      	movs	r3, #64	@ 0x40
 80044d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044da:	e006      	b.n	80044ea <UART_SetConfig+0x5a6>
 80044dc:	2380      	movs	r3, #128	@ 0x80
 80044de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044e2:	e002      	b.n	80044ea <UART_SetConfig+0x5a6>
 80044e4:	2380      	movs	r3, #128	@ 0x80
 80044e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a3f      	ldr	r2, [pc, #252]	@ (80045ec <UART_SetConfig+0x6a8>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	f040 80f8 	bne.w	80046e6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80044f6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80044fa:	2b20      	cmp	r3, #32
 80044fc:	dc46      	bgt.n	800458c <UART_SetConfig+0x648>
 80044fe:	2b02      	cmp	r3, #2
 8004500:	f2c0 8082 	blt.w	8004608 <UART_SetConfig+0x6c4>
 8004504:	3b02      	subs	r3, #2
 8004506:	2b1e      	cmp	r3, #30
 8004508:	d87e      	bhi.n	8004608 <UART_SetConfig+0x6c4>
 800450a:	a201      	add	r2, pc, #4	@ (adr r2, 8004510 <UART_SetConfig+0x5cc>)
 800450c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004510:	08004593 	.word	0x08004593
 8004514:	08004609 	.word	0x08004609
 8004518:	0800459b 	.word	0x0800459b
 800451c:	08004609 	.word	0x08004609
 8004520:	08004609 	.word	0x08004609
 8004524:	08004609 	.word	0x08004609
 8004528:	080045ab 	.word	0x080045ab
 800452c:	08004609 	.word	0x08004609
 8004530:	08004609 	.word	0x08004609
 8004534:	08004609 	.word	0x08004609
 8004538:	08004609 	.word	0x08004609
 800453c:	08004609 	.word	0x08004609
 8004540:	08004609 	.word	0x08004609
 8004544:	08004609 	.word	0x08004609
 8004548:	080045bb 	.word	0x080045bb
 800454c:	08004609 	.word	0x08004609
 8004550:	08004609 	.word	0x08004609
 8004554:	08004609 	.word	0x08004609
 8004558:	08004609 	.word	0x08004609
 800455c:	08004609 	.word	0x08004609
 8004560:	08004609 	.word	0x08004609
 8004564:	08004609 	.word	0x08004609
 8004568:	08004609 	.word	0x08004609
 800456c:	08004609 	.word	0x08004609
 8004570:	08004609 	.word	0x08004609
 8004574:	08004609 	.word	0x08004609
 8004578:	08004609 	.word	0x08004609
 800457c:	08004609 	.word	0x08004609
 8004580:	08004609 	.word	0x08004609
 8004584:	08004609 	.word	0x08004609
 8004588:	080045fb 	.word	0x080045fb
 800458c:	2b40      	cmp	r3, #64	@ 0x40
 800458e:	d037      	beq.n	8004600 <UART_SetConfig+0x6bc>
 8004590:	e03a      	b.n	8004608 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004592:	f7ff f865 	bl	8003660 <HAL_RCCEx_GetD3PCLK1Freq>
 8004596:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004598:	e03c      	b.n	8004614 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800459a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800459e:	4618      	mov	r0, r3
 80045a0:	f7ff f874 	bl	800368c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80045a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80045a8:	e034      	b.n	8004614 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80045aa:	f107 0318 	add.w	r3, r7, #24
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7ff f9c0 	bl	8003934 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80045b8:	e02c      	b.n	8004614 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045ba:	4b09      	ldr	r3, [pc, #36]	@ (80045e0 <UART_SetConfig+0x69c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0320 	and.w	r3, r3, #32
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d016      	beq.n	80045f4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80045c6:	4b06      	ldr	r3, [pc, #24]	@ (80045e0 <UART_SetConfig+0x69c>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	08db      	lsrs	r3, r3, #3
 80045cc:	f003 0303 	and.w	r3, r3, #3
 80045d0:	4a07      	ldr	r2, [pc, #28]	@ (80045f0 <UART_SetConfig+0x6ac>)
 80045d2:	fa22 f303 	lsr.w	r3, r2, r3
 80045d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80045d8:	e01c      	b.n	8004614 <UART_SetConfig+0x6d0>
 80045da:	bf00      	nop
 80045dc:	40011400 	.word	0x40011400
 80045e0:	58024400 	.word	0x58024400
 80045e4:	40007800 	.word	0x40007800
 80045e8:	40007c00 	.word	0x40007c00
 80045ec:	58000c00 	.word	0x58000c00
 80045f0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80045f4:	4b9d      	ldr	r3, [pc, #628]	@ (800486c <UART_SetConfig+0x928>)
 80045f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80045f8:	e00c      	b.n	8004614 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80045fa:	4b9d      	ldr	r3, [pc, #628]	@ (8004870 <UART_SetConfig+0x92c>)
 80045fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80045fe:	e009      	b.n	8004614 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004600:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004604:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004606:	e005      	b.n	8004614 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004608:	2300      	movs	r3, #0
 800460a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004612:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004614:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004616:	2b00      	cmp	r3, #0
 8004618:	f000 81de 	beq.w	80049d8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004620:	4a94      	ldr	r2, [pc, #592]	@ (8004874 <UART_SetConfig+0x930>)
 8004622:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004626:	461a      	mov	r2, r3
 8004628:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800462a:	fbb3 f3f2 	udiv	r3, r3, r2
 800462e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	4613      	mov	r3, r2
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	4413      	add	r3, r2
 800463a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800463c:	429a      	cmp	r2, r3
 800463e:	d305      	bcc.n	800464c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004646:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004648:	429a      	cmp	r2, r3
 800464a:	d903      	bls.n	8004654 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004652:	e1c1      	b.n	80049d8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004654:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004656:	2200      	movs	r2, #0
 8004658:	60bb      	str	r3, [r7, #8]
 800465a:	60fa      	str	r2, [r7, #12]
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004660:	4a84      	ldr	r2, [pc, #528]	@ (8004874 <UART_SetConfig+0x930>)
 8004662:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004666:	b29b      	uxth	r3, r3
 8004668:	2200      	movs	r2, #0
 800466a:	603b      	str	r3, [r7, #0]
 800466c:	607a      	str	r2, [r7, #4]
 800466e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004672:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004676:	f7fb fe2f 	bl	80002d8 <__aeabi_uldivmod>
 800467a:	4602      	mov	r2, r0
 800467c:	460b      	mov	r3, r1
 800467e:	4610      	mov	r0, r2
 8004680:	4619      	mov	r1, r3
 8004682:	f04f 0200 	mov.w	r2, #0
 8004686:	f04f 0300 	mov.w	r3, #0
 800468a:	020b      	lsls	r3, r1, #8
 800468c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004690:	0202      	lsls	r2, r0, #8
 8004692:	6979      	ldr	r1, [r7, #20]
 8004694:	6849      	ldr	r1, [r1, #4]
 8004696:	0849      	lsrs	r1, r1, #1
 8004698:	2000      	movs	r0, #0
 800469a:	460c      	mov	r4, r1
 800469c:	4605      	mov	r5, r0
 800469e:	eb12 0804 	adds.w	r8, r2, r4
 80046a2:	eb43 0905 	adc.w	r9, r3, r5
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	469a      	mov	sl, r3
 80046ae:	4693      	mov	fp, r2
 80046b0:	4652      	mov	r2, sl
 80046b2:	465b      	mov	r3, fp
 80046b4:	4640      	mov	r0, r8
 80046b6:	4649      	mov	r1, r9
 80046b8:	f7fb fe0e 	bl	80002d8 <__aeabi_uldivmod>
 80046bc:	4602      	mov	r2, r0
 80046be:	460b      	mov	r3, r1
 80046c0:	4613      	mov	r3, r2
 80046c2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80046c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046ca:	d308      	bcc.n	80046de <UART_SetConfig+0x79a>
 80046cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046d2:	d204      	bcs.n	80046de <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80046da:	60da      	str	r2, [r3, #12]
 80046dc:	e17c      	b.n	80049d8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80046e4:	e178      	b.n	80049d8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046ee:	f040 80c5 	bne.w	800487c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80046f2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80046f6:	2b20      	cmp	r3, #32
 80046f8:	dc48      	bgt.n	800478c <UART_SetConfig+0x848>
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	db7b      	blt.n	80047f6 <UART_SetConfig+0x8b2>
 80046fe:	2b20      	cmp	r3, #32
 8004700:	d879      	bhi.n	80047f6 <UART_SetConfig+0x8b2>
 8004702:	a201      	add	r2, pc, #4	@ (adr r2, 8004708 <UART_SetConfig+0x7c4>)
 8004704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004708:	08004793 	.word	0x08004793
 800470c:	0800479b 	.word	0x0800479b
 8004710:	080047f7 	.word	0x080047f7
 8004714:	080047f7 	.word	0x080047f7
 8004718:	080047a3 	.word	0x080047a3
 800471c:	080047f7 	.word	0x080047f7
 8004720:	080047f7 	.word	0x080047f7
 8004724:	080047f7 	.word	0x080047f7
 8004728:	080047b3 	.word	0x080047b3
 800472c:	080047f7 	.word	0x080047f7
 8004730:	080047f7 	.word	0x080047f7
 8004734:	080047f7 	.word	0x080047f7
 8004738:	080047f7 	.word	0x080047f7
 800473c:	080047f7 	.word	0x080047f7
 8004740:	080047f7 	.word	0x080047f7
 8004744:	080047f7 	.word	0x080047f7
 8004748:	080047c3 	.word	0x080047c3
 800474c:	080047f7 	.word	0x080047f7
 8004750:	080047f7 	.word	0x080047f7
 8004754:	080047f7 	.word	0x080047f7
 8004758:	080047f7 	.word	0x080047f7
 800475c:	080047f7 	.word	0x080047f7
 8004760:	080047f7 	.word	0x080047f7
 8004764:	080047f7 	.word	0x080047f7
 8004768:	080047f7 	.word	0x080047f7
 800476c:	080047f7 	.word	0x080047f7
 8004770:	080047f7 	.word	0x080047f7
 8004774:	080047f7 	.word	0x080047f7
 8004778:	080047f7 	.word	0x080047f7
 800477c:	080047f7 	.word	0x080047f7
 8004780:	080047f7 	.word	0x080047f7
 8004784:	080047f7 	.word	0x080047f7
 8004788:	080047e9 	.word	0x080047e9
 800478c:	2b40      	cmp	r3, #64	@ 0x40
 800478e:	d02e      	beq.n	80047ee <UART_SetConfig+0x8aa>
 8004790:	e031      	b.n	80047f6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004792:	f7fd fd2f 	bl	80021f4 <HAL_RCC_GetPCLK1Freq>
 8004796:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004798:	e033      	b.n	8004802 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800479a:	f7fd fd41 	bl	8002220 <HAL_RCC_GetPCLK2Freq>
 800479e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80047a0:	e02f      	b.n	8004802 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80047a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7fe ff70 	bl	800368c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80047ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80047b0:	e027      	b.n	8004802 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80047b2:	f107 0318 	add.w	r3, r7, #24
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7ff f8bc 	bl	8003934 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80047c0:	e01f      	b.n	8004802 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047c2:	4b2d      	ldr	r3, [pc, #180]	@ (8004878 <UART_SetConfig+0x934>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0320 	and.w	r3, r3, #32
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d009      	beq.n	80047e2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80047ce:	4b2a      	ldr	r3, [pc, #168]	@ (8004878 <UART_SetConfig+0x934>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	08db      	lsrs	r3, r3, #3
 80047d4:	f003 0303 	and.w	r3, r3, #3
 80047d8:	4a24      	ldr	r2, [pc, #144]	@ (800486c <UART_SetConfig+0x928>)
 80047da:	fa22 f303 	lsr.w	r3, r2, r3
 80047de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80047e0:	e00f      	b.n	8004802 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80047e2:	4b22      	ldr	r3, [pc, #136]	@ (800486c <UART_SetConfig+0x928>)
 80047e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80047e6:	e00c      	b.n	8004802 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80047e8:	4b21      	ldr	r3, [pc, #132]	@ (8004870 <UART_SetConfig+0x92c>)
 80047ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80047ec:	e009      	b.n	8004802 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80047f4:	e005      	b.n	8004802 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80047f6:	2300      	movs	r3, #0
 80047f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004800:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004802:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004804:	2b00      	cmp	r3, #0
 8004806:	f000 80e7 	beq.w	80049d8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800480e:	4a19      	ldr	r2, [pc, #100]	@ (8004874 <UART_SetConfig+0x930>)
 8004810:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004814:	461a      	mov	r2, r3
 8004816:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004818:	fbb3 f3f2 	udiv	r3, r3, r2
 800481c:	005a      	lsls	r2, r3, #1
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	085b      	lsrs	r3, r3, #1
 8004824:	441a      	add	r2, r3
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	fbb2 f3f3 	udiv	r3, r2, r3
 800482e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004832:	2b0f      	cmp	r3, #15
 8004834:	d916      	bls.n	8004864 <UART_SetConfig+0x920>
 8004836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004838:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800483c:	d212      	bcs.n	8004864 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800483e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004840:	b29b      	uxth	r3, r3
 8004842:	f023 030f 	bic.w	r3, r3, #15
 8004846:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800484a:	085b      	lsrs	r3, r3, #1
 800484c:	b29b      	uxth	r3, r3
 800484e:	f003 0307 	and.w	r3, r3, #7
 8004852:	b29a      	uxth	r2, r3
 8004854:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004856:	4313      	orrs	r3, r2
 8004858:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8004860:	60da      	str	r2, [r3, #12]
 8004862:	e0b9      	b.n	80049d8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800486a:	e0b5      	b.n	80049d8 <UART_SetConfig+0xa94>
 800486c:	03d09000 	.word	0x03d09000
 8004870:	003d0900 	.word	0x003d0900
 8004874:	080050d0 	.word	0x080050d0
 8004878:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800487c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004880:	2b20      	cmp	r3, #32
 8004882:	dc49      	bgt.n	8004918 <UART_SetConfig+0x9d4>
 8004884:	2b00      	cmp	r3, #0
 8004886:	db7c      	blt.n	8004982 <UART_SetConfig+0xa3e>
 8004888:	2b20      	cmp	r3, #32
 800488a:	d87a      	bhi.n	8004982 <UART_SetConfig+0xa3e>
 800488c:	a201      	add	r2, pc, #4	@ (adr r2, 8004894 <UART_SetConfig+0x950>)
 800488e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004892:	bf00      	nop
 8004894:	0800491f 	.word	0x0800491f
 8004898:	08004927 	.word	0x08004927
 800489c:	08004983 	.word	0x08004983
 80048a0:	08004983 	.word	0x08004983
 80048a4:	0800492f 	.word	0x0800492f
 80048a8:	08004983 	.word	0x08004983
 80048ac:	08004983 	.word	0x08004983
 80048b0:	08004983 	.word	0x08004983
 80048b4:	0800493f 	.word	0x0800493f
 80048b8:	08004983 	.word	0x08004983
 80048bc:	08004983 	.word	0x08004983
 80048c0:	08004983 	.word	0x08004983
 80048c4:	08004983 	.word	0x08004983
 80048c8:	08004983 	.word	0x08004983
 80048cc:	08004983 	.word	0x08004983
 80048d0:	08004983 	.word	0x08004983
 80048d4:	0800494f 	.word	0x0800494f
 80048d8:	08004983 	.word	0x08004983
 80048dc:	08004983 	.word	0x08004983
 80048e0:	08004983 	.word	0x08004983
 80048e4:	08004983 	.word	0x08004983
 80048e8:	08004983 	.word	0x08004983
 80048ec:	08004983 	.word	0x08004983
 80048f0:	08004983 	.word	0x08004983
 80048f4:	08004983 	.word	0x08004983
 80048f8:	08004983 	.word	0x08004983
 80048fc:	08004983 	.word	0x08004983
 8004900:	08004983 	.word	0x08004983
 8004904:	08004983 	.word	0x08004983
 8004908:	08004983 	.word	0x08004983
 800490c:	08004983 	.word	0x08004983
 8004910:	08004983 	.word	0x08004983
 8004914:	08004975 	.word	0x08004975
 8004918:	2b40      	cmp	r3, #64	@ 0x40
 800491a:	d02e      	beq.n	800497a <UART_SetConfig+0xa36>
 800491c:	e031      	b.n	8004982 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800491e:	f7fd fc69 	bl	80021f4 <HAL_RCC_GetPCLK1Freq>
 8004922:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004924:	e033      	b.n	800498e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004926:	f7fd fc7b 	bl	8002220 <HAL_RCC_GetPCLK2Freq>
 800492a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800492c:	e02f      	b.n	800498e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800492e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004932:	4618      	mov	r0, r3
 8004934:	f7fe feaa 	bl	800368c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800493a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800493c:	e027      	b.n	800498e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800493e:	f107 0318 	add.w	r3, r7, #24
 8004942:	4618      	mov	r0, r3
 8004944:	f7fe fff6 	bl	8003934 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800494c:	e01f      	b.n	800498e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800494e:	4b2d      	ldr	r3, [pc, #180]	@ (8004a04 <UART_SetConfig+0xac0>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0320 	and.w	r3, r3, #32
 8004956:	2b00      	cmp	r3, #0
 8004958:	d009      	beq.n	800496e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800495a:	4b2a      	ldr	r3, [pc, #168]	@ (8004a04 <UART_SetConfig+0xac0>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	08db      	lsrs	r3, r3, #3
 8004960:	f003 0303 	and.w	r3, r3, #3
 8004964:	4a28      	ldr	r2, [pc, #160]	@ (8004a08 <UART_SetConfig+0xac4>)
 8004966:	fa22 f303 	lsr.w	r3, r2, r3
 800496a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800496c:	e00f      	b.n	800498e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800496e:	4b26      	ldr	r3, [pc, #152]	@ (8004a08 <UART_SetConfig+0xac4>)
 8004970:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004972:	e00c      	b.n	800498e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004974:	4b25      	ldr	r3, [pc, #148]	@ (8004a0c <UART_SetConfig+0xac8>)
 8004976:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004978:	e009      	b.n	800498e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800497a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800497e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004980:	e005      	b.n	800498e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8004982:	2300      	movs	r3, #0
 8004984:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800498c:	bf00      	nop
    }

    if (pclk != 0U)
 800498e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004990:	2b00      	cmp	r3, #0
 8004992:	d021      	beq.n	80049d8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004998:	4a1d      	ldr	r2, [pc, #116]	@ (8004a10 <UART_SetConfig+0xacc>)
 800499a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800499e:	461a      	mov	r2, r3
 80049a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	085b      	lsrs	r3, r3, #1
 80049ac:	441a      	add	r2, r3
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049ba:	2b0f      	cmp	r3, #15
 80049bc:	d909      	bls.n	80049d2 <UART_SetConfig+0xa8e>
 80049be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049c4:	d205      	bcs.n	80049d2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	60da      	str	r2, [r3, #12]
 80049d0:	e002      	b.n	80049d8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	2201      	movs	r2, #1
 80049dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	2200      	movs	r2, #0
 80049ec:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	2200      	movs	r2, #0
 80049f2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80049f4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3748      	adds	r7, #72	@ 0x48
 80049fc:	46bd      	mov	sp, r7
 80049fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a02:	bf00      	nop
 8004a04:	58024400 	.word	0x58024400
 8004a08:	03d09000 	.word	0x03d09000
 8004a0c:	003d0900 	.word	0x003d0900
 8004a10:	080050d0 	.word	0x080050d0

08004a14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a20:	f003 0301 	and.w	r3, r3, #1
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00a      	beq.n	8004a3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00a      	beq.n	8004a60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a64:	f003 0304 	and.w	r3, r3, #4
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00a      	beq.n	8004a82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a86:	f003 0308 	and.w	r3, r3, #8
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00a      	beq.n	8004aa4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aa8:	f003 0310 	and.w	r3, r3, #16
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00a      	beq.n	8004ac6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aca:	f003 0320 	and.w	r3, r3, #32
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00a      	beq.n	8004ae8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d01a      	beq.n	8004b2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b12:	d10a      	bne.n	8004b2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00a      	beq.n	8004b4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	605a      	str	r2, [r3, #4]
  }
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b098      	sub	sp, #96	@ 0x60
 8004b5c:	af02      	add	r7, sp, #8
 8004b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b68:	f7fc f828 	bl	8000bbc <HAL_GetTick>
 8004b6c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0308 	and.w	r3, r3, #8
 8004b78:	2b08      	cmp	r3, #8
 8004b7a:	d12f      	bne.n	8004bdc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b7c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b80:	9300      	str	r3, [sp, #0]
 8004b82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b84:	2200      	movs	r2, #0
 8004b86:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f88e 	bl	8004cac <UART_WaitOnFlagUntilTimeout>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d022      	beq.n	8004bdc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b9e:	e853 3f00 	ldrex	r3, [r3]
 8004ba2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ba6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004baa:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bb6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004bba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bbc:	e841 2300 	strex	r3, r2, [r1]
 8004bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004bc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1e6      	bne.n	8004b96 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2220      	movs	r2, #32
 8004bcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e063      	b.n	8004ca4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0304 	and.w	r3, r3, #4
 8004be6:	2b04      	cmp	r3, #4
 8004be8:	d149      	bne.n	8004c7e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004bee:	9300      	str	r3, [sp, #0]
 8004bf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 f857 	bl	8004cac <UART_WaitOnFlagUntilTimeout>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d03c      	beq.n	8004c7e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0c:	e853 3f00 	ldrex	r3, [r3]
 8004c10:	623b      	str	r3, [r7, #32]
   return(result);
 8004c12:	6a3b      	ldr	r3, [r7, #32]
 8004c14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	461a      	mov	r2, r3
 8004c20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c22:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c24:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c2a:	e841 2300 	strex	r3, r2, [r1]
 8004c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1e6      	bne.n	8004c04 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	3308      	adds	r3, #8
 8004c3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	e853 3f00 	ldrex	r3, [r3]
 8004c44:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f023 0301 	bic.w	r3, r3, #1
 8004c4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	3308      	adds	r3, #8
 8004c54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c56:	61fa      	str	r2, [r7, #28]
 8004c58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5a:	69b9      	ldr	r1, [r7, #24]
 8004c5c:	69fa      	ldr	r2, [r7, #28]
 8004c5e:	e841 2300 	strex	r3, r2, [r1]
 8004c62:	617b      	str	r3, [r7, #20]
   return(result);
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1e5      	bne.n	8004c36 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2220      	movs	r2, #32
 8004c6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e012      	b.n	8004ca4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2220      	movs	r2, #32
 8004c82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2220      	movs	r2, #32
 8004c8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3758      	adds	r7, #88	@ 0x58
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	603b      	str	r3, [r7, #0]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cbc:	e049      	b.n	8004d52 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc4:	d045      	beq.n	8004d52 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cc6:	f7fb ff79 	bl	8000bbc <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	69ba      	ldr	r2, [r7, #24]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d302      	bcc.n	8004cdc <UART_WaitOnFlagUntilTimeout+0x30>
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d101      	bne.n	8004ce0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e048      	b.n	8004d72 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0304 	and.w	r3, r3, #4
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d031      	beq.n	8004d52 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	69db      	ldr	r3, [r3, #28]
 8004cf4:	f003 0308 	and.w	r3, r3, #8
 8004cf8:	2b08      	cmp	r3, #8
 8004cfa:	d110      	bne.n	8004d1e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2208      	movs	r2, #8
 8004d02:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004d04:	68f8      	ldr	r0, [r7, #12]
 8004d06:	f000 f839 	bl	8004d7c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2208      	movs	r2, #8
 8004d0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e029      	b.n	8004d72 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	69db      	ldr	r3, [r3, #28]
 8004d24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d2c:	d111      	bne.n	8004d52 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d38:	68f8      	ldr	r0, [r7, #12]
 8004d3a:	f000 f81f 	bl	8004d7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2220      	movs	r2, #32
 8004d42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e00f      	b.n	8004d72 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	69da      	ldr	r2, [r3, #28]
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	68ba      	ldr	r2, [r7, #8]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	bf0c      	ite	eq
 8004d62:	2301      	moveq	r3, #1
 8004d64:	2300      	movne	r3, #0
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	461a      	mov	r2, r3
 8004d6a:	79fb      	ldrb	r3, [r7, #7]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d0a6      	beq.n	8004cbe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
	...

08004d7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b095      	sub	sp, #84	@ 0x54
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d8c:	e853 3f00 	ldrex	r3, [r3]
 8004d90:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	461a      	mov	r2, r3
 8004da0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004da2:	643b      	str	r3, [r7, #64]	@ 0x40
 8004da4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004da8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004daa:	e841 2300 	strex	r3, r2, [r1]
 8004dae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1e6      	bne.n	8004d84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	3308      	adds	r3, #8
 8004dbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dbe:	6a3b      	ldr	r3, [r7, #32]
 8004dc0:	e853 3f00 	ldrex	r3, [r3]
 8004dc4:	61fb      	str	r3, [r7, #28]
   return(result);
 8004dc6:	69fa      	ldr	r2, [r7, #28]
 8004dc8:	4b1e      	ldr	r3, [pc, #120]	@ (8004e44 <UART_EndRxTransfer+0xc8>)
 8004dca:	4013      	ands	r3, r2
 8004dcc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	3308      	adds	r3, #8
 8004dd4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004dd6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ddc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004dde:	e841 2300 	strex	r3, r2, [r1]
 8004de2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1e5      	bne.n	8004db6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d118      	bne.n	8004e24 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	e853 3f00 	ldrex	r3, [r3]
 8004dfe:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	f023 0310 	bic.w	r3, r3, #16
 8004e06:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e10:	61bb      	str	r3, [r7, #24]
 8004e12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e14:	6979      	ldr	r1, [r7, #20]
 8004e16:	69ba      	ldr	r2, [r7, #24]
 8004e18:	e841 2300 	strex	r3, r2, [r1]
 8004e1c:	613b      	str	r3, [r7, #16]
   return(result);
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1e6      	bne.n	8004df2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2220      	movs	r2, #32
 8004e28:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004e38:	bf00      	nop
 8004e3a:	3754      	adds	r7, #84	@ 0x54
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr
 8004e44:	effffffe 	.word	0xeffffffe

08004e48 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d101      	bne.n	8004e5e <HAL_UARTEx_DisableFifoMode+0x16>
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	e027      	b.n	8004eae <HAL_UARTEx_DisableFifoMode+0x66>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2224      	movs	r2, #36	@ 0x24
 8004e6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f022 0201 	bic.w	r2, r2, #1
 8004e84:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004e8c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2220      	movs	r2, #32
 8004ea0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3714      	adds	r7, #20
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b084      	sub	sp, #16
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
 8004ec2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d101      	bne.n	8004ed2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004ece:	2302      	movs	r3, #2
 8004ed0:	e02d      	b.n	8004f2e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2224      	movs	r2, #36	@ 0x24
 8004ede:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f022 0201 	bic.w	r2, r2, #1
 8004ef8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	683a      	ldr	r2, [r7, #0]
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f850 	bl	8004fb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2220      	movs	r2, #32
 8004f20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3710      	adds	r7, #16
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}

08004f36 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004f36:	b580      	push	{r7, lr}
 8004f38:	b084      	sub	sp, #16
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
 8004f3e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d101      	bne.n	8004f4e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004f4a:	2302      	movs	r3, #2
 8004f4c:	e02d      	b.n	8004faa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2224      	movs	r2, #36	@ 0x24
 8004f5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f022 0201 	bic.w	r2, r2, #1
 8004f74:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	683a      	ldr	r2, [r7, #0]
 8004f86:	430a      	orrs	r2, r1
 8004f88:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 f812 	bl	8004fb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2220      	movs	r2, #32
 8004f9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
	...

08004fb4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d108      	bne.n	8004fd6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004fd4:	e031      	b.n	800503a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004fd6:	2310      	movs	r3, #16
 8004fd8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004fda:	2310      	movs	r3, #16
 8004fdc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	0e5b      	lsrs	r3, r3, #25
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	f003 0307 	and.w	r3, r3, #7
 8004fec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	0f5b      	lsrs	r3, r3, #29
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	f003 0307 	and.w	r3, r3, #7
 8004ffc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ffe:	7bbb      	ldrb	r3, [r7, #14]
 8005000:	7b3a      	ldrb	r2, [r7, #12]
 8005002:	4911      	ldr	r1, [pc, #68]	@ (8005048 <UARTEx_SetNbDataToProcess+0x94>)
 8005004:	5c8a      	ldrb	r2, [r1, r2]
 8005006:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800500a:	7b3a      	ldrb	r2, [r7, #12]
 800500c:	490f      	ldr	r1, [pc, #60]	@ (800504c <UARTEx_SetNbDataToProcess+0x98>)
 800500e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005010:	fb93 f3f2 	sdiv	r3, r3, r2
 8005014:	b29a      	uxth	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800501c:	7bfb      	ldrb	r3, [r7, #15]
 800501e:	7b7a      	ldrb	r2, [r7, #13]
 8005020:	4909      	ldr	r1, [pc, #36]	@ (8005048 <UARTEx_SetNbDataToProcess+0x94>)
 8005022:	5c8a      	ldrb	r2, [r1, r2]
 8005024:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005028:	7b7a      	ldrb	r2, [r7, #13]
 800502a:	4908      	ldr	r1, [pc, #32]	@ (800504c <UARTEx_SetNbDataToProcess+0x98>)
 800502c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800502e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005032:	b29a      	uxth	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800503a:	bf00      	nop
 800503c:	3714      	adds	r7, #20
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	080050e8 	.word	0x080050e8
 800504c:	080050f0 	.word	0x080050f0

08005050 <memset>:
 8005050:	4402      	add	r2, r0
 8005052:	4603      	mov	r3, r0
 8005054:	4293      	cmp	r3, r2
 8005056:	d100      	bne.n	800505a <memset+0xa>
 8005058:	4770      	bx	lr
 800505a:	f803 1b01 	strb.w	r1, [r3], #1
 800505e:	e7f9      	b.n	8005054 <memset+0x4>

08005060 <__libc_init_array>:
 8005060:	b570      	push	{r4, r5, r6, lr}
 8005062:	4d0d      	ldr	r5, [pc, #52]	@ (8005098 <__libc_init_array+0x38>)
 8005064:	4c0d      	ldr	r4, [pc, #52]	@ (800509c <__libc_init_array+0x3c>)
 8005066:	1b64      	subs	r4, r4, r5
 8005068:	10a4      	asrs	r4, r4, #2
 800506a:	2600      	movs	r6, #0
 800506c:	42a6      	cmp	r6, r4
 800506e:	d109      	bne.n	8005084 <__libc_init_array+0x24>
 8005070:	4d0b      	ldr	r5, [pc, #44]	@ (80050a0 <__libc_init_array+0x40>)
 8005072:	4c0c      	ldr	r4, [pc, #48]	@ (80050a4 <__libc_init_array+0x44>)
 8005074:	f000 f818 	bl	80050a8 <_init>
 8005078:	1b64      	subs	r4, r4, r5
 800507a:	10a4      	asrs	r4, r4, #2
 800507c:	2600      	movs	r6, #0
 800507e:	42a6      	cmp	r6, r4
 8005080:	d105      	bne.n	800508e <__libc_init_array+0x2e>
 8005082:	bd70      	pop	{r4, r5, r6, pc}
 8005084:	f855 3b04 	ldr.w	r3, [r5], #4
 8005088:	4798      	blx	r3
 800508a:	3601      	adds	r6, #1
 800508c:	e7ee      	b.n	800506c <__libc_init_array+0xc>
 800508e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005092:	4798      	blx	r3
 8005094:	3601      	adds	r6, #1
 8005096:	e7f2      	b.n	800507e <__libc_init_array+0x1e>
 8005098:	08005100 	.word	0x08005100
 800509c:	08005100 	.word	0x08005100
 80050a0:	08005100 	.word	0x08005100
 80050a4:	08005104 	.word	0x08005104

080050a8 <_init>:
 80050a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050aa:	bf00      	nop
 80050ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ae:	bc08      	pop	{r3}
 80050b0:	469e      	mov	lr, r3
 80050b2:	4770      	bx	lr

080050b4 <_fini>:
 80050b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050b6:	bf00      	nop
 80050b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ba:	bc08      	pop	{r3}
 80050bc:	469e      	mov	lr, r3
 80050be:	4770      	bx	lr
