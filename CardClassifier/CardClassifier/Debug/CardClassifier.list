
CardClassifier.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb8c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000a1dd0  0800ce40  0800ce40  0000de40  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080aec10  080aec10  000afc10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080aec18  080aec18  000afc18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080aec1c  080aec1c  000afc1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000bac  24000000  080aec20  000b0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0004addc  24000bc0  080af7cc  000b0bc0  2**5
                  ALLOC
  8 ._user_heap_stack 00001000  20000000  20000000  000b1000  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000b0bac  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021e7c  00000000  00000000  000b0bda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000044b9  00000000  00000000  000d2a56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 0000a81a  00000000  00000000  000d6f0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001080  00000000  00000000  000e1730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000f04  00000000  00000000  000e27b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00039da1  00000000  00000000  000e36b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000234c6  00000000  00000000  0011d455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001665d1  00000000  00000000  0014091b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000093  00000000  00000000  002a6eec  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000036e8  00000000  00000000  002a6f80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000073  00000000  00000000  002aa668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000bc0 	.word	0x24000bc0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ce14 	.word	0x0800ce14

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000bc4 	.word	0x24000bc4
 80002dc:	0800ce14 	.word	0x0800ce14

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b99e 	b.w	80006e4 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f83a 	bl	8000428 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__aeabi_f2lz>:
 80003c0:	ee07 0a90 	vmov	s15, r0
 80003c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80003c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003cc:	d401      	bmi.n	80003d2 <__aeabi_f2lz+0x12>
 80003ce:	f000 b80b 	b.w	80003e8 <__aeabi_f2ulz>
 80003d2:	eef1 7a67 	vneg.f32	s15, s15
 80003d6:	b508      	push	{r3, lr}
 80003d8:	ee17 0a90 	vmov	r0, s15
 80003dc:	f000 f804 	bl	80003e8 <__aeabi_f2ulz>
 80003e0:	4240      	negs	r0, r0
 80003e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003e6:	bd08      	pop	{r3, pc}

080003e8 <__aeabi_f2ulz>:
 80003e8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000418 <__aeabi_f2ulz+0x30>
 80003ec:	ee07 0a10 	vmov	s14, r0
 80003f0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000420 <__aeabi_f2ulz+0x38>
 80003f4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80003f8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80003fc:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 8000400:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000404:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000408:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800040c:	ee16 1a10 	vmov	r1, s12
 8000410:	ee17 0a90 	vmov	r0, s15
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	00000000 	.word	0x00000000
 800041c:	3df00000 	.word	0x3df00000
 8000420:	00000000 	.word	0x00000000
 8000424:	41f00000 	.word	0x41f00000

08000428 <__udivmoddi4>:
 8000428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800042c:	9d08      	ldr	r5, [sp, #32]
 800042e:	460c      	mov	r4, r1
 8000430:	2b00      	cmp	r3, #0
 8000432:	d14e      	bne.n	80004d2 <__udivmoddi4+0xaa>
 8000434:	4694      	mov	ip, r2
 8000436:	458c      	cmp	ip, r1
 8000438:	4686      	mov	lr, r0
 800043a:	fab2 f282 	clz	r2, r2
 800043e:	d962      	bls.n	8000506 <__udivmoddi4+0xde>
 8000440:	b14a      	cbz	r2, 8000456 <__udivmoddi4+0x2e>
 8000442:	f1c2 0320 	rsb	r3, r2, #32
 8000446:	4091      	lsls	r1, r2
 8000448:	fa20 f303 	lsr.w	r3, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	4319      	orrs	r1, r3
 8000452:	fa00 fe02 	lsl.w	lr, r0, r2
 8000456:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045a:	fa1f f68c 	uxth.w	r6, ip
 800045e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000462:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000466:	fb07 1114 	mls	r1, r7, r4, r1
 800046a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046e:	fb04 f106 	mul.w	r1, r4, r6
 8000472:	4299      	cmp	r1, r3
 8000474:	d90a      	bls.n	800048c <__udivmoddi4+0x64>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f104 30ff 	add.w	r0, r4, #4294967295
 800047e:	f080 8112 	bcs.w	80006a6 <__udivmoddi4+0x27e>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 810f 	bls.w	80006a6 <__udivmoddi4+0x27e>
 8000488:	3c02      	subs	r4, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a59      	subs	r1, r3, r1
 800048e:	fa1f f38e 	uxth.w	r3, lr
 8000492:	fbb1 f0f7 	udiv	r0, r1, r7
 8000496:	fb07 1110 	mls	r1, r7, r0, r1
 800049a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049e:	fb00 f606 	mul.w	r6, r0, r6
 80004a2:	429e      	cmp	r6, r3
 80004a4:	d90a      	bls.n	80004bc <__udivmoddi4+0x94>
 80004a6:	eb1c 0303 	adds.w	r3, ip, r3
 80004aa:	f100 31ff 	add.w	r1, r0, #4294967295
 80004ae:	f080 80fc 	bcs.w	80006aa <__udivmoddi4+0x282>
 80004b2:	429e      	cmp	r6, r3
 80004b4:	f240 80f9 	bls.w	80006aa <__udivmoddi4+0x282>
 80004b8:	4463      	add	r3, ip
 80004ba:	3802      	subs	r0, #2
 80004bc:	1b9b      	subs	r3, r3, r6
 80004be:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80004c2:	2100      	movs	r1, #0
 80004c4:	b11d      	cbz	r5, 80004ce <__udivmoddi4+0xa6>
 80004c6:	40d3      	lsrs	r3, r2
 80004c8:	2200      	movs	r2, #0
 80004ca:	e9c5 3200 	strd	r3, r2, [r5]
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d905      	bls.n	80004e2 <__udivmoddi4+0xba>
 80004d6:	b10d      	cbz	r5, 80004dc <__udivmoddi4+0xb4>
 80004d8:	e9c5 0100 	strd	r0, r1, [r5]
 80004dc:	2100      	movs	r1, #0
 80004de:	4608      	mov	r0, r1
 80004e0:	e7f5      	b.n	80004ce <__udivmoddi4+0xa6>
 80004e2:	fab3 f183 	clz	r1, r3
 80004e6:	2900      	cmp	r1, #0
 80004e8:	d146      	bne.n	8000578 <__udivmoddi4+0x150>
 80004ea:	42a3      	cmp	r3, r4
 80004ec:	d302      	bcc.n	80004f4 <__udivmoddi4+0xcc>
 80004ee:	4290      	cmp	r0, r2
 80004f0:	f0c0 80f0 	bcc.w	80006d4 <__udivmoddi4+0x2ac>
 80004f4:	1a86      	subs	r6, r0, r2
 80004f6:	eb64 0303 	sbc.w	r3, r4, r3
 80004fa:	2001      	movs	r0, #1
 80004fc:	2d00      	cmp	r5, #0
 80004fe:	d0e6      	beq.n	80004ce <__udivmoddi4+0xa6>
 8000500:	e9c5 6300 	strd	r6, r3, [r5]
 8000504:	e7e3      	b.n	80004ce <__udivmoddi4+0xa6>
 8000506:	2a00      	cmp	r2, #0
 8000508:	f040 8090 	bne.w	800062c <__udivmoddi4+0x204>
 800050c:	eba1 040c 	sub.w	r4, r1, ip
 8000510:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000514:	fa1f f78c 	uxth.w	r7, ip
 8000518:	2101      	movs	r1, #1
 800051a:	fbb4 f6f8 	udiv	r6, r4, r8
 800051e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000522:	fb08 4416 	mls	r4, r8, r6, r4
 8000526:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800052a:	fb07 f006 	mul.w	r0, r7, r6
 800052e:	4298      	cmp	r0, r3
 8000530:	d908      	bls.n	8000544 <__udivmoddi4+0x11c>
 8000532:	eb1c 0303 	adds.w	r3, ip, r3
 8000536:	f106 34ff 	add.w	r4, r6, #4294967295
 800053a:	d202      	bcs.n	8000542 <__udivmoddi4+0x11a>
 800053c:	4298      	cmp	r0, r3
 800053e:	f200 80cd 	bhi.w	80006dc <__udivmoddi4+0x2b4>
 8000542:	4626      	mov	r6, r4
 8000544:	1a1c      	subs	r4, r3, r0
 8000546:	fa1f f38e 	uxth.w	r3, lr
 800054a:	fbb4 f0f8 	udiv	r0, r4, r8
 800054e:	fb08 4410 	mls	r4, r8, r0, r4
 8000552:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000556:	fb00 f707 	mul.w	r7, r0, r7
 800055a:	429f      	cmp	r7, r3
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x148>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 34ff 	add.w	r4, r0, #4294967295
 8000566:	d202      	bcs.n	800056e <__udivmoddi4+0x146>
 8000568:	429f      	cmp	r7, r3
 800056a:	f200 80b0 	bhi.w	80006ce <__udivmoddi4+0x2a6>
 800056e:	4620      	mov	r0, r4
 8000570:	1bdb      	subs	r3, r3, r7
 8000572:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000576:	e7a5      	b.n	80004c4 <__udivmoddi4+0x9c>
 8000578:	f1c1 0620 	rsb	r6, r1, #32
 800057c:	408b      	lsls	r3, r1
 800057e:	fa22 f706 	lsr.w	r7, r2, r6
 8000582:	431f      	orrs	r7, r3
 8000584:	fa20 fc06 	lsr.w	ip, r0, r6
 8000588:	fa04 f301 	lsl.w	r3, r4, r1
 800058c:	ea43 030c 	orr.w	r3, r3, ip
 8000590:	40f4      	lsrs	r4, r6
 8000592:	fa00 f801 	lsl.w	r8, r0, r1
 8000596:	0c38      	lsrs	r0, r7, #16
 8000598:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800059c:	fbb4 fef0 	udiv	lr, r4, r0
 80005a0:	fa1f fc87 	uxth.w	ip, r7
 80005a4:	fb00 441e 	mls	r4, r0, lr, r4
 80005a8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005ac:	fb0e f90c 	mul.w	r9, lr, ip
 80005b0:	45a1      	cmp	r9, r4
 80005b2:	fa02 f201 	lsl.w	r2, r2, r1
 80005b6:	d90a      	bls.n	80005ce <__udivmoddi4+0x1a6>
 80005b8:	193c      	adds	r4, r7, r4
 80005ba:	f10e 3aff 	add.w	sl, lr, #4294967295
 80005be:	f080 8084 	bcs.w	80006ca <__udivmoddi4+0x2a2>
 80005c2:	45a1      	cmp	r9, r4
 80005c4:	f240 8081 	bls.w	80006ca <__udivmoddi4+0x2a2>
 80005c8:	f1ae 0e02 	sub.w	lr, lr, #2
 80005cc:	443c      	add	r4, r7
 80005ce:	eba4 0409 	sub.w	r4, r4, r9
 80005d2:	fa1f f983 	uxth.w	r9, r3
 80005d6:	fbb4 f3f0 	udiv	r3, r4, r0
 80005da:	fb00 4413 	mls	r4, r0, r3, r4
 80005de:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005e2:	fb03 fc0c 	mul.w	ip, r3, ip
 80005e6:	45a4      	cmp	ip, r4
 80005e8:	d907      	bls.n	80005fa <__udivmoddi4+0x1d2>
 80005ea:	193c      	adds	r4, r7, r4
 80005ec:	f103 30ff 	add.w	r0, r3, #4294967295
 80005f0:	d267      	bcs.n	80006c2 <__udivmoddi4+0x29a>
 80005f2:	45a4      	cmp	ip, r4
 80005f4:	d965      	bls.n	80006c2 <__udivmoddi4+0x29a>
 80005f6:	3b02      	subs	r3, #2
 80005f8:	443c      	add	r4, r7
 80005fa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005fe:	fba0 9302 	umull	r9, r3, r0, r2
 8000602:	eba4 040c 	sub.w	r4, r4, ip
 8000606:	429c      	cmp	r4, r3
 8000608:	46ce      	mov	lr, r9
 800060a:	469c      	mov	ip, r3
 800060c:	d351      	bcc.n	80006b2 <__udivmoddi4+0x28a>
 800060e:	d04e      	beq.n	80006ae <__udivmoddi4+0x286>
 8000610:	b155      	cbz	r5, 8000628 <__udivmoddi4+0x200>
 8000612:	ebb8 030e 	subs.w	r3, r8, lr
 8000616:	eb64 040c 	sbc.w	r4, r4, ip
 800061a:	fa04 f606 	lsl.w	r6, r4, r6
 800061e:	40cb      	lsrs	r3, r1
 8000620:	431e      	orrs	r6, r3
 8000622:	40cc      	lsrs	r4, r1
 8000624:	e9c5 6400 	strd	r6, r4, [r5]
 8000628:	2100      	movs	r1, #0
 800062a:	e750      	b.n	80004ce <__udivmoddi4+0xa6>
 800062c:	f1c2 0320 	rsb	r3, r2, #32
 8000630:	fa20 f103 	lsr.w	r1, r0, r3
 8000634:	fa0c fc02 	lsl.w	ip, ip, r2
 8000638:	fa24 f303 	lsr.w	r3, r4, r3
 800063c:	4094      	lsls	r4, r2
 800063e:	430c      	orrs	r4, r1
 8000640:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000644:	fa00 fe02 	lsl.w	lr, r0, r2
 8000648:	fa1f f78c 	uxth.w	r7, ip
 800064c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000650:	fb08 3110 	mls	r1, r8, r0, r3
 8000654:	0c23      	lsrs	r3, r4, #16
 8000656:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800065a:	fb00 f107 	mul.w	r1, r0, r7
 800065e:	4299      	cmp	r1, r3
 8000660:	d908      	bls.n	8000674 <__udivmoddi4+0x24c>
 8000662:	eb1c 0303 	adds.w	r3, ip, r3
 8000666:	f100 36ff 	add.w	r6, r0, #4294967295
 800066a:	d22c      	bcs.n	80006c6 <__udivmoddi4+0x29e>
 800066c:	4299      	cmp	r1, r3
 800066e:	d92a      	bls.n	80006c6 <__udivmoddi4+0x29e>
 8000670:	3802      	subs	r0, #2
 8000672:	4463      	add	r3, ip
 8000674:	1a5b      	subs	r3, r3, r1
 8000676:	b2a4      	uxth	r4, r4
 8000678:	fbb3 f1f8 	udiv	r1, r3, r8
 800067c:	fb08 3311 	mls	r3, r8, r1, r3
 8000680:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000684:	fb01 f307 	mul.w	r3, r1, r7
 8000688:	42a3      	cmp	r3, r4
 800068a:	d908      	bls.n	800069e <__udivmoddi4+0x276>
 800068c:	eb1c 0404 	adds.w	r4, ip, r4
 8000690:	f101 36ff 	add.w	r6, r1, #4294967295
 8000694:	d213      	bcs.n	80006be <__udivmoddi4+0x296>
 8000696:	42a3      	cmp	r3, r4
 8000698:	d911      	bls.n	80006be <__udivmoddi4+0x296>
 800069a:	3902      	subs	r1, #2
 800069c:	4464      	add	r4, ip
 800069e:	1ae4      	subs	r4, r4, r3
 80006a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80006a4:	e739      	b.n	800051a <__udivmoddi4+0xf2>
 80006a6:	4604      	mov	r4, r0
 80006a8:	e6f0      	b.n	800048c <__udivmoddi4+0x64>
 80006aa:	4608      	mov	r0, r1
 80006ac:	e706      	b.n	80004bc <__udivmoddi4+0x94>
 80006ae:	45c8      	cmp	r8, r9
 80006b0:	d2ae      	bcs.n	8000610 <__udivmoddi4+0x1e8>
 80006b2:	ebb9 0e02 	subs.w	lr, r9, r2
 80006b6:	eb63 0c07 	sbc.w	ip, r3, r7
 80006ba:	3801      	subs	r0, #1
 80006bc:	e7a8      	b.n	8000610 <__udivmoddi4+0x1e8>
 80006be:	4631      	mov	r1, r6
 80006c0:	e7ed      	b.n	800069e <__udivmoddi4+0x276>
 80006c2:	4603      	mov	r3, r0
 80006c4:	e799      	b.n	80005fa <__udivmoddi4+0x1d2>
 80006c6:	4630      	mov	r0, r6
 80006c8:	e7d4      	b.n	8000674 <__udivmoddi4+0x24c>
 80006ca:	46d6      	mov	lr, sl
 80006cc:	e77f      	b.n	80005ce <__udivmoddi4+0x1a6>
 80006ce:	4463      	add	r3, ip
 80006d0:	3802      	subs	r0, #2
 80006d2:	e74d      	b.n	8000570 <__udivmoddi4+0x148>
 80006d4:	4606      	mov	r6, r0
 80006d6:	4623      	mov	r3, r4
 80006d8:	4608      	mov	r0, r1
 80006da:	e70f      	b.n	80004fc <__udivmoddi4+0xd4>
 80006dc:	3e02      	subs	r6, #2
 80006de:	4463      	add	r3, ip
 80006e0:	e730      	b.n	8000544 <__udivmoddi4+0x11c>
 80006e2:	bf00      	nop

080006e4 <__aeabi_idiv0>:
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop

080006e8 <ov7670_write>:
//DCMI_HandleTypeDef *sp_hdcmi;
//DMA_HandleTypeDef  *sp_hdma_dcmi;
I2C_HandleTypeDef  *sp_hi2c;
uint32_t    s_destAddressForContiuousMode;
uint32_t ov7670_write(uint8_t regAddr, uint8_t data)
{
 80006e8:	b530      	push	{r4, r5, lr}
 80006ea:	b09d      	sub	sp, #116	@ 0x74
  uint16_t SLAVE_ADDR = 0x42;
  HAL_StatusTypeDef ret;
  uint8_t buffer[2] = {regAddr, data};
  ret = HAL_I2C_Master_Transmit(sp_hi2c, 0x42, &buffer, 2, HAL_MAX_DELAY);
 80006ec:	f04f 33ff 	mov.w	r3, #4294967295
  char temp[100];
  sprintf(temp, "Write Status: %d\r\n", ret);
  HAL_UART_Transmit(&huart4,temp,strlen(temp),10);
 80006f0:	4d13      	ldr	r5, [pc, #76]	@ (8000740 <ov7670_write+0x58>)
  uint8_t buffer[2] = {regAddr, data};
 80006f2:	f88d 0008 	strb.w	r0, [sp, #8]
  ret = HAL_I2C_Master_Transmit(sp_hi2c, 0x42, &buffer, 2, HAL_MAX_DELAY);
 80006f6:	aa02      	add	r2, sp, #8
 80006f8:	4812      	ldr	r0, [pc, #72]	@ (8000744 <ov7670_write+0x5c>)
 80006fa:	9300      	str	r3, [sp, #0]
 80006fc:	2302      	movs	r3, #2
  uint8_t buffer[2] = {regAddr, data};
 80006fe:	f88d 1009 	strb.w	r1, [sp, #9]
  ret = HAL_I2C_Master_Transmit(sp_hi2c, 0x42, &buffer, 2, HAL_MAX_DELAY);
 8000702:	2142      	movs	r1, #66	@ 0x42
 8000704:	6800      	ldr	r0, [r0, #0]
 8000706:	f002 ffc3 	bl	8003690 <HAL_I2C_Master_Transmit>
  sprintf(temp, "Write Status: %d\r\n", ret);
 800070a:	490f      	ldr	r1, [pc, #60]	@ (8000748 <ov7670_write+0x60>)
 800070c:	4602      	mov	r2, r0
  ret = HAL_I2C_Master_Transmit(sp_hi2c, 0x42, &buffer, 2, HAL_MAX_DELAY);
 800070e:	4604      	mov	r4, r0
  sprintf(temp, "Write Status: %d\r\n", ret);
 8000710:	a803      	add	r0, sp, #12
 8000712:	f00b fa2b 	bl	800bb6c <siprintf>
  HAL_UART_Transmit(&huart4,temp,strlen(temp),10);
 8000716:	a803      	add	r0, sp, #12
 8000718:	f7ff fde2 	bl	80002e0 <strlen>
 800071c:	a903      	add	r1, sp, #12
 800071e:	b282      	uxth	r2, r0
 8000720:	230a      	movs	r3, #10
 8000722:	4628      	mov	r0, r5
 8000724:	f005 f80d 	bl	8005742 <HAL_UART_Transmit>
//  sprintf(temp, "Data: %x is now written into address: %x\r\n",data, regAddr);
  HAL_UART_Transmit(&huart4,temp,strlen(temp),10);
 8000728:	a803      	add	r0, sp, #12
 800072a:	f7ff fdd9 	bl	80002e0 <strlen>
 800072e:	230a      	movs	r3, #10
 8000730:	b282      	uxth	r2, r0
 8000732:	a903      	add	r1, sp, #12
 8000734:	4628      	mov	r0, r5
 8000736:	f005 f804 	bl	8005742 <HAL_UART_Transmit>
  return ret;
}
 800073a:	4620      	mov	r0, r4
 800073c:	b01d      	add	sp, #116	@ 0x74
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	24000be8 	.word	0x24000be8
 8000744:	24000be0 	.word	0x24000be0
 8000748:	0800ce50 	.word	0x0800ce50

0800074c <ov7670_read>:

uint32_t ov7670_read(uint8_t regAddr, uint8_t *data)
{
 800074c:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret;
  uint16_t SLAVE_ADDR = 0x42;
  ret = HAL_I2C_Master_Transmit(sp_hi2c, 0x43, &regAddr, 1, HAL_MAX_DELAY);
 800074e:	4c23      	ldr	r4, [pc, #140]	@ (80007dc <ov7670_read+0x90>)
{
 8000750:	b09f      	sub	sp, #124	@ 0x7c
  ret = HAL_I2C_Master_Transmit(sp_hi2c, 0x43, &regAddr, 1, HAL_MAX_DELAY);
 8000752:	f04f 37ff 	mov.w	r7, #4294967295
{
 8000756:	460d      	mov	r5, r1
  ret = HAL_I2C_Master_Transmit(sp_hi2c, 0x43, &regAddr, 1, HAL_MAX_DELAY);
 8000758:	2301      	movs	r3, #1
 800075a:	f10d 020f 	add.w	r2, sp, #15
{
 800075e:	f88d 000f 	strb.w	r0, [sp, #15]
  ret = HAL_I2C_Master_Transmit(sp_hi2c, 0x43, &regAddr, 1, HAL_MAX_DELAY);
 8000762:	2143      	movs	r1, #67	@ 0x43
 8000764:	9700      	str	r7, [sp, #0]
 8000766:	6820      	ldr	r0, [r4, #0]
 8000768:	f002 ff92 	bl	8003690 <HAL_I2C_Master_Transmit>
  char buffer [100];
  sprintf(buffer, "Read_Transmit Status: %d\r\n", ret);
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 800076c:	4e1c      	ldr	r6, [pc, #112]	@ (80007e0 <ov7670_read+0x94>)
  ret = HAL_I2C_Master_Transmit(sp_hi2c, 0x43, &regAddr, 1, HAL_MAX_DELAY);
 800076e:	4602      	mov	r2, r0
  sprintf(buffer, "Read_Transmit Status: %d\r\n", ret);
 8000770:	491c      	ldr	r1, [pc, #112]	@ (80007e4 <ov7670_read+0x98>)
 8000772:	a805      	add	r0, sp, #20
 8000774:	f00b f9fa 	bl	800bb6c <siprintf>
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8000778:	a805      	add	r0, sp, #20
 800077a:	f7ff fdb1 	bl	80002e0 <strlen>
 800077e:	a905      	add	r1, sp, #20
 8000780:	b282      	uxth	r2, r0
 8000782:	230a      	movs	r3, #10
 8000784:	4630      	mov	r0, r6
 8000786:	f004 ffdc 	bl	8005742 <HAL_UART_Transmit>
  ret = HAL_I2C_Master_Receive(sp_hi2c, 0x43, data, 1, HAL_MAX_DELAY);
 800078a:	2301      	movs	r3, #1
 800078c:	462a      	mov	r2, r5
 800078e:	9700      	str	r7, [sp, #0]
 8000790:	2143      	movs	r1, #67	@ 0x43
 8000792:	6820      	ldr	r0, [r4, #0]
 8000794:	f003 f828 	bl	80037e8 <HAL_I2C_Master_Receive>
  sprintf(buffer, "Read_Receive Status: %d\r\n", ret);
 8000798:	4913      	ldr	r1, [pc, #76]	@ (80007e8 <ov7670_read+0x9c>)
 800079a:	4602      	mov	r2, r0
  ret = HAL_I2C_Master_Receive(sp_hi2c, 0x43, data, 1, HAL_MAX_DELAY);
 800079c:	4604      	mov	r4, r0
  sprintf(buffer, "Read_Receive Status: %d\r\n", ret);
 800079e:	a805      	add	r0, sp, #20
 80007a0:	f00b f9e4 	bl	800bb6c <siprintf>
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 80007a4:	a805      	add	r0, sp, #20
 80007a6:	f7ff fd9b 	bl	80002e0 <strlen>
 80007aa:	a905      	add	r1, sp, #20
 80007ac:	b282      	uxth	r2, r0
 80007ae:	230a      	movs	r3, #10
 80007b0:	4630      	mov	r0, r6
 80007b2:	f004 ffc6 	bl	8005742 <HAL_UART_Transmit>
  sprintf(buffer, "Address: %x; Data: %x\r\n", regAddr, *data);
 80007b6:	782b      	ldrb	r3, [r5, #0]
 80007b8:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80007bc:	a805      	add	r0, sp, #20
 80007be:	490b      	ldr	r1, [pc, #44]	@ (80007ec <ov7670_read+0xa0>)
 80007c0:	f00b f9d4 	bl	800bb6c <siprintf>
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 80007c4:	a805      	add	r0, sp, #20
 80007c6:	f7ff fd8b 	bl	80002e0 <strlen>
 80007ca:	230a      	movs	r3, #10
 80007cc:	b282      	uxth	r2, r0
 80007ce:	a905      	add	r1, sp, #20
 80007d0:	4630      	mov	r0, r6
 80007d2:	f004 ffb6 	bl	8005742 <HAL_UART_Transmit>
  return ret;
}
 80007d6:	4620      	mov	r0, r4
 80007d8:	b01f      	add	sp, #124	@ 0x7c
 80007da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007dc:	24000be0 	.word	0x24000be0
 80007e0:	24000be8 	.word	0x24000be8
 80007e4:	0800ce63 	.word	0x0800ce63
 80007e8:	0800ce7e 	.word	0x0800ce7e
 80007ec:	0800ce98 	.word	0x0800ce98

080007f0 <ov7670_init>:

uint32_t ov7670_init(I2C_HandleTypeDef *p_hi2c)
{
 80007f0:	b510      	push	{r4, lr}
//  sp_hdcmi     = p_hdcmi;
//  sp_hdma_dcmi = p_hdma_dcmi;
  sp_hi2c      = p_hi2c;
 80007f2:	4b1a      	ldr	r3, [pc, #104]	@ (800085c <ov7670_init+0x6c>)
{
 80007f4:	b09a      	sub	sp, #104	@ 0x68
 // s_destAddressForContiuousMode = 0;

  HAL_GPIO_WritePin(CAM_RST_GPIO_Port, CAM_RST_Pin, GPIO_PIN_RESET);
 80007f6:	4c1a      	ldr	r4, [pc, #104]	@ (8000860 <ov7670_init+0x70>)
 80007f8:	2200      	movs	r2, #0
  sp_hi2c      = p_hi2c;
 80007fa:	6018      	str	r0, [r3, #0]
  HAL_GPIO_WritePin(CAM_RST_GPIO_Port, CAM_RST_Pin, GPIO_PIN_RESET);
 80007fc:	2120      	movs	r1, #32
 80007fe:	4620      	mov	r0, r4
 8000800:	f002 fd64 	bl	80032cc <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000804:	2064      	movs	r0, #100	@ 0x64
 8000806:	f000 fe8b 	bl	8001520 <HAL_Delay>
  HAL_GPIO_WritePin(CAM_RST_GPIO_Port, CAM_RST_Pin, GPIO_PIN_SET);
 800080a:	2201      	movs	r2, #1
 800080c:	2120      	movs	r1, #32
 800080e:	4620      	mov	r0, r4
 8000810:	f002 fd5c 	bl	80032cc <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000814:	2064      	movs	r0, #100	@ 0x64
 8000816:	f000 fe83 	bl	8001520 <HAL_Delay>
  char temp[100];
  sprintf(temp, "Initializing OV7670...\r\n");
 800081a:	4912      	ldr	r1, [pc, #72]	@ (8000864 <ov7670_init+0x74>)
 800081c:	a801      	add	r0, sp, #4
 800081e:	f00b fb42 	bl	800bea6 <strcpy>
  ov7670_write(0x12, 0x80);  // RESET
 8000822:	2180      	movs	r1, #128	@ 0x80
 8000824:	2012      	movs	r0, #18
 8000826:	f7ff ff5f 	bl	80006e8 <ov7670_write>
  HAL_Delay(100);
 800082a:	2064      	movs	r0, #100	@ 0x64
 800082c:	f000 fe78 	bl	8001520 <HAL_Delay>
  HAL_UART_Transmit(&huart4,temp,strlen(temp),10);
 8000830:	a801      	add	r0, sp, #4
 8000832:	f7ff fd55 	bl	80002e0 <strlen>
 8000836:	230a      	movs	r3, #10
 8000838:	b282      	uxth	r2, r0
 800083a:	a901      	add	r1, sp, #4
 800083c:	480a      	ldr	r0, [pc, #40]	@ (8000868 <ov7670_init+0x78>)
 800083e:	f004 ff80 	bl	8005742 <HAL_UART_Transmit>
  HAL_Delay(100);
 8000842:	2064      	movs	r0, #100	@ 0x64
 8000844:	f000 fe6c 	bl	8001520 <HAL_Delay>
  uint8_t buffer[4];
  ov7670_read(0x0F, buffer);
 8000848:	4669      	mov	r1, sp
 800084a:	200f      	movs	r0, #15
 800084c:	f7ff ff7e 	bl	800074c <ov7670_read>
  HAL_Delay(100);
 8000850:	2064      	movs	r0, #100	@ 0x64
 8000852:	f000 fe65 	bl	8001520 <HAL_Delay>


  return 1;
}
 8000856:	2001      	movs	r0, #1
 8000858:	b01a      	add	sp, #104	@ 0x68
 800085a:	bd10      	pop	{r4, pc}
 800085c:	24000be0 	.word	0x24000be0
 8000860:	58020800 	.word	0x58020800
 8000864:	0800ceb0 	.word	0x0800ceb0
 8000868:	24000be8 	.word	0x24000be8

0800086c <ov7670_stopCap>:

//DCMI Data Transfer
static uint32_t s_dstAddress;

uint32_t ov7670_stopCap()
{
 800086c:	b508      	push	{r3, lr}
  char buffer [100];
  HAL_StatusTypeDef ret;
  ret = HAL_DCMI_Stop(sp_hdcmi);
 800086e:	4b04      	ldr	r3, [pc, #16]	@ (8000880 <ov7670_stopCap+0x14>)
 8000870:	6818      	ldr	r0, [r3, #0]
 8000872:	f001 f827 	bl	80018c4 <HAL_DCMI_Stop>
  s_dstAddress = 0;
 8000876:	2000      	movs	r0, #0
 8000878:	4b02      	ldr	r3, [pc, #8]	@ (8000884 <ov7670_stopCap+0x18>)
 800087a:	6018      	str	r0, [r3, #0]
  return 0;
}
 800087c:	bd08      	pop	{r3, pc}
 800087e:	bf00      	nop
 8000880:	24000000 	.word	0x24000000
 8000884:	24000bdc 	.word	0x24000bdc

08000888 <ov7670_startCap>:

uint32_t ov7670_startCap(uint32_t destAddress)
{
 8000888:	b510      	push	{r4, lr}
 800088a:	b09a      	sub	sp, #104	@ 0x68
 800088c:	4604      	mov	r4, r0
  HAL_StatusTypeDef ret;
  ov7670_stopCap();
 800088e:	f7ff ffed 	bl	800086c <ov7670_stopCap>
  /* note: continuous mode automatically invokes DCMI, but DMA needs to be invoked manually */
  s_dstAddress = destAddress;
 8000892:	4b0f      	ldr	r3, [pc, #60]	@ (80008d0 <ov7670_startCap+0x48>)
  ret = HAL_DCMI_Start_DMA(sp_hdcmi,1, destAddress, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT / 2); //mode 1 for single frame
 8000894:	480f      	ldr	r0, [pc, #60]	@ (80008d4 <ov7670_startCap+0x4c>)
 8000896:	4622      	mov	r2, r4
 8000898:	2101      	movs	r1, #1
  s_dstAddress = destAddress;
 800089a:	601c      	str	r4, [r3, #0]
  ret = HAL_DCMI_Start_DMA(sp_hdcmi,1, destAddress, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT / 2); //mode 1 for single frame
 800089c:	6800      	ldr	r0, [r0, #0]
 800089e:	f44f 5346 	mov.w	r3, #12672	@ 0x3180
 80008a2:	f000 ffa3 	bl	80017ec <HAL_DCMI_Start_DMA>
 80008a6:	4604      	mov	r4, r0
  ov7670_stopCap();
 80008a8:	f7ff ffe0 	bl	800086c <ov7670_stopCap>
  char buffer [100];
  sprintf(buffer, "Return code: %d\r\n", ret);
 80008ac:	490a      	ldr	r1, [pc, #40]	@ (80008d8 <ov7670_startCap+0x50>)
 80008ae:	4622      	mov	r2, r4
 80008b0:	a801      	add	r0, sp, #4
 80008b2:	f00b f95b 	bl	800bb6c <siprintf>
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 80008b6:	a801      	add	r0, sp, #4
 80008b8:	f7ff fd12 	bl	80002e0 <strlen>
 80008bc:	230a      	movs	r3, #10
 80008be:	b282      	uxth	r2, r0
 80008c0:	a901      	add	r1, sp, #4
 80008c2:	4806      	ldr	r0, [pc, #24]	@ (80008dc <ov7670_startCap+0x54>)
 80008c4:	f004 ff3d 	bl	8005742 <HAL_UART_Transmit>
  return 0;
}
 80008c8:	2000      	movs	r0, #0
 80008ca:	b01a      	add	sp, #104	@ 0x68
 80008cc:	bd10      	pop	{r4, pc}
 80008ce:	bf00      	nop
 80008d0:	24000bdc 	.word	0x24000bdc
 80008d4:	24000000 	.word	0x24000000
 80008d8:	0800cec9 	.word	0x0800cec9
 80008dc:	24000be8 	.word	0x24000be8

080008e0 <HAL_DCMI_FrameEventCallback>:

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
  if(s_dstAddress != 0) {
 80008e0:	4b05      	ldr	r3, [pc, #20]	@ (80008f8 <HAL_DCMI_FrameEventCallback+0x18>)
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	b132      	cbz	r2, 80008f4 <HAL_DCMI_FrameEventCallback+0x14>
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, s_dstAddress, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT / 2);
 80008e6:	6801      	ldr	r1, [r0, #0]
 80008e8:	f44f 5346 	mov.w	r3, #12672	@ 0x3180
 80008ec:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 80008ee:	3128      	adds	r1, #40	@ 0x28
 80008f0:	f001 bbd4 	b.w	800209c <HAL_DMA_Start_IT>
  }
}
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	24000bdc 	.word	0x24000bdc

080008fc <lcd_send_cmd>:
#include "lcd.h"
#include "main.h"
I2C_HandleTypeDef  *lcd_sp_hi2c;
uint16_t SLAVE_ADDRESS_LCD = 0x4E;
void lcd_send_cmd (char cmd)
{
 80008fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80008fe:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
	data_l = ((cmd<<4)&0xf0);
 8000902:	0100      	lsls	r0, r0, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
	data_t[1] = data_u|0x08;  //en=0, rs=0
	data_t[2] = data_l|0x0C;  //en=1, rs=0
	data_t[3] = data_l|0x08;  //en=0, rs=0
	uint16_t ret = HAL_I2C_Master_Transmit (lcd_sp_hi2c, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000904:	490e      	ldr	r1, [pc, #56]	@ (8000940 <lcd_send_cmd+0x44>)
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000906:	f043 020c 	orr.w	r2, r3, #12
	data_l = ((cmd<<4)&0xf0);
 800090a:	b2c0      	uxtb	r0, r0
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800090c:	f043 0308 	orr.w	r3, r3, #8
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000910:	f88d 200c 	strb.w	r2, [sp, #12]
	uint16_t ret = HAL_I2C_Master_Transmit (lcd_sp_hi2c, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000914:	aa03      	add	r2, sp, #12
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000916:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800091a:	f040 030c 	orr.w	r3, r0, #12
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800091e:	f040 0008 	orr.w	r0, r0, #8
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000922:	f88d 300e 	strb.w	r3, [sp, #14]
	uint16_t ret = HAL_I2C_Master_Transmit (lcd_sp_hi2c, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000926:	2364      	movs	r3, #100	@ 0x64
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000928:	f88d 000f 	strb.w	r0, [sp, #15]
	uint16_t ret = HAL_I2C_Master_Transmit (lcd_sp_hi2c, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800092c:	4805      	ldr	r0, [pc, #20]	@ (8000944 <lcd_send_cmd+0x48>)
 800092e:	9300      	str	r3, [sp, #0]
 8000930:	2304      	movs	r3, #4
 8000932:	8809      	ldrh	r1, [r1, #0]
 8000934:	6800      	ldr	r0, [r0, #0]
 8000936:	f002 feab 	bl	8003690 <HAL_I2C_Master_Transmit>
}
 800093a:	b005      	add	sp, #20
 800093c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000940:	24000004 	.word	0x24000004
 8000944:	24000be4 	.word	0x24000be4

08000948 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000948:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800094a:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
	data_l = ((data<<4)&0xf0);
 800094e:	0100      	lsls	r0, r0, #4
	data_t[0] = data_u|0x0D;  //en=1, rs=1
	data_t[1] = data_u|0x09;  //en=0, rs=1
	data_t[2] = data_l|0x0D;  //en=1, rs=1
	data_t[3] = data_l|0x09;  //en=0, rs=1
	HAL_I2C_Master_Transmit (lcd_sp_hi2c, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000950:	490e      	ldr	r1, [pc, #56]	@ (800098c <lcd_send_data+0x44>)
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8000952:	f043 020d 	orr.w	r2, r3, #13
	data_l = ((data<<4)&0xf0);
 8000956:	b2c0      	uxtb	r0, r0
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8000958:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 800095c:	f88d 200c 	strb.w	r2, [sp, #12]
	HAL_I2C_Master_Transmit (lcd_sp_hi2c, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000960:	aa03      	add	r2, sp, #12
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8000962:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8000966:	f040 030d 	orr.w	r3, r0, #13
	data_t[3] = data_l|0x09;  //en=0, rs=1
 800096a:	f040 0009 	orr.w	r0, r0, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 800096e:	f88d 300e 	strb.w	r3, [sp, #14]
	HAL_I2C_Master_Transmit (lcd_sp_hi2c, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000972:	2364      	movs	r3, #100	@ 0x64
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8000974:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (lcd_sp_hi2c, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000978:	4805      	ldr	r0, [pc, #20]	@ (8000990 <lcd_send_data+0x48>)
 800097a:	9300      	str	r3, [sp, #0]
 800097c:	2304      	movs	r3, #4
 800097e:	8809      	ldrh	r1, [r1, #0]
 8000980:	6800      	ldr	r0, [r0, #0]
 8000982:	f002 fe85 	bl	8003690 <HAL_I2C_Master_Transmit>
}
 8000986:	b005      	add	sp, #20
 8000988:	f85d fb04 	ldr.w	pc, [sp], #4
 800098c:	24000004 	.word	0x24000004
 8000990:	24000be4 	.word	0x24000be4

08000994 <lcd_send_string>:
void lcd_send_string (char *str)
{
 8000994:	b510      	push	{r4, lr}
 8000996:	1e44      	subs	r4, r0, #1
	while (*str) {
 8000998:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800099c:	b903      	cbnz	r3, 80009a0 <lcd_send_string+0xc>
		HAL_Delay(10);
		lcd_send_data (*str++);
	}
}
 800099e:	bd10      	pop	{r4, pc}
		HAL_Delay(10);
 80009a0:	200a      	movs	r0, #10
 80009a2:	f000 fdbd 	bl	8001520 <HAL_Delay>
		lcd_send_data (*str++);
 80009a6:	7820      	ldrb	r0, [r4, #0]
 80009a8:	f7ff ffce 	bl	8000948 <lcd_send_data>
 80009ac:	e7f4      	b.n	8000998 <lcd_send_string+0x4>
	...

080009b0 <lcd_init>:

void lcd_init (I2C_HandleTypeDef* p_hi2c)
{
 80009b0:	b508      	push	{r3, lr}
	lcd_sp_hi2c = p_hi2c;
 80009b2:	4b20      	ldr	r3, [pc, #128]	@ (8000a34 <lcd_init+0x84>)
 80009b4:	6018      	str	r0, [r3, #0]
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80009b6:	2032      	movs	r0, #50	@ 0x32
 80009b8:	f000 fdb2 	bl	8001520 <HAL_Delay>
	lcd_send_cmd (0x30);
 80009bc:	2030      	movs	r0, #48	@ 0x30
 80009be:	f7ff ff9d 	bl	80008fc <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80009c2:	2005      	movs	r0, #5
 80009c4:	f000 fdac 	bl	8001520 <HAL_Delay>
	lcd_send_cmd (0x30);
 80009c8:	2030      	movs	r0, #48	@ 0x30
 80009ca:	f7ff ff97 	bl	80008fc <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80009ce:	2001      	movs	r0, #1
 80009d0:	f000 fda6 	bl	8001520 <HAL_Delay>
	lcd_send_cmd (0x30);
 80009d4:	2030      	movs	r0, #48	@ 0x30
 80009d6:	f7ff ff91 	bl	80008fc <lcd_send_cmd>
	HAL_Delay(10);
 80009da:	200a      	movs	r0, #10
 80009dc:	f000 fda0 	bl	8001520 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80009e0:	2020      	movs	r0, #32
 80009e2:	f7ff ff8b 	bl	80008fc <lcd_send_cmd>
	HAL_Delay(10);
 80009e6:	200a      	movs	r0, #10
 80009e8:	f000 fd9a 	bl	8001520 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80009ec:	2028      	movs	r0, #40	@ 0x28
 80009ee:	f7ff ff85 	bl	80008fc <lcd_send_cmd>
	HAL_Delay(1);
 80009f2:	2001      	movs	r0, #1
 80009f4:	f000 fd94 	bl	8001520 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80009f8:	2008      	movs	r0, #8
 80009fa:	f7ff ff7f 	bl	80008fc <lcd_send_cmd>
	HAL_Delay(1);
 80009fe:	2001      	movs	r0, #1
 8000a00:	f000 fd8e 	bl	8001520 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000a04:	2001      	movs	r0, #1
 8000a06:	f7ff ff79 	bl	80008fc <lcd_send_cmd>
	HAL_Delay(1);
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	f000 fd88 	bl	8001520 <HAL_Delay>
	HAL_Delay(1);
 8000a10:	2001      	movs	r0, #1
 8000a12:	f000 fd85 	bl	8001520 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000a16:	2006      	movs	r0, #6
 8000a18:	f7ff ff70 	bl	80008fc <lcd_send_cmd>
	HAL_Delay(1);
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	f000 fd7f 	bl	8001520 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000a22:	200c      	movs	r0, #12
 8000a24:	f7ff ff6a 	bl	80008fc <lcd_send_cmd>
	lcd_send_string("");
 8000a28:	4803      	ldr	r0, [pc, #12]	@ (8000a38 <lcd_init+0x88>)
}
 8000a2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lcd_send_string("");
 8000a2e:	f7ff bfb1 	b.w	8000994 <lcd_send_string>
 8000a32:	bf00      	nop
 8000a34:	24000be4 	.word	0x24000be4
 8000a38:	0800cec8 	.word	0x0800cec8

08000a3c <lcd_clear>:

void lcd_clear() {
 8000a3c:	b508      	push	{r3, lr}
	HAL_Delay(500);
 8000a3e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a42:	f000 fd6d 	bl	8001520 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000a46:	2001      	movs	r0, #1
 8000a48:	f7ff ff58 	bl	80008fc <lcd_send_cmd>
	HAL_Delay(1);
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	f000 fd67 	bl	8001520 <HAL_Delay>
	lcd_send_string("");
 8000a52:	4804      	ldr	r0, [pc, #16]	@ (8000a64 <lcd_clear+0x28>)
 8000a54:	f7ff ff9e 	bl	8000994 <lcd_send_string>
	HAL_Delay(500);
 8000a58:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
}
 8000a5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(500);
 8000a60:	f000 bd5e 	b.w	8001520 <HAL_Delay>
 8000a64:	0800cec8 	.word	0x0800cec8

08000a68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a68:	b530      	push	{r4, r5, lr}
 8000a6a:	b09d      	sub	sp, #116	@ 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a6c:	224c      	movs	r2, #76	@ 0x4c
 8000a6e:	2100      	movs	r1, #0
 8000a70:	a809      	add	r0, sp, #36	@ 0x24
 8000a72:	f00b f98d 	bl	800bd90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a76:	2220      	movs	r2, #32
 8000a78:	2100      	movs	r1, #0
 8000a7a:	a801      	add	r0, sp, #4
 8000a7c:	f00b f988 	bl	800bd90 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a80:	2002      	movs	r0, #2
 8000a82:	f002 ff95 	bl	80039b0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a86:	2300      	movs	r3, #0
 8000a88:	9300      	str	r3, [sp, #0]
 8000a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8000b04 <SystemClock_Config+0x9c>)
 8000a8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a8e:	f022 0201 	bic.w	r2, r2, #1
 8000a92:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a96:	4a1c      	ldr	r2, [pc, #112]	@ (8000b08 <SystemClock_Config+0xa0>)
 8000a98:	f003 0301 	and.w	r3, r3, #1
 8000a9c:	9300      	str	r3, [sp, #0]
 8000a9e:	6993      	ldr	r3, [r2, #24]
 8000aa0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000aa4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aa8:	6193      	str	r3, [r2, #24]
 8000aaa:	6993      	ldr	r3, [r2, #24]
 8000aac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ab0:	9300      	str	r3, [sp, #0]
 8000ab2:	9b00      	ldr	r3, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ab4:	6993      	ldr	r3, [r2, #24]
 8000ab6:	049b      	lsls	r3, r3, #18
 8000ab8:	d5fc      	bpl.n	8000ab4 <SystemClock_Config+0x4c>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aba:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000abc:	2401      	movs	r4, #1
 8000abe:	2540      	movs	r5, #64	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac0:	a809      	add	r0, sp, #36	@ 0x24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ac2:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ac4:	2300      	movs	r3, #0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ac6:	e9cd 450c 	strd	r4, r5, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000aca:	9312      	str	r3, [sp, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000acc:	f002 ff94 	bl	80039f8 <HAL_RCC_OscConfig>
 8000ad0:	b108      	cbz	r0, 8000ad6 <SystemClock_Config+0x6e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad2:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <SystemClock_Config+0x6c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad6:	233f      	movs	r3, #63	@ 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ad8:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ada:	e9cd 3001 	strd	r3, r0, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000ade:	e9cd 0003 	strd	r0, r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ae2:	e9cd 0505 	strd	r0, r5, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000ae6:	e9cd 0007 	strd	r0, r0, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000aea:	a801      	add	r0, sp, #4
 8000aec:	f003 fb20 	bl	8004130 <HAL_RCC_ClockConfig>
 8000af0:	4601      	mov	r1, r0
 8000af2:	b108      	cbz	r0, 8000af8 <SystemClock_Config+0x90>
 8000af4:	b672      	cpsid	i
  while (1)
 8000af6:	e7fe      	b.n	8000af6 <SystemClock_Config+0x8e>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_3);
 8000af8:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000afc:	f003 fa28 	bl	8003f50 <HAL_RCC_MCOConfig>
}
 8000b00:	b01d      	add	sp, #116	@ 0x74
 8000b02:	bd30      	pop	{r4, r5, pc}
 8000b04:	58000400 	.word	0x58000400
 8000b08:	58024800 	.word	0x58024800

08000b0c <main>:
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000b0c:	4bb9      	ldr	r3, [pc, #740]	@ (8000df4 <main+0x2e8>)
 8000b0e:	695a      	ldr	r2, [r3, #20]
{
 8000b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b12:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
 8000b16:	f5ad 4d46 	sub.w	sp, sp, #50688	@ 0xc600
 8000b1a:	b0bb      	sub	sp, #236	@ 0xec
 8000b1c:	d111      	bne.n	8000b42 <main+0x36>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b1e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000b22:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000b26:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000b2a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000b2e:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000b32:	695a      	ldr	r2, [r3, #20]
 8000b34:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000b38:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b3a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000b3e:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000b42:	4aac      	ldr	r2, [pc, #688]	@ (8000df4 <main+0x2e8>)
 8000b44:	6953      	ldr	r3, [r2, #20]
 8000b46:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 8000b4a:	d123      	bne.n	8000b94 <main+0x88>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000b4c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000b50:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000b54:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b58:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000b5c:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000b60:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000b64:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b66:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000b6a:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b6c:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000b70:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b72:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 8000b76:	d2f9      	bcs.n	8000b6c <main+0x60>
    } while(sets-- != 0U);
 8000b78:	3b20      	subs	r3, #32
 8000b7a:	f113 0f20 	cmn.w	r3, #32
 8000b7e:	d1f2      	bne.n	8000b66 <main+0x5a>
 8000b80:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000b84:	6953      	ldr	r3, [r2, #20]
 8000b86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b8a:	6153      	str	r3, [r2, #20]
 8000b8c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000b90:	f3bf 8f6f 	isb	sy
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b94:	4d98      	ldr	r5, [pc, #608]	@ (8000df8 <main+0x2ec>)
  HAL_Init();
 8000b96:	f000 fc83 	bl	80014a0 <HAL_Init>
  SystemClock_Config();
 8000b9a:	f7ff ff65 	bl	8000a68 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9e:	2214      	movs	r2, #20
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	a83a      	add	r0, sp, #232	@ 0xe8
 8000ba4:	f00b f8f4 	bl	800bd90 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ba8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000bac:	aa02      	add	r2, sp, #8
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8000bae:	2104      	movs	r1, #4
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bb0:	f043 0310 	orr.w	r3, r3, #16
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8000bb4:	4891      	ldr	r0, [pc, #580]	@ (8000dfc <main+0x2f0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb8:	2601      	movs	r6, #1
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bba:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
  GPIO_InitStruct.Pin = CAM_RST_Pin;
 8000bbe:	2720      	movs	r7, #32
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bc0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000bc4:	f003 0310 	and.w	r3, r3, #16
 8000bc8:	6013      	str	r3, [r2, #0]
 8000bca:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bcc:	aa03      	add	r2, sp, #12
 8000bce:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000bd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bd6:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000bda:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000bde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000be2:	6013      	str	r3, [r2, #0]
 8000be4:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be6:	aa04      	add	r2, sp, #16
 8000be8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000bf4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000bf8:	f003 0301 	and.w	r3, r3, #1
 8000bfc:	6013      	str	r3, [r2, #0]
 8000bfe:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c00:	aa05      	add	r2, sp, #20
 8000c02:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000c06:	f043 0304 	orr.w	r3, r3, #4
 8000c0a:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000c0e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000c12:	f003 0304 	and.w	r3, r3, #4
 8000c16:	6013      	str	r3, [r2, #0]
 8000c18:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1a:	aa06      	add	r2, sp, #24
 8000c1c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000c20:	f043 0302 	orr.w	r3, r3, #2
 8000c24:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000c28:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000c2c:	f003 0302 	and.w	r3, r3, #2
 8000c30:	6013      	str	r3, [r2, #0]
 8000c32:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c34:	aa07      	add	r2, sp, #28
 8000c36:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000c3a:	f043 0308 	orr.w	r3, r3, #8
 8000c3e:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000c42:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000c46:	f003 0308 	and.w	r3, r3, #8
 8000c4a:	6013      	str	r3, [r2, #0]
 8000c4c:	6813      	ldr	r3, [r2, #0]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f002 fb3c 	bl	80032cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CAM_RST_GPIO_Port, CAM_RST_Pin, GPIO_PIN_RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	2120      	movs	r1, #32
 8000c58:	4869      	ldr	r0, [pc, #420]	@ (8000e00 <main+0x2f4>)
 8000c5a:	f002 fb37 	bl	80032cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PWDN_GPIO_Port, PWDN_Pin, GPIO_PIN_SET);
 8000c5e:	2201      	movs	r2, #1
 8000c60:	4868      	ldr	r0, [pc, #416]	@ (8000e04 <main+0x2f8>)
 8000c62:	4611      	mov	r1, r2
 8000c64:	f002 fb32 	bl	80032cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, CAPTURE_Pin|LED_Pin, GPIO_PIN_RESET);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8000c6e:	4866      	ldr	r0, [pc, #408]	@ (8000e08 <main+0x2fc>)
 8000c70:	f002 fb2c 	bl	80032cc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c74:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c76:	a93a      	add	r1, sp, #232	@ 0xe8
 8000c78:	4860      	ldr	r0, [pc, #384]	@ (8000dfc <main+0x2f0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7a:	e9cd 363a 	strd	r3, r6, [sp, #232]	@ 0xe8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	e9cd 443c 	strd	r4, r4, [sp, #240]	@ 0xf0
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c82:	f002 fa3b 	bl	80030fc <HAL_GPIO_Init>
  HAL_GPIO_Init(CAM_RST_GPIO_Port, &GPIO_InitStruct);
 8000c86:	a93a      	add	r1, sp, #232	@ 0xe8
 8000c88:	485d      	ldr	r0, [pc, #372]	@ (8000e00 <main+0x2f4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8a:	e9cd 763a 	strd	r7, r6, [sp, #232]	@ 0xe8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	e9cd 443c 	strd	r4, r4, [sp, #240]	@ 0xf0
  HAL_GPIO_Init(CAM_RST_GPIO_Port, &GPIO_InitStruct);
 8000c92:	f002 fa33 	bl	80030fc <HAL_GPIO_Init>
  HAL_GPIO_Init(PWDN_GPIO_Port, &GPIO_InitStruct);
 8000c96:	a93a      	add	r1, sp, #232	@ 0xe8
 8000c98:	485a      	ldr	r0, [pc, #360]	@ (8000e04 <main+0x2f8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9a:	e9cd 663a 	strd	r6, r6, [sp, #232]	@ 0xe8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9e:	e9cd 443c 	strd	r4, r4, [sp, #240]	@ 0xf0
  HAL_GPIO_Init(PWDN_GPIO_Port, &GPIO_InitStruct);
 8000ca2:	f002 fa2b 	bl	80030fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CAPTURE_Pin|LED_Pin;
 8000ca6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000caa:	a93a      	add	r1, sp, #232	@ 0xe8
 8000cac:	4856      	ldr	r0, [pc, #344]	@ (8000e08 <main+0x2fc>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cae:	e9cd 363a 	strd	r3, r6, [sp, #232]	@ 0xe8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb2:	e9cd 443c 	strd	r4, r4, [sp, #240]	@ 0xf0
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cb6:	f002 fa21 	bl	80030fc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	f44f 7180 	mov.w	r1, #256	@ 0x100
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc0:	4852      	ldr	r0, [pc, #328]	@ (8000e0c <main+0x300>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000cc2:	943e      	str	r4, [sp, #248]	@ 0xf8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	e9cd 133a 	strd	r1, r3, [sp, #232]	@ 0xe8
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc8:	a93a      	add	r1, sp, #232	@ 0xe8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	e9cd 443c 	strd	r4, r4, [sp, #240]	@ 0xf0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cce:	f002 fa15 	bl	80030fc <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cd2:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
 8000cd6:	aa01      	add	r2, sp, #4
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000cd8:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cda:	4333      	orrs	r3, r6
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000cdc:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cde:	f8c5 30d8 	str.w	r3, [r5, #216]	@ 0xd8
 8000ce2:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
 8000ce6:	4033      	ands	r3, r6
 8000ce8:	6013      	str	r3, [r2, #0]
 8000cea:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000cec:	4622      	mov	r2, r4
 8000cee:	f000 fc41 	bl	8001574 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000cf2:	200b      	movs	r0, #11
 8000cf4:	f000 fc70 	bl	80015d8 <HAL_NVIC_EnableIRQ>
  hdcmi.Instance = DCMI;
 8000cf8:	4845      	ldr	r0, [pc, #276]	@ (8000e10 <main+0x304>)
 8000cfa:	4b46      	ldr	r3, [pc, #280]	@ (8000e14 <main+0x308>)
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000cfc:	6087      	str	r7, [r0, #8]
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000cfe:	6304      	str	r4, [r0, #48]	@ 0x30
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000d00:	e9c0 3400 	strd	r3, r4, [r0]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000d04:	2380      	movs	r3, #128	@ 0x80
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000d06:	e9c0 4405 	strd	r4, r4, [r0, #20]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000d0a:	e9c0 3403 	strd	r3, r4, [r0, #12]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000d0e:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000d12:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000d16:	f000 fd21 	bl	800175c <HAL_DCMI_Init>
 8000d1a:	b108      	cbz	r0, 8000d20 <main+0x214>
  __ASM volatile ("cpsid i" : : : "memory");
 8000d1c:	b672      	cpsid	i
  while (1)
 8000d1e:	e7fe      	b.n	8000d1e <main+0x212>
  hi2c1.Instance = I2C1;
 8000d20:	4c3d      	ldr	r4, [pc, #244]	@ (8000e18 <main+0x30c>)
  hi2c1.Init.Timing = 0x00707CBB;
 8000d22:	4b3e      	ldr	r3, [pc, #248]	@ (8000e1c <main+0x310>)
 8000d24:	4d3e      	ldr	r5, [pc, #248]	@ (8000e20 <main+0x314>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d26:	6220      	str	r0, [r4, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d28:	e9c4 0602 	strd	r0, r6, [r4, #8]
  hi2c1.Init.OwnAddress2 = 0;
 8000d2c:	e9c4 0004 	strd	r0, r0, [r4, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d30:	e9c4 0006 	strd	r0, r0, [r4, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d34:	4620      	mov	r0, r4
  hi2c1.Init.Timing = 0x00707CBB;
 8000d36:	e9c4 3500 	strd	r3, r5, [r4]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d3a:	f002 fc53 	bl	80035e4 <HAL_I2C_Init>
 8000d3e:	4601      	mov	r1, r0
 8000d40:	b108      	cbz	r0, 8000d46 <main+0x23a>
 8000d42:	b672      	cpsid	i
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <main+0x238>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d46:	4620      	mov	r0, r4
 8000d48:	f002 fde6 	bl	8003918 <HAL_I2CEx_ConfigAnalogFilter>
 8000d4c:	4601      	mov	r1, r0
 8000d4e:	b108      	cbz	r0, 8000d54 <main+0x248>
 8000d50:	b672      	cpsid	i
  while (1)
 8000d52:	e7fe      	b.n	8000d52 <main+0x246>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d54:	4620      	mov	r0, r4
 8000d56:	f002 fe05 	bl	8003964 <HAL_I2CEx_ConfigDigitalFilter>
 8000d5a:	b108      	cbz	r0, 8000d60 <main+0x254>
 8000d5c:	b672      	cpsid	i
  while (1)
 8000d5e:	e7fe      	b.n	8000d5e <main+0x252>
  hi2c2.Instance = I2C2;
 8000d60:	4c30      	ldr	r4, [pc, #192]	@ (8000e24 <main+0x318>)
 8000d62:	4b31      	ldr	r3, [pc, #196]	@ (8000e28 <main+0x31c>)
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d64:	6220      	str	r0, [r4, #32]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d66:	e9c4 0602 	strd	r0, r6, [r4, #8]
  hi2c2.Init.OwnAddress2 = 0;
 8000d6a:	e9c4 0004 	strd	r0, r0, [r4, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d6e:	e9c4 0006 	strd	r0, r0, [r4, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d72:	4620      	mov	r0, r4
  hi2c2.Init.Timing = 0x00707CBB;
 8000d74:	e9c4 3500 	strd	r3, r5, [r4]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d78:	f002 fc34 	bl	80035e4 <HAL_I2C_Init>
 8000d7c:	4601      	mov	r1, r0
 8000d7e:	b108      	cbz	r0, 8000d84 <main+0x278>
 8000d80:	b672      	cpsid	i
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <main+0x276>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d84:	4620      	mov	r0, r4
 8000d86:	f002 fdc7 	bl	8003918 <HAL_I2CEx_ConfigAnalogFilter>
 8000d8a:	4601      	mov	r1, r0
 8000d8c:	b108      	cbz	r0, 8000d92 <main+0x286>
 8000d8e:	b672      	cpsid	i
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <main+0x284>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000d92:	4620      	mov	r0, r4
 8000d94:	f002 fde6 	bl	8003964 <HAL_I2CEx_ConfigDigitalFilter>
 8000d98:	b108      	cbz	r0, 8000d9e <main+0x292>
 8000d9a:	b672      	cpsid	i
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <main+0x290>
  huart4.Instance = UART4;
 8000d9e:	4c23      	ldr	r4, [pc, #140]	@ (8000e2c <main+0x320>)
  huart4.Init.BaudRate = 115200;
 8000da0:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000da4:	4a22      	ldr	r2, [pc, #136]	@ (8000e30 <main+0x324>)
  huart4.Init.Parity = UART_PARITY_NONE;
 8000da6:	6120      	str	r0, [r4, #16]
  huart4.Init.BaudRate = 115200;
 8000da8:	e9c4 2300 	strd	r2, r3, [r4]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000dac:	230c      	movs	r3, #12
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000dae:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000db2:	e9c4 3005 	strd	r3, r0, [r4, #20]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000db6:	e9c4 0007 	strd	r0, r0, [r4, #28]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dba:	e9c4 0009 	strd	r0, r0, [r4, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	f004 fd6f 	bl	80058a2 <HAL_UART_Init>
 8000dc4:	4601      	mov	r1, r0
 8000dc6:	b108      	cbz	r0, 8000dcc <main+0x2c0>
 8000dc8:	b672      	cpsid	i
  while (1)
 8000dca:	e7fe      	b.n	8000dca <main+0x2be>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dcc:	4620      	mov	r0, r4
 8000dce:	f004 fdd6 	bl	800597e <HAL_UARTEx_SetTxFifoThreshold>
 8000dd2:	4601      	mov	r1, r0
 8000dd4:	b108      	cbz	r0, 8000dda <main+0x2ce>
 8000dd6:	b672      	cpsid	i
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <main+0x2cc>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dda:	4620      	mov	r0, r4
 8000ddc:	f004 fdef 	bl	80059be <HAL_UARTEx_SetRxFifoThreshold>
 8000de0:	b108      	cbz	r0, 8000de6 <main+0x2da>
 8000de2:	b672      	cpsid	i
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <main+0x2d8>
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000de6:	4811      	ldr	r0, [pc, #68]	@ (8000e2c <main+0x320>)
 8000de8:	f004 fdae 	bl	8005948 <HAL_UARTEx_DisableFifoMode>
 8000dec:	4603      	mov	r3, r0
 8000dee:	b308      	cbz	r0, 8000e34 <main+0x328>
 8000df0:	b672      	cpsid	i
  while (1)
 8000df2:	e7fe      	b.n	8000df2 <main+0x2e6>
 8000df4:	e000ed00 	.word	0xe000ed00
 8000df8:	58024400 	.word	0x58024400
 8000dfc:	58021000 	.word	0x58021000
 8000e00:	58020800 	.word	0x58020800
 8000e04:	58020400 	.word	0x58020400
 8000e08:	58020c00 	.word	0x58020c00
 8000e0c:	58020000 	.word	0x58020000
 8000e10:	24000d9c 	.word	0x24000d9c
 8000e14:	48020000 	.word	0x48020000
 8000e18:	24000cd0 	.word	0x24000cd0
 8000e1c:	40005400 	.word	0x40005400
 8000e20:	00707cbb 	.word	0x00707cbb
 8000e24:	24000c7c 	.word	0x24000c7c
 8000e28:	40005800 	.word	0x40005800
 8000e2c:	24000be8 	.word	0x24000be8
 8000e30:	40004c00 	.word	0x40004c00
  hcrc.Instance = CRC;
 8000e34:	483d      	ldr	r0, [pc, #244]	@ (8000f2c <main+0x420>)
 8000e36:	4a3e      	ldr	r2, [pc, #248]	@ (8000f30 <main+0x424>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000e38:	8083      	strh	r3, [r0, #4]
  hcrc.Instance = CRC;
 8000e3a:	6002      	str	r2, [r0, #0]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000e3c:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000e40:	2301      	movs	r3, #1
 8000e42:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000e44:	f000 fbea 	bl	800161c <HAL_CRC_Init>
 8000e48:	4605      	mov	r5, r0
 8000e4a:	b108      	cbz	r0, 8000e50 <main+0x344>
 8000e4c:	b672      	cpsid	i
  while (1)
 8000e4e:	e7fe      	b.n	8000e4e <main+0x342>
  MX_X_CUBE_AI_Init();
 8000e50:	f004 fdd6 	bl	8005a00 <MX_X_CUBE_AI_Init>
  lcd_init(&hi2c2);
 8000e54:	4837      	ldr	r0, [pc, #220]	@ (8000f34 <main+0x428>)
 8000e56:	f7ff fdab 	bl	80009b0 <lcd_init>
  ov7670_startCap(imagedata);
 8000e5a:	ac3a      	add	r4, sp, #232	@ 0xe8
  lcd_clear();
 8000e5c:	f7ff fdee 	bl	8000a3c <lcd_clear>
  lcd_send_string("Initializing...");
 8000e60:	4835      	ldr	r0, [pc, #212]	@ (8000f38 <main+0x42c>)
 8000e62:	f7ff fd97 	bl	8000994 <lcd_send_string>
  	sprintf(buffer, "index: %d, data: %x\r\n",i, imagedata[i]);
 8000e66:	4f35      	ldr	r7, [pc, #212]	@ (8000f3c <main+0x430>)
  lcd_clear();
 8000e68:	f7ff fde8 	bl	8000a3c <lcd_clear>
  lcd_send_string("81 loaded to x15");
 8000e6c:	4834      	ldr	r0, [pc, #208]	@ (8000f40 <main+0x434>)
 8000e6e:	f7ff fd91 	bl	8000994 <lcd_send_string>
  ov7670_init(&hi2c1);
 8000e72:	4834      	ldr	r0, [pc, #208]	@ (8000f44 <main+0x438>)
 8000e74:	f7ff fcbc 	bl	80007f0 <ov7670_init>
  HAL_Delay(100);
 8000e78:	2064      	movs	r0, #100	@ 0x64
 8000e7a:	f000 fb51 	bl	8001520 <HAL_Delay>
  ov7670_write(0x15,0x81);
 8000e7e:	2181      	movs	r1, #129	@ 0x81
 8000e80:	2015      	movs	r0, #21
  	HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8000e82:	4e31      	ldr	r6, [pc, #196]	@ (8000f48 <main+0x43c>)
  ov7670_write(0x15,0x81);
 8000e84:	f7ff fc30 	bl	80006e8 <ov7670_write>
  ov7670_read(0x15,data);
 8000e88:	a908      	add	r1, sp, #32
 8000e8a:	2015      	movs	r0, #21
 8000e8c:	f7ff fc5e 	bl	800074c <ov7670_read>
  sprintf(buffer, "Addr:0x15; D:%x;", *data);
 8000e90:	492e      	ldr	r1, [pc, #184]	@ (8000f4c <main+0x440>)
 8000e92:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8000e96:	a821      	add	r0, sp, #132	@ 0x84
 8000e98:	ab08      	add	r3, sp, #32
 8000e9a:	f00a fe67 	bl	800bb6c <siprintf>
  ov7670_init(&hi2c1);
 8000e9e:	4829      	ldr	r0, [pc, #164]	@ (8000f44 <main+0x438>)
 8000ea0:	f7ff fca6 	bl	80007f0 <ov7670_init>
  ov7670_write(0x12,0x0C);
 8000ea4:	210c      	movs	r1, #12
 8000ea6:	2012      	movs	r0, #18
 8000ea8:	f7ff fc1e 	bl	80006e8 <ov7670_write>
  ov7670_write(0x40,0xD0); //Enable RGB
 8000eac:	21d0      	movs	r1, #208	@ 0xd0
 8000eae:	2040      	movs	r0, #64	@ 0x40
 8000eb0:	f7ff fc1a 	bl	80006e8 <ov7670_write>
  ov7670_write(0x13,0x20);// Enable banding filter
 8000eb4:	2120      	movs	r1, #32
 8000eb6:	2013      	movs	r0, #19
 8000eb8:	f7ff fc16 	bl	80006e8 <ov7670_write>
  ov7670_write(0x3B,0x12);// Banding filter settings
 8000ebc:	2112      	movs	r1, #18
 8000ebe:	203b      	movs	r0, #59	@ 0x3b
 8000ec0:	f7ff fc12 	bl	80006e8 <ov7670_write>
    imagedata[i] = 0;
 8000ec4:	f44f 4246 	mov.w	r2, #50688	@ 0xc600
 8000ec8:	4629      	mov	r1, r5
 8000eca:	a83a      	add	r0, sp, #232	@ 0xe8
 8000ecc:	f00a ff60 	bl	800bd90 <memset>
  sprintf(buffer, "imagedata address: %x\r\n", imagedata); //24073924
 8000ed0:	aa3a      	add	r2, sp, #232	@ 0xe8
 8000ed2:	491f      	ldr	r1, [pc, #124]	@ (8000f50 <main+0x444>)
 8000ed4:	a821      	add	r0, sp, #132	@ 0x84
 8000ed6:	f00a fe49 	bl	800bb6c <siprintf>
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8000eda:	a821      	add	r0, sp, #132	@ 0x84
 8000edc:	f7ff fa00 	bl	80002e0 <strlen>
 8000ee0:	230a      	movs	r3, #10
 8000ee2:	b282      	uxth	r2, r0
 8000ee4:	a921      	add	r1, sp, #132	@ 0x84
 8000ee6:	4818      	ldr	r0, [pc, #96]	@ (8000f48 <main+0x43c>)
 8000ee8:	f004 fc2b 	bl	8005742 <HAL_UART_Transmit>
  imagedata[0] = 0xFF; // Check if index 0 properly overwritten
 8000eec:	23ff      	movs	r3, #255	@ 0xff
  ov7670_startCap(imagedata);
 8000eee:	4620      	mov	r0, r4
  imagedata[0] = 0xFF; // Check if index 0 properly overwritten
 8000ef0:	933a      	str	r3, [sp, #232]	@ 0xe8
  ov7670_startCap(imagedata);
 8000ef2:	f7ff fcc9 	bl	8000888 <ov7670_startCap>
  	sprintf(buffer, "index: %d, data: %x\r\n",i, imagedata[i]);
 8000ef6:	462a      	mov	r2, r5
 8000ef8:	f854 3b04 	ldr.w	r3, [r4], #4
 8000efc:	4639      	mov	r1, r7
 8000efe:	a821      	add	r0, sp, #132	@ 0x84
 8000f00:	f00a fe34 	bl	800bb6c <siprintf>
  	HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8000f04:	a821      	add	r0, sp, #132	@ 0x84
 8000f06:	f7ff f9eb 	bl	80002e0 <strlen>
  for (int i = 0; i < 176*144 / 2; ++i) {
 8000f0a:	3501      	adds	r5, #1
  	HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8000f0c:	b282      	uxth	r2, r0
 8000f0e:	230a      	movs	r3, #10
 8000f10:	a921      	add	r1, sp, #132	@ 0x84
 8000f12:	4630      	mov	r0, r6
 8000f14:	f004 fc15 	bl	8005742 <HAL_UART_Transmit>
  	HAL_Delay(20);
 8000f18:	2014      	movs	r0, #20
 8000f1a:	f000 fb01 	bl	8001520 <HAL_Delay>
  for (int i = 0; i < 176*144 / 2; ++i) {
 8000f1e:	f5b5 5f46 	cmp.w	r5, #12672	@ 0x3180
 8000f22:	d1e8      	bne.n	8000ef6 <main+0x3ea>
  MX_X_CUBE_AI_Process();
 8000f24:	f004 fda6 	bl	8005a74 <MX_X_CUBE_AI_Process>
  while (1)
 8000f28:	e7fc      	b.n	8000f24 <main+0x418>
 8000f2a:	bf00      	nop
 8000f2c:	24000dec 	.word	0x24000dec
 8000f30:	58024c00 	.word	0x58024c00
 8000f34:	24000c7c 	.word	0x24000c7c
 8000f38:	0800cedb 	.word	0x0800cedb
 8000f3c:	0800cf25 	.word	0x0800cf25
 8000f40:	0800ceeb 	.word	0x0800ceeb
 8000f44:	24000cd0 	.word	0x24000cd0
 8000f48:	24000be8 	.word	0x24000be8
 8000f4c:	0800cefc 	.word	0x0800cefc
 8000f50:	0800cf0d 	.word	0x0800cf0d

08000f54 <Error_Handler>:
 8000f54:	b672      	cpsid	i
  while (1)
 8000f56:	e7fe      	b.n	8000f56 <Error_Handler+0x2>

08000f58 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f58:	4b07      	ldr	r3, [pc, #28]	@ (8000f78 <HAL_MspInit+0x20>)
{
 8000f5a:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8000f60:	f042 0202 	orr.w	r2, r2, #2
 8000f64:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8000f68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f6c:	f003 0302 	and.w	r3, r3, #2
 8000f70:	9301      	str	r3, [sp, #4]
 8000f72:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f74:	b002      	add	sp, #8
 8000f76:	4770      	bx	lr
 8000f78:	58024400 	.word	0x58024400

08000f7c <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8000f7c:	6802      	ldr	r2, [r0, #0]
{
 8000f7e:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8000f80:	4b09      	ldr	r3, [pc, #36]	@ (8000fa8 <HAL_CRC_MspInit+0x2c>)
 8000f82:	429a      	cmp	r2, r3
 8000f84:	d10d      	bne.n	8000fa2 <HAL_CRC_MspInit+0x26>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f86:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000f8a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000f8e:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8000f92:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f9a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000f9e:	9301      	str	r3, [sp, #4]
 8000fa0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000fa2:	b002      	add	sp, #8
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	58024c00 	.word	0x58024c00

08000fac <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8000fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fae:	b08d      	sub	sp, #52	@ 0x34
 8000fb0:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb2:	2214      	movs	r2, #20
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	a807      	add	r0, sp, #28
 8000fb8:	f00a feea 	bl	800bd90 <memset>
  if(hdcmi->Instance==DCMI)
 8000fbc:	682a      	ldr	r2, [r5, #0]
 8000fbe:	4b55      	ldr	r3, [pc, #340]	@ (8001114 <HAL_DCMI_MspInit+0x168>)
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	f040 80a5 	bne.w	8001110 <HAL_DCMI_MspInit+0x164>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000fc6:	4b54      	ldr	r3, [pc, #336]	@ (8001118 <HAL_DCMI_MspInit+0x16c>)
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc8:	2402      	movs	r4, #2
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000fca:	2703      	movs	r7, #3
 8000fcc:	260d      	movs	r6, #13
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000fce:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fd2:	a907      	add	r1, sp, #28
 8000fd4:	4851      	ldr	r0, [pc, #324]	@ (800111c <HAL_DCMI_MspInit+0x170>)
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000fd6:	f042 0201 	orr.w	r2, r2, #1
 8000fda:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
 8000fde:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 8000fe2:	f002 0201 	and.w	r2, r2, #1
 8000fe6:	9201      	str	r2, [sp, #4]
 8000fe8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000fee:	f042 0210 	orr.w	r2, r2, #16
 8000ff2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000ff6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000ffa:	f002 0210 	and.w	r2, r2, #16
 8000ffe:	9202      	str	r2, [sp, #8]
 8001000:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001002:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001006:	f042 0201 	orr.w	r2, r2, #1
 800100a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800100e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001012:	f002 0201 	and.w	r2, r2, #1
 8001016:	9203      	str	r2, [sp, #12]
 8001018:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800101a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800101e:	f042 0204 	orr.w	r2, r2, #4
 8001022:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001026:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800102a:	f002 0204 	and.w	r2, r2, #4
 800102e:	9204      	str	r2, [sp, #16]
 8001030:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001032:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001036:	f042 0208 	orr.w	r2, r2, #8
 800103a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800103e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001042:	f002 0208 	and.w	r2, r2, #8
 8001046:	9205      	str	r2, [sp, #20]
 8001048:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800104a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800104e:	f042 0202 	orr.w	r2, r2, #2
 8001052:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	9306      	str	r3, [sp, #24]
 8001060:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2370      	movs	r3, #112	@ 0x70
 8001064:	e9cd 3407 	strd	r3, r4, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001068:	9409      	str	r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800106a:	e9cd 760a 	strd	r7, r6, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800106e:	f002 f845 	bl	80030fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001072:	2350      	movs	r3, #80	@ 0x50
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001074:	a907      	add	r1, sp, #28
 8001076:	482a      	ldr	r0, [pc, #168]	@ (8001120 <HAL_DCMI_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001078:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107a:	e9cd 3407 	strd	r3, r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107e:	e9cd 4709 	strd	r4, r7, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001082:	f002 f83b 	bl	80030fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001086:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800108a:	a907      	add	r1, sp, #28
 800108c:	4825      	ldr	r0, [pc, #148]	@ (8001124 <HAL_DCMI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800108e:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001090:	e9cd 3407 	strd	r3, r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001094:	e9cd 4709 	strd	r4, r7, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001098:	f002 f830 	bl	80030fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800109c:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800109e:	a907      	add	r1, sp, #28
 80010a0:	4821      	ldr	r0, [pc, #132]	@ (8001128 <HAL_DCMI_MspInit+0x17c>)
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80010a2:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a4:	e9cd 3407 	strd	r3, r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a8:	e9cd 4709 	strd	r4, r7, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ac:	f002 f826 	bl	80030fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010b0:	2380      	movs	r3, #128	@ 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b2:	a907      	add	r1, sp, #28
 80010b4:	481d      	ldr	r0, [pc, #116]	@ (800112c <HAL_DCMI_MspInit+0x180>)
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80010b6:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b8:	e9cd 3407 	strd	r3, r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010bc:	e9cd 4709 	strd	r4, r7, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c0:	f002 f81c 	bl	80030fc <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 80010c4:	4c1a      	ldr	r4, [pc, #104]	@ (8001130 <HAL_DCMI_MspInit+0x184>)
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 80010c6:	4a1b      	ldr	r2, [pc, #108]	@ (8001134 <HAL_DCMI_MspInit+0x188>)
 80010c8:	234b      	movs	r3, #75	@ 0x4b
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010ca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_dcmi.Init.Mode = DMA_NORMAL;
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80010ce:	4620      	mov	r0, r4
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 80010d0:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010d4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010d8:	2300      	movs	r3, #0
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010da:	e9c4 1204 	strd	r1, r2, [r4, #16]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80010de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 80010e2:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80010e6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ea:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010ee:	e9c4 2308 	strd	r2, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80010f2:	f000 fe13 	bl	8001d1c <HAL_DMA_Init>
 80010f6:	b108      	cbz	r0, 80010fc <HAL_DCMI_MspInit+0x150>
    {
      Error_Handler();
 80010f8:	f7ff ff2c 	bl	8000f54 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 80010fc:	2200      	movs	r2, #0
 80010fe:	204e      	movs	r0, #78	@ 0x4e
    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8001100:	64ac      	str	r4, [r5, #72]	@ 0x48
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8001102:	4611      	mov	r1, r2
    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8001104:	63a5      	str	r5, [r4, #56]	@ 0x38
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8001106:	f000 fa35 	bl	8001574 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 800110a:	204e      	movs	r0, #78	@ 0x4e
 800110c:	f000 fa64 	bl	80015d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001110:	b00d      	add	sp, #52	@ 0x34
 8001112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001114:	48020000 	.word	0x48020000
 8001118:	58024400 	.word	0x58024400
 800111c:	58021000 	.word	0x58021000
 8001120:	58020000 	.word	0x58020000
 8001124:	58020800 	.word	0x58020800
 8001128:	58020c00 	.word	0x58020c00
 800112c:	58020400 	.word	0x58020400
 8001130:	24000d24 	.word	0x24000d24
 8001134:	40020010 	.word	0x40020010

08001138 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001138:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113a:	2214      	movs	r2, #20
{
 800113c:	b0ba      	sub	sp, #232	@ 0xe8
 800113e:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	2100      	movs	r1, #0
 8001142:	eb0d 0002 	add.w	r0, sp, r2
 8001146:	f00a fe23 	bl	800bd90 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800114a:	22c0      	movs	r2, #192	@ 0xc0
 800114c:	2100      	movs	r1, #0
 800114e:	a80a      	add	r0, sp, #40	@ 0x28
 8001150:	f00a fe1e 	bl	800bd90 <memset>
  if(hi2c->Instance==I2C1)
 8001154:	6823      	ldr	r3, [r4, #0]
 8001156:	4a36      	ldr	r2, [pc, #216]	@ (8001230 <HAL_I2C_MspInit+0xf8>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d133      	bne.n	80011c4 <HAL_I2C_MspInit+0x8c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800115c:	2208      	movs	r2, #8
 800115e:	2300      	movs	r3, #0
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001160:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001162:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001166:	f003 fa3f 	bl	80045e8 <HAL_RCCEx_PeriphCLKConfig>
 800116a:	b108      	cbz	r0, 8001170 <HAL_I2C_MspInit+0x38>
    {
      Error_Handler();
 800116c:	f7ff fef2 	bl	8000f54 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001170:	4c30      	ldr	r4, [pc, #192]	@ (8001234 <HAL_I2C_MspInit+0xfc>)
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001172:	f44f 7140 	mov.w	r1, #768	@ 0x300
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	2001      	movs	r0, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001178:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800117c:	f043 0302 	orr.w	r3, r3, #2
 8001180:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8001184:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001188:	f003 0302 	and.w	r3, r3, #2
 800118c:	9301      	str	r3, [sp, #4]
 800118e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001190:	2312      	movs	r3, #18
 8001192:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001196:	2300      	movs	r3, #0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001198:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119a:	e9cd 0307 	strd	r0, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800119e:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a0:	4825      	ldr	r0, [pc, #148]	@ (8001238 <HAL_I2C_MspInit+0x100>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011a2:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a4:	f001 ffaa 	bl	80030fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011a8:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
 80011ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011b0:	f8c4 30e8 	str.w	r3, [r4, #232]	@ 0xe8
 80011b4:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
 80011b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011bc:	9302      	str	r3, [sp, #8]
 80011be:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80011c0:	b03a      	add	sp, #232	@ 0xe8
 80011c2:	bd10      	pop	{r4, pc}
  else if(hi2c->Instance==I2C2)
 80011c4:	4a1d      	ldr	r2, [pc, #116]	@ (800123c <HAL_I2C_MspInit+0x104>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d1fa      	bne.n	80011c0 <HAL_I2C_MspInit+0x88>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80011ca:	2208      	movs	r2, #8
 80011cc:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011ce:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80011d0:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011d4:	f003 fa08 	bl	80045e8 <HAL_RCCEx_PeriphCLKConfig>
 80011d8:	b108      	cbz	r0, 80011de <HAL_I2C_MspInit+0xa6>
      Error_Handler();
 80011da:	f7ff febb 	bl	8000f54 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011de:	4c15      	ldr	r4, [pc, #84]	@ (8001234 <HAL_I2C_MspInit+0xfc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011e0:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e4:	a905      	add	r1, sp, #20
 80011e6:	4814      	ldr	r0, [pc, #80]	@ (8001238 <HAL_I2C_MspInit+0x100>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80011ec:	f043 0302 	orr.w	r3, r3, #2
 80011f0:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80011f4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80011f8:	f003 0302 	and.w	r3, r3, #2
 80011fc:	9303      	str	r3, [sp, #12]
 80011fe:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001200:	2312      	movs	r3, #18
 8001202:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001208:	e9cd 3307 	strd	r3, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800120c:	2304      	movs	r3, #4
 800120e:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001210:	f001 ff74 	bl	80030fc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001214:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
 8001218:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800121c:	f8c4 30e8 	str.w	r3, [r4, #232]	@ 0xe8
 8001220:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
 8001224:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001228:	9304      	str	r3, [sp, #16]
 800122a:	9b04      	ldr	r3, [sp, #16]
}
 800122c:	e7c8      	b.n	80011c0 <HAL_I2C_MspInit+0x88>
 800122e:	bf00      	nop
 8001230:	40005400 	.word	0x40005400
 8001234:	58024400 	.word	0x58024400
 8001238:	58020400 	.word	0x58020400
 800123c:	40005800 	.word	0x40005800

08001240 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001240:	b510      	push	{r4, lr}
 8001242:	b0b8      	sub	sp, #224	@ 0xe0
 8001244:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001246:	2214      	movs	r2, #20
 8001248:	2100      	movs	r1, #0
 800124a:	a803      	add	r0, sp, #12
 800124c:	f00a fda0 	bl	800bd90 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001250:	22c0      	movs	r2, #192	@ 0xc0
 8001252:	2100      	movs	r1, #0
 8001254:	a808      	add	r0, sp, #32
 8001256:	f00a fd9b 	bl	800bd90 <memset>
  if(huart->Instance==UART4)
 800125a:	6822      	ldr	r2, [r4, #0]
 800125c:	4b1a      	ldr	r3, [pc, #104]	@ (80012c8 <HAL_UART_MspInit+0x88>)
 800125e:	429a      	cmp	r2, r3
 8001260:	d12f      	bne.n	80012c2 <HAL_UART_MspInit+0x82>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001262:	2202      	movs	r2, #2
 8001264:	2300      	movs	r3, #0
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001266:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001268:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800126c:	f003 f9bc 	bl	80045e8 <HAL_RCCEx_PeriphCLKConfig>
 8001270:	b108      	cbz	r0, 8001276 <HAL_UART_MspInit+0x36>
    {
      Error_Handler();
 8001272:	f7ff fe6f 	bl	8000f54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001276:	4b15      	ldr	r3, [pc, #84]	@ (80012cc <HAL_UART_MspInit+0x8c>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001278:	a903      	add	r1, sp, #12
 800127a:	4815      	ldr	r0, [pc, #84]	@ (80012d0 <HAL_UART_MspInit+0x90>)
    __HAL_RCC_UART4_CLK_ENABLE();
 800127c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001280:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8001284:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8001288:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800128c:	f402 2200 	and.w	r2, r2, #524288	@ 0x80000
 8001290:	9201      	str	r2, [sp, #4]
 8001292:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001294:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001298:	f042 0201 	orr.w	r2, r2, #1
 800129c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a0:	2203      	movs	r2, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	9302      	str	r3, [sp, #8]
 80012ac:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	2302      	movs	r3, #2
 80012b0:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	e9cd 3305 	strd	r3, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80012ba:	2308      	movs	r3, #8
 80012bc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012be:	f001 ff1d 	bl	80030fc <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80012c2:	b038      	add	sp, #224	@ 0xe0
 80012c4:	bd10      	pop	{r4, pc}
 80012c6:	bf00      	nop
 80012c8:	40004c00 	.word	0x40004c00
 80012cc:	58024400 	.word	0x58024400
 80012d0:	58020000 	.word	0x58020000

080012d4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012d4:	e7fe      	b.n	80012d4 <NMI_Handler>

080012d6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d6:	e7fe      	b.n	80012d6 <HardFault_Handler>

080012d8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <MemManage_Handler>

080012da <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012da:	e7fe      	b.n	80012da <BusFault_Handler>

080012dc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012dc:	e7fe      	b.n	80012dc <UsageFault_Handler>

080012de <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012de:	4770      	bx	lr

080012e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80012e0:	4770      	bx	lr

080012e2 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80012e2:	4770      	bx	lr

080012e4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e4:	f000 b90a 	b.w	80014fc <HAL_IncTick>

080012e8 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 80012e8:	4801      	ldr	r0, [pc, #4]	@ (80012f0 <DMA1_Stream0_IRQHandler+0x8>)
 80012ea:	f001 ba27 	b.w	800273c <HAL_DMA_IRQHandler>
 80012ee:	bf00      	nop
 80012f0:	24000d24 	.word	0x24000d24

080012f4 <DCMI_IRQHandler>:
void DCMI_IRQHandler(void)
{
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80012f4:	4801      	ldr	r0, [pc, #4]	@ (80012fc <DCMI_IRQHandler+0x8>)
 80012f6:	f000 bb33 	b.w	8001960 <HAL_DCMI_IRQHandler>
 80012fa:	bf00      	nop
 80012fc:	24000d9c 	.word	0x24000d9c

08001300 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001300:	4a0b      	ldr	r2, [pc, #44]	@ (8001330 <_sbrk+0x30>)
{
 8001302:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001304:	6811      	ldr	r1, [r2, #0]
{
 8001306:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001308:	b909      	cbnz	r1, 800130e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800130a:	490a      	ldr	r1, [pc, #40]	@ (8001334 <_sbrk+0x34>)
 800130c:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800130e:	6810      	ldr	r0, [r2, #0]
 8001310:	4909      	ldr	r1, [pc, #36]	@ (8001338 <_sbrk+0x38>)
 8001312:	4c0a      	ldr	r4, [pc, #40]	@ (800133c <_sbrk+0x3c>)
 8001314:	4403      	add	r3, r0
 8001316:	1b09      	subs	r1, r1, r4
 8001318:	428b      	cmp	r3, r1
 800131a:	d906      	bls.n	800132a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 800131c:	f00a fd96 	bl	800be4c <__errno>
 8001320:	230c      	movs	r3, #12
 8001322:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001324:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001328:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800132a:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 800132c:	e7fc      	b.n	8001328 <_sbrk+0x28>
 800132e:	bf00      	nop
 8001330:	24000e10 	.word	0x24000e10
 8001334:	20000000 	.word	0x20000000
 8001338:	24080000 	.word	0x24080000
 800133c:	00000800 	.word	0x00000800

08001340 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001340:	4a25      	ldr	r2, [pc, #148]	@ (80013d8 <SystemInit+0x98>)
 8001342:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001346:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800134a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800134e:	4a23      	ldr	r2, [pc, #140]	@ (80013dc <SystemInit+0x9c>)
 8001350:	6813      	ldr	r3, [r2, #0]
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	2b06      	cmp	r3, #6
 8001358:	d805      	bhi.n	8001366 <SystemInit+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800135a:	6813      	ldr	r3, [r2, #0]
 800135c:	f023 030f 	bic.w	r3, r3, #15
 8001360:	f043 0307 	orr.w	r3, r3, #7
 8001364:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001366:	4b1e      	ldr	r3, [pc, #120]	@ (80013e0 <SystemInit+0xa0>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	f042 0201 	orr.w	r2, r2, #1
 800136e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001370:	2200      	movs	r2, #0
 8001372:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001374:	4a1b      	ldr	r2, [pc, #108]	@ (80013e4 <SystemInit+0xa4>)
 8001376:	6819      	ldr	r1, [r3, #0]
 8001378:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800137a:	4918      	ldr	r1, [pc, #96]	@ (80013dc <SystemInit+0x9c>)
  RCC->CR &= 0xEAF6ED7FU;
 800137c:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800137e:	680a      	ldr	r2, [r1, #0]
 8001380:	0712      	lsls	r2, r2, #28
 8001382:	d505      	bpl.n	8001390 <SystemInit+0x50>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001384:	680a      	ldr	r2, [r1, #0]
 8001386:	f022 020f 	bic.w	r2, r2, #15
 800138a:	f042 0207 	orr.w	r2, r2, #7
 800138e:	600a      	str	r2, [r1, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001390:	2200      	movs	r2, #0

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001392:	4915      	ldr	r1, [pc, #84]	@ (80013e8 <SystemInit+0xa8>)
  RCC->D1CFGR = 0x00000000;
 8001394:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8001396:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8001398:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800139a:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800139c:	4913      	ldr	r1, [pc, #76]	@ (80013ec <SystemInit+0xac>)
 800139e:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80013a0:	4913      	ldr	r1, [pc, #76]	@ (80013f0 <SystemInit+0xb0>)
 80013a2:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80013a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80013a6:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80013a8:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80013aa:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80013ac:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013ae:	6819      	ldr	r1, [r3, #0]
 80013b0:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 80013b4:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80013b6:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80013b8:	4b0e      	ldr	r3, [pc, #56]	@ (80013f4 <SystemInit+0xb4>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	0c1b      	lsrs	r3, r3, #16
 80013be:	041b      	lsls	r3, r3, #16
 80013c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80013c4:	d203      	bcs.n	80013ce <SystemInit+0x8e>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80013c6:	4b0c      	ldr	r3, [pc, #48]	@ (80013f8 <SystemInit+0xb8>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80013ce:	4b0b      	ldr	r3, [pc, #44]	@ (80013fc <SystemInit+0xbc>)
 80013d0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80013d4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80013d6:	4770      	bx	lr
 80013d8:	e000ed00 	.word	0xe000ed00
 80013dc:	52002000 	.word	0x52002000
 80013e0:	58024400 	.word	0x58024400
 80013e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80013e8:	02020200 	.word	0x02020200
 80013ec:	01ff0000 	.word	0x01ff0000
 80013f0:	01010280 	.word	0x01010280
 80013f4:	5c001000 	.word	0x5c001000
 80013f8:	51008000 	.word	0x51008000
 80013fc:	52004000 	.word	0x52004000

08001400 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001400:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001438 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001404:	f7ff ff9c 	bl	8001340 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001408:	480c      	ldr	r0, [pc, #48]	@ (800143c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800140a:	490d      	ldr	r1, [pc, #52]	@ (8001440 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800140c:	4a0d      	ldr	r2, [pc, #52]	@ (8001444 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800140e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001410:	e002      	b.n	8001418 <LoopCopyDataInit>

08001412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001416:	3304      	adds	r3, #4

08001418 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800141a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800141c:	d3f9      	bcc.n	8001412 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800141e:	4a0a      	ldr	r2, [pc, #40]	@ (8001448 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001420:	4c0a      	ldr	r4, [pc, #40]	@ (800144c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001424:	e001      	b.n	800142a <LoopFillZerobss>

08001426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001428:	3204      	adds	r2, #4

0800142a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800142a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800142c:	d3fb      	bcc.n	8001426 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800142e:	f00a fd13 	bl	800be58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001432:	f7ff fb6b 	bl	8000b0c <main>
  bx  lr
 8001436:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001438:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800143c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001440:	24000bac 	.word	0x24000bac
  ldr r2, =_sidata
 8001444:	080aec20 	.word	0x080aec20
  ldr r2, =_sbss
 8001448:	24000bc0 	.word	0x24000bc0
  ldr r4, =_ebss
 800144c:	2404b99c 	.word	0x2404b99c

08001450 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001450:	e7fe      	b.n	8001450 <ADC3_IRQHandler>
	...

08001454 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001454:	b538      	push	{r3, r4, r5, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001456:	4b0f      	ldr	r3, [pc, #60]	@ (8001494 <HAL_InitTick+0x40>)
{
 8001458:	4605      	mov	r5, r0
  if((uint32_t)uwTickFreq == 0UL)
 800145a:	781a      	ldrb	r2, [r3, #0]
 800145c:	b90a      	cbnz	r2, 8001462 <HAL_InitTick+0xe>
  {
    return HAL_ERROR;
 800145e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001460:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001462:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001466:	fbb3 f3f2 	udiv	r3, r3, r2
 800146a:	4a0b      	ldr	r2, [pc, #44]	@ (8001498 <HAL_InitTick+0x44>)
 800146c:	6810      	ldr	r0, [r2, #0]
 800146e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001472:	f000 f8bf 	bl	80015f4 <HAL_SYSTICK_Config>
 8001476:	4604      	mov	r4, r0
 8001478:	2800      	cmp	r0, #0
 800147a:	d1f0      	bne.n	800145e <HAL_InitTick+0xa>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800147c:	2d0f      	cmp	r5, #15
 800147e:	d8ee      	bhi.n	800145e <HAL_InitTick+0xa>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001480:	4602      	mov	r2, r0
 8001482:	4629      	mov	r1, r5
 8001484:	f04f 30ff 	mov.w	r0, #4294967295
 8001488:	f000 f874 	bl	8001574 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800148c:	4b03      	ldr	r3, [pc, #12]	@ (800149c <HAL_InitTick+0x48>)
 800148e:	4620      	mov	r0, r4
 8001490:	601d      	str	r5, [r3, #0]
  return HAL_OK;
 8001492:	e7e5      	b.n	8001460 <HAL_InitTick+0xc>
 8001494:	24000010 	.word	0x24000010
 8001498:	2400000c 	.word	0x2400000c
 800149c:	24000014 	.word	0x24000014

080014a0 <HAL_Init>:
{
 80014a0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a2:	2003      	movs	r0, #3
 80014a4:	f000 f854 	bl	8001550 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80014a8:	f002 fda0 	bl	8003fec <HAL_RCC_GetSysClockFreq>
 80014ac:	490f      	ldr	r1, [pc, #60]	@ (80014ec <HAL_Init+0x4c>)
 80014ae:	4a10      	ldr	r2, [pc, #64]	@ (80014f0 <HAL_Init+0x50>)
 80014b0:	698b      	ldr	r3, [r1, #24]
 80014b2:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80014b6:	5cd3      	ldrb	r3, [r2, r3]
 80014b8:	f003 031f 	and.w	r3, r3, #31
 80014bc:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014be:	698b      	ldr	r3, [r1, #24]
 80014c0:	f003 030f 	and.w	r3, r3, #15
 80014c4:	5cd3      	ldrb	r3, [r2, r3]
 80014c6:	4a0b      	ldr	r2, [pc, #44]	@ (80014f4 <HAL_Init+0x54>)
 80014c8:	f003 031f 	and.w	r3, r3, #31
 80014cc:	fa20 f303 	lsr.w	r3, r0, r3
 80014d0:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 80014d2:	4b09      	ldr	r3, [pc, #36]	@ (80014f8 <HAL_Init+0x58>)
 80014d4:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014d6:	200f      	movs	r0, #15
 80014d8:	f7ff ffbc 	bl	8001454 <HAL_InitTick>
 80014dc:	4604      	mov	r4, r0
 80014de:	b918      	cbnz	r0, 80014e8 <HAL_Init+0x48>
  HAL_MspInit();
 80014e0:	f7ff fd3a 	bl	8000f58 <HAL_MspInit>
}
 80014e4:	4620      	mov	r0, r4
 80014e6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80014e8:	2401      	movs	r4, #1
 80014ea:	e7fb      	b.n	80014e4 <HAL_Init+0x44>
 80014ec:	58024400 	.word	0x58024400
 80014f0:	0800cf3b 	.word	0x0800cf3b
 80014f4:	24000008 	.word	0x24000008
 80014f8:	2400000c 	.word	0x2400000c

080014fc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80014fc:	4a03      	ldr	r2, [pc, #12]	@ (800150c <HAL_IncTick+0x10>)
 80014fe:	4b04      	ldr	r3, [pc, #16]	@ (8001510 <HAL_IncTick+0x14>)
 8001500:	6811      	ldr	r1, [r2, #0]
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	440b      	add	r3, r1
 8001506:	6013      	str	r3, [r2, #0]
}
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	24000e14 	.word	0x24000e14
 8001510:	24000010 	.word	0x24000010

08001514 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001514:	4b01      	ldr	r3, [pc, #4]	@ (800151c <HAL_GetTick+0x8>)
 8001516:	6818      	ldr	r0, [r3, #0]
}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	24000e14 	.word	0x24000e14

08001520 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001520:	b538      	push	{r3, r4, r5, lr}
 8001522:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001524:	f7ff fff6 	bl	8001514 <HAL_GetTick>
 8001528:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800152a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800152c:	bf1e      	ittt	ne
 800152e:	4b04      	ldrne	r3, [pc, #16]	@ (8001540 <HAL_Delay+0x20>)
 8001530:	781b      	ldrbne	r3, [r3, #0]
 8001532:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001534:	f7ff ffee 	bl	8001514 <HAL_GetTick>
 8001538:	1b43      	subs	r3, r0, r5
 800153a:	42a3      	cmp	r3, r4
 800153c:	d3fa      	bcc.n	8001534 <HAL_Delay+0x14>
  {
  }
}
 800153e:	bd38      	pop	{r3, r4, r5, pc}
 8001540:	24000010 	.word	0x24000010

08001544 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8001544:	4b01      	ldr	r3, [pc, #4]	@ (800154c <HAL_GetREVID+0x8>)
 8001546:	6818      	ldr	r0, [r3, #0]
}
 8001548:	0c00      	lsrs	r0, r0, #16
 800154a:	4770      	bx	lr
 800154c:	5c001000 	.word	0x5c001000

08001550 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001550:	4907      	ldr	r1, [pc, #28]	@ (8001570 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001552:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001554:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001556:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800155a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800155e:	0412      	lsls	r2, r2, #16
 8001560:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001564:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001568:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800156c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800156e:	4770      	bx	lr
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001574:	4b16      	ldr	r3, [pc, #88]	@ (80015d0 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001576:	b530      	push	{r4, r5, lr}
 8001578:	68dc      	ldr	r4, [r3, #12]
 800157a:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800157e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001582:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001584:	2b04      	cmp	r3, #4
 8001586:	bf28      	it	cs
 8001588:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158a:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800158c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001590:	bf8c      	ite	hi
 8001592:	3c03      	subhi	r4, #3
 8001594:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001596:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 800159a:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800159c:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a0:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a4:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a8:	fa03 f304 	lsl.w	r3, r3, r4
 80015ac:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80015b4:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80015b6:	db06      	blt.n	80015c6 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b8:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80015bc:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80015c0:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80015c4:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c6:	f000 000f 	and.w	r0, r0, #15
 80015ca:	4a02      	ldr	r2, [pc, #8]	@ (80015d4 <HAL_NVIC_SetPriority+0x60>)
 80015cc:	5413      	strb	r3, [r2, r0]
 80015ce:	e7f9      	b.n	80015c4 <HAL_NVIC_SetPriority+0x50>
 80015d0:	e000ed00 	.word	0xe000ed00
 80015d4:	e000ed14 	.word	0xe000ed14

080015d8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80015d8:	2800      	cmp	r0, #0
 80015da:	db07      	blt.n	80015ec <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015dc:	2301      	movs	r3, #1
 80015de:	0941      	lsrs	r1, r0, #5
 80015e0:	f000 001f 	and.w	r0, r0, #31
 80015e4:	4a02      	ldr	r2, [pc, #8]	@ (80015f0 <HAL_NVIC_EnableIRQ+0x18>)
 80015e6:	4083      	lsls	r3, r0
 80015e8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	e000e100 	.word	0xe000e100

080015f4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015f4:	3801      	subs	r0, #1
 80015f6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80015fa:	d20b      	bcs.n	8001614 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015fc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001600:	4a05      	ldr	r2, [pc, #20]	@ (8001618 <HAL_SYSTICK_Config+0x24>)
 8001602:	21f0      	movs	r1, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001604:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001606:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001608:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800160c:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800160e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001610:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001612:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001614:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001616:	4770      	bx	lr
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800161c:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800161e:	4604      	mov	r4, r0
 8001620:	b908      	cbnz	r0, 8001626 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8001622:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8001624:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001626:	7f43      	ldrb	r3, [r0, #29]
 8001628:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800162c:	b913      	cbnz	r3, 8001634 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 800162e:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8001630:	f7ff fca4 	bl	8000f7c <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001634:	2302      	movs	r3, #2
 8001636:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001638:	7923      	ldrb	r3, [r4, #4]
 800163a:	b9e3      	cbnz	r3, 8001676 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800163c:	6823      	ldr	r3, [r4, #0]
 800163e:	4a13      	ldr	r2, [pc, #76]	@ (800168c <HAL_CRC_Init+0x70>)
 8001640:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	f022 0218 	bic.w	r2, r2, #24
 8001648:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800164a:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800164c:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800164e:	b9d2      	cbnz	r2, 8001686 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001650:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001654:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8001656:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001658:	689a      	ldr	r2, [r3, #8]
 800165a:	6961      	ldr	r1, [r4, #20]
 800165c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001660:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001662:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001664:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800166c:	430a      	orrs	r2, r1
 800166e:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8001670:	2301      	movs	r3, #1
 8001672:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8001674:	e7d6      	b.n	8001624 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001676:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800167a:	4620      	mov	r0, r4
 800167c:	f000 f808 	bl	8001690 <HAL_CRCEx_Polynomial_Set>
 8001680:	2800      	cmp	r0, #0
 8001682:	d0e2      	beq.n	800164a <HAL_CRC_Init+0x2e>
 8001684:	e7cd      	b.n	8001622 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001686:	6922      	ldr	r2, [r4, #16]
 8001688:	e7e4      	b.n	8001654 <HAL_CRC_Init+0x38>
 800168a:	bf00      	nop
 800168c:	04c11db7 	.word	0x04c11db7

08001690 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8001690:	07cb      	lsls	r3, r1, #31
{
 8001692:	b510      	push	{r4, lr}
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8001694:	d50d      	bpl.n	80016b2 <HAL_CRCEx_Polynomial_Set+0x22>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001696:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001698:	3b01      	subs	r3, #1
 800169a:	d31d      	bcc.n	80016d8 <HAL_CRCEx_Polynomial_Set+0x48>
 800169c:	fa21 f403 	lsr.w	r4, r1, r3
 80016a0:	07e4      	lsls	r4, r4, #31
 80016a2:	d5f9      	bpl.n	8001698 <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 80016a4:	2a10      	cmp	r2, #16
 80016a6:	d013      	beq.n	80016d0 <HAL_CRCEx_Polynomial_Set+0x40>
 80016a8:	2a10      	cmp	r2, #16
 80016aa:	d804      	bhi.n	80016b6 <HAL_CRCEx_Polynomial_Set+0x26>
 80016ac:	b13a      	cbz	r2, 80016be <HAL_CRCEx_Polynomial_Set+0x2e>
 80016ae:	2a08      	cmp	r2, #8
 80016b0:	d010      	beq.n	80016d4 <HAL_CRCEx_Polynomial_Set+0x44>
 80016b2:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 80016b4:	e00b      	b.n	80016ce <HAL_CRCEx_Polynomial_Set+0x3e>
    switch (PolyLength)
 80016b6:	2a18      	cmp	r2, #24
 80016b8:	d1fb      	bne.n	80016b2 <HAL_CRCEx_Polynomial_Set+0x22>
        if (msb >= HAL_CRC_LENGTH_7B)
 80016ba:	2b06      	cmp	r3, #6
        if (msb >= HAL_CRC_LENGTH_16B)
 80016bc:	d8f9      	bhi.n	80016b2 <HAL_CRCEx_Polynomial_Set+0x22>
    WRITE_REG(hcrc->Instance->POL, Pol);
 80016be:	6800      	ldr	r0, [r0, #0]
 80016c0:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80016c2:	6883      	ldr	r3, [r0, #8]
 80016c4:	f023 0318 	bic.w	r3, r3, #24
 80016c8:	4313      	orrs	r3, r2
 80016ca:	6083      	str	r3, [r0, #8]
 80016cc:	2000      	movs	r0, #0
}
 80016ce:	bd10      	pop	{r4, pc}
        if (msb >= HAL_CRC_LENGTH_8B)
 80016d0:	2b07      	cmp	r3, #7
 80016d2:	e7f3      	b.n	80016bc <HAL_CRCEx_Polynomial_Set+0x2c>
        if (msb >= HAL_CRC_LENGTH_16B)
 80016d4:	2b0f      	cmp	r3, #15
 80016d6:	e7f1      	b.n	80016bc <HAL_CRCEx_Polynomial_Set+0x2c>
    switch (PolyLength)
 80016d8:	2a10      	cmp	r2, #16
 80016da:	d1e5      	bne.n	80016a8 <HAL_CRCEx_Polynomial_Set+0x18>
 80016dc:	e7e9      	b.n	80016b2 <HAL_CRCEx_Polynomial_Set+0x22>

080016de <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80016de:	b510      	push	{r4, lr}
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016e0:	6b84      	ldr	r4, [r0, #56]	@ 0x38

  if (hdcmi->XferCount != 0U)
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 80016e2:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
  if (hdcmi->XferCount != 0U)
 80016e4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 80016e6:	6803      	ldr	r3, [r0, #0]
  if (hdcmi->XferCount != 0U)
 80016e8:	b332      	cbz	r2, 8001738 <DCMI_DMAXferCplt+0x5a>
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 80016ea:	6819      	ldr	r1, [r3, #0]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 80016ec:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80016ee:	f012 0201 	ands.w	r2, r2, #1
 80016f2:	d11a      	bne.n	800172a <DCMI_DMAXferCplt+0x4c>
 80016f4:	0309      	lsls	r1, r1, #12
 80016f6:	d518      	bpl.n	800172a <DCMI_DMAXferCplt+0x4c>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 80016f8:	68db      	ldr	r3, [r3, #12]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 80016fa:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 80016fc:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8001700:	f001 fcd0 	bl	80030a4 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8001704:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001706:	3b01      	subs	r3, #1
 8001708:	63a3      	str	r3, [r4, #56]	@ 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 800170a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800170c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800170e:	429a      	cmp	r2, r3
 8001710:	d10a      	bne.n	8001728 <DCMI_DMAXferCplt+0x4a>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001712:	6823      	ldr	r3, [r4, #0]
 8001714:	68da      	ldr	r2, [r3, #12]
 8001716:	f042 0201 	orr.w	r2, r2, #1
 800171a:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	079b      	lsls	r3, r3, #30
 8001720:	d502      	bpl.n	8001728 <DCMI_DMAXferCplt+0x4a>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001722:	2301      	movs	r3, #1
 8001724:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    }
  }
}
 8001728:	bd10      	pop	{r4, pc}
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	0312      	lsls	r2, r2, #12
 800172e:	d4ec      	bmi.n	800170a <DCMI_DMAXferCplt+0x2c>
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 8001730:	691b      	ldr	r3, [r3, #16]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8001732:	2201      	movs	r2, #1
 8001734:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8001736:	e7e1      	b.n	80016fc <DCMI_DMAXferCplt+0x1e>
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 8001738:	681a      	ldr	r2, [r3, #0]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 800173a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 800173c:	0310      	lsls	r0, r2, #12
 800173e:	d502      	bpl.n	8001746 <DCMI_DMAXferCplt+0x68>
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 8001740:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8001742:	60da      	str	r2, [r3, #12]
 8001744:	e7e1      	b.n	800170a <DCMI_DMAXferCplt+0x2c>
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	0312      	lsls	r2, r2, #12
 800174a:	d4de      	bmi.n	800170a <DCMI_DMAXferCplt+0x2c>
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 800174c:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800174e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8001750:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8001754:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8001756:	63a1      	str	r1, [r4, #56]	@ 0x38
 8001758:	e7d7      	b.n	800170a <DCMI_DMAXferCplt+0x2c>
	...

0800175c <HAL_DCMI_Init>:
{
 800175c:	b538      	push	{r3, r4, r5, lr}
  if (hdcmi == NULL)
 800175e:	4604      	mov	r4, r0
 8001760:	2800      	cmp	r0, #0
 8001762:	d03f      	beq.n	80017e4 <HAL_DCMI_Init+0x88>
  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8001764:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8001768:	b90b      	cbnz	r3, 800176e <HAL_DCMI_Init+0x12>
    HAL_DCMI_MspInit(hdcmi);
 800176a:	f7ff fc1f 	bl	8000fac <HAL_DCMI_MspInit>
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800176e:	2302      	movs	r3, #2
 8001770:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8001774:	69a3      	ldr	r3, [r4, #24]
 8001776:	b10b      	cbz	r3, 800177c <HAL_DCMI_Init+0x20>
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8001778:	2200      	movs	r2, #0
 800177a:	6262      	str	r2, [r4, #36]	@ 0x24
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800177c:	6822      	ldr	r2, [r4, #0]
 800177e:	491a      	ldr	r1, [pc, #104]	@ (80017e8 <HAL_DCMI_Init+0x8c>)
 8001780:	6810      	ldr	r0, [r2, #0]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001782:	6965      	ldr	r5, [r4, #20]
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8001784:	4001      	ands	r1, r0
 8001786:	6011      	str	r1, [r2, #0]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001788:	6861      	ldr	r1, [r4, #4]
 800178a:	6810      	ldr	r0, [r2, #0]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800178c:	430b      	orrs	r3, r1
  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800178e:	2910      	cmp	r1, #16
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001790:	ea43 0305 	orr.w	r3, r3, r5
 8001794:	68e5      	ldr	r5, [r4, #12]
 8001796:	ea43 0305 	orr.w	r3, r3, r5
 800179a:	6925      	ldr	r5, [r4, #16]
 800179c:	ea43 0305 	orr.w	r3, r3, r5
 80017a0:	68a5      	ldr	r5, [r4, #8]
 80017a2:	ea43 0305 	orr.w	r3, r3, r5
 80017a6:	6a25      	ldr	r5, [r4, #32]
 80017a8:	ea43 0305 	orr.w	r3, r3, r5
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80017ac:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80017ae:	ea43 0305 	orr.w	r3, r3, r5
 80017b2:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 80017b4:	ea43 0305 	orr.w	r3, r3, r5
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80017b8:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 80017ba:	ea43 0305 	orr.w	r3, r3, r5
 80017be:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80017c0:	ea43 0305 	orr.w	r3, r3, r5
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80017c4:	ea43 0300 	orr.w	r3, r3, r0
 80017c8:	6013      	str	r3, [r2, #0]
  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80017ca:	d101      	bne.n	80017d0 <HAL_DCMI_Init+0x74>
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80017cc:	69e3      	ldr	r3, [r4, #28]
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80017ce:	6193      	str	r3, [r2, #24]
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80017d0:	68d3      	ldr	r3, [r2, #12]
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80017d2:	2000      	movs	r0, #0
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80017d4:	f043 031e 	orr.w	r3, r3, #30
 80017d8:	60d3      	str	r3, [r2, #12]
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80017da:	2301      	movs	r3, #1
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80017dc:	64e0      	str	r0, [r4, #76]	@ 0x4c
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80017de:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
}
 80017e2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80017e4:	2001      	movs	r0, #1
 80017e6:	e7fc      	b.n	80017e2 <HAL_DCMI_Init+0x86>
 80017e8:	ffe0f007 	.word	0xffe0f007

080017ec <HAL_DCMI_Start_DMA>:
{
 80017ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80017ee:	4604      	mov	r4, r0
  __HAL_LOCK(hdcmi);
 80017f0:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
{
 80017f4:	4615      	mov	r5, r2
  __HAL_LOCK(hdcmi);
 80017f6:	2801      	cmp	r0, #1
 80017f8:	f04f 0002 	mov.w	r0, #2
 80017fc:	d02f      	beq.n	800185e <HAL_DCMI_Start_DMA+0x72>
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80017fe:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
  __HAL_LOCK(hdcmi);
 8001802:	2701      	movs	r7, #1
  __HAL_DCMI_ENABLE(hdcmi);
 8001804:	6820      	ldr	r0, [r4, #0]
  if (Length <= 0xFFFFU)
 8001806:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
  __HAL_LOCK(hdcmi);
 800180a:	f884 7034 	strb.w	r7, [r4, #52]	@ 0x34
  __HAL_DCMI_ENABLE(hdcmi);
 800180e:	6806      	ldr	r6, [r0, #0]
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8001810:	f8df e0ac 	ldr.w	lr, [pc, #172]	@ 80018c0 <HAL_DCMI_Start_DMA+0xd4>
  __HAL_DCMI_ENABLE(hdcmi);
 8001814:	f446 4680 	orr.w	r6, r6, #16384	@ 0x4000
 8001818:	6006      	str	r6, [r0, #0]
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 800181a:	6806      	ldr	r6, [r0, #0]
 800181c:	f026 0602 	bic.w	r6, r6, #2
 8001820:	6006      	str	r6, [r0, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8001822:	6806      	ldr	r6, [r0, #0]
 8001824:	ea46 0601 	orr.w	r6, r6, r1
 8001828:	4601      	mov	r1, r0
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 800182a:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 800182c:	f841 6b28 	str.w	r6, [r1], #40
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8001830:	4e22      	ldr	r6, [pc, #136]	@ (80018bc <HAL_DCMI_Start_DMA+0xd0>)
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8001832:	f8c0 e03c 	str.w	lr, [r0, #60]	@ 0x3c
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8001836:	64c6      	str	r6, [r0, #76]	@ 0x4c
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8001838:	f04f 0600 	mov.w	r6, #0
 800183c:	6506      	str	r6, [r0, #80]	@ 0x50
  hdcmi->XferCount = 0;
 800183e:	63a6      	str	r6, [r4, #56]	@ 0x38
  hdcmi->XferTransferNumber = 0;
 8001840:	6426      	str	r6, [r4, #64]	@ 0x40
  hdcmi->XferSize = 0;
 8001842:	63e6      	str	r6, [r4, #60]	@ 0x3c
  hdcmi->pBuffPtr = 0;
 8001844:	6466      	str	r6, [r4, #68]	@ 0x44
  if (Length <= 0xFFFFU)
 8001846:	d20c      	bcs.n	8001862 <HAL_DCMI_Start_DMA+0x76>
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8001848:	f000 fc28 	bl	800209c <HAL_DMA_Start_IT>
 800184c:	b368      	cbz	r0, 80018aa <HAL_DCMI_Start_DMA+0xbe>
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 800184e:	2340      	movs	r3, #64	@ 0x40
 8001850:	64e3      	str	r3, [r4, #76]	@ 0x4c
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001852:	f884 7035 	strb.w	r7, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdcmi);
 8001856:	2300      	movs	r3, #0
      return HAL_ERROR;
 8001858:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdcmi);
 800185a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 800185e:	b003      	add	sp, #12
 8001860:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8001862:	f8c0 e044 	str.w	lr, [r0, #68]	@ 0x44
    hdcmi->XferCount = 1;
 8001866:	63a7      	str	r7, [r4, #56]	@ 0x38
    hdcmi->pBuffPtr = pData;
 8001868:	6462      	str	r2, [r4, #68]	@ 0x44
    hdcmi->XferSize = Length;
 800186a:	63e3      	str	r3, [r4, #60]	@ 0x3c
    while (hdcmi->XferSize > 0xFFFFU)
 800186c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800186e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001872:	d213      	bcs.n	800189c <HAL_DCMI_Start_DMA+0xb0>
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8001874:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001876:	3b02      	subs	r3, #2
 8001878:	63a3      	str	r3, [r4, #56]	@ 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 800187a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800187c:	6423      	str	r3, [r4, #64]	@ 0x40
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 800187e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8001880:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8001882:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001886:	9200      	str	r2, [sp, #0]
 8001888:	462a      	mov	r2, r5
 800188a:	f001 fa2b 	bl	8002ce4 <HAL_DMAEx_MultiBufferStart_IT>
 800188e:	b160      	cbz	r0, 80018aa <HAL_DCMI_Start_DMA+0xbe>
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8001890:	2340      	movs	r3, #64	@ 0x40
 8001892:	64e3      	str	r3, [r4, #76]	@ 0x4c
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001894:	2301      	movs	r3, #1
 8001896:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      return HAL_ERROR;
 800189a:	e7dc      	b.n	8001856 <HAL_DCMI_Start_DMA+0x6a>
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 800189c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800189e:	085b      	lsrs	r3, r3, #1
 80018a0:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 80018a2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	63a3      	str	r3, [r4, #56]	@ 0x38
 80018a8:	e7e0      	b.n	800186c <HAL_DCMI_Start_DMA+0x80>
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80018aa:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdcmi);
 80018ac:	2000      	movs	r0, #0
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80018ae:	6813      	ldr	r3, [r2, #0]
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hdcmi);
 80018b6:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  return HAL_OK;
 80018ba:	e7d0      	b.n	800185e <HAL_DCMI_Start_DMA+0x72>
 80018bc:	0800193b 	.word	0x0800193b
 80018c0:	080016df 	.word	0x080016df

080018c4 <HAL_DCMI_Stop>:
{
 80018c4:	b538      	push	{r3, r4, r5, lr}
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 80018c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001934 <HAL_DCMI_Stop+0x70>)
 80018c8:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
{
 80018cc:	4604      	mov	r4, r0
 80018ce:	2502      	movs	r5, #2
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80018d6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80018da:	4353      	muls	r3, r2
  __HAL_LOCK(hdcmi);
 80018dc:	f890 2034 	ldrb.w	r2, [r0, #52]	@ 0x34
 80018e0:	2a01      	cmp	r2, #1
 80018e2:	d01f      	beq.n	8001924 <HAL_DCMI_Stop+0x60>
 80018e4:	2201      	movs	r2, #1
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80018e6:	f880 5035 	strb.w	r5, [r0, #53]	@ 0x35
  __HAL_LOCK(hdcmi);
 80018ea:	f880 2034 	strb.w	r2, [r0, #52]	@ 0x34
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 80018ee:	6802      	ldr	r2, [r0, #0]
 80018f0:	6811      	ldr	r1, [r2, #0]
 80018f2:	f021 0101 	bic.w	r1, r1, #1
 80018f6:	6011      	str	r1, [r2, #0]
    if (count == 0U)
 80018f8:	3b01      	subs	r3, #1
 80018fa:	d115      	bne.n	8001928 <HAL_DCMI_Stop+0x64>
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 80018fc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
      status = HAL_TIMEOUT;
 80018fe:	2503      	movs	r5, #3
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8001900:	f043 0320 	orr.w	r3, r3, #32
 8001904:	64e3      	str	r3, [r4, #76]	@ 0x4c
  __HAL_DCMI_DISABLE(hdcmi);
 8001906:	6813      	ldr	r3, [r2, #0]
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8001908:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
  __HAL_DCMI_DISABLE(hdcmi);
 800190a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800190e:	6013      	str	r3, [r2, #0]
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8001910:	f000 fcde 	bl	80022d0 <HAL_DMA_Abort>
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8001914:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001916:	64e3      	str	r3, [r4, #76]	@ 0x4c
  hdcmi->State = HAL_DCMI_STATE_READY;
 8001918:	2301      	movs	r3, #1
 800191a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdcmi);
 800191e:	2300      	movs	r3, #0
 8001920:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8001924:	4628      	mov	r0, r5
 8001926:	bd38      	pop	{r3, r4, r5, pc}
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8001928:	6815      	ldr	r5, [r2, #0]
 800192a:	f015 0501 	ands.w	r5, r5, #1
 800192e:	d1e3      	bne.n	80018f8 <HAL_DCMI_Stop+0x34>
 8001930:	e7e9      	b.n	8001906 <HAL_DCMI_Stop+0x42>
 8001932:	bf00      	nop
 8001934:	2400000c 	.word	0x2400000c

08001938 <HAL_DCMI_ErrorCallback>:
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
 8001938:	4770      	bx	lr

0800193a <DCMI_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800193a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 800193c:	b508      	push	{r3, lr}

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 800193e:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8001940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001942:	2b02      	cmp	r3, #2
 8001944:	d006      	beq.n	8001954 <DCMI_DMAError+0x1a>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8001946:	2301      	movs	r3, #1
 8001948:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 800194c:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800194e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001952:	64c3      	str	r3, [r0, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8001954:	f7ff fff0 	bl	8001938 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8001958:	bd08      	pop	{r3, pc}

0800195a <HAL_DCMI_LineEventCallback>:
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
 800195a:	4770      	bx	lr

0800195c <HAL_DCMI_VsyncEventCallback>:
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
 800195c:	4770      	bx	lr
	...

08001960 <HAL_DCMI_IRQHandler>:
{
 8001960:	b538      	push	{r3, r4, r5, lr}
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8001962:	6803      	ldr	r3, [r0, #0]
{
 8001964:	4604      	mov	r4, r0
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8001966:	691d      	ldr	r5, [r3, #16]
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8001968:	0769      	lsls	r1, r5, #29
 800196a:	d50c      	bpl.n	8001986 <HAL_DCMI_IRQHandler+0x26>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 800196c:	2204      	movs	r2, #4
 800196e:	615a      	str	r2, [r3, #20]
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8001970:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8001972:	f043 0302 	orr.w	r3, r3, #2
 8001976:	64c3      	str	r3, [r0, #76]	@ 0x4c
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001978:	4b1d      	ldr	r3, [pc, #116]	@ (80019f0 <HAL_DCMI_IRQHandler+0x90>)
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800197a:	f880 2035 	strb.w	r2, [r0, #53]	@ 0x35
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800197e:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8001980:	6503      	str	r3, [r0, #80]	@ 0x50
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001982:	f000 fe4b 	bl	800261c <HAL_DMA_Abort_IT>
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8001986:	07aa      	lsls	r2, r5, #30
 8001988:	d50e      	bpl.n	80019a8 <HAL_DCMI_IRQHandler+0x48>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 800198a:	6823      	ldr	r3, [r4, #0]
 800198c:	2202      	movs	r2, #2
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800198e:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8001990:	615a      	str	r2, [r3, #20]
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8001992:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	64e3      	str	r3, [r4, #76]	@ 0x4c
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800199a:	2304      	movs	r3, #4
 800199c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80019a0:	4b13      	ldr	r3, [pc, #76]	@ (80019f0 <HAL_DCMI_IRQHandler+0x90>)
 80019a2:	6503      	str	r3, [r0, #80]	@ 0x50
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80019a4:	f000 fe3a 	bl	800261c <HAL_DMA_Abort_IT>
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 80019a8:	06eb      	lsls	r3, r5, #27
 80019aa:	d505      	bpl.n	80019b8 <HAL_DCMI_IRQHandler+0x58>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 80019ac:	6823      	ldr	r3, [r4, #0]
 80019ae:	2210      	movs	r2, #16
    HAL_DCMI_LineEventCallback(hdcmi);
 80019b0:	4620      	mov	r0, r4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 80019b2:	615a      	str	r2, [r3, #20]
    HAL_DCMI_LineEventCallback(hdcmi);
 80019b4:	f7ff ffd1 	bl	800195a <HAL_DCMI_LineEventCallback>
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 80019b8:	0728      	lsls	r0, r5, #28
 80019ba:	d505      	bpl.n	80019c8 <HAL_DCMI_IRQHandler+0x68>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 80019bc:	6823      	ldr	r3, [r4, #0]
 80019be:	2208      	movs	r2, #8
    HAL_DCMI_VsyncEventCallback(hdcmi);
 80019c0:	4620      	mov	r0, r4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 80019c2:	615a      	str	r2, [r3, #20]
    HAL_DCMI_VsyncEventCallback(hdcmi);
 80019c4:	f7ff ffca 	bl	800195c <HAL_DCMI_VsyncEventCallback>
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 80019c8:	07e9      	lsls	r1, r5, #31
 80019ca:	d510      	bpl.n	80019ee <HAL_DCMI_IRQHandler+0x8e>
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80019cc:	6823      	ldr	r3, [r4, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	0792      	lsls	r2, r2, #30
 80019d2:	d503      	bpl.n	80019dc <HAL_DCMI_IRQHandler+0x7c>
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80019d4:	68da      	ldr	r2, [r3, #12]
 80019d6:	f022 021e 	bic.w	r2, r2, #30
 80019da:	60da      	str	r2, [r3, #12]
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 80019dc:	68da      	ldr	r2, [r3, #12]
    HAL_DCMI_FrameEventCallback(hdcmi);
 80019de:	4620      	mov	r0, r4
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 80019e0:	f022 0201 	bic.w	r2, r2, #1
 80019e4:	60da      	str	r2, [r3, #12]
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 80019e6:	2201      	movs	r2, #1
 80019e8:	615a      	str	r2, [r3, #20]
    HAL_DCMI_FrameEventCallback(hdcmi);
 80019ea:	f7fe ff79 	bl	80008e0 <HAL_DCMI_FrameEventCallback>
}
 80019ee:	bd38      	pop	{r3, r4, r5, pc}
 80019f0:	0800193b 	.word	0x0800193b

080019f4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80019f6:	f8df c17c 	ldr.w	ip, [pc, #380]	@ 8001b74 <DMA_SetConfig+0x180>
 80019fa:	6804      	ldr	r4, [r0, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019fc:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80019fe:	4564      	cmp	r4, ip
 8001a00:	d045      	beq.n	8001a8e <DMA_SetConfig+0x9a>
 8001a02:	4d59      	ldr	r5, [pc, #356]	@ (8001b68 <DMA_SetConfig+0x174>)
 8001a04:	42ac      	cmp	r4, r5
 8001a06:	d042      	beq.n	8001a8e <DMA_SetConfig+0x9a>
 8001a08:	3518      	adds	r5, #24
 8001a0a:	42ac      	cmp	r4, r5
 8001a0c:	d03f      	beq.n	8001a8e <DMA_SetConfig+0x9a>
 8001a0e:	3518      	adds	r5, #24
 8001a10:	42ac      	cmp	r4, r5
 8001a12:	d03c      	beq.n	8001a8e <DMA_SetConfig+0x9a>
 8001a14:	3518      	adds	r5, #24
 8001a16:	42ac      	cmp	r4, r5
 8001a18:	d039      	beq.n	8001a8e <DMA_SetConfig+0x9a>
 8001a1a:	3518      	adds	r5, #24
 8001a1c:	42ac      	cmp	r4, r5
 8001a1e:	d036      	beq.n	8001a8e <DMA_SetConfig+0x9a>
 8001a20:	3518      	adds	r5, #24
 8001a22:	42ac      	cmp	r4, r5
 8001a24:	d033      	beq.n	8001a8e <DMA_SetConfig+0x9a>
 8001a26:	3518      	adds	r5, #24
 8001a28:	42ac      	cmp	r4, r5
 8001a2a:	d030      	beq.n	8001a8e <DMA_SetConfig+0x9a>
 8001a2c:	f505 7556 	add.w	r5, r5, #856	@ 0x358
 8001a30:	42ac      	cmp	r4, r5
 8001a32:	d02c      	beq.n	8001a8e <DMA_SetConfig+0x9a>
 8001a34:	3518      	adds	r5, #24
 8001a36:	42ac      	cmp	r4, r5
 8001a38:	d029      	beq.n	8001a8e <DMA_SetConfig+0x9a>
 8001a3a:	3518      	adds	r5, #24
 8001a3c:	42ac      	cmp	r4, r5
 8001a3e:	d026      	beq.n	8001a8e <DMA_SetConfig+0x9a>
 8001a40:	3518      	adds	r5, #24
 8001a42:	42ac      	cmp	r4, r5
 8001a44:	d023      	beq.n	8001a8e <DMA_SetConfig+0x9a>
 8001a46:	3518      	adds	r5, #24
 8001a48:	42ac      	cmp	r4, r5
 8001a4a:	d020      	beq.n	8001a8e <DMA_SetConfig+0x9a>
 8001a4c:	3518      	adds	r5, #24
 8001a4e:	42ac      	cmp	r4, r5
 8001a50:	d01d      	beq.n	8001a8e <DMA_SetConfig+0x9a>
 8001a52:	3518      	adds	r5, #24
 8001a54:	42ac      	cmp	r4, r5
 8001a56:	d01a      	beq.n	8001a8e <DMA_SetConfig+0x9a>
 8001a58:	3518      	adds	r5, #24
 8001a5a:	42ac      	cmp	r4, r5
 8001a5c:	d017      	beq.n	8001a8e <DMA_SetConfig+0x9a>
 8001a5e:	4d43      	ldr	r5, [pc, #268]	@ (8001b6c <DMA_SetConfig+0x178>)
 8001a60:	42ac      	cmp	r4, r5
 8001a62:	d014      	beq.n	8001a8e <DMA_SetConfig+0x9a>
 8001a64:	3514      	adds	r5, #20
 8001a66:	42ac      	cmp	r4, r5
 8001a68:	d011      	beq.n	8001a8e <DMA_SetConfig+0x9a>
 8001a6a:	3514      	adds	r5, #20
 8001a6c:	42ac      	cmp	r4, r5
 8001a6e:	d00e      	beq.n	8001a8e <DMA_SetConfig+0x9a>
 8001a70:	3514      	adds	r5, #20
 8001a72:	42ac      	cmp	r4, r5
 8001a74:	d00b      	beq.n	8001a8e <DMA_SetConfig+0x9a>
 8001a76:	3514      	adds	r5, #20
 8001a78:	42ac      	cmp	r4, r5
 8001a7a:	d008      	beq.n	8001a8e <DMA_SetConfig+0x9a>
 8001a7c:	3514      	adds	r5, #20
 8001a7e:	42ac      	cmp	r4, r5
 8001a80:	d005      	beq.n	8001a8e <DMA_SetConfig+0x9a>
 8001a82:	3514      	adds	r5, #20
 8001a84:	42ac      	cmp	r4, r5
 8001a86:	d002      	beq.n	8001a8e <DMA_SetConfig+0x9a>
 8001a88:	3514      	adds	r5, #20
 8001a8a:	42ac      	cmp	r4, r5
 8001a8c:	d167      	bne.n	8001b5e <DMA_SetConfig+0x16a>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a8e:	e9d0 5619 	ldrd	r5, r6, [r0, #100]	@ 0x64
 8001a92:	606e      	str	r6, [r5, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001a94:	6ec5      	ldr	r5, [r0, #108]	@ 0x6c
 8001a96:	b115      	cbz	r5, 8001a9e <DMA_SetConfig+0xaa>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a98:	e9d0 561c 	ldrd	r5, r6, [r0, #112]	@ 0x70
 8001a9c:	606e      	str	r6, [r5, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a9e:	4564      	cmp	r4, ip
 8001aa0:	d037      	beq.n	8001b12 <DMA_SetConfig+0x11e>
 8001aa2:	4d31      	ldr	r5, [pc, #196]	@ (8001b68 <DMA_SetConfig+0x174>)
 8001aa4:	42ac      	cmp	r4, r5
 8001aa6:	d034      	beq.n	8001b12 <DMA_SetConfig+0x11e>
 8001aa8:	3518      	adds	r5, #24
 8001aaa:	42ac      	cmp	r4, r5
 8001aac:	d031      	beq.n	8001b12 <DMA_SetConfig+0x11e>
 8001aae:	3518      	adds	r5, #24
 8001ab0:	42ac      	cmp	r4, r5
 8001ab2:	d02e      	beq.n	8001b12 <DMA_SetConfig+0x11e>
 8001ab4:	3518      	adds	r5, #24
 8001ab6:	42ac      	cmp	r4, r5
 8001ab8:	d02b      	beq.n	8001b12 <DMA_SetConfig+0x11e>
 8001aba:	3518      	adds	r5, #24
 8001abc:	42ac      	cmp	r4, r5
 8001abe:	d028      	beq.n	8001b12 <DMA_SetConfig+0x11e>
 8001ac0:	3518      	adds	r5, #24
 8001ac2:	42ac      	cmp	r4, r5
 8001ac4:	d025      	beq.n	8001b12 <DMA_SetConfig+0x11e>
 8001ac6:	3518      	adds	r5, #24
 8001ac8:	42ac      	cmp	r4, r5
 8001aca:	d022      	beq.n	8001b12 <DMA_SetConfig+0x11e>
 8001acc:	f505 7556 	add.w	r5, r5, #856	@ 0x358
 8001ad0:	42ac      	cmp	r4, r5
 8001ad2:	d01e      	beq.n	8001b12 <DMA_SetConfig+0x11e>
 8001ad4:	3518      	adds	r5, #24
 8001ad6:	42ac      	cmp	r4, r5
 8001ad8:	d01b      	beq.n	8001b12 <DMA_SetConfig+0x11e>
 8001ada:	3518      	adds	r5, #24
 8001adc:	42ac      	cmp	r4, r5
 8001ade:	d018      	beq.n	8001b12 <DMA_SetConfig+0x11e>
 8001ae0:	3518      	adds	r5, #24
 8001ae2:	42ac      	cmp	r4, r5
 8001ae4:	d015      	beq.n	8001b12 <DMA_SetConfig+0x11e>
 8001ae6:	3518      	adds	r5, #24
 8001ae8:	42ac      	cmp	r4, r5
 8001aea:	d012      	beq.n	8001b12 <DMA_SetConfig+0x11e>
 8001aec:	3518      	adds	r5, #24
 8001aee:	42ac      	cmp	r4, r5
 8001af0:	d00f      	beq.n	8001b12 <DMA_SetConfig+0x11e>
 8001af2:	3518      	adds	r5, #24
 8001af4:	42ac      	cmp	r4, r5
 8001af6:	d00c      	beq.n	8001b12 <DMA_SetConfig+0x11e>
 8001af8:	3518      	adds	r5, #24
 8001afa:	42ac      	cmp	r4, r5
 8001afc:	d009      	beq.n	8001b12 <DMA_SetConfig+0x11e>

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001afe:	4d1b      	ldr	r5, [pc, #108]	@ (8001b6c <DMA_SetConfig+0x178>)
 8001b00:	42ac      	cmp	r4, r5
 8001b02:	d117      	bne.n	8001b34 <DMA_SetConfig+0x140>
  {
    /* Clear all flags */
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8001b04:	6dc5      	ldr	r5, [r0, #92]	@ 0x5c
 8001b06:	f005 061f 	and.w	r6, r5, #31
 8001b0a:	2501      	movs	r5, #1
 8001b0c:	40b5      	lsls	r5, r6
 8001b0e:	607d      	str	r5, [r7, #4]
 8001b10:	e009      	b.n	8001b26 <DMA_SetConfig+0x132>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001b12:	6dc5      	ldr	r5, [r0, #92]	@ 0x5c
 8001b14:	f005 061f 	and.w	r6, r5, #31
 8001b18:	253f      	movs	r5, #63	@ 0x3f
 8001b1a:	40b5      	lsls	r5, r6
 8001b1c:	60bd      	str	r5, [r7, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b1e:	6825      	ldr	r5, [r4, #0]
 8001b20:	f425 2580 	bic.w	r5, r5, #262144	@ 0x40000
 8001b24:	6025      	str	r5, [r4, #0]

    /* Configure DMA Channel data length */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8001b26:	6063      	str	r3, [r4, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b28:	6883      	ldr	r3, [r0, #8]
 8001b2a:	2b40      	cmp	r3, #64	@ 0x40
 8001b2c:	d118      	bne.n	8001b60 <DMA_SetConfig+0x16c>
    {
      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8001b2e:	60a2      	str	r2, [r4, #8]

      /* Configure DMA Channel source address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8001b30:	60e1      	str	r1, [r4, #12]
 8001b32:	e014      	b.n	8001b5e <DMA_SetConfig+0x16a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001b34:	4d0e      	ldr	r5, [pc, #56]	@ (8001b70 <DMA_SetConfig+0x17c>)
 8001b36:	42ac      	cmp	r4, r5
 8001b38:	d0e4      	beq.n	8001b04 <DMA_SetConfig+0x110>
 8001b3a:	3514      	adds	r5, #20
 8001b3c:	42ac      	cmp	r4, r5
 8001b3e:	d0e1      	beq.n	8001b04 <DMA_SetConfig+0x110>
 8001b40:	3514      	adds	r5, #20
 8001b42:	42ac      	cmp	r4, r5
 8001b44:	d0de      	beq.n	8001b04 <DMA_SetConfig+0x110>
 8001b46:	3514      	adds	r5, #20
 8001b48:	42ac      	cmp	r4, r5
 8001b4a:	d0db      	beq.n	8001b04 <DMA_SetConfig+0x110>
 8001b4c:	3514      	adds	r5, #20
 8001b4e:	42ac      	cmp	r4, r5
 8001b50:	d0d8      	beq.n	8001b04 <DMA_SetConfig+0x110>
 8001b52:	3514      	adds	r5, #20
 8001b54:	42ac      	cmp	r4, r5
 8001b56:	d0d5      	beq.n	8001b04 <DMA_SetConfig+0x110>
 8001b58:	3514      	adds	r5, #20
 8001b5a:	42ac      	cmp	r4, r5
 8001b5c:	d0d2      	beq.n	8001b04 <DMA_SetConfig+0x110>
  }
  else
  {
    /* Nothing To Do */
  }
}
 8001b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8001b60:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8001b62:	60e2      	str	r2, [r4, #12]
}
 8001b64:	e7fb      	b.n	8001b5e <DMA_SetConfig+0x16a>
 8001b66:	bf00      	nop
 8001b68:	40020028 	.word	0x40020028
 8001b6c:	58025408 	.word	0x58025408
 8001b70:	5802541c 	.word	0x5802541c
 8001b74:	40020010 	.word	0x40020010

08001b78 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b78:	6803      	ldr	r3, [r0, #0]
{
 8001b7a:	4602      	mov	r2, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b7c:	4923      	ldr	r1, [pc, #140]	@ (8001c0c <DMA_CalcBaseAndBitshift+0x94>)
 8001b7e:	428b      	cmp	r3, r1
{
 8001b80:	b510      	push	{r4, lr}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b82:	d031      	beq.n	8001be8 <DMA_CalcBaseAndBitshift+0x70>
 8001b84:	3118      	adds	r1, #24
 8001b86:	428b      	cmp	r3, r1
 8001b88:	d02e      	beq.n	8001be8 <DMA_CalcBaseAndBitshift+0x70>
 8001b8a:	3118      	adds	r1, #24
 8001b8c:	428b      	cmp	r3, r1
 8001b8e:	d02b      	beq.n	8001be8 <DMA_CalcBaseAndBitshift+0x70>
 8001b90:	3118      	adds	r1, #24
 8001b92:	428b      	cmp	r3, r1
 8001b94:	d028      	beq.n	8001be8 <DMA_CalcBaseAndBitshift+0x70>
 8001b96:	3118      	adds	r1, #24
 8001b98:	428b      	cmp	r3, r1
 8001b9a:	d025      	beq.n	8001be8 <DMA_CalcBaseAndBitshift+0x70>
 8001b9c:	3118      	adds	r1, #24
 8001b9e:	428b      	cmp	r3, r1
 8001ba0:	d022      	beq.n	8001be8 <DMA_CalcBaseAndBitshift+0x70>
 8001ba2:	3118      	adds	r1, #24
 8001ba4:	428b      	cmp	r3, r1
 8001ba6:	d01f      	beq.n	8001be8 <DMA_CalcBaseAndBitshift+0x70>
 8001ba8:	3118      	adds	r1, #24
 8001baa:	428b      	cmp	r3, r1
 8001bac:	d01c      	beq.n	8001be8 <DMA_CalcBaseAndBitshift+0x70>
 8001bae:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8001bb2:	428b      	cmp	r3, r1
 8001bb4:	d018      	beq.n	8001be8 <DMA_CalcBaseAndBitshift+0x70>
 8001bb6:	3118      	adds	r1, #24
 8001bb8:	428b      	cmp	r3, r1
 8001bba:	d015      	beq.n	8001be8 <DMA_CalcBaseAndBitshift+0x70>
 8001bbc:	3118      	adds	r1, #24
 8001bbe:	428b      	cmp	r3, r1
 8001bc0:	d012      	beq.n	8001be8 <DMA_CalcBaseAndBitshift+0x70>
 8001bc2:	3118      	adds	r1, #24
 8001bc4:	428b      	cmp	r3, r1
 8001bc6:	d00f      	beq.n	8001be8 <DMA_CalcBaseAndBitshift+0x70>
 8001bc8:	3118      	adds	r1, #24
 8001bca:	428b      	cmp	r3, r1
 8001bcc:	d00c      	beq.n	8001be8 <DMA_CalcBaseAndBitshift+0x70>
 8001bce:	3118      	adds	r1, #24
 8001bd0:	428b      	cmp	r3, r1
 8001bd2:	d009      	beq.n	8001be8 <DMA_CalcBaseAndBitshift+0x70>
 8001bd4:	3118      	adds	r1, #24
 8001bd6:	428b      	cmp	r3, r1
 8001bd8:	d006      	beq.n	8001be8 <DMA_CalcBaseAndBitshift+0x70>
 8001bda:	3118      	adds	r1, #24
 8001bdc:	428b      	cmp	r3, r1
 8001bde:	d003      	beq.n	8001be8 <DMA_CalcBaseAndBitshift+0x70>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8001be0:	f023 00ff 	bic.w	r0, r3, #255	@ 0xff
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8001be4:	6590      	str	r0, [r2, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
}
 8001be6:	bd10      	pop	{r4, pc}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001be8:	b2dc      	uxtb	r4, r3
 8001bea:	2118      	movs	r1, #24
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8001bec:	4808      	ldr	r0, [pc, #32]	@ (8001c10 <DMA_CalcBaseAndBitshift+0x98>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001bee:	3c10      	subs	r4, #16
 8001bf0:	fbb4 f1f1 	udiv	r1, r4, r1
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8001bf4:	f001 0107 	and.w	r1, r1, #7
    if (stream_number > 3U)
 8001bf8:	2c5f      	cmp	r4, #95	@ 0x5f
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8001bfa:	5c41      	ldrb	r1, [r0, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8001bfc:	f423 707f 	bic.w	r0, r3, #1020	@ 0x3fc
 8001c00:	f020 0003 	bic.w	r0, r0, #3
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8001c04:	65d1      	str	r1, [r2, #92]	@ 0x5c
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8001c06:	bf88      	it	hi
 8001c08:	3004      	addhi	r0, #4
 8001c0a:	e7eb      	b.n	8001be4 <DMA_CalcBaseAndBitshift+0x6c>
 8001c0c:	40020010 	.word	0x40020010
 8001c10:	0800cf4b 	.word	0x0800cf4b

08001c14 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8001c14:	6802      	ldr	r2, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001c16:	4921      	ldr	r1, [pc, #132]	@ (8001c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001c18:	b2d3      	uxtb	r3, r2
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001c1a:	428a      	cmp	r2, r1
 8001c1c:	d028      	beq.n	8001c70 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 8001c1e:	3114      	adds	r1, #20
 8001c20:	428a      	cmp	r2, r1
 8001c22:	d025      	beq.n	8001c70 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 8001c24:	3114      	adds	r1, #20
 8001c26:	428a      	cmp	r2, r1
 8001c28:	d022      	beq.n	8001c70 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 8001c2a:	3114      	adds	r1, #20
 8001c2c:	428a      	cmp	r2, r1
 8001c2e:	d01f      	beq.n	8001c70 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 8001c30:	3114      	adds	r1, #20
 8001c32:	428a      	cmp	r2, r1
 8001c34:	d01c      	beq.n	8001c70 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 8001c36:	3114      	adds	r1, #20
 8001c38:	428a      	cmp	r2, r1
 8001c3a:	d019      	beq.n	8001c70 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 8001c3c:	3114      	adds	r1, #20
 8001c3e:	428a      	cmp	r2, r1
 8001c40:	d016      	beq.n	8001c70 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 8001c42:	3114      	adds	r1, #20
 8001c44:	428a      	cmp	r2, r1
 8001c46:	d013      	beq.n	8001c70 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001c48:	2118      	movs	r1, #24
 8001c4a:	3b10      	subs	r3, #16
 8001c4c:	fbb3 f3f1 	udiv	r3, r3, r1

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8001c50:	4913      	ldr	r1, [pc, #76]	@ (8001ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8001c52:	4411      	add	r1, r2
 8001c54:	29a8      	cmp	r1, #168	@ 0xa8
 8001c56:	d91e      	bls.n	8001c96 <DMA_CalcDMAMUXChannelBaseAndMask+0x82>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8001c58:	f103 5280 	add.w	r2, r3, #268435456	@ 0x10000000
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	f003 031f 	and.w	r3, r3, #31
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8001c62:	f502 4202 	add.w	r2, r2, #33280	@ 0x8200
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001c66:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6a:	490e      	ldr	r1, [pc, #56]	@ (8001ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8001c6c:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001c6e:	e00e      	b.n	8001c8e <DMA_CalcDMAMUXChannelBaseAndMask+0x7a>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8001c70:	2214      	movs	r2, #20
 8001c72:	3b08      	subs	r3, #8
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001c74:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8001c76:	fbb3 f3f2 	udiv	r3, r3, r2
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001c7a:	f103 52b0 	add.w	r2, r3, #369098752	@ 0x16000000
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001c7e:	f003 031f 	and.w	r3, r3, #31
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001c82:	f502 4216 	add.w	r2, r2, #38400	@ 0x9600
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001c86:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8a:	4907      	ldr	r1, [pc, #28]	@ (8001ca8 <DMA_CalcDMAMUXChannelBaseAndMask+0x94>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001c8c:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001c8e:	6683      	str	r3, [r0, #104]	@ 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8001c90:	e9c0 2118 	strd	r2, r1, [r0, #96]	@ 0x60
  }
}
 8001c94:	4770      	bx	lr
      stream_number += 8U;
 8001c96:	3308      	adds	r3, #8
 8001c98:	e7de      	b.n	8001c58 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>
 8001c9a:	bf00      	nop
 8001c9c:	58025408 	.word	0x58025408
 8001ca0:	bffdfbf0 	.word	0xbffdfbf0
 8001ca4:	40020880 	.word	0x40020880
 8001ca8:	58025880 	.word	0x58025880

08001cac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001cac:	7902      	ldrb	r2, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8001cae:	1e51      	subs	r1, r2, #1
 8001cb0:	2907      	cmp	r1, #7
{
 8001cb2:	b510      	push	{r4, lr}
  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8001cb4:	d821      	bhi.n	8001cfa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4e>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001cb6:	6803      	ldr	r3, [r0, #0]
 8001cb8:	4c13      	ldr	r4, [pc, #76]	@ (8001d08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x5c>)
 8001cba:	42a3      	cmp	r3, r4
 8001cbc:	d01e      	beq.n	8001cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8001cbe:	3414      	adds	r4, #20
 8001cc0:	42a3      	cmp	r3, r4
 8001cc2:	d01b      	beq.n	8001cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8001cc4:	3414      	adds	r4, #20
 8001cc6:	42a3      	cmp	r3, r4
 8001cc8:	d018      	beq.n	8001cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8001cca:	3414      	adds	r4, #20
 8001ccc:	42a3      	cmp	r3, r4
 8001cce:	d015      	beq.n	8001cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8001cd0:	3414      	adds	r4, #20
 8001cd2:	42a3      	cmp	r3, r4
 8001cd4:	d012      	beq.n	8001cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8001cd6:	3414      	adds	r4, #20
 8001cd8:	42a3      	cmp	r3, r4
 8001cda:	d00f      	beq.n	8001cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8001cdc:	3414      	adds	r4, #20
 8001cde:	42a3      	cmp	r3, r4
 8001ce0:	d00c      	beq.n	8001cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8001ce2:	3414      	adds	r4, #20
 8001ce4:	42a3      	cmp	r3, r4
 8001ce6:	d009      	beq.n	8001cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001ce8:	4b08      	ldr	r3, [pc, #32]	@ (8001d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x60>)
 8001cea:	4413      	add	r3, r2
 8001cec:	4a08      	ldr	r2, [pc, #32]	@ (8001d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x64>)
 8001cee:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8001cf0:	e9c0 321b 	strd	r3, r2, [r0, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	408b      	lsls	r3, r1
 8001cf8:	6743      	str	r3, [r0, #116]	@ 0x74
  }
}
 8001cfa:	bd10      	pop	{r4, pc}
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8001cfc:	4b05      	ldr	r3, [pc, #20]	@ (8001d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>)
 8001cfe:	4413      	add	r3, r2
 8001d00:	4a05      	ldr	r2, [pc, #20]	@ (8001d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>)
 8001d02:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8001d04:	e7f4      	b.n	8001cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>
 8001d06:	bf00      	nop
 8001d08:	58025408 	.word	0x58025408
 8001d0c:	1000823f 	.word	0x1000823f
 8001d10:	40020940 	.word	0x40020940
 8001d14:	1600963f 	.word	0x1600963f
 8001d18:	58025940 	.word	0x58025940

08001d1c <HAL_DMA_Init>:
{
 8001d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d1e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001d20:	f7ff fbf8 	bl	8001514 <HAL_GetTick>
 8001d24:	4606      	mov	r6, r0
  if(hdma == NULL)
 8001d26:	2c00      	cmp	r4, #0
 8001d28:	f000 80ee 	beq.w	8001f08 <HAL_DMA_Init+0x1ec>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001d2c:	6823      	ldr	r3, [r4, #0]
 8001d2e:	4d83      	ldr	r5, [pc, #524]	@ (8001f3c <HAL_DMA_Init+0x220>)
 8001d30:	42ab      	cmp	r3, r5
 8001d32:	d06a      	beq.n	8001e0a <HAL_DMA_Init+0xee>
 8001d34:	4a82      	ldr	r2, [pc, #520]	@ (8001f40 <HAL_DMA_Init+0x224>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d067      	beq.n	8001e0a <HAL_DMA_Init+0xee>
 8001d3a:	3218      	adds	r2, #24
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d064      	beq.n	8001e0a <HAL_DMA_Init+0xee>
 8001d40:	3218      	adds	r2, #24
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d061      	beq.n	8001e0a <HAL_DMA_Init+0xee>
 8001d46:	3218      	adds	r2, #24
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d05e      	beq.n	8001e0a <HAL_DMA_Init+0xee>
 8001d4c:	3218      	adds	r2, #24
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d05b      	beq.n	8001e0a <HAL_DMA_Init+0xee>
 8001d52:	3218      	adds	r2, #24
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d058      	beq.n	8001e0a <HAL_DMA_Init+0xee>
 8001d58:	3218      	adds	r2, #24
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d055      	beq.n	8001e0a <HAL_DMA_Init+0xee>
 8001d5e:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d051      	beq.n	8001e0a <HAL_DMA_Init+0xee>
 8001d66:	3218      	adds	r2, #24
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d04e      	beq.n	8001e0a <HAL_DMA_Init+0xee>
 8001d6c:	3218      	adds	r2, #24
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d04b      	beq.n	8001e0a <HAL_DMA_Init+0xee>
 8001d72:	3218      	adds	r2, #24
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d048      	beq.n	8001e0a <HAL_DMA_Init+0xee>
 8001d78:	3218      	adds	r2, #24
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d045      	beq.n	8001e0a <HAL_DMA_Init+0xee>
 8001d7e:	3218      	adds	r2, #24
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d042      	beq.n	8001e0a <HAL_DMA_Init+0xee>
 8001d84:	3218      	adds	r2, #24
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d03f      	beq.n	8001e0a <HAL_DMA_Init+0xee>
 8001d8a:	3218      	adds	r2, #24
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d03c      	beq.n	8001e0a <HAL_DMA_Init+0xee>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001d90:	4a6c      	ldr	r2, [pc, #432]	@ (8001f44 <HAL_DMA_Init+0x228>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	f040 8157 	bne.w	8002046 <HAL_DMA_Init+0x32a>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d98:	2202      	movs	r2, #2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d9a:	68a1      	ldr	r1, [r4, #8]
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d9c:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8001da0:	2200      	movs	r2, #0
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001da2:	2940      	cmp	r1, #64	@ 0x40
    __HAL_UNLOCK(hdma);
 8001da4:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001da8:	6818      	ldr	r0, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001daa:	f420 30ff 	bic.w	r0, r0, #130560	@ 0x1fe00
 8001dae:	f420 70f8 	bic.w	r0, r0, #496	@ 0x1f0
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001db2:	f000 8166 	beq.w	8002082 <HAL_DMA_Init+0x366>
 8001db6:	f1a1 0280 	sub.w	r2, r1, #128	@ 0x80
 8001dba:	4251      	negs	r1, r2
 8001dbc:	4151      	adcs	r1, r2
 8001dbe:	0389      	lsls	r1, r1, #14
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001dc0:	e9d4 6203 	ldrd	r6, r2, [r4, #12]
 8001dc4:	08d2      	lsrs	r2, r2, #3
 8001dc6:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001dca:	6966      	ldr	r6, [r4, #20]
 8001dcc:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001dd0:	69a6      	ldr	r6, [r4, #24]
 8001dd2:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001dd6:	69e6      	ldr	r6, [r4, #28]
 8001dd8:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001ddc:	6a26      	ldr	r6, [r4, #32]
 8001dde:	ea42 1216 	orr.w	r2, r2, r6, lsr #4
 8001de2:	4302      	orrs	r2, r0
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001de4:	4620      	mov	r0, r4
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001de6:	4311      	orrs	r1, r2
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001de8:	4a57      	ldr	r2, [pc, #348]	@ (8001f48 <HAL_DMA_Init+0x22c>)
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001dea:	6019      	str	r1, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001dec:	441a      	add	r2, r3
 8001dee:	2314      	movs	r3, #20
 8001df0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001df4:	0092      	lsls	r2, r2, #2
 8001df6:	65e2      	str	r2, [r4, #92]	@ 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001df8:	f7ff febe 	bl	8001b78 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001dfc:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001dfe:	f003 021f 	and.w	r2, r3, #31
 8001e02:	2301      	movs	r3, #1
 8001e04:	4093      	lsls	r3, r2
 8001e06:	6043      	str	r3, [r0, #4]
 8001e08:	e0b4      	b.n	8001f74 <HAL_DMA_Init+0x258>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e0a:	2202      	movs	r2, #2
    __HAL_DMA_DISABLE(hdma);
 8001e0c:	42ab      	cmp	r3, r5
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e0e:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8001e12:	f04f 0200 	mov.w	r2, #0
 8001e16:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
    __HAL_DMA_DISABLE(hdma);
 8001e1a:	d01e      	beq.n	8001e5a <HAL_DMA_Init+0x13e>
 8001e1c:	4a48      	ldr	r2, [pc, #288]	@ (8001f40 <HAL_DMA_Init+0x224>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d01b      	beq.n	8001e5a <HAL_DMA_Init+0x13e>
 8001e22:	3218      	adds	r2, #24
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d018      	beq.n	8001e5a <HAL_DMA_Init+0x13e>
 8001e28:	3218      	adds	r2, #24
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d015      	beq.n	8001e5a <HAL_DMA_Init+0x13e>
 8001e2e:	3218      	adds	r2, #24
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d012      	beq.n	8001e5a <HAL_DMA_Init+0x13e>
 8001e34:	3218      	adds	r2, #24
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d00f      	beq.n	8001e5a <HAL_DMA_Init+0x13e>
 8001e3a:	3218      	adds	r2, #24
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d00c      	beq.n	8001e5a <HAL_DMA_Init+0x13e>
 8001e40:	3218      	adds	r2, #24
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d009      	beq.n	8001e5a <HAL_DMA_Init+0x13e>
 8001e46:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d005      	beq.n	8001e5a <HAL_DMA_Init+0x13e>
 8001e4e:	3218      	adds	r2, #24
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d002      	beq.n	8001e5a <HAL_DMA_Init+0x13e>
 8001e54:	3218      	adds	r2, #24
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d0ff      	beq.n	8001e5a <HAL_DMA_Init+0x13e>
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	f022 0201 	bic.w	r2, r2, #1
 8001e60:	601a      	str	r2, [r3, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001e62:	6822      	ldr	r2, [r4, #0]
 8001e64:	6813      	ldr	r3, [r2, #0]
 8001e66:	07df      	lsls	r7, r3, #31
 8001e68:	d444      	bmi.n	8001ef4 <HAL_DMA_Init+0x1d8>
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001e6a:	6813      	ldr	r3, [r2, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e6c:	4837      	ldr	r0, [pc, #220]	@ (8001f4c <HAL_DMA_Init+0x230>)
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e6e:	69a1      	ldr	r1, [r4, #24]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e70:	4018      	ands	r0, r3
    registerValue |=  hdma->Init.Direction           |
 8001e72:	e9d4 3602 	ldrd	r3, r6, [r4, #8]
 8001e76:	4333      	orrs	r3, r6
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e78:	6926      	ldr	r6, [r4, #16]
 8001e7a:	4333      	orrs	r3, r6
 8001e7c:	6966      	ldr	r6, [r4, #20]
 8001e7e:	4333      	orrs	r3, r6
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e80:	69e6      	ldr	r6, [r4, #28]
 8001e82:	430b      	orrs	r3, r1
 8001e84:	4333      	orrs	r3, r6
            hdma->Init.Mode                | hdma->Init.Priority;
 8001e86:	6a26      	ldr	r6, [r4, #32]
 8001e88:	4333      	orrs	r3, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e8a:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8001e8c:	2e04      	cmp	r6, #4
    registerValue |=  hdma->Init.Direction           |
 8001e8e:	ea43 0300 	orr.w	r3, r3, r0
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e92:	bf02      	ittt	eq
 8001e94:	e9d4 070b 	ldrdeq	r0, r7, [r4, #44]	@ 0x2c
 8001e98:	4338      	orreq	r0, r7
 8001e9a:	4303      	orreq	r3, r0
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001e9c:	482c      	ldr	r0, [pc, #176]	@ (8001f50 <HAL_DMA_Init+0x234>)
 8001e9e:	6800      	ldr	r0, [r0, #0]
 8001ea0:	0c00      	lsrs	r0, r0, #16
 8001ea2:	0400      	lsls	r0, r0, #16
 8001ea4:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 8001ea8:	d30e      	bcc.n	8001ec8 <HAL_DMA_Init+0x1ac>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001eaa:	6860      	ldr	r0, [r4, #4]
 8001eac:	f1a0 0729 	sub.w	r7, r0, #41	@ 0x29
 8001eb0:	2f05      	cmp	r7, #5
 8001eb2:	d907      	bls.n	8001ec4 <HAL_DMA_Init+0x1a8>
 8001eb4:	383f      	subs	r0, #63	@ 0x3f
 8001eb6:	2813      	cmp	r0, #19
 8001eb8:	d806      	bhi.n	8001ec8 <HAL_DMA_Init+0x1ac>
 8001eba:	4f26      	ldr	r7, [pc, #152]	@ (8001f54 <HAL_DMA_Init+0x238>)
 8001ebc:	fa27 f000 	lsr.w	r0, r7, r0
 8001ec0:	07c0      	lsls	r0, r0, #31
 8001ec2:	d501      	bpl.n	8001ec8 <HAL_DMA_Init+0x1ac>
        registerValue |= DMA_SxCR_TRBUFF;
 8001ec4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001ec8:	6013      	str	r3, [r2, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001eca:	2e04      	cmp	r6, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001ecc:	6953      	ldr	r3, [r2, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ece:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8001ed2:	ea43 0306 	orr.w	r3, r3, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ed6:	d143      	bne.n	8001f60 <HAL_DMA_Init+0x244>
      registerValue |= hdma->Init.FIFOThreshold;
 8001ed8:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001eda:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 8001edc:	4303      	orrs	r3, r0
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ede:	2e00      	cmp	r6, #0
 8001ee0:	d03e      	beq.n	8001f60 <HAL_DMA_Init+0x244>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001ee2:	b999      	cbnz	r1, 8001f0c <HAL_DMA_Init+0x1f0>
    switch (hdma->Init.FIFOThreshold)
 8001ee4:	2801      	cmp	r0, #1
 8001ee6:	d021      	beq.n	8001f2c <HAL_DMA_Init+0x210>
 8001ee8:	f030 0102 	bics.w	r1, r0, #2
 8001eec:	d138      	bne.n	8001f60 <HAL_DMA_Init+0x244>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001eee:	01f1      	lsls	r1, r6, #7
 8001ef0:	d536      	bpl.n	8001f60 <HAL_DMA_Init+0x244>
 8001ef2:	e01e      	b.n	8001f32 <HAL_DMA_Init+0x216>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ef4:	f7ff fb0e 	bl	8001514 <HAL_GetTick>
 8001ef8:	1b80      	subs	r0, r0, r6
 8001efa:	2805      	cmp	r0, #5
 8001efc:	d9b1      	bls.n	8001e62 <HAL_DMA_Init+0x146>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001efe:	2320      	movs	r3, #32
 8001f00:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8001f02:	2303      	movs	r3, #3
 8001f04:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 8001f08:	2001      	movs	r0, #1
}
 8001f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f0c:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8001f10:	d122      	bne.n	8001f58 <HAL_DMA_Init+0x23c>
    switch (hdma->Init.FIFOThreshold)
 8001f12:	2803      	cmp	r0, #3
 8001f14:	d824      	bhi.n	8001f60 <HAL_DMA_Init+0x244>
 8001f16:	a101      	add	r1, pc, #4	@ (adr r1, 8001f1c <HAL_DMA_Init+0x200>)
 8001f18:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 8001f1c:	08001f33 	.word	0x08001f33
 8001f20:	08001eef 	.word	0x08001eef
 8001f24:	08001f33 	.word	0x08001f33
 8001f28:	08001f2d 	.word	0x08001f2d
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f2c:	f1b6 7fc0 	cmp.w	r6, #25165824	@ 0x1800000
 8001f30:	d116      	bne.n	8001f60 <HAL_DMA_Init+0x244>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f32:	2340      	movs	r3, #64	@ 0x40
 8001f34:	6563      	str	r3, [r4, #84]	@ 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e7e4      	b.n	8001f04 <HAL_DMA_Init+0x1e8>
 8001f3a:	bf00      	nop
 8001f3c:	40020010 	.word	0x40020010
 8001f40:	40020028 	.word	0x40020028
 8001f44:	58025408 	.word	0x58025408
 8001f48:	a7fdabf8 	.word	0xa7fdabf8
 8001f4c:	fe10803f 	.word	0xfe10803f
 8001f50:	5c001000 	.word	0x5c001000
 8001f54:	000f030f 	.word	0x000f030f
    switch (hdma->Init.FIFOThreshold)
 8001f58:	2802      	cmp	r0, #2
 8001f5a:	d9ea      	bls.n	8001f32 <HAL_DMA_Init+0x216>
 8001f5c:	2803      	cmp	r0, #3
 8001f5e:	d0c6      	beq.n	8001eee <HAL_DMA_Init+0x1d2>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001f60:	6153      	str	r3, [r2, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f62:	4620      	mov	r0, r4
 8001f64:	f7ff fe08 	bl	8001b78 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001f68:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001f6a:	f003 021f 	and.w	r2, r3, #31
 8001f6e:	233f      	movs	r3, #63	@ 0x3f
 8001f70:	4093      	lsls	r3, r2
 8001f72:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f74:	6823      	ldr	r3, [r4, #0]
 8001f76:	42ab      	cmp	r3, r5
 8001f78:	d045      	beq.n	8002006 <HAL_DMA_Init+0x2ea>
 8001f7a:	4a45      	ldr	r2, [pc, #276]	@ (8002090 <HAL_DMA_Init+0x374>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d042      	beq.n	8002006 <HAL_DMA_Init+0x2ea>
 8001f80:	3218      	adds	r2, #24
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d03f      	beq.n	8002006 <HAL_DMA_Init+0x2ea>
 8001f86:	3218      	adds	r2, #24
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d03c      	beq.n	8002006 <HAL_DMA_Init+0x2ea>
 8001f8c:	3218      	adds	r2, #24
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d039      	beq.n	8002006 <HAL_DMA_Init+0x2ea>
 8001f92:	3218      	adds	r2, #24
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d036      	beq.n	8002006 <HAL_DMA_Init+0x2ea>
 8001f98:	3218      	adds	r2, #24
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d033      	beq.n	8002006 <HAL_DMA_Init+0x2ea>
 8001f9e:	3218      	adds	r2, #24
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d030      	beq.n	8002006 <HAL_DMA_Init+0x2ea>
 8001fa4:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d02c      	beq.n	8002006 <HAL_DMA_Init+0x2ea>
 8001fac:	3218      	adds	r2, #24
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d029      	beq.n	8002006 <HAL_DMA_Init+0x2ea>
 8001fb2:	3218      	adds	r2, #24
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d026      	beq.n	8002006 <HAL_DMA_Init+0x2ea>
 8001fb8:	3218      	adds	r2, #24
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d023      	beq.n	8002006 <HAL_DMA_Init+0x2ea>
 8001fbe:	3218      	adds	r2, #24
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d020      	beq.n	8002006 <HAL_DMA_Init+0x2ea>
 8001fc4:	3218      	adds	r2, #24
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d01d      	beq.n	8002006 <HAL_DMA_Init+0x2ea>
 8001fca:	3218      	adds	r2, #24
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d01a      	beq.n	8002006 <HAL_DMA_Init+0x2ea>
 8001fd0:	3218      	adds	r2, #24
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d017      	beq.n	8002006 <HAL_DMA_Init+0x2ea>
 8001fd6:	4a2f      	ldr	r2, [pc, #188]	@ (8002094 <HAL_DMA_Init+0x378>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d014      	beq.n	8002006 <HAL_DMA_Init+0x2ea>
 8001fdc:	3214      	adds	r2, #20
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d011      	beq.n	8002006 <HAL_DMA_Init+0x2ea>
 8001fe2:	3214      	adds	r2, #20
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d00e      	beq.n	8002006 <HAL_DMA_Init+0x2ea>
 8001fe8:	3214      	adds	r2, #20
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d00b      	beq.n	8002006 <HAL_DMA_Init+0x2ea>
 8001fee:	3214      	adds	r2, #20
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d008      	beq.n	8002006 <HAL_DMA_Init+0x2ea>
 8001ff4:	3214      	adds	r2, #20
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d005      	beq.n	8002006 <HAL_DMA_Init+0x2ea>
 8001ffa:	3214      	adds	r2, #20
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d002      	beq.n	8002006 <HAL_DMA_Init+0x2ea>
 8002000:	3214      	adds	r2, #20
 8002002:	4293      	cmp	r3, r2
 8002004:	d119      	bne.n	800203a <HAL_DMA_Init+0x31e>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002006:	4620      	mov	r0, r4
 8002008:	2500      	movs	r5, #0
 800200a:	f7ff fe03 	bl	8001c14 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800200e:	68a3      	ldr	r3, [r4, #8]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002010:	6e22      	ldr	r2, [r4, #96]	@ 0x60
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002012:	2b80      	cmp	r3, #128	@ 0x80
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002014:	bf04      	itt	eq
 8002016:	2300      	moveq	r3, #0
 8002018:	6063      	streq	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800201a:	6863      	ldr	r3, [r4, #4]
 800201c:	b2d9      	uxtb	r1, r3
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800201e:	3b01      	subs	r3, #1
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002020:	6011      	str	r1, [r2, #0]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002022:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002024:	e9d4 2119 	ldrd	r2, r1, [r4, #100]	@ 0x64
 8002028:	6051      	str	r1, [r2, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800202a:	d82c      	bhi.n	8002086 <HAL_DMA_Init+0x36a>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800202c:	f7ff fe3e 	bl	8001cac <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002030:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8002032:	601d      	str	r5, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002034:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	@ 0x70
 8002038:	605a      	str	r2, [r3, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800203a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800203c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800203e:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002040:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8002044:	e761      	b.n	8001f0a <HAL_DMA_Init+0x1ee>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002046:	4a14      	ldr	r2, [pc, #80]	@ (8002098 <HAL_DMA_Init+0x37c>)
 8002048:	4293      	cmp	r3, r2
 800204a:	f43f aea5 	beq.w	8001d98 <HAL_DMA_Init+0x7c>
 800204e:	3214      	adds	r2, #20
 8002050:	4293      	cmp	r3, r2
 8002052:	f43f aea1 	beq.w	8001d98 <HAL_DMA_Init+0x7c>
 8002056:	3214      	adds	r2, #20
 8002058:	4293      	cmp	r3, r2
 800205a:	f43f ae9d 	beq.w	8001d98 <HAL_DMA_Init+0x7c>
 800205e:	3214      	adds	r2, #20
 8002060:	4293      	cmp	r3, r2
 8002062:	f43f ae99 	beq.w	8001d98 <HAL_DMA_Init+0x7c>
 8002066:	3214      	adds	r2, #20
 8002068:	4293      	cmp	r3, r2
 800206a:	f43f ae95 	beq.w	8001d98 <HAL_DMA_Init+0x7c>
 800206e:	3214      	adds	r2, #20
 8002070:	4293      	cmp	r3, r2
 8002072:	f43f ae91 	beq.w	8001d98 <HAL_DMA_Init+0x7c>
 8002076:	3214      	adds	r2, #20
 8002078:	4293      	cmp	r3, r2
 800207a:	f43f ae8d 	beq.w	8001d98 <HAL_DMA_Init+0x7c>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800207e:	2340      	movs	r3, #64	@ 0x40
 8002080:	e73e      	b.n	8001f00 <HAL_DMA_Init+0x1e4>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002082:	2110      	movs	r1, #16
 8002084:	e69c      	b.n	8001dc0 <HAL_DMA_Init+0xa4>
      hdma->DMAmuxRequestGenStatus = 0U;
 8002086:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800208a:	6765      	str	r5, [r4, #116]	@ 0x74
 800208c:	e7d5      	b.n	800203a <HAL_DMA_Init+0x31e>
 800208e:	bf00      	nop
 8002090:	40020028 	.word	0x40020028
 8002094:	58025408 	.word	0x58025408
 8002098:	5802541c 	.word	0x5802541c

0800209c <HAL_DMA_Start_IT>:
{
 800209c:	b570      	push	{r4, r5, r6, lr}
  if(hdma == NULL)
 800209e:	2800      	cmp	r0, #0
 80020a0:	f000 810a 	beq.w	80022b8 <HAL_DMA_Start_IT+0x21c>
  __HAL_LOCK(hdma);
 80020a4:	f890 4034 	ldrb.w	r4, [r0, #52]	@ 0x34
 80020a8:	2c01      	cmp	r4, #1
 80020aa:	f000 8107 	beq.w	80022bc <HAL_DMA_Start_IT+0x220>
 80020ae:	2401      	movs	r4, #1
 80020b0:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80020b4:	f890 4035 	ldrb.w	r4, [r0, #53]	@ 0x35
 80020b8:	2c01      	cmp	r4, #1
 80020ba:	f04f 0400 	mov.w	r4, #0
 80020be:	f040 80f6 	bne.w	80022ae <HAL_DMA_Start_IT+0x212>
    hdma->State = HAL_DMA_STATE_BUSY;
 80020c2:	2502      	movs	r5, #2
 80020c4:	f880 5035 	strb.w	r5, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 80020c8:	4d7d      	ldr	r5, [pc, #500]	@ (80022c0 <HAL_DMA_Start_IT+0x224>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020ca:	6544      	str	r4, [r0, #84]	@ 0x54
    __HAL_DMA_DISABLE(hdma);
 80020cc:	6804      	ldr	r4, [r0, #0]
 80020ce:	42ac      	cmp	r4, r5
 80020d0:	d01e      	beq.n	8002110 <HAL_DMA_Start_IT+0x74>
 80020d2:	4e7c      	ldr	r6, [pc, #496]	@ (80022c4 <HAL_DMA_Start_IT+0x228>)
 80020d4:	42b4      	cmp	r4, r6
 80020d6:	d01b      	beq.n	8002110 <HAL_DMA_Start_IT+0x74>
 80020d8:	3618      	adds	r6, #24
 80020da:	42b4      	cmp	r4, r6
 80020dc:	d018      	beq.n	8002110 <HAL_DMA_Start_IT+0x74>
 80020de:	3618      	adds	r6, #24
 80020e0:	42b4      	cmp	r4, r6
 80020e2:	d015      	beq.n	8002110 <HAL_DMA_Start_IT+0x74>
 80020e4:	3618      	adds	r6, #24
 80020e6:	42b4      	cmp	r4, r6
 80020e8:	d012      	beq.n	8002110 <HAL_DMA_Start_IT+0x74>
 80020ea:	3618      	adds	r6, #24
 80020ec:	42b4      	cmp	r4, r6
 80020ee:	d00f      	beq.n	8002110 <HAL_DMA_Start_IT+0x74>
 80020f0:	3618      	adds	r6, #24
 80020f2:	42b4      	cmp	r4, r6
 80020f4:	d00c      	beq.n	8002110 <HAL_DMA_Start_IT+0x74>
 80020f6:	3618      	adds	r6, #24
 80020f8:	42b4      	cmp	r4, r6
 80020fa:	d009      	beq.n	8002110 <HAL_DMA_Start_IT+0x74>
 80020fc:	f506 7656 	add.w	r6, r6, #856	@ 0x358
 8002100:	42b4      	cmp	r4, r6
 8002102:	d005      	beq.n	8002110 <HAL_DMA_Start_IT+0x74>
 8002104:	3618      	adds	r6, #24
 8002106:	42b4      	cmp	r4, r6
 8002108:	d002      	beq.n	8002110 <HAL_DMA_Start_IT+0x74>
 800210a:	3618      	adds	r6, #24
 800210c:	42b4      	cmp	r4, r6
 800210e:	d0ff      	beq.n	8002110 <HAL_DMA_Start_IT+0x74>
 8002110:	6826      	ldr	r6, [r4, #0]
 8002112:	f026 0601 	bic.w	r6, r6, #1
 8002116:	6026      	str	r6, [r4, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002118:	f7ff fc6c 	bl	80019f4 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800211c:	42ac      	cmp	r4, r5
 800211e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8002120:	d053      	beq.n	80021ca <HAL_DMA_Start_IT+0x12e>
 8002122:	4b68      	ldr	r3, [pc, #416]	@ (80022c4 <HAL_DMA_Start_IT+0x228>)
 8002124:	429c      	cmp	r4, r3
 8002126:	d050      	beq.n	80021ca <HAL_DMA_Start_IT+0x12e>
 8002128:	3318      	adds	r3, #24
 800212a:	429c      	cmp	r4, r3
 800212c:	d04d      	beq.n	80021ca <HAL_DMA_Start_IT+0x12e>
 800212e:	3318      	adds	r3, #24
 8002130:	429c      	cmp	r4, r3
 8002132:	d04a      	beq.n	80021ca <HAL_DMA_Start_IT+0x12e>
 8002134:	3318      	adds	r3, #24
 8002136:	429c      	cmp	r4, r3
 8002138:	d047      	beq.n	80021ca <HAL_DMA_Start_IT+0x12e>
 800213a:	3318      	adds	r3, #24
 800213c:	429c      	cmp	r4, r3
 800213e:	d044      	beq.n	80021ca <HAL_DMA_Start_IT+0x12e>
 8002140:	3318      	adds	r3, #24
 8002142:	429c      	cmp	r4, r3
 8002144:	d041      	beq.n	80021ca <HAL_DMA_Start_IT+0x12e>
 8002146:	3318      	adds	r3, #24
 8002148:	429c      	cmp	r4, r3
 800214a:	d03e      	beq.n	80021ca <HAL_DMA_Start_IT+0x12e>
 800214c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8002150:	429c      	cmp	r4, r3
 8002152:	d03a      	beq.n	80021ca <HAL_DMA_Start_IT+0x12e>
 8002154:	3318      	adds	r3, #24
 8002156:	429c      	cmp	r4, r3
 8002158:	d037      	beq.n	80021ca <HAL_DMA_Start_IT+0x12e>
 800215a:	3318      	adds	r3, #24
 800215c:	429c      	cmp	r4, r3
 800215e:	d034      	beq.n	80021ca <HAL_DMA_Start_IT+0x12e>
 8002160:	3318      	adds	r3, #24
 8002162:	429c      	cmp	r4, r3
 8002164:	d031      	beq.n	80021ca <HAL_DMA_Start_IT+0x12e>
 8002166:	3318      	adds	r3, #24
 8002168:	429c      	cmp	r4, r3
 800216a:	d02e      	beq.n	80021ca <HAL_DMA_Start_IT+0x12e>
 800216c:	3318      	adds	r3, #24
 800216e:	429c      	cmp	r4, r3
 8002170:	d02b      	beq.n	80021ca <HAL_DMA_Start_IT+0x12e>
 8002172:	3318      	adds	r3, #24
 8002174:	429c      	cmp	r4, r3
 8002176:	d028      	beq.n	80021ca <HAL_DMA_Start_IT+0x12e>
 8002178:	3318      	adds	r3, #24
 800217a:	429c      	cmp	r4, r3
 800217c:	d025      	beq.n	80021ca <HAL_DMA_Start_IT+0x12e>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800217e:	6823      	ldr	r3, [r4, #0]
 8002180:	f023 030e 	bic.w	r3, r3, #14
 8002184:	f043 030a 	orr.w	r3, r3, #10
 8002188:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800218a:	2a00      	cmp	r2, #0
 800218c:	d156      	bne.n	800223c <HAL_DMA_Start_IT+0x1a0>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800218e:	4b4e      	ldr	r3, [pc, #312]	@ (80022c8 <HAL_DMA_Start_IT+0x22c>)
 8002190:	429c      	cmp	r4, r3
 8002192:	d027      	beq.n	80021e4 <HAL_DMA_Start_IT+0x148>
 8002194:	4b4d      	ldr	r3, [pc, #308]	@ (80022cc <HAL_DMA_Start_IT+0x230>)
 8002196:	429c      	cmp	r4, r3
 8002198:	d024      	beq.n	80021e4 <HAL_DMA_Start_IT+0x148>
 800219a:	3314      	adds	r3, #20
 800219c:	429c      	cmp	r4, r3
 800219e:	d021      	beq.n	80021e4 <HAL_DMA_Start_IT+0x148>
 80021a0:	3314      	adds	r3, #20
 80021a2:	429c      	cmp	r4, r3
 80021a4:	d01e      	beq.n	80021e4 <HAL_DMA_Start_IT+0x148>
 80021a6:	3314      	adds	r3, #20
 80021a8:	429c      	cmp	r4, r3
 80021aa:	d01b      	beq.n	80021e4 <HAL_DMA_Start_IT+0x148>
 80021ac:	3314      	adds	r3, #20
 80021ae:	429c      	cmp	r4, r3
 80021b0:	d018      	beq.n	80021e4 <HAL_DMA_Start_IT+0x148>
 80021b2:	3314      	adds	r3, #20
 80021b4:	429c      	cmp	r4, r3
 80021b6:	d015      	beq.n	80021e4 <HAL_DMA_Start_IT+0x148>
 80021b8:	3314      	adds	r3, #20
 80021ba:	429c      	cmp	r4, r3
 80021bc:	d012      	beq.n	80021e4 <HAL_DMA_Start_IT+0x148>
    __HAL_DMA_ENABLE(hdma);
 80021be:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021c0:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80021c2:	f043 0301 	orr.w	r3, r3, #1
 80021c6:	6023      	str	r3, [r4, #0]
}
 80021c8:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80021ca:	6823      	ldr	r3, [r4, #0]
 80021cc:	f023 031e 	bic.w	r3, r3, #30
 80021d0:	f043 0316 	orr.w	r3, r3, #22
 80021d4:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80021d6:	b11a      	cbz	r2, 80021e0 <HAL_DMA_Start_IT+0x144>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80021d8:	6823      	ldr	r3, [r4, #0]
 80021da:	f043 0308 	orr.w	r3, r3, #8
 80021de:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021e0:	42ac      	cmp	r4, r5
 80021e2:	d130      	bne.n	8002246 <HAL_DMA_Start_IT+0x1aa>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80021e4:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	03d2      	lsls	r2, r2, #15
 80021ea:	d45b      	bmi.n	80022a4 <HAL_DMA_Start_IT+0x208>
      if(hdma->DMAmuxRequestGen != 0U)
 80021ec:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80021ee:	b11b      	cbz	r3, 80021f8 <HAL_DMA_Start_IT+0x15c>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021f6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80021f8:	42ac      	cmp	r4, r5
 80021fa:	d0e0      	beq.n	80021be <HAL_DMA_Start_IT+0x122>
 80021fc:	4b31      	ldr	r3, [pc, #196]	@ (80022c4 <HAL_DMA_Start_IT+0x228>)
 80021fe:	429c      	cmp	r4, r3
 8002200:	d0dd      	beq.n	80021be <HAL_DMA_Start_IT+0x122>
 8002202:	3318      	adds	r3, #24
 8002204:	429c      	cmp	r4, r3
 8002206:	d0da      	beq.n	80021be <HAL_DMA_Start_IT+0x122>
 8002208:	3318      	adds	r3, #24
 800220a:	429c      	cmp	r4, r3
 800220c:	d0d7      	beq.n	80021be <HAL_DMA_Start_IT+0x122>
 800220e:	3318      	adds	r3, #24
 8002210:	429c      	cmp	r4, r3
 8002212:	d0d4      	beq.n	80021be <HAL_DMA_Start_IT+0x122>
 8002214:	3318      	adds	r3, #24
 8002216:	429c      	cmp	r4, r3
 8002218:	d0d1      	beq.n	80021be <HAL_DMA_Start_IT+0x122>
 800221a:	3318      	adds	r3, #24
 800221c:	429c      	cmp	r4, r3
 800221e:	d0ce      	beq.n	80021be <HAL_DMA_Start_IT+0x122>
 8002220:	3318      	adds	r3, #24
 8002222:	429c      	cmp	r4, r3
 8002224:	d0cb      	beq.n	80021be <HAL_DMA_Start_IT+0x122>
 8002226:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800222a:	429c      	cmp	r4, r3
 800222c:	d0c7      	beq.n	80021be <HAL_DMA_Start_IT+0x122>
 800222e:	3318      	adds	r3, #24
 8002230:	429c      	cmp	r4, r3
 8002232:	d0c4      	beq.n	80021be <HAL_DMA_Start_IT+0x122>
 8002234:	3318      	adds	r3, #24
 8002236:	429c      	cmp	r4, r3
 8002238:	d0c1      	beq.n	80021be <HAL_DMA_Start_IT+0x122>
 800223a:	e7c0      	b.n	80021be <HAL_DMA_Start_IT+0x122>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800223c:	6823      	ldr	r3, [r4, #0]
 800223e:	f043 0304 	orr.w	r3, r3, #4
 8002242:	6023      	str	r3, [r4, #0]
 8002244:	e7a3      	b.n	800218e <HAL_DMA_Start_IT+0xf2>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002246:	4b1f      	ldr	r3, [pc, #124]	@ (80022c4 <HAL_DMA_Start_IT+0x228>)
 8002248:	429c      	cmp	r4, r3
 800224a:	d0cb      	beq.n	80021e4 <HAL_DMA_Start_IT+0x148>
 800224c:	3318      	adds	r3, #24
 800224e:	429c      	cmp	r4, r3
 8002250:	d0c8      	beq.n	80021e4 <HAL_DMA_Start_IT+0x148>
 8002252:	3318      	adds	r3, #24
 8002254:	429c      	cmp	r4, r3
 8002256:	d0c5      	beq.n	80021e4 <HAL_DMA_Start_IT+0x148>
 8002258:	3318      	adds	r3, #24
 800225a:	429c      	cmp	r4, r3
 800225c:	d0c2      	beq.n	80021e4 <HAL_DMA_Start_IT+0x148>
 800225e:	3318      	adds	r3, #24
 8002260:	429c      	cmp	r4, r3
 8002262:	d0bf      	beq.n	80021e4 <HAL_DMA_Start_IT+0x148>
 8002264:	3318      	adds	r3, #24
 8002266:	429c      	cmp	r4, r3
 8002268:	d0bc      	beq.n	80021e4 <HAL_DMA_Start_IT+0x148>
 800226a:	3318      	adds	r3, #24
 800226c:	429c      	cmp	r4, r3
 800226e:	d0b9      	beq.n	80021e4 <HAL_DMA_Start_IT+0x148>
 8002270:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8002274:	429c      	cmp	r4, r3
 8002276:	d0b5      	beq.n	80021e4 <HAL_DMA_Start_IT+0x148>
 8002278:	3318      	adds	r3, #24
 800227a:	429c      	cmp	r4, r3
 800227c:	d0b2      	beq.n	80021e4 <HAL_DMA_Start_IT+0x148>
 800227e:	3318      	adds	r3, #24
 8002280:	429c      	cmp	r4, r3
 8002282:	d0af      	beq.n	80021e4 <HAL_DMA_Start_IT+0x148>
 8002284:	3318      	adds	r3, #24
 8002286:	429c      	cmp	r4, r3
 8002288:	d0ac      	beq.n	80021e4 <HAL_DMA_Start_IT+0x148>
 800228a:	3318      	adds	r3, #24
 800228c:	429c      	cmp	r4, r3
 800228e:	d0a9      	beq.n	80021e4 <HAL_DMA_Start_IT+0x148>
 8002290:	3318      	adds	r3, #24
 8002292:	429c      	cmp	r4, r3
 8002294:	d0a6      	beq.n	80021e4 <HAL_DMA_Start_IT+0x148>
 8002296:	3318      	adds	r3, #24
 8002298:	429c      	cmp	r4, r3
 800229a:	d0a3      	beq.n	80021e4 <HAL_DMA_Start_IT+0x148>
 800229c:	3318      	adds	r3, #24
 800229e:	429c      	cmp	r4, r3
 80022a0:	d0a0      	beq.n	80021e4 <HAL_DMA_Start_IT+0x148>
 80022a2:	e774      	b.n	800218e <HAL_DMA_Start_IT+0xf2>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	e79e      	b.n	80021ec <HAL_DMA_Start_IT+0x150>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80022ae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    __HAL_UNLOCK(hdma);
 80022b2:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80022b6:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 80022b8:	2001      	movs	r0, #1
 80022ba:	e785      	b.n	80021c8 <HAL_DMA_Start_IT+0x12c>
  __HAL_LOCK(hdma);
 80022bc:	2002      	movs	r0, #2
 80022be:	e783      	b.n	80021c8 <HAL_DMA_Start_IT+0x12c>
 80022c0:	40020010 	.word	0x40020010
 80022c4:	40020028 	.word	0x40020028
 80022c8:	58025408 	.word	0x58025408
 80022cc:	5802541c 	.word	0x5802541c

080022d0 <HAL_DMA_Abort>:
{
 80022d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022d2:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 80022d4:	f7ff f91e 	bl	8001514 <HAL_GetTick>
 80022d8:	4607      	mov	r7, r0
  if(hdma == NULL)
 80022da:	b145      	cbz	r5, 80022ee <HAL_DMA_Abort+0x1e>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022dc:	f895 3035 	ldrb.w	r3, [r5, #53]	@ 0x35
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d006      	beq.n	80022f2 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022e4:	2380      	movs	r3, #128	@ 0x80
 80022e6:	656b      	str	r3, [r5, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 80022e8:	2300      	movs	r3, #0
 80022ea:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    return HAL_ERROR;
 80022ee:	2001      	movs	r0, #1
}
 80022f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022f2:	682c      	ldr	r4, [r5, #0]
 80022f4:	4ea9      	ldr	r6, [pc, #676]	@ (800259c <HAL_DMA_Abort+0x2cc>)
 80022f6:	42b4      	cmp	r4, r6
 80022f8:	d04a      	beq.n	8002390 <HAL_DMA_Abort+0xc0>
 80022fa:	4ba9      	ldr	r3, [pc, #676]	@ (80025a0 <HAL_DMA_Abort+0x2d0>)
 80022fc:	429c      	cmp	r4, r3
 80022fe:	d047      	beq.n	8002390 <HAL_DMA_Abort+0xc0>
 8002300:	3318      	adds	r3, #24
 8002302:	429c      	cmp	r4, r3
 8002304:	d044      	beq.n	8002390 <HAL_DMA_Abort+0xc0>
 8002306:	3318      	adds	r3, #24
 8002308:	429c      	cmp	r4, r3
 800230a:	d041      	beq.n	8002390 <HAL_DMA_Abort+0xc0>
 800230c:	3318      	adds	r3, #24
 800230e:	429c      	cmp	r4, r3
 8002310:	d03e      	beq.n	8002390 <HAL_DMA_Abort+0xc0>
 8002312:	3318      	adds	r3, #24
 8002314:	429c      	cmp	r4, r3
 8002316:	d03b      	beq.n	8002390 <HAL_DMA_Abort+0xc0>
 8002318:	3318      	adds	r3, #24
 800231a:	429c      	cmp	r4, r3
 800231c:	d038      	beq.n	8002390 <HAL_DMA_Abort+0xc0>
 800231e:	3318      	adds	r3, #24
 8002320:	429c      	cmp	r4, r3
 8002322:	d035      	beq.n	8002390 <HAL_DMA_Abort+0xc0>
 8002324:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8002328:	429c      	cmp	r4, r3
 800232a:	d031      	beq.n	8002390 <HAL_DMA_Abort+0xc0>
 800232c:	3318      	adds	r3, #24
 800232e:	429c      	cmp	r4, r3
 8002330:	d02e      	beq.n	8002390 <HAL_DMA_Abort+0xc0>
 8002332:	3318      	adds	r3, #24
 8002334:	429c      	cmp	r4, r3
 8002336:	d02b      	beq.n	8002390 <HAL_DMA_Abort+0xc0>
 8002338:	3318      	adds	r3, #24
 800233a:	429c      	cmp	r4, r3
 800233c:	d028      	beq.n	8002390 <HAL_DMA_Abort+0xc0>
 800233e:	3318      	adds	r3, #24
 8002340:	429c      	cmp	r4, r3
 8002342:	d025      	beq.n	8002390 <HAL_DMA_Abort+0xc0>
 8002344:	3318      	adds	r3, #24
 8002346:	429c      	cmp	r4, r3
 8002348:	d022      	beq.n	8002390 <HAL_DMA_Abort+0xc0>
 800234a:	3318      	adds	r3, #24
 800234c:	429c      	cmp	r4, r3
 800234e:	d01f      	beq.n	8002390 <HAL_DMA_Abort+0xc0>
 8002350:	3318      	adds	r3, #24
 8002352:	429c      	cmp	r4, r3
 8002354:	d01c      	beq.n	8002390 <HAL_DMA_Abort+0xc0>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002356:	6823      	ldr	r3, [r4, #0]
 8002358:	f023 030e 	bic.w	r3, r3, #14
 800235c:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800235e:	4b91      	ldr	r3, [pc, #580]	@ (80025a4 <HAL_DMA_Abort+0x2d4>)
 8002360:	429c      	cmp	r4, r3
 8002362:	d01f      	beq.n	80023a4 <HAL_DMA_Abort+0xd4>
 8002364:	3314      	adds	r3, #20
 8002366:	429c      	cmp	r4, r3
 8002368:	d01c      	beq.n	80023a4 <HAL_DMA_Abort+0xd4>
 800236a:	3314      	adds	r3, #20
 800236c:	429c      	cmp	r4, r3
 800236e:	d019      	beq.n	80023a4 <HAL_DMA_Abort+0xd4>
 8002370:	3314      	adds	r3, #20
 8002372:	429c      	cmp	r4, r3
 8002374:	d016      	beq.n	80023a4 <HAL_DMA_Abort+0xd4>
 8002376:	3314      	adds	r3, #20
 8002378:	429c      	cmp	r4, r3
 800237a:	d013      	beq.n	80023a4 <HAL_DMA_Abort+0xd4>
 800237c:	3314      	adds	r3, #20
 800237e:	429c      	cmp	r4, r3
 8002380:	d010      	beq.n	80023a4 <HAL_DMA_Abort+0xd4>
 8002382:	3314      	adds	r3, #20
 8002384:	429c      	cmp	r4, r3
 8002386:	d00d      	beq.n	80023a4 <HAL_DMA_Abort+0xd4>
 8002388:	3314      	adds	r3, #20
 800238a:	429c      	cmp	r4, r3
 800238c:	d112      	bne.n	80023b4 <HAL_DMA_Abort+0xe4>
 800238e:	e009      	b.n	80023a4 <HAL_DMA_Abort+0xd4>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002390:	6823      	ldr	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002392:	42b4      	cmp	r4, r6
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002394:	f023 031e 	bic.w	r3, r3, #30
 8002398:	6023      	str	r3, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800239a:	6963      	ldr	r3, [r4, #20]
 800239c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80023a0:	6163      	str	r3, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80023a2:	d176      	bne.n	8002492 <HAL_DMA_Abort+0x1c2>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80023a4:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
    __HAL_DMA_DISABLE(hdma);
 80023a6:	42b4      	cmp	r4, r6
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80023a8:	6813      	ldr	r3, [r2, #0]
 80023aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023ae:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80023b0:	f040 80ab 	bne.w	800250a <HAL_DMA_Abort+0x23a>
 80023b4:	6823      	ldr	r3, [r4, #0]
 80023b6:	f023 0301 	bic.w	r3, r3, #1
 80023ba:	6023      	str	r3, [r4, #0]
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80023bc:	6823      	ldr	r3, [r4, #0]
 80023be:	07db      	lsls	r3, r3, #31
 80023c0:	f100 80cd 	bmi.w	800255e <HAL_DMA_Abort+0x28e>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80023c4:	682b      	ldr	r3, [r5, #0]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80023c6:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80023c8:	42b3      	cmp	r3, r6
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80023ca:	6da8      	ldr	r0, [r5, #88]	@ 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80023cc:	f002 021f 	and.w	r2, r2, #31
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80023d0:	f000 80d1 	beq.w	8002576 <HAL_DMA_Abort+0x2a6>
 80023d4:	4972      	ldr	r1, [pc, #456]	@ (80025a0 <HAL_DMA_Abort+0x2d0>)
 80023d6:	428b      	cmp	r3, r1
 80023d8:	f000 80cd 	beq.w	8002576 <HAL_DMA_Abort+0x2a6>
 80023dc:	3118      	adds	r1, #24
 80023de:	428b      	cmp	r3, r1
 80023e0:	f000 80c9 	beq.w	8002576 <HAL_DMA_Abort+0x2a6>
 80023e4:	3118      	adds	r1, #24
 80023e6:	428b      	cmp	r3, r1
 80023e8:	f000 80c5 	beq.w	8002576 <HAL_DMA_Abort+0x2a6>
 80023ec:	3118      	adds	r1, #24
 80023ee:	428b      	cmp	r3, r1
 80023f0:	f000 80c1 	beq.w	8002576 <HAL_DMA_Abort+0x2a6>
 80023f4:	3118      	adds	r1, #24
 80023f6:	428b      	cmp	r3, r1
 80023f8:	f000 80bd 	beq.w	8002576 <HAL_DMA_Abort+0x2a6>
 80023fc:	3118      	adds	r1, #24
 80023fe:	428b      	cmp	r3, r1
 8002400:	f000 80b9 	beq.w	8002576 <HAL_DMA_Abort+0x2a6>
 8002404:	3118      	adds	r1, #24
 8002406:	428b      	cmp	r3, r1
 8002408:	f000 80b5 	beq.w	8002576 <HAL_DMA_Abort+0x2a6>
 800240c:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8002410:	428b      	cmp	r3, r1
 8002412:	f000 80b0 	beq.w	8002576 <HAL_DMA_Abort+0x2a6>
 8002416:	3118      	adds	r1, #24
 8002418:	428b      	cmp	r3, r1
 800241a:	f000 80ac 	beq.w	8002576 <HAL_DMA_Abort+0x2a6>
 800241e:	3118      	adds	r1, #24
 8002420:	428b      	cmp	r3, r1
 8002422:	f000 80a8 	beq.w	8002576 <HAL_DMA_Abort+0x2a6>
 8002426:	3118      	adds	r1, #24
 8002428:	428b      	cmp	r3, r1
 800242a:	f000 80a4 	beq.w	8002576 <HAL_DMA_Abort+0x2a6>
 800242e:	3118      	adds	r1, #24
 8002430:	428b      	cmp	r3, r1
 8002432:	f000 80a0 	beq.w	8002576 <HAL_DMA_Abort+0x2a6>
 8002436:	3118      	adds	r1, #24
 8002438:	428b      	cmp	r3, r1
 800243a:	f000 809c 	beq.w	8002576 <HAL_DMA_Abort+0x2a6>
 800243e:	3118      	adds	r1, #24
 8002440:	428b      	cmp	r3, r1
 8002442:	f000 8098 	beq.w	8002576 <HAL_DMA_Abort+0x2a6>
 8002446:	3118      	adds	r1, #24
 8002448:	428b      	cmp	r3, r1
 800244a:	f000 8094 	beq.w	8002576 <HAL_DMA_Abort+0x2a6>
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800244e:	2101      	movs	r1, #1
 8002450:	fa01 f202 	lsl.w	r2, r1, r2
 8002454:	6042      	str	r2, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002456:	4a53      	ldr	r2, [pc, #332]	@ (80025a4 <HAL_DMA_Abort+0x2d4>)
 8002458:	4293      	cmp	r3, r2
 800245a:	f000 8092 	beq.w	8002582 <HAL_DMA_Abort+0x2b2>
 800245e:	3214      	adds	r2, #20
 8002460:	4293      	cmp	r3, r2
 8002462:	f000 808e 	beq.w	8002582 <HAL_DMA_Abort+0x2b2>
 8002466:	3214      	adds	r2, #20
 8002468:	4293      	cmp	r3, r2
 800246a:	f000 808a 	beq.w	8002582 <HAL_DMA_Abort+0x2b2>
 800246e:	3214      	adds	r2, #20
 8002470:	4293      	cmp	r3, r2
 8002472:	f000 8086 	beq.w	8002582 <HAL_DMA_Abort+0x2b2>
 8002476:	3214      	adds	r2, #20
 8002478:	4293      	cmp	r3, r2
 800247a:	f000 8082 	beq.w	8002582 <HAL_DMA_Abort+0x2b2>
 800247e:	3214      	adds	r2, #20
 8002480:	4293      	cmp	r3, r2
 8002482:	d07e      	beq.n	8002582 <HAL_DMA_Abort+0x2b2>
 8002484:	3214      	adds	r2, #20
 8002486:	4293      	cmp	r3, r2
 8002488:	d07b      	beq.n	8002582 <HAL_DMA_Abort+0x2b2>
 800248a:	3214      	adds	r2, #20
 800248c:	4293      	cmp	r3, r2
 800248e:	d17e      	bne.n	800258e <HAL_DMA_Abort+0x2be>
 8002490:	e077      	b.n	8002582 <HAL_DMA_Abort+0x2b2>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002492:	4b43      	ldr	r3, [pc, #268]	@ (80025a0 <HAL_DMA_Abort+0x2d0>)
 8002494:	429c      	cmp	r4, r3
 8002496:	d085      	beq.n	80023a4 <HAL_DMA_Abort+0xd4>
 8002498:	3318      	adds	r3, #24
 800249a:	429c      	cmp	r4, r3
 800249c:	d082      	beq.n	80023a4 <HAL_DMA_Abort+0xd4>
 800249e:	3318      	adds	r3, #24
 80024a0:	429c      	cmp	r4, r3
 80024a2:	f43f af7f 	beq.w	80023a4 <HAL_DMA_Abort+0xd4>
 80024a6:	3318      	adds	r3, #24
 80024a8:	429c      	cmp	r4, r3
 80024aa:	f43f af7b 	beq.w	80023a4 <HAL_DMA_Abort+0xd4>
 80024ae:	3318      	adds	r3, #24
 80024b0:	429c      	cmp	r4, r3
 80024b2:	f43f af77 	beq.w	80023a4 <HAL_DMA_Abort+0xd4>
 80024b6:	3318      	adds	r3, #24
 80024b8:	429c      	cmp	r4, r3
 80024ba:	f43f af73 	beq.w	80023a4 <HAL_DMA_Abort+0xd4>
 80024be:	3318      	adds	r3, #24
 80024c0:	429c      	cmp	r4, r3
 80024c2:	f43f af6f 	beq.w	80023a4 <HAL_DMA_Abort+0xd4>
 80024c6:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80024ca:	429c      	cmp	r4, r3
 80024cc:	f43f af6a 	beq.w	80023a4 <HAL_DMA_Abort+0xd4>
 80024d0:	3318      	adds	r3, #24
 80024d2:	429c      	cmp	r4, r3
 80024d4:	f43f af66 	beq.w	80023a4 <HAL_DMA_Abort+0xd4>
 80024d8:	3318      	adds	r3, #24
 80024da:	429c      	cmp	r4, r3
 80024dc:	f43f af62 	beq.w	80023a4 <HAL_DMA_Abort+0xd4>
 80024e0:	3318      	adds	r3, #24
 80024e2:	429c      	cmp	r4, r3
 80024e4:	f43f af5e 	beq.w	80023a4 <HAL_DMA_Abort+0xd4>
 80024e8:	3318      	adds	r3, #24
 80024ea:	429c      	cmp	r4, r3
 80024ec:	f43f af5a 	beq.w	80023a4 <HAL_DMA_Abort+0xd4>
 80024f0:	3318      	adds	r3, #24
 80024f2:	429c      	cmp	r4, r3
 80024f4:	f43f af56 	beq.w	80023a4 <HAL_DMA_Abort+0xd4>
 80024f8:	3318      	adds	r3, #24
 80024fa:	429c      	cmp	r4, r3
 80024fc:	f43f af52 	beq.w	80023a4 <HAL_DMA_Abort+0xd4>
 8002500:	3318      	adds	r3, #24
 8002502:	429c      	cmp	r4, r3
 8002504:	f43f af4e 	beq.w	80023a4 <HAL_DMA_Abort+0xd4>
 8002508:	e729      	b.n	800235e <HAL_DMA_Abort+0x8e>
    __HAL_DMA_DISABLE(hdma);
 800250a:	4b25      	ldr	r3, [pc, #148]	@ (80025a0 <HAL_DMA_Abort+0x2d0>)
 800250c:	429c      	cmp	r4, r3
 800250e:	f43f af51 	beq.w	80023b4 <HAL_DMA_Abort+0xe4>
 8002512:	3318      	adds	r3, #24
 8002514:	429c      	cmp	r4, r3
 8002516:	f43f af4d 	beq.w	80023b4 <HAL_DMA_Abort+0xe4>
 800251a:	3318      	adds	r3, #24
 800251c:	429c      	cmp	r4, r3
 800251e:	f43f af49 	beq.w	80023b4 <HAL_DMA_Abort+0xe4>
 8002522:	3318      	adds	r3, #24
 8002524:	429c      	cmp	r4, r3
 8002526:	f43f af45 	beq.w	80023b4 <HAL_DMA_Abort+0xe4>
 800252a:	3318      	adds	r3, #24
 800252c:	429c      	cmp	r4, r3
 800252e:	f43f af41 	beq.w	80023b4 <HAL_DMA_Abort+0xe4>
 8002532:	3318      	adds	r3, #24
 8002534:	429c      	cmp	r4, r3
 8002536:	f43f af3d 	beq.w	80023b4 <HAL_DMA_Abort+0xe4>
 800253a:	3318      	adds	r3, #24
 800253c:	429c      	cmp	r4, r3
 800253e:	f43f af39 	beq.w	80023b4 <HAL_DMA_Abort+0xe4>
 8002542:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8002546:	429c      	cmp	r4, r3
 8002548:	f43f af34 	beq.w	80023b4 <HAL_DMA_Abort+0xe4>
 800254c:	3318      	adds	r3, #24
 800254e:	429c      	cmp	r4, r3
 8002550:	f43f af30 	beq.w	80023b4 <HAL_DMA_Abort+0xe4>
 8002554:	3318      	adds	r3, #24
 8002556:	429c      	cmp	r4, r3
 8002558:	f43f af2c 	beq.w	80023b4 <HAL_DMA_Abort+0xe4>
 800255c:	e72a      	b.n	80023b4 <HAL_DMA_Abort+0xe4>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800255e:	f7fe ffd9 	bl	8001514 <HAL_GetTick>
 8002562:	1bc0      	subs	r0, r0, r7
 8002564:	2805      	cmp	r0, #5
 8002566:	f67f af29 	bls.w	80023bc <HAL_DMA_Abort+0xec>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800256a:	2320      	movs	r3, #32
 800256c:	656b      	str	r3, [r5, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 800256e:	2303      	movs	r3, #3
 8002570:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8002574:	e6b8      	b.n	80022e8 <HAL_DMA_Abort+0x18>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002576:	213f      	movs	r1, #63	@ 0x3f
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002578:	42b3      	cmp	r3, r6
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800257a:	fa01 f202 	lsl.w	r2, r1, r2
 800257e:	6082      	str	r2, [r0, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002580:	d112      	bne.n	80025a8 <HAL_DMA_Abort+0x2d8>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002582:	e9d5 3219 	ldrd	r3, r2, [r5, #100]	@ 0x64
 8002586:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8002588:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 800258a:	2b00      	cmp	r3, #0
 800258c:	d13b      	bne.n	8002606 <HAL_DMA_Abort+0x336>
    hdma->State = HAL_DMA_STATE_READY;
 800258e:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8002590:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8002592:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8002596:	f885 0034 	strb.w	r0, [r5, #52]	@ 0x34
  return HAL_OK;
 800259a:	e6a9      	b.n	80022f0 <HAL_DMA_Abort+0x20>
 800259c:	40020010 	.word	0x40020010
 80025a0:	40020028 	.word	0x40020028
 80025a4:	58025408 	.word	0x58025408
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80025a8:	4a1b      	ldr	r2, [pc, #108]	@ (8002618 <HAL_DMA_Abort+0x348>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d0e9      	beq.n	8002582 <HAL_DMA_Abort+0x2b2>
 80025ae:	3218      	adds	r2, #24
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d0e6      	beq.n	8002582 <HAL_DMA_Abort+0x2b2>
 80025b4:	3218      	adds	r2, #24
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d0e3      	beq.n	8002582 <HAL_DMA_Abort+0x2b2>
 80025ba:	3218      	adds	r2, #24
 80025bc:	4293      	cmp	r3, r2
 80025be:	d0e0      	beq.n	8002582 <HAL_DMA_Abort+0x2b2>
 80025c0:	3218      	adds	r2, #24
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d0dd      	beq.n	8002582 <HAL_DMA_Abort+0x2b2>
 80025c6:	3218      	adds	r2, #24
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d0da      	beq.n	8002582 <HAL_DMA_Abort+0x2b2>
 80025cc:	3218      	adds	r2, #24
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d0d7      	beq.n	8002582 <HAL_DMA_Abort+0x2b2>
 80025d2:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d0d3      	beq.n	8002582 <HAL_DMA_Abort+0x2b2>
 80025da:	3218      	adds	r2, #24
 80025dc:	4293      	cmp	r3, r2
 80025de:	d0d0      	beq.n	8002582 <HAL_DMA_Abort+0x2b2>
 80025e0:	3218      	adds	r2, #24
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d0cd      	beq.n	8002582 <HAL_DMA_Abort+0x2b2>
 80025e6:	3218      	adds	r2, #24
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d0ca      	beq.n	8002582 <HAL_DMA_Abort+0x2b2>
 80025ec:	3218      	adds	r2, #24
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d0c7      	beq.n	8002582 <HAL_DMA_Abort+0x2b2>
 80025f2:	3218      	adds	r2, #24
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d0c4      	beq.n	8002582 <HAL_DMA_Abort+0x2b2>
 80025f8:	3218      	adds	r2, #24
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d0c1      	beq.n	8002582 <HAL_DMA_Abort+0x2b2>
 80025fe:	3218      	adds	r2, #24
 8002600:	4293      	cmp	r3, r2
 8002602:	d0be      	beq.n	8002582 <HAL_DMA_Abort+0x2b2>
 8002604:	e727      	b.n	8002456 <HAL_DMA_Abort+0x186>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800260c:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800260e:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	@ 0x70
 8002612:	605a      	str	r2, [r3, #4]
 8002614:	e7bb      	b.n	800258e <HAL_DMA_Abort+0x2be>
 8002616:	bf00      	nop
 8002618:	40020028 	.word	0x40020028

0800261c <HAL_DMA_Abort_IT>:
{
 800261c:	b508      	push	{r3, lr}
  if(hdma == NULL)
 800261e:	b128      	cbz	r0, 800262c <HAL_DMA_Abort_IT+0x10>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002620:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8002624:	2b02      	cmp	r3, #2
 8002626:	d003      	beq.n	8002630 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002628:	2380      	movs	r3, #128	@ 0x80
 800262a:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 800262c:	2001      	movs	r0, #1
 800262e:	e05d      	b.n	80026ec <HAL_DMA_Abort_IT+0xd0>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002630:	6803      	ldr	r3, [r0, #0]
 8002632:	4a3f      	ldr	r2, [pc, #252]	@ (8002730 <HAL_DMA_Abort_IT+0x114>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d051      	beq.n	80026dc <HAL_DMA_Abort_IT+0xc0>
 8002638:	3218      	adds	r2, #24
 800263a:	4293      	cmp	r3, r2
 800263c:	d04e      	beq.n	80026dc <HAL_DMA_Abort_IT+0xc0>
 800263e:	3218      	adds	r2, #24
 8002640:	4293      	cmp	r3, r2
 8002642:	d04b      	beq.n	80026dc <HAL_DMA_Abort_IT+0xc0>
 8002644:	3218      	adds	r2, #24
 8002646:	4293      	cmp	r3, r2
 8002648:	d048      	beq.n	80026dc <HAL_DMA_Abort_IT+0xc0>
 800264a:	3218      	adds	r2, #24
 800264c:	4293      	cmp	r3, r2
 800264e:	d045      	beq.n	80026dc <HAL_DMA_Abort_IT+0xc0>
 8002650:	3218      	adds	r2, #24
 8002652:	4293      	cmp	r3, r2
 8002654:	d042      	beq.n	80026dc <HAL_DMA_Abort_IT+0xc0>
 8002656:	3218      	adds	r2, #24
 8002658:	4293      	cmp	r3, r2
 800265a:	d03f      	beq.n	80026dc <HAL_DMA_Abort_IT+0xc0>
 800265c:	3218      	adds	r2, #24
 800265e:	4293      	cmp	r3, r2
 8002660:	d03c      	beq.n	80026dc <HAL_DMA_Abort_IT+0xc0>
 8002662:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8002666:	4293      	cmp	r3, r2
 8002668:	d038      	beq.n	80026dc <HAL_DMA_Abort_IT+0xc0>
 800266a:	3218      	adds	r2, #24
 800266c:	4293      	cmp	r3, r2
 800266e:	d035      	beq.n	80026dc <HAL_DMA_Abort_IT+0xc0>
 8002670:	3218      	adds	r2, #24
 8002672:	4293      	cmp	r3, r2
 8002674:	d032      	beq.n	80026dc <HAL_DMA_Abort_IT+0xc0>
 8002676:	3218      	adds	r2, #24
 8002678:	4293      	cmp	r3, r2
 800267a:	d02f      	beq.n	80026dc <HAL_DMA_Abort_IT+0xc0>
 800267c:	3218      	adds	r2, #24
 800267e:	4293      	cmp	r3, r2
 8002680:	d02c      	beq.n	80026dc <HAL_DMA_Abort_IT+0xc0>
 8002682:	3218      	adds	r2, #24
 8002684:	4293      	cmp	r3, r2
 8002686:	d029      	beq.n	80026dc <HAL_DMA_Abort_IT+0xc0>
 8002688:	3218      	adds	r2, #24
 800268a:	4293      	cmp	r3, r2
 800268c:	d026      	beq.n	80026dc <HAL_DMA_Abort_IT+0xc0>
 800268e:	3218      	adds	r2, #24
 8002690:	4293      	cmp	r3, r2
 8002692:	d023      	beq.n	80026dc <HAL_DMA_Abort_IT+0xc0>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	f022 020e 	bic.w	r2, r2, #14
 800269a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	f022 0201 	bic.w	r2, r2, #1
 80026a2:	601a      	str	r2, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80026a4:	4a23      	ldr	r2, [pc, #140]	@ (8002734 <HAL_DMA_Abort_IT+0x118>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d121      	bne.n	80026ee <HAL_DMA_Abort_IT+0xd2>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80026aa:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 80026ac:	6813      	ldr	r3, [r2, #0]
 80026ae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026b2:	6013      	str	r3, [r2, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80026b4:	e9d0 1316 	ldrd	r1, r3, [r0, #88]	@ 0x58
 80026b8:	f003 021f 	and.w	r2, r3, #31
 80026bc:	2301      	movs	r3, #1
 80026be:	4093      	lsls	r3, r2
 80026c0:	604b      	str	r3, [r1, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026c2:	e9d0 3219 	ldrd	r3, r2, [r0, #100]	@ 0x64
 80026c6:	605a      	str	r2, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 80026c8:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80026ca:	b32b      	cbz	r3, 8002718 <HAL_DMA_Abort_IT+0xfc>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026d2:	601a      	str	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026d4:	e9d0 321c 	ldrd	r3, r2, [r0, #112]	@ 0x70
 80026d8:	605a      	str	r2, [r3, #4]
 80026da:	e01d      	b.n	8002718 <HAL_DMA_Abort_IT+0xfc>
      hdma->State = HAL_DMA_STATE_ABORT;
 80026dc:	2204      	movs	r2, #4
 80026de:	f880 2035 	strb.w	r2, [r0, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	f022 0201 	bic.w	r2, r2, #1
 80026e8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80026ea:	2000      	movs	r0, #0
}
 80026ec:	bd08      	pop	{r3, pc}
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80026ee:	4a12      	ldr	r2, [pc, #72]	@ (8002738 <HAL_DMA_Abort_IT+0x11c>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d0da      	beq.n	80026aa <HAL_DMA_Abort_IT+0x8e>
 80026f4:	3214      	adds	r2, #20
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d0d7      	beq.n	80026aa <HAL_DMA_Abort_IT+0x8e>
 80026fa:	3214      	adds	r2, #20
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d0d4      	beq.n	80026aa <HAL_DMA_Abort_IT+0x8e>
 8002700:	3214      	adds	r2, #20
 8002702:	4293      	cmp	r3, r2
 8002704:	d0d1      	beq.n	80026aa <HAL_DMA_Abort_IT+0x8e>
 8002706:	3214      	adds	r2, #20
 8002708:	4293      	cmp	r3, r2
 800270a:	d0ce      	beq.n	80026aa <HAL_DMA_Abort_IT+0x8e>
 800270c:	3214      	adds	r2, #20
 800270e:	4293      	cmp	r3, r2
 8002710:	d0cb      	beq.n	80026aa <HAL_DMA_Abort_IT+0x8e>
 8002712:	3214      	adds	r2, #20
 8002714:	4293      	cmp	r3, r2
 8002716:	d0c8      	beq.n	80026aa <HAL_DMA_Abort_IT+0x8e>
      hdma->State = HAL_DMA_STATE_READY;
 8002718:	2301      	movs	r3, #1
 800271a:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 800271e:	2300      	movs	r3, #0
 8002720:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
      if(hdma->XferAbortCallback != NULL)
 8002724:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0df      	beq.n	80026ea <HAL_DMA_Abort_IT+0xce>
        hdma->XferAbortCallback(hdma);
 800272a:	4798      	blx	r3
 800272c:	e7dd      	b.n	80026ea <HAL_DMA_Abort_IT+0xce>
 800272e:	bf00      	nop
 8002730:	40020010 	.word	0x40020010
 8002734:	58025408 	.word	0x58025408
 8002738:	5802541c 	.word	0x5802541c

0800273c <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0U;
 800273c:	2300      	movs	r3, #0
{
 800273e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0U;
 8002742:	9301      	str	r3, [sp, #4]
{
 8002744:	4604      	mov	r4, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 8002746:	4b29      	ldr	r3, [pc, #164]	@ (80027ec <HAL_DMA_IRQHandler+0xb0>)
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002748:	4e29      	ldr	r6, [pc, #164]	@ (80027f0 <HAL_DMA_IRQHandler+0xb4>)
  uint32_t timeout = SystemCoreClock / 9600U;
 800274a:	681f      	ldr	r7, [r3, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800274c:	6803      	ldr	r3, [r0, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800274e:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002750:	42b3      	cmp	r3, r6
  tmpisr_dma  = regs_dma->ISR;
 8002752:	f8d5 8000 	ldr.w	r8, [r5]
  tmpisr_bdma = regs_bdma->ISR;
 8002756:	f8d5 c000 	ldr.w	ip, [r5]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800275a:	d04f      	beq.n	80027fc <HAL_DMA_IRQHandler+0xc0>
 800275c:	4a25      	ldr	r2, [pc, #148]	@ (80027f4 <HAL_DMA_IRQHandler+0xb8>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d04c      	beq.n	80027fc <HAL_DMA_IRQHandler+0xc0>
 8002762:	3218      	adds	r2, #24
 8002764:	4293      	cmp	r3, r2
 8002766:	d049      	beq.n	80027fc <HAL_DMA_IRQHandler+0xc0>
 8002768:	3218      	adds	r2, #24
 800276a:	4293      	cmp	r3, r2
 800276c:	d046      	beq.n	80027fc <HAL_DMA_IRQHandler+0xc0>
 800276e:	3218      	adds	r2, #24
 8002770:	4293      	cmp	r3, r2
 8002772:	d043      	beq.n	80027fc <HAL_DMA_IRQHandler+0xc0>
 8002774:	3218      	adds	r2, #24
 8002776:	4293      	cmp	r3, r2
 8002778:	d040      	beq.n	80027fc <HAL_DMA_IRQHandler+0xc0>
 800277a:	3218      	adds	r2, #24
 800277c:	4293      	cmp	r3, r2
 800277e:	d03d      	beq.n	80027fc <HAL_DMA_IRQHandler+0xc0>
 8002780:	3218      	adds	r2, #24
 8002782:	4293      	cmp	r3, r2
 8002784:	d03a      	beq.n	80027fc <HAL_DMA_IRQHandler+0xc0>
 8002786:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 800278a:	4293      	cmp	r3, r2
 800278c:	d036      	beq.n	80027fc <HAL_DMA_IRQHandler+0xc0>
 800278e:	3218      	adds	r2, #24
 8002790:	4293      	cmp	r3, r2
 8002792:	d033      	beq.n	80027fc <HAL_DMA_IRQHandler+0xc0>
 8002794:	3218      	adds	r2, #24
 8002796:	4293      	cmp	r3, r2
 8002798:	d030      	beq.n	80027fc <HAL_DMA_IRQHandler+0xc0>
 800279a:	3218      	adds	r2, #24
 800279c:	4293      	cmp	r3, r2
 800279e:	d02d      	beq.n	80027fc <HAL_DMA_IRQHandler+0xc0>
 80027a0:	3218      	adds	r2, #24
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d02a      	beq.n	80027fc <HAL_DMA_IRQHandler+0xc0>
 80027a6:	3218      	adds	r2, #24
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d027      	beq.n	80027fc <HAL_DMA_IRQHandler+0xc0>
 80027ac:	3218      	adds	r2, #24
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d024      	beq.n	80027fc <HAL_DMA_IRQHandler+0xc0>
 80027b2:	3218      	adds	r2, #24
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d021      	beq.n	80027fc <HAL_DMA_IRQHandler+0xc0>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80027b8:	4a0f      	ldr	r2, [pc, #60]	@ (80027f8 <HAL_DMA_IRQHandler+0xbc>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	f040 8209 	bne.w	8002bd2 <HAL_DMA_IRQHandler+0x496>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80027c0:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 80027c2:	2004      	movs	r0, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80027c4:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80027c6:	f001 011f 	and.w	r1, r1, #31
 80027ca:	4088      	lsls	r0, r1
 80027cc:	ea10 0f0c 	tst.w	r0, ip
 80027d0:	f000 8226 	beq.w	8002c20 <HAL_DMA_IRQHandler+0x4e4>
 80027d4:	0756      	lsls	r6, r2, #29
 80027d6:	f140 8223 	bpl.w	8002c20 <HAL_DMA_IRQHandler+0x4e4>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80027da:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80027dc:	6068      	str	r0, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80027de:	f140 8217 	bpl.w	8002c10 <HAL_DMA_IRQHandler+0x4d4>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80027e2:	03d3      	lsls	r3, r2, #15
 80027e4:	f100 821a 	bmi.w	8002c1c <HAL_DMA_IRQHandler+0x4e0>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027e8:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80027ea:	e17e      	b.n	8002aea <HAL_DMA_IRQHandler+0x3ae>
 80027ec:	2400000c 	.word	0x2400000c
 80027f0:	40020010 	.word	0x40020010
 80027f4:	40020028 	.word	0x40020028
 80027f8:	58025408 	.word	0x58025408
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80027fc:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80027fe:	2008      	movs	r0, #8
 8002800:	f002 021f 	and.w	r2, r2, #31
 8002804:	4090      	lsls	r0, r2
 8002806:	ea10 0f08 	tst.w	r0, r8
 800280a:	d03d      	beq.n	8002888 <HAL_DMA_IRQHandler+0x14c>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800280c:	42b3      	cmp	r3, r6
 800280e:	d02e      	beq.n	800286e <HAL_DMA_IRQHandler+0x132>
 8002810:	4984      	ldr	r1, [pc, #528]	@ (8002a24 <HAL_DMA_IRQHandler+0x2e8>)
 8002812:	428b      	cmp	r3, r1
 8002814:	d02b      	beq.n	800286e <HAL_DMA_IRQHandler+0x132>
 8002816:	3118      	adds	r1, #24
 8002818:	428b      	cmp	r3, r1
 800281a:	d028      	beq.n	800286e <HAL_DMA_IRQHandler+0x132>
 800281c:	3118      	adds	r1, #24
 800281e:	428b      	cmp	r3, r1
 8002820:	d025      	beq.n	800286e <HAL_DMA_IRQHandler+0x132>
 8002822:	3118      	adds	r1, #24
 8002824:	428b      	cmp	r3, r1
 8002826:	d022      	beq.n	800286e <HAL_DMA_IRQHandler+0x132>
 8002828:	3118      	adds	r1, #24
 800282a:	428b      	cmp	r3, r1
 800282c:	d01f      	beq.n	800286e <HAL_DMA_IRQHandler+0x132>
 800282e:	3118      	adds	r1, #24
 8002830:	428b      	cmp	r3, r1
 8002832:	d01c      	beq.n	800286e <HAL_DMA_IRQHandler+0x132>
 8002834:	3118      	adds	r1, #24
 8002836:	428b      	cmp	r3, r1
 8002838:	d019      	beq.n	800286e <HAL_DMA_IRQHandler+0x132>
 800283a:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 800283e:	428b      	cmp	r3, r1
 8002840:	d015      	beq.n	800286e <HAL_DMA_IRQHandler+0x132>
 8002842:	3118      	adds	r1, #24
 8002844:	428b      	cmp	r3, r1
 8002846:	d012      	beq.n	800286e <HAL_DMA_IRQHandler+0x132>
 8002848:	3118      	adds	r1, #24
 800284a:	428b      	cmp	r3, r1
 800284c:	d00f      	beq.n	800286e <HAL_DMA_IRQHandler+0x132>
 800284e:	3118      	adds	r1, #24
 8002850:	428b      	cmp	r3, r1
 8002852:	d00c      	beq.n	800286e <HAL_DMA_IRQHandler+0x132>
 8002854:	3118      	adds	r1, #24
 8002856:	428b      	cmp	r3, r1
 8002858:	d009      	beq.n	800286e <HAL_DMA_IRQHandler+0x132>
 800285a:	3118      	adds	r1, #24
 800285c:	428b      	cmp	r3, r1
 800285e:	d006      	beq.n	800286e <HAL_DMA_IRQHandler+0x132>
 8002860:	3118      	adds	r1, #24
 8002862:	428b      	cmp	r3, r1
 8002864:	d003      	beq.n	800286e <HAL_DMA_IRQHandler+0x132>
 8002866:	3118      	adds	r1, #24
 8002868:	428b      	cmp	r3, r1
 800286a:	f040 80c1 	bne.w	80029f0 <HAL_DMA_IRQHandler+0x2b4>
 800286e:	6819      	ldr	r1, [r3, #0]
 8002870:	f3c1 0180 	ubfx	r1, r1, #2, #1
 8002874:	b141      	cbz	r1, 8002888 <HAL_DMA_IRQHandler+0x14c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002876:	6819      	ldr	r1, [r3, #0]
 8002878:	f021 0104 	bic.w	r1, r1, #4
 800287c:	6019      	str	r1, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800287e:	60a8      	str	r0, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002880:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8002882:	f041 0101 	orr.w	r1, r1, #1
 8002886:	6561      	str	r1, [r4, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002888:	fa28 f102 	lsr.w	r1, r8, r2
 800288c:	07c8      	lsls	r0, r1, #31
 800288e:	d534      	bpl.n	80028fa <HAL_DMA_IRQHandler+0x1be>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002890:	42b3      	cmp	r3, r6
 8002892:	d02e      	beq.n	80028f2 <HAL_DMA_IRQHandler+0x1b6>
 8002894:	4963      	ldr	r1, [pc, #396]	@ (8002a24 <HAL_DMA_IRQHandler+0x2e8>)
 8002896:	428b      	cmp	r3, r1
 8002898:	d02b      	beq.n	80028f2 <HAL_DMA_IRQHandler+0x1b6>
 800289a:	3118      	adds	r1, #24
 800289c:	428b      	cmp	r3, r1
 800289e:	d028      	beq.n	80028f2 <HAL_DMA_IRQHandler+0x1b6>
 80028a0:	3118      	adds	r1, #24
 80028a2:	428b      	cmp	r3, r1
 80028a4:	d025      	beq.n	80028f2 <HAL_DMA_IRQHandler+0x1b6>
 80028a6:	3118      	adds	r1, #24
 80028a8:	428b      	cmp	r3, r1
 80028aa:	d022      	beq.n	80028f2 <HAL_DMA_IRQHandler+0x1b6>
 80028ac:	3118      	adds	r1, #24
 80028ae:	428b      	cmp	r3, r1
 80028b0:	d01f      	beq.n	80028f2 <HAL_DMA_IRQHandler+0x1b6>
 80028b2:	3118      	adds	r1, #24
 80028b4:	428b      	cmp	r3, r1
 80028b6:	d01c      	beq.n	80028f2 <HAL_DMA_IRQHandler+0x1b6>
 80028b8:	3118      	adds	r1, #24
 80028ba:	428b      	cmp	r3, r1
 80028bc:	d019      	beq.n	80028f2 <HAL_DMA_IRQHandler+0x1b6>
 80028be:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 80028c2:	428b      	cmp	r3, r1
 80028c4:	d015      	beq.n	80028f2 <HAL_DMA_IRQHandler+0x1b6>
 80028c6:	3118      	adds	r1, #24
 80028c8:	428b      	cmp	r3, r1
 80028ca:	d012      	beq.n	80028f2 <HAL_DMA_IRQHandler+0x1b6>
 80028cc:	3118      	adds	r1, #24
 80028ce:	428b      	cmp	r3, r1
 80028d0:	d00f      	beq.n	80028f2 <HAL_DMA_IRQHandler+0x1b6>
 80028d2:	3118      	adds	r1, #24
 80028d4:	428b      	cmp	r3, r1
 80028d6:	d00c      	beq.n	80028f2 <HAL_DMA_IRQHandler+0x1b6>
 80028d8:	3118      	adds	r1, #24
 80028da:	428b      	cmp	r3, r1
 80028dc:	d009      	beq.n	80028f2 <HAL_DMA_IRQHandler+0x1b6>
 80028de:	3118      	adds	r1, #24
 80028e0:	428b      	cmp	r3, r1
 80028e2:	d006      	beq.n	80028f2 <HAL_DMA_IRQHandler+0x1b6>
 80028e4:	3118      	adds	r1, #24
 80028e6:	428b      	cmp	r3, r1
 80028e8:	d003      	beq.n	80028f2 <HAL_DMA_IRQHandler+0x1b6>
 80028ea:	3118      	adds	r1, #24
 80028ec:	428b      	cmp	r3, r1
 80028ee:	f040 8083 	bne.w	80029f8 <HAL_DMA_IRQHandler+0x2bc>
 80028f2:	6959      	ldr	r1, [r3, #20]
 80028f4:	0609      	lsls	r1, r1, #24
 80028f6:	f100 8081 	bmi.w	80029fc <HAL_DMA_IRQHandler+0x2c0>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80028fa:	2104      	movs	r1, #4
 80028fc:	4091      	lsls	r1, r2
 80028fe:	ea11 0f08 	tst.w	r1, r8
 8002902:	d032      	beq.n	800296a <HAL_DMA_IRQHandler+0x22e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002904:	42b3      	cmp	r3, r6
 8002906:	d02d      	beq.n	8002964 <HAL_DMA_IRQHandler+0x228>
 8002908:	4846      	ldr	r0, [pc, #280]	@ (8002a24 <HAL_DMA_IRQHandler+0x2e8>)
 800290a:	4283      	cmp	r3, r0
 800290c:	d02a      	beq.n	8002964 <HAL_DMA_IRQHandler+0x228>
 800290e:	3018      	adds	r0, #24
 8002910:	4283      	cmp	r3, r0
 8002912:	d027      	beq.n	8002964 <HAL_DMA_IRQHandler+0x228>
 8002914:	3018      	adds	r0, #24
 8002916:	4283      	cmp	r3, r0
 8002918:	d024      	beq.n	8002964 <HAL_DMA_IRQHandler+0x228>
 800291a:	3018      	adds	r0, #24
 800291c:	4283      	cmp	r3, r0
 800291e:	d021      	beq.n	8002964 <HAL_DMA_IRQHandler+0x228>
 8002920:	3018      	adds	r0, #24
 8002922:	4283      	cmp	r3, r0
 8002924:	d01e      	beq.n	8002964 <HAL_DMA_IRQHandler+0x228>
 8002926:	3018      	adds	r0, #24
 8002928:	4283      	cmp	r3, r0
 800292a:	d01b      	beq.n	8002964 <HAL_DMA_IRQHandler+0x228>
 800292c:	3018      	adds	r0, #24
 800292e:	4283      	cmp	r3, r0
 8002930:	d018      	beq.n	8002964 <HAL_DMA_IRQHandler+0x228>
 8002932:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 8002936:	4283      	cmp	r3, r0
 8002938:	d014      	beq.n	8002964 <HAL_DMA_IRQHandler+0x228>
 800293a:	3018      	adds	r0, #24
 800293c:	4283      	cmp	r3, r0
 800293e:	d011      	beq.n	8002964 <HAL_DMA_IRQHandler+0x228>
 8002940:	3018      	adds	r0, #24
 8002942:	4283      	cmp	r3, r0
 8002944:	d00e      	beq.n	8002964 <HAL_DMA_IRQHandler+0x228>
 8002946:	3018      	adds	r0, #24
 8002948:	4283      	cmp	r3, r0
 800294a:	d00b      	beq.n	8002964 <HAL_DMA_IRQHandler+0x228>
 800294c:	3018      	adds	r0, #24
 800294e:	4283      	cmp	r3, r0
 8002950:	d008      	beq.n	8002964 <HAL_DMA_IRQHandler+0x228>
 8002952:	3018      	adds	r0, #24
 8002954:	4283      	cmp	r3, r0
 8002956:	d005      	beq.n	8002964 <HAL_DMA_IRQHandler+0x228>
 8002958:	3018      	adds	r0, #24
 800295a:	4283      	cmp	r3, r0
 800295c:	d002      	beq.n	8002964 <HAL_DMA_IRQHandler+0x228>
 800295e:	3018      	adds	r0, #24
 8002960:	4283      	cmp	r3, r0
 8002962:	d153      	bne.n	8002a0c <HAL_DMA_IRQHandler+0x2d0>
 8002964:	6818      	ldr	r0, [r3, #0]
 8002966:	0780      	lsls	r0, r0, #30
 8002968:	d452      	bmi.n	8002a10 <HAL_DMA_IRQHandler+0x2d4>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800296a:	2110      	movs	r1, #16
 800296c:	4091      	lsls	r1, r2
 800296e:	ea11 0f08 	tst.w	r1, r8
 8002972:	d05d      	beq.n	8002a30 <HAL_DMA_IRQHandler+0x2f4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002974:	42b3      	cmp	r3, r6
 8002976:	d02d      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x298>
 8002978:	4a2a      	ldr	r2, [pc, #168]	@ (8002a24 <HAL_DMA_IRQHandler+0x2e8>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d02a      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x298>
 800297e:	3218      	adds	r2, #24
 8002980:	4293      	cmp	r3, r2
 8002982:	d027      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x298>
 8002984:	3218      	adds	r2, #24
 8002986:	4293      	cmp	r3, r2
 8002988:	d024      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x298>
 800298a:	3218      	adds	r2, #24
 800298c:	4293      	cmp	r3, r2
 800298e:	d021      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x298>
 8002990:	3218      	adds	r2, #24
 8002992:	4293      	cmp	r3, r2
 8002994:	d01e      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x298>
 8002996:	3218      	adds	r2, #24
 8002998:	4293      	cmp	r3, r2
 800299a:	d01b      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x298>
 800299c:	3218      	adds	r2, #24
 800299e:	4293      	cmp	r3, r2
 80029a0:	d018      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x298>
 80029a2:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d014      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x298>
 80029aa:	3218      	adds	r2, #24
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d011      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x298>
 80029b0:	3218      	adds	r2, #24
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d00e      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x298>
 80029b6:	3218      	adds	r2, #24
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d00b      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x298>
 80029bc:	3218      	adds	r2, #24
 80029be:	4293      	cmp	r3, r2
 80029c0:	d008      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x298>
 80029c2:	3218      	adds	r2, #24
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d005      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x298>
 80029c8:	3218      	adds	r2, #24
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d002      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x298>
 80029ce:	3218      	adds	r2, #24
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d123      	bne.n	8002a1c <HAL_DMA_IRQHandler+0x2e0>
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 80029da:	b34a      	cbz	r2, 8002a30 <HAL_DMA_IRQHandler+0x2f4>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80029dc:	60a9      	str	r1, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	0350      	lsls	r0, r2, #13
 80029e2:	f140 808a 	bpl.w	8002afa <HAL_DMA_IRQHandler+0x3be>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	0319      	lsls	r1, r3, #12
 80029ea:	d41d      	bmi.n	8002a28 <HAL_DMA_IRQHandler+0x2ec>
          if(hdma->XferHalfCpltCallback != NULL)
 80029ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80029ee:	e01c      	b.n	8002a2a <HAL_DMA_IRQHandler+0x2ee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80029f0:	6819      	ldr	r1, [r3, #0]
 80029f2:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 80029f6:	e73d      	b.n	8002874 <HAL_DMA_IRQHandler+0x138>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80029f8:	6819      	ldr	r1, [r3, #0]
 80029fa:	e77e      	b.n	80028fa <HAL_DMA_IRQHandler+0x1be>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80029fc:	2101      	movs	r1, #1
 80029fe:	4091      	lsls	r1, r2
 8002a00:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a02:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8002a04:	f041 0102 	orr.w	r1, r1, #2
 8002a08:	6561      	str	r1, [r4, #84]	@ 0x54
 8002a0a:	e776      	b.n	80028fa <HAL_DMA_IRQHandler+0x1be>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002a0c:	6819      	ldr	r1, [r3, #0]
 8002a0e:	e7ac      	b.n	800296a <HAL_DMA_IRQHandler+0x22e>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002a10:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a12:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8002a14:	f041 0104 	orr.w	r1, r1, #4
 8002a18:	6561      	str	r1, [r4, #84]	@ 0x54
 8002a1a:	e7a6      	b.n	800296a <HAL_DMA_IRQHandler+0x22e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8002a22:	e7da      	b.n	80029da <HAL_DMA_IRQHandler+0x29e>
 8002a24:	40020028 	.word	0x40020028
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002a28:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
          if(hdma->XferHalfCpltCallback != NULL)
 8002a2a:	b10b      	cbz	r3, 8002a30 <HAL_DMA_IRQHandler+0x2f4>
            hdma->XferHalfCpltCallback(hdma);
 8002a2c:	4620      	mov	r0, r4
 8002a2e:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002a30:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8002a32:	2020      	movs	r0, #32
 8002a34:	f001 011f 	and.w	r1, r1, #31
 8002a38:	4088      	lsls	r0, r1
 8002a3a:	ea10 0f08 	tst.w	r0, r8
 8002a3e:	d072      	beq.n	8002b26 <HAL_DMA_IRQHandler+0x3ea>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002a40:	6823      	ldr	r3, [r4, #0]
 8002a42:	42b3      	cmp	r3, r6
 8002a44:	d02d      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0x366>
 8002a46:	4a8d      	ldr	r2, [pc, #564]	@ (8002c7c <HAL_DMA_IRQHandler+0x540>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d02a      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0x366>
 8002a4c:	3218      	adds	r2, #24
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d027      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0x366>
 8002a52:	3218      	adds	r2, #24
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d024      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0x366>
 8002a58:	3218      	adds	r2, #24
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d021      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0x366>
 8002a5e:	3218      	adds	r2, #24
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d01e      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0x366>
 8002a64:	3218      	adds	r2, #24
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d01b      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0x366>
 8002a6a:	3218      	adds	r2, #24
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d018      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0x366>
 8002a70:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d014      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0x366>
 8002a78:	3218      	adds	r2, #24
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d011      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0x366>
 8002a7e:	3218      	adds	r2, #24
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d00e      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0x366>
 8002a84:	3218      	adds	r2, #24
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d00b      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0x366>
 8002a8a:	3218      	adds	r2, #24
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d008      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0x366>
 8002a90:	3218      	adds	r2, #24
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d005      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0x366>
 8002a96:	3218      	adds	r2, #24
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d002      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0x366>
 8002a9c:	3218      	adds	r2, #24
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d134      	bne.n	8002b0c <HAL_DMA_IRQHandler+0x3d0>
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8002aa8:	2a00      	cmp	r2, #0
 8002aaa:	d03c      	beq.n	8002b26 <HAL_DMA_IRQHandler+0x3ea>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002aac:	60a8      	str	r0, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002aae:	f894 2035 	ldrb.w	r2, [r4, #53]	@ 0x35
 8002ab2:	2a04      	cmp	r2, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ab4:	681a      	ldr	r2, [r3, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ab6:	d12d      	bne.n	8002b14 <HAL_DMA_IRQHandler+0x3d8>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ab8:	f022 0216 	bic.w	r2, r2, #22
 8002abc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002abe:	695a      	ldr	r2, [r3, #20]
 8002ac0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ac4:	615a      	str	r2, [r3, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ac6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002ac8:	b90a      	cbnz	r2, 8002ace <HAL_DMA_IRQHandler+0x392>
 8002aca:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8002acc:	b11a      	cbz	r2, 8002ad6 <HAL_DMA_IRQHandler+0x39a>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	f022 0208 	bic.w	r2, r2, #8
 8002ad4:	601a      	str	r2, [r3, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002ad6:	233f      	movs	r3, #63	@ 0x3f
 8002ad8:	408b      	lsls	r3, r1
 8002ada:	60ab      	str	r3, [r5, #8]
          hdma->State = HAL_DMA_STATE_READY;
 8002adc:	2301      	movs	r3, #1
 8002ade:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
          if(hdma->XferAbortCallback != NULL)
 8002ae8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
      if (hdma->XferErrorCallback != NULL)
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 808d 	beq.w	8002c0a <HAL_DMA_IRQHandler+0x4ce>
        hdma->XferErrorCallback(hdma);
 8002af0:	4620      	mov	r0, r4
}
 8002af2:	b002      	add	sp, #8
 8002af4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
 8002af8:	4718      	bx	r3
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	05d2      	lsls	r2, r2, #23
 8002afe:	f53f af75 	bmi.w	80029ec <HAL_DMA_IRQHandler+0x2b0>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	f022 0208 	bic.w	r2, r2, #8
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	e76f      	b.n	80029ec <HAL_DMA_IRQHandler+0x2b0>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8002b12:	e7c9      	b.n	8002aa8 <HAL_DMA_IRQHandler+0x36c>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002b14:	0355      	lsls	r5, r2, #13
 8002b16:	d54d      	bpl.n	8002bb4 <HAL_DMA_IRQHandler+0x478>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	0318      	lsls	r0, r3, #12
 8002b1c:	d457      	bmi.n	8002bce <HAL_DMA_IRQHandler+0x492>
            if(hdma->XferM1CpltCallback != NULL)
 8002b1e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
          if(hdma->XferCpltCallback != NULL)
 8002b20:	b10b      	cbz	r3, 8002b26 <HAL_DMA_IRQHandler+0x3ea>
            hdma->XferCpltCallback(hdma);
 8002b22:	4620      	mov	r0, r4
 8002b24:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b26:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d06e      	beq.n	8002c0a <HAL_DMA_IRQHandler+0x4ce>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002b2c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002b2e:	07d9      	lsls	r1, r3, #31
 8002b30:	d53e      	bpl.n	8002bb0 <HAL_DMA_IRQHandler+0x474>
        hdma->State = HAL_DMA_STATE_ABORT;
 8002b32:	2304      	movs	r3, #4
 8002b34:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_DMA_DISABLE(hdma);
 8002b38:	6823      	ldr	r3, [r4, #0]
 8002b3a:	42b3      	cmp	r3, r6
 8002b3c:	d01e      	beq.n	8002b7c <HAL_DMA_IRQHandler+0x440>
 8002b3e:	4a4f      	ldr	r2, [pc, #316]	@ (8002c7c <HAL_DMA_IRQHandler+0x540>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d01b      	beq.n	8002b7c <HAL_DMA_IRQHandler+0x440>
 8002b44:	3218      	adds	r2, #24
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d018      	beq.n	8002b7c <HAL_DMA_IRQHandler+0x440>
 8002b4a:	3218      	adds	r2, #24
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d015      	beq.n	8002b7c <HAL_DMA_IRQHandler+0x440>
 8002b50:	3218      	adds	r2, #24
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d012      	beq.n	8002b7c <HAL_DMA_IRQHandler+0x440>
 8002b56:	3218      	adds	r2, #24
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d00f      	beq.n	8002b7c <HAL_DMA_IRQHandler+0x440>
 8002b5c:	3218      	adds	r2, #24
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d00c      	beq.n	8002b7c <HAL_DMA_IRQHandler+0x440>
 8002b62:	3218      	adds	r2, #24
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d009      	beq.n	8002b7c <HAL_DMA_IRQHandler+0x440>
 8002b68:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d005      	beq.n	8002b7c <HAL_DMA_IRQHandler+0x440>
 8002b70:	3218      	adds	r2, #24
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d002      	beq.n	8002b7c <HAL_DMA_IRQHandler+0x440>
 8002b76:	3218      	adds	r2, #24
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d0ff      	beq.n	8002b7c <HAL_DMA_IRQHandler+0x440>
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b7c:	f44f 5116 	mov.w	r1, #9600	@ 0x2580
        __HAL_DMA_DISABLE(hdma);
 8002b80:	681a      	ldr	r2, [r3, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b82:	fbb7 f1f1 	udiv	r1, r7, r1
        __HAL_DMA_DISABLE(hdma);
 8002b86:	f022 0201 	bic.w	r2, r2, #1
 8002b8a:	601a      	str	r2, [r3, #0]
          if (++count > timeout)
 8002b8c:	9a01      	ldr	r2, [sp, #4]
 8002b8e:	3201      	adds	r2, #1
 8002b90:	428a      	cmp	r2, r1
 8002b92:	9201      	str	r2, [sp, #4]
 8002b94:	d802      	bhi.n	8002b9c <HAL_DMA_IRQHandler+0x460>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	07d2      	lsls	r2, r2, #31
 8002b9a:	d4f7      	bmi.n	8002b8c <HAL_DMA_IRQHandler+0x450>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	07df      	lsls	r7, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8002ba0:	bf4c      	ite	mi
 8002ba2:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8002ba4:	2301      	movpl	r3, #1
      hdma->State = HAL_DMA_STATE_READY;
 8002ba6:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8002baa:	2300      	movs	r3, #0
 8002bac:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      if (hdma->XferErrorCallback != NULL)
 8002bb0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8002bb2:	e79a      	b.n	8002aea <HAL_DMA_IRQHandler+0x3ae>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	f412 7280 	ands.w	r2, r2, #256	@ 0x100
 8002bba:	d108      	bne.n	8002bce <HAL_DMA_IRQHandler+0x492>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002bbc:	6819      	ldr	r1, [r3, #0]
 8002bbe:	f021 0110 	bic.w	r1, r1, #16
 8002bc2:	6019      	str	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8002bc4:	2301      	movs	r3, #1
            __HAL_UNLOCK(hdma);
 8002bc6:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8002bca:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          if(hdma->XferCpltCallback != NULL)
 8002bce:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002bd0:	e7a6      	b.n	8002b20 <HAL_DMA_IRQHandler+0x3e4>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002bd2:	4a2b      	ldr	r2, [pc, #172]	@ (8002c80 <HAL_DMA_IRQHandler+0x544>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	f43f adf3 	beq.w	80027c0 <HAL_DMA_IRQHandler+0x84>
 8002bda:	3214      	adds	r2, #20
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	f43f adef 	beq.w	80027c0 <HAL_DMA_IRQHandler+0x84>
 8002be2:	3214      	adds	r2, #20
 8002be4:	4293      	cmp	r3, r2
 8002be6:	f43f adeb 	beq.w	80027c0 <HAL_DMA_IRQHandler+0x84>
 8002bea:	3214      	adds	r2, #20
 8002bec:	4293      	cmp	r3, r2
 8002bee:	f43f ade7 	beq.w	80027c0 <HAL_DMA_IRQHandler+0x84>
 8002bf2:	3214      	adds	r2, #20
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	f43f ade3 	beq.w	80027c0 <HAL_DMA_IRQHandler+0x84>
 8002bfa:	3214      	adds	r2, #20
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	f43f addf 	beq.w	80027c0 <HAL_DMA_IRQHandler+0x84>
 8002c02:	3214      	adds	r2, #20
 8002c04:	4293      	cmp	r3, r2
 8002c06:	f43f addb 	beq.w	80027c0 <HAL_DMA_IRQHandler+0x84>
}
 8002c0a:	b002      	add	sp, #8
 8002c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002c10:	0697      	lsls	r7, r2, #26
 8002c12:	d403      	bmi.n	8002c1c <HAL_DMA_IRQHandler+0x4e0>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	f022 0204 	bic.w	r2, r2, #4
 8002c1a:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8002c1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002c1e:	e764      	b.n	8002aea <HAL_DMA_IRQHandler+0x3ae>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002c20:	2002      	movs	r0, #2
 8002c22:	4088      	lsls	r0, r1
 8002c24:	ea10 0f0c 	tst.w	r0, ip
 8002c28:	d016      	beq.n	8002c58 <HAL_DMA_IRQHandler+0x51c>
 8002c2a:	0796      	lsls	r6, r2, #30
 8002c2c:	d514      	bpl.n	8002c58 <HAL_DMA_IRQHandler+0x51c>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002c2e:	6068      	str	r0, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c30:	0410      	lsls	r0, r2, #16
 8002c32:	d503      	bpl.n	8002c3c <HAL_DMA_IRQHandler+0x500>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002c34:	03d1      	lsls	r1, r2, #15
 8002c36:	d40d      	bmi.n	8002c54 <HAL_DMA_IRQHandler+0x518>
          if(hdma->XferM1CpltCallback != NULL)
 8002c38:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002c3a:	e756      	b.n	8002aea <HAL_DMA_IRQHandler+0x3ae>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002c3c:	f012 0220 	ands.w	r2, r2, #32
 8002c40:	d108      	bne.n	8002c54 <HAL_DMA_IRQHandler+0x518>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002c42:	6819      	ldr	r1, [r3, #0]
 8002c44:	f021 010a 	bic.w	r1, r1, #10
 8002c48:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002c4a:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8002c4c:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8002c50:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        if(hdma->XferCpltCallback != NULL)
 8002c54:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002c56:	e748      	b.n	8002aea <HAL_DMA_IRQHandler+0x3ae>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002c58:	2008      	movs	r0, #8
 8002c5a:	4088      	lsls	r0, r1
 8002c5c:	ea10 0f0c 	tst.w	r0, ip
 8002c60:	d0d3      	beq.n	8002c0a <HAL_DMA_IRQHandler+0x4ce>
 8002c62:	0712      	lsls	r2, r2, #28
 8002c64:	d5d1      	bpl.n	8002c0a <HAL_DMA_IRQHandler+0x4ce>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	f022 020e 	bic.w	r2, r2, #14
 8002c6c:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002c6e:	2301      	movs	r3, #1
 8002c70:	fa03 f101 	lsl.w	r1, r3, r1
 8002c74:	6069      	str	r1, [r5, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c76:	6563      	str	r3, [r4, #84]	@ 0x54
 8002c78:	e795      	b.n	8002ba6 <HAL_DMA_IRQHandler+0x46a>
 8002c7a:	bf00      	nop
 8002c7c:	40020028 	.word	0x40020028
 8002c80:	5802541c 	.word	0x5802541c

08002c84 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c84:	b530      	push	{r4, r5, lr}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c86:	6804      	ldr	r4, [r0, #0]
 8002c88:	4d15      	ldr	r5, [pc, #84]	@ (8002ce0 <DMA_MultiBufferSetConfig+0x5c>)
  {
    /* Configure DMA Stream data length */
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c8a:	6880      	ldr	r0, [r0, #8]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c8c:	42ac      	cmp	r4, r5
 8002c8e:	d01e      	beq.n	8002cce <DMA_MultiBufferSetConfig+0x4a>
 8002c90:	3518      	adds	r5, #24
 8002c92:	42ac      	cmp	r4, r5
 8002c94:	d01b      	beq.n	8002cce <DMA_MultiBufferSetConfig+0x4a>
 8002c96:	3518      	adds	r5, #24
 8002c98:	42ac      	cmp	r4, r5
 8002c9a:	d018      	beq.n	8002cce <DMA_MultiBufferSetConfig+0x4a>
 8002c9c:	3518      	adds	r5, #24
 8002c9e:	42ac      	cmp	r4, r5
 8002ca0:	d015      	beq.n	8002cce <DMA_MultiBufferSetConfig+0x4a>
 8002ca2:	3518      	adds	r5, #24
 8002ca4:	42ac      	cmp	r4, r5
 8002ca6:	d012      	beq.n	8002cce <DMA_MultiBufferSetConfig+0x4a>
 8002ca8:	3518      	adds	r5, #24
 8002caa:	42ac      	cmp	r4, r5
 8002cac:	d00f      	beq.n	8002cce <DMA_MultiBufferSetConfig+0x4a>
 8002cae:	3518      	adds	r5, #24
 8002cb0:	42ac      	cmp	r4, r5
 8002cb2:	d00c      	beq.n	8002cce <DMA_MultiBufferSetConfig+0x4a>
 8002cb4:	3518      	adds	r5, #24
 8002cb6:	42ac      	cmp	r4, r5
 8002cb8:	d009      	beq.n	8002cce <DMA_MultiBufferSetConfig+0x4a>
 8002cba:	f505 7556 	add.w	r5, r5, #856	@ 0x358
 8002cbe:	42ac      	cmp	r4, r5
 8002cc0:	d005      	beq.n	8002cce <DMA_MultiBufferSetConfig+0x4a>
 8002cc2:	3518      	adds	r5, #24
 8002cc4:	42ac      	cmp	r4, r5
 8002cc6:	d002      	beq.n	8002cce <DMA_MultiBufferSetConfig+0x4a>
 8002cc8:	3518      	adds	r5, #24
 8002cca:	42ac      	cmp	r4, r5
 8002ccc:	d0ff      	beq.n	8002cce <DMA_MultiBufferSetConfig+0x4a>
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cce:	2840      	cmp	r0, #64	@ 0x40
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8002cd0:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cd2:	d102      	bne.n	8002cda <DMA_MultiBufferSetConfig+0x56>
    {
      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8002cd4:	60a2      	str	r2, [r4, #8]

      /* Configure DMA Stream source address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8002cd6:	60e1      	str	r1, [r4, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8002cd8:	bd30      	pop	{r4, r5, pc}
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 8002cda:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 8002cdc:	60e2      	str	r2, [r4, #12]
}
 8002cde:	e7fb      	b.n	8002cd8 <DMA_MultiBufferSetConfig+0x54>
 8002ce0:	40020010 	.word	0x40020010

08002ce4 <HAL_DMAEx_MultiBufferStart_IT>:
{
 8002ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ce6:	4605      	mov	r5, r0
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002ce8:	6880      	ldr	r0, [r0, #8]
 8002cea:	2880      	cmp	r0, #128	@ 0x80
 8002cec:	d104      	bne.n	8002cf8 <HAL_DMAEx_MultiBufferStart_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002cee:	f44f 7380 	mov.w	r3, #256	@ 0x100
    return HAL_ERROR;
 8002cf2:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002cf4:	656b      	str	r3, [r5, #84]	@ 0x54
    status = HAL_ERROR;
 8002cf6:	e1c5      	b.n	8003084 <HAL_DMAEx_MultiBufferStart_IT+0x3a0>
  __HAL_LOCK(hdma);
 8002cf8:	f895 0034 	ldrb.w	r0, [r5, #52]	@ 0x34
 8002cfc:	2801      	cmp	r0, #1
 8002cfe:	f000 81ca 	beq.w	8003096 <HAL_DMAEx_MultiBufferStart_IT+0x3b2>
 8002d02:	2001      	movs	r0, #1
 8002d04:	f885 0034 	strb.w	r0, [r5, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d08:	f895 0035 	ldrb.w	r0, [r5, #53]	@ 0x35
 8002d0c:	2801      	cmp	r0, #1
 8002d0e:	f040 81bf 	bne.w	8003090 <HAL_DMAEx_MultiBufferStart_IT+0x3ac>
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d12:	2002      	movs	r0, #2
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d14:	682c      	ldr	r4, [r5, #0]
 8002d16:	4e7f      	ldr	r6, [pc, #508]	@ (8002f14 <HAL_DMAEx_MultiBufferStart_IT+0x230>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d18:	f885 0035 	strb.w	r0, [r5, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d1c:	2000      	movs	r0, #0
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d1e:	42b4      	cmp	r4, r6
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d20:	6568      	str	r0, [r5, #84]	@ 0x54
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002d22:	e9d5 c716 	ldrd	ip, r7, [r5, #88]	@ 0x58
 8002d26:	f007 071f 	and.w	r7, r7, #31
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d2a:	f000 80e9 	beq.w	8002f00 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002d2e:	487a      	ldr	r0, [pc, #488]	@ (8002f18 <HAL_DMAEx_MultiBufferStart_IT+0x234>)
 8002d30:	4284      	cmp	r4, r0
 8002d32:	f000 80e5 	beq.w	8002f00 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002d36:	3018      	adds	r0, #24
 8002d38:	4284      	cmp	r4, r0
 8002d3a:	f000 80e1 	beq.w	8002f00 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002d3e:	3018      	adds	r0, #24
 8002d40:	4284      	cmp	r4, r0
 8002d42:	f000 80dd 	beq.w	8002f00 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002d46:	3018      	adds	r0, #24
 8002d48:	4284      	cmp	r4, r0
 8002d4a:	f000 80d9 	beq.w	8002f00 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002d4e:	3018      	adds	r0, #24
 8002d50:	4284      	cmp	r4, r0
 8002d52:	f000 80d5 	beq.w	8002f00 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002d56:	3018      	adds	r0, #24
 8002d58:	4284      	cmp	r4, r0
 8002d5a:	f000 80d1 	beq.w	8002f00 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002d5e:	3018      	adds	r0, #24
 8002d60:	4284      	cmp	r4, r0
 8002d62:	f000 80cd 	beq.w	8002f00 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002d66:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 8002d6a:	4284      	cmp	r4, r0
 8002d6c:	f000 80c8 	beq.w	8002f00 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002d70:	3018      	adds	r0, #24
 8002d72:	4284      	cmp	r4, r0
 8002d74:	f000 80c4 	beq.w	8002f00 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002d78:	3018      	adds	r0, #24
 8002d7a:	4284      	cmp	r4, r0
 8002d7c:	f000 80c0 	beq.w	8002f00 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002d80:	3018      	adds	r0, #24
 8002d82:	4284      	cmp	r4, r0
 8002d84:	f000 80bc 	beq.w	8002f00 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002d88:	3018      	adds	r0, #24
 8002d8a:	4284      	cmp	r4, r0
 8002d8c:	f000 80b8 	beq.w	8002f00 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002d90:	3018      	adds	r0, #24
 8002d92:	4284      	cmp	r4, r0
 8002d94:	f000 80b4 	beq.w	8002f00 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002d98:	3018      	adds	r0, #24
 8002d9a:	4284      	cmp	r4, r0
 8002d9c:	f000 80b0 	beq.w	8002f00 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002da0:	3018      	adds	r0, #24
 8002da2:	4284      	cmp	r4, r0
 8002da4:	f000 80ac 	beq.w	8002f00 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8002da8:	6820      	ldr	r0, [r4, #0]
 8002daa:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 8002dae:	f040 0020 	orr.w	r0, r0, #32
 8002db2:	6020      	str	r0, [r4, #0]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 8002db4:	6123      	str	r3, [r4, #16]
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002db6:	2301      	movs	r3, #1
 8002db8:	40bb      	lsls	r3, r7
 8002dba:	f8cc 3004 	str.w	r3, [ip, #4]
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002dbe:	9b06      	ldr	r3, [sp, #24]
 8002dc0:	4628      	mov	r0, r5
 8002dc2:	f7ff ff5f 	bl	8002c84 <DMA_MultiBufferSetConfig>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002dc6:	42b4      	cmp	r4, r6
 8002dc8:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8002dca:	f000 80a9 	beq.w	8002f20 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002dce:	4b52      	ldr	r3, [pc, #328]	@ (8002f18 <HAL_DMAEx_MultiBufferStart_IT+0x234>)
 8002dd0:	429c      	cmp	r4, r3
 8002dd2:	f000 80a5 	beq.w	8002f20 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002dd6:	3318      	adds	r3, #24
 8002dd8:	429c      	cmp	r4, r3
 8002dda:	f000 80a1 	beq.w	8002f20 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002dde:	3318      	adds	r3, #24
 8002de0:	429c      	cmp	r4, r3
 8002de2:	f000 809d 	beq.w	8002f20 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002de6:	3318      	adds	r3, #24
 8002de8:	429c      	cmp	r4, r3
 8002dea:	f000 8099 	beq.w	8002f20 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002dee:	3318      	adds	r3, #24
 8002df0:	429c      	cmp	r4, r3
 8002df2:	f000 8095 	beq.w	8002f20 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002df6:	3318      	adds	r3, #24
 8002df8:	429c      	cmp	r4, r3
 8002dfa:	f000 8091 	beq.w	8002f20 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002dfe:	3318      	adds	r3, #24
 8002e00:	429c      	cmp	r4, r3
 8002e02:	f000 808d 	beq.w	8002f20 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e06:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8002e0a:	429c      	cmp	r4, r3
 8002e0c:	f000 8088 	beq.w	8002f20 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e10:	3318      	adds	r3, #24
 8002e12:	429c      	cmp	r4, r3
 8002e14:	f000 8084 	beq.w	8002f20 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e18:	3318      	adds	r3, #24
 8002e1a:	429c      	cmp	r4, r3
 8002e1c:	f000 8080 	beq.w	8002f20 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e20:	3318      	adds	r3, #24
 8002e22:	429c      	cmp	r4, r3
 8002e24:	d07c      	beq.n	8002f20 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e26:	3318      	adds	r3, #24
 8002e28:	429c      	cmp	r4, r3
 8002e2a:	d079      	beq.n	8002f20 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e2c:	3318      	adds	r3, #24
 8002e2e:	429c      	cmp	r4, r3
 8002e30:	d076      	beq.n	8002f20 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e32:	3318      	adds	r3, #24
 8002e34:	429c      	cmp	r4, r3
 8002e36:	d073      	beq.n	8002f20 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e38:	3318      	adds	r3, #24
 8002e3a:	429c      	cmp	r4, r3
 8002e3c:	d070      	beq.n	8002f20 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e3e:	4b37      	ldr	r3, [pc, #220]	@ (8002f1c <HAL_DMAEx_MultiBufferStart_IT+0x238>)
 8002e40:	429c      	cmp	r4, r3
 8002e42:	d06d      	beq.n	8002f20 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e44:	3314      	adds	r3, #20
 8002e46:	429c      	cmp	r4, r3
 8002e48:	d06a      	beq.n	8002f20 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e4a:	3314      	adds	r3, #20
 8002e4c:	429c      	cmp	r4, r3
 8002e4e:	d067      	beq.n	8002f20 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e50:	3314      	adds	r3, #20
 8002e52:	429c      	cmp	r4, r3
 8002e54:	d064      	beq.n	8002f20 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e56:	3314      	adds	r3, #20
 8002e58:	429c      	cmp	r4, r3
 8002e5a:	d061      	beq.n	8002f20 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e5c:	3314      	adds	r3, #20
 8002e5e:	429c      	cmp	r4, r3
 8002e60:	d05e      	beq.n	8002f20 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e62:	3314      	adds	r3, #20
 8002e64:	429c      	cmp	r4, r3
 8002e66:	d05b      	beq.n	8002f20 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e68:	3314      	adds	r3, #20
 8002e6a:	429c      	cmp	r4, r3
 8002e6c:	d058      	beq.n	8002f20 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002e6e:	6823      	ldr	r3, [r4, #0]
 8002e70:	f023 030e 	bic.w	r3, r3, #14
 8002e74:	f043 030a 	orr.w	r3, r3, #10
 8002e78:	6023      	str	r3, [r4, #0]
      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e7a:	2a00      	cmp	r2, #0
 8002e7c:	f040 80d9 	bne.w	8003032 <HAL_DMAEx_MultiBufferStart_IT+0x34e>
 8002e80:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f040 80d5 	bne.w	8003032 <HAL_DMAEx_MultiBufferStart_IT+0x34e>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e88:	4b24      	ldr	r3, [pc, #144]	@ (8002f1c <HAL_DMAEx_MultiBufferStart_IT+0x238>)
 8002e8a:	429c      	cmp	r4, r3
 8002e8c:	f040 80d9 	bne.w	8003042 <HAL_DMAEx_MultiBufferStart_IT+0x35e>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002e90:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	03d2      	lsls	r2, r2, #15
 8002e96:	f100 80f6 	bmi.w	8003086 <HAL_DMAEx_MultiBufferStart_IT+0x3a2>
      if(hdma->DMAmuxRequestGen != 0U)
 8002e9a:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 8002e9c:	b11b      	cbz	r3, 8002ea6 <HAL_DMAEx_MultiBufferStart_IT+0x1c2>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ea4:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8002ea6:	42b4      	cmp	r4, r6
 8002ea8:	f000 80e7 	beq.w	800307a <HAL_DMAEx_MultiBufferStart_IT+0x396>
 8002eac:	4b1a      	ldr	r3, [pc, #104]	@ (8002f18 <HAL_DMAEx_MultiBufferStart_IT+0x234>)
 8002eae:	429c      	cmp	r4, r3
 8002eb0:	f000 80e3 	beq.w	800307a <HAL_DMAEx_MultiBufferStart_IT+0x396>
 8002eb4:	3318      	adds	r3, #24
 8002eb6:	429c      	cmp	r4, r3
 8002eb8:	f000 80df 	beq.w	800307a <HAL_DMAEx_MultiBufferStart_IT+0x396>
 8002ebc:	3318      	adds	r3, #24
 8002ebe:	429c      	cmp	r4, r3
 8002ec0:	f000 80db 	beq.w	800307a <HAL_DMAEx_MultiBufferStart_IT+0x396>
 8002ec4:	3318      	adds	r3, #24
 8002ec6:	429c      	cmp	r4, r3
 8002ec8:	f000 80d7 	beq.w	800307a <HAL_DMAEx_MultiBufferStart_IT+0x396>
 8002ecc:	3318      	adds	r3, #24
 8002ece:	429c      	cmp	r4, r3
 8002ed0:	f000 80d3 	beq.w	800307a <HAL_DMAEx_MultiBufferStart_IT+0x396>
 8002ed4:	3318      	adds	r3, #24
 8002ed6:	429c      	cmp	r4, r3
 8002ed8:	f000 80cf 	beq.w	800307a <HAL_DMAEx_MultiBufferStart_IT+0x396>
 8002edc:	3318      	adds	r3, #24
 8002ede:	429c      	cmp	r4, r3
 8002ee0:	f000 80cb 	beq.w	800307a <HAL_DMAEx_MultiBufferStart_IT+0x396>
 8002ee4:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8002ee8:	429c      	cmp	r4, r3
 8002eea:	f000 80c6 	beq.w	800307a <HAL_DMAEx_MultiBufferStart_IT+0x396>
 8002eee:	3318      	adds	r3, #24
 8002ef0:	429c      	cmp	r4, r3
 8002ef2:	f000 80c2 	beq.w	800307a <HAL_DMAEx_MultiBufferStart_IT+0x396>
 8002ef6:	3318      	adds	r3, #24
 8002ef8:	429c      	cmp	r4, r3
 8002efa:	f000 80be 	beq.w	800307a <HAL_DMAEx_MultiBufferStart_IT+0x396>
 8002efe:	e0bc      	b.n	800307a <HAL_DMAEx_MultiBufferStart_IT+0x396>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8002f00:	6820      	ldr	r0, [r4, #0]
 8002f02:	f440 2080 	orr.w	r0, r0, #262144	@ 0x40000
 8002f06:	6020      	str	r0, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8002f08:	6123      	str	r3, [r4, #16]
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002f0a:	233f      	movs	r3, #63	@ 0x3f
 8002f0c:	40bb      	lsls	r3, r7
 8002f0e:	f8cc 3008 	str.w	r3, [ip, #8]
 8002f12:	e754      	b.n	8002dbe <HAL_DMAEx_MultiBufferStart_IT+0xda>
 8002f14:	40020010 	.word	0x40020010
 8002f18:	40020028 	.word	0x40020028
 8002f1c:	58025408 	.word	0x58025408
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f20:	e9d5 3119 	ldrd	r3, r1, [r5, #100]	@ 0x64
 8002f24:	6059      	str	r1, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8002f26:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 8002f28:	b113      	cbz	r3, 8002f30 <HAL_DMAEx_MultiBufferStart_IT+0x24c>
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f2a:	e9d5 311c 	ldrd	r3, r1, [r5, #112]	@ 0x70
 8002f2e:	6059      	str	r1, [r3, #4]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f30:	42b4      	cmp	r4, r6
 8002f32:	d02e      	beq.n	8002f92 <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002f34:	4b59      	ldr	r3, [pc, #356]	@ (800309c <HAL_DMAEx_MultiBufferStart_IT+0x3b8>)
 8002f36:	429c      	cmp	r4, r3
 8002f38:	d02b      	beq.n	8002f92 <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002f3a:	3318      	adds	r3, #24
 8002f3c:	429c      	cmp	r4, r3
 8002f3e:	d028      	beq.n	8002f92 <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002f40:	3318      	adds	r3, #24
 8002f42:	429c      	cmp	r4, r3
 8002f44:	d025      	beq.n	8002f92 <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002f46:	3318      	adds	r3, #24
 8002f48:	429c      	cmp	r4, r3
 8002f4a:	d022      	beq.n	8002f92 <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002f4c:	3318      	adds	r3, #24
 8002f4e:	429c      	cmp	r4, r3
 8002f50:	d01f      	beq.n	8002f92 <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002f52:	3318      	adds	r3, #24
 8002f54:	429c      	cmp	r4, r3
 8002f56:	d01c      	beq.n	8002f92 <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002f58:	3318      	adds	r3, #24
 8002f5a:	429c      	cmp	r4, r3
 8002f5c:	d019      	beq.n	8002f92 <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002f5e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8002f62:	429c      	cmp	r4, r3
 8002f64:	d015      	beq.n	8002f92 <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002f66:	3318      	adds	r3, #24
 8002f68:	429c      	cmp	r4, r3
 8002f6a:	d012      	beq.n	8002f92 <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002f6c:	3318      	adds	r3, #24
 8002f6e:	429c      	cmp	r4, r3
 8002f70:	d00f      	beq.n	8002f92 <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002f72:	3318      	adds	r3, #24
 8002f74:	429c      	cmp	r4, r3
 8002f76:	d00c      	beq.n	8002f92 <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002f78:	3318      	adds	r3, #24
 8002f7a:	429c      	cmp	r4, r3
 8002f7c:	d009      	beq.n	8002f92 <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002f7e:	3318      	adds	r3, #24
 8002f80:	429c      	cmp	r4, r3
 8002f82:	d006      	beq.n	8002f92 <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002f84:	3318      	adds	r3, #24
 8002f86:	429c      	cmp	r4, r3
 8002f88:	d003      	beq.n	8002f92 <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002f8a:	3318      	adds	r3, #24
 8002f8c:	429c      	cmp	r4, r3
 8002f8e:	f47f af6e 	bne.w	8002e6e <HAL_DMAEx_MultiBufferStart_IT+0x18a>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002f92:	6823      	ldr	r3, [r4, #0]
 8002f94:	f023 031e 	bic.w	r3, r3, #30
 8002f98:	f043 0316 	orr.w	r3, r3, #22
 8002f9c:	6023      	str	r3, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8002f9e:	6963      	ldr	r3, [r4, #20]
 8002fa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fa4:	6163      	str	r3, [r4, #20]
      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fa6:	b90a      	cbnz	r2, 8002fac <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 8002fa8:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8002faa:	b11b      	cbz	r3, 8002fb4 <HAL_DMAEx_MultiBufferStart_IT+0x2d0>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002fac:	6823      	ldr	r3, [r4, #0]
 8002fae:	f043 0308 	orr.w	r3, r3, #8
 8002fb2:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002fb4:	42b4      	cmp	r4, r6
 8002fb6:	f43f af6b 	beq.w	8002e90 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8002fba:	4b38      	ldr	r3, [pc, #224]	@ (800309c <HAL_DMAEx_MultiBufferStart_IT+0x3b8>)
 8002fbc:	429c      	cmp	r4, r3
 8002fbe:	f43f af67 	beq.w	8002e90 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8002fc2:	3318      	adds	r3, #24
 8002fc4:	429c      	cmp	r4, r3
 8002fc6:	f43f af63 	beq.w	8002e90 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8002fca:	3318      	adds	r3, #24
 8002fcc:	429c      	cmp	r4, r3
 8002fce:	f43f af5f 	beq.w	8002e90 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8002fd2:	3318      	adds	r3, #24
 8002fd4:	429c      	cmp	r4, r3
 8002fd6:	f43f af5b 	beq.w	8002e90 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8002fda:	3318      	adds	r3, #24
 8002fdc:	429c      	cmp	r4, r3
 8002fde:	f43f af57 	beq.w	8002e90 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8002fe2:	3318      	adds	r3, #24
 8002fe4:	429c      	cmp	r4, r3
 8002fe6:	f43f af53 	beq.w	8002e90 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8002fea:	3318      	adds	r3, #24
 8002fec:	429c      	cmp	r4, r3
 8002fee:	f43f af4f 	beq.w	8002e90 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8002ff2:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8002ff6:	429c      	cmp	r4, r3
 8002ff8:	f43f af4a 	beq.w	8002e90 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8002ffc:	3318      	adds	r3, #24
 8002ffe:	429c      	cmp	r4, r3
 8003000:	f43f af46 	beq.w	8002e90 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8003004:	3318      	adds	r3, #24
 8003006:	429c      	cmp	r4, r3
 8003008:	f43f af42 	beq.w	8002e90 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 800300c:	3318      	adds	r3, #24
 800300e:	429c      	cmp	r4, r3
 8003010:	f43f af3e 	beq.w	8002e90 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8003014:	3318      	adds	r3, #24
 8003016:	429c      	cmp	r4, r3
 8003018:	f43f af3a 	beq.w	8002e90 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 800301c:	3318      	adds	r3, #24
 800301e:	429c      	cmp	r4, r3
 8003020:	f43f af36 	beq.w	8002e90 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8003024:	3318      	adds	r3, #24
 8003026:	429c      	cmp	r4, r3
 8003028:	f43f af32 	beq.w	8002e90 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 800302c:	3318      	adds	r3, #24
 800302e:	429c      	cmp	r4, r3
 8003030:	e004      	b.n	800303c <HAL_DMAEx_MultiBufferStart_IT+0x358>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003032:	6823      	ldr	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003034:	42b4      	cmp	r4, r6
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003036:	f043 0304 	orr.w	r3, r3, #4
 800303a:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800303c:	f47f af24 	bne.w	8002e88 <HAL_DMAEx_MultiBufferStart_IT+0x1a4>
 8003040:	e726      	b.n	8002e90 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8003042:	4b17      	ldr	r3, [pc, #92]	@ (80030a0 <HAL_DMAEx_MultiBufferStart_IT+0x3bc>)
 8003044:	429c      	cmp	r4, r3
 8003046:	f43f af23 	beq.w	8002e90 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 800304a:	3314      	adds	r3, #20
 800304c:	429c      	cmp	r4, r3
 800304e:	f43f af1f 	beq.w	8002e90 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8003052:	3314      	adds	r3, #20
 8003054:	429c      	cmp	r4, r3
 8003056:	f43f af1b 	beq.w	8002e90 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 800305a:	3314      	adds	r3, #20
 800305c:	429c      	cmp	r4, r3
 800305e:	f43f af17 	beq.w	8002e90 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8003062:	3314      	adds	r3, #20
 8003064:	429c      	cmp	r4, r3
 8003066:	f43f af13 	beq.w	8002e90 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 800306a:	3314      	adds	r3, #20
 800306c:	429c      	cmp	r4, r3
 800306e:	f43f af0f 	beq.w	8002e90 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8003072:	3314      	adds	r3, #20
 8003074:	429c      	cmp	r4, r3
 8003076:	f43f af0b 	beq.w	8002e90 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
    __HAL_DMA_ENABLE(hdma);
 800307a:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800307c:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800307e:	f043 0301 	orr.w	r3, r3, #1
 8003082:	6023      	str	r3, [r4, #0]
}
 8003084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	e704      	b.n	8002e9a <HAL_DMAEx_MultiBufferStart_IT+0x1b6>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003090:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003094:	e62d      	b.n	8002cf2 <HAL_DMAEx_MultiBufferStart_IT+0xe>
  __HAL_LOCK(hdma);
 8003096:	2002      	movs	r0, #2
 8003098:	e7f4      	b.n	8003084 <HAL_DMAEx_MultiBufferStart_IT+0x3a0>
 800309a:	bf00      	nop
 800309c:	40020028 	.word	0x40020028
 80030a0:	5802541c 	.word	0x5802541c

080030a4 <HAL_DMAEx_ChangeMemory>:
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030a4:	6803      	ldr	r3, [r0, #0]
 80030a6:	4814      	ldr	r0, [pc, #80]	@ (80030f8 <HAL_DMAEx_ChangeMemory+0x54>)
 80030a8:	4283      	cmp	r3, r0
 80030aa:	d01e      	beq.n	80030ea <HAL_DMAEx_ChangeMemory+0x46>
 80030ac:	3018      	adds	r0, #24
 80030ae:	4283      	cmp	r3, r0
 80030b0:	d01b      	beq.n	80030ea <HAL_DMAEx_ChangeMemory+0x46>
 80030b2:	3018      	adds	r0, #24
 80030b4:	4283      	cmp	r3, r0
 80030b6:	d018      	beq.n	80030ea <HAL_DMAEx_ChangeMemory+0x46>
 80030b8:	3018      	adds	r0, #24
 80030ba:	4283      	cmp	r3, r0
 80030bc:	d015      	beq.n	80030ea <HAL_DMAEx_ChangeMemory+0x46>
 80030be:	3018      	adds	r0, #24
 80030c0:	4283      	cmp	r3, r0
 80030c2:	d012      	beq.n	80030ea <HAL_DMAEx_ChangeMemory+0x46>
 80030c4:	3018      	adds	r0, #24
 80030c6:	4283      	cmp	r3, r0
 80030c8:	d00f      	beq.n	80030ea <HAL_DMAEx_ChangeMemory+0x46>
 80030ca:	3018      	adds	r0, #24
 80030cc:	4283      	cmp	r3, r0
 80030ce:	d00c      	beq.n	80030ea <HAL_DMAEx_ChangeMemory+0x46>
 80030d0:	3018      	adds	r0, #24
 80030d2:	4283      	cmp	r3, r0
 80030d4:	d009      	beq.n	80030ea <HAL_DMAEx_ChangeMemory+0x46>
 80030d6:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 80030da:	4283      	cmp	r3, r0
 80030dc:	d005      	beq.n	80030ea <HAL_DMAEx_ChangeMemory+0x46>
 80030de:	3018      	adds	r0, #24
 80030e0:	4283      	cmp	r3, r0
 80030e2:	d002      	beq.n	80030ea <HAL_DMAEx_ChangeMemory+0x46>
 80030e4:	3018      	adds	r0, #24
 80030e6:	4283      	cmp	r3, r0
 80030e8:	d0ff      	beq.n	80030ea <HAL_DMAEx_ChangeMemory+0x46>
    if(memory == MEMORY0)
 80030ea:	b912      	cbnz	r2, 80030f2 <HAL_DMAEx_ChangeMemory+0x4e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 80030ec:	60d9      	str	r1, [r3, #12]
}
 80030ee:	2000      	movs	r0, #0
 80030f0:	4770      	bx	lr
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 80030f2:	6119      	str	r1, [r3, #16]
 80030f4:	e7fb      	b.n	80030ee <HAL_DMAEx_ChangeMemory+0x4a>
 80030f6:	bf00      	nop
 80030f8:	40020010 	.word	0x40020010

080030fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8003100:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003102:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 80032c8 <HAL_GPIO_Init+0x1cc>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003106:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800310a:	680a      	ldr	r2, [r1, #0]
 800310c:	fa32 f503 	lsrs.w	r5, r2, r3
 8003110:	d102      	bne.n	8003118 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 8003112:	b003      	add	sp, #12
 8003114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003118:	2501      	movs	r5, #1
 800311a:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00U)
 800311e:	ea18 0202 	ands.w	r2, r8, r2
 8003122:	f000 80bb 	beq.w	800329c <HAL_GPIO_Init+0x1a0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003126:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003128:	2703      	movs	r7, #3
 800312a:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800312e:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003132:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003136:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003138:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800313c:	2f01      	cmp	r7, #1
 800313e:	d834      	bhi.n	80031aa <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8003140:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003142:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003146:	68cf      	ldr	r7, [r1, #12]
 8003148:	fa07 f70e 	lsl.w	r7, r7, lr
 800314c:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8003150:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003152:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003154:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003158:	f3c6 1700 	ubfx	r7, r6, #4, #1
 800315c:	409f      	lsls	r7, r3
 800315e:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8003162:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8003164:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003166:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003168:	ea07 080c 	and.w	r8, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800316c:	688f      	ldr	r7, [r1, #8]
 800316e:	fa07 f70e 	lsl.w	r7, r7, lr
 8003172:	ea47 0708 	orr.w	r7, r7, r8
      GPIOx->PUPDR = temp;
 8003176:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003178:	d119      	bne.n	80031ae <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 800317a:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800317e:	f003 0a07 	and.w	sl, r3, #7
 8003182:	f04f 0b0f 	mov.w	fp, #15
 8003186:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 800318a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 800318e:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003192:	fa0b fb0a 	lsl.w	fp, fp, sl
 8003196:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800319a:	690f      	ldr	r7, [r1, #16]
 800319c:	fa07 f70a 	lsl.w	r7, r7, sl
 80031a0:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3U] = temp;
 80031a4:	f8c8 7020 	str.w	r7, [r8, #32]
 80031a8:	e001      	b.n	80031ae <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031aa:	2d03      	cmp	r5, #3
 80031ac:	d1da      	bne.n	8003164 <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 80031ae:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031b0:	fa05 f50e 	lsl.w	r5, r5, lr
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031b4:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80031b8:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031bc:	ea45 0507 	orr.w	r5, r5, r7
      GPIOx->MODER = temp;
 80031c0:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031c2:	d06b      	beq.n	800329c <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031c4:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
 80031c8:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80031cc:	f003 0c03 	and.w	ip, r3, #3
 80031d0:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031d4:	f045 0502 	orr.w	r5, r5, #2
 80031d8:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80031dc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031e0:	f8c9 50f4 	str.w	r5, [r9, #244]	@ 0xf4
 80031e4:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 80031e8:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80031ec:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031f0:	f005 0502 	and.w	r5, r5, #2
 80031f4:	9501      	str	r5, [sp, #4]
 80031f6:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80031f8:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80031fa:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80031fe:	4d31      	ldr	r5, [pc, #196]	@ (80032c4 <HAL_GPIO_Init+0x1c8>)
 8003200:	42a8      	cmp	r0, r5
 8003202:	d04d      	beq.n	80032a0 <HAL_GPIO_Init+0x1a4>
 8003204:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003208:	42a8      	cmp	r0, r5
 800320a:	d04b      	beq.n	80032a4 <HAL_GPIO_Init+0x1a8>
 800320c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003210:	42a8      	cmp	r0, r5
 8003212:	d049      	beq.n	80032a8 <HAL_GPIO_Init+0x1ac>
 8003214:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003218:	42a8      	cmp	r0, r5
 800321a:	d047      	beq.n	80032ac <HAL_GPIO_Init+0x1b0>
 800321c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003220:	42a8      	cmp	r0, r5
 8003222:	d045      	beq.n	80032b0 <HAL_GPIO_Init+0x1b4>
 8003224:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003228:	42a8      	cmp	r0, r5
 800322a:	d043      	beq.n	80032b4 <HAL_GPIO_Init+0x1b8>
 800322c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003230:	42a8      	cmp	r0, r5
 8003232:	d041      	beq.n	80032b8 <HAL_GPIO_Init+0x1bc>
 8003234:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003238:	42a8      	cmp	r0, r5
 800323a:	d03f      	beq.n	80032bc <HAL_GPIO_Init+0x1c0>
 800323c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003240:	42a8      	cmp	r0, r5
 8003242:	d03d      	beq.n	80032c0 <HAL_GPIO_Init+0x1c4>
 8003244:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003248:	42a8      	cmp	r0, r5
 800324a:	bf14      	ite	ne
 800324c:	250a      	movne	r5, #10
 800324e:	2509      	moveq	r5, #9
 8003250:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003254:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003258:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800325c:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 800325e:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 8003262:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8003264:	bf0c      	ite	eq
 8003266:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8003268:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800326a:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        EXTI->RTSR1 = temp;
 800326e:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8003270:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 8003272:	bf0c      	ite	eq
 8003274:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8003276:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003278:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        EXTI->FTSR1 = temp;
 800327c:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 800327e:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
        temp &= ~(iocurrent);
 8003282:	bf0c      	ite	eq
 8003284:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8003286:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003288:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 800328a:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 800328e:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
        temp &= ~(iocurrent);
 8003292:	bf54      	ite	pl
 8003294:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8003296:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8003298:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
    position++;
 800329c:	3301      	adds	r3, #1
 800329e:	e734      	b.n	800310a <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80032a0:	2500      	movs	r5, #0
 80032a2:	e7d5      	b.n	8003250 <HAL_GPIO_Init+0x154>
 80032a4:	2501      	movs	r5, #1
 80032a6:	e7d3      	b.n	8003250 <HAL_GPIO_Init+0x154>
 80032a8:	2502      	movs	r5, #2
 80032aa:	e7d1      	b.n	8003250 <HAL_GPIO_Init+0x154>
 80032ac:	2503      	movs	r5, #3
 80032ae:	e7cf      	b.n	8003250 <HAL_GPIO_Init+0x154>
 80032b0:	2504      	movs	r5, #4
 80032b2:	e7cd      	b.n	8003250 <HAL_GPIO_Init+0x154>
 80032b4:	2505      	movs	r5, #5
 80032b6:	e7cb      	b.n	8003250 <HAL_GPIO_Init+0x154>
 80032b8:	2506      	movs	r5, #6
 80032ba:	e7c9      	b.n	8003250 <HAL_GPIO_Init+0x154>
 80032bc:	2507      	movs	r5, #7
 80032be:	e7c7      	b.n	8003250 <HAL_GPIO_Init+0x154>
 80032c0:	2508      	movs	r5, #8
 80032c2:	e7c5      	b.n	8003250 <HAL_GPIO_Init+0x154>
 80032c4:	58020000 	.word	0x58020000
 80032c8:	58024400 	.word	0x58024400

080032cc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032cc:	b10a      	cbz	r2, 80032d2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80032ce:	6181      	str	r1, [r0, #24]
  }
}
 80032d0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80032d2:	0409      	lsls	r1, r1, #16
 80032d4:	e7fb      	b.n	80032ce <HAL_GPIO_WritePin+0x2>

080032d6 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80032d6:	6803      	ldr	r3, [r0, #0]
 80032d8:	699a      	ldr	r2, [r3, #24]
 80032da:	0791      	lsls	r1, r2, #30
 80032dc:	d501      	bpl.n	80032e2 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80032de:	2200      	movs	r2, #0
 80032e0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032e2:	699a      	ldr	r2, [r3, #24]
 80032e4:	07d2      	lsls	r2, r2, #31
 80032e6:	d403      	bmi.n	80032f0 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80032e8:	699a      	ldr	r2, [r3, #24]
 80032ea:	f042 0201 	orr.w	r2, r2, #1
 80032ee:	619a      	str	r2, [r3, #24]
  }
}
 80032f0:	4770      	bx	lr
	...

080032f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80032f4:	b530      	push	{r4, r5, lr}
 80032f6:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032f8:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80032fc:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032fe:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8003300:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8003306:	4a05      	ldr	r2, [pc, #20]	@ (800331c <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003308:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 800330a:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800330e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8003312:	ea20 0002 	bic.w	r0, r0, r2
 8003316:	4303      	orrs	r3, r0
 8003318:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800331a:	bd30      	pop	{r4, r5, pc}
 800331c:	03ff63ff 	.word	0x03ff63ff

08003320 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 8003320:	6803      	ldr	r3, [r0, #0]
{
 8003322:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8003326:	699c      	ldr	r4, [r3, #24]
{
 8003328:	4605      	mov	r5, r0
 800332a:	460f      	mov	r7, r1
 800332c:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800332e:	f014 0410 	ands.w	r4, r4, #16
 8003332:	d06f      	beq.n	8003414 <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 8003334:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003336:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8003338:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800333a:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800333c:	682b      	ldr	r3, [r5, #0]
 800333e:	699a      	ldr	r2, [r3, #24]
 8003340:	0690      	lsls	r0, r2, #26
 8003342:	d461      	bmi.n	8003408 <I2C_IsErrorOccurred+0xe8>
 8003344:	f1b8 0f00 	cmp.w	r8, #0
 8003348:	d035      	beq.n	80033b6 <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 800334a:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 800334e:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 8003350:	682e      	ldr	r6, [r5, #0]
 8003352:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003354:	05d9      	lsls	r1, r3, #23
 8003356:	d505      	bpl.n	8003364 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003358:	f44f 7280 	mov.w	r2, #256	@ 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 800335c:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 8003360:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003362:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003364:	055a      	lsls	r2, r3, #21
 8003366:	d505      	bpl.n	8003374 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003368:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800336c:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 8003370:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003372:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003374:	059b      	lsls	r3, r3, #22
 8003376:	d54f      	bpl.n	8003418 <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003378:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800337c:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003380:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 8003382:	4628      	mov	r0, r5
 8003384:	f7ff ffa7 	bl	80032d6 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8003388:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 800338a:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800338c:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8003390:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8003394:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8003398:	f023 0301 	bic.w	r3, r3, #1
 800339c:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 800339e:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 80033a0:	4323      	orrs	r3, r4
 80033a2:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80033a4:	2320      	movs	r3, #32
 80033a6:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033aa:	2300      	movs	r3, #0
 80033ac:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 80033b0:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 80033b4:	e032      	b.n	800341c <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 80033b6:	1c7a      	adds	r2, r7, #1
 80033b8:	d0c1      	beq.n	800333e <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80033ba:	f7fe f8ab 	bl	8001514 <HAL_GetTick>
 80033be:	1b80      	subs	r0, r0, r6
 80033c0:	42b8      	cmp	r0, r7
 80033c2:	d801      	bhi.n	80033c8 <I2C_IsErrorOccurred+0xa8>
 80033c4:	2f00      	cmp	r7, #0
 80033c6:	d1b9      	bne.n	800333c <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80033c8:	682b      	ldr	r3, [r5, #0]
 80033ca:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 80033cc:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80033d0:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 80033d2:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80033d4:	0400      	lsls	r0, r0, #16
 80033d6:	d50a      	bpl.n	80033ee <I2C_IsErrorOccurred+0xce>
 80033d8:	0449      	lsls	r1, r1, #17
 80033da:	d408      	bmi.n	80033ee <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 80033dc:	2a20      	cmp	r2, #32
 80033de:	d006      	beq.n	80033ee <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80033e6:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 80033e8:	f7fe f894 	bl	8001514 <HAL_GetTick>
 80033ec:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033ee:	682b      	ldr	r3, [r5, #0]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	069b      	lsls	r3, r3, #26
 80033f4:	d4a2      	bmi.n	800333c <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80033f6:	f7fe f88d 	bl	8001514 <HAL_GetTick>
 80033fa:	1b80      	subs	r0, r0, r6
 80033fc:	2819      	cmp	r0, #25
 80033fe:	d9f6      	bls.n	80033ee <I2C_IsErrorOccurred+0xce>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003400:	2420      	movs	r4, #32
              status = HAL_ERROR;
 8003402:	f04f 0801 	mov.w	r8, #1
 8003406:	e799      	b.n	800333c <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 8003408:	f1b8 0f00 	cmp.w	r8, #0
 800340c:	d19d      	bne.n	800334a <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800340e:	2220      	movs	r2, #32
 8003410:	61da      	str	r2, [r3, #28]
 8003412:	e79a      	b.n	800334a <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 8003414:	4620      	mov	r0, r4
 8003416:	e79b      	b.n	8003350 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 8003418:	2800      	cmp	r0, #0
 800341a:	d1b2      	bne.n	8003382 <I2C_IsErrorOccurred+0x62>
}
 800341c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003420 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8003420:	b570      	push	{r4, r5, r6, lr}
 8003422:	4604      	mov	r4, r0
 8003424:	460d      	mov	r5, r1
 8003426:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003428:	6823      	ldr	r3, [r4, #0]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	079b      	lsls	r3, r3, #30
 800342e:	d501      	bpl.n	8003434 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8003430:	2000      	movs	r0, #0
 8003432:	e01f      	b.n	8003474 <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003434:	4632      	mov	r2, r6
 8003436:	4629      	mov	r1, r5
 8003438:	4620      	mov	r0, r4
 800343a:	f7ff ff71 	bl	8003320 <I2C_IsErrorOccurred>
 800343e:	b9c0      	cbnz	r0, 8003472 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8003440:	1c6a      	adds	r2, r5, #1
 8003442:	d0f1      	beq.n	8003428 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003444:	f7fe f866 	bl	8001514 <HAL_GetTick>
 8003448:	1b80      	subs	r0, r0, r6
 800344a:	42a8      	cmp	r0, r5
 800344c:	d801      	bhi.n	8003452 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800344e:	2d00      	cmp	r5, #0
 8003450:	d1ea      	bne.n	8003428 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003452:	6823      	ldr	r3, [r4, #0]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	f013 0302 	ands.w	r3, r3, #2
 800345a:	d1e5      	bne.n	8003428 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800345c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 800345e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003462:	f042 0220 	orr.w	r2, r2, #32
 8003466:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003468:	2220      	movs	r2, #32
 800346a:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800346e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 8003472:	2001      	movs	r0, #1
}
 8003474:	bd70      	pop	{r4, r5, r6, pc}

08003476 <I2C_WaitOnFlagUntilTimeout>:
{
 8003476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800347a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800347e:	4604      	mov	r4, r0
 8003480:	460f      	mov	r7, r1
 8003482:	4616      	mov	r6, r2
 8003484:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003486:	6823      	ldr	r3, [r4, #0]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	ea37 0303 	bics.w	r3, r7, r3
 800348e:	bf0c      	ite	eq
 8003490:	2301      	moveq	r3, #1
 8003492:	2300      	movne	r3, #0
 8003494:	42b3      	cmp	r3, r6
 8003496:	d001      	beq.n	800349c <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8003498:	2000      	movs	r0, #0
 800349a:	e025      	b.n	80034e8 <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800349c:	4642      	mov	r2, r8
 800349e:	4629      	mov	r1, r5
 80034a0:	4620      	mov	r0, r4
 80034a2:	f7ff ff3d 	bl	8003320 <I2C_IsErrorOccurred>
 80034a6:	b9f0      	cbnz	r0, 80034e6 <I2C_WaitOnFlagUntilTimeout+0x70>
    if (Timeout != HAL_MAX_DELAY)
 80034a8:	1c6b      	adds	r3, r5, #1
 80034aa:	d0ec      	beq.n	8003486 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ac:	f7fe f832 	bl	8001514 <HAL_GetTick>
 80034b0:	eba0 0008 	sub.w	r0, r0, r8
 80034b4:	42a8      	cmp	r0, r5
 80034b6:	d801      	bhi.n	80034bc <I2C_WaitOnFlagUntilTimeout+0x46>
 80034b8:	2d00      	cmp	r5, #0
 80034ba:	d1e4      	bne.n	8003486 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80034bc:	6823      	ldr	r3, [r4, #0]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	ea37 0303 	bics.w	r3, r7, r3
 80034c4:	bf0c      	ite	eq
 80034c6:	2301      	moveq	r3, #1
 80034c8:	2300      	movne	r3, #0
 80034ca:	42b3      	cmp	r3, r6
 80034cc:	d1db      	bne.n	8003486 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034ce:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80034d0:	f043 0320 	orr.w	r3, r3, #32
 80034d4:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80034d6:	2320      	movs	r3, #32
 80034d8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034dc:	2300      	movs	r3, #0
 80034de:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 80034e2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80034e6:	2001      	movs	r0, #1
}
 80034e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080034ec <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80034ec:	b570      	push	{r4, r5, r6, lr}
 80034ee:	4604      	mov	r4, r0
 80034f0:	460d      	mov	r5, r1
 80034f2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034f4:	6823      	ldr	r3, [r4, #0]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	069b      	lsls	r3, r3, #26
 80034fa:	d501      	bpl.n	8003500 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 80034fc:	2000      	movs	r0, #0
 80034fe:	e01d      	b.n	800353c <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003500:	4632      	mov	r2, r6
 8003502:	4629      	mov	r1, r5
 8003504:	4620      	mov	r0, r4
 8003506:	f7ff ff0b 	bl	8003320 <I2C_IsErrorOccurred>
 800350a:	b9b0      	cbnz	r0, 800353a <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800350c:	f7fe f802 	bl	8001514 <HAL_GetTick>
 8003510:	1b80      	subs	r0, r0, r6
 8003512:	42a8      	cmp	r0, r5
 8003514:	d801      	bhi.n	800351a <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8003516:	2d00      	cmp	r5, #0
 8003518:	d1ec      	bne.n	80034f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800351a:	6823      	ldr	r3, [r4, #0]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	f013 0320 	ands.w	r3, r3, #32
 8003522:	d1e7      	bne.n	80034f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003524:	6c62      	ldr	r2, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8003526:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800352a:	f042 0220 	orr.w	r2, r2, #32
 800352e:	6462      	str	r2, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003530:	2220      	movs	r2, #32
 8003532:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003536:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 800353a:	2001      	movs	r0, #1
}
 800353c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003540 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8003540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003544:	4605      	mov	r5, r0
 8003546:	460e      	mov	r6, r1
 8003548:	4617      	mov	r7, r2
  HAL_StatusTypeDef status = HAL_OK;
 800354a:	2400      	movs	r4, #0
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800354c:	f04f 0810 	mov.w	r8, #16
        I2C_RESET_CR2(hi2c);
 8003550:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 80035e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003554:	682b      	ldr	r3, [r5, #0]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	075b      	lsls	r3, r3, #29
 800355a:	d400      	bmi.n	800355e <I2C_WaitOnRXNEFlagUntilTimeout+0x1e>
 800355c:	b114      	cbz	r4, 8003564 <I2C_WaitOnRXNEFlagUntilTimeout+0x24>
}
 800355e:	4620      	mov	r0, r4
 8003560:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003564:	463a      	mov	r2, r7
 8003566:	4631      	mov	r1, r6
 8003568:	4628      	mov	r0, r5
 800356a:	f7ff fed9 	bl	8003320 <I2C_IsErrorOccurred>
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800356e:	682b      	ldr	r3, [r5, #0]
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003570:	4604      	mov	r4, r0
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003572:	699a      	ldr	r2, [r3, #24]
 8003574:	0690      	lsls	r0, r2, #26
 8003576:	d40c      	bmi.n	8003592 <I2C_WaitOnRXNEFlagUntilTimeout+0x52>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003578:	3c00      	subs	r4, #0
 800357a:	bf18      	it	ne
 800357c:	2401      	movne	r4, #1
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800357e:	f7fd ffc9 	bl	8001514 <HAL_GetTick>
 8003582:	1bc0      	subs	r0, r0, r7
 8003584:	42b0      	cmp	r0, r6
 8003586:	d801      	bhi.n	800358c <I2C_WaitOnRXNEFlagUntilTimeout+0x4c>
 8003588:	2e00      	cmp	r6, #0
 800358a:	d1e3      	bne.n	8003554 <I2C_WaitOnRXNEFlagUntilTimeout+0x14>
 800358c:	b1d4      	cbz	r4, 80035c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
{
 800358e:	2401      	movs	r4, #1
 8003590:	e7e0      	b.n	8003554 <I2C_WaitOnRXNEFlagUntilTimeout+0x14>
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003592:	b99c      	cbnz	r4, 80035bc <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003594:	699a      	ldr	r2, [r3, #24]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003596:	699a      	ldr	r2, [r3, #24]
 8003598:	06d1      	lsls	r1, r2, #27
 800359a:	d511      	bpl.n	80035c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x80>
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800359c:	2204      	movs	r2, #4
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800359e:	2120      	movs	r1, #32
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035a0:	f8c3 801c 	str.w	r8, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80035a4:	646a      	str	r2, [r5, #68]	@ 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035a6:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	ea02 0209 	and.w	r2, r2, r9
 80035ae:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 80035b0:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
        __HAL_UNLOCK(hi2c);
 80035b4:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035b8:	f885 4042 	strb.w	r4, [r5, #66]	@ 0x42
{
 80035bc:	2401      	movs	r4, #1
 80035be:	e7de      	b.n	800357e <I2C_WaitOnRXNEFlagUntilTimeout+0x3e>
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035c0:	646c      	str	r4, [r5, #68]	@ 0x44
 80035c2:	e7dc      	b.n	800357e <I2C_WaitOnRXNEFlagUntilTimeout+0x3e>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80035c4:	682b      	ldr	r3, [r5, #0]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	075a      	lsls	r2, r3, #29
 80035ca:	d4c3      	bmi.n	8003554 <I2C_WaitOnRXNEFlagUntilTimeout+0x14>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035cc:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80035ce:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035d2:	f043 0320 	orr.w	r3, r3, #32
 80035d6:	646b      	str	r3, [r5, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035d8:	2320      	movs	r3, #32
 80035da:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
        status = HAL_ERROR;
 80035de:	e7d6      	b.n	800358e <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
 80035e0:	fe00e800 	.word	0xfe00e800

080035e4 <HAL_I2C_Init>:
{
 80035e4:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80035e6:	4604      	mov	r4, r0
 80035e8:	2800      	cmp	r0, #0
 80035ea:	d04e      	beq.n	800368a <HAL_I2C_Init+0xa6>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035ec:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80035f0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80035f4:	b91b      	cbnz	r3, 80035fe <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80035f6:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 80035fa:	f7fd fd9d 	bl	8001138 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80035fe:	2324      	movs	r3, #36	@ 0x24
 8003600:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8003604:	6823      	ldr	r3, [r4, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	f022 0201 	bic.w	r2, r2, #1
 800360c:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800360e:	6862      	ldr	r2, [r4, #4]
 8003610:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003614:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003616:	689a      	ldr	r2, [r3, #8]
 8003618:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800361c:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800361e:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003622:	2901      	cmp	r1, #1
 8003624:	d106      	bne.n	8003634 <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003626:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800362a:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800362c:	685a      	ldr	r2, [r3, #4]
 800362e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003632:	e007      	b.n	8003644 <HAL_I2C_Init+0x60>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003634:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003638:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800363a:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800363c:	d1f6      	bne.n	800362c <HAL_I2C_Init+0x48>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003644:	605a      	str	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003646:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 800364e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003652:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003654:	68da      	ldr	r2, [r3, #12]
 8003656:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800365a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800365c:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8003660:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003662:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003664:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003668:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800366a:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 800366e:	430a      	orrs	r2, r1
 8003670:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	f042 0201 	orr.w	r2, r2, #1
 8003678:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800367a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800367c:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800367e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003682:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003684:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8003688:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800368a:	2001      	movs	r0, #1
 800368c:	e7fc      	b.n	8003688 <HAL_I2C_Init+0xa4>
	...

08003690 <HAL_I2C_Master_Transmit>:
{
 8003690:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8003694:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003696:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800369a:	4604      	mov	r4, r0
 800369c:	460e      	mov	r6, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800369e:	2b20      	cmp	r3, #32
{
 80036a0:	4690      	mov	r8, r2
 80036a2:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80036a4:	f040 809b 	bne.w	80037de <HAL_I2C_Master_Transmit+0x14e>
    __HAL_LOCK(hi2c);
 80036a8:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	f000 8096 	beq.w	80037de <HAL_I2C_Master_Transmit+0x14e>
 80036b2:	f04f 0a01 	mov.w	sl, #1
 80036b6:	f880 a040 	strb.w	sl, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 80036ba:	f7fd ff2b 	bl	8001514 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036be:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 80036c0:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036c2:	9000      	str	r0, [sp, #0]
 80036c4:	4652      	mov	r2, sl
 80036c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80036ca:	4620      	mov	r0, r4
 80036cc:	f7ff fed3 	bl	8003476 <I2C_WaitOnFlagUntilTimeout>
 80036d0:	b118      	cbz	r0, 80036da <HAL_I2C_Master_Transmit+0x4a>
      return HAL_ERROR;
 80036d2:	2001      	movs	r0, #1
}
 80036d4:	b002      	add	sp, #8
 80036d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036da:	2321      	movs	r3, #33	@ 0x21
    hi2c->pBuffPtr  = pData;
 80036dc:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
    hi2c->XferISR   = NULL;
 80036e0:	6360      	str	r0, [r4, #52]	@ 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036e2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80036e6:	2310      	movs	r3, #16
 80036e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036ec:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 80036ee:	f8a4 902a 	strh.w	r9, [r4, #42]	@ 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036f2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	2bff      	cmp	r3, #255	@ 0xff
 80036f8:	d818      	bhi.n	800372c <HAL_I2C_Master_Transmit+0x9c>
      hi2c->XferSize = hi2c->XferCount;
 80036fa:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      xfermode = I2C_AUTOEND_MODE;
 80036fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8003700:	b292      	uxth	r2, r2
      xfermode = I2C_AUTOEND_MODE;
 8003702:	8522      	strh	r2, [r4, #40]	@ 0x28
    if (hi2c->XferSize > 0U)
 8003704:	b1b2      	cbz	r2, 8003734 <HAL_I2C_Master_Transmit+0xa4>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003706:	46c4      	mov	ip, r8
 8003708:	6821      	ldr	r1, [r4, #0]
      hi2c->XferSize--;
 800370a:	3a01      	subs	r2, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800370c:	f81c 0b01 	ldrb.w	r0, [ip], #1
      hi2c->XferSize--;
 8003710:	b292      	uxth	r2, r2
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003712:	6288      	str	r0, [r1, #40]	@ 0x28
      hi2c->XferCount--;
 8003714:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8003716:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003718:	3201      	adds	r2, #1
      hi2c->XferCount--;
 800371a:	3901      	subs	r1, #1
      hi2c->pBuffPtr++;
 800371c:	f8c4 c024 	str.w	ip, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8003720:	b289      	uxth	r1, r1
 8003722:	8561      	strh	r1, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003724:	492f      	ldr	r1, [pc, #188]	@ (80037e4 <HAL_I2C_Master_Transmit+0x154>)
 8003726:	9100      	str	r1, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003728:	b2d2      	uxtb	r2, r2
 800372a:	e005      	b.n	8003738 <HAL_I2C_Master_Transmit+0xa8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800372c:	22ff      	movs	r2, #255	@ 0xff
      xfermode = I2C_RELOAD_MODE;
 800372e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003732:	e7e6      	b.n	8003702 <HAL_I2C_Master_Transmit+0x72>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003734:	492b      	ldr	r1, [pc, #172]	@ (80037e4 <HAL_I2C_Master_Transmit+0x154>)
 8003736:	9100      	str	r1, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003738:	4631      	mov	r1, r6
 800373a:	4620      	mov	r0, r4
 800373c:	f7ff fdda 	bl	80032f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003740:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003742:	462a      	mov	r2, r5
 8003744:	4639      	mov	r1, r7
 8003746:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8003748:	b29b      	uxth	r3, r3
 800374a:	b9bb      	cbnz	r3, 800377c <HAL_I2C_Master_Transmit+0xec>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800374c:	f7ff fece 	bl	80034ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8003750:	2800      	cmp	r0, #0
 8003752:	d1be      	bne.n	80036d2 <HAL_I2C_Master_Transmit+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003754:	6823      	ldr	r3, [r4, #0]
 8003756:	2120      	movs	r1, #32
 8003758:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8003760:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8003764:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8003768:	f022 0201 	bic.w	r2, r2, #1
 800376c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800376e:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8003772:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003776:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 800377a:	e7ab      	b.n	80036d4 <HAL_I2C_Master_Transmit+0x44>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800377c:	f7ff fe50 	bl	8003420 <I2C_WaitOnTXISFlagUntilTimeout>
 8003780:	2800      	cmp	r0, #0
 8003782:	d1a6      	bne.n	80036d2 <HAL_I2C_Master_Transmit+0x42>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003784:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003786:	6822      	ldr	r2, [r4, #0]
 8003788:	f813 1b01 	ldrb.w	r1, [r3], #1
 800378c:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800378e:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8003790:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8003792:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8003794:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8003796:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8003798:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800379a:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800379c:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800379e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80037a0:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d0cb      	beq.n	8003740 <HAL_I2C_Master_Transmit+0xb0>
 80037a8:	2a00      	cmp	r2, #0
 80037aa:	d1c9      	bne.n	8003740 <HAL_I2C_Master_Transmit+0xb0>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80037ac:	463b      	mov	r3, r7
 80037ae:	2180      	movs	r1, #128	@ 0x80
 80037b0:	4620      	mov	r0, r4
 80037b2:	9500      	str	r5, [sp, #0]
 80037b4:	f7ff fe5f 	bl	8003476 <I2C_WaitOnFlagUntilTimeout>
 80037b8:	2800      	cmp	r0, #0
 80037ba:	d18a      	bne.n	80036d2 <HAL_I2C_Master_Transmit+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037bc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80037be:	b29b      	uxth	r3, r3
 80037c0:	2bff      	cmp	r3, #255	@ 0xff
 80037c2:	d905      	bls.n	80037d0 <HAL_I2C_Master_Transmit+0x140>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80037c4:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037c6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80037ca:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037cc:	9000      	str	r0, [sp, #0]
 80037ce:	e7b3      	b.n	8003738 <HAL_I2C_Master_Transmit+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 80037d0:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 80037d6:	b292      	uxth	r2, r2
 80037d8:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037da:	9000      	str	r0, [sp, #0]
 80037dc:	e7a4      	b.n	8003728 <HAL_I2C_Master_Transmit+0x98>
    __HAL_LOCK(hi2c);
 80037de:	2002      	movs	r0, #2
 80037e0:	e778      	b.n	80036d4 <HAL_I2C_Master_Transmit+0x44>
 80037e2:	bf00      	nop
 80037e4:	80002000 	.word	0x80002000

080037e8 <HAL_I2C_Master_Receive>:
{
 80037e8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80037ec:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80037ee:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 80037f2:	4604      	mov	r4, r0
 80037f4:	460e      	mov	r6, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 80037f6:	2b20      	cmp	r3, #32
{
 80037f8:	4691      	mov	r9, r2
 80037fa:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80037fc:	f040 8087 	bne.w	800390e <HAL_I2C_Master_Receive+0x126>
    __HAL_LOCK(hi2c);
 8003800:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8003804:	2b01      	cmp	r3, #1
 8003806:	f000 8082 	beq.w	800390e <HAL_I2C_Master_Receive+0x126>
 800380a:	f04f 0a01 	mov.w	sl, #1
 800380e:	f880 a040 	strb.w	sl, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8003812:	f7fd fe7f 	bl	8001514 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003816:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8003818:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800381a:	9000      	str	r0, [sp, #0]
 800381c:	4652      	mov	r2, sl
 800381e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003822:	4620      	mov	r0, r4
 8003824:	f7ff fe27 	bl	8003476 <I2C_WaitOnFlagUntilTimeout>
 8003828:	b118      	cbz	r0, 8003832 <HAL_I2C_Master_Receive+0x4a>
      return HAL_ERROR;
 800382a:	2001      	movs	r0, #1
}
 800382c:	b002      	add	sp, #8
 800382e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003832:	2322      	movs	r3, #34	@ 0x22
    hi2c->pBuffPtr  = pData;
 8003834:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    hi2c->XferISR   = NULL;
 8003838:	6360      	str	r0, [r4, #52]	@ 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800383a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800383e:	2310      	movs	r3, #16
 8003840:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003844:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 8003846:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800384a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800384c:	b29b      	uxth	r3, r3
 800384e:	2bff      	cmp	r3, #255	@ 0xff
 8003850:	4b30      	ldr	r3, [pc, #192]	@ (8003914 <HAL_I2C_Master_Receive+0x12c>)
 8003852:	d926      	bls.n	80038a2 <HAL_I2C_Master_Receive+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003854:	22ff      	movs	r2, #255	@ 0xff
 8003856:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003858:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800385a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800385e:	4631      	mov	r1, r6
 8003860:	4620      	mov	r0, r4
 8003862:	f7ff fd47 	bl	80032f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003866:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003868:	462a      	mov	r2, r5
 800386a:	4639      	mov	r1, r7
 800386c:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800386e:	b29b      	uxth	r3, r3
 8003870:	b9fb      	cbnz	r3, 80038b2 <HAL_I2C_Master_Receive+0xca>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003872:	f7ff fe3b 	bl	80034ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8003876:	2800      	cmp	r0, #0
 8003878:	d1d7      	bne.n	800382a <HAL_I2C_Master_Receive+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800387a:	6823      	ldr	r3, [r4, #0]
 800387c:	2120      	movs	r1, #32
 800387e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8003886:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 800388a:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 800388e:	f022 0201 	bic.w	r2, r2, #1
 8003892:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003894:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8003898:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800389c:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 80038a0:	e7c4      	b.n	800382c <HAL_I2C_Master_Receive+0x44>
      hi2c->XferSize = hi2c->XferCount;
 80038a2:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80038a4:	b292      	uxth	r2, r2
 80038a6:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038a8:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	e7d5      	b.n	800385e <HAL_I2C_Master_Receive+0x76>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038b2:	f7ff fe45 	bl	8003540 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038b6:	2800      	cmp	r0, #0
 80038b8:	d1b7      	bne.n	800382a <HAL_I2C_Master_Receive+0x42>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80038ba:	6823      	ldr	r3, [r4, #0]
 80038bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80038be:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80038c0:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80038c2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 80038c4:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 80038c6:	3301      	adds	r3, #1
      hi2c->XferSize--;
 80038c8:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 80038ca:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80038cc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80038ce:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80038d0:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80038d2:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038d8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80038da:	b29b      	uxth	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d0c2      	beq.n	8003866 <HAL_I2C_Master_Receive+0x7e>
 80038e0:	2a00      	cmp	r2, #0
 80038e2:	d1c0      	bne.n	8003866 <HAL_I2C_Master_Receive+0x7e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038e4:	463b      	mov	r3, r7
 80038e6:	2180      	movs	r1, #128	@ 0x80
 80038e8:	4620      	mov	r0, r4
 80038ea:	9500      	str	r5, [sp, #0]
 80038ec:	f7ff fdc3 	bl	8003476 <I2C_WaitOnFlagUntilTimeout>
 80038f0:	2800      	cmp	r0, #0
 80038f2:	d19a      	bne.n	800382a <HAL_I2C_Master_Receive+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038f4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	2bff      	cmp	r3, #255	@ 0xff
 80038fa:	d903      	bls.n	8003904 <HAL_I2C_Master_Receive+0x11c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038fc:	22ff      	movs	r2, #255	@ 0xff
 80038fe:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003900:	9000      	str	r0, [sp, #0]
 8003902:	e7aa      	b.n	800385a <HAL_I2C_Master_Receive+0x72>
          hi2c->XferSize = hi2c->XferCount;
 8003904:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003906:	b292      	uxth	r2, r2
 8003908:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800390a:	9000      	str	r0, [sp, #0]
 800390c:	e7cd      	b.n	80038aa <HAL_I2C_Master_Receive+0xc2>
    __HAL_LOCK(hi2c);
 800390e:	2002      	movs	r0, #2
 8003910:	e78c      	b.n	800382c <HAL_I2C_Master_Receive+0x44>
 8003912:	bf00      	nop
 8003914:	80002400 	.word	0x80002400

08003918 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003918:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800391a:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 800391e:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003920:	2a20      	cmp	r2, #32
 8003922:	b2d4      	uxtb	r4, r2
 8003924:	d11c      	bne.n	8003960 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003926:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800392a:	2a01      	cmp	r2, #1
 800392c:	d018      	beq.n	8003960 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800392e:	2224      	movs	r2, #36	@ 0x24
 8003930:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003934:	6802      	ldr	r2, [r0, #0]
 8003936:	6810      	ldr	r0, [r2, #0]
 8003938:	f020 0001 	bic.w	r0, r0, #1
 800393c:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800393e:	6810      	ldr	r0, [r2, #0]
 8003940:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8003944:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003946:	6810      	ldr	r0, [r2, #0]
 8003948:	4301      	orrs	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800394a:	2000      	movs	r0, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 800394c:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800394e:	6811      	ldr	r1, [r2, #0]
 8003950:	f041 0101 	orr.w	r1, r1, #1
 8003954:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003956:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800395a:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800395e:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 8003960:	2002      	movs	r0, #2
 8003962:	e7fc      	b.n	800395e <HAL_I2CEx_ConfigAnalogFilter+0x46>

08003964 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003964:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003966:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 800396a:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800396c:	2a20      	cmp	r2, #32
 800396e:	b2d4      	uxtb	r4, r2
 8003970:	d11b      	bne.n	80039aa <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003972:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8003976:	2a01      	cmp	r2, #1
 8003978:	d017      	beq.n	80039aa <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800397a:	2224      	movs	r2, #36	@ 0x24
 800397c:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003980:	6802      	ldr	r2, [r0, #0]
 8003982:	6810      	ldr	r0, [r2, #0]
 8003984:	f020 0001 	bic.w	r0, r0, #1
 8003988:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800398a:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800398c:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003990:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003994:	2000      	movs	r0, #0
    hi2c->Instance->CR1 = tmpreg;
 8003996:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003998:	6811      	ldr	r1, [r2, #0]
 800399a:	f041 0101 	orr.w	r1, r1, #1
 800399e:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80039a0:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80039a4:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 80039a8:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 80039aa:	2002      	movs	r0, #2
 80039ac:	e7fc      	b.n	80039a8 <HAL_I2CEx_ConfigDigitalFilter+0x44>
	...

080039b0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80039b0:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80039b2:	4c10      	ldr	r4, [pc, #64]	@ (80039f4 <HAL_PWREx_ConfigSupply+0x44>)
 80039b4:	68e3      	ldr	r3, [r4, #12]
 80039b6:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80039ba:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80039bc:	d105      	bne.n	80039ca <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80039be:	f003 0307 	and.w	r3, r3, #7
 80039c2:	1a18      	subs	r0, r3, r0
 80039c4:	bf18      	it	ne
 80039c6:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 80039c8:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80039ca:	f023 0307 	bic.w	r3, r3, #7
 80039ce:	4318      	orrs	r0, r3
 80039d0:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 80039d2:	f7fd fd9f 	bl	8001514 <HAL_GetTick>
 80039d6:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80039d8:	6863      	ldr	r3, [r4, #4]
 80039da:	049b      	lsls	r3, r3, #18
 80039dc:	d501      	bpl.n	80039e2 <HAL_PWREx_ConfigSupply+0x32>
      return HAL_OK;
 80039de:	2000      	movs	r0, #0
 80039e0:	e7f2      	b.n	80039c8 <HAL_PWREx_ConfigSupply+0x18>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80039e2:	f7fd fd97 	bl	8001514 <HAL_GetTick>
 80039e6:	1b40      	subs	r0, r0, r5
 80039e8:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80039ec:	d9f4      	bls.n	80039d8 <HAL_PWREx_ConfigSupply+0x28>
      return HAL_ERROR;
 80039ee:	2001      	movs	r0, #1
 80039f0:	e7ea      	b.n	80039c8 <HAL_PWREx_ConfigSupply+0x18>
 80039f2:	bf00      	nop
 80039f4:	58024800 	.word	0x58024800

080039f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039fa:	4604      	mov	r4, r0
 80039fc:	2800      	cmp	r0, #0
 80039fe:	d074      	beq.n	8003aea <HAL_RCC_OscConfig+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a00:	6803      	ldr	r3, [r0, #0]
 8003a02:	07d8      	lsls	r0, r3, #31
 8003a04:	d45e      	bmi.n	8003ac4 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a06:	6823      	ldr	r3, [r4, #0]
 8003a08:	0799      	lsls	r1, r3, #30
 8003a0a:	f100 80ad 	bmi.w	8003b68 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003a0e:	6823      	ldr	r3, [r4, #0]
 8003a10:	06da      	lsls	r2, r3, #27
 8003a12:	d527      	bpl.n	8003a64 <HAL_RCC_OscConfig+0x6c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a14:	4a9c      	ldr	r2, [pc, #624]	@ (8003c88 <HAL_RCC_OscConfig+0x290>)
 8003a16:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a18:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a1a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003a1e:	2b08      	cmp	r3, #8
 8003a20:	d007      	beq.n	8003a32 <HAL_RCC_OscConfig+0x3a>
 8003a22:	2b18      	cmp	r3, #24
 8003a24:	f040 8103 	bne.w	8003c2e <HAL_RCC_OscConfig+0x236>
 8003a28:	f001 0303 	and.w	r3, r1, #3
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	f040 80fe 	bne.w	8003c2e <HAL_RCC_OscConfig+0x236>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a32:	6813      	ldr	r3, [r2, #0]
 8003a34:	05db      	lsls	r3, r3, #23
 8003a36:	d502      	bpl.n	8003a3e <HAL_RCC_OscConfig+0x46>
 8003a38:	69e3      	ldr	r3, [r4, #28]
 8003a3a:	2b80      	cmp	r3, #128	@ 0x80
 8003a3c:	d155      	bne.n	8003aea <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a3e:	f7fd fd81 	bl	8001544 <HAL_GetREVID>
 8003a42:	f241 0303 	movw	r3, #4099	@ 0x1003
 8003a46:	6a21      	ldr	r1, [r4, #32]
 8003a48:	4298      	cmp	r0, r3
 8003a4a:	4b8f      	ldr	r3, [pc, #572]	@ (8003c88 <HAL_RCC_OscConfig+0x290>)
 8003a4c:	f200 80e8 	bhi.w	8003c20 <HAL_RCC_OscConfig+0x228>
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	2920      	cmp	r1, #32
 8003a54:	f022 42f8 	bic.w	r2, r2, #2080374784	@ 0x7c000000
 8003a58:	bf0c      	ite	eq
 8003a5a:	f042 4280 	orreq.w	r2, r2, #1073741824	@ 0x40000000
 8003a5e:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 8003a62:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a64:	6823      	ldr	r3, [r4, #0]
 8003a66:	0719      	lsls	r1, r3, #28
 8003a68:	f100 8123 	bmi.w	8003cb2 <HAL_RCC_OscConfig+0x2ba>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a6c:	6823      	ldr	r3, [r4, #0]
 8003a6e:	069a      	lsls	r2, r3, #26
 8003a70:	f100 8144 	bmi.w	8003cfc <HAL_RCC_OscConfig+0x304>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a74:	6823      	ldr	r3, [r4, #0]
 8003a76:	075d      	lsls	r5, r3, #29
 8003a78:	d51e      	bpl.n	8003ab8 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003a7a:	4d84      	ldr	r5, [pc, #528]	@ (8003c8c <HAL_RCC_OscConfig+0x294>)
 8003a7c:	682b      	ldr	r3, [r5, #0]
 8003a7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a82:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a84:	f7fd fd46 	bl	8001514 <HAL_GetTick>
 8003a88:	4606      	mov	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a8a:	682b      	ldr	r3, [r5, #0]
 8003a8c:	05da      	lsls	r2, r3, #23
 8003a8e:	f140 815a 	bpl.w	8003d46 <HAL_RCC_OscConfig+0x34e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a92:	68a3      	ldr	r3, [r4, #8]
 8003a94:	4d7c      	ldr	r5, [pc, #496]	@ (8003c88 <HAL_RCC_OscConfig+0x290>)
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	f040 815c 	bne.w	8003d54 <HAL_RCC_OscConfig+0x35c>
 8003a9c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003a9e:	f043 0301 	orr.w	r3, r3, #1
 8003aa2:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aa4:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8003aa8:	f7fd fd34 	bl	8001514 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003aac:	4e76      	ldr	r6, [pc, #472]	@ (8003c88 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 8003aae:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ab0:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8003ab2:	079b      	lsls	r3, r3, #30
 8003ab4:	f140 8174 	bpl.w	8003da0 <HAL_RCC_OscConfig+0x3a8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ab8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003aba:	2900      	cmp	r1, #0
 8003abc:	f040 8177 	bne.w	8003dae <HAL_RCC_OscConfig+0x3b6>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 8003ac0:	2000      	movs	r0, #0
 8003ac2:	e02b      	b.n	8003b1c <HAL_RCC_OscConfig+0x124>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ac4:	4a70      	ldr	r2, [pc, #448]	@ (8003c88 <HAL_RCC_OscConfig+0x290>)
 8003ac6:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ac8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003aca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003ace:	2b10      	cmp	r3, #16
 8003ad0:	d005      	beq.n	8003ade <HAL_RCC_OscConfig+0xe6>
 8003ad2:	2b18      	cmp	r3, #24
 8003ad4:	d10b      	bne.n	8003aee <HAL_RCC_OscConfig+0xf6>
 8003ad6:	f001 0303 	and.w	r3, r1, #3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d107      	bne.n	8003aee <HAL_RCC_OscConfig+0xf6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ade:	6813      	ldr	r3, [r2, #0]
 8003ae0:	039a      	lsls	r2, r3, #14
 8003ae2:	d590      	bpl.n	8003a06 <HAL_RCC_OscConfig+0xe>
 8003ae4:	6863      	ldr	r3, [r4, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d18d      	bne.n	8003a06 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8003aea:	2001      	movs	r0, #1
 8003aec:	e016      	b.n	8003b1c <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aee:	6863      	ldr	r3, [r4, #4]
 8003af0:	4d65      	ldr	r5, [pc, #404]	@ (8003c88 <HAL_RCC_OscConfig+0x290>)
 8003af2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003af6:	d112      	bne.n	8003b1e <HAL_RCC_OscConfig+0x126>
 8003af8:	682b      	ldr	r3, [r5, #0]
 8003afa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003afe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003b00:	f7fd fd08 	bl	8001514 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b04:	4e60      	ldr	r6, [pc, #384]	@ (8003c88 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 8003b06:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b08:	6833      	ldr	r3, [r6, #0]
 8003b0a:	039b      	lsls	r3, r3, #14
 8003b0c:	f53f af7b 	bmi.w	8003a06 <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b10:	f7fd fd00 	bl	8001514 <HAL_GetTick>
 8003b14:	1b40      	subs	r0, r0, r5
 8003b16:	2864      	cmp	r0, #100	@ 0x64
 8003b18:	d9f6      	bls.n	8003b08 <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 8003b1a:	2003      	movs	r0, #3
}
 8003b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b1e:	b9a3      	cbnz	r3, 8003b4a <HAL_RCC_OscConfig+0x152>
 8003b20:	682b      	ldr	r3, [r5, #0]
 8003b22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b26:	602b      	str	r3, [r5, #0]
 8003b28:	682b      	ldr	r3, [r5, #0]
 8003b2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b2e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003b30:	f7fd fcf0 	bl	8001514 <HAL_GetTick>
 8003b34:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b36:	682b      	ldr	r3, [r5, #0]
 8003b38:	039f      	lsls	r7, r3, #14
 8003b3a:	f57f af64 	bpl.w	8003a06 <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b3e:	f7fd fce9 	bl	8001514 <HAL_GetTick>
 8003b42:	1b80      	subs	r0, r0, r6
 8003b44:	2864      	cmp	r0, #100	@ 0x64
 8003b46:	d9f6      	bls.n	8003b36 <HAL_RCC_OscConfig+0x13e>
 8003b48:	e7e7      	b.n	8003b1a <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b4a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b4e:	682b      	ldr	r3, [r5, #0]
 8003b50:	d103      	bne.n	8003b5a <HAL_RCC_OscConfig+0x162>
 8003b52:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b56:	602b      	str	r3, [r5, #0]
 8003b58:	e7ce      	b.n	8003af8 <HAL_RCC_OscConfig+0x100>
 8003b5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b5e:	602b      	str	r3, [r5, #0]
 8003b60:	682b      	ldr	r3, [r5, #0]
 8003b62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b66:	e7ca      	b.n	8003afe <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b68:	4947      	ldr	r1, [pc, #284]	@ (8003c88 <HAL_RCC_OscConfig+0x290>)
 8003b6a:	68e2      	ldr	r2, [r4, #12]
 8003b6c:	690b      	ldr	r3, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b6e:	6a88      	ldr	r0, [r1, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003b70:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 8003b74:	d003      	beq.n	8003b7e <HAL_RCC_OscConfig+0x186>
 8003b76:	2b18      	cmp	r3, #24
 8003b78:	d12a      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x1d8>
 8003b7a:	0780      	lsls	r0, r0, #30
 8003b7c:	d128      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x1d8>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b7e:	680b      	ldr	r3, [r1, #0]
 8003b80:	075b      	lsls	r3, r3, #29
 8003b82:	d501      	bpl.n	8003b88 <HAL_RCC_OscConfig+0x190>
 8003b84:	2a00      	cmp	r2, #0
 8003b86:	d0b0      	beq.n	8003aea <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b88:	4d3f      	ldr	r5, [pc, #252]	@ (8003c88 <HAL_RCC_OscConfig+0x290>)
 8003b8a:	682b      	ldr	r3, [r5, #0]
 8003b8c:	f023 0319 	bic.w	r3, r3, #25
 8003b90:	4313      	orrs	r3, r2
 8003b92:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003b94:	f7fd fcbe 	bl	8001514 <HAL_GetTick>
 8003b98:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b9a:	682b      	ldr	r3, [r5, #0]
 8003b9c:	075f      	lsls	r7, r3, #29
 8003b9e:	d511      	bpl.n	8003bc4 <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ba0:	f7fd fcd0 	bl	8001544 <HAL_GetREVID>
 8003ba4:	f241 0303 	movw	r3, #4099	@ 0x1003
 8003ba8:	6922      	ldr	r2, [r4, #16]
 8003baa:	4298      	cmp	r0, r3
 8003bac:	686b      	ldr	r3, [r5, #4]
 8003bae:	d822      	bhi.n	8003bf6 <HAL_RCC_OscConfig+0x1fe>
 8003bb0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003bb4:	2a40      	cmp	r2, #64	@ 0x40
 8003bb6:	bf0c      	ite	eq
 8003bb8:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 8003bbc:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8003bc0:	606b      	str	r3, [r5, #4]
 8003bc2:	e724      	b.n	8003a0e <HAL_RCC_OscConfig+0x16>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bc4:	f7fd fca6 	bl	8001514 <HAL_GetTick>
 8003bc8:	1b80      	subs	r0, r0, r6
 8003bca:	2802      	cmp	r0, #2
 8003bcc:	d9e5      	bls.n	8003b9a <HAL_RCC_OscConfig+0x1a2>
 8003bce:	e7a4      	b.n	8003b1a <HAL_RCC_OscConfig+0x122>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003bd0:	4d2d      	ldr	r5, [pc, #180]	@ (8003c88 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003bd2:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003bd4:	b1a2      	cbz	r2, 8003c00 <HAL_RCC_OscConfig+0x208>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003bd6:	f023 0319 	bic.w	r3, r3, #25
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003bde:	f7fd fc99 	bl	8001514 <HAL_GetTick>
 8003be2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003be4:	682b      	ldr	r3, [r5, #0]
 8003be6:	0758      	lsls	r0, r3, #29
 8003be8:	d4da      	bmi.n	8003ba0 <HAL_RCC_OscConfig+0x1a8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bea:	f7fd fc93 	bl	8001514 <HAL_GetTick>
 8003bee:	1b80      	subs	r0, r0, r6
 8003bf0:	2802      	cmp	r0, #2
 8003bf2:	d9f7      	bls.n	8003be4 <HAL_RCC_OscConfig+0x1ec>
 8003bf4:	e791      	b.n	8003b1a <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bf6:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003bfa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003bfe:	e7df      	b.n	8003bc0 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_DISABLE();
 8003c00:	f023 0301 	bic.w	r3, r3, #1
 8003c04:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003c06:	f7fd fc85 	bl	8001514 <HAL_GetTick>
 8003c0a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c0c:	682b      	ldr	r3, [r5, #0]
 8003c0e:	0759      	lsls	r1, r3, #29
 8003c10:	f57f aefd 	bpl.w	8003a0e <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c14:	f7fd fc7e 	bl	8001514 <HAL_GetTick>
 8003c18:	1b80      	subs	r0, r0, r6
 8003c1a:	2802      	cmp	r0, #2
 8003c1c:	d9f6      	bls.n	8003c0c <HAL_RCC_OscConfig+0x214>
 8003c1e:	e77c      	b.n	8003b1a <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c20:	68da      	ldr	r2, [r3, #12]
 8003c22:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
 8003c26:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003c2a:	60da      	str	r2, [r3, #12]
 8003c2c:	e71a      	b.n	8003a64 <HAL_RCC_OscConfig+0x6c>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003c2e:	69e3      	ldr	r3, [r4, #28]
 8003c30:	4d15      	ldr	r5, [pc, #84]	@ (8003c88 <HAL_RCC_OscConfig+0x290>)
 8003c32:	b36b      	cbz	r3, 8003c90 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_CSI_ENABLE();
 8003c34:	682b      	ldr	r3, [r5, #0]
 8003c36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c3a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003c3c:	f7fd fc6a 	bl	8001514 <HAL_GetTick>
 8003c40:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c42:	682b      	ldr	r3, [r5, #0]
 8003c44:	05df      	lsls	r7, r3, #23
 8003c46:	d511      	bpl.n	8003c6c <HAL_RCC_OscConfig+0x274>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c48:	f7fd fc7c 	bl	8001544 <HAL_GetREVID>
 8003c4c:	f241 0303 	movw	r3, #4099	@ 0x1003
 8003c50:	6a22      	ldr	r2, [r4, #32]
 8003c52:	4298      	cmp	r0, r3
 8003c54:	d810      	bhi.n	8003c78 <HAL_RCC_OscConfig+0x280>
 8003c56:	686b      	ldr	r3, [r5, #4]
 8003c58:	2a20      	cmp	r2, #32
 8003c5a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003c5e:	bf0c      	ite	eq
 8003c60:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 8003c64:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8003c68:	606b      	str	r3, [r5, #4]
 8003c6a:	e6fb      	b.n	8003a64 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003c6c:	f7fd fc52 	bl	8001514 <HAL_GetTick>
 8003c70:	1b80      	subs	r0, r0, r6
 8003c72:	2802      	cmp	r0, #2
 8003c74:	d9e5      	bls.n	8003c42 <HAL_RCC_OscConfig+0x24a>
 8003c76:	e750      	b.n	8003b1a <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c78:	68eb      	ldr	r3, [r5, #12]
 8003c7a:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8003c7e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003c82:	60eb      	str	r3, [r5, #12]
 8003c84:	e6ee      	b.n	8003a64 <HAL_RCC_OscConfig+0x6c>
 8003c86:	bf00      	nop
 8003c88:	58024400 	.word	0x58024400
 8003c8c:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 8003c90:	682b      	ldr	r3, [r5, #0]
 8003c92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c96:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003c98:	f7fd fc3c 	bl	8001514 <HAL_GetTick>
 8003c9c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c9e:	682b      	ldr	r3, [r5, #0]
 8003ca0:	05d8      	lsls	r0, r3, #23
 8003ca2:	f57f aedf 	bpl.w	8003a64 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003ca6:	f7fd fc35 	bl	8001514 <HAL_GetTick>
 8003caa:	1b80      	subs	r0, r0, r6
 8003cac:	2802      	cmp	r0, #2
 8003cae:	d9f6      	bls.n	8003c9e <HAL_RCC_OscConfig+0x2a6>
 8003cb0:	e733      	b.n	8003b1a <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003cb2:	6963      	ldr	r3, [r4, #20]
 8003cb4:	4da5      	ldr	r5, [pc, #660]	@ (8003f4c <HAL_RCC_OscConfig+0x554>)
 8003cb6:	b183      	cbz	r3, 8003cda <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_LSI_ENABLE();
 8003cb8:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8003cba:	f043 0301 	orr.w	r3, r3, #1
 8003cbe:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8003cc0:	f7fd fc28 	bl	8001514 <HAL_GetTick>
 8003cc4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003cc6:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8003cc8:	079b      	lsls	r3, r3, #30
 8003cca:	f53f aecf 	bmi.w	8003a6c <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cce:	f7fd fc21 	bl	8001514 <HAL_GetTick>
 8003cd2:	1b80      	subs	r0, r0, r6
 8003cd4:	2802      	cmp	r0, #2
 8003cd6:	d9f6      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x2ce>
 8003cd8:	e71f      	b.n	8003b1a <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 8003cda:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8003cdc:	f023 0301 	bic.w	r3, r3, #1
 8003ce0:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8003ce2:	f7fd fc17 	bl	8001514 <HAL_GetTick>
 8003ce6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003ce8:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8003cea:	079f      	lsls	r7, r3, #30
 8003cec:	f57f aebe 	bpl.w	8003a6c <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cf0:	f7fd fc10 	bl	8001514 <HAL_GetTick>
 8003cf4:	1b80      	subs	r0, r0, r6
 8003cf6:	2802      	cmp	r0, #2
 8003cf8:	d9f6      	bls.n	8003ce8 <HAL_RCC_OscConfig+0x2f0>
 8003cfa:	e70e      	b.n	8003b1a <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003cfc:	69a3      	ldr	r3, [r4, #24]
 8003cfe:	4d93      	ldr	r5, [pc, #588]	@ (8003f4c <HAL_RCC_OscConfig+0x554>)
 8003d00:	b183      	cbz	r3, 8003d24 <HAL_RCC_OscConfig+0x32c>
      __HAL_RCC_HSI48_ENABLE();
 8003d02:	682b      	ldr	r3, [r5, #0]
 8003d04:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003d08:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003d0a:	f7fd fc03 	bl	8001514 <HAL_GetTick>
 8003d0e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d10:	682b      	ldr	r3, [r5, #0]
 8003d12:	0498      	lsls	r0, r3, #18
 8003d14:	f53f aeae 	bmi.w	8003a74 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d18:	f7fd fbfc 	bl	8001514 <HAL_GetTick>
 8003d1c:	1b80      	subs	r0, r0, r6
 8003d1e:	2802      	cmp	r0, #2
 8003d20:	d9f6      	bls.n	8003d10 <HAL_RCC_OscConfig+0x318>
 8003d22:	e6fa      	b.n	8003b1a <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 8003d24:	682b      	ldr	r3, [r5, #0]
 8003d26:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d2a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003d2c:	f7fd fbf2 	bl	8001514 <HAL_GetTick>
 8003d30:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d32:	682b      	ldr	r3, [r5, #0]
 8003d34:	0499      	lsls	r1, r3, #18
 8003d36:	f57f ae9d 	bpl.w	8003a74 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d3a:	f7fd fbeb 	bl	8001514 <HAL_GetTick>
 8003d3e:	1b80      	subs	r0, r0, r6
 8003d40:	2802      	cmp	r0, #2
 8003d42:	d9f6      	bls.n	8003d32 <HAL_RCC_OscConfig+0x33a>
 8003d44:	e6e9      	b.n	8003b1a <HAL_RCC_OscConfig+0x122>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d46:	f7fd fbe5 	bl	8001514 <HAL_GetTick>
 8003d4a:	1b80      	subs	r0, r0, r6
 8003d4c:	2864      	cmp	r0, #100	@ 0x64
 8003d4e:	f67f ae9c 	bls.w	8003a8a <HAL_RCC_OscConfig+0x92>
 8003d52:	e6e2      	b.n	8003b1a <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d54:	b9b3      	cbnz	r3, 8003d84 <HAL_RCC_OscConfig+0x38c>
 8003d56:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d58:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d5c:	f023 0301 	bic.w	r3, r3, #1
 8003d60:	672b      	str	r3, [r5, #112]	@ 0x70
 8003d62:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003d64:	f023 0304 	bic.w	r3, r3, #4
 8003d68:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8003d6a:	f7fd fbd3 	bl	8001514 <HAL_GetTick>
 8003d6e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d70:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003d72:	0798      	lsls	r0, r3, #30
 8003d74:	f57f aea0 	bpl.w	8003ab8 <HAL_RCC_OscConfig+0xc0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d78:	f7fd fbcc 	bl	8001514 <HAL_GetTick>
 8003d7c:	1b80      	subs	r0, r0, r6
 8003d7e:	42b8      	cmp	r0, r7
 8003d80:	d9f6      	bls.n	8003d70 <HAL_RCC_OscConfig+0x378>
 8003d82:	e6ca      	b.n	8003b1a <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d84:	2b05      	cmp	r3, #5
 8003d86:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003d88:	d103      	bne.n	8003d92 <HAL_RCC_OscConfig+0x39a>
 8003d8a:	f043 0304 	orr.w	r3, r3, #4
 8003d8e:	672b      	str	r3, [r5, #112]	@ 0x70
 8003d90:	e684      	b.n	8003a9c <HAL_RCC_OscConfig+0xa4>
 8003d92:	f023 0301 	bic.w	r3, r3, #1
 8003d96:	672b      	str	r3, [r5, #112]	@ 0x70
 8003d98:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003d9a:	f023 0304 	bic.w	r3, r3, #4
 8003d9e:	e680      	b.n	8003aa2 <HAL_RCC_OscConfig+0xaa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003da0:	f7fd fbb8 	bl	8001514 <HAL_GetTick>
 8003da4:	1b40      	subs	r0, r0, r5
 8003da6:	42b8      	cmp	r0, r7
 8003da8:	f67f ae82 	bls.w	8003ab0 <HAL_RCC_OscConfig+0xb8>
 8003dac:	e6b5      	b.n	8003b1a <HAL_RCC_OscConfig+0x122>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003dae:	4d67      	ldr	r5, [pc, #412]	@ (8003f4c <HAL_RCC_OscConfig+0x554>)
 8003db0:	692b      	ldr	r3, [r5, #16]
 8003db2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003db6:	2b18      	cmp	r3, #24
 8003db8:	d07a      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
 8003dba:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dbc:	2902      	cmp	r1, #2
        __HAL_RCC_PLL_DISABLE();
 8003dbe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003dc2:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dc4:	d167      	bne.n	8003e96 <HAL_RCC_OscConfig+0x49e>
        tickstart = HAL_GetTick();
 8003dc6:	f7fd fba5 	bl	8001514 <HAL_GetTick>
 8003dca:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003dcc:	682b      	ldr	r3, [r5, #0]
 8003dce:	0199      	lsls	r1, r3, #6
 8003dd0:	d45b      	bmi.n	8003e8a <HAL_RCC_OscConfig+0x492>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dd2:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8003dd4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003dd6:	f423 737c 	bic.w	r3, r3, #1008	@ 0x3f0
 8003dda:	f023 0303 	bic.w	r3, r3, #3
 8003dde:	4313      	orrs	r3, r2
 8003de0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003de2:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003de6:	62ab      	str	r3, [r5, #40]	@ 0x28
 8003de8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003dea:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003dec:	3b01      	subs	r3, #1
 8003dee:	3a01      	subs	r2, #1
 8003df0:	025b      	lsls	r3, r3, #9
 8003df2:	0412      	lsls	r2, r2, #16
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003dfe:	3a01      	subs	r2, #1
 8003e00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e04:	4313      	orrs	r3, r2
 8003e06:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003e08:	3a01      	subs	r2, #1
 8003e0a:	0612      	lsls	r2, r2, #24
 8003e0c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8003e10:	4313      	orrs	r3, r2
 8003e12:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8003e14:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003e16:	f023 0301 	bic.w	r3, r3, #1
 8003e1a:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003e1c:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8003e1e:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8003e20:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e24:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003e28:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003e2c:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003e2e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003e30:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003e32:	f023 030c 	bic.w	r3, r3, #12
 8003e36:	4313      	orrs	r3, r2
 8003e38:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003e3a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003e3c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003e3e:	f023 0302 	bic.w	r3, r3, #2
 8003e42:	4313      	orrs	r3, r2
 8003e44:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003e46:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003e48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e4c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e4e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003e50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e54:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003e56:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003e58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e5c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8003e5e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003e60:	f043 0301 	orr.w	r3, r3, #1
 8003e64:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 8003e66:	682b      	ldr	r3, [r5, #0]
 8003e68:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e6c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003e6e:	f7fd fb51 	bl	8001514 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e72:	4d36      	ldr	r5, [pc, #216]	@ (8003f4c <HAL_RCC_OscConfig+0x554>)
        tickstart = HAL_GetTick();
 8003e74:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e76:	682b      	ldr	r3, [r5, #0]
 8003e78:	019a      	lsls	r2, r3, #6
 8003e7a:	f53f ae21 	bmi.w	8003ac0 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e7e:	f7fd fb49 	bl	8001514 <HAL_GetTick>
 8003e82:	1b00      	subs	r0, r0, r4
 8003e84:	2802      	cmp	r0, #2
 8003e86:	d9f6      	bls.n	8003e76 <HAL_RCC_OscConfig+0x47e>
 8003e88:	e647      	b.n	8003b1a <HAL_RCC_OscConfig+0x122>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e8a:	f7fd fb43 	bl	8001514 <HAL_GetTick>
 8003e8e:	1b80      	subs	r0, r0, r6
 8003e90:	2802      	cmp	r0, #2
 8003e92:	d99b      	bls.n	8003dcc <HAL_RCC_OscConfig+0x3d4>
 8003e94:	e641      	b.n	8003b1a <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 8003e96:	f7fd fb3d 	bl	8001514 <HAL_GetTick>
 8003e9a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e9c:	682b      	ldr	r3, [r5, #0]
 8003e9e:	019b      	lsls	r3, r3, #6
 8003ea0:	f57f ae0e 	bpl.w	8003ac0 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ea4:	f7fd fb36 	bl	8001514 <HAL_GetTick>
 8003ea8:	1b00      	subs	r0, r0, r4
 8003eaa:	2802      	cmp	r0, #2
 8003eac:	d9f6      	bls.n	8003e9c <HAL_RCC_OscConfig+0x4a4>
 8003eae:	e634      	b.n	8003b1a <HAL_RCC_OscConfig+0x122>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eb0:	2901      	cmp	r1, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003eb2:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003eb4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eb6:	f43f ae18 	beq.w	8003aea <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eba:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ebe:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003ec0:	4281      	cmp	r1, r0
 8003ec2:	f47f ae12 	bne.w	8003aea <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ec6:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003ecc:	428a      	cmp	r2, r1
 8003ece:	f47f ae0c 	bne.w	8003aea <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ed2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003ed4:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8003ed8:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003eda:	4291      	cmp	r1, r2
 8003edc:	f47f ae05 	bne.w	8003aea <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ee0:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8003ee2:	f3c3 2146 	ubfx	r1, r3, #9, #7
 8003ee6:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ee8:	4291      	cmp	r1, r2
 8003eea:	f47f adfe 	bne.w	8003aea <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003eee:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003ef0:	f3c3 4106 	ubfx	r1, r3, #16, #7
 8003ef4:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ef6:	4291      	cmp	r1, r2
 8003ef8:	f47f adf7 	bne.w	8003aea <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003efc:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003efe:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8003f02:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003f04:	4293      	cmp	r3, r2
 8003f06:	f47f adf0 	bne.w	8003aea <HAL_RCC_OscConfig+0xf2>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003f0a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003f0c:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003f0e:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003f12:	429a      	cmp	r2, r3
 8003f14:	f43f add4 	beq.w	8003ac0 <HAL_RCC_OscConfig+0xc8>
          __HAL_RCC_PLLFRACN_DISABLE();
 8003f18:	4d0c      	ldr	r5, [pc, #48]	@ (8003f4c <HAL_RCC_OscConfig+0x554>)
 8003f1a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003f1c:	f023 0301 	bic.w	r3, r3, #1
 8003f20:	62eb      	str	r3, [r5, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 8003f22:	f7fd faf7 	bl	8001514 <HAL_GetTick>
 8003f26:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003f28:	f7fd faf4 	bl	8001514 <HAL_GetTick>
 8003f2c:	42b0      	cmp	r0, r6
 8003f2e:	d0fb      	beq.n	8003f28 <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f30:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8003f32:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8003f34:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f38:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003f3c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003f40:	636b      	str	r3, [r5, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8003f42:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003f44:	f043 0301 	orr.w	r3, r3, #1
 8003f48:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8003f4a:	e5b9      	b.n	8003ac0 <HAL_RCC_OscConfig+0xc8>
 8003f4c:	58024400 	.word	0x58024400

08003f50 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003f50:	b570      	push	{r4, r5, r6, lr}
 8003f52:	4c23      	ldr	r4, [pc, #140]	@ (8003fe0 <HAL_RCC_MCOConfig+0x90>)
 8003f54:	b088      	sub	sp, #32
 8003f56:	460e      	mov	r6, r1
 8003f58:	4615      	mov	r5, r2
  if (RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8003f5a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  if (RCC_MCOx == RCC_MCO1)
 8003f5e:	b9f8      	cbnz	r0, 8003fa0 <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 8003f60:	f043 0301 	orr.w	r3, r3, #1

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f64:	f44f 7c80 	mov.w	ip, #256	@ 0x100
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8003f68:	a903      	add	r1, sp, #12
    MCO1_CLK_ENABLE();
 8003f6a:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8003f6e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003f72:	9007      	str	r0, [sp, #28]
    MCO1_CLK_ENABLE();
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	9301      	str	r3, [sp, #4]
 8003f7a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	e9cd c303 	strd	ip, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f82:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f84:	e9cd 0305 	strd	r0, r3, [sp, #20]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8003f88:	4816      	ldr	r0, [pc, #88]	@ (8003fe4 <HAL_RCC_MCOConfig+0x94>)
 8003f8a:	f7ff f8b7 	bl	80030fc <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8003f8e:	6923      	ldr	r3, [r4, #16]
 8003f90:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 8003f94:	ea43 0106 	orr.w	r1, r3, r6
 8003f98:	4329      	orrs	r1, r5
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8003f9a:	6121      	str	r1, [r4, #16]
  }
}
 8003f9c:	b008      	add	sp, #32
 8003f9e:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 8003fa0:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fa4:	f44f 7200 	mov.w	r2, #512	@ 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa8:	2103      	movs	r1, #3
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003faa:	480f      	ldr	r0, [pc, #60]	@ (8003fe8 <HAL_RCC_MCOConfig+0x98>)
    MCO2_CLK_ENABLE();
 8003fac:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8003fb0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	9302      	str	r3, [sp, #8]
 8003fba:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	e9cd 3105 	strd	r3, r1, [sp, #20]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003fc8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003fca:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003fcc:	f7ff f896 	bl	80030fc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8003fd0:	6923      	ldr	r3, [r4, #16]
 8003fd2:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8003fd6:	ea43 0106 	orr.w	r1, r3, r6
 8003fda:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
 8003fde:	e7dc      	b.n	8003f9a <HAL_RCC_MCOConfig+0x4a>
 8003fe0:	58024400 	.word	0x58024400
 8003fe4:	58020000 	.word	0x58020000
 8003fe8:	58020800 	.word	0x58020800

08003fec <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fec:	4b49      	ldr	r3, [pc, #292]	@ (8004114 <HAL_RCC_GetSysClockFreq+0x128>)
 8003fee:	691a      	ldr	r2, [r3, #16]
 8003ff0:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8003ff4:	2a10      	cmp	r2, #16
{
 8003ff6:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ff8:	f000 8088 	beq.w	800410c <HAL_RCC_GetSysClockFreq+0x120>
 8003ffc:	2a18      	cmp	r2, #24
 8003ffe:	d00c      	beq.n	800401a <HAL_RCC_GetSysClockFreq+0x2e>
 8004000:	2a00      	cmp	r2, #0
 8004002:	f040 8085 	bne.w	8004110 <HAL_RCC_GetSysClockFreq+0x124>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	4843      	ldr	r0, [pc, #268]	@ (8004118 <HAL_RCC_GetSysClockFreq+0x12c>)
 800400a:	f012 0f20 	tst.w	r2, #32
 800400e:	d003      	beq.n	8004018 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004016:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8004018:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800401a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800401c:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800401e:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
      if (pllm != 0U)
 8004020:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004024:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004028:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      if (pllm != 0U)
 800402a:	d0f5      	beq.n	8004018 <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800402c:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004030:	f004 0401 	and.w	r4, r4, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004034:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004038:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800403c:	4362      	muls	r2, r4
 800403e:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8004042:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004044:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004048:	ee06 2a90 	vmov	s13, r2
 800404c:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8004050:	d04e      	beq.n	80040f0 <HAL_RCC_GetSysClockFreq+0x104>
 8004052:	2902      	cmp	r1, #2
 8004054:	d03e      	beq.n	80040d4 <HAL_RCC_GetSysClockFreq+0xe8>
 8004056:	2900      	cmp	r1, #0
 8004058:	d14a      	bne.n	80040f0 <HAL_RCC_GetSysClockFreq+0x104>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	0692      	lsls	r2, r2, #26
 800405e:	d527      	bpl.n	80040b0 <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004060:	6819      	ldr	r1, [r3, #0]
 8004062:	4a2d      	ldr	r2, [pc, #180]	@ (8004118 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004064:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800406a:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800406c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004070:	ee07 2a90 	vmov	s15, r2
 8004074:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8004078:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800407c:	ee07 3a10 	vmov	s14, r3
 8004080:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004084:	ee37 7a26 	vadd.f32	s14, s14, s13
 8004088:	ee37 7a06 	vadd.f32	s14, s14, s12
 800408c:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004090:	4b20      	ldr	r3, [pc, #128]	@ (8004114 <HAL_RCC_GetSysClockFreq+0x128>)
 8004092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004094:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004098:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800409a:	ee07 3a10 	vmov	s14, r3
 800409e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80040a2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80040a6:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80040aa:	ee17 0a90 	vmov	r0, s15
 80040ae:	e7b3      	b.n	8004018 <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80040b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040b6:	ee07 3a90 	vmov	s15, r3
 80040ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040c2:	ee77 7a86 	vadd.f32	s15, s15, s12
 80040c6:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800411c <HAL_RCC_GetSysClockFreq+0x130>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80040ca:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80040ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
            break;
 80040d2:	e7dd      	b.n	8004090 <HAL_RCC_GetSysClockFreq+0xa4>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80040d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040da:	ee07 3a90 	vmov	s15, r3
 80040de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040e6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80040ea:	ed9f 6a0d 	vldr	s12, [pc, #52]	@ 8004120 <HAL_RCC_GetSysClockFreq+0x134>
 80040ee:	e7ec      	b.n	80040ca <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80040f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040f6:	ee07 3a90 	vmov	s15, r3
 80040fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004102:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004106:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 8004124 <HAL_RCC_GetSysClockFreq+0x138>
 800410a:	e7de      	b.n	80040ca <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800410c:	4806      	ldr	r0, [pc, #24]	@ (8004128 <HAL_RCC_GetSysClockFreq+0x13c>)
 800410e:	e783      	b.n	8004018 <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 8004110:	4806      	ldr	r0, [pc, #24]	@ (800412c <HAL_RCC_GetSysClockFreq+0x140>)
 8004112:	e781      	b.n	8004018 <HAL_RCC_GetSysClockFreq+0x2c>
 8004114:	58024400 	.word	0x58024400
 8004118:	03d09000 	.word	0x03d09000
 800411c:	4c742400 	.word	0x4c742400
 8004120:	4af42400 	.word	0x4af42400
 8004124:	4a742400 	.word	0x4a742400
 8004128:	007a1200 	.word	0x007a1200
 800412c:	003d0900 	.word	0x003d0900

08004130 <HAL_RCC_ClockConfig>:
{
 8004130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004134:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8004136:	4604      	mov	r4, r0
 8004138:	b910      	cbnz	r0, 8004140 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800413a:	2001      	movs	r0, #1
}
 800413c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004140:	4a88      	ldr	r2, [pc, #544]	@ (8004364 <HAL_RCC_ClockConfig+0x234>)
 8004142:	6813      	ldr	r3, [r2, #0]
 8004144:	f003 030f 	and.w	r3, r3, #15
 8004148:	428b      	cmp	r3, r1
 800414a:	f0c0 8093 	bcc.w	8004274 <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800414e:	6823      	ldr	r3, [r4, #0]
 8004150:	075f      	lsls	r7, r3, #29
 8004152:	f100 809b 	bmi.w	800428c <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004156:	071e      	lsls	r6, r3, #28
 8004158:	d50b      	bpl.n	8004172 <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800415a:	4983      	ldr	r1, [pc, #524]	@ (8004368 <HAL_RCC_ClockConfig+0x238>)
 800415c:	6960      	ldr	r0, [r4, #20]
 800415e:	69ca      	ldr	r2, [r1, #28]
 8004160:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8004164:	4290      	cmp	r0, r2
 8004166:	d904      	bls.n	8004172 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004168:	69ca      	ldr	r2, [r1, #28]
 800416a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800416e:	4302      	orrs	r2, r0
 8004170:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004172:	06d8      	lsls	r0, r3, #27
 8004174:	d50b      	bpl.n	800418e <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004176:	497c      	ldr	r1, [pc, #496]	@ (8004368 <HAL_RCC_ClockConfig+0x238>)
 8004178:	69a0      	ldr	r0, [r4, #24]
 800417a:	69ca      	ldr	r2, [r1, #28]
 800417c:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8004180:	4290      	cmp	r0, r2
 8004182:	d904      	bls.n	800418e <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004184:	69ca      	ldr	r2, [r1, #28]
 8004186:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800418a:	4302      	orrs	r2, r0
 800418c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800418e:	0699      	lsls	r1, r3, #26
 8004190:	d50b      	bpl.n	80041aa <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004192:	4975      	ldr	r1, [pc, #468]	@ (8004368 <HAL_RCC_ClockConfig+0x238>)
 8004194:	69e0      	ldr	r0, [r4, #28]
 8004196:	6a0a      	ldr	r2, [r1, #32]
 8004198:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800419c:	4290      	cmp	r0, r2
 800419e:	d904      	bls.n	80041aa <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80041a0:	6a0a      	ldr	r2, [r1, #32]
 80041a2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80041a6:	4302      	orrs	r2, r0
 80041a8:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041aa:	079a      	lsls	r2, r3, #30
 80041ac:	d50b      	bpl.n	80041c6 <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80041ae:	496e      	ldr	r1, [pc, #440]	@ (8004368 <HAL_RCC_ClockConfig+0x238>)
 80041b0:	68e0      	ldr	r0, [r4, #12]
 80041b2:	698a      	ldr	r2, [r1, #24]
 80041b4:	f002 020f 	and.w	r2, r2, #15
 80041b8:	4290      	cmp	r0, r2
 80041ba:	d904      	bls.n	80041c6 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041bc:	698a      	ldr	r2, [r1, #24]
 80041be:	f022 020f 	bic.w	r2, r2, #15
 80041c2:	4302      	orrs	r2, r0
 80041c4:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041c6:	07df      	lsls	r7, r3, #31
 80041c8:	d46e      	bmi.n	80042a8 <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041ca:	6823      	ldr	r3, [r4, #0]
 80041cc:	079e      	lsls	r6, r3, #30
 80041ce:	f100 80a1 	bmi.w	8004314 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041d2:	4964      	ldr	r1, [pc, #400]	@ (8004364 <HAL_RCC_ClockConfig+0x234>)
 80041d4:	680a      	ldr	r2, [r1, #0]
 80041d6:	f002 020f 	and.w	r2, r2, #15
 80041da:	42aa      	cmp	r2, r5
 80041dc:	f200 80a8 	bhi.w	8004330 <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80041e0:	0758      	lsls	r0, r3, #29
 80041e2:	f100 80b1 	bmi.w	8004348 <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041e6:	0719      	lsls	r1, r3, #28
 80041e8:	d50b      	bpl.n	8004202 <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80041ea:	495f      	ldr	r1, [pc, #380]	@ (8004368 <HAL_RCC_ClockConfig+0x238>)
 80041ec:	6960      	ldr	r0, [r4, #20]
 80041ee:	69ca      	ldr	r2, [r1, #28]
 80041f0:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80041f4:	4290      	cmp	r0, r2
 80041f6:	d204      	bcs.n	8004202 <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80041f8:	69ca      	ldr	r2, [r1, #28]
 80041fa:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80041fe:	4302      	orrs	r2, r0
 8004200:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004202:	06da      	lsls	r2, r3, #27
 8004204:	d50b      	bpl.n	800421e <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004206:	4958      	ldr	r1, [pc, #352]	@ (8004368 <HAL_RCC_ClockConfig+0x238>)
 8004208:	69a0      	ldr	r0, [r4, #24]
 800420a:	69ca      	ldr	r2, [r1, #28]
 800420c:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8004210:	4290      	cmp	r0, r2
 8004212:	d204      	bcs.n	800421e <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004214:	69ca      	ldr	r2, [r1, #28]
 8004216:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800421a:	4302      	orrs	r2, r0
 800421c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800421e:	069b      	lsls	r3, r3, #26
 8004220:	d50b      	bpl.n	800423a <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004222:	4a51      	ldr	r2, [pc, #324]	@ (8004368 <HAL_RCC_ClockConfig+0x238>)
 8004224:	69e1      	ldr	r1, [r4, #28]
 8004226:	6a13      	ldr	r3, [r2, #32]
 8004228:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800422c:	4299      	cmp	r1, r3
 800422e:	d204      	bcs.n	800423a <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004230:	6a13      	ldr	r3, [r2, #32]
 8004232:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004236:	430b      	orrs	r3, r1
 8004238:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800423a:	f7ff fed7 	bl	8003fec <HAL_RCC_GetSysClockFreq>
 800423e:	494a      	ldr	r1, [pc, #296]	@ (8004368 <HAL_RCC_ClockConfig+0x238>)
 8004240:	4a4a      	ldr	r2, [pc, #296]	@ (800436c <HAL_RCC_ClockConfig+0x23c>)
 8004242:	698b      	ldr	r3, [r1, #24]
 8004244:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8004248:	5cd3      	ldrb	r3, [r2, r3]
 800424a:	f003 031f 	and.w	r3, r3, #31
 800424e:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004250:	698b      	ldr	r3, [r1, #24]
 8004252:	f003 030f 	and.w	r3, r3, #15
 8004256:	5cd3      	ldrb	r3, [r2, r3]
 8004258:	4a45      	ldr	r2, [pc, #276]	@ (8004370 <HAL_RCC_ClockConfig+0x240>)
 800425a:	f003 031f 	and.w	r3, r3, #31
 800425e:	fa20 f303 	lsr.w	r3, r0, r3
 8004262:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8004264:	4b43      	ldr	r3, [pc, #268]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 8004266:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 8004268:	4b43      	ldr	r3, [pc, #268]	@ (8004378 <HAL_RCC_ClockConfig+0x248>)
}
 800426a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800426e:	6818      	ldr	r0, [r3, #0]
 8004270:	f7fd b8f0 	b.w	8001454 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004274:	6813      	ldr	r3, [r2, #0]
 8004276:	f023 030f 	bic.w	r3, r3, #15
 800427a:	430b      	orrs	r3, r1
 800427c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800427e:	6813      	ldr	r3, [r2, #0]
 8004280:	f003 030f 	and.w	r3, r3, #15
 8004284:	428b      	cmp	r3, r1
 8004286:	f47f af58 	bne.w	800413a <HAL_RCC_ClockConfig+0xa>
 800428a:	e760      	b.n	800414e <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800428c:	4936      	ldr	r1, [pc, #216]	@ (8004368 <HAL_RCC_ClockConfig+0x238>)
 800428e:	6920      	ldr	r0, [r4, #16]
 8004290:	698a      	ldr	r2, [r1, #24]
 8004292:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8004296:	4290      	cmp	r0, r2
 8004298:	f67f af5d 	bls.w	8004156 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800429c:	698a      	ldr	r2, [r1, #24]
 800429e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80042a2:	4302      	orrs	r2, r0
 80042a4:	618a      	str	r2, [r1, #24]
 80042a6:	e756      	b.n	8004156 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80042a8:	4b2f      	ldr	r3, [pc, #188]	@ (8004368 <HAL_RCC_ClockConfig+0x238>)
 80042aa:	68a1      	ldr	r1, [r4, #8]
 80042ac:	699a      	ldr	r2, [r3, #24]
 80042ae:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 80042b2:	430a      	orrs	r2, r1
 80042b4:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042b6:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80042b8:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042ba:	2902      	cmp	r1, #2
 80042bc:	d11d      	bne.n	80042fa <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80042be:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042c2:	f43f af3a 	beq.w	800413a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042c6:	691a      	ldr	r2, [r3, #16]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042c8:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042cc:	4f26      	ldr	r7, [pc, #152]	@ (8004368 <HAL_RCC_ClockConfig+0x238>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042ce:	f022 0207 	bic.w	r2, r2, #7
 80042d2:	430a      	orrs	r2, r1
 80042d4:	611a      	str	r2, [r3, #16]
    tickstart = HAL_GetTick();
 80042d6:	f7fd f91d 	bl	8001514 <HAL_GetTick>
 80042da:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	6862      	ldr	r2, [r4, #4]
 80042e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042e4:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80042e8:	f43f af6f 	beq.w	80041ca <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042ec:	f7fd f912 	bl	8001514 <HAL_GetTick>
 80042f0:	1b80      	subs	r0, r0, r6
 80042f2:	4540      	cmp	r0, r8
 80042f4:	d9f2      	bls.n	80042dc <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 80042f6:	2003      	movs	r0, #3
 80042f8:	e720      	b.n	800413c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042fa:	2903      	cmp	r1, #3
 80042fc:	d102      	bne.n	8004304 <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80042fe:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8004302:	e7de      	b.n	80042c2 <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004304:	2901      	cmp	r1, #1
 8004306:	d102      	bne.n	800430e <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004308:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800430c:	e7d9      	b.n	80042c2 <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800430e:	f012 0f04 	tst.w	r2, #4
 8004312:	e7d6      	b.n	80042c2 <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004314:	4914      	ldr	r1, [pc, #80]	@ (8004368 <HAL_RCC_ClockConfig+0x238>)
 8004316:	68e0      	ldr	r0, [r4, #12]
 8004318:	698a      	ldr	r2, [r1, #24]
 800431a:	f002 020f 	and.w	r2, r2, #15
 800431e:	4290      	cmp	r0, r2
 8004320:	f4bf af57 	bcs.w	80041d2 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004324:	698a      	ldr	r2, [r1, #24]
 8004326:	f022 020f 	bic.w	r2, r2, #15
 800432a:	4302      	orrs	r2, r0
 800432c:	618a      	str	r2, [r1, #24]
 800432e:	e750      	b.n	80041d2 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004330:	680a      	ldr	r2, [r1, #0]
 8004332:	f022 020f 	bic.w	r2, r2, #15
 8004336:	432a      	orrs	r2, r5
 8004338:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800433a:	680a      	ldr	r2, [r1, #0]
 800433c:	f002 020f 	and.w	r2, r2, #15
 8004340:	42aa      	cmp	r2, r5
 8004342:	f47f aefa 	bne.w	800413a <HAL_RCC_ClockConfig+0xa>
 8004346:	e74b      	b.n	80041e0 <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004348:	4907      	ldr	r1, [pc, #28]	@ (8004368 <HAL_RCC_ClockConfig+0x238>)
 800434a:	6920      	ldr	r0, [r4, #16]
 800434c:	698a      	ldr	r2, [r1, #24]
 800434e:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8004352:	4290      	cmp	r0, r2
 8004354:	f4bf af47 	bcs.w	80041e6 <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004358:	698a      	ldr	r2, [r1, #24]
 800435a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800435e:	4302      	orrs	r2, r0
 8004360:	618a      	str	r2, [r1, #24]
 8004362:	e740      	b.n	80041e6 <HAL_RCC_ClockConfig+0xb6>
 8004364:	52002000 	.word	0x52002000
 8004368:	58024400 	.word	0x58024400
 800436c:	0800cf3b 	.word	0x0800cf3b
 8004370:	24000008 	.word	0x24000008
 8004374:	2400000c 	.word	0x2400000c
 8004378:	24000014 	.word	0x24000014

0800437c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800437c:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800437e:	f7ff fe35 	bl	8003fec <HAL_RCC_GetSysClockFreq>
 8004382:	4a0b      	ldr	r2, [pc, #44]	@ (80043b0 <HAL_RCC_GetHCLKFreq+0x34>)
 8004384:	490b      	ldr	r1, [pc, #44]	@ (80043b4 <HAL_RCC_GetHCLKFreq+0x38>)
 8004386:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004388:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800438a:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800438e:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004392:	5ccb      	ldrb	r3, [r1, r3]
 8004394:	f003 031f 	and.w	r3, r3, #31
 8004398:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800439c:	5c88      	ldrb	r0, [r1, r2]
 800439e:	4a06      	ldr	r2, [pc, #24]	@ (80043b8 <HAL_RCC_GetHCLKFreq+0x3c>)
 80043a0:	f000 001f 	and.w	r0, r0, #31
 80043a4:	fa23 f000 	lsr.w	r0, r3, r0
 80043a8:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80043aa:	4a04      	ldr	r2, [pc, #16]	@ (80043bc <HAL_RCC_GetHCLKFreq+0x40>)
 80043ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 80043ae:	bd08      	pop	{r3, pc}
 80043b0:	58024400 	.word	0x58024400
 80043b4:	0800cf3b 	.word	0x0800cf3b
 80043b8:	24000008 	.word	0x24000008
 80043bc:	2400000c 	.word	0x2400000c

080043c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043c0:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80043c2:	f7ff ffdb 	bl	800437c <HAL_RCC_GetHCLKFreq>
 80043c6:	4b05      	ldr	r3, [pc, #20]	@ (80043dc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80043c8:	4a05      	ldr	r2, [pc, #20]	@ (80043e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043ca:	69db      	ldr	r3, [r3, #28]
 80043cc:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80043d0:	5cd3      	ldrb	r3, [r2, r3]
 80043d2:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80043d6:	40d8      	lsrs	r0, r3
 80043d8:	bd08      	pop	{r3, pc}
 80043da:	bf00      	nop
 80043dc:	58024400 	.word	0x58024400
 80043e0:	0800cf3b 	.word	0x0800cf3b

080043e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043e4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80043e6:	f7ff ffc9 	bl	800437c <HAL_RCC_GetHCLKFreq>
 80043ea:	4b05      	ldr	r3, [pc, #20]	@ (8004400 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80043ec:	4a05      	ldr	r2, [pc, #20]	@ (8004404 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043ee:	69db      	ldr	r3, [r3, #28]
 80043f0:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80043f4:	5cd3      	ldrb	r3, [r2, r3]
 80043f6:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80043fa:	40d8      	lsrs	r0, r3
 80043fc:	bd08      	pop	{r3, pc}
 80043fe:	bf00      	nop
 8004400:	58024400 	.word	0x58024400
 8004404:	0800cf3b 	.word	0x0800cf3b

08004408 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800440a:	4c3a      	ldr	r4, [pc, #232]	@ (80044f4 <RCCEx_PLL2_Config+0xec>)
{
 800440c:	4606      	mov	r6, r0
 800440e:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004410:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004412:	f003 0303 	and.w	r3, r3, #3
 8004416:	2b03      	cmp	r3, #3
 8004418:	d069      	beq.n	80044ee <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800441a:	6823      	ldr	r3, [r4, #0]
 800441c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004420:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004422:	f7fd f877 	bl	8001514 <HAL_GetTick>
 8004426:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004428:	6823      	ldr	r3, [r4, #0]
 800442a:	011a      	lsls	r2, r3, #4
 800442c:	d44b      	bmi.n	80044c6 <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800442e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004430:	6832      	ldr	r2, [r6, #0]
 8004432:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004436:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800443a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800443c:	68b3      	ldr	r3, [r6, #8]
 800443e:	68f2      	ldr	r2, [r6, #12]
 8004440:	3b01      	subs	r3, #1
 8004442:	3a01      	subs	r2, #1
 8004444:	025b      	lsls	r3, r3, #9
 8004446:	0412      	lsls	r2, r2, #16
 8004448:	b29b      	uxth	r3, r3
 800444a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800444e:	4313      	orrs	r3, r2
 8004450:	6872      	ldr	r2, [r6, #4]
 8004452:	3a01      	subs	r2, #1
 8004454:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004458:	4313      	orrs	r3, r2
 800445a:	6932      	ldr	r2, [r6, #16]
 800445c:	3a01      	subs	r2, #1
 800445e:	0612      	lsls	r2, r2, #24
 8004460:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004464:	4313      	orrs	r3, r2
 8004466:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004468:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800446a:	6972      	ldr	r2, [r6, #20]
 800446c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004470:	4313      	orrs	r3, r2
 8004472:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004474:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004476:	69b2      	ldr	r2, [r6, #24]
 8004478:	f023 0320 	bic.w	r3, r3, #32
 800447c:	4313      	orrs	r3, r2
 800447e:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004480:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004482:	f023 0310 	bic.w	r3, r3, #16
 8004486:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004488:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800448a:	69f2      	ldr	r2, [r6, #28]
 800448c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004490:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004494:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004498:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800449a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800449c:	f043 0310 	orr.w	r3, r3, #16
 80044a0:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80044a2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 80044a4:	b9b5      	cbnz	r5, 80044d4 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80044a6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80044aa:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80044ac:	4c11      	ldr	r4, [pc, #68]	@ (80044f4 <RCCEx_PLL2_Config+0xec>)
 80044ae:	6823      	ldr	r3, [r4, #0]
 80044b0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80044b4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044b6:	f7fd f82d 	bl	8001514 <HAL_GetTick>
 80044ba:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80044bc:	6823      	ldr	r3, [r4, #0]
 80044be:	011b      	lsls	r3, r3, #4
 80044c0:	d50f      	bpl.n	80044e2 <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 80044c2:	2000      	movs	r0, #0
 80044c4:	e005      	b.n	80044d2 <RCCEx_PLL2_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80044c6:	f7fd f825 	bl	8001514 <HAL_GetTick>
 80044ca:	1bc0      	subs	r0, r0, r7
 80044cc:	2802      	cmp	r0, #2
 80044ce:	d9ab      	bls.n	8004428 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 80044d0:	2003      	movs	r0, #3
}
 80044d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 80044d4:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80044d6:	bf0c      	ite	eq
 80044d8:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80044dc:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 80044e0:	e7e3      	b.n	80044aa <RCCEx_PLL2_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80044e2:	f7fd f817 	bl	8001514 <HAL_GetTick>
 80044e6:	1b40      	subs	r0, r0, r5
 80044e8:	2802      	cmp	r0, #2
 80044ea:	d9e7      	bls.n	80044bc <RCCEx_PLL2_Config+0xb4>
 80044ec:	e7f0      	b.n	80044d0 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 80044ee:	2001      	movs	r0, #1
 80044f0:	e7ef      	b.n	80044d2 <RCCEx_PLL2_Config+0xca>
 80044f2:	bf00      	nop
 80044f4:	58024400 	.word	0x58024400

080044f8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80044f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80044fa:	4c3a      	ldr	r4, [pc, #232]	@ (80045e4 <RCCEx_PLL3_Config+0xec>)
{
 80044fc:	4606      	mov	r6, r0
 80044fe:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004500:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004502:	f003 0303 	and.w	r3, r3, #3
 8004506:	2b03      	cmp	r3, #3
 8004508:	d069      	beq.n	80045de <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800450a:	6823      	ldr	r3, [r4, #0]
 800450c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004510:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004512:	f7fc ffff 	bl	8001514 <HAL_GetTick>
 8004516:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004518:	6823      	ldr	r3, [r4, #0]
 800451a:	009a      	lsls	r2, r3, #2
 800451c:	d44b      	bmi.n	80045b6 <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800451e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004520:	6832      	ldr	r2, [r6, #0]
 8004522:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8004526:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800452a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800452c:	68b3      	ldr	r3, [r6, #8]
 800452e:	68f2      	ldr	r2, [r6, #12]
 8004530:	3b01      	subs	r3, #1
 8004532:	3a01      	subs	r2, #1
 8004534:	025b      	lsls	r3, r3, #9
 8004536:	0412      	lsls	r2, r2, #16
 8004538:	b29b      	uxth	r3, r3
 800453a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800453e:	4313      	orrs	r3, r2
 8004540:	6872      	ldr	r2, [r6, #4]
 8004542:	3a01      	subs	r2, #1
 8004544:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004548:	4313      	orrs	r3, r2
 800454a:	6932      	ldr	r2, [r6, #16]
 800454c:	3a01      	subs	r2, #1
 800454e:	0612      	lsls	r2, r2, #24
 8004550:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004554:	4313      	orrs	r3, r2
 8004556:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004558:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800455a:	6972      	ldr	r2, [r6, #20]
 800455c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004560:	4313      	orrs	r3, r2
 8004562:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004564:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004566:	69b2      	ldr	r2, [r6, #24]
 8004568:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800456c:	4313      	orrs	r3, r2
 800456e:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004570:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004572:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004576:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004578:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800457a:	69f2      	ldr	r2, [r6, #28]
 800457c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004580:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004584:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004588:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800458a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800458c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004590:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004592:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8004594:	b9b5      	cbnz	r5, 80045c4 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004596:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800459a:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800459c:	4c11      	ldr	r4, [pc, #68]	@ (80045e4 <RCCEx_PLL3_Config+0xec>)
 800459e:	6823      	ldr	r3, [r4, #0]
 80045a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045a4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045a6:	f7fc ffb5 	bl	8001514 <HAL_GetTick>
 80045aa:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80045ac:	6823      	ldr	r3, [r4, #0]
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	d50f      	bpl.n	80045d2 <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 80045b2:	2000      	movs	r0, #0
 80045b4:	e005      	b.n	80045c2 <RCCEx_PLL3_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80045b6:	f7fc ffad 	bl	8001514 <HAL_GetTick>
 80045ba:	1bc0      	subs	r0, r0, r7
 80045bc:	2802      	cmp	r0, #2
 80045be:	d9ab      	bls.n	8004518 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 80045c0:	2003      	movs	r0, #3
}
 80045c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 80045c4:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80045c6:	bf0c      	ite	eq
 80045c8:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80045cc:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 80045d0:	e7e3      	b.n	800459a <RCCEx_PLL3_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80045d2:	f7fc ff9f 	bl	8001514 <HAL_GetTick>
 80045d6:	1b40      	subs	r0, r0, r5
 80045d8:	2802      	cmp	r0, #2
 80045da:	d9e7      	bls.n	80045ac <RCCEx_PLL3_Config+0xb4>
 80045dc:	e7f0      	b.n	80045c0 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 80045de:	2001      	movs	r0, #1
 80045e0:	e7ef      	b.n	80045c2 <RCCEx_PLL3_Config+0xca>
 80045e2:	bf00      	nop
 80045e4:	58024400 	.word	0x58024400

080045e8 <HAL_RCCEx_PeriphCLKConfig>:
{
 80045e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80045ec:	6803      	ldr	r3, [r0, #0]
{
 80045ee:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80045f0:	0118      	lsls	r0, r3, #4
 80045f2:	d51e      	bpl.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 80045f4:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 80045f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80045fa:	d02b      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 80045fc:	d80f      	bhi.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x36>
 80045fe:	b1d3      	cbz	r3, 8004636 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004600:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004604:	d01d      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 8004606:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004608:	682b      	ldr	r3, [r5, #0]
 800460a:	05d9      	lsls	r1, r3, #23
 800460c:	d551      	bpl.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0xca>
    switch (PeriphClkInit->Sai1ClockSelection)
 800460e:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8004610:	2b04      	cmp	r3, #4
 8004612:	d84d      	bhi.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8004614:	e8df f003 	tbb	[pc, r3]
 8004618:	29463f24 	.word	0x29463f24
 800461c:	29          	.byte	0x29
 800461d:	00          	.byte	0x00
    switch (PeriphClkInit->SpdifrxClockSelection)
 800461e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004622:	d1f0      	bne.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x1e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004624:	4a85      	ldr	r2, [pc, #532]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004626:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 8004628:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800462a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800462e:	430b      	orrs	r3, r1
 8004630:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004632:	2600      	movs	r6, #0
 8004634:	e7e8      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x20>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004636:	4a81      	ldr	r2, [pc, #516]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004638:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800463a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800463e:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8004640:	e7f0      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004642:	2102      	movs	r1, #2
 8004644:	f105 0008 	add.w	r0, r5, #8
 8004648:	f7ff fede 	bl	8004408 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800464c:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800464e:	2800      	cmp	r0, #0
 8004650:	d1da      	bne.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8004652:	e7e7      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004654:	2102      	movs	r1, #2
 8004656:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800465a:	f7ff ff4d 	bl	80044f8 <RCCEx_PLL3_Config>
 800465e:	e7f5      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x64>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004660:	4a76      	ldr	r2, [pc, #472]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004662:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004664:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004668:	62d3      	str	r3, [r2, #44]	@ 0x2c
    switch (PeriphClkInit->SpdifrxClockSelection)
 800466a:	4634      	mov	r4, r6
    if (ret == HAL_OK)
 800466c:	bb1c      	cbnz	r4, 80046b6 <HAL_RCCEx_PeriphCLKConfig+0xce>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800466e:	4a73      	ldr	r2, [pc, #460]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004670:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8004672:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8004674:	f023 0307 	bic.w	r3, r3, #7
 8004678:	430b      	orrs	r3, r1
 800467a:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800467c:	682b      	ldr	r3, [r5, #0]
 800467e:	059a      	lsls	r2, r3, #22
 8004680:	d528      	bpl.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    switch (PeriphClkInit->Sai23ClockSelection)
 8004682:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8004684:	2b80      	cmp	r3, #128	@ 0x80
 8004686:	d043      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8004688:	d817      	bhi.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
 800468a:	b3a3      	cbz	r3, 80046f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 800468c:	2b40      	cmp	r3, #64	@ 0x40
 800468e:	d038      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x11a>
 8004690:	2601      	movs	r6, #1
 8004692:	4634      	mov	r4, r6
 8004694:	e01e      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xec>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004696:	2100      	movs	r1, #0
 8004698:	f105 0008 	add.w	r0, r5, #8
 800469c:	f7ff feb4 	bl	8004408 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046a0:	4604      	mov	r4, r0
        break;
 80046a2:	e7e3      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x84>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046a4:	2100      	movs	r1, #0
 80046a6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 80046aa:	f7ff ff25 	bl	80044f8 <RCCEx_PLL3_Config>
 80046ae:	e7f7      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    switch (PeriphClkInit->Sai1ClockSelection)
 80046b0:	2601      	movs	r6, #1
 80046b2:	4634      	mov	r4, r6
 80046b4:	e7e2      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x94>
 80046b6:	4626      	mov	r6, r4
 80046b8:	e7e0      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch (PeriphClkInit->Sai23ClockSelection)
 80046ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80046bc:	d002      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80046be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046c2:	d1e5      	bne.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    if (ret == HAL_OK)
 80046c4:	bb54      	cbnz	r4, 800471c <HAL_RCCEx_PeriphCLKConfig+0x134>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80046c6:	4a5d      	ldr	r2, [pc, #372]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80046c8:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 80046ca:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80046cc:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 80046d0:	430b      	orrs	r3, r1
 80046d2:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80046d4:	682b      	ldr	r3, [r5, #0]
 80046d6:	055b      	lsls	r3, r3, #21
 80046d8:	d531      	bpl.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x156>
    switch (PeriphClkInit->Sai4AClockSelection)
 80046da:	f8d5 30a8 	ldr.w	r3, [r5, #168]	@ 0xa8
 80046de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046e2:	d049      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80046e4:	d81c      	bhi.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x138>
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d039      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x176>
 80046ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046ee:	d03c      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x182>
 80046f0:	2601      	movs	r6, #1
 80046f2:	4634      	mov	r4, r6
 80046f4:	e023      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x156>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046f6:	4a51      	ldr	r2, [pc, #324]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80046f8:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80046fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8004700:	e7e0      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004702:	2100      	movs	r1, #0
 8004704:	f105 0008 	add.w	r0, r5, #8
 8004708:	f7ff fe7e 	bl	8004408 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800470c:	4604      	mov	r4, r0
        break;
 800470e:	e7d9      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004710:	2100      	movs	r1, #0
 8004712:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004716:	f7ff feef 	bl	80044f8 <RCCEx_PLL3_Config>
 800471a:	e7f7      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x124>
 800471c:	4626      	mov	r6, r4
 800471e:	e7d9      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    switch (PeriphClkInit->Sai4AClockSelection)
 8004720:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004724:	d002      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x144>
 8004726:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800472a:	d1e1      	bne.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x108>
    if (ret == HAL_OK)
 800472c:	bb54      	cbnz	r4, 8004784 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800472e:	4a43      	ldr	r2, [pc, #268]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004730:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 8004734:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004736:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 800473a:	430b      	orrs	r3, r1
 800473c:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800473e:	682b      	ldr	r3, [r5, #0]
 8004740:	051f      	lsls	r7, r3, #20
 8004742:	d530      	bpl.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    switch (PeriphClkInit->Sai4BClockSelection)
 8004744:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 8004748:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800474c:	d045      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 800474e:	d81b      	bhi.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 8004750:	b3b3      	cbz	r3, 80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8004752:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004756:	d039      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8004758:	2601      	movs	r6, #1
 800475a:	4634      	mov	r4, r6
 800475c:	e023      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800475e:	4a37      	ldr	r2, [pc, #220]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004760:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004762:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004766:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8004768:	e7e0      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x144>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800476a:	2100      	movs	r1, #0
 800476c:	f105 0008 	add.w	r0, r5, #8
 8004770:	f7ff fe4a 	bl	8004408 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004774:	4604      	mov	r4, r0
        break;
 8004776:	e7d9      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x144>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004778:	2100      	movs	r1, #0
 800477a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800477e:	f7ff febb 	bl	80044f8 <RCCEx_PLL3_Config>
 8004782:	e7f7      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004784:	4626      	mov	r6, r4
 8004786:	e7da      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x156>
    switch (PeriphClkInit->Sai4BClockSelection)
 8004788:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800478c:	d002      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 800478e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004792:	d1e1      	bne.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x170>
    if (ret == HAL_OK)
 8004794:	bb3c      	cbnz	r4, 80047e6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004796:	4a29      	ldr	r2, [pc, #164]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004798:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 800479c:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800479e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80047a2:	430b      	orrs	r3, r1
 80047a4:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80047a6:	682b      	ldr	r3, [r5, #0]
 80047a8:	0198      	lsls	r0, r3, #6
 80047aa:	d528      	bpl.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x216>
    switch (PeriphClkInit->QspiClockSelection)
 80047ac:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80047ae:	2b20      	cmp	r3, #32
 80047b0:	d03b      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x242>
 80047b2:	d81a      	bhi.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x202>
 80047b4:	b1db      	cbz	r3, 80047ee <HAL_RCCEx_PeriphCLKConfig+0x206>
 80047b6:	2b10      	cmp	r3, #16
 80047b8:	d031      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x236>
 80047ba:	2601      	movs	r6, #1
 80047bc:	4634      	mov	r4, r6
 80047be:	e01e      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x216>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047c0:	4a1e      	ldr	r2, [pc, #120]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80047c2:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80047c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 80047ca:	e7e3      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047cc:	2100      	movs	r1, #0
 80047ce:	f105 0008 	add.w	r0, r5, #8
 80047d2:	f7ff fe19 	bl	8004408 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047d6:	4604      	mov	r4, r0
        break;
 80047d8:	e7dc      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047da:	2100      	movs	r1, #0
 80047dc:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 80047e0:	f7ff fe8a 	bl	80044f8 <RCCEx_PLL3_Config>
 80047e4:	e7f7      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80047e6:	4626      	mov	r6, r4
 80047e8:	e7dd      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    switch (PeriphClkInit->QspiClockSelection)
 80047ea:	2b30      	cmp	r3, #48	@ 0x30
 80047ec:	d1e5      	bne.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    if (ret == HAL_OK)
 80047ee:	bb1c      	cbnz	r4, 8004838 <HAL_RCCEx_PeriphCLKConfig+0x250>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80047f0:	4a12      	ldr	r2, [pc, #72]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80047f2:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80047f4:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80047f6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80047fa:	430b      	orrs	r3, r1
 80047fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80047fe:	682b      	ldr	r3, [r5, #0]
 8004800:	04d9      	lsls	r1, r3, #19
 8004802:	d52c      	bpl.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x276>
    switch (PeriphClkInit->Spi123ClockSelection)
 8004804:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8004806:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800480a:	d076      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x312>
 800480c:	d818      	bhi.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x258>
 800480e:	2b00      	cmp	r3, #0
 8004810:	d066      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8004812:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004816:	d069      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x304>
 8004818:	2601      	movs	r6, #1
 800481a:	4634      	mov	r4, r6
 800481c:	e01f      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x276>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800481e:	4a07      	ldr	r2, [pc, #28]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004820:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004822:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004826:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8004828:	e7e1      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x206>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800482a:	2102      	movs	r1, #2
 800482c:	f105 0008 	add.w	r0, r5, #8
 8004830:	f7ff fdea 	bl	8004408 <RCCEx_PLL2_Config>
 8004834:	4604      	mov	r4, r0
        break;
 8004836:	e7da      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004838:	4626      	mov	r6, r4
 800483a:	e7e0      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x216>
 800483c:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi123ClockSelection)
 8004840:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004844:	d002      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004846:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800484a:	d1e5      	bne.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x230>
    if (ret == HAL_OK)
 800484c:	2c00      	cmp	r4, #0
 800484e:	d15a      	bne.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x31e>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004850:	4a9e      	ldr	r2, [pc, #632]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004852:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8004854:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8004856:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800485a:	430b      	orrs	r3, r1
 800485c:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800485e:	682b      	ldr	r3, [r5, #0]
 8004860:	049a      	lsls	r2, r3, #18
 8004862:	d50b      	bpl.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x294>
    switch (PeriphClkInit->Spi45ClockSelection)
 8004864:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004866:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800486a:	d066      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x352>
 800486c:	d84d      	bhi.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x322>
 800486e:	2b00      	cmp	r3, #0
 8004870:	d053      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004872:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004876:	d059      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004878:	2601      	movs	r6, #1
 800487a:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800487c:	682b      	ldr	r3, [r5, #0]
 800487e:	045b      	lsls	r3, r3, #17
 8004880:	d50c      	bpl.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    switch (PeriphClkInit->Spi6ClockSelection)
 8004882:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 8004886:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800488a:	d077      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x394>
 800488c:	d85d      	bhi.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x362>
 800488e:	2b00      	cmp	r3, #0
 8004890:	d063      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004892:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004896:	d06a      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x386>
 8004898:	2601      	movs	r6, #1
 800489a:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800489c:	682b      	ldr	r3, [r5, #0]
 800489e:	041f      	lsls	r7, r3, #16
 80048a0:	d511      	bpl.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    switch (PeriphClkInit->FdcanClockSelection)
 80048a2:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80048a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048a8:	d070      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80048aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048ae:	d073      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d178      	bne.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x3be>
    if (ret == HAL_OK)
 80048b4:	2c00      	cmp	r4, #0
 80048b6:	d179      	bne.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80048b8:	4a84      	ldr	r2, [pc, #528]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048ba:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 80048bc:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80048be:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80048c2:	430b      	orrs	r3, r1
 80048c4:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80048c6:	682b      	ldr	r3, [r5, #0]
 80048c8:	01d8      	lsls	r0, r3, #7
 80048ca:	d57f      	bpl.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    switch (PeriphClkInit->FmcClockSelection)
 80048cc:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 80048ce:	2b03      	cmp	r3, #3
 80048d0:	f200 80d8 	bhi.w	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80048d4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80048d8:	006c0071 	.word	0x006c0071
 80048dc:	007100cf 	.word	0x007100cf
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048e0:	4a7a      	ldr	r2, [pc, #488]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048e2:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80048e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 80048ea:	e7af      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x264>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048ec:	2100      	movs	r1, #0
 80048ee:	f105 0008 	add.w	r0, r5, #8
 80048f2:	f7ff fd89 	bl	8004408 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80048f6:	4604      	mov	r4, r0
        break;
 80048f8:	e7a8      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x264>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80048fa:	2100      	movs	r1, #0
 80048fc:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004900:	f7ff fdfa 	bl	80044f8 <RCCEx_PLL3_Config>
 8004904:	e7f7      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8004906:	4626      	mov	r6, r4
 8004908:	e7a9      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x276>
    switch (PeriphClkInit->Spi45ClockSelection)
 800490a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800490e:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8004912:	d002      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004914:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004918:	d1ae      	bne.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x290>
    if (ret == HAL_OK)
 800491a:	b9a4      	cbnz	r4, 8004946 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800491c:	4a6b      	ldr	r2, [pc, #428]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800491e:	6e69      	ldr	r1, [r5, #100]	@ 0x64
 8004920:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8004922:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004926:	430b      	orrs	r3, r1
 8004928:	6513      	str	r3, [r2, #80]	@ 0x50
 800492a:	e7a7      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x294>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800492c:	2101      	movs	r1, #1
 800492e:	f105 0008 	add.w	r0, r5, #8
 8004932:	f7ff fd69 	bl	8004408 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004936:	4604      	mov	r4, r0
        break;
 8004938:	e7ef      	b.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x332>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800493a:	2101      	movs	r1, #1
 800493c:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004940:	f7ff fdda 	bl	80044f8 <RCCEx_PLL3_Config>
 8004944:	e7f7      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004946:	4626      	mov	r6, r4
 8004948:	e798      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x294>
    switch (PeriphClkInit->Spi6ClockSelection)
 800494a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800494e:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8004952:	d002      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004954:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004958:	d19e      	bne.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    if (ret == HAL_OK)
 800495a:	b9ac      	cbnz	r4, 8004988 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800495c:	4a5b      	ldr	r2, [pc, #364]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800495e:	f8d5 10b0 	ldr.w	r1, [r5, #176]	@ 0xb0
 8004962:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004964:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 8004968:	430b      	orrs	r3, r1
 800496a:	6593      	str	r3, [r2, #88]	@ 0x58
 800496c:	e796      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800496e:	2101      	movs	r1, #1
 8004970:	f105 0008 	add.w	r0, r5, #8
 8004974:	f7ff fd48 	bl	8004408 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004978:	4604      	mov	r4, r0
        break;
 800497a:	e7ee      	b.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x372>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800497c:	2101      	movs	r1, #1
 800497e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004982:	f7ff fdb9 	bl	80044f8 <RCCEx_PLL3_Config>
 8004986:	e7f7      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x390>
 8004988:	4626      	mov	r6, r4
 800498a:	e787      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800498c:	4a4f      	ldr	r2, [pc, #316]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800498e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004990:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004994:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8004996:	e78d      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004998:	2101      	movs	r1, #1
 800499a:	f105 0008 	add.w	r0, r5, #8
 800499e:	f7ff fd33 	bl	8004408 <RCCEx_PLL2_Config>
 80049a2:	4604      	mov	r4, r0
        break;
 80049a4:	e786      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    switch (PeriphClkInit->FdcanClockSelection)
 80049a6:	2601      	movs	r6, #1
 80049a8:	4634      	mov	r4, r6
 80049aa:	e78c      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80049ac:	4626      	mov	r6, r4
 80049ae:	e78a      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049b0:	4a46      	ldr	r2, [pc, #280]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049b2:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80049b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 80049ba:	2c00      	cmp	r4, #0
 80049bc:	d165      	bne.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80049be:	4a43      	ldr	r2, [pc, #268]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049c0:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 80049c2:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80049c4:	f023 0303 	bic.w	r3, r3, #3
 80049c8:	430b      	orrs	r3, r1
 80049ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049cc:	682b      	ldr	r3, [r5, #0]
 80049ce:	0259      	lsls	r1, r3, #9
 80049d0:	d539      	bpl.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049d2:	4f3f      	ldr	r7, [pc, #252]	@ (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049da:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 80049dc:	f7fc fd9a 	bl	8001514 <HAL_GetTick>
 80049e0:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	05da      	lsls	r2, r3, #23
 80049e6:	d552      	bpl.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    if (ret == HAL_OK)
 80049e8:	2c00      	cmp	r4, #0
 80049ea:	d175      	bne.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80049ec:	4b37      	ldr	r3, [pc, #220]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049ee:	f8d5 00b4 	ldr.w	r0, [r5, #180]	@ 0xb4
 80049f2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80049f4:	4042      	eors	r2, r0
 80049f6:	f412 7f40 	tst.w	r2, #768	@ 0x300
 80049fa:	d00b      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x42c>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049fc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 80049fe:	6f19      	ldr	r1, [r3, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a00:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a04:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8004a08:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a0a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004a0c:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8004a10:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 8004a12:	671a      	str	r2, [r3, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004a14:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8004a18:	d042      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a1a:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8004a1e:	492b      	ldr	r1, [pc, #172]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a20:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8004a24:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8004a28:	d14b      	bne.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004a2a:	6908      	ldr	r0, [r1, #16]
 8004a2c:	4a29      	ldr	r2, [pc, #164]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a2e:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
 8004a32:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8004a36:	4302      	orrs	r2, r0
 8004a38:	610a      	str	r2, [r1, #16]
 8004a3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a3e:	4a23      	ldr	r2, [pc, #140]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a40:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8004a42:	430b      	orrs	r3, r1
 8004a44:	6713      	str	r3, [r2, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004a46:	682b      	ldr	r3, [r5, #0]
 8004a48:	07d8      	lsls	r0, r3, #31
 8004a4a:	d509      	bpl.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x478>
    switch (PeriphClkInit->Usart16ClockSelection)
 8004a4c:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 8004a4e:	2b10      	cmp	r3, #16
 8004a50:	d05a      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8004a52:	d843      	bhi.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d047      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8004a58:	2b08      	cmp	r3, #8
 8004a5a:	d04e      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x512>
 8004a5c:	2601      	movs	r6, #1
 8004a5e:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004a60:	682b      	ldr	r3, [r5, #0]
 8004a62:	0799      	lsls	r1, r3, #30
 8004a64:	d566      	bpl.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004a66:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 8004a68:	2b05      	cmp	r3, #5
 8004a6a:	d879      	bhi.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x578>
 8004a6c:	e8df f003 	tbb	[pc, r3]
 8004a70:	5a72545a 	.word	0x5a72545a
 8004a74:	5a5a      	.short	0x5a5a
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a76:	2102      	movs	r1, #2
 8004a78:	f105 0008 	add.w	r0, r5, #8
 8004a7c:	f7ff fcc4 	bl	8004408 <RCCEx_PLL2_Config>
 8004a80:	4604      	mov	r4, r0
        break;
 8004a82:	e79a      	b.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    switch (PeriphClkInit->FmcClockSelection)
 8004a84:	2601      	movs	r6, #1
 8004a86:	4634      	mov	r4, r6
 8004a88:	e7a0      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004a8a:	4626      	mov	r6, r4
 8004a8c:	e79e      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a8e:	f7fc fd41 	bl	8001514 <HAL_GetTick>
 8004a92:	eba0 0008 	sub.w	r0, r0, r8
 8004a96:	2864      	cmp	r0, #100	@ 0x64
 8004a98:	d9a3      	bls.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
        ret = HAL_TIMEOUT;
 8004a9a:	2603      	movs	r6, #3
 8004a9c:	4634      	mov	r4, r6
 8004a9e:	e7d2      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        tickstart = HAL_GetTick();
 8004aa0:	f7fc fd38 	bl	8001514 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004aa4:	f8df 8024 	ldr.w	r8, [pc, #36]	@ 8004acc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        tickstart = HAL_GetTick();
 8004aa8:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aaa:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004aae:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8004ab2:	079b      	lsls	r3, r3, #30
 8004ab4:	d4b1      	bmi.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x432>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ab6:	f7fc fd2d 	bl	8001514 <HAL_GetTick>
 8004aba:	1bc0      	subs	r0, r0, r7
 8004abc:	4548      	cmp	r0, r9
 8004abe:	d9f6      	bls.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8004ac0:	e7eb      	b.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ac2:	690a      	ldr	r2, [r1, #16]
 8004ac4:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8004ac8:	e7b6      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x450>
 8004aca:	bf00      	nop
 8004acc:	58024400 	.word	0x58024400
 8004ad0:	58024800 	.word	0x58024800
 8004ad4:	00ffffcf 	.word	0x00ffffcf
 8004ad8:	4626      	mov	r6, r4
 8004ada:	e7b4      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    switch (PeriphClkInit->Usart16ClockSelection)
 8004adc:	f023 0208 	bic.w	r2, r3, #8
 8004ae0:	2a20      	cmp	r2, #32
 8004ae2:	d001      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8004ae4:	2b18      	cmp	r3, #24
 8004ae6:	d1b9      	bne.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x474>
    if (ret == HAL_OK)
 8004ae8:	b9a4      	cbnz	r4, 8004b14 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004aea:	4a20      	ldr	r2, [pc, #128]	@ (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8004aec:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
 8004aee:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004af0:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8004af4:	430b      	orrs	r3, r1
 8004af6:	6553      	str	r3, [r2, #84]	@ 0x54
 8004af8:	e7b2      	b.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x478>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004afa:	2101      	movs	r1, #1
 8004afc:	f105 0008 	add.w	r0, r5, #8
 8004b00:	f7ff fc82 	bl	8004408 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b04:	4604      	mov	r4, r0
        break;
 8004b06:	e7ef      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x500>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b08:	2101      	movs	r1, #1
 8004b0a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004b0e:	f7ff fcf3 	bl	80044f8 <RCCEx_PLL3_Config>
 8004b12:	e7f7      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 8004b14:	4626      	mov	r6, r4
 8004b16:	e7a3      	b.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x478>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b18:	2101      	movs	r1, #1
 8004b1a:	f105 0008 	add.w	r0, r5, #8
 8004b1e:	f7ff fc73 	bl	8004408 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b22:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8004b24:	b9fc      	cbnz	r4, 8004b66 <HAL_RCCEx_PeriphCLKConfig+0x57e>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004b26:	4a11      	ldr	r2, [pc, #68]	@ (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8004b28:	6fa9      	ldr	r1, [r5, #120]	@ 0x78
 8004b2a:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004b2c:	f023 0307 	bic.w	r3, r3, #7
 8004b30:	430b      	orrs	r3, r1
 8004b32:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b34:	682b      	ldr	r3, [r5, #0]
 8004b36:	075a      	lsls	r2, r3, #29
 8004b38:	d52b      	bpl.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004b3a:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8004b3e:	2b05      	cmp	r3, #5
 8004b40:	f200 816e 	bhi.w	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8004b44:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004b48:	0014001a 	.word	0x0014001a
 8004b4c:	001a0166 	.word	0x001a0166
 8004b50:	001a001a 	.word	0x001a001a
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b54:	2101      	movs	r1, #1
 8004b56:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004b5a:	f7ff fccd 	bl	80044f8 <RCCEx_PLL3_Config>
 8004b5e:	e7e0      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x53a>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004b60:	2601      	movs	r6, #1
 8004b62:	4634      	mov	r4, r6
 8004b64:	e7e6      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x54c>
 8004b66:	4626      	mov	r6, r4
 8004b68:	e7e4      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x54c>
 8004b6a:	bf00      	nop
 8004b6c:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b70:	2101      	movs	r1, #1
 8004b72:	f105 0008 	add.w	r0, r5, #8
 8004b76:	f7ff fc47 	bl	8004408 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b7a:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8004b7c:	2c00      	cmp	r4, #0
 8004b7e:	f040 8152 	bne.w	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x83e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b82:	4aaa      	ldr	r2, [pc, #680]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004b84:	f8d5 1094 	ldr.w	r1, [r5, #148]	@ 0x94
 8004b88:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004b8a:	f023 0307 	bic.w	r3, r3, #7
 8004b8e:	430b      	orrs	r3, r1
 8004b90:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b92:	682b      	ldr	r3, [r5, #0]
 8004b94:	069b      	lsls	r3, r3, #26
 8004b96:	d510      	bpl.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x5d2>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004b98:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8004b9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ba0:	f000 8160 	beq.w	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x87c>
 8004ba4:	f200 8144 	bhi.w	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f000 814a 	beq.w	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x85a>
 8004bae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004bb2:	f000 8150 	beq.w	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x86e>
 8004bb6:	2601      	movs	r6, #1
 8004bb8:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004bba:	682b      	ldr	r3, [r5, #0]
 8004bbc:	065f      	lsls	r7, r3, #25
 8004bbe:	d510      	bpl.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004bc0:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 8004bc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bc8:	f000 816e 	beq.w	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8004bcc:	f200 8152 	bhi.w	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f000 8158 	beq.w	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x89e>
 8004bd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bda:	f000 815e 	beq.w	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x8b2>
 8004bde:	2601      	movs	r6, #1
 8004be0:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004be2:	682b      	ldr	r3, [r5, #0]
 8004be4:	0618      	lsls	r0, r3, #24
 8004be6:	d510      	bpl.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x622>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004be8:	f8d5 30a0 	ldr.w	r3, [r5, #160]	@ 0xa0
 8004bec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004bf0:	f000 817c 	beq.w	8004eec <HAL_RCCEx_PeriphCLKConfig+0x904>
 8004bf4:	f200 8160 	bhi.w	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f000 8166 	beq.w	8004eca <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004bfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c02:	f000 816c 	beq.w	8004ede <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8004c06:	2601      	movs	r6, #1
 8004c08:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004c0a:	682b      	ldr	r3, [r5, #0]
 8004c0c:	0719      	lsls	r1, r3, #28
 8004c0e:	d514      	bpl.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x652>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004c10:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
 8004c14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c18:	d107      	bne.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x642>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004c1a:	2102      	movs	r1, #2
 8004c1c:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004c20:	f7ff fc6a 	bl	80044f8 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8004c24:	2800      	cmp	r0, #0
 8004c26:	bf18      	it	ne
 8004c28:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004c2a:	4a80      	ldr	r2, [pc, #512]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004c2c:	f8d5 1084 	ldr.w	r1, [r5, #132]	@ 0x84
 8004c30:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004c32:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004c36:	430b      	orrs	r3, r1
 8004c38:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c3a:	682b      	ldr	r3, [r5, #0]
 8004c3c:	06da      	lsls	r2, r3, #27
 8004c3e:	d514      	bpl.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x682>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004c40:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8004c44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c48:	d107      	bne.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x672>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004c4a:	2102      	movs	r1, #2
 8004c4c:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004c50:	f7ff fc52 	bl	80044f8 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8004c54:	2800      	cmp	r0, #0
 8004c56:	bf18      	it	ne
 8004c58:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c5a:	4a74      	ldr	r2, [pc, #464]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004c5c:	f8d5 1098 	ldr.w	r1, [r5, #152]	@ 0x98
 8004c60:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004c62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c66:	430b      	orrs	r3, r1
 8004c68:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c6a:	682b      	ldr	r3, [r5, #0]
 8004c6c:	031b      	lsls	r3, r3, #12
 8004c6e:	d51b      	bpl.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    switch (PeriphClkInit->AdcClockSelection)
 8004c70:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 8004c74:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8004c78:	f000 8140 	beq.w	8004efc <HAL_RCCEx_PeriphCLKConfig+0x914>
 8004c7c:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8004c80:	d007      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8004c82:	2900      	cmp	r1, #0
 8004c84:	f040 8140 	bne.w	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x920>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c88:	f105 0008 	add.w	r0, r5, #8
 8004c8c:	f7ff fbbc 	bl	8004408 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c90:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8004c92:	2c00      	cmp	r4, #0
 8004c94:	f040 813b 	bne.w	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x926>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c98:	4a64      	ldr	r2, [pc, #400]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004c9a:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 8004c9e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004ca0:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8004ca4:	430b      	orrs	r3, r1
 8004ca6:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ca8:	682b      	ldr	r3, [r5, #0]
 8004caa:	035f      	lsls	r7, r3, #13
 8004cac:	d50f      	bpl.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    switch (PeriphClkInit->UsbClockSelection)
 8004cae:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
 8004cb2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004cb6:	f000 813b 	beq.w	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x948>
 8004cba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004cbe:	f000 812d 	beq.w	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x934>
 8004cc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cc6:	f000 8124 	beq.w	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x92a>
 8004cca:	2601      	movs	r6, #1
 8004ccc:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004cce:	682b      	ldr	r3, [r5, #0]
 8004cd0:	03d8      	lsls	r0, r3, #15
 8004cd2:	d509      	bpl.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    switch (PeriphClkInit->SdmmcClockSelection)
 8004cd4:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	f000 8133 	beq.w	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004cdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ce0:	f000 813d 	beq.w	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x976>
 8004ce4:	2601      	movs	r6, #1
 8004ce6:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004ce8:	682b      	ldr	r3, [r5, #0]
 8004cea:	0099      	lsls	r1, r3, #2
 8004cec:	d507      	bpl.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x716>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004cee:	2102      	movs	r1, #2
 8004cf0:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004cf4:	f7ff fc00 	bl	80044f8 <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 8004cf8:	2800      	cmp	r0, #0
 8004cfa:	bf18      	it	ne
 8004cfc:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004cfe:	e9d5 3100 	ldrd	r3, r1, [r5]
 8004d02:	039a      	lsls	r2, r3, #14
 8004d04:	f140 8143 	bpl.w	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    switch (PeriphClkInit->RngClockSelection)
 8004d08:	f8d5 0080 	ldr.w	r0, [r5, #128]	@ 0x80
 8004d0c:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8004d10:	f000 813f 	beq.w	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
 8004d14:	f200 812c 	bhi.w	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8004d18:	2800      	cmp	r0, #0
 8004d1a:	f000 812f 	beq.w	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x994>
 8004d1e:	2401      	movs	r4, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d20:	02df      	lsls	r7, r3, #11
 8004d22:	d506      	bpl.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x74a>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d24:	4841      	ldr	r0, [pc, #260]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004d26:	6f6e      	ldr	r6, [r5, #116]	@ 0x74
 8004d28:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8004d2a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004d2e:	4332      	orrs	r2, r6
 8004d30:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004d32:	00de      	lsls	r6, r3, #3
 8004d34:	d507      	bpl.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x75e>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004d36:	483d      	ldr	r0, [pc, #244]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004d38:	f8d5 60b8 	ldr.w	r6, [r5, #184]	@ 0xb8
 8004d3c:	6902      	ldr	r2, [r0, #16]
 8004d3e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004d42:	4332      	orrs	r2, r6
 8004d44:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d46:	0298      	lsls	r0, r3, #10
 8004d48:	d506      	bpl.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x770>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d4a:	4838      	ldr	r0, [pc, #224]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004d4c:	6eee      	ldr	r6, [r5, #108]	@ 0x6c
 8004d4e:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8004d50:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8004d54:	4332      	orrs	r2, r6
 8004d56:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004d58:	005a      	lsls	r2, r3, #1
 8004d5a:	d509      	bpl.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x788>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d5c:	4a33      	ldr	r2, [pc, #204]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004d5e:	6910      	ldr	r0, [r2, #16]
 8004d60:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 8004d64:	6110      	str	r0, [r2, #16]
 8004d66:	6910      	ldr	r0, [r2, #16]
 8004d68:	f8d5 60bc 	ldr.w	r6, [r5, #188]	@ 0xbc
 8004d6c:	4330      	orrs	r0, r6
 8004d6e:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	da06      	bge.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x79a>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004d74:	482d      	ldr	r0, [pc, #180]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004d76:	6d6e      	ldr	r6, [r5, #84]	@ 0x54
 8004d78:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8004d7a:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004d7e:	4332      	orrs	r2, r6
 8004d80:	64c2      	str	r2, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d82:	021f      	lsls	r7, r3, #8
 8004d84:	d507      	bpl.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d86:	4a29      	ldr	r2, [pc, #164]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004d88:	f8d5 008c 	ldr.w	r0, [r5, #140]	@ 0x8c
 8004d8c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004d8e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004d92:	4303      	orrs	r3, r0
 8004d94:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004d96:	07ce      	lsls	r6, r1, #31
 8004d98:	d506      	bpl.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	f105 0008 	add.w	r0, r5, #8
 8004da0:	f7ff fb32 	bl	8004408 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8004da4:	4607      	mov	r7, r0
 8004da6:	b900      	cbnz	r0, 8004daa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    switch (PeriphClkInit->RngClockSelection)
 8004da8:	4627      	mov	r7, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004daa:	686b      	ldr	r3, [r5, #4]
 8004dac:	079c      	lsls	r4, r3, #30
 8004dae:	d506      	bpl.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x7d6>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004db0:	2101      	movs	r1, #1
 8004db2:	f105 0008 	add.w	r0, r5, #8
 8004db6:	f7ff fb27 	bl	8004408 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8004dba:	4606      	mov	r6, r0
 8004dbc:	b900      	cbnz	r0, 8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    switch (PeriphClkInit->RngClockSelection)
 8004dbe:	463e      	mov	r6, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004dc0:	686b      	ldr	r3, [r5, #4]
 8004dc2:	0758      	lsls	r0, r3, #29
 8004dc4:	d506      	bpl.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004dc6:	2102      	movs	r1, #2
 8004dc8:	f105 0008 	add.w	r0, r5, #8
 8004dcc:	f7ff fb1c 	bl	8004408 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8004dd0:	4604      	mov	r4, r0
 8004dd2:	b900      	cbnz	r0, 8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x7ee>
    switch (PeriphClkInit->RngClockSelection)
 8004dd4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004dd6:	686b      	ldr	r3, [r5, #4]
 8004dd8:	0719      	lsls	r1, r3, #28
 8004dda:	d506      	bpl.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x802>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ddc:	2100      	movs	r1, #0
 8004dde:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004de2:	f7ff fb89 	bl	80044f8 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8004de6:	4606      	mov	r6, r0
 8004de8:	b900      	cbnz	r0, 8004dec <HAL_RCCEx_PeriphCLKConfig+0x804>
    switch (PeriphClkInit->RngClockSelection)
 8004dea:	4626      	mov	r6, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004dec:	686b      	ldr	r3, [r5, #4]
 8004dee:	06da      	lsls	r2, r3, #27
 8004df0:	d506      	bpl.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x818>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004df2:	2101      	movs	r1, #1
 8004df4:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004df8:	f7ff fb7e 	bl	80044f8 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8004dfc:	4604      	mov	r4, r0
 8004dfe:	b900      	cbnz	r0, 8004e02 <HAL_RCCEx_PeriphCLKConfig+0x81a>
    switch (PeriphClkInit->RngClockSelection)
 8004e00:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004e02:	686b      	ldr	r3, [r5, #4]
 8004e04:	069b      	lsls	r3, r3, #26
 8004e06:	f100 80ca 	bmi.w	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  if (status == HAL_OK)
 8004e0a:	1e20      	subs	r0, r4, #0
 8004e0c:	bf18      	it	ne
 8004e0e:	2001      	movne	r0, #1
}
 8004e10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e14:	2101      	movs	r1, #1
 8004e16:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004e1a:	f7ff fb6d 	bl	80044f8 <RCCEx_PLL3_Config>
 8004e1e:	e6ac      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x592>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004e20:	2601      	movs	r6, #1
 8004e22:	4634      	mov	r4, r6
 8004e24:	e6b5      	b.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8004e26:	4626      	mov	r6, r4
 8004e28:	e6b3      	b.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8004e2a:	bf00      	nop
 8004e2c:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004e30:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004e34:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8004e38:	d003      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x85a>
 8004e3a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004e3e:	f47f aeba 	bne.w	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    if (ret == HAL_OK)
 8004e42:	b9ac      	cbnz	r4, 8004e70 <HAL_RCCEx_PeriphCLKConfig+0x888>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e44:	4a5b      	ldr	r2, [pc, #364]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8004e46:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
 8004e4a:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004e4c:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 8004e50:	430b      	orrs	r3, r1
 8004e52:	6553      	str	r3, [r2, #84]	@ 0x54
 8004e54:	e6b1      	b.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x5d2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e56:	2100      	movs	r1, #0
 8004e58:	f105 0008 	add.w	r0, r5, #8
 8004e5c:	f7ff fad4 	bl	8004408 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e60:	4604      	mov	r4, r0
        break;
 8004e62:	e7ee      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x85a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e64:	2102      	movs	r1, #2
 8004e66:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004e6a:	f7ff fb45 	bl	80044f8 <RCCEx_PLL3_Config>
 8004e6e:	e7f7      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x878>
 8004e70:	4626      	mov	r6, r4
 8004e72:	e6a2      	b.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x5d2>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004e74:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004e78:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 8004e7c:	d003      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x89e>
 8004e7e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004e82:	f47f aeac 	bne.w	8004bde <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    if (ret == HAL_OK)
 8004e86:	b9ac      	cbnz	r4, 8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e88:	4a4a      	ldr	r2, [pc, #296]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8004e8a:	f8d5 109c 	ldr.w	r1, [r5, #156]	@ 0x9c
 8004e8e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004e90:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8004e94:	430b      	orrs	r3, r1
 8004e96:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e98:	e6a3      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e9a:	2100      	movs	r1, #0
 8004e9c:	f105 0008 	add.w	r0, r5, #8
 8004ea0:	f7ff fab2 	bl	8004408 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ea4:	4604      	mov	r4, r0
        break;
 8004ea6:	e7ee      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ea8:	2102      	movs	r1, #2
 8004eaa:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004eae:	f7ff fb23 	bl	80044f8 <RCCEx_PLL3_Config>
 8004eb2:	e7f7      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8004eb4:	4626      	mov	r6, r4
 8004eb6:	e694      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004eb8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004ebc:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8004ec0:	d003      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004ec2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004ec6:	f47f ae9e 	bne.w	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    if (ret == HAL_OK)
 8004eca:	b9ac      	cbnz	r4, 8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x910>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004ecc:	4a39      	ldr	r2, [pc, #228]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8004ece:	f8d5 10a0 	ldr.w	r1, [r5, #160]	@ 0xa0
 8004ed2:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004ed4:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8004ed8:	430b      	orrs	r3, r1
 8004eda:	6593      	str	r3, [r2, #88]	@ 0x58
 8004edc:	e695      	b.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x622>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ede:	2100      	movs	r1, #0
 8004ee0:	f105 0008 	add.w	r0, r5, #8
 8004ee4:	f7ff fa90 	bl	8004408 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ee8:	4604      	mov	r4, r0
        break;
 8004eea:	e7ee      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x8e2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004eec:	2102      	movs	r1, #2
 8004eee:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004ef2:	f7ff fb01 	bl	80044f8 <RCCEx_PLL3_Config>
 8004ef6:	e7f7      	b.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x900>
 8004ef8:	4626      	mov	r6, r4
 8004efa:	e686      	b.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x622>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004efc:	2102      	movs	r1, #2
 8004efe:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004f02:	f7ff faf9 	bl	80044f8 <RCCEx_PLL3_Config>
 8004f06:	e6c3      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
    switch (PeriphClkInit->AdcClockSelection)
 8004f08:	2601      	movs	r6, #1
 8004f0a:	4634      	mov	r4, r6
 8004f0c:	e6cc      	b.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 8004f0e:	4626      	mov	r6, r4
 8004f10:	e6ca      	b.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f12:	4a28      	ldr	r2, [pc, #160]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8004f14:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004f16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8004f1c:	b97c      	cbnz	r4, 8004f3e <HAL_RCCEx_PeriphCLKConfig+0x956>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f1e:	4a25      	ldr	r2, [pc, #148]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8004f20:	f8d5 1088 	ldr.w	r1, [r5, #136]	@ 0x88
 8004f24:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004f26:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004f2a:	430b      	orrs	r3, r1
 8004f2c:	6553      	str	r3, [r2, #84]	@ 0x54
 8004f2e:	e6ce      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x6e6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f30:	2101      	movs	r1, #1
 8004f32:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004f36:	f7ff fadf 	bl	80044f8 <RCCEx_PLL3_Config>
 8004f3a:	4604      	mov	r4, r0
        break;
 8004f3c:	e7ee      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x934>
 8004f3e:	4626      	mov	r6, r4
 8004f40:	e6c5      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x6e6>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f42:	4a1c      	ldr	r2, [pc, #112]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8004f44:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004f46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8004f4c:	b974      	cbnz	r4, 8004f6c <HAL_RCCEx_PeriphCLKConfig+0x984>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004f4e:	4a19      	ldr	r2, [pc, #100]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8004f50:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 8004f52:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8004f54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f58:	430b      	orrs	r3, r1
 8004f5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f5c:	e6c4      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x700>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f5e:	2102      	movs	r1, #2
 8004f60:	f105 0008 	add.w	r0, r5, #8
 8004f64:	f7ff fa50 	bl	8004408 <RCCEx_PLL2_Config>
 8004f68:	4604      	mov	r4, r0
        break;
 8004f6a:	e7ef      	b.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x964>
 8004f6c:	4626      	mov	r6, r4
 8004f6e:	e6bb      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    switch (PeriphClkInit->RngClockSelection)
 8004f70:	f420 7280 	bic.w	r2, r0, #256	@ 0x100
 8004f74:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8004f78:	f47f aed1 	bne.w	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x736>
    if (ret == HAL_OK)
 8004f7c:	2c00      	cmp	r4, #0
 8004f7e:	f47f aecf 	bne.w	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x738>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f82:	4c0c      	ldr	r4, [pc, #48]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8004f84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004f86:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004f8a:	4302      	orrs	r2, r0
 8004f8c:	6562      	str	r2, [r4, #84]	@ 0x54
      status = HAL_ERROR;
 8004f8e:	4634      	mov	r4, r6
 8004f90:	e6c6      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x738>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f92:	4f08      	ldr	r7, [pc, #32]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8004f94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f96:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004f9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
        break;
 8004f9c:	e7ee      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x994>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f9e:	2102      	movs	r1, #2
 8004fa0:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004fa4:	f7ff faa8 	bl	80044f8 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8004fa8:	2800      	cmp	r0, #0
 8004faa:	f43f af2e 	beq.w	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x822>
  return HAL_ERROR;
 8004fae:	2001      	movs	r0, #1
 8004fb0:	e72e      	b.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x828>
 8004fb2:	bf00      	nop
 8004fb4:	58024400 	.word	0x58024400

08004fb8 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8004fb8:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004fba:	f7ff f9df 	bl	800437c <HAL_RCC_GetHCLKFreq>
 8004fbe:	4b05      	ldr	r3, [pc, #20]	@ (8004fd4 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8004fc0:	4a05      	ldr	r2, [pc, #20]	@ (8004fd8 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004fc8:	5cd3      	ldrb	r3, [r2, r3]
 8004fca:	f003 031f 	and.w	r3, r3, #31
}
 8004fce:	40d8      	lsrs	r0, r3
 8004fd0:	bd08      	pop	{r3, pc}
 8004fd2:	bf00      	nop
 8004fd4:	58024400 	.word	0x58024400
 8004fd8:	0800cf3b 	.word	0x0800cf3b

08004fdc <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004fdc:	494f      	ldr	r1, [pc, #316]	@ (800511c <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 8004fde:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004fe0:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004fe2:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004fe4:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (pll2m != 0U)
 8004fe6:	f416 3f7c 	tst.w	r6, #258048	@ 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004fea:	f3c6 3305 	ubfx	r3, r6, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004fee:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
  if (pll2m != 0U)
 8004ff0:	f000 8090 	beq.w	8005114 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ff4:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004ff8:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004ffc:	f3c5 1200 	ubfx	r2, r5, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005000:	f004 0403 	and.w	r4, r4, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005004:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005008:	4353      	muls	r3, r2
    switch (pllsource)
 800500a:	2c01      	cmp	r4, #1
 800500c:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005010:	ee06 3a90 	vmov	s13, r3
 8005014:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8005018:	d06e      	beq.n	80050f8 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
 800501a:	2c02      	cmp	r4, #2
 800501c:	d05e      	beq.n	80050dc <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 800501e:	2c00      	cmp	r4, #0
 8005020:	d16a      	bne.n	80050f8 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005022:	680b      	ldr	r3, [r1, #0]
 8005024:	069b      	lsls	r3, r3, #26
 8005026:	d547      	bpl.n	80050b8 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005028:	680a      	ldr	r2, [r1, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800502a:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800502c:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 8005030:	4a3b      	ldr	r2, [pc, #236]	@ (8005120 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005032:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005036:	40ca      	lsrs	r2, r1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005038:	ee07 2a90 	vmov	s15, r2
 800503c:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8005040:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8005044:	ee07 3a10 	vmov	s14, r3
 8005048:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800504c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005050:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005054:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005058:	4a30      	ldr	r2, [pc, #192]	@ (800511c <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 800505a:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800505c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005060:	ee07 3a10 	vmov	s14, r3
 8005064:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005068:	ee37 7a06 	vadd.f32	s14, s14, s12
 800506c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005070:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005074:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005078:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800507a:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800507e:	ee07 3a10 	vmov	s14, r3
 8005082:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005086:	ee37 7a06 	vadd.f32	s14, s14, s12
 800508a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800508e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005092:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005096:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8005098:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800509c:	ee06 3a90 	vmov	s13, r3
 80050a0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80050a4:	ee76 6a86 	vadd.f32	s13, s13, s12
 80050a8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80050ac:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80050b0:	ee17 3a90 	vmov	r3, s15
 80050b4:	6083      	str	r3, [r0, #8]
}
 80050b6:	bd70      	pop	{r4, r5, r6, pc}
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80050b8:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 80050ba:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 8005124 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 80050be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050c2:	ee07 3a90 	vmov	s15, r3
 80050c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ce:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80050d2:	eec5 6a87 	vdiv.f32	s13, s11, s14
 80050d6:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 80050da:	e7bd      	b.n	8005058 <HAL_RCCEx_GetPLL2ClockFreq+0x7c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80050dc:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 80050de:	eddf 5a12 	vldr	s11, [pc, #72]	@ 8005128 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 80050e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050e6:	ee07 3a90 	vmov	s15, r3
 80050ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050f2:	ee77 7a86 	vadd.f32	s15, s15, s12
 80050f6:	e7ec      	b.n	80050d2 <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80050f8:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 80050fa:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 800512c <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 80050fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005102:	ee07 3a90 	vmov	s15, r3
 8005106:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800510a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800510e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005112:	e7de      	b.n	80050d2 <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005114:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005118:	e7cc      	b.n	80050b4 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 800511a:	bf00      	nop
 800511c:	58024400 	.word	0x58024400
 8005120:	03d09000 	.word	0x03d09000
 8005124:	4c742400 	.word	0x4c742400
 8005128:	4af42400 	.word	0x4af42400
 800512c:	4a742400 	.word	0x4a742400

08005130 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005130:	494f      	ldr	r1, [pc, #316]	@ (8005270 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 8005132:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005134:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005136:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005138:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (pll3m != 0U)
 800513a:	f016 7f7c 	tst.w	r6, #66060288	@ 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800513e:	f3c6 5305 	ubfx	r3, r6, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005142:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
  if (pll3m != 0U)
 8005144:	f000 8090 	beq.w	8005268 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005148:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800514c:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005150:	f3c5 2200 	ubfx	r2, r5, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005154:	f004 0403 	and.w	r4, r4, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005158:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800515c:	4353      	muls	r3, r2
    switch (pllsource)
 800515e:	2c01      	cmp	r4, #1
 8005160:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005164:	ee06 3a90 	vmov	s13, r3
 8005168:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 800516c:	d06e      	beq.n	800524c <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
 800516e:	2c02      	cmp	r4, #2
 8005170:	d05e      	beq.n	8005230 <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 8005172:	2c00      	cmp	r4, #0
 8005174:	d16a      	bne.n	800524c <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005176:	680b      	ldr	r3, [r1, #0]
 8005178:	069b      	lsls	r3, r3, #26
 800517a:	d547      	bpl.n	800520c <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800517c:	680a      	ldr	r2, [r1, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800517e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005180:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 8005184:	4a3b      	ldr	r2, [pc, #236]	@ (8005274 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005186:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800518a:	40ca      	lsrs	r2, r1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800518c:	ee07 2a90 	vmov	s15, r2
 8005190:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8005194:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8005198:	ee07 3a10 	vmov	s14, r3
 800519c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80051a0:	ee37 7a26 	vadd.f32	s14, s14, s13
 80051a4:	ee37 7a06 	vadd.f32	s14, s14, s12
 80051a8:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80051ac:	4a30      	ldr	r2, [pc, #192]	@ (8005270 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 80051ae:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80051b0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80051b4:	ee07 3a10 	vmov	s14, r3
 80051b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80051bc:	ee37 7a06 	vadd.f32	s14, s14, s12
 80051c0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80051c4:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80051c8:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80051cc:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80051ce:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80051d2:	ee07 3a10 	vmov	s14, r3
 80051d6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80051da:	ee37 7a06 	vadd.f32	s14, s14, s12
 80051de:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80051e2:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80051e6:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80051ea:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80051ec:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80051f0:	ee06 3a90 	vmov	s13, r3
 80051f4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80051f8:	ee76 6a86 	vadd.f32	s13, s13, s12
 80051fc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005200:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8005204:	ee17 3a90 	vmov	r3, s15
 8005208:	6083      	str	r3, [r0, #8]
}
 800520a:	bd70      	pop	{r4, r5, r6, pc}
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800520c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800520e:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 8005278 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8005212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005216:	ee07 3a90 	vmov	s15, r3
 800521a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800521e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005222:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005226:	eec5 6a87 	vdiv.f32	s13, s11, s14
 800522a:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 800522e:	e7bd      	b.n	80051ac <HAL_RCCEx_GetPLL3ClockFreq+0x7c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005230:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005232:	eddf 5a12 	vldr	s11, [pc, #72]	@ 800527c <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8005236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800523a:	ee07 3a90 	vmov	s15, r3
 800523e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005246:	ee77 7a86 	vadd.f32	s15, s15, s12
 800524a:	e7ec      	b.n	8005226 <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800524c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800524e:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 8005280 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 8005252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005256:	ee07 3a90 	vmov	s15, r3
 800525a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800525e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005262:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005266:	e7de      	b.n	8005226 <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005268:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800526c:	e7cc      	b.n	8005208 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 800526e:	bf00      	nop
 8005270:	58024400 	.word	0x58024400
 8005274:	03d09000 	.word	0x03d09000
 8005278:	4c742400 	.word	0x4c742400
 800527c:	4af42400 	.word	0x4af42400
 8005280:	4a742400 	.word	0x4a742400

08005284 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005284:	b510      	push	{r4, lr}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005286:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005288:	e852 3f00 	ldrex	r3, [r2]
 800528c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005290:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8005294:	6802      	ldr	r2, [r0, #0]
 8005296:	2900      	cmp	r1, #0
 8005298:	d1f5      	bne.n	8005286 <UART_EndRxTransfer+0x2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800529a:	4c0f      	ldr	r4, [pc, #60]	@ (80052d8 <UART_EndRxTransfer+0x54>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529c:	f102 0308 	add.w	r3, r2, #8
 80052a0:	e853 3f00 	ldrex	r3, [r3]
 80052a4:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a6:	f102 0c08 	add.w	ip, r2, #8
 80052aa:	e84c 3100 	strex	r1, r3, [ip]
 80052ae:	2900      	cmp	r1, #0
 80052b0:	d1f4      	bne.n	800529c <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052b2:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d107      	bne.n	80052c8 <UART_EndRxTransfer+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b8:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052bc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c0:	e842 3100 	strex	r1, r3, [r2]
 80052c4:	2900      	cmp	r1, #0
 80052c6:	d1f7      	bne.n	80052b8 <UART_EndRxTransfer+0x34>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052c8:	2320      	movs	r3, #32
 80052ca:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ce:	2300      	movs	r3, #0
 80052d0:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052d2:	6743      	str	r3, [r0, #116]	@ 0x74
}
 80052d4:	bd10      	pop	{r4, pc}
 80052d6:	bf00      	nop
 80052d8:	effffffe 	.word	0xeffffffe

080052dc <UART_SetConfig>:
{
 80052dc:	b530      	push	{r4, r5, lr}
 80052de:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 80052e0:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052e2:	69c0      	ldr	r0, [r0, #28]
{
 80052e4:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052e6:	6921      	ldr	r1, [r4, #16]
 80052e8:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052ea:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052ec:	430a      	orrs	r2, r1
 80052ee:	6961      	ldr	r1, [r4, #20]
 80052f0:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052f2:	499c      	ldr	r1, [pc, #624]	@ (8005564 <UART_SetConfig+0x288>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052f4:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052f6:	4029      	ands	r1, r5
 80052f8:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052fa:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052fc:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052fe:	685a      	ldr	r2, [r3, #4]
 8005300:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8005304:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005306:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005308:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800530a:	4a97      	ldr	r2, [pc, #604]	@ (8005568 <UART_SetConfig+0x28c>)
 800530c:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 800530e:	bf1c      	itt	ne
 8005310:	6a22      	ldrne	r2, [r4, #32]
 8005312:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005314:	689a      	ldr	r2, [r3, #8]
 8005316:	f022 426e 	bic.w	r2, r2, #3992977408	@ 0xee000000
 800531a:	f422 6230 	bic.w	r2, r2, #2816	@ 0xb00
 800531e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005320:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005322:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005324:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005326:	f022 020f 	bic.w	r2, r2, #15
 800532a:	430a      	orrs	r2, r1
 800532c:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800532e:	4a8f      	ldr	r2, [pc, #572]	@ (800556c <UART_SetConfig+0x290>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d128      	bne.n	8005386 <UART_SetConfig+0xaa>
 8005334:	4b8e      	ldr	r3, [pc, #568]	@ (8005570 <UART_SetConfig+0x294>)
 8005336:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005338:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800533c:	2b18      	cmp	r3, #24
 800533e:	f000 812f 	beq.w	80055a0 <UART_SetConfig+0x2c4>
 8005342:	d814      	bhi.n	800536e <UART_SetConfig+0x92>
 8005344:	2b08      	cmp	r3, #8
 8005346:	f000 8154 	beq.w	80055f2 <UART_SetConfig+0x316>
 800534a:	2b10      	cmp	r3, #16
 800534c:	f000 8102 	beq.w	8005554 <UART_SetConfig+0x278>
 8005350:	2b00      	cmp	r3, #0
 8005352:	f000 80f9 	beq.w	8005548 <UART_SetConfig+0x26c>
 8005356:	2380      	movs	r3, #128	@ 0x80
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005358:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800535c:	f040 80b4 	bne.w	80054c8 <UART_SetConfig+0x1ec>
    switch (clocksource)
 8005360:	2b08      	cmp	r3, #8
 8005362:	d846      	bhi.n	80053f2 <UART_SetConfig+0x116>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005364:	4668      	mov	r0, sp
 8005366:	f7ff fe39 	bl	8004fdc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800536a:	9801      	ldr	r0, [sp, #4]
        break;
 800536c:	e0e9      	b.n	8005542 <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800536e:	2b20      	cmp	r3, #32
 8005370:	f000 80dd 	beq.w	800552e <UART_SetConfig+0x252>
 8005374:	2b28      	cmp	r3, #40	@ 0x28
 8005376:	d1ee      	bne.n	8005356 <UART_SetConfig+0x7a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005378:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800537c:	f000 811d 	beq.w	80055ba <UART_SetConfig+0x2de>
        pclk = (uint32_t) LSE_VALUE;
 8005380:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8005384:	e0be      	b.n	8005504 <UART_SetConfig+0x228>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005386:	4a7b      	ldr	r2, [pc, #492]	@ (8005574 <UART_SetConfig+0x298>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d115      	bne.n	80053b8 <UART_SetConfig+0xdc>
 800538c:	4b78      	ldr	r3, [pc, #480]	@ (8005570 <UART_SetConfig+0x294>)
 800538e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005390:	f003 0307 	and.w	r3, r3, #7
 8005394:	2b05      	cmp	r3, #5
 8005396:	d82c      	bhi.n	80053f2 <UART_SetConfig+0x116>
 8005398:	a201      	add	r2, pc, #4	@ (adr r2, 80053a0 <UART_SetConfig+0xc4>)
 800539a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800539e:	bf00      	nop
 80053a0:	08005539 	.word	0x08005539
 80053a4:	080054c5 	.word	0x080054c5
 80053a8:	08005555 	.word	0x08005555
 80053ac:	080055a1 	.word	0x080055a1
 80053b0:	0800552f 	.word	0x0800552f
 80053b4:	08005379 	.word	0x08005379
 80053b8:	4a6f      	ldr	r2, [pc, #444]	@ (8005578 <UART_SetConfig+0x29c>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d0e6      	beq.n	800538c <UART_SetConfig+0xb0>
 80053be:	4a6f      	ldr	r2, [pc, #444]	@ (800557c <UART_SetConfig+0x2a0>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d0e3      	beq.n	800538c <UART_SetConfig+0xb0>
 80053c4:	4a6e      	ldr	r2, [pc, #440]	@ (8005580 <UART_SetConfig+0x2a4>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d0e0      	beq.n	800538c <UART_SetConfig+0xb0>
 80053ca:	4a6e      	ldr	r2, [pc, #440]	@ (8005584 <UART_SetConfig+0x2a8>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d118      	bne.n	8005402 <UART_SetConfig+0x126>
 80053d0:	4b67      	ldr	r3, [pc, #412]	@ (8005570 <UART_SetConfig+0x294>)
 80053d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80053d8:	2b18      	cmp	r3, #24
 80053da:	f000 80e1 	beq.w	80055a0 <UART_SetConfig+0x2c4>
 80053de:	d80a      	bhi.n	80053f6 <UART_SetConfig+0x11a>
 80053e0:	2b08      	cmp	r3, #8
 80053e2:	f000 8106 	beq.w	80055f2 <UART_SetConfig+0x316>
 80053e6:	2b10      	cmp	r3, #16
 80053e8:	f000 80b4 	beq.w	8005554 <UART_SetConfig+0x278>
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f000 80ab 	beq.w	8005548 <UART_SetConfig+0x26c>
        pclk = (uint32_t) CSI_VALUE;
 80053f2:	2001      	movs	r0, #1
 80053f4:	e049      	b.n	800548a <UART_SetConfig+0x1ae>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053f6:	2b20      	cmp	r3, #32
 80053f8:	f000 8099 	beq.w	800552e <UART_SetConfig+0x252>
 80053fc:	2b28      	cmp	r3, #40	@ 0x28
 80053fe:	d0bb      	beq.n	8005378 <UART_SetConfig+0x9c>
 8005400:	e7f7      	b.n	80053f2 <UART_SetConfig+0x116>
 8005402:	4a61      	ldr	r2, [pc, #388]	@ (8005588 <UART_SetConfig+0x2ac>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d0c1      	beq.n	800538c <UART_SetConfig+0xb0>
 8005408:	4a60      	ldr	r2, [pc, #384]	@ (800558c <UART_SetConfig+0x2b0>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d0be      	beq.n	800538c <UART_SetConfig+0xb0>
 800540e:	4a56      	ldr	r2, [pc, #344]	@ (8005568 <UART_SetConfig+0x28c>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d1ee      	bne.n	80053f2 <UART_SetConfig+0x116>
 8005414:	f502 320e 	add.w	r2, r2, #145408	@ 0x23800
 8005418:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800541a:	f003 0307 	and.w	r3, r3, #7
 800541e:	2b05      	cmp	r3, #5
 8005420:	d8e7      	bhi.n	80053f2 <UART_SetConfig+0x116>
 8005422:	e8df f003 	tbb	[pc, r3]
 8005426:	2b49      	.short	0x2b49
 8005428:	4c033f3a 	.word	0x4c033f3a
        pclk = (uint32_t) CSI_VALUE;
 800542c:	4858      	ldr	r0, [pc, #352]	@ (8005590 <UART_SetConfig+0x2b4>)
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800542e:	4b59      	ldr	r3, [pc, #356]	@ (8005594 <UART_SetConfig+0x2b8>)
 8005430:	6a62      	ldr	r2, [r4, #36]	@ 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005432:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005434:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005438:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800543c:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005440:	4299      	cmp	r1, r3
 8005442:	d8d6      	bhi.n	80053f2 <UART_SetConfig+0x116>
 8005444:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8005448:	d8d3      	bhi.n	80053f2 <UART_SetConfig+0x116>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800544a:	2300      	movs	r3, #0
 800544c:	4619      	mov	r1, r3
 800544e:	f7fa ff9f 	bl	8000390 <__aeabi_uldivmod>
 8005452:	462a      	mov	r2, r5
 8005454:	0209      	lsls	r1, r1, #8
 8005456:	086b      	lsrs	r3, r5, #1
 8005458:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800545c:	0200      	lsls	r0, r0, #8
 800545e:	18c0      	adds	r0, r0, r3
 8005460:	f04f 0300 	mov.w	r3, #0
 8005464:	f141 0100 	adc.w	r1, r1, #0
 8005468:	f7fa ff92 	bl	8000390 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800546c:	4b4a      	ldr	r3, [pc, #296]	@ (8005598 <UART_SetConfig+0x2bc>)
 800546e:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8005472:	429a      	cmp	r2, r3
 8005474:	d8bd      	bhi.n	80053f2 <UART_SetConfig+0x116>
          huart->Instance->BRR = usartdiv;
 8005476:	6823      	ldr	r3, [r4, #0]
 8005478:	60d8      	str	r0, [r3, #12]
 800547a:	e005      	b.n	8005488 <UART_SetConfig+0x1ac>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800547c:	4668      	mov	r0, sp
 800547e:	f7ff fdad 	bl	8004fdc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005482:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 8005484:	2800      	cmp	r0, #0
 8005486:	d1d2      	bne.n	800542e <UART_SetConfig+0x152>
        pclk = (uint32_t) CSI_VALUE;
 8005488:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 800548a:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 800548e:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 8005490:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8005492:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
}
 8005496:	b007      	add	sp, #28
 8005498:	bd30      	pop	{r4, r5, pc}
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800549a:	a803      	add	r0, sp, #12
 800549c:	f7ff fe48 	bl	8005130 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80054a0:	9804      	ldr	r0, [sp, #16]
        break;
 80054a2:	e7ef      	b.n	8005484 <UART_SetConfig+0x1a8>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054a4:	6813      	ldr	r3, [r2, #0]
 80054a6:	483d      	ldr	r0, [pc, #244]	@ (800559c <UART_SetConfig+0x2c0>)
 80054a8:	f013 0f20 	tst.w	r3, #32
 80054ac:	d0bf      	beq.n	800542e <UART_SetConfig+0x152>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80054ae:	6813      	ldr	r3, [r2, #0]
 80054b0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80054b4:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 80054b6:	e7ba      	b.n	800542e <UART_SetConfig+0x152>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80054b8:	f7ff fd7e 	bl	8004fb8 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 80054bc:	e7e2      	b.n	8005484 <UART_SetConfig+0x1a8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054be:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80054c2:	e7b4      	b.n	800542e <UART_SetConfig+0x152>
 80054c4:	2304      	movs	r3, #4
 80054c6:	e747      	b.n	8005358 <UART_SetConfig+0x7c>
    switch (clocksource)
 80054c8:	2b08      	cmp	r3, #8
 80054ca:	d892      	bhi.n	80053f2 <UART_SetConfig+0x116>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054cc:	4668      	mov	r0, sp
 80054ce:	f7ff fd85 	bl	8004fdc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80054d2:	9801      	ldr	r0, [sp, #4]
        break;
 80054d4:	e001      	b.n	80054da <UART_SetConfig+0x1fe>
        pclk = HAL_RCC_GetPCLK1Freq();
 80054d6:	f7fe ff73 	bl	80043c0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80054da:	2800      	cmp	r0, #0
 80054dc:	d0d4      	beq.n	8005488 <UART_SetConfig+0x1ac>
 80054de:	e011      	b.n	8005504 <UART_SetConfig+0x228>
        pclk = HAL_RCC_GetPCLK2Freq();
 80054e0:	f7fe ff80 	bl	80043e4 <HAL_RCC_GetPCLK2Freq>
        break;
 80054e4:	e7f9      	b.n	80054da <UART_SetConfig+0x1fe>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054e6:	a803      	add	r0, sp, #12
 80054e8:	f7ff fe22 	bl	8005130 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80054ec:	9804      	ldr	r0, [sp, #16]
        break;
 80054ee:	e7f4      	b.n	80054da <UART_SetConfig+0x1fe>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054f0:	4b1f      	ldr	r3, [pc, #124]	@ (8005570 <UART_SetConfig+0x294>)
 80054f2:	482a      	ldr	r0, [pc, #168]	@ (800559c <UART_SetConfig+0x2c0>)
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	f012 0f20 	tst.w	r2, #32
 80054fa:	d003      	beq.n	8005504 <UART_SetConfig+0x228>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005502:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005504:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005506:	4b23      	ldr	r3, [pc, #140]	@ (8005594 <UART_SetConfig+0x2b8>)
 8005508:	6862      	ldr	r2, [r4, #4]
 800550a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800550e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005512:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8005516:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800551a:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 800551e:	f1a3 0110 	sub.w	r1, r3, #16
 8005522:	4291      	cmp	r1, r2
 8005524:	f63f af65 	bhi.w	80053f2 <UART_SetConfig+0x116>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005528:	6822      	ldr	r2, [r4, #0]
 800552a:	60d3      	str	r3, [r2, #12]
 800552c:	e7ac      	b.n	8005488 <UART_SetConfig+0x1ac>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800552e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005532:	4817      	ldr	r0, [pc, #92]	@ (8005590 <UART_SetConfig+0x2b4>)
 8005534:	d1e6      	bne.n	8005504 <UART_SetConfig+0x228>
 8005536:	e040      	b.n	80055ba <UART_SetConfig+0x2de>
 8005538:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800553c:	d1cb      	bne.n	80054d6 <UART_SetConfig+0x1fa>
        pclk = HAL_RCC_GetPCLK1Freq();
 800553e:	f7fe ff3f 	bl	80043c0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005542:	2800      	cmp	r0, #0
 8005544:	d0a0      	beq.n	8005488 <UART_SetConfig+0x1ac>
 8005546:	e038      	b.n	80055ba <UART_SetConfig+0x2de>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005548:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800554c:	d1c8      	bne.n	80054e0 <UART_SetConfig+0x204>
        pclk = HAL_RCC_GetPCLK2Freq();
 800554e:	f7fe ff49 	bl	80043e4 <HAL_RCC_GetPCLK2Freq>
        break;
 8005552:	e7f6      	b.n	8005542 <UART_SetConfig+0x266>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005554:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005558:	d1c5      	bne.n	80054e6 <UART_SetConfig+0x20a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800555a:	a803      	add	r0, sp, #12
 800555c:	f7ff fde8 	bl	8005130 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005560:	9804      	ldr	r0, [sp, #16]
        break;
 8005562:	e7ee      	b.n	8005542 <UART_SetConfig+0x266>
 8005564:	cfff69f3 	.word	0xcfff69f3
 8005568:	58000c00 	.word	0x58000c00
 800556c:	40011000 	.word	0x40011000
 8005570:	58024400 	.word	0x58024400
 8005574:	40004400 	.word	0x40004400
 8005578:	40004800 	.word	0x40004800
 800557c:	40004c00 	.word	0x40004c00
 8005580:	40005000 	.word	0x40005000
 8005584:	40011400 	.word	0x40011400
 8005588:	40007800 	.word	0x40007800
 800558c:	40007c00 	.word	0x40007c00
 8005590:	003d0900 	.word	0x003d0900
 8005594:	0800cf54 	.word	0x0800cf54
 8005598:	000ffcff 	.word	0x000ffcff
 800559c:	03d09000 	.word	0x03d09000
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055a0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80055a4:	d1a4      	bne.n	80054f0 <UART_SetConfig+0x214>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055a6:	4b15      	ldr	r3, [pc, #84]	@ (80055fc <UART_SetConfig+0x320>)
 80055a8:	4815      	ldr	r0, [pc, #84]	@ (8005600 <UART_SetConfig+0x324>)
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	f012 0f20 	tst.w	r2, #32
 80055b0:	d003      	beq.n	80055ba <UART_SetConfig+0x2de>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80055b8:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055ba:	4b12      	ldr	r3, [pc, #72]	@ (8005604 <UART_SetConfig+0x328>)
 80055bc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80055be:	6861      	ldr	r1, [r4, #4]
 80055c0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80055c4:	084b      	lsrs	r3, r1, #1
 80055c6:	fbb0 f2f2 	udiv	r2, r0, r2
 80055ca:	eb03 0342 	add.w	r3, r3, r2, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055ce:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055d2:	fbb3 f3f1 	udiv	r3, r3, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055d6:	f1a3 0110 	sub.w	r1, r3, #16
 80055da:	4291      	cmp	r1, r2
 80055dc:	f63f af09 	bhi.w	80053f2 <UART_SetConfig+0x116>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055e0:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055e4:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 80055e8:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055ea:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 80055ec:	4313      	orrs	r3, r2
 80055ee:	60cb      	str	r3, [r1, #12]
 80055f0:	e74a      	b.n	8005488 <UART_SetConfig+0x1ac>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055f2:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80055f6:	f47f af69 	bne.w	80054cc <UART_SetConfig+0x1f0>
 80055fa:	e6b3      	b.n	8005364 <UART_SetConfig+0x88>
 80055fc:	58024400 	.word	0x58024400
 8005600:	03d09000 	.word	0x03d09000
 8005604:	0800cf54 	.word	0x0800cf54

08005608 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005608:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800560a:	071a      	lsls	r2, r3, #28
{
 800560c:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800560e:	d506      	bpl.n	800561e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005610:	6801      	ldr	r1, [r0, #0]
 8005612:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8005614:	684a      	ldr	r2, [r1, #4]
 8005616:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800561a:	4322      	orrs	r2, r4
 800561c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800561e:	07dc      	lsls	r4, r3, #31
 8005620:	d506      	bpl.n	8005630 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005622:	6801      	ldr	r1, [r0, #0]
 8005624:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8005626:	684a      	ldr	r2, [r1, #4]
 8005628:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800562c:	4322      	orrs	r2, r4
 800562e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005630:	0799      	lsls	r1, r3, #30
 8005632:	d506      	bpl.n	8005642 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005634:	6801      	ldr	r1, [r0, #0]
 8005636:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8005638:	684a      	ldr	r2, [r1, #4]
 800563a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800563e:	4322      	orrs	r2, r4
 8005640:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005642:	075a      	lsls	r2, r3, #29
 8005644:	d506      	bpl.n	8005654 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005646:	6801      	ldr	r1, [r0, #0]
 8005648:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 800564a:	684a      	ldr	r2, [r1, #4]
 800564c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005650:	4322      	orrs	r2, r4
 8005652:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005654:	06dc      	lsls	r4, r3, #27
 8005656:	d506      	bpl.n	8005666 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005658:	6801      	ldr	r1, [r0, #0]
 800565a:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 800565c:	688a      	ldr	r2, [r1, #8]
 800565e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005662:	4322      	orrs	r2, r4
 8005664:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005666:	0699      	lsls	r1, r3, #26
 8005668:	d506      	bpl.n	8005678 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800566a:	6801      	ldr	r1, [r0, #0]
 800566c:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 800566e:	688a      	ldr	r2, [r1, #8]
 8005670:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005674:	4322      	orrs	r2, r4
 8005676:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005678:	065a      	lsls	r2, r3, #25
 800567a:	d510      	bpl.n	800569e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800567c:	6801      	ldr	r1, [r0, #0]
 800567e:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8005680:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005682:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005686:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800568a:	ea42 0204 	orr.w	r2, r2, r4
 800568e:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005690:	d105      	bne.n	800569e <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005692:	684a      	ldr	r2, [r1, #4]
 8005694:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8005696:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 800569a:	4322      	orrs	r2, r4
 800569c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800569e:	061b      	lsls	r3, r3, #24
 80056a0:	d506      	bpl.n	80056b0 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056a2:	6802      	ldr	r2, [r0, #0]
 80056a4:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 80056a6:	6853      	ldr	r3, [r2, #4]
 80056a8:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80056ac:	430b      	orrs	r3, r1
 80056ae:	6053      	str	r3, [r2, #4]
}
 80056b0:	bd10      	pop	{r4, pc}

080056b2 <UART_WaitOnFlagUntilTimeout>:
{
 80056b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056b6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80056ba:	4604      	mov	r4, r0
 80056bc:	460d      	mov	r5, r1
 80056be:	4617      	mov	r7, r2
 80056c0:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056c2:	6822      	ldr	r2, [r4, #0]
 80056c4:	69d3      	ldr	r3, [r2, #28]
 80056c6:	ea35 0303 	bics.w	r3, r5, r3
 80056ca:	bf0c      	ite	eq
 80056cc:	2301      	moveq	r3, #1
 80056ce:	2300      	movne	r3, #0
 80056d0:	42bb      	cmp	r3, r7
 80056d2:	d001      	beq.n	80056d8 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80056d4:	2000      	movs	r0, #0
 80056d6:	e022      	b.n	800571e <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 80056d8:	f1b9 3fff 	cmp.w	r9, #4294967295
 80056dc:	d0f2      	beq.n	80056c4 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056de:	f7fb ff19 	bl	8001514 <HAL_GetTick>
 80056e2:	eba0 0008 	sub.w	r0, r0, r8
 80056e6:	4548      	cmp	r0, r9
 80056e8:	d829      	bhi.n	800573e <UART_WaitOnFlagUntilTimeout+0x8c>
 80056ea:	f1b9 0f00 	cmp.w	r9, #0
 80056ee:	d026      	beq.n	800573e <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80056f0:	6821      	ldr	r1, [r4, #0]
 80056f2:	680b      	ldr	r3, [r1, #0]
 80056f4:	075a      	lsls	r2, r3, #29
 80056f6:	d5e4      	bpl.n	80056c2 <UART_WaitOnFlagUntilTimeout+0x10>
 80056f8:	2d80      	cmp	r5, #128	@ 0x80
 80056fa:	d0e2      	beq.n	80056c2 <UART_WaitOnFlagUntilTimeout+0x10>
 80056fc:	2d40      	cmp	r5, #64	@ 0x40
 80056fe:	d0e0      	beq.n	80056c2 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005700:	69ce      	ldr	r6, [r1, #28]
 8005702:	f016 0608 	ands.w	r6, r6, #8
 8005706:	d00c      	beq.n	8005722 <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005708:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
 800570a:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800570c:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
 800570e:	f7ff fdb9 	bl	8005284 <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 8005712:	2300      	movs	r3, #0
          return HAL_ERROR;
 8005714:	2001      	movs	r0, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005716:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 800571a:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 800571e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005722:	69cb      	ldr	r3, [r1, #28]
 8005724:	051b      	lsls	r3, r3, #20
 8005726:	d5cc      	bpl.n	80056c2 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005728:	f44f 6300 	mov.w	r3, #2048	@ 0x800
          UART_EndRxTransfer(huart);
 800572c:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800572e:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 8005730:	f7ff fda8 	bl	8005284 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005734:	2320      	movs	r3, #32
          __HAL_UNLOCK(huart);
 8005736:	f884 6084 	strb.w	r6, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800573a:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        return HAL_TIMEOUT;
 800573e:	2003      	movs	r0, #3
 8005740:	e7ed      	b.n	800571e <UART_WaitOnFlagUntilTimeout+0x6c>

08005742 <HAL_UART_Transmit>:
{
 8005742:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005746:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8005748:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 800574c:	4604      	mov	r4, r0
 800574e:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8005750:	2b20      	cmp	r3, #32
{
 8005752:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8005754:	d146      	bne.n	80057e4 <HAL_UART_Transmit+0xa2>
    if ((pData == NULL) || (Size == 0U))
 8005756:	2900      	cmp	r1, #0
 8005758:	d046      	beq.n	80057e8 <HAL_UART_Transmit+0xa6>
 800575a:	2a00      	cmp	r2, #0
 800575c:	d044      	beq.n	80057e8 <HAL_UART_Transmit+0xa6>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800575e:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005760:	2500      	movs	r5, #0
 8005762:	f8c0 5090 	str.w	r5, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005766:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    tickstart = HAL_GetTick();
 800576a:	f7fb fed3 	bl	8001514 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800576e:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8005770:	4681      	mov	r9, r0
    huart->TxXferSize  = Size;
 8005772:	f8a4 7054 	strh.w	r7, [r4, #84]	@ 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005776:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 800577a:	f8a4 7056 	strh.w	r7, [r4, #86]	@ 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800577e:	d103      	bne.n	8005788 <HAL_UART_Transmit+0x46>
 8005780:	6923      	ldr	r3, [r4, #16]
 8005782:	b90b      	cbnz	r3, 8005788 <HAL_UART_Transmit+0x46>
 8005784:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8005786:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8005788:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800578c:	464b      	mov	r3, r9
 800578e:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8005792:	b292      	uxth	r2, r2
 8005794:	b942      	cbnz	r2, 80057a8 <HAL_UART_Transmit+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005796:	2140      	movs	r1, #64	@ 0x40
 8005798:	4620      	mov	r0, r4
 800579a:	f7ff ff8a 	bl	80056b2 <UART_WaitOnFlagUntilTimeout>
 800579e:	2320      	movs	r3, #32
 80057a0:	b948      	cbnz	r0, 80057b6 <HAL_UART_Transmit+0x74>
    huart->gState = HAL_UART_STATE_READY;
 80057a2:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    return HAL_OK;
 80057a6:	e009      	b.n	80057bc <HAL_UART_Transmit+0x7a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057a8:	2200      	movs	r2, #0
 80057aa:	2180      	movs	r1, #128	@ 0x80
 80057ac:	4620      	mov	r0, r4
 80057ae:	f7ff ff80 	bl	80056b2 <UART_WaitOnFlagUntilTimeout>
 80057b2:	b130      	cbz	r0, 80057c2 <HAL_UART_Transmit+0x80>
        huart->gState = HAL_UART_STATE_READY;
 80057b4:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 80057b6:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 80057b8:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
}
 80057bc:	b003      	add	sp, #12
 80057be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057c2:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80057c4:	b95e      	cbnz	r6, 80057de <HAL_UART_Transmit+0x9c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057c6:	f835 3b02 	ldrh.w	r3, [r5], #2
 80057ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80057ce:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 80057d0:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 80057d4:	3a01      	subs	r2, #1
 80057d6:	b292      	uxth	r2, r2
 80057d8:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
 80057dc:	e7d4      	b.n	8005788 <HAL_UART_Transmit+0x46>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80057de:	f816 3b01 	ldrb.w	r3, [r6], #1
 80057e2:	e7f4      	b.n	80057ce <HAL_UART_Transmit+0x8c>
    return HAL_BUSY;
 80057e4:	2002      	movs	r0, #2
 80057e6:	e7e9      	b.n	80057bc <HAL_UART_Transmit+0x7a>
      return  HAL_ERROR;
 80057e8:	2001      	movs	r0, #1
 80057ea:	e7e7      	b.n	80057bc <HAL_UART_Transmit+0x7a>

080057ec <UART_CheckIdleState>:
{
 80057ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ee:	2600      	movs	r6, #0
{
 80057f0:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057f2:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 80057f6:	f7fb fe8d 	bl	8001514 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057fa:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80057fc:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	071a      	lsls	r2, r3, #28
 8005802:	d51c      	bpl.n	800583e <UART_CheckIdleState+0x52>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005804:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005808:	4632      	mov	r2, r6
 800580a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800580e:	9300      	str	r3, [sp, #0]
 8005810:	4603      	mov	r3, r0
 8005812:	4620      	mov	r0, r4
 8005814:	f7ff ff4d 	bl	80056b2 <UART_WaitOnFlagUntilTimeout>
 8005818:	b188      	cbz	r0, 800583e <UART_CheckIdleState+0x52>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800581a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581c:	e852 3f00 	ldrex	r3, [r2]
 8005820:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005824:	e842 3100 	strex	r1, r3, [r2]
 8005828:	2900      	cmp	r1, #0
 800582a:	d1f6      	bne.n	800581a <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
 800582c:	2320      	movs	r3, #32
 800582e:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 8005832:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8005834:	2300      	movs	r3, #0
 8005836:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 800583a:	b002      	add	sp, #8
 800583c:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800583e:	6823      	ldr	r3, [r4, #0]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	075b      	lsls	r3, r3, #29
 8005844:	d524      	bpl.n	8005890 <UART_CheckIdleState+0xa4>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005846:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800584a:	2200      	movs	r2, #0
 800584c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005850:	4620      	mov	r0, r4
 8005852:	9300      	str	r3, [sp, #0]
 8005854:	462b      	mov	r3, r5
 8005856:	f7ff ff2c 	bl	80056b2 <UART_WaitOnFlagUntilTimeout>
 800585a:	b1c8      	cbz	r0, 8005890 <UART_CheckIdleState+0xa4>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800585c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585e:	e852 3f00 	ldrex	r3, [r2]
 8005862:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005866:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800586a:	6822      	ldr	r2, [r4, #0]
 800586c:	2900      	cmp	r1, #0
 800586e:	d1f5      	bne.n	800585c <UART_CheckIdleState+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005870:	f102 0308 	add.w	r3, r2, #8
 8005874:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005878:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587c:	f102 0008 	add.w	r0, r2, #8
 8005880:	e840 3100 	strex	r1, r3, [r0]
 8005884:	2900      	cmp	r1, #0
 8005886:	d1f3      	bne.n	8005870 <UART_CheckIdleState+0x84>
      huart->RxState = HAL_UART_STATE_READY;
 8005888:	2320      	movs	r3, #32
 800588a:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 800588e:	e7d0      	b.n	8005832 <UART_CheckIdleState+0x46>
  huart->gState = HAL_UART_STATE_READY;
 8005890:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005892:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8005894:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005898:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800589c:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800589e:	6720      	str	r0, [r4, #112]	@ 0x70
  return HAL_OK;
 80058a0:	e7c8      	b.n	8005834 <UART_CheckIdleState+0x48>

080058a2 <HAL_UART_Init>:
{
 80058a2:	b510      	push	{r4, lr}
  if (huart == NULL)
 80058a4:	4604      	mov	r4, r0
 80058a6:	b350      	cbz	r0, 80058fe <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 80058a8:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 80058ac:	b91b      	cbnz	r3, 80058b6 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 80058ae:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 80058b2:	f7fb fcc5 	bl	8001240 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80058b6:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 80058b8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80058ba:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 80058be:	6813      	ldr	r3, [r2, #0]
 80058c0:	f023 0301 	bic.w	r3, r3, #1
 80058c4:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058c6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80058c8:	b113      	cbz	r3, 80058d0 <HAL_UART_Init+0x2e>
    UART_AdvFeatureConfig(huart);
 80058ca:	4620      	mov	r0, r4
 80058cc:	f7ff fe9c 	bl	8005608 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058d0:	4620      	mov	r0, r4
 80058d2:	f7ff fd03 	bl	80052dc <UART_SetConfig>
 80058d6:	2801      	cmp	r0, #1
 80058d8:	d011      	beq.n	80058fe <HAL_UART_Init+0x5c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058da:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 80058dc:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058de:	685a      	ldr	r2, [r3, #4]
 80058e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80058e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058e6:	689a      	ldr	r2, [r3, #8]
 80058e8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80058ec:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	f042 0201 	orr.w	r2, r2, #1
}
 80058f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 80058f8:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80058fa:	f7ff bf77 	b.w	80057ec <UART_CheckIdleState>
}
 80058fe:	2001      	movs	r0, #1
 8005900:	bd10      	pop	{r4, pc}
	...

08005904 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005904:	6e43      	ldr	r3, [r0, #100]	@ 0x64
{
 8005906:	b530      	push	{r4, r5, lr}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005908:	b92b      	cbnz	r3, 8005916 <UARTEx_SetNbDataToProcess+0x12>
  {
    huart->NbTxDataToProcess = 1U;
 800590a:	2301      	movs	r3, #1
 800590c:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005910:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005914:	bd30      	pop	{r4, r5, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005916:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005918:	4d09      	ldr	r5, [pc, #36]	@ (8005940 <UARTEx_SetNbDataToProcess+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800591a:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800591c:	6899      	ldr	r1, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 800591e:	4c09      	ldr	r4, [pc, #36]	@ (8005944 <UARTEx_SetNbDataToProcess+0x40>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005920:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005924:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005926:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 8005928:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800592a:	011b      	lsls	r3, r3, #4
 800592c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005930:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005934:	5cab      	ldrb	r3, [r5, r2]
                               (uint16_t)denominator[rx_fifo_threshold];
 8005936:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005938:	011b      	lsls	r3, r3, #4
 800593a:	fbb3 f3f2 	udiv	r3, r3, r2
}
 800593e:	e7e7      	b.n	8005910 <UARTEx_SetNbDataToProcess+0xc>
 8005940:	0800cf74 	.word	0x0800cf74
 8005944:	0800cf6c 	.word	0x0800cf6c

08005948 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8005948:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 800594c:	2b01      	cmp	r3, #1
 800594e:	d014      	beq.n	800597a <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005950:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005952:	2324      	movs	r3, #36	@ 0x24
 8005954:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005958:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800595a:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800595c:	f021 5100 	bic.w	r1, r1, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 8005960:	f023 0301 	bic.w	r3, r3, #1
 8005964:	6013      	str	r3, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005966:	2300      	movs	r3, #0
 8005968:	6643      	str	r3, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800596a:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800596c:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 800596e:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_READY;
 8005972:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  return HAL_OK;
 8005976:	4618      	mov	r0, r3
 8005978:	4770      	bx	lr
  __HAL_LOCK(huart);
 800597a:	2002      	movs	r0, #2
}
 800597c:	4770      	bx	lr

0800597e <HAL_UARTEx_SetTxFifoThreshold>:
{
 800597e:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8005980:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
{
 8005984:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8005986:	2b01      	cmp	r3, #1
 8005988:	d017      	beq.n	80059ba <HAL_UARTEx_SetTxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800598a:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800598c:	2324      	movs	r3, #36	@ 0x24
 800598e:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005992:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8005994:	682b      	ldr	r3, [r5, #0]
 8005996:	f023 0301 	bic.w	r3, r3, #1
 800599a:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800599c:	68ab      	ldr	r3, [r5, #8]
 800599e:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 80059a2:	4319      	orrs	r1, r3
 80059a4:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 80059a6:	f7ff ffad 	bl	8005904 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 80059aa:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059ac:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 80059ae:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 80059b2:	2000      	movs	r0, #0
 80059b4:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 80059b8:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 80059ba:	2002      	movs	r0, #2
 80059bc:	e7fc      	b.n	80059b8 <HAL_UARTEx_SetTxFifoThreshold+0x3a>

080059be <HAL_UARTEx_SetRxFifoThreshold>:
{
 80059be:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 80059c0:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
{
 80059c4:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d017      	beq.n	80059fa <HAL_UARTEx_SetRxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059ca:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80059cc:	2324      	movs	r3, #36	@ 0x24
 80059ce:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059d2:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 80059d4:	682b      	ldr	r3, [r5, #0]
 80059d6:	f023 0301 	bic.w	r3, r3, #1
 80059da:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80059dc:	68ab      	ldr	r3, [r5, #8]
 80059de:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 80059e2:	4319      	orrs	r1, r3
 80059e4:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 80059e6:	f7ff ff8d 	bl	8005904 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 80059ea:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059ec:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 80059ee:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 80059f2:	2000      	movs	r0, #0
 80059f4:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 80059f8:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 80059fa:	2002      	movs	r0, #2
 80059fc:	e7fc      	b.n	80059f8 <HAL_UARTEx_SetRxFifoThreshold+0x3a>
	...

08005a00 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 8005a00:	b570      	push	{r4, r5, r6, lr}
  err = ai_network_create_and_init(&network, act_addr, NULL);
 8005a02:	4c13      	ldr	r4, [pc, #76]	@ (8005a50 <MX_X_CUBE_AI_Init+0x50>)
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 8005a04:	4813      	ldr	r0, [pc, #76]	@ (8005a54 <MX_X_CUBE_AI_Init+0x54>)
 8005a06:	f006 f8a9 	bl	800bb5c <puts>
  err = ai_network_create_and_init(&network, act_addr, NULL);
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	4912      	ldr	r1, [pc, #72]	@ (8005a58 <MX_X_CUBE_AI_Init+0x58>)
 8005a0e:	4620      	mov	r0, r4
 8005a10:	f000 f976 	bl	8005d00 <ai_network_create_and_init>
  if (err.type != AI_ERROR_NONE) {
 8005a14:	f010 05ff 	ands.w	r5, r0, #255	@ 0xff
 8005a18:	d006      	beq.n	8005a28 <MX_X_CUBE_AI_Init+0x28>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8005a1a:	0a03      	lsrs	r3, r0, #8
 8005a1c:	462a      	mov	r2, r5
 8005a1e:	490f      	ldr	r1, [pc, #60]	@ (8005a5c <MX_X_CUBE_AI_Init+0x5c>)
 8005a20:	480f      	ldr	r0, [pc, #60]	@ (8005a60 <MX_X_CUBE_AI_Init+0x60>)
 8005a22:	f006 f833 	bl	800ba8c <iprintf>
  do {} while (1);
 8005a26:	e7fe      	b.n	8005a26 <MX_X_CUBE_AI_Init+0x26>
  ai_input = ai_network_inputs_get(network, NULL);
 8005a28:	4e0e      	ldr	r6, [pc, #56]	@ (8005a64 <MX_X_CUBE_AI_Init+0x64>)
 8005a2a:	4629      	mov	r1, r5
 8005a2c:	6820      	ldr	r0, [r4, #0]
 8005a2e:	f000 f861 	bl	8005af4 <ai_network_inputs_get>
  ai_output = ai_network_outputs_get(network, NULL);
 8005a32:	4629      	mov	r1, r5
  ai_input = ai_network_inputs_get(network, NULL);
 8005a34:	6030      	str	r0, [r6, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 8005a36:	6820      	ldr	r0, [r4, #0]
 8005a38:	f000 f866 	bl	8005b08 <ai_network_outputs_get>
 8005a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8005a68 <MX_X_CUBE_AI_Init+0x68>)
 8005a3e:	6018      	str	r0, [r3, #0]
	data_ins[idx] = ai_input[idx].data;
 8005a40:	6833      	ldr	r3, [r6, #0]
 8005a42:	685a      	ldr	r2, [r3, #4]
 8005a44:	4b09      	ldr	r3, [pc, #36]	@ (8005a6c <MX_X_CUBE_AI_Init+0x6c>)
 8005a46:	601a      	str	r2, [r3, #0]
	data_outs[idx] = ai_output[idx].data;
 8005a48:	6842      	ldr	r2, [r0, #4]
 8005a4a:	4b09      	ldr	r3, [pc, #36]	@ (8005a70 <MX_X_CUBE_AI_Init+0x70>)
 8005a4c:	601a      	str	r2, [r3, #0]

  ai_boostrap(data_activations0);
    /* USER CODE END 5 */
}
 8005a4e:	bd70      	pop	{r4, r5, r6, pc}
 8005a50:	24000e20 	.word	0x24000e20
 8005a54:	0800cf7c 	.word	0x0800cf7c
 8005a58:	24000018 	.word	0x24000018
 8005a5c:	0800cf99 	.word	0x0800cf99
 8005a60:	0800cfb4 	.word	0x0800cfb4
 8005a64:	24000e1c 	.word	0x24000e1c
 8005a68:	24000e18 	.word	0x24000e18
 8005a6c:	2404b784 	.word	0x2404b784
 8005a70:	2404b780 	.word	0x2404b780

08005a74 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 8005a74:	b570      	push	{r4, r5, r6, lr}
    /* USER CODE BEGIN 6 */
  int res = -1;

  printf("TEMPLATE - run - main loop\r\n");

  if (network) {
 8005a76:	4c10      	ldr	r4, [pc, #64]	@ (8005ab8 <MX_X_CUBE_AI_Process+0x44>)
  printf("TEMPLATE - run - main loop\r\n");
 8005a78:	4810      	ldr	r0, [pc, #64]	@ (8005abc <MX_X_CUBE_AI_Process+0x48>)
 8005a7a:	f006 f86f 	bl	800bb5c <puts>
  if (network) {
 8005a7e:	6823      	ldr	r3, [r4, #0]
 8005a80:	b193      	cbz	r3, 8005aa8 <MX_X_CUBE_AI_Process+0x34>
  batch = ai_network_run(network, ai_input, ai_output);
 8005a82:	4e0f      	ldr	r6, [pc, #60]	@ (8005ac0 <MX_X_CUBE_AI_Process+0x4c>)
 8005a84:	4d0f      	ldr	r5, [pc, #60]	@ (8005ac4 <MX_X_CUBE_AI_Process+0x50>)
 8005a86:	6832      	ldr	r2, [r6, #0]
 8005a88:	6829      	ldr	r1, [r5, #0]
 8005a8a:	6820      	ldr	r0, [r4, #0]
 8005a8c:	f000 f97f 	bl	8005d8e <ai_network_run>
  if (batch != 1) {
 8005a90:	2801      	cmp	r0, #1
 8005a92:	d0f8      	beq.n	8005a86 <MX_X_CUBE_AI_Process+0x12>
    ai_log_err(ai_network_get_error(network),
 8005a94:	6820      	ldr	r0, [r4, #0]
 8005a96:	f000 f81d 	bl	8005ad4 <ai_network_get_error>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8005a9a:	490b      	ldr	r1, [pc, #44]	@ (8005ac8 <MX_X_CUBE_AI_Process+0x54>)
 8005a9c:	0a03      	lsrs	r3, r0, #8
 8005a9e:	b2c2      	uxtb	r2, r0
 8005aa0:	480a      	ldr	r0, [pc, #40]	@ (8005acc <MX_X_CUBE_AI_Process+0x58>)
 8005aa2:	f005 fff3 	bl	800ba8c <iprintf>
  do {} while (1);
 8005aa6:	e7fe      	b.n	8005aa6 <MX_X_CUBE_AI_Process+0x32>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8005aa8:	2310      	movs	r3, #16
 8005aaa:	2211      	movs	r2, #17
 8005aac:	4908      	ldr	r1, [pc, #32]	@ (8005ad0 <MX_X_CUBE_AI_Process+0x5c>)
 8005aae:	4807      	ldr	r0, [pc, #28]	@ (8005acc <MX_X_CUBE_AI_Process+0x58>)
 8005ab0:	f005 ffec 	bl	800ba8c <iprintf>
  do {} while (1);
 8005ab4:	e7fe      	b.n	8005ab4 <MX_X_CUBE_AI_Process+0x40>
 8005ab6:	bf00      	nop
 8005ab8:	24000e20 	.word	0x24000e20
 8005abc:	0800cfe6 	.word	0x0800cfe6
 8005ac0:	24000e18 	.word	0x24000e18
 8005ac4:	24000e1c 	.word	0x24000e1c
 8005ac8:	0800d002 	.word	0x0800d002
 8005acc:	0800cfb4 	.word	0x0800cfb4
 8005ad0:	0800d011 	.word	0x0800d011

08005ad4 <ai_network_get_error>:
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 8005ad4:	f000 ba92 	b.w	8005ffc <ai_platform_network_get_error>

08005ad8 <ai_network_create>:
}

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8005ad8:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 8005ada:	2305      	movs	r3, #5
 8005adc:	2200      	movs	r2, #0
 8005ade:	e9cd 3200 	strd	r3, r2, [sp]
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	4a02      	ldr	r2, [pc, #8]	@ (8005af0 <ai_network_create+0x18>)
 8005ae6:	f000 feaf 	bl	8006848 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8005aea:	b003      	add	sp, #12
 8005aec:	f85d fb04 	ldr.w	pc, [sp], #4
 8005af0:	2400001c 	.word	0x2400001c

08005af4 <ai_network_inputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 8005af4:	b910      	cbnz	r0, 8005afc <ai_network_inputs_get+0x8>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8005af6:	4802      	ldr	r0, [pc, #8]	@ (8005b00 <ai_network_inputs_get+0xc>)
 8005af8:	4b02      	ldr	r3, [pc, #8]	@ (8005b04 <ai_network_inputs_get+0x10>)
 8005afa:	6003      	str	r3, [r0, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8005afc:	f000 bb90 	b.w	8006220 <ai_platform_inputs_get>
 8005b00:	2400001c 	.word	0x2400001c
 8005b04:	a1c00100 	.word	0xa1c00100

08005b08 <ai_network_outputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 8005b08:	b910      	cbnz	r0, 8005b10 <ai_network_outputs_get+0x8>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8005b0a:	4802      	ldr	r0, [pc, #8]	@ (8005b14 <ai_network_outputs_get+0xc>)
 8005b0c:	4b02      	ldr	r3, [pc, #8]	@ (8005b18 <ai_network_outputs_get+0x10>)
 8005b0e:	6003      	str	r3, [r0, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8005b10:	f000 bd12 	b.w	8006538 <ai_platform_outputs_get>
 8005b14:	2400001c 	.word	0x2400001c
 8005b18:	a1c00100 	.word	0xa1c00100

08005b1c <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8005b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b20:	4607      	mov	r7, r0
 8005b22:	4688      	mov	r8, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8005b24:	f001 f86a 	bl	8006bfc <ai_platform_network_init>
  if (!net_ctx) return false;
 8005b28:	4604      	mov	r4, r0
 8005b2a:	2800      	cmp	r0, #0
 8005b2c:	f000 80aa 	beq.w	8005c84 <ai_network_init+0x168>
  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 8005b30:	4e5b      	ldr	r6, [pc, #364]	@ (8005ca0 <ai_network_init+0x184>)
 8005b32:	4642      	mov	r2, r8
 8005b34:	2101      	movs	r1, #1
 8005b36:	4630      	mov	r0, r6
 8005b38:	f000 f996 	bl	8005e68 <ai_platform_get_weights_map>
 8005b3c:	4605      	mov	r5, r0
 8005b3e:	2800      	cmp	r0, #0
 8005b40:	f000 80a2 	beq.w	8005c88 <ai_network_init+0x16c>
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b44:	4a57      	ldr	r2, [pc, #348]	@ (8005ca4 <ai_network_init+0x188>)
 8005b46:	6813      	ldr	r3, [r2, #0]
 8005b48:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005b4c:	6013      	str	r3, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8005b4e:	6833      	ldr	r3, [r6, #0]
    conv2d_1_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8005b50:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b54:	4a54      	ldr	r2, [pc, #336]	@ (8005ca8 <ai_network_init+0x18c>)
    gemm_7_bias_array.data = AI_PTR(g_network_weights_map[0] + 654204);
 8005b56:	f503 261f 	add.w	r6, r3, #651264	@ 0x9f000
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b5a:	6811      	ldr	r1, [r2, #0]
 8005b5c:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8005b60:	6011      	str	r1, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 452);
 8005b62:	f503 71e2 	add.w	r1, r3, #452	@ 0x1c4
    conv2d_1_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 452);
 8005b66:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b6a:	4a50      	ldr	r2, [pc, #320]	@ (8005cac <ai_network_init+0x190>)
 8005b6c:	6811      	ldr	r1, [r2, #0]
 8005b6e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8005b72:	6011      	str	r1, [r2, #0]
    conv2d_3_weights_array.data = AI_PTR(g_network_weights_map[0] + 476);
 8005b74:	f503 71ee 	add.w	r1, r3, #476	@ 0x1dc
    conv2d_3_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 476);
 8005b78:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b7c:	4a4c      	ldr	r2, [pc, #304]	@ (8005cb0 <ai_network_init+0x194>)
 8005b7e:	6811      	ldr	r1, [r2, #0]
 8005b80:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8005b84:	6011      	str	r1, [r2, #0]
    conv2d_3_bias_array.data = AI_PTR(g_network_weights_map[0] + 1340);
 8005b86:	f203 513c 	addw	r1, r3, #1340	@ 0x53c
    conv2d_3_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 1340);
 8005b8a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_7_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b8e:	4a49      	ldr	r2, [pc, #292]	@ (8005cb4 <ai_network_init+0x198>)
 8005b90:	6811      	ldr	r1, [r2, #0]
 8005b92:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8005b96:	6011      	str	r1, [r2, #0]
    gemm_7_weights_array.data = AI_PTR(g_network_weights_map[0] + 1404);
 8005b98:	f203 517c 	addw	r1, r3, #1404	@ 0x57c
    gemm_8_bias_array.data = AI_PTR(g_network_weights_map[0] + 661164);
 8005b9c:	f503 2321 	add.w	r3, r3, #659456	@ 0xa1000
    gemm_7_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 1404);
 8005ba0:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8005ba4:	4a44      	ldr	r2, [pc, #272]	@ (8005cb8 <ai_network_init+0x19c>)
    gemm_8_bias_array.data = AI_PTR(g_network_weights_map[0] + 661164);
 8005ba6:	f203 63ac 	addw	r3, r3, #1708	@ 0x6ac
    gemm_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8005baa:	6811      	ldr	r1, [r2, #0]
 8005bac:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8005bb0:	6011      	str	r1, [r2, #0]
    gemm_7_bias_array.data = AI_PTR(g_network_weights_map[0] + 654204);
 8005bb2:	f606 317c 	addw	r1, r6, #2940	@ 0xb7c
    gemm_8_weights_array.data = AI_PTR(g_network_weights_map[0] + 654684);
 8005bb6:	f606 565c 	addw	r6, r6, #3420	@ 0xd5c
    gemm_7_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 654204);
 8005bba:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_8_weights_array.format |= AI_FMT_FLAG_CONST;
 8005bbe:	4a3f      	ldr	r2, [pc, #252]	@ (8005cbc <ai_network_init+0x1a0>)
 8005bc0:	6811      	ldr	r1, [r2, #0]
 8005bc2:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
    gemm_8_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 654684);
 8005bc6:	e9c2 6602 	strd	r6, r6, [r2, #8]
    gemm_8_weights_array.format |= AI_FMT_FLAG_CONST;
 8005bca:	6011      	str	r1, [r2, #0]
    gemm_8_bias_array.format |= AI_FMT_FLAG_CONST;
 8005bcc:	4a3c      	ldr	r2, [pc, #240]	@ (8005cc0 <ai_network_init+0x1a4>)
 8005bce:	6811      	ldr	r1, [r2, #0]
 8005bd0:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8005bd4:	6011      	str	r1, [r2, #0]
    gemm_8_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 661164);
 8005bd6:	e9c2 3302 	strd	r3, r3, [r2, #8]
  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 8005bda:	f8df 9120 	ldr.w	r9, [pc, #288]	@ 8005cfc <ai_network_init+0x1e0>
 8005bde:	4642      	mov	r2, r8
 8005be0:	2101      	movs	r1, #1
 8005be2:	4648      	mov	r0, r9
 8005be4:	f000 f998 	bl	8005f18 <ai_platform_get_activations_map>
 8005be8:	4606      	mov	r6, r0
 8005bea:	2800      	cmp	r0, #0
 8005bec:	d052      	beq.n	8005c94 <ai_network_init+0x178>
    serving_default_input_10_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005bee:	f8d9 3000 	ldr.w	r3, [r9]
 8005bf2:	4a34      	ldr	r2, [pc, #208]	@ (8005cc4 <ai_network_init+0x1a8>)
    conv2d_1_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 76368);
 8005bf4:	4934      	ldr	r1, [pc, #208]	@ (8005cc8 <ai_network_init+0x1ac>)
    serving_default_input_10_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005bf6:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conversion_0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005bfa:	4a34      	ldr	r2, [pc, #208]	@ (8005ccc <ai_network_init+0x1b0>)
    conversion_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005bfc:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_1_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 76368);
 8005c00:	f503 3295 	add.w	r2, r3, #76288	@ 0x12a00
 8005c04:	3250      	adds	r2, #80	@ 0x50
    conv2d_1_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 76368);
 8005c06:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_1_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 77652);
 8005c0a:	f503 3297 	add.w	r2, r3, #77312	@ 0x12e00
 8005c0e:	4930      	ldr	r1, [pc, #192]	@ (8005cd0 <ai_network_init+0x1b4>)
 8005c10:	f502 72aa 	add.w	r2, r2, #340	@ 0x154
    conv2d_1_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 77652);
 8005c14:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_1_output_array.data = AI_PTR(g_network_activations_map[0] + 78660);
 8005c18:	f503 3299 	add.w	r2, r3, #78336	@ 0x13200
 8005c1c:	492d      	ldr	r1, [pc, #180]	@ (8005cd4 <ai_network_init+0x1b8>)
 8005c1e:	f502 72a2 	add.w	r2, r2, #324	@ 0x144
    conv2d_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 78660);
 8005c22:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_3_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005c26:	4a2c      	ldr	r2, [pc, #176]	@ (8005cd8 <ai_network_init+0x1bc>)
    conv2d_3_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 2168);
 8005c28:	f603 0178 	addw	r1, r3, #2168	@ 0x878
    conv2d_3_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005c2c:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_3_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 2168);
 8005c30:	4a2a      	ldr	r2, [pc, #168]	@ (8005cdc <ai_network_init+0x1c0>)
    conv2d_3_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 2168);
 8005c32:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_3_output_array.data = AI_PTR(g_network_activations_map[0] + 3448);
 8005c36:	f603 5178 	addw	r1, r3, #3448	@ 0xd78
 8005c3a:	4a29      	ldr	r2, [pc, #164]	@ (8005ce0 <ai_network_init+0x1c4>)
    conv2d_3_output_array.data_start = AI_PTR(g_network_activations_map[0] + 3448);
 8005c3c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    transpose_5_output_array.data = AI_PTR(g_network_activations_map[0] + 8888);
 8005c40:	f503 520a 	add.w	r2, r3, #8832	@ 0x2280
 8005c44:	4927      	ldr	r1, [pc, #156]	@ (8005ce4 <ai_network_init+0x1c8>)
 8005c46:	3238      	adds	r2, #56	@ 0x38
    transpose_5_output_array.data_start = AI_PTR(g_network_activations_map[0] + 8888);
 8005c48:	e9c1 2202 	strd	r2, r2, [r1, #8]
    gemm_7_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 14328);
 8005c4c:	f503 525f 	add.w	r2, r3, #14272	@ 0x37c0
 8005c50:	4925      	ldr	r1, [pc, #148]	@ (8005ce8 <ai_network_init+0x1cc>)
 8005c52:	3238      	adds	r2, #56	@ 0x38
    gemm_7_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 14328);
 8005c54:	e9c1 2202 	strd	r2, r2, [r1, #8]
    gemm_7_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005c58:	4a24      	ldr	r2, [pc, #144]	@ (8005cec <ai_network_init+0x1d0>)
    gemm_8_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 120);
 8005c5a:	f103 0178 	add.w	r1, r3, #120	@ 0x78
    gemm_7_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005c5e:	e9c2 3302 	strd	r3, r3, [r2, #8]
    gemm_8_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 120);
 8005c62:	4a23      	ldr	r2, [pc, #140]	@ (8005cf0 <ai_network_init+0x1d4>)
    gemm_8_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 120);
 8005c64:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_8_output_array.data = AI_PTR(g_network_activations_map[0] + 360);
 8005c68:	4a22      	ldr	r2, [pc, #136]	@ (8005cf4 <ai_network_init+0x1d8>)
 8005c6a:	f503 71b4 	add.w	r1, r3, #360	@ 0x168
    gemm_8_output_array.data_start = AI_PTR(g_network_activations_map[0] + 360);
 8005c6e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conversion_9_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005c72:	4a21      	ldr	r2, [pc, #132]	@ (8005cf8 <ai_network_init+0x1dc>)
    conversion_9_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005c74:	e9c2 3302 	strd	r3, r3, [r2, #8]

  ai_bool ok = true;
  ok &= network_configure_weights(net_ctx, params);
  ok &= network_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 8005c78:	4638      	mov	r0, r7
 8005c7a:	f001 f95b 	bl	8006f34 <ai_platform_network_post_init>
 8005c7e:	4030      	ands	r0, r6
 8005c80:	4005      	ands	r5, r0
 8005c82:	b2e8      	uxtb	r0, r5

  return ok;
}
 8005c84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8005c88:	2212      	movs	r2, #18
 8005c8a:	2130      	movs	r1, #48	@ 0x30
 8005c8c:	4620      	mov	r0, r4
 8005c8e:	f000 fac1 	bl	8006214 <ai_platform_network_set_error>
  return false;
 8005c92:	e7a2      	b.n	8005bda <ai_network_init+0xbe>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8005c94:	2213      	movs	r2, #19
 8005c96:	2130      	movs	r1, #48	@ 0x30
 8005c98:	4620      	mov	r0, r4
 8005c9a:	f000 fabb 	bl	8006214 <ai_platform_network_set_error>
  return false;
 8005c9e:	e7eb      	b.n	8005c78 <ai_network_init+0x15c>
 8005ca0:	2404b848 	.word	0x2404b848
 8005ca4:	24000ad8 	.word	0x24000ad8
 8005ca8:	24000ac8 	.word	0x24000ac8
 8005cac:	24000ab8 	.word	0x24000ab8
 8005cb0:	24000aa8 	.word	0x24000aa8
 8005cb4:	24000a98 	.word	0x24000a98
 8005cb8:	24000a88 	.word	0x24000a88
 8005cbc:	24000a78 	.word	0x24000a78
 8005cc0:	24000a68 	.word	0x24000a68
 8005cc4:	240009f8 	.word	0x240009f8
 8005cc8:	24000a58 	.word	0x24000a58
 8005ccc:	240009e8 	.word	0x240009e8
 8005cd0:	24000a48 	.word	0x24000a48
 8005cd4:	240009d8 	.word	0x240009d8
 8005cd8:	24000a38 	.word	0x24000a38
 8005cdc:	24000a28 	.word	0x24000a28
 8005ce0:	240009c8 	.word	0x240009c8
 8005ce4:	240009b8 	.word	0x240009b8
 8005ce8:	24000a18 	.word	0x24000a18
 8005cec:	240009a8 	.word	0x240009a8
 8005cf0:	24000a08 	.word	0x24000a08
 8005cf4:	24000998 	.word	0x24000998
 8005cf8:	24000ae8 	.word	0x24000ae8
 8005cfc:	2404b84c 	.word	0x2404b84c

08005d00 <ai_network_create_and_init>:
{
 8005d00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005d04:	4688      	mov	r8, r1
 8005d06:	b08f      	sub	sp, #60	@ 0x3c
    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8005d08:	2100      	movs	r1, #0
{
 8005d0a:	4606      	mov	r6, r0
 8005d0c:	4617      	mov	r7, r2
    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8005d0e:	f7ff fee3 	bl	8005ad8 <ai_network_create>
    if (err.type != AI_ERROR_NONE)
 8005d12:	f010 09ff 	ands.w	r9, r0, #255	@ 0xff
    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8005d16:	4604      	mov	r4, r0
    if (err.type != AI_ERROR_NONE)
 8005d18:	d107      	bne.n	8005d2a <ai_network_create_and_init+0x2a>
    if (ai_network_data_params_get(&params) != true) {
 8005d1a:	4668      	mov	r0, sp
 8005d1c:	f000 f83a 	bl	8005d94 <ai_network_data_params_get>
 8005d20:	b938      	cbnz	r0, 8005d32 <ai_network_create_and_init+0x32>
  return ai_platform_network_get_error(network);
 8005d22:	6830      	ldr	r0, [r6, #0]
 8005d24:	f000 f96a 	bl	8005ffc <ai_platform_network_get_error>
 8005d28:	4604      	mov	r4, r0
}
 8005d2a:	4620      	mov	r0, r4
 8005d2c:	b00f      	add	sp, #60	@ 0x3c
 8005d2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (activations) {
 8005d32:	f1b8 0f00 	cmp.w	r8, #0
 8005d36:	d11a      	bne.n	8005d6e <ai_network_create_and_init+0x6e>
    if (weights) {
 8005d38:	bb3f      	cbnz	r7, 8005d8a <ai_network_create_and_init+0x8a>
    if (ai_network_init(*network, &params) != true) {
 8005d3a:	4669      	mov	r1, sp
 8005d3c:	6830      	ldr	r0, [r6, #0]
 8005d3e:	f7ff feed 	bl	8005b1c <ai_network_init>
 8005d42:	b928      	cbnz	r0, 8005d50 <ai_network_create_and_init+0x50>
  return ai_platform_network_get_error(network);
 8005d44:	6830      	ldr	r0, [r6, #0]
 8005d46:	f000 f959 	bl	8005ffc <ai_platform_network_get_error>
 8005d4a:	4604      	mov	r4, r0
 8005d4c:	fa5f f980 	uxtb.w	r9, r0
    return err;
 8005d50:	f369 0407 	bfi	r4, r9, #0, #8
 8005d54:	e7e9      	b.n	8005d2a <ai_network_create_and_init+0x2a>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8005d56:	f858 2025 	ldr.w	r2, [r8, r5, lsl #2]
 8005d5a:	4629      	mov	r1, r5
        for (int idx=0;idx<params.map_activations.size;idx++)
 8005d5c:	3501      	adds	r5, #1
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8005d5e:	a803      	add	r0, sp, #12
 8005d60:	f000 f86e 	bl	8005e40 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8005d64:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8005d68:	42ab      	cmp	r3, r5
 8005d6a:	dcf4      	bgt.n	8005d56 <ai_network_create_and_init+0x56>
 8005d6c:	e7e4      	b.n	8005d38 <ai_network_create_and_init+0x38>
 8005d6e:	464d      	mov	r5, r9
 8005d70:	e7f8      	b.n	8005d64 <ai_network_create_and_init+0x64>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8005d72:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
 8005d76:	4629      	mov	r1, r5
        for (int idx=0;idx<params.map_weights.size;idx++)
 8005d78:	3501      	adds	r5, #1
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8005d7a:	a801      	add	r0, sp, #4
 8005d7c:	f000 f860 	bl	8005e40 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8005d80:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005d84:	42ab      	cmp	r3, r5
 8005d86:	dcf4      	bgt.n	8005d72 <ai_network_create_and_init+0x72>
 8005d88:	e7d7      	b.n	8005d3a <ai_network_create_and_init+0x3a>
 8005d8a:	2500      	movs	r5, #0
 8005d8c:	e7f8      	b.n	8005d80 <ai_network_create_and_init+0x80>

08005d8e <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 8005d8e:	f001 b9fb 	b.w	8007188 <ai_platform_network_process>
	...

08005d94 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8005d94:	b530      	push	{r4, r5, lr}
  if (!params) return false;
 8005d96:	4603      	mov	r3, r0
{
 8005d98:	b085      	sub	sp, #20
  if (!params) return false;
 8005d9a:	b170      	cbz	r0, 8005dba <ai_network_data_params_get+0x26>
  
  const ai_buffer_array map_activations = 
 8005d9c:	4c08      	ldr	r4, [pc, #32]	@ (8005dc0 <ai_network_data_params_get+0x2c>)
 8005d9e:	466a      	mov	r2, sp
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8005da0:	ad02      	add	r5, sp, #8
  const ai_buffer_array map_activations = 
 8005da2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005da6:	e882 0003 	stmia.w	r2, {r0, r1}
  const ai_buffer_array map_weights = 
 8005daa:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8005dae:	e885 0003 	stmia.w	r5, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8005db2:	4629      	mov	r1, r5
 8005db4:	4618      	mov	r0, r3
 8005db6:	f000 f907 	bl	8005fc8 <ai_platform_bind_network_params>
}
 8005dba:	b005      	add	sp, #20
 8005dbc:	bd30      	pop	{r4, r5, pc}
 8005dbe:	bf00      	nop
 8005dc0:	0800ce40 	.word	0x0800ce40

08005dc4 <ai_buffer_get_size>:
 8005dc4:	b368      	cbz	r0, 8005e22 <ai_buffer_get_size+0x5e>
 8005dc6:	4b17      	ldr	r3, [pc, #92]	@ (8005e24 <ai_buffer_get_size+0x60>)
 8005dc8:	4a17      	ldr	r2, [pc, #92]	@ (8005e28 <ai_buffer_get_size+0x64>)
 8005dca:	b410      	push	{r4}
 8005dcc:	6804      	ldr	r4, [r0, #0]
 8005dce:	4023      	ands	r3, r4
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d123      	bne.n	8005e1c <ai_buffer_get_size+0x58>
 8005dd4:	b311      	cbz	r1, 8005e1c <ai_buffer_get_size+0x58>
 8005dd6:	6984      	ldr	r4, [r0, #24]
 8005dd8:	6862      	ldr	r2, [r4, #4]
 8005dda:	321f      	adds	r2, #31
 8005ddc:	f022 021f 	bic.w	r2, r2, #31
 8005de0:	7d03      	ldrb	r3, [r0, #20]
 8005de2:	6941      	ldr	r1, [r0, #20]
 8005de4:	f1a3 0301 	sub.w	r3, r3, #1
 8005de8:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8005dec:	fab3 f383 	clz	r3, r3
 8005df0:	095b      	lsrs	r3, r3, #5
 8005df2:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8005df6:	da0c      	bge.n	8005e12 <ai_buffer_get_size+0x4e>
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d103      	bne.n	8005e04 <ai_buffer_get_size+0x40>
 8005dfc:	2802      	cmp	r0, #2
 8005dfe:	f04f 0302 	mov.w	r3, #2
 8005e02:	d006      	beq.n	8005e12 <ai_buffer_get_size+0x4e>
 8005e04:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	4298      	cmp	r0, r3
 8005e0c:	fb01 f202 	mul.w	r2, r1, r2
 8005e10:	d1f2      	bne.n	8005df8 <ai_buffer_get_size+0x34>
 8005e12:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8005e16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e1a:	4770      	bx	lr
 8005e1c:	6984      	ldr	r4, [r0, #24]
 8005e1e:	6862      	ldr	r2, [r4, #4]
 8005e20:	e7de      	b.n	8005de0 <ai_buffer_get_size+0x1c>
 8005e22:	4770      	bx	lr
 8005e24:	017fffff 	.word	0x017fffff
 8005e28:	000400c0 	.word	0x000400c0

08005e2c <ai_buffer_array_sane>:
 8005e2c:	b138      	cbz	r0, 8005e3e <ai_buffer_array_sane+0x12>
 8005e2e:	6843      	ldr	r3, [r0, #4]
 8005e30:	b123      	cbz	r3, 8005e3c <ai_buffer_array_sane+0x10>
 8005e32:	8840      	ldrh	r0, [r0, #2]
 8005e34:	3800      	subs	r0, #0
 8005e36:	bf18      	it	ne
 8005e38:	2001      	movne	r0, #1
 8005e3a:	4770      	bx	lr
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	4770      	bx	lr

08005e40 <ai_buffer_array_item_set_address>:
 8005e40:	b150      	cbz	r0, 8005e58 <ai_buffer_array_item_set_address+0x18>
 8005e42:	6843      	ldr	r3, [r0, #4]
 8005e44:	b14b      	cbz	r3, 8005e5a <ai_buffer_array_item_set_address+0x1a>
 8005e46:	8840      	ldrh	r0, [r0, #2]
 8005e48:	b900      	cbnz	r0, 8005e4c <ai_buffer_array_item_set_address+0xc>
 8005e4a:	4770      	bx	lr
 8005e4c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8005e50:	2001      	movs	r0, #1
 8005e52:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8005e56:	604a      	str	r2, [r1, #4]
 8005e58:	4770      	bx	lr
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop

08005e60 <_ai_platform_acquire_crc>:
 8005e60:	2001      	movs	r0, #1
 8005e62:	4770      	bx	lr

08005e64 <_ai_platform_release_crc>:
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop

08005e68 <ai_platform_get_weights_map>:
 8005e68:	2900      	cmp	r1, #0
 8005e6a:	bf18      	it	ne
 8005e6c:	2800      	cmpne	r0, #0
 8005e6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e70:	bf0c      	ite	eq
 8005e72:	2401      	moveq	r4, #1
 8005e74:	2400      	movne	r4, #0
 8005e76:	2a00      	cmp	r2, #0
 8005e78:	bf08      	it	eq
 8005e7a:	f044 0401 	orreq.w	r4, r4, #1
 8005e7e:	b114      	cbz	r4, 8005e86 <ai_platform_get_weights_map+0x1e>
 8005e80:	2400      	movs	r4, #0
 8005e82:	4620      	mov	r0, r4
 8005e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e86:	4616      	mov	r6, r2
 8005e88:	4b22      	ldr	r3, [pc, #136]	@ (8005f14 <ai_platform_get_weights_map+0xac>)
 8005e8a:	6812      	ldr	r2, [r2, #0]
 8005e8c:	4605      	mov	r5, r0
 8005e8e:	460f      	mov	r7, r1
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d022      	beq.n	8005eda <ai_platform_get_weights_map+0x72>
 8005e94:	6870      	ldr	r0, [r6, #4]
 8005e96:	2800      	cmp	r0, #0
 8005e98:	d0f2      	beq.n	8005e80 <ai_platform_get_weights_map+0x18>
 8005e9a:	6806      	ldr	r6, [r0, #0]
 8005e9c:	429e      	cmp	r6, r3
 8005e9e:	d006      	beq.n	8005eae <ai_platform_get_weights_map+0x46>
 8005ea0:	f1a1 0401 	sub.w	r4, r1, #1
 8005ea4:	6028      	str	r0, [r5, #0]
 8005ea6:	fab4 f484 	clz	r4, r4
 8005eaa:	0964      	lsrs	r4, r4, #5
 8005eac:	e7e9      	b.n	8005e82 <ai_platform_get_weights_map+0x1a>
 8005eae:	3d04      	subs	r5, #4
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	4621      	mov	r1, r4
 8005eb4:	e000      	b.n	8005eb8 <ai_platform_get_weights_map+0x50>
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8005ebc:	42b3      	cmp	r3, r6
 8005ebe:	d025      	beq.n	8005f0c <ai_platform_get_weights_map+0xa4>
 8005ec0:	f845 3f04 	str.w	r3, [r5, #4]!
 8005ec4:	1c4b      	adds	r3, r1, #1
 8005ec6:	429f      	cmp	r7, r3
 8005ec8:	d8f5      	bhi.n	8005eb6 <ai_platform_get_weights_map+0x4e>
 8005eca:	d1da      	bne.n	8005e82 <ai_platform_get_weights_map+0x1a>
 8005ecc:	3102      	adds	r1, #2
 8005ece:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8005ed2:	42b3      	cmp	r3, r6
 8005ed4:	d1d5      	bne.n	8005e82 <ai_platform_get_weights_map+0x1a>
 8005ed6:	2401      	movs	r4, #1
 8005ed8:	e7d3      	b.n	8005e82 <ai_platform_get_weights_map+0x1a>
 8005eda:	1d30      	adds	r0, r6, #4
 8005edc:	f7ff ffa6 	bl	8005e2c <ai_buffer_array_sane>
 8005ee0:	2800      	cmp	r0, #0
 8005ee2:	d0cd      	beq.n	8005e80 <ai_platform_get_weights_map+0x18>
 8005ee4:	88f3      	ldrh	r3, [r6, #6]
 8005ee6:	429f      	cmp	r7, r3
 8005ee8:	d1ca      	bne.n	8005e80 <ai_platform_get_weights_map+0x18>
 8005eea:	3d04      	subs	r5, #4
 8005eec:	4622      	mov	r2, r4
 8005eee:	68b3      	ldr	r3, [r6, #8]
 8005ef0:	4423      	add	r3, r4
 8005ef2:	341c      	adds	r4, #28
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	b123      	cbz	r3, 8005f02 <ai_platform_get_weights_map+0x9a>
 8005ef8:	3201      	adds	r2, #1
 8005efa:	f845 3f04 	str.w	r3, [r5, #4]!
 8005efe:	4297      	cmp	r7, r2
 8005f00:	d8f5      	bhi.n	8005eee <ai_platform_get_weights_map+0x86>
 8005f02:	1abc      	subs	r4, r7, r2
 8005f04:	fab4 f484 	clz	r4, r4
 8005f08:	0964      	lsrs	r4, r4, #5
 8005f0a:	e7ba      	b.n	8005e82 <ai_platform_get_weights_map+0x1a>
 8005f0c:	428f      	cmp	r7, r1
 8005f0e:	d1b8      	bne.n	8005e82 <ai_platform_get_weights_map+0x1a>
 8005f10:	e7e1      	b.n	8005ed6 <ai_platform_get_weights_map+0x6e>
 8005f12:	bf00      	nop
 8005f14:	a1facade 	.word	0xa1facade

08005f18 <ai_platform_get_activations_map>:
 8005f18:	2900      	cmp	r1, #0
 8005f1a:	bf18      	it	ne
 8005f1c:	2800      	cmpne	r0, #0
 8005f1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f20:	bf0c      	ite	eq
 8005f22:	2401      	moveq	r4, #1
 8005f24:	2400      	movne	r4, #0
 8005f26:	2a00      	cmp	r2, #0
 8005f28:	bf08      	it	eq
 8005f2a:	f044 0401 	orreq.w	r4, r4, #1
 8005f2e:	b114      	cbz	r4, 8005f36 <ai_platform_get_activations_map+0x1e>
 8005f30:	2400      	movs	r4, #0
 8005f32:	4620      	mov	r0, r4
 8005f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f36:	4616      	mov	r6, r2
 8005f38:	4b22      	ldr	r3, [pc, #136]	@ (8005fc4 <ai_platform_get_activations_map+0xac>)
 8005f3a:	6812      	ldr	r2, [r2, #0]
 8005f3c:	4605      	mov	r5, r0
 8005f3e:	460f      	mov	r7, r1
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d022      	beq.n	8005f8a <ai_platform_get_activations_map+0x72>
 8005f44:	6a30      	ldr	r0, [r6, #32]
 8005f46:	2800      	cmp	r0, #0
 8005f48:	d0f2      	beq.n	8005f30 <ai_platform_get_activations_map+0x18>
 8005f4a:	6806      	ldr	r6, [r0, #0]
 8005f4c:	429e      	cmp	r6, r3
 8005f4e:	d006      	beq.n	8005f5e <ai_platform_get_activations_map+0x46>
 8005f50:	f1a1 0401 	sub.w	r4, r1, #1
 8005f54:	6028      	str	r0, [r5, #0]
 8005f56:	fab4 f484 	clz	r4, r4
 8005f5a:	0964      	lsrs	r4, r4, #5
 8005f5c:	e7e9      	b.n	8005f32 <ai_platform_get_activations_map+0x1a>
 8005f5e:	3d04      	subs	r5, #4
 8005f60:	4602      	mov	r2, r0
 8005f62:	4621      	mov	r1, r4
 8005f64:	e000      	b.n	8005f68 <ai_platform_get_activations_map+0x50>
 8005f66:	4619      	mov	r1, r3
 8005f68:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8005f6c:	42b3      	cmp	r3, r6
 8005f6e:	d026      	beq.n	8005fbe <ai_platform_get_activations_map+0xa6>
 8005f70:	f845 3f04 	str.w	r3, [r5, #4]!
 8005f74:	1c4b      	adds	r3, r1, #1
 8005f76:	429f      	cmp	r7, r3
 8005f78:	d8f5      	bhi.n	8005f66 <ai_platform_get_activations_map+0x4e>
 8005f7a:	d1da      	bne.n	8005f32 <ai_platform_get_activations_map+0x1a>
 8005f7c:	3102      	adds	r1, #2
 8005f7e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8005f82:	42b3      	cmp	r3, r6
 8005f84:	d1d5      	bne.n	8005f32 <ai_platform_get_activations_map+0x1a>
 8005f86:	2401      	movs	r4, #1
 8005f88:	e7d3      	b.n	8005f32 <ai_platform_get_activations_map+0x1a>
 8005f8a:	f106 000c 	add.w	r0, r6, #12
 8005f8e:	f7ff ff4d 	bl	8005e2c <ai_buffer_array_sane>
 8005f92:	2800      	cmp	r0, #0
 8005f94:	d0cc      	beq.n	8005f30 <ai_platform_get_activations_map+0x18>
 8005f96:	89f3      	ldrh	r3, [r6, #14]
 8005f98:	429f      	cmp	r7, r3
 8005f9a:	d1c9      	bne.n	8005f30 <ai_platform_get_activations_map+0x18>
 8005f9c:	3d04      	subs	r5, #4
 8005f9e:	4622      	mov	r2, r4
 8005fa0:	6933      	ldr	r3, [r6, #16]
 8005fa2:	4423      	add	r3, r4
 8005fa4:	341c      	adds	r4, #28
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	b123      	cbz	r3, 8005fb4 <ai_platform_get_activations_map+0x9c>
 8005faa:	3201      	adds	r2, #1
 8005fac:	f845 3f04 	str.w	r3, [r5, #4]!
 8005fb0:	4297      	cmp	r7, r2
 8005fb2:	d8f5      	bhi.n	8005fa0 <ai_platform_get_activations_map+0x88>
 8005fb4:	1abc      	subs	r4, r7, r2
 8005fb6:	fab4 f484 	clz	r4, r4
 8005fba:	0964      	lsrs	r4, r4, #5
 8005fbc:	e7b9      	b.n	8005f32 <ai_platform_get_activations_map+0x1a>
 8005fbe:	428f      	cmp	r7, r1
 8005fc0:	d1b7      	bne.n	8005f32 <ai_platform_get_activations_map+0x1a>
 8005fc2:	e7e0      	b.n	8005f86 <ai_platform_get_activations_map+0x6e>
 8005fc4:	a1facade 	.word	0xa1facade

08005fc8 <ai_platform_bind_network_params>:
 8005fc8:	2a00      	cmp	r2, #0
 8005fca:	bf18      	it	ne
 8005fcc:	2900      	cmpne	r1, #0
 8005fce:	d010      	beq.n	8005ff2 <ai_platform_bind_network_params+0x2a>
 8005fd0:	b178      	cbz	r0, 8005ff2 <ai_platform_bind_network_params+0x2a>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	4808      	ldr	r0, [pc, #32]	@ (8005ff8 <ai_platform_bind_network_params+0x30>)
 8005fd6:	f103 0c0c 	add.w	ip, r3, #12
 8005fda:	f843 0b04 	str.w	r0, [r3], #4
 8005fde:	c903      	ldmia	r1, {r0, r1}
 8005fe0:	e883 0003 	stmia.w	r3, {r0, r1}
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005fea:	e88c 0003 	stmia.w	ip, {r0, r1}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	4770      	bx	lr
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	4770      	bx	lr
 8005ff8:	a1facade 	.word	0xa1facade

08005ffc <ai_platform_network_get_error>:
 8005ffc:	b510      	push	{r4, lr}
 8005ffe:	2800      	cmp	r0, #0
 8006000:	d03f      	beq.n	8006082 <ai_platform_network_get_error+0x86>
 8006002:	4b7d      	ldr	r3, [pc, #500]	@ (80061f8 <ai_platform_network_get_error+0x1fc>)
 8006004:	4604      	mov	r4, r0
 8006006:	6802      	ldr	r2, [r0, #0]
 8006008:	429a      	cmp	r2, r3
 800600a:	d13a      	bne.n	8006082 <ai_platform_network_get_error+0x86>
 800600c:	f7ff ff28 	bl	8005e60 <_ai_platform_acquire_crc>
 8006010:	4b7a      	ldr	r3, [pc, #488]	@ (80061fc <ai_platform_network_get_error+0x200>)
 8006012:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800601c:	189a      	adds	r2, r3, r2
 800601e:	2a01      	cmp	r2, #1
 8006020:	f240 8086 	bls.w	8006130 <ai_platform_network_get_error+0x134>
 8006024:	f240 4249 	movw	r2, #1097	@ 0x449
 8006028:	4293      	cmp	r3, r2
 800602a:	f000 8081 	beq.w	8006130 <ai_platform_network_get_error+0x134>
 800602e:	4a74      	ldr	r2, [pc, #464]	@ (8006200 <ai_platform_network_get_error+0x204>)
 8006030:	6813      	ldr	r3, [r2, #0]
 8006032:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006036:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 800603a:	f000 8087 	beq.w	800614c <ai_platform_network_get_error+0x150>
 800603e:	6813      	ldr	r3, [r2, #0]
 8006040:	f240 4183 	movw	r1, #1155	@ 0x483
 8006044:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006048:	428b      	cmp	r3, r1
 800604a:	f000 80a9 	beq.w	80061a0 <ai_platform_network_get_error+0x1a4>
 800604e:	6813      	ldr	r3, [r2, #0]
 8006050:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006054:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8006058:	f000 80c0 	beq.w	80061dc <ai_platform_network_get_error+0x1e0>
 800605c:	6813      	ldr	r3, [r2, #0]
 800605e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006062:	2b00      	cmp	r3, #0
 8006064:	f040 8082 	bne.w	800616c <ai_platform_network_get_error+0x170>
 8006068:	4a66      	ldr	r2, [pc, #408]	@ (8006204 <ai_platform_network_get_error+0x208>)
 800606a:	2301      	movs	r3, #1
 800606c:	6093      	str	r3, [r2, #8]
 800606e:	6893      	ldr	r3, [r2, #8]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d1fc      	bne.n	800606e <ai_platform_network_get_error+0x72>
 8006074:	4964      	ldr	r1, [pc, #400]	@ (8006208 <ai_platform_network_get_error+0x20c>)
 8006076:	4b65      	ldr	r3, [pc, #404]	@ (800620c <ai_platform_network_get_error+0x210>)
 8006078:	6011      	str	r1, [r2, #0]
 800607a:	6812      	ldr	r2, [r2, #0]
 800607c:	429a      	cmp	r2, r3
 800607e:	d075      	beq.n	800616c <ai_platform_network_get_error+0x170>
 8006080:	e7fe      	b.n	8006080 <ai_platform_network_get_error+0x84>
 8006082:	f7ff feed 	bl	8005e60 <_ai_platform_acquire_crc>
 8006086:	4b5d      	ldr	r3, [pc, #372]	@ (80061fc <ai_platform_network_get_error+0x200>)
 8006088:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006092:	185a      	adds	r2, r3, r1
 8006094:	2a01      	cmp	r2, #1
 8006096:	d929      	bls.n	80060ec <ai_platform_network_get_error+0xf0>
 8006098:	f240 4249 	movw	r2, #1097	@ 0x449
 800609c:	4293      	cmp	r3, r2
 800609e:	d025      	beq.n	80060ec <ai_platform_network_get_error+0xf0>
 80060a0:	4a57      	ldr	r2, [pc, #348]	@ (8006200 <ai_platform_network_get_error+0x204>)
 80060a2:	6813      	ldr	r3, [r2, #0]
 80060a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060a8:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 80060ac:	d02b      	beq.n	8006106 <ai_platform_network_get_error+0x10a>
 80060ae:	6813      	ldr	r3, [r2, #0]
 80060b0:	f240 4183 	movw	r1, #1155	@ 0x483
 80060b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060b8:	428b      	cmp	r3, r1
 80060ba:	d060      	beq.n	800617e <ai_platform_network_get_error+0x182>
 80060bc:	6813      	ldr	r3, [r2, #0]
 80060be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060c2:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 80060c6:	d07c      	beq.n	80061c2 <ai_platform_network_get_error+0x1c6>
 80060c8:	6813      	ldr	r3, [r2, #0]
 80060ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d129      	bne.n	8006126 <ai_platform_network_get_error+0x12a>
 80060d2:	4a4c      	ldr	r2, [pc, #304]	@ (8006204 <ai_platform_network_get_error+0x208>)
 80060d4:	2301      	movs	r3, #1
 80060d6:	6093      	str	r3, [r2, #8]
 80060d8:	6893      	ldr	r3, [r2, #8]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1fc      	bne.n	80060d8 <ai_platform_network_get_error+0xdc>
 80060de:	494a      	ldr	r1, [pc, #296]	@ (8006208 <ai_platform_network_get_error+0x20c>)
 80060e0:	4b4a      	ldr	r3, [pc, #296]	@ (800620c <ai_platform_network_get_error+0x210>)
 80060e2:	6011      	str	r1, [r2, #0]
 80060e4:	6812      	ldr	r2, [r2, #0]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d01d      	beq.n	8006126 <ai_platform_network_get_error+0x12a>
 80060ea:	e7fe      	b.n	80060ea <ai_platform_network_get_error+0xee>
 80060ec:	4a45      	ldr	r2, [pc, #276]	@ (8006204 <ai_platform_network_get_error+0x208>)
 80060ee:	2301      	movs	r3, #1
 80060f0:	6093      	str	r3, [r2, #8]
 80060f2:	6893      	ldr	r3, [r2, #8]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d1fc      	bne.n	80060f2 <ai_platform_network_get_error+0xf6>
 80060f8:	4943      	ldr	r1, [pc, #268]	@ (8006208 <ai_platform_network_get_error+0x20c>)
 80060fa:	4b44      	ldr	r3, [pc, #272]	@ (800620c <ai_platform_network_get_error+0x210>)
 80060fc:	6011      	str	r1, [r2, #0]
 80060fe:	6812      	ldr	r2, [r2, #0]
 8006100:	429a      	cmp	r2, r3
 8006102:	d010      	beq.n	8006126 <ai_platform_network_get_error+0x12a>
 8006104:	e7fe      	b.n	8006104 <ai_platform_network_get_error+0x108>
 8006106:	4a42      	ldr	r2, [pc, #264]	@ (8006210 <ai_platform_network_get_error+0x214>)
 8006108:	2301      	movs	r3, #1
 800610a:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800610e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006112:	2b00      	cmp	r3, #0
 8006114:	d1fb      	bne.n	800610e <ai_platform_network_get_error+0x112>
 8006116:	493c      	ldr	r1, [pc, #240]	@ (8006208 <ai_platform_network_get_error+0x20c>)
 8006118:	4b3c      	ldr	r3, [pc, #240]	@ (800620c <ai_platform_network_get_error+0x210>)
 800611a:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 800611e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006122:	429a      	cmp	r2, r3
 8006124:	d111      	bne.n	800614a <ai_platform_network_get_error+0x14e>
 8006126:	f7ff fe9d 	bl	8005e64 <_ai_platform_release_crc>
 800612a:	f241 0010 	movw	r0, #4112	@ 0x1010
 800612e:	bd10      	pop	{r4, pc}
 8006130:	4a34      	ldr	r2, [pc, #208]	@ (8006204 <ai_platform_network_get_error+0x208>)
 8006132:	2301      	movs	r3, #1
 8006134:	6093      	str	r3, [r2, #8]
 8006136:	6893      	ldr	r3, [r2, #8]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d1fc      	bne.n	8006136 <ai_platform_network_get_error+0x13a>
 800613c:	4932      	ldr	r1, [pc, #200]	@ (8006208 <ai_platform_network_get_error+0x20c>)
 800613e:	4b33      	ldr	r3, [pc, #204]	@ (800620c <ai_platform_network_get_error+0x210>)
 8006140:	6011      	str	r1, [r2, #0]
 8006142:	6812      	ldr	r2, [r2, #0]
 8006144:	429a      	cmp	r2, r3
 8006146:	d011      	beq.n	800616c <ai_platform_network_get_error+0x170>
 8006148:	e7fe      	b.n	8006148 <ai_platform_network_get_error+0x14c>
 800614a:	e7fe      	b.n	800614a <ai_platform_network_get_error+0x14e>
 800614c:	4a30      	ldr	r2, [pc, #192]	@ (8006210 <ai_platform_network_get_error+0x214>)
 800614e:	2301      	movs	r3, #1
 8006150:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006154:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006158:	2b00      	cmp	r3, #0
 800615a:	d1fb      	bne.n	8006154 <ai_platform_network_get_error+0x158>
 800615c:	492a      	ldr	r1, [pc, #168]	@ (8006208 <ai_platform_network_get_error+0x20c>)
 800615e:	4b2b      	ldr	r3, [pc, #172]	@ (800620c <ai_platform_network_get_error+0x210>)
 8006160:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8006164:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006168:	429a      	cmp	r2, r3
 800616a:	d107      	bne.n	800617c <ai_platform_network_get_error+0x180>
 800616c:	f7ff fe7a 	bl	8005e64 <_ai_platform_release_crc>
 8006170:	f104 0010 	add.w	r0, r4, #16
 8006174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006178:	f001 bae4 	b.w	8007744 <core_get_error>
 800617c:	e7fe      	b.n	800617c <ai_platform_network_get_error+0x180>
 800617e:	4a24      	ldr	r2, [pc, #144]	@ (8006210 <ai_platform_network_get_error+0x214>)
 8006180:	2301      	movs	r3, #1
 8006182:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006186:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1fb      	bne.n	8006186 <ai_platform_network_get_error+0x18a>
 800618e:	491e      	ldr	r1, [pc, #120]	@ (8006208 <ai_platform_network_get_error+0x20c>)
 8006190:	4b1e      	ldr	r3, [pc, #120]	@ (800620c <ai_platform_network_get_error+0x210>)
 8006192:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8006196:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800619a:	429a      	cmp	r2, r3
 800619c:	d0c3      	beq.n	8006126 <ai_platform_network_get_error+0x12a>
 800619e:	e7fe      	b.n	800619e <ai_platform_network_get_error+0x1a2>
 80061a0:	4a1b      	ldr	r2, [pc, #108]	@ (8006210 <ai_platform_network_get_error+0x214>)
 80061a2:	2301      	movs	r3, #1
 80061a4:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80061a8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1fb      	bne.n	80061a8 <ai_platform_network_get_error+0x1ac>
 80061b0:	4915      	ldr	r1, [pc, #84]	@ (8006208 <ai_platform_network_get_error+0x20c>)
 80061b2:	4b16      	ldr	r3, [pc, #88]	@ (800620c <ai_platform_network_get_error+0x210>)
 80061b4:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 80061b8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 80061bc:	429a      	cmp	r2, r3
 80061be:	d0d5      	beq.n	800616c <ai_platform_network_get_error+0x170>
 80061c0:	e7fe      	b.n	80061c0 <ai_platform_network_get_error+0x1c4>
 80061c2:	4a10      	ldr	r2, [pc, #64]	@ (8006204 <ai_platform_network_get_error+0x208>)
 80061c4:	2301      	movs	r3, #1
 80061c6:	6093      	str	r3, [r2, #8]
 80061c8:	6893      	ldr	r3, [r2, #8]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1fc      	bne.n	80061c8 <ai_platform_network_get_error+0x1cc>
 80061ce:	490e      	ldr	r1, [pc, #56]	@ (8006208 <ai_platform_network_get_error+0x20c>)
 80061d0:	4b0e      	ldr	r3, [pc, #56]	@ (800620c <ai_platform_network_get_error+0x210>)
 80061d2:	6011      	str	r1, [r2, #0]
 80061d4:	6812      	ldr	r2, [r2, #0]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d0a5      	beq.n	8006126 <ai_platform_network_get_error+0x12a>
 80061da:	e7fe      	b.n	80061da <ai_platform_network_get_error+0x1de>
 80061dc:	4a09      	ldr	r2, [pc, #36]	@ (8006204 <ai_platform_network_get_error+0x208>)
 80061de:	2301      	movs	r3, #1
 80061e0:	6093      	str	r3, [r2, #8]
 80061e2:	6893      	ldr	r3, [r2, #8]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d1fc      	bne.n	80061e2 <ai_platform_network_get_error+0x1e6>
 80061e8:	4907      	ldr	r1, [pc, #28]	@ (8006208 <ai_platform_network_get_error+0x20c>)
 80061ea:	4b08      	ldr	r3, [pc, #32]	@ (800620c <ai_platform_network_get_error+0x210>)
 80061ec:	6011      	str	r1, [r2, #0]
 80061ee:	6812      	ldr	r2, [r2, #0]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d0bb      	beq.n	800616c <ai_platform_network_get_error+0x170>
 80061f4:	e7fe      	b.n	80061f4 <ai_platform_network_get_error+0x1f8>
 80061f6:	bf00      	nop
 80061f8:	a1c00100 	.word	0xa1c00100
 80061fc:	e0042000 	.word	0xe0042000
 8006200:	5c001000 	.word	0x5c001000
 8006204:	40023000 	.word	0x40023000
 8006208:	f407a5c2 	.word	0xf407a5c2
 800620c:	b5e8b5cd 	.word	0xb5e8b5cd
 8006210:	58024000 	.word	0x58024000

08006214 <ai_platform_network_set_error>:
 8006214:	b110      	cbz	r0, 800621c <ai_platform_network_set_error+0x8>
 8006216:	3010      	adds	r0, #16
 8006218:	f001 ba9a 	b.w	8007750 <core_set_error>
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop

08006220 <ai_platform_inputs_get>:
 8006220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006224:	b085      	sub	sp, #20
 8006226:	9102      	str	r1, [sp, #8]
 8006228:	2800      	cmp	r0, #0
 800622a:	f000 8093 	beq.w	8006354 <ai_platform_inputs_get+0x134>
 800622e:	4baa      	ldr	r3, [pc, #680]	@ (80064d8 <ai_platform_inputs_get+0x2b8>)
 8006230:	4681      	mov	r9, r0
 8006232:	6802      	ldr	r2, [r0, #0]
 8006234:	429a      	cmp	r2, r3
 8006236:	f040 808d 	bne.w	8006354 <ai_platform_inputs_get+0x134>
 800623a:	f7ff fe11 	bl	8005e60 <_ai_platform_acquire_crc>
 800623e:	4ba7      	ldr	r3, [pc, #668]	@ (80064dc <ai_platform_inputs_get+0x2bc>)
 8006240:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800624a:	189a      	adds	r2, r3, r2
 800624c:	2a01      	cmp	r2, #1
 800624e:	f240 80da 	bls.w	8006406 <ai_platform_inputs_get+0x1e6>
 8006252:	f240 4249 	movw	r2, #1097	@ 0x449
 8006256:	4293      	cmp	r3, r2
 8006258:	f000 80d5 	beq.w	8006406 <ai_platform_inputs_get+0x1e6>
 800625c:	4aa0      	ldr	r2, [pc, #640]	@ (80064e0 <ai_platform_inputs_get+0x2c0>)
 800625e:	6813      	ldr	r3, [r2, #0]
 8006260:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006264:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8006268:	f000 80dc 	beq.w	8006424 <ai_platform_inputs_get+0x204>
 800626c:	6813      	ldr	r3, [r2, #0]
 800626e:	f240 4183 	movw	r1, #1155	@ 0x483
 8006272:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006276:	428b      	cmp	r3, r1
 8006278:	f000 810e 	beq.w	8006498 <ai_platform_inputs_get+0x278>
 800627c:	6813      	ldr	r3, [r2, #0]
 800627e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006282:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8006286:	f000 8143 	beq.w	8006510 <ai_platform_inputs_get+0x2f0>
 800628a:	6813      	ldr	r3, [r2, #0]
 800628c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006290:	2b00      	cmp	r3, #0
 8006292:	f000 8113 	beq.w	80064bc <ai_platform_inputs_get+0x29c>
 8006296:	f7ff fde5 	bl	8005e64 <_ai_platform_release_crc>
 800629a:	f8b9 302c 	ldrh.w	r3, [r9, #44]	@ 0x2c
 800629e:	2b00      	cmp	r3, #0
 80062a0:	f000 80d2 	beq.w	8006448 <ai_platform_inputs_get+0x228>
 80062a4:	f8d9 a030 	ldr.w	sl, [r9, #48]	@ 0x30
 80062a8:	f1ba 0f00 	cmp.w	sl, #0
 80062ac:	f000 80cc 	beq.w	8006448 <ai_platform_inputs_get+0x228>
 80062b0:	2100      	movs	r1, #0
 80062b2:	f8cd 900c 	str.w	r9, [sp, #12]
 80062b6:	460d      	mov	r5, r1
 80062b8:	4689      	mov	r9, r1
 80062ba:	e016      	b.n	80062ea <ai_platform_inputs_get+0xca>
 80062bc:	9a01      	ldr	r2, [sp, #4]
 80062be:	2301      	movs	r3, #1
 80062c0:	f848 3002 	str.w	r3, [r8, r2]
 80062c4:	69b2      	ldr	r2, [r6, #24]
 80062c6:	f04f 0301 	mov.w	r3, #1
 80062ca:	6856      	ldr	r6, [r2, #4]
 80062cc:	3501      	adds	r5, #1
 80062ce:	f109 091c 	add.w	r9, r9, #28
 80062d2:	7523      	strb	r3, [r4, #20]
 80062d4:	2300      	movs	r3, #0
 80062d6:	6962      	ldr	r2, [r4, #20]
 80062d8:	60a7      	str	r7, [r4, #8]
 80062da:	f36b 221f 	bfi	r2, fp, #8, #24
 80062de:	6126      	str	r6, [r4, #16]
 80062e0:	61a1      	str	r1, [r4, #24]
 80062e2:	60e3      	str	r3, [r4, #12]
 80062e4:	6162      	str	r2, [r4, #20]
 80062e6:	e9c4 0c00 	strd	r0, ip, [r4]
 80062ea:	f8ba 3000 	ldrh.w	r3, [sl]
 80062ee:	b2ac      	uxth	r4, r5
 80062f0:	42ab      	cmp	r3, r5
 80062f2:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 80062f6:	9301      	str	r3, [sp, #4]
 80062f8:	f240 80b5 	bls.w	8006466 <ai_platform_inputs_get+0x246>
 80062fc:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006300:	2b00      	cmp	r3, #0
 8006302:	f000 80b0 	beq.w	8006466 <ai_platform_inputs_get+0x246>
 8006306:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800630a:	2e00      	cmp	r6, #0
 800630c:	f000 80ab 	beq.w	8006466 <ai_platform_inputs_get+0x246>
 8006310:	f8da 3008 	ldr.w	r3, [sl, #8]
 8006314:	69b2      	ldr	r2, [r6, #24]
 8006316:	68f1      	ldr	r1, [r6, #12]
 8006318:	6810      	ldr	r0, [r2, #0]
 800631a:	9100      	str	r1, [sp, #0]
 800631c:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 8006320:	68b3      	ldr	r3, [r6, #8]
 8006322:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8006326:	444c      	add	r4, r9
 8006328:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800632c:	f005 f918 	bl	800b560 <ai_array_to_buffer_fmt>
 8006330:	69b2      	ldr	r2, [r6, #24]
 8006332:	9900      	ldr	r1, [sp, #0]
 8006334:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8006338:	2f00      	cmp	r7, #0
 800633a:	d0c4      	beq.n	80062c6 <ai_platform_inputs_get+0xa6>
 800633c:	2200      	movs	r2, #0
 800633e:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 8006342:	6832      	ldr	r2, [r6, #0]
 8006344:	607a      	str	r2, [r7, #4]
 8006346:	b112      	cbz	r2, 800634e <ai_platform_inputs_get+0x12e>
 8006348:	8852      	ldrh	r2, [r2, #2]
 800634a:	2a00      	cmp	r2, #0
 800634c:	d1b6      	bne.n	80062bc <ai_platform_inputs_get+0x9c>
 800634e:	69b2      	ldr	r2, [r6, #24]
 8006350:	2700      	movs	r7, #0
 8006352:	e7b8      	b.n	80062c6 <ai_platform_inputs_get+0xa6>
 8006354:	f7ff fd84 	bl	8005e60 <_ai_platform_acquire_crc>
 8006358:	4b60      	ldr	r3, [pc, #384]	@ (80064dc <ai_platform_inputs_get+0x2bc>)
 800635a:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006364:	185a      	adds	r2, r3, r1
 8006366:	2a01      	cmp	r2, #1
 8006368:	d92a      	bls.n	80063c0 <ai_platform_inputs_get+0x1a0>
 800636a:	f240 4249 	movw	r2, #1097	@ 0x449
 800636e:	4293      	cmp	r3, r2
 8006370:	d026      	beq.n	80063c0 <ai_platform_inputs_get+0x1a0>
 8006372:	4a5b      	ldr	r2, [pc, #364]	@ (80064e0 <ai_platform_inputs_get+0x2c0>)
 8006374:	6813      	ldr	r3, [r2, #0]
 8006376:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800637a:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 800637e:	d02c      	beq.n	80063da <ai_platform_inputs_get+0x1ba>
 8006380:	6813      	ldr	r3, [r2, #0]
 8006382:	f240 4183 	movw	r1, #1155	@ 0x483
 8006386:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800638a:	428b      	cmp	r3, r1
 800638c:	d073      	beq.n	8006476 <ai_platform_inputs_get+0x256>
 800638e:	6813      	ldr	r3, [r2, #0]
 8006390:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006394:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8006398:	f000 80ac 	beq.w	80064f4 <ai_platform_inputs_get+0x2d4>
 800639c:	6813      	ldr	r3, [r2, #0]
 800639e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d129      	bne.n	80063fa <ai_platform_inputs_get+0x1da>
 80063a6:	4a4f      	ldr	r2, [pc, #316]	@ (80064e4 <ai_platform_inputs_get+0x2c4>)
 80063a8:	2301      	movs	r3, #1
 80063aa:	6093      	str	r3, [r2, #8]
 80063ac:	6893      	ldr	r3, [r2, #8]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1fc      	bne.n	80063ac <ai_platform_inputs_get+0x18c>
 80063b2:	494d      	ldr	r1, [pc, #308]	@ (80064e8 <ai_platform_inputs_get+0x2c8>)
 80063b4:	4b4d      	ldr	r3, [pc, #308]	@ (80064ec <ai_platform_inputs_get+0x2cc>)
 80063b6:	6011      	str	r1, [r2, #0]
 80063b8:	6812      	ldr	r2, [r2, #0]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d01d      	beq.n	80063fa <ai_platform_inputs_get+0x1da>
 80063be:	e7fe      	b.n	80063be <ai_platform_inputs_get+0x19e>
 80063c0:	4a48      	ldr	r2, [pc, #288]	@ (80064e4 <ai_platform_inputs_get+0x2c4>)
 80063c2:	2301      	movs	r3, #1
 80063c4:	6093      	str	r3, [r2, #8]
 80063c6:	6893      	ldr	r3, [r2, #8]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d1fc      	bne.n	80063c6 <ai_platform_inputs_get+0x1a6>
 80063cc:	4946      	ldr	r1, [pc, #280]	@ (80064e8 <ai_platform_inputs_get+0x2c8>)
 80063ce:	4b47      	ldr	r3, [pc, #284]	@ (80064ec <ai_platform_inputs_get+0x2cc>)
 80063d0:	6011      	str	r1, [r2, #0]
 80063d2:	6812      	ldr	r2, [r2, #0]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d010      	beq.n	80063fa <ai_platform_inputs_get+0x1da>
 80063d8:	e7fe      	b.n	80063d8 <ai_platform_inputs_get+0x1b8>
 80063da:	4a45      	ldr	r2, [pc, #276]	@ (80064f0 <ai_platform_inputs_get+0x2d0>)
 80063dc:	2301      	movs	r3, #1
 80063de:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80063e2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d1fb      	bne.n	80063e2 <ai_platform_inputs_get+0x1c2>
 80063ea:	493f      	ldr	r1, [pc, #252]	@ (80064e8 <ai_platform_inputs_get+0x2c8>)
 80063ec:	4b3f      	ldr	r3, [pc, #252]	@ (80064ec <ai_platform_inputs_get+0x2cc>)
 80063ee:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 80063f2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d113      	bne.n	8006422 <ai_platform_inputs_get+0x202>
 80063fa:	f7ff fd33 	bl	8005e64 <_ai_platform_release_crc>
 80063fe:	2000      	movs	r0, #0
 8006400:	b005      	add	sp, #20
 8006402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006406:	4a37      	ldr	r2, [pc, #220]	@ (80064e4 <ai_platform_inputs_get+0x2c4>)
 8006408:	2301      	movs	r3, #1
 800640a:	6093      	str	r3, [r2, #8]
 800640c:	6893      	ldr	r3, [r2, #8]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d1fc      	bne.n	800640c <ai_platform_inputs_get+0x1ec>
 8006412:	4b35      	ldr	r3, [pc, #212]	@ (80064e8 <ai_platform_inputs_get+0x2c8>)
 8006414:	6013      	str	r3, [r2, #0]
 8006416:	4b35      	ldr	r3, [pc, #212]	@ (80064ec <ai_platform_inputs_get+0x2cc>)
 8006418:	6812      	ldr	r2, [r2, #0]
 800641a:	429a      	cmp	r2, r3
 800641c:	f43f af3b 	beq.w	8006296 <ai_platform_inputs_get+0x76>
 8006420:	e7fe      	b.n	8006420 <ai_platform_inputs_get+0x200>
 8006422:	e7fe      	b.n	8006422 <ai_platform_inputs_get+0x202>
 8006424:	4a32      	ldr	r2, [pc, #200]	@ (80064f0 <ai_platform_inputs_get+0x2d0>)
 8006426:	2301      	movs	r3, #1
 8006428:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800642c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006430:	2b00      	cmp	r3, #0
 8006432:	d1fb      	bne.n	800642c <ai_platform_inputs_get+0x20c>
 8006434:	4b2c      	ldr	r3, [pc, #176]	@ (80064e8 <ai_platform_inputs_get+0x2c8>)
 8006436:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 800643a:	4b2c      	ldr	r3, [pc, #176]	@ (80064ec <ai_platform_inputs_get+0x2cc>)
 800643c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006440:	429a      	cmp	r2, r3
 8006442:	f43f af28 	beq.w	8006296 <ai_platform_inputs_get+0x76>
 8006446:	e7fe      	b.n	8006446 <ai_platform_inputs_get+0x226>
 8006448:	2400      	movs	r4, #0
 800644a:	2218      	movs	r2, #24
 800644c:	2111      	movs	r1, #17
 800644e:	f109 0010 	add.w	r0, r9, #16
 8006452:	f001 f97d 	bl	8007750 <core_set_error>
 8006456:	4620      	mov	r0, r4
 8006458:	9b02      	ldr	r3, [sp, #8]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d0d0      	beq.n	8006400 <ai_platform_inputs_get+0x1e0>
 800645e:	801c      	strh	r4, [r3, #0]
 8006460:	b005      	add	sp, #20
 8006462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006466:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800646a:	2c00      	cmp	r4, #0
 800646c:	d0ec      	beq.n	8006448 <ai_platform_inputs_get+0x228>
 800646e:	f8da 3008 	ldr.w	r3, [sl, #8]
 8006472:	6858      	ldr	r0, [r3, #4]
 8006474:	e7f0      	b.n	8006458 <ai_platform_inputs_get+0x238>
 8006476:	4a1e      	ldr	r2, [pc, #120]	@ (80064f0 <ai_platform_inputs_get+0x2d0>)
 8006478:	2301      	movs	r3, #1
 800647a:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800647e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006482:	2b00      	cmp	r3, #0
 8006484:	d1fb      	bne.n	800647e <ai_platform_inputs_get+0x25e>
 8006486:	4918      	ldr	r1, [pc, #96]	@ (80064e8 <ai_platform_inputs_get+0x2c8>)
 8006488:	4b18      	ldr	r3, [pc, #96]	@ (80064ec <ai_platform_inputs_get+0x2cc>)
 800648a:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 800648e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006492:	429a      	cmp	r2, r3
 8006494:	d0b1      	beq.n	80063fa <ai_platform_inputs_get+0x1da>
 8006496:	e7fe      	b.n	8006496 <ai_platform_inputs_get+0x276>
 8006498:	4a15      	ldr	r2, [pc, #84]	@ (80064f0 <ai_platform_inputs_get+0x2d0>)
 800649a:	2301      	movs	r3, #1
 800649c:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80064a0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d1fb      	bne.n	80064a0 <ai_platform_inputs_get+0x280>
 80064a8:	4b0f      	ldr	r3, [pc, #60]	@ (80064e8 <ai_platform_inputs_get+0x2c8>)
 80064aa:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 80064ae:	4b0f      	ldr	r3, [pc, #60]	@ (80064ec <ai_platform_inputs_get+0x2cc>)
 80064b0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 80064b4:	429a      	cmp	r2, r3
 80064b6:	f43f aeee 	beq.w	8006296 <ai_platform_inputs_get+0x76>
 80064ba:	e7fe      	b.n	80064ba <ai_platform_inputs_get+0x29a>
 80064bc:	4a09      	ldr	r2, [pc, #36]	@ (80064e4 <ai_platform_inputs_get+0x2c4>)
 80064be:	2301      	movs	r3, #1
 80064c0:	6093      	str	r3, [r2, #8]
 80064c2:	6893      	ldr	r3, [r2, #8]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d1fc      	bne.n	80064c2 <ai_platform_inputs_get+0x2a2>
 80064c8:	4b07      	ldr	r3, [pc, #28]	@ (80064e8 <ai_platform_inputs_get+0x2c8>)
 80064ca:	6013      	str	r3, [r2, #0]
 80064cc:	4b07      	ldr	r3, [pc, #28]	@ (80064ec <ai_platform_inputs_get+0x2cc>)
 80064ce:	6812      	ldr	r2, [r2, #0]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	f43f aee0 	beq.w	8006296 <ai_platform_inputs_get+0x76>
 80064d6:	e7fe      	b.n	80064d6 <ai_platform_inputs_get+0x2b6>
 80064d8:	a1c00100 	.word	0xa1c00100
 80064dc:	e0042000 	.word	0xe0042000
 80064e0:	5c001000 	.word	0x5c001000
 80064e4:	40023000 	.word	0x40023000
 80064e8:	f407a5c2 	.word	0xf407a5c2
 80064ec:	b5e8b5cd 	.word	0xb5e8b5cd
 80064f0:	58024000 	.word	0x58024000
 80064f4:	4a0d      	ldr	r2, [pc, #52]	@ (800652c <ai_platform_inputs_get+0x30c>)
 80064f6:	2301      	movs	r3, #1
 80064f8:	6093      	str	r3, [r2, #8]
 80064fa:	6893      	ldr	r3, [r2, #8]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d1fc      	bne.n	80064fa <ai_platform_inputs_get+0x2da>
 8006500:	490b      	ldr	r1, [pc, #44]	@ (8006530 <ai_platform_inputs_get+0x310>)
 8006502:	4b0c      	ldr	r3, [pc, #48]	@ (8006534 <ai_platform_inputs_get+0x314>)
 8006504:	6011      	str	r1, [r2, #0]
 8006506:	6812      	ldr	r2, [r2, #0]
 8006508:	429a      	cmp	r2, r3
 800650a:	f43f af76 	beq.w	80063fa <ai_platform_inputs_get+0x1da>
 800650e:	e7fe      	b.n	800650e <ai_platform_inputs_get+0x2ee>
 8006510:	4a06      	ldr	r2, [pc, #24]	@ (800652c <ai_platform_inputs_get+0x30c>)
 8006512:	2301      	movs	r3, #1
 8006514:	6093      	str	r3, [r2, #8]
 8006516:	6893      	ldr	r3, [r2, #8]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d1fc      	bne.n	8006516 <ai_platform_inputs_get+0x2f6>
 800651c:	4b04      	ldr	r3, [pc, #16]	@ (8006530 <ai_platform_inputs_get+0x310>)
 800651e:	6013      	str	r3, [r2, #0]
 8006520:	4b04      	ldr	r3, [pc, #16]	@ (8006534 <ai_platform_inputs_get+0x314>)
 8006522:	6812      	ldr	r2, [r2, #0]
 8006524:	429a      	cmp	r2, r3
 8006526:	f43f aeb6 	beq.w	8006296 <ai_platform_inputs_get+0x76>
 800652a:	e7fe      	b.n	800652a <ai_platform_inputs_get+0x30a>
 800652c:	40023000 	.word	0x40023000
 8006530:	f407a5c2 	.word	0xf407a5c2
 8006534:	b5e8b5cd 	.word	0xb5e8b5cd

08006538 <ai_platform_outputs_get>:
 8006538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800653c:	b085      	sub	sp, #20
 800653e:	9102      	str	r1, [sp, #8]
 8006540:	2800      	cmp	r0, #0
 8006542:	f000 808f 	beq.w	8006664 <ai_platform_outputs_get+0x12c>
 8006546:	4ba8      	ldr	r3, [pc, #672]	@ (80067e8 <ai_platform_outputs_get+0x2b0>)
 8006548:	4681      	mov	r9, r0
 800654a:	6802      	ldr	r2, [r0, #0]
 800654c:	429a      	cmp	r2, r3
 800654e:	f040 8089 	bne.w	8006664 <ai_platform_outputs_get+0x12c>
 8006552:	f7ff fc85 	bl	8005e60 <_ai_platform_acquire_crc>
 8006556:	4ba5      	ldr	r3, [pc, #660]	@ (80067ec <ai_platform_outputs_get+0x2b4>)
 8006558:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006562:	189a      	adds	r2, r3, r2
 8006564:	2a01      	cmp	r2, #1
 8006566:	f240 80d6 	bls.w	8006716 <ai_platform_outputs_get+0x1de>
 800656a:	f240 4249 	movw	r2, #1097	@ 0x449
 800656e:	4293      	cmp	r3, r2
 8006570:	f000 80d1 	beq.w	8006716 <ai_platform_outputs_get+0x1de>
 8006574:	4a9e      	ldr	r2, [pc, #632]	@ (80067f0 <ai_platform_outputs_get+0x2b8>)
 8006576:	6813      	ldr	r3, [r2, #0]
 8006578:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800657c:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8006580:	f000 80d8 	beq.w	8006734 <ai_platform_outputs_get+0x1fc>
 8006584:	6813      	ldr	r3, [r2, #0]
 8006586:	f240 4183 	movw	r1, #1155	@ 0x483
 800658a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800658e:	428b      	cmp	r3, r1
 8006590:	f000 8109 	beq.w	80067a6 <ai_platform_outputs_get+0x26e>
 8006594:	6813      	ldr	r3, [r2, #0]
 8006596:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800659a:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 800659e:	f000 813f 	beq.w	8006820 <ai_platform_outputs_get+0x2e8>
 80065a2:	6813      	ldr	r3, [r2, #0]
 80065a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	f000 810e 	beq.w	80067ca <ai_platform_outputs_get+0x292>
 80065ae:	f7ff fc59 	bl	8005e64 <_ai_platform_release_crc>
 80065b2:	f8b9 302c 	ldrh.w	r3, [r9, #44]	@ 0x2c
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	f240 80db 	bls.w	8006772 <ai_platform_outputs_get+0x23a>
 80065bc:	2100      	movs	r1, #0
 80065be:	f8d9 a030 	ldr.w	sl, [r9, #48]	@ 0x30
 80065c2:	f8cd 900c 	str.w	r9, [sp, #12]
 80065c6:	460d      	mov	r5, r1
 80065c8:	4689      	mov	r9, r1
 80065ca:	e016      	b.n	80065fa <ai_platform_outputs_get+0xc2>
 80065cc:	9a01      	ldr	r2, [sp, #4]
 80065ce:	2301      	movs	r3, #1
 80065d0:	f848 3002 	str.w	r3, [r8, r2]
 80065d4:	69b2      	ldr	r2, [r6, #24]
 80065d6:	f04f 0301 	mov.w	r3, #1
 80065da:	6856      	ldr	r6, [r2, #4]
 80065dc:	3501      	adds	r5, #1
 80065de:	f109 091c 	add.w	r9, r9, #28
 80065e2:	7523      	strb	r3, [r4, #20]
 80065e4:	2300      	movs	r3, #0
 80065e6:	6962      	ldr	r2, [r4, #20]
 80065e8:	60a7      	str	r7, [r4, #8]
 80065ea:	f36b 221f 	bfi	r2, fp, #8, #24
 80065ee:	6126      	str	r6, [r4, #16]
 80065f0:	61a1      	str	r1, [r4, #24]
 80065f2:	60e3      	str	r3, [r4, #12]
 80065f4:	6162      	str	r2, [r4, #20]
 80065f6:	e9c4 0c00 	strd	r0, ip, [r4]
 80065fa:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80065fe:	b2ac      	uxth	r4, r5
 8006600:	42ab      	cmp	r3, r5
 8006602:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 8006606:	9301      	str	r3, [sp, #4]
 8006608:	f240 80a6 	bls.w	8006758 <ai_platform_outputs_get+0x220>
 800660c:	f8da 3010 	ldr.w	r3, [sl, #16]
 8006610:	2b00      	cmp	r3, #0
 8006612:	f000 80a1 	beq.w	8006758 <ai_platform_outputs_get+0x220>
 8006616:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800661a:	2e00      	cmp	r6, #0
 800661c:	f000 809c 	beq.w	8006758 <ai_platform_outputs_get+0x220>
 8006620:	f8da 3014 	ldr.w	r3, [sl, #20]
 8006624:	69b2      	ldr	r2, [r6, #24]
 8006626:	68f1      	ldr	r1, [r6, #12]
 8006628:	6810      	ldr	r0, [r2, #0]
 800662a:	9100      	str	r1, [sp, #0]
 800662c:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 8006630:	68b3      	ldr	r3, [r6, #8]
 8006632:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8006636:	444c      	add	r4, r9
 8006638:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800663c:	f004 ff90 	bl	800b560 <ai_array_to_buffer_fmt>
 8006640:	69b2      	ldr	r2, [r6, #24]
 8006642:	9900      	ldr	r1, [sp, #0]
 8006644:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8006648:	2f00      	cmp	r7, #0
 800664a:	d0c4      	beq.n	80065d6 <ai_platform_outputs_get+0x9e>
 800664c:	2200      	movs	r2, #0
 800664e:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 8006652:	6832      	ldr	r2, [r6, #0]
 8006654:	607a      	str	r2, [r7, #4]
 8006656:	b112      	cbz	r2, 800665e <ai_platform_outputs_get+0x126>
 8006658:	8852      	ldrh	r2, [r2, #2]
 800665a:	2a00      	cmp	r2, #0
 800665c:	d1b6      	bne.n	80065cc <ai_platform_outputs_get+0x94>
 800665e:	69b2      	ldr	r2, [r6, #24]
 8006660:	2700      	movs	r7, #0
 8006662:	e7b8      	b.n	80065d6 <ai_platform_outputs_get+0x9e>
 8006664:	f7ff fbfc 	bl	8005e60 <_ai_platform_acquire_crc>
 8006668:	4b60      	ldr	r3, [pc, #384]	@ (80067ec <ai_platform_outputs_get+0x2b4>)
 800666a:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006674:	185a      	adds	r2, r3, r1
 8006676:	2a01      	cmp	r2, #1
 8006678:	d92a      	bls.n	80066d0 <ai_platform_outputs_get+0x198>
 800667a:	f240 4249 	movw	r2, #1097	@ 0x449
 800667e:	4293      	cmp	r3, r2
 8006680:	d026      	beq.n	80066d0 <ai_platform_outputs_get+0x198>
 8006682:	4a5b      	ldr	r2, [pc, #364]	@ (80067f0 <ai_platform_outputs_get+0x2b8>)
 8006684:	6813      	ldr	r3, [r2, #0]
 8006686:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800668a:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 800668e:	d02c      	beq.n	80066ea <ai_platform_outputs_get+0x1b2>
 8006690:	6813      	ldr	r3, [r2, #0]
 8006692:	f240 4183 	movw	r1, #1155	@ 0x483
 8006696:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800669a:	428b      	cmp	r3, r1
 800669c:	d072      	beq.n	8006784 <ai_platform_outputs_get+0x24c>
 800669e:	6813      	ldr	r3, [r2, #0]
 80066a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066a4:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 80066a8:	f000 80ac 	beq.w	8006804 <ai_platform_outputs_get+0x2cc>
 80066ac:	6813      	ldr	r3, [r2, #0]
 80066ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d129      	bne.n	800670a <ai_platform_outputs_get+0x1d2>
 80066b6:	4a4f      	ldr	r2, [pc, #316]	@ (80067f4 <ai_platform_outputs_get+0x2bc>)
 80066b8:	2301      	movs	r3, #1
 80066ba:	6093      	str	r3, [r2, #8]
 80066bc:	6893      	ldr	r3, [r2, #8]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1fc      	bne.n	80066bc <ai_platform_outputs_get+0x184>
 80066c2:	494d      	ldr	r1, [pc, #308]	@ (80067f8 <ai_platform_outputs_get+0x2c0>)
 80066c4:	4b4d      	ldr	r3, [pc, #308]	@ (80067fc <ai_platform_outputs_get+0x2c4>)
 80066c6:	6011      	str	r1, [r2, #0]
 80066c8:	6812      	ldr	r2, [r2, #0]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d01d      	beq.n	800670a <ai_platform_outputs_get+0x1d2>
 80066ce:	e7fe      	b.n	80066ce <ai_platform_outputs_get+0x196>
 80066d0:	4a48      	ldr	r2, [pc, #288]	@ (80067f4 <ai_platform_outputs_get+0x2bc>)
 80066d2:	2301      	movs	r3, #1
 80066d4:	6093      	str	r3, [r2, #8]
 80066d6:	6893      	ldr	r3, [r2, #8]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d1fc      	bne.n	80066d6 <ai_platform_outputs_get+0x19e>
 80066dc:	4946      	ldr	r1, [pc, #280]	@ (80067f8 <ai_platform_outputs_get+0x2c0>)
 80066de:	4b47      	ldr	r3, [pc, #284]	@ (80067fc <ai_platform_outputs_get+0x2c4>)
 80066e0:	6011      	str	r1, [r2, #0]
 80066e2:	6812      	ldr	r2, [r2, #0]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d010      	beq.n	800670a <ai_platform_outputs_get+0x1d2>
 80066e8:	e7fe      	b.n	80066e8 <ai_platform_outputs_get+0x1b0>
 80066ea:	4a45      	ldr	r2, [pc, #276]	@ (8006800 <ai_platform_outputs_get+0x2c8>)
 80066ec:	2301      	movs	r3, #1
 80066ee:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80066f2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1fb      	bne.n	80066f2 <ai_platform_outputs_get+0x1ba>
 80066fa:	493f      	ldr	r1, [pc, #252]	@ (80067f8 <ai_platform_outputs_get+0x2c0>)
 80066fc:	4b3f      	ldr	r3, [pc, #252]	@ (80067fc <ai_platform_outputs_get+0x2c4>)
 80066fe:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8006702:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006706:	429a      	cmp	r2, r3
 8006708:	d113      	bne.n	8006732 <ai_platform_outputs_get+0x1fa>
 800670a:	f7ff fbab 	bl	8005e64 <_ai_platform_release_crc>
 800670e:	2000      	movs	r0, #0
 8006710:	b005      	add	sp, #20
 8006712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006716:	4a37      	ldr	r2, [pc, #220]	@ (80067f4 <ai_platform_outputs_get+0x2bc>)
 8006718:	2301      	movs	r3, #1
 800671a:	6093      	str	r3, [r2, #8]
 800671c:	6893      	ldr	r3, [r2, #8]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1fc      	bne.n	800671c <ai_platform_outputs_get+0x1e4>
 8006722:	4b35      	ldr	r3, [pc, #212]	@ (80067f8 <ai_platform_outputs_get+0x2c0>)
 8006724:	6013      	str	r3, [r2, #0]
 8006726:	4b35      	ldr	r3, [pc, #212]	@ (80067fc <ai_platform_outputs_get+0x2c4>)
 8006728:	6812      	ldr	r2, [r2, #0]
 800672a:	429a      	cmp	r2, r3
 800672c:	f43f af3f 	beq.w	80065ae <ai_platform_outputs_get+0x76>
 8006730:	e7fe      	b.n	8006730 <ai_platform_outputs_get+0x1f8>
 8006732:	e7fe      	b.n	8006732 <ai_platform_outputs_get+0x1fa>
 8006734:	4a32      	ldr	r2, [pc, #200]	@ (8006800 <ai_platform_outputs_get+0x2c8>)
 8006736:	2301      	movs	r3, #1
 8006738:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800673c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006740:	2b00      	cmp	r3, #0
 8006742:	d1fb      	bne.n	800673c <ai_platform_outputs_get+0x204>
 8006744:	4b2c      	ldr	r3, [pc, #176]	@ (80067f8 <ai_platform_outputs_get+0x2c0>)
 8006746:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 800674a:	4b2c      	ldr	r3, [pc, #176]	@ (80067fc <ai_platform_outputs_get+0x2c4>)
 800674c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006750:	429a      	cmp	r2, r3
 8006752:	f43f af2c 	beq.w	80065ae <ai_platform_outputs_get+0x76>
 8006756:	e7fe      	b.n	8006756 <ai_platform_outputs_get+0x21e>
 8006758:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800675c:	b14c      	cbz	r4, 8006772 <ai_platform_outputs_get+0x23a>
 800675e:	f8da 3014 	ldr.w	r3, [sl, #20]
 8006762:	6858      	ldr	r0, [r3, #4]
 8006764:	9b02      	ldr	r3, [sp, #8]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d0d2      	beq.n	8006710 <ai_platform_outputs_get+0x1d8>
 800676a:	801c      	strh	r4, [r3, #0]
 800676c:	b005      	add	sp, #20
 800676e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006772:	2400      	movs	r4, #0
 8006774:	2218      	movs	r2, #24
 8006776:	2111      	movs	r1, #17
 8006778:	f109 0010 	add.w	r0, r9, #16
 800677c:	f000 ffe8 	bl	8007750 <core_set_error>
 8006780:	4620      	mov	r0, r4
 8006782:	e7ef      	b.n	8006764 <ai_platform_outputs_get+0x22c>
 8006784:	4a1e      	ldr	r2, [pc, #120]	@ (8006800 <ai_platform_outputs_get+0x2c8>)
 8006786:	2301      	movs	r3, #1
 8006788:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800678c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006790:	2b00      	cmp	r3, #0
 8006792:	d1fb      	bne.n	800678c <ai_platform_outputs_get+0x254>
 8006794:	4918      	ldr	r1, [pc, #96]	@ (80067f8 <ai_platform_outputs_get+0x2c0>)
 8006796:	4b19      	ldr	r3, [pc, #100]	@ (80067fc <ai_platform_outputs_get+0x2c4>)
 8006798:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 800679c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d0b2      	beq.n	800670a <ai_platform_outputs_get+0x1d2>
 80067a4:	e7fe      	b.n	80067a4 <ai_platform_outputs_get+0x26c>
 80067a6:	4a16      	ldr	r2, [pc, #88]	@ (8006800 <ai_platform_outputs_get+0x2c8>)
 80067a8:	2301      	movs	r3, #1
 80067aa:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80067ae:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d1fb      	bne.n	80067ae <ai_platform_outputs_get+0x276>
 80067b6:	4b10      	ldr	r3, [pc, #64]	@ (80067f8 <ai_platform_outputs_get+0x2c0>)
 80067b8:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 80067bc:	4b0f      	ldr	r3, [pc, #60]	@ (80067fc <ai_platform_outputs_get+0x2c4>)
 80067be:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 80067c2:	429a      	cmp	r2, r3
 80067c4:	f43f aef3 	beq.w	80065ae <ai_platform_outputs_get+0x76>
 80067c8:	e7fe      	b.n	80067c8 <ai_platform_outputs_get+0x290>
 80067ca:	4a0a      	ldr	r2, [pc, #40]	@ (80067f4 <ai_platform_outputs_get+0x2bc>)
 80067cc:	2301      	movs	r3, #1
 80067ce:	6093      	str	r3, [r2, #8]
 80067d0:	6893      	ldr	r3, [r2, #8]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d1fc      	bne.n	80067d0 <ai_platform_outputs_get+0x298>
 80067d6:	4b08      	ldr	r3, [pc, #32]	@ (80067f8 <ai_platform_outputs_get+0x2c0>)
 80067d8:	6013      	str	r3, [r2, #0]
 80067da:	4b08      	ldr	r3, [pc, #32]	@ (80067fc <ai_platform_outputs_get+0x2c4>)
 80067dc:	6812      	ldr	r2, [r2, #0]
 80067de:	429a      	cmp	r2, r3
 80067e0:	f43f aee5 	beq.w	80065ae <ai_platform_outputs_get+0x76>
 80067e4:	e7fe      	b.n	80067e4 <ai_platform_outputs_get+0x2ac>
 80067e6:	bf00      	nop
 80067e8:	a1c00100 	.word	0xa1c00100
 80067ec:	e0042000 	.word	0xe0042000
 80067f0:	5c001000 	.word	0x5c001000
 80067f4:	40023000 	.word	0x40023000
 80067f8:	f407a5c2 	.word	0xf407a5c2
 80067fc:	b5e8b5cd 	.word	0xb5e8b5cd
 8006800:	58024000 	.word	0x58024000
 8006804:	4a0d      	ldr	r2, [pc, #52]	@ (800683c <ai_platform_outputs_get+0x304>)
 8006806:	2301      	movs	r3, #1
 8006808:	6093      	str	r3, [r2, #8]
 800680a:	6893      	ldr	r3, [r2, #8]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d1fc      	bne.n	800680a <ai_platform_outputs_get+0x2d2>
 8006810:	490b      	ldr	r1, [pc, #44]	@ (8006840 <ai_platform_outputs_get+0x308>)
 8006812:	4b0c      	ldr	r3, [pc, #48]	@ (8006844 <ai_platform_outputs_get+0x30c>)
 8006814:	6011      	str	r1, [r2, #0]
 8006816:	6812      	ldr	r2, [r2, #0]
 8006818:	429a      	cmp	r2, r3
 800681a:	f43f af76 	beq.w	800670a <ai_platform_outputs_get+0x1d2>
 800681e:	e7fe      	b.n	800681e <ai_platform_outputs_get+0x2e6>
 8006820:	4a06      	ldr	r2, [pc, #24]	@ (800683c <ai_platform_outputs_get+0x304>)
 8006822:	2301      	movs	r3, #1
 8006824:	6093      	str	r3, [r2, #8]
 8006826:	6893      	ldr	r3, [r2, #8]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d1fc      	bne.n	8006826 <ai_platform_outputs_get+0x2ee>
 800682c:	4b04      	ldr	r3, [pc, #16]	@ (8006840 <ai_platform_outputs_get+0x308>)
 800682e:	6013      	str	r3, [r2, #0]
 8006830:	4b04      	ldr	r3, [pc, #16]	@ (8006844 <ai_platform_outputs_get+0x30c>)
 8006832:	6812      	ldr	r2, [r2, #0]
 8006834:	429a      	cmp	r2, r3
 8006836:	f43f aeba 	beq.w	80065ae <ai_platform_outputs_get+0x76>
 800683a:	e7fe      	b.n	800683a <ai_platform_outputs_get+0x302>
 800683c:	40023000 	.word	0x40023000
 8006840:	f407a5c2 	.word	0xf407a5c2
 8006844:	b5e8b5cd 	.word	0xb5e8b5cd

08006848 <ai_platform_network_create>:
 8006848:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800684c:	b083      	sub	sp, #12
 800684e:	4604      	mov	r4, r0
 8006850:	4615      	mov	r5, r2
 8006852:	461e      	mov	r6, r3
 8006854:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 8006858:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800685c:	f7ff fb00 	bl	8005e60 <_ai_platform_acquire_crc>
 8006860:	2800      	cmp	r0, #0
 8006862:	f000 80bd 	beq.w	80069e0 <ai_platform_network_create+0x198>
 8006866:	4ba5      	ldr	r3, [pc, #660]	@ (8006afc <ai_platform_network_create+0x2b4>)
 8006868:	f46f 6c8a 	mvn.w	ip, #1104	@ 0x450
 800686c:	4601      	mov	r1, r0
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006874:	eb03 020c 	add.w	r2, r3, ip
 8006878:	2a01      	cmp	r2, #1
 800687a:	f240 80a8 	bls.w	80069ce <ai_platform_network_create+0x186>
 800687e:	f240 4249 	movw	r2, #1097	@ 0x449
 8006882:	4293      	cmp	r3, r2
 8006884:	f000 80a3 	beq.w	80069ce <ai_platform_network_create+0x186>
 8006888:	4a9d      	ldr	r2, [pc, #628]	@ (8006b00 <ai_platform_network_create+0x2b8>)
 800688a:	6813      	ldr	r3, [r2, #0]
 800688c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006890:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8006894:	f000 80b9 	beq.w	8006a0a <ai_platform_network_create+0x1c2>
 8006898:	6813      	ldr	r3, [r2, #0]
 800689a:	f240 4c83 	movw	ip, #1155	@ 0x483
 800689e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80068a2:	4563      	cmp	r3, ip
 80068a4:	f000 80a1 	beq.w	80069ea <ai_platform_network_create+0x1a2>
 80068a8:	6813      	ldr	r3, [r2, #0]
 80068aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80068ae:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 80068b2:	f000 8153 	beq.w	8006b5c <ai_platform_network_create+0x314>
 80068b6:	6813      	ldr	r3, [r2, #0]
 80068b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f040 808d 	bne.w	80069dc <ai_platform_network_create+0x194>
 80068c2:	4a90      	ldr	r2, [pc, #576]	@ (8006b04 <ai_platform_network_create+0x2bc>)
 80068c4:	2318      	movs	r3, #24
 80068c6:	6093      	str	r3, [r2, #8]
 80068c8:	6893      	ldr	r3, [r2, #8]
 80068ca:	2b18      	cmp	r3, #24
 80068cc:	f040 8086 	bne.w	80069dc <ai_platform_network_create+0x194>
 80068d0:	2301      	movs	r3, #1
 80068d2:	6093      	str	r3, [r2, #8]
 80068d4:	6893      	ldr	r3, [r2, #8]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1fc      	bne.n	80068d4 <ai_platform_network_create+0x8c>
 80068da:	4608      	mov	r0, r1
 80068dc:	f7ff fac2 	bl	8005e64 <_ai_platform_release_crc>
 80068e0:	f7ff fabe 	bl	8005e60 <_ai_platform_acquire_crc>
 80068e4:	4b85      	ldr	r3, [pc, #532]	@ (8006afc <ai_platform_network_create+0x2b4>)
 80068e6:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80068f0:	189a      	adds	r2, r3, r2
 80068f2:	2a01      	cmp	r2, #1
 80068f4:	f240 809f 	bls.w	8006a36 <ai_platform_network_create+0x1ee>
 80068f8:	f240 4249 	movw	r2, #1097	@ 0x449
 80068fc:	4293      	cmp	r3, r2
 80068fe:	f000 809a 	beq.w	8006a36 <ai_platform_network_create+0x1ee>
 8006902:	4a7f      	ldr	r2, [pc, #508]	@ (8006b00 <ai_platform_network_create+0x2b8>)
 8006904:	6813      	ldr	r3, [r2, #0]
 8006906:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800690a:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 800690e:	f000 80a0 	beq.w	8006a52 <ai_platform_network_create+0x20a>
 8006912:	6813      	ldr	r3, [r2, #0]
 8006914:	f240 4183 	movw	r1, #1155	@ 0x483
 8006918:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800691c:	428b      	cmp	r3, r1
 800691e:	f000 80bf 	beq.w	8006aa0 <ai_platform_network_create+0x258>
 8006922:	6813      	ldr	r3, [r2, #0]
 8006924:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006928:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 800692c:	f000 8123 	beq.w	8006b76 <ai_platform_network_create+0x32e>
 8006930:	6813      	ldr	r3, [r2, #0]
 8006932:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006936:	2b00      	cmp	r3, #0
 8006938:	f000 80c4 	beq.w	8006ac4 <ai_platform_network_create+0x27c>
 800693c:	f7ff fa92 	bl	8005e64 <_ai_platform_release_crc>
 8006940:	2c00      	cmp	r4, #0
 8006942:	f000 80aa 	beq.w	8006a9a <ai_platform_network_create+0x252>
 8006946:	4b70      	ldr	r3, [pc, #448]	@ (8006b08 <ai_platform_network_create+0x2c0>)
 8006948:	602b      	str	r3, [r5, #0]
 800694a:	6025      	str	r5, [r4, #0]
 800694c:	f000 fef8 	bl	8007740 <core_init>
 8006950:	2800      	cmp	r0, #0
 8006952:	f000 8090 	beq.w	8006a76 <ai_platform_network_create+0x22e>
 8006956:	f7ff fa83 	bl	8005e60 <_ai_platform_acquire_crc>
 800695a:	4b68      	ldr	r3, [pc, #416]	@ (8006afc <ai_platform_network_create+0x2b4>)
 800695c:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006966:	185a      	adds	r2, r3, r1
 8006968:	2a01      	cmp	r2, #1
 800696a:	f240 80b9 	bls.w	8006ae0 <ai_platform_network_create+0x298>
 800696e:	f240 4249 	movw	r2, #1097	@ 0x449
 8006972:	4293      	cmp	r3, r2
 8006974:	f000 80b4 	beq.w	8006ae0 <ai_platform_network_create+0x298>
 8006978:	4a61      	ldr	r2, [pc, #388]	@ (8006b00 <ai_platform_network_create+0x2b8>)
 800697a:	6813      	ldr	r3, [r2, #0]
 800697c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006980:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8006984:	f000 80c8 	beq.w	8006b18 <ai_platform_network_create+0x2d0>
 8006988:	6813      	ldr	r3, [r2, #0]
 800698a:	f240 4183 	movw	r1, #1155	@ 0x483
 800698e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006992:	428b      	cmp	r3, r1
 8006994:	f000 8107 	beq.w	8006ba6 <ai_platform_network_create+0x35e>
 8006998:	6813      	ldr	r3, [r2, #0]
 800699a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800699e:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 80069a2:	f000 8111 	beq.w	8006bc8 <ai_platform_network_create+0x380>
 80069a6:	6813      	ldr	r3, [r2, #0]
 80069a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	f040 80c3 	bne.w	8006b38 <ai_platform_network_create+0x2f0>
 80069b2:	4b54      	ldr	r3, [pc, #336]	@ (8006b04 <ai_platform_network_create+0x2bc>)
 80069b4:	2201      	movs	r2, #1
 80069b6:	609a      	str	r2, [r3, #8]
 80069b8:	689a      	ldr	r2, [r3, #8]
 80069ba:	2a00      	cmp	r2, #0
 80069bc:	d1fc      	bne.n	80069b8 <ai_platform_network_create+0x170>
 80069be:	4a53      	ldr	r2, [pc, #332]	@ (8006b0c <ai_platform_network_create+0x2c4>)
 80069c0:	601a      	str	r2, [r3, #0]
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	4b52      	ldr	r3, [pc, #328]	@ (8006b10 <ai_platform_network_create+0x2c8>)
 80069c6:	429a      	cmp	r2, r3
 80069c8:	f000 80b6 	beq.w	8006b38 <ai_platform_network_create+0x2f0>
 80069cc:	e7fe      	b.n	80069cc <ai_platform_network_create+0x184>
 80069ce:	4b4d      	ldr	r3, [pc, #308]	@ (8006b04 <ai_platform_network_create+0x2bc>)
 80069d0:	2218      	movs	r2, #24
 80069d2:	609a      	str	r2, [r3, #8]
 80069d4:	689a      	ldr	r2, [r3, #8]
 80069d6:	2a18      	cmp	r2, #24
 80069d8:	d027      	beq.n	8006a2a <ai_platform_network_create+0x1e2>
 80069da:	4608      	mov	r0, r1
 80069dc:	f7ff fa42 	bl	8005e64 <_ai_platform_release_crc>
 80069e0:	f244 1033 	movw	r0, #16691	@ 0x4133
 80069e4:	b003      	add	sp, #12
 80069e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80069ea:	4a4a      	ldr	r2, [pc, #296]	@ (8006b14 <ai_platform_network_create+0x2cc>)
 80069ec:	2318      	movs	r3, #24
 80069ee:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80069f2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80069f6:	2b18      	cmp	r3, #24
 80069f8:	d1f0      	bne.n	80069dc <ai_platform_network_create+0x194>
 80069fa:	2301      	movs	r3, #1
 80069fc:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006a00:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d1fb      	bne.n	8006a00 <ai_platform_network_create+0x1b8>
 8006a08:	e767      	b.n	80068da <ai_platform_network_create+0x92>
 8006a0a:	4a42      	ldr	r2, [pc, #264]	@ (8006b14 <ai_platform_network_create+0x2cc>)
 8006a0c:	2318      	movs	r3, #24
 8006a0e:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006a12:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006a16:	2b18      	cmp	r3, #24
 8006a18:	d1e0      	bne.n	80069dc <ai_platform_network_create+0x194>
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006a20:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d1fb      	bne.n	8006a20 <ai_platform_network_create+0x1d8>
 8006a28:	e757      	b.n	80068da <ai_platform_network_create+0x92>
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	609a      	str	r2, [r3, #8]
 8006a2e:	689a      	ldr	r2, [r3, #8]
 8006a30:	2a00      	cmp	r2, #0
 8006a32:	d1fc      	bne.n	8006a2e <ai_platform_network_create+0x1e6>
 8006a34:	e751      	b.n	80068da <ai_platform_network_create+0x92>
 8006a36:	4a33      	ldr	r2, [pc, #204]	@ (8006b04 <ai_platform_network_create+0x2bc>)
 8006a38:	2301      	movs	r3, #1
 8006a3a:	6093      	str	r3, [r2, #8]
 8006a3c:	6891      	ldr	r1, [r2, #8]
 8006a3e:	2900      	cmp	r1, #0
 8006a40:	d1fc      	bne.n	8006a3c <ai_platform_network_create+0x1f4>
 8006a42:	4b32      	ldr	r3, [pc, #200]	@ (8006b0c <ai_platform_network_create+0x2c4>)
 8006a44:	6013      	str	r3, [r2, #0]
 8006a46:	4b32      	ldr	r3, [pc, #200]	@ (8006b10 <ai_platform_network_create+0x2c8>)
 8006a48:	6812      	ldr	r2, [r2, #0]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	f43f af76 	beq.w	800693c <ai_platform_network_create+0xf4>
 8006a50:	e7fe      	b.n	8006a50 <ai_platform_network_create+0x208>
 8006a52:	4a30      	ldr	r2, [pc, #192]	@ (8006b14 <ai_platform_network_create+0x2cc>)
 8006a54:	2301      	movs	r3, #1
 8006a56:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006a5a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1fb      	bne.n	8006a5a <ai_platform_network_create+0x212>
 8006a62:	4b2a      	ldr	r3, [pc, #168]	@ (8006b0c <ai_platform_network_create+0x2c4>)
 8006a64:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8006a68:	4b29      	ldr	r3, [pc, #164]	@ (8006b10 <ai_platform_network_create+0x2c8>)
 8006a6a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	f43f af64 	beq.w	800693c <ai_platform_network_create+0xf4>
 8006a74:	e7fe      	b.n	8006a74 <ai_platform_network_create+0x22c>
 8006a76:	f04f 0930 	mov.w	r9, #48	@ 0x30
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	6023      	str	r3, [r4, #0]
 8006a7e:	2410      	movs	r4, #16
 8006a80:	4642      	mov	r2, r8
 8006a82:	4639      	mov	r1, r7
 8006a84:	4630      	mov	r0, r6
 8006a86:	f004 fe0f 	bl	800b6a8 <ai_version_get>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2000      	movs	r0, #0
 8006a8e:	64ab      	str	r3, [r5, #72]	@ 0x48
 8006a90:	f369 0007 	bfi	r0, r9, #0, #8
 8006a94:	f364 201f 	bfi	r0, r4, #8, #24
 8006a98:	e7a4      	b.n	80069e4 <ai_platform_network_create+0x19c>
 8006a9a:	f241 0010 	movw	r0, #4112	@ 0x1010
 8006a9e:	e7a1      	b.n	80069e4 <ai_platform_network_create+0x19c>
 8006aa0:	4a1c      	ldr	r2, [pc, #112]	@ (8006b14 <ai_platform_network_create+0x2cc>)
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006aa8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d1fb      	bne.n	8006aa8 <ai_platform_network_create+0x260>
 8006ab0:	4b16      	ldr	r3, [pc, #88]	@ (8006b0c <ai_platform_network_create+0x2c4>)
 8006ab2:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8006ab6:	4b16      	ldr	r3, [pc, #88]	@ (8006b10 <ai_platform_network_create+0x2c8>)
 8006ab8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006abc:	429a      	cmp	r2, r3
 8006abe:	f43f af3d 	beq.w	800693c <ai_platform_network_create+0xf4>
 8006ac2:	e7fe      	b.n	8006ac2 <ai_platform_network_create+0x27a>
 8006ac4:	4a0f      	ldr	r2, [pc, #60]	@ (8006b04 <ai_platform_network_create+0x2bc>)
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	6093      	str	r3, [r2, #8]
 8006aca:	6893      	ldr	r3, [r2, #8]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d1fc      	bne.n	8006aca <ai_platform_network_create+0x282>
 8006ad0:	4b0e      	ldr	r3, [pc, #56]	@ (8006b0c <ai_platform_network_create+0x2c4>)
 8006ad2:	6013      	str	r3, [r2, #0]
 8006ad4:	4b0e      	ldr	r3, [pc, #56]	@ (8006b10 <ai_platform_network_create+0x2c8>)
 8006ad6:	6812      	ldr	r2, [r2, #0]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	f43f af2f 	beq.w	800693c <ai_platform_network_create+0xf4>
 8006ade:	e7fe      	b.n	8006ade <ai_platform_network_create+0x296>
 8006ae0:	4a08      	ldr	r2, [pc, #32]	@ (8006b04 <ai_platform_network_create+0x2bc>)
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	6093      	str	r3, [r2, #8]
 8006ae6:	6893      	ldr	r3, [r2, #8]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1fc      	bne.n	8006ae6 <ai_platform_network_create+0x29e>
 8006aec:	4b07      	ldr	r3, [pc, #28]	@ (8006b0c <ai_platform_network_create+0x2c4>)
 8006aee:	6013      	str	r3, [r2, #0]
 8006af0:	4b07      	ldr	r3, [pc, #28]	@ (8006b10 <ai_platform_network_create+0x2c8>)
 8006af2:	6812      	ldr	r2, [r2, #0]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d01f      	beq.n	8006b38 <ai_platform_network_create+0x2f0>
 8006af8:	e7fe      	b.n	8006af8 <ai_platform_network_create+0x2b0>
 8006afa:	bf00      	nop
 8006afc:	e0042000 	.word	0xe0042000
 8006b00:	5c001000 	.word	0x5c001000
 8006b04:	40023000 	.word	0x40023000
 8006b08:	a1c00100 	.word	0xa1c00100
 8006b0c:	f407a5c2 	.word	0xf407a5c2
 8006b10:	b5e8b5cd 	.word	0xb5e8b5cd
 8006b14:	58024000 	.word	0x58024000
 8006b18:	4a33      	ldr	r2, [pc, #204]	@ (8006be8 <ai_platform_network_create+0x3a0>)
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006b20:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d1fb      	bne.n	8006b20 <ai_platform_network_create+0x2d8>
 8006b28:	4b30      	ldr	r3, [pc, #192]	@ (8006bec <ai_platform_network_create+0x3a4>)
 8006b2a:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8006b2e:	4b30      	ldr	r3, [pc, #192]	@ (8006bf0 <ai_platform_network_create+0x3a8>)
 8006b30:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d12c      	bne.n	8006b92 <ai_platform_network_create+0x34a>
 8006b38:	f7ff f994 	bl	8005e64 <_ai_platform_release_crc>
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	4639      	mov	r1, r7
 8006b40:	4630      	mov	r0, r6
 8006b42:	f004 fdb1 	bl	800b6a8 <ai_version_get>
 8006b46:	4681      	mov	r9, r0
 8006b48:	2200      	movs	r2, #0
 8006b4a:	2105      	movs	r1, #5
 8006b4c:	2001      	movs	r0, #1
 8006b4e:	f004 fdab 	bl	800b6a8 <ai_version_get>
 8006b52:	4581      	cmp	r9, r0
 8006b54:	d01e      	beq.n	8006b94 <ai_platform_network_create+0x34c>
 8006b56:	f04f 0901 	mov.w	r9, #1
 8006b5a:	e78e      	b.n	8006a7a <ai_platform_network_create+0x232>
 8006b5c:	4b25      	ldr	r3, [pc, #148]	@ (8006bf4 <ai_platform_network_create+0x3ac>)
 8006b5e:	2218      	movs	r2, #24
 8006b60:	609a      	str	r2, [r3, #8]
 8006b62:	689a      	ldr	r2, [r3, #8]
 8006b64:	2a18      	cmp	r2, #24
 8006b66:	f47f af39 	bne.w	80069dc <ai_platform_network_create+0x194>
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	609a      	str	r2, [r3, #8]
 8006b6e:	689a      	ldr	r2, [r3, #8]
 8006b70:	2a00      	cmp	r2, #0
 8006b72:	d1fc      	bne.n	8006b6e <ai_platform_network_create+0x326>
 8006b74:	e6b1      	b.n	80068da <ai_platform_network_create+0x92>
 8006b76:	4a1f      	ldr	r2, [pc, #124]	@ (8006bf4 <ai_platform_network_create+0x3ac>)
 8006b78:	2301      	movs	r3, #1
 8006b7a:	6093      	str	r3, [r2, #8]
 8006b7c:	6893      	ldr	r3, [r2, #8]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d1fc      	bne.n	8006b7c <ai_platform_network_create+0x334>
 8006b82:	4b1a      	ldr	r3, [pc, #104]	@ (8006bec <ai_platform_network_create+0x3a4>)
 8006b84:	6013      	str	r3, [r2, #0]
 8006b86:	4b1a      	ldr	r3, [pc, #104]	@ (8006bf0 <ai_platform_network_create+0x3a8>)
 8006b88:	6812      	ldr	r2, [r2, #0]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	f43f aed6 	beq.w	800693c <ai_platform_network_create+0xf4>
 8006b90:	e7fe      	b.n	8006b90 <ai_platform_network_create+0x348>
 8006b92:	e7fe      	b.n	8006b92 <ai_platform_network_create+0x34a>
 8006b94:	4b18      	ldr	r3, [pc, #96]	@ (8006bf8 <ai_platform_network_create+0x3b0>)
 8006b96:	a801      	add	r0, sp, #4
 8006b98:	9301      	str	r3, [sp, #4]
 8006b9a:	f000 ff35 	bl	8007a08 <ai_check_custom_types>
 8006b9e:	b300      	cbz	r0, 8006be2 <ai_platform_network_create+0x39a>
 8006ba0:	2400      	movs	r4, #0
 8006ba2:	46a1      	mov	r9, r4
 8006ba4:	e76c      	b.n	8006a80 <ai_platform_network_create+0x238>
 8006ba6:	4b10      	ldr	r3, [pc, #64]	@ (8006be8 <ai_platform_network_create+0x3a0>)
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f8c3 2c08 	str.w	r2, [r3, #3080]	@ 0xc08
 8006bae:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	@ 0xc08
 8006bb2:	2a00      	cmp	r2, #0
 8006bb4:	d1fb      	bne.n	8006bae <ai_platform_network_create+0x366>
 8006bb6:	4a0d      	ldr	r2, [pc, #52]	@ (8006bec <ai_platform_network_create+0x3a4>)
 8006bb8:	f8c3 2c00 	str.w	r2, [r3, #3072]	@ 0xc00
 8006bbc:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	@ 0xc00
 8006bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8006bf0 <ai_platform_network_create+0x3a8>)
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d0b8      	beq.n	8006b38 <ai_platform_network_create+0x2f0>
 8006bc6:	e7fe      	b.n	8006bc6 <ai_platform_network_create+0x37e>
 8006bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8006bf4 <ai_platform_network_create+0x3ac>)
 8006bca:	2201      	movs	r2, #1
 8006bcc:	609a      	str	r2, [r3, #8]
 8006bce:	689a      	ldr	r2, [r3, #8]
 8006bd0:	2a00      	cmp	r2, #0
 8006bd2:	d1fc      	bne.n	8006bce <ai_platform_network_create+0x386>
 8006bd4:	4a05      	ldr	r2, [pc, #20]	@ (8006bec <ai_platform_network_create+0x3a4>)
 8006bd6:	601a      	str	r2, [r3, #0]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	4b05      	ldr	r3, [pc, #20]	@ (8006bf0 <ai_platform_network_create+0x3a8>)
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d0ab      	beq.n	8006b38 <ai_platform_network_create+0x2f0>
 8006be0:	e7fe      	b.n	8006be0 <ai_platform_network_create+0x398>
 8006be2:	f04f 0902 	mov.w	r9, #2
 8006be6:	e748      	b.n	8006a7a <ai_platform_network_create+0x232>
 8006be8:	58024000 	.word	0x58024000
 8006bec:	f407a5c2 	.word	0xf407a5c2
 8006bf0:	b5e8b5cd 	.word	0xb5e8b5cd
 8006bf4:	40023000 	.word	0x40023000
 8006bf8:	84048403 	.word	0x84048403

08006bfc <ai_platform_network_init>:
 8006bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c00:	2800      	cmp	r0, #0
 8006c02:	d052      	beq.n	8006caa <ai_platform_network_init+0xae>
 8006c04:	4bab      	ldr	r3, [pc, #684]	@ (8006eb4 <ai_platform_network_init+0x2b8>)
 8006c06:	4604      	mov	r4, r0
 8006c08:	6802      	ldr	r2, [r0, #0]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d14d      	bne.n	8006caa <ai_platform_network_init+0xae>
 8006c0e:	460d      	mov	r5, r1
 8006c10:	f7ff f926 	bl	8005e60 <_ai_platform_acquire_crc>
 8006c14:	4ba8      	ldr	r3, [pc, #672]	@ (8006eb8 <ai_platform_network_init+0x2bc>)
 8006c16:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c20:	189a      	adds	r2, r3, r2
 8006c22:	2a01      	cmp	r2, #1
 8006c24:	f240 809b 	bls.w	8006d5e <ai_platform_network_init+0x162>
 8006c28:	f240 4249 	movw	r2, #1097	@ 0x449
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	f000 8096 	beq.w	8006d5e <ai_platform_network_init+0x162>
 8006c32:	4aa2      	ldr	r2, [pc, #648]	@ (8006ebc <ai_platform_network_init+0x2c0>)
 8006c34:	6813      	ldr	r3, [r2, #0]
 8006c36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c3a:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8006c3e:	f000 809d 	beq.w	8006d7c <ai_platform_network_init+0x180>
 8006c42:	6813      	ldr	r3, [r2, #0]
 8006c44:	f240 4183 	movw	r1, #1155	@ 0x483
 8006c48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c4c:	428b      	cmp	r3, r1
 8006c4e:	f000 80e4 	beq.w	8006e1a <ai_platform_network_init+0x21e>
 8006c52:	6813      	ldr	r3, [r2, #0]
 8006c54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c58:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8006c5c:	f000 811b 	beq.w	8006e96 <ai_platform_network_init+0x29a>
 8006c60:	6813      	ldr	r3, [r2, #0]
 8006c62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	f000 80f9 	beq.w	8006e5e <ai_platform_network_init+0x262>
 8006c6c:	f7ff f8fa 	bl	8005e64 <_ai_platform_release_crc>
 8006c70:	2d00      	cmp	r5, #0
 8006c72:	f000 8147 	beq.w	8006f04 <ai_platform_network_init+0x308>
 8006c76:	4b92      	ldr	r3, [pc, #584]	@ (8006ec0 <ai_platform_network_init+0x2c4>)
 8006c78:	682a      	ldr	r2, [r5, #0]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	f040 8090 	bne.w	8006da0 <ai_platform_network_init+0x1a4>
 8006c80:	692b      	ldr	r3, [r5, #16]
 8006c82:	89ae      	ldrh	r6, [r5, #12]
 8006c84:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 8006c88:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 8006c8c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006c8e:	e9c4 1207 	strd	r1, r2, [r4, #28]
 8006c92:	2303      	movs	r3, #3
 8006c94:	84a6      	strh	r6, [r4, #36]	@ 0x24
 8006c96:	4626      	mov	r6, r4
 8006c98:	4620      	mov	r0, r4
 8006c9a:	f8a4 c026 	strh.w	ip, [r4, #38]	@ 0x26
 8006c9e:	60e3      	str	r3, [r4, #12]
 8006ca0:	f000 feda 	bl	8007a58 <ai_layers_init_all>
 8006ca4:	4630      	mov	r0, r6
 8006ca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006caa:	f7ff f8d9 	bl	8005e60 <_ai_platform_acquire_crc>
 8006cae:	4b82      	ldr	r3, [pc, #520]	@ (8006eb8 <ai_platform_network_init+0x2bc>)
 8006cb0:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006cba:	185a      	adds	r2, r3, r1
 8006cbc:	2a01      	cmp	r2, #1
 8006cbe:	d92b      	bls.n	8006d18 <ai_platform_network_init+0x11c>
 8006cc0:	f240 4249 	movw	r2, #1097	@ 0x449
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d027      	beq.n	8006d18 <ai_platform_network_init+0x11c>
 8006cc8:	4a7c      	ldr	r2, [pc, #496]	@ (8006ebc <ai_platform_network_init+0x2c0>)
 8006cca:	6813      	ldr	r3, [r2, #0]
 8006ccc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006cd0:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8006cd4:	d02d      	beq.n	8006d32 <ai_platform_network_init+0x136>
 8006cd6:	6813      	ldr	r3, [r2, #0]
 8006cd8:	f240 4183 	movw	r1, #1155	@ 0x483
 8006cdc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ce0:	428b      	cmp	r3, r1
 8006ce2:	f000 8089 	beq.w	8006df8 <ai_platform_network_init+0x1fc>
 8006ce6:	6813      	ldr	r3, [r2, #0]
 8006ce8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006cec:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8006cf0:	f000 80c3 	beq.w	8006e7a <ai_platform_network_init+0x27e>
 8006cf4:	6813      	ldr	r3, [r2, #0]
 8006cf6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d129      	bne.n	8006d52 <ai_platform_network_init+0x156>
 8006cfe:	4a71      	ldr	r2, [pc, #452]	@ (8006ec4 <ai_platform_network_init+0x2c8>)
 8006d00:	2301      	movs	r3, #1
 8006d02:	6093      	str	r3, [r2, #8]
 8006d04:	6893      	ldr	r3, [r2, #8]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d1fc      	bne.n	8006d04 <ai_platform_network_init+0x108>
 8006d0a:	496f      	ldr	r1, [pc, #444]	@ (8006ec8 <ai_platform_network_init+0x2cc>)
 8006d0c:	4b6f      	ldr	r3, [pc, #444]	@ (8006ecc <ai_platform_network_init+0x2d0>)
 8006d0e:	6011      	str	r1, [r2, #0]
 8006d10:	6812      	ldr	r2, [r2, #0]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d01d      	beq.n	8006d52 <ai_platform_network_init+0x156>
 8006d16:	e7fe      	b.n	8006d16 <ai_platform_network_init+0x11a>
 8006d18:	4a6a      	ldr	r2, [pc, #424]	@ (8006ec4 <ai_platform_network_init+0x2c8>)
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	6093      	str	r3, [r2, #8]
 8006d1e:	6893      	ldr	r3, [r2, #8]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1fc      	bne.n	8006d1e <ai_platform_network_init+0x122>
 8006d24:	4968      	ldr	r1, [pc, #416]	@ (8006ec8 <ai_platform_network_init+0x2cc>)
 8006d26:	4b69      	ldr	r3, [pc, #420]	@ (8006ecc <ai_platform_network_init+0x2d0>)
 8006d28:	6011      	str	r1, [r2, #0]
 8006d2a:	6812      	ldr	r2, [r2, #0]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d010      	beq.n	8006d52 <ai_platform_network_init+0x156>
 8006d30:	e7fe      	b.n	8006d30 <ai_platform_network_init+0x134>
 8006d32:	4a67      	ldr	r2, [pc, #412]	@ (8006ed0 <ai_platform_network_init+0x2d4>)
 8006d34:	2301      	movs	r3, #1
 8006d36:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006d3a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d1fb      	bne.n	8006d3a <ai_platform_network_init+0x13e>
 8006d42:	4961      	ldr	r1, [pc, #388]	@ (8006ec8 <ai_platform_network_init+0x2cc>)
 8006d44:	4b61      	ldr	r3, [pc, #388]	@ (8006ecc <ai_platform_network_init+0x2d0>)
 8006d46:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8006d4a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d113      	bne.n	8006d7a <ai_platform_network_init+0x17e>
 8006d52:	2600      	movs	r6, #0
 8006d54:	f7ff f886 	bl	8005e64 <_ai_platform_release_crc>
 8006d58:	4630      	mov	r0, r6
 8006d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d5e:	4a59      	ldr	r2, [pc, #356]	@ (8006ec4 <ai_platform_network_init+0x2c8>)
 8006d60:	2301      	movs	r3, #1
 8006d62:	6093      	str	r3, [r2, #8]
 8006d64:	6893      	ldr	r3, [r2, #8]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1fc      	bne.n	8006d64 <ai_platform_network_init+0x168>
 8006d6a:	4b57      	ldr	r3, [pc, #348]	@ (8006ec8 <ai_platform_network_init+0x2cc>)
 8006d6c:	6013      	str	r3, [r2, #0]
 8006d6e:	4b57      	ldr	r3, [pc, #348]	@ (8006ecc <ai_platform_network_init+0x2d0>)
 8006d70:	6812      	ldr	r2, [r2, #0]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	f43f af7a 	beq.w	8006c6c <ai_platform_network_init+0x70>
 8006d78:	e7fe      	b.n	8006d78 <ai_platform_network_init+0x17c>
 8006d7a:	e7fe      	b.n	8006d7a <ai_platform_network_init+0x17e>
 8006d7c:	4a54      	ldr	r2, [pc, #336]	@ (8006ed0 <ai_platform_network_init+0x2d4>)
 8006d7e:	2301      	movs	r3, #1
 8006d80:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006d84:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d1fb      	bne.n	8006d84 <ai_platform_network_init+0x188>
 8006d8c:	4b4e      	ldr	r3, [pc, #312]	@ (8006ec8 <ai_platform_network_init+0x2cc>)
 8006d8e:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8006d92:	4b4e      	ldr	r3, [pc, #312]	@ (8006ecc <ai_platform_network_init+0x2d0>)
 8006d94:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	f43f af67 	beq.w	8006c6c <ai_platform_network_init+0x70>
 8006d9e:	e7fe      	b.n	8006d9e <ai_platform_network_init+0x1a2>
 8006da0:	2101      	movs	r1, #1
 8006da2:	4628      	mov	r0, r5
 8006da4:	f105 081c 	add.w	r8, r5, #28
 8006da8:	686e      	ldr	r6, [r5, #4]
 8006daa:	f7ff f80b 	bl	8005dc4 <ai_buffer_get_size>
 8006dae:	4607      	mov	r7, r0
 8006db0:	2101      	movs	r1, #1
 8006db2:	4640      	mov	r0, r8
 8006db4:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8006db8:	f7ff f804 	bl	8005dc4 <ai_buffer_get_size>
 8006dbc:	2f00      	cmp	r7, #0
 8006dbe:	d13e      	bne.n	8006e3e <ai_platform_network_init+0x242>
 8006dc0:	2800      	cmp	r0, #0
 8006dc2:	f000 808e 	beq.w	8006ee2 <ai_platform_network_init+0x2e6>
 8006dc6:	f1b9 0f00 	cmp.w	r9, #0
 8006dca:	f000 8094 	beq.w	8006ef6 <ai_platform_network_init+0x2fa>
 8006dce:	f04f 0c01 	mov.w	ip, #1
 8006dd2:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8006dd4:	2600      	movs	r6, #0
 8006dd6:	83e7      	strh	r7, [r4, #30]
 8006dd8:	4563      	cmp	r3, ip
 8006dda:	83a6      	strh	r6, [r4, #28]
 8006ddc:	d37a      	bcc.n	8006ed4 <ai_platform_network_init+0x2d8>
 8006dde:	f1bc 0f00 	cmp.w	ip, #0
 8006de2:	f000 809c 	beq.w	8006f1e <ai_platform_network_init+0x322>
 8006de6:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8006de8:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 8006dec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006dee:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8006df2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8006df6:	e74c      	b.n	8006c92 <ai_platform_network_init+0x96>
 8006df8:	4a35      	ldr	r2, [pc, #212]	@ (8006ed0 <ai_platform_network_init+0x2d4>)
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006e00:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d1fb      	bne.n	8006e00 <ai_platform_network_init+0x204>
 8006e08:	492f      	ldr	r1, [pc, #188]	@ (8006ec8 <ai_platform_network_init+0x2cc>)
 8006e0a:	4b30      	ldr	r3, [pc, #192]	@ (8006ecc <ai_platform_network_init+0x2d0>)
 8006e0c:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8006e10:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d09c      	beq.n	8006d52 <ai_platform_network_init+0x156>
 8006e18:	e7fe      	b.n	8006e18 <ai_platform_network_init+0x21c>
 8006e1a:	4a2d      	ldr	r2, [pc, #180]	@ (8006ed0 <ai_platform_network_init+0x2d4>)
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006e22:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d1fb      	bne.n	8006e22 <ai_platform_network_init+0x226>
 8006e2a:	4b27      	ldr	r3, [pc, #156]	@ (8006ec8 <ai_platform_network_init+0x2cc>)
 8006e2c:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8006e30:	4b26      	ldr	r3, [pc, #152]	@ (8006ecc <ai_platform_network_init+0x2d0>)
 8006e32:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006e36:	429a      	cmp	r2, r3
 8006e38:	f43f af18 	beq.w	8006c6c <ai_platform_network_init+0x70>
 8006e3c:	e7fe      	b.n	8006e3c <ai_platform_network_init+0x240>
 8006e3e:	2800      	cmp	r0, #0
 8006e40:	d153      	bne.n	8006eea <ai_platform_network_init+0x2ee>
 8006e42:	4680      	mov	r8, r0
 8006e44:	4684      	mov	ip, r0
 8006e46:	2e00      	cmp	r6, #0
 8006e48:	d063      	beq.n	8006f12 <ai_platform_network_init+0x316>
 8006e4a:	8be6      	ldrh	r6, [r4, #30]
 8006e4c:	2e00      	cmp	r6, #0
 8006e4e:	d168      	bne.n	8006f22 <ai_platform_network_init+0x326>
 8006e50:	2212      	movs	r2, #18
 8006e52:	2116      	movs	r1, #22
 8006e54:	f104 0010 	add.w	r0, r4, #16
 8006e58:	f000 fc7a 	bl	8007750 <core_set_error>
 8006e5c:	e77c      	b.n	8006d58 <ai_platform_network_init+0x15c>
 8006e5e:	4a19      	ldr	r2, [pc, #100]	@ (8006ec4 <ai_platform_network_init+0x2c8>)
 8006e60:	2301      	movs	r3, #1
 8006e62:	6093      	str	r3, [r2, #8]
 8006e64:	6893      	ldr	r3, [r2, #8]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d1fc      	bne.n	8006e64 <ai_platform_network_init+0x268>
 8006e6a:	4b17      	ldr	r3, [pc, #92]	@ (8006ec8 <ai_platform_network_init+0x2cc>)
 8006e6c:	6013      	str	r3, [r2, #0]
 8006e6e:	4b17      	ldr	r3, [pc, #92]	@ (8006ecc <ai_platform_network_init+0x2d0>)
 8006e70:	6812      	ldr	r2, [r2, #0]
 8006e72:	429a      	cmp	r2, r3
 8006e74:	f43f aefa 	beq.w	8006c6c <ai_platform_network_init+0x70>
 8006e78:	e7fe      	b.n	8006e78 <ai_platform_network_init+0x27c>
 8006e7a:	4a12      	ldr	r2, [pc, #72]	@ (8006ec4 <ai_platform_network_init+0x2c8>)
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	6093      	str	r3, [r2, #8]
 8006e80:	6893      	ldr	r3, [r2, #8]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d1fc      	bne.n	8006e80 <ai_platform_network_init+0x284>
 8006e86:	4910      	ldr	r1, [pc, #64]	@ (8006ec8 <ai_platform_network_init+0x2cc>)
 8006e88:	4b10      	ldr	r3, [pc, #64]	@ (8006ecc <ai_platform_network_init+0x2d0>)
 8006e8a:	6011      	str	r1, [r2, #0]
 8006e8c:	6812      	ldr	r2, [r2, #0]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	f43f af5f 	beq.w	8006d52 <ai_platform_network_init+0x156>
 8006e94:	e7fe      	b.n	8006e94 <ai_platform_network_init+0x298>
 8006e96:	4a0b      	ldr	r2, [pc, #44]	@ (8006ec4 <ai_platform_network_init+0x2c8>)
 8006e98:	2301      	movs	r3, #1
 8006e9a:	6093      	str	r3, [r2, #8]
 8006e9c:	6893      	ldr	r3, [r2, #8]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1fc      	bne.n	8006e9c <ai_platform_network_init+0x2a0>
 8006ea2:	4b09      	ldr	r3, [pc, #36]	@ (8006ec8 <ai_platform_network_init+0x2cc>)
 8006ea4:	6013      	str	r3, [r2, #0]
 8006ea6:	4b09      	ldr	r3, [pc, #36]	@ (8006ecc <ai_platform_network_init+0x2d0>)
 8006ea8:	6812      	ldr	r2, [r2, #0]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	f43f aede 	beq.w	8006c6c <ai_platform_network_init+0x70>
 8006eb0:	e7fe      	b.n	8006eb0 <ai_platform_network_init+0x2b4>
 8006eb2:	bf00      	nop
 8006eb4:	a1c00100 	.word	0xa1c00100
 8006eb8:	e0042000 	.word	0xe0042000
 8006ebc:	5c001000 	.word	0x5c001000
 8006ec0:	a1facade 	.word	0xa1facade
 8006ec4:	40023000 	.word	0x40023000
 8006ec8:	f407a5c2 	.word	0xf407a5c2
 8006ecc:	b5e8b5cd 	.word	0xb5e8b5cd
 8006ed0:	58024000 	.word	0x58024000
 8006ed4:	2213      	movs	r2, #19
 8006ed6:	2116      	movs	r1, #22
 8006ed8:	f104 0010 	add.w	r0, r4, #16
 8006edc:	f000 fc38 	bl	8007750 <core_set_error>
 8006ee0:	e73a      	b.n	8006d58 <ai_platform_network_init+0x15c>
 8006ee2:	4607      	mov	r7, r0
 8006ee4:	4680      	mov	r8, r0
 8006ee6:	4684      	mov	ip, r0
 8006ee8:	e773      	b.n	8006dd2 <ai_platform_network_init+0x1d6>
 8006eea:	f1b9 0f00 	cmp.w	r9, #0
 8006eee:	d002      	beq.n	8006ef6 <ai_platform_network_init+0x2fa>
 8006ef0:	f04f 0c01 	mov.w	ip, #1
 8006ef4:	e7a7      	b.n	8006e46 <ai_platform_network_init+0x24a>
 8006ef6:	2110      	movs	r1, #16
 8006ef8:	2213      	movs	r2, #19
 8006efa:	2600      	movs	r6, #0
 8006efc:	1860      	adds	r0, r4, r1
 8006efe:	f000 fc27 	bl	8007750 <core_set_error>
 8006f02:	e729      	b.n	8006d58 <ai_platform_network_init+0x15c>
 8006f04:	2110      	movs	r1, #16
 8006f06:	2211      	movs	r2, #17
 8006f08:	462e      	mov	r6, r5
 8006f0a:	1860      	adds	r0, r4, r1
 8006f0c:	f000 fc20 	bl	8007750 <core_set_error>
 8006f10:	e722      	b.n	8006d58 <ai_platform_network_init+0x15c>
 8006f12:	2110      	movs	r1, #16
 8006f14:	2212      	movs	r2, #18
 8006f16:	1860      	adds	r0, r4, r1
 8006f18:	f000 fc1a 	bl	8007750 <core_set_error>
 8006f1c:	e71c      	b.n	8006d58 <ai_platform_network_init+0x15c>
 8006f1e:	4666      	mov	r6, ip
 8006f20:	e6b7      	b.n	8006c92 <ai_platform_network_init+0x96>
 8006f22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006f24:	6a26      	ldr	r6, [r4, #32]
 8006f26:	2701      	movs	r7, #1
 8006f28:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006f2a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006f2e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8006f32:	e74e      	b.n	8006dd2 <ai_platform_network_init+0x1d6>

08006f34 <ai_platform_network_post_init>:
 8006f34:	b538      	push	{r3, r4, r5, lr}
 8006f36:	2800      	cmp	r0, #0
 8006f38:	d04e      	beq.n	8006fd8 <ai_platform_network_post_init+0xa4>
 8006f3a:	4b8c      	ldr	r3, [pc, #560]	@ (800716c <ai_platform_network_post_init+0x238>)
 8006f3c:	4604      	mov	r4, r0
 8006f3e:	6802      	ldr	r2, [r0, #0]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d149      	bne.n	8006fd8 <ai_platform_network_post_init+0xa4>
 8006f44:	f7fe ff8c 	bl	8005e60 <_ai_platform_acquire_crc>
 8006f48:	4b89      	ldr	r3, [pc, #548]	@ (8007170 <ai_platform_network_post_init+0x23c>)
 8006f4a:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f54:	189a      	adds	r2, r3, r2
 8006f56:	2a01      	cmp	r2, #1
 8006f58:	f240 8095 	bls.w	8007086 <ai_platform_network_post_init+0x152>
 8006f5c:	f240 4249 	movw	r2, #1097	@ 0x449
 8006f60:	4293      	cmp	r3, r2
 8006f62:	f000 8090 	beq.w	8007086 <ai_platform_network_post_init+0x152>
 8006f66:	4a83      	ldr	r2, [pc, #524]	@ (8007174 <ai_platform_network_post_init+0x240>)
 8006f68:	6813      	ldr	r3, [r2, #0]
 8006f6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f6e:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8006f72:	f000 8096 	beq.w	80070a2 <ai_platform_network_post_init+0x16e>
 8006f76:	6813      	ldr	r3, [r2, #0]
 8006f78:	f240 4183 	movw	r1, #1155	@ 0x483
 8006f7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f80:	428b      	cmp	r3, r1
 8006f82:	f000 80b8 	beq.w	80070f6 <ai_platform_network_post_init+0x1c2>
 8006f86:	6813      	ldr	r3, [r2, #0]
 8006f88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f8c:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8006f90:	f000 80de 	beq.w	8007150 <ai_platform_network_post_init+0x21c>
 8006f94:	6813      	ldr	r3, [r2, #0]
 8006f96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f000 80bd 	beq.w	800711a <ai_platform_network_post_init+0x1e6>
 8006fa0:	f7fe ff60 	bl	8005e64 <_ai_platform_release_crc>
 8006fa4:	68e3      	ldr	r3, [r4, #12]
 8006fa6:	f013 0502 	ands.w	r5, r3, #2
 8006faa:	f000 808c 	beq.w	80070c6 <ai_platform_network_post_init+0x192>
 8006fae:	4620      	mov	r0, r4
 8006fb0:	f000 fd60 	bl	8007a74 <ai_layers_post_init_all>
 8006fb4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006fb6:	b16b      	cbz	r3, 8006fd4 <ai_platform_network_post_init+0xa0>
 8006fb8:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 8006fba:	e007      	b.n	8006fcc <ai_platform_network_post_init+0x98>
 8006fbc:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	@ 0x3c
 8006fc0:	4798      	blx	r3
 8006fc2:	692b      	ldr	r3, [r5, #16]
 8006fc4:	b133      	cbz	r3, 8006fd4 <ai_platform_network_post_init+0xa0>
 8006fc6:	42ab      	cmp	r3, r5
 8006fc8:	461d      	mov	r5, r3
 8006fca:	d003      	beq.n	8006fd4 <ai_platform_network_post_init+0xa0>
 8006fcc:	4629      	mov	r1, r5
 8006fce:	2000      	movs	r0, #0
 8006fd0:	2d00      	cmp	r5, #0
 8006fd2:	d1f3      	bne.n	8006fbc <ai_platform_network_post_init+0x88>
 8006fd4:	2001      	movs	r0, #1
 8006fd6:	bd38      	pop	{r3, r4, r5, pc}
 8006fd8:	f7fe ff42 	bl	8005e60 <_ai_platform_acquire_crc>
 8006fdc:	4b64      	ldr	r3, [pc, #400]	@ (8007170 <ai_platform_network_post_init+0x23c>)
 8006fde:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006fe8:	185a      	adds	r2, r3, r1
 8006fea:	2a01      	cmp	r2, #1
 8006fec:	d92a      	bls.n	8007044 <ai_platform_network_post_init+0x110>
 8006fee:	f240 4249 	movw	r2, #1097	@ 0x449
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d026      	beq.n	8007044 <ai_platform_network_post_init+0x110>
 8006ff6:	4a5f      	ldr	r2, [pc, #380]	@ (8007174 <ai_platform_network_post_init+0x240>)
 8006ff8:	6813      	ldr	r3, [r2, #0]
 8006ffa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ffe:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8007002:	d02c      	beq.n	800705e <ai_platform_network_post_init+0x12a>
 8007004:	6813      	ldr	r3, [r2, #0]
 8007006:	f240 4183 	movw	r1, #1155	@ 0x483
 800700a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800700e:	428b      	cmp	r3, r1
 8007010:	d060      	beq.n	80070d4 <ai_platform_network_post_init+0x1a0>
 8007012:	6813      	ldr	r3, [r2, #0]
 8007014:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007018:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 800701c:	f000 808b 	beq.w	8007136 <ai_platform_network_post_init+0x202>
 8007020:	6813      	ldr	r3, [r2, #0]
 8007022:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007026:	2b00      	cmp	r3, #0
 8007028:	d129      	bne.n	800707e <ai_platform_network_post_init+0x14a>
 800702a:	4a53      	ldr	r2, [pc, #332]	@ (8007178 <ai_platform_network_post_init+0x244>)
 800702c:	2301      	movs	r3, #1
 800702e:	6093      	str	r3, [r2, #8]
 8007030:	6893      	ldr	r3, [r2, #8]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d1fc      	bne.n	8007030 <ai_platform_network_post_init+0xfc>
 8007036:	4951      	ldr	r1, [pc, #324]	@ (800717c <ai_platform_network_post_init+0x248>)
 8007038:	4b51      	ldr	r3, [pc, #324]	@ (8007180 <ai_platform_network_post_init+0x24c>)
 800703a:	6011      	str	r1, [r2, #0]
 800703c:	6812      	ldr	r2, [r2, #0]
 800703e:	429a      	cmp	r2, r3
 8007040:	d01d      	beq.n	800707e <ai_platform_network_post_init+0x14a>
 8007042:	e7fe      	b.n	8007042 <ai_platform_network_post_init+0x10e>
 8007044:	4a4c      	ldr	r2, [pc, #304]	@ (8007178 <ai_platform_network_post_init+0x244>)
 8007046:	2301      	movs	r3, #1
 8007048:	6093      	str	r3, [r2, #8]
 800704a:	6893      	ldr	r3, [r2, #8]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d1fc      	bne.n	800704a <ai_platform_network_post_init+0x116>
 8007050:	494a      	ldr	r1, [pc, #296]	@ (800717c <ai_platform_network_post_init+0x248>)
 8007052:	4b4b      	ldr	r3, [pc, #300]	@ (8007180 <ai_platform_network_post_init+0x24c>)
 8007054:	6011      	str	r1, [r2, #0]
 8007056:	6812      	ldr	r2, [r2, #0]
 8007058:	429a      	cmp	r2, r3
 800705a:	d010      	beq.n	800707e <ai_platform_network_post_init+0x14a>
 800705c:	e7fe      	b.n	800705c <ai_platform_network_post_init+0x128>
 800705e:	4a49      	ldr	r2, [pc, #292]	@ (8007184 <ai_platform_network_post_init+0x250>)
 8007060:	2301      	movs	r3, #1
 8007062:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8007066:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800706a:	2b00      	cmp	r3, #0
 800706c:	d1fb      	bne.n	8007066 <ai_platform_network_post_init+0x132>
 800706e:	4943      	ldr	r1, [pc, #268]	@ (800717c <ai_platform_network_post_init+0x248>)
 8007070:	4b43      	ldr	r3, [pc, #268]	@ (8007180 <ai_platform_network_post_init+0x24c>)
 8007072:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8007076:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800707a:	429a      	cmp	r2, r3
 800707c:	d110      	bne.n	80070a0 <ai_platform_network_post_init+0x16c>
 800707e:	f7fe fef1 	bl	8005e64 <_ai_platform_release_crc>
 8007082:	2000      	movs	r0, #0
 8007084:	bd38      	pop	{r3, r4, r5, pc}
 8007086:	4a3c      	ldr	r2, [pc, #240]	@ (8007178 <ai_platform_network_post_init+0x244>)
 8007088:	2301      	movs	r3, #1
 800708a:	6093      	str	r3, [r2, #8]
 800708c:	6893      	ldr	r3, [r2, #8]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1fc      	bne.n	800708c <ai_platform_network_post_init+0x158>
 8007092:	493a      	ldr	r1, [pc, #232]	@ (800717c <ai_platform_network_post_init+0x248>)
 8007094:	4b3a      	ldr	r3, [pc, #232]	@ (8007180 <ai_platform_network_post_init+0x24c>)
 8007096:	6011      	str	r1, [r2, #0]
 8007098:	6812      	ldr	r2, [r2, #0]
 800709a:	429a      	cmp	r2, r3
 800709c:	d080      	beq.n	8006fa0 <ai_platform_network_post_init+0x6c>
 800709e:	e7fe      	b.n	800709e <ai_platform_network_post_init+0x16a>
 80070a0:	e7fe      	b.n	80070a0 <ai_platform_network_post_init+0x16c>
 80070a2:	4a38      	ldr	r2, [pc, #224]	@ (8007184 <ai_platform_network_post_init+0x250>)
 80070a4:	2301      	movs	r3, #1
 80070a6:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80070aa:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d1fb      	bne.n	80070aa <ai_platform_network_post_init+0x176>
 80070b2:	4932      	ldr	r1, [pc, #200]	@ (800717c <ai_platform_network_post_init+0x248>)
 80070b4:	4b32      	ldr	r3, [pc, #200]	@ (8007180 <ai_platform_network_post_init+0x24c>)
 80070b6:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 80070ba:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 80070be:	429a      	cmp	r2, r3
 80070c0:	f43f af6e 	beq.w	8006fa0 <ai_platform_network_post_init+0x6c>
 80070c4:	e7fe      	b.n	80070c4 <ai_platform_network_post_init+0x190>
 80070c6:	2210      	movs	r2, #16
 80070c8:	2111      	movs	r1, #17
 80070ca:	18a0      	adds	r0, r4, r2
 80070cc:	f000 fb40 	bl	8007750 <core_set_error>
 80070d0:	4628      	mov	r0, r5
 80070d2:	bd38      	pop	{r3, r4, r5, pc}
 80070d4:	4a2b      	ldr	r2, [pc, #172]	@ (8007184 <ai_platform_network_post_init+0x250>)
 80070d6:	2301      	movs	r3, #1
 80070d8:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80070dc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d1fb      	bne.n	80070dc <ai_platform_network_post_init+0x1a8>
 80070e4:	4925      	ldr	r1, [pc, #148]	@ (800717c <ai_platform_network_post_init+0x248>)
 80070e6:	4b26      	ldr	r3, [pc, #152]	@ (8007180 <ai_platform_network_post_init+0x24c>)
 80070e8:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 80070ec:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d0c4      	beq.n	800707e <ai_platform_network_post_init+0x14a>
 80070f4:	e7fe      	b.n	80070f4 <ai_platform_network_post_init+0x1c0>
 80070f6:	4a23      	ldr	r2, [pc, #140]	@ (8007184 <ai_platform_network_post_init+0x250>)
 80070f8:	2301      	movs	r3, #1
 80070fa:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80070fe:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8007102:	2b00      	cmp	r3, #0
 8007104:	d1fb      	bne.n	80070fe <ai_platform_network_post_init+0x1ca>
 8007106:	491d      	ldr	r1, [pc, #116]	@ (800717c <ai_platform_network_post_init+0x248>)
 8007108:	4b1d      	ldr	r3, [pc, #116]	@ (8007180 <ai_platform_network_post_init+0x24c>)
 800710a:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 800710e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8007112:	429a      	cmp	r2, r3
 8007114:	f43f af44 	beq.w	8006fa0 <ai_platform_network_post_init+0x6c>
 8007118:	e7fe      	b.n	8007118 <ai_platform_network_post_init+0x1e4>
 800711a:	4a17      	ldr	r2, [pc, #92]	@ (8007178 <ai_platform_network_post_init+0x244>)
 800711c:	2301      	movs	r3, #1
 800711e:	6093      	str	r3, [r2, #8]
 8007120:	6893      	ldr	r3, [r2, #8]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d1fc      	bne.n	8007120 <ai_platform_network_post_init+0x1ec>
 8007126:	4915      	ldr	r1, [pc, #84]	@ (800717c <ai_platform_network_post_init+0x248>)
 8007128:	4b15      	ldr	r3, [pc, #84]	@ (8007180 <ai_platform_network_post_init+0x24c>)
 800712a:	6011      	str	r1, [r2, #0]
 800712c:	6812      	ldr	r2, [r2, #0]
 800712e:	429a      	cmp	r2, r3
 8007130:	f43f af36 	beq.w	8006fa0 <ai_platform_network_post_init+0x6c>
 8007134:	e7fe      	b.n	8007134 <ai_platform_network_post_init+0x200>
 8007136:	4a10      	ldr	r2, [pc, #64]	@ (8007178 <ai_platform_network_post_init+0x244>)
 8007138:	2301      	movs	r3, #1
 800713a:	6093      	str	r3, [r2, #8]
 800713c:	6893      	ldr	r3, [r2, #8]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1fc      	bne.n	800713c <ai_platform_network_post_init+0x208>
 8007142:	490e      	ldr	r1, [pc, #56]	@ (800717c <ai_platform_network_post_init+0x248>)
 8007144:	4b0e      	ldr	r3, [pc, #56]	@ (8007180 <ai_platform_network_post_init+0x24c>)
 8007146:	6011      	str	r1, [r2, #0]
 8007148:	6812      	ldr	r2, [r2, #0]
 800714a:	429a      	cmp	r2, r3
 800714c:	d097      	beq.n	800707e <ai_platform_network_post_init+0x14a>
 800714e:	e7fe      	b.n	800714e <ai_platform_network_post_init+0x21a>
 8007150:	4a09      	ldr	r2, [pc, #36]	@ (8007178 <ai_platform_network_post_init+0x244>)
 8007152:	2301      	movs	r3, #1
 8007154:	6093      	str	r3, [r2, #8]
 8007156:	6893      	ldr	r3, [r2, #8]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d1fc      	bne.n	8007156 <ai_platform_network_post_init+0x222>
 800715c:	4907      	ldr	r1, [pc, #28]	@ (800717c <ai_platform_network_post_init+0x248>)
 800715e:	4b08      	ldr	r3, [pc, #32]	@ (8007180 <ai_platform_network_post_init+0x24c>)
 8007160:	6011      	str	r1, [r2, #0]
 8007162:	6812      	ldr	r2, [r2, #0]
 8007164:	429a      	cmp	r2, r3
 8007166:	f43f af1b 	beq.w	8006fa0 <ai_platform_network_post_init+0x6c>
 800716a:	e7fe      	b.n	800716a <ai_platform_network_post_init+0x236>
 800716c:	a1c00100 	.word	0xa1c00100
 8007170:	e0042000 	.word	0xe0042000
 8007174:	5c001000 	.word	0x5c001000
 8007178:	40023000 	.word	0x40023000
 800717c:	f407a5c2 	.word	0xf407a5c2
 8007180:	b5e8b5cd 	.word	0xb5e8b5cd
 8007184:	58024000 	.word	0x58024000

08007188 <ai_platform_network_process>:
 8007188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800718c:	b085      	sub	sp, #20
 800718e:	460e      	mov	r6, r1
 8007190:	4605      	mov	r5, r0
 8007192:	9201      	str	r2, [sp, #4]
 8007194:	b120      	cbz	r0, 80071a0 <ai_platform_network_process+0x18>
 8007196:	4b24      	ldr	r3, [pc, #144]	@ (8007228 <ai_platform_network_process+0xa0>)
 8007198:	6802      	ldr	r2, [r0, #0]
 800719a:	429a      	cmp	r2, r3
 800719c:	bf18      	it	ne
 800719e:	2500      	movne	r5, #0
 80071a0:	f7fe fe5e 	bl	8005e60 <_ai_platform_acquire_crc>
 80071a4:	4b21      	ldr	r3, [pc, #132]	@ (800722c <ai_platform_network_process+0xa4>)
 80071a6:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071b0:	185a      	adds	r2, r3, r1
 80071b2:	2a01      	cmp	r2, #1
 80071b4:	d92b      	bls.n	800720e <ai_platform_network_process+0x86>
 80071b6:	f240 4249 	movw	r2, #1097	@ 0x449
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d027      	beq.n	800720e <ai_platform_network_process+0x86>
 80071be:	4a1c      	ldr	r2, [pc, #112]	@ (8007230 <ai_platform_network_process+0xa8>)
 80071c0:	6813      	ldr	r3, [r2, #0]
 80071c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071c6:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 80071ca:	d039      	beq.n	8007240 <ai_platform_network_process+0xb8>
 80071cc:	6813      	ldr	r3, [r2, #0]
 80071ce:	f240 4183 	movw	r1, #1155	@ 0x483
 80071d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071d6:	428b      	cmp	r3, r1
 80071d8:	f000 819c 	beq.w	8007514 <ai_platform_network_process+0x38c>
 80071dc:	6813      	ldr	r3, [r2, #0]
 80071de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071e2:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 80071e6:	f000 8179 	beq.w	80074dc <ai_platform_network_process+0x354>
 80071ea:	6813      	ldr	r3, [r2, #0]
 80071ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d136      	bne.n	8007262 <ai_platform_network_process+0xda>
 80071f4:	4a0f      	ldr	r2, [pc, #60]	@ (8007234 <ai_platform_network_process+0xac>)
 80071f6:	2301      	movs	r3, #1
 80071f8:	6093      	str	r3, [r2, #8]
 80071fa:	6893      	ldr	r3, [r2, #8]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d1fc      	bne.n	80071fa <ai_platform_network_process+0x72>
 8007200:	4b0d      	ldr	r3, [pc, #52]	@ (8007238 <ai_platform_network_process+0xb0>)
 8007202:	6013      	str	r3, [r2, #0]
 8007204:	4b0d      	ldr	r3, [pc, #52]	@ (800723c <ai_platform_network_process+0xb4>)
 8007206:	6812      	ldr	r2, [r2, #0]
 8007208:	429a      	cmp	r2, r3
 800720a:	d02a      	beq.n	8007262 <ai_platform_network_process+0xda>
 800720c:	e7fe      	b.n	800720c <ai_platform_network_process+0x84>
 800720e:	4a09      	ldr	r2, [pc, #36]	@ (8007234 <ai_platform_network_process+0xac>)
 8007210:	2301      	movs	r3, #1
 8007212:	6093      	str	r3, [r2, #8]
 8007214:	6893      	ldr	r3, [r2, #8]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1fc      	bne.n	8007214 <ai_platform_network_process+0x8c>
 800721a:	4b07      	ldr	r3, [pc, #28]	@ (8007238 <ai_platform_network_process+0xb0>)
 800721c:	6013      	str	r3, [r2, #0]
 800721e:	4b07      	ldr	r3, [pc, #28]	@ (800723c <ai_platform_network_process+0xb4>)
 8007220:	6812      	ldr	r2, [r2, #0]
 8007222:	429a      	cmp	r2, r3
 8007224:	d01d      	beq.n	8007262 <ai_platform_network_process+0xda>
 8007226:	e7fe      	b.n	8007226 <ai_platform_network_process+0x9e>
 8007228:	a1c00100 	.word	0xa1c00100
 800722c:	e0042000 	.word	0xe0042000
 8007230:	5c001000 	.word	0x5c001000
 8007234:	40023000 	.word	0x40023000
 8007238:	f407a5c2 	.word	0xf407a5c2
 800723c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007240:	4ab0      	ldr	r2, [pc, #704]	@ (8007504 <ai_platform_network_process+0x37c>)
 8007242:	2301      	movs	r3, #1
 8007244:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8007248:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800724c:	2b00      	cmp	r3, #0
 800724e:	d1fb      	bne.n	8007248 <ai_platform_network_process+0xc0>
 8007250:	4bad      	ldr	r3, [pc, #692]	@ (8007508 <ai_platform_network_process+0x380>)
 8007252:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8007256:	4bad      	ldr	r3, [pc, #692]	@ (800750c <ai_platform_network_process+0x384>)
 8007258:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800725c:	429a      	cmp	r2, r3
 800725e:	f040 812b 	bne.w	80074b8 <ai_platform_network_process+0x330>
 8007262:	f7fe fdff 	bl	8005e64 <_ai_platform_release_crc>
 8007266:	2d00      	cmp	r5, #0
 8007268:	f000 8172 	beq.w	8007550 <ai_platform_network_process+0x3c8>
 800726c:	8dab      	ldrh	r3, [r5, #44]	@ 0x2c
 800726e:	2b00      	cmp	r3, #0
 8007270:	f000 8123 	beq.w	80074ba <ai_platform_network_process+0x332>
 8007274:	68eb      	ldr	r3, [r5, #12]
 8007276:	2200      	movs	r2, #0
 8007278:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 800727c:	f003 0303 	and.w	r3, r3, #3
 8007280:	616a      	str	r2, [r5, #20]
 8007282:	2b03      	cmp	r3, #3
 8007284:	f040 811f 	bne.w	80074c6 <ai_platform_network_process+0x33e>
 8007288:	2e00      	cmp	r6, #0
 800728a:	f000 8156 	beq.w	800753a <ai_platform_network_process+0x3b2>
 800728e:	fab8 f788 	clz	r7, r8
 8007292:	097f      	lsrs	r7, r7, #5
 8007294:	f1b8 0f00 	cmp.w	r8, #0
 8007298:	f000 814f 	beq.w	800753a <ai_platform_network_process+0x3b2>
 800729c:	f8b8 3000 	ldrh.w	r3, [r8]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	f000 814a 	beq.w	800753a <ai_platform_network_process+0x3b2>
 80072a6:	69b3      	ldr	r3, [r6, #24]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	e9cd 3502 	strd	r3, r5, [sp, #8]
 80072ae:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d072      	beq.n	800739c <ai_platform_network_process+0x214>
 80072b6:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 80072ba:	2c00      	cmp	r4, #0
 80072bc:	d06e      	beq.n	800739c <ai_platform_network_process+0x214>
 80072be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80072c2:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80072c6:	f8d3 a000 	ldr.w	sl, [r3]
 80072ca:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 80072ce:	f000 8133 	beq.w	8007538 <ai_platform_network_process+0x3b0>
 80072d2:	69a3      	ldr	r3, [r4, #24]
 80072d4:	2101      	movs	r1, #1
 80072d6:	4630      	mov	r0, r6
 80072d8:	685d      	ldr	r5, [r3, #4]
 80072da:	f7fe fd73 	bl	8005dc4 <ai_buffer_get_size>
 80072de:	4285      	cmp	r5, r0
 80072e0:	f0c0 8138 	bcc.w	8007554 <ai_platform_network_process+0x3cc>
 80072e4:	68e0      	ldr	r0, [r4, #12]
 80072e6:	69b1      	ldr	r1, [r6, #24]
 80072e8:	68c2      	ldr	r2, [r0, #12]
 80072ea:	68cb      	ldr	r3, [r1, #12]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	f040 8131 	bne.w	8007554 <ai_platform_network_process+0x3cc>
 80072f2:	6882      	ldr	r2, [r0, #8]
 80072f4:	688b      	ldr	r3, [r1, #8]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	f040 812c 	bne.w	8007554 <ai_platform_network_process+0x3cc>
 80072fc:	6842      	ldr	r2, [r0, #4]
 80072fe:	684b      	ldr	r3, [r1, #4]
 8007300:	429a      	cmp	r2, r3
 8007302:	f040 8127 	bne.w	8007554 <ai_platform_network_process+0x3cc>
 8007306:	69a3      	ldr	r3, [r4, #24]
 8007308:	e9d3 0100 	ldrd	r0, r1, [r3]
 800730c:	f004 f9bc 	bl	800b688 <ai_array_get_data_byte_size>
 8007310:	4605      	mov	r5, r0
 8007312:	4620      	mov	r0, r4
 8007314:	f004 f9ce 	bl	800b6b4 <get_tensor_byte_size>
 8007318:	4285      	cmp	r5, r0
 800731a:	f0c0 811b 	bcc.w	8007554 <ai_platform_network_process+0x3cc>
 800731e:	69a3      	ldr	r3, [r4, #24]
 8007320:	6818      	ldr	r0, [r3, #0]
 8007322:	f004 f91d 	bl	800b560 <ai_array_to_buffer_fmt>
 8007326:	6833      	ldr	r3, [r6, #0]
 8007328:	4058      	eors	r0, r3
 800732a:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 800732e:	f040 81c8 	bne.w	80076c2 <ai_platform_network_process+0x53a>
 8007332:	6873      	ldr	r3, [r6, #4]
 8007334:	2b00      	cmp	r3, #0
 8007336:	f000 81bb 	beq.w	80076b0 <ai_platform_network_process+0x528>
 800733a:	69b3      	ldr	r3, [r6, #24]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	2b00      	cmp	r3, #0
 8007340:	f000 81c8 	beq.w	80076d4 <ai_platform_network_process+0x54c>
 8007344:	9a02      	ldr	r2, [sp, #8]
 8007346:	4620      	mov	r0, r4
 8007348:	3701      	adds	r7, #1
 800734a:	361c      	adds	r6, #28
 800734c:	429a      	cmp	r2, r3
 800734e:	bf38      	it	cc
 8007350:	461a      	movcc	r2, r3
 8007352:	9202      	str	r2, [sp, #8]
 8007354:	f004 f9ae 	bl	800b6b4 <get_tensor_byte_size>
 8007358:	f8c9 0008 	str.w	r0, [r9, #8]
 800735c:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	fb00 f303 	mul.w	r3, r0, r3
 8007366:	f8c9 300c 	str.w	r3, [r9, #12]
 800736a:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800736e:	440b      	add	r3, r1
 8007370:	f8c9 1004 	str.w	r1, [r9, #4]
 8007374:	f84a 300b 	str.w	r3, [sl, fp]
 8007378:	69a0      	ldr	r0, [r4, #24]
 800737a:	6803      	ldr	r3, [r0, #0]
 800737c:	009a      	lsls	r2, r3, #2
 800737e:	f100 80bb 	bmi.w	80074f8 <ai_platform_network_process+0x370>
 8007382:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8007386:	1a9b      	subs	r3, r3, r2
 8007388:	4419      	add	r1, r3
 800738a:	6081      	str	r1, [r0, #8]
 800738c:	69a3      	ldr	r3, [r4, #24]
 800738e:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8007392:	60da      	str	r2, [r3, #12]
 8007394:	f8b8 3000 	ldrh.w	r3, [r8]
 8007398:	42bb      	cmp	r3, r7
 800739a:	d888      	bhi.n	80072ae <ai_platform_network_process+0x126>
 800739c:	9d03      	ldr	r5, [sp, #12]
 800739e:	9b01      	ldr	r3, [sp, #4]
 80073a0:	8daa      	ldrh	r2, [r5, #44]	@ 0x2c
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	f000 819f 	beq.w	80076e6 <ai_platform_network_process+0x55e>
 80073a8:	2a01      	cmp	r2, #1
 80073aa:	f240 8179 	bls.w	80076a0 <ai_platform_network_process+0x518>
 80073ae:	f8d5 9030 	ldr.w	r9, [r5, #48]	@ 0x30
 80073b2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	f000 8172 	beq.w	80076a0 <ai_platform_network_process+0x518>
 80073bc:	9e01      	ldr	r6, [sp, #4]
 80073be:	2700      	movs	r7, #0
 80073c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	f000 80d3 	beq.w	8007570 <ai_platform_network_process+0x3e8>
 80073ca:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 80073ce:	2c00      	cmp	r4, #0
 80073d0:	f000 80ce 	beq.w	8007570 <ai_platform_network_process+0x3e8>
 80073d4:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80073d8:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80073dc:	f8d3 8000 	ldr.w	r8, [r3]
 80073e0:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 80073e4:	f000 819d 	beq.w	8007722 <ai_platform_network_process+0x59a>
 80073e8:	69a3      	ldr	r3, [r4, #24]
 80073ea:	2101      	movs	r1, #1
 80073ec:	4630      	mov	r0, r6
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	9301      	str	r3, [sp, #4]
 80073f2:	f7fe fce7 	bl	8005dc4 <ai_buffer_get_size>
 80073f6:	9b01      	ldr	r3, [sp, #4]
 80073f8:	4283      	cmp	r3, r0
 80073fa:	f0c0 8151 	bcc.w	80076a0 <ai_platform_network_process+0x518>
 80073fe:	68e0      	ldr	r0, [r4, #12]
 8007400:	69b1      	ldr	r1, [r6, #24]
 8007402:	68c2      	ldr	r2, [r0, #12]
 8007404:	68cb      	ldr	r3, [r1, #12]
 8007406:	429a      	cmp	r2, r3
 8007408:	f040 814a 	bne.w	80076a0 <ai_platform_network_process+0x518>
 800740c:	6882      	ldr	r2, [r0, #8]
 800740e:	688b      	ldr	r3, [r1, #8]
 8007410:	429a      	cmp	r2, r3
 8007412:	f040 8145 	bne.w	80076a0 <ai_platform_network_process+0x518>
 8007416:	6842      	ldr	r2, [r0, #4]
 8007418:	684b      	ldr	r3, [r1, #4]
 800741a:	429a      	cmp	r2, r3
 800741c:	f040 8140 	bne.w	80076a0 <ai_platform_network_process+0x518>
 8007420:	69a3      	ldr	r3, [r4, #24]
 8007422:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007426:	f004 f92f 	bl	800b688 <ai_array_get_data_byte_size>
 800742a:	9001      	str	r0, [sp, #4]
 800742c:	4620      	mov	r0, r4
 800742e:	f004 f941 	bl	800b6b4 <get_tensor_byte_size>
 8007432:	9b01      	ldr	r3, [sp, #4]
 8007434:	4283      	cmp	r3, r0
 8007436:	f0c0 8133 	bcc.w	80076a0 <ai_platform_network_process+0x518>
 800743a:	69a3      	ldr	r3, [r4, #24]
 800743c:	6818      	ldr	r0, [r3, #0]
 800743e:	f004 f88f 	bl	800b560 <ai_array_to_buffer_fmt>
 8007442:	6833      	ldr	r3, [r6, #0]
 8007444:	4058      	eors	r0, r3
 8007446:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 800744a:	f040 815a 	bne.w	8007702 <ai_platform_network_process+0x57a>
 800744e:	6873      	ldr	r3, [r6, #4]
 8007450:	2b00      	cmp	r3, #0
 8007452:	f000 814e 	beq.w	80076f2 <ai_platform_network_process+0x56a>
 8007456:	69b3      	ldr	r3, [r6, #24]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	f000 8159 	beq.w	8007712 <ai_platform_network_process+0x58a>
 8007460:	9a02      	ldr	r2, [sp, #8]
 8007462:	4620      	mov	r0, r4
 8007464:	3701      	adds	r7, #1
 8007466:	361c      	adds	r6, #28
 8007468:	429a      	cmp	r2, r3
 800746a:	bf38      	it	cc
 800746c:	461a      	movcc	r2, r3
 800746e:	9202      	str	r2, [sp, #8]
 8007470:	f004 f920 	bl	800b6b4 <get_tensor_byte_size>
 8007474:	f8ca 0008 	str.w	r0, [sl, #8]
 8007478:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	fb00 f303 	mul.w	r3, r0, r3
 8007482:	f8ca 300c 	str.w	r3, [sl, #12]
 8007486:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800748a:	440b      	add	r3, r1
 800748c:	f8ca 1004 	str.w	r1, [sl, #4]
 8007490:	f848 300b 	str.w	r3, [r8, fp]
 8007494:	69a0      	ldr	r0, [r4, #24]
 8007496:	6803      	ldr	r3, [r0, #0]
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	d464      	bmi.n	8007566 <ai_platform_network_process+0x3de>
 800749c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80074a0:	1a9b      	subs	r3, r3, r2
 80074a2:	4419      	add	r1, r3
 80074a4:	6081      	str	r1, [r0, #8]
 80074a6:	69a3      	ldr	r3, [r4, #24]
 80074a8:	f8da 2004 	ldr.w	r2, [sl, #4]
 80074ac:	60da      	str	r2, [r3, #12]
 80074ae:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80074b2:	429f      	cmp	r7, r3
 80074b4:	d384      	bcc.n	80073c0 <ai_platform_network_process+0x238>
 80074b6:	e05b      	b.n	8007570 <ai_platform_network_process+0x3e8>
 80074b8:	e7fe      	b.n	80074b8 <ai_platform_network_process+0x330>
 80074ba:	68ea      	ldr	r2, [r5, #12]
 80074bc:	616b      	str	r3, [r5, #20]
 80074be:	f002 0203 	and.w	r2, r2, #3
 80074c2:	2a03      	cmp	r2, #3
 80074c4:	d039      	beq.n	800753a <ai_platform_network_process+0x3b2>
 80074c6:	2230      	movs	r2, #48	@ 0x30
 80074c8:	2111      	movs	r1, #17
 80074ca:	f105 0010 	add.w	r0, r5, #16
 80074ce:	2400      	movs	r4, #0
 80074d0:	f000 f93e 	bl	8007750 <core_set_error>
 80074d4:	4620      	mov	r0, r4
 80074d6:	b005      	add	sp, #20
 80074d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074dc:	4a0c      	ldr	r2, [pc, #48]	@ (8007510 <ai_platform_network_process+0x388>)
 80074de:	2301      	movs	r3, #1
 80074e0:	6093      	str	r3, [r2, #8]
 80074e2:	6893      	ldr	r3, [r2, #8]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d1fc      	bne.n	80074e2 <ai_platform_network_process+0x35a>
 80074e8:	4b07      	ldr	r3, [pc, #28]	@ (8007508 <ai_platform_network_process+0x380>)
 80074ea:	6013      	str	r3, [r2, #0]
 80074ec:	4b07      	ldr	r3, [pc, #28]	@ (800750c <ai_platform_network_process+0x384>)
 80074ee:	6812      	ldr	r2, [r2, #0]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	f43f aeb6 	beq.w	8007262 <ai_platform_network_process+0xda>
 80074f6:	e7fe      	b.n	80074f6 <ai_platform_network_process+0x36e>
 80074f8:	f8b8 3000 	ldrh.w	r3, [r8]
 80074fc:	429f      	cmp	r7, r3
 80074fe:	f4ff aed6 	bcc.w	80072ae <ai_platform_network_process+0x126>
 8007502:	e74b      	b.n	800739c <ai_platform_network_process+0x214>
 8007504:	58024000 	.word	0x58024000
 8007508:	f407a5c2 	.word	0xf407a5c2
 800750c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007510:	40023000 	.word	0x40023000
 8007514:	4a87      	ldr	r2, [pc, #540]	@ (8007734 <ai_platform_network_process+0x5ac>)
 8007516:	2301      	movs	r3, #1
 8007518:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800751c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8007520:	2b00      	cmp	r3, #0
 8007522:	d1fb      	bne.n	800751c <ai_platform_network_process+0x394>
 8007524:	4b84      	ldr	r3, [pc, #528]	@ (8007738 <ai_platform_network_process+0x5b0>)
 8007526:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 800752a:	4b84      	ldr	r3, [pc, #528]	@ (800773c <ai_platform_network_process+0x5b4>)
 800752c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8007530:	429a      	cmp	r2, r3
 8007532:	f43f ae96 	beq.w	8007262 <ai_platform_network_process+0xda>
 8007536:	e7fe      	b.n	8007536 <ai_platform_network_process+0x3ae>
 8007538:	9d03      	ldr	r5, [sp, #12]
 800753a:	2400      	movs	r4, #0
 800753c:	2217      	movs	r2, #23
 800753e:	2112      	movs	r1, #18
 8007540:	f105 0010 	add.w	r0, r5, #16
 8007544:	f000 f904 	bl	8007750 <core_set_error>
 8007548:	4620      	mov	r0, r4
 800754a:	b005      	add	sp, #20
 800754c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007550:	462c      	mov	r4, r5
 8007552:	e7bf      	b.n	80074d4 <ai_platform_network_process+0x34c>
 8007554:	9d03      	ldr	r5, [sp, #12]
 8007556:	2218      	movs	r2, #24
 8007558:	2112      	movs	r1, #18
 800755a:	2400      	movs	r4, #0
 800755c:	f105 0010 	add.w	r0, r5, #16
 8007560:	f000 f8f6 	bl	8007750 <core_set_error>
 8007564:	e7b6      	b.n	80074d4 <ai_platform_network_process+0x34c>
 8007566:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800756a:	429f      	cmp	r7, r3
 800756c:	f4ff af28 	bcc.w	80073c0 <ai_platform_network_process+0x238>
 8007570:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8007574:	8daa      	ldrh	r2, [r5, #44]	@ 0x2c
 8007576:	82ab      	strh	r3, [r5, #20]
 8007578:	2a00      	cmp	r2, #0
 800757a:	f040 808b 	bne.w	8007694 <ai_platform_network_process+0x50c>
 800757e:	4616      	mov	r6, r2
 8007580:	4617      	mov	r7, r2
 8007582:	8aec      	ldrh	r4, [r5, #22]
 8007584:	429c      	cmp	r4, r3
 8007586:	d2a5      	bcs.n	80074d4 <ai_platform_network_process+0x34c>
 8007588:	46ab      	mov	fp, r5
 800758a:	2e00      	cmp	r6, #0
 800758c:	d030      	beq.n	80075f0 <ai_platform_network_process+0x468>
 800758e:	f04f 0800 	mov.w	r8, #0
 8007592:	e014      	b.n	80075be <ai_platform_network_process+0x436>
 8007594:	6882      	ldr	r2, [r0, #8]
 8007596:	68c5      	ldr	r5, [r0, #12]
 8007598:	6863      	ldr	r3, [r4, #4]
 800759a:	1b52      	subs	r2, r2, r5
 800759c:	4413      	add	r3, r2
 800759e:	6083      	str	r3, [r0, #8]
 80075a0:	698b      	ldr	r3, [r1, #24]
 80075a2:	6862      	ldr	r2, [r4, #4]
 80075a4:	60da      	str	r2, [r3, #12]
 80075a6:	f859 200a 	ldr.w	r2, [r9, sl]
 80075aa:	f108 0801 	add.w	r8, r8, #1
 80075ae:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80075b2:	440b      	add	r3, r1
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d301      	bcc.n	80075bc <ai_platform_network_process+0x434>
 80075b8:	68e3      	ldr	r3, [r4, #12]
 80075ba:	1ad3      	subs	r3, r2, r3
 80075bc:	6063      	str	r3, [r4, #4]
 80075be:	8833      	ldrh	r3, [r6, #0]
 80075c0:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 80075c4:	4543      	cmp	r3, r8
 80075c6:	d913      	bls.n	80075f0 <ai_platform_network_process+0x468>
 80075c8:	6873      	ldr	r3, [r6, #4]
 80075ca:	b18b      	cbz	r3, 80075f0 <ai_platform_network_process+0x468>
 80075cc:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 80075d0:	b171      	cbz	r1, 80075f0 <ai_platform_network_process+0x468>
 80075d2:	6988      	ldr	r0, [r1, #24]
 80075d4:	68b2      	ldr	r2, [r6, #8]
 80075d6:	6803      	ldr	r3, [r0, #0]
 80075d8:	f8d2 9000 	ldr.w	r9, [r2]
 80075dc:	009d      	lsls	r5, r3, #2
 80075de:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 80075e2:	d5d7      	bpl.n	8007594 <ai_platform_network_process+0x40c>
 80075e4:	6881      	ldr	r1, [r0, #8]
 80075e6:	68a2      	ldr	r2, [r4, #8]
 80075e8:	6860      	ldr	r0, [r4, #4]
 80075ea:	f002 fb99 	bl	8009d20 <st_int8_copy>
 80075ee:	e7da      	b.n	80075a6 <ai_platform_network_process+0x41e>
 80075f0:	4658      	mov	r0, fp
 80075f2:	f000 fa53 	bl	8007a9c <ai_layers_forward_all>
 80075f6:	2f00      	cmp	r7, #0
 80075f8:	d03d      	beq.n	8007676 <ai_platform_network_process+0x4ee>
 80075fa:	2400      	movs	r4, #0
 80075fc:	e016      	b.n	800762c <ai_platform_network_process+0x4a4>
 80075fe:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8007602:	f859 100a 	ldr.w	r1, [r9, sl]
 8007606:	4413      	add	r3, r2
 8007608:	428b      	cmp	r3, r1
 800760a:	d302      	bcc.n	8007612 <ai_platform_network_process+0x48a>
 800760c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007610:	1acb      	subs	r3, r1, r3
 8007612:	f8c8 3004 	str.w	r3, [r8, #4]
 8007616:	6981      	ldr	r1, [r0, #24]
 8007618:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800761c:	1b52      	subs	r2, r2, r5
 800761e:	4413      	add	r3, r2
 8007620:	608b      	str	r3, [r1, #8]
 8007622:	6983      	ldr	r3, [r0, #24]
 8007624:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007628:	60da      	str	r2, [r3, #12]
 800762a:	3401      	adds	r4, #1
 800762c:	883b      	ldrh	r3, [r7, #0]
 800762e:	42a3      	cmp	r3, r4
 8007630:	d921      	bls.n	8007676 <ai_platform_network_process+0x4ee>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	b1fb      	cbz	r3, 8007676 <ai_platform_network_process+0x4ee>
 8007636:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800763a:	b1e0      	cbz	r0, 8007676 <ai_platform_network_process+0x4ee>
 800763c:	68ba      	ldr	r2, [r7, #8]
 800763e:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8007642:	6983      	ldr	r3, [r0, #24]
 8007644:	f8d2 9000 	ldr.w	r9, [r2]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800764e:	0092      	lsls	r2, r2, #2
 8007650:	d5d5      	bpl.n	80075fe <ai_platform_network_process+0x476>
 8007652:	6898      	ldr	r0, [r3, #8]
 8007654:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8007658:	f002 fb62 	bl	8009d20 <st_int8_copy>
 800765c:	f859 200a 	ldr.w	r2, [r9, sl]
 8007660:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8007664:	440b      	add	r3, r1
 8007666:	4293      	cmp	r3, r2
 8007668:	d302      	bcc.n	8007670 <ai_platform_network_process+0x4e8>
 800766a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800766e:	1ad3      	subs	r3, r2, r3
 8007670:	f8c8 3004 	str.w	r3, [r8, #4]
 8007674:	e7d9      	b.n	800762a <ai_platform_network_process+0x4a2>
 8007676:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 800767a:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800767e:	3401      	adds	r4, #1
 8007680:	b2a4      	uxth	r4, r4
 8007682:	42a3      	cmp	r3, r4
 8007684:	f8ab 4016 	strh.w	r4, [fp, #22]
 8007688:	f63f af7f 	bhi.w	800758a <ai_platform_network_process+0x402>
 800768c:	4620      	mov	r0, r4
 800768e:	b005      	add	sp, #20
 8007690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007694:	2a01      	cmp	r2, #1
 8007696:	6b2e      	ldr	r6, [r5, #48]	@ 0x30
 8007698:	d029      	beq.n	80076ee <ai_platform_network_process+0x566>
 800769a:	f106 070c 	add.w	r7, r6, #12
 800769e:	e770      	b.n	8007582 <ai_platform_network_process+0x3fa>
 80076a0:	2218      	movs	r2, #24
 80076a2:	2113      	movs	r1, #19
 80076a4:	f105 0010 	add.w	r0, r5, #16
 80076a8:	2400      	movs	r4, #0
 80076aa:	f000 f851 	bl	8007750 <core_set_error>
 80076ae:	e711      	b.n	80074d4 <ai_platform_network_process+0x34c>
 80076b0:	9d03      	ldr	r5, [sp, #12]
 80076b2:	4604      	mov	r4, r0
 80076b4:	2217      	movs	r2, #23
 80076b6:	2112      	movs	r1, #18
 80076b8:	f105 0010 	add.w	r0, r5, #16
 80076bc:	f000 f848 	bl	8007750 <core_set_error>
 80076c0:	e708      	b.n	80074d4 <ai_platform_network_process+0x34c>
 80076c2:	9d03      	ldr	r5, [sp, #12]
 80076c4:	2219      	movs	r2, #25
 80076c6:	2112      	movs	r1, #18
 80076c8:	2400      	movs	r4, #0
 80076ca:	f105 0010 	add.w	r0, r5, #16
 80076ce:	f000 f83f 	bl	8007750 <core_set_error>
 80076d2:	e6ff      	b.n	80074d4 <ai_platform_network_process+0x34c>
 80076d4:	9d03      	ldr	r5, [sp, #12]
 80076d6:	4604      	mov	r4, r0
 80076d8:	2221      	movs	r2, #33	@ 0x21
 80076da:	2112      	movs	r1, #18
 80076dc:	f105 0010 	add.w	r0, r5, #16
 80076e0:	f000 f836 	bl	8007750 <core_set_error>
 80076e4:	e6f6      	b.n	80074d4 <ai_platform_network_process+0x34c>
 80076e6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80076ea:	82ab      	strh	r3, [r5, #20]
 80076ec:	e744      	b.n	8007578 <ai_platform_network_process+0x3f0>
 80076ee:	2700      	movs	r7, #0
 80076f0:	e747      	b.n	8007582 <ai_platform_network_process+0x3fa>
 80076f2:	4604      	mov	r4, r0
 80076f4:	2217      	movs	r2, #23
 80076f6:	2113      	movs	r1, #19
 80076f8:	f105 0010 	add.w	r0, r5, #16
 80076fc:	f000 f828 	bl	8007750 <core_set_error>
 8007700:	e6e8      	b.n	80074d4 <ai_platform_network_process+0x34c>
 8007702:	2219      	movs	r2, #25
 8007704:	2113      	movs	r1, #19
 8007706:	f105 0010 	add.w	r0, r5, #16
 800770a:	2400      	movs	r4, #0
 800770c:	f000 f820 	bl	8007750 <core_set_error>
 8007710:	e6e0      	b.n	80074d4 <ai_platform_network_process+0x34c>
 8007712:	4604      	mov	r4, r0
 8007714:	2221      	movs	r2, #33	@ 0x21
 8007716:	2113      	movs	r1, #19
 8007718:	f105 0010 	add.w	r0, r5, #16
 800771c:	f000 f818 	bl	8007750 <core_set_error>
 8007720:	e6d8      	b.n	80074d4 <ai_platform_network_process+0x34c>
 8007722:	2217      	movs	r2, #23
 8007724:	2113      	movs	r1, #19
 8007726:	f105 0010 	add.w	r0, r5, #16
 800772a:	4654      	mov	r4, sl
 800772c:	f000 f810 	bl	8007750 <core_set_error>
 8007730:	e6d0      	b.n	80074d4 <ai_platform_network_process+0x34c>
 8007732:	bf00      	nop
 8007734:	58024000 	.word	0x58024000
 8007738:	f407a5c2 	.word	0xf407a5c2
 800773c:	b5e8b5cd 	.word	0xb5e8b5cd

08007740 <core_init>:
 8007740:	2001      	movs	r0, #1
 8007742:	4770      	bx	lr

08007744 <core_get_error>:
 8007744:	4603      	mov	r3, r0
 8007746:	2200      	movs	r2, #0
 8007748:	6800      	ldr	r0, [r0, #0]
 800774a:	601a      	str	r2, [r3, #0]
 800774c:	4770      	bx	lr
 800774e:	bf00      	nop

08007750 <core_set_error>:
 8007750:	4603      	mov	r3, r0
 8007752:	7800      	ldrb	r0, [r0, #0]
 8007754:	b108      	cbz	r0, 800775a <core_set_error+0xa>
 8007756:	2000      	movs	r0, #0
 8007758:	4770      	bx	lr
 800775a:	7019      	strb	r1, [r3, #0]
 800775c:	2001      	movs	r0, #1
 800775e:	6819      	ldr	r1, [r3, #0]
 8007760:	f362 211f 	bfi	r1, r2, #8, #24
 8007764:	6019      	str	r1, [r3, #0]
 8007766:	4770      	bx	lr

08007768 <node_convert>:
 8007768:	6982      	ldr	r2, [r0, #24]
 800776a:	8813      	ldrh	r3, [r2, #0]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d04a      	beq.n	8007806 <node_convert+0x9e>
 8007770:	6852      	ldr	r2, [r2, #4]
 8007772:	6850      	ldr	r0, [r2, #4]
 8007774:	b100      	cbz	r0, 8007778 <node_convert+0x10>
 8007776:	6800      	ldr	r0, [r0, #0]
 8007778:	2b01      	cmp	r3, #1
 800777a:	f000 813d 	beq.w	80079f8 <node_convert+0x290>
 800777e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007782:	6915      	ldr	r5, [r2, #16]
 8007784:	b105      	cbz	r5, 8007788 <node_convert+0x20>
 8007786:	682d      	ldr	r5, [r5, #0]
 8007788:	6883      	ldr	r3, [r0, #8]
 800778a:	0a1b      	lsrs	r3, r3, #8
 800778c:	f000 80ee 	beq.w	800796c <node_convert+0x204>
 8007790:	68c1      	ldr	r1, [r0, #12]
 8007792:	2401      	movs	r4, #1
 8007794:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8007798:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800779c:	4299      	cmp	r1, r3
 800779e:	fb02 f404 	mul.w	r4, r2, r4
 80077a2:	d1f9      	bne.n	8007798 <node_convert+0x30>
 80077a4:	6982      	ldr	r2, [r0, #24]
 80077a6:	69af      	ldr	r7, [r5, #24]
 80077a8:	6813      	ldr	r3, [r2, #0]
 80077aa:	f3c3 4143 	ubfx	r1, r3, #17, #4
 80077ae:	2901      	cmp	r1, #1
 80077b0:	d02b      	beq.n	800780a <node_convert+0xa2>
 80077b2:	6801      	ldr	r1, [r0, #0]
 80077b4:	68bd      	ldr	r5, [r7, #8]
 80077b6:	2900      	cmp	r1, #0
 80077b8:	d069      	beq.n	800788e <node_convert+0x126>
 80077ba:	684e      	ldr	r6, [r1, #4]
 80077bc:	f3c3 50c0 	ubfx	r0, r3, #23, #1
 80077c0:	6892      	ldr	r2, [r2, #8]
 80077c2:	2e00      	cmp	r6, #0
 80077c4:	f000 80b8 	beq.w	8007938 <node_convert+0x1d0>
 80077c8:	884b      	ldrh	r3, [r1, #2]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	f000 8089 	beq.w	80078e2 <node_convert+0x17a>
 80077d0:	6833      	ldr	r3, [r6, #0]
 80077d2:	ed93 7a00 	vldr	s14, [r3]
 80077d6:	6873      	ldr	r3, [r6, #4]
 80077d8:	2800      	cmp	r0, #0
 80077da:	f000 80c5 	beq.w	8007968 <node_convert+0x200>
 80077de:	f993 0000 	ldrsb.w	r0, [r3]
 80077e2:	b174      	cbz	r4, 8007802 <node_convert+0x9a>
 80077e4:	4629      	mov	r1, r5
 80077e6:	4414      	add	r4, r2
 80077e8:	f912 3b01 	ldrsb.w	r3, [r2], #1
 80077ec:	1a1b      	subs	r3, r3, r0
 80077ee:	42a2      	cmp	r2, r4
 80077f0:	ee07 3a90 	vmov	s15, r3
 80077f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80077f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80077fc:	ece1 7a01 	vstmia	r1!, {s15}
 8007800:	d1f2      	bne.n	80077e8 <node_convert+0x80>
 8007802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	deff      	udf	#255	@ 0xff
 800780a:	682e      	ldr	r6, [r5, #0]
 800780c:	6895      	ldr	r5, [r2, #8]
 800780e:	2e00      	cmp	r6, #0
 8007810:	f000 80ae 	beq.w	8007970 <node_convert+0x208>
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	6871      	ldr	r1, [r6, #4]
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 800781e:	2900      	cmp	r1, #0
 8007820:	d064      	beq.n	80078ec <node_convert+0x184>
 8007822:	8870      	ldrh	r0, [r6, #2]
 8007824:	2800      	cmp	r0, #0
 8007826:	d067      	beq.n	80078f8 <node_convert+0x190>
 8007828:	6808      	ldr	r0, [r1, #0]
 800782a:	edd0 7a00 	vldr	s15, [r0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	f000 80d7 	beq.w	80079e2 <node_convert+0x27a>
 8007834:	684b      	ldr	r3, [r1, #4]
 8007836:	f993 3000 	ldrsb.w	r3, [r3]
 800783a:	ee06 3a90 	vmov	s13, r3
 800783e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007842:	2c00      	cmp	r4, #0
 8007844:	d0dd      	beq.n	8007802 <node_convert+0x9a>
 8007846:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800784a:	4414      	add	r4, r2
 800784c:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8007850:	ed9f 5a6b 	vldr	s10, [pc, #428]	@ 8007a00 <node_convert+0x298>
 8007854:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8007858:	ecb5 7a01 	vldmia	r5!, {s14}
 800785c:	eef0 7a66 	vmov.f32	s15, s13
 8007860:	eee7 7a06 	vfma.f32	s15, s14, s12
 8007864:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800786c:	bfac      	ite	ge
 800786e:	ee77 7aa5 	vaddge.f32	s15, s15, s11
 8007872:	ee77 7ac5 	vsublt.f32	s15, s15, s10
 8007876:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800787a:	ee17 3a90 	vmov	r3, s15
 800787e:	f303 0307 	ssat	r3, #8, r3
 8007882:	f802 3b01 	strb.w	r3, [r2], #1
 8007886:	42a2      	cmp	r2, r4
 8007888:	d1e6      	bne.n	8007858 <node_convert+0xf0>
 800788a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800788e:	f3c3 11c6 	ubfx	r1, r3, #7, #7
 8007892:	f003 067f 	and.w	r6, r3, #127	@ 0x7f
 8007896:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 800789a:	6890      	ldr	r0, [r2, #8]
 800789c:	1b8e      	subs	r6, r1, r6
 800789e:	2908      	cmp	r1, #8
 80078a0:	4622      	mov	r2, r4
 80078a2:	4629      	mov	r1, r5
 80078a4:	f106 0640 	add.w	r6, r6, #64	@ 0x40
 80078a8:	eba6 0603 	sub.w	r6, r6, r3
 80078ac:	f000 808b 	beq.w	80079c6 <node_convert+0x25e>
 80078b0:	f003 fd8c 	bl	800b3cc <arm_q15_to_float>
 80078b4:	2e00      	cmp	r6, #0
 80078b6:	d0a4      	beq.n	8007802 <node_convert+0x9a>
 80078b8:	ee07 6a90 	vmov	s15, r6
 80078bc:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 80078c0:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 80078c4:	f005 f8c8 	bl	800ca58 <powf>
 80078c8:	2c00      	cmp	r4, #0
 80078ca:	d09a      	beq.n	8007802 <node_convert+0x9a>
 80078cc:	2300      	movs	r3, #0
 80078ce:	ecf5 7a01 	vldmia	r5!, {s15}
 80078d2:	3301      	adds	r3, #1
 80078d4:	ee67 7a80 	vmul.f32	s15, s15, s0
 80078d8:	429c      	cmp	r4, r3
 80078da:	ed45 7a01 	vstr	s15, [r5, #-4]
 80078de:	d1f6      	bne.n	80078ce <node_convert+0x166>
 80078e0:	e78f      	b.n	8007802 <node_convert+0x9a>
 80078e2:	b358      	cbz	r0, 800793c <node_convert+0x1d4>
 80078e4:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8007a04 <node_convert+0x29c>
 80078e8:	4618      	mov	r0, r3
 80078ea:	e77a      	b.n	80077e2 <node_convert+0x7a>
 80078ec:	b133      	cbz	r3, 80078fc <node_convert+0x194>
 80078ee:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8007a04 <node_convert+0x29c>
 80078f2:	eef0 7a66 	vmov.f32	s15, s13
 80078f6:	e7a4      	b.n	8007842 <node_convert+0xda>
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d1f8      	bne.n	80078ee <node_convert+0x186>
 80078fc:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8007900:	eddf 7a40 	vldr	s15, [pc, #256]	@ 8007a04 <node_convert+0x29c>
 8007904:	2c00      	cmp	r4, #0
 8007906:	f43f af7c 	beq.w	8007802 <node_convert+0x9a>
 800790a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800790e:	4414      	add	r4, r2
 8007910:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8007914:	ecb5 7a01 	vldmia	r5!, {s14}
 8007918:	eef0 7a66 	vmov.f32	s15, s13
 800791c:	eee7 7a06 	vfma.f32	s15, s14, s12
 8007920:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007924:	ee17 3a90 	vmov	r3, s15
 8007928:	f383 0308 	usat	r3, #8, r3
 800792c:	f802 3b01 	strb.w	r3, [r2], #1
 8007930:	42a2      	cmp	r2, r4
 8007932:	d1ef      	bne.n	8007914 <node_convert+0x1ac>
 8007934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007938:	2800      	cmp	r0, #0
 800793a:	d147      	bne.n	80079cc <node_convert+0x264>
 800793c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8007a04 <node_convert+0x29c>
 8007940:	2c00      	cmp	r4, #0
 8007942:	f43f af5e 	beq.w	8007802 <node_convert+0x9a>
 8007946:	4629      	mov	r1, r5
 8007948:	4414      	add	r4, r2
 800794a:	f812 3b01 	ldrb.w	r3, [r2], #1
 800794e:	1a1b      	subs	r3, r3, r0
 8007950:	42a2      	cmp	r2, r4
 8007952:	ee07 3a90 	vmov	s15, r3
 8007956:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800795a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800795e:	ece1 7a01 	vstmia	r1!, {s15}
 8007962:	d1f2      	bne.n	800794a <node_convert+0x1e2>
 8007964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007968:	7818      	ldrb	r0, [r3, #0]
 800796a:	e7e9      	b.n	8007940 <node_convert+0x1d8>
 800796c:	2401      	movs	r4, #1
 800796e:	e719      	b.n	80077a4 <node_convert+0x3c>
 8007970:	683a      	ldr	r2, [r7, #0]
 8007972:	f3c2 18c6 	ubfx	r8, r2, #7, #7
 8007976:	f002 037f 	and.w	r3, r2, #127	@ 0x7f
 800797a:	f3c2 52c0 	ubfx	r2, r2, #23, #1
 800797e:	eba8 0303 	sub.w	r3, r8, r3
 8007982:	3340      	adds	r3, #64	@ 0x40
 8007984:	1a9b      	subs	r3, r3, r2
 8007986:	d014      	beq.n	80079b2 <node_convert+0x24a>
 8007988:	425b      	negs	r3, r3
 800798a:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800798e:	ee00 3a90 	vmov	s1, r3
 8007992:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8007996:	f005 f85f 	bl	800ca58 <powf>
 800799a:	b154      	cbz	r4, 80079b2 <node_convert+0x24a>
 800799c:	4633      	mov	r3, r6
 800799e:	462a      	mov	r2, r5
 80079a0:	ecf2 7a01 	vldmia	r2!, {s15}
 80079a4:	3301      	adds	r3, #1
 80079a6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80079aa:	42a3      	cmp	r3, r4
 80079ac:	ed42 7a01 	vstr	s15, [r2, #-4]
 80079b0:	d1f6      	bne.n	80079a0 <node_convert+0x238>
 80079b2:	f1b8 0f08 	cmp.w	r8, #8
 80079b6:	d00d      	beq.n	80079d4 <node_convert+0x26c>
 80079b8:	4622      	mov	r2, r4
 80079ba:	68b9      	ldr	r1, [r7, #8]
 80079bc:	4628      	mov	r0, r5
 80079be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079c2:	f003 bb81 	b.w	800b0c8 <arm_float_to_q15>
 80079c6:	f003 fd67 	bl	800b498 <arm_q7_to_float>
 80079ca:	e773      	b.n	80078b4 <node_convert+0x14c>
 80079cc:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8007a04 <node_convert+0x29c>
 80079d0:	4630      	mov	r0, r6
 80079d2:	e706      	b.n	80077e2 <node_convert+0x7a>
 80079d4:	4622      	mov	r2, r4
 80079d6:	68b9      	ldr	r1, [r7, #8]
 80079d8:	4628      	mov	r0, r5
 80079da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079de:	f003 bc29 	b.w	800b234 <arm_float_to_q7>
 80079e2:	684b      	ldr	r3, [r1, #4]
 80079e4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	ee06 3a90 	vmov	s13, r3
 80079ee:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80079f2:	ee76 6a87 	vadd.f32	s13, s13, s14
 80079f6:	e785      	b.n	8007904 <node_convert+0x19c>
 80079f8:	2300      	movs	r3, #0
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	deff      	udf	#255	@ 0xff
 80079fe:	bf00      	nop
 8007a00:	3efffffc 	.word	0x3efffffc
 8007a04:	00000000 	.word	0x00000000

08007a08 <ai_check_custom_types>:
 8007a08:	b082      	sub	sp, #8
 8007a0a:	4b12      	ldr	r3, [pc, #72]	@ (8007a54 <ai_check_custom_types+0x4c>)
 8007a0c:	9301      	str	r3, [sp, #4]
 8007a0e:	b118      	cbz	r0, 8007a18 <ai_check_custom_types+0x10>
 8007a10:	7803      	ldrb	r3, [r0, #0]
 8007a12:	2b03      	cmp	r3, #3
 8007a14:	d002      	beq.n	8007a1c <ai_check_custom_types+0x14>
 8007a16:	2000      	movs	r0, #0
 8007a18:	b002      	add	sp, #8
 8007a1a:	4770      	bx	lr
 8007a1c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d004      	beq.n	8007a2e <ai_check_custom_types+0x26>
 8007a24:	2001      	movs	r0, #1
 8007a26:	f080 0001 	eor.w	r0, r0, #1
 8007a2a:	b002      	add	sp, #8
 8007a2c:	4770      	bx	lr
 8007a2e:	7842      	ldrb	r2, [r0, #1]
 8007a30:	3001      	adds	r0, #1
 8007a32:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d1f4      	bne.n	8007a24 <ai_check_custom_types+0x1c>
 8007a3a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8007a3e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d1ee      	bne.n	8007a24 <ai_check_custom_types+0x1c>
 8007a46:	7842      	ldrb	r2, [r0, #1]
 8007a48:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d1e9      	bne.n	8007a24 <ai_check_custom_types+0x1c>
 8007a50:	2000      	movs	r0, #0
 8007a52:	e7e8      	b.n	8007a26 <ai_check_custom_types+0x1e>
 8007a54:	84048403 	.word	0x84048403

08007a58 <ai_layers_init_all>:
 8007a58:	2100      	movs	r1, #0
 8007a5a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8007a5c:	b13b      	cbz	r3, 8007a6e <ai_layers_init_all+0x16>
 8007a5e:	691a      	ldr	r2, [r3, #16]
 8007a60:	3101      	adds	r1, #1
 8007a62:	60d8      	str	r0, [r3, #12]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	4613      	mov	r3, r2
 8007a68:	d001      	beq.n	8007a6e <ai_layers_init_all+0x16>
 8007a6a:	2a00      	cmp	r2, #0
 8007a6c:	d1f6      	bne.n	8007a5c <ai_layers_init_all+0x4>
 8007a6e:	4608      	mov	r0, r1
 8007a70:	4770      	bx	lr
 8007a72:	bf00      	nop

08007a74 <ai_layers_post_init_all>:
 8007a74:	b538      	push	{r3, r4, r5, lr}
 8007a76:	2500      	movs	r5, #0
 8007a78:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8007a7a:	b16c      	cbz	r4, 8007a98 <ai_layers_post_init_all+0x24>
 8007a7c:	6863      	ldr	r3, [r4, #4]
 8007a7e:	07db      	lsls	r3, r3, #31
 8007a80:	d504      	bpl.n	8007a8c <ai_layers_post_init_all+0x18>
 8007a82:	6a23      	ldr	r3, [r4, #32]
 8007a84:	4620      	mov	r0, r4
 8007a86:	b10b      	cbz	r3, 8007a8c <ai_layers_post_init_all+0x18>
 8007a88:	3501      	adds	r5, #1
 8007a8a:	4798      	blx	r3
 8007a8c:	6923      	ldr	r3, [r4, #16]
 8007a8e:	42a3      	cmp	r3, r4
 8007a90:	461c      	mov	r4, r3
 8007a92:	d001      	beq.n	8007a98 <ai_layers_post_init_all+0x24>
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d1f0      	bne.n	8007a7a <ai_layers_post_init_all+0x6>
 8007a98:	4628      	mov	r0, r5
 8007a9a:	bd38      	pop	{r3, r4, r5, pc}

08007a9c <ai_layers_forward_all>:
 8007a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007aa0:	f8d0 803c 	ldr.w	r8, [r0, #60]	@ 0x3c
 8007aa4:	4604      	mov	r4, r0
 8007aa6:	f1b8 0f00 	cmp.w	r8, #0
 8007aaa:	d02a      	beq.n	8007b02 <ai_layers_forward_all+0x66>
 8007aac:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8007aae:	6381      	str	r1, [r0, #56]	@ 0x38
 8007ab0:	b319      	cbz	r1, 8007afa <ai_layers_forward_all+0x5e>
 8007ab2:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8007ab4:	2001      	movs	r0, #1
 8007ab6:	47c0      	blx	r8
 8007ab8:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8007aba:	b1f6      	cbz	r6, 8007afa <ai_layers_forward_all+0x5e>
 8007abc:	2700      	movs	r7, #0
 8007abe:	4631      	mov	r1, r6
 8007ac0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8007ac2:	2002      	movs	r0, #2
 8007ac4:	47c0      	blx	r8
 8007ac6:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8007ac8:	4628      	mov	r0, r5
 8007aca:	696b      	ldr	r3, [r5, #20]
 8007acc:	4798      	blx	r3
 8007ace:	692e      	ldr	r6, [r5, #16]
 8007ad0:	2003      	movs	r0, #3
 8007ad2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8007ad4:	42b5      	cmp	r5, r6
 8007ad6:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007ad8:	d007      	beq.n	8007aea <ai_layers_forward_all+0x4e>
 8007ada:	47c0      	blx	r8
 8007adc:	3701      	adds	r7, #1
 8007ade:	63a6      	str	r6, [r4, #56]	@ 0x38
 8007ae0:	2e00      	cmp	r6, #0
 8007ae2:	d1ec      	bne.n	8007abe <ai_layers_forward_all+0x22>
 8007ae4:	4638      	mov	r0, r7
 8007ae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007aea:	2003      	movs	r0, #3
 8007aec:	3701      	adds	r7, #1
 8007aee:	47c0      	blx	r8
 8007af0:	2300      	movs	r3, #0
 8007af2:	4638      	mov	r0, r7
 8007af4:	63a3      	str	r3, [r4, #56]	@ 0x38
 8007af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007afa:	2700      	movs	r7, #0
 8007afc:	4638      	mov	r0, r7
 8007afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b02:	6b45      	ldr	r5, [r0, #52]	@ 0x34
 8007b04:	6385      	str	r5, [r0, #56]	@ 0x38
 8007b06:	2d00      	cmp	r5, #0
 8007b08:	d0f7      	beq.n	8007afa <ai_layers_forward_all+0x5e>
 8007b0a:	4647      	mov	r7, r8
 8007b0c:	696b      	ldr	r3, [r5, #20]
 8007b0e:	4628      	mov	r0, r5
 8007b10:	4798      	blx	r3
 8007b12:	462b      	mov	r3, r5
 8007b14:	692d      	ldr	r5, [r5, #16]
 8007b16:	429d      	cmp	r5, r3
 8007b18:	d004      	beq.n	8007b24 <ai_layers_forward_all+0x88>
 8007b1a:	3701      	adds	r7, #1
 8007b1c:	63a5      	str	r5, [r4, #56]	@ 0x38
 8007b1e:	2d00      	cmp	r5, #0
 8007b20:	d1f4      	bne.n	8007b0c <ai_layers_forward_all+0x70>
 8007b22:	e7df      	b.n	8007ae4 <ai_layers_forward_all+0x48>
 8007b24:	2300      	movs	r3, #0
 8007b26:	3701      	adds	r7, #1
 8007b28:	63a3      	str	r3, [r4, #56]	@ 0x38
 8007b2a:	e7db      	b.n	8007ae4 <ai_layers_forward_all+0x48>

08007b2c <func_dummy>:
 8007b2c:	4770      	bx	lr
 8007b2e:	bf00      	nop

08007b30 <forward_conv2d_sssa8_ch_nl_pool>:
 8007b30:	6982      	ldr	r2, [r0, #24]
 8007b32:	8813      	ldrh	r3, [r2, #0]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	f000 823f 	beq.w	8007fb8 <forward_conv2d_sssa8_ch_nl_pool+0x488>
 8007b3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b3e:	ed2d 8b04 	vpush	{d8-d9}
 8007b42:	6852      	ldr	r2, [r2, #4]
 8007b44:	b0cf      	sub	sp, #316	@ 0x13c
 8007b46:	4681      	mov	r9, r0
 8007b48:	f8d2 a004 	ldr.w	sl, [r2, #4]
 8007b4c:	f1ba 0f00 	cmp.w	sl, #0
 8007b50:	d001      	beq.n	8007b56 <forward_conv2d_sssa8_ch_nl_pool+0x26>
 8007b52:	f8da a000 	ldr.w	sl, [sl]
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	f000 8285 	beq.w	8008066 <forward_conv2d_sssa8_ch_nl_pool+0x536>
 8007b5c:	6911      	ldr	r1, [r2, #16]
 8007b5e:	911b      	str	r1, [sp, #108]	@ 0x6c
 8007b60:	b109      	cbz	r1, 8007b66 <forward_conv2d_sssa8_ch_nl_pool+0x36>
 8007b62:	6809      	ldr	r1, [r1, #0]
 8007b64:	911b      	str	r1, [sp, #108]	@ 0x6c
 8007b66:	2b02      	cmp	r3, #2
 8007b68:	f000 8223 	beq.w	8007fb2 <forward_conv2d_sssa8_ch_nl_pool+0x482>
 8007b6c:	69d1      	ldr	r1, [r2, #28]
 8007b6e:	2900      	cmp	r1, #0
 8007b70:	f000 8274 	beq.w	800805c <forward_conv2d_sssa8_ch_nl_pool+0x52c>
 8007b74:	8b10      	ldrh	r0, [r2, #24]
 8007b76:	680c      	ldr	r4, [r1, #0]
 8007b78:	2801      	cmp	r0, #1
 8007b7a:	9415      	str	r4, [sp, #84]	@ 0x54
 8007b7c:	f200 821e 	bhi.w	8007fbc <forward_conv2d_sssa8_ch_nl_pool+0x48c>
 8007b80:	2000      	movs	r0, #0
 8007b82:	9018      	str	r0, [sp, #96]	@ 0x60
 8007b84:	2b03      	cmp	r3, #3
 8007b86:	f000 8271 	beq.w	800806c <forward_conv2d_sssa8_ch_nl_pool+0x53c>
 8007b8a:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f000 8268 	beq.w	8008062 <forward_conv2d_sssa8_ch_nl_pool+0x532>
 8007b92:	f8d9 2024 	ldr.w	r2, [r9, #36]	@ 0x24
 8007b96:	6818      	ldr	r0, [r3, #0]
 8007b98:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8007b9c:	922e      	str	r2, [sp, #184]	@ 0xb8
 8007b9e:	9026      	str	r0, [sp, #152]	@ 0x98
 8007ba0:	2a00      	cmp	r2, #0
 8007ba2:	f000 8255 	beq.w	8008050 <forward_conv2d_sssa8_ch_nl_pool+0x520>
 8007ba6:	f8d3 b008 	ldr.w	fp, [r3, #8]
 8007baa:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8007bae:	f8da 600c 	ldr.w	r6, [sl, #12]
 8007bb2:	6852      	ldr	r2, [r2, #4]
 8007bb4:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8007bb6:	4615      	mov	r5, r2
 8007bb8:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8007bba:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8007bbe:	b2ad      	uxth	r5, r5
 8007bc0:	6874      	ldr	r4, [r6, #4]
 8007bc2:	68c0      	ldr	r0, [r0, #12]
 8007bc4:	9417      	str	r4, [sp, #92]	@ 0x5c
 8007bc6:	951e      	str	r5, [sp, #120]	@ 0x78
 8007bc8:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 8007bcc:	f8d9 303c 	ldr.w	r3, [r9, #60]	@ 0x3c
 8007bd0:	ee09 5a90 	vmov	s19, r5
 8007bd4:	68c5      	ldr	r5, [r0, #12]
 8007bd6:	6880      	ldr	r0, [r0, #8]
 8007bd8:	9520      	str	r5, [sp, #128]	@ 0x80
 8007bda:	9034      	str	r0, [sp, #208]	@ 0xd0
 8007bdc:	f8d9 402c 	ldr.w	r4, [r9, #44]	@ 0x2c
 8007be0:	921f      	str	r2, [sp, #124]	@ 0x7c
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	f8d9 7058 	ldr.w	r7, [r9, #88]	@ 0x58
 8007be8:	e9d6 5002 	ldrd	r5, r0, [r6, #8]
 8007bec:	9538      	str	r5, [sp, #224]	@ 0xe0
 8007bee:	f8b9 5028 	ldrh.w	r5, [r9, #40]	@ 0x28
 8007bf2:	952f      	str	r5, [sp, #188]	@ 0xbc
 8007bf4:	b2a5      	uxth	r5, r4
 8007bf6:	9530      	str	r5, [sp, #192]	@ 0xc0
 8007bf8:	b295      	uxth	r5, r2
 8007bfa:	9516      	str	r5, [sp, #88]	@ 0x58
 8007bfc:	889d      	ldrh	r5, [r3, #4]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	9531      	str	r5, [sp, #196]	@ 0xc4
 8007c02:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8007c06:	9524      	str	r5, [sp, #144]	@ 0x90
 8007c08:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8007c0c:	9532      	str	r5, [sp, #200]	@ 0xc8
 8007c0e:	f8d9 5044 	ldr.w	r5, [r9, #68]	@ 0x44
 8007c12:	9535      	str	r5, [sp, #212]	@ 0xd4
 8007c14:	f8d9 504c 	ldr.w	r5, [r9, #76]	@ 0x4c
 8007c18:	9536      	str	r5, [sp, #216]	@ 0xd8
 8007c1a:	f8d9 5050 	ldr.w	r5, [r9, #80]	@ 0x50
 8007c1e:	9519      	str	r5, [sp, #100]	@ 0x64
 8007c20:	683d      	ldr	r5, [r7, #0]
 8007c22:	9527      	str	r5, [sp, #156]	@ 0x9c
 8007c24:	687d      	ldr	r5, [r7, #4]
 8007c26:	9537      	str	r5, [sp, #220]	@ 0xdc
 8007c28:	2900      	cmp	r1, #0
 8007c2a:	f000 8204 	beq.w	8008036 <forward_conv2d_sssa8_ch_nl_pool+0x506>
 8007c2e:	6889      	ldr	r1, [r1, #8]
 8007c30:	2900      	cmp	r1, #0
 8007c32:	f000 8200 	beq.w	8008036 <forward_conv2d_sssa8_ch_nl_pool+0x506>
 8007c36:	698d      	ldr	r5, [r1, #24]
 8007c38:	2d00      	cmp	r5, #0
 8007c3a:	bf08      	it	eq
 8007c3c:	4629      	moveq	r1, r5
 8007c3e:	ee08 1a90 	vmov	s17, r1
 8007c42:	b292      	uxth	r2, r2
 8007c44:	f8db 6018 	ldr.w	r6, [fp, #24]
 8007c48:	b2a1      	uxth	r1, r4
 8007c4a:	f8d8 5018 	ldr.w	r5, [r8, #24]
 8007c4e:	fa12 f783 	uxtah	r7, r2, r3
 8007c52:	1813      	adds	r3, r2, r0
 8007c54:	aa3f      	add	r2, sp, #252	@ 0xfc
 8007c56:	9123      	str	r1, [sp, #140]	@ 0x8c
 8007c58:	4407      	add	r7, r0
 8007c5a:	931d      	str	r3, [sp, #116]	@ 0x74
 8007c5c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007c5e:	f10d 0cec 	add.w	ip, sp, #236	@ 0xec
 8007c62:	924c      	str	r2, [sp, #304]	@ 0x130
 8007c64:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007c68:	1aff      	subs	r7, r7, r3
 8007c6a:	ac43      	add	r4, sp, #268	@ 0x10c
 8007c6c:	a847      	add	r0, sp, #284	@ 0x11c
 8007c6e:	f8cd c128 	str.w	ip, [sp, #296]	@ 0x128
 8007c72:	fbb7 f3f1 	udiv	r3, r7, r1
 8007c76:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 8007c78:	f240 4101 	movw	r1, #1025	@ 0x401
 8007c7c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007c7e:	2300      	movs	r3, #0
 8007c80:	69bf      	ldr	r7, [r7, #24]
 8007c82:	9347      	str	r3, [sp, #284]	@ 0x11c
 8007c84:	933b      	str	r3, [sp, #236]	@ 0xec
 8007c86:	933f      	str	r3, [sp, #252]	@ 0xfc
 8007c88:	933e      	str	r3, [sp, #248]	@ 0xf8
 8007c8a:	9342      	str	r3, [sp, #264]	@ 0x108
 8007c8c:	934d      	str	r3, [sp, #308]	@ 0x134
 8007c8e:	9728      	str	r7, [sp, #160]	@ 0xa0
 8007c90:	e9cd 333c 	strd	r3, r3, [sp, #240]	@ 0xf0
 8007c94:	e9cd 3340 	strd	r3, r3, [sp, #256]	@ 0x100
 8007c98:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 8007c9c:	e9cd 2148 	strd	r2, r1, [sp, #288]	@ 0x120
 8007ca0:	f240 4102 	movw	r1, #1026	@ 0x402
 8007ca4:	9322      	str	r3, [sp, #136]	@ 0x88
 8007ca6:	f8d9 305c 	ldr.w	r3, [r9, #92]	@ 0x5c
 8007caa:	914b      	str	r1, [sp, #300]	@ 0x12c
 8007cac:	4659      	mov	r1, fp
 8007cae:	9333      	str	r3, [sp, #204]	@ 0xcc
 8007cb0:	f003 fd16 	bl	800b6e0 <core_tensor_clone>
 8007cb4:	4631      	mov	r1, r6
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	f003 fd44 	bl	800b744 <core_array_clone>
 8007cbc:	944d      	str	r4, [sp, #308]	@ 0x134
 8007cbe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007cc2:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	6809      	ldr	r1, [r1, #0]
 8007cc8:	931c      	str	r3, [sp, #112]	@ 0x70
 8007cca:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8007ccc:	f8da 2000 	ldr.w	r2, [sl]
 8007cd0:	f8d3 e018 	ldr.w	lr, [r3, #24]
 8007cd4:	f9bd 409c 	ldrsh.w	r4, [sp, #156]	@ 0x9c
 8007cd8:	f8de 3008 	ldr.w	r3, [lr, #8]
 8007cdc:	9114      	str	r1, [sp, #80]	@ 0x50
 8007cde:	9325      	str	r3, [sp, #148]	@ 0x94
 8007ce0:	f8d8 3000 	ldr.w	r3, [r8]
 8007ce4:	2a00      	cmp	r2, #0
 8007ce6:	f000 818e 	beq.w	8008006 <forward_conv2d_sssa8_ch_nl_pool+0x4d6>
 8007cea:	6851      	ldr	r1, [r2, #4]
 8007cec:	2900      	cmp	r1, #0
 8007cee:	f000 818a 	beq.w	8008006 <forward_conv2d_sssa8_ch_nl_pool+0x4d6>
 8007cf2:	8850      	ldrh	r0, [r2, #2]
 8007cf4:	2800      	cmp	r0, #0
 8007cf6:	f000 8186 	beq.w	8008006 <forward_conv2d_sssa8_ch_nl_pool+0x4d6>
 8007cfa:	6809      	ldr	r1, [r1, #0]
 8007cfc:	ed91 0a00 	vldr	s0, [r1]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	f000 817d 	beq.w	8008000 <forward_conv2d_sssa8_ch_nl_pool+0x4d0>
 8007d06:	6859      	ldr	r1, [r3, #4]
 8007d08:	2900      	cmp	r1, #0
 8007d0a:	f000 8179 	beq.w	8008000 <forward_conv2d_sssa8_ch_nl_pool+0x4d0>
 8007d0e:	8858      	ldrh	r0, [r3, #2]
 8007d10:	2800      	cmp	r0, #0
 8007d12:	f000 8175 	beq.w	8008000 <forward_conv2d_sssa8_ch_nl_pool+0x4d0>
 8007d16:	6809      	ldr	r1, [r1, #0]
 8007d18:	edd1 0a00 	vldr	s1, [r1]
 8007d1c:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8007d1e:	f8da c018 	ldr.w	ip, [sl, #24]
 8007d22:	6988      	ldr	r0, [r1, #24]
 8007d24:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8007d26:	f8dc 7008 	ldr.w	r7, [ip, #8]
 8007d2a:	6989      	ldr	r1, [r1, #24]
 8007d2c:	6880      	ldr	r0, [r0, #8]
 8007d2e:	6889      	ldr	r1, [r1, #8]
 8007d30:	9718      	str	r7, [sp, #96]	@ 0x60
 8007d32:	912d      	str	r1, [sp, #180]	@ 0xb4
 8007d34:	f899 1041 	ldrb.w	r1, [r9, #65]	@ 0x41
 8007d38:	902c      	str	r0, [sp, #176]	@ 0xb0
 8007d3a:	912b      	str	r1, [sp, #172]	@ 0xac
 8007d3c:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8007d3e:	b121      	cbz	r1, 8007d4a <forward_conv2d_sssa8_ch_nl_pool+0x21a>
 8007d40:	6849      	ldr	r1, [r1, #4]
 8007d42:	9114      	str	r1, [sp, #80]	@ 0x50
 8007d44:	b109      	cbz	r1, 8007d4a <forward_conv2d_sssa8_ch_nl_pool+0x21a>
 8007d46:	6809      	ldr	r1, [r1, #0]
 8007d48:	9114      	str	r1, [sp, #80]	@ 0x50
 8007d4a:	2a00      	cmp	r2, #0
 8007d4c:	f000 8171 	beq.w	8008032 <forward_conv2d_sssa8_ch_nl_pool+0x502>
 8007d50:	6851      	ldr	r1, [r2, #4]
 8007d52:	2900      	cmp	r1, #0
 8007d54:	f000 817a 	beq.w	800804c <forward_conv2d_sssa8_ch_nl_pool+0x51c>
 8007d58:	8852      	ldrh	r2, [r2, #2]
 8007d5a:	2a00      	cmp	r2, #0
 8007d5c:	f000 8169 	beq.w	8008032 <forward_conv2d_sssa8_ch_nl_pool+0x502>
 8007d60:	684a      	ldr	r2, [r1, #4]
 8007d62:	f992 2000 	ldrsb.w	r2, [r2]
 8007d66:	9229      	str	r2, [sp, #164]	@ 0xa4
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	f000 8160 	beq.w	800802e <forward_conv2d_sssa8_ch_nl_pool+0x4fe>
 8007d6e:	685a      	ldr	r2, [r3, #4]
 8007d70:	2a00      	cmp	r2, #0
 8007d72:	f000 8171 	beq.w	8008058 <forward_conv2d_sssa8_ch_nl_pool+0x528>
 8007d76:	885b      	ldrh	r3, [r3, #2]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	f000 8158 	beq.w	800802e <forward_conv2d_sssa8_ch_nl_pool+0x4fe>
 8007d7e:	6853      	ldr	r3, [r2, #4]
 8007d80:	f993 3000 	ldrsb.w	r3, [r3]
 8007d84:	932a      	str	r3, [sp, #168]	@ 0xa8
 8007d86:	f8bd a07c 	ldrh.w	sl, [sp, #124]	@ 0x7c
 8007d8a:	edcd 0a1a 	vstr	s1, [sp, #104]	@ 0x68
 8007d8e:	ed8d 0a15 	vstr	s0, [sp, #84]	@ 0x54
 8007d92:	e9de 0100 	ldrd	r0, r1, [lr]
 8007d96:	f003 fc4f 	bl	800b638 <ai_array_get_byte_size>
 8007d9a:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8007d9c:	eba0 034a 	sub.w	r3, r0, sl, lsl #1
 8007da0:	eddd 0a1a 	vldr	s1, [sp, #104]	@ 0x68
 8007da4:	ed9d 0a15 	vldr	s0, [sp, #84]	@ 0x54
 8007da8:	4413      	add	r3, r2
 8007daa:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8007dac:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8007dae:	f001 fc03 	bl	80095b8 <align_factor_ch>
 8007db2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	f000 8117 	beq.w	8007fe8 <forward_conv2d_sssa8_ch_nl_pool+0x4b8>
 8007dba:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007dbc:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 8007dc0:	fb02 f10a 	mul.w	r1, r2, sl
 8007dc4:	b292      	uxth	r2, r2
 8007dc6:	f04f 0a00 	mov.w	sl, #0
 8007dca:	9417      	str	r4, [sp, #92]	@ 0x5c
 8007dcc:	ee08 1a10 	vmov	s16, r1
 8007dd0:	9221      	str	r2, [sp, #132]	@ 0x84
 8007dd2:	9938      	ldr	r1, [sp, #224]	@ 0xe0
 8007dd4:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007dd6:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
 8007dda:	fb01 f202 	mul.w	r2, r1, r2
 8007dde:	fb03 f202 	mul.w	r2, r3, r2
 8007de2:	fb01 f303 	mul.w	r3, r1, r3
 8007de6:	9238      	str	r2, [sp, #224]	@ 0xe0
 8007de8:	9339      	str	r3, [sp, #228]	@ 0xe4
 8007dea:	b28b      	uxth	r3, r1
 8007dec:	ee09 3a10 	vmov	s18, r3
 8007df0:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	@ 0x88
 8007df4:	931c      	str	r3, [sp, #112]	@ 0x70
 8007df6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007df8:	931f      	str	r3, [sp, #124]	@ 0x7c
 8007dfa:	e0b8      	b.n	8007f6e <forward_conv2d_sssa8_ch_nl_pool+0x43e>
 8007dfc:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8007dfe:	68aa      	ldr	r2, [r5, #8]
 8007e00:	699b      	ldr	r3, [r3, #24]
 8007e02:	9214      	str	r2, [sp, #80]	@ 0x50
 8007e04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007e08:	f003 fc16 	bl	800b638 <ai_array_get_byte_size>
 8007e0c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007e0e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007e10:	ee19 1a10 	vmov	r1, s18
 8007e14:	930d      	str	r3, [sp, #52]	@ 0x34
 8007e16:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8007e18:	920c      	str	r2, [sp, #48]	@ 0x30
 8007e1a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007e1c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8007e1e:	9010      	str	r0, [sp, #64]	@ 0x40
 8007e20:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e22:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8007e24:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e26:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8007e28:	9308      	str	r3, [sp, #32]
 8007e2a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007e2c:	9307      	str	r3, [sp, #28]
 8007e2e:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8007e30:	9306      	str	r3, [sp, #24]
 8007e32:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8007e34:	9305      	str	r3, [sp, #20]
 8007e36:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8007e38:	9304      	str	r3, [sp, #16]
 8007e3a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8007e3c:	9301      	str	r3, [sp, #4]
 8007e3e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8007e40:	9300      	str	r3, [sp, #0]
 8007e42:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8007e44:	9311      	str	r3, [sp, #68]	@ 0x44
 8007e46:	2301      	movs	r3, #1
 8007e48:	930e      	str	r3, [sp, #56]	@ 0x38
 8007e4a:	f8bd 3090 	ldrh.w	r3, [sp, #144]	@ 0x90
 8007e4e:	9303      	str	r3, [sp, #12]
 8007e50:	f8bd 30c8 	ldrh.w	r3, [sp, #200]	@ 0xc8
 8007e54:	9302      	str	r3, [sp, #8]
 8007e56:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8007e58:	9f1f      	ldr	r7, [sp, #124]	@ 0x7c
 8007e5a:	429c      	cmp	r4, r3
 8007e5c:	bf08      	it	eq
 8007e5e:	f1ba 0f00 	cmpeq.w	sl, #0
 8007e62:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8007e64:	b2ba      	uxth	r2, r7
 8007e66:	bf0c      	ite	eq
 8007e68:	2301      	moveq	r3, #1
 8007e6a:	2300      	movne	r3, #0
 8007e6c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007e6e:	ee19 3a90 	vmov	r3, s19
 8007e72:	f000 fc1d 	bl	80086b0 <forward_lite_conv2d_sssa8_ch>
 8007e76:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007e78:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	f000 80b0 	beq.w	8007fe0 <forward_conv2d_sssa8_ch_nl_pool+0x4b0>
 8007e80:	1ad3      	subs	r3, r2, r3
 8007e82:	463a      	mov	r2, r7
 8007e84:	429f      	cmp	r7, r3
 8007e86:	931d      	str	r3, [sp, #116]	@ 0x74
 8007e88:	bf28      	it	cs
 8007e8a:	461a      	movcs	r2, r3
 8007e8c:	921f      	str	r2, [sp, #124]	@ 0x7c
 8007e8e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	f040 8096 	bne.w	8007fc2 <forward_conv2d_sssa8_ch_nl_pool+0x492>
 8007e96:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8007e98:	9a38      	ldr	r2, [sp, #224]	@ 0xe0
 8007e9a:	4413      	add	r3, r2
 8007e9c:	9318      	str	r3, [sp, #96]	@ 0x60
 8007e9e:	3401      	adds	r4, #1
 8007ea0:	ee18 3a90 	vmov	r3, s17
 8007ea4:	ee18 2a10 	vmov	r2, s16
 8007ea8:	4641      	mov	r1, r8
 8007eaa:	b224      	sxth	r4, r4
 8007eac:	4658      	mov	r0, fp
 8007eae:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8007eb0:	47b8      	blx	r7
 8007eb2:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8007eb4:	429c      	cmp	r4, r3
 8007eb6:	db32      	blt.n	8007f1e <forward_conv2d_sssa8_ch_nl_pool+0x3ee>
 8007eb8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8007eba:	2201      	movs	r2, #1
 8007ebc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007ebe:	a847      	add	r0, sp, #284	@ 0x11c
 8007ec0:	9308      	str	r3, [sp, #32]
 8007ec2:	4492      	add	sl, r2
 8007ec4:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 8007ec8:	9207      	str	r2, [sp, #28]
 8007eca:	1ae4      	subs	r4, r4, r3
 8007ecc:	9305      	str	r3, [sp, #20]
 8007ece:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 8007ed2:	f8bd 2088 	ldrh.w	r2, [sp, #136]	@ 0x88
 8007ed6:	b224      	sxth	r4, r4
 8007ed8:	9303      	str	r3, [sp, #12]
 8007eda:	f8bd 30d0 	ldrh.w	r3, [sp, #208]	@ 0xd0
 8007ede:	9201      	str	r2, [sp, #4]
 8007ee0:	1a52      	subs	r2, r2, r1
 8007ee2:	9306      	str	r3, [sp, #24]
 8007ee4:	f8bd 30d8 	ldrh.w	r3, [sp, #216]	@ 0xd8
 8007ee8:	b292      	uxth	r2, r2
 8007eea:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8007eec:	9304      	str	r3, [sp, #16]
 8007eee:	f8bd 30dc 	ldrh.w	r3, [sp, #220]	@ 0xdc
 8007ef2:	9f33      	ldr	r7, [sp, #204]	@ 0xcc
 8007ef4:	9302      	str	r3, [sp, #8]
 8007ef6:	f8bd 30d4 	ldrh.w	r3, [sp, #212]	@ 0xd4
 8007efa:	9300      	str	r3, [sp, #0]
 8007efc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8007efe:	47b8      	blx	r7
 8007f00:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007f02:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 8007f06:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8007f08:	1ad3      	subs	r3, r2, r3
 8007f0a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007f0e:	b21a      	sxth	r2, r3
 8007f10:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8007f12:	695b      	ldr	r3, [r3, #20]
 8007f14:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007f16:	68da      	ldr	r2, [r3, #12]
 8007f18:	688b      	ldr	r3, [r1, #8]
 8007f1a:	4413      	add	r3, r2
 8007f1c:	608b      	str	r3, [r1, #8]
 8007f1e:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8007f22:	68aa      	ldr	r2, [r5, #8]
 8007f24:	68db      	ldr	r3, [r3, #12]
 8007f26:	4413      	add	r3, r2
 8007f28:	60ab      	str	r3, [r5, #8]
 8007f2a:	f8d9 2024 	ldr.w	r2, [r9, #36]	@ 0x24
 8007f2e:	b132      	cbz	r2, 8007f3e <forward_conv2d_sssa8_ch_nl_pool+0x40e>
 8007f30:	f8db 3014 	ldr.w	r3, [fp, #20]
 8007f34:	68da      	ldr	r2, [r3, #12]
 8007f36:	68b3      	ldr	r3, [r6, #8]
 8007f38:	4413      	add	r3, r2
 8007f3a:	60b3      	str	r3, [r6, #8]
 8007f3c:	68ab      	ldr	r3, [r5, #8]
 8007f3e:	68ea      	ldr	r2, [r5, #12]
 8007f40:	4640      	mov	r0, r8
 8007f42:	9315      	str	r3, [sp, #84]	@ 0x54
 8007f44:	9214      	str	r2, [sp, #80]	@ 0x50
 8007f46:	f003 fbb5 	bl	800b6b4 <get_tensor_byte_size>
 8007f4a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007f4c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007f4e:	4410      	add	r0, r2
 8007f50:	4283      	cmp	r3, r0
 8007f52:	d306      	bcc.n	8007f62 <forward_conv2d_sssa8_ch_nl_pool+0x432>
 8007f54:	68eb      	ldr	r3, [r5, #12]
 8007f56:	60ab      	str	r3, [r5, #8]
 8007f58:	f8d9 3024 	ldr.w	r3, [r9, #36]	@ 0x24
 8007f5c:	b10b      	cbz	r3, 8007f62 <forward_conv2d_sssa8_ch_nl_pool+0x432>
 8007f5e:	68f3      	ldr	r3, [r6, #12]
 8007f60:	60b3      	str	r3, [r6, #8]
 8007f62:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007f64:	3b01      	subs	r3, #1
 8007f66:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007f68:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007f6a:	459a      	cmp	sl, r3
 8007f6c:	d23c      	bcs.n	8007fe8 <forward_conv2d_sssa8_ch_nl_pool+0x4b8>
 8007f6e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007f70:	3301      	adds	r3, #1
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	f73f af42 	bgt.w	8007dfc <forward_conv2d_sssa8_ch_nl_pool+0x2cc>
 8007f78:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	da99      	bge.n	8007eb2 <forward_conv2d_sssa8_ch_nl_pool+0x382>
 8007f7e:	ee18 3a10 	vmov	r3, s16
 8007f82:	e9d6 1202 	ldrd	r1, r2, [r6, #8]
 8007f86:	fb03 1314 	mls	r3, r3, r4, r1
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d901      	bls.n	8007f92 <forward_conv2d_sssa8_ch_nl_pool+0x462>
 8007f8e:	6870      	ldr	r0, [r6, #4]
 8007f90:	4403      	add	r3, r0
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d202      	bcs.n	8007f9c <forward_conv2d_sssa8_ch_nl_pool+0x46c>
 8007f96:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8007f98:	42a0      	cmp	r0, r4
 8007f9a:	d137      	bne.n	800800c <forward_conv2d_sssa8_ch_nl_pool+0x4dc>
 8007f9c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8007f9e:	b2a4      	uxth	r4, r4
 8007fa0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007fa2:	4413      	add	r3, r2
 8007fa4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007fa6:	1b1b      	subs	r3, r3, r4
 8007fa8:	4414      	add	r4, r2
 8007faa:	b21b      	sxth	r3, r3
 8007fac:	b224      	sxth	r4, r4
 8007fae:	931a      	str	r3, [sp, #104]	@ 0x68
 8007fb0:	e77f      	b.n	8007eb2 <forward_conv2d_sssa8_ch_nl_pool+0x382>
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	deff      	udf	#255	@ 0xff
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	deff      	udf	#255	@ 0xff
 8007fbc:	6848      	ldr	r0, [r1, #4]
 8007fbe:	9018      	str	r0, [sp, #96]	@ 0x60
 8007fc0:	e5e0      	b.n	8007b84 <forward_conv2d_sssa8_ch_nl_pool+0x54>
 8007fc2:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	1a5b      	subs	r3, r3, r1
 8007fc8:	d505      	bpl.n	8007fd6 <forward_conv2d_sssa8_ch_nl_pool+0x4a6>
 8007fca:	1a8a      	subs	r2, r1, r2
 8007fcc:	9839      	ldr	r0, [sp, #228]	@ 0xe4
 8007fce:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8007fd0:	fb00 1202 	mla	r2, r0, r2, r1
 8007fd4:	9218      	str	r2, [sp, #96]	@ 0x60
 8007fd6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	9316      	str	r3, [sp, #88]	@ 0x58
 8007fde:	e75e      	b.n	8007e9e <forward_conv2d_sssa8_ch_nl_pool+0x36e>
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	931f      	str	r3, [sp, #124]	@ 0x7c
 8007fe4:	931d      	str	r3, [sp, #116]	@ 0x74
 8007fe6:	e752      	b.n	8007e8e <forward_conv2d_sssa8_ch_nl_pool+0x35e>
 8007fe8:	68eb      	ldr	r3, [r5, #12]
 8007fea:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8007fec:	60ab      	str	r3, [r5, #8]
 8007fee:	68f3      	ldr	r3, [r6, #12]
 8007ff0:	60b3      	str	r3, [r6, #8]
 8007ff2:	68d3      	ldr	r3, [r2, #12]
 8007ff4:	6093      	str	r3, [r2, #8]
 8007ff6:	b04f      	add	sp, #316	@ 0x13c
 8007ff8:	ecbd 8b04 	vpop	{d8-d9}
 8007ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008000:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8008074 <forward_conv2d_sssa8_ch_nl_pool+0x544>
 8008004:	e68a      	b.n	8007d1c <forward_conv2d_sssa8_ch_nl_pool+0x1ec>
 8008006:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 8008074 <forward_conv2d_sssa8_ch_nl_pool+0x544>
 800800a:	e679      	b.n	8007d00 <forward_conv2d_sssa8_ch_nl_pool+0x1d0>
 800800c:	6870      	ldr	r0, [r6, #4]
 800800e:	4402      	add	r2, r0
 8008010:	4293      	cmp	r3, r2
 8008012:	d2c3      	bcs.n	8007f9c <forward_conv2d_sssa8_ch_nl_pool+0x46c>
 8008014:	3901      	subs	r1, #1
 8008016:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8008018:	f813 2b01 	ldrb.w	r2, [r3], #1
 800801c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008020:	68f2      	ldr	r2, [r6, #12]
 8008022:	6870      	ldr	r0, [r6, #4]
 8008024:	4402      	add	r2, r0
 8008026:	4293      	cmp	r3, r2
 8008028:	d3f6      	bcc.n	8008018 <forward_conv2d_sssa8_ch_nl_pool+0x4e8>
 800802a:	9713      	str	r7, [sp, #76]	@ 0x4c
 800802c:	e7b6      	b.n	8007f9c <forward_conv2d_sssa8_ch_nl_pool+0x46c>
 800802e:	932a      	str	r3, [sp, #168]	@ 0xa8
 8008030:	e6a9      	b.n	8007d86 <forward_conv2d_sssa8_ch_nl_pool+0x256>
 8008032:	9229      	str	r2, [sp, #164]	@ 0xa4
 8008034:	e698      	b.n	8007d68 <forward_conv2d_sssa8_ch_nl_pool+0x238>
 8008036:	f8d9 1020 	ldr.w	r1, [r9, #32]
 800803a:	ee08 1a90 	vmov	s17, r1
 800803e:	2900      	cmp	r1, #0
 8008040:	f43f adff 	beq.w	8007c42 <forward_conv2d_sssa8_ch_nl_pool+0x112>
 8008044:	6889      	ldr	r1, [r1, #8]
 8008046:	ee08 1a90 	vmov	s17, r1
 800804a:	e5fa      	b.n	8007c42 <forward_conv2d_sssa8_ch_nl_pool+0x112>
 800804c:	9129      	str	r1, [sp, #164]	@ 0xa4
 800804e:	e68b      	b.n	8007d68 <forward_conv2d_sssa8_ch_nl_pool+0x238>
 8008050:	4b09      	ldr	r3, [pc, #36]	@ (8008078 <forward_conv2d_sssa8_ch_nl_pool+0x548>)
 8008052:	46c3      	mov	fp, r8
 8008054:	932e      	str	r3, [sp, #184]	@ 0xb8
 8008056:	e5a8      	b.n	8007baa <forward_conv2d_sssa8_ch_nl_pool+0x7a>
 8008058:	922a      	str	r2, [sp, #168]	@ 0xa8
 800805a:	e694      	b.n	8007d86 <forward_conv2d_sssa8_ch_nl_pool+0x256>
 800805c:	9115      	str	r1, [sp, #84]	@ 0x54
 800805e:	9118      	str	r1, [sp, #96]	@ 0x60
 8008060:	e590      	b.n	8007b84 <forward_conv2d_sssa8_ch_nl_pool+0x54>
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	deff      	udf	#255	@ 0xff
 8008066:	2300      	movs	r3, #0
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	deff      	udf	#255	@ 0xff
 800806c:	2300      	movs	r3, #0
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	deff      	udf	#255	@ 0xff
 8008072:	bf00      	nop
 8008074:	00000000 	.word	0x00000000
 8008078:	08007b2d 	.word	0x08007b2d

0800807c <forward_dense_integer_SSSA>:
 800807c:	6982      	ldr	r2, [r0, #24]
 800807e:	8813      	ldrh	r3, [r2, #0]
 8008080:	2b00      	cmp	r3, #0
 8008082:	f000 80c8 	beq.w	8008216 <forward_dense_integer_SSSA+0x19a>
 8008086:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800808a:	6852      	ldr	r2, [r2, #4]
 800808c:	b093      	sub	sp, #76	@ 0x4c
 800808e:	6854      	ldr	r4, [r2, #4]
 8008090:	b104      	cbz	r4, 8008094 <forward_dense_integer_SSSA+0x18>
 8008092:	6824      	ldr	r4, [r4, #0]
 8008094:	2b01      	cmp	r3, #1
 8008096:	f000 8161 	beq.w	800835c <forward_dense_integer_SSSA+0x2e0>
 800809a:	6911      	ldr	r1, [r2, #16]
 800809c:	b101      	cbz	r1, 80080a0 <forward_dense_integer_SSSA+0x24>
 800809e:	6809      	ldr	r1, [r1, #0]
 80080a0:	2b02      	cmp	r3, #2
 80080a2:	f000 815e 	beq.w	8008362 <forward_dense_integer_SSSA+0x2e6>
 80080a6:	69d5      	ldr	r5, [r2, #28]
 80080a8:	2d00      	cmp	r5, #0
 80080aa:	f000 8108 	beq.w	80082be <forward_dense_integer_SSSA+0x242>
 80080ae:	8b16      	ldrh	r6, [r2, #24]
 80080b0:	6828      	ldr	r0, [r5, #0]
 80080b2:	2e01      	cmp	r6, #1
 80080b4:	f240 812d 	bls.w	8008312 <forward_dense_integer_SSSA+0x296>
 80080b8:	686d      	ldr	r5, [r5, #4]
 80080ba:	2b03      	cmp	r3, #3
 80080bc:	f000 8154 	beq.w	8008368 <forward_dense_integer_SSSA+0x2ec>
 80080c0:	f8d2 9028 	ldr.w	r9, [r2, #40]	@ 0x28
 80080c4:	69ab      	ldr	r3, [r5, #24]
 80080c6:	f1b9 0f00 	cmp.w	r9, #0
 80080ca:	f000 810f 	beq.w	80082ec <forward_dense_integer_SSSA+0x270>
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	68e2      	ldr	r2, [r4, #12]
 80080d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80080d4:	68cb      	ldr	r3, [r1, #12]
 80080d6:	6856      	ldr	r6, [r2, #4]
 80080d8:	f8d9 9000 	ldr.w	r9, [r9]
 80080dc:	f8d4 e018 	ldr.w	lr, [r4, #24]
 80080e0:	698d      	ldr	r5, [r1, #24]
 80080e2:	960f      	str	r6, [sp, #60]	@ 0x3c
 80080e4:	e9d3 a201 	ldrd	sl, r2, [r3, #4]
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	fb03 f302 	mul.w	r3, r3, r2
 80080ee:	b2b2      	uxth	r2, r6
 80080f0:	930c      	str	r3, [sp, #48]	@ 0x30
 80080f2:	fa1f f38a 	uxth.w	r3, sl
 80080f6:	f1b9 0f00 	cmp.w	r9, #0
 80080fa:	d003      	beq.n	8008104 <forward_dense_integer_SSSA+0x88>
 80080fc:	f8d9 6018 	ldr.w	r6, [r9, #24]
 8008100:	f8d6 9008 	ldr.w	r9, [r6, #8]
 8008104:	6827      	ldr	r7, [r4, #0]
 8008106:	f8d0 b000 	ldr.w	fp, [r0]
 800810a:	680c      	ldr	r4, [r1, #0]
 800810c:	6981      	ldr	r1, [r0, #24]
 800810e:	2f00      	cmp	r7, #0
 8008110:	f000 8083 	beq.w	800821a <forward_dense_integer_SSSA+0x19e>
 8008114:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8008118:	f1bc 0f00 	cmp.w	ip, #0
 800811c:	f000 80b1 	beq.w	8008282 <forward_dense_integer_SSSA+0x206>
 8008120:	8878      	ldrh	r0, [r7, #2]
 8008122:	2800      	cmp	r0, #0
 8008124:	f000 809c 	beq.w	8008260 <forward_dense_integer_SSSA+0x1e4>
 8008128:	f8dc 6000 	ldr.w	r6, [ip]
 800812c:	edd6 7a00 	vldr	s15, [r6]
 8008130:	2c00      	cmp	r4, #0
 8008132:	f000 809a 	beq.w	800826a <forward_dense_integer_SSSA+0x1ee>
 8008136:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800813a:	f1b8 0f00 	cmp.w	r8, #0
 800813e:	f000 80a9 	beq.w	8008294 <forward_dense_integer_SSSA+0x218>
 8008142:	8860      	ldrh	r0, [r4, #2]
 8008144:	2800      	cmp	r0, #0
 8008146:	d074      	beq.n	8008232 <forward_dense_integer_SSSA+0x1b6>
 8008148:	68ae      	ldr	r6, [r5, #8]
 800814a:	f8de 5008 	ldr.w	r5, [lr, #8]
 800814e:	6889      	ldr	r1, [r1, #8]
 8008150:	950d      	str	r5, [sp, #52]	@ 0x34
 8008152:	f8d8 5000 	ldr.w	r5, [r8]
 8008156:	ed95 0a00 	vldr	s0, [r5]
 800815a:	f1bc 0f00 	cmp.w	ip, #0
 800815e:	d076      	beq.n	800824e <forward_dense_integer_SSSA+0x1d2>
 8008160:	8878      	ldrh	r0, [r7, #2]
 8008162:	2800      	cmp	r0, #0
 8008164:	f000 80a3 	beq.w	80082ae <forward_dense_integer_SSSA+0x232>
 8008168:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800816c:	f990 7000 	ldrsb.w	r7, [r0]
 8008170:	2c00      	cmp	r4, #0
 8008172:	f000 80eb 	beq.w	800834c <forward_dense_integer_SSSA+0x2d0>
 8008176:	f1b8 0f00 	cmp.w	r8, #0
 800817a:	f000 809d 	beq.w	80082b8 <forward_dense_integer_SSSA+0x23c>
 800817e:	8860      	ldrh	r0, [r4, #2]
 8008180:	2800      	cmp	r0, #0
 8008182:	d167      	bne.n	8008254 <forward_dense_integer_SSSA+0x1d8>
 8008184:	900a      	str	r0, [sp, #40]	@ 0x28
 8008186:	910e      	str	r1, [sp, #56]	@ 0x38
 8008188:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800818c:	f1bb 0f00 	cmp.w	fp, #0
 8008190:	f000 80de 	beq.w	8008350 <forward_dense_integer_SSSA+0x2d4>
 8008194:	f8db 0004 	ldr.w	r0, [fp, #4]
 8008198:	2800      	cmp	r0, #0
 800819a:	f000 80d9 	beq.w	8008350 <forward_dense_integer_SSSA+0x2d4>
 800819e:	6800      	ldr	r0, [r0, #0]
 80081a0:	2400      	movs	r4, #0
 80081a2:	f10d 0842 	add.w	r8, sp, #66	@ 0x42
 80081a6:	f8ad 4042 	strh.w	r4, [sp, #66]	@ 0x42
 80081aa:	9411      	str	r4, [sp, #68]	@ 0x44
 80081ac:	ed90 7a00 	vldr	s14, [r0]
 80081b0:	4640      	mov	r0, r8
 80081b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80081b6:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80081ba:	f001 f9ab 	bl	8009514 <align_factor>
 80081be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80081c0:	9011      	str	r0, [sp, #68]	@ 0x44
 80081c2:	b32b      	cbz	r3, 8008210 <forward_dense_integer_SSSA+0x194>
 80081c4:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 80081c8:	4699      	mov	r9, r3
 80081ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081cc:	fa1f fa8a 	uxth.w	sl, sl
 80081d0:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80081d2:	f8bd b03c 	ldrh.w	fp, [sp, #60]	@ 0x3c
 80081d6:	970d      	str	r7, [sp, #52]	@ 0x34
 80081d8:	461f      	mov	r7, r3
 80081da:	9a08      	ldr	r2, [sp, #32]
 80081dc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80081de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80081e0:	3401      	adds	r4, #1
 80081e2:	4628      	mov	r0, r5
 80081e4:	9605      	str	r6, [sp, #20]
 80081e6:	9306      	str	r3, [sp, #24]
 80081e8:	4456      	add	r6, sl
 80081ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081ec:	445d      	add	r5, fp
 80081ee:	9304      	str	r3, [sp, #16]
 80081f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081f2:	9303      	str	r3, [sp, #12]
 80081f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80081f6:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80081fa:	ab11      	add	r3, sp, #68	@ 0x44
 80081fc:	9300      	str	r3, [sp, #0]
 80081fe:	463b      	mov	r3, r7
 8008200:	e9cd 1208 	strd	r1, r2, [sp, #32]
 8008204:	f001 fa92 	bl	800972c <st_sssa8_fully_connected>
 8008208:	454c      	cmp	r4, r9
 800820a:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800820e:	d1e6      	bne.n	80081de <forward_dense_integer_SSSA+0x162>
 8008210:	b013      	add	sp, #76	@ 0x4c
 8008212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	deff      	udf	#255	@ 0xff
 800821a:	2c00      	cmp	r4, #0
 800821c:	d056      	beq.n	80082cc <forward_dense_integer_SSSA+0x250>
 800821e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8008222:	f1b8 0f00 	cmp.w	r8, #0
 8008226:	d05d      	beq.n	80082e4 <forward_dense_integer_SSSA+0x268>
 8008228:	8860      	ldrh	r0, [r4, #2]
 800822a:	2800      	cmp	r0, #0
 800822c:	d173      	bne.n	8008316 <forward_dense_integer_SSSA+0x29a>
 800822e:	eddf 7a50 	vldr	s15, [pc, #320]	@ 8008370 <forward_dense_integer_SSSA+0x2f4>
 8008232:	68ae      	ldr	r6, [r5, #8]
 8008234:	f8de 5008 	ldr.w	r5, [lr, #8]
 8008238:	6889      	ldr	r1, [r1, #8]
 800823a:	950d      	str	r5, [sp, #52]	@ 0x34
 800823c:	2f00      	cmp	r7, #0
 800823e:	d041      	beq.n	80082c4 <forward_dense_integer_SSSA+0x248>
 8008240:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8008244:	ed9f 0a4a 	vldr	s0, [pc, #296]	@ 8008370 <forward_dense_integer_SSSA+0x2f4>
 8008248:	f1bc 0f00 	cmp.w	ip, #0
 800824c:	d188      	bne.n	8008160 <forward_dense_integer_SSSA+0xe4>
 800824e:	4667      	mov	r7, ip
 8008250:	2800      	cmp	r0, #0
 8008252:	d097      	beq.n	8008184 <forward_dense_integer_SSSA+0x108>
 8008254:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008258:	f990 0000 	ldrsb.w	r0, [r0]
 800825c:	900a      	str	r0, [sp, #40]	@ 0x28
 800825e:	e792      	b.n	8008186 <forward_dense_integer_SSSA+0x10a>
 8008260:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8008370 <forward_dense_integer_SSSA+0x2f4>
 8008264:	2c00      	cmp	r4, #0
 8008266:	f47f af66 	bne.w	8008136 <forward_dense_integer_SSSA+0xba>
 800826a:	68ae      	ldr	r6, [r5, #8]
 800826c:	f8de 5008 	ldr.w	r5, [lr, #8]
 8008270:	6889      	ldr	r1, [r1, #8]
 8008272:	950d      	str	r5, [sp, #52]	@ 0x34
 8008274:	2800      	cmp	r0, #0
 8008276:	d15a      	bne.n	800832e <forward_dense_integer_SSSA+0x2b2>
 8008278:	4607      	mov	r7, r0
 800827a:	ed9f 0a3d 	vldr	s0, [pc, #244]	@ 8008370 <forward_dense_integer_SSSA+0x2f4>
 800827e:	900a      	str	r0, [sp, #40]	@ 0x28
 8008280:	e781      	b.n	8008186 <forward_dense_integer_SSSA+0x10a>
 8008282:	b31c      	cbz	r4, 80082cc <forward_dense_integer_SSSA+0x250>
 8008284:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8008288:	eddf 7a39 	vldr	s15, [pc, #228]	@ 8008370 <forward_dense_integer_SSSA+0x2f4>
 800828c:	f1b8 0f00 	cmp.w	r8, #0
 8008290:	f47f af57 	bne.w	8008142 <forward_dense_integer_SSSA+0xc6>
 8008294:	f8de 0008 	ldr.w	r0, [lr, #8]
 8008298:	68ae      	ldr	r6, [r5, #8]
 800829a:	6889      	ldr	r1, [r1, #8]
 800829c:	900d      	str	r0, [sp, #52]	@ 0x34
 800829e:	f1bc 0f00 	cmp.w	ip, #0
 80082a2:	d00e      	beq.n	80082c2 <forward_dense_integer_SSSA+0x246>
 80082a4:	8878      	ldrh	r0, [r7, #2]
 80082a6:	2800      	cmp	r0, #0
 80082a8:	d149      	bne.n	800833e <forward_dense_integer_SSSA+0x2c2>
 80082aa:	ed9f 0a31 	vldr	s0, [pc, #196]	@ 8008370 <forward_dense_integer_SSSA+0x2f4>
 80082ae:	2700      	movs	r7, #0
 80082b0:	f1b8 0f00 	cmp.w	r8, #0
 80082b4:	f47f af63 	bne.w	800817e <forward_dense_integer_SSSA+0x102>
 80082b8:	2000      	movs	r0, #0
 80082ba:	900a      	str	r0, [sp, #40]	@ 0x28
 80082bc:	e763      	b.n	8008186 <forward_dense_integer_SSSA+0x10a>
 80082be:	4628      	mov	r0, r5
 80082c0:	e6fb      	b.n	80080ba <forward_dense_integer_SSSA+0x3e>
 80082c2:	4667      	mov	r7, ip
 80082c4:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 8008370 <forward_dense_integer_SSSA+0x2f4>
 80082c8:	970a      	str	r7, [sp, #40]	@ 0x28
 80082ca:	e75c      	b.n	8008186 <forward_dense_integer_SSSA+0x10a>
 80082cc:	eddf 7a28 	vldr	s15, [pc, #160]	@ 8008370 <forward_dense_integer_SSSA+0x2f4>
 80082d0:	4627      	mov	r7, r4
 80082d2:	f8de 0008 	ldr.w	r0, [lr, #8]
 80082d6:	eeb0 0a67 	vmov.f32	s0, s15
 80082da:	68ae      	ldr	r6, [r5, #8]
 80082dc:	6889      	ldr	r1, [r1, #8]
 80082de:	900d      	str	r0, [sp, #52]	@ 0x34
 80082e0:	970a      	str	r7, [sp, #40]	@ 0x28
 80082e2:	e750      	b.n	8008186 <forward_dense_integer_SSSA+0x10a>
 80082e4:	eddf 7a22 	vldr	s15, [pc, #136]	@ 8008370 <forward_dense_integer_SSSA+0x2f4>
 80082e8:	4647      	mov	r7, r8
 80082ea:	e7f2      	b.n	80082d2 <forward_dense_integer_SSSA+0x256>
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	68e2      	ldr	r2, [r4, #12]
 80082f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80082f2:	68cb      	ldr	r3, [r1, #12]
 80082f4:	6856      	ldr	r6, [r2, #4]
 80082f6:	f8d4 e018 	ldr.w	lr, [r4, #24]
 80082fa:	698d      	ldr	r5, [r1, #24]
 80082fc:	960f      	str	r6, [sp, #60]	@ 0x3c
 80082fe:	e9d3 a201 	ldrd	sl, r2, [r3, #4]
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	fb03 f302 	mul.w	r3, r3, r2
 8008308:	b2b2      	uxth	r2, r6
 800830a:	930c      	str	r3, [sp, #48]	@ 0x30
 800830c:	fa1f f38a 	uxth.w	r3, sl
 8008310:	e6f8      	b.n	8008104 <forward_dense_integer_SSSA+0x88>
 8008312:	2500      	movs	r5, #0
 8008314:	e6d1      	b.n	80080ba <forward_dense_integer_SSSA+0x3e>
 8008316:	f8de 0008 	ldr.w	r0, [lr, #8]
 800831a:	68ae      	ldr	r6, [r5, #8]
 800831c:	900d      	str	r0, [sp, #52]	@ 0x34
 800831e:	f8d8 0000 	ldr.w	r0, [r8]
 8008322:	6889      	ldr	r1, [r1, #8]
 8008324:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8008370 <forward_dense_integer_SSSA+0x2f4>
 8008328:	ed90 0a00 	vldr	s0, [r0]
 800832c:	e792      	b.n	8008254 <forward_dense_integer_SSSA+0x1d8>
 800832e:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8008332:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 8008370 <forward_dense_integer_SSSA+0x2f4>
 8008336:	f990 7000 	ldrsb.w	r7, [r0]
 800833a:	940a      	str	r4, [sp, #40]	@ 0x28
 800833c:	e723      	b.n	8008186 <forward_dense_integer_SSSA+0x10a>
 800833e:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8008342:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8008370 <forward_dense_integer_SSSA+0x2f4>
 8008346:	f990 7000 	ldrsb.w	r7, [r0]
 800834a:	e7b5      	b.n	80082b8 <forward_dense_integer_SSSA+0x23c>
 800834c:	940a      	str	r4, [sp, #40]	@ 0x28
 800834e:	e71a      	b.n	8008186 <forward_dense_integer_SSSA+0x10a>
 8008350:	2300      	movs	r3, #0
 8008352:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 8008356:	9311      	str	r3, [sp, #68]	@ 0x44
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	deff      	udf	#255	@ 0xff
 800835c:	2300      	movs	r3, #0
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	deff      	udf	#255	@ 0xff
 8008362:	2300      	movs	r3, #0
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	deff      	udf	#255	@ 0xff
 8008368:	2300      	movs	r3, #0
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	deff      	udf	#255	@ 0xff
 800836e:	bf00      	nop
 8008370:	00000000 	.word	0x00000000

08008374 <forward_transpose>:
 8008374:	6983      	ldr	r3, [r0, #24]
 8008376:	881a      	ldrh	r2, [r3, #0]
 8008378:	2a00      	cmp	r2, #0
 800837a:	d035      	beq.n	80083e8 <forward_transpose+0x74>
 800837c:	6859      	ldr	r1, [r3, #4]
 800837e:	684b      	ldr	r3, [r1, #4]
 8008380:	b103      	cbz	r3, 8008384 <forward_transpose+0x10>
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	2a01      	cmp	r2, #1
 8008386:	f000 80a3 	beq.w	80084d0 <forward_transpose+0x15c>
 800838a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800838e:	690c      	ldr	r4, [r1, #16]
 8008390:	b08b      	sub	sp, #44	@ 0x2c
 8008392:	b104      	cbz	r4, 8008396 <forward_transpose+0x22>
 8008394:	6824      	ldr	r4, [r4, #0]
 8008396:	6a05      	ldr	r5, [r0, #32]
 8008398:	e9d3 6204 	ldrd	r6, r2, [r3, #16]
 800839c:	6869      	ldr	r1, [r5, #4]
 800839e:	f5b6 6fa0 	cmp.w	r6, #1280	@ 0x500
 80083a2:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80083a6:	9100      	str	r1, [sp, #0]
 80083a8:	68a9      	ldr	r1, [r5, #8]
 80083aa:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80083ae:	9106      	str	r1, [sp, #24]
 80083b0:	68e9      	ldr	r1, [r5, #12]
 80083b2:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80083b6:	9107      	str	r1, [sp, #28]
 80083b8:	d318      	bcc.n	80083ec <forward_transpose+0x78>
 80083ba:	69c1      	ldr	r1, [r0, #28]
 80083bc:	f5b1 6fa0 	cmp.w	r1, #1280	@ 0x500
 80083c0:	f0c0 8082 	bcc.w	80084c8 <forward_transpose+0x154>
 80083c4:	6929      	ldr	r1, [r5, #16]
 80083c6:	0089      	lsls	r1, r1, #2
 80083c8:	f026 06ff 	bic.w	r6, r6, #255	@ 0xff
 80083cc:	5851      	ldr	r1, [r2, r1]
 80083ce:	f5b6 6fc0 	cmp.w	r6, #1536	@ 0x600
 80083d2:	9102      	str	r1, [sp, #8]
 80083d4:	d111      	bne.n	80083fa <forward_transpose+0x86>
 80083d6:	69c1      	ldr	r1, [r0, #28]
 80083d8:	f5b1 6fc0 	cmp.w	r1, #1536	@ 0x600
 80083dc:	d376      	bcc.n	80084cc <forward_transpose+0x158>
 80083de:	6969      	ldr	r1, [r5, #20]
 80083e0:	0089      	lsls	r1, r1, #2
 80083e2:	5852      	ldr	r2, [r2, r1]
 80083e4:	9203      	str	r2, [sp, #12]
 80083e6:	e00a      	b.n	80083fe <forward_transpose+0x8a>
 80083e8:	6853      	ldr	r3, [r2, #4]
 80083ea:	deff      	udf	#255	@ 0xff
 80083ec:	f026 06ff 	bic.w	r6, r6, #255	@ 0xff
 80083f0:	2100      	movs	r1, #0
 80083f2:	f5b6 6fc0 	cmp.w	r6, #1536	@ 0x600
 80083f6:	9102      	str	r1, [sp, #8]
 80083f8:	d0ed      	beq.n	80083d6 <forward_transpose+0x62>
 80083fa:	2200      	movs	r2, #0
 80083fc:	9203      	str	r2, [sp, #12]
 80083fe:	699b      	ldr	r3, [r3, #24]
 8008400:	69a2      	ldr	r2, [r4, #24]
 8008402:	68e1      	ldr	r1, [r4, #12]
 8008404:	6896      	ldr	r6, [r2, #8]
 8008406:	681a      	ldr	r2, [r3, #0]
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	f3c2 2283 	ubfx	r2, r2, #10, #4
 800840e:	9301      	str	r3, [sp, #4]
 8008410:	68cb      	ldr	r3, [r1, #12]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d055      	beq.n	80084c2 <forward_transpose+0x14e>
 8008416:	2300      	movs	r3, #0
 8008418:	6888      	ldr	r0, [r1, #8]
 800841a:	9305      	str	r3, [sp, #20]
 800841c:	2800      	cmp	r0, #0
 800841e:	d050      	beq.n	80084c2 <forward_transpose+0x14e>
 8008420:	68a5      	ldr	r5, [r4, #8]
 8008422:	2000      	movs	r0, #0
 8008424:	4692      	mov	sl, r2
 8008426:	9308      	str	r3, [sp, #32]
 8008428:	f3c5 2517 	ubfx	r5, r5, #8, #24
 800842c:	9004      	str	r0, [sp, #16]
 800842e:	469b      	mov	fp, r3
 8008430:	f04f 0800 	mov.w	r8, #0
 8008434:	9309      	str	r3, [sp, #36]	@ 0x24
 8008436:	2d04      	cmp	r5, #4
 8008438:	bf8c      	ite	hi
 800843a:	690b      	ldrhi	r3, [r1, #16]
 800843c:	2301      	movls	r3, #1
 800843e:	4598      	cmp	r8, r3
 8008440:	d229      	bcs.n	8008496 <forward_transpose+0x122>
 8008442:	2d05      	cmp	r5, #5
 8008444:	46d9      	mov	r9, fp
 8008446:	f04f 0700 	mov.w	r7, #0
 800844a:	d91d      	bls.n	8008488 <forward_transpose+0x114>
 800844c:	694a      	ldr	r2, [r1, #20]
 800844e:	4297      	cmp	r7, r2
 8008450:	d21c      	bcs.n	800848c <forward_transpose+0x118>
 8008452:	684a      	ldr	r2, [r1, #4]
 8008454:	b192      	cbz	r2, 800847c <forward_transpose+0x108>
 8008456:	2500      	movs	r5, #0
 8008458:	9b00      	ldr	r3, [sp, #0]
 800845a:	4631      	mov	r1, r6
 800845c:	4652      	mov	r2, sl
 800845e:	4456      	add	r6, sl
 8008460:	fb03 9005 	mla	r0, r3, r5, r9
 8008464:	9b01      	ldr	r3, [sp, #4]
 8008466:	3501      	adds	r5, #1
 8008468:	4418      	add	r0, r3
 800846a:	f001 fc59 	bl	8009d20 <st_int8_copy>
 800846e:	68e1      	ldr	r1, [r4, #12]
 8008470:	684b      	ldr	r3, [r1, #4]
 8008472:	429d      	cmp	r5, r3
 8008474:	d3f0      	bcc.n	8008458 <forward_transpose+0xe4>
 8008476:	68a3      	ldr	r3, [r4, #8]
 8008478:	f3c3 2517 	ubfx	r5, r3, #8, #24
 800847c:	9b03      	ldr	r3, [sp, #12]
 800847e:	2d05      	cmp	r5, #5
 8008480:	f107 0701 	add.w	r7, r7, #1
 8008484:	4499      	add	r9, r3
 8008486:	d8e1      	bhi.n	800844c <forward_transpose+0xd8>
 8008488:	2f00      	cmp	r7, #0
 800848a:	d0e2      	beq.n	8008452 <forward_transpose+0xde>
 800848c:	9b02      	ldr	r3, [sp, #8]
 800848e:	f108 0801 	add.w	r8, r8, #1
 8008492:	449b      	add	fp, r3
 8008494:	e7cf      	b.n	8008436 <forward_transpose+0xc2>
 8008496:	9a04      	ldr	r2, [sp, #16]
 8008498:	9806      	ldr	r0, [sp, #24]
 800849a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800849c:	3201      	adds	r2, #1
 800849e:	4403      	add	r3, r0
 80084a0:	6888      	ldr	r0, [r1, #8]
 80084a2:	9204      	str	r2, [sp, #16]
 80084a4:	4282      	cmp	r2, r0
 80084a6:	d3c2      	bcc.n	800842e <forward_transpose+0xba>
 80084a8:	9d05      	ldr	r5, [sp, #20]
 80084aa:	4652      	mov	r2, sl
 80084ac:	9b08      	ldr	r3, [sp, #32]
 80084ae:	3501      	adds	r5, #1
 80084b0:	462f      	mov	r7, r5
 80084b2:	9505      	str	r5, [sp, #20]
 80084b4:	68cd      	ldr	r5, [r1, #12]
 80084b6:	42af      	cmp	r7, r5
 80084b8:	d203      	bcs.n	80084c2 <forward_transpose+0x14e>
 80084ba:	9d07      	ldr	r5, [sp, #28]
 80084bc:	442b      	add	r3, r5
 80084be:	2800      	cmp	r0, #0
 80084c0:	d1ae      	bne.n	8008420 <forward_transpose+0xac>
 80084c2:	b00b      	add	sp, #44	@ 0x2c
 80084c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084c8:	2104      	movs	r1, #4
 80084ca:	e77d      	b.n	80083c8 <forward_transpose+0x54>
 80084cc:	2104      	movs	r1, #4
 80084ce:	e788      	b.n	80083e2 <forward_transpose+0x6e>
 80084d0:	2300      	movs	r3, #0
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	deff      	udf	#255	@ 0xff
 80084d6:	bf00      	nop

080084d8 <pool_func_mp_array_integer_INT8>:
 80084d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084dc:	b093      	sub	sp, #76	@ 0x4c
 80084de:	468c      	mov	ip, r1
 80084e0:	469a      	mov	sl, r3
 80084e2:	6804      	ldr	r4, [r0, #0]
 80084e4:	f8bd 1074 	ldrh.w	r1, [sp, #116]	@ 0x74
 80084e8:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 80084ec:	910e      	str	r1, [sp, #56]	@ 0x38
 80084ee:	f8bd 1078 	ldrh.w	r1, [sp, #120]	@ 0x78
 80084f2:	930d      	str	r3, [sp, #52]	@ 0x34
 80084f4:	910f      	str	r1, [sp, #60]	@ 0x3c
 80084f6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80084f8:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 80084fc:	6980      	ldr	r0, [r0, #24]
 80084fe:	9110      	str	r1, [sp, #64]	@ 0x40
 8008500:	f8bd b080 	ldrh.w	fp, [sp, #128]	@ 0x80
 8008504:	f8bd 7084 	ldrh.w	r7, [sp, #132]	@ 0x84
 8008508:	f8bd e088 	ldrh.w	lr, [sp, #136]	@ 0x88
 800850c:	f8bd 808c 	ldrh.w	r8, [sp, #140]	@ 0x8c
 8008510:	6999      	ldr	r1, [r3, #24]
 8008512:	681d      	ldr	r5, [r3, #0]
 8008514:	2c00      	cmp	r4, #0
 8008516:	d068      	beq.n	80085ea <pool_func_mp_array_integer_INT8+0x112>
 8008518:	6866      	ldr	r6, [r4, #4]
 800851a:	2e00      	cmp	r6, #0
 800851c:	d04c      	beq.n	80085b8 <pool_func_mp_array_integer_INT8+0xe0>
 800851e:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 8008522:	f1b9 0f00 	cmp.w	r9, #0
 8008526:	d07a      	beq.n	800861e <pool_func_mp_array_integer_INT8+0x146>
 8008528:	6833      	ldr	r3, [r6, #0]
 800852a:	edd3 7a00 	vldr	s15, [r3]
 800852e:	2d00      	cmp	r5, #0
 8008530:	d079      	beq.n	8008626 <pool_func_mp_array_integer_INT8+0x14e>
 8008532:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8008536:	f1b9 0f00 	cmp.w	r9, #0
 800853a:	d046      	beq.n	80085ca <pool_func_mp_array_integer_INT8+0xf2>
 800853c:	886b      	ldrh	r3, [r5, #2]
 800853e:	9311      	str	r3, [sp, #68]	@ 0x44
 8008540:	2b00      	cmp	r3, #0
 8008542:	d05f      	beq.n	8008604 <pool_func_mp_array_integer_INT8+0x12c>
 8008544:	f8d9 3000 	ldr.w	r3, [r9]
 8008548:	6880      	ldr	r0, [r0, #8]
 800854a:	ed93 7a00 	vldr	s14, [r3]
 800854e:	6889      	ldr	r1, [r1, #8]
 8008550:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8008554:	2e00      	cmp	r6, #0
 8008556:	d060      	beq.n	800861a <pool_func_mp_array_integer_INT8+0x142>
 8008558:	8863      	ldrh	r3, [r4, #2]
 800855a:	2b00      	cmp	r3, #0
 800855c:	f000 808c 	beq.w	8008678 <pool_func_mp_array_integer_INT8+0x1a0>
 8008560:	6873      	ldr	r3, [r6, #4]
 8008562:	f993 4000 	ldrsb.w	r4, [r3]
 8008566:	2d00      	cmp	r5, #0
 8008568:	d03d      	beq.n	80085e6 <pool_func_mp_array_integer_INT8+0x10e>
 800856a:	f1b9 0f00 	cmp.w	r9, #0
 800856e:	d03a      	beq.n	80085e6 <pool_func_mp_array_integer_INT8+0x10e>
 8008570:	886b      	ldrh	r3, [r5, #2]
 8008572:	9311      	str	r3, [sp, #68]	@ 0x44
 8008574:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008576:	b11b      	cbz	r3, 8008580 <pool_func_mp_array_integer_INT8+0xa8>
 8008578:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800857c:	f993 3000 	ldrsb.w	r3, [r3]
 8008580:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008588:	da5f      	bge.n	800864a <pool_func_mp_array_integer_INT8+0x172>
 800858a:	f8cd a000 	str.w	sl, [sp]
 800858e:	e9cd 4309 	strd	r4, r3, [sp, #36]	@ 0x24
 8008592:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008594:	9304      	str	r3, [sp, #16]
 8008596:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008598:	9303      	str	r3, [sp, #12]
 800859a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800859c:	9302      	str	r3, [sp, #8]
 800859e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80085a0:	9301      	str	r3, [sp, #4]
 80085a2:	4613      	mov	r3, r2
 80085a4:	4662      	mov	r2, ip
 80085a6:	e9cd e807 	strd	lr, r8, [sp, #28]
 80085aa:	e9cd b705 	strd	fp, r7, [sp, #20]
 80085ae:	f000 fed1 	bl	8009354 <forward_lite_maxpool_is8os8_scaleneg>
 80085b2:	b013      	add	sp, #76	@ 0x4c
 80085b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085b8:	2d00      	cmp	r5, #0
 80085ba:	d040      	beq.n	800863e <pool_func_mp_array_integer_INT8+0x166>
 80085bc:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80085c0:	eddf 7a39 	vldr	s15, [pc, #228]	@ 80086a8 <pool_func_mp_array_integer_INT8+0x1d0>
 80085c4:	f1b9 0f00 	cmp.w	r9, #0
 80085c8:	d1b8      	bne.n	800853c <pool_func_mp_array_integer_INT8+0x64>
 80085ca:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80086a8 <pool_func_mp_array_integer_INT8+0x1d0>
 80085ce:	6880      	ldr	r0, [r0, #8]
 80085d0:	ee87 0a87 	vdiv.f32	s0, s15, s14
 80085d4:	6889      	ldr	r1, [r1, #8]
 80085d6:	2e00      	cmp	r6, #0
 80085d8:	d063      	beq.n	80086a2 <pool_func_mp_array_integer_INT8+0x1ca>
 80085da:	8863      	ldrh	r3, [r4, #2]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d04b      	beq.n	8008678 <pool_func_mp_array_integer_INT8+0x1a0>
 80085e0:	6873      	ldr	r3, [r6, #4]
 80085e2:	f993 4000 	ldrsb.w	r4, [r3]
 80085e6:	2300      	movs	r3, #0
 80085e8:	e7ca      	b.n	8008580 <pool_func_mp_array_integer_INT8+0xa8>
 80085ea:	2d00      	cmp	r5, #0
 80085ec:	d046      	beq.n	800867c <pool_func_mp_array_integer_INT8+0x1a4>
 80085ee:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80085f2:	f1b9 0f00 	cmp.w	r9, #0
 80085f6:	d022      	beq.n	800863e <pool_func_mp_array_integer_INT8+0x166>
 80085f8:	886b      	ldrh	r3, [r5, #2]
 80085fa:	9311      	str	r3, [sp, #68]	@ 0x44
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d144      	bne.n	800868a <pool_func_mp_array_integer_INT8+0x1b2>
 8008600:	eddf 7a29 	vldr	s15, [pc, #164]	@ 80086a8 <pool_func_mp_array_integer_INT8+0x1d0>
 8008604:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80086a8 <pool_func_mp_array_integer_INT8+0x1d0>
 8008608:	6880      	ldr	r0, [r0, #8]
 800860a:	ee87 0a87 	vdiv.f32	s0, s15, s14
 800860e:	6889      	ldr	r1, [r1, #8]
 8008610:	2c00      	cmp	r4, #0
 8008612:	d0e8      	beq.n	80085e6 <pool_func_mp_array_integer_INT8+0x10e>
 8008614:	6866      	ldr	r6, [r4, #4]
 8008616:	2e00      	cmp	r6, #0
 8008618:	d19e      	bne.n	8008558 <pool_func_mp_array_integer_INT8+0x80>
 800861a:	4634      	mov	r4, r6
 800861c:	e7aa      	b.n	8008574 <pool_func_mp_array_integer_INT8+0x9c>
 800861e:	eddf 7a22 	vldr	s15, [pc, #136]	@ 80086a8 <pool_func_mp_array_integer_INT8+0x1d0>
 8008622:	2d00      	cmp	r5, #0
 8008624:	d185      	bne.n	8008532 <pool_func_mp_array_integer_INT8+0x5a>
 8008626:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80086a8 <pool_func_mp_array_integer_INT8+0x1d0>
 800862a:	6880      	ldr	r0, [r0, #8]
 800862c:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8008630:	6889      	ldr	r1, [r1, #8]
 8008632:	f1b9 0f00 	cmp.w	r9, #0
 8008636:	d12f      	bne.n	8008698 <pool_func_mp_array_integer_INT8+0x1c0>
 8008638:	464c      	mov	r4, r9
 800863a:	464b      	mov	r3, r9
 800863c:	e7a0      	b.n	8008580 <pool_func_mp_array_integer_INT8+0xa8>
 800863e:	2400      	movs	r4, #0
 8008640:	6880      	ldr	r0, [r0, #8]
 8008642:	6889      	ldr	r1, [r1, #8]
 8008644:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 80086ac <pool_func_mp_array_integer_INT8+0x1d4>
 8008648:	4623      	mov	r3, r4
 800864a:	f8cd a000 	str.w	sl, [sp]
 800864e:	e9cd 4309 	strd	r4, r3, [sp, #36]	@ 0x24
 8008652:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008654:	9304      	str	r3, [sp, #16]
 8008656:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008658:	9303      	str	r3, [sp, #12]
 800865a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800865c:	9302      	str	r3, [sp, #8]
 800865e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008660:	9301      	str	r3, [sp, #4]
 8008662:	4613      	mov	r3, r2
 8008664:	4662      	mov	r2, ip
 8008666:	e9cd e807 	strd	lr, r8, [sp, #28]
 800866a:	e9cd b705 	strd	fp, r7, [sp, #20]
 800866e:	f000 fd8f 	bl	8009190 <forward_lite_maxpool_is8os8_scalepos>
 8008672:	b013      	add	sp, #76	@ 0x4c
 8008674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008678:	2400      	movs	r4, #0
 800867a:	e776      	b.n	800856a <pool_func_mp_array_integer_INT8+0x92>
 800867c:	462c      	mov	r4, r5
 800867e:	6880      	ldr	r0, [r0, #8]
 8008680:	6889      	ldr	r1, [r1, #8]
 8008682:	462b      	mov	r3, r5
 8008684:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 80086ac <pool_func_mp_array_integer_INT8+0x1d4>
 8008688:	e7df      	b.n	800864a <pool_func_mp_array_integer_INT8+0x172>
 800868a:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 80086a8 <pool_func_mp_array_integer_INT8+0x1d0>
 800868e:	6880      	ldr	r0, [r0, #8]
 8008690:	eef0 7a40 	vmov.f32	s15, s0
 8008694:	6889      	ldr	r1, [r1, #8]
 8008696:	e76f      	b.n	8008578 <pool_func_mp_array_integer_INT8+0xa0>
 8008698:	6874      	ldr	r4, [r6, #4]
 800869a:	462b      	mov	r3, r5
 800869c:	f994 4000 	ldrsb.w	r4, [r4]
 80086a0:	e76e      	b.n	8008580 <pool_func_mp_array_integer_INT8+0xa8>
 80086a2:	4634      	mov	r4, r6
 80086a4:	4633      	mov	r3, r6
 80086a6:	e76b      	b.n	8008580 <pool_func_mp_array_integer_INT8+0xa8>
 80086a8:	00000000 	.word	0x00000000
 80086ac:	7fc00000 	.word	0x7fc00000

080086b0 <forward_lite_conv2d_sssa8_ch>:
 80086b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086b4:	ed2d 8b08 	vpush	{d8-d11}
 80086b8:	b0d5      	sub	sp, #340	@ 0x154
 80086ba:	469a      	mov	sl, r3
 80086bc:	4689      	mov	r9, r1
 80086be:	f8bd 319c 	ldrh.w	r3, [sp, #412]	@ 0x19c
 80086c2:	f8dd b1d8 	ldr.w	fp, [sp, #472]	@ 0x1d8
 80086c6:	9213      	str	r2, [sp, #76]	@ 0x4c
 80086c8:	ee09 3a10 	vmov	s18, r3
 80086cc:	f8bd 21a0 	ldrh.w	r2, [sp, #416]	@ 0x1a0
 80086d0:	ebab 0543 	sub.w	r5, fp, r3, lsl #1
 80086d4:	f89d 11c4 	ldrb.w	r1, [sp, #452]	@ 0x1c4
 80086d8:	9225      	str	r2, [sp, #148]	@ 0x94
 80086da:	9a77      	ldr	r2, [sp, #476]	@ 0x1dc
 80086dc:	f8bd 61d0 	ldrh.w	r6, [sp, #464]	@ 0x1d0
 80086e0:	4415      	add	r5, r2
 80086e2:	f8bd 21a4 	ldrh.w	r2, [sp, #420]	@ 0x1a4
 80086e6:	9011      	str	r0, [sp, #68]	@ 0x44
 80086e8:	922a      	str	r2, [sp, #168]	@ 0xa8
 80086ea:	f8bd 21a8 	ldrh.w	r2, [sp, #424]	@ 0x1a8
 80086ee:	f8bd 01cc 	ldrh.w	r0, [sp, #460]	@ 0x1cc
 80086f2:	9214      	str	r2, [sp, #80]	@ 0x50
 80086f4:	f8bd 21ac 	ldrh.w	r2, [sp, #428]	@ 0x1ac
 80086f8:	9629      	str	r6, [sp, #164]	@ 0xa4
 80086fa:	005e      	lsls	r6, r3, #1
 80086fc:	9224      	str	r2, [sp, #144]	@ 0x90
 80086fe:	07cb      	lsls	r3, r1, #31
 8008700:	f8bd 21b0 	ldrh.w	r2, [sp, #432]	@ 0x1b0
 8008704:	f99d 81bc 	ldrsb.w	r8, [sp, #444]	@ 0x1bc
 8008708:	9220      	str	r2, [sp, #128]	@ 0x80
 800870a:	f8bd 21b4 	ldrh.w	r2, [sp, #436]	@ 0x1b4
 800870e:	f99d 41c0 	ldrsb.w	r4, [sp, #448]	@ 0x1c0
 8008712:	922b      	str	r2, [sp, #172]	@ 0xac
 8008714:	f8bd 71d4 	ldrh.w	r7, [sp, #468]	@ 0x1d4
 8008718:	9a6e      	ldr	r2, [sp, #440]	@ 0x1b8
 800871a:	9126      	str	r1, [sp, #152]	@ 0x98
 800871c:	9012      	str	r0, [sp, #72]	@ 0x48
 800871e:	f140 8429 	bpl.w	8008f74 <forward_lite_conv2d_sssa8_ch+0x8c4>
 8008722:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 8008724:	1c83      	adds	r3, r0, #2
 8008726:	3102      	adds	r1, #2
 8008728:	fb01 f303 	mul.w	r3, r1, r3
 800872c:	931d      	str	r3, [sp, #116]	@ 0x74
 800872e:	9b77      	ldr	r3, [sp, #476]	@ 0x1dc
 8008730:	4650      	mov	r0, sl
 8008732:	9966      	ldr	r1, [sp, #408]	@ 0x198
 8008734:	9201      	str	r2, [sp, #4]
 8008736:	ee19 2a10 	vmov	r2, s18
 800873a:	e9cd 8302 	strd	r8, r3, [sp, #8]
 800873e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8008740:	9300      	str	r3, [sp, #0]
 8008742:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8008744:	f000 ff68 	bl	8009618 <st_sssa8_ch_convolve_rank1upd>
 8008748:	ee19 2a10 	vmov	r2, s18
 800874c:	9977      	ldr	r1, [sp, #476]	@ 0x1dc
 800874e:	18b3      	adds	r3, r6, r2
 8008750:	9825      	ldr	r0, [sp, #148]	@ 0x94
 8008752:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8008756:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8008758:	fb10 f303 	smulbb	r3, r0, r3
 800875c:	9119      	str	r1, [sp, #100]	@ 0x64
 800875e:	fb13 f30a 	smulbb	r3, r3, sl
 8008762:	b29b      	uxth	r3, r3
 8008764:	931c      	str	r3, [sp, #112]	@ 0x70
 8008766:	ebc2 7342 	rsb	r3, r2, r2, lsl #29
 800876a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800876e:	ee0a 3a10 	vmov	s20, r3
 8008772:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8008776:	9323      	str	r3, [sp, #140]	@ 0x8c
 8008778:	b1d2      	cbz	r2, 80087b0 <forward_lite_conv2d_sssa8_ch+0x100>
 800877a:	1d19      	adds	r1, r3, #4
 800877c:	f04f 0c01 	mov.w	ip, #1
 8008780:	eb05 0e06 	add.w	lr, r5, r6
 8008784:	f935 3b02 	ldrsh.w	r3, [r5], #2
 8008788:	1e5a      	subs	r2, r3, #1
 800878a:	fa0c f003 	lsl.w	r0, ip, r3
 800878e:	fa04 f303 	lsl.w	r3, r4, r3
 8008792:	b292      	uxth	r2, r2
 8008794:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8008798:	2a14      	cmp	r2, #20
 800879a:	f200 8184 	bhi.w	8008aa6 <forward_lite_conv2d_sssa8_ch+0x3f6>
 800879e:	45ae      	cmp	lr, r5
 80087a0:	f841 3c04 	str.w	r3, [r1, #-4]
 80087a4:	f101 0104 	add.w	r1, r1, #4
 80087a8:	d1ec      	bne.n	8008784 <forward_lite_conv2d_sssa8_ch+0xd4>
 80087aa:	9b77      	ldr	r3, [sp, #476]	@ 0x1dc
 80087ac:	eb03 050b 	add.w	r5, r3, fp
 80087b0:	1bab      	subs	r3, r5, r6
 80087b2:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 80087b4:	9e2a      	ldr	r6, [sp, #168]	@ 0xa8
 80087b6:	aa34      	add	r2, sp, #208	@ 0xd0
 80087b8:	9322      	str	r3, [sp, #136]	@ 0x88
 80087ba:	a94a      	add	r1, sp, #296	@ 0x128
 80087bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80087be:	fb06 f504 	mul.w	r5, r6, r4
 80087c2:	a840      	add	r0, sp, #256	@ 0x100
 80087c4:	fb0a fb04 	mul.w	fp, sl, r4
 80087c8:	9335      	str	r3, [sp, #212]	@ 0xd4
 80087ca:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80087cc:	943e      	str	r4, [sp, #248]	@ 0xf8
 80087ce:	933a      	str	r3, [sp, #232]	@ 0xe8
 80087d0:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80087d2:	fb0a f405 	mul.w	r4, sl, r5
 80087d6:	f8cd 90d8 	str.w	r9, [sp, #216]	@ 0xd8
 80087da:	9339      	str	r3, [sp, #228]	@ 0xe4
 80087dc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80087de:	963d      	str	r6, [sp, #244]	@ 0xf4
 80087e0:	934c      	str	r3, [sp, #304]	@ 0x130
 80087e2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80087e4:	934d      	str	r3, [sp, #308]	@ 0x134
 80087e6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80087e8:	934e      	str	r3, [sp, #312]	@ 0x138
 80087ea:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80087ec:	934f      	str	r3, [sp, #316]	@ 0x13c
 80087ee:	ab3c      	add	r3, sp, #240	@ 0xf0
 80087f0:	9300      	str	r3, [sp, #0]
 80087f2:	ab38      	add	r3, sp, #224	@ 0xe0
 80087f4:	f001 fd9e 	bl	800a334 <ai_padding_opt_init>
 80087f8:	ee19 3a10 	vmov	r3, s18
 80087fc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80087fe:	fb03 f404 	mul.w	r4, r3, r4
 8008802:	fb0b f306 	mul.w	r3, fp, r6
 8008806:	f5b4 6f20 	cmp.w	r4, #2560	@ 0xa00
 800880a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800880e:	bfa8      	it	ge
 8008810:	f44f 6420 	movge.w	r4, #2560	@ 0xa00
 8008814:	2f01      	cmp	r7, #1
 8008816:	ee09 3a90 	vmov	s19, r3
 800881a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800881c:	f003 0202 	and.w	r2, r3, #2
 8008820:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008824:	9230      	str	r2, [sp, #192]	@ 0xc0
 8008826:	931e      	str	r3, [sp, #120]	@ 0x78
 8008828:	f000 838f 	beq.w	8008f4a <forward_lite_conv2d_sssa8_ch+0x89a>
 800882c:	2300      	movs	r3, #0
 800882e:	932e      	str	r3, [sp, #184]	@ 0xb8
 8008830:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8008832:	2b01      	cmp	r3, #1
 8008834:	f240 824c 	bls.w	8008cd0 <forward_lite_conv2d_sssa8_ch+0x620>
 8008838:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800883a:	ee19 2a10 	vmov	r2, s18
 800883e:	fbb4 f3f3 	udiv	r3, r4, r3
 8008842:	b29b      	uxth	r3, r3
 8008844:	4293      	cmp	r3, r2
 8008846:	4619      	mov	r1, r3
 8008848:	bf28      	it	cs
 800884a:	4611      	movcs	r1, r2
 800884c:	fbb2 f3f1 	udiv	r3, r2, r1
 8008850:	fb01 2213 	mls	r2, r1, r3, r2
 8008854:	b29b      	uxth	r3, r3
 8008856:	911f      	str	r1, [sp, #124]	@ 0x7c
 8008858:	b292      	uxth	r2, r2
 800885a:	2a00      	cmp	r2, #0
 800885c:	f040 812b 	bne.w	8008ab6 <forward_lite_conv2d_sssa8_ch+0x406>
 8008860:	1e5a      	subs	r2, r3, #1
 8008862:	b292      	uxth	r2, r2
 8008864:	922d      	str	r2, [sp, #180]	@ 0xb4
 8008866:	2b00      	cmp	r3, #0
 8008868:	f000 8219 	beq.w	8008c9e <forward_lite_conv2d_sssa8_ch+0x5ee>
 800886c:	fb0a f505 	mul.w	r5, sl, r5
 8008870:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008872:	fa0f f688 	sxth.w	r6, r8
 8008876:	ed8d 9a2f 	vstr	s18, [sp, #188]	@ 0xbc
 800887a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800887e:	ea4f 084a 	mov.w	r8, sl, lsl #1
 8008882:	ee0a 6a90 	vmov	s21, r6
 8008886:	9318      	str	r3, [sp, #96]	@ 0x60
 8008888:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800888a:	f8cd 80b0 	str.w	r8, [sp, #176]	@ 0xb0
 800888e:	46d0      	mov	r8, sl
 8008890:	f1a3 0303 	sub.w	r3, r3, #3
 8008894:	fab3 f383 	clz	r3, r3
 8008898:	095b      	lsrs	r3, r3, #5
 800889a:	9328      	str	r3, [sp, #160]	@ 0xa0
 800889c:	f00a 0303 	and.w	r3, sl, #3
 80088a0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80088a2:	ea4f 034b 	mov.w	r3, fp, lsl #1
 80088a6:	931a      	str	r3, [sp, #104]	@ 0x68
 80088a8:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80088aa:	b953      	cbnz	r3, 80088c2 <forward_lite_conv2d_sssa8_ch+0x212>
 80088ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	f040 8206 	bne.w	8008cc0 <forward_lite_conv2d_sssa8_ch+0x610>
 80088b4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80088b6:	ee19 1a90 	vmov	r1, s19
 80088ba:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80088bc:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80088be:	f001 fc7f 	bl	800a1c0 <st_int8_to16_dual_interleaved>
 80088c2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80088c4:	2b03      	cmp	r3, #3
 80088c6:	f000 81ef 	beq.w	8008ca8 <forward_lite_conv2d_sssa8_ch+0x5f8>
 80088ca:	9b72      	ldr	r3, [sp, #456]	@ 0x1c8
 80088cc:	931b      	str	r3, [sp, #108]	@ 0x6c
 80088ce:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	f000 80b3 	beq.w	8008a3c <forward_lite_conv2d_sssa8_ch+0x38c>
 80088d6:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80088d8:	2400      	movs	r4, #0
 80088da:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80088dc:	ee08 ba90 	vmov	s17, fp
 80088e0:	425b      	negs	r3, r3
 80088e2:	4626      	mov	r6, r4
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	9321      	str	r3, [sp, #132]	@ 0x84
 80088e8:	a840      	add	r0, sp, #256	@ 0x100
 80088ea:	f001 fd7d 	bl	800a3e8 <ai_padding_opt_phase1>
 80088ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	f000 81ca 	beq.w	8008c8a <forward_lite_conv2d_sssa8_ch+0x5da>
 80088f6:	b2a3      	uxth	r3, r4
 80088f8:	9327      	str	r3, [sp, #156]	@ 0x9c
 80088fa:	e9dd 322a 	ldrd	r3, r2, [sp, #168]	@ 0xa8
 80088fe:	1a9b      	subs	r3, r3, r2
 8008900:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008902:	fb06 3302 	mla	r3, r6, r2, r3
 8008906:	f9bd 2084 	ldrsh.w	r2, [sp, #132]	@ 0x84
 800890a:	930d      	str	r3, [sp, #52]	@ 0x34
 800890c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800890e:	425b      	negs	r3, r3
 8008910:	b29b      	uxth	r3, r3
 8008912:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008914:	2300      	movs	r3, #0
 8008916:	930c      	str	r3, [sp, #48]	@ 0x30
 8008918:	e9cd 3216 	strd	r3, r2, [sp, #88]	@ 0x58
 800891c:	9b40      	ldr	r3, [sp, #256]	@ 0x100
 800891e:	2b00      	cmp	r3, #0
 8008920:	f000 80e6 	beq.w	8008af0 <forward_lite_conv2d_sssa8_ch+0x440>
 8008924:	3b01      	subs	r3, #1
 8008926:	9340      	str	r3, [sp, #256]	@ 0x100
 8008928:	2301      	movs	r3, #1
 800892a:	f8ad 3126 	strh.w	r3, [sp, #294]	@ 0x126
 800892e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008930:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008932:	4293      	cmp	r3, r2
 8008934:	f280 80ea 	bge.w	8008b0c <forward_lite_conv2d_sssa8_ch+0x45c>
 8008938:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800893a:	46c3      	mov	fp, r8
 800893c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800893e:	ee1a 7a90 	vmov	r7, s21
 8008942:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8008944:	f8dd a0b0 	ldr.w	sl, [sp, #176]	@ 0xb0
 8008948:	fb01 3402 	mla	r4, r1, r2, r3
 800894c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800894e:	1ae4      	subs	r4, r4, r3
 8008950:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 8008954:	9310      	str	r3, [sp, #64]	@ 0x40
 8008956:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 800895a:	930e      	str	r3, [sp, #56]	@ 0x38
 800895c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800895e:	461a      	mov	r2, r3
 8008960:	930a      	str	r3, [sp, #40]	@ 0x28
 8008962:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008964:	42a3      	cmp	r3, r4
 8008966:	da25      	bge.n	80089b4 <forward_lite_conv2d_sssa8_ch+0x304>
 8008968:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800896a:	ea4f 78d1 	mov.w	r8, r1, lsr #31
 800896e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008970:	4291      	cmp	r1, r2
 8008972:	bfd8      	it	le
 8008974:	f048 0801 	orrle.w	r8, r8, #1
 8008978:	fb09 f202 	mul.w	r2, r9, r2
 800897c:	9215      	str	r2, [sp, #84]	@ 0x54
 800897e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008980:	2a00      	cmp	r2, #0
 8008982:	f000 809c 	beq.w	8008abe <forward_lite_conv2d_sssa8_ch+0x40e>
 8008986:	461e      	mov	r6, r3
 8008988:	469e      	mov	lr, r3
 800898a:	0ff3      	lsrs	r3, r6, #31
 800898c:	4629      	mov	r1, r5
 800898e:	465a      	mov	r2, fp
 8008990:	4638      	mov	r0, r7
 8008992:	45f1      	cmp	r9, lr
 8008994:	bfd8      	it	le
 8008996:	f043 0301 	orrle.w	r3, r3, #1
 800899a:	b91b      	cbnz	r3, 80089a4 <forward_lite_conv2d_sssa8_ch+0x2f4>
 800899c:	f1b8 0f00 	cmp.w	r8, #0
 80089a0:	f000 8144 	beq.w	8008c2c <forward_lite_conv2d_sssa8_ch+0x57c>
 80089a4:	f002 fb62 	bl	800b06c <arm_fill_q15>
 80089a8:	3601      	adds	r6, #1
 80089aa:	4455      	add	r5, sl
 80089ac:	b236      	sxth	r6, r6
 80089ae:	42a6      	cmp	r6, r4
 80089b0:	46b6      	mov	lr, r6
 80089b2:	dbea      	blt.n	800898a <forward_lite_conv2d_sssa8_ch+0x2da>
 80089b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80089b6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80089b8:	3201      	adds	r2, #1
 80089ba:	b213      	sxth	r3, r2
 80089bc:	428b      	cmp	r3, r1
 80089be:	461a      	mov	r2, r3
 80089c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80089c2:	dbce      	blt.n	8008962 <forward_lite_conv2d_sssa8_ch+0x2b2>
 80089c4:	46d8      	mov	r8, fp
 80089c6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80089c8:	42ab      	cmp	r3, r5
 80089ca:	f000 80a6 	beq.w	8008b1a <forward_lite_conv2d_sssa8_ch+0x46a>
 80089ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80089d0:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80089d2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80089d4:	440b      	add	r3, r1
 80089d6:	3201      	adds	r2, #1
 80089d8:	b29b      	uxth	r3, r3
 80089da:	b212      	sxth	r2, r2
 80089dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80089de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80089e0:	920c      	str	r2, [sp, #48]	@ 0x30
 80089e2:	429a      	cmp	r2, r3
 80089e4:	9216      	str	r2, [sp, #88]	@ 0x58
 80089e6:	db99      	blt.n	800891c <forward_lite_conv2d_sssa8_ch+0x26c>
 80089e8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80089ea:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80089ec:	9c27      	ldr	r4, [sp, #156]	@ 0x9c
 80089ee:	4413      	add	r3, r2
 80089f0:	3401      	adds	r4, #1
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	b224      	sxth	r4, r4
 80089f6:	9321      	str	r3, [sp, #132]	@ 0x84
 80089f8:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80089fa:	4626      	mov	r6, r4
 80089fc:	429c      	cmp	r4, r3
 80089fe:	f6ff af73 	blt.w	80088e8 <forward_lite_conv2d_sssa8_ch+0x238>
 8008a02:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8008a04:	ee18 ba90 	vmov	fp, s17
 8008a08:	42a9      	cmp	r1, r5
 8008a0a:	d017      	beq.n	8008a3c <forward_lite_conv2d_sssa8_ch+0x38c>
 8008a0c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8008a0e:	ee1a 2a10 	vmov	r2, s20
 8008a12:	ee19 0a90 	vmov	r0, s19
 8008a16:	9307      	str	r3, [sp, #28]
 8008a18:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8008a1a:	9306      	str	r3, [sp, #24]
 8008a1c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008a1e:	9305      	str	r3, [sp, #20]
 8008a20:	9b77      	ldr	r3, [sp, #476]	@ 0x1dc
 8008a22:	9304      	str	r3, [sp, #16]
 8008a24:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008a26:	9303      	str	r3, [sp, #12]
 8008a28:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8008a2a:	9302      	str	r3, [sp, #8]
 8008a2c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8008a2e:	9301      	str	r3, [sp, #4]
 8008a30:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008a32:	9300      	str	r3, [sp, #0]
 8008a34:	ee19 3a10 	vmov	r3, s18
 8008a38:	f002 f8da 	bl	800abf0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 8008a3c:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8008a3e:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8008a40:	1a9b      	subs	r3, r3, r2
 8008a42:	b299      	uxth	r1, r3
 8008a44:	4613      	mov	r3, r2
 8008a46:	428a      	cmp	r2, r1
 8008a48:	912f      	str	r1, [sp, #188]	@ 0xbc
 8008a4a:	bf28      	it	cs
 8008a4c:	460b      	movcs	r3, r1
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	f000 811e 	beq.w	8008c90 <forward_lite_conv2d_sssa8_ch+0x5e0>
 8008a54:	9966      	ldr	r1, [sp, #408]	@ 0x198
 8008a56:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8008a58:	fb00 1102 	mla	r1, r0, r2, r1
 8008a5c:	9166      	str	r1, [sp, #408]	@ 0x198
 8008a5e:	ee1a 1a10 	vmov	r1, s20
 8008a62:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008a66:	ee0a 1a10 	vmov	s20, r1
 8008a6a:	9922      	ldr	r1, [sp, #136]	@ 0x88
 8008a6c:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8008a70:	9122      	str	r1, [sp, #136]	@ 0x88
 8008a72:	9977      	ldr	r1, [sp, #476]	@ 0x1dc
 8008a74:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008a78:	9177      	str	r1, [sp, #476]	@ 0x1dc
 8008a7a:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8008a7c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008a80:	9123      	str	r1, [sp, #140]	@ 0x8c
 8008a82:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 8008a84:	2900      	cmp	r1, #0
 8008a86:	f000 8115 	beq.w	8008cb4 <forward_lite_conv2d_sssa8_ch+0x604>
 8008a8a:	9972      	ldr	r1, [sp, #456]	@ 0x1c8
 8008a8c:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8008a8e:	931f      	str	r3, [sp, #124]	@ 0x7c
 8008a90:	fb00 1202 	mla	r2, r0, r2, r1
 8008a94:	9272      	str	r2, [sp, #456]	@ 0x1c8
 8008a96:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8008a98:	1e53      	subs	r3, r2, #1
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	2a00      	cmp	r2, #0
 8008a9e:	f000 80fe 	beq.w	8008c9e <forward_lite_conv2d_sssa8_ch+0x5ee>
 8008aa2:	932d      	str	r3, [sp, #180]	@ 0xb4
 8008aa4:	e700      	b.n	80088a8 <forward_lite_conv2d_sssa8_ch+0x1f8>
 8008aa6:	45ae      	cmp	lr, r5
 8008aa8:	f841 4c04 	str.w	r4, [r1, #-4]
 8008aac:	f101 0104 	add.w	r1, r1, #4
 8008ab0:	f47f ae68 	bne.w	8008784 <forward_lite_conv2d_sssa8_ch+0xd4>
 8008ab4:	e679      	b.n	80087aa <forward_lite_conv2d_sssa8_ch+0xfa>
 8008ab6:	1c5a      	adds	r2, r3, #1
 8008ab8:	932d      	str	r3, [sp, #180]	@ 0xb4
 8008aba:	b293      	uxth	r3, r2
 8008abc:	e6d3      	b.n	8008866 <forward_lite_conv2d_sssa8_ch+0x1b6>
 8008abe:	469c      	mov	ip, r3
 8008ac0:	461e      	mov	r6, r3
 8008ac2:	45e1      	cmp	r9, ip
 8008ac4:	465a      	mov	r2, fp
 8008ac6:	4629      	mov	r1, r5
 8008ac8:	4638      	mov	r0, r7
 8008aca:	bfcc      	ite	gt
 8008acc:	2300      	movgt	r3, #0
 8008ace:	2301      	movle	r3, #1
 8008ad0:	ea53 73d6 	orrs.w	r3, r3, r6, lsr #31
 8008ad4:	d103      	bne.n	8008ade <forward_lite_conv2d_sssa8_ch+0x42e>
 8008ad6:	f1b8 0f00 	cmp.w	r8, #0
 8008ada:	f000 809e 	beq.w	8008c1a <forward_lite_conv2d_sssa8_ch+0x56a>
 8008ade:	f002 fac5 	bl	800b06c <arm_fill_q15>
 8008ae2:	3601      	adds	r6, #1
 8008ae4:	4455      	add	r5, sl
 8008ae6:	b236      	sxth	r6, r6
 8008ae8:	42a6      	cmp	r6, r4
 8008aea:	46b4      	mov	ip, r6
 8008aec:	dbe9      	blt.n	8008ac2 <forward_lite_conv2d_sssa8_ch+0x412>
 8008aee:	e761      	b.n	80089b4 <forward_lite_conv2d_sssa8_ch+0x304>
 8008af0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d13d      	bne.n	8008b72 <forward_lite_conv2d_sssa8_ch+0x4c2>
 8008af6:	9b42      	ldr	r3, [sp, #264]	@ 0x108
 8008af8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008afa:	3b01      	subs	r3, #1
 8008afc:	9342      	str	r3, [sp, #264]	@ 0x108
 8008afe:	2301      	movs	r3, #1
 8008b00:	f8ad 3126 	strh.w	r3, [sp, #294]	@ 0x126
 8008b04:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008b06:	4293      	cmp	r3, r2
 8008b08:	f6ff af16 	blt.w	8008938 <forward_lite_conv2d_sssa8_ch+0x288>
 8008b0c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 8008b10:	9310      	str	r3, [sp, #64]	@ 0x40
 8008b12:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8008b14:	42ab      	cmp	r3, r5
 8008b16:	f47f af5a 	bne.w	80089ce <forward_lite_conv2d_sssa8_ch+0x31e>
 8008b1a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	f040 808e 	bne.w	8008c3e <forward_lite_conv2d_sssa8_ch+0x58e>
 8008b22:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	f000 808a 	beq.w	8008c3e <forward_lite_conv2d_sssa8_ch+0x58e>
 8008b2a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8008b2c:	ee1a 2a10 	vmov	r2, s20
 8008b30:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8008b32:	ee19 0a90 	vmov	r0, s19
 8008b36:	9308      	str	r3, [sp, #32]
 8008b38:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8008b3a:	9307      	str	r3, [sp, #28]
 8008b3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008b3e:	9306      	str	r3, [sp, #24]
 8008b40:	9b77      	ldr	r3, [sp, #476]	@ 0x1dc
 8008b42:	9305      	str	r3, [sp, #20]
 8008b44:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008b46:	9304      	str	r3, [sp, #16]
 8008b48:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8008b4a:	9303      	str	r3, [sp, #12]
 8008b4c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8008b4e:	9302      	str	r3, [sp, #8]
 8008b50:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008b52:	9300      	str	r3, [sp, #0]
 8008b54:	2302      	movs	r3, #2
 8008b56:	9301      	str	r3, [sp, #4]
 8008b58:	ee19 3a10 	vmov	r3, s18
 8008b5c:	f001 fc5e 	bl	800a41c <st_sssa8_ch_nn_mat_mult_kernel_opt>
 8008b60:	901b      	str	r0, [sp, #108]	@ 0x6c
 8008b62:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008b64:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008b66:	3b01      	subs	r3, #1
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	f000 8089 	beq.w	8008c80 <forward_lite_conv2d_sssa8_ch+0x5d0>
 8008b6e:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008b70:	e72d      	b.n	80089ce <forward_lite_conv2d_sssa8_ch+0x31e>
 8008b72:	3b01      	subs	r3, #1
 8008b74:	9341      	str	r3, [sp, #260]	@ 0x104
 8008b76:	f8bd 3124 	ldrh.w	r3, [sp, #292]	@ 0x124
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	f8ad 3126 	strh.w	r3, [sp, #294]	@ 0x126
 8008b80:	f43f aed5 	beq.w	800892e <forward_lite_conv2d_sssa8_ch+0x27e>
 8008b84:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 8008b88:	f9bd 402c 	ldrsh.w	r4, [sp, #44]	@ 0x2c
 8008b8c:	9310      	str	r3, [sp, #64]	@ 0x40
 8008b8e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b90:	bb0b      	cbnz	r3, 8008bd6 <forward_lite_conv2d_sssa8_ch+0x526>
 8008b92:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008b94:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008b96:	428b      	cmp	r3, r1
 8008b98:	f6bf af15 	bge.w	80089c6 <forward_lite_conv2d_sssa8_ch+0x316>
 8008b9c:	46ab      	mov	fp, r5
 8008b9e:	464f      	mov	r7, r9
 8008ba0:	4625      	mov	r5, r4
 8008ba2:	461e      	mov	r6, r3
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	ee18 2a90 	vmov	r2, s17
 8008baa:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8008bac:	4689      	mov	r9, r1
 8008bae:	f8dd a044 	ldr.w	sl, [sp, #68]	@ 0x44
 8008bb2:	3601      	adds	r6, #1
 8008bb4:	fb00 5007 	mla	r0, r0, r7, r5
 8008bb8:	4659      	mov	r1, fp
 8008bba:	920a      	str	r2, [sp, #40]	@ 0x28
 8008bbc:	b236      	sxth	r6, r6
 8008bbe:	fb08 a000 	mla	r0, r8, r0, sl
 8008bc2:	f001 f9cf 	bl	8009f64 <st_int8_to16_no_shift_interleaved>
 8008bc6:	44a3      	add	fp, r4
 8008bc8:	454e      	cmp	r6, r9
 8008bca:	4630      	mov	r0, r6
 8008bcc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008bce:	dbf0      	blt.n	8008bb2 <forward_lite_conv2d_sssa8_ch+0x502>
 8008bd0:	465d      	mov	r5, fp
 8008bd2:	46b9      	mov	r9, r7
 8008bd4:	e6f7      	b.n	80089c6 <forward_lite_conv2d_sssa8_ch+0x316>
 8008bd6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008bd8:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008bda:	428b      	cmp	r3, r1
 8008bdc:	f6bf aef3 	bge.w	80089c6 <forward_lite_conv2d_sssa8_ch+0x316>
 8008be0:	46ab      	mov	fp, r5
 8008be2:	464f      	mov	r7, r9
 8008be4:	4625      	mov	r5, r4
 8008be6:	461e      	mov	r6, r3
 8008be8:	4618      	mov	r0, r3
 8008bea:	ee18 2a90 	vmov	r2, s17
 8008bee:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8008bf0:	4689      	mov	r9, r1
 8008bf2:	f8dd a044 	ldr.w	sl, [sp, #68]	@ 0x44
 8008bf6:	3601      	adds	r6, #1
 8008bf8:	fb00 5007 	mla	r0, r0, r7, r5
 8008bfc:	4659      	mov	r1, fp
 8008bfe:	920a      	str	r2, [sp, #40]	@ 0x28
 8008c00:	b236      	sxth	r6, r6
 8008c02:	fb08 a000 	mla	r0, r8, r0, sl
 8008c06:	f001 f94b 	bl	8009ea0 <st_int8_to16_no_shift>
 8008c0a:	44a3      	add	fp, r4
 8008c0c:	454e      	cmp	r6, r9
 8008c0e:	4630      	mov	r0, r6
 8008c10:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008c12:	dbf0      	blt.n	8008bf6 <forward_lite_conv2d_sssa8_ch+0x546>
 8008c14:	465d      	mov	r5, fp
 8008c16:	46b9      	mov	r9, r7
 8008c18:	e6d5      	b.n	80089c6 <forward_lite_conv2d_sssa8_ch+0x316>
 8008c1a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008c1c:	eb03 000c 	add.w	r0, r3, ip
 8008c20:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008c22:	fb0b 3000 	mla	r0, fp, r0, r3
 8008c26:	f001 f99d 	bl	8009f64 <st_int8_to16_no_shift_interleaved>
 8008c2a:	e75a      	b.n	8008ae2 <forward_lite_conv2d_sssa8_ch+0x432>
 8008c2c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008c2e:	eb03 000e 	add.w	r0, r3, lr
 8008c32:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008c34:	fb0b 3000 	mla	r0, fp, r0, r3
 8008c38:	f001 f932 	bl	8009ea0 <st_int8_to16_no_shift>
 8008c3c:	e6b4      	b.n	80089a8 <forward_lite_conv2d_sssa8_ch+0x2f8>
 8008c3e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8008c40:	ee1a 2a10 	vmov	r2, s20
 8008c44:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8008c46:	ee19 0a90 	vmov	r0, s19
 8008c4a:	9308      	str	r3, [sp, #32]
 8008c4c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8008c4e:	9307      	str	r3, [sp, #28]
 8008c50:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008c52:	9306      	str	r3, [sp, #24]
 8008c54:	9b77      	ldr	r3, [sp, #476]	@ 0x1dc
 8008c56:	9305      	str	r3, [sp, #20]
 8008c58:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008c5a:	9304      	str	r3, [sp, #16]
 8008c5c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8008c5e:	9303      	str	r3, [sp, #12]
 8008c60:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8008c62:	9302      	str	r3, [sp, #8]
 8008c64:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008c66:	9300      	str	r3, [sp, #0]
 8008c68:	2300      	movs	r3, #0
 8008c6a:	9301      	str	r3, [sp, #4]
 8008c6c:	ee19 3a10 	vmov	r3, s18
 8008c70:	f001 fbd4 	bl	800a41c <st_sssa8_ch_nn_mat_mult_kernel_opt>
 8008c74:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8008c76:	901b      	str	r0, [sp, #108]	@ 0x6c
 8008c78:	2b03      	cmp	r3, #3
 8008c7a:	f47f af78 	bne.w	8008b6e <forward_lite_conv2d_sssa8_ch+0x4be>
 8008c7e:	e770      	b.n	8008b62 <forward_lite_conv2d_sssa8_ch+0x4b2>
 8008c80:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8008c82:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008c84:	3302      	adds	r3, #2
 8008c86:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008c88:	e6a1      	b.n	80089ce <forward_lite_conv2d_sssa8_ch+0x31e>
 8008c8a:	b2a3      	uxth	r3, r4
 8008c8c:	9327      	str	r3, [sp, #156]	@ 0x9c
 8008c8e:	e6ab      	b.n	80089e8 <forward_lite_conv2d_sssa8_ch+0x338>
 8008c90:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8008c92:	931f      	str	r3, [sp, #124]	@ 0x7c
 8008c94:	1e53      	subs	r3, r2, #1
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	2a00      	cmp	r2, #0
 8008c9a:	f47f af02 	bne.w	8008aa2 <forward_lite_conv2d_sssa8_ch+0x3f2>
 8008c9e:	b055      	add	sp, #340	@ 0x154
 8008ca0:	ecbd 8b08 	vpop	{d8-d11}
 8008ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ca8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008caa:	9a72      	ldr	r2, [sp, #456]	@ 0x1c8
 8008cac:	3303      	adds	r3, #3
 8008cae:	18d3      	adds	r3, r2, r3
 8008cb0:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008cb2:	e60c      	b.n	80088ce <forward_lite_conv2d_sssa8_ch+0x21e>
 8008cb4:	4611      	mov	r1, r2
 8008cb6:	9a72      	ldr	r2, [sp, #456]	@ 0x1c8
 8008cb8:	931f      	str	r3, [sp, #124]	@ 0x7c
 8008cba:	440a      	add	r2, r1
 8008cbc:	9272      	str	r2, [sp, #456]	@ 0x1c8
 8008cbe:	e6ea      	b.n	8008a96 <forward_lite_conv2d_sssa8_ch+0x3e6>
 8008cc0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8008cc2:	ee19 1a90 	vmov	r1, s19
 8008cc6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008cc8:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8008cca:	f001 f98f 	bl	8009fec <st_int8_to16_dual>
 8008cce:	e5f8      	b.n	80088c2 <forward_lite_conv2d_sssa8_ch+0x212>
 8008cd0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008cd2:	ee19 1a10 	vmov	r1, s18
 8008cd6:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8008cd8:	fb02 f303 	mul.w	r3, r2, r3
 8008cdc:	9a72      	ldr	r2, [sp, #456]	@ 0x1c8
 8008cde:	fb01 2303 	mla	r3, r1, r3, r2
 8008ce2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	f4bf ada7 	bcs.w	8008838 <forward_lite_conv2d_sssa8_ch+0x188>
 8008cea:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008cec:	fb03 f309 	mul.w	r3, r3, r9
 8008cf0:	fb0a 2303 	mla	r3, sl, r3, r2
 8008cf4:	9a72      	ldr	r2, [sp, #456]	@ 0x1c8
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	f4bf ad9e 	bcs.w	8008838 <forward_lite_conv2d_sssa8_ch+0x188>
 8008cfc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8008cfe:	fbb4 f3f3 	udiv	r3, r4, r3
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	4619      	mov	r1, r3
 8008d06:	ee19 3a10 	vmov	r3, s18
 8008d0a:	4299      	cmp	r1, r3
 8008d0c:	bf28      	it	cs
 8008d0e:	4619      	movcs	r1, r3
 8008d10:	fbb3 f2f1 	udiv	r2, r3, r1
 8008d14:	fb01 3312 	mls	r3, r1, r2, r3
 8008d18:	b292      	uxth	r2, r2
 8008d1a:	9131      	str	r1, [sp, #196]	@ 0xc4
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	922f      	str	r2, [sp, #188]	@ 0xbc
 8008d20:	b11b      	cbz	r3, 8008d2a <forward_lite_conv2d_sssa8_ch+0x67a>
 8008d22:	4613      	mov	r3, r2
 8008d24:	3301      	adds	r3, #1
 8008d26:	b29b      	uxth	r3, r3
 8008d28:	932f      	str	r3, [sp, #188]	@ 0xbc
 8008d2a:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d0b6      	beq.n	8008c9e <forward_lite_conv2d_sssa8_ch+0x5ee>
 8008d30:	fb0a f505 	mul.w	r5, sl, r5
 8008d34:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d36:	fa0f f788 	sxth.w	r7, r8
 8008d3a:	2400      	movs	r4, #0
 8008d3c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8008d40:	ea4f 084a 	mov.w	r8, sl, lsl #1
 8008d44:	4625      	mov	r5, r4
 8008d46:	9316      	str	r3, [sp, #88]	@ 0x58
 8008d48:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8008d4a:	f8cd 80b0 	str.w	r8, [sp, #176]	@ 0xb0
 8008d4e:	46d0      	mov	r8, sl
 8008d50:	3b01      	subs	r3, #1
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	9333      	str	r3, [sp, #204]	@ 0xcc
 8008d56:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8008d58:	425b      	negs	r3, r3
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	9330      	str	r3, [sp, #192]	@ 0xc0
 8008d5e:	f00a 0303 	and.w	r3, sl, #3
 8008d62:	930d      	str	r3, [sp, #52]	@ 0x34
 8008d64:	ea4f 034b 	mov.w	r3, fp, lsl #1
 8008d68:	9317      	str	r3, [sp, #92]	@ 0x5c
 8008d6a:	a840      	add	r0, sp, #256	@ 0x100
 8008d6c:	f001 fb3c 	bl	800a3e8 <ai_padding_opt_phase1>
 8008d70:	ee19 3a10 	vmov	r3, s18
 8008d74:	9a72      	ldr	r2, [sp, #456]	@ 0x1c8
 8008d76:	fb05 f303 	mul.w	r3, r5, r3
 8008d7a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8008d7c:	fb01 2303 	mla	r3, r1, r3, r2
 8008d80:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008d82:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8008d84:	b953      	cbnz	r3, 8008d9c <forward_lite_conv2d_sssa8_ch+0x6ec>
 8008d86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	f040 81ea 	bne.w	8009162 <forward_lite_conv2d_sssa8_ch+0xab2>
 8008d8e:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8008d90:	ee19 1a90 	vmov	r1, s19
 8008d94:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008d96:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8008d98:	f001 fa12 	bl	800a1c0 <st_int8_to16_dual_interleaved>
 8008d9c:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	f000 81ea 	beq.w	8009178 <forward_lite_conv2d_sssa8_ch+0xac8>
 8008da4:	b2a3      	uxth	r3, r4
 8008da6:	eef0 aa4a 	vmov.f32	s21, s20
 8008daa:	ee08 ba90 	vmov	s17, fp
 8008dae:	ee0b 7a10 	vmov	s22, r7
 8008db2:	9332      	str	r3, [sp, #200]	@ 0xc8
 8008db4:	ed8d 9a28 	vstr	s18, [sp, #160]	@ 0xa0
 8008db8:	e9dd 322a 	ldrd	r3, r2, [sp, #168]	@ 0xa8
 8008dbc:	1a9b      	subs	r3, r3, r2
 8008dbe:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008dc0:	fb05 3302 	mla	r3, r5, r2, r3
 8008dc4:	930c      	str	r3, [sp, #48]	@ 0x30
 8008dc6:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	@ 0xc0
 8008dca:	9315      	str	r3, [sp, #84]	@ 0x54
 8008dcc:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 8008dce:	9327      	str	r3, [sp, #156]	@ 0x9c
 8008dd0:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8008dd2:	931a      	str	r3, [sp, #104]	@ 0x68
 8008dd4:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8008dd6:	932d      	str	r3, [sp, #180]	@ 0xb4
 8008dd8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008dda:	931f      	str	r3, [sp, #124]	@ 0x7c
 8008ddc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008dde:	9326      	str	r3, [sp, #152]	@ 0x98
 8008de0:	9b77      	ldr	r3, [sp, #476]	@ 0x1dc
 8008de2:	9321      	str	r3, [sp, #132]	@ 0x84
 8008de4:	9a44      	ldr	r2, [sp, #272]	@ 0x110
 8008de6:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8008de8:	9241      	str	r2, [sp, #260]	@ 0x104
 8008dea:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008dec:	9340      	str	r3, [sp, #256]	@ 0x100
 8008dee:	9242      	str	r2, [sp, #264]	@ 0x108
 8008df0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008df2:	2a00      	cmp	r2, #0
 8008df4:	f000 815e 	beq.w	80090b4 <forward_lite_conv2d_sssa8_ch+0xa04>
 8008df8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008dfa:	2100      	movs	r1, #0
 8008dfc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008dfe:	4252      	negs	r2, r2
 8008e00:	b292      	uxth	r2, r2
 8008e02:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008e04:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008e06:	9218      	str	r2, [sp, #96]	@ 0x60
 8008e08:	460a      	mov	r2, r1
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d060      	beq.n	8008ed0 <forward_lite_conv2d_sssa8_ch+0x820>
 8008e0e:	3b01      	subs	r3, #1
 8008e10:	9340      	str	r3, [sp, #256]	@ 0x100
 8008e12:	2301      	movs	r3, #1
 8008e14:	f8ad 3126 	strh.w	r3, [sp, #294]	@ 0x126
 8008e18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008e1a:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8008e1c:	4283      	cmp	r3, r0
 8008e1e:	dd64      	ble.n	8008eea <forward_lite_conv2d_sssa8_ch+0x83a>
 8008e20:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8008e22:	46c3      	mov	fp, r8
 8008e24:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8008e26:	ee1b 7a10 	vmov	r7, s22
 8008e2a:	f8dd a0b0 	ldr.w	sl, [sp, #176]	@ 0xb0
 8008e2e:	fb02 3200 	mla	r2, r2, r0, r3
 8008e32:	b28b      	uxth	r3, r1
 8008e34:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008e36:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008e38:	1ad5      	subs	r5, r2, r3
 8008e3a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8008e3e:	930e      	str	r3, [sp, #56]	@ 0x38
 8008e40:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008e42:	461a      	mov	r2, r3
 8008e44:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e48:	429d      	cmp	r5, r3
 8008e4a:	dd25      	ble.n	8008e98 <forward_lite_conv2d_sssa8_ch+0x7e8>
 8008e4c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008e4e:	ea4f 78d1 	mov.w	r8, r1, lsr #31
 8008e52:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008e54:	4291      	cmp	r1, r2
 8008e56:	bfd8      	it	le
 8008e58:	f048 0801 	orrle.w	r8, r8, #1
 8008e5c:	fb02 f209 	mul.w	r2, r2, r9
 8008e60:	9210      	str	r2, [sp, #64]	@ 0x40
 8008e62:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008e64:	2a00      	cmp	r2, #0
 8008e66:	f000 808c 	beq.w	8008f82 <forward_lite_conv2d_sssa8_ch+0x8d2>
 8008e6a:	461e      	mov	r6, r3
 8008e6c:	469e      	mov	lr, r3
 8008e6e:	0ff3      	lsrs	r3, r6, #31
 8008e70:	4621      	mov	r1, r4
 8008e72:	465a      	mov	r2, fp
 8008e74:	4638      	mov	r0, r7
 8008e76:	45f1      	cmp	r9, lr
 8008e78:	bfd8      	it	le
 8008e7a:	f043 0301 	orrle.w	r3, r3, #1
 8008e7e:	b91b      	cbnz	r3, 8008e88 <forward_lite_conv2d_sssa8_ch+0x7d8>
 8008e80:	f1b8 0f00 	cmp.w	r8, #0
 8008e84:	f000 80e8 	beq.w	8009058 <forward_lite_conv2d_sssa8_ch+0x9a8>
 8008e88:	f002 f8f0 	bl	800b06c <arm_fill_q15>
 8008e8c:	3601      	adds	r6, #1
 8008e8e:	4454      	add	r4, sl
 8008e90:	b236      	sxth	r6, r6
 8008e92:	42b5      	cmp	r5, r6
 8008e94:	46b6      	mov	lr, r6
 8008e96:	dcea      	bgt.n	8008e6e <forward_lite_conv2d_sssa8_ch+0x7be>
 8008e98:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008e9a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008e9c:	3201      	adds	r2, #1
 8008e9e:	b213      	sxth	r3, r2
 8008ea0:	428b      	cmp	r3, r1
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ea6:	dbce      	blt.n	8008e46 <forward_lite_conv2d_sssa8_ch+0x796>
 8008ea8:	46d8      	mov	r8, fp
 8008eaa:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008eac:	42a3      	cmp	r3, r4
 8008eae:	d021      	beq.n	8008ef4 <forward_lite_conv2d_sssa8_ch+0x844>
 8008eb0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008eb2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008eb4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008eb6:	4413      	add	r3, r2
 8008eb8:	3101      	adds	r1, #1
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	b209      	sxth	r1, r1
 8008ebe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ec0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008ec2:	460a      	mov	r2, r1
 8008ec4:	4299      	cmp	r1, r3
 8008ec6:	f280 80d9 	bge.w	800907c <forward_lite_conv2d_sssa8_ch+0x9cc>
 8008eca:	9b40      	ldr	r3, [sp, #256]	@ 0x100
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d19e      	bne.n	8008e0e <forward_lite_conv2d_sssa8_ch+0x75e>
 8008ed0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d16d      	bne.n	8008fb2 <forward_lite_conv2d_sssa8_ch+0x902>
 8008ed6:	9b42      	ldr	r3, [sp, #264]	@ 0x108
 8008ed8:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8008eda:	3b01      	subs	r3, #1
 8008edc:	9342      	str	r3, [sp, #264]	@ 0x108
 8008ede:	2301      	movs	r3, #1
 8008ee0:	f8ad 3126 	strh.w	r3, [sp, #294]	@ 0x126
 8008ee4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008ee6:	4283      	cmp	r3, r0
 8008ee8:	dc9a      	bgt.n	8008e20 <forward_lite_conv2d_sssa8_ch+0x770>
 8008eea:	b28b      	uxth	r3, r1
 8008eec:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008eee:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008ef0:	42a3      	cmp	r3, r4
 8008ef2:	d1dd      	bne.n	8008eb0 <forward_lite_conv2d_sssa8_ch+0x800>
 8008ef4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8008ef6:	ee1a 2a90 	vmov	r2, s21
 8008efa:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8008efc:	ee19 0a90 	vmov	r0, s19
 8008f00:	9308      	str	r3, [sp, #32]
 8008f02:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8008f04:	9307      	str	r3, [sp, #28]
 8008f06:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8008f08:	9306      	str	r3, [sp, #24]
 8008f0a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008f0c:	9305      	str	r3, [sp, #20]
 8008f0e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8008f10:	9304      	str	r3, [sp, #16]
 8008f12:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8008f14:	9303      	str	r3, [sp, #12]
 8008f16:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8008f18:	9302      	str	r3, [sp, #8]
 8008f1a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008f1c:	9300      	str	r3, [sp, #0]
 8008f1e:	2300      	movs	r3, #0
 8008f20:	9301      	str	r3, [sp, #4]
 8008f22:	ee19 3a10 	vmov	r3, s18
 8008f26:	f001 fa79 	bl	800a41c <st_sssa8_ch_nn_mat_mult_kernel_opt>
 8008f2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f2c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008f2e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008f30:	4413      	add	r3, r2
 8008f32:	9018      	str	r0, [sp, #96]	@ 0x60
 8008f34:	3101      	adds	r1, #1
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	b209      	sxth	r1, r1
 8008f3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f3c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008f3e:	460a      	mov	r2, r1
 8008f40:	428b      	cmp	r3, r1
 8008f42:	f340 80b7 	ble.w	80090b4 <forward_lite_conv2d_sssa8_ch+0xa04>
 8008f46:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008f48:	e7bf      	b.n	8008eca <forward_lite_conv2d_sssa8_ch+0x81a>
 8008f4a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008f4c:	ee19 1a10 	vmov	r1, s18
 8008f50:	fb01 f302 	mul.w	r3, r1, r2
 8008f54:	42a3      	cmp	r3, r4
 8008f56:	f73f ac69 	bgt.w	800882c <forward_lite_conv2d_sssa8_ch+0x17c>
 8008f5a:	f01a 0f03 	tst.w	sl, #3
 8008f5e:	972e      	str	r7, [sp, #184]	@ 0xb8
 8008f60:	f040 810d 	bne.w	800917e <forward_lite_conv2d_sssa8_ch+0xace>
 8008f64:	ee19 3a10 	vmov	r3, s18
 8008f68:	ee19 1a90 	vmov	r1, s19
 8008f6c:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8008f6e:	f001 f927 	bl	800a1c0 <st_int8_to16_dual_interleaved>
 8008f72:	e45d      	b.n	8008830 <forward_lite_conv2d_sssa8_ch+0x180>
 8008f74:	4603      	mov	r3, r0
 8008f76:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 8008f78:	fb01 f303 	mul.w	r3, r1, r3
 8008f7c:	931d      	str	r3, [sp, #116]	@ 0x74
 8008f7e:	f7ff bbd6 	b.w	800872e <forward_lite_conv2d_sssa8_ch+0x7e>
 8008f82:	469c      	mov	ip, r3
 8008f84:	461e      	mov	r6, r3
 8008f86:	45e1      	cmp	r9, ip
 8008f88:	465a      	mov	r2, fp
 8008f8a:	4621      	mov	r1, r4
 8008f8c:	4638      	mov	r0, r7
 8008f8e:	bfcc      	ite	gt
 8008f90:	2300      	movgt	r3, #0
 8008f92:	2301      	movle	r3, #1
 8008f94:	ea53 73d6 	orrs.w	r3, r3, r6, lsr #31
 8008f98:	d102      	bne.n	8008fa0 <forward_lite_conv2d_sssa8_ch+0x8f0>
 8008f9a:	f1b8 0f00 	cmp.w	r8, #0
 8008f9e:	d064      	beq.n	800906a <forward_lite_conv2d_sssa8_ch+0x9ba>
 8008fa0:	f002 f864 	bl	800b06c <arm_fill_q15>
 8008fa4:	3601      	adds	r6, #1
 8008fa6:	4454      	add	r4, sl
 8008fa8:	b236      	sxth	r6, r6
 8008faa:	42ae      	cmp	r6, r5
 8008fac:	46b4      	mov	ip, r6
 8008fae:	dbea      	blt.n	8008f86 <forward_lite_conv2d_sssa8_ch+0x8d6>
 8008fb0:	e772      	b.n	8008e98 <forward_lite_conv2d_sssa8_ch+0x7e8>
 8008fb2:	3b01      	subs	r3, #1
 8008fb4:	9341      	str	r3, [sp, #260]	@ 0x104
 8008fb6:	f8bd 3124 	ldrh.w	r3, [sp, #292]	@ 0x124
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	f8ad 3126 	strh.w	r3, [sp, #294]	@ 0x126
 8008fc0:	f43f af2a 	beq.w	8008e18 <forward_lite_conv2d_sssa8_ch+0x768>
 8008fc4:	b28b      	uxth	r3, r1
 8008fc6:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	@ 0x2c
 8008fca:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008fcc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008fce:	bb0b      	cbnz	r3, 8009014 <forward_lite_conv2d_sssa8_ch+0x964>
 8008fd0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008fd2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	f77f af68 	ble.w	8008eaa <forward_lite_conv2d_sssa8_ch+0x7fa>
 8008fda:	4616      	mov	r6, r2
 8008fdc:	4610      	mov	r0, r2
 8008fde:	46a3      	mov	fp, r4
 8008fe0:	464f      	mov	r7, r9
 8008fe2:	462c      	mov	r4, r5
 8008fe4:	ee18 2a90 	vmov	r2, s17
 8008fe8:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 8008fea:	4699      	mov	r9, r3
 8008fec:	f8dd a044 	ldr.w	sl, [sp, #68]	@ 0x44
 8008ff0:	3601      	adds	r6, #1
 8008ff2:	fb00 4007 	mla	r0, r0, r7, r4
 8008ff6:	4659      	mov	r1, fp
 8008ff8:	920a      	str	r2, [sp, #40]	@ 0x28
 8008ffa:	b236      	sxth	r6, r6
 8008ffc:	fb08 a000 	mla	r0, r8, r0, sl
 8009000:	f000 ffb0 	bl	8009f64 <st_int8_to16_no_shift_interleaved>
 8009004:	44ab      	add	fp, r5
 8009006:	454e      	cmp	r6, r9
 8009008:	4630      	mov	r0, r6
 800900a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800900c:	dbf0      	blt.n	8008ff0 <forward_lite_conv2d_sssa8_ch+0x940>
 800900e:	465c      	mov	r4, fp
 8009010:	46b9      	mov	r9, r7
 8009012:	e74a      	b.n	8008eaa <forward_lite_conv2d_sssa8_ch+0x7fa>
 8009014:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009016:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009018:	4293      	cmp	r3, r2
 800901a:	f77f af46 	ble.w	8008eaa <forward_lite_conv2d_sssa8_ch+0x7fa>
 800901e:	4616      	mov	r6, r2
 8009020:	4610      	mov	r0, r2
 8009022:	46a3      	mov	fp, r4
 8009024:	464f      	mov	r7, r9
 8009026:	462c      	mov	r4, r5
 8009028:	ee18 2a90 	vmov	r2, s17
 800902c:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 800902e:	4699      	mov	r9, r3
 8009030:	f8dd a044 	ldr.w	sl, [sp, #68]	@ 0x44
 8009034:	3601      	adds	r6, #1
 8009036:	fb00 4007 	mla	r0, r0, r7, r4
 800903a:	4659      	mov	r1, fp
 800903c:	920a      	str	r2, [sp, #40]	@ 0x28
 800903e:	b236      	sxth	r6, r6
 8009040:	fb08 a000 	mla	r0, r8, r0, sl
 8009044:	f000 ff2c 	bl	8009ea0 <st_int8_to16_no_shift>
 8009048:	44ab      	add	fp, r5
 800904a:	454e      	cmp	r6, r9
 800904c:	4630      	mov	r0, r6
 800904e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009050:	dbf0      	blt.n	8009034 <forward_lite_conv2d_sssa8_ch+0x984>
 8009052:	465c      	mov	r4, fp
 8009054:	46b9      	mov	r9, r7
 8009056:	e728      	b.n	8008eaa <forward_lite_conv2d_sssa8_ch+0x7fa>
 8009058:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800905a:	eb03 000e 	add.w	r0, r3, lr
 800905e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009060:	fb0b 3000 	mla	r0, fp, r0, r3
 8009064:	f000 ff1c 	bl	8009ea0 <st_int8_to16_no_shift>
 8009068:	e710      	b.n	8008e8c <forward_lite_conv2d_sssa8_ch+0x7dc>
 800906a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800906c:	eb03 000c 	add.w	r0, r3, ip
 8009070:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009072:	fb0b 3000 	mla	r0, fp, r0, r3
 8009076:	f000 ff75 	bl	8009f64 <st_int8_to16_no_shift_interleaved>
 800907a:	e793      	b.n	8008fa4 <forward_lite_conv2d_sssa8_ch+0x8f4>
 800907c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800907e:	429c      	cmp	r4, r3
 8009080:	d018      	beq.n	80090b4 <forward_lite_conv2d_sssa8_ch+0xa04>
 8009082:	4619      	mov	r1, r3
 8009084:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8009086:	ee1a 2a90 	vmov	r2, s21
 800908a:	ee19 0a90 	vmov	r0, s19
 800908e:	9307      	str	r3, [sp, #28]
 8009090:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8009092:	9306      	str	r3, [sp, #24]
 8009094:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8009096:	9305      	str	r3, [sp, #20]
 8009098:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800909a:	9304      	str	r3, [sp, #16]
 800909c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800909e:	9303      	str	r3, [sp, #12]
 80090a0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80090a2:	9302      	str	r3, [sp, #8]
 80090a4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80090a6:	9301      	str	r3, [sp, #4]
 80090a8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80090aa:	9300      	str	r3, [sp, #0]
 80090ac:	ee19 3a10 	vmov	r3, s18
 80090b0:	f001 fd9e 	bl	800abf0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 80090b4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80090b6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80090b8:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 80090ba:	1a9b      	subs	r3, r3, r2
 80090bc:	4411      	add	r1, r2
 80090be:	911b      	str	r1, [sp, #108]	@ 0x6c
 80090c0:	b299      	uxth	r1, r3
 80090c2:	4613      	mov	r3, r2
 80090c4:	428a      	cmp	r2, r1
 80090c6:	9128      	str	r1, [sp, #160]	@ 0xa0
 80090c8:	bf28      	it	cs
 80090ca:	460b      	movcs	r3, r1
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d03e      	beq.n	8009150 <forward_lite_conv2d_sssa8_ch+0xaa0>
 80090d2:	ee1a 4a90 	vmov	r4, s21
 80090d6:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 80090d8:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80090da:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80090de:	fb01 0002 	mla	r0, r1, r2, r0
 80090e2:	ee0a 4a90 	vmov	s21, r4
 80090e6:	9c26      	ldr	r4, [sp, #152]	@ 0x98
 80090e8:	902d      	str	r0, [sp, #180]	@ 0xb4
 80090ea:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 80090ee:	9426      	str	r4, [sp, #152]	@ 0x98
 80090f0:	9c21      	ldr	r4, [sp, #132]	@ 0x84
 80090f2:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80090f6:	9421      	str	r4, [sp, #132]	@ 0x84
 80090f8:	9c1f      	ldr	r4, [sp, #124]	@ 0x7c
 80090fa:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80090fe:	921f      	str	r2, [sp, #124]	@ 0x7c
 8009100:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009102:	bb3a      	cbnz	r2, 8009154 <forward_lite_conv2d_sssa8_ch+0xaa4>
 8009104:	460a      	mov	r2, r1
 8009106:	ee19 1a90 	vmov	r1, s19
 800910a:	931a      	str	r3, [sp, #104]	@ 0x68
 800910c:	f001 f858 	bl	800a1c0 <st_int8_to16_dual_interleaved>
 8009110:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8009112:	3b01      	subs	r3, #1
 8009114:	b29b      	uxth	r3, r3
 8009116:	461a      	mov	r2, r3
 8009118:	9327      	str	r3, [sp, #156]	@ 0x9c
 800911a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800911e:	429a      	cmp	r2, r3
 8009120:	f47f ae60 	bne.w	8008de4 <forward_lite_conv2d_sssa8_ch+0x734>
 8009124:	ee18 ba90 	vmov	fp, s17
 8009128:	ee1b 7a10 	vmov	r7, s22
 800912c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 800912e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009130:	9c32      	ldr	r4, [sp, #200]	@ 0xc8
 8009132:	4413      	add	r3, r2
 8009134:	3401      	adds	r4, #1
 8009136:	b29b      	uxth	r3, r3
 8009138:	b224      	sxth	r4, r4
 800913a:	9330      	str	r3, [sp, #192]	@ 0xc0
 800913c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800913e:	4625      	mov	r5, r4
 8009140:	429c      	cmp	r4, r3
 8009142:	f6ff ae12 	blt.w	8008d6a <forward_lite_conv2d_sssa8_ch+0x6ba>
 8009146:	b055      	add	sp, #340	@ 0x154
 8009148:	ecbd 8b08 	vpop	{d8-d11}
 800914c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009150:	931a      	str	r3, [sp, #104]	@ 0x68
 8009152:	e7dd      	b.n	8009110 <forward_lite_conv2d_sssa8_ch+0xa60>
 8009154:	460a      	mov	r2, r1
 8009156:	ee19 1a90 	vmov	r1, s19
 800915a:	931a      	str	r3, [sp, #104]	@ 0x68
 800915c:	f000 ff46 	bl	8009fec <st_int8_to16_dual>
 8009160:	e7d6      	b.n	8009110 <forward_lite_conv2d_sssa8_ch+0xa60>
 8009162:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8009164:	ee19 1a90 	vmov	r1, s19
 8009168:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800916a:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800916c:	f000 ff3e 	bl	8009fec <st_int8_to16_dual>
 8009170:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8009172:	2b00      	cmp	r3, #0
 8009174:	f47f ae16 	bne.w	8008da4 <forward_lite_conv2d_sssa8_ch+0x6f4>
 8009178:	b2a3      	uxth	r3, r4
 800917a:	9332      	str	r3, [sp, #200]	@ 0xc8
 800917c:	e7d6      	b.n	800912c <forward_lite_conv2d_sssa8_ch+0xa7c>
 800917e:	ee19 3a10 	vmov	r3, s18
 8009182:	ee19 1a90 	vmov	r1, s19
 8009186:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8009188:	f000 ff30 	bl	8009fec <st_int8_to16_dual>
 800918c:	f7ff bb50 	b.w	8008830 <forward_lite_conv2d_sssa8_ch+0x180>

08009190 <forward_lite_maxpool_is8os8_scalepos>:
 8009190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009194:	b095      	sub	sp, #84	@ 0x54
 8009196:	4614      	mov	r4, r2
 8009198:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800919c:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 80091a0:	f99d 009c 	ldrsb.w	r0, [sp, #156]	@ 0x9c
 80091a4:	910d      	str	r1, [sp, #52]	@ 0x34
 80091a6:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 80091aa:	930c      	str	r3, [sp, #48]	@ 0x30
 80091ac:	910e      	str	r1, [sp, #56]	@ 0x38
 80091ae:	f8bd 1084 	ldrh.w	r1, [sp, #132]	@ 0x84
 80091b2:	f8bd 3098 	ldrh.w	r3, [sp, #152]	@ 0x98
 80091b6:	910f      	str	r1, [sp, #60]	@ 0x3c
 80091b8:	f8bd 1088 	ldrh.w	r1, [sp, #136]	@ 0x88
 80091bc:	9206      	str	r2, [sp, #24]
 80091be:	9110      	str	r1, [sp, #64]	@ 0x40
 80091c0:	f8bd 108c 	ldrh.w	r1, [sp, #140]	@ 0x8c
 80091c4:	f8bd a078 	ldrh.w	sl, [sp, #120]	@ 0x78
 80091c8:	9111      	str	r1, [sp, #68]	@ 0x44
 80091ca:	f8bd 1090 	ldrh.w	r1, [sp, #144]	@ 0x90
 80091ce:	f99d 20a0 	ldrsb.w	r2, [sp, #160]	@ 0xa0
 80091d2:	9112      	str	r1, [sp, #72]	@ 0x48
 80091d4:	f8bd 1094 	ldrh.w	r1, [sp, #148]	@ 0x94
 80091d8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80091da:	9107      	str	r1, [sp, #28]
 80091dc:	9003      	str	r0, [sp, #12]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	f000 8094 	beq.w	800930c <forward_lite_maxpool_is8os8_scalepos+0x17c>
 80091e4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80091e8:	eeb4 0a67 	vcmp.f32	s0, s15
 80091ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091f0:	bf0c      	ite	eq
 80091f2:	2301      	moveq	r3, #1
 80091f4:	2300      	movne	r3, #0
 80091f6:	4290      	cmp	r0, r2
 80091f8:	bf14      	ite	ne
 80091fa:	2300      	movne	r3, #0
 80091fc:	f003 0301 	andeq.w	r3, r3, #1
 8009200:	9301      	str	r3, [sp, #4]
 8009202:	2900      	cmp	r1, #0
 8009204:	f000 8082 	beq.w	800930c <forward_lite_maxpool_is8os8_scalepos+0x17c>
 8009208:	f1ba 0f00 	cmp.w	sl, #0
 800920c:	d07e      	beq.n	800930c <forward_lite_maxpool_is8os8_scalepos+0x17c>
 800920e:	ee07 2a90 	vmov	s15, r2
 8009212:	2300      	movs	r3, #0
 8009214:	ed9f 6a4e 	vldr	s12, [pc, #312]	@ 8009350 <forward_lite_maxpool_is8os8_scalepos+0x1c0>
 8009218:	fb04 fb0a 	mul.w	fp, r4, sl
 800921c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009220:	9304      	str	r3, [sp, #16]
 8009222:	9b04      	ldr	r3, [sp, #16]
 8009224:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8009228:	9907      	ldr	r1, [sp, #28]
 800922a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800922c:	fb03 f202 	mul.w	r2, r3, r2
 8009230:	fb03 f301 	mul.w	r3, r3, r1
 8009234:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8009236:	9308      	str	r3, [sp, #32]
 8009238:	2300      	movs	r3, #0
 800923a:	9305      	str	r3, [sp, #20]
 800923c:	1a53      	subs	r3, r2, r1
 800923e:	1a8a      	subs	r2, r1, r2
 8009240:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009242:	2b00      	cmp	r3, #0
 8009244:	eb02 0c01 	add.w	ip, r2, r1
 8009248:	bfd8      	it	le
 800924a:	4691      	movle	r9, r2
 800924c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800924e:	bfc8      	it	gt
 8009250:	f04f 0900 	movgt.w	r9, #0
 8009254:	4594      	cmp	ip, r2
 8009256:	444b      	add	r3, r9
 8009258:	bfa8      	it	ge
 800925a:	4694      	movge	ip, r2
 800925c:	9a06      	ldr	r2, [sp, #24]
 800925e:	fb02 f303 	mul.w	r3, r2, r3
 8009262:	9309      	str	r3, [sp, #36]	@ 0x24
 8009264:	9a05      	ldr	r2, [sp, #20]
 8009266:	f04f 0e00 	mov.w	lr, #0
 800926a:	9908      	ldr	r1, [sp, #32]
 800926c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800926e:	eb02 0801 	add.w	r8, r2, r1
 8009272:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009274:	fb03 f302 	mul.w	r3, r3, r2
 8009278:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800927a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 800927c:	fb0a 2808 	mla	r8, sl, r8, r2
 8009280:	1a5a      	subs	r2, r3, r1
 8009282:	1acb      	subs	r3, r1, r3
 8009284:	9906      	ldr	r1, [sp, #24]
 8009286:	2a00      	cmp	r2, #0
 8009288:	bfd8      	it	le
 800928a:	461f      	movle	r7, r3
 800928c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800928e:	bfc8      	it	gt
 8009290:	2700      	movgt	r7, #0
 8009292:	18d3      	adds	r3, r2, r3
 8009294:	1a8a      	subs	r2, r1, r2
 8009296:	4294      	cmp	r4, r2
 8009298:	443b      	add	r3, r7
 800929a:	bfa8      	it	ge
 800929c:	4614      	movge	r4, r2
 800929e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80092a0:	fb0a 2303 	mla	r3, sl, r3, r2
 80092a4:	9302      	str	r3, [sp, #8]
 80092a6:	45e1      	cmp	r9, ip
 80092a8:	da4e      	bge.n	8009348 <forward_lite_maxpool_is8os8_scalepos+0x1b8>
 80092aa:	9b02      	ldr	r3, [sp, #8]
 80092ac:	464d      	mov	r5, r9
 80092ae:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 80092b2:	eb03 060e 	add.w	r6, r3, lr
 80092b6:	42a7      	cmp	r7, r4
 80092b8:	da0a      	bge.n	80092d0 <forward_lite_maxpool_is8os8_scalepos+0x140>
 80092ba:	4632      	mov	r2, r6
 80092bc:	463b      	mov	r3, r7
 80092be:	f992 0000 	ldrsb.w	r0, [r2]
 80092c2:	3301      	adds	r3, #1
 80092c4:	4452      	add	r2, sl
 80092c6:	4281      	cmp	r1, r0
 80092c8:	bfb8      	it	lt
 80092ca:	4601      	movlt	r1, r0
 80092cc:	429c      	cmp	r4, r3
 80092ce:	d1f6      	bne.n	80092be <forward_lite_maxpool_is8os8_scalepos+0x12e>
 80092d0:	3501      	adds	r5, #1
 80092d2:	445e      	add	r6, fp
 80092d4:	45ac      	cmp	ip, r5
 80092d6:	d1ee      	bne.n	80092b6 <forward_lite_maxpool_is8os8_scalepos+0x126>
 80092d8:	9b01      	ldr	r3, [sp, #4]
 80092da:	b1d3      	cbz	r3, 8009312 <forward_lite_maxpool_is8os8_scalepos+0x182>
 80092dc:	f888 1000 	strb.w	r1, [r8]
 80092e0:	f10e 0e01 	add.w	lr, lr, #1
 80092e4:	f108 0801 	add.w	r8, r8, #1
 80092e8:	fa1f f38e 	uxth.w	r3, lr
 80092ec:	459a      	cmp	sl, r3
 80092ee:	d8da      	bhi.n	80092a6 <forward_lite_maxpool_is8os8_scalepos+0x116>
 80092f0:	9b05      	ldr	r3, [sp, #20]
 80092f2:	9a07      	ldr	r2, [sp, #28]
 80092f4:	3301      	adds	r3, #1
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	429a      	cmp	r2, r3
 80092fa:	9305      	str	r3, [sp, #20]
 80092fc:	d8b2      	bhi.n	8009264 <forward_lite_maxpool_is8os8_scalepos+0xd4>
 80092fe:	9b04      	ldr	r3, [sp, #16]
 8009300:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009302:	3301      	adds	r3, #1
 8009304:	b29b      	uxth	r3, r3
 8009306:	429a      	cmp	r2, r3
 8009308:	9304      	str	r3, [sp, #16]
 800930a:	d88a      	bhi.n	8009222 <forward_lite_maxpool_is8os8_scalepos+0x92>
 800930c:	b015      	add	sp, #84	@ 0x54
 800930e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009312:	9b03      	ldr	r3, [sp, #12]
 8009314:	eeb0 7a66 	vmov.f32	s14, s13
 8009318:	1ac9      	subs	r1, r1, r3
 800931a:	ee07 1a90 	vmov	s15, r1
 800931e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009322:	eea7 7a80 	vfma.f32	s14, s15, s0
 8009326:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800932a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800932e:	fe65 7a86 	vselge.f32	s15, s11, s12
 8009332:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009336:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800933a:	ee17 3a90 	vmov	r3, s15
 800933e:	f303 0307 	ssat	r3, #8, r3
 8009342:	f888 3000 	strb.w	r3, [r8]
 8009346:	e7cb      	b.n	80092e0 <forward_lite_maxpool_is8os8_scalepos+0x150>
 8009348:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 800934c:	e7c4      	b.n	80092d8 <forward_lite_maxpool_is8os8_scalepos+0x148>
 800934e:	bf00      	nop
 8009350:	befffffc 	.word	0xbefffffc

08009354 <forward_lite_maxpool_is8os8_scaleneg>:
 8009354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009358:	b095      	sub	sp, #84	@ 0x54
 800935a:	4614      	mov	r4, r2
 800935c:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8009360:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 8009364:	f99d 009c 	ldrsb.w	r0, [sp, #156]	@ 0x9c
 8009368:	910d      	str	r1, [sp, #52]	@ 0x34
 800936a:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 800936e:	930c      	str	r3, [sp, #48]	@ 0x30
 8009370:	910e      	str	r1, [sp, #56]	@ 0x38
 8009372:	f8bd 1084 	ldrh.w	r1, [sp, #132]	@ 0x84
 8009376:	f8bd 3098 	ldrh.w	r3, [sp, #152]	@ 0x98
 800937a:	910f      	str	r1, [sp, #60]	@ 0x3c
 800937c:	f8bd 1088 	ldrh.w	r1, [sp, #136]	@ 0x88
 8009380:	9206      	str	r2, [sp, #24]
 8009382:	9110      	str	r1, [sp, #64]	@ 0x40
 8009384:	f8bd 108c 	ldrh.w	r1, [sp, #140]	@ 0x8c
 8009388:	f8bd a078 	ldrh.w	sl, [sp, #120]	@ 0x78
 800938c:	9111      	str	r1, [sp, #68]	@ 0x44
 800938e:	f8bd 1090 	ldrh.w	r1, [sp, #144]	@ 0x90
 8009392:	f99d 20a0 	ldrsb.w	r2, [sp, #160]	@ 0xa0
 8009396:	9112      	str	r1, [sp, #72]	@ 0x48
 8009398:	f8bd 1094 	ldrh.w	r1, [sp, #148]	@ 0x94
 800939c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800939e:	9107      	str	r1, [sp, #28]
 80093a0:	9003      	str	r0, [sp, #12]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	f000 8093 	beq.w	80094ce <forward_lite_maxpool_is8os8_scaleneg+0x17a>
 80093a8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80093ac:	eeb4 0a67 	vcmp.f32	s0, s15
 80093b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093b4:	bf0c      	ite	eq
 80093b6:	2301      	moveq	r3, #1
 80093b8:	2300      	movne	r3, #0
 80093ba:	4290      	cmp	r0, r2
 80093bc:	bf14      	ite	ne
 80093be:	2300      	movne	r3, #0
 80093c0:	f003 0301 	andeq.w	r3, r3, #1
 80093c4:	9301      	str	r3, [sp, #4]
 80093c6:	2900      	cmp	r1, #0
 80093c8:	f000 8081 	beq.w	80094ce <forward_lite_maxpool_is8os8_scaleneg+0x17a>
 80093cc:	f1ba 0f00 	cmp.w	sl, #0
 80093d0:	d07d      	beq.n	80094ce <forward_lite_maxpool_is8os8_scaleneg+0x17a>
 80093d2:	ee07 2a90 	vmov	s15, r2
 80093d6:	2300      	movs	r3, #0
 80093d8:	ed9f 6a4d 	vldr	s12, [pc, #308]	@ 8009510 <forward_lite_maxpool_is8os8_scaleneg+0x1bc>
 80093dc:	fb04 fb0a 	mul.w	fp, r4, sl
 80093e0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80093e4:	9304      	str	r3, [sp, #16]
 80093e6:	9b04      	ldr	r3, [sp, #16]
 80093e8:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 80093ec:	9907      	ldr	r1, [sp, #28]
 80093ee:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80093f0:	fb03 f202 	mul.w	r2, r3, r2
 80093f4:	fb03 f301 	mul.w	r3, r3, r1
 80093f8:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80093fa:	9308      	str	r3, [sp, #32]
 80093fc:	2300      	movs	r3, #0
 80093fe:	9305      	str	r3, [sp, #20]
 8009400:	1a53      	subs	r3, r2, r1
 8009402:	1a8a      	subs	r2, r1, r2
 8009404:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009406:	2b00      	cmp	r3, #0
 8009408:	eb02 0c01 	add.w	ip, r2, r1
 800940c:	bfd8      	it	le
 800940e:	4691      	movle	r9, r2
 8009410:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009412:	bfc8      	it	gt
 8009414:	f04f 0900 	movgt.w	r9, #0
 8009418:	4594      	cmp	ip, r2
 800941a:	444b      	add	r3, r9
 800941c:	bfa8      	it	ge
 800941e:	4694      	movge	ip, r2
 8009420:	9a06      	ldr	r2, [sp, #24]
 8009422:	fb02 f303 	mul.w	r3, r2, r3
 8009426:	9309      	str	r3, [sp, #36]	@ 0x24
 8009428:	9a05      	ldr	r2, [sp, #20]
 800942a:	f04f 0e00 	mov.w	lr, #0
 800942e:	9908      	ldr	r1, [sp, #32]
 8009430:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009432:	eb02 0801 	add.w	r8, r2, r1
 8009436:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009438:	fb03 f302 	mul.w	r3, r3, r2
 800943c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800943e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8009440:	fb0a 2808 	mla	r8, sl, r8, r2
 8009444:	1a5a      	subs	r2, r3, r1
 8009446:	1acb      	subs	r3, r1, r3
 8009448:	9906      	ldr	r1, [sp, #24]
 800944a:	2a00      	cmp	r2, #0
 800944c:	bfd8      	it	le
 800944e:	461f      	movle	r7, r3
 8009450:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009452:	bfc8      	it	gt
 8009454:	2700      	movgt	r7, #0
 8009456:	18d3      	adds	r3, r2, r3
 8009458:	1a8a      	subs	r2, r1, r2
 800945a:	4294      	cmp	r4, r2
 800945c:	443b      	add	r3, r7
 800945e:	bfa8      	it	ge
 8009460:	4614      	movge	r4, r2
 8009462:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009464:	fb0a 2303 	mla	r3, sl, r3, r2
 8009468:	9302      	str	r3, [sp, #8]
 800946a:	45e1      	cmp	r9, ip
 800946c:	da4d      	bge.n	800950a <forward_lite_maxpool_is8os8_scaleneg+0x1b6>
 800946e:	9b02      	ldr	r3, [sp, #8]
 8009470:	464d      	mov	r5, r9
 8009472:	217f      	movs	r1, #127	@ 0x7f
 8009474:	eb03 060e 	add.w	r6, r3, lr
 8009478:	42a7      	cmp	r7, r4
 800947a:	da0a      	bge.n	8009492 <forward_lite_maxpool_is8os8_scaleneg+0x13e>
 800947c:	4632      	mov	r2, r6
 800947e:	463b      	mov	r3, r7
 8009480:	f992 0000 	ldrsb.w	r0, [r2]
 8009484:	3301      	adds	r3, #1
 8009486:	4452      	add	r2, sl
 8009488:	4281      	cmp	r1, r0
 800948a:	bfa8      	it	ge
 800948c:	4601      	movge	r1, r0
 800948e:	429c      	cmp	r4, r3
 8009490:	d1f6      	bne.n	8009480 <forward_lite_maxpool_is8os8_scaleneg+0x12c>
 8009492:	3501      	adds	r5, #1
 8009494:	445e      	add	r6, fp
 8009496:	45ac      	cmp	ip, r5
 8009498:	d1ee      	bne.n	8009478 <forward_lite_maxpool_is8os8_scaleneg+0x124>
 800949a:	9b01      	ldr	r3, [sp, #4]
 800949c:	b1d3      	cbz	r3, 80094d4 <forward_lite_maxpool_is8os8_scaleneg+0x180>
 800949e:	f888 1000 	strb.w	r1, [r8]
 80094a2:	f10e 0e01 	add.w	lr, lr, #1
 80094a6:	f108 0801 	add.w	r8, r8, #1
 80094aa:	fa1f f38e 	uxth.w	r3, lr
 80094ae:	459a      	cmp	sl, r3
 80094b0:	d8db      	bhi.n	800946a <forward_lite_maxpool_is8os8_scaleneg+0x116>
 80094b2:	9b05      	ldr	r3, [sp, #20]
 80094b4:	9a07      	ldr	r2, [sp, #28]
 80094b6:	3301      	adds	r3, #1
 80094b8:	b29b      	uxth	r3, r3
 80094ba:	429a      	cmp	r2, r3
 80094bc:	9305      	str	r3, [sp, #20]
 80094be:	d8b3      	bhi.n	8009428 <forward_lite_maxpool_is8os8_scaleneg+0xd4>
 80094c0:	9b04      	ldr	r3, [sp, #16]
 80094c2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80094c4:	3301      	adds	r3, #1
 80094c6:	b29b      	uxth	r3, r3
 80094c8:	429a      	cmp	r2, r3
 80094ca:	9304      	str	r3, [sp, #16]
 80094cc:	d88b      	bhi.n	80093e6 <forward_lite_maxpool_is8os8_scaleneg+0x92>
 80094ce:	b015      	add	sp, #84	@ 0x54
 80094d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094d4:	9b03      	ldr	r3, [sp, #12]
 80094d6:	eeb0 7a66 	vmov.f32	s14, s13
 80094da:	1ac9      	subs	r1, r1, r3
 80094dc:	ee07 1a90 	vmov	s15, r1
 80094e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80094e4:	eea7 7a80 	vfma.f32	s14, s15, s0
 80094e8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80094ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094f0:	fe65 7a86 	vselge.f32	s15, s11, s12
 80094f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80094f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80094fc:	ee17 3a90 	vmov	r3, s15
 8009500:	f303 0307 	ssat	r3, #8, r3
 8009504:	f888 3000 	strb.w	r3, [r8]
 8009508:	e7cb      	b.n	80094a2 <forward_lite_maxpool_is8os8_scaleneg+0x14e>
 800950a:	217f      	movs	r1, #127	@ 0x7f
 800950c:	e7c5      	b.n	800949a <forward_lite_maxpool_is8os8_scaleneg+0x146>
 800950e:	bf00      	nop
 8009510:	befffffc 	.word	0xbefffffc

08009514 <align_factor>:
 8009514:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009518:	4602      	mov	r2, r0
 800951a:	b508      	push	{r3, lr}
 800951c:	eeb4 0a67 	vcmp.f32	s0, s15
 8009520:	2300      	movs	r3, #0
 8009522:	8003      	strh	r3, [r0, #0]
 8009524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009528:	d524      	bpl.n	8009574 <align_factor+0x60>
 800952a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800952e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009532:	dd1f      	ble.n	8009574 <align_factor+0x60>
 8009534:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8009538:	2301      	movs	r3, #1
 800953a:	e005      	b.n	8009548 <align_factor+0x34>
 800953c:	8013      	strh	r3, [r2, #0]
 800953e:	b28b      	uxth	r3, r1
 8009540:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009544:	2b21      	cmp	r3, #33	@ 0x21
 8009546:	d02b      	beq.n	80095a0 <align_factor+0x8c>
 8009548:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800954c:	1c59      	adds	r1, r3, #1
 800954e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009552:	d4f3      	bmi.n	800953c <align_factor+0x28>
 8009554:	eddf 7a17 	vldr	s15, [pc, #92]	@ 80095b4 <align_factor+0xa0>
 8009558:	ee60 7a27 	vmul.f32	s15, s0, s15
 800955c:	ee17 0a90 	vmov	r0, s15
 8009560:	f7f6 ff2e 	bl	80003c0 <__aeabi_f2lz>
 8009564:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 8009568:	d003      	beq.n	8009572 <align_factor+0x5e>
 800956a:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 800956e:	ea80 70e1 	eor.w	r0, r0, r1, asr #31
 8009572:	bd08      	pop	{r3, pc}
 8009574:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009578:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800957c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8009580:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8009584:	e005      	b.n	8009592 <align_factor+0x7e>
 8009586:	8013      	strh	r3, [r2, #0]
 8009588:	b28b      	uxth	r3, r1
 800958a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800958e:	4283      	cmp	r3, r0
 8009590:	d00a      	beq.n	80095a8 <align_factor+0x94>
 8009592:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8009596:	1e59      	subs	r1, r3, #1
 8009598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800959c:	dcf3      	bgt.n	8009586 <align_factor+0x72>
 800959e:	e7d9      	b.n	8009554 <align_factor+0x40>
 80095a0:	2300      	movs	r3, #0
 80095a2:	4618      	mov	r0, r3
 80095a4:	8013      	strh	r3, [r2, #0]
 80095a6:	bd08      	pop	{r3, pc}
 80095a8:	f64f 73e2 	movw	r3, #65506	@ 0xffe2
 80095ac:	ee30 0a00 	vadd.f32	s0, s0, s0
 80095b0:	8013      	strh	r3, [r2, #0]
 80095b2:	e7cf      	b.n	8009554 <align_factor+0x40>
 80095b4:	4f000000 	.word	0x4f000000

080095b8 <align_factor_ch>:
 80095b8:	b361      	cbz	r1, 8009614 <align_factor_ch+0x5c>
 80095ba:	ee80 7a20 	vdiv.f32	s14, s0, s1
 80095be:	f1a2 0c04 	sub.w	ip, r2, #4
 80095c2:	b530      	push	{r4, r5, lr}
 80095c4:	f1a3 0e02 	sub.w	lr, r3, #2
 80095c8:	eb00 0481 	add.w	r4, r0, r1, lsl #2
 80095cc:	2500      	movs	r5, #0
 80095ce:	ecf0 7a01 	vldmia	r0!, {s15}
 80095d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095d6:	ee17 2a90 	vmov	r2, s15
 80095da:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80095de:	f3c2 0316 	ubfx	r3, r2, #0, #23
 80095e2:	2a00      	cmp	r2, #0
 80095e4:	f503 0300 	add.w	r3, r3, #8388608	@ 0x800000
 80095e8:	f1c1 017e 	rsb	r1, r1, #126	@ 0x7e
 80095ec:	bfb8      	it	lt
 80095ee:	425b      	neglt	r3, r3
 80095f0:	291f      	cmp	r1, #31
 80095f2:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 80095f6:	dc06      	bgt.n	8009606 <align_factor_ch+0x4e>
 80095f8:	4284      	cmp	r4, r0
 80095fa:	f82e 1f02 	strh.w	r1, [lr, #2]!
 80095fe:	f84c 3f04 	str.w	r3, [ip, #4]!
 8009602:	d1e4      	bne.n	80095ce <align_factor_ch+0x16>
 8009604:	bd30      	pop	{r4, r5, pc}
 8009606:	4284      	cmp	r4, r0
 8009608:	f82e 5f02 	strh.w	r5, [lr, #2]!
 800960c:	f84c 5f04 	str.w	r5, [ip, #4]!
 8009610:	d1dd      	bne.n	80095ce <align_factor_ch+0x16>
 8009612:	bd30      	pop	{r4, r5, pc}
 8009614:	4770      	bx	lr
 8009616:	bf00      	nop

08009618 <st_sssa8_ch_convolve_rank1upd>:
 8009618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800961c:	b085      	sub	sp, #20
 800961e:	f8bd 4038 	ldrh.w	r4, [sp, #56]	@ 0x38
 8009622:	f99d b040 	ldrsb.w	fp, [sp, #64]	@ 0x40
 8009626:	fb13 f304 	smulbb	r3, r3, r4
 800962a:	460c      	mov	r4, r1
 800962c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800962e:	fb13 f500 	smulbb	r5, r3, r0
 8009632:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009634:	2a00      	cmp	r2, #0
 8009636:	d070      	beq.n	800971a <st_sssa8_ch_convolve_rank1upd+0x102>
 8009638:	b2ad      	uxth	r5, r5
 800963a:	f1a1 0904 	sub.w	r9, r1, #4
 800963e:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
 8009642:	08af      	lsrs	r7, r5, #2
 8009644:	f005 0503 	and.w	r5, r5, #3
 8009648:	eb03 08c2 	add.w	r8, r3, r2, lsl #3
 800964c:	1e69      	subs	r1, r5, #1
 800964e:	f1a7 0381 	sub.w	r3, r7, #129	@ 0x81
 8009652:	f1a7 0280 	sub.w	r2, r7, #128	@ 0x80
 8009656:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 800965a:	b289      	uxth	r1, r1
 800965c:	9100      	str	r1, [sp, #0]
 800965e:	ebc3 2143 	rsb	r1, r3, r3, lsl #9
 8009662:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
 8009666:	b292      	uxth	r2, r2
 8009668:	9202      	str	r2, [sp, #8]
 800966a:	025a      	lsls	r2, r3, #9
 800966c:	3301      	adds	r3, #1
 800966e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009672:	025b      	lsls	r3, r3, #9
 8009674:	9203      	str	r2, [sp, #12]
 8009676:	9301      	str	r3, [sp, #4]
 8009678:	2f80      	cmp	r7, #128	@ 0x80
 800967a:	d953      	bls.n	8009724 <st_sssa8_ch_convolve_rank1upd+0x10c>
 800967c:	9b03      	ldr	r3, [sp, #12]
 800967e:	f504 7000 	add.w	r0, r4, #512	@ 0x200
 8009682:	2600      	movs	r6, #0
 8009684:	eb04 0c03 	add.w	ip, r4, r3
 8009688:	f5a0 7100 	sub.w	r1, r0, #512	@ 0x200
 800968c:	2200      	movs	r2, #0
 800968e:	f851 3b04 	ldr.w	r3, [r1], #4
 8009692:	fa2f fe83 	sxtb16	lr, r3
 8009696:	4281      	cmp	r1, r0
 8009698:	ea4f 2333 	mov.w	r3, r3, ror #8
 800969c:	fa92 f21e 	qadd16	r2, r2, lr
 80096a0:	fa2f f383 	sxtb16	r3, r3
 80096a4:	fa92 f213 	qadd16	r2, r2, r3
 80096a8:	d1f1      	bne.n	800968e <st_sssa8_ch_convolve_rank1upd+0x76>
 80096aa:	f501 7000 	add.w	r0, r1, #512	@ 0x200
 80096ae:	b213      	sxth	r3, r2
 80096b0:	4560      	cmp	r0, ip
 80096b2:	eb03 4222 	add.w	r2, r3, r2, asr #16
 80096b6:	4416      	add	r6, r2
 80096b8:	d1e6      	bne.n	8009688 <st_sssa8_ch_convolve_rank1upd+0x70>
 80096ba:	9b01      	ldr	r3, [sp, #4]
 80096bc:	18e1      	adds	r1, r4, r3
 80096be:	9c02      	ldr	r4, [sp, #8]
 80096c0:	b374      	cbz	r4, 8009720 <st_sssa8_ch_convolve_rank1upd+0x108>
 80096c2:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 80096c6:	2200      	movs	r2, #0
 80096c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80096cc:	fa2f f083 	sxtb16	r0, r3
 80096d0:	428c      	cmp	r4, r1
 80096d2:	ea4f 2333 	mov.w	r3, r3, ror #8
 80096d6:	fa92 f210 	qadd16	r2, r2, r0
 80096da:	fa2f f383 	sxtb16	r3, r3
 80096de:	fa92 f213 	qadd16	r2, r2, r3
 80096e2:	d1f1      	bne.n	80096c8 <st_sssa8_ch_convolve_rank1upd+0xb0>
 80096e4:	b213      	sxth	r3, r2
 80096e6:	eb03 4322 	add.w	r3, r3, r2, asr #16
 80096ea:	441e      	add	r6, r3
 80096ec:	b16d      	cbz	r5, 800970a <st_sssa8_ch_convolve_rank1upd+0xf2>
 80096ee:	f994 3000 	ldrsb.w	r3, [r4]
 80096f2:	441e      	add	r6, r3
 80096f4:	9b00      	ldr	r3, [sp, #0]
 80096f6:	b13b      	cbz	r3, 8009708 <st_sssa8_ch_convolve_rank1upd+0xf0>
 80096f8:	f994 3001 	ldrsb.w	r3, [r4, #1]
 80096fc:	2d02      	cmp	r5, #2
 80096fe:	441e      	add	r6, r3
 8009700:	d002      	beq.n	8009708 <st_sssa8_ch_convolve_rank1upd+0xf0>
 8009702:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8009706:	441e      	add	r6, r3
 8009708:	442c      	add	r4, r5
 800970a:	f859 3f04 	ldr.w	r3, [r9, #4]!
 800970e:	fb0b 3616 	mls	r6, fp, r6, r3
 8009712:	f84a 6b04 	str.w	r6, [sl], #4
 8009716:	45c2      	cmp	sl, r8
 8009718:	d1ae      	bne.n	8009678 <st_sssa8_ch_convolve_rank1upd+0x60>
 800971a:	b005      	add	sp, #20
 800971c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009720:	460c      	mov	r4, r1
 8009722:	e7e3      	b.n	80096ec <st_sssa8_ch_convolve_rank1upd+0xd4>
 8009724:	4621      	mov	r1, r4
 8009726:	2600      	movs	r6, #0
 8009728:	463c      	mov	r4, r7
 800972a:	e7c9      	b.n	80096c0 <st_sssa8_ch_convolve_rank1upd+0xa8>

0800972c <st_sssa8_fully_connected>:
 800972c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009730:	b097      	sub	sp, #92	@ 0x5c
 8009732:	460d      	mov	r5, r1
 8009734:	4683      	mov	fp, r0
 8009736:	9c20      	ldr	r4, [sp, #128]	@ 0x80
 8009738:	9313      	str	r3, [sp, #76]	@ 0x4c
 800973a:	6823      	ldr	r3, [r4, #0]
 800973c:	9203      	str	r2, [sp, #12]
 800973e:	9307      	str	r3, [sp, #28]
 8009740:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009742:	f99d 6088 	ldrsb.w	r6, [sp, #136]	@ 0x88
 8009746:	f9b3 1000 	ldrsh.w	r1, [r3]
 800974a:	f99d 308c 	ldrsb.w	r3, [sp, #140]	@ 0x8c
 800974e:	1e4a      	subs	r2, r1, #1
 8009750:	9104      	str	r1, [sp, #16]
 8009752:	920d      	str	r2, [sp, #52]	@ 0x34
 8009754:	b292      	uxth	r2, r2
 8009756:	2a14      	cmp	r2, #20
 8009758:	f200 81b3 	bhi.w	8009ac2 <st_sssa8_fully_connected+0x396>
 800975c:	2201      	movs	r2, #1
 800975e:	408b      	lsls	r3, r1
 8009760:	408a      	lsls	r2, r1
 8009762:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8009766:	9308      	str	r3, [sp, #32]
 8009768:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800976a:	2b00      	cmp	r3, #0
 800976c:	f000 81ae 	beq.w	8009acc <st_sssa8_fully_connected+0x3a0>
 8009770:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009772:	b2b3      	uxth	r3, r6
 8009774:	9600      	str	r6, [sp, #0]
 8009776:	4658      	mov	r0, fp
 8009778:	0851      	lsrs	r1, r2, #1
 800977a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800977e:	9e03      	ldr	r6, [sp, #12]
 8009780:	460c      	mov	r4, r1
 8009782:	9115      	str	r1, [sp, #84]	@ 0x54
 8009784:	4632      	mov	r2, r6
 8009786:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8009788:	f000 fb52 	bl	8009e30 <st_int8_reordered_no_shift_zero>
 800978c:	4621      	mov	r1, r4
 800978e:	2c00      	cmp	r4, #0
 8009790:	f000 8145 	beq.w	8009a1e <st_sssa8_fully_connected+0x2f2>
 8009794:	4634      	mov	r4, r6
 8009796:	f1a6 0310 	sub.w	r3, r6, #16
 800979a:	9e04      	ldr	r6, [sp, #16]
 800979c:	1e4a      	subs	r2, r1, #1
 800979e:	2001      	movs	r0, #1
 80097a0:	091b      	lsrs	r3, r3, #4
 80097a2:	1eb1      	subs	r1, r6, #2
 80097a4:	b292      	uxth	r2, r2
 80097a6:	3301      	adds	r3, #1
 80097a8:	fa00 f101 	lsl.w	r1, r0, r1
 80097ac:	9112      	str	r1, [sp, #72]	@ 0x48
 80097ae:	9924      	ldr	r1, [sp, #144]	@ 0x90
 80097b0:	3110      	adds	r1, #16
 80097b2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80097b6:	920e      	str	r2, [sp, #56]	@ 0x38
 80097b8:	1ee2      	subs	r2, r4, #3
 80097ba:	920f      	str	r2, [sp, #60]	@ 0x3c
 80097bc:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80097be:	3208      	adds	r2, #8
 80097c0:	9205      	str	r2, [sp, #20]
 80097c2:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 80097c4:	3202      	adds	r2, #2
 80097c6:	9206      	str	r2, [sp, #24]
 80097c8:	011a      	lsls	r2, r3, #4
 80097ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80097cc:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80097ce:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80097d2:	9310      	str	r3, [sp, #64]	@ 0x40
 80097d4:	1f23      	subs	r3, r4, #4
 80097d6:	9311      	str	r3, [sp, #68]	@ 0x44
 80097d8:	1b83      	subs	r3, r0, r6
 80097da:	9314      	str	r3, [sp, #80]	@ 0x50
 80097dc:	9a03      	ldr	r2, [sp, #12]
 80097de:	9b05      	ldr	r3, [sp, #20]
 80097e0:	2a0f      	cmp	r2, #15
 80097e2:	eb05 0b02 	add.w	fp, r5, r2
 80097e6:	e953 1302 	ldrd	r1, r3, [r3, #-8]
 80097ea:	f340 8260 	ble.w	8009cae <st_sssa8_fully_connected+0x582>
 80097ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80097f0:	465c      	mov	r4, fp
 80097f2:	18ae      	adds	r6, r5, r2
 80097f4:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80097f6:	682f      	ldr	r7, [r5, #0]
 80097f8:	f8d4 a000 	ldr.w	sl, [r4]
 80097fc:	ea4f 2037 	mov.w	r0, r7, ror #8
 8009800:	f8d2 9000 	ldr.w	r9, [r2]
 8009804:	ea4f 2e3a 	mov.w	lr, sl, ror #8
 8009808:	fa2f f080 	sxtb16	r0, r0
 800980c:	fa2f fc8e 	sxtb16	ip, lr
 8009810:	fa2f f787 	sxtb16	r7, r7
 8009814:	fa2f fe8a 	sxtb16	lr, sl
 8009818:	fb29 1107 	smlad	r1, r9, r7, r1
 800981c:	fb29 390e 	smlad	r9, r9, lr, r3
 8009820:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8009824:	fb28 1100 	smlad	r1, r8, r0, r1
 8009828:	fb28 9e0c 	smlad	lr, r8, ip, r9
 800982c:	6868      	ldr	r0, [r5, #4]
 800982e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8009832:	ea4f 2330 	mov.w	r3, r0, ror #8
 8009836:	f8d2 8008 	ldr.w	r8, [r2, #8]
 800983a:	ea4f 2a39 	mov.w	sl, r9, ror #8
 800983e:	fa2f f383 	sxtb16	r3, r3
 8009842:	fa2f f78a 	sxtb16	r7, sl
 8009846:	fa2f f080 	sxtb16	r0, r0
 800984a:	fa2f fa89 	sxtb16	sl, r9
 800984e:	fb28 1000 	smlad	r0, r8, r0, r1
 8009852:	fb28 e80a 	smlad	r8, r8, sl, lr
 8009856:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 800985a:	fb2c 0003 	smlad	r0, ip, r3, r0
 800985e:	fb2c 8a07 	smlad	sl, ip, r7, r8
 8009862:	68ab      	ldr	r3, [r5, #8]
 8009864:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8009868:	ea4f 2133 	mov.w	r1, r3, ror #8
 800986c:	f8d2 c010 	ldr.w	ip, [r2, #16]
 8009870:	ea4f 2e38 	mov.w	lr, r8, ror #8
 8009874:	fa2f f181 	sxtb16	r1, r1
 8009878:	fa2f f98e 	sxtb16	r9, lr
 800987c:	fa2f f383 	sxtb16	r3, r3
 8009880:	fa2f fe88 	sxtb16	lr, r8
 8009884:	fb2c 0303 	smlad	r3, ip, r3, r0
 8009888:	fb2c ac0e 	smlad	ip, ip, lr, sl
 800988c:	6957      	ldr	r7, [r2, #20]
 800988e:	fb27 3301 	smlad	r3, r7, r1, r3
 8009892:	fb27 ce09 	smlad	lr, r7, r9, ip
 8009896:	68e8      	ldr	r0, [r5, #12]
 8009898:	3410      	adds	r4, #16
 800989a:	f854 cc04 	ldr.w	ip, [r4, #-4]
 800989e:	3510      	adds	r5, #16
 80098a0:	ea4f 2130 	mov.w	r1, r0, ror #8
 80098a4:	6997      	ldr	r7, [r2, #24]
 80098a6:	fa2f f881 	sxtb16	r8, r1
 80098aa:	fa2f f180 	sxtb16	r1, r0
 80098ae:	ea4f 203c 	mov.w	r0, ip, ror #8
 80098b2:	fa2f fc8c 	sxtb16	ip, ip
 80098b6:	fa2f f080 	sxtb16	r0, r0
 80098ba:	fb27 3101 	smlad	r1, r7, r1, r3
 80098be:	fb27 e70c 	smlad	r7, r7, ip, lr
 80098c2:	69d3      	ldr	r3, [r2, #28]
 80098c4:	3220      	adds	r2, #32
 80098c6:	fb23 1108 	smlad	r1, r3, r8, r1
 80098ca:	fb23 7300 	smlad	r3, r3, r0, r7
 80098ce:	42b5      	cmp	r5, r6
 80098d0:	d191      	bne.n	80097f6 <st_sssa8_fully_connected+0xca>
 80098d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80098d4:	f8dd a040 	ldr.w	sl, [sp, #64]	@ 0x40
 80098d8:	4493      	add	fp, r2
 80098da:	4691      	mov	r9, r2
 80098dc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80098de:	4591      	cmp	r9, r2
 80098e0:	f280 81e3 	bge.w	8009caa <st_sssa8_fully_connected+0x57e>
 80098e4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80098e6:	4657      	mov	r7, sl
 80098e8:	46d8      	mov	r8, fp
 80098ea:	eba2 0209 	sub.w	r2, r2, r9
 80098ee:	0892      	lsrs	r2, r2, #2
 80098f0:	920c      	str	r2, [sp, #48]	@ 0x30
 80098f2:	3201      	adds	r2, #1
 80098f4:	0090      	lsls	r0, r2, #2
 80098f6:	920b      	str	r2, [sp, #44]	@ 0x2c
 80098f8:	eb06 0482 	add.w	r4, r6, r2, lsl #2
 80098fc:	900a      	str	r0, [sp, #40]	@ 0x28
 80098fe:	f856 eb04 	ldr.w	lr, [r6], #4
 8009902:	f858 0b04 	ldr.w	r0, [r8], #4
 8009906:	ea4f 2c3e 	mov.w	ip, lr, ror #8
 800990a:	683a      	ldr	r2, [r7, #0]
 800990c:	ea4f 2530 	mov.w	r5, r0, ror #8
 8009910:	fa2f fc8c 	sxtb16	ip, ip
 8009914:	fa2f fe8e 	sxtb16	lr, lr
 8009918:	fa2f f585 	sxtb16	r5, r5
 800991c:	fa2f f080 	sxtb16	r0, r0
 8009920:	fb22 110e 	smlad	r1, r2, lr, r1
 8009924:	fb22 3300 	smlad	r3, r2, r0, r3
 8009928:	687a      	ldr	r2, [r7, #4]
 800992a:	3708      	adds	r7, #8
 800992c:	fb22 110c 	smlad	r1, r2, ip, r1
 8009930:	fb22 3305 	smlad	r3, r2, r5, r3
 8009934:	42a6      	cmp	r6, r4
 8009936:	d1e2      	bne.n	80098fe <st_sssa8_fully_connected+0x1d2>
 8009938:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800993a:	f109 0904 	add.w	r9, r9, #4
 800993e:	eb0a 0ac2 	add.w	sl, sl, r2, lsl #3
 8009942:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009944:	4493      	add	fp, r2
 8009946:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009948:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 800994c:	9d03      	ldr	r5, [sp, #12]
 800994e:	454d      	cmp	r5, r9
 8009950:	dd37      	ble.n	80099c2 <st_sssa8_fully_connected+0x296>
 8009952:	f9ba 2000 	ldrsh.w	r2, [sl]
 8009956:	f994 0000 	ldrsb.w	r0, [r4]
 800995a:	fb12 1100 	smlabb	r1, r2, r0, r1
 800995e:	f99b 0000 	ldrsb.w	r0, [fp]
 8009962:	fb12 3300 	smlabb	r3, r2, r0, r3
 8009966:	f109 0201 	add.w	r2, r9, #1
 800996a:	42aa      	cmp	r2, r5
 800996c:	da25      	bge.n	80099ba <st_sssa8_fully_connected+0x28e>
 800996e:	f9ba 2002 	ldrsh.w	r2, [sl, #2]
 8009972:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8009976:	fb12 1100 	smlabb	r1, r2, r0, r1
 800997a:	f99b 0001 	ldrsb.w	r0, [fp, #1]
 800997e:	fb12 3300 	smlabb	r3, r2, r0, r3
 8009982:	f109 0202 	add.w	r2, r9, #2
 8009986:	42aa      	cmp	r2, r5
 8009988:	da17      	bge.n	80099ba <st_sssa8_fully_connected+0x28e>
 800998a:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 800998e:	f994 0002 	ldrsb.w	r0, [r4, #2]
 8009992:	fb12 1100 	smlabb	r1, r2, r0, r1
 8009996:	f99b 0002 	ldrsb.w	r0, [fp, #2]
 800999a:	fb12 3300 	smlabb	r3, r2, r0, r3
 800999e:	f109 0203 	add.w	r2, r9, #3
 80099a2:	4295      	cmp	r5, r2
 80099a4:	dd09      	ble.n	80099ba <st_sssa8_fully_connected+0x28e>
 80099a6:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
 80099aa:	f99b 0003 	ldrsb.w	r0, [fp, #3]
 80099ae:	fb12 3300 	smlabb	r3, r2, r0, r3
 80099b2:	f994 0003 	ldrsb.w	r0, [r4, #3]
 80099b6:	fb12 1100 	smlabb	r1, r2, r0, r1
 80099ba:	9a03      	ldr	r2, [sp, #12]
 80099bc:	eba2 0909 	sub.w	r9, r2, r9
 80099c0:	444c      	add	r4, r9
 80099c2:	9a04      	ldr	r2, [sp, #16]
 80099c4:	2a15      	cmp	r2, #21
 80099c6:	f340 8140 	ble.w	8009c4a <st_sssa8_fully_connected+0x51e>
 80099ca:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80099cc:	9a07      	ldr	r2, [sp, #28]
 80099ce:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80099d0:	fb51 0102 	smmla	r1, r1, r2, r0
 80099d4:	fb53 0302 	smmla	r3, r3, r2, r0
 80099d8:	4129      	asrs	r1, r5
 80099da:	9a08      	ldr	r2, [sp, #32]
 80099dc:	4411      	add	r1, r2
 80099de:	f301 0107 	ssat	r1, #8, r1
 80099e2:	9806      	ldr	r0, [sp, #24]
 80099e4:	412b      	asrs	r3, r5
 80099e6:	f800 1c02 	strb.w	r1, [r0, #-2]
 80099ea:	4413      	add	r3, r2
 80099ec:	f303 0307 	ssat	r3, #8, r3
 80099f0:	f800 3c01 	strb.w	r3, [r0, #-1]
 80099f4:	9a03      	ldr	r2, [sp, #12]
 80099f6:	9b05      	ldr	r3, [sp, #20]
 80099f8:	18a5      	adds	r5, r4, r2
 80099fa:	9a06      	ldr	r2, [sp, #24]
 80099fc:	3308      	adds	r3, #8
 80099fe:	3202      	adds	r2, #2
 8009a00:	9305      	str	r3, [sp, #20]
 8009a02:	9206      	str	r2, [sp, #24]
 8009a04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a06:	4293      	cmp	r3, r2
 8009a08:	f47f aee8 	bne.w	80097dc <st_sssa8_fully_connected+0xb0>
 8009a0c:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8009a0e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009a10:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8009a14:	9225      	str	r2, [sp, #148]	@ 0x94
 8009a16:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009a18:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009a1c:	9324      	str	r3, [sp, #144]	@ 0x90
 8009a1e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009a20:	07db      	lsls	r3, r3, #31
 8009a22:	d54a      	bpl.n	8009aba <st_sssa8_fully_connected+0x38e>
 8009a24:	9a03      	ldr	r2, [sp, #12]
 8009a26:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009a28:	0897      	lsrs	r7, r2, #2
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f000 8175 	beq.w	8009d1a <st_sssa8_fully_connected+0x5ee>
 8009a30:	eb05 0687 	add.w	r6, r5, r7, lsl #2
 8009a34:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8009a36:	f855 2b04 	ldr.w	r2, [r5], #4
 8009a3a:	6801      	ldr	r1, [r0, #0]
 8009a3c:	fa2f f482 	sxtb16	r4, r2
 8009a40:	ea4f 2232 	mov.w	r2, r2, ror #8
 8009a44:	fa2f f282 	sxtb16	r2, r2
 8009a48:	fb21 3304 	smlad	r3, r1, r4, r3
 8009a4c:	6841      	ldr	r1, [r0, #4]
 8009a4e:	3008      	adds	r0, #8
 8009a50:	fb21 3302 	smlad	r3, r1, r2, r3
 8009a54:	42b5      	cmp	r5, r6
 8009a56:	d1ee      	bne.n	8009a36 <st_sssa8_fully_connected+0x30a>
 8009a58:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8009a5a:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
 8009a5e:	9226      	str	r2, [sp, #152]	@ 0x98
 8009a60:	9a03      	ldr	r2, [sp, #12]
 8009a62:	f012 0203 	ands.w	r2, r2, #3
 8009a66:	d016      	beq.n	8009a96 <st_sssa8_fully_connected+0x36a>
 8009a68:	3a01      	subs	r2, #1
 8009a6a:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8009a6c:	f996 1000 	ldrsb.w	r1, [r6]
 8009a70:	8800      	ldrh	r0, [r0, #0]
 8009a72:	b292      	uxth	r2, r2
 8009a74:	fb10 3301 	smlabb	r3, r0, r1, r3
 8009a78:	b16a      	cbz	r2, 8009a96 <st_sssa8_fully_connected+0x36a>
 8009a7a:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8009a7c:	2a01      	cmp	r2, #1
 8009a7e:	f996 1001 	ldrsb.w	r1, [r6, #1]
 8009a82:	8840      	ldrh	r0, [r0, #2]
 8009a84:	fb10 3301 	smlabb	r3, r0, r1, r3
 8009a88:	d005      	beq.n	8009a96 <st_sssa8_fully_connected+0x36a>
 8009a8a:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8009a8c:	f996 2002 	ldrsb.w	r2, [r6, #2]
 8009a90:	8889      	ldrh	r1, [r1, #4]
 8009a92:	fb11 3302 	smlabb	r3, r1, r2, r3
 8009a96:	9a04      	ldr	r2, [sp, #16]
 8009a98:	2a15      	cmp	r2, #21
 8009a9a:	f340 811c 	ble.w	8009cd6 <st_sssa8_fully_connected+0x5aa>
 8009a9e:	1e91      	subs	r1, r2, #2
 8009aa0:	2201      	movs	r2, #1
 8009aa2:	408a      	lsls	r2, r1
 8009aa4:	9907      	ldr	r1, [sp, #28]
 8009aa6:	fb53 2301 	smmla	r3, r3, r1, r2
 8009aaa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009aac:	4113      	asrs	r3, r2
 8009aae:	9a08      	ldr	r2, [sp, #32]
 8009ab0:	4413      	add	r3, r2
 8009ab2:	f303 0307 	ssat	r3, #8, r3
 8009ab6:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8009ab8:	7013      	strb	r3, [r2, #0]
 8009aba:	2000      	movs	r0, #0
 8009abc:	b017      	add	sp, #92	@ 0x5c
 8009abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ac2:	9308      	str	r3, [sp, #32]
 8009ac4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	f47f ae52 	bne.w	8009770 <st_sssa8_fully_connected+0x44>
 8009acc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009ace:	4270      	negs	r0, r6
 8009ad0:	eac0 4000 	pkhbt	r0, r0, r0, lsl #16
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d0f0      	beq.n	8009aba <st_sssa8_fully_connected+0x38e>
 8009ad8:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8009ada:	3301      	adds	r3, #1
 8009adc:	9903      	ldr	r1, [sp, #12]
 8009ade:	b236      	sxth	r6, r6
 8009ae0:	18d3      	adds	r3, r2, r3
 8009ae2:	9c04      	ldr	r4, [sp, #16]
 8009ae4:	f1a1 0810 	sub.w	r8, r1, #16
 8009ae8:	f102 0e01 	add.w	lr, r2, #1
 8009aec:	9305      	str	r3, [sp, #20]
 8009aee:	2201      	movs	r2, #1
 8009af0:	f028 080f 	bic.w	r8, r8, #15
 8009af4:	1ea3      	subs	r3, r4, #2
 8009af6:	468c      	mov	ip, r1
 8009af8:	f8dd 9090 	ldr.w	r9, [sp, #144]	@ 0x90
 8009afc:	fa02 f303 	lsl.w	r3, r2, r3
 8009b00:	f108 0810 	add.w	r8, r8, #16
 8009b04:	f1bc 0f0f 	cmp.w	ip, #15
 8009b08:	f8cd b00c 	str.w	fp, [sp, #12]
 8009b0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b0e:	eb0b 0308 	add.w	r3, fp, r8
 8009b12:	9306      	str	r3, [sp, #24]
 8009b14:	eba2 0304 	sub.w	r3, r2, r4
 8009b18:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b1a:	f859 3b04 	ldr.w	r3, [r9], #4
 8009b1e:	dd7e      	ble.n	8009c1e <st_sssa8_fully_connected+0x4f2>
 8009b20:	eb05 0708 	add.w	r7, r5, r8
 8009b24:	462a      	mov	r2, r5
 8009b26:	9d03      	ldr	r5, [sp, #12]
 8009b28:	6811      	ldr	r1, [r2, #0]
 8009b2a:	682c      	ldr	r4, [r5, #0]
 8009b2c:	fa2f fb81 	sxtb16	fp, r1
 8009b30:	ea4f 2a34 	mov.w	sl, r4, ror #8
 8009b34:	ea4f 2131 	mov.w	r1, r1, ror #8
 8009b38:	fa20 fa8a 	sxtab16	sl, r0, sl
 8009b3c:	fa2f f181 	sxtb16	r1, r1
 8009b40:	fa20 f484 	sxtab16	r4, r0, r4
 8009b44:	fb24 340b 	smlad	r4, r4, fp, r3
 8009b48:	fb2a 4b01 	smlad	fp, sl, r1, r4
 8009b4c:	6851      	ldr	r1, [r2, #4]
 8009b4e:	f8d5 a004 	ldr.w	sl, [r5, #4]
 8009b52:	fa2f f481 	sxtb16	r4, r1
 8009b56:	ea4f 233a 	mov.w	r3, sl, ror #8
 8009b5a:	ea4f 2131 	mov.w	r1, r1, ror #8
 8009b5e:	fa20 f383 	sxtab16	r3, r0, r3
 8009b62:	fa2f f181 	sxtb16	r1, r1
 8009b66:	fa20 fa8a 	sxtab16	sl, r0, sl
 8009b6a:	fb2a ba04 	smlad	sl, sl, r4, fp
 8009b6e:	fb23 a401 	smlad	r4, r3, r1, sl
 8009b72:	6891      	ldr	r1, [r2, #8]
 8009b74:	68ab      	ldr	r3, [r5, #8]
 8009b76:	fa2f fb81 	sxtb16	fp, r1
 8009b7a:	ea4f 2a33 	mov.w	sl, r3, ror #8
 8009b7e:	ea4f 2131 	mov.w	r1, r1, ror #8
 8009b82:	fa20 fa8a 	sxtab16	sl, r0, sl
 8009b86:	fa2f f181 	sxtb16	r1, r1
 8009b8a:	fa20 f383 	sxtab16	r3, r0, r3
 8009b8e:	fb23 430b 	smlad	r3, r3, fp, r4
 8009b92:	fb2a 3301 	smlad	r3, sl, r1, r3
 8009b96:	f8d2 a00c 	ldr.w	sl, [r2, #12]
 8009b9a:	3510      	adds	r5, #16
 8009b9c:	f855 1c04 	ldr.w	r1, [r5, #-4]
 8009ba0:	3210      	adds	r2, #16
 8009ba2:	ea4f 2b3a 	mov.w	fp, sl, ror #8
 8009ba6:	ea4f 2431 	mov.w	r4, r1, ror #8
 8009baa:	fa2f fa8a 	sxtb16	sl, sl
 8009bae:	fa2f fb8b 	sxtb16	fp, fp
 8009bb2:	fa20 f181 	sxtab16	r1, r0, r1
 8009bb6:	fa20 f484 	sxtab16	r4, r0, r4
 8009bba:	fb21 330a 	smlad	r3, r1, sl, r3
 8009bbe:	fb24 330b 	smlad	r3, r4, fp, r3
 8009bc2:	4297      	cmp	r7, r2
 8009bc4:	d1b0      	bne.n	8009b28 <st_sssa8_fully_connected+0x3fc>
 8009bc6:	4645      	mov	r5, r8
 8009bc8:	9f06      	ldr	r7, [sp, #24]
 8009bca:	45ac      	cmp	ip, r5
 8009bcc:	dd2c      	ble.n	8009c28 <st_sssa8_fully_connected+0x4fc>
 8009bce:	ebac 0505 	sub.w	r5, ip, r5
 8009bd2:	4415      	add	r5, r2
 8009bd4:	4611      	mov	r1, r2
 8009bd6:	f917 4b01 	ldrsb.w	r4, [r7], #1
 8009bda:	3201      	adds	r2, #1
 8009bdc:	7809      	ldrb	r1, [r1, #0]
 8009bde:	1ba4      	subs	r4, r4, r6
 8009be0:	42aa      	cmp	r2, r5
 8009be2:	b249      	sxtb	r1, r1
 8009be4:	fb14 3301 	smlabb	r3, r4, r1, r3
 8009be8:	d1f4      	bne.n	8009bd4 <st_sssa8_fully_connected+0x4a8>
 8009bea:	9a04      	ldr	r2, [sp, #16]
 8009bec:	2a15      	cmp	r2, #21
 8009bee:	dd1f      	ble.n	8009c30 <st_sssa8_fully_connected+0x504>
 8009bf0:	9a07      	ldr	r2, [sp, #28]
 8009bf2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009bf4:	fb53 1302 	smmla	r3, r3, r2, r1
 8009bf8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009bfa:	4113      	asrs	r3, r2
 8009bfc:	9a08      	ldr	r2, [sp, #32]
 8009bfe:	4413      	add	r3, r2
 8009c00:	f303 0307 	ssat	r3, #8, r3
 8009c04:	f80e 3c01 	strb.w	r3, [lr, #-1]
 8009c08:	f10e 0e01 	add.w	lr, lr, #1
 8009c0c:	9b05      	ldr	r3, [sp, #20]
 8009c0e:	459e      	cmp	lr, r3
 8009c10:	f43f af53 	beq.w	8009aba <st_sssa8_fully_connected+0x38e>
 8009c14:	f1bc 0f0f 	cmp.w	ip, #15
 8009c18:	f859 3b04 	ldr.w	r3, [r9], #4
 8009c1c:	dc80      	bgt.n	8009b20 <st_sssa8_fully_connected+0x3f4>
 8009c1e:	462a      	mov	r2, r5
 8009c20:	2500      	movs	r5, #0
 8009c22:	9f03      	ldr	r7, [sp, #12]
 8009c24:	45ac      	cmp	ip, r5
 8009c26:	dcd2      	bgt.n	8009bce <st_sssa8_fully_connected+0x4a2>
 8009c28:	4615      	mov	r5, r2
 8009c2a:	9a04      	ldr	r2, [sp, #16]
 8009c2c:	2a15      	cmp	r2, #21
 8009c2e:	dcdf      	bgt.n	8009bf0 <st_sssa8_fully_connected+0x4c4>
 8009c30:	2a00      	cmp	r2, #0
 8009c32:	dd42      	ble.n	8009cba <st_sssa8_fully_connected+0x58e>
 8009c34:	005b      	lsls	r3, r3, #1
 8009c36:	e9dd 1407 	ldrd	r1, r4, [sp, #28]
 8009c3a:	fb53 4301 	smmla	r3, r3, r1, r4
 8009c3e:	4113      	asrs	r3, r2
 8009c40:	f303 0307 	ssat	r3, #8, r3
 8009c44:	f80e 3c01 	strb.w	r3, [lr, #-1]
 8009c48:	e7de      	b.n	8009c08 <st_sssa8_fully_connected+0x4dc>
 8009c4a:	2a00      	cmp	r2, #0
 8009c4c:	dd13      	ble.n	8009c76 <st_sssa8_fully_connected+0x54a>
 8009c4e:	0049      	lsls	r1, r1, #1
 8009c50:	005b      	lsls	r3, r3, #1
 8009c52:	e9dd 0507 	ldrd	r0, r5, [sp, #28]
 8009c56:	fb51 5100 	smmla	r1, r1, r0, r5
 8009c5a:	fb53 5300 	smmla	r3, r3, r0, r5
 8009c5e:	4111      	asrs	r1, r2
 8009c60:	f301 0107 	ssat	r1, #8, r1
 8009c64:	9806      	ldr	r0, [sp, #24]
 8009c66:	4113      	asrs	r3, r2
 8009c68:	f800 1c02 	strb.w	r1, [r0, #-2]
 8009c6c:	f303 0307 	ssat	r3, #8, r3
 8009c70:	f800 3c01 	strb.w	r3, [r0, #-1]
 8009c74:	e6be      	b.n	80099f4 <st_sssa8_fully_connected+0x2c8>
 8009c76:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8009c78:	fa01 f200 	lsl.w	r2, r1, r0
 8009c7c:	f302 021f 	ssat	r2, #32, r2
 8009c80:	9907      	ldr	r1, [sp, #28]
 8009c82:	fb52 f211 	smmulr	r2, r2, r1
 8009c86:	4083      	lsls	r3, r0
 8009c88:	f303 031f 	ssat	r3, #32, r3
 8009c8c:	fb53 f311 	smmulr	r3, r3, r1
 8009c90:	9908      	ldr	r1, [sp, #32]
 8009c92:	440a      	add	r2, r1
 8009c94:	f302 0207 	ssat	r2, #8, r2
 8009c98:	9806      	ldr	r0, [sp, #24]
 8009c9a:	440b      	add	r3, r1
 8009c9c:	f800 2c02 	strb.w	r2, [r0, #-2]
 8009ca0:	f303 0307 	ssat	r3, #8, r3
 8009ca4:	f800 3c01 	strb.w	r3, [r0, #-1]
 8009ca8:	e6a4      	b.n	80099f4 <st_sssa8_fully_connected+0x2c8>
 8009caa:	4634      	mov	r4, r6
 8009cac:	e64e      	b.n	800994c <st_sssa8_fully_connected+0x220>
 8009cae:	462e      	mov	r6, r5
 8009cb0:	f8dd a098 	ldr.w	sl, [sp, #152]	@ 0x98
 8009cb4:	f04f 0900 	mov.w	r9, #0
 8009cb8:	e610      	b.n	80098dc <st_sssa8_fully_connected+0x1b0>
 8009cba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009cbc:	4093      	lsls	r3, r2
 8009cbe:	f303 031f 	ssat	r3, #32, r3
 8009cc2:	9a07      	ldr	r2, [sp, #28]
 8009cc4:	fb53 f312 	smmulr	r3, r3, r2
 8009cc8:	9a08      	ldr	r2, [sp, #32]
 8009cca:	4413      	add	r3, r2
 8009ccc:	f303 0307 	ssat	r3, #8, r3
 8009cd0:	f80e 3c01 	strb.w	r3, [lr, #-1]
 8009cd4:	e798      	b.n	8009c08 <st_sssa8_fully_connected+0x4dc>
 8009cd6:	2a00      	cmp	r2, #0
 8009cd8:	dd0d      	ble.n	8009cf6 <st_sssa8_fully_connected+0x5ca>
 8009cda:	005b      	lsls	r3, r3, #1
 8009cdc:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
 8009ce0:	fb53 0301 	smmla	r3, r3, r1, r0
 8009ce4:	4113      	asrs	r3, r2
 8009ce6:	f303 0307 	ssat	r3, #8, r3
 8009cea:	2000      	movs	r0, #0
 8009cec:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8009cee:	7013      	strb	r3, [r2, #0]
 8009cf0:	b017      	add	sp, #92	@ 0x5c
 8009cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cf6:	f1c2 0201 	rsb	r2, r2, #1
 8009cfa:	4093      	lsls	r3, r2
 8009cfc:	f303 031f 	ssat	r3, #32, r3
 8009d00:	9a07      	ldr	r2, [sp, #28]
 8009d02:	fb53 f312 	smmulr	r3, r3, r2
 8009d06:	9a08      	ldr	r2, [sp, #32]
 8009d08:	441a      	add	r2, r3
 8009d0a:	f302 0307 	ssat	r3, #8, r2
 8009d0e:	2000      	movs	r0, #0
 8009d10:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8009d12:	7013      	strb	r3, [r2, #0]
 8009d14:	b017      	add	sp, #92	@ 0x5c
 8009d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d1a:	462e      	mov	r6, r5
 8009d1c:	e6a0      	b.n	8009a60 <st_sssa8_fully_connected+0x334>
 8009d1e:	bf00      	nop

08009d20 <st_int8_copy>:
 8009d20:	4288      	cmp	r0, r1
 8009d22:	d010      	beq.n	8009d46 <st_int8_copy+0x26>
 8009d24:	b17a      	cbz	r2, 8009d46 <st_int8_copy+0x26>
 8009d26:	4288      	cmp	r0, r1
 8009d28:	eb00 0302 	add.w	r3, r0, r2
 8009d2c:	d20c      	bcs.n	8009d48 <st_int8_copy+0x28>
 8009d2e:	428b      	cmp	r3, r1
 8009d30:	d90a      	bls.n	8009d48 <st_int8_copy+0x28>
 8009d32:	4283      	cmp	r3, r0
 8009d34:	440a      	add	r2, r1
 8009d36:	d906      	bls.n	8009d46 <st_int8_copy+0x26>
 8009d38:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8009d3c:	4283      	cmp	r3, r0
 8009d3e:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8009d42:	d1f9      	bne.n	8009d38 <st_int8_copy+0x18>
 8009d44:	4770      	bx	lr
 8009d46:	4770      	bx	lr
 8009d48:	078b      	lsls	r3, r1, #30
 8009d4a:	d102      	bne.n	8009d52 <st_int8_copy+0x32>
 8009d4c:	e008      	b.n	8009d60 <st_int8_copy+0x40>
 8009d4e:	2a00      	cmp	r2, #0
 8009d50:	d04d      	beq.n	8009dee <st_int8_copy+0xce>
 8009d52:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8009d56:	3a01      	subs	r2, #1
 8009d58:	f801 3b01 	strb.w	r3, [r1], #1
 8009d5c:	078b      	lsls	r3, r1, #30
 8009d5e:	d1f6      	bne.n	8009d4e <st_int8_copy+0x2e>
 8009d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d64:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8009d68:	d05e      	beq.n	8009e28 <st_int8_copy+0x108>
 8009d6a:	ea40 0301 	orr.w	r3, r0, r1
 8009d6e:	075b      	lsls	r3, r3, #29
 8009d70:	d13e      	bne.n	8009df0 <st_int8_copy+0xd0>
 8009d72:	f10e 33ff 	add.w	r3, lr, #4294967295
 8009d76:	2b01      	cmp	r3, #1
 8009d78:	d93a      	bls.n	8009df0 <st_int8_copy+0xd0>
 8009d7a:	f100 0310 	add.w	r3, r0, #16
 8009d7e:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8009d82:	f101 0c10 	add.w	ip, r1, #16
 8009d86:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8009d8a:	3310      	adds	r3, #16
 8009d8c:	f10c 0c10 	add.w	ip, ip, #16
 8009d90:	ed13 6b08 	vldr	d6, [r3, #-32]	@ 0xffffffe0
 8009d94:	ed13 7b06 	vldr	d7, [r3, #-24]	@ 0xffffffe8
 8009d98:	4573      	cmp	r3, lr
 8009d9a:	ed0c 6b08 	vstr	d6, [ip, #-32]	@ 0xffffffe0
 8009d9e:	ed0c 7b06 	vstr	d7, [ip, #-24]	@ 0xffffffe8
 8009da2:	d1f2      	bne.n	8009d8a <st_int8_copy+0x6a>
 8009da4:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8009da8:	4421      	add	r1, r4
 8009daa:	4420      	add	r0, r4
 8009dac:	f002 0203 	and.w	r2, r2, #3
 8009db0:	b16b      	cbz	r3, 8009dce <st_int8_copy+0xae>
 8009db2:	6804      	ldr	r4, [r0, #0]
 8009db4:	600c      	str	r4, [r1, #0]
 8009db6:	1e5c      	subs	r4, r3, #1
 8009db8:	d005      	beq.n	8009dc6 <st_int8_copy+0xa6>
 8009dba:	6845      	ldr	r5, [r0, #4]
 8009dbc:	2c01      	cmp	r4, #1
 8009dbe:	604d      	str	r5, [r1, #4]
 8009dc0:	d001      	beq.n	8009dc6 <st_int8_copy+0xa6>
 8009dc2:	6884      	ldr	r4, [r0, #8]
 8009dc4:	608c      	str	r4, [r1, #8]
 8009dc6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8009dca:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8009dce:	b162      	cbz	r2, 8009dea <st_int8_copy+0xca>
 8009dd0:	f990 3000 	ldrsb.w	r3, [r0]
 8009dd4:	3a01      	subs	r2, #1
 8009dd6:	700b      	strb	r3, [r1, #0]
 8009dd8:	d007      	beq.n	8009dea <st_int8_copy+0xca>
 8009dda:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8009dde:	2a01      	cmp	r2, #1
 8009de0:	704b      	strb	r3, [r1, #1]
 8009de2:	d002      	beq.n	8009dea <st_int8_copy+0xca>
 8009de4:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8009de8:	708b      	strb	r3, [r1, #2]
 8009dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dee:	4770      	bx	lr
 8009df0:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8009df4:	460b      	mov	r3, r1
 8009df6:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8009dfa:	4684      	mov	ip, r0
 8009dfc:	f8dc 8000 	ldr.w	r8, [ip]
 8009e00:	3310      	adds	r3, #16
 8009e02:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8009e06:	f10c 0c10 	add.w	ip, ip, #16
 8009e0a:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 8009e0e:	f85c 5c04 	ldr.w	r5, [ip, #-4]
 8009e12:	f843 8c10 	str.w	r8, [r3, #-16]
 8009e16:	f843 7c0c 	str.w	r7, [r3, #-12]
 8009e1a:	f843 6c08 	str.w	r6, [r3, #-8]
 8009e1e:	f843 5c04 	str.w	r5, [r3, #-4]
 8009e22:	459e      	cmp	lr, r3
 8009e24:	d1ea      	bne.n	8009dfc <st_int8_copy+0xdc>
 8009e26:	e7bd      	b.n	8009da4 <st_int8_copy+0x84>
 8009e28:	0893      	lsrs	r3, r2, #2
 8009e2a:	f002 0203 	and.w	r2, r2, #3
 8009e2e:	e7bf      	b.n	8009db0 <st_int8_copy+0x90>

08009e30 <st_int8_reordered_no_shift_zero>:
 8009e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e32:	0897      	lsrs	r7, r2, #2
 8009e34:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 8009e38:	d02f      	beq.n	8009e9a <st_int8_reordered_no_shift_zero+0x6a>
 8009e3a:	eb00 0587 	add.w	r5, r0, r7, lsl #2
 8009e3e:	460c      	mov	r4, r1
 8009e40:	f850 cb04 	ldr.w	ip, [r0], #4
 8009e44:	ea4f 2e3c 	mov.w	lr, ip, ror #8
 8009e48:	fa2f fe8e 	sxtb16	lr, lr
 8009e4c:	fade fe03 	ssub16	lr, lr, r3
 8009e50:	fa2f fc8c 	sxtb16	ip, ip
 8009e54:	fadc fc03 	ssub16	ip, ip, r3
 8009e58:	42a8      	cmp	r0, r5
 8009e5a:	f8c4 c000 	str.w	ip, [r4]
 8009e5e:	f8c4 e004 	str.w	lr, [r4, #4]
 8009e62:	f104 0408 	add.w	r4, r4, #8
 8009e66:	d1eb      	bne.n	8009e40 <st_int8_reordered_no_shift_zero+0x10>
 8009e68:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8009e6c:	f012 0203 	ands.w	r2, r2, #3
 8009e70:	d012      	beq.n	8009e98 <st_int8_reordered_no_shift_zero+0x68>
 8009e72:	f995 0000 	ldrsb.w	r0, [r5]
 8009e76:	b273      	sxtb	r3, r6
 8009e78:	3a01      	subs	r2, #1
 8009e7a:	eba0 0003 	sub.w	r0, r0, r3
 8009e7e:	8008      	strh	r0, [r1, #0]
 8009e80:	d00a      	beq.n	8009e98 <st_int8_reordered_no_shift_zero+0x68>
 8009e82:	f995 0001 	ldrsb.w	r0, [r5, #1]
 8009e86:	2a01      	cmp	r2, #1
 8009e88:	eba0 0003 	sub.w	r0, r0, r3
 8009e8c:	8048      	strh	r0, [r1, #2]
 8009e8e:	d003      	beq.n	8009e98 <st_int8_reordered_no_shift_zero+0x68>
 8009e90:	f995 2002 	ldrsb.w	r2, [r5, #2]
 8009e94:	1ad3      	subs	r3, r2, r3
 8009e96:	808b      	strh	r3, [r1, #4]
 8009e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e9a:	4605      	mov	r5, r0
 8009e9c:	e7e6      	b.n	8009e6c <st_int8_reordered_no_shift_zero+0x3c>
 8009e9e:	bf00      	nop

08009ea0 <st_int8_to16_no_shift>:
 8009ea0:	b570      	push	{r4, r5, r6, lr}
 8009ea2:	f1b2 0410 	subs.w	r4, r2, #16
 8009ea6:	f04f 0e00 	mov.w	lr, #0
 8009eaa:	d438      	bmi.n	8009f1e <st_int8_to16_no_shift+0x7e>
 8009eac:	f8d0 c000 	ldr.w	ip, [r0]
 8009eb0:	6843      	ldr	r3, [r0, #4]
 8009eb2:	fa2f f59c 	sxtb16	r5, ip, ror #8
 8009eb6:	fa2f fc8c 	sxtb16	ip, ip
 8009eba:	eac5 462c 	pkhtb	r6, r5, ip, asr #16
 8009ebe:	eacc 4c05 	pkhbt	ip, ip, r5, lsl #16
 8009ec2:	fa2f f593 	sxtb16	r5, r3, ror #8
 8009ec6:	3010      	adds	r0, #16
 8009ec8:	604e      	str	r6, [r1, #4]
 8009eca:	f8c1 c000 	str.w	ip, [r1]
 8009ece:	fa2f f383 	sxtb16	r3, r3
 8009ed2:	eac5 4623 	pkhtb	r6, r5, r3, asr #16
 8009ed6:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 8009eda:	60ce      	str	r6, [r1, #12]
 8009edc:	608b      	str	r3, [r1, #8]
 8009ede:	f850 cc08 	ldr.w	ip, [r0, #-8]
 8009ee2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8009ee6:	fa2f f59c 	sxtb16	r5, ip, ror #8
 8009eea:	fa2f fc8c 	sxtb16	ip, ip
 8009eee:	eac5 462c 	pkhtb	r6, r5, ip, asr #16
 8009ef2:	eacc 4c05 	pkhbt	ip, ip, r5, lsl #16
 8009ef6:	fa2f f593 	sxtb16	r5, r3, ror #8
 8009efa:	f10e 0e10 	add.w	lr, lr, #16
 8009efe:	f8c1 c010 	str.w	ip, [r1, #16]
 8009f02:	614e      	str	r6, [r1, #20]
 8009f04:	3120      	adds	r1, #32
 8009f06:	45a6      	cmp	lr, r4
 8009f08:	fa2f f383 	sxtb16	r3, r3
 8009f0c:	eac5 4c23 	pkhtb	ip, r5, r3, asr #16
 8009f10:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 8009f14:	f841 cc04 	str.w	ip, [r1, #-4]
 8009f18:	f841 3c08 	str.w	r3, [r1, #-8]
 8009f1c:	ddc6      	ble.n	8009eac <st_int8_to16_no_shift+0xc>
 8009f1e:	1f16      	subs	r6, r2, #4
 8009f20:	4576      	cmp	r6, lr
 8009f22:	db12      	blt.n	8009f4a <st_int8_to16_no_shift+0xaa>
 8009f24:	f850 3b04 	ldr.w	r3, [r0], #4
 8009f28:	fa2f f493 	sxtb16	r4, r3, ror #8
 8009f2c:	f10e 0e04 	add.w	lr, lr, #4
 8009f30:	3108      	adds	r1, #8
 8009f32:	fa2f f383 	sxtb16	r3, r3
 8009f36:	45b6      	cmp	lr, r6
 8009f38:	eac4 4523 	pkhtb	r5, r4, r3, asr #16
 8009f3c:	eac3 4304 	pkhbt	r3, r3, r4, lsl #16
 8009f40:	f841 5c04 	str.w	r5, [r1, #-4]
 8009f44:	f841 3c08 	str.w	r3, [r1, #-8]
 8009f48:	ddec      	ble.n	8009f24 <st_int8_to16_no_shift+0x84>
 8009f4a:	4572      	cmp	r2, lr
 8009f4c:	dd08      	ble.n	8009f60 <st_int8_to16_no_shift+0xc0>
 8009f4e:	eba2 020e 	sub.w	r2, r2, lr
 8009f52:	4402      	add	r2, r0
 8009f54:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8009f58:	4290      	cmp	r0, r2
 8009f5a:	f821 3b02 	strh.w	r3, [r1], #2
 8009f5e:	d1f9      	bne.n	8009f54 <st_int8_to16_no_shift+0xb4>
 8009f60:	bd70      	pop	{r4, r5, r6, pc}
 8009f62:	bf00      	nop

08009f64 <st_int8_to16_no_shift_interleaved>:
 8009f64:	b570      	push	{r4, r5, r6, lr}
 8009f66:	f1b2 0510 	subs.w	r5, r2, #16
 8009f6a:	f04f 0e00 	mov.w	lr, #0
 8009f6e:	d428      	bmi.n	8009fc2 <st_int8_to16_no_shift_interleaved+0x5e>
 8009f70:	f8d0 c000 	ldr.w	ip, [r0]
 8009f74:	6843      	ldr	r3, [r0, #4]
 8009f76:	fa2f f69c 	sxtb16	r6, ip, ror #8
 8009f7a:	fa2f fc8c 	sxtb16	ip, ip
 8009f7e:	fa2f f493 	sxtb16	r4, r3, ror #8
 8009f82:	3010      	adds	r0, #16
 8009f84:	600e      	str	r6, [r1, #0]
 8009f86:	f8c1 c004 	str.w	ip, [r1, #4]
 8009f8a:	608c      	str	r4, [r1, #8]
 8009f8c:	fa2f f383 	sxtb16	r3, r3
 8009f90:	60cb      	str	r3, [r1, #12]
 8009f92:	f850 cc08 	ldr.w	ip, [r0, #-8]
 8009f96:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8009f9a:	fa2f f69c 	sxtb16	r6, ip, ror #8
 8009f9e:	fa2f fc8c 	sxtb16	ip, ip
 8009fa2:	fa2f f493 	sxtb16	r4, r3, ror #8
 8009fa6:	f10e 0e10 	add.w	lr, lr, #16
 8009faa:	610e      	str	r6, [r1, #16]
 8009fac:	f8c1 c014 	str.w	ip, [r1, #20]
 8009fb0:	3120      	adds	r1, #32
 8009fb2:	45ae      	cmp	lr, r5
 8009fb4:	f841 4c08 	str.w	r4, [r1, #-8]
 8009fb8:	fa2f f383 	sxtb16	r3, r3
 8009fbc:	f841 3c04 	str.w	r3, [r1, #-4]
 8009fc0:	ddd6      	ble.n	8009f70 <st_int8_to16_no_shift_interleaved+0xc>
 8009fc2:	1f14      	subs	r4, r2, #4
 8009fc4:	4574      	cmp	r4, lr
 8009fc6:	db10      	blt.n	8009fea <st_int8_to16_no_shift_interleaved+0x86>
 8009fc8:	ebae 0e00 	sub.w	lr, lr, r0
 8009fcc:	f850 3b04 	ldr.w	r3, [r0], #4
 8009fd0:	fa2f fc93 	sxtb16	ip, r3, ror #8
 8009fd4:	eb00 020e 	add.w	r2, r0, lr
 8009fd8:	f8c1 c000 	str.w	ip, [r1]
 8009fdc:	3108      	adds	r1, #8
 8009fde:	4294      	cmp	r4, r2
 8009fe0:	fa2f f383 	sxtb16	r3, r3
 8009fe4:	f841 3c04 	str.w	r3, [r1, #-4]
 8009fe8:	daf0      	bge.n	8009fcc <st_int8_to16_no_shift_interleaved+0x68>
 8009fea:	bd70      	pop	{r4, r5, r6, pc}

08009fec <st_int8_to16_dual>:
 8009fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ff0:	4698      	mov	r8, r3
 8009ff2:	085b      	lsrs	r3, r3, #1
 8009ff4:	eb00 0c02 	add.w	ip, r0, r2
 8009ff8:	f000 80b9 	beq.w	800a16e <st_int8_to16_dual+0x182>
 8009ffc:	f1a2 0710 	sub.w	r7, r2, #16
 800a000:	1f16      	subs	r6, r2, #4
 800a002:	2f00      	cmp	r7, #0
 800a004:	f04f 0500 	mov.w	r5, #0
 800a008:	db73      	blt.n	800a0f2 <st_int8_to16_dual+0x106>
 800a00a:	f8d0 e000 	ldr.w	lr, [r0]
 800a00e:	f8dc 4000 	ldr.w	r4, [ip]
 800a012:	fa2f f99e 	sxtb16	r9, lr, ror #8
 800a016:	fa2f fe8e 	sxtb16	lr, lr
 800a01a:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 800a01e:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 800a022:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a026:	f8c1 e000 	str.w	lr, [r1]
 800a02a:	f8c1 a008 	str.w	sl, [r1, #8]
 800a02e:	fa2f f484 	sxtb16	r4, r4
 800a032:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 800a036:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 800a03a:	f8c1 e00c 	str.w	lr, [r1, #12]
 800a03e:	604c      	str	r4, [r1, #4]
 800a040:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800a044:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800a048:	fa2f f99e 	sxtb16	r9, lr, ror #8
 800a04c:	fa2f fe8e 	sxtb16	lr, lr
 800a050:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 800a054:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 800a058:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a05c:	f8c1 e010 	str.w	lr, [r1, #16]
 800a060:	f8c1 a018 	str.w	sl, [r1, #24]
 800a064:	fa2f f484 	sxtb16	r4, r4
 800a068:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 800a06c:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 800a070:	f8c1 e01c 	str.w	lr, [r1, #28]
 800a074:	614c      	str	r4, [r1, #20]
 800a076:	f8d0 e008 	ldr.w	lr, [r0, #8]
 800a07a:	f8dc 4008 	ldr.w	r4, [ip, #8]
 800a07e:	fa2f f99e 	sxtb16	r9, lr, ror #8
 800a082:	fa2f fe8e 	sxtb16	lr, lr
 800a086:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 800a08a:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 800a08e:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a092:	3010      	adds	r0, #16
 800a094:	f10c 0c10 	add.w	ip, ip, #16
 800a098:	f8c1 e020 	str.w	lr, [r1, #32]
 800a09c:	f8c1 a028 	str.w	sl, [r1, #40]	@ 0x28
 800a0a0:	fa2f f484 	sxtb16	r4, r4
 800a0a4:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 800a0a8:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 800a0ac:	f8c1 e02c 	str.w	lr, [r1, #44]	@ 0x2c
 800a0b0:	624c      	str	r4, [r1, #36]	@ 0x24
 800a0b2:	f850 ec04 	ldr.w	lr, [r0, #-4]
 800a0b6:	f85c 4c04 	ldr.w	r4, [ip, #-4]
 800a0ba:	fa2f fa9e 	sxtb16	sl, lr, ror #8
 800a0be:	fa2f fe8e 	sxtb16	lr, lr
 800a0c2:	eaca 492e 	pkhtb	r9, sl, lr, asr #16
 800a0c6:	eace 4e0a 	pkhbt	lr, lr, sl, lsl #16
 800a0ca:	fa2f fa94 	sxtb16	sl, r4, ror #8
 800a0ce:	3510      	adds	r5, #16
 800a0d0:	f8c1 e030 	str.w	lr, [r1, #48]	@ 0x30
 800a0d4:	f8c1 9038 	str.w	r9, [r1, #56]	@ 0x38
 800a0d8:	3140      	adds	r1, #64	@ 0x40
 800a0da:	42bd      	cmp	r5, r7
 800a0dc:	fa2f f484 	sxtb16	r4, r4
 800a0e0:	eaca 4e24 	pkhtb	lr, sl, r4, asr #16
 800a0e4:	eac4 440a 	pkhbt	r4, r4, sl, lsl #16
 800a0e8:	f841 ec04 	str.w	lr, [r1, #-4]
 800a0ec:	f841 4c0c 	str.w	r4, [r1, #-12]
 800a0f0:	dd8b      	ble.n	800a00a <st_int8_to16_dual+0x1e>
 800a0f2:	42ae      	cmp	r6, r5
 800a0f4:	db1e      	blt.n	800a134 <st_int8_to16_dual+0x148>
 800a0f6:	f850 4b04 	ldr.w	r4, [r0], #4
 800a0fa:	f85c eb04 	ldr.w	lr, [ip], #4
 800a0fe:	fa2f fa94 	sxtb16	sl, r4, ror #8
 800a102:	fa2f f484 	sxtb16	r4, r4
 800a106:	eaca 4924 	pkhtb	r9, sl, r4, asr #16
 800a10a:	eac4 440a 	pkhbt	r4, r4, sl, lsl #16
 800a10e:	fa2f fa9e 	sxtb16	sl, lr, ror #8
 800a112:	3504      	adds	r5, #4
 800a114:	600c      	str	r4, [r1, #0]
 800a116:	f8c1 9008 	str.w	r9, [r1, #8]
 800a11a:	3110      	adds	r1, #16
 800a11c:	42b5      	cmp	r5, r6
 800a11e:	fa2f fe8e 	sxtb16	lr, lr
 800a122:	eaca 442e 	pkhtb	r4, sl, lr, asr #16
 800a126:	eace 4e0a 	pkhbt	lr, lr, sl, lsl #16
 800a12a:	f841 4c04 	str.w	r4, [r1, #-4]
 800a12e:	f841 ec0c 	str.w	lr, [r1, #-12]
 800a132:	dde0      	ble.n	800a0f6 <st_int8_to16_dual+0x10a>
 800a134:	42aa      	cmp	r2, r5
 800a136:	dd40      	ble.n	800a1ba <st_int8_to16_dual+0x1ce>
 800a138:	1b55      	subs	r5, r2, r5
 800a13a:	1d0c      	adds	r4, r1, #4
 800a13c:	46e6      	mov	lr, ip
 800a13e:	eb00 0a05 	add.w	sl, r0, r5
 800a142:	f910 9b01 	ldrsb.w	r9, [r0], #1
 800a146:	3404      	adds	r4, #4
 800a148:	f824 9c08 	strh.w	r9, [r4, #-8]
 800a14c:	4550      	cmp	r0, sl
 800a14e:	f91e 9b01 	ldrsb.w	r9, [lr], #1
 800a152:	f824 9c06 	strh.w	r9, [r4, #-6]
 800a156:	d1f4      	bne.n	800a142 <st_int8_to16_dual+0x156>
 800a158:	44ac      	add	ip, r5
 800a15a:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800a15e:	3b01      	subs	r3, #1
 800a160:	eb0a 0002 	add.w	r0, sl, r2
 800a164:	4494      	add	ip, r2
 800a166:	b29b      	uxth	r3, r3
 800a168:	2b00      	cmp	r3, #0
 800a16a:	f47f af4a 	bne.w	800a002 <st_int8_to16_dual+0x16>
 800a16e:	f018 0f01 	tst.w	r8, #1
 800a172:	d020      	beq.n	800a1b6 <st_int8_to16_dual+0x1ca>
 800a174:	1f17      	subs	r7, r2, #4
 800a176:	f04f 0400 	mov.w	r4, #0
 800a17a:	d411      	bmi.n	800a1a0 <st_int8_to16_dual+0x1b4>
 800a17c:	f850 3b04 	ldr.w	r3, [r0], #4
 800a180:	fa2f f593 	sxtb16	r5, r3, ror #8
 800a184:	3404      	adds	r4, #4
 800a186:	3108      	adds	r1, #8
 800a188:	fa2f f383 	sxtb16	r3, r3
 800a18c:	42a7      	cmp	r7, r4
 800a18e:	eac5 4623 	pkhtb	r6, r5, r3, asr #16
 800a192:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 800a196:	f841 6c04 	str.w	r6, [r1, #-4]
 800a19a:	f841 3c08 	str.w	r3, [r1, #-8]
 800a19e:	daed      	bge.n	800a17c <st_int8_to16_dual+0x190>
 800a1a0:	42a2      	cmp	r2, r4
 800a1a2:	dd08      	ble.n	800a1b6 <st_int8_to16_dual+0x1ca>
 800a1a4:	1b13      	subs	r3, r2, r4
 800a1a6:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800a1aa:	f910 2b01 	ldrsb.w	r2, [r0], #1
 800a1ae:	f821 2b02 	strh.w	r2, [r1], #2
 800a1b2:	428b      	cmp	r3, r1
 800a1b4:	d1f9      	bne.n	800a1aa <st_int8_to16_dual+0x1be>
 800a1b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1ba:	4682      	mov	sl, r0
 800a1bc:	e7cf      	b.n	800a15e <st_int8_to16_dual+0x172>
 800a1be:	bf00      	nop

0800a1c0 <st_int8_to16_dual_interleaved>:
 800a1c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1c4:	4698      	mov	r8, r3
 800a1c6:	085b      	lsrs	r3, r3, #1
 800a1c8:	eb00 0c02 	add.w	ip, r0, r2
 800a1cc:	f000 808f 	beq.w	800a2ee <st_int8_to16_dual_interleaved+0x12e>
 800a1d0:	f1a2 0710 	sub.w	r7, r2, #16
 800a1d4:	1f16      	subs	r6, r2, #4
 800a1d6:	2f00      	cmp	r7, #0
 800a1d8:	f04f 0e00 	mov.w	lr, #0
 800a1dc:	db4e      	blt.n	800a27c <st_int8_to16_dual_interleaved+0xbc>
 800a1de:	6805      	ldr	r5, [r0, #0]
 800a1e0:	f8dc 4000 	ldr.w	r4, [ip]
 800a1e4:	fa2f fa95 	sxtb16	sl, r5, ror #8
 800a1e8:	fa2f f585 	sxtb16	r5, r5
 800a1ec:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a1f0:	f8c1 a000 	str.w	sl, [r1]
 800a1f4:	f8c1 9004 	str.w	r9, [r1, #4]
 800a1f8:	608d      	str	r5, [r1, #8]
 800a1fa:	fa2f f484 	sxtb16	r4, r4
 800a1fe:	60cc      	str	r4, [r1, #12]
 800a200:	6845      	ldr	r5, [r0, #4]
 800a202:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800a206:	fa2f fa95 	sxtb16	sl, r5, ror #8
 800a20a:	fa2f f585 	sxtb16	r5, r5
 800a20e:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a212:	f8c1 a010 	str.w	sl, [r1, #16]
 800a216:	f8c1 9014 	str.w	r9, [r1, #20]
 800a21a:	618d      	str	r5, [r1, #24]
 800a21c:	fa2f f484 	sxtb16	r4, r4
 800a220:	61cc      	str	r4, [r1, #28]
 800a222:	6885      	ldr	r5, [r0, #8]
 800a224:	f8dc 4008 	ldr.w	r4, [ip, #8]
 800a228:	fa2f fa95 	sxtb16	sl, r5, ror #8
 800a22c:	fa2f f585 	sxtb16	r5, r5
 800a230:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a234:	3010      	adds	r0, #16
 800a236:	f10c 0c10 	add.w	ip, ip, #16
 800a23a:	f8c1 a020 	str.w	sl, [r1, #32]
 800a23e:	f8c1 9024 	str.w	r9, [r1, #36]	@ 0x24
 800a242:	628d      	str	r5, [r1, #40]	@ 0x28
 800a244:	fa2f f484 	sxtb16	r4, r4
 800a248:	62cc      	str	r4, [r1, #44]	@ 0x2c
 800a24a:	f850 5c04 	ldr.w	r5, [r0, #-4]
 800a24e:	f85c 4c04 	ldr.w	r4, [ip, #-4]
 800a252:	fa2f fa95 	sxtb16	sl, r5, ror #8
 800a256:	fa2f f585 	sxtb16	r5, r5
 800a25a:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a25e:	f10e 0e10 	add.w	lr, lr, #16
 800a262:	f8c1 a030 	str.w	sl, [r1, #48]	@ 0x30
 800a266:	f8c1 9034 	str.w	r9, [r1, #52]	@ 0x34
 800a26a:	3140      	adds	r1, #64	@ 0x40
 800a26c:	45be      	cmp	lr, r7
 800a26e:	f841 5c08 	str.w	r5, [r1, #-8]
 800a272:	fa2f f484 	sxtb16	r4, r4
 800a276:	f841 4c04 	str.w	r4, [r1, #-4]
 800a27a:	ddb0      	ble.n	800a1de <st_int8_to16_dual_interleaved+0x1e>
 800a27c:	4576      	cmp	r6, lr
 800a27e:	db18      	blt.n	800a2b2 <st_int8_to16_dual_interleaved+0xf2>
 800a280:	f850 5b04 	ldr.w	r5, [r0], #4
 800a284:	f85c 4b04 	ldr.w	r4, [ip], #4
 800a288:	fa2f fa95 	sxtb16	sl, r5, ror #8
 800a28c:	fa2f f585 	sxtb16	r5, r5
 800a290:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a294:	f10e 0e04 	add.w	lr, lr, #4
 800a298:	f8c1 a000 	str.w	sl, [r1]
 800a29c:	f8c1 9004 	str.w	r9, [r1, #4]
 800a2a0:	3110      	adds	r1, #16
 800a2a2:	45b6      	cmp	lr, r6
 800a2a4:	f841 5c08 	str.w	r5, [r1, #-8]
 800a2a8:	fa2f f484 	sxtb16	r4, r4
 800a2ac:	f841 4c04 	str.w	r4, [r1, #-4]
 800a2b0:	dde6      	ble.n	800a280 <st_int8_to16_dual_interleaved+0xc0>
 800a2b2:	4572      	cmp	r2, lr
 800a2b4:	dd3c      	ble.n	800a330 <st_int8_to16_dual_interleaved+0x170>
 800a2b6:	eba2 0e0e 	sub.w	lr, r2, lr
 800a2ba:	1d0c      	adds	r4, r1, #4
 800a2bc:	4665      	mov	r5, ip
 800a2be:	eb00 0a0e 	add.w	sl, r0, lr
 800a2c2:	f910 9b01 	ldrsb.w	r9, [r0], #1
 800a2c6:	3404      	adds	r4, #4
 800a2c8:	f824 9c08 	strh.w	r9, [r4, #-8]
 800a2cc:	4550      	cmp	r0, sl
 800a2ce:	f915 9b01 	ldrsb.w	r9, [r5], #1
 800a2d2:	f824 9c06 	strh.w	r9, [r4, #-6]
 800a2d6:	d1f4      	bne.n	800a2c2 <st_int8_to16_dual_interleaved+0x102>
 800a2d8:	44f4      	add	ip, lr
 800a2da:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 800a2de:	3b01      	subs	r3, #1
 800a2e0:	eb0a 0002 	add.w	r0, sl, r2
 800a2e4:	4494      	add	ip, r2
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	f47f af74 	bne.w	800a1d6 <st_int8_to16_dual_interleaved+0x16>
 800a2ee:	f018 0f01 	tst.w	r8, #1
 800a2f2:	d01b      	beq.n	800a32c <st_int8_to16_dual_interleaved+0x16c>
 800a2f4:	1f16      	subs	r6, r2, #4
 800a2f6:	f04f 0400 	mov.w	r4, #0
 800a2fa:	d40c      	bmi.n	800a316 <st_int8_to16_dual_interleaved+0x156>
 800a2fc:	f850 3b04 	ldr.w	r3, [r0], #4
 800a300:	fa2f f593 	sxtb16	r5, r3, ror #8
 800a304:	3404      	adds	r4, #4
 800a306:	600d      	str	r5, [r1, #0]
 800a308:	3108      	adds	r1, #8
 800a30a:	42a6      	cmp	r6, r4
 800a30c:	fa2f f383 	sxtb16	r3, r3
 800a310:	f841 3c04 	str.w	r3, [r1, #-4]
 800a314:	daf2      	bge.n	800a2fc <st_int8_to16_dual_interleaved+0x13c>
 800a316:	42a2      	cmp	r2, r4
 800a318:	dd08      	ble.n	800a32c <st_int8_to16_dual_interleaved+0x16c>
 800a31a:	1b13      	subs	r3, r2, r4
 800a31c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800a320:	f910 2b01 	ldrsb.w	r2, [r0], #1
 800a324:	f821 2b02 	strh.w	r2, [r1], #2
 800a328:	428b      	cmp	r3, r1
 800a32a:	d1f9      	bne.n	800a320 <st_int8_to16_dual_interleaved+0x160>
 800a32c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a330:	4682      	mov	sl, r0
 800a332:	e7d4      	b.n	800a2de <st_int8_to16_dual_interleaved+0x11e>

0800a334 <ai_padding_opt_init>:
 800a334:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a338:	2700      	movs	r7, #0
 800a33a:	9c07      	ldr	r4, [sp, #28]
 800a33c:	e9c0 7700 	strd	r7, r7, [r0]
 800a340:	6087      	str	r7, [r0, #8]
 800a342:	46b9      	mov	r9, r7
 800a344:	690d      	ldr	r5, [r1, #16]
 800a346:	f1c5 0c00 	rsb	ip, r5, #0
 800a34a:	689d      	ldr	r5, [r3, #8]
 800a34c:	42bd      	cmp	r5, r7
 800a34e:	dd1c      	ble.n	800a38a <ai_padding_opt_init+0x56>
 800a350:	463e      	mov	r6, r7
 800a352:	46be      	mov	lr, r7
 800a354:	e010      	b.n	800a378 <ai_padding_opt_init+0x44>
 800a356:	6895      	ldr	r5, [r2, #8]
 800a358:	eba5 080c 	sub.w	r8, r5, ip
 800a35c:	68a5      	ldr	r5, [r4, #8]
 800a35e:	45a8      	cmp	r8, r5
 800a360:	da10      	bge.n	800a384 <ai_padding_opt_init+0x50>
 800a362:	f109 0901 	add.w	r9, r9, #1
 800a366:	f8c0 9008 	str.w	r9, [r0, #8]
 800a36a:	688d      	ldr	r5, [r1, #8]
 800a36c:	f10e 0e01 	add.w	lr, lr, #1
 800a370:	44ac      	add	ip, r5
 800a372:	689d      	ldr	r5, [r3, #8]
 800a374:	4575      	cmp	r5, lr
 800a376:	dd09      	ble.n	800a38c <ai_padding_opt_init+0x58>
 800a378:	f1bc 0f00 	cmp.w	ip, #0
 800a37c:	daeb      	bge.n	800a356 <ai_padding_opt_init+0x22>
 800a37e:	3601      	adds	r6, #1
 800a380:	6006      	str	r6, [r0, #0]
 800a382:	e7f2      	b.n	800a36a <ai_padding_opt_init+0x36>
 800a384:	3701      	adds	r7, #1
 800a386:	6047      	str	r7, [r0, #4]
 800a388:	e7ef      	b.n	800a36a <ai_padding_opt_init+0x36>
 800a38a:	463e      	mov	r6, r7
 800a38c:	2500      	movs	r5, #0
 800a38e:	f8c0 9014 	str.w	r9, [r0, #20]
 800a392:	e9c0 6703 	strd	r6, r7, [r0, #12]
 800a396:	e9c0 5506 	strd	r5, r5, [r0, #24]
 800a39a:	6205      	str	r5, [r0, #32]
 800a39c:	694e      	ldr	r6, [r1, #20]
 800a39e:	f1c6 0c00 	rsb	ip, r6, #0
 800a3a2:	685e      	ldr	r6, [r3, #4]
 800a3a4:	42ae      	cmp	r6, r5
 800a3a6:	dd1c      	ble.n	800a3e2 <ai_padding_opt_init+0xae>
 800a3a8:	46ae      	mov	lr, r5
 800a3aa:	e00f      	b.n	800a3cc <ai_padding_opt_init+0x98>
 800a3ac:	6855      	ldr	r5, [r2, #4]
 800a3ae:	6866      	ldr	r6, [r4, #4]
 800a3b0:	eba5 050c 	sub.w	r5, r5, ip
 800a3b4:	42b5      	cmp	r5, r6
 800a3b6:	da10      	bge.n	800a3da <ai_padding_opt_init+0xa6>
 800a3b8:	6a05      	ldr	r5, [r0, #32]
 800a3ba:	3501      	adds	r5, #1
 800a3bc:	6205      	str	r5, [r0, #32]
 800a3be:	68cd      	ldr	r5, [r1, #12]
 800a3c0:	f10e 0e01 	add.w	lr, lr, #1
 800a3c4:	44ac      	add	ip, r5
 800a3c6:	685d      	ldr	r5, [r3, #4]
 800a3c8:	4575      	cmp	r5, lr
 800a3ca:	dd0a      	ble.n	800a3e2 <ai_padding_opt_init+0xae>
 800a3cc:	f1bc 0f00 	cmp.w	ip, #0
 800a3d0:	daec      	bge.n	800a3ac <ai_padding_opt_init+0x78>
 800a3d2:	6985      	ldr	r5, [r0, #24]
 800a3d4:	3501      	adds	r5, #1
 800a3d6:	6185      	str	r5, [r0, #24]
 800a3d8:	e7f1      	b.n	800a3be <ai_padding_opt_init+0x8a>
 800a3da:	69c5      	ldr	r5, [r0, #28]
 800a3dc:	3501      	adds	r5, #1
 800a3de:	61c5      	str	r5, [r0, #28]
 800a3e0:	e7ed      	b.n	800a3be <ai_padding_opt_init+0x8a>
 800a3e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3e6:	bf00      	nop

0800a3e8 <ai_padding_opt_phase1>:
 800a3e8:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 800a3ec:	b923      	cbnz	r3, 800a3f8 <ai_padding_opt_phase1+0x10>
 800a3ee:	b17a      	cbz	r2, 800a410 <ai_padding_opt_phase1+0x28>
 800a3f0:	3a01      	subs	r2, #1
 800a3f2:	8483      	strh	r3, [r0, #36]	@ 0x24
 800a3f4:	61c2      	str	r2, [r0, #28]
 800a3f6:	e004      	b.n	800a402 <ai_padding_opt_phase1+0x1a>
 800a3f8:	b152      	cbz	r2, 800a410 <ai_padding_opt_phase1+0x28>
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	3b01      	subs	r3, #1
 800a3fe:	8482      	strh	r2, [r0, #36]	@ 0x24
 800a400:	6183      	str	r3, [r0, #24]
 800a402:	68c3      	ldr	r3, [r0, #12]
 800a404:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
 800a408:	6003      	str	r3, [r0, #0]
 800a40a:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800a40e:	4770      	bx	lr
 800a410:	6a03      	ldr	r3, [r0, #32]
 800a412:	2201      	movs	r2, #1
 800a414:	3b01      	subs	r3, #1
 800a416:	8482      	strh	r2, [r0, #36]	@ 0x24
 800a418:	6203      	str	r3, [r0, #32]
 800a41a:	e7f2      	b.n	800a402 <ai_padding_opt_phase1+0x1a>

0800a41c <st_sssa8_ch_nn_mat_mult_kernel_opt>:
 800a41c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a420:	b09b      	sub	sp, #108	@ 0x6c
 800a422:	4683      	mov	fp, r0
 800a424:	f89d 00ac 	ldrb.w	r0, [sp, #172]	@ 0xac
 800a428:	9317      	str	r3, [sp, #92]	@ 0x5c
 800a42a:	2800      	cmp	r0, #0
 800a42c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a42e:	9825      	ldr	r0, [sp, #148]	@ 0x94
 800a430:	bf18      	it	ne
 800a432:	2301      	movne	r3, #1
 800a434:	f8bd 4098 	ldrh.w	r4, [sp, #152]	@ 0x98
 800a438:	910c      	str	r1, [sp, #48]	@ 0x30
 800a43a:	fb00 3303 	mla	r3, r0, r3, r3
 800a43e:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 800a440:	9414      	str	r4, [sp, #80]	@ 0x50
 800a442:	0864      	lsrs	r4, r4, #1
 800a444:	4403      	add	r3, r0
 800a446:	f8bd 009c 	ldrh.w	r0, [sp, #156]	@ 0x9c
 800a44a:	9205      	str	r2, [sp, #20]
 800a44c:	9302      	str	r3, [sp, #8]
 800a44e:	9006      	str	r0, [sp, #24]
 800a450:	9415      	str	r4, [sp, #84]	@ 0x54
 800a452:	f000 81c6 	beq.w	800a7e2 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3c6>
 800a456:	460d      	mov	r5, r1
 800a458:	4601      	mov	r1, r0
 800a45a:	f1a0 0310 	sub.w	r3, r0, #16
 800a45e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800a462:	1ece      	subs	r6, r1, #3
 800a464:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 800a468:	091b      	lsrs	r3, r3, #4
 800a46a:	920e      	str	r2, [sp, #56]	@ 0x38
 800a46c:	960d      	str	r6, [sp, #52]	@ 0x34
 800a46e:	46d9      	mov	r9, fp
 800a470:	9e28      	ldr	r6, [sp, #160]	@ 0xa0
 800a472:	3301      	adds	r3, #1
 800a474:	900f      	str	r0, [sp, #60]	@ 0x3c
 800a476:	3604      	adds	r6, #4
 800a478:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 800a47c:	9601      	str	r6, [sp, #4]
 800a47e:	9e29      	ldr	r6, [sp, #164]	@ 0xa4
 800a480:	9207      	str	r2, [sp, #28]
 800a482:	011a      	lsls	r2, r3, #4
 800a484:	3608      	adds	r6, #8
 800a486:	9212      	str	r2, [sp, #72]	@ 0x48
 800a488:	019a      	lsls	r2, r3, #6
 800a48a:	9604      	str	r6, [sp, #16]
 800a48c:	eb05 1343 	add.w	r3, r5, r3, lsl #5
 800a490:	9e2a      	ldr	r6, [sp, #168]	@ 0xa8
 800a492:	9311      	str	r3, [sp, #68]	@ 0x44
 800a494:	1f0b      	subs	r3, r1, #4
 800a496:	3608      	adds	r6, #8
 800a498:	9210      	str	r2, [sp, #64]	@ 0x40
 800a49a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a49c:	9603      	str	r6, [sp, #12]
 800a49e:	00e6      	lsls	r6, r4, #3
 800a4a0:	9616      	str	r6, [sp, #88]	@ 0x58
 800a4a2:	9905      	ldr	r1, [sp, #20]
 800a4a4:	9c06      	ldr	r4, [sp, #24]
 800a4a6:	680b      	ldr	r3, [r1, #0]
 800a4a8:	3108      	adds	r1, #8
 800a4aa:	2c0f      	cmp	r4, #15
 800a4ac:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800a4ae:	9319      	str	r3, [sp, #100]	@ 0x64
 800a4b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a4b2:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a4b4:	f851 2c04 	ldr.w	r2, [r1, #-4]
 800a4b8:	9105      	str	r1, [sp, #20]
 800a4ba:	9219      	str	r2, [sp, #100]	@ 0x64
 800a4bc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a4be:	9919      	ldr	r1, [sp, #100]	@ 0x64
 800a4c0:	f340 82c1 	ble.w	800aa46 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x62a>
 800a4c4:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 800a4c6:	464c      	mov	r4, r9
 800a4c8:	9e07      	ldr	r6, [sp, #28]
 800a4ca:	f8d7 e000 	ldr.w	lr, [r7]
 800a4ce:	f8d5 a000 	ldr.w	sl, [r5]
 800a4d2:	f8d4 c000 	ldr.w	ip, [r4]
 800a4d6:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800a4da:	fb2c 330e 	smlad	r3, ip, lr, r3
 800a4de:	fb2c 000a 	smlad	r0, ip, sl, r0
 800a4e2:	fb28 2e0e 	smlad	lr, r8, lr, r2
 800a4e6:	fb28 110a 	smlad	r1, r8, sl, r1
 800a4ea:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800a4ee:	f8d5 8004 	ldr.w	r8, [r5, #4]
 800a4f2:	68a2      	ldr	r2, [r4, #8]
 800a4f4:	f8d4 b00c 	ldr.w	fp, [r4, #12]
 800a4f8:	fb22 330c 	smlad	r3, r2, ip, r3
 800a4fc:	fb22 0008 	smlad	r0, r2, r8, r0
 800a500:	fb2b ee0c 	smlad	lr, fp, ip, lr
 800a504:	fb2b 1808 	smlad	r8, fp, r8, r1
 800a508:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800a50c:	f8d5 b008 	ldr.w	fp, [r5, #8]
 800a510:	6922      	ldr	r2, [r4, #16]
 800a512:	f8d4 a014 	ldr.w	sl, [r4, #20]
 800a516:	fb22 330c 	smlad	r3, r2, ip, r3
 800a51a:	fb22 000b 	smlad	r0, r2, fp, r0
 800a51e:	fb2a ee0c 	smlad	lr, sl, ip, lr
 800a522:	fb2a 8b0b 	smlad	fp, sl, fp, r8
 800a526:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800a52a:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800a52e:	f8d4 8018 	ldr.w	r8, [r4, #24]
 800a532:	69e1      	ldr	r1, [r4, #28]
 800a534:	fb28 330c 	smlad	r3, r8, ip, r3
 800a538:	fb28 000a 	smlad	r0, r8, sl, r0
 800a53c:	fb21 ec0c 	smlad	ip, r1, ip, lr
 800a540:	fb21 ba0a 	smlad	sl, r1, sl, fp
 800a544:	f8d7 e010 	ldr.w	lr, [r7, #16]
 800a548:	6929      	ldr	r1, [r5, #16]
 800a54a:	f8d4 8020 	ldr.w	r8, [r4, #32]
 800a54e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800a550:	fb28 330e 	smlad	r3, r8, lr, r3
 800a554:	fb28 0001 	smlad	r0, r8, r1, r0
 800a558:	fb22 cc0e 	smlad	ip, r2, lr, ip
 800a55c:	fb22 a101 	smlad	r1, r2, r1, sl
 800a560:	f8d7 e014 	ldr.w	lr, [r7, #20]
 800a564:	f8d5 a014 	ldr.w	sl, [r5, #20]
 800a568:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
 800a56c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a56e:	fb28 330e 	smlad	r3, r8, lr, r3
 800a572:	fb28 000a 	smlad	r0, r8, sl, r0
 800a576:	fb22 cc0e 	smlad	ip, r2, lr, ip
 800a57a:	fb22 120a 	smlad	r2, r2, sl, r1
 800a57e:	f8d7 e018 	ldr.w	lr, [r7, #24]
 800a582:	f8d5 b018 	ldr.w	fp, [r5, #24]
 800a586:	f8d4 8030 	ldr.w	r8, [r4, #48]	@ 0x30
 800a58a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a58c:	fb28 330e 	smlad	r3, r8, lr, r3
 800a590:	fb28 080b 	smlad	r8, r8, fp, r0
 800a594:	fb21 ce0e 	smlad	lr, r1, lr, ip
 800a598:	fb21 210b 	smlad	r1, r1, fp, r2
 800a59c:	69fa      	ldr	r2, [r7, #28]
 800a59e:	3520      	adds	r5, #32
 800a5a0:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800a5a2:	3720      	adds	r7, #32
 800a5a4:	f8d4 c03c 	ldr.w	ip, [r4, #60]	@ 0x3c
 800a5a8:	3440      	adds	r4, #64	@ 0x40
 800a5aa:	f855 bc04 	ldr.w	fp, [r5, #-4]
 800a5ae:	fb20 3302 	smlad	r3, r0, r2, r3
 800a5b2:	fb20 800b 	smlad	r0, r0, fp, r8
 800a5b6:	fb2c e202 	smlad	r2, ip, r2, lr
 800a5ba:	fb2c 110b 	smlad	r1, ip, fp, r1
 800a5be:	42b5      	cmp	r5, r6
 800a5c0:	d183      	bne.n	800a4ca <st_sssa8_ch_nn_mat_mult_kernel_opt+0xae>
 800a5c2:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800a5c4:	f8dd b048 	ldr.w	fp, [sp, #72]	@ 0x48
 800a5c8:	44a1      	add	r9, r4
 800a5ca:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800a5cc:	9d07      	ldr	r5, [sp, #28]
 800a5ce:	9400      	str	r4, [sp, #0]
 800a5d0:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 800a5d2:	45a3      	cmp	fp, r4
 800a5d4:	f280 823f 	bge.w	800aa56 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x63a>
 800a5d8:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800a5da:	f8dd c000 	ldr.w	ip, [sp]
 800a5de:	eba4 040b 	sub.w	r4, r4, fp
 800a5e2:	08a4      	lsrs	r4, r4, #2
 800a5e4:	4626      	mov	r6, r4
 800a5e6:	940a      	str	r4, [sp, #40]	@ 0x28
 800a5e8:	464c      	mov	r4, r9
 800a5ea:	3601      	adds	r6, #1
 800a5ec:	00f7      	lsls	r7, r6, #3
 800a5ee:	9609      	str	r6, [sp, #36]	@ 0x24
 800a5f0:	eb05 08c6 	add.w	r8, r5, r6, lsl #3
 800a5f4:	9708      	str	r7, [sp, #32]
 800a5f6:	f8dc e000 	ldr.w	lr, [ip]
 800a5fa:	682f      	ldr	r7, [r5, #0]
 800a5fc:	f8d4 a000 	ldr.w	sl, [r4]
 800a600:	6866      	ldr	r6, [r4, #4]
 800a602:	fb2a 330e 	smlad	r3, sl, lr, r3
 800a606:	fb2a 0007 	smlad	r0, sl, r7, r0
 800a60a:	fb26 220e 	smlad	r2, r6, lr, r2
 800a60e:	fb26 1107 	smlad	r1, r6, r7, r1
 800a612:	f8dc 7004 	ldr.w	r7, [ip, #4]
 800a616:	3508      	adds	r5, #8
 800a618:	68a6      	ldr	r6, [r4, #8]
 800a61a:	f10c 0c08 	add.w	ip, ip, #8
 800a61e:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 800a622:	3410      	adds	r4, #16
 800a624:	f855 ac04 	ldr.w	sl, [r5, #-4]
 800a628:	fb26 3307 	smlad	r3, r6, r7, r3
 800a62c:	fb26 000a 	smlad	r0, r6, sl, r0
 800a630:	fb2e 2207 	smlad	r2, lr, r7, r2
 800a634:	fb2e 110a 	smlad	r1, lr, sl, r1
 800a638:	4545      	cmp	r5, r8
 800a63a:	d1dc      	bne.n	800a5f6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1da>
 800a63c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800a63e:	f10b 0b04 	add.w	fp, fp, #4
 800a642:	9d08      	ldr	r5, [sp, #32]
 800a644:	eb09 1904 	add.w	r9, r9, r4, lsl #4
 800a648:	9c00      	ldr	r4, [sp, #0]
 800a64a:	442c      	add	r4, r5
 800a64c:	9400      	str	r4, [sp, #0]
 800a64e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a650:	eb0b 0b84 	add.w	fp, fp, r4, lsl #2
 800a654:	9f06      	ldr	r7, [sp, #24]
 800a656:	455f      	cmp	r7, fp
 800a658:	dd54      	ble.n	800a704 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2e8>
 800a65a:	9c00      	ldr	r4, [sp, #0]
 800a65c:	f9b9 6000 	ldrsh.w	r6, [r9]
 800a660:	f9b4 4000 	ldrsh.w	r4, [r4]
 800a664:	f9b9 5002 	ldrsh.w	r5, [r9, #2]
 800a668:	fb04 3306 	mla	r3, r4, r6, r3
 800a66c:	fb05 2204 	mla	r2, r5, r4, r2
 800a670:	f9b8 4000 	ldrsh.w	r4, [r8]
 800a674:	fb04 0006 	mla	r0, r4, r6, r0
 800a678:	fb05 1104 	mla	r1, r5, r4, r1
 800a67c:	f10b 0401 	add.w	r4, fp, #1
 800a680:	42bc      	cmp	r4, r7
 800a682:	da3a      	bge.n	800a6fa <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2de>
 800a684:	9c00      	ldr	r4, [sp, #0]
 800a686:	f9b9 6004 	ldrsh.w	r6, [r9, #4]
 800a68a:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
 800a68e:	f9b9 4006 	ldrsh.w	r4, [r9, #6]
 800a692:	fb05 3306 	mla	r3, r5, r6, r3
 800a696:	fb05 2204 	mla	r2, r5, r4, r2
 800a69a:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 800a69e:	fb05 1104 	mla	r1, r5, r4, r1
 800a6a2:	f10b 0402 	add.w	r4, fp, #2
 800a6a6:	fb06 0005 	mla	r0, r6, r5, r0
 800a6aa:	42a7      	cmp	r7, r4
 800a6ac:	dd25      	ble.n	800a6fa <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2de>
 800a6ae:	9c00      	ldr	r4, [sp, #0]
 800a6b0:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 800a6b4:	f9b4 5004 	ldrsh.w	r5, [r4, #4]
 800a6b8:	f9b9 400a 	ldrsh.w	r4, [r9, #10]
 800a6bc:	fb06 3305 	mla	r3, r6, r5, r3
 800a6c0:	fb05 2204 	mla	r2, r5, r4, r2
 800a6c4:	f9b8 5004 	ldrsh.w	r5, [r8, #4]
 800a6c8:	fb05 1104 	mla	r1, r5, r4, r1
 800a6cc:	f10b 0403 	add.w	r4, fp, #3
 800a6d0:	fb06 0005 	mla	r0, r6, r5, r0
 800a6d4:	42a7      	cmp	r7, r4
 800a6d6:	dd10      	ble.n	800a6fa <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2de>
 800a6d8:	9c00      	ldr	r4, [sp, #0]
 800a6da:	f9b8 6006 	ldrsh.w	r6, [r8, #6]
 800a6de:	f9b4 5006 	ldrsh.w	r5, [r4, #6]
 800a6e2:	f9b9 400c 	ldrsh.w	r4, [r9, #12]
 800a6e6:	fb04 3305 	mla	r3, r4, r5, r3
 800a6ea:	fb04 0006 	mla	r0, r4, r6, r0
 800a6ee:	f9b9 400e 	ldrsh.w	r4, [r9, #14]
 800a6f2:	fb05 2204 	mla	r2, r5, r4, r2
 800a6f6:	fb06 1104 	mla	r1, r6, r4, r1
 800a6fa:	9c06      	ldr	r4, [sp, #24]
 800a6fc:	eba4 0b0b 	sub.w	fp, r4, fp
 800a700:	eb09 098b 	add.w	r9, r9, fp, lsl #2
 800a704:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a706:	2c00      	cmp	r4, #0
 800a708:	f000 80f2 	beq.w	800a8f0 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4d4>
 800a70c:	9c01      	ldr	r4, [sp, #4]
 800a70e:	f934 4c04 	ldrsh.w	r4, [r4, #-4]
 800a712:	2c15      	cmp	r4, #21
 800a714:	f340 8147 	ble.w	800a9a6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x58a>
 800a718:	1ea5      	subs	r5, r4, #2
 800a71a:	2601      	movs	r6, #1
 800a71c:	3c01      	subs	r4, #1
 800a71e:	fa06 f505 	lsl.w	r5, r6, r5
 800a722:	9e04      	ldr	r6, [sp, #16]
 800a724:	f856 6c08 	ldr.w	r6, [r6, #-8]
 800a728:	fb53 5306 	smmla	r3, r3, r6, r5
 800a72c:	fb50 5006 	smmla	r0, r0, r6, r5
 800a730:	9d03      	ldr	r5, [sp, #12]
 800a732:	4123      	asrs	r3, r4
 800a734:	9e04      	ldr	r6, [sp, #16]
 800a736:	f855 7c08 	ldr.w	r7, [r5, #-8]
 800a73a:	1f35      	subs	r5, r6, #4
 800a73c:	9e03      	ldr	r6, [sp, #12]
 800a73e:	443b      	add	r3, r7
 800a740:	3e04      	subs	r6, #4
 800a742:	f303 0307 	ssat	r3, #8, r3
 800a746:	4120      	asrs	r0, r4
 800a748:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 800a74a:	4438      	add	r0, r7
 800a74c:	7023      	strb	r3, [r4, #0]
 800a74e:	f300 0007 	ssat	r0, #8, r0
 800a752:	9b02      	ldr	r3, [sp, #8]
 800a754:	7018      	strb	r0, [r3, #0]
 800a756:	4620      	mov	r0, r4
 800a758:	9b01      	ldr	r3, [sp, #4]
 800a75a:	9c24      	ldr	r4, [sp, #144]	@ 0x90
 800a75c:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
 800a760:	1904      	adds	r4, r0, r4
 800a762:	9f24      	ldr	r7, [sp, #144]	@ 0x90
 800a764:	9802      	ldr	r0, [sp, #8]
 800a766:	2b15      	cmp	r3, #21
 800a768:	4438      	add	r0, r7
 800a76a:	f340 8109 	ble.w	800a980 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x564>
 800a76e:	682f      	ldr	r7, [r5, #0]
 800a770:	f04f 0c01 	mov.w	ip, #1
 800a774:	1e9d      	subs	r5, r3, #2
 800a776:	3b01      	subs	r3, #1
 800a778:	6836      	ldr	r6, [r6, #0]
 800a77a:	fa0c f505 	lsl.w	r5, ip, r5
 800a77e:	fb52 5207 	smmla	r2, r2, r7, r5
 800a782:	411a      	asrs	r2, r3
 800a784:	fb51 5107 	smmla	r1, r1, r7, r5
 800a788:	4432      	add	r2, r6
 800a78a:	f302 0207 	ssat	r2, #8, r2
 800a78e:	9d2c      	ldr	r5, [sp, #176]	@ 0xb0
 800a790:	4119      	asrs	r1, r3
 800a792:	9f24      	ldr	r7, [sp, #144]	@ 0x90
 800a794:	4431      	add	r1, r6
 800a796:	55ea      	strb	r2, [r5, r7]
 800a798:	f301 0107 	ssat	r1, #8, r1
 800a79c:	9b02      	ldr	r3, [sp, #8]
 800a79e:	55d9      	strb	r1, [r3, r7]
 800a7a0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a7a2:	18e3      	adds	r3, r4, r3
 800a7a4:	932c      	str	r3, [sp, #176]	@ 0xb0
 800a7a6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a7a8:	18c3      	adds	r3, r0, r3
 800a7aa:	9302      	str	r3, [sp, #8]
 800a7ac:	9b01      	ldr	r3, [sp, #4]
 800a7ae:	9a05      	ldr	r2, [sp, #20]
 800a7b0:	3304      	adds	r3, #4
 800a7b2:	9301      	str	r3, [sp, #4]
 800a7b4:	9b04      	ldr	r3, [sp, #16]
 800a7b6:	3308      	adds	r3, #8
 800a7b8:	9304      	str	r3, [sp, #16]
 800a7ba:	9b03      	ldr	r3, [sp, #12]
 800a7bc:	3308      	adds	r3, #8
 800a7be:	9303      	str	r3, [sp, #12]
 800a7c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	f47f ae6d 	bne.w	800a4a2 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x86>
 800a7c8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800a7ca:	46cb      	mov	fp, r9
 800a7cc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800a7ce:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800a7d2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a7d4:	9328      	str	r3, [sp, #160]	@ 0xa0
 800a7d6:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800a7d8:	4413      	add	r3, r2
 800a7da:	9329      	str	r3, [sp, #164]	@ 0xa4
 800a7dc:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800a7de:	4413      	add	r3, r2
 800a7e0:	932a      	str	r3, [sp, #168]	@ 0xa8
 800a7e2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a7e4:	07db      	lsls	r3, r3, #31
 800a7e6:	f140 81b1 	bpl.w	800ab4c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x730>
 800a7ea:	9a06      	ldr	r2, [sp, #24]
 800a7ec:	9b05      	ldr	r3, [sp, #20]
 800a7ee:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a7f0:	0896      	lsrs	r6, r2, #2
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	eb01 0e42 	add.w	lr, r1, r2, lsl #1
 800a7f8:	f000 81f6 	beq.w	800abe8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x7cc>
 800a7fc:	00f7      	lsls	r7, r6, #3
 800a7fe:	4674      	mov	r4, lr
 800a800:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800a804:	4658      	mov	r0, fp
 800a806:	461a      	mov	r2, r3
 800a808:	f8d0 c000 	ldr.w	ip, [r0]
 800a80c:	3008      	adds	r0, #8
 800a80e:	f850 5c04 	ldr.w	r5, [r0, #-4]
 800a812:	f8d1 8000 	ldr.w	r8, [r1]
 800a816:	fb2c 3308 	smlad	r3, ip, r8, r3
 800a81a:	f8d4 8000 	ldr.w	r8, [r4]
 800a81e:	fb2c 2208 	smlad	r2, ip, r8, r2
 800a822:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800a826:	3408      	adds	r4, #8
 800a828:	f854 cc04 	ldr.w	ip, [r4, #-4]
 800a82c:	3108      	adds	r1, #8
 800a82e:	fb25 3308 	smlad	r3, r5, r8, r3
 800a832:	fb25 220c 	smlad	r2, r5, ip, r2
 800a836:	42b1      	cmp	r1, r6
 800a838:	d1e6      	bne.n	800a808 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3ec>
 800a83a:	44bb      	add	fp, r7
 800a83c:	44be      	add	lr, r7
 800a83e:	9906      	ldr	r1, [sp, #24]
 800a840:	f011 0103 	ands.w	r1, r1, #3
 800a844:	d01f      	beq.n	800a886 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x46a>
 800a846:	f9bb 0000 	ldrsh.w	r0, [fp]
 800a84a:	3901      	subs	r1, #1
 800a84c:	8834      	ldrh	r4, [r6, #0]
 800a84e:	b289      	uxth	r1, r1
 800a850:	fb14 3300 	smlabb	r3, r4, r0, r3
 800a854:	f8be 4000 	ldrh.w	r4, [lr]
 800a858:	fb14 2200 	smlabb	r2, r4, r0, r2
 800a85c:	b199      	cbz	r1, 800a886 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x46a>
 800a85e:	f9bb 0002 	ldrsh.w	r0, [fp, #2]
 800a862:	2901      	cmp	r1, #1
 800a864:	8874      	ldrh	r4, [r6, #2]
 800a866:	fb14 3300 	smlabb	r3, r4, r0, r3
 800a86a:	f8be 4002 	ldrh.w	r4, [lr, #2]
 800a86e:	fb14 2200 	smlabb	r2, r4, r0, r2
 800a872:	d008      	beq.n	800a886 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x46a>
 800a874:	f9bb 1004 	ldrsh.w	r1, [fp, #4]
 800a878:	88b0      	ldrh	r0, [r6, #4]
 800a87a:	fb11 3300 	smlabb	r3, r1, r0, r3
 800a87e:	f8be 0004 	ldrh.w	r0, [lr, #4]
 800a882:	fb11 2200 	smlabb	r2, r1, r0, r2
 800a886:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 800a888:	f9b1 0000 	ldrsh.w	r0, [r1]
 800a88c:	2815      	cmp	r0, #21
 800a88e:	f340 816c 	ble.w	800ab6a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x74e>
 800a892:	1e85      	subs	r5, r0, #2
 800a894:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 800a896:	9c2a      	ldr	r4, [sp, #168]	@ 0xa8
 800a898:	3801      	subs	r0, #1
 800a89a:	2601      	movs	r6, #1
 800a89c:	6809      	ldr	r1, [r1, #0]
 800a89e:	6824      	ldr	r4, [r4, #0]
 800a8a0:	40ae      	lsls	r6, r5
 800a8a2:	fb53 6501 	smmla	r5, r3, r1, r6
 800a8a6:	fb52 6301 	smmla	r3, r2, r1, r6
 800a8aa:	fa45 f200 	asr.w	r2, r5, r0
 800a8ae:	4422      	add	r2, r4
 800a8b0:	f302 0207 	ssat	r2, #8, r2
 800a8b4:	4103      	asrs	r3, r0
 800a8b6:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 800a8b8:	4423      	add	r3, r4
 800a8ba:	f801 2b01 	strb.w	r2, [r1], #1
 800a8be:	f303 0307 	ssat	r3, #8, r3
 800a8c2:	9a02      	ldr	r2, [sp, #8]
 800a8c4:	912c      	str	r1, [sp, #176]	@ 0xb0
 800a8c6:	7013      	strb	r3, [r2, #0]
 800a8c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	f000 8142 	beq.w	800ab54 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x738>
 800a8d0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a8d2:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 800a8d4:	3b01      	subs	r3, #1
 800a8d6:	441a      	add	r2, r3
 800a8d8:	922c      	str	r2, [sp, #176]	@ 0xb0
 800a8da:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800a8dc:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a8de:	1c98      	adds	r0, r3, #2
 800a8e0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a8e2:	fb02 0013 	mls	r0, r2, r3, r0
 800a8e6:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 800a8e8:	4418      	add	r0, r3
 800a8ea:	b01b      	add	sp, #108	@ 0x6c
 800a8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8f0:	9c01      	ldr	r4, [sp, #4]
 800a8f2:	f934 4c04 	ldrsh.w	r4, [r4, #-4]
 800a8f6:	2c15      	cmp	r4, #21
 800a8f8:	f340 8089 	ble.w	800aa0e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5f2>
 800a8fc:	9f04      	ldr	r7, [sp, #16]
 800a8fe:	1ea5      	subs	r5, r4, #2
 800a900:	2601      	movs	r6, #1
 800a902:	3c01      	subs	r4, #1
 800a904:	fa06 f505 	lsl.w	r5, r6, r5
 800a908:	f857 6c08 	ldr.w	r6, [r7, #-8]
 800a90c:	fb53 5306 	smmla	r3, r3, r6, r5
 800a910:	fb50 5006 	smmla	r0, r0, r6, r5
 800a914:	9d03      	ldr	r5, [sp, #12]
 800a916:	4123      	asrs	r3, r4
 800a918:	f855 6c08 	ldr.w	r6, [r5, #-8]
 800a91c:	1f3d      	subs	r5, r7, #4
 800a91e:	9f03      	ldr	r7, [sp, #12]
 800a920:	4433      	add	r3, r6
 800a922:	3f04      	subs	r7, #4
 800a924:	f303 0307 	ssat	r3, #8, r3
 800a928:	4120      	asrs	r0, r4
 800a92a:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 800a92c:	4430      	add	r0, r6
 800a92e:	7023      	strb	r3, [r4, #0]
 800a930:	f300 0007 	ssat	r0, #8, r0
 800a934:	9b02      	ldr	r3, [sp, #8]
 800a936:	7018      	strb	r0, [r3, #0]
 800a938:	9b01      	ldr	r3, [sp, #4]
 800a93a:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
 800a93e:	2b15      	cmp	r3, #21
 800a940:	dd4f      	ble.n	800a9e2 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5c6>
 800a942:	1e98      	subs	r0, r3, #2
 800a944:	2601      	movs	r6, #1
 800a946:	3b01      	subs	r3, #1
 800a948:	682c      	ldr	r4, [r5, #0]
 800a94a:	fa06 f000 	lsl.w	r0, r6, r0
 800a94e:	683d      	ldr	r5, [r7, #0]
 800a950:	fb52 0204 	smmla	r2, r2, r4, r0
 800a954:	411a      	asrs	r2, r3
 800a956:	fb51 0104 	smmla	r1, r1, r4, r0
 800a95a:	442a      	add	r2, r5
 800a95c:	f302 0207 	ssat	r2, #8, r2
 800a960:	fa41 f303 	asr.w	r3, r1, r3
 800a964:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 800a966:	442b      	add	r3, r5
 800a968:	704a      	strb	r2, [r1, #1]
 800a96a:	f303 0307 	ssat	r3, #8, r3
 800a96e:	9a02      	ldr	r2, [sp, #8]
 800a970:	7053      	strb	r3, [r2, #1]
 800a972:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 800a974:	3302      	adds	r3, #2
 800a976:	932c      	str	r3, [sp, #176]	@ 0xb0
 800a978:	9b02      	ldr	r3, [sp, #8]
 800a97a:	3302      	adds	r3, #2
 800a97c:	9302      	str	r3, [sp, #8]
 800a97e:	e715      	b.n	800a7ac <st_sssa8_ch_nn_mat_mult_kernel_opt+0x390>
 800a980:	2b00      	cmp	r3, #0
 800a982:	dd6a      	ble.n	800aa5a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x63e>
 800a984:	682d      	ldr	r5, [r5, #0]
 800a986:	0052      	lsls	r2, r2, #1
 800a988:	6837      	ldr	r7, [r6, #0]
 800a98a:	0049      	lsls	r1, r1, #1
 800a98c:	fb52 7205 	smmla	r2, r2, r5, r7
 800a990:	fb51 7105 	smmla	r1, r1, r5, r7
 800a994:	411a      	asrs	r2, r3
 800a996:	f302 0207 	ssat	r2, #8, r2
 800a99a:	4119      	asrs	r1, r3
 800a99c:	7022      	strb	r2, [r4, #0]
 800a99e:	f301 0107 	ssat	r1, #8, r1
 800a9a2:	7001      	strb	r1, [r0, #0]
 800a9a4:	e6fc      	b.n	800a7a0 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x384>
 800a9a6:	2c00      	cmp	r4, #0
 800a9a8:	f340 8092 	ble.w	800aad0 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x6b4>
 800a9ac:	9f04      	ldr	r7, [sp, #16]
 800a9ae:	005b      	lsls	r3, r3, #1
 800a9b0:	9e03      	ldr	r6, [sp, #12]
 800a9b2:	0040      	lsls	r0, r0, #1
 800a9b4:	f857 5c08 	ldr.w	r5, [r7, #-8]
 800a9b8:	f856 6c08 	ldr.w	r6, [r6, #-8]
 800a9bc:	fb53 6305 	smmla	r3, r3, r5, r6
 800a9c0:	fb50 6005 	smmla	r0, r0, r5, r6
 800a9c4:	9e03      	ldr	r6, [sp, #12]
 800a9c6:	4123      	asrs	r3, r4
 800a9c8:	1f3d      	subs	r5, r7, #4
 800a9ca:	3e04      	subs	r6, #4
 800a9cc:	f303 0307 	ssat	r3, #8, r3
 800a9d0:	4120      	asrs	r0, r4
 800a9d2:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 800a9d4:	7023      	strb	r3, [r4, #0]
 800a9d6:	f300 0007 	ssat	r0, #8, r0
 800a9da:	9b02      	ldr	r3, [sp, #8]
 800a9dc:	7018      	strb	r0, [r3, #0]
 800a9de:	4620      	mov	r0, r4
 800a9e0:	e6ba      	b.n	800a758 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x33c>
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	f340 8097 	ble.w	800ab16 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x6fa>
 800a9e8:	6828      	ldr	r0, [r5, #0]
 800a9ea:	0052      	lsls	r2, r2, #1
 800a9ec:	683c      	ldr	r4, [r7, #0]
 800a9ee:	0049      	lsls	r1, r1, #1
 800a9f0:	fb52 4200 	smmla	r2, r2, r0, r4
 800a9f4:	fb51 4100 	smmla	r1, r1, r0, r4
 800a9f8:	411a      	asrs	r2, r3
 800a9fa:	f302 0207 	ssat	r2, #8, r2
 800a9fe:	4119      	asrs	r1, r3
 800aa00:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 800aa02:	705a      	strb	r2, [r3, #1]
 800aa04:	f301 0107 	ssat	r1, #8, r1
 800aa08:	9b02      	ldr	r3, [sp, #8]
 800aa0a:	7059      	strb	r1, [r3, #1]
 800aa0c:	e7b1      	b.n	800a972 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x556>
 800aa0e:	2c00      	cmp	r4, #0
 800aa10:	dd3c      	ble.n	800aa8c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x670>
 800aa12:	9f04      	ldr	r7, [sp, #16]
 800aa14:	005b      	lsls	r3, r3, #1
 800aa16:	9e03      	ldr	r6, [sp, #12]
 800aa18:	0040      	lsls	r0, r0, #1
 800aa1a:	f857 5c08 	ldr.w	r5, [r7, #-8]
 800aa1e:	f856 6c08 	ldr.w	r6, [r6, #-8]
 800aa22:	fb53 6305 	smmla	r3, r3, r5, r6
 800aa26:	fb50 6005 	smmla	r0, r0, r5, r6
 800aa2a:	9e03      	ldr	r6, [sp, #12]
 800aa2c:	1f3d      	subs	r5, r7, #4
 800aa2e:	4123      	asrs	r3, r4
 800aa30:	1f37      	subs	r7, r6, #4
 800aa32:	f303 0307 	ssat	r3, #8, r3
 800aa36:	4120      	asrs	r0, r4
 800aa38:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 800aa3a:	7023      	strb	r3, [r4, #0]
 800aa3c:	f300 0007 	ssat	r0, #8, r0
 800aa40:	9b02      	ldr	r3, [sp, #8]
 800aa42:	7018      	strb	r0, [r3, #0]
 800aa44:	e778      	b.n	800a938 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x51c>
 800aa46:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800aa48:	f04f 0b00 	mov.w	fp, #0
 800aa4c:	9400      	str	r4, [sp, #0]
 800aa4e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 800aa50:	45a3      	cmp	fp, r4
 800aa52:	f6ff adc1 	blt.w	800a5d8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1bc>
 800aa56:	46a8      	mov	r8, r5
 800aa58:	e5fc      	b.n	800a654 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x238>
 800aa5a:	f1c3 0301 	rsb	r3, r3, #1
 800aa5e:	409a      	lsls	r2, r3
 800aa60:	f302 021f 	ssat	r2, #32, r2
 800aa64:	682d      	ldr	r5, [r5, #0]
 800aa66:	fb52 f215 	smmulr	r2, r2, r5
 800aa6a:	fa01 f303 	lsl.w	r3, r1, r3
 800aa6e:	f303 031f 	ssat	r3, #32, r3
 800aa72:	fb53 f515 	smmulr	r5, r3, r5
 800aa76:	6833      	ldr	r3, [r6, #0]
 800aa78:	4413      	add	r3, r2
 800aa7a:	f303 0307 	ssat	r3, #8, r3
 800aa7e:	7023      	strb	r3, [r4, #0]
 800aa80:	6833      	ldr	r3, [r6, #0]
 800aa82:	442b      	add	r3, r5
 800aa84:	f303 0307 	ssat	r3, #8, r3
 800aa88:	7003      	strb	r3, [r0, #0]
 800aa8a:	e689      	b.n	800a7a0 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x384>
 800aa8c:	f1c4 0501 	rsb	r5, r4, #1
 800aa90:	fa03 f405 	lsl.w	r4, r3, r5
 800aa94:	f304 041f 	ssat	r4, #32, r4
 800aa98:	9e04      	ldr	r6, [sp, #16]
 800aa9a:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800aa9e:	fb54 f413 	smmulr	r4, r4, r3
 800aaa2:	40a8      	lsls	r0, r5
 800aaa4:	f300 001f 	ssat	r0, #32, r0
 800aaa8:	1f35      	subs	r5, r6, #4
 800aaaa:	fb50 f013 	smmulr	r0, r0, r3
 800aaae:	9e03      	ldr	r6, [sp, #12]
 800aab0:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800aab4:	4423      	add	r3, r4
 800aab6:	f303 0307 	ssat	r3, #8, r3
 800aaba:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 800aabc:	1f37      	subs	r7, r6, #4
 800aabe:	7023      	strb	r3, [r4, #0]
 800aac0:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800aac4:	4403      	add	r3, r0
 800aac6:	f303 0307 	ssat	r3, #8, r3
 800aaca:	9802      	ldr	r0, [sp, #8]
 800aacc:	7003      	strb	r3, [r0, #0]
 800aace:	e733      	b.n	800a938 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x51c>
 800aad0:	f1c4 0401 	rsb	r4, r4, #1
 800aad4:	fa03 f604 	lsl.w	r6, r3, r4
 800aad8:	f306 061f 	ssat	r6, #32, r6
 800aadc:	9d04      	ldr	r5, [sp, #16]
 800aade:	f855 3c08 	ldr.w	r3, [r5, #-8]
 800aae2:	fb56 f613 	smmulr	r6, r6, r3
 800aae6:	40a0      	lsls	r0, r4
 800aae8:	f300 001f 	ssat	r0, #32, r0
 800aaec:	3d04      	subs	r5, #4
 800aaee:	fb50 f013 	smmulr	r0, r0, r3
 800aaf2:	9c03      	ldr	r4, [sp, #12]
 800aaf4:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800aaf8:	4433      	add	r3, r6
 800aafa:	f303 0307 	ssat	r3, #8, r3
 800aafe:	9e2c      	ldr	r6, [sp, #176]	@ 0xb0
 800ab00:	7033      	strb	r3, [r6, #0]
 800ab02:	1f26      	subs	r6, r4, #4
 800ab04:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800ab08:	4403      	add	r3, r0
 800ab0a:	f303 0307 	ssat	r3, #8, r3
 800ab0e:	9802      	ldr	r0, [sp, #8]
 800ab10:	7003      	strb	r3, [r0, #0]
 800ab12:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 800ab14:	e620      	b.n	800a758 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x33c>
 800ab16:	f1c3 0301 	rsb	r3, r3, #1
 800ab1a:	409a      	lsls	r2, r3
 800ab1c:	f302 021f 	ssat	r2, #32, r2
 800ab20:	6828      	ldr	r0, [r5, #0]
 800ab22:	fb52 f210 	smmulr	r2, r2, r0
 800ab26:	fa01 f303 	lsl.w	r3, r1, r3
 800ab2a:	f303 031f 	ssat	r3, #32, r3
 800ab2e:	fb53 f010 	smmulr	r0, r3, r0
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	4413      	add	r3, r2
 800ab36:	f303 0307 	ssat	r3, #8, r3
 800ab3a:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 800ab3c:	7053      	strb	r3, [r2, #1]
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	4403      	add	r3, r0
 800ab42:	f303 0307 	ssat	r3, #8, r3
 800ab46:	9a02      	ldr	r2, [sp, #8]
 800ab48:	7053      	strb	r3, [r2, #1]
 800ab4a:	e712      	b.n	800a972 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x556>
 800ab4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	f47f aec3 	bne.w	800a8da <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4be>
 800ab54:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 800ab56:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800ab58:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800ab5a:	3302      	adds	r3, #2
 800ab5c:	1a50      	subs	r0, r2, r1
 800ab5e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ab60:	fb02 0003 	mla	r0, r2, r3, r0
 800ab64:	b01b      	add	sp, #108	@ 0x6c
 800ab66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab6a:	2800      	cmp	r0, #0
 800ab6c:	dd1b      	ble.n	800aba6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x78a>
 800ab6e:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 800ab70:	0052      	lsls	r2, r2, #1
 800ab72:	9c2a      	ldr	r4, [sp, #168]	@ 0xa8
 800ab74:	005b      	lsls	r3, r3, #1
 800ab76:	6809      	ldr	r1, [r1, #0]
 800ab78:	6824      	ldr	r4, [r4, #0]
 800ab7a:	fb53 4301 	smmla	r3, r3, r1, r4
 800ab7e:	fb52 4101 	smmla	r1, r2, r1, r4
 800ab82:	fa43 f000 	asr.w	r0, r3, r0
 800ab86:	f300 0307 	ssat	r3, #8, r0
 800ab8a:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 800ab8c:	f802 3b01 	strb.w	r3, [r2], #1
 800ab90:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800ab92:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ab96:	fa41 f303 	asr.w	r3, r1, r3
 800ab9a:	f303 0307 	ssat	r3, #8, r3
 800ab9e:	9902      	ldr	r1, [sp, #8]
 800aba0:	922c      	str	r2, [sp, #176]	@ 0xb0
 800aba2:	700b      	strb	r3, [r1, #0]
 800aba4:	e690      	b.n	800a8c8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4ac>
 800aba6:	f1c0 0001 	rsb	r0, r0, #1
 800abaa:	fa03 f100 	lsl.w	r1, r3, r0
 800abae:	f301 011f 	ssat	r1, #32, r1
 800abb2:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800abb4:	681c      	ldr	r4, [r3, #0]
 800abb6:	fb51 f114 	smmulr	r1, r1, r4
 800abba:	fa02 f300 	lsl.w	r3, r2, r0
 800abbe:	f303 031f 	ssat	r3, #32, r3
 800abc2:	fb53 f414 	smmulr	r4, r3, r4
 800abc6:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	440b      	add	r3, r1
 800abcc:	f303 0307 	ssat	r3, #8, r3
 800abd0:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 800abd2:	f802 3b01 	strb.w	r3, [r2], #1
 800abd6:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4423      	add	r3, r4
 800abdc:	f303 0307 	ssat	r3, #8, r3
 800abe0:	9902      	ldr	r1, [sp, #8]
 800abe2:	922c      	str	r2, [sp, #176]	@ 0xb0
 800abe4:	700b      	strb	r3, [r1, #0]
 800abe6:	e66f      	b.n	800a8c8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4ac>
 800abe8:	460e      	mov	r6, r1
 800abea:	461a      	mov	r2, r3
 800abec:	e627      	b.n	800a83e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x422>
 800abee:	bf00      	nop

0800abf0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>:
 800abf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abf4:	b095      	sub	sp, #84	@ 0x54
 800abf6:	f8bd 407c 	ldrh.w	r4, [sp, #124]	@ 0x7c
 800abfa:	920d      	str	r2, [sp, #52]	@ 0x34
 800abfc:	f8bd 2080 	ldrh.w	r2, [sp, #128]	@ 0x80
 800ac00:	9311      	str	r3, [sp, #68]	@ 0x44
 800ac02:	9204      	str	r2, [sp, #16]
 800ac04:	0862      	lsrs	r2, r4, #1
 800ac06:	f89d 3090 	ldrb.w	r3, [sp, #144]	@ 0x90
 800ac0a:	940f      	str	r4, [sp, #60]	@ 0x3c
 800ac0c:	9106      	str	r1, [sp, #24]
 800ac0e:	9310      	str	r3, [sp, #64]	@ 0x40
 800ac10:	920e      	str	r2, [sp, #56]	@ 0x38
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	f000 81fb 	beq.w	800b00e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x41e>
 800ac18:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800ac1a:	b29c      	uxth	r4, r3
 800ac1c:	2a00      	cmp	r2, #0
 800ac1e:	f000 8144 	beq.w	800aeaa <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2ba>
 800ac22:	1c61      	adds	r1, r4, #1
 800ac24:	0064      	lsls	r4, r4, #1
 800ac26:	3a01      	subs	r2, #1
 800ac28:	9d04      	ldr	r5, [sp, #16]
 800ac2a:	9407      	str	r4, [sp, #28]
 800ac2c:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 800ac2e:	b292      	uxth	r2, r2
 800ac30:	f1a5 0310 	sub.w	r3, r5, #16
 800ac34:	1861      	adds	r1, r4, r1
 800ac36:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 800ac38:	091b      	lsrs	r3, r3, #4
 800ac3a:	9102      	str	r1, [sp, #8]
 800ac3c:	f104 0110 	add.w	r1, r4, #16
 800ac40:	3301      	adds	r3, #1
 800ac42:	f104 0908 	add.w	r9, r4, #8
 800ac46:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800ac4a:	1ee9      	subs	r1, r5, #3
 800ac4c:	9108      	str	r1, [sp, #32]
 800ac4e:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800ac50:	9209      	str	r2, [sp, #36]	@ 0x24
 800ac52:	3104      	adds	r1, #4
 800ac54:	9100      	str	r1, [sp, #0]
 800ac56:	9922      	ldr	r1, [sp, #136]	@ 0x88
 800ac58:	3108      	adds	r1, #8
 800ac5a:	9101      	str	r1, [sp, #4]
 800ac5c:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 800ac5e:	f101 0b08 	add.w	fp, r1, #8
 800ac62:	9925      	ldr	r1, [sp, #148]	@ 0x94
 800ac64:	3101      	adds	r1, #1
 800ac66:	9103      	str	r1, [sp, #12]
 800ac68:	9906      	ldr	r1, [sp, #24]
 800ac6a:	eb01 1743 	add.w	r7, r1, r3, lsl #5
 800ac6e:	0119      	lsls	r1, r3, #4
 800ac70:	019b      	lsls	r3, r3, #6
 800ac72:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ac74:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac76:	1f2b      	subs	r3, r5, #4
 800ac78:	930c      	str	r3, [sp, #48]	@ 0x30
 800ac7a:	f859 3c08 	ldr.w	r3, [r9, #-8]
 800ac7e:	9904      	ldr	r1, [sp, #16]
 800ac80:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ac82:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800ac86:	290f      	cmp	r1, #15
 800ac88:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ac8a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ac8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ac8e:	9c06      	ldr	r4, [sp, #24]
 800ac90:	f340 81ba 	ble.w	800b008 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x418>
 800ac94:	4601      	mov	r1, r0
 800ac96:	f8d4 c000 	ldr.w	ip, [r4]
 800ac9a:	680e      	ldr	r6, [r1, #0]
 800ac9c:	fb26 220c 	smlad	r2, r6, ip, r2
 800aca0:	684d      	ldr	r5, [r1, #4]
 800aca2:	fb25 330c 	smlad	r3, r5, ip, r3
 800aca6:	f8d4 c004 	ldr.w	ip, [r4, #4]
 800acaa:	688e      	ldr	r6, [r1, #8]
 800acac:	fb26 260c 	smlad	r6, r6, ip, r2
 800acb0:	68cd      	ldr	r5, [r1, #12]
 800acb2:	fb25 350c 	smlad	r5, r5, ip, r3
 800acb6:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800acba:	690a      	ldr	r2, [r1, #16]
 800acbc:	fb22 660c 	smlad	r6, r2, ip, r6
 800acc0:	694b      	ldr	r3, [r1, #20]
 800acc2:	fb23 550c 	smlad	r5, r3, ip, r5
 800acc6:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800acca:	698a      	ldr	r2, [r1, #24]
 800accc:	fb22 620c 	smlad	r2, r2, ip, r6
 800acd0:	69cb      	ldr	r3, [r1, #28]
 800acd2:	fb23 530c 	smlad	r3, r3, ip, r5
 800acd6:	f8d4 c010 	ldr.w	ip, [r4, #16]
 800acda:	6a0e      	ldr	r6, [r1, #32]
 800acdc:	fb26 220c 	smlad	r2, r6, ip, r2
 800ace0:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 800ace2:	fb25 330c 	smlad	r3, r5, ip, r3
 800ace6:	f8d4 c014 	ldr.w	ip, [r4, #20]
 800acea:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
 800acec:	fb26 260c 	smlad	r6, r6, ip, r2
 800acf0:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
 800acf2:	fb25 350c 	smlad	r5, r5, ip, r3
 800acf6:	f8d4 c018 	ldr.w	ip, [r4, #24]
 800acfa:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800acfc:	fb22 660c 	smlad	r6, r2, ip, r6
 800ad00:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800ad02:	fb23 550c 	smlad	r5, r3, ip, r5
 800ad06:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 800ad0a:	3140      	adds	r1, #64	@ 0x40
 800ad0c:	f851 2c08 	ldr.w	r2, [r1, #-8]
 800ad10:	3420      	adds	r4, #32
 800ad12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad16:	fb22 620c 	smlad	r2, r2, ip, r6
 800ad1a:	fb23 530c 	smlad	r3, r3, ip, r5
 800ad1e:	42bc      	cmp	r4, r7
 800ad20:	d1b9      	bne.n	800ac96 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0xa6>
 800ad22:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ad24:	463c      	mov	r4, r7
 800ad26:	f8dd e02c 	ldr.w	lr, [sp, #44]	@ 0x2c
 800ad2a:	4408      	add	r0, r1
 800ad2c:	9908      	ldr	r1, [sp, #32]
 800ad2e:	458e      	cmp	lr, r1
 800ad30:	da25      	bge.n	800ad7e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x18e>
 800ad32:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ad34:	eba1 0a0e 	sub.w	sl, r1, lr
 800ad38:	4601      	mov	r1, r0
 800ad3a:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
 800ad3e:	f10a 0501 	add.w	r5, sl, #1
 800ad42:	eb04 08c5 	add.w	r8, r4, r5, lsl #3
 800ad46:	9505      	str	r5, [sp, #20]
 800ad48:	6825      	ldr	r5, [r4, #0]
 800ad4a:	680e      	ldr	r6, [r1, #0]
 800ad4c:	fb26 2205 	smlad	r2, r6, r5, r2
 800ad50:	684e      	ldr	r6, [r1, #4]
 800ad52:	fb26 3505 	smlad	r5, r6, r5, r3
 800ad56:	6866      	ldr	r6, [r4, #4]
 800ad58:	3110      	adds	r1, #16
 800ad5a:	f851 cc08 	ldr.w	ip, [r1, #-8]
 800ad5e:	3408      	adds	r4, #8
 800ad60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad64:	fb2c 2206 	smlad	r2, ip, r6, r2
 800ad68:	fb23 5306 	smlad	r3, r3, r6, r5
 800ad6c:	45a0      	cmp	r8, r4
 800ad6e:	d1eb      	bne.n	800ad48 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x158>
 800ad70:	9905      	ldr	r1, [sp, #20]
 800ad72:	f10e 0e04 	add.w	lr, lr, #4
 800ad76:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 800ad7a:	eb0e 0e8a 	add.w	lr, lr, sl, lsl #2
 800ad7e:	9e04      	ldr	r6, [sp, #16]
 800ad80:	4576      	cmp	r6, lr
 800ad82:	dd30      	ble.n	800ade6 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1f6>
 800ad84:	f9b4 1000 	ldrsh.w	r1, [r4]
 800ad88:	8805      	ldrh	r5, [r0, #0]
 800ad8a:	fb15 2201 	smlabb	r2, r5, r1, r2
 800ad8e:	8845      	ldrh	r5, [r0, #2]
 800ad90:	fb11 3305 	smlabb	r3, r1, r5, r3
 800ad94:	f10e 0101 	add.w	r1, lr, #1
 800ad98:	428e      	cmp	r6, r1
 800ad9a:	dd1f      	ble.n	800addc <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1ec>
 800ad9c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800ada0:	8885      	ldrh	r5, [r0, #4]
 800ada2:	fb15 2201 	smlabb	r2, r5, r1, r2
 800ada6:	88c5      	ldrh	r5, [r0, #6]
 800ada8:	fb11 3305 	smlabb	r3, r1, r5, r3
 800adac:	f10e 0102 	add.w	r1, lr, #2
 800adb0:	428e      	cmp	r6, r1
 800adb2:	dd13      	ble.n	800addc <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1ec>
 800adb4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800adb8:	8905      	ldrh	r5, [r0, #8]
 800adba:	fb15 2201 	smlabb	r2, r5, r1, r2
 800adbe:	8945      	ldrh	r5, [r0, #10]
 800adc0:	fb11 3305 	smlabb	r3, r1, r5, r3
 800adc4:	f10e 0103 	add.w	r1, lr, #3
 800adc8:	428e      	cmp	r6, r1
 800adca:	dd07      	ble.n	800addc <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1ec>
 800adcc:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 800add0:	8984      	ldrh	r4, [r0, #12]
 800add2:	fb14 2201 	smlabb	r2, r4, r1, r2
 800add6:	89c4      	ldrh	r4, [r0, #14]
 800add8:	fb11 3304 	smlabb	r3, r1, r4, r3
 800addc:	9904      	ldr	r1, [sp, #16]
 800adde:	eba1 0e0e 	sub.w	lr, r1, lr
 800ade2:	eb00 008e 	add.w	r0, r0, lr, lsl #2
 800ade6:	9e00      	ldr	r6, [sp, #0]
 800ade8:	f936 5c04 	ldrsh.w	r5, [r6, #-4]
 800adec:	2d15      	cmp	r5, #21
 800adee:	f340 80b4 	ble.w	800af5a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x36a>
 800adf2:	1eac      	subs	r4, r5, #2
 800adf4:	2101      	movs	r1, #1
 800adf6:	3d01      	subs	r5, #1
 800adf8:	f1a6 0c02 	sub.w	ip, r6, #2
 800adfc:	fa01 f404 	lsl.w	r4, r1, r4
 800ae00:	9901      	ldr	r1, [sp, #4]
 800ae02:	f1ab 0604 	sub.w	r6, fp, #4
 800ae06:	f851 1c08 	ldr.w	r1, [r1, #-8]
 800ae0a:	fb52 4401 	smmla	r4, r2, r1, r4
 800ae0e:	9901      	ldr	r1, [sp, #4]
 800ae10:	fa44 f505 	asr.w	r5, r4, r5
 800ae14:	f85b 4c08 	ldr.w	r4, [fp, #-8]
 800ae18:	f1a1 0e04 	sub.w	lr, r1, #4
 800ae1c:	442c      	add	r4, r5
 800ae1e:	f304 0407 	ssat	r4, #8, r4
 800ae22:	9a03      	ldr	r2, [sp, #12]
 800ae24:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ae28:	f9bc 2000 	ldrsh.w	r2, [ip]
 800ae2c:	2a15      	cmp	r2, #21
 800ae2e:	f340 80b1 	ble.w	800af94 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3a4>
 800ae32:	1e94      	subs	r4, r2, #2
 800ae34:	2501      	movs	r5, #1
 800ae36:	3a01      	subs	r2, #1
 800ae38:	6836      	ldr	r6, [r6, #0]
 800ae3a:	f8de 1000 	ldr.w	r1, [lr]
 800ae3e:	fa05 f404 	lsl.w	r4, r5, r4
 800ae42:	fb53 4301 	smmla	r3, r3, r1, r4
 800ae46:	4113      	asrs	r3, r2
 800ae48:	4433      	add	r3, r6
 800ae4a:	f303 0307 	ssat	r3, #8, r3
 800ae4e:	9a02      	ldr	r2, [sp, #8]
 800ae50:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ae54:	9b00      	ldr	r3, [sp, #0]
 800ae56:	f109 0908 	add.w	r9, r9, #8
 800ae5a:	9a07      	ldr	r2, [sp, #28]
 800ae5c:	f10b 0b08 	add.w	fp, fp, #8
 800ae60:	3304      	adds	r3, #4
 800ae62:	9300      	str	r3, [sp, #0]
 800ae64:	9b01      	ldr	r3, [sp, #4]
 800ae66:	3308      	adds	r3, #8
 800ae68:	9301      	str	r3, [sp, #4]
 800ae6a:	9b02      	ldr	r3, [sp, #8]
 800ae6c:	4413      	add	r3, r2
 800ae6e:	9302      	str	r3, [sp, #8]
 800ae70:	9b03      	ldr	r3, [sp, #12]
 800ae72:	4413      	add	r3, r2
 800ae74:	9303      	str	r3, [sp, #12]
 800ae76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae78:	4599      	cmp	r9, r3
 800ae7a:	f47f aefe 	bne.w	800ac7a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x8a>
 800ae7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae80:	4611      	mov	r1, r2
 800ae82:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 800ae84:	fb03 2201 	mla	r2, r3, r1, r2
 800ae88:	9225      	str	r2, [sp, #148]	@ 0x94
 800ae8a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ae8c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800ae90:	920d      	str	r2, [sp, #52]	@ 0x34
 800ae92:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ae94:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ae98:	9221      	str	r2, [sp, #132]	@ 0x84
 800ae9a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800ae9c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800aea0:	9222      	str	r2, [sp, #136]	@ 0x88
 800aea2:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800aea4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800aea8:	9323      	str	r3, [sp, #140]	@ 0x8c
 800aeaa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aeac:	07db      	lsls	r3, r3, #31
 800aeae:	d546      	bpl.n	800af3e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x34e>
 800aeb0:	9a04      	ldr	r2, [sp, #16]
 800aeb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aeb4:	0896      	lsrs	r6, r2, #2
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	d013      	beq.n	800aee2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2f2>
 800aeba:	00f7      	lsls	r7, r6, #3
 800aebc:	9906      	ldr	r1, [sp, #24]
 800aebe:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800aec2:	6804      	ldr	r4, [r0, #0]
 800aec4:	3008      	adds	r0, #8
 800aec6:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800aeca:	680d      	ldr	r5, [r1, #0]
 800aecc:	fb24 3305 	smlad	r3, r4, r5, r3
 800aed0:	684c      	ldr	r4, [r1, #4]
 800aed2:	3108      	adds	r1, #8
 800aed4:	fb22 3304 	smlad	r3, r2, r4, r3
 800aed8:	4286      	cmp	r6, r0
 800aeda:	d1f2      	bne.n	800aec2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2d2>
 800aedc:	9a06      	ldr	r2, [sp, #24]
 800aede:	443a      	add	r2, r7
 800aee0:	9206      	str	r2, [sp, #24]
 800aee2:	9a04      	ldr	r2, [sp, #16]
 800aee4:	f012 0203 	ands.w	r2, r2, #3
 800aee8:	d011      	beq.n	800af0e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x31e>
 800aeea:	3a01      	subs	r2, #1
 800aeec:	9d06      	ldr	r5, [sp, #24]
 800aeee:	8801      	ldrh	r1, [r0, #0]
 800aef0:	882c      	ldrh	r4, [r5, #0]
 800aef2:	b292      	uxth	r2, r2
 800aef4:	fb14 3301 	smlabb	r3, r4, r1, r3
 800aef8:	b14a      	cbz	r2, 800af0e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x31e>
 800aefa:	886c      	ldrh	r4, [r5, #2]
 800aefc:	2a01      	cmp	r2, #1
 800aefe:	8841      	ldrh	r1, [r0, #2]
 800af00:	fb14 3301 	smlabb	r3, r4, r1, r3
 800af04:	d003      	beq.n	800af0e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x31e>
 800af06:	8881      	ldrh	r1, [r0, #4]
 800af08:	88aa      	ldrh	r2, [r5, #4]
 800af0a:	fb11 3302 	smlabb	r3, r1, r2, r3
 800af0e:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800af10:	f9b2 2000 	ldrsh.w	r2, [r2]
 800af14:	2a15      	cmp	r2, #21
 800af16:	f340 8084 	ble.w	800b022 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x432>
 800af1a:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 800af1c:	1e95      	subs	r5, r2, #2
 800af1e:	9922      	ldr	r1, [sp, #136]	@ 0x88
 800af20:	3a01      	subs	r2, #1
 800af22:	6804      	ldr	r4, [r0, #0]
 800af24:	2001      	movs	r0, #1
 800af26:	6809      	ldr	r1, [r1, #0]
 800af28:	40a8      	lsls	r0, r5
 800af2a:	fb53 0301 	smmla	r3, r3, r1, r0
 800af2e:	4113      	asrs	r3, r2
 800af30:	4423      	add	r3, r4
 800af32:	f303 0307 	ssat	r3, #8, r3
 800af36:	9825      	ldr	r0, [sp, #148]	@ 0x94
 800af38:	f800 3b01 	strb.w	r3, [r0], #1
 800af3c:	9025      	str	r0, [sp, #148]	@ 0x94
 800af3e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800af40:	2b00      	cmp	r3, #0
 800af42:	d066      	beq.n	800b012 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x422>
 800af44:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800af46:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800af48:	fb03 f000 	mul.w	r0, r3, r0
 800af4c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800af4e:	f1c0 0001 	rsb	r0, r0, #1
 800af52:	4418      	add	r0, r3
 800af54:	b015      	add	sp, #84	@ 0x54
 800af56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af5a:	2d00      	cmp	r5, #0
 800af5c:	dd29      	ble.n	800afb2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3c2>
 800af5e:	9e01      	ldr	r6, [sp, #4]
 800af60:	0052      	lsls	r2, r2, #1
 800af62:	f85b 4c08 	ldr.w	r4, [fp, #-8]
 800af66:	f856 1c08 	ldr.w	r1, [r6, #-8]
 800af6a:	f1a6 0e04 	sub.w	lr, r6, #4
 800af6e:	fb52 4201 	smmla	r2, r2, r1, r4
 800af72:	fa42 f505 	asr.w	r5, r2, r5
 800af76:	9a00      	ldr	r2, [sp, #0]
 800af78:	f1ab 0604 	sub.w	r6, fp, #4
 800af7c:	f1a2 0c02 	sub.w	ip, r2, #2
 800af80:	f305 0507 	ssat	r5, #8, r5
 800af84:	9a03      	ldr	r2, [sp, #12]
 800af86:	f802 5c01 	strb.w	r5, [r2, #-1]
 800af8a:	f9bc 2000 	ldrsh.w	r2, [ip]
 800af8e:	2a15      	cmp	r2, #21
 800af90:	f73f af4f 	bgt.w	800ae32 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x242>
 800af94:	2a00      	cmp	r2, #0
 800af96:	dd25      	ble.n	800afe4 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3f4>
 800af98:	f8de 1000 	ldr.w	r1, [lr]
 800af9c:	005b      	lsls	r3, r3, #1
 800af9e:	6834      	ldr	r4, [r6, #0]
 800afa0:	fb53 4301 	smmla	r3, r3, r1, r4
 800afa4:	4113      	asrs	r3, r2
 800afa6:	f303 0307 	ssat	r3, #8, r3
 800afaa:	9a02      	ldr	r2, [sp, #8]
 800afac:	f802 3c01 	strb.w	r3, [r2, #-1]
 800afb0:	e750      	b.n	800ae54 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x264>
 800afb2:	f1c5 0501 	rsb	r5, r5, #1
 800afb6:	f1a6 0c02 	sub.w	ip, r6, #2
 800afba:	40aa      	lsls	r2, r5
 800afbc:	f302 021f 	ssat	r2, #32, r2
 800afc0:	9901      	ldr	r1, [sp, #4]
 800afc2:	f1a1 0e04 	sub.w	lr, r1, #4
 800afc6:	f851 1c08 	ldr.w	r1, [r1, #-8]
 800afca:	fb52 f111 	smmulr	r1, r2, r1
 800afce:	f85b 2c08 	ldr.w	r2, [fp, #-8]
 800afd2:	f1ab 0604 	sub.w	r6, fp, #4
 800afd6:	440a      	add	r2, r1
 800afd8:	f302 0207 	ssat	r2, #8, r2
 800afdc:	9903      	ldr	r1, [sp, #12]
 800afde:	f801 2c01 	strb.w	r2, [r1, #-1]
 800afe2:	e721      	b.n	800ae28 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x238>
 800afe4:	f1c2 0201 	rsb	r2, r2, #1
 800afe8:	fa03 f202 	lsl.w	r2, r3, r2
 800afec:	f302 021f 	ssat	r2, #32, r2
 800aff0:	f8de 3000 	ldr.w	r3, [lr]
 800aff4:	fb52 f313 	smmulr	r3, r2, r3
 800aff8:	6832      	ldr	r2, [r6, #0]
 800affa:	4413      	add	r3, r2
 800affc:	f303 0307 	ssat	r3, #8, r3
 800b000:	9a02      	ldr	r2, [sp, #8]
 800b002:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b006:	e725      	b.n	800ae54 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x264>
 800b008:	f04f 0e00 	mov.w	lr, #0
 800b00c:	e68e      	b.n	800ad2c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x13c>
 800b00e:	2401      	movs	r4, #1
 800b010:	e604      	b.n	800ac1c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2c>
 800b012:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b014:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b016:	1a98      	subs	r0, r3, r2
 800b018:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800b01a:	4418      	add	r0, r3
 800b01c:	b015      	add	sp, #84	@ 0x54
 800b01e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b022:	2a00      	cmp	r2, #0
 800b024:	dd0e      	ble.n	800b044 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x454>
 800b026:	9922      	ldr	r1, [sp, #136]	@ 0x88
 800b028:	005b      	lsls	r3, r3, #1
 800b02a:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 800b02c:	6809      	ldr	r1, [r1, #0]
 800b02e:	6800      	ldr	r0, [r0, #0]
 800b030:	fb53 0301 	smmla	r3, r3, r1, r0
 800b034:	4113      	asrs	r3, r2
 800b036:	f303 0307 	ssat	r3, #8, r3
 800b03a:	9825      	ldr	r0, [sp, #148]	@ 0x94
 800b03c:	f800 3b01 	strb.w	r3, [r0], #1
 800b040:	9025      	str	r0, [sp, #148]	@ 0x94
 800b042:	e77c      	b.n	800af3e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x34e>
 800b044:	f1c2 0201 	rsb	r2, r2, #1
 800b048:	4093      	lsls	r3, r2
 800b04a:	f303 031f 	ssat	r3, #32, r3
 800b04e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b050:	6812      	ldr	r2, [r2, #0]
 800b052:	fb53 f312 	smmulr	r3, r3, r2
 800b056:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b058:	6812      	ldr	r2, [r2, #0]
 800b05a:	4413      	add	r3, r2
 800b05c:	f303 0307 	ssat	r3, #8, r3
 800b060:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 800b062:	f802 3b01 	strb.w	r3, [r2], #1
 800b066:	9225      	str	r2, [sp, #148]	@ 0x94
 800b068:	e769      	b.n	800af3e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x34e>
 800b06a:	bf00      	nop

0800b06c <arm_fill_q15>:
 800b06c:	b510      	push	{r4, lr}
 800b06e:	eac0 4400 	pkhbt	r4, r0, r0, lsl #16
 800b072:	ea5f 0e92 	movs.w	lr, r2, lsr #2
 800b076:	d013      	beq.n	800b0a0 <arm_fill_q15+0x34>
 800b078:	f10e 33ff 	add.w	r3, lr, #4294967295
 800b07c:	2b09      	cmp	r3, #9
 800b07e:	460b      	mov	r3, r1
 800b080:	d919      	bls.n	800b0b6 <arm_fill_q15+0x4a>
 800b082:	f011 0f07 	tst.w	r1, #7
 800b086:	d116      	bne.n	800b0b6 <arm_fill_q15+0x4a>
 800b088:	f04f 0c00 	mov.w	ip, #0
 800b08c:	f10c 0c01 	add.w	ip, ip, #1
 800b090:	45e6      	cmp	lr, ip
 800b092:	e9c3 4400 	strd	r4, r4, [r3]
 800b096:	f103 0308 	add.w	r3, r3, #8
 800b09a:	d1f7      	bne.n	800b08c <arm_fill_q15+0x20>
 800b09c:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
 800b0a0:	f012 0203 	ands.w	r2, r2, #3
 800b0a4:	d006      	beq.n	800b0b4 <arm_fill_q15+0x48>
 800b0a6:	3a01      	subs	r2, #1
 800b0a8:	8008      	strh	r0, [r1, #0]
 800b0aa:	d003      	beq.n	800b0b4 <arm_fill_q15+0x48>
 800b0ac:	2a01      	cmp	r2, #1
 800b0ae:	8048      	strh	r0, [r1, #2]
 800b0b0:	bf18      	it	ne
 800b0b2:	8088      	strhne	r0, [r1, #4]
 800b0b4:	bd10      	pop	{r4, pc}
 800b0b6:	46f4      	mov	ip, lr
 800b0b8:	f1bc 0c01 	subs.w	ip, ip, #1
 800b0bc:	601c      	str	r4, [r3, #0]
 800b0be:	605c      	str	r4, [r3, #4]
 800b0c0:	f103 0308 	add.w	r3, r3, #8
 800b0c4:	d1f8      	bne.n	800b0b8 <arm_fill_q15+0x4c>
 800b0c6:	e7e9      	b.n	800b09c <arm_fill_q15+0x30>

0800b0c8 <arm_float_to_q15>:
 800b0c8:	b530      	push	{r4, r5, lr}
 800b0ca:	0895      	lsrs	r5, r2, #2
 800b0cc:	d069      	beq.n	800b1a2 <arm_float_to_q15+0xda>
 800b0ce:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800b0d2:	f100 0c10 	add.w	ip, r0, #16
 800b0d6:	eefe 5a00 	vmov.f32	s11, #224	@ 0xbf000000 -0.5
 800b0da:	ed9f 6a55 	vldr	s12, [pc, #340]	@ 800b230 <arm_float_to_q15+0x168>
 800b0de:	f101 0e08 	add.w	lr, r1, #8
 800b0e2:	462c      	mov	r4, r5
 800b0e4:	ed5c 7a04 	vldr	s15, [ip, #-16]
 800b0e8:	ee67 6a86 	vmul.f32	s13, s15, s12
 800b0ec:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800b0f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0f4:	fe77 7a25 	vselgt.f32	s15, s14, s11
 800b0f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b100:	ee17 3a90 	vmov	r3, s15
 800b104:	f303 030f 	ssat	r3, #16, r3
 800b108:	f82e 3c08 	strh.w	r3, [lr, #-8]
 800b10c:	ed5c 7a03 	vldr	s15, [ip, #-12]
 800b110:	ee67 6a86 	vmul.f32	s13, s15, s12
 800b114:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800b118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b11c:	fe77 7a25 	vselgt.f32	s15, s14, s11
 800b120:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b124:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b128:	ee17 3a90 	vmov	r3, s15
 800b12c:	f303 030f 	ssat	r3, #16, r3
 800b130:	f82e 3c06 	strh.w	r3, [lr, #-6]
 800b134:	ed5c 7a02 	vldr	s15, [ip, #-8]
 800b138:	ee67 6a86 	vmul.f32	s13, s15, s12
 800b13c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800b140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b144:	fe77 7a25 	vselgt.f32	s15, s14, s11
 800b148:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b14c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b150:	ee17 3a90 	vmov	r3, s15
 800b154:	f303 030f 	ssat	r3, #16, r3
 800b158:	f82e 3c04 	strh.w	r3, [lr, #-4]
 800b15c:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800b160:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b164:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b168:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b16c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b174:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800b178:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b17c:	bfcc      	ite	gt
 800b17e:	ee16 3a90 	vmovgt	r3, s13
 800b182:	ee17 3a90 	vmovle	r3, s15
 800b186:	f303 030f 	ssat	r3, #16, r3
 800b18a:	3c01      	subs	r4, #1
 800b18c:	f82e 3c02 	strh.w	r3, [lr, #-2]
 800b190:	f10c 0c10 	add.w	ip, ip, #16
 800b194:	f10e 0e08 	add.w	lr, lr, #8
 800b198:	d1a4      	bne.n	800b0e4 <arm_float_to_q15+0x1c>
 800b19a:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800b19e:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800b1a2:	f012 0203 	ands.w	r2, r2, #3
 800b1a6:	d042      	beq.n	800b22e <arm_float_to_q15+0x166>
 800b1a8:	edd0 7a00 	vldr	s15, [r0]
 800b1ac:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800b1b0:	eddf 5a1f 	vldr	s11, [pc, #124]	@ 800b230 <arm_float_to_q15+0x168>
 800b1b4:	eebe 6a00 	vmov.f32	s12, #224	@ 0xbf000000 -0.5
 800b1b8:	ee67 6aa5 	vmul.f32	s13, s15, s11
 800b1bc:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800b1c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1c4:	fe77 7a06 	vselgt.f32	s15, s14, s12
 800b1c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b1d0:	ee17 3a90 	vmov	r3, s15
 800b1d4:	f303 030f 	ssat	r3, #16, r3
 800b1d8:	3a01      	subs	r2, #1
 800b1da:	800b      	strh	r3, [r1, #0]
 800b1dc:	d027      	beq.n	800b22e <arm_float_to_q15+0x166>
 800b1de:	edd0 7a01 	vldr	s15, [r0, #4]
 800b1e2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b1e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b1ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1ee:	fe77 6a06 	vselgt.f32	s13, s14, s12
 800b1f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b1fa:	ee17 3a90 	vmov	r3, s15
 800b1fe:	f303 030f 	ssat	r3, #16, r3
 800b202:	2a01      	cmp	r2, #1
 800b204:	804b      	strh	r3, [r1, #2]
 800b206:	d012      	beq.n	800b22e <arm_float_to_q15+0x166>
 800b208:	edd0 7a02 	vldr	s15, [r0, #8]
 800b20c:	ee67 5aa5 	vmul.f32	s11, s15, s11
 800b210:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 800b214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b218:	fe37 7a06 	vselgt.f32	s14, s14, s12
 800b21c:	ee37 7a25 	vadd.f32	s14, s14, s11
 800b220:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800b224:	ee17 3a10 	vmov	r3, s14
 800b228:	f303 030f 	ssat	r3, #16, r3
 800b22c:	808b      	strh	r3, [r1, #4]
 800b22e:	bd30      	pop	{r4, r5, pc}
 800b230:	47000000 	.word	0x47000000

0800b234 <arm_float_to_q7>:
 800b234:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b236:	0895      	lsrs	r5, r2, #2
 800b238:	d06f      	beq.n	800b31a <arm_float_to_q7+0xe6>
 800b23a:	f101 0c04 	add.w	ip, r1, #4
 800b23e:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800b242:	eebe 5a00 	vmov.f32	s10, #224	@ 0xbf000000 -0.5
 800b246:	f100 0e10 	add.w	lr, r0, #16
 800b24a:	eddf 5a5f 	vldr	s11, [pc, #380]	@ 800b3c8 <arm_float_to_q7+0x194>
 800b24e:	00ae      	lsls	r6, r5, #2
 800b250:	eb0c 0485 	add.w	r4, ip, r5, lsl #2
 800b254:	ed5e 7a04 	vldr	s15, [lr, #-16]
 800b258:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800b25c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800b260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b264:	fe76 7a05 	vselgt.f32	s15, s12, s10
 800b268:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b26c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b270:	ee17 3a90 	vmov	r3, s15
 800b274:	b21b      	sxth	r3, r3
 800b276:	f303 0307 	ssat	r3, #8, r3
 800b27a:	f80c 3c04 	strb.w	r3, [ip, #-4]
 800b27e:	ed5e 7a03 	vldr	s15, [lr, #-12]
 800b282:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800b286:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800b28a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b28e:	fe76 7a05 	vselgt.f32	s15, s12, s10
 800b292:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b296:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b29a:	ee17 3a90 	vmov	r3, s15
 800b29e:	b21b      	sxth	r3, r3
 800b2a0:	f303 0307 	ssat	r3, #8, r3
 800b2a4:	f80c 3c03 	strb.w	r3, [ip, #-3]
 800b2a8:	ed5e 7a02 	vldr	s15, [lr, #-8]
 800b2ac:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800b2b0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800b2b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2b8:	fe76 7a05 	vselgt.f32	s15, s12, s10
 800b2bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b2c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b2c4:	ee17 3a90 	vmov	r3, s15
 800b2c8:	b21b      	sxth	r3, r3
 800b2ca:	f303 0307 	ssat	r3, #8, r3
 800b2ce:	f80c 3c02 	strb.w	r3, [ip, #-2]
 800b2d2:	ed5e 6a01 	vldr	s13, [lr, #-4]
 800b2d6:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800b2da:	ee76 7a86 	vadd.f32	s15, s13, s12
 800b2de:	ee36 7ac6 	vsub.f32	s14, s13, s12
 800b2e2:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800b2e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b2ea:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800b2ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2f2:	ee17 3a90 	vmov	r3, s15
 800b2f6:	ee17 7a10 	vmov	r7, s14
 800b2fa:	b21b      	sxth	r3, r3
 800b2fc:	b23f      	sxth	r7, r7
 800b2fe:	dd56      	ble.n	800b3ae <arm_float_to_q7+0x17a>
 800b300:	f303 0307 	ssat	r3, #8, r3
 800b304:	f80c 3c01 	strb.w	r3, [ip, #-1]
 800b308:	f10c 0c04 	add.w	ip, ip, #4
 800b30c:	f10e 0e10 	add.w	lr, lr, #16
 800b310:	4564      	cmp	r4, ip
 800b312:	d19f      	bne.n	800b254 <arm_float_to_q7+0x20>
 800b314:	4431      	add	r1, r6
 800b316:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800b31a:	f012 0203 	ands.w	r2, r2, #3
 800b31e:	d045      	beq.n	800b3ac <arm_float_to_q7+0x178>
 800b320:	edd0 7a00 	vldr	s15, [r0]
 800b324:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800b328:	ed9f 5a27 	vldr	s10, [pc, #156]	@ 800b3c8 <arm_float_to_q7+0x194>
 800b32c:	eefe 5a00 	vmov.f32	s11, #224	@ 0xbf000000 -0.5
 800b330:	ee67 6a85 	vmul.f32	s13, s15, s10
 800b334:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800b338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b33c:	fe77 7a25 	vselgt.f32	s15, s14, s11
 800b340:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b344:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b348:	ee17 3a90 	vmov	r3, s15
 800b34c:	b21b      	sxth	r3, r3
 800b34e:	f303 0307 	ssat	r3, #8, r3
 800b352:	3a01      	subs	r2, #1
 800b354:	700b      	strb	r3, [r1, #0]
 800b356:	d029      	beq.n	800b3ac <arm_float_to_q7+0x178>
 800b358:	edd0 6a01 	vldr	s13, [r0, #4]
 800b35c:	ee26 6a85 	vmul.f32	s12, s13, s10
 800b360:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 800b364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b368:	fe77 6a25 	vselgt.f32	s13, s14, s11
 800b36c:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b370:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800b374:	ee16 3a90 	vmov	r3, s13
 800b378:	b21b      	sxth	r3, r3
 800b37a:	f303 0307 	ssat	r3, #8, r3
 800b37e:	2a01      	cmp	r2, #1
 800b380:	704b      	strb	r3, [r1, #1]
 800b382:	d013      	beq.n	800b3ac <arm_float_to_q7+0x178>
 800b384:	edd0 7a02 	vldr	s15, [r0, #8]
 800b388:	ee27 5a85 	vmul.f32	s10, s15, s10
 800b38c:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 800b390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b394:	fe77 7a25 	vselgt.f32	s15, s14, s11
 800b398:	ee77 7a85 	vadd.f32	s15, s15, s10
 800b39c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b3a0:	ee17 3a90 	vmov	r3, s15
 800b3a4:	b21b      	sxth	r3, r3
 800b3a6:	f303 0307 	ssat	r3, #8, r3
 800b3aa:	708b      	strb	r3, [r1, #2]
 800b3ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3ae:	f307 0707 	ssat	r7, #8, r7
 800b3b2:	f80c 7c01 	strb.w	r7, [ip, #-1]
 800b3b6:	f10c 0c04 	add.w	ip, ip, #4
 800b3ba:	f10e 0e10 	add.w	lr, lr, #16
 800b3be:	45a4      	cmp	ip, r4
 800b3c0:	f47f af48 	bne.w	800b254 <arm_float_to_q7+0x20>
 800b3c4:	e7a6      	b.n	800b314 <arm_float_to_q7+0xe0>
 800b3c6:	bf00      	nop
 800b3c8:	43000000 	.word	0x43000000

0800b3cc <arm_q15_to_float>:
 800b3cc:	b530      	push	{r4, r5, lr}
 800b3ce:	0894      	lsrs	r4, r2, #2
 800b3d0:	d038      	beq.n	800b444 <arm_q15_to_float+0x78>
 800b3d2:	f100 0c08 	add.w	ip, r0, #8
 800b3d6:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800b494 <arm_q15_to_float+0xc8>
 800b3da:	f101 0310 	add.w	r3, r1, #16
 800b3de:	46a6      	mov	lr, r4
 800b3e0:	f93c 5c08 	ldrsh.w	r5, [ip, #-8]
 800b3e4:	3310      	adds	r3, #16
 800b3e6:	f10c 0c08 	add.w	ip, ip, #8
 800b3ea:	f1be 0e01 	subs.w	lr, lr, #1
 800b3ee:	ee07 5a90 	vmov	s15, r5
 800b3f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b3f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b3fa:	ed43 7a08 	vstr	s15, [r3, #-32]	@ 0xffffffe0
 800b3fe:	f93c 5c0e 	ldrsh.w	r5, [ip, #-14]
 800b402:	ee07 5a90 	vmov	s15, r5
 800b406:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b40a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b40e:	ed43 7a07 	vstr	s15, [r3, #-28]	@ 0xffffffe4
 800b412:	f93c 5c0c 	ldrsh.w	r5, [ip, #-12]
 800b416:	ee07 5a90 	vmov	s15, r5
 800b41a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b41e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b422:	ed43 7a06 	vstr	s15, [r3, #-24]	@ 0xffffffe8
 800b426:	f93c 5c0a 	ldrsh.w	r5, [ip, #-10]
 800b42a:	ee07 5a90 	vmov	s15, r5
 800b42e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b432:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b436:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 800b43a:	d1d1      	bne.n	800b3e0 <arm_q15_to_float+0x14>
 800b43c:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 800b440:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800b444:	f012 0203 	ands.w	r2, r2, #3
 800b448:	d023      	beq.n	800b492 <arm_q15_to_float+0xc6>
 800b44a:	f9b0 3000 	ldrsh.w	r3, [r0]
 800b44e:	3a01      	subs	r2, #1
 800b450:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800b494 <arm_q15_to_float+0xc8>
 800b454:	ee07 3a90 	vmov	s15, r3
 800b458:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b45c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b460:	edc1 7a00 	vstr	s15, [r1]
 800b464:	d015      	beq.n	800b492 <arm_q15_to_float+0xc6>
 800b466:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800b46a:	2a01      	cmp	r2, #1
 800b46c:	ee07 3a90 	vmov	s15, r3
 800b470:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b474:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b478:	edc1 7a01 	vstr	s15, [r1, #4]
 800b47c:	d009      	beq.n	800b492 <arm_q15_to_float+0xc6>
 800b47e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800b482:	ee07 3a90 	vmov	s15, r3
 800b486:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b48a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b48e:	edc1 7a02 	vstr	s15, [r1, #8]
 800b492:	bd30      	pop	{r4, r5, pc}
 800b494:	38000000 	.word	0x38000000

0800b498 <arm_q7_to_float>:
 800b498:	b530      	push	{r4, r5, lr}
 800b49a:	0894      	lsrs	r4, r2, #2
 800b49c:	d036      	beq.n	800b50c <arm_q7_to_float+0x74>
 800b49e:	1d03      	adds	r3, r0, #4
 800b4a0:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800b4a4:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 800b55c <arm_q7_to_float+0xc4>
 800b4a8:	f101 0010 	add.w	r0, r1, #16
 800b4ac:	f913 ec04 	ldrsb.w	lr, [r3, #-4]
 800b4b0:	3010      	adds	r0, #16
 800b4b2:	ee07 ea90 	vmov	s15, lr
 800b4b6:	469e      	mov	lr, r3
 800b4b8:	3304      	adds	r3, #4
 800b4ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b4be:	45e6      	cmp	lr, ip
 800b4c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b4c4:	ed40 7a08 	vstr	s15, [r0, #-32]	@ 0xffffffe0
 800b4c8:	f913 5c07 	ldrsb.w	r5, [r3, #-7]
 800b4cc:	ee07 5a90 	vmov	s15, r5
 800b4d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b4d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b4d8:	ed40 7a07 	vstr	s15, [r0, #-28]	@ 0xffffffe4
 800b4dc:	f913 5c06 	ldrsb.w	r5, [r3, #-6]
 800b4e0:	ee07 5a90 	vmov	s15, r5
 800b4e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b4e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b4ec:	ed40 7a06 	vstr	s15, [r0, #-24]	@ 0xffffffe8
 800b4f0:	f913 5c05 	ldrsb.w	r5, [r3, #-5]
 800b4f4:	ee07 5a90 	vmov	s15, r5
 800b4f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b4fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b500:	ed40 7a05 	vstr	s15, [r0, #-20]	@ 0xffffffec
 800b504:	d1d2      	bne.n	800b4ac <arm_q7_to_float+0x14>
 800b506:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 800b50a:	4660      	mov	r0, ip
 800b50c:	f012 0203 	ands.w	r2, r2, #3
 800b510:	d023      	beq.n	800b55a <arm_q7_to_float+0xc2>
 800b512:	f990 3000 	ldrsb.w	r3, [r0]
 800b516:	3a01      	subs	r2, #1
 800b518:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800b55c <arm_q7_to_float+0xc4>
 800b51c:	ee07 3a90 	vmov	s15, r3
 800b520:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b524:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b528:	edc1 7a00 	vstr	s15, [r1]
 800b52c:	d015      	beq.n	800b55a <arm_q7_to_float+0xc2>
 800b52e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800b532:	2a01      	cmp	r2, #1
 800b534:	ee07 3a90 	vmov	s15, r3
 800b538:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b53c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b540:	edc1 7a01 	vstr	s15, [r1, #4]
 800b544:	d009      	beq.n	800b55a <arm_q7_to_float+0xc2>
 800b546:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800b54a:	ee07 3a90 	vmov	s15, r3
 800b54e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b552:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b556:	edc1 7a02 	vstr	s15, [r1, #8]
 800b55a:	bd30      	pop	{r4, r5, pc}
 800b55c:	3c000000 	.word	0x3c000000

0800b560 <ai_array_to_buffer_fmt>:
 800b560:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800b564:	2b02      	cmp	r3, #2
 800b566:	d050      	beq.n	800b60a <ai_array_to_buffer_fmt+0xaa>
 800b568:	f020 427e 	bic.w	r2, r0, #4261412864	@ 0xfe000000
 800b56c:	4b29      	ldr	r3, [pc, #164]	@ (800b614 <ai_array_to_buffer_fmt+0xb4>)
 800b56e:	429a      	cmp	r2, r3
 800b570:	d00b      	beq.n	800b58a <ai_array_to_buffer_fmt+0x2a>
 800b572:	dc1c      	bgt.n	800b5ae <ai_array_to_buffer_fmt+0x4e>
 800b574:	4b28      	ldr	r3, [pc, #160]	@ (800b618 <ai_array_to_buffer_fmt+0xb8>)
 800b576:	429a      	cmp	r2, r3
 800b578:	d007      	beq.n	800b58a <ai_array_to_buffer_fmt+0x2a>
 800b57a:	dd0b      	ble.n	800b594 <ai_array_to_buffer_fmt+0x34>
 800b57c:	4b27      	ldr	r3, [pc, #156]	@ (800b61c <ai_array_to_buffer_fmt+0xbc>)
 800b57e:	429a      	cmp	r2, r3
 800b580:	d003      	beq.n	800b58a <ai_array_to_buffer_fmt+0x2a>
 800b582:	f503 33fa 	add.w	r3, r3, #128000	@ 0x1f400
 800b586:	429a      	cmp	r2, r3
 800b588:	d131      	bne.n	800b5ee <ai_array_to_buffer_fmt+0x8e>
 800b58a:	4613      	mov	r3, r2
 800b58c:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800b590:	4318      	orrs	r0, r3
 800b592:	4770      	bx	lr
 800b594:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800b598:	429a      	cmp	r2, r3
 800b59a:	d0f6      	beq.n	800b58a <ai_array_to_buffer_fmt+0x2a>
 800b59c:	dd2c      	ble.n	800b5f8 <ai_array_to_buffer_fmt+0x98>
 800b59e:	4b20      	ldr	r3, [pc, #128]	@ (800b620 <ai_array_to_buffer_fmt+0xc0>)
 800b5a0:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800b5a4:	429a      	cmp	r2, r3
 800b5a6:	bf18      	it	ne
 800b5a8:	2340      	movne	r3, #64	@ 0x40
 800b5aa:	4318      	orrs	r0, r3
 800b5ac:	4770      	bx	lr
 800b5ae:	4b1d      	ldr	r3, [pc, #116]	@ (800b624 <ai_array_to_buffer_fmt+0xc4>)
 800b5b0:	429a      	cmp	r2, r3
 800b5b2:	d0ea      	beq.n	800b58a <ai_array_to_buffer_fmt+0x2a>
 800b5b4:	dd0e      	ble.n	800b5d4 <ai_array_to_buffer_fmt+0x74>
 800b5b6:	4b1c      	ldr	r3, [pc, #112]	@ (800b628 <ai_array_to_buffer_fmt+0xc8>)
 800b5b8:	429a      	cmp	r2, r3
 800b5ba:	d0e6      	beq.n	800b58a <ai_array_to_buffer_fmt+0x2a>
 800b5bc:	f503 037e 	add.w	r3, r3, #16646144	@ 0xfe0000
 800b5c0:	429a      	cmp	r2, r3
 800b5c2:	d0e2      	beq.n	800b58a <ai_array_to_buffer_fmt+0x2a>
 800b5c4:	4b19      	ldr	r3, [pc, #100]	@ (800b62c <ai_array_to_buffer_fmt+0xcc>)
 800b5c6:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800b5ca:	429a      	cmp	r2, r3
 800b5cc:	bf18      	it	ne
 800b5ce:	2340      	movne	r3, #64	@ 0x40
 800b5d0:	4318      	orrs	r0, r3
 800b5d2:	4770      	bx	lr
 800b5d4:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	d0d6      	beq.n	800b58a <ai_array_to_buffer_fmt+0x2a>
 800b5dc:	3307      	adds	r3, #7
 800b5de:	429a      	cmp	r2, r3
 800b5e0:	d0d3      	beq.n	800b58a <ai_array_to_buffer_fmt+0x2a>
 800b5e2:	f2a3 3387 	subw	r3, r3, #903	@ 0x387
 800b5e6:	429a      	cmp	r2, r3
 800b5e8:	bf18      	it	ne
 800b5ea:	2340      	movne	r3, #64	@ 0x40
 800b5ec:	e7ce      	b.n	800b58c <ai_array_to_buffer_fmt+0x2c>
 800b5ee:	4b10      	ldr	r3, [pc, #64]	@ (800b630 <ai_array_to_buffer_fmt+0xd0>)
 800b5f0:	429a      	cmp	r2, r3
 800b5f2:	bf18      	it	ne
 800b5f4:	2340      	movne	r3, #64	@ 0x40
 800b5f6:	e7c9      	b.n	800b58c <ai_array_to_buffer_fmt+0x2c>
 800b5f8:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800b5fc:	429a      	cmp	r2, r3
 800b5fe:	d0c4      	beq.n	800b58a <ai_array_to_buffer_fmt+0x2a>
 800b600:	3380      	adds	r3, #128	@ 0x80
 800b602:	429a      	cmp	r2, r3
 800b604:	bf18      	it	ne
 800b606:	2340      	movne	r3, #64	@ 0x40
 800b608:	e7c0      	b.n	800b58c <ai_array_to_buffer_fmt+0x2c>
 800b60a:	4b0a      	ldr	r3, [pc, #40]	@ (800b634 <ai_array_to_buffer_fmt+0xd4>)
 800b60c:	4003      	ands	r3, r0
 800b60e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b612:	e7bb      	b.n	800b58c <ai_array_to_buffer_fmt+0x2c>
 800b614:	00840040 	.word	0x00840040
 800b618:	00040840 	.word	0x00040840
 800b61c:	00041040 	.word	0x00041040
 800b620:	00040447 	.word	0x00040447
 800b624:	00840840 	.word	0x00840840
 800b628:	00841040 	.word	0x00841040
 800b62c:	0084084f 	.word	0x0084084f
 800b630:	0004084f 	.word	0x0004084f
 800b634:	00803fff 	.word	0x00803fff

0800b638 <ai_array_get_byte_size>:
 800b638:	b319      	cbz	r1, 800b682 <ai_array_get_byte_size+0x4a>
 800b63a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800b63e:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800b642:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 800b646:	11c0      	asrs	r0, r0, #7
 800b648:	fb03 f101 	mul.w	r1, r3, r1
 800b64c:	2a04      	cmp	r2, #4
 800b64e:	f101 0107 	add.w	r1, r1, #7
 800b652:	f021 0107 	bic.w	r1, r1, #7
 800b656:	fa21 f10c 	lsr.w	r1, r1, ip
 800b65a:	d00b      	beq.n	800b674 <ai_array_get_byte_size+0x3c>
 800b65c:	2a08      	cmp	r2, #8
 800b65e:	d002      	beq.n	800b666 <ai_array_get_byte_size+0x2e>
 800b660:	3107      	adds	r1, #7
 800b662:	08c8      	lsrs	r0, r1, #3
 800b664:	4770      	bx	lr
 800b666:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 800b66a:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800b66e:	3107      	adds	r1, #7
 800b670:	08c8      	lsrs	r0, r1, #3
 800b672:	4770      	bx	lr
 800b674:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 800b678:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 800b67c:	3107      	adds	r1, #7
 800b67e:	08c8      	lsrs	r0, r1, #3
 800b680:	4770      	bx	lr
 800b682:	4608      	mov	r0, r1
 800b684:	4770      	bx	lr
 800b686:	bf00      	nop

0800b688 <ai_array_get_data_byte_size>:
 800b688:	b161      	cbz	r1, 800b6a4 <ai_array_get_data_byte_size+0x1c>
 800b68a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800b68e:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800b692:	fb03 f101 	mul.w	r1, r3, r1
 800b696:	1dc8      	adds	r0, r1, #7
 800b698:	f020 0007 	bic.w	r0, r0, #7
 800b69c:	40d0      	lsrs	r0, r2
 800b69e:	3007      	adds	r0, #7
 800b6a0:	08c0      	lsrs	r0, r0, #3
 800b6a2:	4770      	bx	lr
 800b6a4:	4608      	mov	r0, r1
 800b6a6:	4770      	bx	lr

0800b6a8 <ai_version_get>:
 800b6a8:	0212      	lsls	r2, r2, #8
 800b6aa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800b6ae:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800b6b2:	4770      	bx	lr

0800b6b4 <get_tensor_byte_size>:
 800b6b4:	b430      	push	{r4, r5}
 800b6b6:	6985      	ldr	r5, [r0, #24]
 800b6b8:	68c4      	ldr	r4, [r0, #12]
 800b6ba:	6941      	ldr	r1, [r0, #20]
 800b6bc:	4b06      	ldr	r3, [pc, #24]	@ (800b6d8 <get_tensor_byte_size+0x24>)
 800b6be:	6828      	ldr	r0, [r5, #0]
 800b6c0:	4a06      	ldr	r2, [pc, #24]	@ (800b6dc <get_tensor_byte_size+0x28>)
 800b6c2:	4003      	ands	r3, r0
 800b6c4:	68c9      	ldr	r1, [r1, #12]
 800b6c6:	68e0      	ldr	r0, [r4, #12]
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	fb01 f000 	mul.w	r0, r1, r0
 800b6ce:	d101      	bne.n	800b6d4 <get_tensor_byte_size+0x20>
 800b6d0:	3007      	adds	r0, #7
 800b6d2:	08c0      	lsrs	r0, r0, #3
 800b6d4:	bc30      	pop	{r4, r5}
 800b6d6:	4770      	bx	lr
 800b6d8:	017fffff 	.word	0x017fffff
 800b6dc:	000400c0 	.word	0x000400c0

0800b6e0 <core_tensor_clone>:
 800b6e0:	680b      	ldr	r3, [r1, #0]
 800b6e2:	6882      	ldr	r2, [r0, #8]
 800b6e4:	6003      	str	r3, [r0, #0]
 800b6e6:	684b      	ldr	r3, [r1, #4]
 800b6e8:	6043      	str	r3, [r0, #4]
 800b6ea:	698b      	ldr	r3, [r1, #24]
 800b6ec:	6183      	str	r3, [r0, #24]
 800b6ee:	688b      	ldr	r3, [r1, #8]
 800b6f0:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800b6f4:	f363 221f 	bfi	r2, r3, #8, #24
 800b6f8:	b410      	push	{r4}
 800b6fa:	6082      	str	r2, [r0, #8]
 800b6fc:	b15b      	cbz	r3, 800b716 <core_tensor_clone+0x36>
 800b6fe:	2300      	movs	r3, #0
 800b700:	68cc      	ldr	r4, [r1, #12]
 800b702:	68c2      	ldr	r2, [r0, #12]
 800b704:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 800b708:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 800b70c:	3301      	adds	r3, #1
 800b70e:	6882      	ldr	r2, [r0, #8]
 800b710:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 800b714:	d3f4      	bcc.n	800b700 <core_tensor_clone+0x20>
 800b716:	690b      	ldr	r3, [r1, #16]
 800b718:	6902      	ldr	r2, [r0, #16]
 800b71a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800b71e:	f363 221f 	bfi	r2, r3, #8, #24
 800b722:	6102      	str	r2, [r0, #16]
 800b724:	b15b      	cbz	r3, 800b73e <core_tensor_clone+0x5e>
 800b726:	2300      	movs	r3, #0
 800b728:	694c      	ldr	r4, [r1, #20]
 800b72a:	6942      	ldr	r2, [r0, #20]
 800b72c:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 800b730:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 800b734:	3301      	adds	r3, #1
 800b736:	6902      	ldr	r2, [r0, #16]
 800b738:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 800b73c:	d3f4      	bcc.n	800b728 <core_tensor_clone+0x48>
 800b73e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b742:	4770      	bx	lr

0800b744 <core_array_clone>:
 800b744:	4684      	mov	ip, r0
 800b746:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 800b748:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800b74c:	4770      	bx	lr
 800b74e:	bf00      	nop

0800b750 <sbrk_aligned>:
 800b750:	b570      	push	{r4, r5, r6, lr}
 800b752:	4e0f      	ldr	r6, [pc, #60]	@ (800b790 <sbrk_aligned+0x40>)
 800b754:	460c      	mov	r4, r1
 800b756:	6831      	ldr	r1, [r6, #0]
 800b758:	4605      	mov	r5, r0
 800b75a:	b911      	cbnz	r1, 800b762 <sbrk_aligned+0x12>
 800b75c:	f000 fb54 	bl	800be08 <_sbrk_r>
 800b760:	6030      	str	r0, [r6, #0]
 800b762:	4621      	mov	r1, r4
 800b764:	4628      	mov	r0, r5
 800b766:	f000 fb4f 	bl	800be08 <_sbrk_r>
 800b76a:	1c43      	adds	r3, r0, #1
 800b76c:	d103      	bne.n	800b776 <sbrk_aligned+0x26>
 800b76e:	f04f 34ff 	mov.w	r4, #4294967295
 800b772:	4620      	mov	r0, r4
 800b774:	bd70      	pop	{r4, r5, r6, pc}
 800b776:	1cc4      	adds	r4, r0, #3
 800b778:	f024 0403 	bic.w	r4, r4, #3
 800b77c:	42a0      	cmp	r0, r4
 800b77e:	d0f8      	beq.n	800b772 <sbrk_aligned+0x22>
 800b780:	1a21      	subs	r1, r4, r0
 800b782:	4628      	mov	r0, r5
 800b784:	f000 fb40 	bl	800be08 <_sbrk_r>
 800b788:	3001      	adds	r0, #1
 800b78a:	d1f2      	bne.n	800b772 <sbrk_aligned+0x22>
 800b78c:	e7ef      	b.n	800b76e <sbrk_aligned+0x1e>
 800b78e:	bf00      	nop
 800b790:	2404b850 	.word	0x2404b850

0800b794 <_malloc_r>:
 800b794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b798:	1ccd      	adds	r5, r1, #3
 800b79a:	f025 0503 	bic.w	r5, r5, #3
 800b79e:	3508      	adds	r5, #8
 800b7a0:	2d0c      	cmp	r5, #12
 800b7a2:	bf38      	it	cc
 800b7a4:	250c      	movcc	r5, #12
 800b7a6:	2d00      	cmp	r5, #0
 800b7a8:	4606      	mov	r6, r0
 800b7aa:	db01      	blt.n	800b7b0 <_malloc_r+0x1c>
 800b7ac:	42a9      	cmp	r1, r5
 800b7ae:	d904      	bls.n	800b7ba <_malloc_r+0x26>
 800b7b0:	230c      	movs	r3, #12
 800b7b2:	6033      	str	r3, [r6, #0]
 800b7b4:	2000      	movs	r0, #0
 800b7b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b890 <_malloc_r+0xfc>
 800b7be:	f000 f869 	bl	800b894 <__malloc_lock>
 800b7c2:	f8d8 3000 	ldr.w	r3, [r8]
 800b7c6:	461c      	mov	r4, r3
 800b7c8:	bb44      	cbnz	r4, 800b81c <_malloc_r+0x88>
 800b7ca:	4629      	mov	r1, r5
 800b7cc:	4630      	mov	r0, r6
 800b7ce:	f7ff ffbf 	bl	800b750 <sbrk_aligned>
 800b7d2:	1c43      	adds	r3, r0, #1
 800b7d4:	4604      	mov	r4, r0
 800b7d6:	d158      	bne.n	800b88a <_malloc_r+0xf6>
 800b7d8:	f8d8 4000 	ldr.w	r4, [r8]
 800b7dc:	4627      	mov	r7, r4
 800b7de:	2f00      	cmp	r7, #0
 800b7e0:	d143      	bne.n	800b86a <_malloc_r+0xd6>
 800b7e2:	2c00      	cmp	r4, #0
 800b7e4:	d04b      	beq.n	800b87e <_malloc_r+0xea>
 800b7e6:	6823      	ldr	r3, [r4, #0]
 800b7e8:	4639      	mov	r1, r7
 800b7ea:	4630      	mov	r0, r6
 800b7ec:	eb04 0903 	add.w	r9, r4, r3
 800b7f0:	f000 fb0a 	bl	800be08 <_sbrk_r>
 800b7f4:	4581      	cmp	r9, r0
 800b7f6:	d142      	bne.n	800b87e <_malloc_r+0xea>
 800b7f8:	6821      	ldr	r1, [r4, #0]
 800b7fa:	1a6d      	subs	r5, r5, r1
 800b7fc:	4629      	mov	r1, r5
 800b7fe:	4630      	mov	r0, r6
 800b800:	f7ff ffa6 	bl	800b750 <sbrk_aligned>
 800b804:	3001      	adds	r0, #1
 800b806:	d03a      	beq.n	800b87e <_malloc_r+0xea>
 800b808:	6823      	ldr	r3, [r4, #0]
 800b80a:	442b      	add	r3, r5
 800b80c:	6023      	str	r3, [r4, #0]
 800b80e:	f8d8 3000 	ldr.w	r3, [r8]
 800b812:	685a      	ldr	r2, [r3, #4]
 800b814:	bb62      	cbnz	r2, 800b870 <_malloc_r+0xdc>
 800b816:	f8c8 7000 	str.w	r7, [r8]
 800b81a:	e00f      	b.n	800b83c <_malloc_r+0xa8>
 800b81c:	6822      	ldr	r2, [r4, #0]
 800b81e:	1b52      	subs	r2, r2, r5
 800b820:	d420      	bmi.n	800b864 <_malloc_r+0xd0>
 800b822:	2a0b      	cmp	r2, #11
 800b824:	d917      	bls.n	800b856 <_malloc_r+0xc2>
 800b826:	1961      	adds	r1, r4, r5
 800b828:	42a3      	cmp	r3, r4
 800b82a:	6025      	str	r5, [r4, #0]
 800b82c:	bf18      	it	ne
 800b82e:	6059      	strne	r1, [r3, #4]
 800b830:	6863      	ldr	r3, [r4, #4]
 800b832:	bf08      	it	eq
 800b834:	f8c8 1000 	streq.w	r1, [r8]
 800b838:	5162      	str	r2, [r4, r5]
 800b83a:	604b      	str	r3, [r1, #4]
 800b83c:	4630      	mov	r0, r6
 800b83e:	f000 f82f 	bl	800b8a0 <__malloc_unlock>
 800b842:	f104 000b 	add.w	r0, r4, #11
 800b846:	1d23      	adds	r3, r4, #4
 800b848:	f020 0007 	bic.w	r0, r0, #7
 800b84c:	1ac2      	subs	r2, r0, r3
 800b84e:	bf1c      	itt	ne
 800b850:	1a1b      	subne	r3, r3, r0
 800b852:	50a3      	strne	r3, [r4, r2]
 800b854:	e7af      	b.n	800b7b6 <_malloc_r+0x22>
 800b856:	6862      	ldr	r2, [r4, #4]
 800b858:	42a3      	cmp	r3, r4
 800b85a:	bf0c      	ite	eq
 800b85c:	f8c8 2000 	streq.w	r2, [r8]
 800b860:	605a      	strne	r2, [r3, #4]
 800b862:	e7eb      	b.n	800b83c <_malloc_r+0xa8>
 800b864:	4623      	mov	r3, r4
 800b866:	6864      	ldr	r4, [r4, #4]
 800b868:	e7ae      	b.n	800b7c8 <_malloc_r+0x34>
 800b86a:	463c      	mov	r4, r7
 800b86c:	687f      	ldr	r7, [r7, #4]
 800b86e:	e7b6      	b.n	800b7de <_malloc_r+0x4a>
 800b870:	461a      	mov	r2, r3
 800b872:	685b      	ldr	r3, [r3, #4]
 800b874:	42a3      	cmp	r3, r4
 800b876:	d1fb      	bne.n	800b870 <_malloc_r+0xdc>
 800b878:	2300      	movs	r3, #0
 800b87a:	6053      	str	r3, [r2, #4]
 800b87c:	e7de      	b.n	800b83c <_malloc_r+0xa8>
 800b87e:	230c      	movs	r3, #12
 800b880:	6033      	str	r3, [r6, #0]
 800b882:	4630      	mov	r0, r6
 800b884:	f000 f80c 	bl	800b8a0 <__malloc_unlock>
 800b888:	e794      	b.n	800b7b4 <_malloc_r+0x20>
 800b88a:	6005      	str	r5, [r0, #0]
 800b88c:	e7d6      	b.n	800b83c <_malloc_r+0xa8>
 800b88e:	bf00      	nop
 800b890:	2404b854 	.word	0x2404b854

0800b894 <__malloc_lock>:
 800b894:	4801      	ldr	r0, [pc, #4]	@ (800b89c <__malloc_lock+0x8>)
 800b896:	f000 bb04 	b.w	800bea2 <__retarget_lock_acquire_recursive>
 800b89a:	bf00      	nop
 800b89c:	2404b998 	.word	0x2404b998

0800b8a0 <__malloc_unlock>:
 800b8a0:	4801      	ldr	r0, [pc, #4]	@ (800b8a8 <__malloc_unlock+0x8>)
 800b8a2:	f000 baff 	b.w	800bea4 <__retarget_lock_release_recursive>
 800b8a6:	bf00      	nop
 800b8a8:	2404b998 	.word	0x2404b998

0800b8ac <_realloc_r>:
 800b8ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8b0:	4680      	mov	r8, r0
 800b8b2:	4615      	mov	r5, r2
 800b8b4:	460c      	mov	r4, r1
 800b8b6:	b921      	cbnz	r1, 800b8c2 <_realloc_r+0x16>
 800b8b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b8bc:	4611      	mov	r1, r2
 800b8be:	f7ff bf69 	b.w	800b794 <_malloc_r>
 800b8c2:	b92a      	cbnz	r2, 800b8d0 <_realloc_r+0x24>
 800b8c4:	f000 fb06 	bl	800bed4 <_free_r>
 800b8c8:	2400      	movs	r4, #0
 800b8ca:	4620      	mov	r0, r4
 800b8cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8d0:	f000 fb4a 	bl	800bf68 <_malloc_usable_size_r>
 800b8d4:	4285      	cmp	r5, r0
 800b8d6:	4606      	mov	r6, r0
 800b8d8:	d802      	bhi.n	800b8e0 <_realloc_r+0x34>
 800b8da:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b8de:	d8f4      	bhi.n	800b8ca <_realloc_r+0x1e>
 800b8e0:	4629      	mov	r1, r5
 800b8e2:	4640      	mov	r0, r8
 800b8e4:	f7ff ff56 	bl	800b794 <_malloc_r>
 800b8e8:	4607      	mov	r7, r0
 800b8ea:	2800      	cmp	r0, #0
 800b8ec:	d0ec      	beq.n	800b8c8 <_realloc_r+0x1c>
 800b8ee:	42b5      	cmp	r5, r6
 800b8f0:	462a      	mov	r2, r5
 800b8f2:	4621      	mov	r1, r4
 800b8f4:	bf28      	it	cs
 800b8f6:	4632      	movcs	r2, r6
 800b8f8:	f000 fadd 	bl	800beb6 <memcpy>
 800b8fc:	4621      	mov	r1, r4
 800b8fe:	4640      	mov	r0, r8
 800b900:	f000 fae8 	bl	800bed4 <_free_r>
 800b904:	463c      	mov	r4, r7
 800b906:	e7e0      	b.n	800b8ca <_realloc_r+0x1e>

0800b908 <std>:
 800b908:	2300      	movs	r3, #0
 800b90a:	b510      	push	{r4, lr}
 800b90c:	4604      	mov	r4, r0
 800b90e:	e9c0 3300 	strd	r3, r3, [r0]
 800b912:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b916:	6083      	str	r3, [r0, #8]
 800b918:	8181      	strh	r1, [r0, #12]
 800b91a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b91c:	81c2      	strh	r2, [r0, #14]
 800b91e:	6183      	str	r3, [r0, #24]
 800b920:	4619      	mov	r1, r3
 800b922:	2208      	movs	r2, #8
 800b924:	305c      	adds	r0, #92	@ 0x5c
 800b926:	f000 fa33 	bl	800bd90 <memset>
 800b92a:	4b0d      	ldr	r3, [pc, #52]	@ (800b960 <std+0x58>)
 800b92c:	6263      	str	r3, [r4, #36]	@ 0x24
 800b92e:	4b0d      	ldr	r3, [pc, #52]	@ (800b964 <std+0x5c>)
 800b930:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b932:	4b0d      	ldr	r3, [pc, #52]	@ (800b968 <std+0x60>)
 800b934:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b936:	4b0d      	ldr	r3, [pc, #52]	@ (800b96c <std+0x64>)
 800b938:	6323      	str	r3, [r4, #48]	@ 0x30
 800b93a:	4b0d      	ldr	r3, [pc, #52]	@ (800b970 <std+0x68>)
 800b93c:	6224      	str	r4, [r4, #32]
 800b93e:	429c      	cmp	r4, r3
 800b940:	d006      	beq.n	800b950 <std+0x48>
 800b942:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b946:	4294      	cmp	r4, r2
 800b948:	d002      	beq.n	800b950 <std+0x48>
 800b94a:	33d0      	adds	r3, #208	@ 0xd0
 800b94c:	429c      	cmp	r4, r3
 800b94e:	d105      	bne.n	800b95c <std+0x54>
 800b950:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b958:	f000 baa2 	b.w	800bea0 <__retarget_lock_init_recursive>
 800b95c:	bd10      	pop	{r4, pc}
 800b95e:	bf00      	nop
 800b960:	0800bbad 	.word	0x0800bbad
 800b964:	0800bbcf 	.word	0x0800bbcf
 800b968:	0800bc07 	.word	0x0800bc07
 800b96c:	0800bc2b 	.word	0x0800bc2b
 800b970:	2404b858 	.word	0x2404b858

0800b974 <stdio_exit_handler>:
 800b974:	4a02      	ldr	r2, [pc, #8]	@ (800b980 <stdio_exit_handler+0xc>)
 800b976:	4903      	ldr	r1, [pc, #12]	@ (800b984 <stdio_exit_handler+0x10>)
 800b978:	4803      	ldr	r0, [pc, #12]	@ (800b988 <stdio_exit_handler+0x14>)
 800b97a:	f000 b869 	b.w	800ba50 <_fwalk_sglue>
 800b97e:	bf00      	nop
 800b980:	24000b50 	.word	0x24000b50
 800b984:	0800c8d1 	.word	0x0800c8d1
 800b988:	24000b60 	.word	0x24000b60

0800b98c <cleanup_stdio>:
 800b98c:	6841      	ldr	r1, [r0, #4]
 800b98e:	4b0c      	ldr	r3, [pc, #48]	@ (800b9c0 <cleanup_stdio+0x34>)
 800b990:	4299      	cmp	r1, r3
 800b992:	b510      	push	{r4, lr}
 800b994:	4604      	mov	r4, r0
 800b996:	d001      	beq.n	800b99c <cleanup_stdio+0x10>
 800b998:	f000 ff9a 	bl	800c8d0 <_fflush_r>
 800b99c:	68a1      	ldr	r1, [r4, #8]
 800b99e:	4b09      	ldr	r3, [pc, #36]	@ (800b9c4 <cleanup_stdio+0x38>)
 800b9a0:	4299      	cmp	r1, r3
 800b9a2:	d002      	beq.n	800b9aa <cleanup_stdio+0x1e>
 800b9a4:	4620      	mov	r0, r4
 800b9a6:	f000 ff93 	bl	800c8d0 <_fflush_r>
 800b9aa:	68e1      	ldr	r1, [r4, #12]
 800b9ac:	4b06      	ldr	r3, [pc, #24]	@ (800b9c8 <cleanup_stdio+0x3c>)
 800b9ae:	4299      	cmp	r1, r3
 800b9b0:	d004      	beq.n	800b9bc <cleanup_stdio+0x30>
 800b9b2:	4620      	mov	r0, r4
 800b9b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9b8:	f000 bf8a 	b.w	800c8d0 <_fflush_r>
 800b9bc:	bd10      	pop	{r4, pc}
 800b9be:	bf00      	nop
 800b9c0:	2404b858 	.word	0x2404b858
 800b9c4:	2404b8c0 	.word	0x2404b8c0
 800b9c8:	2404b928 	.word	0x2404b928

0800b9cc <global_stdio_init.part.0>:
 800b9cc:	b510      	push	{r4, lr}
 800b9ce:	4b0b      	ldr	r3, [pc, #44]	@ (800b9fc <global_stdio_init.part.0+0x30>)
 800b9d0:	4c0b      	ldr	r4, [pc, #44]	@ (800ba00 <global_stdio_init.part.0+0x34>)
 800b9d2:	4a0c      	ldr	r2, [pc, #48]	@ (800ba04 <global_stdio_init.part.0+0x38>)
 800b9d4:	601a      	str	r2, [r3, #0]
 800b9d6:	4620      	mov	r0, r4
 800b9d8:	2200      	movs	r2, #0
 800b9da:	2104      	movs	r1, #4
 800b9dc:	f7ff ff94 	bl	800b908 <std>
 800b9e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b9e4:	2201      	movs	r2, #1
 800b9e6:	2109      	movs	r1, #9
 800b9e8:	f7ff ff8e 	bl	800b908 <std>
 800b9ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b9f0:	2202      	movs	r2, #2
 800b9f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9f6:	2112      	movs	r1, #18
 800b9f8:	f7ff bf86 	b.w	800b908 <std>
 800b9fc:	2404b990 	.word	0x2404b990
 800ba00:	2404b858 	.word	0x2404b858
 800ba04:	0800b975 	.word	0x0800b975

0800ba08 <__sfp_lock_acquire>:
 800ba08:	4801      	ldr	r0, [pc, #4]	@ (800ba10 <__sfp_lock_acquire+0x8>)
 800ba0a:	f000 ba4a 	b.w	800bea2 <__retarget_lock_acquire_recursive>
 800ba0e:	bf00      	nop
 800ba10:	2404b999 	.word	0x2404b999

0800ba14 <__sfp_lock_release>:
 800ba14:	4801      	ldr	r0, [pc, #4]	@ (800ba1c <__sfp_lock_release+0x8>)
 800ba16:	f000 ba45 	b.w	800bea4 <__retarget_lock_release_recursive>
 800ba1a:	bf00      	nop
 800ba1c:	2404b999 	.word	0x2404b999

0800ba20 <__sinit>:
 800ba20:	b510      	push	{r4, lr}
 800ba22:	4604      	mov	r4, r0
 800ba24:	f7ff fff0 	bl	800ba08 <__sfp_lock_acquire>
 800ba28:	6a23      	ldr	r3, [r4, #32]
 800ba2a:	b11b      	cbz	r3, 800ba34 <__sinit+0x14>
 800ba2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba30:	f7ff bff0 	b.w	800ba14 <__sfp_lock_release>
 800ba34:	4b04      	ldr	r3, [pc, #16]	@ (800ba48 <__sinit+0x28>)
 800ba36:	6223      	str	r3, [r4, #32]
 800ba38:	4b04      	ldr	r3, [pc, #16]	@ (800ba4c <__sinit+0x2c>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d1f5      	bne.n	800ba2c <__sinit+0xc>
 800ba40:	f7ff ffc4 	bl	800b9cc <global_stdio_init.part.0>
 800ba44:	e7f2      	b.n	800ba2c <__sinit+0xc>
 800ba46:	bf00      	nop
 800ba48:	0800b98d 	.word	0x0800b98d
 800ba4c:	2404b990 	.word	0x2404b990

0800ba50 <_fwalk_sglue>:
 800ba50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba54:	4607      	mov	r7, r0
 800ba56:	4688      	mov	r8, r1
 800ba58:	4614      	mov	r4, r2
 800ba5a:	2600      	movs	r6, #0
 800ba5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ba60:	f1b9 0901 	subs.w	r9, r9, #1
 800ba64:	d505      	bpl.n	800ba72 <_fwalk_sglue+0x22>
 800ba66:	6824      	ldr	r4, [r4, #0]
 800ba68:	2c00      	cmp	r4, #0
 800ba6a:	d1f7      	bne.n	800ba5c <_fwalk_sglue+0xc>
 800ba6c:	4630      	mov	r0, r6
 800ba6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba72:	89ab      	ldrh	r3, [r5, #12]
 800ba74:	2b01      	cmp	r3, #1
 800ba76:	d907      	bls.n	800ba88 <_fwalk_sglue+0x38>
 800ba78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ba7c:	3301      	adds	r3, #1
 800ba7e:	d003      	beq.n	800ba88 <_fwalk_sglue+0x38>
 800ba80:	4629      	mov	r1, r5
 800ba82:	4638      	mov	r0, r7
 800ba84:	47c0      	blx	r8
 800ba86:	4306      	orrs	r6, r0
 800ba88:	3568      	adds	r5, #104	@ 0x68
 800ba8a:	e7e9      	b.n	800ba60 <_fwalk_sglue+0x10>

0800ba8c <iprintf>:
 800ba8c:	b40f      	push	{r0, r1, r2, r3}
 800ba8e:	b507      	push	{r0, r1, r2, lr}
 800ba90:	4906      	ldr	r1, [pc, #24]	@ (800baac <iprintf+0x20>)
 800ba92:	ab04      	add	r3, sp, #16
 800ba94:	6808      	ldr	r0, [r1, #0]
 800ba96:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba9a:	6881      	ldr	r1, [r0, #8]
 800ba9c:	9301      	str	r3, [sp, #4]
 800ba9e:	f000 fbed 	bl	800c27c <_vfiprintf_r>
 800baa2:	b003      	add	sp, #12
 800baa4:	f85d eb04 	ldr.w	lr, [sp], #4
 800baa8:	b004      	add	sp, #16
 800baaa:	4770      	bx	lr
 800baac:	24000b5c 	.word	0x24000b5c

0800bab0 <_puts_r>:
 800bab0:	6a03      	ldr	r3, [r0, #32]
 800bab2:	b570      	push	{r4, r5, r6, lr}
 800bab4:	6884      	ldr	r4, [r0, #8]
 800bab6:	4605      	mov	r5, r0
 800bab8:	460e      	mov	r6, r1
 800baba:	b90b      	cbnz	r3, 800bac0 <_puts_r+0x10>
 800babc:	f7ff ffb0 	bl	800ba20 <__sinit>
 800bac0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bac2:	07db      	lsls	r3, r3, #31
 800bac4:	d405      	bmi.n	800bad2 <_puts_r+0x22>
 800bac6:	89a3      	ldrh	r3, [r4, #12]
 800bac8:	0598      	lsls	r0, r3, #22
 800baca:	d402      	bmi.n	800bad2 <_puts_r+0x22>
 800bacc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bace:	f000 f9e8 	bl	800bea2 <__retarget_lock_acquire_recursive>
 800bad2:	89a3      	ldrh	r3, [r4, #12]
 800bad4:	0719      	lsls	r1, r3, #28
 800bad6:	d502      	bpl.n	800bade <_puts_r+0x2e>
 800bad8:	6923      	ldr	r3, [r4, #16]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d135      	bne.n	800bb4a <_puts_r+0x9a>
 800bade:	4621      	mov	r1, r4
 800bae0:	4628      	mov	r0, r5
 800bae2:	f000 f8e5 	bl	800bcb0 <__swsetup_r>
 800bae6:	b380      	cbz	r0, 800bb4a <_puts_r+0x9a>
 800bae8:	f04f 35ff 	mov.w	r5, #4294967295
 800baec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800baee:	07da      	lsls	r2, r3, #31
 800baf0:	d405      	bmi.n	800bafe <_puts_r+0x4e>
 800baf2:	89a3      	ldrh	r3, [r4, #12]
 800baf4:	059b      	lsls	r3, r3, #22
 800baf6:	d402      	bmi.n	800bafe <_puts_r+0x4e>
 800baf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bafa:	f000 f9d3 	bl	800bea4 <__retarget_lock_release_recursive>
 800bafe:	4628      	mov	r0, r5
 800bb00:	bd70      	pop	{r4, r5, r6, pc}
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	da04      	bge.n	800bb10 <_puts_r+0x60>
 800bb06:	69a2      	ldr	r2, [r4, #24]
 800bb08:	429a      	cmp	r2, r3
 800bb0a:	dc17      	bgt.n	800bb3c <_puts_r+0x8c>
 800bb0c:	290a      	cmp	r1, #10
 800bb0e:	d015      	beq.n	800bb3c <_puts_r+0x8c>
 800bb10:	6823      	ldr	r3, [r4, #0]
 800bb12:	1c5a      	adds	r2, r3, #1
 800bb14:	6022      	str	r2, [r4, #0]
 800bb16:	7019      	strb	r1, [r3, #0]
 800bb18:	68a3      	ldr	r3, [r4, #8]
 800bb1a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bb1e:	3b01      	subs	r3, #1
 800bb20:	60a3      	str	r3, [r4, #8]
 800bb22:	2900      	cmp	r1, #0
 800bb24:	d1ed      	bne.n	800bb02 <_puts_r+0x52>
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	da11      	bge.n	800bb4e <_puts_r+0x9e>
 800bb2a:	4622      	mov	r2, r4
 800bb2c:	210a      	movs	r1, #10
 800bb2e:	4628      	mov	r0, r5
 800bb30:	f000 f87f 	bl	800bc32 <__swbuf_r>
 800bb34:	3001      	adds	r0, #1
 800bb36:	d0d7      	beq.n	800bae8 <_puts_r+0x38>
 800bb38:	250a      	movs	r5, #10
 800bb3a:	e7d7      	b.n	800baec <_puts_r+0x3c>
 800bb3c:	4622      	mov	r2, r4
 800bb3e:	4628      	mov	r0, r5
 800bb40:	f000 f877 	bl	800bc32 <__swbuf_r>
 800bb44:	3001      	adds	r0, #1
 800bb46:	d1e7      	bne.n	800bb18 <_puts_r+0x68>
 800bb48:	e7ce      	b.n	800bae8 <_puts_r+0x38>
 800bb4a:	3e01      	subs	r6, #1
 800bb4c:	e7e4      	b.n	800bb18 <_puts_r+0x68>
 800bb4e:	6823      	ldr	r3, [r4, #0]
 800bb50:	1c5a      	adds	r2, r3, #1
 800bb52:	6022      	str	r2, [r4, #0]
 800bb54:	220a      	movs	r2, #10
 800bb56:	701a      	strb	r2, [r3, #0]
 800bb58:	e7ee      	b.n	800bb38 <_puts_r+0x88>
	...

0800bb5c <puts>:
 800bb5c:	4b02      	ldr	r3, [pc, #8]	@ (800bb68 <puts+0xc>)
 800bb5e:	4601      	mov	r1, r0
 800bb60:	6818      	ldr	r0, [r3, #0]
 800bb62:	f7ff bfa5 	b.w	800bab0 <_puts_r>
 800bb66:	bf00      	nop
 800bb68:	24000b5c 	.word	0x24000b5c

0800bb6c <siprintf>:
 800bb6c:	b40e      	push	{r1, r2, r3}
 800bb6e:	b500      	push	{lr}
 800bb70:	b09c      	sub	sp, #112	@ 0x70
 800bb72:	ab1d      	add	r3, sp, #116	@ 0x74
 800bb74:	9002      	str	r0, [sp, #8]
 800bb76:	9006      	str	r0, [sp, #24]
 800bb78:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bb7c:	4809      	ldr	r0, [pc, #36]	@ (800bba4 <siprintf+0x38>)
 800bb7e:	9107      	str	r1, [sp, #28]
 800bb80:	9104      	str	r1, [sp, #16]
 800bb82:	4909      	ldr	r1, [pc, #36]	@ (800bba8 <siprintf+0x3c>)
 800bb84:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb88:	9105      	str	r1, [sp, #20]
 800bb8a:	6800      	ldr	r0, [r0, #0]
 800bb8c:	9301      	str	r3, [sp, #4]
 800bb8e:	a902      	add	r1, sp, #8
 800bb90:	f000 fa4e 	bl	800c030 <_svfiprintf_r>
 800bb94:	9b02      	ldr	r3, [sp, #8]
 800bb96:	2200      	movs	r2, #0
 800bb98:	701a      	strb	r2, [r3, #0]
 800bb9a:	b01c      	add	sp, #112	@ 0x70
 800bb9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bba0:	b003      	add	sp, #12
 800bba2:	4770      	bx	lr
 800bba4:	24000b5c 	.word	0x24000b5c
 800bba8:	ffff0208 	.word	0xffff0208

0800bbac <__sread>:
 800bbac:	b510      	push	{r4, lr}
 800bbae:	460c      	mov	r4, r1
 800bbb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbb4:	f000 f916 	bl	800bde4 <_read_r>
 800bbb8:	2800      	cmp	r0, #0
 800bbba:	bfab      	itete	ge
 800bbbc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bbbe:	89a3      	ldrhlt	r3, [r4, #12]
 800bbc0:	181b      	addge	r3, r3, r0
 800bbc2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bbc6:	bfac      	ite	ge
 800bbc8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bbca:	81a3      	strhlt	r3, [r4, #12]
 800bbcc:	bd10      	pop	{r4, pc}

0800bbce <__swrite>:
 800bbce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbd2:	461f      	mov	r7, r3
 800bbd4:	898b      	ldrh	r3, [r1, #12]
 800bbd6:	05db      	lsls	r3, r3, #23
 800bbd8:	4605      	mov	r5, r0
 800bbda:	460c      	mov	r4, r1
 800bbdc:	4616      	mov	r6, r2
 800bbde:	d505      	bpl.n	800bbec <__swrite+0x1e>
 800bbe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbe4:	2302      	movs	r3, #2
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	f000 f8ea 	bl	800bdc0 <_lseek_r>
 800bbec:	89a3      	ldrh	r3, [r4, #12]
 800bbee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bbf2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bbf6:	81a3      	strh	r3, [r4, #12]
 800bbf8:	4632      	mov	r2, r6
 800bbfa:	463b      	mov	r3, r7
 800bbfc:	4628      	mov	r0, r5
 800bbfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc02:	f000 b911 	b.w	800be28 <_write_r>

0800bc06 <__sseek>:
 800bc06:	b510      	push	{r4, lr}
 800bc08:	460c      	mov	r4, r1
 800bc0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc0e:	f000 f8d7 	bl	800bdc0 <_lseek_r>
 800bc12:	1c43      	adds	r3, r0, #1
 800bc14:	89a3      	ldrh	r3, [r4, #12]
 800bc16:	bf15      	itete	ne
 800bc18:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bc1a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bc1e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bc22:	81a3      	strheq	r3, [r4, #12]
 800bc24:	bf18      	it	ne
 800bc26:	81a3      	strhne	r3, [r4, #12]
 800bc28:	bd10      	pop	{r4, pc}

0800bc2a <__sclose>:
 800bc2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc2e:	f000 b8b7 	b.w	800bda0 <_close_r>

0800bc32 <__swbuf_r>:
 800bc32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc34:	460e      	mov	r6, r1
 800bc36:	4614      	mov	r4, r2
 800bc38:	4605      	mov	r5, r0
 800bc3a:	b118      	cbz	r0, 800bc44 <__swbuf_r+0x12>
 800bc3c:	6a03      	ldr	r3, [r0, #32]
 800bc3e:	b90b      	cbnz	r3, 800bc44 <__swbuf_r+0x12>
 800bc40:	f7ff feee 	bl	800ba20 <__sinit>
 800bc44:	69a3      	ldr	r3, [r4, #24]
 800bc46:	60a3      	str	r3, [r4, #8]
 800bc48:	89a3      	ldrh	r3, [r4, #12]
 800bc4a:	071a      	lsls	r2, r3, #28
 800bc4c:	d501      	bpl.n	800bc52 <__swbuf_r+0x20>
 800bc4e:	6923      	ldr	r3, [r4, #16]
 800bc50:	b943      	cbnz	r3, 800bc64 <__swbuf_r+0x32>
 800bc52:	4621      	mov	r1, r4
 800bc54:	4628      	mov	r0, r5
 800bc56:	f000 f82b 	bl	800bcb0 <__swsetup_r>
 800bc5a:	b118      	cbz	r0, 800bc64 <__swbuf_r+0x32>
 800bc5c:	f04f 37ff 	mov.w	r7, #4294967295
 800bc60:	4638      	mov	r0, r7
 800bc62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc64:	6823      	ldr	r3, [r4, #0]
 800bc66:	6922      	ldr	r2, [r4, #16]
 800bc68:	1a98      	subs	r0, r3, r2
 800bc6a:	6963      	ldr	r3, [r4, #20]
 800bc6c:	b2f6      	uxtb	r6, r6
 800bc6e:	4283      	cmp	r3, r0
 800bc70:	4637      	mov	r7, r6
 800bc72:	dc05      	bgt.n	800bc80 <__swbuf_r+0x4e>
 800bc74:	4621      	mov	r1, r4
 800bc76:	4628      	mov	r0, r5
 800bc78:	f000 fe2a 	bl	800c8d0 <_fflush_r>
 800bc7c:	2800      	cmp	r0, #0
 800bc7e:	d1ed      	bne.n	800bc5c <__swbuf_r+0x2a>
 800bc80:	68a3      	ldr	r3, [r4, #8]
 800bc82:	3b01      	subs	r3, #1
 800bc84:	60a3      	str	r3, [r4, #8]
 800bc86:	6823      	ldr	r3, [r4, #0]
 800bc88:	1c5a      	adds	r2, r3, #1
 800bc8a:	6022      	str	r2, [r4, #0]
 800bc8c:	701e      	strb	r6, [r3, #0]
 800bc8e:	6962      	ldr	r2, [r4, #20]
 800bc90:	1c43      	adds	r3, r0, #1
 800bc92:	429a      	cmp	r2, r3
 800bc94:	d004      	beq.n	800bca0 <__swbuf_r+0x6e>
 800bc96:	89a3      	ldrh	r3, [r4, #12]
 800bc98:	07db      	lsls	r3, r3, #31
 800bc9a:	d5e1      	bpl.n	800bc60 <__swbuf_r+0x2e>
 800bc9c:	2e0a      	cmp	r6, #10
 800bc9e:	d1df      	bne.n	800bc60 <__swbuf_r+0x2e>
 800bca0:	4621      	mov	r1, r4
 800bca2:	4628      	mov	r0, r5
 800bca4:	f000 fe14 	bl	800c8d0 <_fflush_r>
 800bca8:	2800      	cmp	r0, #0
 800bcaa:	d0d9      	beq.n	800bc60 <__swbuf_r+0x2e>
 800bcac:	e7d6      	b.n	800bc5c <__swbuf_r+0x2a>
	...

0800bcb0 <__swsetup_r>:
 800bcb0:	b538      	push	{r3, r4, r5, lr}
 800bcb2:	4b29      	ldr	r3, [pc, #164]	@ (800bd58 <__swsetup_r+0xa8>)
 800bcb4:	4605      	mov	r5, r0
 800bcb6:	6818      	ldr	r0, [r3, #0]
 800bcb8:	460c      	mov	r4, r1
 800bcba:	b118      	cbz	r0, 800bcc4 <__swsetup_r+0x14>
 800bcbc:	6a03      	ldr	r3, [r0, #32]
 800bcbe:	b90b      	cbnz	r3, 800bcc4 <__swsetup_r+0x14>
 800bcc0:	f7ff feae 	bl	800ba20 <__sinit>
 800bcc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcc8:	0719      	lsls	r1, r3, #28
 800bcca:	d422      	bmi.n	800bd12 <__swsetup_r+0x62>
 800bccc:	06da      	lsls	r2, r3, #27
 800bcce:	d407      	bmi.n	800bce0 <__swsetup_r+0x30>
 800bcd0:	2209      	movs	r2, #9
 800bcd2:	602a      	str	r2, [r5, #0]
 800bcd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bcd8:	81a3      	strh	r3, [r4, #12]
 800bcda:	f04f 30ff 	mov.w	r0, #4294967295
 800bcde:	e033      	b.n	800bd48 <__swsetup_r+0x98>
 800bce0:	0758      	lsls	r0, r3, #29
 800bce2:	d512      	bpl.n	800bd0a <__swsetup_r+0x5a>
 800bce4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bce6:	b141      	cbz	r1, 800bcfa <__swsetup_r+0x4a>
 800bce8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bcec:	4299      	cmp	r1, r3
 800bcee:	d002      	beq.n	800bcf6 <__swsetup_r+0x46>
 800bcf0:	4628      	mov	r0, r5
 800bcf2:	f000 f8ef 	bl	800bed4 <_free_r>
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	6363      	str	r3, [r4, #52]	@ 0x34
 800bcfa:	89a3      	ldrh	r3, [r4, #12]
 800bcfc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bd00:	81a3      	strh	r3, [r4, #12]
 800bd02:	2300      	movs	r3, #0
 800bd04:	6063      	str	r3, [r4, #4]
 800bd06:	6923      	ldr	r3, [r4, #16]
 800bd08:	6023      	str	r3, [r4, #0]
 800bd0a:	89a3      	ldrh	r3, [r4, #12]
 800bd0c:	f043 0308 	orr.w	r3, r3, #8
 800bd10:	81a3      	strh	r3, [r4, #12]
 800bd12:	6923      	ldr	r3, [r4, #16]
 800bd14:	b94b      	cbnz	r3, 800bd2a <__swsetup_r+0x7a>
 800bd16:	89a3      	ldrh	r3, [r4, #12]
 800bd18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bd1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bd20:	d003      	beq.n	800bd2a <__swsetup_r+0x7a>
 800bd22:	4621      	mov	r1, r4
 800bd24:	4628      	mov	r0, r5
 800bd26:	f000 fe21 	bl	800c96c <__smakebuf_r>
 800bd2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd2e:	f013 0201 	ands.w	r2, r3, #1
 800bd32:	d00a      	beq.n	800bd4a <__swsetup_r+0x9a>
 800bd34:	2200      	movs	r2, #0
 800bd36:	60a2      	str	r2, [r4, #8]
 800bd38:	6962      	ldr	r2, [r4, #20]
 800bd3a:	4252      	negs	r2, r2
 800bd3c:	61a2      	str	r2, [r4, #24]
 800bd3e:	6922      	ldr	r2, [r4, #16]
 800bd40:	b942      	cbnz	r2, 800bd54 <__swsetup_r+0xa4>
 800bd42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bd46:	d1c5      	bne.n	800bcd4 <__swsetup_r+0x24>
 800bd48:	bd38      	pop	{r3, r4, r5, pc}
 800bd4a:	0799      	lsls	r1, r3, #30
 800bd4c:	bf58      	it	pl
 800bd4e:	6962      	ldrpl	r2, [r4, #20]
 800bd50:	60a2      	str	r2, [r4, #8]
 800bd52:	e7f4      	b.n	800bd3e <__swsetup_r+0x8e>
 800bd54:	2000      	movs	r0, #0
 800bd56:	e7f7      	b.n	800bd48 <__swsetup_r+0x98>
 800bd58:	24000b5c 	.word	0x24000b5c

0800bd5c <memmove>:
 800bd5c:	4288      	cmp	r0, r1
 800bd5e:	b510      	push	{r4, lr}
 800bd60:	eb01 0402 	add.w	r4, r1, r2
 800bd64:	d902      	bls.n	800bd6c <memmove+0x10>
 800bd66:	4284      	cmp	r4, r0
 800bd68:	4623      	mov	r3, r4
 800bd6a:	d807      	bhi.n	800bd7c <memmove+0x20>
 800bd6c:	1e43      	subs	r3, r0, #1
 800bd6e:	42a1      	cmp	r1, r4
 800bd70:	d008      	beq.n	800bd84 <memmove+0x28>
 800bd72:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd76:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd7a:	e7f8      	b.n	800bd6e <memmove+0x12>
 800bd7c:	4402      	add	r2, r0
 800bd7e:	4601      	mov	r1, r0
 800bd80:	428a      	cmp	r2, r1
 800bd82:	d100      	bne.n	800bd86 <memmove+0x2a>
 800bd84:	bd10      	pop	{r4, pc}
 800bd86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bd8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bd8e:	e7f7      	b.n	800bd80 <memmove+0x24>

0800bd90 <memset>:
 800bd90:	4402      	add	r2, r0
 800bd92:	4603      	mov	r3, r0
 800bd94:	4293      	cmp	r3, r2
 800bd96:	d100      	bne.n	800bd9a <memset+0xa>
 800bd98:	4770      	bx	lr
 800bd9a:	f803 1b01 	strb.w	r1, [r3], #1
 800bd9e:	e7f9      	b.n	800bd94 <memset+0x4>

0800bda0 <_close_r>:
 800bda0:	b538      	push	{r3, r4, r5, lr}
 800bda2:	4d06      	ldr	r5, [pc, #24]	@ (800bdbc <_close_r+0x1c>)
 800bda4:	2300      	movs	r3, #0
 800bda6:	4604      	mov	r4, r0
 800bda8:	4608      	mov	r0, r1
 800bdaa:	602b      	str	r3, [r5, #0]
 800bdac:	f001 f802 	bl	800cdb4 <_close>
 800bdb0:	1c43      	adds	r3, r0, #1
 800bdb2:	d102      	bne.n	800bdba <_close_r+0x1a>
 800bdb4:	682b      	ldr	r3, [r5, #0]
 800bdb6:	b103      	cbz	r3, 800bdba <_close_r+0x1a>
 800bdb8:	6023      	str	r3, [r4, #0]
 800bdba:	bd38      	pop	{r3, r4, r5, pc}
 800bdbc:	2404b994 	.word	0x2404b994

0800bdc0 <_lseek_r>:
 800bdc0:	b538      	push	{r3, r4, r5, lr}
 800bdc2:	4d07      	ldr	r5, [pc, #28]	@ (800bde0 <_lseek_r+0x20>)
 800bdc4:	4604      	mov	r4, r0
 800bdc6:	4608      	mov	r0, r1
 800bdc8:	4611      	mov	r1, r2
 800bdca:	2200      	movs	r2, #0
 800bdcc:	602a      	str	r2, [r5, #0]
 800bdce:	461a      	mov	r2, r3
 800bdd0:	f001 f808 	bl	800cde4 <_lseek>
 800bdd4:	1c43      	adds	r3, r0, #1
 800bdd6:	d102      	bne.n	800bdde <_lseek_r+0x1e>
 800bdd8:	682b      	ldr	r3, [r5, #0]
 800bdda:	b103      	cbz	r3, 800bdde <_lseek_r+0x1e>
 800bddc:	6023      	str	r3, [r4, #0]
 800bdde:	bd38      	pop	{r3, r4, r5, pc}
 800bde0:	2404b994 	.word	0x2404b994

0800bde4 <_read_r>:
 800bde4:	b538      	push	{r3, r4, r5, lr}
 800bde6:	4d07      	ldr	r5, [pc, #28]	@ (800be04 <_read_r+0x20>)
 800bde8:	4604      	mov	r4, r0
 800bdea:	4608      	mov	r0, r1
 800bdec:	4611      	mov	r1, r2
 800bdee:	2200      	movs	r2, #0
 800bdf0:	602a      	str	r2, [r5, #0]
 800bdf2:	461a      	mov	r2, r3
 800bdf4:	f000 fffe 	bl	800cdf4 <_read>
 800bdf8:	1c43      	adds	r3, r0, #1
 800bdfa:	d102      	bne.n	800be02 <_read_r+0x1e>
 800bdfc:	682b      	ldr	r3, [r5, #0]
 800bdfe:	b103      	cbz	r3, 800be02 <_read_r+0x1e>
 800be00:	6023      	str	r3, [r4, #0]
 800be02:	bd38      	pop	{r3, r4, r5, pc}
 800be04:	2404b994 	.word	0x2404b994

0800be08 <_sbrk_r>:
 800be08:	b538      	push	{r3, r4, r5, lr}
 800be0a:	4d06      	ldr	r5, [pc, #24]	@ (800be24 <_sbrk_r+0x1c>)
 800be0c:	2300      	movs	r3, #0
 800be0e:	4604      	mov	r4, r0
 800be10:	4608      	mov	r0, r1
 800be12:	602b      	str	r3, [r5, #0]
 800be14:	f7f5 fa74 	bl	8001300 <_sbrk>
 800be18:	1c43      	adds	r3, r0, #1
 800be1a:	d102      	bne.n	800be22 <_sbrk_r+0x1a>
 800be1c:	682b      	ldr	r3, [r5, #0]
 800be1e:	b103      	cbz	r3, 800be22 <_sbrk_r+0x1a>
 800be20:	6023      	str	r3, [r4, #0]
 800be22:	bd38      	pop	{r3, r4, r5, pc}
 800be24:	2404b994 	.word	0x2404b994

0800be28 <_write_r>:
 800be28:	b538      	push	{r3, r4, r5, lr}
 800be2a:	4d07      	ldr	r5, [pc, #28]	@ (800be48 <_write_r+0x20>)
 800be2c:	4604      	mov	r4, r0
 800be2e:	4608      	mov	r0, r1
 800be30:	4611      	mov	r1, r2
 800be32:	2200      	movs	r2, #0
 800be34:	602a      	str	r2, [r5, #0]
 800be36:	461a      	mov	r2, r3
 800be38:	f000 ffe4 	bl	800ce04 <_write>
 800be3c:	1c43      	adds	r3, r0, #1
 800be3e:	d102      	bne.n	800be46 <_write_r+0x1e>
 800be40:	682b      	ldr	r3, [r5, #0]
 800be42:	b103      	cbz	r3, 800be46 <_write_r+0x1e>
 800be44:	6023      	str	r3, [r4, #0]
 800be46:	bd38      	pop	{r3, r4, r5, pc}
 800be48:	2404b994 	.word	0x2404b994

0800be4c <__errno>:
 800be4c:	4b01      	ldr	r3, [pc, #4]	@ (800be54 <__errno+0x8>)
 800be4e:	6818      	ldr	r0, [r3, #0]
 800be50:	4770      	bx	lr
 800be52:	bf00      	nop
 800be54:	24000b5c 	.word	0x24000b5c

0800be58 <__libc_init_array>:
 800be58:	b570      	push	{r4, r5, r6, lr}
 800be5a:	4d0d      	ldr	r5, [pc, #52]	@ (800be90 <__libc_init_array+0x38>)
 800be5c:	4c0d      	ldr	r4, [pc, #52]	@ (800be94 <__libc_init_array+0x3c>)
 800be5e:	1b64      	subs	r4, r4, r5
 800be60:	10a4      	asrs	r4, r4, #2
 800be62:	2600      	movs	r6, #0
 800be64:	42a6      	cmp	r6, r4
 800be66:	d109      	bne.n	800be7c <__libc_init_array+0x24>
 800be68:	4d0b      	ldr	r5, [pc, #44]	@ (800be98 <__libc_init_array+0x40>)
 800be6a:	4c0c      	ldr	r4, [pc, #48]	@ (800be9c <__libc_init_array+0x44>)
 800be6c:	f000 ffd2 	bl	800ce14 <_init>
 800be70:	1b64      	subs	r4, r4, r5
 800be72:	10a4      	asrs	r4, r4, #2
 800be74:	2600      	movs	r6, #0
 800be76:	42a6      	cmp	r6, r4
 800be78:	d105      	bne.n	800be86 <__libc_init_array+0x2e>
 800be7a:	bd70      	pop	{r4, r5, r6, pc}
 800be7c:	f855 3b04 	ldr.w	r3, [r5], #4
 800be80:	4798      	blx	r3
 800be82:	3601      	adds	r6, #1
 800be84:	e7ee      	b.n	800be64 <__libc_init_array+0xc>
 800be86:	f855 3b04 	ldr.w	r3, [r5], #4
 800be8a:	4798      	blx	r3
 800be8c:	3601      	adds	r6, #1
 800be8e:	e7f2      	b.n	800be76 <__libc_init_array+0x1e>
 800be90:	080aec18 	.word	0x080aec18
 800be94:	080aec18 	.word	0x080aec18
 800be98:	080aec18 	.word	0x080aec18
 800be9c:	080aec1c 	.word	0x080aec1c

0800bea0 <__retarget_lock_init_recursive>:
 800bea0:	4770      	bx	lr

0800bea2 <__retarget_lock_acquire_recursive>:
 800bea2:	4770      	bx	lr

0800bea4 <__retarget_lock_release_recursive>:
 800bea4:	4770      	bx	lr

0800bea6 <strcpy>:
 800bea6:	4603      	mov	r3, r0
 800bea8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800beac:	f803 2b01 	strb.w	r2, [r3], #1
 800beb0:	2a00      	cmp	r2, #0
 800beb2:	d1f9      	bne.n	800bea8 <strcpy+0x2>
 800beb4:	4770      	bx	lr

0800beb6 <memcpy>:
 800beb6:	440a      	add	r2, r1
 800beb8:	4291      	cmp	r1, r2
 800beba:	f100 33ff 	add.w	r3, r0, #4294967295
 800bebe:	d100      	bne.n	800bec2 <memcpy+0xc>
 800bec0:	4770      	bx	lr
 800bec2:	b510      	push	{r4, lr}
 800bec4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bec8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800becc:	4291      	cmp	r1, r2
 800bece:	d1f9      	bne.n	800bec4 <memcpy+0xe>
 800bed0:	bd10      	pop	{r4, pc}
	...

0800bed4 <_free_r>:
 800bed4:	b538      	push	{r3, r4, r5, lr}
 800bed6:	4605      	mov	r5, r0
 800bed8:	2900      	cmp	r1, #0
 800beda:	d041      	beq.n	800bf60 <_free_r+0x8c>
 800bedc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bee0:	1f0c      	subs	r4, r1, #4
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	bfb8      	it	lt
 800bee6:	18e4      	addlt	r4, r4, r3
 800bee8:	f7ff fcd4 	bl	800b894 <__malloc_lock>
 800beec:	4a1d      	ldr	r2, [pc, #116]	@ (800bf64 <_free_r+0x90>)
 800beee:	6813      	ldr	r3, [r2, #0]
 800bef0:	b933      	cbnz	r3, 800bf00 <_free_r+0x2c>
 800bef2:	6063      	str	r3, [r4, #4]
 800bef4:	6014      	str	r4, [r2, #0]
 800bef6:	4628      	mov	r0, r5
 800bef8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800befc:	f7ff bcd0 	b.w	800b8a0 <__malloc_unlock>
 800bf00:	42a3      	cmp	r3, r4
 800bf02:	d908      	bls.n	800bf16 <_free_r+0x42>
 800bf04:	6820      	ldr	r0, [r4, #0]
 800bf06:	1821      	adds	r1, r4, r0
 800bf08:	428b      	cmp	r3, r1
 800bf0a:	bf01      	itttt	eq
 800bf0c:	6819      	ldreq	r1, [r3, #0]
 800bf0e:	685b      	ldreq	r3, [r3, #4]
 800bf10:	1809      	addeq	r1, r1, r0
 800bf12:	6021      	streq	r1, [r4, #0]
 800bf14:	e7ed      	b.n	800bef2 <_free_r+0x1e>
 800bf16:	461a      	mov	r2, r3
 800bf18:	685b      	ldr	r3, [r3, #4]
 800bf1a:	b10b      	cbz	r3, 800bf20 <_free_r+0x4c>
 800bf1c:	42a3      	cmp	r3, r4
 800bf1e:	d9fa      	bls.n	800bf16 <_free_r+0x42>
 800bf20:	6811      	ldr	r1, [r2, #0]
 800bf22:	1850      	adds	r0, r2, r1
 800bf24:	42a0      	cmp	r0, r4
 800bf26:	d10b      	bne.n	800bf40 <_free_r+0x6c>
 800bf28:	6820      	ldr	r0, [r4, #0]
 800bf2a:	4401      	add	r1, r0
 800bf2c:	1850      	adds	r0, r2, r1
 800bf2e:	4283      	cmp	r3, r0
 800bf30:	6011      	str	r1, [r2, #0]
 800bf32:	d1e0      	bne.n	800bef6 <_free_r+0x22>
 800bf34:	6818      	ldr	r0, [r3, #0]
 800bf36:	685b      	ldr	r3, [r3, #4]
 800bf38:	6053      	str	r3, [r2, #4]
 800bf3a:	4408      	add	r0, r1
 800bf3c:	6010      	str	r0, [r2, #0]
 800bf3e:	e7da      	b.n	800bef6 <_free_r+0x22>
 800bf40:	d902      	bls.n	800bf48 <_free_r+0x74>
 800bf42:	230c      	movs	r3, #12
 800bf44:	602b      	str	r3, [r5, #0]
 800bf46:	e7d6      	b.n	800bef6 <_free_r+0x22>
 800bf48:	6820      	ldr	r0, [r4, #0]
 800bf4a:	1821      	adds	r1, r4, r0
 800bf4c:	428b      	cmp	r3, r1
 800bf4e:	bf04      	itt	eq
 800bf50:	6819      	ldreq	r1, [r3, #0]
 800bf52:	685b      	ldreq	r3, [r3, #4]
 800bf54:	6063      	str	r3, [r4, #4]
 800bf56:	bf04      	itt	eq
 800bf58:	1809      	addeq	r1, r1, r0
 800bf5a:	6021      	streq	r1, [r4, #0]
 800bf5c:	6054      	str	r4, [r2, #4]
 800bf5e:	e7ca      	b.n	800bef6 <_free_r+0x22>
 800bf60:	bd38      	pop	{r3, r4, r5, pc}
 800bf62:	bf00      	nop
 800bf64:	2404b854 	.word	0x2404b854

0800bf68 <_malloc_usable_size_r>:
 800bf68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf6c:	1f18      	subs	r0, r3, #4
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	bfbc      	itt	lt
 800bf72:	580b      	ldrlt	r3, [r1, r0]
 800bf74:	18c0      	addlt	r0, r0, r3
 800bf76:	4770      	bx	lr

0800bf78 <__ssputs_r>:
 800bf78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf7c:	688e      	ldr	r6, [r1, #8]
 800bf7e:	461f      	mov	r7, r3
 800bf80:	42be      	cmp	r6, r7
 800bf82:	680b      	ldr	r3, [r1, #0]
 800bf84:	4682      	mov	sl, r0
 800bf86:	460c      	mov	r4, r1
 800bf88:	4690      	mov	r8, r2
 800bf8a:	d82d      	bhi.n	800bfe8 <__ssputs_r+0x70>
 800bf8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bf90:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bf94:	d026      	beq.n	800bfe4 <__ssputs_r+0x6c>
 800bf96:	6965      	ldr	r5, [r4, #20]
 800bf98:	6909      	ldr	r1, [r1, #16]
 800bf9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bf9e:	eba3 0901 	sub.w	r9, r3, r1
 800bfa2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bfa6:	1c7b      	adds	r3, r7, #1
 800bfa8:	444b      	add	r3, r9
 800bfaa:	106d      	asrs	r5, r5, #1
 800bfac:	429d      	cmp	r5, r3
 800bfae:	bf38      	it	cc
 800bfb0:	461d      	movcc	r5, r3
 800bfb2:	0553      	lsls	r3, r2, #21
 800bfb4:	d527      	bpl.n	800c006 <__ssputs_r+0x8e>
 800bfb6:	4629      	mov	r1, r5
 800bfb8:	f7ff fbec 	bl	800b794 <_malloc_r>
 800bfbc:	4606      	mov	r6, r0
 800bfbe:	b360      	cbz	r0, 800c01a <__ssputs_r+0xa2>
 800bfc0:	6921      	ldr	r1, [r4, #16]
 800bfc2:	464a      	mov	r2, r9
 800bfc4:	f7ff ff77 	bl	800beb6 <memcpy>
 800bfc8:	89a3      	ldrh	r3, [r4, #12]
 800bfca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bfce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfd2:	81a3      	strh	r3, [r4, #12]
 800bfd4:	6126      	str	r6, [r4, #16]
 800bfd6:	6165      	str	r5, [r4, #20]
 800bfd8:	444e      	add	r6, r9
 800bfda:	eba5 0509 	sub.w	r5, r5, r9
 800bfde:	6026      	str	r6, [r4, #0]
 800bfe0:	60a5      	str	r5, [r4, #8]
 800bfe2:	463e      	mov	r6, r7
 800bfe4:	42be      	cmp	r6, r7
 800bfe6:	d900      	bls.n	800bfea <__ssputs_r+0x72>
 800bfe8:	463e      	mov	r6, r7
 800bfea:	6820      	ldr	r0, [r4, #0]
 800bfec:	4632      	mov	r2, r6
 800bfee:	4641      	mov	r1, r8
 800bff0:	f7ff feb4 	bl	800bd5c <memmove>
 800bff4:	68a3      	ldr	r3, [r4, #8]
 800bff6:	1b9b      	subs	r3, r3, r6
 800bff8:	60a3      	str	r3, [r4, #8]
 800bffa:	6823      	ldr	r3, [r4, #0]
 800bffc:	4433      	add	r3, r6
 800bffe:	6023      	str	r3, [r4, #0]
 800c000:	2000      	movs	r0, #0
 800c002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c006:	462a      	mov	r2, r5
 800c008:	f7ff fc50 	bl	800b8ac <_realloc_r>
 800c00c:	4606      	mov	r6, r0
 800c00e:	2800      	cmp	r0, #0
 800c010:	d1e0      	bne.n	800bfd4 <__ssputs_r+0x5c>
 800c012:	6921      	ldr	r1, [r4, #16]
 800c014:	4650      	mov	r0, sl
 800c016:	f7ff ff5d 	bl	800bed4 <_free_r>
 800c01a:	230c      	movs	r3, #12
 800c01c:	f8ca 3000 	str.w	r3, [sl]
 800c020:	89a3      	ldrh	r3, [r4, #12]
 800c022:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c026:	81a3      	strh	r3, [r4, #12]
 800c028:	f04f 30ff 	mov.w	r0, #4294967295
 800c02c:	e7e9      	b.n	800c002 <__ssputs_r+0x8a>
	...

0800c030 <_svfiprintf_r>:
 800c030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c034:	4698      	mov	r8, r3
 800c036:	898b      	ldrh	r3, [r1, #12]
 800c038:	061b      	lsls	r3, r3, #24
 800c03a:	b09d      	sub	sp, #116	@ 0x74
 800c03c:	4607      	mov	r7, r0
 800c03e:	460d      	mov	r5, r1
 800c040:	4614      	mov	r4, r2
 800c042:	d510      	bpl.n	800c066 <_svfiprintf_r+0x36>
 800c044:	690b      	ldr	r3, [r1, #16]
 800c046:	b973      	cbnz	r3, 800c066 <_svfiprintf_r+0x36>
 800c048:	2140      	movs	r1, #64	@ 0x40
 800c04a:	f7ff fba3 	bl	800b794 <_malloc_r>
 800c04e:	6028      	str	r0, [r5, #0]
 800c050:	6128      	str	r0, [r5, #16]
 800c052:	b930      	cbnz	r0, 800c062 <_svfiprintf_r+0x32>
 800c054:	230c      	movs	r3, #12
 800c056:	603b      	str	r3, [r7, #0]
 800c058:	f04f 30ff 	mov.w	r0, #4294967295
 800c05c:	b01d      	add	sp, #116	@ 0x74
 800c05e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c062:	2340      	movs	r3, #64	@ 0x40
 800c064:	616b      	str	r3, [r5, #20]
 800c066:	2300      	movs	r3, #0
 800c068:	9309      	str	r3, [sp, #36]	@ 0x24
 800c06a:	2320      	movs	r3, #32
 800c06c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c070:	f8cd 800c 	str.w	r8, [sp, #12]
 800c074:	2330      	movs	r3, #48	@ 0x30
 800c076:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c214 <_svfiprintf_r+0x1e4>
 800c07a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c07e:	f04f 0901 	mov.w	r9, #1
 800c082:	4623      	mov	r3, r4
 800c084:	469a      	mov	sl, r3
 800c086:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c08a:	b10a      	cbz	r2, 800c090 <_svfiprintf_r+0x60>
 800c08c:	2a25      	cmp	r2, #37	@ 0x25
 800c08e:	d1f9      	bne.n	800c084 <_svfiprintf_r+0x54>
 800c090:	ebba 0b04 	subs.w	fp, sl, r4
 800c094:	d00b      	beq.n	800c0ae <_svfiprintf_r+0x7e>
 800c096:	465b      	mov	r3, fp
 800c098:	4622      	mov	r2, r4
 800c09a:	4629      	mov	r1, r5
 800c09c:	4638      	mov	r0, r7
 800c09e:	f7ff ff6b 	bl	800bf78 <__ssputs_r>
 800c0a2:	3001      	adds	r0, #1
 800c0a4:	f000 80a7 	beq.w	800c1f6 <_svfiprintf_r+0x1c6>
 800c0a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c0aa:	445a      	add	r2, fp
 800c0ac:	9209      	str	r2, [sp, #36]	@ 0x24
 800c0ae:	f89a 3000 	ldrb.w	r3, [sl]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	f000 809f 	beq.w	800c1f6 <_svfiprintf_r+0x1c6>
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	f04f 32ff 	mov.w	r2, #4294967295
 800c0be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0c2:	f10a 0a01 	add.w	sl, sl, #1
 800c0c6:	9304      	str	r3, [sp, #16]
 800c0c8:	9307      	str	r3, [sp, #28]
 800c0ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c0ce:	931a      	str	r3, [sp, #104]	@ 0x68
 800c0d0:	4654      	mov	r4, sl
 800c0d2:	2205      	movs	r2, #5
 800c0d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0d8:	484e      	ldr	r0, [pc, #312]	@ (800c214 <_svfiprintf_r+0x1e4>)
 800c0da:	f7f4 f909 	bl	80002f0 <memchr>
 800c0de:	9a04      	ldr	r2, [sp, #16]
 800c0e0:	b9d8      	cbnz	r0, 800c11a <_svfiprintf_r+0xea>
 800c0e2:	06d0      	lsls	r0, r2, #27
 800c0e4:	bf44      	itt	mi
 800c0e6:	2320      	movmi	r3, #32
 800c0e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c0ec:	0711      	lsls	r1, r2, #28
 800c0ee:	bf44      	itt	mi
 800c0f0:	232b      	movmi	r3, #43	@ 0x2b
 800c0f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c0f6:	f89a 3000 	ldrb.w	r3, [sl]
 800c0fa:	2b2a      	cmp	r3, #42	@ 0x2a
 800c0fc:	d015      	beq.n	800c12a <_svfiprintf_r+0xfa>
 800c0fe:	9a07      	ldr	r2, [sp, #28]
 800c100:	4654      	mov	r4, sl
 800c102:	2000      	movs	r0, #0
 800c104:	f04f 0c0a 	mov.w	ip, #10
 800c108:	4621      	mov	r1, r4
 800c10a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c10e:	3b30      	subs	r3, #48	@ 0x30
 800c110:	2b09      	cmp	r3, #9
 800c112:	d94b      	bls.n	800c1ac <_svfiprintf_r+0x17c>
 800c114:	b1b0      	cbz	r0, 800c144 <_svfiprintf_r+0x114>
 800c116:	9207      	str	r2, [sp, #28]
 800c118:	e014      	b.n	800c144 <_svfiprintf_r+0x114>
 800c11a:	eba0 0308 	sub.w	r3, r0, r8
 800c11e:	fa09 f303 	lsl.w	r3, r9, r3
 800c122:	4313      	orrs	r3, r2
 800c124:	9304      	str	r3, [sp, #16]
 800c126:	46a2      	mov	sl, r4
 800c128:	e7d2      	b.n	800c0d0 <_svfiprintf_r+0xa0>
 800c12a:	9b03      	ldr	r3, [sp, #12]
 800c12c:	1d19      	adds	r1, r3, #4
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	9103      	str	r1, [sp, #12]
 800c132:	2b00      	cmp	r3, #0
 800c134:	bfbb      	ittet	lt
 800c136:	425b      	neglt	r3, r3
 800c138:	f042 0202 	orrlt.w	r2, r2, #2
 800c13c:	9307      	strge	r3, [sp, #28]
 800c13e:	9307      	strlt	r3, [sp, #28]
 800c140:	bfb8      	it	lt
 800c142:	9204      	strlt	r2, [sp, #16]
 800c144:	7823      	ldrb	r3, [r4, #0]
 800c146:	2b2e      	cmp	r3, #46	@ 0x2e
 800c148:	d10a      	bne.n	800c160 <_svfiprintf_r+0x130>
 800c14a:	7863      	ldrb	r3, [r4, #1]
 800c14c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c14e:	d132      	bne.n	800c1b6 <_svfiprintf_r+0x186>
 800c150:	9b03      	ldr	r3, [sp, #12]
 800c152:	1d1a      	adds	r2, r3, #4
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	9203      	str	r2, [sp, #12]
 800c158:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c15c:	3402      	adds	r4, #2
 800c15e:	9305      	str	r3, [sp, #20]
 800c160:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c224 <_svfiprintf_r+0x1f4>
 800c164:	7821      	ldrb	r1, [r4, #0]
 800c166:	2203      	movs	r2, #3
 800c168:	4650      	mov	r0, sl
 800c16a:	f7f4 f8c1 	bl	80002f0 <memchr>
 800c16e:	b138      	cbz	r0, 800c180 <_svfiprintf_r+0x150>
 800c170:	9b04      	ldr	r3, [sp, #16]
 800c172:	eba0 000a 	sub.w	r0, r0, sl
 800c176:	2240      	movs	r2, #64	@ 0x40
 800c178:	4082      	lsls	r2, r0
 800c17a:	4313      	orrs	r3, r2
 800c17c:	3401      	adds	r4, #1
 800c17e:	9304      	str	r3, [sp, #16]
 800c180:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c184:	4824      	ldr	r0, [pc, #144]	@ (800c218 <_svfiprintf_r+0x1e8>)
 800c186:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c18a:	2206      	movs	r2, #6
 800c18c:	f7f4 f8b0 	bl	80002f0 <memchr>
 800c190:	2800      	cmp	r0, #0
 800c192:	d036      	beq.n	800c202 <_svfiprintf_r+0x1d2>
 800c194:	4b21      	ldr	r3, [pc, #132]	@ (800c21c <_svfiprintf_r+0x1ec>)
 800c196:	bb1b      	cbnz	r3, 800c1e0 <_svfiprintf_r+0x1b0>
 800c198:	9b03      	ldr	r3, [sp, #12]
 800c19a:	3307      	adds	r3, #7
 800c19c:	f023 0307 	bic.w	r3, r3, #7
 800c1a0:	3308      	adds	r3, #8
 800c1a2:	9303      	str	r3, [sp, #12]
 800c1a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1a6:	4433      	add	r3, r6
 800c1a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1aa:	e76a      	b.n	800c082 <_svfiprintf_r+0x52>
 800c1ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800c1b0:	460c      	mov	r4, r1
 800c1b2:	2001      	movs	r0, #1
 800c1b4:	e7a8      	b.n	800c108 <_svfiprintf_r+0xd8>
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	3401      	adds	r4, #1
 800c1ba:	9305      	str	r3, [sp, #20]
 800c1bc:	4619      	mov	r1, r3
 800c1be:	f04f 0c0a 	mov.w	ip, #10
 800c1c2:	4620      	mov	r0, r4
 800c1c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1c8:	3a30      	subs	r2, #48	@ 0x30
 800c1ca:	2a09      	cmp	r2, #9
 800c1cc:	d903      	bls.n	800c1d6 <_svfiprintf_r+0x1a6>
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d0c6      	beq.n	800c160 <_svfiprintf_r+0x130>
 800c1d2:	9105      	str	r1, [sp, #20]
 800c1d4:	e7c4      	b.n	800c160 <_svfiprintf_r+0x130>
 800c1d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800c1da:	4604      	mov	r4, r0
 800c1dc:	2301      	movs	r3, #1
 800c1de:	e7f0      	b.n	800c1c2 <_svfiprintf_r+0x192>
 800c1e0:	ab03      	add	r3, sp, #12
 800c1e2:	9300      	str	r3, [sp, #0]
 800c1e4:	462a      	mov	r2, r5
 800c1e6:	4b0e      	ldr	r3, [pc, #56]	@ (800c220 <_svfiprintf_r+0x1f0>)
 800c1e8:	a904      	add	r1, sp, #16
 800c1ea:	4638      	mov	r0, r7
 800c1ec:	f3af 8000 	nop.w
 800c1f0:	1c42      	adds	r2, r0, #1
 800c1f2:	4606      	mov	r6, r0
 800c1f4:	d1d6      	bne.n	800c1a4 <_svfiprintf_r+0x174>
 800c1f6:	89ab      	ldrh	r3, [r5, #12]
 800c1f8:	065b      	lsls	r3, r3, #25
 800c1fa:	f53f af2d 	bmi.w	800c058 <_svfiprintf_r+0x28>
 800c1fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c200:	e72c      	b.n	800c05c <_svfiprintf_r+0x2c>
 800c202:	ab03      	add	r3, sp, #12
 800c204:	9300      	str	r3, [sp, #0]
 800c206:	462a      	mov	r2, r5
 800c208:	4b05      	ldr	r3, [pc, #20]	@ (800c220 <_svfiprintf_r+0x1f0>)
 800c20a:	a904      	add	r1, sp, #16
 800c20c:	4638      	mov	r0, r7
 800c20e:	f000 f9bb 	bl	800c588 <_printf_i>
 800c212:	e7ed      	b.n	800c1f0 <_svfiprintf_r+0x1c0>
 800c214:	080ae968 	.word	0x080ae968
 800c218:	080ae972 	.word	0x080ae972
 800c21c:	00000000 	.word	0x00000000
 800c220:	0800bf79 	.word	0x0800bf79
 800c224:	080ae96e 	.word	0x080ae96e

0800c228 <__sfputc_r>:
 800c228:	6893      	ldr	r3, [r2, #8]
 800c22a:	3b01      	subs	r3, #1
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	b410      	push	{r4}
 800c230:	6093      	str	r3, [r2, #8]
 800c232:	da08      	bge.n	800c246 <__sfputc_r+0x1e>
 800c234:	6994      	ldr	r4, [r2, #24]
 800c236:	42a3      	cmp	r3, r4
 800c238:	db01      	blt.n	800c23e <__sfputc_r+0x16>
 800c23a:	290a      	cmp	r1, #10
 800c23c:	d103      	bne.n	800c246 <__sfputc_r+0x1e>
 800c23e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c242:	f7ff bcf6 	b.w	800bc32 <__swbuf_r>
 800c246:	6813      	ldr	r3, [r2, #0]
 800c248:	1c58      	adds	r0, r3, #1
 800c24a:	6010      	str	r0, [r2, #0]
 800c24c:	7019      	strb	r1, [r3, #0]
 800c24e:	4608      	mov	r0, r1
 800c250:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c254:	4770      	bx	lr

0800c256 <__sfputs_r>:
 800c256:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c258:	4606      	mov	r6, r0
 800c25a:	460f      	mov	r7, r1
 800c25c:	4614      	mov	r4, r2
 800c25e:	18d5      	adds	r5, r2, r3
 800c260:	42ac      	cmp	r4, r5
 800c262:	d101      	bne.n	800c268 <__sfputs_r+0x12>
 800c264:	2000      	movs	r0, #0
 800c266:	e007      	b.n	800c278 <__sfputs_r+0x22>
 800c268:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c26c:	463a      	mov	r2, r7
 800c26e:	4630      	mov	r0, r6
 800c270:	f7ff ffda 	bl	800c228 <__sfputc_r>
 800c274:	1c43      	adds	r3, r0, #1
 800c276:	d1f3      	bne.n	800c260 <__sfputs_r+0xa>
 800c278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c27c <_vfiprintf_r>:
 800c27c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c280:	460d      	mov	r5, r1
 800c282:	b09d      	sub	sp, #116	@ 0x74
 800c284:	4614      	mov	r4, r2
 800c286:	4698      	mov	r8, r3
 800c288:	4606      	mov	r6, r0
 800c28a:	b118      	cbz	r0, 800c294 <_vfiprintf_r+0x18>
 800c28c:	6a03      	ldr	r3, [r0, #32]
 800c28e:	b90b      	cbnz	r3, 800c294 <_vfiprintf_r+0x18>
 800c290:	f7ff fbc6 	bl	800ba20 <__sinit>
 800c294:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c296:	07d9      	lsls	r1, r3, #31
 800c298:	d405      	bmi.n	800c2a6 <_vfiprintf_r+0x2a>
 800c29a:	89ab      	ldrh	r3, [r5, #12]
 800c29c:	059a      	lsls	r2, r3, #22
 800c29e:	d402      	bmi.n	800c2a6 <_vfiprintf_r+0x2a>
 800c2a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c2a2:	f7ff fdfe 	bl	800bea2 <__retarget_lock_acquire_recursive>
 800c2a6:	89ab      	ldrh	r3, [r5, #12]
 800c2a8:	071b      	lsls	r3, r3, #28
 800c2aa:	d501      	bpl.n	800c2b0 <_vfiprintf_r+0x34>
 800c2ac:	692b      	ldr	r3, [r5, #16]
 800c2ae:	b99b      	cbnz	r3, 800c2d8 <_vfiprintf_r+0x5c>
 800c2b0:	4629      	mov	r1, r5
 800c2b2:	4630      	mov	r0, r6
 800c2b4:	f7ff fcfc 	bl	800bcb0 <__swsetup_r>
 800c2b8:	b170      	cbz	r0, 800c2d8 <_vfiprintf_r+0x5c>
 800c2ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c2bc:	07dc      	lsls	r4, r3, #31
 800c2be:	d504      	bpl.n	800c2ca <_vfiprintf_r+0x4e>
 800c2c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c2c4:	b01d      	add	sp, #116	@ 0x74
 800c2c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ca:	89ab      	ldrh	r3, [r5, #12]
 800c2cc:	0598      	lsls	r0, r3, #22
 800c2ce:	d4f7      	bmi.n	800c2c0 <_vfiprintf_r+0x44>
 800c2d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c2d2:	f7ff fde7 	bl	800bea4 <__retarget_lock_release_recursive>
 800c2d6:	e7f3      	b.n	800c2c0 <_vfiprintf_r+0x44>
 800c2d8:	2300      	movs	r3, #0
 800c2da:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2dc:	2320      	movs	r3, #32
 800c2de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c2e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2e6:	2330      	movs	r3, #48	@ 0x30
 800c2e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c498 <_vfiprintf_r+0x21c>
 800c2ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c2f0:	f04f 0901 	mov.w	r9, #1
 800c2f4:	4623      	mov	r3, r4
 800c2f6:	469a      	mov	sl, r3
 800c2f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2fc:	b10a      	cbz	r2, 800c302 <_vfiprintf_r+0x86>
 800c2fe:	2a25      	cmp	r2, #37	@ 0x25
 800c300:	d1f9      	bne.n	800c2f6 <_vfiprintf_r+0x7a>
 800c302:	ebba 0b04 	subs.w	fp, sl, r4
 800c306:	d00b      	beq.n	800c320 <_vfiprintf_r+0xa4>
 800c308:	465b      	mov	r3, fp
 800c30a:	4622      	mov	r2, r4
 800c30c:	4629      	mov	r1, r5
 800c30e:	4630      	mov	r0, r6
 800c310:	f7ff ffa1 	bl	800c256 <__sfputs_r>
 800c314:	3001      	adds	r0, #1
 800c316:	f000 80a7 	beq.w	800c468 <_vfiprintf_r+0x1ec>
 800c31a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c31c:	445a      	add	r2, fp
 800c31e:	9209      	str	r2, [sp, #36]	@ 0x24
 800c320:	f89a 3000 	ldrb.w	r3, [sl]
 800c324:	2b00      	cmp	r3, #0
 800c326:	f000 809f 	beq.w	800c468 <_vfiprintf_r+0x1ec>
 800c32a:	2300      	movs	r3, #0
 800c32c:	f04f 32ff 	mov.w	r2, #4294967295
 800c330:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c334:	f10a 0a01 	add.w	sl, sl, #1
 800c338:	9304      	str	r3, [sp, #16]
 800c33a:	9307      	str	r3, [sp, #28]
 800c33c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c340:	931a      	str	r3, [sp, #104]	@ 0x68
 800c342:	4654      	mov	r4, sl
 800c344:	2205      	movs	r2, #5
 800c346:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c34a:	4853      	ldr	r0, [pc, #332]	@ (800c498 <_vfiprintf_r+0x21c>)
 800c34c:	f7f3 ffd0 	bl	80002f0 <memchr>
 800c350:	9a04      	ldr	r2, [sp, #16]
 800c352:	b9d8      	cbnz	r0, 800c38c <_vfiprintf_r+0x110>
 800c354:	06d1      	lsls	r1, r2, #27
 800c356:	bf44      	itt	mi
 800c358:	2320      	movmi	r3, #32
 800c35a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c35e:	0713      	lsls	r3, r2, #28
 800c360:	bf44      	itt	mi
 800c362:	232b      	movmi	r3, #43	@ 0x2b
 800c364:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c368:	f89a 3000 	ldrb.w	r3, [sl]
 800c36c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c36e:	d015      	beq.n	800c39c <_vfiprintf_r+0x120>
 800c370:	9a07      	ldr	r2, [sp, #28]
 800c372:	4654      	mov	r4, sl
 800c374:	2000      	movs	r0, #0
 800c376:	f04f 0c0a 	mov.w	ip, #10
 800c37a:	4621      	mov	r1, r4
 800c37c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c380:	3b30      	subs	r3, #48	@ 0x30
 800c382:	2b09      	cmp	r3, #9
 800c384:	d94b      	bls.n	800c41e <_vfiprintf_r+0x1a2>
 800c386:	b1b0      	cbz	r0, 800c3b6 <_vfiprintf_r+0x13a>
 800c388:	9207      	str	r2, [sp, #28]
 800c38a:	e014      	b.n	800c3b6 <_vfiprintf_r+0x13a>
 800c38c:	eba0 0308 	sub.w	r3, r0, r8
 800c390:	fa09 f303 	lsl.w	r3, r9, r3
 800c394:	4313      	orrs	r3, r2
 800c396:	9304      	str	r3, [sp, #16]
 800c398:	46a2      	mov	sl, r4
 800c39a:	e7d2      	b.n	800c342 <_vfiprintf_r+0xc6>
 800c39c:	9b03      	ldr	r3, [sp, #12]
 800c39e:	1d19      	adds	r1, r3, #4
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	9103      	str	r1, [sp, #12]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	bfbb      	ittet	lt
 800c3a8:	425b      	neglt	r3, r3
 800c3aa:	f042 0202 	orrlt.w	r2, r2, #2
 800c3ae:	9307      	strge	r3, [sp, #28]
 800c3b0:	9307      	strlt	r3, [sp, #28]
 800c3b2:	bfb8      	it	lt
 800c3b4:	9204      	strlt	r2, [sp, #16]
 800c3b6:	7823      	ldrb	r3, [r4, #0]
 800c3b8:	2b2e      	cmp	r3, #46	@ 0x2e
 800c3ba:	d10a      	bne.n	800c3d2 <_vfiprintf_r+0x156>
 800c3bc:	7863      	ldrb	r3, [r4, #1]
 800c3be:	2b2a      	cmp	r3, #42	@ 0x2a
 800c3c0:	d132      	bne.n	800c428 <_vfiprintf_r+0x1ac>
 800c3c2:	9b03      	ldr	r3, [sp, #12]
 800c3c4:	1d1a      	adds	r2, r3, #4
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	9203      	str	r2, [sp, #12]
 800c3ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c3ce:	3402      	adds	r4, #2
 800c3d0:	9305      	str	r3, [sp, #20]
 800c3d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c4a8 <_vfiprintf_r+0x22c>
 800c3d6:	7821      	ldrb	r1, [r4, #0]
 800c3d8:	2203      	movs	r2, #3
 800c3da:	4650      	mov	r0, sl
 800c3dc:	f7f3 ff88 	bl	80002f0 <memchr>
 800c3e0:	b138      	cbz	r0, 800c3f2 <_vfiprintf_r+0x176>
 800c3e2:	9b04      	ldr	r3, [sp, #16]
 800c3e4:	eba0 000a 	sub.w	r0, r0, sl
 800c3e8:	2240      	movs	r2, #64	@ 0x40
 800c3ea:	4082      	lsls	r2, r0
 800c3ec:	4313      	orrs	r3, r2
 800c3ee:	3401      	adds	r4, #1
 800c3f0:	9304      	str	r3, [sp, #16]
 800c3f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3f6:	4829      	ldr	r0, [pc, #164]	@ (800c49c <_vfiprintf_r+0x220>)
 800c3f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c3fc:	2206      	movs	r2, #6
 800c3fe:	f7f3 ff77 	bl	80002f0 <memchr>
 800c402:	2800      	cmp	r0, #0
 800c404:	d03f      	beq.n	800c486 <_vfiprintf_r+0x20a>
 800c406:	4b26      	ldr	r3, [pc, #152]	@ (800c4a0 <_vfiprintf_r+0x224>)
 800c408:	bb1b      	cbnz	r3, 800c452 <_vfiprintf_r+0x1d6>
 800c40a:	9b03      	ldr	r3, [sp, #12]
 800c40c:	3307      	adds	r3, #7
 800c40e:	f023 0307 	bic.w	r3, r3, #7
 800c412:	3308      	adds	r3, #8
 800c414:	9303      	str	r3, [sp, #12]
 800c416:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c418:	443b      	add	r3, r7
 800c41a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c41c:	e76a      	b.n	800c2f4 <_vfiprintf_r+0x78>
 800c41e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c422:	460c      	mov	r4, r1
 800c424:	2001      	movs	r0, #1
 800c426:	e7a8      	b.n	800c37a <_vfiprintf_r+0xfe>
 800c428:	2300      	movs	r3, #0
 800c42a:	3401      	adds	r4, #1
 800c42c:	9305      	str	r3, [sp, #20]
 800c42e:	4619      	mov	r1, r3
 800c430:	f04f 0c0a 	mov.w	ip, #10
 800c434:	4620      	mov	r0, r4
 800c436:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c43a:	3a30      	subs	r2, #48	@ 0x30
 800c43c:	2a09      	cmp	r2, #9
 800c43e:	d903      	bls.n	800c448 <_vfiprintf_r+0x1cc>
 800c440:	2b00      	cmp	r3, #0
 800c442:	d0c6      	beq.n	800c3d2 <_vfiprintf_r+0x156>
 800c444:	9105      	str	r1, [sp, #20]
 800c446:	e7c4      	b.n	800c3d2 <_vfiprintf_r+0x156>
 800c448:	fb0c 2101 	mla	r1, ip, r1, r2
 800c44c:	4604      	mov	r4, r0
 800c44e:	2301      	movs	r3, #1
 800c450:	e7f0      	b.n	800c434 <_vfiprintf_r+0x1b8>
 800c452:	ab03      	add	r3, sp, #12
 800c454:	9300      	str	r3, [sp, #0]
 800c456:	462a      	mov	r2, r5
 800c458:	4b12      	ldr	r3, [pc, #72]	@ (800c4a4 <_vfiprintf_r+0x228>)
 800c45a:	a904      	add	r1, sp, #16
 800c45c:	4630      	mov	r0, r6
 800c45e:	f3af 8000 	nop.w
 800c462:	4607      	mov	r7, r0
 800c464:	1c78      	adds	r0, r7, #1
 800c466:	d1d6      	bne.n	800c416 <_vfiprintf_r+0x19a>
 800c468:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c46a:	07d9      	lsls	r1, r3, #31
 800c46c:	d405      	bmi.n	800c47a <_vfiprintf_r+0x1fe>
 800c46e:	89ab      	ldrh	r3, [r5, #12]
 800c470:	059a      	lsls	r2, r3, #22
 800c472:	d402      	bmi.n	800c47a <_vfiprintf_r+0x1fe>
 800c474:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c476:	f7ff fd15 	bl	800bea4 <__retarget_lock_release_recursive>
 800c47a:	89ab      	ldrh	r3, [r5, #12]
 800c47c:	065b      	lsls	r3, r3, #25
 800c47e:	f53f af1f 	bmi.w	800c2c0 <_vfiprintf_r+0x44>
 800c482:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c484:	e71e      	b.n	800c2c4 <_vfiprintf_r+0x48>
 800c486:	ab03      	add	r3, sp, #12
 800c488:	9300      	str	r3, [sp, #0]
 800c48a:	462a      	mov	r2, r5
 800c48c:	4b05      	ldr	r3, [pc, #20]	@ (800c4a4 <_vfiprintf_r+0x228>)
 800c48e:	a904      	add	r1, sp, #16
 800c490:	4630      	mov	r0, r6
 800c492:	f000 f879 	bl	800c588 <_printf_i>
 800c496:	e7e4      	b.n	800c462 <_vfiprintf_r+0x1e6>
 800c498:	080ae968 	.word	0x080ae968
 800c49c:	080ae972 	.word	0x080ae972
 800c4a0:	00000000 	.word	0x00000000
 800c4a4:	0800c257 	.word	0x0800c257
 800c4a8:	080ae96e 	.word	0x080ae96e

0800c4ac <_printf_common>:
 800c4ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4b0:	4616      	mov	r6, r2
 800c4b2:	4698      	mov	r8, r3
 800c4b4:	688a      	ldr	r2, [r1, #8]
 800c4b6:	690b      	ldr	r3, [r1, #16]
 800c4b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	bfb8      	it	lt
 800c4c0:	4613      	movlt	r3, r2
 800c4c2:	6033      	str	r3, [r6, #0]
 800c4c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c4c8:	4607      	mov	r7, r0
 800c4ca:	460c      	mov	r4, r1
 800c4cc:	b10a      	cbz	r2, 800c4d2 <_printf_common+0x26>
 800c4ce:	3301      	adds	r3, #1
 800c4d0:	6033      	str	r3, [r6, #0]
 800c4d2:	6823      	ldr	r3, [r4, #0]
 800c4d4:	0699      	lsls	r1, r3, #26
 800c4d6:	bf42      	ittt	mi
 800c4d8:	6833      	ldrmi	r3, [r6, #0]
 800c4da:	3302      	addmi	r3, #2
 800c4dc:	6033      	strmi	r3, [r6, #0]
 800c4de:	6825      	ldr	r5, [r4, #0]
 800c4e0:	f015 0506 	ands.w	r5, r5, #6
 800c4e4:	d106      	bne.n	800c4f4 <_printf_common+0x48>
 800c4e6:	f104 0a19 	add.w	sl, r4, #25
 800c4ea:	68e3      	ldr	r3, [r4, #12]
 800c4ec:	6832      	ldr	r2, [r6, #0]
 800c4ee:	1a9b      	subs	r3, r3, r2
 800c4f0:	42ab      	cmp	r3, r5
 800c4f2:	dc26      	bgt.n	800c542 <_printf_common+0x96>
 800c4f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c4f8:	6822      	ldr	r2, [r4, #0]
 800c4fa:	3b00      	subs	r3, #0
 800c4fc:	bf18      	it	ne
 800c4fe:	2301      	movne	r3, #1
 800c500:	0692      	lsls	r2, r2, #26
 800c502:	d42b      	bmi.n	800c55c <_printf_common+0xb0>
 800c504:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c508:	4641      	mov	r1, r8
 800c50a:	4638      	mov	r0, r7
 800c50c:	47c8      	blx	r9
 800c50e:	3001      	adds	r0, #1
 800c510:	d01e      	beq.n	800c550 <_printf_common+0xa4>
 800c512:	6823      	ldr	r3, [r4, #0]
 800c514:	6922      	ldr	r2, [r4, #16]
 800c516:	f003 0306 	and.w	r3, r3, #6
 800c51a:	2b04      	cmp	r3, #4
 800c51c:	bf02      	ittt	eq
 800c51e:	68e5      	ldreq	r5, [r4, #12]
 800c520:	6833      	ldreq	r3, [r6, #0]
 800c522:	1aed      	subeq	r5, r5, r3
 800c524:	68a3      	ldr	r3, [r4, #8]
 800c526:	bf0c      	ite	eq
 800c528:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c52c:	2500      	movne	r5, #0
 800c52e:	4293      	cmp	r3, r2
 800c530:	bfc4      	itt	gt
 800c532:	1a9b      	subgt	r3, r3, r2
 800c534:	18ed      	addgt	r5, r5, r3
 800c536:	2600      	movs	r6, #0
 800c538:	341a      	adds	r4, #26
 800c53a:	42b5      	cmp	r5, r6
 800c53c:	d11a      	bne.n	800c574 <_printf_common+0xc8>
 800c53e:	2000      	movs	r0, #0
 800c540:	e008      	b.n	800c554 <_printf_common+0xa8>
 800c542:	2301      	movs	r3, #1
 800c544:	4652      	mov	r2, sl
 800c546:	4641      	mov	r1, r8
 800c548:	4638      	mov	r0, r7
 800c54a:	47c8      	blx	r9
 800c54c:	3001      	adds	r0, #1
 800c54e:	d103      	bne.n	800c558 <_printf_common+0xac>
 800c550:	f04f 30ff 	mov.w	r0, #4294967295
 800c554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c558:	3501      	adds	r5, #1
 800c55a:	e7c6      	b.n	800c4ea <_printf_common+0x3e>
 800c55c:	18e1      	adds	r1, r4, r3
 800c55e:	1c5a      	adds	r2, r3, #1
 800c560:	2030      	movs	r0, #48	@ 0x30
 800c562:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c566:	4422      	add	r2, r4
 800c568:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c56c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c570:	3302      	adds	r3, #2
 800c572:	e7c7      	b.n	800c504 <_printf_common+0x58>
 800c574:	2301      	movs	r3, #1
 800c576:	4622      	mov	r2, r4
 800c578:	4641      	mov	r1, r8
 800c57a:	4638      	mov	r0, r7
 800c57c:	47c8      	blx	r9
 800c57e:	3001      	adds	r0, #1
 800c580:	d0e6      	beq.n	800c550 <_printf_common+0xa4>
 800c582:	3601      	adds	r6, #1
 800c584:	e7d9      	b.n	800c53a <_printf_common+0x8e>
	...

0800c588 <_printf_i>:
 800c588:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c58c:	7e0f      	ldrb	r7, [r1, #24]
 800c58e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c590:	2f78      	cmp	r7, #120	@ 0x78
 800c592:	4691      	mov	r9, r2
 800c594:	4680      	mov	r8, r0
 800c596:	460c      	mov	r4, r1
 800c598:	469a      	mov	sl, r3
 800c59a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c59e:	d807      	bhi.n	800c5b0 <_printf_i+0x28>
 800c5a0:	2f62      	cmp	r7, #98	@ 0x62
 800c5a2:	d80a      	bhi.n	800c5ba <_printf_i+0x32>
 800c5a4:	2f00      	cmp	r7, #0
 800c5a6:	f000 80d2 	beq.w	800c74e <_printf_i+0x1c6>
 800c5aa:	2f58      	cmp	r7, #88	@ 0x58
 800c5ac:	f000 80b9 	beq.w	800c722 <_printf_i+0x19a>
 800c5b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c5b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c5b8:	e03a      	b.n	800c630 <_printf_i+0xa8>
 800c5ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c5be:	2b15      	cmp	r3, #21
 800c5c0:	d8f6      	bhi.n	800c5b0 <_printf_i+0x28>
 800c5c2:	a101      	add	r1, pc, #4	@ (adr r1, 800c5c8 <_printf_i+0x40>)
 800c5c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c5c8:	0800c621 	.word	0x0800c621
 800c5cc:	0800c635 	.word	0x0800c635
 800c5d0:	0800c5b1 	.word	0x0800c5b1
 800c5d4:	0800c5b1 	.word	0x0800c5b1
 800c5d8:	0800c5b1 	.word	0x0800c5b1
 800c5dc:	0800c5b1 	.word	0x0800c5b1
 800c5e0:	0800c635 	.word	0x0800c635
 800c5e4:	0800c5b1 	.word	0x0800c5b1
 800c5e8:	0800c5b1 	.word	0x0800c5b1
 800c5ec:	0800c5b1 	.word	0x0800c5b1
 800c5f0:	0800c5b1 	.word	0x0800c5b1
 800c5f4:	0800c735 	.word	0x0800c735
 800c5f8:	0800c65f 	.word	0x0800c65f
 800c5fc:	0800c6ef 	.word	0x0800c6ef
 800c600:	0800c5b1 	.word	0x0800c5b1
 800c604:	0800c5b1 	.word	0x0800c5b1
 800c608:	0800c757 	.word	0x0800c757
 800c60c:	0800c5b1 	.word	0x0800c5b1
 800c610:	0800c65f 	.word	0x0800c65f
 800c614:	0800c5b1 	.word	0x0800c5b1
 800c618:	0800c5b1 	.word	0x0800c5b1
 800c61c:	0800c6f7 	.word	0x0800c6f7
 800c620:	6833      	ldr	r3, [r6, #0]
 800c622:	1d1a      	adds	r2, r3, #4
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	6032      	str	r2, [r6, #0]
 800c628:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c62c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c630:	2301      	movs	r3, #1
 800c632:	e09d      	b.n	800c770 <_printf_i+0x1e8>
 800c634:	6833      	ldr	r3, [r6, #0]
 800c636:	6820      	ldr	r0, [r4, #0]
 800c638:	1d19      	adds	r1, r3, #4
 800c63a:	6031      	str	r1, [r6, #0]
 800c63c:	0606      	lsls	r6, r0, #24
 800c63e:	d501      	bpl.n	800c644 <_printf_i+0xbc>
 800c640:	681d      	ldr	r5, [r3, #0]
 800c642:	e003      	b.n	800c64c <_printf_i+0xc4>
 800c644:	0645      	lsls	r5, r0, #25
 800c646:	d5fb      	bpl.n	800c640 <_printf_i+0xb8>
 800c648:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c64c:	2d00      	cmp	r5, #0
 800c64e:	da03      	bge.n	800c658 <_printf_i+0xd0>
 800c650:	232d      	movs	r3, #45	@ 0x2d
 800c652:	426d      	negs	r5, r5
 800c654:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c658:	4859      	ldr	r0, [pc, #356]	@ (800c7c0 <_printf_i+0x238>)
 800c65a:	230a      	movs	r3, #10
 800c65c:	e011      	b.n	800c682 <_printf_i+0xfa>
 800c65e:	6821      	ldr	r1, [r4, #0]
 800c660:	6833      	ldr	r3, [r6, #0]
 800c662:	0608      	lsls	r0, r1, #24
 800c664:	f853 5b04 	ldr.w	r5, [r3], #4
 800c668:	d402      	bmi.n	800c670 <_printf_i+0xe8>
 800c66a:	0649      	lsls	r1, r1, #25
 800c66c:	bf48      	it	mi
 800c66e:	b2ad      	uxthmi	r5, r5
 800c670:	2f6f      	cmp	r7, #111	@ 0x6f
 800c672:	4853      	ldr	r0, [pc, #332]	@ (800c7c0 <_printf_i+0x238>)
 800c674:	6033      	str	r3, [r6, #0]
 800c676:	bf14      	ite	ne
 800c678:	230a      	movne	r3, #10
 800c67a:	2308      	moveq	r3, #8
 800c67c:	2100      	movs	r1, #0
 800c67e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c682:	6866      	ldr	r6, [r4, #4]
 800c684:	60a6      	str	r6, [r4, #8]
 800c686:	2e00      	cmp	r6, #0
 800c688:	bfa2      	ittt	ge
 800c68a:	6821      	ldrge	r1, [r4, #0]
 800c68c:	f021 0104 	bicge.w	r1, r1, #4
 800c690:	6021      	strge	r1, [r4, #0]
 800c692:	b90d      	cbnz	r5, 800c698 <_printf_i+0x110>
 800c694:	2e00      	cmp	r6, #0
 800c696:	d04b      	beq.n	800c730 <_printf_i+0x1a8>
 800c698:	4616      	mov	r6, r2
 800c69a:	fbb5 f1f3 	udiv	r1, r5, r3
 800c69e:	fb03 5711 	mls	r7, r3, r1, r5
 800c6a2:	5dc7      	ldrb	r7, [r0, r7]
 800c6a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c6a8:	462f      	mov	r7, r5
 800c6aa:	42bb      	cmp	r3, r7
 800c6ac:	460d      	mov	r5, r1
 800c6ae:	d9f4      	bls.n	800c69a <_printf_i+0x112>
 800c6b0:	2b08      	cmp	r3, #8
 800c6b2:	d10b      	bne.n	800c6cc <_printf_i+0x144>
 800c6b4:	6823      	ldr	r3, [r4, #0]
 800c6b6:	07df      	lsls	r7, r3, #31
 800c6b8:	d508      	bpl.n	800c6cc <_printf_i+0x144>
 800c6ba:	6923      	ldr	r3, [r4, #16]
 800c6bc:	6861      	ldr	r1, [r4, #4]
 800c6be:	4299      	cmp	r1, r3
 800c6c0:	bfde      	ittt	le
 800c6c2:	2330      	movle	r3, #48	@ 0x30
 800c6c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c6c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c6cc:	1b92      	subs	r2, r2, r6
 800c6ce:	6122      	str	r2, [r4, #16]
 800c6d0:	f8cd a000 	str.w	sl, [sp]
 800c6d4:	464b      	mov	r3, r9
 800c6d6:	aa03      	add	r2, sp, #12
 800c6d8:	4621      	mov	r1, r4
 800c6da:	4640      	mov	r0, r8
 800c6dc:	f7ff fee6 	bl	800c4ac <_printf_common>
 800c6e0:	3001      	adds	r0, #1
 800c6e2:	d14a      	bne.n	800c77a <_printf_i+0x1f2>
 800c6e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c6e8:	b004      	add	sp, #16
 800c6ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6ee:	6823      	ldr	r3, [r4, #0]
 800c6f0:	f043 0320 	orr.w	r3, r3, #32
 800c6f4:	6023      	str	r3, [r4, #0]
 800c6f6:	4833      	ldr	r0, [pc, #204]	@ (800c7c4 <_printf_i+0x23c>)
 800c6f8:	2778      	movs	r7, #120	@ 0x78
 800c6fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c6fe:	6823      	ldr	r3, [r4, #0]
 800c700:	6831      	ldr	r1, [r6, #0]
 800c702:	061f      	lsls	r7, r3, #24
 800c704:	f851 5b04 	ldr.w	r5, [r1], #4
 800c708:	d402      	bmi.n	800c710 <_printf_i+0x188>
 800c70a:	065f      	lsls	r7, r3, #25
 800c70c:	bf48      	it	mi
 800c70e:	b2ad      	uxthmi	r5, r5
 800c710:	6031      	str	r1, [r6, #0]
 800c712:	07d9      	lsls	r1, r3, #31
 800c714:	bf44      	itt	mi
 800c716:	f043 0320 	orrmi.w	r3, r3, #32
 800c71a:	6023      	strmi	r3, [r4, #0]
 800c71c:	b11d      	cbz	r5, 800c726 <_printf_i+0x19e>
 800c71e:	2310      	movs	r3, #16
 800c720:	e7ac      	b.n	800c67c <_printf_i+0xf4>
 800c722:	4827      	ldr	r0, [pc, #156]	@ (800c7c0 <_printf_i+0x238>)
 800c724:	e7e9      	b.n	800c6fa <_printf_i+0x172>
 800c726:	6823      	ldr	r3, [r4, #0]
 800c728:	f023 0320 	bic.w	r3, r3, #32
 800c72c:	6023      	str	r3, [r4, #0]
 800c72e:	e7f6      	b.n	800c71e <_printf_i+0x196>
 800c730:	4616      	mov	r6, r2
 800c732:	e7bd      	b.n	800c6b0 <_printf_i+0x128>
 800c734:	6833      	ldr	r3, [r6, #0]
 800c736:	6825      	ldr	r5, [r4, #0]
 800c738:	6961      	ldr	r1, [r4, #20]
 800c73a:	1d18      	adds	r0, r3, #4
 800c73c:	6030      	str	r0, [r6, #0]
 800c73e:	062e      	lsls	r6, r5, #24
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	d501      	bpl.n	800c748 <_printf_i+0x1c0>
 800c744:	6019      	str	r1, [r3, #0]
 800c746:	e002      	b.n	800c74e <_printf_i+0x1c6>
 800c748:	0668      	lsls	r0, r5, #25
 800c74a:	d5fb      	bpl.n	800c744 <_printf_i+0x1bc>
 800c74c:	8019      	strh	r1, [r3, #0]
 800c74e:	2300      	movs	r3, #0
 800c750:	6123      	str	r3, [r4, #16]
 800c752:	4616      	mov	r6, r2
 800c754:	e7bc      	b.n	800c6d0 <_printf_i+0x148>
 800c756:	6833      	ldr	r3, [r6, #0]
 800c758:	1d1a      	adds	r2, r3, #4
 800c75a:	6032      	str	r2, [r6, #0]
 800c75c:	681e      	ldr	r6, [r3, #0]
 800c75e:	6862      	ldr	r2, [r4, #4]
 800c760:	2100      	movs	r1, #0
 800c762:	4630      	mov	r0, r6
 800c764:	f7f3 fdc4 	bl	80002f0 <memchr>
 800c768:	b108      	cbz	r0, 800c76e <_printf_i+0x1e6>
 800c76a:	1b80      	subs	r0, r0, r6
 800c76c:	6060      	str	r0, [r4, #4]
 800c76e:	6863      	ldr	r3, [r4, #4]
 800c770:	6123      	str	r3, [r4, #16]
 800c772:	2300      	movs	r3, #0
 800c774:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c778:	e7aa      	b.n	800c6d0 <_printf_i+0x148>
 800c77a:	6923      	ldr	r3, [r4, #16]
 800c77c:	4632      	mov	r2, r6
 800c77e:	4649      	mov	r1, r9
 800c780:	4640      	mov	r0, r8
 800c782:	47d0      	blx	sl
 800c784:	3001      	adds	r0, #1
 800c786:	d0ad      	beq.n	800c6e4 <_printf_i+0x15c>
 800c788:	6823      	ldr	r3, [r4, #0]
 800c78a:	079b      	lsls	r3, r3, #30
 800c78c:	d413      	bmi.n	800c7b6 <_printf_i+0x22e>
 800c78e:	68e0      	ldr	r0, [r4, #12]
 800c790:	9b03      	ldr	r3, [sp, #12]
 800c792:	4298      	cmp	r0, r3
 800c794:	bfb8      	it	lt
 800c796:	4618      	movlt	r0, r3
 800c798:	e7a6      	b.n	800c6e8 <_printf_i+0x160>
 800c79a:	2301      	movs	r3, #1
 800c79c:	4632      	mov	r2, r6
 800c79e:	4649      	mov	r1, r9
 800c7a0:	4640      	mov	r0, r8
 800c7a2:	47d0      	blx	sl
 800c7a4:	3001      	adds	r0, #1
 800c7a6:	d09d      	beq.n	800c6e4 <_printf_i+0x15c>
 800c7a8:	3501      	adds	r5, #1
 800c7aa:	68e3      	ldr	r3, [r4, #12]
 800c7ac:	9903      	ldr	r1, [sp, #12]
 800c7ae:	1a5b      	subs	r3, r3, r1
 800c7b0:	42ab      	cmp	r3, r5
 800c7b2:	dcf2      	bgt.n	800c79a <_printf_i+0x212>
 800c7b4:	e7eb      	b.n	800c78e <_printf_i+0x206>
 800c7b6:	2500      	movs	r5, #0
 800c7b8:	f104 0619 	add.w	r6, r4, #25
 800c7bc:	e7f5      	b.n	800c7aa <_printf_i+0x222>
 800c7be:	bf00      	nop
 800c7c0:	080ae979 	.word	0x080ae979
 800c7c4:	080ae98a 	.word	0x080ae98a

0800c7c8 <__sflush_r>:
 800c7c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7d0:	0716      	lsls	r6, r2, #28
 800c7d2:	4605      	mov	r5, r0
 800c7d4:	460c      	mov	r4, r1
 800c7d6:	d454      	bmi.n	800c882 <__sflush_r+0xba>
 800c7d8:	684b      	ldr	r3, [r1, #4]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	dc02      	bgt.n	800c7e4 <__sflush_r+0x1c>
 800c7de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	dd48      	ble.n	800c876 <__sflush_r+0xae>
 800c7e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c7e6:	2e00      	cmp	r6, #0
 800c7e8:	d045      	beq.n	800c876 <__sflush_r+0xae>
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c7f0:	682f      	ldr	r7, [r5, #0]
 800c7f2:	6a21      	ldr	r1, [r4, #32]
 800c7f4:	602b      	str	r3, [r5, #0]
 800c7f6:	d030      	beq.n	800c85a <__sflush_r+0x92>
 800c7f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c7fa:	89a3      	ldrh	r3, [r4, #12]
 800c7fc:	0759      	lsls	r1, r3, #29
 800c7fe:	d505      	bpl.n	800c80c <__sflush_r+0x44>
 800c800:	6863      	ldr	r3, [r4, #4]
 800c802:	1ad2      	subs	r2, r2, r3
 800c804:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c806:	b10b      	cbz	r3, 800c80c <__sflush_r+0x44>
 800c808:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c80a:	1ad2      	subs	r2, r2, r3
 800c80c:	2300      	movs	r3, #0
 800c80e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c810:	6a21      	ldr	r1, [r4, #32]
 800c812:	4628      	mov	r0, r5
 800c814:	47b0      	blx	r6
 800c816:	1c43      	adds	r3, r0, #1
 800c818:	89a3      	ldrh	r3, [r4, #12]
 800c81a:	d106      	bne.n	800c82a <__sflush_r+0x62>
 800c81c:	6829      	ldr	r1, [r5, #0]
 800c81e:	291d      	cmp	r1, #29
 800c820:	d82b      	bhi.n	800c87a <__sflush_r+0xb2>
 800c822:	4a2a      	ldr	r2, [pc, #168]	@ (800c8cc <__sflush_r+0x104>)
 800c824:	410a      	asrs	r2, r1
 800c826:	07d6      	lsls	r6, r2, #31
 800c828:	d427      	bmi.n	800c87a <__sflush_r+0xb2>
 800c82a:	2200      	movs	r2, #0
 800c82c:	6062      	str	r2, [r4, #4]
 800c82e:	04d9      	lsls	r1, r3, #19
 800c830:	6922      	ldr	r2, [r4, #16]
 800c832:	6022      	str	r2, [r4, #0]
 800c834:	d504      	bpl.n	800c840 <__sflush_r+0x78>
 800c836:	1c42      	adds	r2, r0, #1
 800c838:	d101      	bne.n	800c83e <__sflush_r+0x76>
 800c83a:	682b      	ldr	r3, [r5, #0]
 800c83c:	b903      	cbnz	r3, 800c840 <__sflush_r+0x78>
 800c83e:	6560      	str	r0, [r4, #84]	@ 0x54
 800c840:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c842:	602f      	str	r7, [r5, #0]
 800c844:	b1b9      	cbz	r1, 800c876 <__sflush_r+0xae>
 800c846:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c84a:	4299      	cmp	r1, r3
 800c84c:	d002      	beq.n	800c854 <__sflush_r+0x8c>
 800c84e:	4628      	mov	r0, r5
 800c850:	f7ff fb40 	bl	800bed4 <_free_r>
 800c854:	2300      	movs	r3, #0
 800c856:	6363      	str	r3, [r4, #52]	@ 0x34
 800c858:	e00d      	b.n	800c876 <__sflush_r+0xae>
 800c85a:	2301      	movs	r3, #1
 800c85c:	4628      	mov	r0, r5
 800c85e:	47b0      	blx	r6
 800c860:	4602      	mov	r2, r0
 800c862:	1c50      	adds	r0, r2, #1
 800c864:	d1c9      	bne.n	800c7fa <__sflush_r+0x32>
 800c866:	682b      	ldr	r3, [r5, #0]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d0c6      	beq.n	800c7fa <__sflush_r+0x32>
 800c86c:	2b1d      	cmp	r3, #29
 800c86e:	d001      	beq.n	800c874 <__sflush_r+0xac>
 800c870:	2b16      	cmp	r3, #22
 800c872:	d11e      	bne.n	800c8b2 <__sflush_r+0xea>
 800c874:	602f      	str	r7, [r5, #0]
 800c876:	2000      	movs	r0, #0
 800c878:	e022      	b.n	800c8c0 <__sflush_r+0xf8>
 800c87a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c87e:	b21b      	sxth	r3, r3
 800c880:	e01b      	b.n	800c8ba <__sflush_r+0xf2>
 800c882:	690f      	ldr	r7, [r1, #16]
 800c884:	2f00      	cmp	r7, #0
 800c886:	d0f6      	beq.n	800c876 <__sflush_r+0xae>
 800c888:	0793      	lsls	r3, r2, #30
 800c88a:	680e      	ldr	r6, [r1, #0]
 800c88c:	bf08      	it	eq
 800c88e:	694b      	ldreq	r3, [r1, #20]
 800c890:	600f      	str	r7, [r1, #0]
 800c892:	bf18      	it	ne
 800c894:	2300      	movne	r3, #0
 800c896:	eba6 0807 	sub.w	r8, r6, r7
 800c89a:	608b      	str	r3, [r1, #8]
 800c89c:	f1b8 0f00 	cmp.w	r8, #0
 800c8a0:	dde9      	ble.n	800c876 <__sflush_r+0xae>
 800c8a2:	6a21      	ldr	r1, [r4, #32]
 800c8a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c8a6:	4643      	mov	r3, r8
 800c8a8:	463a      	mov	r2, r7
 800c8aa:	4628      	mov	r0, r5
 800c8ac:	47b0      	blx	r6
 800c8ae:	2800      	cmp	r0, #0
 800c8b0:	dc08      	bgt.n	800c8c4 <__sflush_r+0xfc>
 800c8b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c8ba:	81a3      	strh	r3, [r4, #12]
 800c8bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c8c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8c4:	4407      	add	r7, r0
 800c8c6:	eba8 0800 	sub.w	r8, r8, r0
 800c8ca:	e7e7      	b.n	800c89c <__sflush_r+0xd4>
 800c8cc:	dfbffffe 	.word	0xdfbffffe

0800c8d0 <_fflush_r>:
 800c8d0:	b538      	push	{r3, r4, r5, lr}
 800c8d2:	690b      	ldr	r3, [r1, #16]
 800c8d4:	4605      	mov	r5, r0
 800c8d6:	460c      	mov	r4, r1
 800c8d8:	b913      	cbnz	r3, 800c8e0 <_fflush_r+0x10>
 800c8da:	2500      	movs	r5, #0
 800c8dc:	4628      	mov	r0, r5
 800c8de:	bd38      	pop	{r3, r4, r5, pc}
 800c8e0:	b118      	cbz	r0, 800c8ea <_fflush_r+0x1a>
 800c8e2:	6a03      	ldr	r3, [r0, #32]
 800c8e4:	b90b      	cbnz	r3, 800c8ea <_fflush_r+0x1a>
 800c8e6:	f7ff f89b 	bl	800ba20 <__sinit>
 800c8ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d0f3      	beq.n	800c8da <_fflush_r+0xa>
 800c8f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c8f4:	07d0      	lsls	r0, r2, #31
 800c8f6:	d404      	bmi.n	800c902 <_fflush_r+0x32>
 800c8f8:	0599      	lsls	r1, r3, #22
 800c8fa:	d402      	bmi.n	800c902 <_fflush_r+0x32>
 800c8fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c8fe:	f7ff fad0 	bl	800bea2 <__retarget_lock_acquire_recursive>
 800c902:	4628      	mov	r0, r5
 800c904:	4621      	mov	r1, r4
 800c906:	f7ff ff5f 	bl	800c7c8 <__sflush_r>
 800c90a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c90c:	07da      	lsls	r2, r3, #31
 800c90e:	4605      	mov	r5, r0
 800c910:	d4e4      	bmi.n	800c8dc <_fflush_r+0xc>
 800c912:	89a3      	ldrh	r3, [r4, #12]
 800c914:	059b      	lsls	r3, r3, #22
 800c916:	d4e1      	bmi.n	800c8dc <_fflush_r+0xc>
 800c918:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c91a:	f7ff fac3 	bl	800bea4 <__retarget_lock_release_recursive>
 800c91e:	e7dd      	b.n	800c8dc <_fflush_r+0xc>

0800c920 <__swhatbuf_r>:
 800c920:	b570      	push	{r4, r5, r6, lr}
 800c922:	460c      	mov	r4, r1
 800c924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c928:	2900      	cmp	r1, #0
 800c92a:	b096      	sub	sp, #88	@ 0x58
 800c92c:	4615      	mov	r5, r2
 800c92e:	461e      	mov	r6, r3
 800c930:	da0d      	bge.n	800c94e <__swhatbuf_r+0x2e>
 800c932:	89a3      	ldrh	r3, [r4, #12]
 800c934:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c938:	f04f 0100 	mov.w	r1, #0
 800c93c:	bf14      	ite	ne
 800c93e:	2340      	movne	r3, #64	@ 0x40
 800c940:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c944:	2000      	movs	r0, #0
 800c946:	6031      	str	r1, [r6, #0]
 800c948:	602b      	str	r3, [r5, #0]
 800c94a:	b016      	add	sp, #88	@ 0x58
 800c94c:	bd70      	pop	{r4, r5, r6, pc}
 800c94e:	466a      	mov	r2, sp
 800c950:	f000 f848 	bl	800c9e4 <_fstat_r>
 800c954:	2800      	cmp	r0, #0
 800c956:	dbec      	blt.n	800c932 <__swhatbuf_r+0x12>
 800c958:	9901      	ldr	r1, [sp, #4]
 800c95a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c95e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c962:	4259      	negs	r1, r3
 800c964:	4159      	adcs	r1, r3
 800c966:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c96a:	e7eb      	b.n	800c944 <__swhatbuf_r+0x24>

0800c96c <__smakebuf_r>:
 800c96c:	898b      	ldrh	r3, [r1, #12]
 800c96e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c970:	079d      	lsls	r5, r3, #30
 800c972:	4606      	mov	r6, r0
 800c974:	460c      	mov	r4, r1
 800c976:	d507      	bpl.n	800c988 <__smakebuf_r+0x1c>
 800c978:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c97c:	6023      	str	r3, [r4, #0]
 800c97e:	6123      	str	r3, [r4, #16]
 800c980:	2301      	movs	r3, #1
 800c982:	6163      	str	r3, [r4, #20]
 800c984:	b003      	add	sp, #12
 800c986:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c988:	ab01      	add	r3, sp, #4
 800c98a:	466a      	mov	r2, sp
 800c98c:	f7ff ffc8 	bl	800c920 <__swhatbuf_r>
 800c990:	9f00      	ldr	r7, [sp, #0]
 800c992:	4605      	mov	r5, r0
 800c994:	4639      	mov	r1, r7
 800c996:	4630      	mov	r0, r6
 800c998:	f7fe fefc 	bl	800b794 <_malloc_r>
 800c99c:	b948      	cbnz	r0, 800c9b2 <__smakebuf_r+0x46>
 800c99e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9a2:	059a      	lsls	r2, r3, #22
 800c9a4:	d4ee      	bmi.n	800c984 <__smakebuf_r+0x18>
 800c9a6:	f023 0303 	bic.w	r3, r3, #3
 800c9aa:	f043 0302 	orr.w	r3, r3, #2
 800c9ae:	81a3      	strh	r3, [r4, #12]
 800c9b0:	e7e2      	b.n	800c978 <__smakebuf_r+0xc>
 800c9b2:	89a3      	ldrh	r3, [r4, #12]
 800c9b4:	6020      	str	r0, [r4, #0]
 800c9b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c9ba:	81a3      	strh	r3, [r4, #12]
 800c9bc:	9b01      	ldr	r3, [sp, #4]
 800c9be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c9c2:	b15b      	cbz	r3, 800c9dc <__smakebuf_r+0x70>
 800c9c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c9c8:	4630      	mov	r0, r6
 800c9ca:	f000 f81d 	bl	800ca08 <_isatty_r>
 800c9ce:	b128      	cbz	r0, 800c9dc <__smakebuf_r+0x70>
 800c9d0:	89a3      	ldrh	r3, [r4, #12]
 800c9d2:	f023 0303 	bic.w	r3, r3, #3
 800c9d6:	f043 0301 	orr.w	r3, r3, #1
 800c9da:	81a3      	strh	r3, [r4, #12]
 800c9dc:	89a3      	ldrh	r3, [r4, #12]
 800c9de:	431d      	orrs	r5, r3
 800c9e0:	81a5      	strh	r5, [r4, #12]
 800c9e2:	e7cf      	b.n	800c984 <__smakebuf_r+0x18>

0800c9e4 <_fstat_r>:
 800c9e4:	b538      	push	{r3, r4, r5, lr}
 800c9e6:	4d07      	ldr	r5, [pc, #28]	@ (800ca04 <_fstat_r+0x20>)
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	4604      	mov	r4, r0
 800c9ec:	4608      	mov	r0, r1
 800c9ee:	4611      	mov	r1, r2
 800c9f0:	602b      	str	r3, [r5, #0]
 800c9f2:	f000 f9e7 	bl	800cdc4 <_fstat>
 800c9f6:	1c43      	adds	r3, r0, #1
 800c9f8:	d102      	bne.n	800ca00 <_fstat_r+0x1c>
 800c9fa:	682b      	ldr	r3, [r5, #0]
 800c9fc:	b103      	cbz	r3, 800ca00 <_fstat_r+0x1c>
 800c9fe:	6023      	str	r3, [r4, #0]
 800ca00:	bd38      	pop	{r3, r4, r5, pc}
 800ca02:	bf00      	nop
 800ca04:	2404b994 	.word	0x2404b994

0800ca08 <_isatty_r>:
 800ca08:	b538      	push	{r3, r4, r5, lr}
 800ca0a:	4d06      	ldr	r5, [pc, #24]	@ (800ca24 <_isatty_r+0x1c>)
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	4604      	mov	r4, r0
 800ca10:	4608      	mov	r0, r1
 800ca12:	602b      	str	r3, [r5, #0]
 800ca14:	f000 f9de 	bl	800cdd4 <_isatty>
 800ca18:	1c43      	adds	r3, r0, #1
 800ca1a:	d102      	bne.n	800ca22 <_isatty_r+0x1a>
 800ca1c:	682b      	ldr	r3, [r5, #0]
 800ca1e:	b103      	cbz	r3, 800ca22 <_isatty_r+0x1a>
 800ca20:	6023      	str	r3, [r4, #0]
 800ca22:	bd38      	pop	{r3, r4, r5, pc}
 800ca24:	2404b994 	.word	0x2404b994

0800ca28 <checkint>:
 800ca28:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800ca2c:	2b7e      	cmp	r3, #126	@ 0x7e
 800ca2e:	d910      	bls.n	800ca52 <checkint+0x2a>
 800ca30:	2b96      	cmp	r3, #150	@ 0x96
 800ca32:	d80c      	bhi.n	800ca4e <checkint+0x26>
 800ca34:	2201      	movs	r2, #1
 800ca36:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800ca3a:	fa02 f303 	lsl.w	r3, r2, r3
 800ca3e:	1e5a      	subs	r2, r3, #1
 800ca40:	4202      	tst	r2, r0
 800ca42:	d106      	bne.n	800ca52 <checkint+0x2a>
 800ca44:	4203      	tst	r3, r0
 800ca46:	bf0c      	ite	eq
 800ca48:	2002      	moveq	r0, #2
 800ca4a:	2001      	movne	r0, #1
 800ca4c:	4770      	bx	lr
 800ca4e:	2002      	movs	r0, #2
 800ca50:	4770      	bx	lr
 800ca52:	2000      	movs	r0, #0
 800ca54:	4770      	bx	lr
	...

0800ca58 <powf>:
 800ca58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ca5a:	ee10 1a10 	vmov	r1, s0
 800ca5e:	ee10 4a90 	vmov	r4, s1
 800ca62:	f5a1 0200 	sub.w	r2, r1, #8388608	@ 0x800000
 800ca66:	0063      	lsls	r3, r4, #1
 800ca68:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800ca6c:	eef0 7a40 	vmov.f32	s15, s0
 800ca70:	eeb0 7a60 	vmov.f32	s14, s1
 800ca74:	f103 30ff 	add.w	r0, r3, #4294967295
 800ca78:	f06f 7280 	mvn.w	r2, #16777216	@ 0x1000000
 800ca7c:	d252      	bcs.n	800cb24 <powf+0xcc>
 800ca7e:	4290      	cmp	r0, r2
 800ca80:	d258      	bcs.n	800cb34 <powf+0xdc>
 800ca82:	2000      	movs	r0, #0
 800ca84:	f101 4340 	add.w	r3, r1, #3221225472	@ 0xc0000000
 800ca88:	f503 034d 	add.w	r3, r3, #13434880	@ 0xcd0000
 800ca8c:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 800ca90:	0ddb      	lsrs	r3, r3, #23
 800ca92:	4a9d      	ldr	r2, [pc, #628]	@ (800cd08 <powf+0x2b0>)
 800ca94:	eebf 2b00 	vmov.f64	d2, #240	@ 0xbf800000 -1.0
 800ca98:	05db      	lsls	r3, r3, #23
 800ca9a:	1ac9      	subs	r1, r1, r3
 800ca9c:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 800caa0:	ee07 1a90 	vmov	s15, r1
 800caa4:	ed94 5b02 	vldr	d5, [r4, #8]
 800caa8:	ed94 4b00 	vldr	d4, [r4]
 800caac:	15db      	asrs	r3, r3, #23
 800caae:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800cab2:	ee07 3a90 	vmov	s15, r3
 800cab6:	eea4 2b06 	vfma.f64	d2, d4, d6
 800caba:	ed92 1b42 	vldr	d1, [r2, #264]	@ 0x108
 800cabe:	ee22 4b02 	vmul.f64	d4, d2, d2
 800cac2:	ee24 0b04 	vmul.f64	d0, d4, d4
 800cac6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800caca:	ee36 6b05 	vadd.f64	d6, d6, d5
 800cace:	ed92 5b40 	vldr	d5, [r2, #256]	@ 0x100
 800cad2:	ed92 3b44 	vldr	d3, [r2, #272]	@ 0x110
 800cad6:	eea2 1b05 	vfma.f64	d1, d2, d5
 800cada:	ed92 5b46 	vldr	d5, [r2, #280]	@ 0x118
 800cade:	eea2 5b03 	vfma.f64	d5, d2, d3
 800cae2:	ed92 3b48 	vldr	d3, [r2, #288]	@ 0x120
 800cae6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800caea:	eea2 6b03 	vfma.f64	d6, d2, d3
 800caee:	eea4 6b05 	vfma.f64	d6, d4, d5
 800caf2:	eea1 6b00 	vfma.f64	d6, d1, d0
 800caf6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cafa:	ee17 3a90 	vmov	r3, s15
 800cafe:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 800cb02:	f248 03bf 	movw	r3, #32959	@ 0x80bf
 800cb06:	429a      	cmp	r2, r3
 800cb08:	f0c0 80b8 	bcc.w	800cc7c <powf+0x224>
 800cb0c:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 800cce8 <powf+0x290>
 800cb10:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800cb14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb18:	dd79      	ble.n	800cc0e <powf+0x1b6>
 800cb1a:	b003      	add	sp, #12
 800cb1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cb20:	f000 b920 	b.w	800cd64 <__math_oflowf>
 800cb24:	4290      	cmp	r0, r2
 800cb26:	d330      	bcc.n	800cb8a <powf+0x132>
 800cb28:	b12b      	cbz	r3, 800cb36 <powf+0xde>
 800cb2a:	0049      	lsls	r1, r1, #1
 800cb2c:	f1b1 4f7f 	cmp.w	r1, #4278190080	@ 0xff000000
 800cb30:	d808      	bhi.n	800cb44 <powf+0xec>
 800cb32:	e015      	b.n	800cb60 <powf+0x108>
 800cb34:	b953      	cbnz	r3, 800cb4c <powf+0xf4>
 800cb36:	f481 0180 	eor.w	r1, r1, #4194304	@ 0x400000
 800cb3a:	0049      	lsls	r1, r1, #1
 800cb3c:	f511 0f00 	cmn.w	r1, #8388608	@ 0x800000
 800cb40:	f240 80ca 	bls.w	800ccd8 <powf+0x280>
 800cb44:	ee37 0a87 	vadd.f32	s0, s15, s14
 800cb48:	b003      	add	sp, #12
 800cb4a:	bd30      	pop	{r4, r5, pc}
 800cb4c:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 800cb50:	d105      	bne.n	800cb5e <powf+0x106>
 800cb52:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800cb56:	0064      	lsls	r4, r4, #1
 800cb58:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800cb5c:	e7f0      	b.n	800cb40 <powf+0xe8>
 800cb5e:	0049      	lsls	r1, r1, #1
 800cb60:	f1b3 4f7f 	cmp.w	r3, #4278190080	@ 0xff000000
 800cb64:	d1ee      	bne.n	800cb44 <powf+0xec>
 800cb66:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 800cb6a:	f000 80b5 	beq.w	800ccd8 <powf+0x280>
 800cb6e:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 800cb72:	ea6f 0404 	mvn.w	r4, r4
 800cb76:	bf34      	ite	cc
 800cb78:	2100      	movcc	r1, #0
 800cb7a:	2101      	movcs	r1, #1
 800cb7c:	0fe4      	lsrs	r4, r4, #31
 800cb7e:	42a1      	cmp	r1, r4
 800cb80:	f040 80ad 	bne.w	800ccde <powf+0x286>
 800cb84:	ee27 0a07 	vmul.f32	s0, s14, s14
 800cb88:	e7de      	b.n	800cb48 <powf+0xf0>
 800cb8a:	004d      	lsls	r5, r1, #1
 800cb8c:	1e6b      	subs	r3, r5, #1
 800cb8e:	4293      	cmp	r3, r2
 800cb90:	d31b      	bcc.n	800cbca <powf+0x172>
 800cb92:	2900      	cmp	r1, #0
 800cb94:	ee20 0a00 	vmul.f32	s0, s0, s0
 800cb98:	da0e      	bge.n	800cbb8 <powf+0x160>
 800cb9a:	4620      	mov	r0, r4
 800cb9c:	f7ff ff44 	bl	800ca28 <checkint>
 800cba0:	2801      	cmp	r0, #1
 800cba2:	d109      	bne.n	800cbb8 <powf+0x160>
 800cba4:	eeb1 0a40 	vneg.f32	s0, s0
 800cba8:	b945      	cbnz	r5, 800cbbc <powf+0x164>
 800cbaa:	2c00      	cmp	r4, #0
 800cbac:	dacc      	bge.n	800cb48 <powf+0xf0>
 800cbae:	b003      	add	sp, #12
 800cbb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cbb4:	f000 b8dc 	b.w	800cd70 <__math_divzerof>
 800cbb8:	2000      	movs	r0, #0
 800cbba:	e7f5      	b.n	800cba8 <powf+0x150>
 800cbbc:	2c00      	cmp	r4, #0
 800cbbe:	dac3      	bge.n	800cb48 <powf+0xf0>
 800cbc0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800cbc4:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800cbc8:	e7be      	b.n	800cb48 <powf+0xf0>
 800cbca:	2900      	cmp	r1, #0
 800cbcc:	da1d      	bge.n	800cc0a <powf+0x1b2>
 800cbce:	4620      	mov	r0, r4
 800cbd0:	f7ff ff2a 	bl	800ca28 <checkint>
 800cbd4:	b920      	cbnz	r0, 800cbe0 <powf+0x188>
 800cbd6:	b003      	add	sp, #12
 800cbd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cbdc:	f000 b8da 	b.w	800cd94 <__math_invalidf>
 800cbe0:	1e43      	subs	r3, r0, #1
 800cbe2:	4258      	negs	r0, r3
 800cbe4:	4158      	adcs	r0, r3
 800cbe6:	0400      	lsls	r0, r0, #16
 800cbe8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800cbec:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800cbf0:	f4bf af48 	bcs.w	800ca84 <powf+0x2c>
 800cbf4:	eddf 6a45 	vldr	s13, [pc, #276]	@ 800cd0c <powf+0x2b4>
 800cbf8:	ee27 0aa6 	vmul.f32	s0, s15, s13
 800cbfc:	ee10 3a10 	vmov	r3, s0
 800cc00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cc04:	f1a3 6138 	sub.w	r1, r3, #192937984	@ 0xb800000
 800cc08:	e73c      	b.n	800ca84 <powf+0x2c>
 800cc0a:	2000      	movs	r0, #0
 800cc0c:	e7ee      	b.n	800cbec <powf+0x194>
 800cc0e:	ed9f 6b38 	vldr	d6, [pc, #224]	@ 800ccf0 <powf+0x298>
 800cc12:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800cc16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc1a:	dd0f      	ble.n	800cc3c <powf+0x1e4>
 800cc1c:	f04f 534c 	mov.w	r3, #855638016	@ 0x33000000
 800cc20:	b1c0      	cbz	r0, 800cc54 <powf+0x1fc>
 800cc22:	9301      	str	r3, [sp, #4]
 800cc24:	eddd 6a01 	vldr	s13, [sp, #4]
 800cc28:	eebf 6a00 	vmov.f32	s12, #240	@ 0xbf800000 -1.0
 800cc2c:	ee76 6a66 	vsub.f32	s13, s12, s13
 800cc30:	eef4 6a46 	vcmp.f32	s13, s12
 800cc34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc38:	f47f af6f 	bne.w	800cb1a <powf+0xc2>
 800cc3c:	ed9f 6b2e 	vldr	d6, [pc, #184]	@ 800ccf8 <powf+0x2a0>
 800cc40:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800cc44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc48:	d80c      	bhi.n	800cc64 <powf+0x20c>
 800cc4a:	b003      	add	sp, #12
 800cc4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cc50:	f000 b87c 	b.w	800cd4c <__math_uflowf>
 800cc54:	9300      	str	r3, [sp, #0]
 800cc56:	eddd 6a00 	vldr	s13, [sp]
 800cc5a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800cc5e:	ee76 6a86 	vadd.f32	s13, s13, s12
 800cc62:	e7e5      	b.n	800cc30 <powf+0x1d8>
 800cc64:	ed9f 6b26 	vldr	d6, [pc, #152]	@ 800cd00 <powf+0x2a8>
 800cc68:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800cc6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc70:	d504      	bpl.n	800cc7c <powf+0x224>
 800cc72:	b003      	add	sp, #12
 800cc74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cc78:	f000 b86e 	b.w	800cd58 <__math_may_uflowf>
 800cc7c:	4b24      	ldr	r3, [pc, #144]	@ (800cd10 <powf+0x2b8>)
 800cc7e:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800cc82:	ed93 5b40 	vldr	d5, [r3, #256]	@ 0x100
 800cc86:	ee37 6b05 	vadd.f64	d6, d7, d5
 800cc8a:	ee16 2a10 	vmov	r2, s12
 800cc8e:	ee36 6b45 	vsub.f64	d6, d6, d5
 800cc92:	f002 011f 	and.w	r1, r2, #31
 800cc96:	ee37 7b46 	vsub.f64	d7, d7, d6
 800cc9a:	ed93 5b42 	vldr	d5, [r3, #264]	@ 0x108
 800cc9e:	ee27 4b07 	vmul.f64	d4, d7, d7
 800cca2:	ed93 6b44 	vldr	d6, [r3, #272]	@ 0x110
 800cca6:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 800ccaa:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 800ccae:	eea7 6b05 	vfma.f64	d6, d7, d5
 800ccb2:	686d      	ldr	r5, [r5, #4]
 800ccb4:	ed93 5b46 	vldr	d5, [r3, #280]	@ 0x118
 800ccb8:	1880      	adds	r0, r0, r2
 800ccba:	2100      	movs	r1, #0
 800ccbc:	190a      	adds	r2, r1, r4
 800ccbe:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 800ccc2:	eea7 0b05 	vfma.f64	d0, d7, d5
 800ccc6:	ec43 2b17 	vmov	d7, r2, r3
 800ccca:	eea6 0b04 	vfma.f64	d0, d6, d4
 800ccce:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ccd2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800ccd6:	e737      	b.n	800cb48 <powf+0xf0>
 800ccd8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ccdc:	e734      	b.n	800cb48 <powf+0xf0>
 800ccde:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 800cd14 <powf+0x2bc>
 800cce2:	e731      	b.n	800cb48 <powf+0xf0>
 800cce4:	f3af 8000 	nop.w
 800cce8:	ffd1d571 	.word	0xffd1d571
 800ccec:	405fffff 	.word	0x405fffff
 800ccf0:	ffa3aae2 	.word	0xffa3aae2
 800ccf4:	405fffff 	.word	0x405fffff
 800ccf8:	00000000 	.word	0x00000000
 800ccfc:	c062c000 	.word	0xc062c000
 800cd00:	00000000 	.word	0x00000000
 800cd04:	c062a000 	.word	0xc062a000
 800cd08:	080aeae8 	.word	0x080aeae8
 800cd0c:	4b000000 	.word	0x4b000000
 800cd10:	080ae9a0 	.word	0x080ae9a0
 800cd14:	00000000 	.word	0x00000000

0800cd18 <with_errnof>:
 800cd18:	b510      	push	{r4, lr}
 800cd1a:	ed2d 8b02 	vpush	{d8}
 800cd1e:	eeb0 8a40 	vmov.f32	s16, s0
 800cd22:	4604      	mov	r4, r0
 800cd24:	f7ff f892 	bl	800be4c <__errno>
 800cd28:	eeb0 0a48 	vmov.f32	s0, s16
 800cd2c:	ecbd 8b02 	vpop	{d8}
 800cd30:	6004      	str	r4, [r0, #0]
 800cd32:	bd10      	pop	{r4, pc}

0800cd34 <xflowf>:
 800cd34:	b130      	cbz	r0, 800cd44 <xflowf+0x10>
 800cd36:	eef1 7a40 	vneg.f32	s15, s0
 800cd3a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800cd3e:	2022      	movs	r0, #34	@ 0x22
 800cd40:	f7ff bfea 	b.w	800cd18 <with_errnof>
 800cd44:	eef0 7a40 	vmov.f32	s15, s0
 800cd48:	e7f7      	b.n	800cd3a <xflowf+0x6>
	...

0800cd4c <__math_uflowf>:
 800cd4c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800cd54 <__math_uflowf+0x8>
 800cd50:	f7ff bff0 	b.w	800cd34 <xflowf>
 800cd54:	10000000 	.word	0x10000000

0800cd58 <__math_may_uflowf>:
 800cd58:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800cd60 <__math_may_uflowf+0x8>
 800cd5c:	f7ff bfea 	b.w	800cd34 <xflowf>
 800cd60:	1a200000 	.word	0x1a200000

0800cd64 <__math_oflowf>:
 800cd64:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800cd6c <__math_oflowf+0x8>
 800cd68:	f7ff bfe4 	b.w	800cd34 <xflowf>
 800cd6c:	70000000 	.word	0x70000000

0800cd70 <__math_divzerof>:
 800cd70:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 800cd90 <__math_divzerof+0x20>
 800cd74:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800cd78:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800cd7c:	2800      	cmp	r0, #0
 800cd7e:	f04f 0022 	mov.w	r0, #34	@ 0x22
 800cd82:	fe47 7a87 	vseleq.f32	s15, s15, s14
 800cd86:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800cd8a:	f7ff bfc5 	b.w	800cd18 <with_errnof>
 800cd8e:	bf00      	nop
 800cd90:	00000000 	.word	0x00000000

0800cd94 <__math_invalidf>:
 800cd94:	eef0 7a40 	vmov.f32	s15, s0
 800cd98:	ee30 7a40 	vsub.f32	s14, s0, s0
 800cd9c:	eef4 7a67 	vcmp.f32	s15, s15
 800cda0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cda4:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800cda8:	d602      	bvs.n	800cdb0 <__math_invalidf+0x1c>
 800cdaa:	2021      	movs	r0, #33	@ 0x21
 800cdac:	f7ff bfb4 	b.w	800cd18 <with_errnof>
 800cdb0:	4770      	bx	lr
	...

0800cdb4 <_close>:
 800cdb4:	4b02      	ldr	r3, [pc, #8]	@ (800cdc0 <_close+0xc>)
 800cdb6:	2258      	movs	r2, #88	@ 0x58
 800cdb8:	601a      	str	r2, [r3, #0]
 800cdba:	f04f 30ff 	mov.w	r0, #4294967295
 800cdbe:	4770      	bx	lr
 800cdc0:	2404b994 	.word	0x2404b994

0800cdc4 <_fstat>:
 800cdc4:	4b02      	ldr	r3, [pc, #8]	@ (800cdd0 <_fstat+0xc>)
 800cdc6:	2258      	movs	r2, #88	@ 0x58
 800cdc8:	601a      	str	r2, [r3, #0]
 800cdca:	f04f 30ff 	mov.w	r0, #4294967295
 800cdce:	4770      	bx	lr
 800cdd0:	2404b994 	.word	0x2404b994

0800cdd4 <_isatty>:
 800cdd4:	4b02      	ldr	r3, [pc, #8]	@ (800cde0 <_isatty+0xc>)
 800cdd6:	2258      	movs	r2, #88	@ 0x58
 800cdd8:	601a      	str	r2, [r3, #0]
 800cdda:	2000      	movs	r0, #0
 800cddc:	4770      	bx	lr
 800cdde:	bf00      	nop
 800cde0:	2404b994 	.word	0x2404b994

0800cde4 <_lseek>:
 800cde4:	4b02      	ldr	r3, [pc, #8]	@ (800cdf0 <_lseek+0xc>)
 800cde6:	2258      	movs	r2, #88	@ 0x58
 800cde8:	601a      	str	r2, [r3, #0]
 800cdea:	f04f 30ff 	mov.w	r0, #4294967295
 800cdee:	4770      	bx	lr
 800cdf0:	2404b994 	.word	0x2404b994

0800cdf4 <_read>:
 800cdf4:	4b02      	ldr	r3, [pc, #8]	@ (800ce00 <_read+0xc>)
 800cdf6:	2258      	movs	r2, #88	@ 0x58
 800cdf8:	601a      	str	r2, [r3, #0]
 800cdfa:	f04f 30ff 	mov.w	r0, #4294967295
 800cdfe:	4770      	bx	lr
 800ce00:	2404b994 	.word	0x2404b994

0800ce04 <_write>:
 800ce04:	4b02      	ldr	r3, [pc, #8]	@ (800ce10 <_write+0xc>)
 800ce06:	2258      	movs	r2, #88	@ 0x58
 800ce08:	601a      	str	r2, [r3, #0]
 800ce0a:	f04f 30ff 	mov.w	r0, #4294967295
 800ce0e:	4770      	bx	lr
 800ce10:	2404b994 	.word	0x2404b994

0800ce14 <_init>:
 800ce14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce16:	bf00      	nop
 800ce18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce1a:	bc08      	pop	{r3}
 800ce1c:	469e      	mov	lr, r3
 800ce1e:	4770      	bx	lr

0800ce20 <_fini>:
 800ce20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce22:	bf00      	nop
 800ce24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce26:	bc08      	pop	{r3}
 800ce28:	469e      	mov	lr, r3
 800ce2a:	4770      	bx	lr
