
CardClassifier.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e970  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0005ecc8  0800ec20  0800ec20  0000fc20  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0806d8e8  0806d8e8  0006e8e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0806d8f0  0806d8f0  0006e8f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0806d8f4  0806d8f4  0006e8f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000d18  24000000  0806d8f8  0006f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000685d0  24000d20  0806e610  0006fd20  2**5
                  ALLOC
  8 ._user_heap_stack 00001000  20000000  20000000  00070000  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0006fd18  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022b04  00000000  00000000  0006fd46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000046ba  00000000  00000000  0009284a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 0000ac04  00000000  00000000  00096f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001090  00000000  00000000  000a1b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000f7a  00000000  00000000  000a2b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00039dab  00000000  00000000  000a3b12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000238d6  00000000  00000000  000dd8bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016668f  00000000  00000000  00101193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000093  00000000  00000000  00267822  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003de0  00000000  00000000  002678b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000073  00000000  00000000  0026b698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000d20 	.word	0x24000d20
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ebf8 	.word	0x0800ebf8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000d24 	.word	0x24000d24
 80002dc:	0800ebf8 	.word	0x0800ebf8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b99e 	b.w	80006e4 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f83a 	bl	8000428 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__aeabi_f2lz>:
 80003c0:	ee07 0a90 	vmov	s15, r0
 80003c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80003c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003cc:	d401      	bmi.n	80003d2 <__aeabi_f2lz+0x12>
 80003ce:	f000 b80b 	b.w	80003e8 <__aeabi_f2ulz>
 80003d2:	eef1 7a67 	vneg.f32	s15, s15
 80003d6:	b508      	push	{r3, lr}
 80003d8:	ee17 0a90 	vmov	r0, s15
 80003dc:	f000 f804 	bl	80003e8 <__aeabi_f2ulz>
 80003e0:	4240      	negs	r0, r0
 80003e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003e6:	bd08      	pop	{r3, pc}

080003e8 <__aeabi_f2ulz>:
 80003e8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000418 <__aeabi_f2ulz+0x30>
 80003ec:	ee07 0a10 	vmov	s14, r0
 80003f0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000420 <__aeabi_f2ulz+0x38>
 80003f4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80003f8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80003fc:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 8000400:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000404:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000408:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800040c:	ee16 1a10 	vmov	r1, s12
 8000410:	ee17 0a90 	vmov	r0, s15
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	00000000 	.word	0x00000000
 800041c:	3df00000 	.word	0x3df00000
 8000420:	00000000 	.word	0x00000000
 8000424:	41f00000 	.word	0x41f00000

08000428 <__udivmoddi4>:
 8000428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800042c:	9d08      	ldr	r5, [sp, #32]
 800042e:	460c      	mov	r4, r1
 8000430:	2b00      	cmp	r3, #0
 8000432:	d14e      	bne.n	80004d2 <__udivmoddi4+0xaa>
 8000434:	4694      	mov	ip, r2
 8000436:	458c      	cmp	ip, r1
 8000438:	4686      	mov	lr, r0
 800043a:	fab2 f282 	clz	r2, r2
 800043e:	d962      	bls.n	8000506 <__udivmoddi4+0xde>
 8000440:	b14a      	cbz	r2, 8000456 <__udivmoddi4+0x2e>
 8000442:	f1c2 0320 	rsb	r3, r2, #32
 8000446:	4091      	lsls	r1, r2
 8000448:	fa20 f303 	lsr.w	r3, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	4319      	orrs	r1, r3
 8000452:	fa00 fe02 	lsl.w	lr, r0, r2
 8000456:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045a:	fa1f f68c 	uxth.w	r6, ip
 800045e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000462:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000466:	fb07 1114 	mls	r1, r7, r4, r1
 800046a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046e:	fb04 f106 	mul.w	r1, r4, r6
 8000472:	4299      	cmp	r1, r3
 8000474:	d90a      	bls.n	800048c <__udivmoddi4+0x64>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f104 30ff 	add.w	r0, r4, #4294967295
 800047e:	f080 8112 	bcs.w	80006a6 <__udivmoddi4+0x27e>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 810f 	bls.w	80006a6 <__udivmoddi4+0x27e>
 8000488:	3c02      	subs	r4, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a59      	subs	r1, r3, r1
 800048e:	fa1f f38e 	uxth.w	r3, lr
 8000492:	fbb1 f0f7 	udiv	r0, r1, r7
 8000496:	fb07 1110 	mls	r1, r7, r0, r1
 800049a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049e:	fb00 f606 	mul.w	r6, r0, r6
 80004a2:	429e      	cmp	r6, r3
 80004a4:	d90a      	bls.n	80004bc <__udivmoddi4+0x94>
 80004a6:	eb1c 0303 	adds.w	r3, ip, r3
 80004aa:	f100 31ff 	add.w	r1, r0, #4294967295
 80004ae:	f080 80fc 	bcs.w	80006aa <__udivmoddi4+0x282>
 80004b2:	429e      	cmp	r6, r3
 80004b4:	f240 80f9 	bls.w	80006aa <__udivmoddi4+0x282>
 80004b8:	4463      	add	r3, ip
 80004ba:	3802      	subs	r0, #2
 80004bc:	1b9b      	subs	r3, r3, r6
 80004be:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80004c2:	2100      	movs	r1, #0
 80004c4:	b11d      	cbz	r5, 80004ce <__udivmoddi4+0xa6>
 80004c6:	40d3      	lsrs	r3, r2
 80004c8:	2200      	movs	r2, #0
 80004ca:	e9c5 3200 	strd	r3, r2, [r5]
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d905      	bls.n	80004e2 <__udivmoddi4+0xba>
 80004d6:	b10d      	cbz	r5, 80004dc <__udivmoddi4+0xb4>
 80004d8:	e9c5 0100 	strd	r0, r1, [r5]
 80004dc:	2100      	movs	r1, #0
 80004de:	4608      	mov	r0, r1
 80004e0:	e7f5      	b.n	80004ce <__udivmoddi4+0xa6>
 80004e2:	fab3 f183 	clz	r1, r3
 80004e6:	2900      	cmp	r1, #0
 80004e8:	d146      	bne.n	8000578 <__udivmoddi4+0x150>
 80004ea:	42a3      	cmp	r3, r4
 80004ec:	d302      	bcc.n	80004f4 <__udivmoddi4+0xcc>
 80004ee:	4290      	cmp	r0, r2
 80004f0:	f0c0 80f0 	bcc.w	80006d4 <__udivmoddi4+0x2ac>
 80004f4:	1a86      	subs	r6, r0, r2
 80004f6:	eb64 0303 	sbc.w	r3, r4, r3
 80004fa:	2001      	movs	r0, #1
 80004fc:	2d00      	cmp	r5, #0
 80004fe:	d0e6      	beq.n	80004ce <__udivmoddi4+0xa6>
 8000500:	e9c5 6300 	strd	r6, r3, [r5]
 8000504:	e7e3      	b.n	80004ce <__udivmoddi4+0xa6>
 8000506:	2a00      	cmp	r2, #0
 8000508:	f040 8090 	bne.w	800062c <__udivmoddi4+0x204>
 800050c:	eba1 040c 	sub.w	r4, r1, ip
 8000510:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000514:	fa1f f78c 	uxth.w	r7, ip
 8000518:	2101      	movs	r1, #1
 800051a:	fbb4 f6f8 	udiv	r6, r4, r8
 800051e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000522:	fb08 4416 	mls	r4, r8, r6, r4
 8000526:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800052a:	fb07 f006 	mul.w	r0, r7, r6
 800052e:	4298      	cmp	r0, r3
 8000530:	d908      	bls.n	8000544 <__udivmoddi4+0x11c>
 8000532:	eb1c 0303 	adds.w	r3, ip, r3
 8000536:	f106 34ff 	add.w	r4, r6, #4294967295
 800053a:	d202      	bcs.n	8000542 <__udivmoddi4+0x11a>
 800053c:	4298      	cmp	r0, r3
 800053e:	f200 80cd 	bhi.w	80006dc <__udivmoddi4+0x2b4>
 8000542:	4626      	mov	r6, r4
 8000544:	1a1c      	subs	r4, r3, r0
 8000546:	fa1f f38e 	uxth.w	r3, lr
 800054a:	fbb4 f0f8 	udiv	r0, r4, r8
 800054e:	fb08 4410 	mls	r4, r8, r0, r4
 8000552:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000556:	fb00 f707 	mul.w	r7, r0, r7
 800055a:	429f      	cmp	r7, r3
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x148>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 34ff 	add.w	r4, r0, #4294967295
 8000566:	d202      	bcs.n	800056e <__udivmoddi4+0x146>
 8000568:	429f      	cmp	r7, r3
 800056a:	f200 80b0 	bhi.w	80006ce <__udivmoddi4+0x2a6>
 800056e:	4620      	mov	r0, r4
 8000570:	1bdb      	subs	r3, r3, r7
 8000572:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000576:	e7a5      	b.n	80004c4 <__udivmoddi4+0x9c>
 8000578:	f1c1 0620 	rsb	r6, r1, #32
 800057c:	408b      	lsls	r3, r1
 800057e:	fa22 f706 	lsr.w	r7, r2, r6
 8000582:	431f      	orrs	r7, r3
 8000584:	fa20 fc06 	lsr.w	ip, r0, r6
 8000588:	fa04 f301 	lsl.w	r3, r4, r1
 800058c:	ea43 030c 	orr.w	r3, r3, ip
 8000590:	40f4      	lsrs	r4, r6
 8000592:	fa00 f801 	lsl.w	r8, r0, r1
 8000596:	0c38      	lsrs	r0, r7, #16
 8000598:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800059c:	fbb4 fef0 	udiv	lr, r4, r0
 80005a0:	fa1f fc87 	uxth.w	ip, r7
 80005a4:	fb00 441e 	mls	r4, r0, lr, r4
 80005a8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005ac:	fb0e f90c 	mul.w	r9, lr, ip
 80005b0:	45a1      	cmp	r9, r4
 80005b2:	fa02 f201 	lsl.w	r2, r2, r1
 80005b6:	d90a      	bls.n	80005ce <__udivmoddi4+0x1a6>
 80005b8:	193c      	adds	r4, r7, r4
 80005ba:	f10e 3aff 	add.w	sl, lr, #4294967295
 80005be:	f080 8084 	bcs.w	80006ca <__udivmoddi4+0x2a2>
 80005c2:	45a1      	cmp	r9, r4
 80005c4:	f240 8081 	bls.w	80006ca <__udivmoddi4+0x2a2>
 80005c8:	f1ae 0e02 	sub.w	lr, lr, #2
 80005cc:	443c      	add	r4, r7
 80005ce:	eba4 0409 	sub.w	r4, r4, r9
 80005d2:	fa1f f983 	uxth.w	r9, r3
 80005d6:	fbb4 f3f0 	udiv	r3, r4, r0
 80005da:	fb00 4413 	mls	r4, r0, r3, r4
 80005de:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005e2:	fb03 fc0c 	mul.w	ip, r3, ip
 80005e6:	45a4      	cmp	ip, r4
 80005e8:	d907      	bls.n	80005fa <__udivmoddi4+0x1d2>
 80005ea:	193c      	adds	r4, r7, r4
 80005ec:	f103 30ff 	add.w	r0, r3, #4294967295
 80005f0:	d267      	bcs.n	80006c2 <__udivmoddi4+0x29a>
 80005f2:	45a4      	cmp	ip, r4
 80005f4:	d965      	bls.n	80006c2 <__udivmoddi4+0x29a>
 80005f6:	3b02      	subs	r3, #2
 80005f8:	443c      	add	r4, r7
 80005fa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005fe:	fba0 9302 	umull	r9, r3, r0, r2
 8000602:	eba4 040c 	sub.w	r4, r4, ip
 8000606:	429c      	cmp	r4, r3
 8000608:	46ce      	mov	lr, r9
 800060a:	469c      	mov	ip, r3
 800060c:	d351      	bcc.n	80006b2 <__udivmoddi4+0x28a>
 800060e:	d04e      	beq.n	80006ae <__udivmoddi4+0x286>
 8000610:	b155      	cbz	r5, 8000628 <__udivmoddi4+0x200>
 8000612:	ebb8 030e 	subs.w	r3, r8, lr
 8000616:	eb64 040c 	sbc.w	r4, r4, ip
 800061a:	fa04 f606 	lsl.w	r6, r4, r6
 800061e:	40cb      	lsrs	r3, r1
 8000620:	431e      	orrs	r6, r3
 8000622:	40cc      	lsrs	r4, r1
 8000624:	e9c5 6400 	strd	r6, r4, [r5]
 8000628:	2100      	movs	r1, #0
 800062a:	e750      	b.n	80004ce <__udivmoddi4+0xa6>
 800062c:	f1c2 0320 	rsb	r3, r2, #32
 8000630:	fa20 f103 	lsr.w	r1, r0, r3
 8000634:	fa0c fc02 	lsl.w	ip, ip, r2
 8000638:	fa24 f303 	lsr.w	r3, r4, r3
 800063c:	4094      	lsls	r4, r2
 800063e:	430c      	orrs	r4, r1
 8000640:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000644:	fa00 fe02 	lsl.w	lr, r0, r2
 8000648:	fa1f f78c 	uxth.w	r7, ip
 800064c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000650:	fb08 3110 	mls	r1, r8, r0, r3
 8000654:	0c23      	lsrs	r3, r4, #16
 8000656:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800065a:	fb00 f107 	mul.w	r1, r0, r7
 800065e:	4299      	cmp	r1, r3
 8000660:	d908      	bls.n	8000674 <__udivmoddi4+0x24c>
 8000662:	eb1c 0303 	adds.w	r3, ip, r3
 8000666:	f100 36ff 	add.w	r6, r0, #4294967295
 800066a:	d22c      	bcs.n	80006c6 <__udivmoddi4+0x29e>
 800066c:	4299      	cmp	r1, r3
 800066e:	d92a      	bls.n	80006c6 <__udivmoddi4+0x29e>
 8000670:	3802      	subs	r0, #2
 8000672:	4463      	add	r3, ip
 8000674:	1a5b      	subs	r3, r3, r1
 8000676:	b2a4      	uxth	r4, r4
 8000678:	fbb3 f1f8 	udiv	r1, r3, r8
 800067c:	fb08 3311 	mls	r3, r8, r1, r3
 8000680:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000684:	fb01 f307 	mul.w	r3, r1, r7
 8000688:	42a3      	cmp	r3, r4
 800068a:	d908      	bls.n	800069e <__udivmoddi4+0x276>
 800068c:	eb1c 0404 	adds.w	r4, ip, r4
 8000690:	f101 36ff 	add.w	r6, r1, #4294967295
 8000694:	d213      	bcs.n	80006be <__udivmoddi4+0x296>
 8000696:	42a3      	cmp	r3, r4
 8000698:	d911      	bls.n	80006be <__udivmoddi4+0x296>
 800069a:	3902      	subs	r1, #2
 800069c:	4464      	add	r4, ip
 800069e:	1ae4      	subs	r4, r4, r3
 80006a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80006a4:	e739      	b.n	800051a <__udivmoddi4+0xf2>
 80006a6:	4604      	mov	r4, r0
 80006a8:	e6f0      	b.n	800048c <__udivmoddi4+0x64>
 80006aa:	4608      	mov	r0, r1
 80006ac:	e706      	b.n	80004bc <__udivmoddi4+0x94>
 80006ae:	45c8      	cmp	r8, r9
 80006b0:	d2ae      	bcs.n	8000610 <__udivmoddi4+0x1e8>
 80006b2:	ebb9 0e02 	subs.w	lr, r9, r2
 80006b6:	eb63 0c07 	sbc.w	ip, r3, r7
 80006ba:	3801      	subs	r0, #1
 80006bc:	e7a8      	b.n	8000610 <__udivmoddi4+0x1e8>
 80006be:	4631      	mov	r1, r6
 80006c0:	e7ed      	b.n	800069e <__udivmoddi4+0x276>
 80006c2:	4603      	mov	r3, r0
 80006c4:	e799      	b.n	80005fa <__udivmoddi4+0x1d2>
 80006c6:	4630      	mov	r0, r6
 80006c8:	e7d4      	b.n	8000674 <__udivmoddi4+0x24c>
 80006ca:	46d6      	mov	lr, sl
 80006cc:	e77f      	b.n	80005ce <__udivmoddi4+0x1a6>
 80006ce:	4463      	add	r3, ip
 80006d0:	3802      	subs	r0, #2
 80006d2:	e74d      	b.n	8000570 <__udivmoddi4+0x148>
 80006d4:	4606      	mov	r6, r0
 80006d6:	4623      	mov	r3, r4
 80006d8:	4608      	mov	r0, r1
 80006da:	e70f      	b.n	80004fc <__udivmoddi4+0xd4>
 80006dc:	3e02      	subs	r6, #2
 80006de:	4463      	add	r3, ip
 80006e0:	e730      	b.n	8000544 <__udivmoddi4+0x11c>
 80006e2:	bf00      	nop

080006e4 <__aeabi_idiv0>:
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop

080006e8 <ov7670_write>:
//DCMI_HandleTypeDef *sp_hdcmi;
//DMA_HandleTypeDef  *sp_hdma_dcmi;
I2C_HandleTypeDef  *sp_hi2c;
uint32_t    s_destAddressForContiuousMode;
uint32_t ov7670_write(uint8_t regAddr, uint8_t data)
{
 80006e8:	b530      	push	{r4, r5, lr}
 80006ea:	b09d      	sub	sp, #116	@ 0x74
  uint16_t SLAVE_ADDR = 0x42;
  HAL_StatusTypeDef ret;
  uint8_t buffer[2] = {regAddr, data};
  ret = HAL_I2C_Master_Transmit(sp_hi2c, 0x42, &buffer, 2, HAL_MAX_DELAY);
 80006ec:	f04f 33ff 	mov.w	r3, #4294967295
  char temp[100];
  sprintf(temp, "Write Status: %d\r\n", ret);
  HAL_UART_Transmit(&huart4,temp,strlen(temp),10);
 80006f0:	4d13      	ldr	r5, [pc, #76]	@ (8000740 <ov7670_write+0x58>)
  uint8_t buffer[2] = {regAddr, data};
 80006f2:	f88d 0008 	strb.w	r0, [sp, #8]
  ret = HAL_I2C_Master_Transmit(sp_hi2c, 0x42, &buffer, 2, HAL_MAX_DELAY);
 80006f6:	aa02      	add	r2, sp, #8
 80006f8:	4812      	ldr	r0, [pc, #72]	@ (8000744 <ov7670_write+0x5c>)
 80006fa:	9300      	str	r3, [sp, #0]
 80006fc:	2302      	movs	r3, #2
  uint8_t buffer[2] = {regAddr, data};
 80006fe:	f88d 1009 	strb.w	r1, [sp, #9]
  ret = HAL_I2C_Master_Transmit(sp_hi2c, 0x42, &buffer, 2, HAL_MAX_DELAY);
 8000702:	2142      	movs	r1, #66	@ 0x42
 8000704:	6800      	ldr	r0, [r0, #0]
 8000706:	f002 ffe5 	bl	80036d4 <HAL_I2C_Master_Transmit>
  sprintf(temp, "Write Status: %d\r\n", ret);
 800070a:	490f      	ldr	r1, [pc, #60]	@ (8000748 <ov7670_write+0x60>)
 800070c:	4602      	mov	r2, r0
  ret = HAL_I2C_Master_Transmit(sp_hi2c, 0x42, &buffer, 2, HAL_MAX_DELAY);
 800070e:	4604      	mov	r4, r0
  sprintf(temp, "Write Status: %d\r\n", ret);
 8000710:	a803      	add	r0, sp, #12
 8000712:	f00c f877 	bl	800c804 <siprintf>
  HAL_UART_Transmit(&huart4,temp,strlen(temp),10);
 8000716:	a803      	add	r0, sp, #12
 8000718:	f7ff fe32 	bl	8000380 <strlen>
 800071c:	a903      	add	r1, sp, #12
 800071e:	b282      	uxth	r2, r0
 8000720:	230a      	movs	r3, #10
 8000722:	4628      	mov	r0, r5
 8000724:	f005 f82f 	bl	8005786 <HAL_UART_Transmit>
//  sprintf(temp, "Data: %x is now written into address: %x\r\n",data, regAddr);
  HAL_UART_Transmit(&huart4,temp,strlen(temp),10);
 8000728:	a803      	add	r0, sp, #12
 800072a:	f7ff fe29 	bl	8000380 <strlen>
 800072e:	230a      	movs	r3, #10
 8000730:	b282      	uxth	r2, r0
 8000732:	a903      	add	r1, sp, #12
 8000734:	4628      	mov	r0, r5
 8000736:	f005 f826 	bl	8005786 <HAL_UART_Transmit>
  return ret;
}
 800073a:	4620      	mov	r0, r4
 800073c:	b01d      	add	sp, #116	@ 0x74
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	24008d48 	.word	0x24008d48
 8000744:	24000d40 	.word	0x24000d40
 8000748:	0800ec30 	.word	0x0800ec30

0800074c <ov7670_read>:

uint32_t ov7670_read(uint8_t regAddr, uint8_t *data)
{
 800074c:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret;
  uint16_t SLAVE_ADDR = 0x42;
  ret = HAL_I2C_Master_Transmit(sp_hi2c, 0x43, &regAddr, 1, HAL_MAX_DELAY);
 800074e:	4c23      	ldr	r4, [pc, #140]	@ (80007dc <ov7670_read+0x90>)
{
 8000750:	b09f      	sub	sp, #124	@ 0x7c
  ret = HAL_I2C_Master_Transmit(sp_hi2c, 0x43, &regAddr, 1, HAL_MAX_DELAY);
 8000752:	f04f 37ff 	mov.w	r7, #4294967295
{
 8000756:	460d      	mov	r5, r1
  ret = HAL_I2C_Master_Transmit(sp_hi2c, 0x43, &regAddr, 1, HAL_MAX_DELAY);
 8000758:	2301      	movs	r3, #1
 800075a:	f10d 020f 	add.w	r2, sp, #15
{
 800075e:	f88d 000f 	strb.w	r0, [sp, #15]
  ret = HAL_I2C_Master_Transmit(sp_hi2c, 0x43, &regAddr, 1, HAL_MAX_DELAY);
 8000762:	2143      	movs	r1, #67	@ 0x43
 8000764:	9700      	str	r7, [sp, #0]
 8000766:	6820      	ldr	r0, [r4, #0]
 8000768:	f002 ffb4 	bl	80036d4 <HAL_I2C_Master_Transmit>
  char buffer [100];
  sprintf(buffer, "Read_Transmit Status: %d\r\n", ret);
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 800076c:	4e1c      	ldr	r6, [pc, #112]	@ (80007e0 <ov7670_read+0x94>)
  ret = HAL_I2C_Master_Transmit(sp_hi2c, 0x43, &regAddr, 1, HAL_MAX_DELAY);
 800076e:	4602      	mov	r2, r0
  sprintf(buffer, "Read_Transmit Status: %d\r\n", ret);
 8000770:	491c      	ldr	r1, [pc, #112]	@ (80007e4 <ov7670_read+0x98>)
 8000772:	a805      	add	r0, sp, #20
 8000774:	f00c f846 	bl	800c804 <siprintf>
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8000778:	a805      	add	r0, sp, #20
 800077a:	f7ff fe01 	bl	8000380 <strlen>
 800077e:	a905      	add	r1, sp, #20
 8000780:	b282      	uxth	r2, r0
 8000782:	230a      	movs	r3, #10
 8000784:	4630      	mov	r0, r6
 8000786:	f004 fffe 	bl	8005786 <HAL_UART_Transmit>
  ret = HAL_I2C_Master_Receive(sp_hi2c, 0x43, data, 1, HAL_MAX_DELAY);
 800078a:	2301      	movs	r3, #1
 800078c:	462a      	mov	r2, r5
 800078e:	9700      	str	r7, [sp, #0]
 8000790:	2143      	movs	r1, #67	@ 0x43
 8000792:	6820      	ldr	r0, [r4, #0]
 8000794:	f003 f84a 	bl	800382c <HAL_I2C_Master_Receive>
  sprintf(buffer, "Read_Receive Status: %d\r\n", ret);
 8000798:	4913      	ldr	r1, [pc, #76]	@ (80007e8 <ov7670_read+0x9c>)
 800079a:	4602      	mov	r2, r0
  ret = HAL_I2C_Master_Receive(sp_hi2c, 0x43, data, 1, HAL_MAX_DELAY);
 800079c:	4604      	mov	r4, r0
  sprintf(buffer, "Read_Receive Status: %d\r\n", ret);
 800079e:	a805      	add	r0, sp, #20
 80007a0:	f00c f830 	bl	800c804 <siprintf>
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 80007a4:	a805      	add	r0, sp, #20
 80007a6:	f7ff fdeb 	bl	8000380 <strlen>
 80007aa:	a905      	add	r1, sp, #20
 80007ac:	b282      	uxth	r2, r0
 80007ae:	230a      	movs	r3, #10
 80007b0:	4630      	mov	r0, r6
 80007b2:	f004 ffe8 	bl	8005786 <HAL_UART_Transmit>
  sprintf(buffer, "Address: %x; Data: %x\r\n", regAddr, *data);
 80007b6:	782b      	ldrb	r3, [r5, #0]
 80007b8:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80007bc:	a805      	add	r0, sp, #20
 80007be:	490b      	ldr	r1, [pc, #44]	@ (80007ec <ov7670_read+0xa0>)
 80007c0:	f00c f820 	bl	800c804 <siprintf>
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 80007c4:	a805      	add	r0, sp, #20
 80007c6:	f7ff fddb 	bl	8000380 <strlen>
 80007ca:	230a      	movs	r3, #10
 80007cc:	b282      	uxth	r2, r0
 80007ce:	a905      	add	r1, sp, #20
 80007d0:	4630      	mov	r0, r6
 80007d2:	f004 ffd8 	bl	8005786 <HAL_UART_Transmit>
  return ret;
}
 80007d6:	4620      	mov	r0, r4
 80007d8:	b01f      	add	sp, #124	@ 0x7c
 80007da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007dc:	24000d40 	.word	0x24000d40
 80007e0:	24008d48 	.word	0x24008d48
 80007e4:	0800ec43 	.word	0x0800ec43
 80007e8:	0800ec5e 	.word	0x0800ec5e
 80007ec:	0800ec78 	.word	0x0800ec78

080007f0 <ov7670_init>:

uint32_t ov7670_init(I2C_HandleTypeDef *p_hi2c)
{
 80007f0:	b510      	push	{r4, lr}
//  sp_hdcmi     = p_hdcmi;
//  sp_hdma_dcmi = p_hdma_dcmi;
  sp_hi2c      = p_hi2c;
 80007f2:	4b1a      	ldr	r3, [pc, #104]	@ (800085c <ov7670_init+0x6c>)
{
 80007f4:	b09a      	sub	sp, #104	@ 0x68
 // s_destAddressForContiuousMode = 0;

  HAL_GPIO_WritePin(CAM_RST_GPIO_Port, CAM_RST_Pin, GPIO_PIN_RESET);
 80007f6:	4c1a      	ldr	r4, [pc, #104]	@ (8000860 <ov7670_init+0x70>)
 80007f8:	2200      	movs	r2, #0
  sp_hi2c      = p_hi2c;
 80007fa:	6018      	str	r0, [r3, #0]
  HAL_GPIO_WritePin(CAM_RST_GPIO_Port, CAM_RST_Pin, GPIO_PIN_RESET);
 80007fc:	2120      	movs	r1, #32
 80007fe:	4620      	mov	r0, r4
 8000800:	f002 fd7e 	bl	8003300 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000804:	2064      	movs	r0, #100	@ 0x64
 8000806:	f000 fea5 	bl	8001554 <HAL_Delay>
  HAL_GPIO_WritePin(CAM_RST_GPIO_Port, CAM_RST_Pin, GPIO_PIN_SET);
 800080a:	2201      	movs	r2, #1
 800080c:	2120      	movs	r1, #32
 800080e:	4620      	mov	r0, r4
 8000810:	f002 fd76 	bl	8003300 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000814:	2064      	movs	r0, #100	@ 0x64
 8000816:	f000 fe9d 	bl	8001554 <HAL_Delay>
  char temp[100];
  sprintf(temp, "Initializing OV7670...\r\n");
 800081a:	4912      	ldr	r1, [pc, #72]	@ (8000864 <ov7670_init+0x74>)
 800081c:	a801      	add	r0, sp, #4
 800081e:	f00c f90c 	bl	800ca3a <strcpy>
  ov7670_write(0x12, 0x80);  // RESET
 8000822:	2180      	movs	r1, #128	@ 0x80
 8000824:	2012      	movs	r0, #18
 8000826:	f7ff ff5f 	bl	80006e8 <ov7670_write>
  HAL_Delay(100);
 800082a:	2064      	movs	r0, #100	@ 0x64
 800082c:	f000 fe92 	bl	8001554 <HAL_Delay>
  HAL_UART_Transmit(&huart4,temp,strlen(temp),10);
 8000830:	a801      	add	r0, sp, #4
 8000832:	f7ff fda5 	bl	8000380 <strlen>
 8000836:	230a      	movs	r3, #10
 8000838:	b282      	uxth	r2, r0
 800083a:	a901      	add	r1, sp, #4
 800083c:	480a      	ldr	r0, [pc, #40]	@ (8000868 <ov7670_init+0x78>)
 800083e:	f004 ffa2 	bl	8005786 <HAL_UART_Transmit>
  HAL_Delay(100);
 8000842:	2064      	movs	r0, #100	@ 0x64
 8000844:	f000 fe86 	bl	8001554 <HAL_Delay>
  uint8_t buffer[4];
  ov7670_read(0x0F, buffer);
 8000848:	4669      	mov	r1, sp
 800084a:	200f      	movs	r0, #15
 800084c:	f7ff ff7e 	bl	800074c <ov7670_read>
  HAL_Delay(100);
 8000850:	2064      	movs	r0, #100	@ 0x64
 8000852:	f000 fe7f 	bl	8001554 <HAL_Delay>


  return 1;
}
 8000856:	2001      	movs	r0, #1
 8000858:	b01a      	add	sp, #104	@ 0x68
 800085a:	bd10      	pop	{r4, pc}
 800085c:	24000d40 	.word	0x24000d40
 8000860:	58020800 	.word	0x58020800
 8000864:	0800ec90 	.word	0x0800ec90
 8000868:	24008d48 	.word	0x24008d48

0800086c <ov7670_stopCap>:

//DCMI Data Transfer
static uint32_t s_dstAddress;

uint32_t ov7670_stopCap()
{
 800086c:	b508      	push	{r3, lr}
  char buffer [100];
  HAL_StatusTypeDef ret;
  ret = HAL_DCMI_Stop(sp_hdcmi);
 800086e:	4b04      	ldr	r3, [pc, #16]	@ (8000880 <ov7670_stopCap+0x14>)
 8000870:	6818      	ldr	r0, [r3, #0]
 8000872:	f001 f841 	bl	80018f8 <HAL_DCMI_Stop>
  s_dstAddress = 0;
 8000876:	2000      	movs	r0, #0
 8000878:	4b02      	ldr	r3, [pc, #8]	@ (8000884 <ov7670_stopCap+0x18>)
 800087a:	6018      	str	r0, [r3, #0]
  return 0;
}
 800087c:	bd08      	pop	{r3, pc}
 800087e:	bf00      	nop
 8000880:	24000000 	.word	0x24000000
 8000884:	24000d3c 	.word	0x24000d3c

08000888 <ov7670_startCap>:

uint32_t ov7670_startCap(uint32_t destAddress)
{
 8000888:	b510      	push	{r4, lr}
 800088a:	b09a      	sub	sp, #104	@ 0x68
 800088c:	4604      	mov	r4, r0
  HAL_StatusTypeDef ret;
  ov7670_stopCap();
 800088e:	f7ff ffed 	bl	800086c <ov7670_stopCap>
  /* note: continuous mode automatically invokes DCMI, but DMA needs to be invoked manually */
  s_dstAddress = destAddress;
 8000892:	4b0f      	ldr	r3, [pc, #60]	@ (80008d0 <ov7670_startCap+0x48>)
  ret = HAL_DCMI_Start_DMA(sp_hdcmi,1, destAddress, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT / 2); //mode 1 for single frame
 8000894:	480f      	ldr	r0, [pc, #60]	@ (80008d4 <ov7670_startCap+0x4c>)
 8000896:	4622      	mov	r2, r4
 8000898:	2101      	movs	r1, #1
  s_dstAddress = destAddress;
 800089a:	601c      	str	r4, [r3, #0]
  ret = HAL_DCMI_Start_DMA(sp_hdcmi,1, destAddress, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT / 2); //mode 1 for single frame
 800089c:	6800      	ldr	r0, [r0, #0]
 800089e:	f44f 5346 	mov.w	r3, #12672	@ 0x3180
 80008a2:	f000 ffbd 	bl	8001820 <HAL_DCMI_Start_DMA>
 80008a6:	4604      	mov	r4, r0
  ov7670_stopCap();
 80008a8:	f7ff ffe0 	bl	800086c <ov7670_stopCap>
  char buffer [100];
  sprintf(buffer, "Return code: %d\r\n", ret);
 80008ac:	490a      	ldr	r1, [pc, #40]	@ (80008d8 <ov7670_startCap+0x50>)
 80008ae:	4622      	mov	r2, r4
 80008b0:	a801      	add	r0, sp, #4
 80008b2:	f00b ffa7 	bl	800c804 <siprintf>
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 80008b6:	a801      	add	r0, sp, #4
 80008b8:	f7ff fd62 	bl	8000380 <strlen>
 80008bc:	230a      	movs	r3, #10
 80008be:	b282      	uxth	r2, r0
 80008c0:	a901      	add	r1, sp, #4
 80008c2:	4806      	ldr	r0, [pc, #24]	@ (80008dc <ov7670_startCap+0x54>)
 80008c4:	f004 ff5f 	bl	8005786 <HAL_UART_Transmit>
  return 0;
}
 80008c8:	2000      	movs	r0, #0
 80008ca:	b01a      	add	sp, #104	@ 0x68
 80008cc:	bd10      	pop	{r4, pc}
 80008ce:	bf00      	nop
 80008d0:	24000d3c 	.word	0x24000d3c
 80008d4:	24000000 	.word	0x24000000
 80008d8:	0800eca9 	.word	0x0800eca9
 80008dc:	24008d48 	.word	0x24008d48

080008e0 <Resize_to_128>:

void Resize_to_128(uint32_t* inputImg, uint32_t* outputImg) {
 80008e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    float factor_y = 148.0 / 128.0;

    for (int i = 0; i < 128; i++) {
        for (int j = 0; j < 128; j+=2) { // Increment by 2 since each inputImg element handles 2 pixels
            int col = (int)(j * factor_x); // Calculate the column in the input image
            int row = (int)(i * factor_y); // Calculate the row in the input image
 80008e2:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000940 <Resize_to_128+0x60>
    for (int i = 0; i < 128; i++) {
 80008e6:	2500      	movs	r5, #0

            // Calculate the position in the input image
            // Considering that each uint32_t has two RGB565 pixels packed
            int inputIndex = (row * 172 + col) / 2;
 80008e8:	27ac      	movs	r7, #172	@ 0xac
            int col = (int)(j * factor_x); // Calculate the column in the input image
 80008ea:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8000944 <Resize_to_128+0x64>
            int row = (int)(i * factor_y); // Calculate the row in the input image
 80008ee:	ee07 5a90 	vmov	s15, r5
 80008f2:	01ee      	lsls	r6, r5, #7
        for (int j = 0; j < 128; j+=2) { // Increment by 2 since each inputImg element handles 2 pixels
 80008f4:	2400      	movs	r4, #0
            int row = (int)(i * factor_y); // Calculate the row in the input image
 80008f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000902:	ee17 2a90 	vmov	r2, s15
            int inputIndex = (row * 172 + col) / 2;
 8000906:	437a      	muls	r2, r7
            int col = (int)(j * factor_x); // Calculate the column in the input image
 8000908:	ee07 4a90 	vmov	s15, r4
 800090c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000910:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000914:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000918:	ee17 3a90 	vmov	r3, s15
            int inputIndex = (row * 172 + col) / 2;
 800091c:	4413      	add	r3, r2
 800091e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8000922:	105b      	asrs	r3, r3, #1

            uint32_t Pixel = inputImg[inputIndex];
 8000924:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
            // Place the processed pixels in the output image
            outputImg[(i * 128 + j) / 2] = Pixel;
 8000928:	19a3      	adds	r3, r4, r6
        for (int j = 0; j < 128; j+=2) { // Increment by 2 since each inputImg element handles 2 pixels
 800092a:	3402      	adds	r4, #2
            outputImg[(i * 128 + j) / 2] = Pixel;
 800092c:	105b      	asrs	r3, r3, #1
        for (int j = 0; j < 128; j+=2) { // Increment by 2 since each inputImg element handles 2 pixels
 800092e:	2c80      	cmp	r4, #128	@ 0x80
            outputImg[(i * 128 + j) / 2] = Pixel;
 8000930:	f841 c023 	str.w	ip, [r1, r3, lsl #2]
        for (int j = 0; j < 128; j+=2) { // Increment by 2 since each inputImg element handles 2 pixels
 8000934:	d1e8      	bne.n	8000908 <Resize_to_128+0x28>
    for (int i = 0; i < 128; i++) {
 8000936:	3501      	adds	r5, #1
 8000938:	2d80      	cmp	r5, #128	@ 0x80
 800093a:	d1d8      	bne.n	80008ee <Resize_to_128+0xe>
        }
    }
}
 800093c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800093e:	bf00      	nop
 8000940:	3f940000 	.word	0x3f940000
 8000944:	3fac0000 	.word	0x3fac0000

08000948 <HAL_DCMI_FrameEventCallback>:


void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
  if(s_dstAddress != 0) {
 8000948:	4b05      	ldr	r3, [pc, #20]	@ (8000960 <HAL_DCMI_FrameEventCallback+0x18>)
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	b132      	cbz	r2, 800095c <HAL_DCMI_FrameEventCallback+0x14>
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, s_dstAddress, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT / 2);
 800094e:	6801      	ldr	r1, [r0, #0]
 8000950:	f44f 5346 	mov.w	r3, #12672	@ 0x3180
 8000954:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8000956:	3128      	adds	r1, #40	@ 0x28
 8000958:	f001 bbba 	b.w	80020d0 <HAL_DMA_Start_IT>
  }
}
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	24000d3c 	.word	0x24000d3c

08000964 <lcd_send_cmd>:
#include "lcd.h"
#include "main.h"
I2C_HandleTypeDef  *lcd_sp_hi2c;
uint16_t SLAVE_ADDRESS_LCD = 0x4E;
void lcd_send_cmd (char cmd)
{
 8000964:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000966:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
	data_l = ((cmd<<4)&0xf0);
 800096a:	0100      	lsls	r0, r0, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
	data_t[1] = data_u|0x08;  //en=0, rs=0
	data_t[2] = data_l|0x0C;  //en=1, rs=0
	data_t[3] = data_l|0x08;  //en=0, rs=0
	uint16_t ret = HAL_I2C_Master_Transmit (lcd_sp_hi2c, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800096c:	490e      	ldr	r1, [pc, #56]	@ (80009a8 <lcd_send_cmd+0x44>)
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800096e:	f043 020c 	orr.w	r2, r3, #12
	data_l = ((cmd<<4)&0xf0);
 8000972:	b2c0      	uxtb	r0, r0
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000974:	f043 0308 	orr.w	r3, r3, #8
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000978:	f88d 200c 	strb.w	r2, [sp, #12]
	uint16_t ret = HAL_I2C_Master_Transmit (lcd_sp_hi2c, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800097c:	aa03      	add	r2, sp, #12
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800097e:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000982:	f040 030c 	orr.w	r3, r0, #12
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000986:	f040 0008 	orr.w	r0, r0, #8
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800098a:	f88d 300e 	strb.w	r3, [sp, #14]
	uint16_t ret = HAL_I2C_Master_Transmit (lcd_sp_hi2c, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800098e:	2364      	movs	r3, #100	@ 0x64
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000990:	f88d 000f 	strb.w	r0, [sp, #15]
	uint16_t ret = HAL_I2C_Master_Transmit (lcd_sp_hi2c, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000994:	4805      	ldr	r0, [pc, #20]	@ (80009ac <lcd_send_cmd+0x48>)
 8000996:	9300      	str	r3, [sp, #0]
 8000998:	2304      	movs	r3, #4
 800099a:	8809      	ldrh	r1, [r1, #0]
 800099c:	6800      	ldr	r0, [r0, #0]
 800099e:	f002 fe99 	bl	80036d4 <HAL_I2C_Master_Transmit>
}
 80009a2:	b005      	add	sp, #20
 80009a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80009a8:	24000004 	.word	0x24000004
 80009ac:	24000d44 	.word	0x24000d44

080009b0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80009b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80009b2:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
	data_l = ((data<<4)&0xf0);
 80009b6:	0100      	lsls	r0, r0, #4
	data_t[0] = data_u|0x0D;  //en=1, rs=1
	data_t[1] = data_u|0x09;  //en=0, rs=1
	data_t[2] = data_l|0x0D;  //en=1, rs=1
	data_t[3] = data_l|0x09;  //en=0, rs=1
	HAL_I2C_Master_Transmit (lcd_sp_hi2c, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80009b8:	490e      	ldr	r1, [pc, #56]	@ (80009f4 <lcd_send_data+0x44>)
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 80009ba:	f043 020d 	orr.w	r2, r3, #13
	data_l = ((data<<4)&0xf0);
 80009be:	b2c0      	uxtb	r0, r0
	data_t[1] = data_u|0x09;  //en=0, rs=1
 80009c0:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 80009c4:	f88d 200c 	strb.w	r2, [sp, #12]
	HAL_I2C_Master_Transmit (lcd_sp_hi2c, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80009c8:	aa03      	add	r2, sp, #12
	data_t[1] = data_u|0x09;  //en=0, rs=1
 80009ca:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 80009ce:	f040 030d 	orr.w	r3, r0, #13
	data_t[3] = data_l|0x09;  //en=0, rs=1
 80009d2:	f040 0009 	orr.w	r0, r0, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 80009d6:	f88d 300e 	strb.w	r3, [sp, #14]
	HAL_I2C_Master_Transmit (lcd_sp_hi2c, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80009da:	2364      	movs	r3, #100	@ 0x64
	data_t[3] = data_l|0x09;  //en=0, rs=1
 80009dc:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (lcd_sp_hi2c, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80009e0:	4805      	ldr	r0, [pc, #20]	@ (80009f8 <lcd_send_data+0x48>)
 80009e2:	9300      	str	r3, [sp, #0]
 80009e4:	2304      	movs	r3, #4
 80009e6:	8809      	ldrh	r1, [r1, #0]
 80009e8:	6800      	ldr	r0, [r0, #0]
 80009ea:	f002 fe73 	bl	80036d4 <HAL_I2C_Master_Transmit>
}
 80009ee:	b005      	add	sp, #20
 80009f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80009f4:	24000004 	.word	0x24000004
 80009f8:	24000d44 	.word	0x24000d44

080009fc <lcd_send_string>:
void lcd_send_string (char *str)
{
 80009fc:	b510      	push	{r4, lr}
 80009fe:	1e44      	subs	r4, r0, #1
	while (*str) {
 8000a00:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8000a04:	b903      	cbnz	r3, 8000a08 <lcd_send_string+0xc>
		HAL_Delay(10);
		lcd_send_data (*str++);
	}
}
 8000a06:	bd10      	pop	{r4, pc}
		HAL_Delay(10);
 8000a08:	200a      	movs	r0, #10
 8000a0a:	f000 fda3 	bl	8001554 <HAL_Delay>
		lcd_send_data (*str++);
 8000a0e:	7820      	ldrb	r0, [r4, #0]
 8000a10:	f7ff ffce 	bl	80009b0 <lcd_send_data>
 8000a14:	e7f4      	b.n	8000a00 <lcd_send_string+0x4>
	...

08000a18 <lcd_init>:

void lcd_init (I2C_HandleTypeDef* p_hi2c)
{
 8000a18:	b508      	push	{r3, lr}
	lcd_sp_hi2c = p_hi2c;
 8000a1a:	4b20      	ldr	r3, [pc, #128]	@ (8000a9c <lcd_init+0x84>)
 8000a1c:	6018      	str	r0, [r3, #0]
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000a1e:	2032      	movs	r0, #50	@ 0x32
 8000a20:	f000 fd98 	bl	8001554 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000a24:	2030      	movs	r0, #48	@ 0x30
 8000a26:	f7ff ff9d 	bl	8000964 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000a2a:	2005      	movs	r0, #5
 8000a2c:	f000 fd92 	bl	8001554 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000a30:	2030      	movs	r0, #48	@ 0x30
 8000a32:	f7ff ff97 	bl	8000964 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000a36:	2001      	movs	r0, #1
 8000a38:	f000 fd8c 	bl	8001554 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000a3c:	2030      	movs	r0, #48	@ 0x30
 8000a3e:	f7ff ff91 	bl	8000964 <lcd_send_cmd>
	HAL_Delay(10);
 8000a42:	200a      	movs	r0, #10
 8000a44:	f000 fd86 	bl	8001554 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000a48:	2020      	movs	r0, #32
 8000a4a:	f7ff ff8b 	bl	8000964 <lcd_send_cmd>
	HAL_Delay(10);
 8000a4e:	200a      	movs	r0, #10
 8000a50:	f000 fd80 	bl	8001554 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000a54:	2028      	movs	r0, #40	@ 0x28
 8000a56:	f7ff ff85 	bl	8000964 <lcd_send_cmd>
	HAL_Delay(1);
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	f000 fd7a 	bl	8001554 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000a60:	2008      	movs	r0, #8
 8000a62:	f7ff ff7f 	bl	8000964 <lcd_send_cmd>
	HAL_Delay(1);
 8000a66:	2001      	movs	r0, #1
 8000a68:	f000 fd74 	bl	8001554 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	f7ff ff79 	bl	8000964 <lcd_send_cmd>
	HAL_Delay(1);
 8000a72:	2001      	movs	r0, #1
 8000a74:	f000 fd6e 	bl	8001554 <HAL_Delay>
	HAL_Delay(1);
 8000a78:	2001      	movs	r0, #1
 8000a7a:	f000 fd6b 	bl	8001554 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000a7e:	2006      	movs	r0, #6
 8000a80:	f7ff ff70 	bl	8000964 <lcd_send_cmd>
	HAL_Delay(1);
 8000a84:	2001      	movs	r0, #1
 8000a86:	f000 fd65 	bl	8001554 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000a8a:	200c      	movs	r0, #12
 8000a8c:	f7ff ff6a 	bl	8000964 <lcd_send_cmd>
	lcd_send_string("");
 8000a90:	4803      	ldr	r0, [pc, #12]	@ (8000aa0 <lcd_init+0x88>)
}
 8000a92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lcd_send_string("");
 8000a96:	f7ff bfb1 	b.w	80009fc <lcd_send_string>
 8000a9a:	bf00      	nop
 8000a9c:	24000d44 	.word	0x24000d44
 8000aa0:	0800ed89 	.word	0x0800ed89

08000aa4 <lcd_clear>:

void lcd_clear() {
 8000aa4:	b508      	push	{r3, lr}
	HAL_Delay(500);
 8000aa6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000aaa:	f000 fd53 	bl	8001554 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000aae:	2001      	movs	r0, #1
 8000ab0:	f7ff ff58 	bl	8000964 <lcd_send_cmd>
	HAL_Delay(1);
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	f000 fd4d 	bl	8001554 <HAL_Delay>
	lcd_send_string("");
 8000aba:	4804      	ldr	r0, [pc, #16]	@ (8000acc <lcd_clear+0x28>)
 8000abc:	f7ff ff9e 	bl	80009fc <lcd_send_string>
	HAL_Delay(500);
 8000ac0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
}
 8000ac4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(500);
 8000ac8:	f000 bd44 	b.w	8001554 <HAL_Delay>
 8000acc:	0800ed89 	.word	0x0800ed89

08000ad0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad0:	b530      	push	{r4, r5, lr}
 8000ad2:	b09d      	sub	sp, #116	@ 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ad4:	224c      	movs	r2, #76	@ 0x4c
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	a809      	add	r0, sp, #36	@ 0x24
 8000ada:	f00b ff10 	bl	800c8fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ade:	2220      	movs	r2, #32
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	a801      	add	r0, sp, #4
 8000ae4:	f00b ff0b 	bl	800c8fe <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ae8:	2002      	movs	r0, #2
 8000aea:	f002 ff83 	bl	80039f4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000aee:	2300      	movs	r3, #0
 8000af0:	9300      	str	r3, [sp, #0]
 8000af2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b6c <SystemClock_Config+0x9c>)
 8000af4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000af6:	f022 0201 	bic.w	r2, r2, #1
 8000afa:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000afe:	4a1c      	ldr	r2, [pc, #112]	@ (8000b70 <SystemClock_Config+0xa0>)
 8000b00:	f003 0301 	and.w	r3, r3, #1
 8000b04:	9300      	str	r3, [sp, #0]
 8000b06:	6993      	ldr	r3, [r2, #24]
 8000b08:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b10:	6193      	str	r3, [r2, #24]
 8000b12:	6993      	ldr	r3, [r2, #24]
 8000b14:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b18:	9300      	str	r3, [sp, #0]
 8000b1a:	9b00      	ldr	r3, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b1c:	6993      	ldr	r3, [r2, #24]
 8000b1e:	049b      	lsls	r3, r3, #18
 8000b20:	d5fc      	bpl.n	8000b1c <SystemClock_Config+0x4c>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b22:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b24:	2401      	movs	r4, #1
 8000b26:	2540      	movs	r5, #64	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b28:	a809      	add	r0, sp, #36	@ 0x24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b2a:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b2c:	2300      	movs	r3, #0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b2e:	e9cd 450c 	strd	r4, r5, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b32:	9312      	str	r3, [sp, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b34:	f002 ff82 	bl	8003a3c <HAL_RCC_OscConfig>
 8000b38:	b108      	cbz	r0, 8000b3e <SystemClock_Config+0x6e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b3a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <SystemClock_Config+0x6c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b3e:	233f      	movs	r3, #63	@ 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b40:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b42:	e9cd 3001 	strd	r3, r0, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b46:	e9cd 0003 	strd	r0, r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b4a:	e9cd 0505 	strd	r0, r5, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b4e:	e9cd 0007 	strd	r0, r0, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b52:	a801      	add	r0, sp, #4
 8000b54:	f003 fb0e 	bl	8004174 <HAL_RCC_ClockConfig>
 8000b58:	4601      	mov	r1, r0
 8000b5a:	b108      	cbz	r0, 8000b60 <SystemClock_Config+0x90>
 8000b5c:	b672      	cpsid	i
  while (1)
 8000b5e:	e7fe      	b.n	8000b5e <SystemClock_Config+0x8e>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_3);
 8000b60:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000b64:	f003 fa16 	bl	8003f94 <HAL_RCC_MCOConfig>
}
 8000b68:	b01d      	add	sp, #116	@ 0x74
 8000b6a:	bd30      	pop	{r4, r5, pc}
 8000b6c:	58000400 	.word	0x58000400
 8000b70:	58024800 	.word	0x58024800

08000b74 <main>:
{
 8000b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b76:	f5ad 4d46 	sub.w	sp, sp, #50688	@ 0xc600
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b7a:	4d9f      	ldr	r5, [pc, #636]	@ (8000df8 <main+0x284>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7e:	2601      	movs	r6, #1
{
 8000b80:	b0bb      	sub	sp, #236	@ 0xec
  GPIO_InitStruct.Pin = CAM_RST_Pin;
 8000b82:	2720      	movs	r7, #32
  HAL_Init();
 8000b84:	f000 fca6 	bl	80014d4 <HAL_Init>
  SystemClock_Config();
 8000b88:	f7ff ffa2 	bl	8000ad0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	2214      	movs	r2, #20
 8000b8e:	2100      	movs	r1, #0
 8000b90:	a83a      	add	r0, sp, #232	@ 0xe8
 8000b92:	f00b feb4 	bl	800c8fe <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b96:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000b9a:	aa02      	add	r2, sp, #8
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8000b9c:	2104      	movs	r1, #4
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b9e:	f043 0310 	orr.w	r3, r3, #16
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8000ba2:	4896      	ldr	r0, [pc, #600]	@ (8000dfc <main+0x288>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ba4:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000ba8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000bac:	f003 0310 	and.w	r3, r3, #16
 8000bb0:	6013      	str	r3, [r2, #0]
 8000bb2:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bb4:	aa03      	add	r2, sp, #12
 8000bb6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000bba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bbe:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000bc2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bca:	6013      	str	r3, [r2, #0]
 8000bcc:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	aa04      	add	r2, sp, #16
 8000bd0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000bdc:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000be0:	f003 0301 	and.w	r3, r3, #1
 8000be4:	6013      	str	r3, [r2, #0]
 8000be6:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be8:	aa05      	add	r2, sp, #20
 8000bea:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000bee:	f043 0304 	orr.w	r3, r3, #4
 8000bf2:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000bf6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000bfa:	f003 0304 	and.w	r3, r3, #4
 8000bfe:	6013      	str	r3, [r2, #0]
 8000c00:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	aa06      	add	r2, sp, #24
 8000c04:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000c08:	f043 0302 	orr.w	r3, r3, #2
 8000c0c:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000c10:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000c14:	f003 0302 	and.w	r3, r3, #2
 8000c18:	6013      	str	r3, [r2, #0]
 8000c1a:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c1c:	aa07      	add	r2, sp, #28
 8000c1e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000c22:	f043 0308 	orr.w	r3, r3, #8
 8000c26:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000c2a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000c2e:	f003 0308 	and.w	r3, r3, #8
 8000c32:	6013      	str	r3, [r2, #0]
 8000c34:	6813      	ldr	r3, [r2, #0]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	f002 fb62 	bl	8003300 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CAM_RST_GPIO_Port, CAM_RST_Pin, GPIO_PIN_RESET);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2120      	movs	r1, #32
 8000c40:	486f      	ldr	r0, [pc, #444]	@ (8000e00 <main+0x28c>)
 8000c42:	f002 fb5d 	bl	8003300 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PWDN_GPIO_Port, PWDN_Pin, GPIO_PIN_SET);
 8000c46:	2201      	movs	r2, #1
 8000c48:	486e      	ldr	r0, [pc, #440]	@ (8000e04 <main+0x290>)
 8000c4a:	4611      	mov	r1, r2
 8000c4c:	f002 fb58 	bl	8003300 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, CAPTURE_Pin|LED_Pin, GPIO_PIN_RESET);
 8000c50:	2200      	movs	r2, #0
 8000c52:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8000c56:	486c      	ldr	r0, [pc, #432]	@ (8000e08 <main+0x294>)
 8000c58:	f002 fb52 	bl	8003300 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5c:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c5e:	a93a      	add	r1, sp, #232	@ 0xe8
 8000c60:	4866      	ldr	r0, [pc, #408]	@ (8000dfc <main+0x288>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c62:	e9cd 363a 	strd	r3, r6, [sp, #232]	@ 0xe8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c66:	e9cd 443c 	strd	r4, r4, [sp, #240]	@ 0xf0
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c6a:	f002 fa61 	bl	8003130 <HAL_GPIO_Init>
  HAL_GPIO_Init(CAM_RST_GPIO_Port, &GPIO_InitStruct);
 8000c6e:	a93a      	add	r1, sp, #232	@ 0xe8
 8000c70:	4863      	ldr	r0, [pc, #396]	@ (8000e00 <main+0x28c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c72:	e9cd 763a 	strd	r7, r6, [sp, #232]	@ 0xe8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c76:	e9cd 443c 	strd	r4, r4, [sp, #240]	@ 0xf0
  HAL_GPIO_Init(CAM_RST_GPIO_Port, &GPIO_InitStruct);
 8000c7a:	f002 fa59 	bl	8003130 <HAL_GPIO_Init>
  HAL_GPIO_Init(PWDN_GPIO_Port, &GPIO_InitStruct);
 8000c7e:	a93a      	add	r1, sp, #232	@ 0xe8
 8000c80:	4860      	ldr	r0, [pc, #384]	@ (8000e04 <main+0x290>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c82:	e9cd 663a 	strd	r6, r6, [sp, #232]	@ 0xe8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	e9cd 443c 	strd	r4, r4, [sp, #240]	@ 0xf0
  HAL_GPIO_Init(PWDN_GPIO_Port, &GPIO_InitStruct);
 8000c8a:	f002 fa51 	bl	8003130 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CAPTURE_Pin|LED_Pin;
 8000c8e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c92:	a93a      	add	r1, sp, #232	@ 0xe8
 8000c94:	485c      	ldr	r0, [pc, #368]	@ (8000e08 <main+0x294>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c96:	e9cd 363a 	strd	r3, r6, [sp, #232]	@ 0xe8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	e9cd 443c 	strd	r4, r4, [sp, #240]	@ 0xf0
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c9e:	f002 fa47 	bl	8003130 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	f44f 7180 	mov.w	r1, #256	@ 0x100
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca8:	4858      	ldr	r0, [pc, #352]	@ (8000e0c <main+0x298>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000caa:	943e      	str	r4, [sp, #248]	@ 0xf8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	e9cd 133a 	strd	r1, r3, [sp, #232]	@ 0xe8
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb0:	a93a      	add	r1, sp, #232	@ 0xe8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb2:	e9cd 443c 	strd	r4, r4, [sp, #240]	@ 0xf0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb6:	f002 fa3b 	bl	8003130 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cba:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
 8000cbe:	aa01      	add	r2, sp, #4
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000cc0:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cc2:	4333      	orrs	r3, r6
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000cc4:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cc6:	f8c5 30d8 	str.w	r3, [r5, #216]	@ 0xd8
 8000cca:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
 8000cce:	4033      	ands	r3, r6
 8000cd0:	6013      	str	r3, [r2, #0]
 8000cd2:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000cd4:	4622      	mov	r2, r4
 8000cd6:	f000 fc67 	bl	80015a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000cda:	200b      	movs	r0, #11
 8000cdc:	f000 fc96 	bl	800160c <HAL_NVIC_EnableIRQ>
  hdcmi.Instance = DCMI;
 8000ce0:	484b      	ldr	r0, [pc, #300]	@ (8000e10 <main+0x29c>)
 8000ce2:	4b4c      	ldr	r3, [pc, #304]	@ (8000e14 <main+0x2a0>)
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000ce4:	6087      	str	r7, [r0, #8]
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000ce6:	6304      	str	r4, [r0, #48]	@ 0x30
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000ce8:	e9c0 3400 	strd	r3, r4, [r0]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000cec:	2380      	movs	r3, #128	@ 0x80
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000cee:	e9c0 4405 	strd	r4, r4, [r0, #20]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000cf2:	e9c0 3403 	strd	r3, r4, [r0, #12]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000cf6:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000cfa:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000cfe:	f000 fd47 	bl	8001790 <HAL_DCMI_Init>
 8000d02:	b108      	cbz	r0, 8000d08 <main+0x194>
 8000d04:	b672      	cpsid	i
  while (1)
 8000d06:	e7fe      	b.n	8000d06 <main+0x192>
  hi2c1.Instance = I2C1;
 8000d08:	4c43      	ldr	r4, [pc, #268]	@ (8000e18 <main+0x2a4>)
  hi2c1.Init.Timing = 0x00707CBB;
 8000d0a:	4b44      	ldr	r3, [pc, #272]	@ (8000e1c <main+0x2a8>)
 8000d0c:	4d44      	ldr	r5, [pc, #272]	@ (8000e20 <main+0x2ac>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d0e:	6220      	str	r0, [r4, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d10:	e9c4 0602 	strd	r0, r6, [r4, #8]
  hi2c1.Init.OwnAddress2 = 0;
 8000d14:	e9c4 0004 	strd	r0, r0, [r4, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d18:	e9c4 0006 	strd	r0, r0, [r4, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d1c:	4620      	mov	r0, r4
  hi2c1.Init.Timing = 0x00707CBB;
 8000d1e:	e9c4 3500 	strd	r3, r5, [r4]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d22:	f002 fc81 	bl	8003628 <HAL_I2C_Init>
 8000d26:	4601      	mov	r1, r0
 8000d28:	b108      	cbz	r0, 8000d2e <main+0x1ba>
 8000d2a:	b672      	cpsid	i
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <main+0x1b8>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d2e:	4620      	mov	r0, r4
 8000d30:	f002 fe14 	bl	800395c <HAL_I2CEx_ConfigAnalogFilter>
 8000d34:	4601      	mov	r1, r0
 8000d36:	b108      	cbz	r0, 8000d3c <main+0x1c8>
 8000d38:	b672      	cpsid	i
  while (1)
 8000d3a:	e7fe      	b.n	8000d3a <main+0x1c6>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d3c:	4620      	mov	r0, r4
 8000d3e:	f002 fe33 	bl	80039a8 <HAL_I2CEx_ConfigDigitalFilter>
 8000d42:	b108      	cbz	r0, 8000d48 <main+0x1d4>
 8000d44:	b672      	cpsid	i
  while (1)
 8000d46:	e7fe      	b.n	8000d46 <main+0x1d2>
  hi2c2.Instance = I2C2;
 8000d48:	4c36      	ldr	r4, [pc, #216]	@ (8000e24 <main+0x2b0>)
 8000d4a:	4b37      	ldr	r3, [pc, #220]	@ (8000e28 <main+0x2b4>)
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d4c:	6220      	str	r0, [r4, #32]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d4e:	e9c4 0602 	strd	r0, r6, [r4, #8]
  hi2c2.Init.OwnAddress2 = 0;
 8000d52:	e9c4 0004 	strd	r0, r0, [r4, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d56:	e9c4 0006 	strd	r0, r0, [r4, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d5a:	4620      	mov	r0, r4
  hi2c2.Init.Timing = 0x00707CBB;
 8000d5c:	e9c4 3500 	strd	r3, r5, [r4]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d60:	f002 fc62 	bl	8003628 <HAL_I2C_Init>
 8000d64:	4601      	mov	r1, r0
 8000d66:	b108      	cbz	r0, 8000d6c <main+0x1f8>
 8000d68:	b672      	cpsid	i
  while (1)
 8000d6a:	e7fe      	b.n	8000d6a <main+0x1f6>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d6c:	4620      	mov	r0, r4
 8000d6e:	f002 fdf5 	bl	800395c <HAL_I2CEx_ConfigAnalogFilter>
 8000d72:	4601      	mov	r1, r0
 8000d74:	b108      	cbz	r0, 8000d7a <main+0x206>
 8000d76:	b672      	cpsid	i
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <main+0x204>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000d7a:	4620      	mov	r0, r4
 8000d7c:	f002 fe14 	bl	80039a8 <HAL_I2CEx_ConfigDigitalFilter>
 8000d80:	b108      	cbz	r0, 8000d86 <main+0x212>
 8000d82:	b672      	cpsid	i
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <main+0x210>
  huart4.Instance = UART4;
 8000d86:	4c29      	ldr	r4, [pc, #164]	@ (8000e2c <main+0x2b8>)
  huart4.Init.BaudRate = 115200;
 8000d88:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000d8c:	4a28      	ldr	r2, [pc, #160]	@ (8000e30 <main+0x2bc>)
  huart4.Init.Parity = UART_PARITY_NONE;
 8000d8e:	6120      	str	r0, [r4, #16]
  huart4.Init.BaudRate = 115200;
 8000d90:	e9c4 2300 	strd	r2, r3, [r4]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000d94:	230c      	movs	r3, #12
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000d96:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d9a:	e9c4 3005 	strd	r3, r0, [r4, #20]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d9e:	e9c4 0007 	strd	r0, r0, [r4, #28]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000da2:	e9c4 0009 	strd	r0, r0, [r4, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000da6:	4620      	mov	r0, r4
 8000da8:	f004 fd9d 	bl	80058e6 <HAL_UART_Init>
 8000dac:	4601      	mov	r1, r0
 8000dae:	b108      	cbz	r0, 8000db4 <main+0x240>
 8000db0:	b672      	cpsid	i
  while (1)
 8000db2:	e7fe      	b.n	8000db2 <main+0x23e>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000db4:	4620      	mov	r0, r4
 8000db6:	f004 fe04 	bl	80059c2 <HAL_UARTEx_SetTxFifoThreshold>
 8000dba:	4601      	mov	r1, r0
 8000dbc:	b108      	cbz	r0, 8000dc2 <main+0x24e>
 8000dbe:	b672      	cpsid	i
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <main+0x24c>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dc2:	4620      	mov	r0, r4
 8000dc4:	f004 fe1d 	bl	8005a02 <HAL_UARTEx_SetRxFifoThreshold>
 8000dc8:	b108      	cbz	r0, 8000dce <main+0x25a>
 8000dca:	b672      	cpsid	i
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <main+0x258>
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000dce:	4817      	ldr	r0, [pc, #92]	@ (8000e2c <main+0x2b8>)
 8000dd0:	f004 fddc 	bl	800598c <HAL_UARTEx_DisableFifoMode>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	b108      	cbz	r0, 8000ddc <main+0x268>
 8000dd8:	b672      	cpsid	i
  while (1)
 8000dda:	e7fe      	b.n	8000dda <main+0x266>
  hcrc.Instance = CRC;
 8000ddc:	4815      	ldr	r0, [pc, #84]	@ (8000e34 <main+0x2c0>)
 8000dde:	4a16      	ldr	r2, [pc, #88]	@ (8000e38 <main+0x2c4>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000de0:	8083      	strh	r3, [r0, #4]
  hcrc.Instance = CRC;
 8000de2:	6002      	str	r2, [r0, #0]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000de4:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000de8:	2301      	movs	r3, #1
 8000dea:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000dec:	f000 fc30 	bl	8001650 <HAL_CRC_Init>
 8000df0:	4604      	mov	r4, r0
 8000df2:	b318      	cbz	r0, 8000e3c <main+0x2c8>
 8000df4:	b672      	cpsid	i
  while (1)
 8000df6:	e7fe      	b.n	8000df6 <main+0x282>
 8000df8:	58024400 	.word	0x58024400
 8000dfc:	58021000 	.word	0x58021000
 8000e00:	58020800 	.word	0x58020800
 8000e04:	58020400 	.word	0x58020400
 8000e08:	58020c00 	.word	0x58020c00
 8000e0c:	58020000 	.word	0x58020000
 8000e10:	24008efc 	.word	0x24008efc
 8000e14:	48020000 	.word	0x48020000
 8000e18:	24008e30 	.word	0x24008e30
 8000e1c:	40005400 	.word	0x40005400
 8000e20:	00707cbb 	.word	0x00707cbb
 8000e24:	24008ddc 	.word	0x24008ddc
 8000e28:	40005800 	.word	0x40005800
 8000e2c:	24008d48 	.word	0x24008d48
 8000e30:	40004c00 	.word	0x40004c00
 8000e34:	24008f4c 	.word	0x24008f4c
 8000e38:	58024c00 	.word	0x58024c00
  MX_X_CUBE_AI_Init();
 8000e3c:	f004 ffc8 	bl	8005dd0 <MX_X_CUBE_AI_Init>
  lcd_init(&hi2c2);
 8000e40:	4847      	ldr	r0, [pc, #284]	@ (8000f60 <main+0x3ec>)
 8000e42:	f7ff fde9 	bl	8000a18 <lcd_init>
  lcd_clear();
 8000e46:	4d47      	ldr	r5, [pc, #284]	@ (8000f64 <main+0x3f0>)
 8000e48:	f7ff fe2c 	bl	8000aa4 <lcd_clear>
  lcd_send_string("Initializing...");
 8000e4c:	4846      	ldr	r0, [pc, #280]	@ (8000f68 <main+0x3f4>)
 8000e4e:	f7ff fdd5 	bl	80009fc <lcd_send_string>
  	sprintf(buffer, "index: %d, data: %x\r\n",i, imagedata128[i]);
 8000e52:	4f46      	ldr	r7, [pc, #280]	@ (8000f6c <main+0x3f8>)
  lcd_clear();
 8000e54:	f7ff fe26 	bl	8000aa4 <lcd_clear>
  lcd_send_string("81 loaded to x15");
 8000e58:	4845      	ldr	r0, [pc, #276]	@ (8000f70 <main+0x3fc>)
 8000e5a:	f7ff fdcf 	bl	80009fc <lcd_send_string>
  ov7670_init(&hi2c1);
 8000e5e:	4845      	ldr	r0, [pc, #276]	@ (8000f74 <main+0x400>)
 8000e60:	f7ff fcc6 	bl	80007f0 <ov7670_init>
  HAL_Delay(100);
 8000e64:	2064      	movs	r0, #100	@ 0x64
 8000e66:	f000 fb75 	bl	8001554 <HAL_Delay>
  ov7670_write(0x15,0x81);
 8000e6a:	2181      	movs	r1, #129	@ 0x81
 8000e6c:	2015      	movs	r0, #21
  	HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8000e6e:	4e42      	ldr	r6, [pc, #264]	@ (8000f78 <main+0x404>)
  ov7670_write(0x15,0x81);
 8000e70:	f7ff fc3a 	bl	80006e8 <ov7670_write>
  ov7670_read(0x15,data);
 8000e74:	a908      	add	r1, sp, #32
 8000e76:	2015      	movs	r0, #21
 8000e78:	f7ff fc68 	bl	800074c <ov7670_read>
  sprintf(buffer, "Addr:0x15; D:%x;", *data);
 8000e7c:	493f      	ldr	r1, [pc, #252]	@ (8000f7c <main+0x408>)
 8000e7e:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8000e82:	a821      	add	r0, sp, #132	@ 0x84
 8000e84:	ab08      	add	r3, sp, #32
 8000e86:	f00b fcbd 	bl	800c804 <siprintf>
  ov7670_init(&hi2c1);
 8000e8a:	483a      	ldr	r0, [pc, #232]	@ (8000f74 <main+0x400>)
 8000e8c:	f7ff fcb0 	bl	80007f0 <ov7670_init>
  ov7670_write(0x12,0x0C);
 8000e90:	210c      	movs	r1, #12
 8000e92:	2012      	movs	r0, #18
 8000e94:	f7ff fc28 	bl	80006e8 <ov7670_write>
  ov7670_write(0x40,0xD0); //Enable RGB
 8000e98:	21d0      	movs	r1, #208	@ 0xd0
 8000e9a:	2040      	movs	r0, #64	@ 0x40
 8000e9c:	f7ff fc24 	bl	80006e8 <ov7670_write>
  ov7670_write(0x13,0x20);// Enable banding filter
 8000ea0:	2120      	movs	r1, #32
 8000ea2:	2013      	movs	r0, #19
 8000ea4:	f7ff fc20 	bl	80006e8 <ov7670_write>
  ov7670_write(0x3B,0x12);// Banding filter settings
 8000ea8:	2112      	movs	r1, #18
 8000eaa:	203b      	movs	r0, #59	@ 0x3b
 8000eac:	f7ff fc1c 	bl	80006e8 <ov7670_write>
  ov7670_write(0x4f,0x80);
 8000eb0:	2180      	movs	r1, #128	@ 0x80
 8000eb2:	204f      	movs	r0, #79	@ 0x4f
 8000eb4:	f7ff fc18 	bl	80006e8 <ov7670_write>
  ov7670_write(0x50,0x80);
 8000eb8:	2180      	movs	r1, #128	@ 0x80
 8000eba:	2050      	movs	r0, #80	@ 0x50
 8000ebc:	f7ff fc14 	bl	80006e8 <ov7670_write>
  ov7670_write(0x51,0x00);
 8000ec0:	4621      	mov	r1, r4
 8000ec2:	2051      	movs	r0, #81	@ 0x51
 8000ec4:	f7ff fc10 	bl	80006e8 <ov7670_write>
  ov7670_write(0x52,0x22);
 8000ec8:	2122      	movs	r1, #34	@ 0x22
 8000eca:	2052      	movs	r0, #82	@ 0x52
 8000ecc:	f7ff fc0c 	bl	80006e8 <ov7670_write>
  ov7670_write(0x53,0x5E);
 8000ed0:	215e      	movs	r1, #94	@ 0x5e
 8000ed2:	2053      	movs	r0, #83	@ 0x53
 8000ed4:	f7ff fc08 	bl	80006e8 <ov7670_write>
  ov7670_write(0x54,0x80);
 8000ed8:	2180      	movs	r1, #128	@ 0x80
 8000eda:	2054      	movs	r0, #84	@ 0x54
 8000edc:	f7ff fc04 	bl	80006e8 <ov7670_write>
  ov7670_write(0x58,0x9E);
 8000ee0:	219e      	movs	r1, #158	@ 0x9e
 8000ee2:	2058      	movs	r0, #88	@ 0x58
 8000ee4:	f7ff fc00 	bl	80006e8 <ov7670_write>
  HAL_GPIO_TogglePin (GPIOD, GPIO_PIN_11);
 8000ee8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000eec:	4824      	ldr	r0, [pc, #144]	@ (8000f80 <main+0x40c>)
 8000eee:	f002 fa0c 	bl	800330a <HAL_GPIO_TogglePin>
    imagedata[i] = 0;
 8000ef2:	f44f 4246 	mov.w	r2, #50688	@ 0xc600
 8000ef6:	4621      	mov	r1, r4
 8000ef8:	a83a      	add	r0, sp, #232	@ 0xe8
 8000efa:	f00b fd00 	bl	800c8fe <memset>
  sprintf(buffer, "imagedata address: %x\r\n", imagedata); //24073924
 8000efe:	aa3a      	add	r2, sp, #232	@ 0xe8
 8000f00:	4920      	ldr	r1, [pc, #128]	@ (8000f84 <main+0x410>)
 8000f02:	a821      	add	r0, sp, #132	@ 0x84
 8000f04:	f00b fc7e 	bl	800c804 <siprintf>
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8000f08:	a821      	add	r0, sp, #132	@ 0x84
 8000f0a:	f7ff fa39 	bl	8000380 <strlen>
 8000f0e:	a921      	add	r1, sp, #132	@ 0x84
 8000f10:	b282      	uxth	r2, r0
 8000f12:	230a      	movs	r3, #10
 8000f14:	4818      	ldr	r0, [pc, #96]	@ (8000f78 <main+0x404>)
 8000f16:	f004 fc36 	bl	8005786 <HAL_UART_Transmit>
  imagedata[0] = 0xFF; // Check if index 0 properly overwritten
 8000f1a:	23ff      	movs	r3, #255	@ 0xff
  ov7670_startCap(imagedata);
 8000f1c:	a83a      	add	r0, sp, #232	@ 0xe8
  imagedata[0] = 0xFF; // Check if index 0 properly overwritten
 8000f1e:	933a      	str	r3, [sp, #232]	@ 0xe8
  ov7670_startCap(imagedata);
 8000f20:	f7ff fcb2 	bl	8000888 <ov7670_startCap>
  Resize_to_128(imagedata, imagedata128);
 8000f24:	490f      	ldr	r1, [pc, #60]	@ (8000f64 <main+0x3f0>)
 8000f26:	a83a      	add	r0, sp, #232	@ 0xe8
 8000f28:	f7ff fcda 	bl	80008e0 <Resize_to_128>
  	sprintf(buffer, "index: %d, data: %x\r\n",i, imagedata128[i]);
 8000f2c:	4622      	mov	r2, r4
 8000f2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f32:	4639      	mov	r1, r7
 8000f34:	a821      	add	r0, sp, #132	@ 0x84
 8000f36:	f00b fc65 	bl	800c804 <siprintf>
  	HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8000f3a:	a821      	add	r0, sp, #132	@ 0x84
 8000f3c:	f7ff fa20 	bl	8000380 <strlen>
  for (int i = 0; i < 128*128 / 2; ++i) {
 8000f40:	3401      	adds	r4, #1
  	HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8000f42:	b282      	uxth	r2, r0
 8000f44:	230a      	movs	r3, #10
 8000f46:	a921      	add	r1, sp, #132	@ 0x84
 8000f48:	4630      	mov	r0, r6
 8000f4a:	f004 fc1c 	bl	8005786 <HAL_UART_Transmit>
  	HAL_Delay(20);
 8000f4e:	2014      	movs	r0, #20
 8000f50:	f000 fb00 	bl	8001554 <HAL_Delay>
  for (int i = 0; i < 128*128 / 2; ++i) {
 8000f54:	f5b4 5f00 	cmp.w	r4, #8192	@ 0x2000
 8000f58:	d1e8      	bne.n	8000f2c <main+0x3b8>
   MX_X_CUBE_AI_Process();
 8000f5a:	f004 ff81 	bl	8005e60 <MX_X_CUBE_AI_Process>
  while (1)
 8000f5e:	e7fe      	b.n	8000f5e <main+0x3ea>
 8000f60:	24008ddc 	.word	0x24008ddc
 8000f64:	24000d48 	.word	0x24000d48
 8000f68:	0800ecbb 	.word	0x0800ecbb
 8000f6c:	0800ed05 	.word	0x0800ed05
 8000f70:	0800eccb 	.word	0x0800eccb
 8000f74:	24008e30 	.word	0x24008e30
 8000f78:	24008d48 	.word	0x24008d48
 8000f7c:	0800ecdc 	.word	0x0800ecdc
 8000f80:	58020c00 	.word	0x58020c00
 8000f84:	0800eced 	.word	0x0800eced

08000f88 <Error_Handler>:
 8000f88:	b672      	cpsid	i
  while (1)
 8000f8a:	e7fe      	b.n	8000f8a <Error_Handler+0x2>

08000f8c <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8c:	4b07      	ldr	r3, [pc, #28]	@ (8000fac <HAL_MspInit+0x20>)
{
 8000f8e:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f90:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8000f94:	f042 0202 	orr.w	r2, r2, #2
 8000f98:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8000f9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fa0:	f003 0302 	and.w	r3, r3, #2
 8000fa4:	9301      	str	r3, [sp, #4]
 8000fa6:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa8:	b002      	add	sp, #8
 8000faa:	4770      	bx	lr
 8000fac:	58024400 	.word	0x58024400

08000fb0 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8000fb0:	6802      	ldr	r2, [r0, #0]
{
 8000fb2:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8000fb4:	4b09      	ldr	r3, [pc, #36]	@ (8000fdc <HAL_CRC_MspInit+0x2c>)
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d10d      	bne.n	8000fd6 <HAL_CRC_MspInit+0x26>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000fba:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000fbe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000fc2:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8000fc6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000fd2:	9301      	str	r3, [sp, #4]
 8000fd4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000fd6:	b002      	add	sp, #8
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	58024c00 	.word	0x58024c00

08000fe0 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8000fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fe2:	b08d      	sub	sp, #52	@ 0x34
 8000fe4:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe6:	2214      	movs	r2, #20
 8000fe8:	2100      	movs	r1, #0
 8000fea:	a807      	add	r0, sp, #28
 8000fec:	f00b fc87 	bl	800c8fe <memset>
  if(hdcmi->Instance==DCMI)
 8000ff0:	682a      	ldr	r2, [r5, #0]
 8000ff2:	4b55      	ldr	r3, [pc, #340]	@ (8001148 <HAL_DCMI_MspInit+0x168>)
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	f040 80a5 	bne.w	8001144 <HAL_DCMI_MspInit+0x164>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000ffa:	4b54      	ldr	r3, [pc, #336]	@ (800114c <HAL_DCMI_MspInit+0x16c>)
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffc:	2402      	movs	r4, #2
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ffe:	2703      	movs	r7, #3
 8001000:	260d      	movs	r6, #13
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001002:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001006:	a907      	add	r1, sp, #28
 8001008:	4851      	ldr	r0, [pc, #324]	@ (8001150 <HAL_DCMI_MspInit+0x170>)
    __HAL_RCC_DCMI_CLK_ENABLE();
 800100a:	f042 0201 	orr.w	r2, r2, #1
 800100e:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
 8001012:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 8001016:	f002 0201 	and.w	r2, r2, #1
 800101a:	9201      	str	r2, [sp, #4]
 800101c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800101e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001022:	f042 0210 	orr.w	r2, r2, #16
 8001026:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800102a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800102e:	f002 0210 	and.w	r2, r2, #16
 8001032:	9202      	str	r2, [sp, #8]
 8001034:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001036:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800103a:	f042 0201 	orr.w	r2, r2, #1
 800103e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001042:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001046:	f002 0201 	and.w	r2, r2, #1
 800104a:	9203      	str	r2, [sp, #12]
 800104c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800104e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001052:	f042 0204 	orr.w	r2, r2, #4
 8001056:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800105a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800105e:	f002 0204 	and.w	r2, r2, #4
 8001062:	9204      	str	r2, [sp, #16]
 8001064:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001066:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800106a:	f042 0208 	orr.w	r2, r2, #8
 800106e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001072:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001076:	f002 0208 	and.w	r2, r2, #8
 800107a:	9205      	str	r2, [sp, #20]
 800107c:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800107e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001082:	f042 0202 	orr.w	r2, r2, #2
 8001086:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800108a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	9306      	str	r3, [sp, #24]
 8001094:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	2370      	movs	r3, #112	@ 0x70
 8001098:	e9cd 3407 	strd	r3, r4, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800109c:	9409      	str	r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800109e:	e9cd 760a 	strd	r7, r6, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010a2:	f002 f845 	bl	8003130 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80010a6:	2350      	movs	r3, #80	@ 0x50
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a8:	a907      	add	r1, sp, #28
 80010aa:	482a      	ldr	r0, [pc, #168]	@ (8001154 <HAL_DCMI_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80010ac:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ae:	e9cd 3407 	strd	r3, r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b2:	e9cd 4709 	strd	r4, r7, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b6:	f002 f83b 	bl	8003130 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80010ba:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010be:	a907      	add	r1, sp, #28
 80010c0:	4825      	ldr	r0, [pc, #148]	@ (8001158 <HAL_DCMI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80010c2:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c4:	e9cd 3407 	strd	r3, r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c8:	e9cd 4709 	strd	r4, r7, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010cc:	f002 f830 	bl	8003130 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010d0:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010d2:	a907      	add	r1, sp, #28
 80010d4:	4821      	ldr	r0, [pc, #132]	@ (800115c <HAL_DCMI_MspInit+0x17c>)
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80010d6:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d8:	e9cd 3407 	strd	r3, r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010dc:	e9cd 4709 	strd	r4, r7, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e0:	f002 f826 	bl	8003130 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010e4:	2380      	movs	r3, #128	@ 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e6:	a907      	add	r1, sp, #28
 80010e8:	481d      	ldr	r0, [pc, #116]	@ (8001160 <HAL_DCMI_MspInit+0x180>)
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80010ea:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	e9cd 3407 	strd	r3, r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f0:	e9cd 4709 	strd	r4, r7, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f4:	f002 f81c 	bl	8003130 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 80010f8:	4c1a      	ldr	r4, [pc, #104]	@ (8001164 <HAL_DCMI_MspInit+0x184>)
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 80010fa:	4a1b      	ldr	r2, [pc, #108]	@ (8001168 <HAL_DCMI_MspInit+0x188>)
 80010fc:	234b      	movs	r3, #75	@ 0x4b
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010fe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_dcmi.Init.Mode = DMA_NORMAL;
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8001102:	4620      	mov	r0, r4
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 8001104:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001108:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800110c:	2300      	movs	r3, #0
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800110e:	e9c4 1204 	strd	r1, r2, [r4, #16]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001112:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8001116:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800111a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 800111e:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001122:	e9c4 2308 	strd	r2, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8001126:	f000 fe13 	bl	8001d50 <HAL_DMA_Init>
 800112a:	b108      	cbz	r0, 8001130 <HAL_DCMI_MspInit+0x150>
    {
      Error_Handler();
 800112c:	f7ff ff2c 	bl	8000f88 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8001130:	2200      	movs	r2, #0
 8001132:	204e      	movs	r0, #78	@ 0x4e
    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8001134:	64ac      	str	r4, [r5, #72]	@ 0x48
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8001136:	4611      	mov	r1, r2
    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8001138:	63a5      	str	r5, [r4, #56]	@ 0x38
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 800113a:	f000 fa35 	bl	80015a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 800113e:	204e      	movs	r0, #78	@ 0x4e
 8001140:	f000 fa64 	bl	800160c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001144:	b00d      	add	sp, #52	@ 0x34
 8001146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001148:	48020000 	.word	0x48020000
 800114c:	58024400 	.word	0x58024400
 8001150:	58021000 	.word	0x58021000
 8001154:	58020000 	.word	0x58020000
 8001158:	58020800 	.word	0x58020800
 800115c:	58020c00 	.word	0x58020c00
 8001160:	58020400 	.word	0x58020400
 8001164:	24008e84 	.word	0x24008e84
 8001168:	40020010 	.word	0x40020010

0800116c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800116c:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116e:	2214      	movs	r2, #20
{
 8001170:	b0ba      	sub	sp, #232	@ 0xe8
 8001172:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	2100      	movs	r1, #0
 8001176:	eb0d 0002 	add.w	r0, sp, r2
 800117a:	f00b fbc0 	bl	800c8fe <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800117e:	22c0      	movs	r2, #192	@ 0xc0
 8001180:	2100      	movs	r1, #0
 8001182:	a80a      	add	r0, sp, #40	@ 0x28
 8001184:	f00b fbbb 	bl	800c8fe <memset>
  if(hi2c->Instance==I2C1)
 8001188:	6823      	ldr	r3, [r4, #0]
 800118a:	4a36      	ldr	r2, [pc, #216]	@ (8001264 <HAL_I2C_MspInit+0xf8>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d133      	bne.n	80011f8 <HAL_I2C_MspInit+0x8c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001190:	2208      	movs	r2, #8
 8001192:	2300      	movs	r3, #0
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001194:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001196:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800119a:	f003 fa47 	bl	800462c <HAL_RCCEx_PeriphCLKConfig>
 800119e:	b108      	cbz	r0, 80011a4 <HAL_I2C_MspInit+0x38>
    {
      Error_Handler();
 80011a0:	f7ff fef2 	bl	8000f88 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a4:	4c30      	ldr	r4, [pc, #192]	@ (8001268 <HAL_I2C_MspInit+0xfc>)
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011a6:	f44f 7140 	mov.w	r1, #768	@ 0x300
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011aa:	2001      	movs	r0, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ac:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80011b0:	f043 0302 	orr.w	r3, r3, #2
 80011b4:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80011b8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80011bc:	f003 0302 	and.w	r3, r3, #2
 80011c0:	9301      	str	r3, [sp, #4]
 80011c2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011c4:	2312      	movs	r3, #18
 80011c6:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ca:	2300      	movs	r3, #0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011cc:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	e9cd 0307 	strd	r0, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011d2:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d4:	4825      	ldr	r0, [pc, #148]	@ (800126c <HAL_I2C_MspInit+0x100>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011d6:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d8:	f001 ffaa 	bl	8003130 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011dc:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
 80011e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011e4:	f8c4 30e8 	str.w	r3, [r4, #232]	@ 0xe8
 80011e8:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
 80011ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011f0:	9302      	str	r3, [sp, #8]
 80011f2:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80011f4:	b03a      	add	sp, #232	@ 0xe8
 80011f6:	bd10      	pop	{r4, pc}
  else if(hi2c->Instance==I2C2)
 80011f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001270 <HAL_I2C_MspInit+0x104>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d1fa      	bne.n	80011f4 <HAL_I2C_MspInit+0x88>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80011fe:	2208      	movs	r2, #8
 8001200:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001202:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001204:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001208:	f003 fa10 	bl	800462c <HAL_RCCEx_PeriphCLKConfig>
 800120c:	b108      	cbz	r0, 8001212 <HAL_I2C_MspInit+0xa6>
      Error_Handler();
 800120e:	f7ff febb 	bl	8000f88 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001212:	4c15      	ldr	r4, [pc, #84]	@ (8001268 <HAL_I2C_MspInit+0xfc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001214:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001218:	a905      	add	r1, sp, #20
 800121a:	4814      	ldr	r0, [pc, #80]	@ (800126c <HAL_I2C_MspInit+0x100>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800121c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001220:	f043 0302 	orr.w	r3, r3, #2
 8001224:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8001228:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800122c:	f003 0302 	and.w	r3, r3, #2
 8001230:	9303      	str	r3, [sp, #12]
 8001232:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001234:	2312      	movs	r3, #18
 8001236:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123c:	e9cd 3307 	strd	r3, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001240:	2304      	movs	r3, #4
 8001242:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001244:	f001 ff74 	bl	8003130 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001248:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
 800124c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001250:	f8c4 30e8 	str.w	r3, [r4, #232]	@ 0xe8
 8001254:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
 8001258:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800125c:	9304      	str	r3, [sp, #16]
 800125e:	9b04      	ldr	r3, [sp, #16]
}
 8001260:	e7c8      	b.n	80011f4 <HAL_I2C_MspInit+0x88>
 8001262:	bf00      	nop
 8001264:	40005400 	.word	0x40005400
 8001268:	58024400 	.word	0x58024400
 800126c:	58020400 	.word	0x58020400
 8001270:	40005800 	.word	0x40005800

08001274 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001274:	b510      	push	{r4, lr}
 8001276:	b0b8      	sub	sp, #224	@ 0xe0
 8001278:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127a:	2214      	movs	r2, #20
 800127c:	2100      	movs	r1, #0
 800127e:	a803      	add	r0, sp, #12
 8001280:	f00b fb3d 	bl	800c8fe <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001284:	22c0      	movs	r2, #192	@ 0xc0
 8001286:	2100      	movs	r1, #0
 8001288:	a808      	add	r0, sp, #32
 800128a:	f00b fb38 	bl	800c8fe <memset>
  if(huart->Instance==UART4)
 800128e:	6822      	ldr	r2, [r4, #0]
 8001290:	4b1a      	ldr	r3, [pc, #104]	@ (80012fc <HAL_UART_MspInit+0x88>)
 8001292:	429a      	cmp	r2, r3
 8001294:	d12f      	bne.n	80012f6 <HAL_UART_MspInit+0x82>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001296:	2202      	movs	r2, #2
 8001298:	2300      	movs	r3, #0
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800129a:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800129c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012a0:	f003 f9c4 	bl	800462c <HAL_RCCEx_PeriphCLKConfig>
 80012a4:	b108      	cbz	r0, 80012aa <HAL_UART_MspInit+0x36>
    {
      Error_Handler();
 80012a6:	f7ff fe6f 	bl	8000f88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80012aa:	4b15      	ldr	r3, [pc, #84]	@ (8001300 <HAL_UART_MspInit+0x8c>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ac:	a903      	add	r1, sp, #12
 80012ae:	4815      	ldr	r0, [pc, #84]	@ (8001304 <HAL_UART_MspInit+0x90>)
    __HAL_RCC_UART4_CLK_ENABLE();
 80012b0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80012b4:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80012b8:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 80012bc:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80012c0:	f402 2200 	and.w	r2, r2, #524288	@ 0x80000
 80012c4:	9201      	str	r2, [sp, #4]
 80012c6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012cc:	f042 0201 	orr.w	r2, r2, #1
 80012d0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	2203      	movs	r2, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	9302      	str	r3, [sp, #8]
 80012e0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e2:	2302      	movs	r3, #2
 80012e4:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ea:	e9cd 3305 	strd	r3, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80012ee:	2308      	movs	r3, #8
 80012f0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f2:	f001 ff1d 	bl	8003130 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80012f6:	b038      	add	sp, #224	@ 0xe0
 80012f8:	bd10      	pop	{r4, pc}
 80012fa:	bf00      	nop
 80012fc:	40004c00 	.word	0x40004c00
 8001300:	58024400 	.word	0x58024400
 8001304:	58020000 	.word	0x58020000

08001308 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001308:	e7fe      	b.n	8001308 <NMI_Handler>

0800130a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800130a:	e7fe      	b.n	800130a <HardFault_Handler>

0800130c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800130c:	e7fe      	b.n	800130c <MemManage_Handler>

0800130e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800130e:	e7fe      	b.n	800130e <BusFault_Handler>

08001310 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001310:	e7fe      	b.n	8001310 <UsageFault_Handler>

08001312 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001312:	4770      	bx	lr

08001314 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8001314:	4770      	bx	lr

08001316 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8001316:	4770      	bx	lr

08001318 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001318:	f000 b90a 	b.w	8001530 <HAL_IncTick>

0800131c <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 800131c:	4801      	ldr	r0, [pc, #4]	@ (8001324 <DMA1_Stream0_IRQHandler+0x8>)
 800131e:	f001 ba27 	b.w	8002770 <HAL_DMA_IRQHandler>
 8001322:	bf00      	nop
 8001324:	24008e84 	.word	0x24008e84

08001328 <DCMI_IRQHandler>:
void DCMI_IRQHandler(void)
{
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8001328:	4801      	ldr	r0, [pc, #4]	@ (8001330 <DCMI_IRQHandler+0x8>)
 800132a:	f000 bb33 	b.w	8001994 <HAL_DCMI_IRQHandler>
 800132e:	bf00      	nop
 8001330:	24008efc 	.word	0x24008efc

08001334 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001334:	4a0b      	ldr	r2, [pc, #44]	@ (8001364 <_sbrk+0x30>)
{
 8001336:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001338:	6811      	ldr	r1, [r2, #0]
{
 800133a:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 800133c:	b909      	cbnz	r1, 8001342 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800133e:	490a      	ldr	r1, [pc, #40]	@ (8001368 <_sbrk+0x34>)
 8001340:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001342:	6810      	ldr	r0, [r2, #0]
 8001344:	4909      	ldr	r1, [pc, #36]	@ (800136c <_sbrk+0x38>)
 8001346:	4c0a      	ldr	r4, [pc, #40]	@ (8001370 <_sbrk+0x3c>)
 8001348:	4403      	add	r3, r0
 800134a:	1b09      	subs	r1, r1, r4
 800134c:	428b      	cmp	r3, r1
 800134e:	d906      	bls.n	800135e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001350:	f00b fb46 	bl	800c9e0 <__errno>
 8001354:	230c      	movs	r3, #12
 8001356:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001358:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800135c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800135e:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001360:	e7fc      	b.n	800135c <_sbrk+0x28>
 8001362:	bf00      	nop
 8001364:	24008f70 	.word	0x24008f70
 8001368:	20000000 	.word	0x20000000
 800136c:	24080000 	.word	0x24080000
 8001370:	00000800 	.word	0x00000800

08001374 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001374:	4a25      	ldr	r2, [pc, #148]	@ (800140c <SystemInit+0x98>)
 8001376:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800137a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800137e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001382:	4a23      	ldr	r2, [pc, #140]	@ (8001410 <SystemInit+0x9c>)
 8001384:	6813      	ldr	r3, [r2, #0]
 8001386:	f003 030f 	and.w	r3, r3, #15
 800138a:	2b06      	cmp	r3, #6
 800138c:	d805      	bhi.n	800139a <SystemInit+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800138e:	6813      	ldr	r3, [r2, #0]
 8001390:	f023 030f 	bic.w	r3, r3, #15
 8001394:	f043 0307 	orr.w	r3, r3, #7
 8001398:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800139a:	4b1e      	ldr	r3, [pc, #120]	@ (8001414 <SystemInit+0xa0>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	f042 0201 	orr.w	r2, r2, #1
 80013a2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80013a4:	2200      	movs	r2, #0
 80013a6:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80013a8:	4a1b      	ldr	r2, [pc, #108]	@ (8001418 <SystemInit+0xa4>)
 80013aa:	6819      	ldr	r1, [r3, #0]
 80013ac:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013ae:	4918      	ldr	r1, [pc, #96]	@ (8001410 <SystemInit+0x9c>)
  RCC->CR &= 0xEAF6ED7FU;
 80013b0:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013b2:	680a      	ldr	r2, [r1, #0]
 80013b4:	0712      	lsls	r2, r2, #28
 80013b6:	d505      	bpl.n	80013c4 <SystemInit+0x50>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013b8:	680a      	ldr	r2, [r1, #0]
 80013ba:	f022 020f 	bic.w	r2, r2, #15
 80013be:	f042 0207 	orr.w	r2, r2, #7
 80013c2:	600a      	str	r2, [r1, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80013c4:	2200      	movs	r2, #0

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80013c6:	4915      	ldr	r1, [pc, #84]	@ (800141c <SystemInit+0xa8>)
  RCC->D1CFGR = 0x00000000;
 80013c8:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 80013ca:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 80013cc:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 80013ce:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80013d0:	4913      	ldr	r1, [pc, #76]	@ (8001420 <SystemInit+0xac>)
 80013d2:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80013d4:	4913      	ldr	r1, [pc, #76]	@ (8001424 <SystemInit+0xb0>)
 80013d6:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80013d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80013da:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80013dc:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80013de:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80013e0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013e2:	6819      	ldr	r1, [r3, #0]
 80013e4:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 80013e8:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80013ea:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80013ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001428 <SystemInit+0xb4>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	0c1b      	lsrs	r3, r3, #16
 80013f2:	041b      	lsls	r3, r3, #16
 80013f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80013f8:	d203      	bcs.n	8001402 <SystemInit+0x8e>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80013fa:	4b0c      	ldr	r3, [pc, #48]	@ (800142c <SystemInit+0xb8>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001402:	4b0b      	ldr	r3, [pc, #44]	@ (8001430 <SystemInit+0xbc>)
 8001404:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001408:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800140a:	4770      	bx	lr
 800140c:	e000ed00 	.word	0xe000ed00
 8001410:	52002000 	.word	0x52002000
 8001414:	58024400 	.word	0x58024400
 8001418:	eaf6ed7f 	.word	0xeaf6ed7f
 800141c:	02020200 	.word	0x02020200
 8001420:	01ff0000 	.word	0x01ff0000
 8001424:	01010280 	.word	0x01010280
 8001428:	5c001000 	.word	0x5c001000
 800142c:	51008000 	.word	0x51008000
 8001430:	52004000 	.word	0x52004000

08001434 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001434:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800146c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001438:	f7ff ff9c 	bl	8001374 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800143c:	480c      	ldr	r0, [pc, #48]	@ (8001470 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800143e:	490d      	ldr	r1, [pc, #52]	@ (8001474 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001440:	4a0d      	ldr	r2, [pc, #52]	@ (8001478 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001442:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001444:	e002      	b.n	800144c <LoopCopyDataInit>

08001446 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001446:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001448:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800144a:	3304      	adds	r3, #4

0800144c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800144c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800144e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001450:	d3f9      	bcc.n	8001446 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001452:	4a0a      	ldr	r2, [pc, #40]	@ (800147c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001454:	4c0a      	ldr	r4, [pc, #40]	@ (8001480 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001456:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001458:	e001      	b.n	800145e <LoopFillZerobss>

0800145a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800145a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800145c:	3204      	adds	r2, #4

0800145e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800145e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001460:	d3fb      	bcc.n	800145a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001462:	f00b fac3 	bl	800c9ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001466:	f7ff fb85 	bl	8000b74 <main>
  bx  lr
 800146a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800146c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001470:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001474:	24000d18 	.word	0x24000d18
  ldr r2, =_sidata
 8001478:	0806d8f8 	.word	0x0806d8f8
  ldr r2, =_sbss
 800147c:	24000d20 	.word	0x24000d20
  ldr r4, =_ebss
 8001480:	240692f0 	.word	0x240692f0

08001484 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001484:	e7fe      	b.n	8001484 <ADC3_IRQHandler>
	...

08001488 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001488:	b538      	push	{r3, r4, r5, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800148a:	4b0f      	ldr	r3, [pc, #60]	@ (80014c8 <HAL_InitTick+0x40>)
{
 800148c:	4605      	mov	r5, r0
  if((uint32_t)uwTickFreq == 0UL)
 800148e:	781a      	ldrb	r2, [r3, #0]
 8001490:	b90a      	cbnz	r2, 8001496 <HAL_InitTick+0xe>
  {
    return HAL_ERROR;
 8001492:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001494:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001496:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800149a:	fbb3 f3f2 	udiv	r3, r3, r2
 800149e:	4a0b      	ldr	r2, [pc, #44]	@ (80014cc <HAL_InitTick+0x44>)
 80014a0:	6810      	ldr	r0, [r2, #0]
 80014a2:	fbb0 f0f3 	udiv	r0, r0, r3
 80014a6:	f000 f8bf 	bl	8001628 <HAL_SYSTICK_Config>
 80014aa:	4604      	mov	r4, r0
 80014ac:	2800      	cmp	r0, #0
 80014ae:	d1f0      	bne.n	8001492 <HAL_InitTick+0xa>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014b0:	2d0f      	cmp	r5, #15
 80014b2:	d8ee      	bhi.n	8001492 <HAL_InitTick+0xa>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014b4:	4602      	mov	r2, r0
 80014b6:	4629      	mov	r1, r5
 80014b8:	f04f 30ff 	mov.w	r0, #4294967295
 80014bc:	f000 f874 	bl	80015a8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014c0:	4b03      	ldr	r3, [pc, #12]	@ (80014d0 <HAL_InitTick+0x48>)
 80014c2:	4620      	mov	r0, r4
 80014c4:	601d      	str	r5, [r3, #0]
  return HAL_OK;
 80014c6:	e7e5      	b.n	8001494 <HAL_InitTick+0xc>
 80014c8:	24000010 	.word	0x24000010
 80014cc:	2400000c 	.word	0x2400000c
 80014d0:	24000014 	.word	0x24000014

080014d4 <HAL_Init>:
{
 80014d4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d6:	2003      	movs	r0, #3
 80014d8:	f000 f854 	bl	8001584 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80014dc:	f002 fda8 	bl	8004030 <HAL_RCC_GetSysClockFreq>
 80014e0:	490f      	ldr	r1, [pc, #60]	@ (8001520 <HAL_Init+0x4c>)
 80014e2:	4a10      	ldr	r2, [pc, #64]	@ (8001524 <HAL_Init+0x50>)
 80014e4:	698b      	ldr	r3, [r1, #24]
 80014e6:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80014ea:	5cd3      	ldrb	r3, [r2, r3]
 80014ec:	f003 031f 	and.w	r3, r3, #31
 80014f0:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014f2:	698b      	ldr	r3, [r1, #24]
 80014f4:	f003 030f 	and.w	r3, r3, #15
 80014f8:	5cd3      	ldrb	r3, [r2, r3]
 80014fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001528 <HAL_Init+0x54>)
 80014fc:	f003 031f 	and.w	r3, r3, #31
 8001500:	fa20 f303 	lsr.w	r3, r0, r3
 8001504:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8001506:	4b09      	ldr	r3, [pc, #36]	@ (800152c <HAL_Init+0x58>)
 8001508:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800150a:	200f      	movs	r0, #15
 800150c:	f7ff ffbc 	bl	8001488 <HAL_InitTick>
 8001510:	4604      	mov	r4, r0
 8001512:	b918      	cbnz	r0, 800151c <HAL_Init+0x48>
  HAL_MspInit();
 8001514:	f7ff fd3a 	bl	8000f8c <HAL_MspInit>
}
 8001518:	4620      	mov	r0, r4
 800151a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800151c:	2401      	movs	r4, #1
 800151e:	e7fb      	b.n	8001518 <HAL_Init+0x44>
 8001520:	58024400 	.word	0x58024400
 8001524:	0800ed1b 	.word	0x0800ed1b
 8001528:	24000008 	.word	0x24000008
 800152c:	2400000c 	.word	0x2400000c

08001530 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001530:	4a03      	ldr	r2, [pc, #12]	@ (8001540 <HAL_IncTick+0x10>)
 8001532:	4b04      	ldr	r3, [pc, #16]	@ (8001544 <HAL_IncTick+0x14>)
 8001534:	6811      	ldr	r1, [r2, #0]
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	440b      	add	r3, r1
 800153a:	6013      	str	r3, [r2, #0]
}
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	24008f74 	.word	0x24008f74
 8001544:	24000010 	.word	0x24000010

08001548 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001548:	4b01      	ldr	r3, [pc, #4]	@ (8001550 <HAL_GetTick+0x8>)
 800154a:	6818      	ldr	r0, [r3, #0]
}
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	24008f74 	.word	0x24008f74

08001554 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001554:	b538      	push	{r3, r4, r5, lr}
 8001556:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001558:	f7ff fff6 	bl	8001548 <HAL_GetTick>
 800155c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800155e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001560:	bf1e      	ittt	ne
 8001562:	4b04      	ldrne	r3, [pc, #16]	@ (8001574 <HAL_Delay+0x20>)
 8001564:	781b      	ldrbne	r3, [r3, #0]
 8001566:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001568:	f7ff ffee 	bl	8001548 <HAL_GetTick>
 800156c:	1b43      	subs	r3, r0, r5
 800156e:	42a3      	cmp	r3, r4
 8001570:	d3fa      	bcc.n	8001568 <HAL_Delay+0x14>
  {
  }
}
 8001572:	bd38      	pop	{r3, r4, r5, pc}
 8001574:	24000010 	.word	0x24000010

08001578 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8001578:	4b01      	ldr	r3, [pc, #4]	@ (8001580 <HAL_GetREVID+0x8>)
 800157a:	6818      	ldr	r0, [r3, #0]
}
 800157c:	0c00      	lsrs	r0, r0, #16
 800157e:	4770      	bx	lr
 8001580:	5c001000 	.word	0x5c001000

08001584 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001584:	4907      	ldr	r1, [pc, #28]	@ (80015a4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001586:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001588:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800158a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800158e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001592:	0412      	lsls	r2, r2, #16
 8001594:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001596:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001598:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800159c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80015a0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80015a2:	4770      	bx	lr
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a8:	4b16      	ldr	r3, [pc, #88]	@ (8001604 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015aa:	b530      	push	{r4, r5, lr}
 80015ac:	68dc      	ldr	r4, [r3, #12]
 80015ae:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015b6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b8:	2b04      	cmp	r3, #4
 80015ba:	bf28      	it	cs
 80015bc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015be:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c0:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015c4:	bf8c      	ite	hi
 80015c6:	3c03      	subhi	r4, #3
 80015c8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ca:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 80015ce:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d0:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d4:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d8:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015dc:	fa03 f304 	lsl.w	r3, r3, r4
 80015e0:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80015e8:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80015ea:	db06      	blt.n	80015fa <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ec:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80015f0:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80015f4:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80015f8:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fa:	f000 000f 	and.w	r0, r0, #15
 80015fe:	4a02      	ldr	r2, [pc, #8]	@ (8001608 <HAL_NVIC_SetPriority+0x60>)
 8001600:	5413      	strb	r3, [r2, r0]
 8001602:	e7f9      	b.n	80015f8 <HAL_NVIC_SetPriority+0x50>
 8001604:	e000ed00 	.word	0xe000ed00
 8001608:	e000ed14 	.word	0xe000ed14

0800160c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800160c:	2800      	cmp	r0, #0
 800160e:	db07      	blt.n	8001620 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001610:	2301      	movs	r3, #1
 8001612:	0941      	lsrs	r1, r0, #5
 8001614:	f000 001f 	and.w	r0, r0, #31
 8001618:	4a02      	ldr	r2, [pc, #8]	@ (8001624 <HAL_NVIC_EnableIRQ+0x18>)
 800161a:	4083      	lsls	r3, r0
 800161c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	e000e100 	.word	0xe000e100

08001628 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001628:	3801      	subs	r0, #1
 800162a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800162e:	d20b      	bcs.n	8001648 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001630:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001634:	4a05      	ldr	r2, [pc, #20]	@ (800164c <HAL_SYSTICK_Config+0x24>)
 8001636:	21f0      	movs	r1, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001638:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800163a:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163c:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001640:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001642:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001644:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001646:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001648:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800164a:	4770      	bx	lr
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001650:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001652:	4604      	mov	r4, r0
 8001654:	b908      	cbnz	r0, 800165a <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8001656:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8001658:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 800165a:	7f43      	ldrb	r3, [r0, #29]
 800165c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001660:	b913      	cbnz	r3, 8001668 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8001662:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8001664:	f7ff fca4 	bl	8000fb0 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001668:	2302      	movs	r3, #2
 800166a:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800166c:	7923      	ldrb	r3, [r4, #4]
 800166e:	b9e3      	cbnz	r3, 80016aa <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001670:	6823      	ldr	r3, [r4, #0]
 8001672:	4a13      	ldr	r2, [pc, #76]	@ (80016c0 <HAL_CRC_Init+0x70>)
 8001674:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	f022 0218 	bic.w	r2, r2, #24
 800167c:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800167e:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001680:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001682:	b9d2      	cbnz	r2, 80016ba <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001684:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001688:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 800168a:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800168c:	689a      	ldr	r2, [r3, #8]
 800168e:	6961      	ldr	r1, [r4, #20]
 8001690:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001694:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001696:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001698:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80016a0:	430a      	orrs	r2, r1
 80016a2:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80016a4:	2301      	movs	r3, #1
 80016a6:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 80016a8:	e7d6      	b.n	8001658 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80016aa:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80016ae:	4620      	mov	r0, r4
 80016b0:	f000 f808 	bl	80016c4 <HAL_CRCEx_Polynomial_Set>
 80016b4:	2800      	cmp	r0, #0
 80016b6:	d0e2      	beq.n	800167e <HAL_CRC_Init+0x2e>
 80016b8:	e7cd      	b.n	8001656 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80016ba:	6922      	ldr	r2, [r4, #16]
 80016bc:	e7e4      	b.n	8001688 <HAL_CRC_Init+0x38>
 80016be:	bf00      	nop
 80016c0:	04c11db7 	.word	0x04c11db7

080016c4 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80016c4:	07cb      	lsls	r3, r1, #31
{
 80016c6:	b510      	push	{r4, lr}
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80016c8:	d50d      	bpl.n	80016e6 <HAL_CRCEx_Polynomial_Set+0x22>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80016ca:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80016cc:	3b01      	subs	r3, #1
 80016ce:	d31d      	bcc.n	800170c <HAL_CRCEx_Polynomial_Set+0x48>
 80016d0:	fa21 f403 	lsr.w	r4, r1, r3
 80016d4:	07e4      	lsls	r4, r4, #31
 80016d6:	d5f9      	bpl.n	80016cc <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 80016d8:	2a10      	cmp	r2, #16
 80016da:	d013      	beq.n	8001704 <HAL_CRCEx_Polynomial_Set+0x40>
 80016dc:	2a10      	cmp	r2, #16
 80016de:	d804      	bhi.n	80016ea <HAL_CRCEx_Polynomial_Set+0x26>
 80016e0:	b13a      	cbz	r2, 80016f2 <HAL_CRCEx_Polynomial_Set+0x2e>
 80016e2:	2a08      	cmp	r2, #8
 80016e4:	d010      	beq.n	8001708 <HAL_CRCEx_Polynomial_Set+0x44>
 80016e6:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 80016e8:	e00b      	b.n	8001702 <HAL_CRCEx_Polynomial_Set+0x3e>
    switch (PolyLength)
 80016ea:	2a18      	cmp	r2, #24
 80016ec:	d1fb      	bne.n	80016e6 <HAL_CRCEx_Polynomial_Set+0x22>
        if (msb >= HAL_CRC_LENGTH_7B)
 80016ee:	2b06      	cmp	r3, #6
        if (msb >= HAL_CRC_LENGTH_16B)
 80016f0:	d8f9      	bhi.n	80016e6 <HAL_CRCEx_Polynomial_Set+0x22>
    WRITE_REG(hcrc->Instance->POL, Pol);
 80016f2:	6800      	ldr	r0, [r0, #0]
 80016f4:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80016f6:	6883      	ldr	r3, [r0, #8]
 80016f8:	f023 0318 	bic.w	r3, r3, #24
 80016fc:	4313      	orrs	r3, r2
 80016fe:	6083      	str	r3, [r0, #8]
 8001700:	2000      	movs	r0, #0
}
 8001702:	bd10      	pop	{r4, pc}
        if (msb >= HAL_CRC_LENGTH_8B)
 8001704:	2b07      	cmp	r3, #7
 8001706:	e7f3      	b.n	80016f0 <HAL_CRCEx_Polynomial_Set+0x2c>
        if (msb >= HAL_CRC_LENGTH_16B)
 8001708:	2b0f      	cmp	r3, #15
 800170a:	e7f1      	b.n	80016f0 <HAL_CRCEx_Polynomial_Set+0x2c>
    switch (PolyLength)
 800170c:	2a10      	cmp	r2, #16
 800170e:	d1e5      	bne.n	80016dc <HAL_CRCEx_Polynomial_Set+0x18>
 8001710:	e7e9      	b.n	80016e6 <HAL_CRCEx_Polynomial_Set+0x22>

08001712 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8001712:	b510      	push	{r4, lr}
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001714:	6b84      	ldr	r4, [r0, #56]	@ 0x38

  if (hdcmi->XferCount != 0U)
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 8001716:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
  if (hdcmi->XferCount != 0U)
 8001718:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 800171a:	6803      	ldr	r3, [r0, #0]
  if (hdcmi->XferCount != 0U)
 800171c:	b332      	cbz	r2, 800176c <DCMI_DMAXferCplt+0x5a>
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 800171e:	6819      	ldr	r1, [r3, #0]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8001720:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001722:	f012 0201 	ands.w	r2, r2, #1
 8001726:	d11a      	bne.n	800175e <DCMI_DMAXferCplt+0x4c>
 8001728:	0309      	lsls	r1, r1, #12
 800172a:	d518      	bpl.n	800175e <DCMI_DMAXferCplt+0x4c>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 800172c:	68db      	ldr	r3, [r3, #12]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 800172e:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8001730:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8001734:	f001 fcd0 	bl	80030d8 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8001738:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800173a:	3b01      	subs	r3, #1
 800173c:	63a3      	str	r3, [r4, #56]	@ 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 800173e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001740:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001742:	429a      	cmp	r2, r3
 8001744:	d10a      	bne.n	800175c <DCMI_DMAXferCplt+0x4a>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001746:	6823      	ldr	r3, [r4, #0]
 8001748:	68da      	ldr	r2, [r3, #12]
 800174a:	f042 0201 	orr.w	r2, r2, #1
 800174e:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	079b      	lsls	r3, r3, #30
 8001754:	d502      	bpl.n	800175c <DCMI_DMAXferCplt+0x4a>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001756:	2301      	movs	r3, #1
 8001758:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    }
  }
}
 800175c:	bd10      	pop	{r4, pc}
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	0312      	lsls	r2, r2, #12
 8001762:	d4ec      	bmi.n	800173e <DCMI_DMAXferCplt+0x2c>
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 8001764:	691b      	ldr	r3, [r3, #16]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8001766:	2201      	movs	r2, #1
 8001768:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800176a:	e7e1      	b.n	8001730 <DCMI_DMAXferCplt+0x1e>
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 800176c:	681a      	ldr	r2, [r3, #0]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 800176e:	6c21      	ldr	r1, [r4, #64]	@ 0x40
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 8001770:	0310      	lsls	r0, r2, #12
 8001772:	d502      	bpl.n	800177a <DCMI_DMAXferCplt+0x68>
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 8001774:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8001776:	60da      	str	r2, [r3, #12]
 8001778:	e7e1      	b.n	800173e <DCMI_DMAXferCplt+0x2c>
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	0312      	lsls	r2, r2, #12
 800177e:	d4de      	bmi.n	800173e <DCMI_DMAXferCplt+0x2c>
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 8001780:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8001782:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8001784:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8001788:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 800178a:	63a1      	str	r1, [r4, #56]	@ 0x38
 800178c:	e7d7      	b.n	800173e <DCMI_DMAXferCplt+0x2c>
	...

08001790 <HAL_DCMI_Init>:
{
 8001790:	b538      	push	{r3, r4, r5, lr}
  if (hdcmi == NULL)
 8001792:	4604      	mov	r4, r0
 8001794:	2800      	cmp	r0, #0
 8001796:	d03f      	beq.n	8001818 <HAL_DCMI_Init+0x88>
  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8001798:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 800179c:	b90b      	cbnz	r3, 80017a2 <HAL_DCMI_Init+0x12>
    HAL_DCMI_MspInit(hdcmi);
 800179e:	f7ff fc1f 	bl	8000fe0 <HAL_DCMI_MspInit>
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80017a2:	2302      	movs	r3, #2
 80017a4:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80017a8:	69a3      	ldr	r3, [r4, #24]
 80017aa:	b10b      	cbz	r3, 80017b0 <HAL_DCMI_Init+0x20>
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80017ac:	2200      	movs	r2, #0
 80017ae:	6262      	str	r2, [r4, #36]	@ 0x24
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80017b0:	6822      	ldr	r2, [r4, #0]
 80017b2:	491a      	ldr	r1, [pc, #104]	@ (800181c <HAL_DCMI_Init+0x8c>)
 80017b4:	6810      	ldr	r0, [r2, #0]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80017b6:	6965      	ldr	r5, [r4, #20]
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80017b8:	4001      	ands	r1, r0
 80017ba:	6011      	str	r1, [r2, #0]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80017bc:	6861      	ldr	r1, [r4, #4]
 80017be:	6810      	ldr	r0, [r2, #0]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80017c0:	430b      	orrs	r3, r1
  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80017c2:	2910      	cmp	r1, #16
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80017c4:	ea43 0305 	orr.w	r3, r3, r5
 80017c8:	68e5      	ldr	r5, [r4, #12]
 80017ca:	ea43 0305 	orr.w	r3, r3, r5
 80017ce:	6925      	ldr	r5, [r4, #16]
 80017d0:	ea43 0305 	orr.w	r3, r3, r5
 80017d4:	68a5      	ldr	r5, [r4, #8]
 80017d6:	ea43 0305 	orr.w	r3, r3, r5
 80017da:	6a25      	ldr	r5, [r4, #32]
 80017dc:	ea43 0305 	orr.w	r3, r3, r5
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80017e0:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80017e2:	ea43 0305 	orr.w	r3, r3, r5
 80017e6:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 80017e8:	ea43 0305 	orr.w	r3, r3, r5
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80017ec:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 80017ee:	ea43 0305 	orr.w	r3, r3, r5
 80017f2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80017f4:	ea43 0305 	orr.w	r3, r3, r5
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80017f8:	ea43 0300 	orr.w	r3, r3, r0
 80017fc:	6013      	str	r3, [r2, #0]
  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80017fe:	d101      	bne.n	8001804 <HAL_DCMI_Init+0x74>
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8001800:	69e3      	ldr	r3, [r4, #28]
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001802:	6193      	str	r3, [r2, #24]
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001804:	68d3      	ldr	r3, [r2, #12]
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001806:	2000      	movs	r0, #0
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001808:	f043 031e 	orr.w	r3, r3, #30
 800180c:	60d3      	str	r3, [r2, #12]
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800180e:	2301      	movs	r3, #1
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001810:	64e0      	str	r0, [r4, #76]	@ 0x4c
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001812:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
}
 8001816:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001818:	2001      	movs	r0, #1
 800181a:	e7fc      	b.n	8001816 <HAL_DCMI_Init+0x86>
 800181c:	ffe0f007 	.word	0xffe0f007

08001820 <HAL_DCMI_Start_DMA>:
{
 8001820:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001822:	4604      	mov	r4, r0
  __HAL_LOCK(hdcmi);
 8001824:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
{
 8001828:	4615      	mov	r5, r2
  __HAL_LOCK(hdcmi);
 800182a:	2801      	cmp	r0, #1
 800182c:	f04f 0002 	mov.w	r0, #2
 8001830:	d02f      	beq.n	8001892 <HAL_DCMI_Start_DMA+0x72>
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001832:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
  __HAL_LOCK(hdcmi);
 8001836:	2701      	movs	r7, #1
  __HAL_DCMI_ENABLE(hdcmi);
 8001838:	6820      	ldr	r0, [r4, #0]
  if (Length <= 0xFFFFU)
 800183a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
  __HAL_LOCK(hdcmi);
 800183e:	f884 7034 	strb.w	r7, [r4, #52]	@ 0x34
  __HAL_DCMI_ENABLE(hdcmi);
 8001842:	6806      	ldr	r6, [r0, #0]
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8001844:	f8df e0ac 	ldr.w	lr, [pc, #172]	@ 80018f4 <HAL_DCMI_Start_DMA+0xd4>
  __HAL_DCMI_ENABLE(hdcmi);
 8001848:	f446 4680 	orr.w	r6, r6, #16384	@ 0x4000
 800184c:	6006      	str	r6, [r0, #0]
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 800184e:	6806      	ldr	r6, [r0, #0]
 8001850:	f026 0602 	bic.w	r6, r6, #2
 8001854:	6006      	str	r6, [r0, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8001856:	6806      	ldr	r6, [r0, #0]
 8001858:	ea46 0601 	orr.w	r6, r6, r1
 800185c:	4601      	mov	r1, r0
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 800185e:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8001860:	f841 6b28 	str.w	r6, [r1], #40
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8001864:	4e22      	ldr	r6, [pc, #136]	@ (80018f0 <HAL_DCMI_Start_DMA+0xd0>)
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8001866:	f8c0 e03c 	str.w	lr, [r0, #60]	@ 0x3c
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 800186a:	64c6      	str	r6, [r0, #76]	@ 0x4c
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 800186c:	f04f 0600 	mov.w	r6, #0
 8001870:	6506      	str	r6, [r0, #80]	@ 0x50
  hdcmi->XferCount = 0;
 8001872:	63a6      	str	r6, [r4, #56]	@ 0x38
  hdcmi->XferTransferNumber = 0;
 8001874:	6426      	str	r6, [r4, #64]	@ 0x40
  hdcmi->XferSize = 0;
 8001876:	63e6      	str	r6, [r4, #60]	@ 0x3c
  hdcmi->pBuffPtr = 0;
 8001878:	6466      	str	r6, [r4, #68]	@ 0x44
  if (Length <= 0xFFFFU)
 800187a:	d20c      	bcs.n	8001896 <HAL_DCMI_Start_DMA+0x76>
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 800187c:	f000 fc28 	bl	80020d0 <HAL_DMA_Start_IT>
 8001880:	b368      	cbz	r0, 80018de <HAL_DCMI_Start_DMA+0xbe>
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8001882:	2340      	movs	r3, #64	@ 0x40
 8001884:	64e3      	str	r3, [r4, #76]	@ 0x4c
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001886:	f884 7035 	strb.w	r7, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdcmi);
 800188a:	2300      	movs	r3, #0
      return HAL_ERROR;
 800188c:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdcmi);
 800188e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8001892:	b003      	add	sp, #12
 8001894:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8001896:	f8c0 e044 	str.w	lr, [r0, #68]	@ 0x44
    hdcmi->XferCount = 1;
 800189a:	63a7      	str	r7, [r4, #56]	@ 0x38
    hdcmi->pBuffPtr = pData;
 800189c:	6462      	str	r2, [r4, #68]	@ 0x44
    hdcmi->XferSize = Length;
 800189e:	63e3      	str	r3, [r4, #60]	@ 0x3c
    while (hdcmi->XferSize > 0xFFFFU)
 80018a0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80018a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018a6:	d213      	bcs.n	80018d0 <HAL_DCMI_Start_DMA+0xb0>
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 80018a8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80018aa:	3b02      	subs	r3, #2
 80018ac:	63a3      	str	r3, [r4, #56]	@ 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 80018ae:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80018b0:	6423      	str	r3, [r4, #64]	@ 0x40
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 80018b2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 80018b4:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80018b6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80018ba:	9200      	str	r2, [sp, #0]
 80018bc:	462a      	mov	r2, r5
 80018be:	f001 fa2b 	bl	8002d18 <HAL_DMAEx_MultiBufferStart_IT>
 80018c2:	b160      	cbz	r0, 80018de <HAL_DCMI_Start_DMA+0xbe>
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80018c4:	2340      	movs	r3, #64	@ 0x40
 80018c6:	64e3      	str	r3, [r4, #76]	@ 0x4c
      hdcmi->State = HAL_DCMI_STATE_READY;
 80018c8:	2301      	movs	r3, #1
 80018ca:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      return HAL_ERROR;
 80018ce:	e7dc      	b.n	800188a <HAL_DCMI_Start_DMA+0x6a>
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 80018d0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80018d2:	085b      	lsrs	r3, r3, #1
 80018d4:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 80018d6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	63a3      	str	r3, [r4, #56]	@ 0x38
 80018dc:	e7e0      	b.n	80018a0 <HAL_DCMI_Start_DMA+0x80>
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80018de:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdcmi);
 80018e0:	2000      	movs	r0, #0
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80018e2:	6813      	ldr	r3, [r2, #0]
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hdcmi);
 80018ea:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  return HAL_OK;
 80018ee:	e7d0      	b.n	8001892 <HAL_DCMI_Start_DMA+0x72>
 80018f0:	0800196f 	.word	0x0800196f
 80018f4:	08001713 	.word	0x08001713

080018f8 <HAL_DCMI_Stop>:
{
 80018f8:	b538      	push	{r3, r4, r5, lr}
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 80018fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001968 <HAL_DCMI_Stop+0x70>)
 80018fc:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
{
 8001900:	4604      	mov	r4, r0
 8001902:	2502      	movs	r5, #2
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	fbb3 f3f2 	udiv	r3, r3, r2
 800190a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800190e:	4353      	muls	r3, r2
  __HAL_LOCK(hdcmi);
 8001910:	f890 2034 	ldrb.w	r2, [r0, #52]	@ 0x34
 8001914:	2a01      	cmp	r2, #1
 8001916:	d01f      	beq.n	8001958 <HAL_DCMI_Stop+0x60>
 8001918:	2201      	movs	r2, #1
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800191a:	f880 5035 	strb.w	r5, [r0, #53]	@ 0x35
  __HAL_LOCK(hdcmi);
 800191e:	f880 2034 	strb.w	r2, [r0, #52]	@ 0x34
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8001922:	6802      	ldr	r2, [r0, #0]
 8001924:	6811      	ldr	r1, [r2, #0]
 8001926:	f021 0101 	bic.w	r1, r1, #1
 800192a:	6011      	str	r1, [r2, #0]
    if (count == 0U)
 800192c:	3b01      	subs	r3, #1
 800192e:	d115      	bne.n	800195c <HAL_DCMI_Stop+0x64>
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8001930:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
      status = HAL_TIMEOUT;
 8001932:	2503      	movs	r5, #3
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8001934:	f043 0320 	orr.w	r3, r3, #32
 8001938:	64e3      	str	r3, [r4, #76]	@ 0x4c
  __HAL_DCMI_DISABLE(hdcmi);
 800193a:	6813      	ldr	r3, [r2, #0]
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 800193c:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
  __HAL_DCMI_DISABLE(hdcmi);
 800193e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001942:	6013      	str	r3, [r2, #0]
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8001944:	f000 fcde 	bl	8002304 <HAL_DMA_Abort>
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8001948:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800194a:	64e3      	str	r3, [r4, #76]	@ 0x4c
  hdcmi->State = HAL_DCMI_STATE_READY;
 800194c:	2301      	movs	r3, #1
 800194e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdcmi);
 8001952:	2300      	movs	r3, #0
 8001954:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8001958:	4628      	mov	r0, r5
 800195a:	bd38      	pop	{r3, r4, r5, pc}
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 800195c:	6815      	ldr	r5, [r2, #0]
 800195e:	f015 0501 	ands.w	r5, r5, #1
 8001962:	d1e3      	bne.n	800192c <HAL_DCMI_Stop+0x34>
 8001964:	e7e9      	b.n	800193a <HAL_DCMI_Stop+0x42>
 8001966:	bf00      	nop
 8001968:	2400000c 	.word	0x2400000c

0800196c <HAL_DCMI_ErrorCallback>:
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
 800196c:	4770      	bx	lr

0800196e <DCMI_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800196e:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8001970:	b508      	push	{r3, lr}

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8001972:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8001974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001976:	2b02      	cmp	r3, #2
 8001978:	d006      	beq.n	8001988 <DCMI_DMAError+0x1a>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 800197a:	2301      	movs	r3, #1
 800197c:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8001980:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8001982:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001986:	64c3      	str	r3, [r0, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8001988:	f7ff fff0 	bl	800196c <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 800198c:	bd08      	pop	{r3, pc}

0800198e <HAL_DCMI_LineEventCallback>:
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
 800198e:	4770      	bx	lr

08001990 <HAL_DCMI_VsyncEventCallback>:
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
 8001990:	4770      	bx	lr
	...

08001994 <HAL_DCMI_IRQHandler>:
{
 8001994:	b538      	push	{r3, r4, r5, lr}
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8001996:	6803      	ldr	r3, [r0, #0]
{
 8001998:	4604      	mov	r4, r0
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 800199a:	691d      	ldr	r5, [r3, #16]
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 800199c:	0769      	lsls	r1, r5, #29
 800199e:	d50c      	bpl.n	80019ba <HAL_DCMI_IRQHandler+0x26>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80019a0:	2204      	movs	r2, #4
 80019a2:	615a      	str	r2, [r3, #20]
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80019a4:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80019a6:	f043 0302 	orr.w	r3, r3, #2
 80019aa:	64c3      	str	r3, [r0, #76]	@ 0x4c
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80019ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001a24 <HAL_DCMI_IRQHandler+0x90>)
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80019ae:	f880 2035 	strb.w	r2, [r0, #53]	@ 0x35
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80019b2:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 80019b4:	6503      	str	r3, [r0, #80]	@ 0x50
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80019b6:	f000 fe4b 	bl	8002650 <HAL_DMA_Abort_IT>
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 80019ba:	07aa      	lsls	r2, r5, #30
 80019bc:	d50e      	bpl.n	80019dc <HAL_DCMI_IRQHandler+0x48>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80019be:	6823      	ldr	r3, [r4, #0]
 80019c0:	2202      	movs	r2, #2
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80019c2:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80019c4:	615a      	str	r2, [r3, #20]
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 80019c6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	64e3      	str	r3, [r4, #76]	@ 0x4c
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80019ce:	2304      	movs	r3, #4
 80019d0:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80019d4:	4b13      	ldr	r3, [pc, #76]	@ (8001a24 <HAL_DCMI_IRQHandler+0x90>)
 80019d6:	6503      	str	r3, [r0, #80]	@ 0x50
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80019d8:	f000 fe3a 	bl	8002650 <HAL_DMA_Abort_IT>
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 80019dc:	06eb      	lsls	r3, r5, #27
 80019de:	d505      	bpl.n	80019ec <HAL_DCMI_IRQHandler+0x58>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 80019e0:	6823      	ldr	r3, [r4, #0]
 80019e2:	2210      	movs	r2, #16
    HAL_DCMI_LineEventCallback(hdcmi);
 80019e4:	4620      	mov	r0, r4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 80019e6:	615a      	str	r2, [r3, #20]
    HAL_DCMI_LineEventCallback(hdcmi);
 80019e8:	f7ff ffd1 	bl	800198e <HAL_DCMI_LineEventCallback>
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 80019ec:	0728      	lsls	r0, r5, #28
 80019ee:	d505      	bpl.n	80019fc <HAL_DCMI_IRQHandler+0x68>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 80019f0:	6823      	ldr	r3, [r4, #0]
 80019f2:	2208      	movs	r2, #8
    HAL_DCMI_VsyncEventCallback(hdcmi);
 80019f4:	4620      	mov	r0, r4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 80019f6:	615a      	str	r2, [r3, #20]
    HAL_DCMI_VsyncEventCallback(hdcmi);
 80019f8:	f7ff ffca 	bl	8001990 <HAL_DCMI_VsyncEventCallback>
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 80019fc:	07e9      	lsls	r1, r5, #31
 80019fe:	d510      	bpl.n	8001a22 <HAL_DCMI_IRQHandler+0x8e>
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001a00:	6823      	ldr	r3, [r4, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	0792      	lsls	r2, r2, #30
 8001a06:	d503      	bpl.n	8001a10 <HAL_DCMI_IRQHandler+0x7c>
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001a08:	68da      	ldr	r2, [r3, #12]
 8001a0a:	f022 021e 	bic.w	r2, r2, #30
 8001a0e:	60da      	str	r2, [r3, #12]
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001a10:	68da      	ldr	r2, [r3, #12]
    HAL_DCMI_FrameEventCallback(hdcmi);
 8001a12:	4620      	mov	r0, r4
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001a14:	f022 0201 	bic.w	r2, r2, #1
 8001a18:	60da      	str	r2, [r3, #12]
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	615a      	str	r2, [r3, #20]
    HAL_DCMI_FrameEventCallback(hdcmi);
 8001a1e:	f7fe ff93 	bl	8000948 <HAL_DCMI_FrameEventCallback>
}
 8001a22:	bd38      	pop	{r3, r4, r5, pc}
 8001a24:	0800196f 	.word	0x0800196f

08001a28 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a28:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001a2a:	f8df c17c 	ldr.w	ip, [pc, #380]	@ 8001ba8 <DMA_SetConfig+0x180>
 8001a2e:	6804      	ldr	r4, [r0, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a30:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001a32:	4564      	cmp	r4, ip
 8001a34:	d045      	beq.n	8001ac2 <DMA_SetConfig+0x9a>
 8001a36:	4d59      	ldr	r5, [pc, #356]	@ (8001b9c <DMA_SetConfig+0x174>)
 8001a38:	42ac      	cmp	r4, r5
 8001a3a:	d042      	beq.n	8001ac2 <DMA_SetConfig+0x9a>
 8001a3c:	3518      	adds	r5, #24
 8001a3e:	42ac      	cmp	r4, r5
 8001a40:	d03f      	beq.n	8001ac2 <DMA_SetConfig+0x9a>
 8001a42:	3518      	adds	r5, #24
 8001a44:	42ac      	cmp	r4, r5
 8001a46:	d03c      	beq.n	8001ac2 <DMA_SetConfig+0x9a>
 8001a48:	3518      	adds	r5, #24
 8001a4a:	42ac      	cmp	r4, r5
 8001a4c:	d039      	beq.n	8001ac2 <DMA_SetConfig+0x9a>
 8001a4e:	3518      	adds	r5, #24
 8001a50:	42ac      	cmp	r4, r5
 8001a52:	d036      	beq.n	8001ac2 <DMA_SetConfig+0x9a>
 8001a54:	3518      	adds	r5, #24
 8001a56:	42ac      	cmp	r4, r5
 8001a58:	d033      	beq.n	8001ac2 <DMA_SetConfig+0x9a>
 8001a5a:	3518      	adds	r5, #24
 8001a5c:	42ac      	cmp	r4, r5
 8001a5e:	d030      	beq.n	8001ac2 <DMA_SetConfig+0x9a>
 8001a60:	f505 7556 	add.w	r5, r5, #856	@ 0x358
 8001a64:	42ac      	cmp	r4, r5
 8001a66:	d02c      	beq.n	8001ac2 <DMA_SetConfig+0x9a>
 8001a68:	3518      	adds	r5, #24
 8001a6a:	42ac      	cmp	r4, r5
 8001a6c:	d029      	beq.n	8001ac2 <DMA_SetConfig+0x9a>
 8001a6e:	3518      	adds	r5, #24
 8001a70:	42ac      	cmp	r4, r5
 8001a72:	d026      	beq.n	8001ac2 <DMA_SetConfig+0x9a>
 8001a74:	3518      	adds	r5, #24
 8001a76:	42ac      	cmp	r4, r5
 8001a78:	d023      	beq.n	8001ac2 <DMA_SetConfig+0x9a>
 8001a7a:	3518      	adds	r5, #24
 8001a7c:	42ac      	cmp	r4, r5
 8001a7e:	d020      	beq.n	8001ac2 <DMA_SetConfig+0x9a>
 8001a80:	3518      	adds	r5, #24
 8001a82:	42ac      	cmp	r4, r5
 8001a84:	d01d      	beq.n	8001ac2 <DMA_SetConfig+0x9a>
 8001a86:	3518      	adds	r5, #24
 8001a88:	42ac      	cmp	r4, r5
 8001a8a:	d01a      	beq.n	8001ac2 <DMA_SetConfig+0x9a>
 8001a8c:	3518      	adds	r5, #24
 8001a8e:	42ac      	cmp	r4, r5
 8001a90:	d017      	beq.n	8001ac2 <DMA_SetConfig+0x9a>
 8001a92:	4d43      	ldr	r5, [pc, #268]	@ (8001ba0 <DMA_SetConfig+0x178>)
 8001a94:	42ac      	cmp	r4, r5
 8001a96:	d014      	beq.n	8001ac2 <DMA_SetConfig+0x9a>
 8001a98:	3514      	adds	r5, #20
 8001a9a:	42ac      	cmp	r4, r5
 8001a9c:	d011      	beq.n	8001ac2 <DMA_SetConfig+0x9a>
 8001a9e:	3514      	adds	r5, #20
 8001aa0:	42ac      	cmp	r4, r5
 8001aa2:	d00e      	beq.n	8001ac2 <DMA_SetConfig+0x9a>
 8001aa4:	3514      	adds	r5, #20
 8001aa6:	42ac      	cmp	r4, r5
 8001aa8:	d00b      	beq.n	8001ac2 <DMA_SetConfig+0x9a>
 8001aaa:	3514      	adds	r5, #20
 8001aac:	42ac      	cmp	r4, r5
 8001aae:	d008      	beq.n	8001ac2 <DMA_SetConfig+0x9a>
 8001ab0:	3514      	adds	r5, #20
 8001ab2:	42ac      	cmp	r4, r5
 8001ab4:	d005      	beq.n	8001ac2 <DMA_SetConfig+0x9a>
 8001ab6:	3514      	adds	r5, #20
 8001ab8:	42ac      	cmp	r4, r5
 8001aba:	d002      	beq.n	8001ac2 <DMA_SetConfig+0x9a>
 8001abc:	3514      	adds	r5, #20
 8001abe:	42ac      	cmp	r4, r5
 8001ac0:	d167      	bne.n	8001b92 <DMA_SetConfig+0x16a>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ac2:	e9d0 5619 	ldrd	r5, r6, [r0, #100]	@ 0x64
 8001ac6:	606e      	str	r6, [r5, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001ac8:	6ec5      	ldr	r5, [r0, #108]	@ 0x6c
 8001aca:	b115      	cbz	r5, 8001ad2 <DMA_SetConfig+0xaa>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001acc:	e9d0 561c 	ldrd	r5, r6, [r0, #112]	@ 0x70
 8001ad0:	606e      	str	r6, [r5, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ad2:	4564      	cmp	r4, ip
 8001ad4:	d037      	beq.n	8001b46 <DMA_SetConfig+0x11e>
 8001ad6:	4d31      	ldr	r5, [pc, #196]	@ (8001b9c <DMA_SetConfig+0x174>)
 8001ad8:	42ac      	cmp	r4, r5
 8001ada:	d034      	beq.n	8001b46 <DMA_SetConfig+0x11e>
 8001adc:	3518      	adds	r5, #24
 8001ade:	42ac      	cmp	r4, r5
 8001ae0:	d031      	beq.n	8001b46 <DMA_SetConfig+0x11e>
 8001ae2:	3518      	adds	r5, #24
 8001ae4:	42ac      	cmp	r4, r5
 8001ae6:	d02e      	beq.n	8001b46 <DMA_SetConfig+0x11e>
 8001ae8:	3518      	adds	r5, #24
 8001aea:	42ac      	cmp	r4, r5
 8001aec:	d02b      	beq.n	8001b46 <DMA_SetConfig+0x11e>
 8001aee:	3518      	adds	r5, #24
 8001af0:	42ac      	cmp	r4, r5
 8001af2:	d028      	beq.n	8001b46 <DMA_SetConfig+0x11e>
 8001af4:	3518      	adds	r5, #24
 8001af6:	42ac      	cmp	r4, r5
 8001af8:	d025      	beq.n	8001b46 <DMA_SetConfig+0x11e>
 8001afa:	3518      	adds	r5, #24
 8001afc:	42ac      	cmp	r4, r5
 8001afe:	d022      	beq.n	8001b46 <DMA_SetConfig+0x11e>
 8001b00:	f505 7556 	add.w	r5, r5, #856	@ 0x358
 8001b04:	42ac      	cmp	r4, r5
 8001b06:	d01e      	beq.n	8001b46 <DMA_SetConfig+0x11e>
 8001b08:	3518      	adds	r5, #24
 8001b0a:	42ac      	cmp	r4, r5
 8001b0c:	d01b      	beq.n	8001b46 <DMA_SetConfig+0x11e>
 8001b0e:	3518      	adds	r5, #24
 8001b10:	42ac      	cmp	r4, r5
 8001b12:	d018      	beq.n	8001b46 <DMA_SetConfig+0x11e>
 8001b14:	3518      	adds	r5, #24
 8001b16:	42ac      	cmp	r4, r5
 8001b18:	d015      	beq.n	8001b46 <DMA_SetConfig+0x11e>
 8001b1a:	3518      	adds	r5, #24
 8001b1c:	42ac      	cmp	r4, r5
 8001b1e:	d012      	beq.n	8001b46 <DMA_SetConfig+0x11e>
 8001b20:	3518      	adds	r5, #24
 8001b22:	42ac      	cmp	r4, r5
 8001b24:	d00f      	beq.n	8001b46 <DMA_SetConfig+0x11e>
 8001b26:	3518      	adds	r5, #24
 8001b28:	42ac      	cmp	r4, r5
 8001b2a:	d00c      	beq.n	8001b46 <DMA_SetConfig+0x11e>
 8001b2c:	3518      	adds	r5, #24
 8001b2e:	42ac      	cmp	r4, r5
 8001b30:	d009      	beq.n	8001b46 <DMA_SetConfig+0x11e>

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001b32:	4d1b      	ldr	r5, [pc, #108]	@ (8001ba0 <DMA_SetConfig+0x178>)
 8001b34:	42ac      	cmp	r4, r5
 8001b36:	d117      	bne.n	8001b68 <DMA_SetConfig+0x140>
  {
    /* Clear all flags */
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8001b38:	6dc5      	ldr	r5, [r0, #92]	@ 0x5c
 8001b3a:	f005 061f 	and.w	r6, r5, #31
 8001b3e:	2501      	movs	r5, #1
 8001b40:	40b5      	lsls	r5, r6
 8001b42:	607d      	str	r5, [r7, #4]
 8001b44:	e009      	b.n	8001b5a <DMA_SetConfig+0x132>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001b46:	6dc5      	ldr	r5, [r0, #92]	@ 0x5c
 8001b48:	f005 061f 	and.w	r6, r5, #31
 8001b4c:	253f      	movs	r5, #63	@ 0x3f
 8001b4e:	40b5      	lsls	r5, r6
 8001b50:	60bd      	str	r5, [r7, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b52:	6825      	ldr	r5, [r4, #0]
 8001b54:	f425 2580 	bic.w	r5, r5, #262144	@ 0x40000
 8001b58:	6025      	str	r5, [r4, #0]

    /* Configure DMA Channel data length */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8001b5a:	6063      	str	r3, [r4, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b5c:	6883      	ldr	r3, [r0, #8]
 8001b5e:	2b40      	cmp	r3, #64	@ 0x40
 8001b60:	d118      	bne.n	8001b94 <DMA_SetConfig+0x16c>
    {
      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8001b62:	60a2      	str	r2, [r4, #8]

      /* Configure DMA Channel source address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8001b64:	60e1      	str	r1, [r4, #12]
 8001b66:	e014      	b.n	8001b92 <DMA_SetConfig+0x16a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001b68:	4d0e      	ldr	r5, [pc, #56]	@ (8001ba4 <DMA_SetConfig+0x17c>)
 8001b6a:	42ac      	cmp	r4, r5
 8001b6c:	d0e4      	beq.n	8001b38 <DMA_SetConfig+0x110>
 8001b6e:	3514      	adds	r5, #20
 8001b70:	42ac      	cmp	r4, r5
 8001b72:	d0e1      	beq.n	8001b38 <DMA_SetConfig+0x110>
 8001b74:	3514      	adds	r5, #20
 8001b76:	42ac      	cmp	r4, r5
 8001b78:	d0de      	beq.n	8001b38 <DMA_SetConfig+0x110>
 8001b7a:	3514      	adds	r5, #20
 8001b7c:	42ac      	cmp	r4, r5
 8001b7e:	d0db      	beq.n	8001b38 <DMA_SetConfig+0x110>
 8001b80:	3514      	adds	r5, #20
 8001b82:	42ac      	cmp	r4, r5
 8001b84:	d0d8      	beq.n	8001b38 <DMA_SetConfig+0x110>
 8001b86:	3514      	adds	r5, #20
 8001b88:	42ac      	cmp	r4, r5
 8001b8a:	d0d5      	beq.n	8001b38 <DMA_SetConfig+0x110>
 8001b8c:	3514      	adds	r5, #20
 8001b8e:	42ac      	cmp	r4, r5
 8001b90:	d0d2      	beq.n	8001b38 <DMA_SetConfig+0x110>
  }
  else
  {
    /* Nothing To Do */
  }
}
 8001b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8001b94:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8001b96:	60e2      	str	r2, [r4, #12]
}
 8001b98:	e7fb      	b.n	8001b92 <DMA_SetConfig+0x16a>
 8001b9a:	bf00      	nop
 8001b9c:	40020028 	.word	0x40020028
 8001ba0:	58025408 	.word	0x58025408
 8001ba4:	5802541c 	.word	0x5802541c
 8001ba8:	40020010 	.word	0x40020010

08001bac <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001bac:	6803      	ldr	r3, [r0, #0]
{
 8001bae:	4602      	mov	r2, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001bb0:	4923      	ldr	r1, [pc, #140]	@ (8001c40 <DMA_CalcBaseAndBitshift+0x94>)
 8001bb2:	428b      	cmp	r3, r1
{
 8001bb4:	b510      	push	{r4, lr}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001bb6:	d031      	beq.n	8001c1c <DMA_CalcBaseAndBitshift+0x70>
 8001bb8:	3118      	adds	r1, #24
 8001bba:	428b      	cmp	r3, r1
 8001bbc:	d02e      	beq.n	8001c1c <DMA_CalcBaseAndBitshift+0x70>
 8001bbe:	3118      	adds	r1, #24
 8001bc0:	428b      	cmp	r3, r1
 8001bc2:	d02b      	beq.n	8001c1c <DMA_CalcBaseAndBitshift+0x70>
 8001bc4:	3118      	adds	r1, #24
 8001bc6:	428b      	cmp	r3, r1
 8001bc8:	d028      	beq.n	8001c1c <DMA_CalcBaseAndBitshift+0x70>
 8001bca:	3118      	adds	r1, #24
 8001bcc:	428b      	cmp	r3, r1
 8001bce:	d025      	beq.n	8001c1c <DMA_CalcBaseAndBitshift+0x70>
 8001bd0:	3118      	adds	r1, #24
 8001bd2:	428b      	cmp	r3, r1
 8001bd4:	d022      	beq.n	8001c1c <DMA_CalcBaseAndBitshift+0x70>
 8001bd6:	3118      	adds	r1, #24
 8001bd8:	428b      	cmp	r3, r1
 8001bda:	d01f      	beq.n	8001c1c <DMA_CalcBaseAndBitshift+0x70>
 8001bdc:	3118      	adds	r1, #24
 8001bde:	428b      	cmp	r3, r1
 8001be0:	d01c      	beq.n	8001c1c <DMA_CalcBaseAndBitshift+0x70>
 8001be2:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8001be6:	428b      	cmp	r3, r1
 8001be8:	d018      	beq.n	8001c1c <DMA_CalcBaseAndBitshift+0x70>
 8001bea:	3118      	adds	r1, #24
 8001bec:	428b      	cmp	r3, r1
 8001bee:	d015      	beq.n	8001c1c <DMA_CalcBaseAndBitshift+0x70>
 8001bf0:	3118      	adds	r1, #24
 8001bf2:	428b      	cmp	r3, r1
 8001bf4:	d012      	beq.n	8001c1c <DMA_CalcBaseAndBitshift+0x70>
 8001bf6:	3118      	adds	r1, #24
 8001bf8:	428b      	cmp	r3, r1
 8001bfa:	d00f      	beq.n	8001c1c <DMA_CalcBaseAndBitshift+0x70>
 8001bfc:	3118      	adds	r1, #24
 8001bfe:	428b      	cmp	r3, r1
 8001c00:	d00c      	beq.n	8001c1c <DMA_CalcBaseAndBitshift+0x70>
 8001c02:	3118      	adds	r1, #24
 8001c04:	428b      	cmp	r3, r1
 8001c06:	d009      	beq.n	8001c1c <DMA_CalcBaseAndBitshift+0x70>
 8001c08:	3118      	adds	r1, #24
 8001c0a:	428b      	cmp	r3, r1
 8001c0c:	d006      	beq.n	8001c1c <DMA_CalcBaseAndBitshift+0x70>
 8001c0e:	3118      	adds	r1, #24
 8001c10:	428b      	cmp	r3, r1
 8001c12:	d003      	beq.n	8001c1c <DMA_CalcBaseAndBitshift+0x70>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8001c14:	f023 00ff 	bic.w	r0, r3, #255	@ 0xff
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8001c18:	6590      	str	r0, [r2, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
}
 8001c1a:	bd10      	pop	{r4, pc}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001c1c:	b2dc      	uxtb	r4, r3
 8001c1e:	2118      	movs	r1, #24
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8001c20:	4808      	ldr	r0, [pc, #32]	@ (8001c44 <DMA_CalcBaseAndBitshift+0x98>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001c22:	3c10      	subs	r4, #16
 8001c24:	fbb4 f1f1 	udiv	r1, r4, r1
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8001c28:	f001 0107 	and.w	r1, r1, #7
    if (stream_number > 3U)
 8001c2c:	2c5f      	cmp	r4, #95	@ 0x5f
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8001c2e:	5c41      	ldrb	r1, [r0, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8001c30:	f423 707f 	bic.w	r0, r3, #1020	@ 0x3fc
 8001c34:	f020 0003 	bic.w	r0, r0, #3
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8001c38:	65d1      	str	r1, [r2, #92]	@ 0x5c
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8001c3a:	bf88      	it	hi
 8001c3c:	3004      	addhi	r0, #4
 8001c3e:	e7eb      	b.n	8001c18 <DMA_CalcBaseAndBitshift+0x6c>
 8001c40:	40020010 	.word	0x40020010
 8001c44:	0800ed2b 	.word	0x0800ed2b

08001c48 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8001c48:	6802      	ldr	r2, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001c4a:	4921      	ldr	r1, [pc, #132]	@ (8001cd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001c4c:	b2d3      	uxtb	r3, r2
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001c4e:	428a      	cmp	r2, r1
 8001c50:	d028      	beq.n	8001ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 8001c52:	3114      	adds	r1, #20
 8001c54:	428a      	cmp	r2, r1
 8001c56:	d025      	beq.n	8001ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 8001c58:	3114      	adds	r1, #20
 8001c5a:	428a      	cmp	r2, r1
 8001c5c:	d022      	beq.n	8001ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 8001c5e:	3114      	adds	r1, #20
 8001c60:	428a      	cmp	r2, r1
 8001c62:	d01f      	beq.n	8001ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 8001c64:	3114      	adds	r1, #20
 8001c66:	428a      	cmp	r2, r1
 8001c68:	d01c      	beq.n	8001ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 8001c6a:	3114      	adds	r1, #20
 8001c6c:	428a      	cmp	r2, r1
 8001c6e:	d019      	beq.n	8001ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 8001c70:	3114      	adds	r1, #20
 8001c72:	428a      	cmp	r2, r1
 8001c74:	d016      	beq.n	8001ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 8001c76:	3114      	adds	r1, #20
 8001c78:	428a      	cmp	r2, r1
 8001c7a:	d013      	beq.n	8001ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001c7c:	2118      	movs	r1, #24
 8001c7e:	3b10      	subs	r3, #16
 8001c80:	fbb3 f3f1 	udiv	r3, r3, r1

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8001c84:	4913      	ldr	r1, [pc, #76]	@ (8001cd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8001c86:	4411      	add	r1, r2
 8001c88:	29a8      	cmp	r1, #168	@ 0xa8
 8001c8a:	d91e      	bls.n	8001cca <DMA_CalcDMAMUXChannelBaseAndMask+0x82>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8001c8c:	f103 5280 	add.w	r2, r3, #268435456	@ 0x10000000
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001c90:	2101      	movs	r1, #1
 8001c92:	f003 031f 	and.w	r3, r3, #31
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8001c96:	f502 4202 	add.w	r2, r2, #33280	@ 0x8200
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9e:	490e      	ldr	r1, [pc, #56]	@ (8001cd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8001ca0:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001ca2:	e00e      	b.n	8001cc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x7a>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8001ca4:	2214      	movs	r2, #20
 8001ca6:	3b08      	subs	r3, #8
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001ca8:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8001caa:	fbb3 f3f2 	udiv	r3, r3, r2
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001cae:	f103 52b0 	add.w	r2, r3, #369098752	@ 0x16000000
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001cb2:	f003 031f 	and.w	r3, r3, #31
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001cb6:	f502 4216 	add.w	r2, r2, #38400	@ 0x9600
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001cba:	fa01 f303 	lsl.w	r3, r1, r3
 8001cbe:	4907      	ldr	r1, [pc, #28]	@ (8001cdc <DMA_CalcDMAMUXChannelBaseAndMask+0x94>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001cc0:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001cc2:	6683      	str	r3, [r0, #104]	@ 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8001cc4:	e9c0 2118 	strd	r2, r1, [r0, #96]	@ 0x60
  }
}
 8001cc8:	4770      	bx	lr
      stream_number += 8U;
 8001cca:	3308      	adds	r3, #8
 8001ccc:	e7de      	b.n	8001c8c <DMA_CalcDMAMUXChannelBaseAndMask+0x44>
 8001cce:	bf00      	nop
 8001cd0:	58025408 	.word	0x58025408
 8001cd4:	bffdfbf0 	.word	0xbffdfbf0
 8001cd8:	40020880 	.word	0x40020880
 8001cdc:	58025880 	.word	0x58025880

08001ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001ce0:	7902      	ldrb	r2, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8001ce2:	1e51      	subs	r1, r2, #1
 8001ce4:	2907      	cmp	r1, #7
{
 8001ce6:	b510      	push	{r4, lr}
  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8001ce8:	d821      	bhi.n	8001d2e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4e>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001cea:	6803      	ldr	r3, [r0, #0]
 8001cec:	4c13      	ldr	r4, [pc, #76]	@ (8001d3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x5c>)
 8001cee:	42a3      	cmp	r3, r4
 8001cf0:	d01e      	beq.n	8001d30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8001cf2:	3414      	adds	r4, #20
 8001cf4:	42a3      	cmp	r3, r4
 8001cf6:	d01b      	beq.n	8001d30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8001cf8:	3414      	adds	r4, #20
 8001cfa:	42a3      	cmp	r3, r4
 8001cfc:	d018      	beq.n	8001d30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8001cfe:	3414      	adds	r4, #20
 8001d00:	42a3      	cmp	r3, r4
 8001d02:	d015      	beq.n	8001d30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8001d04:	3414      	adds	r4, #20
 8001d06:	42a3      	cmp	r3, r4
 8001d08:	d012      	beq.n	8001d30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8001d0a:	3414      	adds	r4, #20
 8001d0c:	42a3      	cmp	r3, r4
 8001d0e:	d00f      	beq.n	8001d30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8001d10:	3414      	adds	r4, #20
 8001d12:	42a3      	cmp	r3, r4
 8001d14:	d00c      	beq.n	8001d30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8001d16:	3414      	adds	r4, #20
 8001d18:	42a3      	cmp	r3, r4
 8001d1a:	d009      	beq.n	8001d30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001d1c:	4b08      	ldr	r3, [pc, #32]	@ (8001d40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x60>)
 8001d1e:	4413      	add	r3, r2
 8001d20:	4a08      	ldr	r2, [pc, #32]	@ (8001d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x64>)
 8001d22:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8001d24:	e9c0 321b 	strd	r3, r2, [r0, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8001d28:	2301      	movs	r3, #1
 8001d2a:	408b      	lsls	r3, r1
 8001d2c:	6743      	str	r3, [r0, #116]	@ 0x74
  }
}
 8001d2e:	bd10      	pop	{r4, pc}
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8001d30:	4b05      	ldr	r3, [pc, #20]	@ (8001d48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>)
 8001d32:	4413      	add	r3, r2
 8001d34:	4a05      	ldr	r2, [pc, #20]	@ (8001d4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>)
 8001d36:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8001d38:	e7f4      	b.n	8001d24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>
 8001d3a:	bf00      	nop
 8001d3c:	58025408 	.word	0x58025408
 8001d40:	1000823f 	.word	0x1000823f
 8001d44:	40020940 	.word	0x40020940
 8001d48:	1600963f 	.word	0x1600963f
 8001d4c:	58025940 	.word	0x58025940

08001d50 <HAL_DMA_Init>:
{
 8001d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d52:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001d54:	f7ff fbf8 	bl	8001548 <HAL_GetTick>
 8001d58:	4606      	mov	r6, r0
  if(hdma == NULL)
 8001d5a:	2c00      	cmp	r4, #0
 8001d5c:	f000 80ee 	beq.w	8001f3c <HAL_DMA_Init+0x1ec>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001d60:	6823      	ldr	r3, [r4, #0]
 8001d62:	4d83      	ldr	r5, [pc, #524]	@ (8001f70 <HAL_DMA_Init+0x220>)
 8001d64:	42ab      	cmp	r3, r5
 8001d66:	d06a      	beq.n	8001e3e <HAL_DMA_Init+0xee>
 8001d68:	4a82      	ldr	r2, [pc, #520]	@ (8001f74 <HAL_DMA_Init+0x224>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d067      	beq.n	8001e3e <HAL_DMA_Init+0xee>
 8001d6e:	3218      	adds	r2, #24
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d064      	beq.n	8001e3e <HAL_DMA_Init+0xee>
 8001d74:	3218      	adds	r2, #24
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d061      	beq.n	8001e3e <HAL_DMA_Init+0xee>
 8001d7a:	3218      	adds	r2, #24
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d05e      	beq.n	8001e3e <HAL_DMA_Init+0xee>
 8001d80:	3218      	adds	r2, #24
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d05b      	beq.n	8001e3e <HAL_DMA_Init+0xee>
 8001d86:	3218      	adds	r2, #24
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d058      	beq.n	8001e3e <HAL_DMA_Init+0xee>
 8001d8c:	3218      	adds	r2, #24
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d055      	beq.n	8001e3e <HAL_DMA_Init+0xee>
 8001d92:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d051      	beq.n	8001e3e <HAL_DMA_Init+0xee>
 8001d9a:	3218      	adds	r2, #24
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d04e      	beq.n	8001e3e <HAL_DMA_Init+0xee>
 8001da0:	3218      	adds	r2, #24
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d04b      	beq.n	8001e3e <HAL_DMA_Init+0xee>
 8001da6:	3218      	adds	r2, #24
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d048      	beq.n	8001e3e <HAL_DMA_Init+0xee>
 8001dac:	3218      	adds	r2, #24
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d045      	beq.n	8001e3e <HAL_DMA_Init+0xee>
 8001db2:	3218      	adds	r2, #24
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d042      	beq.n	8001e3e <HAL_DMA_Init+0xee>
 8001db8:	3218      	adds	r2, #24
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d03f      	beq.n	8001e3e <HAL_DMA_Init+0xee>
 8001dbe:	3218      	adds	r2, #24
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d03c      	beq.n	8001e3e <HAL_DMA_Init+0xee>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001dc4:	4a6c      	ldr	r2, [pc, #432]	@ (8001f78 <HAL_DMA_Init+0x228>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	f040 8157 	bne.w	800207a <HAL_DMA_Init+0x32a>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dcc:	2202      	movs	r2, #2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001dce:	68a1      	ldr	r1, [r4, #8]
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dd0:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8001dd4:	2200      	movs	r2, #0
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001dd6:	2940      	cmp	r1, #64	@ 0x40
    __HAL_UNLOCK(hdma);
 8001dd8:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001ddc:	6818      	ldr	r0, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001dde:	f420 30ff 	bic.w	r0, r0, #130560	@ 0x1fe00
 8001de2:	f420 70f8 	bic.w	r0, r0, #496	@ 0x1f0
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001de6:	f000 8166 	beq.w	80020b6 <HAL_DMA_Init+0x366>
 8001dea:	f1a1 0280 	sub.w	r2, r1, #128	@ 0x80
 8001dee:	4251      	negs	r1, r2
 8001df0:	4151      	adcs	r1, r2
 8001df2:	0389      	lsls	r1, r1, #14
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001df4:	e9d4 6203 	ldrd	r6, r2, [r4, #12]
 8001df8:	08d2      	lsrs	r2, r2, #3
 8001dfa:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001dfe:	6966      	ldr	r6, [r4, #20]
 8001e00:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001e04:	69a6      	ldr	r6, [r4, #24]
 8001e06:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001e0a:	69e6      	ldr	r6, [r4, #28]
 8001e0c:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001e10:	6a26      	ldr	r6, [r4, #32]
 8001e12:	ea42 1216 	orr.w	r2, r2, r6, lsr #4
 8001e16:	4302      	orrs	r2, r0
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e18:	4620      	mov	r0, r4
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e1a:	4311      	orrs	r1, r2
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001e1c:	4a57      	ldr	r2, [pc, #348]	@ (8001f7c <HAL_DMA_Init+0x22c>)
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001e1e:	6019      	str	r1, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001e20:	441a      	add	r2, r3
 8001e22:	2314      	movs	r3, #20
 8001e24:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e28:	0092      	lsls	r2, r2, #2
 8001e2a:	65e2      	str	r2, [r4, #92]	@ 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e2c:	f7ff febe 	bl	8001bac <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e30:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001e32:	f003 021f 	and.w	r2, r3, #31
 8001e36:	2301      	movs	r3, #1
 8001e38:	4093      	lsls	r3, r2
 8001e3a:	6043      	str	r3, [r0, #4]
 8001e3c:	e0b4      	b.n	8001fa8 <HAL_DMA_Init+0x258>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e3e:	2202      	movs	r2, #2
    __HAL_DMA_DISABLE(hdma);
 8001e40:	42ab      	cmp	r3, r5
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e42:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8001e46:	f04f 0200 	mov.w	r2, #0
 8001e4a:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
    __HAL_DMA_DISABLE(hdma);
 8001e4e:	d01e      	beq.n	8001e8e <HAL_DMA_Init+0x13e>
 8001e50:	4a48      	ldr	r2, [pc, #288]	@ (8001f74 <HAL_DMA_Init+0x224>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d01b      	beq.n	8001e8e <HAL_DMA_Init+0x13e>
 8001e56:	3218      	adds	r2, #24
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d018      	beq.n	8001e8e <HAL_DMA_Init+0x13e>
 8001e5c:	3218      	adds	r2, #24
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d015      	beq.n	8001e8e <HAL_DMA_Init+0x13e>
 8001e62:	3218      	adds	r2, #24
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d012      	beq.n	8001e8e <HAL_DMA_Init+0x13e>
 8001e68:	3218      	adds	r2, #24
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d00f      	beq.n	8001e8e <HAL_DMA_Init+0x13e>
 8001e6e:	3218      	adds	r2, #24
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d00c      	beq.n	8001e8e <HAL_DMA_Init+0x13e>
 8001e74:	3218      	adds	r2, #24
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d009      	beq.n	8001e8e <HAL_DMA_Init+0x13e>
 8001e7a:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d005      	beq.n	8001e8e <HAL_DMA_Init+0x13e>
 8001e82:	3218      	adds	r2, #24
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d002      	beq.n	8001e8e <HAL_DMA_Init+0x13e>
 8001e88:	3218      	adds	r2, #24
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d0ff      	beq.n	8001e8e <HAL_DMA_Init+0x13e>
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	f022 0201 	bic.w	r2, r2, #1
 8001e94:	601a      	str	r2, [r3, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001e96:	6822      	ldr	r2, [r4, #0]
 8001e98:	6813      	ldr	r3, [r2, #0]
 8001e9a:	07df      	lsls	r7, r3, #31
 8001e9c:	d444      	bmi.n	8001f28 <HAL_DMA_Init+0x1d8>
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001e9e:	6813      	ldr	r3, [r2, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ea0:	4837      	ldr	r0, [pc, #220]	@ (8001f80 <HAL_DMA_Init+0x230>)
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ea2:	69a1      	ldr	r1, [r4, #24]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ea4:	4018      	ands	r0, r3
    registerValue |=  hdma->Init.Direction           |
 8001ea6:	e9d4 3602 	ldrd	r3, r6, [r4, #8]
 8001eaa:	4333      	orrs	r3, r6
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eac:	6926      	ldr	r6, [r4, #16]
 8001eae:	4333      	orrs	r3, r6
 8001eb0:	6966      	ldr	r6, [r4, #20]
 8001eb2:	4333      	orrs	r3, r6
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eb4:	69e6      	ldr	r6, [r4, #28]
 8001eb6:	430b      	orrs	r3, r1
 8001eb8:	4333      	orrs	r3, r6
            hdma->Init.Mode                | hdma->Init.Priority;
 8001eba:	6a26      	ldr	r6, [r4, #32]
 8001ebc:	4333      	orrs	r3, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ebe:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8001ec0:	2e04      	cmp	r6, #4
    registerValue |=  hdma->Init.Direction           |
 8001ec2:	ea43 0300 	orr.w	r3, r3, r0
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ec6:	bf02      	ittt	eq
 8001ec8:	e9d4 070b 	ldrdeq	r0, r7, [r4, #44]	@ 0x2c
 8001ecc:	4338      	orreq	r0, r7
 8001ece:	4303      	orreq	r3, r0
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001ed0:	482c      	ldr	r0, [pc, #176]	@ (8001f84 <HAL_DMA_Init+0x234>)
 8001ed2:	6800      	ldr	r0, [r0, #0]
 8001ed4:	0c00      	lsrs	r0, r0, #16
 8001ed6:	0400      	lsls	r0, r0, #16
 8001ed8:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 8001edc:	d30e      	bcc.n	8001efc <HAL_DMA_Init+0x1ac>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001ede:	6860      	ldr	r0, [r4, #4]
 8001ee0:	f1a0 0729 	sub.w	r7, r0, #41	@ 0x29
 8001ee4:	2f05      	cmp	r7, #5
 8001ee6:	d907      	bls.n	8001ef8 <HAL_DMA_Init+0x1a8>
 8001ee8:	383f      	subs	r0, #63	@ 0x3f
 8001eea:	2813      	cmp	r0, #19
 8001eec:	d806      	bhi.n	8001efc <HAL_DMA_Init+0x1ac>
 8001eee:	4f26      	ldr	r7, [pc, #152]	@ (8001f88 <HAL_DMA_Init+0x238>)
 8001ef0:	fa27 f000 	lsr.w	r0, r7, r0
 8001ef4:	07c0      	lsls	r0, r0, #31
 8001ef6:	d501      	bpl.n	8001efc <HAL_DMA_Init+0x1ac>
        registerValue |= DMA_SxCR_TRBUFF;
 8001ef8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001efc:	6013      	str	r3, [r2, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001efe:	2e04      	cmp	r6, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001f00:	6953      	ldr	r3, [r2, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f02:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8001f06:	ea43 0306 	orr.w	r3, r3, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f0a:	d143      	bne.n	8001f94 <HAL_DMA_Init+0x244>
      registerValue |= hdma->Init.FIFOThreshold;
 8001f0c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f0e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 8001f10:	4303      	orrs	r3, r0
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f12:	2e00      	cmp	r6, #0
 8001f14:	d03e      	beq.n	8001f94 <HAL_DMA_Init+0x244>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f16:	b999      	cbnz	r1, 8001f40 <HAL_DMA_Init+0x1f0>
    switch (hdma->Init.FIFOThreshold)
 8001f18:	2801      	cmp	r0, #1
 8001f1a:	d021      	beq.n	8001f60 <HAL_DMA_Init+0x210>
 8001f1c:	f030 0102 	bics.w	r1, r0, #2
 8001f20:	d138      	bne.n	8001f94 <HAL_DMA_Init+0x244>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f22:	01f1      	lsls	r1, r6, #7
 8001f24:	d536      	bpl.n	8001f94 <HAL_DMA_Init+0x244>
 8001f26:	e01e      	b.n	8001f66 <HAL_DMA_Init+0x216>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f28:	f7ff fb0e 	bl	8001548 <HAL_GetTick>
 8001f2c:	1b80      	subs	r0, r0, r6
 8001f2e:	2805      	cmp	r0, #5
 8001f30:	d9b1      	bls.n	8001e96 <HAL_DMA_Init+0x146>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f32:	2320      	movs	r3, #32
 8001f34:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8001f36:	2303      	movs	r3, #3
 8001f38:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 8001f3c:	2001      	movs	r0, #1
}
 8001f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f40:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8001f44:	d122      	bne.n	8001f8c <HAL_DMA_Init+0x23c>
    switch (hdma->Init.FIFOThreshold)
 8001f46:	2803      	cmp	r0, #3
 8001f48:	d824      	bhi.n	8001f94 <HAL_DMA_Init+0x244>
 8001f4a:	a101      	add	r1, pc, #4	@ (adr r1, 8001f50 <HAL_DMA_Init+0x200>)
 8001f4c:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 8001f50:	08001f67 	.word	0x08001f67
 8001f54:	08001f23 	.word	0x08001f23
 8001f58:	08001f67 	.word	0x08001f67
 8001f5c:	08001f61 	.word	0x08001f61
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f60:	f1b6 7fc0 	cmp.w	r6, #25165824	@ 0x1800000
 8001f64:	d116      	bne.n	8001f94 <HAL_DMA_Init+0x244>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f66:	2340      	movs	r3, #64	@ 0x40
 8001f68:	6563      	str	r3, [r4, #84]	@ 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e7e4      	b.n	8001f38 <HAL_DMA_Init+0x1e8>
 8001f6e:	bf00      	nop
 8001f70:	40020010 	.word	0x40020010
 8001f74:	40020028 	.word	0x40020028
 8001f78:	58025408 	.word	0x58025408
 8001f7c:	a7fdabf8 	.word	0xa7fdabf8
 8001f80:	fe10803f 	.word	0xfe10803f
 8001f84:	5c001000 	.word	0x5c001000
 8001f88:	000f030f 	.word	0x000f030f
    switch (hdma->Init.FIFOThreshold)
 8001f8c:	2802      	cmp	r0, #2
 8001f8e:	d9ea      	bls.n	8001f66 <HAL_DMA_Init+0x216>
 8001f90:	2803      	cmp	r0, #3
 8001f92:	d0c6      	beq.n	8001f22 <HAL_DMA_Init+0x1d2>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001f94:	6153      	str	r3, [r2, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f96:	4620      	mov	r0, r4
 8001f98:	f7ff fe08 	bl	8001bac <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001f9c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001f9e:	f003 021f 	and.w	r2, r3, #31
 8001fa2:	233f      	movs	r3, #63	@ 0x3f
 8001fa4:	4093      	lsls	r3, r2
 8001fa6:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001fa8:	6823      	ldr	r3, [r4, #0]
 8001faa:	42ab      	cmp	r3, r5
 8001fac:	d045      	beq.n	800203a <HAL_DMA_Init+0x2ea>
 8001fae:	4a45      	ldr	r2, [pc, #276]	@ (80020c4 <HAL_DMA_Init+0x374>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d042      	beq.n	800203a <HAL_DMA_Init+0x2ea>
 8001fb4:	3218      	adds	r2, #24
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d03f      	beq.n	800203a <HAL_DMA_Init+0x2ea>
 8001fba:	3218      	adds	r2, #24
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d03c      	beq.n	800203a <HAL_DMA_Init+0x2ea>
 8001fc0:	3218      	adds	r2, #24
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d039      	beq.n	800203a <HAL_DMA_Init+0x2ea>
 8001fc6:	3218      	adds	r2, #24
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d036      	beq.n	800203a <HAL_DMA_Init+0x2ea>
 8001fcc:	3218      	adds	r2, #24
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d033      	beq.n	800203a <HAL_DMA_Init+0x2ea>
 8001fd2:	3218      	adds	r2, #24
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d030      	beq.n	800203a <HAL_DMA_Init+0x2ea>
 8001fd8:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d02c      	beq.n	800203a <HAL_DMA_Init+0x2ea>
 8001fe0:	3218      	adds	r2, #24
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d029      	beq.n	800203a <HAL_DMA_Init+0x2ea>
 8001fe6:	3218      	adds	r2, #24
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d026      	beq.n	800203a <HAL_DMA_Init+0x2ea>
 8001fec:	3218      	adds	r2, #24
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d023      	beq.n	800203a <HAL_DMA_Init+0x2ea>
 8001ff2:	3218      	adds	r2, #24
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d020      	beq.n	800203a <HAL_DMA_Init+0x2ea>
 8001ff8:	3218      	adds	r2, #24
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d01d      	beq.n	800203a <HAL_DMA_Init+0x2ea>
 8001ffe:	3218      	adds	r2, #24
 8002000:	4293      	cmp	r3, r2
 8002002:	d01a      	beq.n	800203a <HAL_DMA_Init+0x2ea>
 8002004:	3218      	adds	r2, #24
 8002006:	4293      	cmp	r3, r2
 8002008:	d017      	beq.n	800203a <HAL_DMA_Init+0x2ea>
 800200a:	4a2f      	ldr	r2, [pc, #188]	@ (80020c8 <HAL_DMA_Init+0x378>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d014      	beq.n	800203a <HAL_DMA_Init+0x2ea>
 8002010:	3214      	adds	r2, #20
 8002012:	4293      	cmp	r3, r2
 8002014:	d011      	beq.n	800203a <HAL_DMA_Init+0x2ea>
 8002016:	3214      	adds	r2, #20
 8002018:	4293      	cmp	r3, r2
 800201a:	d00e      	beq.n	800203a <HAL_DMA_Init+0x2ea>
 800201c:	3214      	adds	r2, #20
 800201e:	4293      	cmp	r3, r2
 8002020:	d00b      	beq.n	800203a <HAL_DMA_Init+0x2ea>
 8002022:	3214      	adds	r2, #20
 8002024:	4293      	cmp	r3, r2
 8002026:	d008      	beq.n	800203a <HAL_DMA_Init+0x2ea>
 8002028:	3214      	adds	r2, #20
 800202a:	4293      	cmp	r3, r2
 800202c:	d005      	beq.n	800203a <HAL_DMA_Init+0x2ea>
 800202e:	3214      	adds	r2, #20
 8002030:	4293      	cmp	r3, r2
 8002032:	d002      	beq.n	800203a <HAL_DMA_Init+0x2ea>
 8002034:	3214      	adds	r2, #20
 8002036:	4293      	cmp	r3, r2
 8002038:	d119      	bne.n	800206e <HAL_DMA_Init+0x31e>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800203a:	4620      	mov	r0, r4
 800203c:	2500      	movs	r5, #0
 800203e:	f7ff fe03 	bl	8001c48 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002042:	68a3      	ldr	r3, [r4, #8]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002044:	6e22      	ldr	r2, [r4, #96]	@ 0x60
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002046:	2b80      	cmp	r3, #128	@ 0x80
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002048:	bf04      	itt	eq
 800204a:	2300      	moveq	r3, #0
 800204c:	6063      	streq	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800204e:	6863      	ldr	r3, [r4, #4]
 8002050:	b2d9      	uxtb	r1, r3
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002052:	3b01      	subs	r3, #1
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002054:	6011      	str	r1, [r2, #0]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002056:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002058:	e9d4 2119 	ldrd	r2, r1, [r4, #100]	@ 0x64
 800205c:	6051      	str	r1, [r2, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800205e:	d82c      	bhi.n	80020ba <HAL_DMA_Init+0x36a>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002060:	f7ff fe3e 	bl	8001ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002064:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8002066:	601d      	str	r5, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002068:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	@ 0x70
 800206c:	605a      	str	r2, [r3, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800206e:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002070:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002072:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002074:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8002078:	e761      	b.n	8001f3e <HAL_DMA_Init+0x1ee>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800207a:	4a14      	ldr	r2, [pc, #80]	@ (80020cc <HAL_DMA_Init+0x37c>)
 800207c:	4293      	cmp	r3, r2
 800207e:	f43f aea5 	beq.w	8001dcc <HAL_DMA_Init+0x7c>
 8002082:	3214      	adds	r2, #20
 8002084:	4293      	cmp	r3, r2
 8002086:	f43f aea1 	beq.w	8001dcc <HAL_DMA_Init+0x7c>
 800208a:	3214      	adds	r2, #20
 800208c:	4293      	cmp	r3, r2
 800208e:	f43f ae9d 	beq.w	8001dcc <HAL_DMA_Init+0x7c>
 8002092:	3214      	adds	r2, #20
 8002094:	4293      	cmp	r3, r2
 8002096:	f43f ae99 	beq.w	8001dcc <HAL_DMA_Init+0x7c>
 800209a:	3214      	adds	r2, #20
 800209c:	4293      	cmp	r3, r2
 800209e:	f43f ae95 	beq.w	8001dcc <HAL_DMA_Init+0x7c>
 80020a2:	3214      	adds	r2, #20
 80020a4:	4293      	cmp	r3, r2
 80020a6:	f43f ae91 	beq.w	8001dcc <HAL_DMA_Init+0x7c>
 80020aa:	3214      	adds	r2, #20
 80020ac:	4293      	cmp	r3, r2
 80020ae:	f43f ae8d 	beq.w	8001dcc <HAL_DMA_Init+0x7c>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020b2:	2340      	movs	r3, #64	@ 0x40
 80020b4:	e73e      	b.n	8001f34 <HAL_DMA_Init+0x1e4>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80020b6:	2110      	movs	r1, #16
 80020b8:	e69c      	b.n	8001df4 <HAL_DMA_Init+0xa4>
      hdma->DMAmuxRequestGenStatus = 0U;
 80020ba:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80020be:	6765      	str	r5, [r4, #116]	@ 0x74
 80020c0:	e7d5      	b.n	800206e <HAL_DMA_Init+0x31e>
 80020c2:	bf00      	nop
 80020c4:	40020028 	.word	0x40020028
 80020c8:	58025408 	.word	0x58025408
 80020cc:	5802541c 	.word	0x5802541c

080020d0 <HAL_DMA_Start_IT>:
{
 80020d0:	b570      	push	{r4, r5, r6, lr}
  if(hdma == NULL)
 80020d2:	2800      	cmp	r0, #0
 80020d4:	f000 810a 	beq.w	80022ec <HAL_DMA_Start_IT+0x21c>
  __HAL_LOCK(hdma);
 80020d8:	f890 4034 	ldrb.w	r4, [r0, #52]	@ 0x34
 80020dc:	2c01      	cmp	r4, #1
 80020de:	f000 8107 	beq.w	80022f0 <HAL_DMA_Start_IT+0x220>
 80020e2:	2401      	movs	r4, #1
 80020e4:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80020e8:	f890 4035 	ldrb.w	r4, [r0, #53]	@ 0x35
 80020ec:	2c01      	cmp	r4, #1
 80020ee:	f04f 0400 	mov.w	r4, #0
 80020f2:	f040 80f6 	bne.w	80022e2 <HAL_DMA_Start_IT+0x212>
    hdma->State = HAL_DMA_STATE_BUSY;
 80020f6:	2502      	movs	r5, #2
 80020f8:	f880 5035 	strb.w	r5, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 80020fc:	4d7d      	ldr	r5, [pc, #500]	@ (80022f4 <HAL_DMA_Start_IT+0x224>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020fe:	6544      	str	r4, [r0, #84]	@ 0x54
    __HAL_DMA_DISABLE(hdma);
 8002100:	6804      	ldr	r4, [r0, #0]
 8002102:	42ac      	cmp	r4, r5
 8002104:	d01e      	beq.n	8002144 <HAL_DMA_Start_IT+0x74>
 8002106:	4e7c      	ldr	r6, [pc, #496]	@ (80022f8 <HAL_DMA_Start_IT+0x228>)
 8002108:	42b4      	cmp	r4, r6
 800210a:	d01b      	beq.n	8002144 <HAL_DMA_Start_IT+0x74>
 800210c:	3618      	adds	r6, #24
 800210e:	42b4      	cmp	r4, r6
 8002110:	d018      	beq.n	8002144 <HAL_DMA_Start_IT+0x74>
 8002112:	3618      	adds	r6, #24
 8002114:	42b4      	cmp	r4, r6
 8002116:	d015      	beq.n	8002144 <HAL_DMA_Start_IT+0x74>
 8002118:	3618      	adds	r6, #24
 800211a:	42b4      	cmp	r4, r6
 800211c:	d012      	beq.n	8002144 <HAL_DMA_Start_IT+0x74>
 800211e:	3618      	adds	r6, #24
 8002120:	42b4      	cmp	r4, r6
 8002122:	d00f      	beq.n	8002144 <HAL_DMA_Start_IT+0x74>
 8002124:	3618      	adds	r6, #24
 8002126:	42b4      	cmp	r4, r6
 8002128:	d00c      	beq.n	8002144 <HAL_DMA_Start_IT+0x74>
 800212a:	3618      	adds	r6, #24
 800212c:	42b4      	cmp	r4, r6
 800212e:	d009      	beq.n	8002144 <HAL_DMA_Start_IT+0x74>
 8002130:	f506 7656 	add.w	r6, r6, #856	@ 0x358
 8002134:	42b4      	cmp	r4, r6
 8002136:	d005      	beq.n	8002144 <HAL_DMA_Start_IT+0x74>
 8002138:	3618      	adds	r6, #24
 800213a:	42b4      	cmp	r4, r6
 800213c:	d002      	beq.n	8002144 <HAL_DMA_Start_IT+0x74>
 800213e:	3618      	adds	r6, #24
 8002140:	42b4      	cmp	r4, r6
 8002142:	d0ff      	beq.n	8002144 <HAL_DMA_Start_IT+0x74>
 8002144:	6826      	ldr	r6, [r4, #0]
 8002146:	f026 0601 	bic.w	r6, r6, #1
 800214a:	6026      	str	r6, [r4, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800214c:	f7ff fc6c 	bl	8001a28 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002150:	42ac      	cmp	r4, r5
 8002152:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8002154:	d053      	beq.n	80021fe <HAL_DMA_Start_IT+0x12e>
 8002156:	4b68      	ldr	r3, [pc, #416]	@ (80022f8 <HAL_DMA_Start_IT+0x228>)
 8002158:	429c      	cmp	r4, r3
 800215a:	d050      	beq.n	80021fe <HAL_DMA_Start_IT+0x12e>
 800215c:	3318      	adds	r3, #24
 800215e:	429c      	cmp	r4, r3
 8002160:	d04d      	beq.n	80021fe <HAL_DMA_Start_IT+0x12e>
 8002162:	3318      	adds	r3, #24
 8002164:	429c      	cmp	r4, r3
 8002166:	d04a      	beq.n	80021fe <HAL_DMA_Start_IT+0x12e>
 8002168:	3318      	adds	r3, #24
 800216a:	429c      	cmp	r4, r3
 800216c:	d047      	beq.n	80021fe <HAL_DMA_Start_IT+0x12e>
 800216e:	3318      	adds	r3, #24
 8002170:	429c      	cmp	r4, r3
 8002172:	d044      	beq.n	80021fe <HAL_DMA_Start_IT+0x12e>
 8002174:	3318      	adds	r3, #24
 8002176:	429c      	cmp	r4, r3
 8002178:	d041      	beq.n	80021fe <HAL_DMA_Start_IT+0x12e>
 800217a:	3318      	adds	r3, #24
 800217c:	429c      	cmp	r4, r3
 800217e:	d03e      	beq.n	80021fe <HAL_DMA_Start_IT+0x12e>
 8002180:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8002184:	429c      	cmp	r4, r3
 8002186:	d03a      	beq.n	80021fe <HAL_DMA_Start_IT+0x12e>
 8002188:	3318      	adds	r3, #24
 800218a:	429c      	cmp	r4, r3
 800218c:	d037      	beq.n	80021fe <HAL_DMA_Start_IT+0x12e>
 800218e:	3318      	adds	r3, #24
 8002190:	429c      	cmp	r4, r3
 8002192:	d034      	beq.n	80021fe <HAL_DMA_Start_IT+0x12e>
 8002194:	3318      	adds	r3, #24
 8002196:	429c      	cmp	r4, r3
 8002198:	d031      	beq.n	80021fe <HAL_DMA_Start_IT+0x12e>
 800219a:	3318      	adds	r3, #24
 800219c:	429c      	cmp	r4, r3
 800219e:	d02e      	beq.n	80021fe <HAL_DMA_Start_IT+0x12e>
 80021a0:	3318      	adds	r3, #24
 80021a2:	429c      	cmp	r4, r3
 80021a4:	d02b      	beq.n	80021fe <HAL_DMA_Start_IT+0x12e>
 80021a6:	3318      	adds	r3, #24
 80021a8:	429c      	cmp	r4, r3
 80021aa:	d028      	beq.n	80021fe <HAL_DMA_Start_IT+0x12e>
 80021ac:	3318      	adds	r3, #24
 80021ae:	429c      	cmp	r4, r3
 80021b0:	d025      	beq.n	80021fe <HAL_DMA_Start_IT+0x12e>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80021b2:	6823      	ldr	r3, [r4, #0]
 80021b4:	f023 030e 	bic.w	r3, r3, #14
 80021b8:	f043 030a 	orr.w	r3, r3, #10
 80021bc:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80021be:	2a00      	cmp	r2, #0
 80021c0:	d156      	bne.n	8002270 <HAL_DMA_Start_IT+0x1a0>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021c2:	4b4e      	ldr	r3, [pc, #312]	@ (80022fc <HAL_DMA_Start_IT+0x22c>)
 80021c4:	429c      	cmp	r4, r3
 80021c6:	d027      	beq.n	8002218 <HAL_DMA_Start_IT+0x148>
 80021c8:	4b4d      	ldr	r3, [pc, #308]	@ (8002300 <HAL_DMA_Start_IT+0x230>)
 80021ca:	429c      	cmp	r4, r3
 80021cc:	d024      	beq.n	8002218 <HAL_DMA_Start_IT+0x148>
 80021ce:	3314      	adds	r3, #20
 80021d0:	429c      	cmp	r4, r3
 80021d2:	d021      	beq.n	8002218 <HAL_DMA_Start_IT+0x148>
 80021d4:	3314      	adds	r3, #20
 80021d6:	429c      	cmp	r4, r3
 80021d8:	d01e      	beq.n	8002218 <HAL_DMA_Start_IT+0x148>
 80021da:	3314      	adds	r3, #20
 80021dc:	429c      	cmp	r4, r3
 80021de:	d01b      	beq.n	8002218 <HAL_DMA_Start_IT+0x148>
 80021e0:	3314      	adds	r3, #20
 80021e2:	429c      	cmp	r4, r3
 80021e4:	d018      	beq.n	8002218 <HAL_DMA_Start_IT+0x148>
 80021e6:	3314      	adds	r3, #20
 80021e8:	429c      	cmp	r4, r3
 80021ea:	d015      	beq.n	8002218 <HAL_DMA_Start_IT+0x148>
 80021ec:	3314      	adds	r3, #20
 80021ee:	429c      	cmp	r4, r3
 80021f0:	d012      	beq.n	8002218 <HAL_DMA_Start_IT+0x148>
    __HAL_DMA_ENABLE(hdma);
 80021f2:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021f4:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80021f6:	f043 0301 	orr.w	r3, r3, #1
 80021fa:	6023      	str	r3, [r4, #0]
}
 80021fc:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80021fe:	6823      	ldr	r3, [r4, #0]
 8002200:	f023 031e 	bic.w	r3, r3, #30
 8002204:	f043 0316 	orr.w	r3, r3, #22
 8002208:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800220a:	b11a      	cbz	r2, 8002214 <HAL_DMA_Start_IT+0x144>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800220c:	6823      	ldr	r3, [r4, #0]
 800220e:	f043 0308 	orr.w	r3, r3, #8
 8002212:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002214:	42ac      	cmp	r4, r5
 8002216:	d130      	bne.n	800227a <HAL_DMA_Start_IT+0x1aa>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002218:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	03d2      	lsls	r2, r2, #15
 800221e:	d45b      	bmi.n	80022d8 <HAL_DMA_Start_IT+0x208>
      if(hdma->DMAmuxRequestGen != 0U)
 8002220:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8002222:	b11b      	cbz	r3, 800222c <HAL_DMA_Start_IT+0x15c>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800222a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 800222c:	42ac      	cmp	r4, r5
 800222e:	d0e0      	beq.n	80021f2 <HAL_DMA_Start_IT+0x122>
 8002230:	4b31      	ldr	r3, [pc, #196]	@ (80022f8 <HAL_DMA_Start_IT+0x228>)
 8002232:	429c      	cmp	r4, r3
 8002234:	d0dd      	beq.n	80021f2 <HAL_DMA_Start_IT+0x122>
 8002236:	3318      	adds	r3, #24
 8002238:	429c      	cmp	r4, r3
 800223a:	d0da      	beq.n	80021f2 <HAL_DMA_Start_IT+0x122>
 800223c:	3318      	adds	r3, #24
 800223e:	429c      	cmp	r4, r3
 8002240:	d0d7      	beq.n	80021f2 <HAL_DMA_Start_IT+0x122>
 8002242:	3318      	adds	r3, #24
 8002244:	429c      	cmp	r4, r3
 8002246:	d0d4      	beq.n	80021f2 <HAL_DMA_Start_IT+0x122>
 8002248:	3318      	adds	r3, #24
 800224a:	429c      	cmp	r4, r3
 800224c:	d0d1      	beq.n	80021f2 <HAL_DMA_Start_IT+0x122>
 800224e:	3318      	adds	r3, #24
 8002250:	429c      	cmp	r4, r3
 8002252:	d0ce      	beq.n	80021f2 <HAL_DMA_Start_IT+0x122>
 8002254:	3318      	adds	r3, #24
 8002256:	429c      	cmp	r4, r3
 8002258:	d0cb      	beq.n	80021f2 <HAL_DMA_Start_IT+0x122>
 800225a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800225e:	429c      	cmp	r4, r3
 8002260:	d0c7      	beq.n	80021f2 <HAL_DMA_Start_IT+0x122>
 8002262:	3318      	adds	r3, #24
 8002264:	429c      	cmp	r4, r3
 8002266:	d0c4      	beq.n	80021f2 <HAL_DMA_Start_IT+0x122>
 8002268:	3318      	adds	r3, #24
 800226a:	429c      	cmp	r4, r3
 800226c:	d0c1      	beq.n	80021f2 <HAL_DMA_Start_IT+0x122>
 800226e:	e7c0      	b.n	80021f2 <HAL_DMA_Start_IT+0x122>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002270:	6823      	ldr	r3, [r4, #0]
 8002272:	f043 0304 	orr.w	r3, r3, #4
 8002276:	6023      	str	r3, [r4, #0]
 8002278:	e7a3      	b.n	80021c2 <HAL_DMA_Start_IT+0xf2>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800227a:	4b1f      	ldr	r3, [pc, #124]	@ (80022f8 <HAL_DMA_Start_IT+0x228>)
 800227c:	429c      	cmp	r4, r3
 800227e:	d0cb      	beq.n	8002218 <HAL_DMA_Start_IT+0x148>
 8002280:	3318      	adds	r3, #24
 8002282:	429c      	cmp	r4, r3
 8002284:	d0c8      	beq.n	8002218 <HAL_DMA_Start_IT+0x148>
 8002286:	3318      	adds	r3, #24
 8002288:	429c      	cmp	r4, r3
 800228a:	d0c5      	beq.n	8002218 <HAL_DMA_Start_IT+0x148>
 800228c:	3318      	adds	r3, #24
 800228e:	429c      	cmp	r4, r3
 8002290:	d0c2      	beq.n	8002218 <HAL_DMA_Start_IT+0x148>
 8002292:	3318      	adds	r3, #24
 8002294:	429c      	cmp	r4, r3
 8002296:	d0bf      	beq.n	8002218 <HAL_DMA_Start_IT+0x148>
 8002298:	3318      	adds	r3, #24
 800229a:	429c      	cmp	r4, r3
 800229c:	d0bc      	beq.n	8002218 <HAL_DMA_Start_IT+0x148>
 800229e:	3318      	adds	r3, #24
 80022a0:	429c      	cmp	r4, r3
 80022a2:	d0b9      	beq.n	8002218 <HAL_DMA_Start_IT+0x148>
 80022a4:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80022a8:	429c      	cmp	r4, r3
 80022aa:	d0b5      	beq.n	8002218 <HAL_DMA_Start_IT+0x148>
 80022ac:	3318      	adds	r3, #24
 80022ae:	429c      	cmp	r4, r3
 80022b0:	d0b2      	beq.n	8002218 <HAL_DMA_Start_IT+0x148>
 80022b2:	3318      	adds	r3, #24
 80022b4:	429c      	cmp	r4, r3
 80022b6:	d0af      	beq.n	8002218 <HAL_DMA_Start_IT+0x148>
 80022b8:	3318      	adds	r3, #24
 80022ba:	429c      	cmp	r4, r3
 80022bc:	d0ac      	beq.n	8002218 <HAL_DMA_Start_IT+0x148>
 80022be:	3318      	adds	r3, #24
 80022c0:	429c      	cmp	r4, r3
 80022c2:	d0a9      	beq.n	8002218 <HAL_DMA_Start_IT+0x148>
 80022c4:	3318      	adds	r3, #24
 80022c6:	429c      	cmp	r4, r3
 80022c8:	d0a6      	beq.n	8002218 <HAL_DMA_Start_IT+0x148>
 80022ca:	3318      	adds	r3, #24
 80022cc:	429c      	cmp	r4, r3
 80022ce:	d0a3      	beq.n	8002218 <HAL_DMA_Start_IT+0x148>
 80022d0:	3318      	adds	r3, #24
 80022d2:	429c      	cmp	r4, r3
 80022d4:	d0a0      	beq.n	8002218 <HAL_DMA_Start_IT+0x148>
 80022d6:	e774      	b.n	80021c2 <HAL_DMA_Start_IT+0xf2>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	e79e      	b.n	8002220 <HAL_DMA_Start_IT+0x150>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80022e2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    __HAL_UNLOCK(hdma);
 80022e6:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80022ea:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 80022ec:	2001      	movs	r0, #1
 80022ee:	e785      	b.n	80021fc <HAL_DMA_Start_IT+0x12c>
  __HAL_LOCK(hdma);
 80022f0:	2002      	movs	r0, #2
 80022f2:	e783      	b.n	80021fc <HAL_DMA_Start_IT+0x12c>
 80022f4:	40020010 	.word	0x40020010
 80022f8:	40020028 	.word	0x40020028
 80022fc:	58025408 	.word	0x58025408
 8002300:	5802541c 	.word	0x5802541c

08002304 <HAL_DMA_Abort>:
{
 8002304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002306:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8002308:	f7ff f91e 	bl	8001548 <HAL_GetTick>
 800230c:	4607      	mov	r7, r0
  if(hdma == NULL)
 800230e:	b145      	cbz	r5, 8002322 <HAL_DMA_Abort+0x1e>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002310:	f895 3035 	ldrb.w	r3, [r5, #53]	@ 0x35
 8002314:	2b02      	cmp	r3, #2
 8002316:	d006      	beq.n	8002326 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002318:	2380      	movs	r3, #128	@ 0x80
 800231a:	656b      	str	r3, [r5, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 800231c:	2300      	movs	r3, #0
 800231e:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    return HAL_ERROR;
 8002322:	2001      	movs	r0, #1
}
 8002324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002326:	682c      	ldr	r4, [r5, #0]
 8002328:	4ea9      	ldr	r6, [pc, #676]	@ (80025d0 <HAL_DMA_Abort+0x2cc>)
 800232a:	42b4      	cmp	r4, r6
 800232c:	d04a      	beq.n	80023c4 <HAL_DMA_Abort+0xc0>
 800232e:	4ba9      	ldr	r3, [pc, #676]	@ (80025d4 <HAL_DMA_Abort+0x2d0>)
 8002330:	429c      	cmp	r4, r3
 8002332:	d047      	beq.n	80023c4 <HAL_DMA_Abort+0xc0>
 8002334:	3318      	adds	r3, #24
 8002336:	429c      	cmp	r4, r3
 8002338:	d044      	beq.n	80023c4 <HAL_DMA_Abort+0xc0>
 800233a:	3318      	adds	r3, #24
 800233c:	429c      	cmp	r4, r3
 800233e:	d041      	beq.n	80023c4 <HAL_DMA_Abort+0xc0>
 8002340:	3318      	adds	r3, #24
 8002342:	429c      	cmp	r4, r3
 8002344:	d03e      	beq.n	80023c4 <HAL_DMA_Abort+0xc0>
 8002346:	3318      	adds	r3, #24
 8002348:	429c      	cmp	r4, r3
 800234a:	d03b      	beq.n	80023c4 <HAL_DMA_Abort+0xc0>
 800234c:	3318      	adds	r3, #24
 800234e:	429c      	cmp	r4, r3
 8002350:	d038      	beq.n	80023c4 <HAL_DMA_Abort+0xc0>
 8002352:	3318      	adds	r3, #24
 8002354:	429c      	cmp	r4, r3
 8002356:	d035      	beq.n	80023c4 <HAL_DMA_Abort+0xc0>
 8002358:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800235c:	429c      	cmp	r4, r3
 800235e:	d031      	beq.n	80023c4 <HAL_DMA_Abort+0xc0>
 8002360:	3318      	adds	r3, #24
 8002362:	429c      	cmp	r4, r3
 8002364:	d02e      	beq.n	80023c4 <HAL_DMA_Abort+0xc0>
 8002366:	3318      	adds	r3, #24
 8002368:	429c      	cmp	r4, r3
 800236a:	d02b      	beq.n	80023c4 <HAL_DMA_Abort+0xc0>
 800236c:	3318      	adds	r3, #24
 800236e:	429c      	cmp	r4, r3
 8002370:	d028      	beq.n	80023c4 <HAL_DMA_Abort+0xc0>
 8002372:	3318      	adds	r3, #24
 8002374:	429c      	cmp	r4, r3
 8002376:	d025      	beq.n	80023c4 <HAL_DMA_Abort+0xc0>
 8002378:	3318      	adds	r3, #24
 800237a:	429c      	cmp	r4, r3
 800237c:	d022      	beq.n	80023c4 <HAL_DMA_Abort+0xc0>
 800237e:	3318      	adds	r3, #24
 8002380:	429c      	cmp	r4, r3
 8002382:	d01f      	beq.n	80023c4 <HAL_DMA_Abort+0xc0>
 8002384:	3318      	adds	r3, #24
 8002386:	429c      	cmp	r4, r3
 8002388:	d01c      	beq.n	80023c4 <HAL_DMA_Abort+0xc0>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800238a:	6823      	ldr	r3, [r4, #0]
 800238c:	f023 030e 	bic.w	r3, r3, #14
 8002390:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002392:	4b91      	ldr	r3, [pc, #580]	@ (80025d8 <HAL_DMA_Abort+0x2d4>)
 8002394:	429c      	cmp	r4, r3
 8002396:	d01f      	beq.n	80023d8 <HAL_DMA_Abort+0xd4>
 8002398:	3314      	adds	r3, #20
 800239a:	429c      	cmp	r4, r3
 800239c:	d01c      	beq.n	80023d8 <HAL_DMA_Abort+0xd4>
 800239e:	3314      	adds	r3, #20
 80023a0:	429c      	cmp	r4, r3
 80023a2:	d019      	beq.n	80023d8 <HAL_DMA_Abort+0xd4>
 80023a4:	3314      	adds	r3, #20
 80023a6:	429c      	cmp	r4, r3
 80023a8:	d016      	beq.n	80023d8 <HAL_DMA_Abort+0xd4>
 80023aa:	3314      	adds	r3, #20
 80023ac:	429c      	cmp	r4, r3
 80023ae:	d013      	beq.n	80023d8 <HAL_DMA_Abort+0xd4>
 80023b0:	3314      	adds	r3, #20
 80023b2:	429c      	cmp	r4, r3
 80023b4:	d010      	beq.n	80023d8 <HAL_DMA_Abort+0xd4>
 80023b6:	3314      	adds	r3, #20
 80023b8:	429c      	cmp	r4, r3
 80023ba:	d00d      	beq.n	80023d8 <HAL_DMA_Abort+0xd4>
 80023bc:	3314      	adds	r3, #20
 80023be:	429c      	cmp	r4, r3
 80023c0:	d112      	bne.n	80023e8 <HAL_DMA_Abort+0xe4>
 80023c2:	e009      	b.n	80023d8 <HAL_DMA_Abort+0xd4>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80023c4:	6823      	ldr	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80023c6:	42b4      	cmp	r4, r6
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80023c8:	f023 031e 	bic.w	r3, r3, #30
 80023cc:	6023      	str	r3, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80023ce:	6963      	ldr	r3, [r4, #20]
 80023d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80023d4:	6163      	str	r3, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80023d6:	d176      	bne.n	80024c6 <HAL_DMA_Abort+0x1c2>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80023d8:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
    __HAL_DMA_DISABLE(hdma);
 80023da:	42b4      	cmp	r4, r6
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80023dc:	6813      	ldr	r3, [r2, #0]
 80023de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023e2:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80023e4:	f040 80ab 	bne.w	800253e <HAL_DMA_Abort+0x23a>
 80023e8:	6823      	ldr	r3, [r4, #0]
 80023ea:	f023 0301 	bic.w	r3, r3, #1
 80023ee:	6023      	str	r3, [r4, #0]
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80023f0:	6823      	ldr	r3, [r4, #0]
 80023f2:	07db      	lsls	r3, r3, #31
 80023f4:	f100 80cd 	bmi.w	8002592 <HAL_DMA_Abort+0x28e>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80023f8:	682b      	ldr	r3, [r5, #0]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80023fa:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80023fc:	42b3      	cmp	r3, r6
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80023fe:	6da8      	ldr	r0, [r5, #88]	@ 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002400:	f002 021f 	and.w	r2, r2, #31
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002404:	f000 80d1 	beq.w	80025aa <HAL_DMA_Abort+0x2a6>
 8002408:	4972      	ldr	r1, [pc, #456]	@ (80025d4 <HAL_DMA_Abort+0x2d0>)
 800240a:	428b      	cmp	r3, r1
 800240c:	f000 80cd 	beq.w	80025aa <HAL_DMA_Abort+0x2a6>
 8002410:	3118      	adds	r1, #24
 8002412:	428b      	cmp	r3, r1
 8002414:	f000 80c9 	beq.w	80025aa <HAL_DMA_Abort+0x2a6>
 8002418:	3118      	adds	r1, #24
 800241a:	428b      	cmp	r3, r1
 800241c:	f000 80c5 	beq.w	80025aa <HAL_DMA_Abort+0x2a6>
 8002420:	3118      	adds	r1, #24
 8002422:	428b      	cmp	r3, r1
 8002424:	f000 80c1 	beq.w	80025aa <HAL_DMA_Abort+0x2a6>
 8002428:	3118      	adds	r1, #24
 800242a:	428b      	cmp	r3, r1
 800242c:	f000 80bd 	beq.w	80025aa <HAL_DMA_Abort+0x2a6>
 8002430:	3118      	adds	r1, #24
 8002432:	428b      	cmp	r3, r1
 8002434:	f000 80b9 	beq.w	80025aa <HAL_DMA_Abort+0x2a6>
 8002438:	3118      	adds	r1, #24
 800243a:	428b      	cmp	r3, r1
 800243c:	f000 80b5 	beq.w	80025aa <HAL_DMA_Abort+0x2a6>
 8002440:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8002444:	428b      	cmp	r3, r1
 8002446:	f000 80b0 	beq.w	80025aa <HAL_DMA_Abort+0x2a6>
 800244a:	3118      	adds	r1, #24
 800244c:	428b      	cmp	r3, r1
 800244e:	f000 80ac 	beq.w	80025aa <HAL_DMA_Abort+0x2a6>
 8002452:	3118      	adds	r1, #24
 8002454:	428b      	cmp	r3, r1
 8002456:	f000 80a8 	beq.w	80025aa <HAL_DMA_Abort+0x2a6>
 800245a:	3118      	adds	r1, #24
 800245c:	428b      	cmp	r3, r1
 800245e:	f000 80a4 	beq.w	80025aa <HAL_DMA_Abort+0x2a6>
 8002462:	3118      	adds	r1, #24
 8002464:	428b      	cmp	r3, r1
 8002466:	f000 80a0 	beq.w	80025aa <HAL_DMA_Abort+0x2a6>
 800246a:	3118      	adds	r1, #24
 800246c:	428b      	cmp	r3, r1
 800246e:	f000 809c 	beq.w	80025aa <HAL_DMA_Abort+0x2a6>
 8002472:	3118      	adds	r1, #24
 8002474:	428b      	cmp	r3, r1
 8002476:	f000 8098 	beq.w	80025aa <HAL_DMA_Abort+0x2a6>
 800247a:	3118      	adds	r1, #24
 800247c:	428b      	cmp	r3, r1
 800247e:	f000 8094 	beq.w	80025aa <HAL_DMA_Abort+0x2a6>
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002482:	2101      	movs	r1, #1
 8002484:	fa01 f202 	lsl.w	r2, r1, r2
 8002488:	6042      	str	r2, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800248a:	4a53      	ldr	r2, [pc, #332]	@ (80025d8 <HAL_DMA_Abort+0x2d4>)
 800248c:	4293      	cmp	r3, r2
 800248e:	f000 8092 	beq.w	80025b6 <HAL_DMA_Abort+0x2b2>
 8002492:	3214      	adds	r2, #20
 8002494:	4293      	cmp	r3, r2
 8002496:	f000 808e 	beq.w	80025b6 <HAL_DMA_Abort+0x2b2>
 800249a:	3214      	adds	r2, #20
 800249c:	4293      	cmp	r3, r2
 800249e:	f000 808a 	beq.w	80025b6 <HAL_DMA_Abort+0x2b2>
 80024a2:	3214      	adds	r2, #20
 80024a4:	4293      	cmp	r3, r2
 80024a6:	f000 8086 	beq.w	80025b6 <HAL_DMA_Abort+0x2b2>
 80024aa:	3214      	adds	r2, #20
 80024ac:	4293      	cmp	r3, r2
 80024ae:	f000 8082 	beq.w	80025b6 <HAL_DMA_Abort+0x2b2>
 80024b2:	3214      	adds	r2, #20
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d07e      	beq.n	80025b6 <HAL_DMA_Abort+0x2b2>
 80024b8:	3214      	adds	r2, #20
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d07b      	beq.n	80025b6 <HAL_DMA_Abort+0x2b2>
 80024be:	3214      	adds	r2, #20
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d17e      	bne.n	80025c2 <HAL_DMA_Abort+0x2be>
 80024c4:	e077      	b.n	80025b6 <HAL_DMA_Abort+0x2b2>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80024c6:	4b43      	ldr	r3, [pc, #268]	@ (80025d4 <HAL_DMA_Abort+0x2d0>)
 80024c8:	429c      	cmp	r4, r3
 80024ca:	d085      	beq.n	80023d8 <HAL_DMA_Abort+0xd4>
 80024cc:	3318      	adds	r3, #24
 80024ce:	429c      	cmp	r4, r3
 80024d0:	d082      	beq.n	80023d8 <HAL_DMA_Abort+0xd4>
 80024d2:	3318      	adds	r3, #24
 80024d4:	429c      	cmp	r4, r3
 80024d6:	f43f af7f 	beq.w	80023d8 <HAL_DMA_Abort+0xd4>
 80024da:	3318      	adds	r3, #24
 80024dc:	429c      	cmp	r4, r3
 80024de:	f43f af7b 	beq.w	80023d8 <HAL_DMA_Abort+0xd4>
 80024e2:	3318      	adds	r3, #24
 80024e4:	429c      	cmp	r4, r3
 80024e6:	f43f af77 	beq.w	80023d8 <HAL_DMA_Abort+0xd4>
 80024ea:	3318      	adds	r3, #24
 80024ec:	429c      	cmp	r4, r3
 80024ee:	f43f af73 	beq.w	80023d8 <HAL_DMA_Abort+0xd4>
 80024f2:	3318      	adds	r3, #24
 80024f4:	429c      	cmp	r4, r3
 80024f6:	f43f af6f 	beq.w	80023d8 <HAL_DMA_Abort+0xd4>
 80024fa:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80024fe:	429c      	cmp	r4, r3
 8002500:	f43f af6a 	beq.w	80023d8 <HAL_DMA_Abort+0xd4>
 8002504:	3318      	adds	r3, #24
 8002506:	429c      	cmp	r4, r3
 8002508:	f43f af66 	beq.w	80023d8 <HAL_DMA_Abort+0xd4>
 800250c:	3318      	adds	r3, #24
 800250e:	429c      	cmp	r4, r3
 8002510:	f43f af62 	beq.w	80023d8 <HAL_DMA_Abort+0xd4>
 8002514:	3318      	adds	r3, #24
 8002516:	429c      	cmp	r4, r3
 8002518:	f43f af5e 	beq.w	80023d8 <HAL_DMA_Abort+0xd4>
 800251c:	3318      	adds	r3, #24
 800251e:	429c      	cmp	r4, r3
 8002520:	f43f af5a 	beq.w	80023d8 <HAL_DMA_Abort+0xd4>
 8002524:	3318      	adds	r3, #24
 8002526:	429c      	cmp	r4, r3
 8002528:	f43f af56 	beq.w	80023d8 <HAL_DMA_Abort+0xd4>
 800252c:	3318      	adds	r3, #24
 800252e:	429c      	cmp	r4, r3
 8002530:	f43f af52 	beq.w	80023d8 <HAL_DMA_Abort+0xd4>
 8002534:	3318      	adds	r3, #24
 8002536:	429c      	cmp	r4, r3
 8002538:	f43f af4e 	beq.w	80023d8 <HAL_DMA_Abort+0xd4>
 800253c:	e729      	b.n	8002392 <HAL_DMA_Abort+0x8e>
    __HAL_DMA_DISABLE(hdma);
 800253e:	4b25      	ldr	r3, [pc, #148]	@ (80025d4 <HAL_DMA_Abort+0x2d0>)
 8002540:	429c      	cmp	r4, r3
 8002542:	f43f af51 	beq.w	80023e8 <HAL_DMA_Abort+0xe4>
 8002546:	3318      	adds	r3, #24
 8002548:	429c      	cmp	r4, r3
 800254a:	f43f af4d 	beq.w	80023e8 <HAL_DMA_Abort+0xe4>
 800254e:	3318      	adds	r3, #24
 8002550:	429c      	cmp	r4, r3
 8002552:	f43f af49 	beq.w	80023e8 <HAL_DMA_Abort+0xe4>
 8002556:	3318      	adds	r3, #24
 8002558:	429c      	cmp	r4, r3
 800255a:	f43f af45 	beq.w	80023e8 <HAL_DMA_Abort+0xe4>
 800255e:	3318      	adds	r3, #24
 8002560:	429c      	cmp	r4, r3
 8002562:	f43f af41 	beq.w	80023e8 <HAL_DMA_Abort+0xe4>
 8002566:	3318      	adds	r3, #24
 8002568:	429c      	cmp	r4, r3
 800256a:	f43f af3d 	beq.w	80023e8 <HAL_DMA_Abort+0xe4>
 800256e:	3318      	adds	r3, #24
 8002570:	429c      	cmp	r4, r3
 8002572:	f43f af39 	beq.w	80023e8 <HAL_DMA_Abort+0xe4>
 8002576:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800257a:	429c      	cmp	r4, r3
 800257c:	f43f af34 	beq.w	80023e8 <HAL_DMA_Abort+0xe4>
 8002580:	3318      	adds	r3, #24
 8002582:	429c      	cmp	r4, r3
 8002584:	f43f af30 	beq.w	80023e8 <HAL_DMA_Abort+0xe4>
 8002588:	3318      	adds	r3, #24
 800258a:	429c      	cmp	r4, r3
 800258c:	f43f af2c 	beq.w	80023e8 <HAL_DMA_Abort+0xe4>
 8002590:	e72a      	b.n	80023e8 <HAL_DMA_Abort+0xe4>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002592:	f7fe ffd9 	bl	8001548 <HAL_GetTick>
 8002596:	1bc0      	subs	r0, r0, r7
 8002598:	2805      	cmp	r0, #5
 800259a:	f67f af29 	bls.w	80023f0 <HAL_DMA_Abort+0xec>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800259e:	2320      	movs	r3, #32
 80025a0:	656b      	str	r3, [r5, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 80025a2:	2303      	movs	r3, #3
 80025a4:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 80025a8:	e6b8      	b.n	800231c <HAL_DMA_Abort+0x18>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80025aa:	213f      	movs	r1, #63	@ 0x3f
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80025ac:	42b3      	cmp	r3, r6
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80025ae:	fa01 f202 	lsl.w	r2, r1, r2
 80025b2:	6082      	str	r2, [r0, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80025b4:	d112      	bne.n	80025dc <HAL_DMA_Abort+0x2d8>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025b6:	e9d5 3219 	ldrd	r3, r2, [r5, #100]	@ 0x64
 80025ba:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 80025bc:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d13b      	bne.n	800263a <HAL_DMA_Abort+0x336>
    hdma->State = HAL_DMA_STATE_READY;
 80025c2:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 80025c4:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 80025c6:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 80025ca:	f885 0034 	strb.w	r0, [r5, #52]	@ 0x34
  return HAL_OK;
 80025ce:	e6a9      	b.n	8002324 <HAL_DMA_Abort+0x20>
 80025d0:	40020010 	.word	0x40020010
 80025d4:	40020028 	.word	0x40020028
 80025d8:	58025408 	.word	0x58025408
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80025dc:	4a1b      	ldr	r2, [pc, #108]	@ (800264c <HAL_DMA_Abort+0x348>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d0e9      	beq.n	80025b6 <HAL_DMA_Abort+0x2b2>
 80025e2:	3218      	adds	r2, #24
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d0e6      	beq.n	80025b6 <HAL_DMA_Abort+0x2b2>
 80025e8:	3218      	adds	r2, #24
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d0e3      	beq.n	80025b6 <HAL_DMA_Abort+0x2b2>
 80025ee:	3218      	adds	r2, #24
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d0e0      	beq.n	80025b6 <HAL_DMA_Abort+0x2b2>
 80025f4:	3218      	adds	r2, #24
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d0dd      	beq.n	80025b6 <HAL_DMA_Abort+0x2b2>
 80025fa:	3218      	adds	r2, #24
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d0da      	beq.n	80025b6 <HAL_DMA_Abort+0x2b2>
 8002600:	3218      	adds	r2, #24
 8002602:	4293      	cmp	r3, r2
 8002604:	d0d7      	beq.n	80025b6 <HAL_DMA_Abort+0x2b2>
 8002606:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 800260a:	4293      	cmp	r3, r2
 800260c:	d0d3      	beq.n	80025b6 <HAL_DMA_Abort+0x2b2>
 800260e:	3218      	adds	r2, #24
 8002610:	4293      	cmp	r3, r2
 8002612:	d0d0      	beq.n	80025b6 <HAL_DMA_Abort+0x2b2>
 8002614:	3218      	adds	r2, #24
 8002616:	4293      	cmp	r3, r2
 8002618:	d0cd      	beq.n	80025b6 <HAL_DMA_Abort+0x2b2>
 800261a:	3218      	adds	r2, #24
 800261c:	4293      	cmp	r3, r2
 800261e:	d0ca      	beq.n	80025b6 <HAL_DMA_Abort+0x2b2>
 8002620:	3218      	adds	r2, #24
 8002622:	4293      	cmp	r3, r2
 8002624:	d0c7      	beq.n	80025b6 <HAL_DMA_Abort+0x2b2>
 8002626:	3218      	adds	r2, #24
 8002628:	4293      	cmp	r3, r2
 800262a:	d0c4      	beq.n	80025b6 <HAL_DMA_Abort+0x2b2>
 800262c:	3218      	adds	r2, #24
 800262e:	4293      	cmp	r3, r2
 8002630:	d0c1      	beq.n	80025b6 <HAL_DMA_Abort+0x2b2>
 8002632:	3218      	adds	r2, #24
 8002634:	4293      	cmp	r3, r2
 8002636:	d0be      	beq.n	80025b6 <HAL_DMA_Abort+0x2b2>
 8002638:	e727      	b.n	800248a <HAL_DMA_Abort+0x186>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002640:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002642:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	@ 0x70
 8002646:	605a      	str	r2, [r3, #4]
 8002648:	e7bb      	b.n	80025c2 <HAL_DMA_Abort+0x2be>
 800264a:	bf00      	nop
 800264c:	40020028 	.word	0x40020028

08002650 <HAL_DMA_Abort_IT>:
{
 8002650:	b508      	push	{r3, lr}
  if(hdma == NULL)
 8002652:	b128      	cbz	r0, 8002660 <HAL_DMA_Abort_IT+0x10>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002654:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8002658:	2b02      	cmp	r3, #2
 800265a:	d003      	beq.n	8002664 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800265c:	2380      	movs	r3, #128	@ 0x80
 800265e:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8002660:	2001      	movs	r0, #1
 8002662:	e05d      	b.n	8002720 <HAL_DMA_Abort_IT+0xd0>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002664:	6803      	ldr	r3, [r0, #0]
 8002666:	4a3f      	ldr	r2, [pc, #252]	@ (8002764 <HAL_DMA_Abort_IT+0x114>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d051      	beq.n	8002710 <HAL_DMA_Abort_IT+0xc0>
 800266c:	3218      	adds	r2, #24
 800266e:	4293      	cmp	r3, r2
 8002670:	d04e      	beq.n	8002710 <HAL_DMA_Abort_IT+0xc0>
 8002672:	3218      	adds	r2, #24
 8002674:	4293      	cmp	r3, r2
 8002676:	d04b      	beq.n	8002710 <HAL_DMA_Abort_IT+0xc0>
 8002678:	3218      	adds	r2, #24
 800267a:	4293      	cmp	r3, r2
 800267c:	d048      	beq.n	8002710 <HAL_DMA_Abort_IT+0xc0>
 800267e:	3218      	adds	r2, #24
 8002680:	4293      	cmp	r3, r2
 8002682:	d045      	beq.n	8002710 <HAL_DMA_Abort_IT+0xc0>
 8002684:	3218      	adds	r2, #24
 8002686:	4293      	cmp	r3, r2
 8002688:	d042      	beq.n	8002710 <HAL_DMA_Abort_IT+0xc0>
 800268a:	3218      	adds	r2, #24
 800268c:	4293      	cmp	r3, r2
 800268e:	d03f      	beq.n	8002710 <HAL_DMA_Abort_IT+0xc0>
 8002690:	3218      	adds	r2, #24
 8002692:	4293      	cmp	r3, r2
 8002694:	d03c      	beq.n	8002710 <HAL_DMA_Abort_IT+0xc0>
 8002696:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 800269a:	4293      	cmp	r3, r2
 800269c:	d038      	beq.n	8002710 <HAL_DMA_Abort_IT+0xc0>
 800269e:	3218      	adds	r2, #24
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d035      	beq.n	8002710 <HAL_DMA_Abort_IT+0xc0>
 80026a4:	3218      	adds	r2, #24
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d032      	beq.n	8002710 <HAL_DMA_Abort_IT+0xc0>
 80026aa:	3218      	adds	r2, #24
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d02f      	beq.n	8002710 <HAL_DMA_Abort_IT+0xc0>
 80026b0:	3218      	adds	r2, #24
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d02c      	beq.n	8002710 <HAL_DMA_Abort_IT+0xc0>
 80026b6:	3218      	adds	r2, #24
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d029      	beq.n	8002710 <HAL_DMA_Abort_IT+0xc0>
 80026bc:	3218      	adds	r2, #24
 80026be:	4293      	cmp	r3, r2
 80026c0:	d026      	beq.n	8002710 <HAL_DMA_Abort_IT+0xc0>
 80026c2:	3218      	adds	r2, #24
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d023      	beq.n	8002710 <HAL_DMA_Abort_IT+0xc0>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	f022 020e 	bic.w	r2, r2, #14
 80026ce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	f022 0201 	bic.w	r2, r2, #1
 80026d6:	601a      	str	r2, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80026d8:	4a23      	ldr	r2, [pc, #140]	@ (8002768 <HAL_DMA_Abort_IT+0x118>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d121      	bne.n	8002722 <HAL_DMA_Abort_IT+0xd2>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80026de:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 80026e0:	6813      	ldr	r3, [r2, #0]
 80026e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026e6:	6013      	str	r3, [r2, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80026e8:	e9d0 1316 	ldrd	r1, r3, [r0, #88]	@ 0x58
 80026ec:	f003 021f 	and.w	r2, r3, #31
 80026f0:	2301      	movs	r3, #1
 80026f2:	4093      	lsls	r3, r2
 80026f4:	604b      	str	r3, [r1, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026f6:	e9d0 3219 	ldrd	r3, r2, [r0, #100]	@ 0x64
 80026fa:	605a      	str	r2, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 80026fc:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80026fe:	b32b      	cbz	r3, 800274c <HAL_DMA_Abort_IT+0xfc>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002706:	601a      	str	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002708:	e9d0 321c 	ldrd	r3, r2, [r0, #112]	@ 0x70
 800270c:	605a      	str	r2, [r3, #4]
 800270e:	e01d      	b.n	800274c <HAL_DMA_Abort_IT+0xfc>
      hdma->State = HAL_DMA_STATE_ABORT;
 8002710:	2204      	movs	r2, #4
 8002712:	f880 2035 	strb.w	r2, [r0, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	f022 0201 	bic.w	r2, r2, #1
 800271c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800271e:	2000      	movs	r0, #0
}
 8002720:	bd08      	pop	{r3, pc}
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002722:	4a12      	ldr	r2, [pc, #72]	@ (800276c <HAL_DMA_Abort_IT+0x11c>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d0da      	beq.n	80026de <HAL_DMA_Abort_IT+0x8e>
 8002728:	3214      	adds	r2, #20
 800272a:	4293      	cmp	r3, r2
 800272c:	d0d7      	beq.n	80026de <HAL_DMA_Abort_IT+0x8e>
 800272e:	3214      	adds	r2, #20
 8002730:	4293      	cmp	r3, r2
 8002732:	d0d4      	beq.n	80026de <HAL_DMA_Abort_IT+0x8e>
 8002734:	3214      	adds	r2, #20
 8002736:	4293      	cmp	r3, r2
 8002738:	d0d1      	beq.n	80026de <HAL_DMA_Abort_IT+0x8e>
 800273a:	3214      	adds	r2, #20
 800273c:	4293      	cmp	r3, r2
 800273e:	d0ce      	beq.n	80026de <HAL_DMA_Abort_IT+0x8e>
 8002740:	3214      	adds	r2, #20
 8002742:	4293      	cmp	r3, r2
 8002744:	d0cb      	beq.n	80026de <HAL_DMA_Abort_IT+0x8e>
 8002746:	3214      	adds	r2, #20
 8002748:	4293      	cmp	r3, r2
 800274a:	d0c8      	beq.n	80026de <HAL_DMA_Abort_IT+0x8e>
      hdma->State = HAL_DMA_STATE_READY;
 800274c:	2301      	movs	r3, #1
 800274e:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8002752:	2300      	movs	r3, #0
 8002754:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
      if(hdma->XferAbortCallback != NULL)
 8002758:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0df      	beq.n	800271e <HAL_DMA_Abort_IT+0xce>
        hdma->XferAbortCallback(hdma);
 800275e:	4798      	blx	r3
 8002760:	e7dd      	b.n	800271e <HAL_DMA_Abort_IT+0xce>
 8002762:	bf00      	nop
 8002764:	40020010 	.word	0x40020010
 8002768:	58025408 	.word	0x58025408
 800276c:	5802541c 	.word	0x5802541c

08002770 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0U;
 8002770:	2300      	movs	r3, #0
{
 8002772:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0U;
 8002776:	9301      	str	r3, [sp, #4]
{
 8002778:	4604      	mov	r4, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 800277a:	4b29      	ldr	r3, [pc, #164]	@ (8002820 <HAL_DMA_IRQHandler+0xb0>)
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800277c:	4e29      	ldr	r6, [pc, #164]	@ (8002824 <HAL_DMA_IRQHandler+0xb4>)
  uint32_t timeout = SystemCoreClock / 9600U;
 800277e:	681f      	ldr	r7, [r3, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002780:	6803      	ldr	r3, [r0, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002782:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002784:	42b3      	cmp	r3, r6
  tmpisr_dma  = regs_dma->ISR;
 8002786:	f8d5 8000 	ldr.w	r8, [r5]
  tmpisr_bdma = regs_bdma->ISR;
 800278a:	f8d5 c000 	ldr.w	ip, [r5]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800278e:	d04f      	beq.n	8002830 <HAL_DMA_IRQHandler+0xc0>
 8002790:	4a25      	ldr	r2, [pc, #148]	@ (8002828 <HAL_DMA_IRQHandler+0xb8>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d04c      	beq.n	8002830 <HAL_DMA_IRQHandler+0xc0>
 8002796:	3218      	adds	r2, #24
 8002798:	4293      	cmp	r3, r2
 800279a:	d049      	beq.n	8002830 <HAL_DMA_IRQHandler+0xc0>
 800279c:	3218      	adds	r2, #24
 800279e:	4293      	cmp	r3, r2
 80027a0:	d046      	beq.n	8002830 <HAL_DMA_IRQHandler+0xc0>
 80027a2:	3218      	adds	r2, #24
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d043      	beq.n	8002830 <HAL_DMA_IRQHandler+0xc0>
 80027a8:	3218      	adds	r2, #24
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d040      	beq.n	8002830 <HAL_DMA_IRQHandler+0xc0>
 80027ae:	3218      	adds	r2, #24
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d03d      	beq.n	8002830 <HAL_DMA_IRQHandler+0xc0>
 80027b4:	3218      	adds	r2, #24
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d03a      	beq.n	8002830 <HAL_DMA_IRQHandler+0xc0>
 80027ba:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 80027be:	4293      	cmp	r3, r2
 80027c0:	d036      	beq.n	8002830 <HAL_DMA_IRQHandler+0xc0>
 80027c2:	3218      	adds	r2, #24
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d033      	beq.n	8002830 <HAL_DMA_IRQHandler+0xc0>
 80027c8:	3218      	adds	r2, #24
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d030      	beq.n	8002830 <HAL_DMA_IRQHandler+0xc0>
 80027ce:	3218      	adds	r2, #24
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d02d      	beq.n	8002830 <HAL_DMA_IRQHandler+0xc0>
 80027d4:	3218      	adds	r2, #24
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d02a      	beq.n	8002830 <HAL_DMA_IRQHandler+0xc0>
 80027da:	3218      	adds	r2, #24
 80027dc:	4293      	cmp	r3, r2
 80027de:	d027      	beq.n	8002830 <HAL_DMA_IRQHandler+0xc0>
 80027e0:	3218      	adds	r2, #24
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d024      	beq.n	8002830 <HAL_DMA_IRQHandler+0xc0>
 80027e6:	3218      	adds	r2, #24
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d021      	beq.n	8002830 <HAL_DMA_IRQHandler+0xc0>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80027ec:	4a0f      	ldr	r2, [pc, #60]	@ (800282c <HAL_DMA_IRQHandler+0xbc>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	f040 8209 	bne.w	8002c06 <HAL_DMA_IRQHandler+0x496>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80027f4:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 80027f6:	2004      	movs	r0, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80027f8:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80027fa:	f001 011f 	and.w	r1, r1, #31
 80027fe:	4088      	lsls	r0, r1
 8002800:	ea10 0f0c 	tst.w	r0, ip
 8002804:	f000 8226 	beq.w	8002c54 <HAL_DMA_IRQHandler+0x4e4>
 8002808:	0756      	lsls	r6, r2, #29
 800280a:	f140 8223 	bpl.w	8002c54 <HAL_DMA_IRQHandler+0x4e4>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800280e:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002810:	6068      	str	r0, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002812:	f140 8217 	bpl.w	8002c44 <HAL_DMA_IRQHandler+0x4d4>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002816:	03d3      	lsls	r3, r2, #15
 8002818:	f100 821a 	bmi.w	8002c50 <HAL_DMA_IRQHandler+0x4e0>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800281c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800281e:	e17e      	b.n	8002b1e <HAL_DMA_IRQHandler+0x3ae>
 8002820:	2400000c 	.word	0x2400000c
 8002824:	40020010 	.word	0x40020010
 8002828:	40020028 	.word	0x40020028
 800282c:	58025408 	.word	0x58025408
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002830:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002832:	2008      	movs	r0, #8
 8002834:	f002 021f 	and.w	r2, r2, #31
 8002838:	4090      	lsls	r0, r2
 800283a:	ea10 0f08 	tst.w	r0, r8
 800283e:	d03d      	beq.n	80028bc <HAL_DMA_IRQHandler+0x14c>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002840:	42b3      	cmp	r3, r6
 8002842:	d02e      	beq.n	80028a2 <HAL_DMA_IRQHandler+0x132>
 8002844:	4984      	ldr	r1, [pc, #528]	@ (8002a58 <HAL_DMA_IRQHandler+0x2e8>)
 8002846:	428b      	cmp	r3, r1
 8002848:	d02b      	beq.n	80028a2 <HAL_DMA_IRQHandler+0x132>
 800284a:	3118      	adds	r1, #24
 800284c:	428b      	cmp	r3, r1
 800284e:	d028      	beq.n	80028a2 <HAL_DMA_IRQHandler+0x132>
 8002850:	3118      	adds	r1, #24
 8002852:	428b      	cmp	r3, r1
 8002854:	d025      	beq.n	80028a2 <HAL_DMA_IRQHandler+0x132>
 8002856:	3118      	adds	r1, #24
 8002858:	428b      	cmp	r3, r1
 800285a:	d022      	beq.n	80028a2 <HAL_DMA_IRQHandler+0x132>
 800285c:	3118      	adds	r1, #24
 800285e:	428b      	cmp	r3, r1
 8002860:	d01f      	beq.n	80028a2 <HAL_DMA_IRQHandler+0x132>
 8002862:	3118      	adds	r1, #24
 8002864:	428b      	cmp	r3, r1
 8002866:	d01c      	beq.n	80028a2 <HAL_DMA_IRQHandler+0x132>
 8002868:	3118      	adds	r1, #24
 800286a:	428b      	cmp	r3, r1
 800286c:	d019      	beq.n	80028a2 <HAL_DMA_IRQHandler+0x132>
 800286e:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8002872:	428b      	cmp	r3, r1
 8002874:	d015      	beq.n	80028a2 <HAL_DMA_IRQHandler+0x132>
 8002876:	3118      	adds	r1, #24
 8002878:	428b      	cmp	r3, r1
 800287a:	d012      	beq.n	80028a2 <HAL_DMA_IRQHandler+0x132>
 800287c:	3118      	adds	r1, #24
 800287e:	428b      	cmp	r3, r1
 8002880:	d00f      	beq.n	80028a2 <HAL_DMA_IRQHandler+0x132>
 8002882:	3118      	adds	r1, #24
 8002884:	428b      	cmp	r3, r1
 8002886:	d00c      	beq.n	80028a2 <HAL_DMA_IRQHandler+0x132>
 8002888:	3118      	adds	r1, #24
 800288a:	428b      	cmp	r3, r1
 800288c:	d009      	beq.n	80028a2 <HAL_DMA_IRQHandler+0x132>
 800288e:	3118      	adds	r1, #24
 8002890:	428b      	cmp	r3, r1
 8002892:	d006      	beq.n	80028a2 <HAL_DMA_IRQHandler+0x132>
 8002894:	3118      	adds	r1, #24
 8002896:	428b      	cmp	r3, r1
 8002898:	d003      	beq.n	80028a2 <HAL_DMA_IRQHandler+0x132>
 800289a:	3118      	adds	r1, #24
 800289c:	428b      	cmp	r3, r1
 800289e:	f040 80c1 	bne.w	8002a24 <HAL_DMA_IRQHandler+0x2b4>
 80028a2:	6819      	ldr	r1, [r3, #0]
 80028a4:	f3c1 0180 	ubfx	r1, r1, #2, #1
 80028a8:	b141      	cbz	r1, 80028bc <HAL_DMA_IRQHandler+0x14c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80028aa:	6819      	ldr	r1, [r3, #0]
 80028ac:	f021 0104 	bic.w	r1, r1, #4
 80028b0:	6019      	str	r1, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80028b2:	60a8      	str	r0, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028b4:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80028b6:	f041 0101 	orr.w	r1, r1, #1
 80028ba:	6561      	str	r1, [r4, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80028bc:	fa28 f102 	lsr.w	r1, r8, r2
 80028c0:	07c8      	lsls	r0, r1, #31
 80028c2:	d534      	bpl.n	800292e <HAL_DMA_IRQHandler+0x1be>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80028c4:	42b3      	cmp	r3, r6
 80028c6:	d02e      	beq.n	8002926 <HAL_DMA_IRQHandler+0x1b6>
 80028c8:	4963      	ldr	r1, [pc, #396]	@ (8002a58 <HAL_DMA_IRQHandler+0x2e8>)
 80028ca:	428b      	cmp	r3, r1
 80028cc:	d02b      	beq.n	8002926 <HAL_DMA_IRQHandler+0x1b6>
 80028ce:	3118      	adds	r1, #24
 80028d0:	428b      	cmp	r3, r1
 80028d2:	d028      	beq.n	8002926 <HAL_DMA_IRQHandler+0x1b6>
 80028d4:	3118      	adds	r1, #24
 80028d6:	428b      	cmp	r3, r1
 80028d8:	d025      	beq.n	8002926 <HAL_DMA_IRQHandler+0x1b6>
 80028da:	3118      	adds	r1, #24
 80028dc:	428b      	cmp	r3, r1
 80028de:	d022      	beq.n	8002926 <HAL_DMA_IRQHandler+0x1b6>
 80028e0:	3118      	adds	r1, #24
 80028e2:	428b      	cmp	r3, r1
 80028e4:	d01f      	beq.n	8002926 <HAL_DMA_IRQHandler+0x1b6>
 80028e6:	3118      	adds	r1, #24
 80028e8:	428b      	cmp	r3, r1
 80028ea:	d01c      	beq.n	8002926 <HAL_DMA_IRQHandler+0x1b6>
 80028ec:	3118      	adds	r1, #24
 80028ee:	428b      	cmp	r3, r1
 80028f0:	d019      	beq.n	8002926 <HAL_DMA_IRQHandler+0x1b6>
 80028f2:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 80028f6:	428b      	cmp	r3, r1
 80028f8:	d015      	beq.n	8002926 <HAL_DMA_IRQHandler+0x1b6>
 80028fa:	3118      	adds	r1, #24
 80028fc:	428b      	cmp	r3, r1
 80028fe:	d012      	beq.n	8002926 <HAL_DMA_IRQHandler+0x1b6>
 8002900:	3118      	adds	r1, #24
 8002902:	428b      	cmp	r3, r1
 8002904:	d00f      	beq.n	8002926 <HAL_DMA_IRQHandler+0x1b6>
 8002906:	3118      	adds	r1, #24
 8002908:	428b      	cmp	r3, r1
 800290a:	d00c      	beq.n	8002926 <HAL_DMA_IRQHandler+0x1b6>
 800290c:	3118      	adds	r1, #24
 800290e:	428b      	cmp	r3, r1
 8002910:	d009      	beq.n	8002926 <HAL_DMA_IRQHandler+0x1b6>
 8002912:	3118      	adds	r1, #24
 8002914:	428b      	cmp	r3, r1
 8002916:	d006      	beq.n	8002926 <HAL_DMA_IRQHandler+0x1b6>
 8002918:	3118      	adds	r1, #24
 800291a:	428b      	cmp	r3, r1
 800291c:	d003      	beq.n	8002926 <HAL_DMA_IRQHandler+0x1b6>
 800291e:	3118      	adds	r1, #24
 8002920:	428b      	cmp	r3, r1
 8002922:	f040 8083 	bne.w	8002a2c <HAL_DMA_IRQHandler+0x2bc>
 8002926:	6959      	ldr	r1, [r3, #20]
 8002928:	0609      	lsls	r1, r1, #24
 800292a:	f100 8081 	bmi.w	8002a30 <HAL_DMA_IRQHandler+0x2c0>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800292e:	2104      	movs	r1, #4
 8002930:	4091      	lsls	r1, r2
 8002932:	ea11 0f08 	tst.w	r1, r8
 8002936:	d032      	beq.n	800299e <HAL_DMA_IRQHandler+0x22e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002938:	42b3      	cmp	r3, r6
 800293a:	d02d      	beq.n	8002998 <HAL_DMA_IRQHandler+0x228>
 800293c:	4846      	ldr	r0, [pc, #280]	@ (8002a58 <HAL_DMA_IRQHandler+0x2e8>)
 800293e:	4283      	cmp	r3, r0
 8002940:	d02a      	beq.n	8002998 <HAL_DMA_IRQHandler+0x228>
 8002942:	3018      	adds	r0, #24
 8002944:	4283      	cmp	r3, r0
 8002946:	d027      	beq.n	8002998 <HAL_DMA_IRQHandler+0x228>
 8002948:	3018      	adds	r0, #24
 800294a:	4283      	cmp	r3, r0
 800294c:	d024      	beq.n	8002998 <HAL_DMA_IRQHandler+0x228>
 800294e:	3018      	adds	r0, #24
 8002950:	4283      	cmp	r3, r0
 8002952:	d021      	beq.n	8002998 <HAL_DMA_IRQHandler+0x228>
 8002954:	3018      	adds	r0, #24
 8002956:	4283      	cmp	r3, r0
 8002958:	d01e      	beq.n	8002998 <HAL_DMA_IRQHandler+0x228>
 800295a:	3018      	adds	r0, #24
 800295c:	4283      	cmp	r3, r0
 800295e:	d01b      	beq.n	8002998 <HAL_DMA_IRQHandler+0x228>
 8002960:	3018      	adds	r0, #24
 8002962:	4283      	cmp	r3, r0
 8002964:	d018      	beq.n	8002998 <HAL_DMA_IRQHandler+0x228>
 8002966:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 800296a:	4283      	cmp	r3, r0
 800296c:	d014      	beq.n	8002998 <HAL_DMA_IRQHandler+0x228>
 800296e:	3018      	adds	r0, #24
 8002970:	4283      	cmp	r3, r0
 8002972:	d011      	beq.n	8002998 <HAL_DMA_IRQHandler+0x228>
 8002974:	3018      	adds	r0, #24
 8002976:	4283      	cmp	r3, r0
 8002978:	d00e      	beq.n	8002998 <HAL_DMA_IRQHandler+0x228>
 800297a:	3018      	adds	r0, #24
 800297c:	4283      	cmp	r3, r0
 800297e:	d00b      	beq.n	8002998 <HAL_DMA_IRQHandler+0x228>
 8002980:	3018      	adds	r0, #24
 8002982:	4283      	cmp	r3, r0
 8002984:	d008      	beq.n	8002998 <HAL_DMA_IRQHandler+0x228>
 8002986:	3018      	adds	r0, #24
 8002988:	4283      	cmp	r3, r0
 800298a:	d005      	beq.n	8002998 <HAL_DMA_IRQHandler+0x228>
 800298c:	3018      	adds	r0, #24
 800298e:	4283      	cmp	r3, r0
 8002990:	d002      	beq.n	8002998 <HAL_DMA_IRQHandler+0x228>
 8002992:	3018      	adds	r0, #24
 8002994:	4283      	cmp	r3, r0
 8002996:	d153      	bne.n	8002a40 <HAL_DMA_IRQHandler+0x2d0>
 8002998:	6818      	ldr	r0, [r3, #0]
 800299a:	0780      	lsls	r0, r0, #30
 800299c:	d452      	bmi.n	8002a44 <HAL_DMA_IRQHandler+0x2d4>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800299e:	2110      	movs	r1, #16
 80029a0:	4091      	lsls	r1, r2
 80029a2:	ea11 0f08 	tst.w	r1, r8
 80029a6:	d05d      	beq.n	8002a64 <HAL_DMA_IRQHandler+0x2f4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80029a8:	42b3      	cmp	r3, r6
 80029aa:	d02d      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x298>
 80029ac:	4a2a      	ldr	r2, [pc, #168]	@ (8002a58 <HAL_DMA_IRQHandler+0x2e8>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d02a      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x298>
 80029b2:	3218      	adds	r2, #24
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d027      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x298>
 80029b8:	3218      	adds	r2, #24
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d024      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x298>
 80029be:	3218      	adds	r2, #24
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d021      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x298>
 80029c4:	3218      	adds	r2, #24
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d01e      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x298>
 80029ca:	3218      	adds	r2, #24
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d01b      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x298>
 80029d0:	3218      	adds	r2, #24
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d018      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x298>
 80029d6:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 80029da:	4293      	cmp	r3, r2
 80029dc:	d014      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x298>
 80029de:	3218      	adds	r2, #24
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d011      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x298>
 80029e4:	3218      	adds	r2, #24
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d00e      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x298>
 80029ea:	3218      	adds	r2, #24
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d00b      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x298>
 80029f0:	3218      	adds	r2, #24
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d008      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x298>
 80029f6:	3218      	adds	r2, #24
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d005      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x298>
 80029fc:	3218      	adds	r2, #24
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d002      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x298>
 8002a02:	3218      	adds	r2, #24
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d123      	bne.n	8002a50 <HAL_DMA_IRQHandler+0x2e0>
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8002a0e:	b34a      	cbz	r2, 8002a64 <HAL_DMA_IRQHandler+0x2f4>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002a10:	60a9      	str	r1, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	0350      	lsls	r0, r2, #13
 8002a16:	f140 808a 	bpl.w	8002b2e <HAL_DMA_IRQHandler+0x3be>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	0319      	lsls	r1, r3, #12
 8002a1e:	d41d      	bmi.n	8002a5c <HAL_DMA_IRQHandler+0x2ec>
          if(hdma->XferHalfCpltCallback != NULL)
 8002a20:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002a22:	e01c      	b.n	8002a5e <HAL_DMA_IRQHandler+0x2ee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002a24:	6819      	ldr	r1, [r3, #0]
 8002a26:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 8002a2a:	e73d      	b.n	80028a8 <HAL_DMA_IRQHandler+0x138>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002a2c:	6819      	ldr	r1, [r3, #0]
 8002a2e:	e77e      	b.n	800292e <HAL_DMA_IRQHandler+0x1be>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002a30:	2101      	movs	r1, #1
 8002a32:	4091      	lsls	r1, r2
 8002a34:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a36:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8002a38:	f041 0102 	orr.w	r1, r1, #2
 8002a3c:	6561      	str	r1, [r4, #84]	@ 0x54
 8002a3e:	e776      	b.n	800292e <HAL_DMA_IRQHandler+0x1be>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002a40:	6819      	ldr	r1, [r3, #0]
 8002a42:	e7ac      	b.n	800299e <HAL_DMA_IRQHandler+0x22e>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002a44:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a46:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8002a48:	f041 0104 	orr.w	r1, r1, #4
 8002a4c:	6561      	str	r1, [r4, #84]	@ 0x54
 8002a4e:	e7a6      	b.n	800299e <HAL_DMA_IRQHandler+0x22e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8002a56:	e7da      	b.n	8002a0e <HAL_DMA_IRQHandler+0x29e>
 8002a58:	40020028 	.word	0x40020028
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002a5c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
          if(hdma->XferHalfCpltCallback != NULL)
 8002a5e:	b10b      	cbz	r3, 8002a64 <HAL_DMA_IRQHandler+0x2f4>
            hdma->XferHalfCpltCallback(hdma);
 8002a60:	4620      	mov	r0, r4
 8002a62:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002a64:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8002a66:	2020      	movs	r0, #32
 8002a68:	f001 011f 	and.w	r1, r1, #31
 8002a6c:	4088      	lsls	r0, r1
 8002a6e:	ea10 0f08 	tst.w	r0, r8
 8002a72:	d072      	beq.n	8002b5a <HAL_DMA_IRQHandler+0x3ea>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002a74:	6823      	ldr	r3, [r4, #0]
 8002a76:	42b3      	cmp	r3, r6
 8002a78:	d02d      	beq.n	8002ad6 <HAL_DMA_IRQHandler+0x366>
 8002a7a:	4a8d      	ldr	r2, [pc, #564]	@ (8002cb0 <HAL_DMA_IRQHandler+0x540>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d02a      	beq.n	8002ad6 <HAL_DMA_IRQHandler+0x366>
 8002a80:	3218      	adds	r2, #24
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d027      	beq.n	8002ad6 <HAL_DMA_IRQHandler+0x366>
 8002a86:	3218      	adds	r2, #24
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d024      	beq.n	8002ad6 <HAL_DMA_IRQHandler+0x366>
 8002a8c:	3218      	adds	r2, #24
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d021      	beq.n	8002ad6 <HAL_DMA_IRQHandler+0x366>
 8002a92:	3218      	adds	r2, #24
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d01e      	beq.n	8002ad6 <HAL_DMA_IRQHandler+0x366>
 8002a98:	3218      	adds	r2, #24
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d01b      	beq.n	8002ad6 <HAL_DMA_IRQHandler+0x366>
 8002a9e:	3218      	adds	r2, #24
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d018      	beq.n	8002ad6 <HAL_DMA_IRQHandler+0x366>
 8002aa4:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d014      	beq.n	8002ad6 <HAL_DMA_IRQHandler+0x366>
 8002aac:	3218      	adds	r2, #24
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d011      	beq.n	8002ad6 <HAL_DMA_IRQHandler+0x366>
 8002ab2:	3218      	adds	r2, #24
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d00e      	beq.n	8002ad6 <HAL_DMA_IRQHandler+0x366>
 8002ab8:	3218      	adds	r2, #24
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d00b      	beq.n	8002ad6 <HAL_DMA_IRQHandler+0x366>
 8002abe:	3218      	adds	r2, #24
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d008      	beq.n	8002ad6 <HAL_DMA_IRQHandler+0x366>
 8002ac4:	3218      	adds	r2, #24
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d005      	beq.n	8002ad6 <HAL_DMA_IRQHandler+0x366>
 8002aca:	3218      	adds	r2, #24
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d002      	beq.n	8002ad6 <HAL_DMA_IRQHandler+0x366>
 8002ad0:	3218      	adds	r2, #24
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d134      	bne.n	8002b40 <HAL_DMA_IRQHandler+0x3d0>
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8002adc:	2a00      	cmp	r2, #0
 8002ade:	d03c      	beq.n	8002b5a <HAL_DMA_IRQHandler+0x3ea>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ae0:	60a8      	str	r0, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ae2:	f894 2035 	ldrb.w	r2, [r4, #53]	@ 0x35
 8002ae6:	2a04      	cmp	r2, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ae8:	681a      	ldr	r2, [r3, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002aea:	d12d      	bne.n	8002b48 <HAL_DMA_IRQHandler+0x3d8>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002aec:	f022 0216 	bic.w	r2, r2, #22
 8002af0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002af2:	695a      	ldr	r2, [r3, #20]
 8002af4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002af8:	615a      	str	r2, [r3, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002afa:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002afc:	b90a      	cbnz	r2, 8002b02 <HAL_DMA_IRQHandler+0x392>
 8002afe:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8002b00:	b11a      	cbz	r2, 8002b0a <HAL_DMA_IRQHandler+0x39a>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	f022 0208 	bic.w	r2, r2, #8
 8002b08:	601a      	str	r2, [r3, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002b0a:	233f      	movs	r3, #63	@ 0x3f
 8002b0c:	408b      	lsls	r3, r1
 8002b0e:	60ab      	str	r3, [r5, #8]
          hdma->State = HAL_DMA_STATE_READY;
 8002b10:	2301      	movs	r3, #1
 8002b12:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8002b16:	2300      	movs	r3, #0
 8002b18:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
          if(hdma->XferAbortCallback != NULL)
 8002b1c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
      if (hdma->XferErrorCallback != NULL)
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 808d 	beq.w	8002c3e <HAL_DMA_IRQHandler+0x4ce>
        hdma->XferErrorCallback(hdma);
 8002b24:	4620      	mov	r0, r4
}
 8002b26:	b002      	add	sp, #8
 8002b28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
 8002b2c:	4718      	bx	r3
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	05d2      	lsls	r2, r2, #23
 8002b32:	f53f af75 	bmi.w	8002a20 <HAL_DMA_IRQHandler+0x2b0>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	f022 0208 	bic.w	r2, r2, #8
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	e76f      	b.n	8002a20 <HAL_DMA_IRQHandler+0x2b0>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8002b46:	e7c9      	b.n	8002adc <HAL_DMA_IRQHandler+0x36c>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002b48:	0355      	lsls	r5, r2, #13
 8002b4a:	d54d      	bpl.n	8002be8 <HAL_DMA_IRQHandler+0x478>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	0318      	lsls	r0, r3, #12
 8002b50:	d457      	bmi.n	8002c02 <HAL_DMA_IRQHandler+0x492>
            if(hdma->XferM1CpltCallback != NULL)
 8002b52:	6c63      	ldr	r3, [r4, #68]	@ 0x44
          if(hdma->XferCpltCallback != NULL)
 8002b54:	b10b      	cbz	r3, 8002b5a <HAL_DMA_IRQHandler+0x3ea>
            hdma->XferCpltCallback(hdma);
 8002b56:	4620      	mov	r0, r4
 8002b58:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b5a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d06e      	beq.n	8002c3e <HAL_DMA_IRQHandler+0x4ce>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002b60:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002b62:	07d9      	lsls	r1, r3, #31
 8002b64:	d53e      	bpl.n	8002be4 <HAL_DMA_IRQHandler+0x474>
        hdma->State = HAL_DMA_STATE_ABORT;
 8002b66:	2304      	movs	r3, #4
 8002b68:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_DMA_DISABLE(hdma);
 8002b6c:	6823      	ldr	r3, [r4, #0]
 8002b6e:	42b3      	cmp	r3, r6
 8002b70:	d01e      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x440>
 8002b72:	4a4f      	ldr	r2, [pc, #316]	@ (8002cb0 <HAL_DMA_IRQHandler+0x540>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d01b      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x440>
 8002b78:	3218      	adds	r2, #24
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d018      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x440>
 8002b7e:	3218      	adds	r2, #24
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d015      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x440>
 8002b84:	3218      	adds	r2, #24
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d012      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x440>
 8002b8a:	3218      	adds	r2, #24
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d00f      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x440>
 8002b90:	3218      	adds	r2, #24
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d00c      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x440>
 8002b96:	3218      	adds	r2, #24
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d009      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x440>
 8002b9c:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d005      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x440>
 8002ba4:	3218      	adds	r2, #24
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d002      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x440>
 8002baa:	3218      	adds	r2, #24
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d0ff      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x440>
  uint32_t timeout = SystemCoreClock / 9600U;
 8002bb0:	f44f 5116 	mov.w	r1, #9600	@ 0x2580
        __HAL_DMA_DISABLE(hdma);
 8002bb4:	681a      	ldr	r2, [r3, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002bb6:	fbb7 f1f1 	udiv	r1, r7, r1
        __HAL_DMA_DISABLE(hdma);
 8002bba:	f022 0201 	bic.w	r2, r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]
          if (++count > timeout)
 8002bc0:	9a01      	ldr	r2, [sp, #4]
 8002bc2:	3201      	adds	r2, #1
 8002bc4:	428a      	cmp	r2, r1
 8002bc6:	9201      	str	r2, [sp, #4]
 8002bc8:	d802      	bhi.n	8002bd0 <HAL_DMA_IRQHandler+0x460>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	07d2      	lsls	r2, r2, #31
 8002bce:	d4f7      	bmi.n	8002bc0 <HAL_DMA_IRQHandler+0x450>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	07df      	lsls	r7, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8002bd4:	bf4c      	ite	mi
 8002bd6:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8002bd8:	2301      	movpl	r3, #1
      hdma->State = HAL_DMA_STATE_READY;
 8002bda:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8002bde:	2300      	movs	r3, #0
 8002be0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      if (hdma->XferErrorCallback != NULL)
 8002be4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8002be6:	e79a      	b.n	8002b1e <HAL_DMA_IRQHandler+0x3ae>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	f412 7280 	ands.w	r2, r2, #256	@ 0x100
 8002bee:	d108      	bne.n	8002c02 <HAL_DMA_IRQHandler+0x492>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002bf0:	6819      	ldr	r1, [r3, #0]
 8002bf2:	f021 0110 	bic.w	r1, r1, #16
 8002bf6:	6019      	str	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8002bf8:	2301      	movs	r3, #1
            __HAL_UNLOCK(hdma);
 8002bfa:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8002bfe:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          if(hdma->XferCpltCallback != NULL)
 8002c02:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002c04:	e7a6      	b.n	8002b54 <HAL_DMA_IRQHandler+0x3e4>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002c06:	4a2b      	ldr	r2, [pc, #172]	@ (8002cb4 <HAL_DMA_IRQHandler+0x544>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	f43f adf3 	beq.w	80027f4 <HAL_DMA_IRQHandler+0x84>
 8002c0e:	3214      	adds	r2, #20
 8002c10:	4293      	cmp	r3, r2
 8002c12:	f43f adef 	beq.w	80027f4 <HAL_DMA_IRQHandler+0x84>
 8002c16:	3214      	adds	r2, #20
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	f43f adeb 	beq.w	80027f4 <HAL_DMA_IRQHandler+0x84>
 8002c1e:	3214      	adds	r2, #20
 8002c20:	4293      	cmp	r3, r2
 8002c22:	f43f ade7 	beq.w	80027f4 <HAL_DMA_IRQHandler+0x84>
 8002c26:	3214      	adds	r2, #20
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	f43f ade3 	beq.w	80027f4 <HAL_DMA_IRQHandler+0x84>
 8002c2e:	3214      	adds	r2, #20
 8002c30:	4293      	cmp	r3, r2
 8002c32:	f43f addf 	beq.w	80027f4 <HAL_DMA_IRQHandler+0x84>
 8002c36:	3214      	adds	r2, #20
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	f43f addb 	beq.w	80027f4 <HAL_DMA_IRQHandler+0x84>
}
 8002c3e:	b002      	add	sp, #8
 8002c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002c44:	0697      	lsls	r7, r2, #26
 8002c46:	d403      	bmi.n	8002c50 <HAL_DMA_IRQHandler+0x4e0>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	f022 0204 	bic.w	r2, r2, #4
 8002c4e:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8002c50:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002c52:	e764      	b.n	8002b1e <HAL_DMA_IRQHandler+0x3ae>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002c54:	2002      	movs	r0, #2
 8002c56:	4088      	lsls	r0, r1
 8002c58:	ea10 0f0c 	tst.w	r0, ip
 8002c5c:	d016      	beq.n	8002c8c <HAL_DMA_IRQHandler+0x51c>
 8002c5e:	0796      	lsls	r6, r2, #30
 8002c60:	d514      	bpl.n	8002c8c <HAL_DMA_IRQHandler+0x51c>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002c62:	6068      	str	r0, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c64:	0410      	lsls	r0, r2, #16
 8002c66:	d503      	bpl.n	8002c70 <HAL_DMA_IRQHandler+0x500>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002c68:	03d1      	lsls	r1, r2, #15
 8002c6a:	d40d      	bmi.n	8002c88 <HAL_DMA_IRQHandler+0x518>
          if(hdma->XferM1CpltCallback != NULL)
 8002c6c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002c6e:	e756      	b.n	8002b1e <HAL_DMA_IRQHandler+0x3ae>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002c70:	f012 0220 	ands.w	r2, r2, #32
 8002c74:	d108      	bne.n	8002c88 <HAL_DMA_IRQHandler+0x518>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002c76:	6819      	ldr	r1, [r3, #0]
 8002c78:	f021 010a 	bic.w	r1, r1, #10
 8002c7c:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002c7e:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8002c80:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8002c84:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        if(hdma->XferCpltCallback != NULL)
 8002c88:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002c8a:	e748      	b.n	8002b1e <HAL_DMA_IRQHandler+0x3ae>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002c8c:	2008      	movs	r0, #8
 8002c8e:	4088      	lsls	r0, r1
 8002c90:	ea10 0f0c 	tst.w	r0, ip
 8002c94:	d0d3      	beq.n	8002c3e <HAL_DMA_IRQHandler+0x4ce>
 8002c96:	0712      	lsls	r2, r2, #28
 8002c98:	d5d1      	bpl.n	8002c3e <HAL_DMA_IRQHandler+0x4ce>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	f022 020e 	bic.w	r2, r2, #14
 8002ca0:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	fa03 f101 	lsl.w	r1, r3, r1
 8002ca8:	6069      	str	r1, [r5, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002caa:	6563      	str	r3, [r4, #84]	@ 0x54
 8002cac:	e795      	b.n	8002bda <HAL_DMA_IRQHandler+0x46a>
 8002cae:	bf00      	nop
 8002cb0:	40020028 	.word	0x40020028
 8002cb4:	5802541c 	.word	0x5802541c

08002cb8 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cb8:	b530      	push	{r4, r5, lr}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002cba:	6804      	ldr	r4, [r0, #0]
 8002cbc:	4d15      	ldr	r5, [pc, #84]	@ (8002d14 <DMA_MultiBufferSetConfig+0x5c>)
  {
    /* Configure DMA Stream data length */
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cbe:	6880      	ldr	r0, [r0, #8]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002cc0:	42ac      	cmp	r4, r5
 8002cc2:	d01e      	beq.n	8002d02 <DMA_MultiBufferSetConfig+0x4a>
 8002cc4:	3518      	adds	r5, #24
 8002cc6:	42ac      	cmp	r4, r5
 8002cc8:	d01b      	beq.n	8002d02 <DMA_MultiBufferSetConfig+0x4a>
 8002cca:	3518      	adds	r5, #24
 8002ccc:	42ac      	cmp	r4, r5
 8002cce:	d018      	beq.n	8002d02 <DMA_MultiBufferSetConfig+0x4a>
 8002cd0:	3518      	adds	r5, #24
 8002cd2:	42ac      	cmp	r4, r5
 8002cd4:	d015      	beq.n	8002d02 <DMA_MultiBufferSetConfig+0x4a>
 8002cd6:	3518      	adds	r5, #24
 8002cd8:	42ac      	cmp	r4, r5
 8002cda:	d012      	beq.n	8002d02 <DMA_MultiBufferSetConfig+0x4a>
 8002cdc:	3518      	adds	r5, #24
 8002cde:	42ac      	cmp	r4, r5
 8002ce0:	d00f      	beq.n	8002d02 <DMA_MultiBufferSetConfig+0x4a>
 8002ce2:	3518      	adds	r5, #24
 8002ce4:	42ac      	cmp	r4, r5
 8002ce6:	d00c      	beq.n	8002d02 <DMA_MultiBufferSetConfig+0x4a>
 8002ce8:	3518      	adds	r5, #24
 8002cea:	42ac      	cmp	r4, r5
 8002cec:	d009      	beq.n	8002d02 <DMA_MultiBufferSetConfig+0x4a>
 8002cee:	f505 7556 	add.w	r5, r5, #856	@ 0x358
 8002cf2:	42ac      	cmp	r4, r5
 8002cf4:	d005      	beq.n	8002d02 <DMA_MultiBufferSetConfig+0x4a>
 8002cf6:	3518      	adds	r5, #24
 8002cf8:	42ac      	cmp	r4, r5
 8002cfa:	d002      	beq.n	8002d02 <DMA_MultiBufferSetConfig+0x4a>
 8002cfc:	3518      	adds	r5, #24
 8002cfe:	42ac      	cmp	r4, r5
 8002d00:	d0ff      	beq.n	8002d02 <DMA_MultiBufferSetConfig+0x4a>
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d02:	2840      	cmp	r0, #64	@ 0x40
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8002d04:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d06:	d102      	bne.n	8002d0e <DMA_MultiBufferSetConfig+0x56>
    {
      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8002d08:	60a2      	str	r2, [r4, #8]

      /* Configure DMA Stream source address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8002d0a:	60e1      	str	r1, [r4, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8002d0c:	bd30      	pop	{r4, r5, pc}
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 8002d0e:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 8002d10:	60e2      	str	r2, [r4, #12]
}
 8002d12:	e7fb      	b.n	8002d0c <DMA_MultiBufferSetConfig+0x54>
 8002d14:	40020010 	.word	0x40020010

08002d18 <HAL_DMAEx_MultiBufferStart_IT>:
{
 8002d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d1a:	4605      	mov	r5, r0
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002d1c:	6880      	ldr	r0, [r0, #8]
 8002d1e:	2880      	cmp	r0, #128	@ 0x80
 8002d20:	d104      	bne.n	8002d2c <HAL_DMAEx_MultiBufferStart_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002d22:	f44f 7380 	mov.w	r3, #256	@ 0x100
    return HAL_ERROR;
 8002d26:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002d28:	656b      	str	r3, [r5, #84]	@ 0x54
    status = HAL_ERROR;
 8002d2a:	e1c5      	b.n	80030b8 <HAL_DMAEx_MultiBufferStart_IT+0x3a0>
  __HAL_LOCK(hdma);
 8002d2c:	f895 0034 	ldrb.w	r0, [r5, #52]	@ 0x34
 8002d30:	2801      	cmp	r0, #1
 8002d32:	f000 81ca 	beq.w	80030ca <HAL_DMAEx_MultiBufferStart_IT+0x3b2>
 8002d36:	2001      	movs	r0, #1
 8002d38:	f885 0034 	strb.w	r0, [r5, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d3c:	f895 0035 	ldrb.w	r0, [r5, #53]	@ 0x35
 8002d40:	2801      	cmp	r0, #1
 8002d42:	f040 81bf 	bne.w	80030c4 <HAL_DMAEx_MultiBufferStart_IT+0x3ac>
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d46:	2002      	movs	r0, #2
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d48:	682c      	ldr	r4, [r5, #0]
 8002d4a:	4e7f      	ldr	r6, [pc, #508]	@ (8002f48 <HAL_DMAEx_MultiBufferStart_IT+0x230>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d4c:	f885 0035 	strb.w	r0, [r5, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d50:	2000      	movs	r0, #0
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d52:	42b4      	cmp	r4, r6
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d54:	6568      	str	r0, [r5, #84]	@ 0x54
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002d56:	e9d5 c716 	ldrd	ip, r7, [r5, #88]	@ 0x58
 8002d5a:	f007 071f 	and.w	r7, r7, #31
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d5e:	f000 80e9 	beq.w	8002f34 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002d62:	487a      	ldr	r0, [pc, #488]	@ (8002f4c <HAL_DMAEx_MultiBufferStart_IT+0x234>)
 8002d64:	4284      	cmp	r4, r0
 8002d66:	f000 80e5 	beq.w	8002f34 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002d6a:	3018      	adds	r0, #24
 8002d6c:	4284      	cmp	r4, r0
 8002d6e:	f000 80e1 	beq.w	8002f34 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002d72:	3018      	adds	r0, #24
 8002d74:	4284      	cmp	r4, r0
 8002d76:	f000 80dd 	beq.w	8002f34 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002d7a:	3018      	adds	r0, #24
 8002d7c:	4284      	cmp	r4, r0
 8002d7e:	f000 80d9 	beq.w	8002f34 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002d82:	3018      	adds	r0, #24
 8002d84:	4284      	cmp	r4, r0
 8002d86:	f000 80d5 	beq.w	8002f34 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002d8a:	3018      	adds	r0, #24
 8002d8c:	4284      	cmp	r4, r0
 8002d8e:	f000 80d1 	beq.w	8002f34 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002d92:	3018      	adds	r0, #24
 8002d94:	4284      	cmp	r4, r0
 8002d96:	f000 80cd 	beq.w	8002f34 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002d9a:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 8002d9e:	4284      	cmp	r4, r0
 8002da0:	f000 80c8 	beq.w	8002f34 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002da4:	3018      	adds	r0, #24
 8002da6:	4284      	cmp	r4, r0
 8002da8:	f000 80c4 	beq.w	8002f34 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002dac:	3018      	adds	r0, #24
 8002dae:	4284      	cmp	r4, r0
 8002db0:	f000 80c0 	beq.w	8002f34 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002db4:	3018      	adds	r0, #24
 8002db6:	4284      	cmp	r4, r0
 8002db8:	f000 80bc 	beq.w	8002f34 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002dbc:	3018      	adds	r0, #24
 8002dbe:	4284      	cmp	r4, r0
 8002dc0:	f000 80b8 	beq.w	8002f34 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002dc4:	3018      	adds	r0, #24
 8002dc6:	4284      	cmp	r4, r0
 8002dc8:	f000 80b4 	beq.w	8002f34 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002dcc:	3018      	adds	r0, #24
 8002dce:	4284      	cmp	r4, r0
 8002dd0:	f000 80b0 	beq.w	8002f34 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002dd4:	3018      	adds	r0, #24
 8002dd6:	4284      	cmp	r4, r0
 8002dd8:	f000 80ac 	beq.w	8002f34 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8002ddc:	6820      	ldr	r0, [r4, #0]
 8002dde:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 8002de2:	f040 0020 	orr.w	r0, r0, #32
 8002de6:	6020      	str	r0, [r4, #0]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 8002de8:	6123      	str	r3, [r4, #16]
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002dea:	2301      	movs	r3, #1
 8002dec:	40bb      	lsls	r3, r7
 8002dee:	f8cc 3004 	str.w	r3, [ip, #4]
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002df2:	9b06      	ldr	r3, [sp, #24]
 8002df4:	4628      	mov	r0, r5
 8002df6:	f7ff ff5f 	bl	8002cb8 <DMA_MultiBufferSetConfig>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002dfa:	42b4      	cmp	r4, r6
 8002dfc:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8002dfe:	f000 80a9 	beq.w	8002f54 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e02:	4b52      	ldr	r3, [pc, #328]	@ (8002f4c <HAL_DMAEx_MultiBufferStart_IT+0x234>)
 8002e04:	429c      	cmp	r4, r3
 8002e06:	f000 80a5 	beq.w	8002f54 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e0a:	3318      	adds	r3, #24
 8002e0c:	429c      	cmp	r4, r3
 8002e0e:	f000 80a1 	beq.w	8002f54 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e12:	3318      	adds	r3, #24
 8002e14:	429c      	cmp	r4, r3
 8002e16:	f000 809d 	beq.w	8002f54 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e1a:	3318      	adds	r3, #24
 8002e1c:	429c      	cmp	r4, r3
 8002e1e:	f000 8099 	beq.w	8002f54 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e22:	3318      	adds	r3, #24
 8002e24:	429c      	cmp	r4, r3
 8002e26:	f000 8095 	beq.w	8002f54 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e2a:	3318      	adds	r3, #24
 8002e2c:	429c      	cmp	r4, r3
 8002e2e:	f000 8091 	beq.w	8002f54 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e32:	3318      	adds	r3, #24
 8002e34:	429c      	cmp	r4, r3
 8002e36:	f000 808d 	beq.w	8002f54 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e3a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8002e3e:	429c      	cmp	r4, r3
 8002e40:	f000 8088 	beq.w	8002f54 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e44:	3318      	adds	r3, #24
 8002e46:	429c      	cmp	r4, r3
 8002e48:	f000 8084 	beq.w	8002f54 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e4c:	3318      	adds	r3, #24
 8002e4e:	429c      	cmp	r4, r3
 8002e50:	f000 8080 	beq.w	8002f54 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e54:	3318      	adds	r3, #24
 8002e56:	429c      	cmp	r4, r3
 8002e58:	d07c      	beq.n	8002f54 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e5a:	3318      	adds	r3, #24
 8002e5c:	429c      	cmp	r4, r3
 8002e5e:	d079      	beq.n	8002f54 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e60:	3318      	adds	r3, #24
 8002e62:	429c      	cmp	r4, r3
 8002e64:	d076      	beq.n	8002f54 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e66:	3318      	adds	r3, #24
 8002e68:	429c      	cmp	r4, r3
 8002e6a:	d073      	beq.n	8002f54 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e6c:	3318      	adds	r3, #24
 8002e6e:	429c      	cmp	r4, r3
 8002e70:	d070      	beq.n	8002f54 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e72:	4b37      	ldr	r3, [pc, #220]	@ (8002f50 <HAL_DMAEx_MultiBufferStart_IT+0x238>)
 8002e74:	429c      	cmp	r4, r3
 8002e76:	d06d      	beq.n	8002f54 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e78:	3314      	adds	r3, #20
 8002e7a:	429c      	cmp	r4, r3
 8002e7c:	d06a      	beq.n	8002f54 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e7e:	3314      	adds	r3, #20
 8002e80:	429c      	cmp	r4, r3
 8002e82:	d067      	beq.n	8002f54 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e84:	3314      	adds	r3, #20
 8002e86:	429c      	cmp	r4, r3
 8002e88:	d064      	beq.n	8002f54 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e8a:	3314      	adds	r3, #20
 8002e8c:	429c      	cmp	r4, r3
 8002e8e:	d061      	beq.n	8002f54 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e90:	3314      	adds	r3, #20
 8002e92:	429c      	cmp	r4, r3
 8002e94:	d05e      	beq.n	8002f54 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e96:	3314      	adds	r3, #20
 8002e98:	429c      	cmp	r4, r3
 8002e9a:	d05b      	beq.n	8002f54 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e9c:	3314      	adds	r3, #20
 8002e9e:	429c      	cmp	r4, r3
 8002ea0:	d058      	beq.n	8002f54 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002ea2:	6823      	ldr	r3, [r4, #0]
 8002ea4:	f023 030e 	bic.w	r3, r3, #14
 8002ea8:	f043 030a 	orr.w	r3, r3, #10
 8002eac:	6023      	str	r3, [r4, #0]
      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002eae:	2a00      	cmp	r2, #0
 8002eb0:	f040 80d9 	bne.w	8003066 <HAL_DMAEx_MultiBufferStart_IT+0x34e>
 8002eb4:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f040 80d5 	bne.w	8003066 <HAL_DMAEx_MultiBufferStart_IT+0x34e>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ebc:	4b24      	ldr	r3, [pc, #144]	@ (8002f50 <HAL_DMAEx_MultiBufferStart_IT+0x238>)
 8002ebe:	429c      	cmp	r4, r3
 8002ec0:	f040 80d9 	bne.w	8003076 <HAL_DMAEx_MultiBufferStart_IT+0x35e>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002ec4:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	03d2      	lsls	r2, r2, #15
 8002eca:	f100 80f6 	bmi.w	80030ba <HAL_DMAEx_MultiBufferStart_IT+0x3a2>
      if(hdma->DMAmuxRequestGen != 0U)
 8002ece:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 8002ed0:	b11b      	cbz	r3, 8002eda <HAL_DMAEx_MultiBufferStart_IT+0x1c2>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ed8:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8002eda:	42b4      	cmp	r4, r6
 8002edc:	f000 80e7 	beq.w	80030ae <HAL_DMAEx_MultiBufferStart_IT+0x396>
 8002ee0:	4b1a      	ldr	r3, [pc, #104]	@ (8002f4c <HAL_DMAEx_MultiBufferStart_IT+0x234>)
 8002ee2:	429c      	cmp	r4, r3
 8002ee4:	f000 80e3 	beq.w	80030ae <HAL_DMAEx_MultiBufferStart_IT+0x396>
 8002ee8:	3318      	adds	r3, #24
 8002eea:	429c      	cmp	r4, r3
 8002eec:	f000 80df 	beq.w	80030ae <HAL_DMAEx_MultiBufferStart_IT+0x396>
 8002ef0:	3318      	adds	r3, #24
 8002ef2:	429c      	cmp	r4, r3
 8002ef4:	f000 80db 	beq.w	80030ae <HAL_DMAEx_MultiBufferStart_IT+0x396>
 8002ef8:	3318      	adds	r3, #24
 8002efa:	429c      	cmp	r4, r3
 8002efc:	f000 80d7 	beq.w	80030ae <HAL_DMAEx_MultiBufferStart_IT+0x396>
 8002f00:	3318      	adds	r3, #24
 8002f02:	429c      	cmp	r4, r3
 8002f04:	f000 80d3 	beq.w	80030ae <HAL_DMAEx_MultiBufferStart_IT+0x396>
 8002f08:	3318      	adds	r3, #24
 8002f0a:	429c      	cmp	r4, r3
 8002f0c:	f000 80cf 	beq.w	80030ae <HAL_DMAEx_MultiBufferStart_IT+0x396>
 8002f10:	3318      	adds	r3, #24
 8002f12:	429c      	cmp	r4, r3
 8002f14:	f000 80cb 	beq.w	80030ae <HAL_DMAEx_MultiBufferStart_IT+0x396>
 8002f18:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8002f1c:	429c      	cmp	r4, r3
 8002f1e:	f000 80c6 	beq.w	80030ae <HAL_DMAEx_MultiBufferStart_IT+0x396>
 8002f22:	3318      	adds	r3, #24
 8002f24:	429c      	cmp	r4, r3
 8002f26:	f000 80c2 	beq.w	80030ae <HAL_DMAEx_MultiBufferStart_IT+0x396>
 8002f2a:	3318      	adds	r3, #24
 8002f2c:	429c      	cmp	r4, r3
 8002f2e:	f000 80be 	beq.w	80030ae <HAL_DMAEx_MultiBufferStart_IT+0x396>
 8002f32:	e0bc      	b.n	80030ae <HAL_DMAEx_MultiBufferStart_IT+0x396>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8002f34:	6820      	ldr	r0, [r4, #0]
 8002f36:	f440 2080 	orr.w	r0, r0, #262144	@ 0x40000
 8002f3a:	6020      	str	r0, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8002f3c:	6123      	str	r3, [r4, #16]
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002f3e:	233f      	movs	r3, #63	@ 0x3f
 8002f40:	40bb      	lsls	r3, r7
 8002f42:	f8cc 3008 	str.w	r3, [ip, #8]
 8002f46:	e754      	b.n	8002df2 <HAL_DMAEx_MultiBufferStart_IT+0xda>
 8002f48:	40020010 	.word	0x40020010
 8002f4c:	40020028 	.word	0x40020028
 8002f50:	58025408 	.word	0x58025408
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f54:	e9d5 3119 	ldrd	r3, r1, [r5, #100]	@ 0x64
 8002f58:	6059      	str	r1, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8002f5a:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 8002f5c:	b113      	cbz	r3, 8002f64 <HAL_DMAEx_MultiBufferStart_IT+0x24c>
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f5e:	e9d5 311c 	ldrd	r3, r1, [r5, #112]	@ 0x70
 8002f62:	6059      	str	r1, [r3, #4]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f64:	42b4      	cmp	r4, r6
 8002f66:	d02e      	beq.n	8002fc6 <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002f68:	4b59      	ldr	r3, [pc, #356]	@ (80030d0 <HAL_DMAEx_MultiBufferStart_IT+0x3b8>)
 8002f6a:	429c      	cmp	r4, r3
 8002f6c:	d02b      	beq.n	8002fc6 <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002f6e:	3318      	adds	r3, #24
 8002f70:	429c      	cmp	r4, r3
 8002f72:	d028      	beq.n	8002fc6 <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002f74:	3318      	adds	r3, #24
 8002f76:	429c      	cmp	r4, r3
 8002f78:	d025      	beq.n	8002fc6 <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002f7a:	3318      	adds	r3, #24
 8002f7c:	429c      	cmp	r4, r3
 8002f7e:	d022      	beq.n	8002fc6 <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002f80:	3318      	adds	r3, #24
 8002f82:	429c      	cmp	r4, r3
 8002f84:	d01f      	beq.n	8002fc6 <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002f86:	3318      	adds	r3, #24
 8002f88:	429c      	cmp	r4, r3
 8002f8a:	d01c      	beq.n	8002fc6 <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002f8c:	3318      	adds	r3, #24
 8002f8e:	429c      	cmp	r4, r3
 8002f90:	d019      	beq.n	8002fc6 <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002f92:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8002f96:	429c      	cmp	r4, r3
 8002f98:	d015      	beq.n	8002fc6 <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002f9a:	3318      	adds	r3, #24
 8002f9c:	429c      	cmp	r4, r3
 8002f9e:	d012      	beq.n	8002fc6 <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002fa0:	3318      	adds	r3, #24
 8002fa2:	429c      	cmp	r4, r3
 8002fa4:	d00f      	beq.n	8002fc6 <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002fa6:	3318      	adds	r3, #24
 8002fa8:	429c      	cmp	r4, r3
 8002faa:	d00c      	beq.n	8002fc6 <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002fac:	3318      	adds	r3, #24
 8002fae:	429c      	cmp	r4, r3
 8002fb0:	d009      	beq.n	8002fc6 <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002fb2:	3318      	adds	r3, #24
 8002fb4:	429c      	cmp	r4, r3
 8002fb6:	d006      	beq.n	8002fc6 <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002fb8:	3318      	adds	r3, #24
 8002fba:	429c      	cmp	r4, r3
 8002fbc:	d003      	beq.n	8002fc6 <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002fbe:	3318      	adds	r3, #24
 8002fc0:	429c      	cmp	r4, r3
 8002fc2:	f47f af6e 	bne.w	8002ea2 <HAL_DMAEx_MultiBufferStart_IT+0x18a>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002fc6:	6823      	ldr	r3, [r4, #0]
 8002fc8:	f023 031e 	bic.w	r3, r3, #30
 8002fcc:	f043 0316 	orr.w	r3, r3, #22
 8002fd0:	6023      	str	r3, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8002fd2:	6963      	ldr	r3, [r4, #20]
 8002fd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fd8:	6163      	str	r3, [r4, #20]
      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fda:	b90a      	cbnz	r2, 8002fe0 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 8002fdc:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8002fde:	b11b      	cbz	r3, 8002fe8 <HAL_DMAEx_MultiBufferStart_IT+0x2d0>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002fe0:	6823      	ldr	r3, [r4, #0]
 8002fe2:	f043 0308 	orr.w	r3, r3, #8
 8002fe6:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002fe8:	42b4      	cmp	r4, r6
 8002fea:	f43f af6b 	beq.w	8002ec4 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8002fee:	4b38      	ldr	r3, [pc, #224]	@ (80030d0 <HAL_DMAEx_MultiBufferStart_IT+0x3b8>)
 8002ff0:	429c      	cmp	r4, r3
 8002ff2:	f43f af67 	beq.w	8002ec4 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8002ff6:	3318      	adds	r3, #24
 8002ff8:	429c      	cmp	r4, r3
 8002ffa:	f43f af63 	beq.w	8002ec4 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8002ffe:	3318      	adds	r3, #24
 8003000:	429c      	cmp	r4, r3
 8003002:	f43f af5f 	beq.w	8002ec4 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8003006:	3318      	adds	r3, #24
 8003008:	429c      	cmp	r4, r3
 800300a:	f43f af5b 	beq.w	8002ec4 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 800300e:	3318      	adds	r3, #24
 8003010:	429c      	cmp	r4, r3
 8003012:	f43f af57 	beq.w	8002ec4 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8003016:	3318      	adds	r3, #24
 8003018:	429c      	cmp	r4, r3
 800301a:	f43f af53 	beq.w	8002ec4 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 800301e:	3318      	adds	r3, #24
 8003020:	429c      	cmp	r4, r3
 8003022:	f43f af4f 	beq.w	8002ec4 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8003026:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800302a:	429c      	cmp	r4, r3
 800302c:	f43f af4a 	beq.w	8002ec4 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8003030:	3318      	adds	r3, #24
 8003032:	429c      	cmp	r4, r3
 8003034:	f43f af46 	beq.w	8002ec4 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8003038:	3318      	adds	r3, #24
 800303a:	429c      	cmp	r4, r3
 800303c:	f43f af42 	beq.w	8002ec4 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8003040:	3318      	adds	r3, #24
 8003042:	429c      	cmp	r4, r3
 8003044:	f43f af3e 	beq.w	8002ec4 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8003048:	3318      	adds	r3, #24
 800304a:	429c      	cmp	r4, r3
 800304c:	f43f af3a 	beq.w	8002ec4 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8003050:	3318      	adds	r3, #24
 8003052:	429c      	cmp	r4, r3
 8003054:	f43f af36 	beq.w	8002ec4 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8003058:	3318      	adds	r3, #24
 800305a:	429c      	cmp	r4, r3
 800305c:	f43f af32 	beq.w	8002ec4 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8003060:	3318      	adds	r3, #24
 8003062:	429c      	cmp	r4, r3
 8003064:	e004      	b.n	8003070 <HAL_DMAEx_MultiBufferStart_IT+0x358>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003066:	6823      	ldr	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003068:	42b4      	cmp	r4, r6
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800306a:	f043 0304 	orr.w	r3, r3, #4
 800306e:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003070:	f47f af24 	bne.w	8002ebc <HAL_DMAEx_MultiBufferStart_IT+0x1a4>
 8003074:	e726      	b.n	8002ec4 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8003076:	4b17      	ldr	r3, [pc, #92]	@ (80030d4 <HAL_DMAEx_MultiBufferStart_IT+0x3bc>)
 8003078:	429c      	cmp	r4, r3
 800307a:	f43f af23 	beq.w	8002ec4 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 800307e:	3314      	adds	r3, #20
 8003080:	429c      	cmp	r4, r3
 8003082:	f43f af1f 	beq.w	8002ec4 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8003086:	3314      	adds	r3, #20
 8003088:	429c      	cmp	r4, r3
 800308a:	f43f af1b 	beq.w	8002ec4 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 800308e:	3314      	adds	r3, #20
 8003090:	429c      	cmp	r4, r3
 8003092:	f43f af17 	beq.w	8002ec4 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8003096:	3314      	adds	r3, #20
 8003098:	429c      	cmp	r4, r3
 800309a:	f43f af13 	beq.w	8002ec4 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 800309e:	3314      	adds	r3, #20
 80030a0:	429c      	cmp	r4, r3
 80030a2:	f43f af0f 	beq.w	8002ec4 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 80030a6:	3314      	adds	r3, #20
 80030a8:	429c      	cmp	r4, r3
 80030aa:	f43f af0b 	beq.w	8002ec4 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
    __HAL_DMA_ENABLE(hdma);
 80030ae:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030b0:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80030b2:	f043 0301 	orr.w	r3, r3, #1
 80030b6:	6023      	str	r3, [r4, #0]
}
 80030b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030c0:	601a      	str	r2, [r3, #0]
 80030c2:	e704      	b.n	8002ece <HAL_DMAEx_MultiBufferStart_IT+0x1b6>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80030c4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80030c8:	e62d      	b.n	8002d26 <HAL_DMAEx_MultiBufferStart_IT+0xe>
  __HAL_LOCK(hdma);
 80030ca:	2002      	movs	r0, #2
 80030cc:	e7f4      	b.n	80030b8 <HAL_DMAEx_MultiBufferStart_IT+0x3a0>
 80030ce:	bf00      	nop
 80030d0:	40020028 	.word	0x40020028
 80030d4:	5802541c 	.word	0x5802541c

080030d8 <HAL_DMAEx_ChangeMemory>:
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030d8:	6803      	ldr	r3, [r0, #0]
 80030da:	4814      	ldr	r0, [pc, #80]	@ (800312c <HAL_DMAEx_ChangeMemory+0x54>)
 80030dc:	4283      	cmp	r3, r0
 80030de:	d01e      	beq.n	800311e <HAL_DMAEx_ChangeMemory+0x46>
 80030e0:	3018      	adds	r0, #24
 80030e2:	4283      	cmp	r3, r0
 80030e4:	d01b      	beq.n	800311e <HAL_DMAEx_ChangeMemory+0x46>
 80030e6:	3018      	adds	r0, #24
 80030e8:	4283      	cmp	r3, r0
 80030ea:	d018      	beq.n	800311e <HAL_DMAEx_ChangeMemory+0x46>
 80030ec:	3018      	adds	r0, #24
 80030ee:	4283      	cmp	r3, r0
 80030f0:	d015      	beq.n	800311e <HAL_DMAEx_ChangeMemory+0x46>
 80030f2:	3018      	adds	r0, #24
 80030f4:	4283      	cmp	r3, r0
 80030f6:	d012      	beq.n	800311e <HAL_DMAEx_ChangeMemory+0x46>
 80030f8:	3018      	adds	r0, #24
 80030fa:	4283      	cmp	r3, r0
 80030fc:	d00f      	beq.n	800311e <HAL_DMAEx_ChangeMemory+0x46>
 80030fe:	3018      	adds	r0, #24
 8003100:	4283      	cmp	r3, r0
 8003102:	d00c      	beq.n	800311e <HAL_DMAEx_ChangeMemory+0x46>
 8003104:	3018      	adds	r0, #24
 8003106:	4283      	cmp	r3, r0
 8003108:	d009      	beq.n	800311e <HAL_DMAEx_ChangeMemory+0x46>
 800310a:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 800310e:	4283      	cmp	r3, r0
 8003110:	d005      	beq.n	800311e <HAL_DMAEx_ChangeMemory+0x46>
 8003112:	3018      	adds	r0, #24
 8003114:	4283      	cmp	r3, r0
 8003116:	d002      	beq.n	800311e <HAL_DMAEx_ChangeMemory+0x46>
 8003118:	3018      	adds	r0, #24
 800311a:	4283      	cmp	r3, r0
 800311c:	d0ff      	beq.n	800311e <HAL_DMAEx_ChangeMemory+0x46>
    if(memory == MEMORY0)
 800311e:	b912      	cbnz	r2, 8003126 <HAL_DMAEx_ChangeMemory+0x4e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 8003120:	60d9      	str	r1, [r3, #12]
}
 8003122:	2000      	movs	r0, #0
 8003124:	4770      	bx	lr
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 8003126:	6119      	str	r1, [r3, #16]
 8003128:	e7fb      	b.n	8003122 <HAL_DMAEx_ChangeMemory+0x4a>
 800312a:	bf00      	nop
 800312c:	40020010 	.word	0x40020010

08003130 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003130:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8003134:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003136:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 80032fc <HAL_GPIO_Init+0x1cc>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800313a:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800313e:	680a      	ldr	r2, [r1, #0]
 8003140:	fa32 f503 	lsrs.w	r5, r2, r3
 8003144:	d102      	bne.n	800314c <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 8003146:	b003      	add	sp, #12
 8003148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800314c:	2501      	movs	r5, #1
 800314e:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00U)
 8003152:	ea18 0202 	ands.w	r2, r8, r2
 8003156:	f000 80bb 	beq.w	80032d0 <HAL_GPIO_Init+0x1a0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800315a:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800315c:	2703      	movs	r7, #3
 800315e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003162:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003166:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800316a:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800316c:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003170:	2f01      	cmp	r7, #1
 8003172:	d834      	bhi.n	80031de <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8003174:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003176:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 800317a:	68cf      	ldr	r7, [r1, #12]
 800317c:	fa07 f70e 	lsl.w	r7, r7, lr
 8003180:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8003184:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003186:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003188:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800318c:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8003190:	409f      	lsls	r7, r3
 8003192:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8003196:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8003198:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800319a:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800319c:	ea07 080c 	and.w	r8, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031a0:	688f      	ldr	r7, [r1, #8]
 80031a2:	fa07 f70e 	lsl.w	r7, r7, lr
 80031a6:	ea47 0708 	orr.w	r7, r7, r8
      GPIOx->PUPDR = temp;
 80031aa:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031ac:	d119      	bne.n	80031e2 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 80031ae:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80031b2:	f003 0a07 	and.w	sl, r3, #7
 80031b6:	f04f 0b0f 	mov.w	fp, #15
 80031ba:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 80031be:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 80031c2:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80031c6:	fa0b fb0a 	lsl.w	fp, fp, sl
 80031ca:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80031ce:	690f      	ldr	r7, [r1, #16]
 80031d0:	fa07 f70a 	lsl.w	r7, r7, sl
 80031d4:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3U] = temp;
 80031d8:	f8c8 7020 	str.w	r7, [r8, #32]
 80031dc:	e001      	b.n	80031e2 <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031de:	2d03      	cmp	r5, #3
 80031e0:	d1da      	bne.n	8003198 <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 80031e2:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031e4:	fa05 f50e 	lsl.w	r5, r5, lr
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031e8:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80031ec:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031f0:	ea45 0507 	orr.w	r5, r5, r7
      GPIOx->MODER = temp;
 80031f4:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031f6:	d06b      	beq.n	80032d0 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031f8:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
 80031fc:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003200:	f003 0c03 	and.w	ip, r3, #3
 8003204:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003208:	f045 0502 	orr.w	r5, r5, #2
 800320c:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003210:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003214:	f8c9 50f4 	str.w	r5, [r9, #244]	@ 0xf4
 8003218:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 800321c:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003220:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003224:	f005 0502 	and.w	r5, r5, #2
 8003228:	9501      	str	r5, [sp, #4]
 800322a:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800322c:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800322e:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003232:	4d31      	ldr	r5, [pc, #196]	@ (80032f8 <HAL_GPIO_Init+0x1c8>)
 8003234:	42a8      	cmp	r0, r5
 8003236:	d04d      	beq.n	80032d4 <HAL_GPIO_Init+0x1a4>
 8003238:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800323c:	42a8      	cmp	r0, r5
 800323e:	d04b      	beq.n	80032d8 <HAL_GPIO_Init+0x1a8>
 8003240:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003244:	42a8      	cmp	r0, r5
 8003246:	d049      	beq.n	80032dc <HAL_GPIO_Init+0x1ac>
 8003248:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800324c:	42a8      	cmp	r0, r5
 800324e:	d047      	beq.n	80032e0 <HAL_GPIO_Init+0x1b0>
 8003250:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003254:	42a8      	cmp	r0, r5
 8003256:	d045      	beq.n	80032e4 <HAL_GPIO_Init+0x1b4>
 8003258:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800325c:	42a8      	cmp	r0, r5
 800325e:	d043      	beq.n	80032e8 <HAL_GPIO_Init+0x1b8>
 8003260:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003264:	42a8      	cmp	r0, r5
 8003266:	d041      	beq.n	80032ec <HAL_GPIO_Init+0x1bc>
 8003268:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800326c:	42a8      	cmp	r0, r5
 800326e:	d03f      	beq.n	80032f0 <HAL_GPIO_Init+0x1c0>
 8003270:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003274:	42a8      	cmp	r0, r5
 8003276:	d03d      	beq.n	80032f4 <HAL_GPIO_Init+0x1c4>
 8003278:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800327c:	42a8      	cmp	r0, r5
 800327e:	bf14      	ite	ne
 8003280:	250a      	movne	r5, #10
 8003282:	2509      	moveq	r5, #9
 8003284:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003288:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800328c:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003290:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 8003292:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 8003296:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8003298:	bf0c      	ite	eq
 800329a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800329c:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800329e:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        EXTI->RTSR1 = temp;
 80032a2:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 80032a4:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 80032a6:	bf0c      	ite	eq
 80032a8:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80032aa:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032ac:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        EXTI->FTSR1 = temp;
 80032b0:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 80032b2:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
        temp &= ~(iocurrent);
 80032b6:	bf0c      	ite	eq
 80032b8:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80032ba:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032bc:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 80032be:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 80032c2:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
        temp &= ~(iocurrent);
 80032c6:	bf54      	ite	pl
 80032c8:	403d      	andpl	r5, r7
          temp |= iocurrent;
 80032ca:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 80032cc:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
    position++;
 80032d0:	3301      	adds	r3, #1
 80032d2:	e734      	b.n	800313e <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80032d4:	2500      	movs	r5, #0
 80032d6:	e7d5      	b.n	8003284 <HAL_GPIO_Init+0x154>
 80032d8:	2501      	movs	r5, #1
 80032da:	e7d3      	b.n	8003284 <HAL_GPIO_Init+0x154>
 80032dc:	2502      	movs	r5, #2
 80032de:	e7d1      	b.n	8003284 <HAL_GPIO_Init+0x154>
 80032e0:	2503      	movs	r5, #3
 80032e2:	e7cf      	b.n	8003284 <HAL_GPIO_Init+0x154>
 80032e4:	2504      	movs	r5, #4
 80032e6:	e7cd      	b.n	8003284 <HAL_GPIO_Init+0x154>
 80032e8:	2505      	movs	r5, #5
 80032ea:	e7cb      	b.n	8003284 <HAL_GPIO_Init+0x154>
 80032ec:	2506      	movs	r5, #6
 80032ee:	e7c9      	b.n	8003284 <HAL_GPIO_Init+0x154>
 80032f0:	2507      	movs	r5, #7
 80032f2:	e7c7      	b.n	8003284 <HAL_GPIO_Init+0x154>
 80032f4:	2508      	movs	r5, #8
 80032f6:	e7c5      	b.n	8003284 <HAL_GPIO_Init+0x154>
 80032f8:	58020000 	.word	0x58020000
 80032fc:	58024400 	.word	0x58024400

08003300 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003300:	b10a      	cbz	r2, 8003306 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003302:	6181      	str	r1, [r0, #24]
  }
}
 8003304:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003306:	0409      	lsls	r1, r1, #16
 8003308:	e7fb      	b.n	8003302 <HAL_GPIO_WritePin+0x2>

0800330a <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800330a:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800330c:	ea01 0203 	and.w	r2, r1, r3
 8003310:	ea21 0103 	bic.w	r1, r1, r3
 8003314:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003318:	6181      	str	r1, [r0, #24]
}
 800331a:	4770      	bx	lr

0800331c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800331c:	6803      	ldr	r3, [r0, #0]
 800331e:	699a      	ldr	r2, [r3, #24]
 8003320:	0791      	lsls	r1, r2, #30
 8003322:	d501      	bpl.n	8003328 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003324:	2200      	movs	r2, #0
 8003326:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003328:	699a      	ldr	r2, [r3, #24]
 800332a:	07d2      	lsls	r2, r2, #31
 800332c:	d403      	bmi.n	8003336 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800332e:	699a      	ldr	r2, [r3, #24]
 8003330:	f042 0201 	orr.w	r2, r2, #1
 8003334:	619a      	str	r2, [r3, #24]
  }
}
 8003336:	4770      	bx	lr

08003338 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003338:	b530      	push	{r4, r5, lr}
 800333a:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800333c:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003340:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003342:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8003344:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003346:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800334a:	4a05      	ldr	r2, [pc, #20]	@ (8003360 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800334c:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 800334e:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003352:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8003356:	ea20 0002 	bic.w	r0, r0, r2
 800335a:	4303      	orrs	r3, r0
 800335c:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800335e:	bd30      	pop	{r4, r5, pc}
 8003360:	03ff63ff 	.word	0x03ff63ff

08003364 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 8003364:	6803      	ldr	r3, [r0, #0]
{
 8003366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 800336a:	699c      	ldr	r4, [r3, #24]
{
 800336c:	4605      	mov	r5, r0
 800336e:	460f      	mov	r7, r1
 8003370:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003372:	f014 0410 	ands.w	r4, r4, #16
 8003376:	d06f      	beq.n	8003458 <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 8003378:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800337a:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 800337c:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800337e:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003380:	682b      	ldr	r3, [r5, #0]
 8003382:	699a      	ldr	r2, [r3, #24]
 8003384:	0690      	lsls	r0, r2, #26
 8003386:	d461      	bmi.n	800344c <I2C_IsErrorOccurred+0xe8>
 8003388:	f1b8 0f00 	cmp.w	r8, #0
 800338c:	d035      	beq.n	80033fa <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 800338e:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 8003392:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 8003394:	682e      	ldr	r6, [r5, #0]
 8003396:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003398:	05d9      	lsls	r1, r3, #23
 800339a:	d505      	bpl.n	80033a8 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800339c:	f44f 7280 	mov.w	r2, #256	@ 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 80033a0:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 80033a4:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80033a6:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80033a8:	055a      	lsls	r2, r3, #21
 80033aa:	d505      	bpl.n	80033b8 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80033ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 80033b0:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 80033b4:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80033b6:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80033b8:	059b      	lsls	r3, r3, #22
 80033ba:	d54f      	bpl.n	800345c <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80033bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 80033c0:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80033c4:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 80033c6:	4628      	mov	r0, r5
 80033c8:	f7ff ffa8 	bl	800331c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80033cc:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 80033ce:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 80033d0:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 80033d4:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 80033d8:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 80033dc:	f023 0301 	bic.w	r3, r3, #1
 80033e0:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 80033e2:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 80033e4:	4323      	orrs	r3, r4
 80033e6:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80033e8:	2320      	movs	r3, #32
 80033ea:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ee:	2300      	movs	r3, #0
 80033f0:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 80033f4:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 80033f8:	e032      	b.n	8003460 <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 80033fa:	1c7a      	adds	r2, r7, #1
 80033fc:	d0c1      	beq.n	8003382 <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80033fe:	f7fe f8a3 	bl	8001548 <HAL_GetTick>
 8003402:	1b80      	subs	r0, r0, r6
 8003404:	42b8      	cmp	r0, r7
 8003406:	d801      	bhi.n	800340c <I2C_IsErrorOccurred+0xa8>
 8003408:	2f00      	cmp	r7, #0
 800340a:	d1b9      	bne.n	8003380 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800340c:	682b      	ldr	r3, [r5, #0]
 800340e:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8003410:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003414:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 8003416:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003418:	0400      	lsls	r0, r0, #16
 800341a:	d50a      	bpl.n	8003432 <I2C_IsErrorOccurred+0xce>
 800341c:	0449      	lsls	r1, r1, #17
 800341e:	d408      	bmi.n	8003432 <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 8003420:	2a20      	cmp	r2, #32
 8003422:	d006      	beq.n	8003432 <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800342a:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800342c:	f7fe f88c 	bl	8001548 <HAL_GetTick>
 8003430:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003432:	682b      	ldr	r3, [r5, #0]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	069b      	lsls	r3, r3, #26
 8003438:	d4a2      	bmi.n	8003380 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800343a:	f7fe f885 	bl	8001548 <HAL_GetTick>
 800343e:	1b80      	subs	r0, r0, r6
 8003440:	2819      	cmp	r0, #25
 8003442:	d9f6      	bls.n	8003432 <I2C_IsErrorOccurred+0xce>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003444:	2420      	movs	r4, #32
              status = HAL_ERROR;
 8003446:	f04f 0801 	mov.w	r8, #1
 800344a:	e799      	b.n	8003380 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 800344c:	f1b8 0f00 	cmp.w	r8, #0
 8003450:	d19d      	bne.n	800338e <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003452:	2220      	movs	r2, #32
 8003454:	61da      	str	r2, [r3, #28]
 8003456:	e79a      	b.n	800338e <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 8003458:	4620      	mov	r0, r4
 800345a:	e79b      	b.n	8003394 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 800345c:	2800      	cmp	r0, #0
 800345e:	d1b2      	bne.n	80033c6 <I2C_IsErrorOccurred+0x62>
}
 8003460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003464 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	4604      	mov	r4, r0
 8003468:	460d      	mov	r5, r1
 800346a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800346c:	6823      	ldr	r3, [r4, #0]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	079b      	lsls	r3, r3, #30
 8003472:	d501      	bpl.n	8003478 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8003474:	2000      	movs	r0, #0
 8003476:	e01f      	b.n	80034b8 <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003478:	4632      	mov	r2, r6
 800347a:	4629      	mov	r1, r5
 800347c:	4620      	mov	r0, r4
 800347e:	f7ff ff71 	bl	8003364 <I2C_IsErrorOccurred>
 8003482:	b9c0      	cbnz	r0, 80034b6 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8003484:	1c6a      	adds	r2, r5, #1
 8003486:	d0f1      	beq.n	800346c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003488:	f7fe f85e 	bl	8001548 <HAL_GetTick>
 800348c:	1b80      	subs	r0, r0, r6
 800348e:	42a8      	cmp	r0, r5
 8003490:	d801      	bhi.n	8003496 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8003492:	2d00      	cmp	r5, #0
 8003494:	d1ea      	bne.n	800346c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003496:	6823      	ldr	r3, [r4, #0]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	f013 0302 	ands.w	r3, r3, #2
 800349e:	d1e5      	bne.n	800346c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034a0:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 80034a2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034a6:	f042 0220 	orr.w	r2, r2, #32
 80034aa:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80034ac:	2220      	movs	r2, #32
 80034ae:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034b2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 80034b6:	2001      	movs	r0, #1
}
 80034b8:	bd70      	pop	{r4, r5, r6, pc}

080034ba <I2C_WaitOnFlagUntilTimeout>:
{
 80034ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034be:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80034c2:	4604      	mov	r4, r0
 80034c4:	460f      	mov	r7, r1
 80034c6:	4616      	mov	r6, r2
 80034c8:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034ca:	6823      	ldr	r3, [r4, #0]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	ea37 0303 	bics.w	r3, r7, r3
 80034d2:	bf0c      	ite	eq
 80034d4:	2301      	moveq	r3, #1
 80034d6:	2300      	movne	r3, #0
 80034d8:	42b3      	cmp	r3, r6
 80034da:	d001      	beq.n	80034e0 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80034dc:	2000      	movs	r0, #0
 80034de:	e025      	b.n	800352c <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034e0:	4642      	mov	r2, r8
 80034e2:	4629      	mov	r1, r5
 80034e4:	4620      	mov	r0, r4
 80034e6:	f7ff ff3d 	bl	8003364 <I2C_IsErrorOccurred>
 80034ea:	b9f0      	cbnz	r0, 800352a <I2C_WaitOnFlagUntilTimeout+0x70>
    if (Timeout != HAL_MAX_DELAY)
 80034ec:	1c6b      	adds	r3, r5, #1
 80034ee:	d0ec      	beq.n	80034ca <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034f0:	f7fe f82a 	bl	8001548 <HAL_GetTick>
 80034f4:	eba0 0008 	sub.w	r0, r0, r8
 80034f8:	42a8      	cmp	r0, r5
 80034fa:	d801      	bhi.n	8003500 <I2C_WaitOnFlagUntilTimeout+0x46>
 80034fc:	2d00      	cmp	r5, #0
 80034fe:	d1e4      	bne.n	80034ca <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003500:	6823      	ldr	r3, [r4, #0]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	ea37 0303 	bics.w	r3, r7, r3
 8003508:	bf0c      	ite	eq
 800350a:	2301      	moveq	r3, #1
 800350c:	2300      	movne	r3, #0
 800350e:	42b3      	cmp	r3, r6
 8003510:	d1db      	bne.n	80034ca <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003512:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003514:	f043 0320 	orr.w	r3, r3, #32
 8003518:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800351a:	2320      	movs	r3, #32
 800351c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003520:	2300      	movs	r3, #0
 8003522:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 8003526:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800352a:	2001      	movs	r0, #1
}
 800352c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003530 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8003530:	b570      	push	{r4, r5, r6, lr}
 8003532:	4604      	mov	r4, r0
 8003534:	460d      	mov	r5, r1
 8003536:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003538:	6823      	ldr	r3, [r4, #0]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	069b      	lsls	r3, r3, #26
 800353e:	d501      	bpl.n	8003544 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8003540:	2000      	movs	r0, #0
 8003542:	e01d      	b.n	8003580 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003544:	4632      	mov	r2, r6
 8003546:	4629      	mov	r1, r5
 8003548:	4620      	mov	r0, r4
 800354a:	f7ff ff0b 	bl	8003364 <I2C_IsErrorOccurred>
 800354e:	b9b0      	cbnz	r0, 800357e <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003550:	f7fd fffa 	bl	8001548 <HAL_GetTick>
 8003554:	1b80      	subs	r0, r0, r6
 8003556:	42a8      	cmp	r0, r5
 8003558:	d801      	bhi.n	800355e <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800355a:	2d00      	cmp	r5, #0
 800355c:	d1ec      	bne.n	8003538 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800355e:	6823      	ldr	r3, [r4, #0]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	f013 0320 	ands.w	r3, r3, #32
 8003566:	d1e7      	bne.n	8003538 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003568:	6c62      	ldr	r2, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800356a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800356e:	f042 0220 	orr.w	r2, r2, #32
 8003572:	6462      	str	r2, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003574:	2220      	movs	r2, #32
 8003576:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800357a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 800357e:	2001      	movs	r0, #1
}
 8003580:	bd70      	pop	{r4, r5, r6, pc}
	...

08003584 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8003584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003588:	4605      	mov	r5, r0
 800358a:	460e      	mov	r6, r1
 800358c:	4617      	mov	r7, r2
  HAL_StatusTypeDef status = HAL_OK;
 800358e:	2400      	movs	r4, #0
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003590:	f04f 0810 	mov.w	r8, #16
        I2C_RESET_CR2(hi2c);
 8003594:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8003624 <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003598:	682b      	ldr	r3, [r5, #0]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	075b      	lsls	r3, r3, #29
 800359e:	d400      	bmi.n	80035a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x1e>
 80035a0:	b114      	cbz	r4, 80035a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x24>
}
 80035a2:	4620      	mov	r0, r4
 80035a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035a8:	463a      	mov	r2, r7
 80035aa:	4631      	mov	r1, r6
 80035ac:	4628      	mov	r0, r5
 80035ae:	f7ff fed9 	bl	8003364 <I2C_IsErrorOccurred>
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80035b2:	682b      	ldr	r3, [r5, #0]
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035b4:	4604      	mov	r4, r0
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80035b6:	699a      	ldr	r2, [r3, #24]
 80035b8:	0690      	lsls	r0, r2, #26
 80035ba:	d40c      	bmi.n	80035d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x52>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035bc:	3c00      	subs	r4, #0
 80035be:	bf18      	it	ne
 80035c0:	2401      	movne	r4, #1
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80035c2:	f7fd ffc1 	bl	8001548 <HAL_GetTick>
 80035c6:	1bc0      	subs	r0, r0, r7
 80035c8:	42b0      	cmp	r0, r6
 80035ca:	d801      	bhi.n	80035d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x4c>
 80035cc:	2e00      	cmp	r6, #0
 80035ce:	d1e3      	bne.n	8003598 <I2C_WaitOnRXNEFlagUntilTimeout+0x14>
 80035d0:	b1d4      	cbz	r4, 8003608 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
{
 80035d2:	2401      	movs	r4, #1
 80035d4:	e7e0      	b.n	8003598 <I2C_WaitOnRXNEFlagUntilTimeout+0x14>
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80035d6:	b99c      	cbnz	r4, 8003600 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80035d8:	699a      	ldr	r2, [r3, #24]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035da:	699a      	ldr	r2, [r3, #24]
 80035dc:	06d1      	lsls	r1, r2, #27
 80035de:	d511      	bpl.n	8003604 <I2C_WaitOnRXNEFlagUntilTimeout+0x80>
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80035e0:	2204      	movs	r2, #4
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035e2:	2120      	movs	r1, #32
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035e4:	f8c3 801c 	str.w	r8, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80035e8:	646a      	str	r2, [r5, #68]	@ 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035ea:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	ea02 0209 	and.w	r2, r2, r9
 80035f2:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 80035f4:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
        __HAL_UNLOCK(hi2c);
 80035f8:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035fc:	f885 4042 	strb.w	r4, [r5, #66]	@ 0x42
{
 8003600:	2401      	movs	r4, #1
 8003602:	e7de      	b.n	80035c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x3e>
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003604:	646c      	str	r4, [r5, #68]	@ 0x44
 8003606:	e7dc      	b.n	80035c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x3e>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003608:	682b      	ldr	r3, [r5, #0]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	075a      	lsls	r2, r3, #29
 800360e:	d4c3      	bmi.n	8003598 <I2C_WaitOnRXNEFlagUntilTimeout+0x14>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003610:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8003612:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003616:	f043 0320 	orr.w	r3, r3, #32
 800361a:	646b      	str	r3, [r5, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800361c:	2320      	movs	r3, #32
 800361e:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
        status = HAL_ERROR;
 8003622:	e7d6      	b.n	80035d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
 8003624:	fe00e800 	.word	0xfe00e800

08003628 <HAL_I2C_Init>:
{
 8003628:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800362a:	4604      	mov	r4, r0
 800362c:	2800      	cmp	r0, #0
 800362e:	d04e      	beq.n	80036ce <HAL_I2C_Init+0xa6>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003630:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8003634:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003638:	b91b      	cbnz	r3, 8003642 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 800363a:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 800363e:	f7fd fd95 	bl	800116c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003642:	2324      	movs	r3, #36	@ 0x24
 8003644:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8003648:	6823      	ldr	r3, [r4, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	f022 0201 	bic.w	r2, r2, #1
 8003650:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003652:	6862      	ldr	r2, [r4, #4]
 8003654:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003658:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003660:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003662:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003666:	2901      	cmp	r1, #1
 8003668:	d106      	bne.n	8003678 <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800366a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800366e:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003670:	685a      	ldr	r2, [r3, #4]
 8003672:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003676:	e007      	b.n	8003688 <HAL_I2C_Init+0x60>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003678:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800367c:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800367e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003680:	d1f6      	bne.n	8003670 <HAL_I2C_Init+0x48>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003688:	605a      	str	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800368a:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800368c:	685a      	ldr	r2, [r3, #4]
 800368e:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8003692:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003696:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003698:	68da      	ldr	r2, [r3, #12]
 800369a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800369e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036a0:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 80036a4:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80036a6:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036a8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80036ac:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80036ae:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	f042 0201 	orr.w	r2, r2, #1
 80036bc:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80036be:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036c0:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80036c2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80036c6:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c8:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 80036cc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80036ce:	2001      	movs	r0, #1
 80036d0:	e7fc      	b.n	80036cc <HAL_I2C_Init+0xa4>
	...

080036d4 <HAL_I2C_Master_Transmit>:
{
 80036d4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80036d8:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80036da:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 80036de:	4604      	mov	r4, r0
 80036e0:	460e      	mov	r6, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 80036e2:	2b20      	cmp	r3, #32
{
 80036e4:	4690      	mov	r8, r2
 80036e6:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80036e8:	f040 809b 	bne.w	8003822 <HAL_I2C_Master_Transmit+0x14e>
    __HAL_LOCK(hi2c);
 80036ec:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	f000 8096 	beq.w	8003822 <HAL_I2C_Master_Transmit+0x14e>
 80036f6:	f04f 0a01 	mov.w	sl, #1
 80036fa:	f880 a040 	strb.w	sl, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 80036fe:	f7fd ff23 	bl	8001548 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003702:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8003704:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003706:	9000      	str	r0, [sp, #0]
 8003708:	4652      	mov	r2, sl
 800370a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800370e:	4620      	mov	r0, r4
 8003710:	f7ff fed3 	bl	80034ba <I2C_WaitOnFlagUntilTimeout>
 8003714:	b118      	cbz	r0, 800371e <HAL_I2C_Master_Transmit+0x4a>
      return HAL_ERROR;
 8003716:	2001      	movs	r0, #1
}
 8003718:	b002      	add	sp, #8
 800371a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800371e:	2321      	movs	r3, #33	@ 0x21
    hi2c->pBuffPtr  = pData;
 8003720:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
    hi2c->XferISR   = NULL;
 8003724:	6360      	str	r0, [r4, #52]	@ 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003726:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800372a:	2310      	movs	r3, #16
 800372c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003730:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 8003732:	f8a4 902a 	strh.w	r9, [r4, #42]	@ 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003736:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003738:	b29b      	uxth	r3, r3
 800373a:	2bff      	cmp	r3, #255	@ 0xff
 800373c:	d818      	bhi.n	8003770 <HAL_I2C_Master_Transmit+0x9c>
      hi2c->XferSize = hi2c->XferCount;
 800373e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      xfermode = I2C_AUTOEND_MODE;
 8003740:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8003744:	b292      	uxth	r2, r2
      xfermode = I2C_AUTOEND_MODE;
 8003746:	8522      	strh	r2, [r4, #40]	@ 0x28
    if (hi2c->XferSize > 0U)
 8003748:	b1b2      	cbz	r2, 8003778 <HAL_I2C_Master_Transmit+0xa4>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800374a:	46c4      	mov	ip, r8
 800374c:	6821      	ldr	r1, [r4, #0]
      hi2c->XferSize--;
 800374e:	3a01      	subs	r2, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003750:	f81c 0b01 	ldrb.w	r0, [ip], #1
      hi2c->XferSize--;
 8003754:	b292      	uxth	r2, r2
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003756:	6288      	str	r0, [r1, #40]	@ 0x28
      hi2c->XferCount--;
 8003758:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800375a:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800375c:	3201      	adds	r2, #1
      hi2c->XferCount--;
 800375e:	3901      	subs	r1, #1
      hi2c->pBuffPtr++;
 8003760:	f8c4 c024 	str.w	ip, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8003764:	b289      	uxth	r1, r1
 8003766:	8561      	strh	r1, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003768:	492f      	ldr	r1, [pc, #188]	@ (8003828 <HAL_I2C_Master_Transmit+0x154>)
 800376a:	9100      	str	r1, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800376c:	b2d2      	uxtb	r2, r2
 800376e:	e005      	b.n	800377c <HAL_I2C_Master_Transmit+0xa8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003770:	22ff      	movs	r2, #255	@ 0xff
      xfermode = I2C_RELOAD_MODE;
 8003772:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003776:	e7e6      	b.n	8003746 <HAL_I2C_Master_Transmit+0x72>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003778:	492b      	ldr	r1, [pc, #172]	@ (8003828 <HAL_I2C_Master_Transmit+0x154>)
 800377a:	9100      	str	r1, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800377c:	4631      	mov	r1, r6
 800377e:	4620      	mov	r0, r4
 8003780:	f7ff fdda 	bl	8003338 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003784:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003786:	462a      	mov	r2, r5
 8003788:	4639      	mov	r1, r7
 800378a:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800378c:	b29b      	uxth	r3, r3
 800378e:	b9bb      	cbnz	r3, 80037c0 <HAL_I2C_Master_Transmit+0xec>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003790:	f7ff fece 	bl	8003530 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003794:	2800      	cmp	r0, #0
 8003796:	d1be      	bne.n	8003716 <HAL_I2C_Master_Transmit+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003798:	6823      	ldr	r3, [r4, #0]
 800379a:	2120      	movs	r1, #32
 800379c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 80037a4:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 80037a8:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 80037ac:	f022 0201 	bic.w	r2, r2, #1
 80037b0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80037b2:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80037b6:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80037ba:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 80037be:	e7ab      	b.n	8003718 <HAL_I2C_Master_Transmit+0x44>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037c0:	f7ff fe50 	bl	8003464 <I2C_WaitOnTXISFlagUntilTimeout>
 80037c4:	2800      	cmp	r0, #0
 80037c6:	d1a6      	bne.n	8003716 <HAL_I2C_Master_Transmit+0x42>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80037c8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80037ca:	6822      	ldr	r2, [r4, #0]
 80037cc:	f813 1b01 	ldrb.w	r1, [r3], #1
 80037d0:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 80037d2:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80037d4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80037d6:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80037d8:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80037da:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80037dc:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80037de:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80037e0:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80037e2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80037e4:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d0cb      	beq.n	8003784 <HAL_I2C_Master_Transmit+0xb0>
 80037ec:	2a00      	cmp	r2, #0
 80037ee:	d1c9      	bne.n	8003784 <HAL_I2C_Master_Transmit+0xb0>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80037f0:	463b      	mov	r3, r7
 80037f2:	2180      	movs	r1, #128	@ 0x80
 80037f4:	4620      	mov	r0, r4
 80037f6:	9500      	str	r5, [sp, #0]
 80037f8:	f7ff fe5f 	bl	80034ba <I2C_WaitOnFlagUntilTimeout>
 80037fc:	2800      	cmp	r0, #0
 80037fe:	d18a      	bne.n	8003716 <HAL_I2C_Master_Transmit+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003800:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003802:	b29b      	uxth	r3, r3
 8003804:	2bff      	cmp	r3, #255	@ 0xff
 8003806:	d905      	bls.n	8003814 <HAL_I2C_Master_Transmit+0x140>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003808:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800380a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800380e:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003810:	9000      	str	r0, [sp, #0]
 8003812:	e7b3      	b.n	800377c <HAL_I2C_Master_Transmit+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 8003814:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003816:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800381a:	b292      	uxth	r2, r2
 800381c:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800381e:	9000      	str	r0, [sp, #0]
 8003820:	e7a4      	b.n	800376c <HAL_I2C_Master_Transmit+0x98>
    __HAL_LOCK(hi2c);
 8003822:	2002      	movs	r0, #2
 8003824:	e778      	b.n	8003718 <HAL_I2C_Master_Transmit+0x44>
 8003826:	bf00      	nop
 8003828:	80002000 	.word	0x80002000

0800382c <HAL_I2C_Master_Receive>:
{
 800382c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8003830:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003832:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8003836:	4604      	mov	r4, r0
 8003838:	460e      	mov	r6, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800383a:	2b20      	cmp	r3, #32
{
 800383c:	4691      	mov	r9, r2
 800383e:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003840:	f040 8087 	bne.w	8003952 <HAL_I2C_Master_Receive+0x126>
    __HAL_LOCK(hi2c);
 8003844:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8003848:	2b01      	cmp	r3, #1
 800384a:	f000 8082 	beq.w	8003952 <HAL_I2C_Master_Receive+0x126>
 800384e:	f04f 0a01 	mov.w	sl, #1
 8003852:	f880 a040 	strb.w	sl, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8003856:	f7fd fe77 	bl	8001548 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800385a:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 800385c:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800385e:	9000      	str	r0, [sp, #0]
 8003860:	4652      	mov	r2, sl
 8003862:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003866:	4620      	mov	r0, r4
 8003868:	f7ff fe27 	bl	80034ba <I2C_WaitOnFlagUntilTimeout>
 800386c:	b118      	cbz	r0, 8003876 <HAL_I2C_Master_Receive+0x4a>
      return HAL_ERROR;
 800386e:	2001      	movs	r0, #1
}
 8003870:	b002      	add	sp, #8
 8003872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003876:	2322      	movs	r3, #34	@ 0x22
    hi2c->pBuffPtr  = pData;
 8003878:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    hi2c->XferISR   = NULL;
 800387c:	6360      	str	r0, [r4, #52]	@ 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800387e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003882:	2310      	movs	r3, #16
 8003884:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003888:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 800388a:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800388e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003890:	b29b      	uxth	r3, r3
 8003892:	2bff      	cmp	r3, #255	@ 0xff
 8003894:	4b30      	ldr	r3, [pc, #192]	@ (8003958 <HAL_I2C_Master_Receive+0x12c>)
 8003896:	d926      	bls.n	80038e6 <HAL_I2C_Master_Receive+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003898:	22ff      	movs	r2, #255	@ 0xff
 800389a:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800389c:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800389e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038a2:	4631      	mov	r1, r6
 80038a4:	4620      	mov	r0, r4
 80038a6:	f7ff fd47 	bl	8003338 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80038aa:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038ac:	462a      	mov	r2, r5
 80038ae:	4639      	mov	r1, r7
 80038b0:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	b9fb      	cbnz	r3, 80038f6 <HAL_I2C_Master_Receive+0xca>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038b6:	f7ff fe3b 	bl	8003530 <I2C_WaitOnSTOPFlagUntilTimeout>
 80038ba:	2800      	cmp	r0, #0
 80038bc:	d1d7      	bne.n	800386e <HAL_I2C_Master_Receive+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038be:	6823      	ldr	r3, [r4, #0]
 80038c0:	2120      	movs	r1, #32
 80038c2:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 80038ca:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 80038ce:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 80038d2:	f022 0201 	bic.w	r2, r2, #1
 80038d6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80038d8:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80038dc:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038e0:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 80038e4:	e7c4      	b.n	8003870 <HAL_I2C_Master_Receive+0x44>
      hi2c->XferSize = hi2c->XferCount;
 80038e6:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80038e8:	b292      	uxth	r2, r2
 80038ea:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038ec:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038f2:	b2d2      	uxtb	r2, r2
 80038f4:	e7d5      	b.n	80038a2 <HAL_I2C_Master_Receive+0x76>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038f6:	f7ff fe45 	bl	8003584 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038fa:	2800      	cmp	r0, #0
 80038fc:	d1b7      	bne.n	800386e <HAL_I2C_Master_Receive+0x42>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80038fe:	6823      	ldr	r3, [r4, #0]
 8003900:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003902:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003904:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003906:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8003908:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800390a:	3301      	adds	r3, #1
      hi2c->XferSize--;
 800390c:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800390e:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8003910:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8003912:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8003914:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8003916:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8003918:	b29b      	uxth	r3, r3
 800391a:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800391c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800391e:	b29b      	uxth	r3, r3
 8003920:	2b00      	cmp	r3, #0
 8003922:	d0c2      	beq.n	80038aa <HAL_I2C_Master_Receive+0x7e>
 8003924:	2a00      	cmp	r2, #0
 8003926:	d1c0      	bne.n	80038aa <HAL_I2C_Master_Receive+0x7e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003928:	463b      	mov	r3, r7
 800392a:	2180      	movs	r1, #128	@ 0x80
 800392c:	4620      	mov	r0, r4
 800392e:	9500      	str	r5, [sp, #0]
 8003930:	f7ff fdc3 	bl	80034ba <I2C_WaitOnFlagUntilTimeout>
 8003934:	2800      	cmp	r0, #0
 8003936:	d19a      	bne.n	800386e <HAL_I2C_Master_Receive+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003938:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800393a:	b29b      	uxth	r3, r3
 800393c:	2bff      	cmp	r3, #255	@ 0xff
 800393e:	d903      	bls.n	8003948 <HAL_I2C_Master_Receive+0x11c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003940:	22ff      	movs	r2, #255	@ 0xff
 8003942:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003944:	9000      	str	r0, [sp, #0]
 8003946:	e7aa      	b.n	800389e <HAL_I2C_Master_Receive+0x72>
          hi2c->XferSize = hi2c->XferCount;
 8003948:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800394a:	b292      	uxth	r2, r2
 800394c:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800394e:	9000      	str	r0, [sp, #0]
 8003950:	e7cd      	b.n	80038ee <HAL_I2C_Master_Receive+0xc2>
    __HAL_LOCK(hi2c);
 8003952:	2002      	movs	r0, #2
 8003954:	e78c      	b.n	8003870 <HAL_I2C_Master_Receive+0x44>
 8003956:	bf00      	nop
 8003958:	80002400 	.word	0x80002400

0800395c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800395c:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800395e:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 8003962:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003964:	2a20      	cmp	r2, #32
 8003966:	b2d4      	uxtb	r4, r2
 8003968:	d11c      	bne.n	80039a4 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800396a:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800396e:	2a01      	cmp	r2, #1
 8003970:	d018      	beq.n	80039a4 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003972:	2224      	movs	r2, #36	@ 0x24
 8003974:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003978:	6802      	ldr	r2, [r0, #0]
 800397a:	6810      	ldr	r0, [r2, #0]
 800397c:	f020 0001 	bic.w	r0, r0, #1
 8003980:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003982:	6810      	ldr	r0, [r2, #0]
 8003984:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8003988:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800398a:	6810      	ldr	r0, [r2, #0]
 800398c:	4301      	orrs	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800398e:	2000      	movs	r0, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 8003990:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003992:	6811      	ldr	r1, [r2, #0]
 8003994:	f041 0101 	orr.w	r1, r1, #1
 8003998:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800399a:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800399e:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 80039a2:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 80039a4:	2002      	movs	r0, #2
 80039a6:	e7fc      	b.n	80039a2 <HAL_I2CEx_ConfigAnalogFilter+0x46>

080039a8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80039a8:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039aa:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 80039ae:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80039b0:	2a20      	cmp	r2, #32
 80039b2:	b2d4      	uxtb	r4, r2
 80039b4:	d11b      	bne.n	80039ee <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039b6:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 80039ba:	2a01      	cmp	r2, #1
 80039bc:	d017      	beq.n	80039ee <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039be:	2224      	movs	r2, #36	@ 0x24
 80039c0:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039c4:	6802      	ldr	r2, [r0, #0]
 80039c6:	6810      	ldr	r0, [r2, #0]
 80039c8:	f020 0001 	bic.w	r0, r0, #1
 80039cc:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039ce:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039d0:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039d4:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039d8:	2000      	movs	r0, #0
    hi2c->Instance->CR1 = tmpreg;
 80039da:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 80039dc:	6811      	ldr	r1, [r2, #0]
 80039de:	f041 0101 	orr.w	r1, r1, #1
 80039e2:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80039e4:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80039e8:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 80039ec:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 80039ee:	2002      	movs	r0, #2
 80039f0:	e7fc      	b.n	80039ec <HAL_I2CEx_ConfigDigitalFilter+0x44>
	...

080039f4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80039f4:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80039f6:	4c10      	ldr	r4, [pc, #64]	@ (8003a38 <HAL_PWREx_ConfigSupply+0x44>)
 80039f8:	68e3      	ldr	r3, [r4, #12]
 80039fa:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80039fe:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003a00:	d105      	bne.n	8003a0e <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003a02:	f003 0307 	and.w	r3, r3, #7
 8003a06:	1a18      	subs	r0, r3, r0
 8003a08:	bf18      	it	ne
 8003a0a:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8003a0c:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003a0e:	f023 0307 	bic.w	r3, r3, #7
 8003a12:	4318      	orrs	r0, r3
 8003a14:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 8003a16:	f7fd fd97 	bl	8001548 <HAL_GetTick>
 8003a1a:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003a1c:	6863      	ldr	r3, [r4, #4]
 8003a1e:	049b      	lsls	r3, r3, #18
 8003a20:	d501      	bpl.n	8003a26 <HAL_PWREx_ConfigSupply+0x32>
      return HAL_OK;
 8003a22:	2000      	movs	r0, #0
 8003a24:	e7f2      	b.n	8003a0c <HAL_PWREx_ConfigSupply+0x18>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003a26:	f7fd fd8f 	bl	8001548 <HAL_GetTick>
 8003a2a:	1b40      	subs	r0, r0, r5
 8003a2c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8003a30:	d9f4      	bls.n	8003a1c <HAL_PWREx_ConfigSupply+0x28>
      return HAL_ERROR;
 8003a32:	2001      	movs	r0, #1
 8003a34:	e7ea      	b.n	8003a0c <HAL_PWREx_ConfigSupply+0x18>
 8003a36:	bf00      	nop
 8003a38:	58024800 	.word	0x58024800

08003a3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a3e:	4604      	mov	r4, r0
 8003a40:	2800      	cmp	r0, #0
 8003a42:	d074      	beq.n	8003b2e <HAL_RCC_OscConfig+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a44:	6803      	ldr	r3, [r0, #0]
 8003a46:	07d8      	lsls	r0, r3, #31
 8003a48:	d45e      	bmi.n	8003b08 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a4a:	6823      	ldr	r3, [r4, #0]
 8003a4c:	0799      	lsls	r1, r3, #30
 8003a4e:	f100 80ad 	bmi.w	8003bac <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003a52:	6823      	ldr	r3, [r4, #0]
 8003a54:	06da      	lsls	r2, r3, #27
 8003a56:	d527      	bpl.n	8003aa8 <HAL_RCC_OscConfig+0x6c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a58:	4a9c      	ldr	r2, [pc, #624]	@ (8003ccc <HAL_RCC_OscConfig+0x290>)
 8003a5a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a5c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003a62:	2b08      	cmp	r3, #8
 8003a64:	d007      	beq.n	8003a76 <HAL_RCC_OscConfig+0x3a>
 8003a66:	2b18      	cmp	r3, #24
 8003a68:	f040 8103 	bne.w	8003c72 <HAL_RCC_OscConfig+0x236>
 8003a6c:	f001 0303 	and.w	r3, r1, #3
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	f040 80fe 	bne.w	8003c72 <HAL_RCC_OscConfig+0x236>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a76:	6813      	ldr	r3, [r2, #0]
 8003a78:	05db      	lsls	r3, r3, #23
 8003a7a:	d502      	bpl.n	8003a82 <HAL_RCC_OscConfig+0x46>
 8003a7c:	69e3      	ldr	r3, [r4, #28]
 8003a7e:	2b80      	cmp	r3, #128	@ 0x80
 8003a80:	d155      	bne.n	8003b2e <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a82:	f7fd fd79 	bl	8001578 <HAL_GetREVID>
 8003a86:	f241 0303 	movw	r3, #4099	@ 0x1003
 8003a8a:	6a21      	ldr	r1, [r4, #32]
 8003a8c:	4298      	cmp	r0, r3
 8003a8e:	4b8f      	ldr	r3, [pc, #572]	@ (8003ccc <HAL_RCC_OscConfig+0x290>)
 8003a90:	f200 80e8 	bhi.w	8003c64 <HAL_RCC_OscConfig+0x228>
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	2920      	cmp	r1, #32
 8003a98:	f022 42f8 	bic.w	r2, r2, #2080374784	@ 0x7c000000
 8003a9c:	bf0c      	ite	eq
 8003a9e:	f042 4280 	orreq.w	r2, r2, #1073741824	@ 0x40000000
 8003aa2:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 8003aa6:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aa8:	6823      	ldr	r3, [r4, #0]
 8003aaa:	0719      	lsls	r1, r3, #28
 8003aac:	f100 8123 	bmi.w	8003cf6 <HAL_RCC_OscConfig+0x2ba>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ab0:	6823      	ldr	r3, [r4, #0]
 8003ab2:	069a      	lsls	r2, r3, #26
 8003ab4:	f100 8144 	bmi.w	8003d40 <HAL_RCC_OscConfig+0x304>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ab8:	6823      	ldr	r3, [r4, #0]
 8003aba:	075d      	lsls	r5, r3, #29
 8003abc:	d51e      	bpl.n	8003afc <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003abe:	4d84      	ldr	r5, [pc, #528]	@ (8003cd0 <HAL_RCC_OscConfig+0x294>)
 8003ac0:	682b      	ldr	r3, [r5, #0]
 8003ac2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ac6:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ac8:	f7fd fd3e 	bl	8001548 <HAL_GetTick>
 8003acc:	4606      	mov	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ace:	682b      	ldr	r3, [r5, #0]
 8003ad0:	05da      	lsls	r2, r3, #23
 8003ad2:	f140 815a 	bpl.w	8003d8a <HAL_RCC_OscConfig+0x34e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ad6:	68a3      	ldr	r3, [r4, #8]
 8003ad8:	4d7c      	ldr	r5, [pc, #496]	@ (8003ccc <HAL_RCC_OscConfig+0x290>)
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	f040 815c 	bne.w	8003d98 <HAL_RCC_OscConfig+0x35c>
 8003ae0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003ae2:	f043 0301 	orr.w	r3, r3, #1
 8003ae6:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ae8:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8003aec:	f7fd fd2c 	bl	8001548 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003af0:	4e76      	ldr	r6, [pc, #472]	@ (8003ccc <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 8003af2:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003af4:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8003af6:	079b      	lsls	r3, r3, #30
 8003af8:	f140 8174 	bpl.w	8003de4 <HAL_RCC_OscConfig+0x3a8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003afc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003afe:	2900      	cmp	r1, #0
 8003b00:	f040 8177 	bne.w	8003df2 <HAL_RCC_OscConfig+0x3b6>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 8003b04:	2000      	movs	r0, #0
 8003b06:	e02b      	b.n	8003b60 <HAL_RCC_OscConfig+0x124>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b08:	4a70      	ldr	r2, [pc, #448]	@ (8003ccc <HAL_RCC_OscConfig+0x290>)
 8003b0a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b0c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003b12:	2b10      	cmp	r3, #16
 8003b14:	d005      	beq.n	8003b22 <HAL_RCC_OscConfig+0xe6>
 8003b16:	2b18      	cmp	r3, #24
 8003b18:	d10b      	bne.n	8003b32 <HAL_RCC_OscConfig+0xf6>
 8003b1a:	f001 0303 	and.w	r3, r1, #3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d107      	bne.n	8003b32 <HAL_RCC_OscConfig+0xf6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b22:	6813      	ldr	r3, [r2, #0]
 8003b24:	039a      	lsls	r2, r3, #14
 8003b26:	d590      	bpl.n	8003a4a <HAL_RCC_OscConfig+0xe>
 8003b28:	6863      	ldr	r3, [r4, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d18d      	bne.n	8003a4a <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8003b2e:	2001      	movs	r0, #1
 8003b30:	e016      	b.n	8003b60 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b32:	6863      	ldr	r3, [r4, #4]
 8003b34:	4d65      	ldr	r5, [pc, #404]	@ (8003ccc <HAL_RCC_OscConfig+0x290>)
 8003b36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b3a:	d112      	bne.n	8003b62 <HAL_RCC_OscConfig+0x126>
 8003b3c:	682b      	ldr	r3, [r5, #0]
 8003b3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b42:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003b44:	f7fd fd00 	bl	8001548 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b48:	4e60      	ldr	r6, [pc, #384]	@ (8003ccc <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 8003b4a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b4c:	6833      	ldr	r3, [r6, #0]
 8003b4e:	039b      	lsls	r3, r3, #14
 8003b50:	f53f af7b 	bmi.w	8003a4a <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b54:	f7fd fcf8 	bl	8001548 <HAL_GetTick>
 8003b58:	1b40      	subs	r0, r0, r5
 8003b5a:	2864      	cmp	r0, #100	@ 0x64
 8003b5c:	d9f6      	bls.n	8003b4c <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 8003b5e:	2003      	movs	r0, #3
}
 8003b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b62:	b9a3      	cbnz	r3, 8003b8e <HAL_RCC_OscConfig+0x152>
 8003b64:	682b      	ldr	r3, [r5, #0]
 8003b66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b6a:	602b      	str	r3, [r5, #0]
 8003b6c:	682b      	ldr	r3, [r5, #0]
 8003b6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b72:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003b74:	f7fd fce8 	bl	8001548 <HAL_GetTick>
 8003b78:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b7a:	682b      	ldr	r3, [r5, #0]
 8003b7c:	039f      	lsls	r7, r3, #14
 8003b7e:	f57f af64 	bpl.w	8003a4a <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b82:	f7fd fce1 	bl	8001548 <HAL_GetTick>
 8003b86:	1b80      	subs	r0, r0, r6
 8003b88:	2864      	cmp	r0, #100	@ 0x64
 8003b8a:	d9f6      	bls.n	8003b7a <HAL_RCC_OscConfig+0x13e>
 8003b8c:	e7e7      	b.n	8003b5e <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b8e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b92:	682b      	ldr	r3, [r5, #0]
 8003b94:	d103      	bne.n	8003b9e <HAL_RCC_OscConfig+0x162>
 8003b96:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b9a:	602b      	str	r3, [r5, #0]
 8003b9c:	e7ce      	b.n	8003b3c <HAL_RCC_OscConfig+0x100>
 8003b9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ba2:	602b      	str	r3, [r5, #0]
 8003ba4:	682b      	ldr	r3, [r5, #0]
 8003ba6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003baa:	e7ca      	b.n	8003b42 <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bac:	4947      	ldr	r1, [pc, #284]	@ (8003ccc <HAL_RCC_OscConfig+0x290>)
 8003bae:	68e2      	ldr	r2, [r4, #12]
 8003bb0:	690b      	ldr	r3, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003bb2:	6a88      	ldr	r0, [r1, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003bb4:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 8003bb8:	d003      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x186>
 8003bba:	2b18      	cmp	r3, #24
 8003bbc:	d12a      	bne.n	8003c14 <HAL_RCC_OscConfig+0x1d8>
 8003bbe:	0780      	lsls	r0, r0, #30
 8003bc0:	d128      	bne.n	8003c14 <HAL_RCC_OscConfig+0x1d8>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bc2:	680b      	ldr	r3, [r1, #0]
 8003bc4:	075b      	lsls	r3, r3, #29
 8003bc6:	d501      	bpl.n	8003bcc <HAL_RCC_OscConfig+0x190>
 8003bc8:	2a00      	cmp	r2, #0
 8003bca:	d0b0      	beq.n	8003b2e <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003bcc:	4d3f      	ldr	r5, [pc, #252]	@ (8003ccc <HAL_RCC_OscConfig+0x290>)
 8003bce:	682b      	ldr	r3, [r5, #0]
 8003bd0:	f023 0319 	bic.w	r3, r3, #25
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003bd8:	f7fd fcb6 	bl	8001548 <HAL_GetTick>
 8003bdc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bde:	682b      	ldr	r3, [r5, #0]
 8003be0:	075f      	lsls	r7, r3, #29
 8003be2:	d511      	bpl.n	8003c08 <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003be4:	f7fd fcc8 	bl	8001578 <HAL_GetREVID>
 8003be8:	f241 0303 	movw	r3, #4099	@ 0x1003
 8003bec:	6922      	ldr	r2, [r4, #16]
 8003bee:	4298      	cmp	r0, r3
 8003bf0:	686b      	ldr	r3, [r5, #4]
 8003bf2:	d822      	bhi.n	8003c3a <HAL_RCC_OscConfig+0x1fe>
 8003bf4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003bf8:	2a40      	cmp	r2, #64	@ 0x40
 8003bfa:	bf0c      	ite	eq
 8003bfc:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 8003c00:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8003c04:	606b      	str	r3, [r5, #4]
 8003c06:	e724      	b.n	8003a52 <HAL_RCC_OscConfig+0x16>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c08:	f7fd fc9e 	bl	8001548 <HAL_GetTick>
 8003c0c:	1b80      	subs	r0, r0, r6
 8003c0e:	2802      	cmp	r0, #2
 8003c10:	d9e5      	bls.n	8003bde <HAL_RCC_OscConfig+0x1a2>
 8003c12:	e7a4      	b.n	8003b5e <HAL_RCC_OscConfig+0x122>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c14:	4d2d      	ldr	r5, [pc, #180]	@ (8003ccc <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003c16:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c18:	b1a2      	cbz	r2, 8003c44 <HAL_RCC_OscConfig+0x208>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003c1a:	f023 0319 	bic.w	r3, r3, #25
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003c22:	f7fd fc91 	bl	8001548 <HAL_GetTick>
 8003c26:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c28:	682b      	ldr	r3, [r5, #0]
 8003c2a:	0758      	lsls	r0, r3, #29
 8003c2c:	d4da      	bmi.n	8003be4 <HAL_RCC_OscConfig+0x1a8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c2e:	f7fd fc8b 	bl	8001548 <HAL_GetTick>
 8003c32:	1b80      	subs	r0, r0, r6
 8003c34:	2802      	cmp	r0, #2
 8003c36:	d9f7      	bls.n	8003c28 <HAL_RCC_OscConfig+0x1ec>
 8003c38:	e791      	b.n	8003b5e <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c3a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003c3e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003c42:	e7df      	b.n	8003c04 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_DISABLE();
 8003c44:	f023 0301 	bic.w	r3, r3, #1
 8003c48:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003c4a:	f7fd fc7d 	bl	8001548 <HAL_GetTick>
 8003c4e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c50:	682b      	ldr	r3, [r5, #0]
 8003c52:	0759      	lsls	r1, r3, #29
 8003c54:	f57f aefd 	bpl.w	8003a52 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c58:	f7fd fc76 	bl	8001548 <HAL_GetTick>
 8003c5c:	1b80      	subs	r0, r0, r6
 8003c5e:	2802      	cmp	r0, #2
 8003c60:	d9f6      	bls.n	8003c50 <HAL_RCC_OscConfig+0x214>
 8003c62:	e77c      	b.n	8003b5e <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c64:	68da      	ldr	r2, [r3, #12]
 8003c66:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
 8003c6a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003c6e:	60da      	str	r2, [r3, #12]
 8003c70:	e71a      	b.n	8003aa8 <HAL_RCC_OscConfig+0x6c>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003c72:	69e3      	ldr	r3, [r4, #28]
 8003c74:	4d15      	ldr	r5, [pc, #84]	@ (8003ccc <HAL_RCC_OscConfig+0x290>)
 8003c76:	b36b      	cbz	r3, 8003cd4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_CSI_ENABLE();
 8003c78:	682b      	ldr	r3, [r5, #0]
 8003c7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c7e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003c80:	f7fd fc62 	bl	8001548 <HAL_GetTick>
 8003c84:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c86:	682b      	ldr	r3, [r5, #0]
 8003c88:	05df      	lsls	r7, r3, #23
 8003c8a:	d511      	bpl.n	8003cb0 <HAL_RCC_OscConfig+0x274>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c8c:	f7fd fc74 	bl	8001578 <HAL_GetREVID>
 8003c90:	f241 0303 	movw	r3, #4099	@ 0x1003
 8003c94:	6a22      	ldr	r2, [r4, #32]
 8003c96:	4298      	cmp	r0, r3
 8003c98:	d810      	bhi.n	8003cbc <HAL_RCC_OscConfig+0x280>
 8003c9a:	686b      	ldr	r3, [r5, #4]
 8003c9c:	2a20      	cmp	r2, #32
 8003c9e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003ca2:	bf0c      	ite	eq
 8003ca4:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 8003ca8:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8003cac:	606b      	str	r3, [r5, #4]
 8003cae:	e6fb      	b.n	8003aa8 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003cb0:	f7fd fc4a 	bl	8001548 <HAL_GetTick>
 8003cb4:	1b80      	subs	r0, r0, r6
 8003cb6:	2802      	cmp	r0, #2
 8003cb8:	d9e5      	bls.n	8003c86 <HAL_RCC_OscConfig+0x24a>
 8003cba:	e750      	b.n	8003b5e <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003cbc:	68eb      	ldr	r3, [r5, #12]
 8003cbe:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8003cc2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003cc6:	60eb      	str	r3, [r5, #12]
 8003cc8:	e6ee      	b.n	8003aa8 <HAL_RCC_OscConfig+0x6c>
 8003cca:	bf00      	nop
 8003ccc:	58024400 	.word	0x58024400
 8003cd0:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 8003cd4:	682b      	ldr	r3, [r5, #0]
 8003cd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cda:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003cdc:	f7fd fc34 	bl	8001548 <HAL_GetTick>
 8003ce0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ce2:	682b      	ldr	r3, [r5, #0]
 8003ce4:	05d8      	lsls	r0, r3, #23
 8003ce6:	f57f aedf 	bpl.w	8003aa8 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003cea:	f7fd fc2d 	bl	8001548 <HAL_GetTick>
 8003cee:	1b80      	subs	r0, r0, r6
 8003cf0:	2802      	cmp	r0, #2
 8003cf2:	d9f6      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x2a6>
 8003cf4:	e733      	b.n	8003b5e <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003cf6:	6963      	ldr	r3, [r4, #20]
 8003cf8:	4da5      	ldr	r5, [pc, #660]	@ (8003f90 <HAL_RCC_OscConfig+0x554>)
 8003cfa:	b183      	cbz	r3, 8003d1e <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_LSI_ENABLE();
 8003cfc:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8003cfe:	f043 0301 	orr.w	r3, r3, #1
 8003d02:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8003d04:	f7fd fc20 	bl	8001548 <HAL_GetTick>
 8003d08:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d0a:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8003d0c:	079b      	lsls	r3, r3, #30
 8003d0e:	f53f aecf 	bmi.w	8003ab0 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d12:	f7fd fc19 	bl	8001548 <HAL_GetTick>
 8003d16:	1b80      	subs	r0, r0, r6
 8003d18:	2802      	cmp	r0, #2
 8003d1a:	d9f6      	bls.n	8003d0a <HAL_RCC_OscConfig+0x2ce>
 8003d1c:	e71f      	b.n	8003b5e <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 8003d1e:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8003d20:	f023 0301 	bic.w	r3, r3, #1
 8003d24:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8003d26:	f7fd fc0f 	bl	8001548 <HAL_GetTick>
 8003d2a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d2c:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8003d2e:	079f      	lsls	r7, r3, #30
 8003d30:	f57f aebe 	bpl.w	8003ab0 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d34:	f7fd fc08 	bl	8001548 <HAL_GetTick>
 8003d38:	1b80      	subs	r0, r0, r6
 8003d3a:	2802      	cmp	r0, #2
 8003d3c:	d9f6      	bls.n	8003d2c <HAL_RCC_OscConfig+0x2f0>
 8003d3e:	e70e      	b.n	8003b5e <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003d40:	69a3      	ldr	r3, [r4, #24]
 8003d42:	4d93      	ldr	r5, [pc, #588]	@ (8003f90 <HAL_RCC_OscConfig+0x554>)
 8003d44:	b183      	cbz	r3, 8003d68 <HAL_RCC_OscConfig+0x32c>
      __HAL_RCC_HSI48_ENABLE();
 8003d46:	682b      	ldr	r3, [r5, #0]
 8003d48:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003d4c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003d4e:	f7fd fbfb 	bl	8001548 <HAL_GetTick>
 8003d52:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d54:	682b      	ldr	r3, [r5, #0]
 8003d56:	0498      	lsls	r0, r3, #18
 8003d58:	f53f aeae 	bmi.w	8003ab8 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d5c:	f7fd fbf4 	bl	8001548 <HAL_GetTick>
 8003d60:	1b80      	subs	r0, r0, r6
 8003d62:	2802      	cmp	r0, #2
 8003d64:	d9f6      	bls.n	8003d54 <HAL_RCC_OscConfig+0x318>
 8003d66:	e6fa      	b.n	8003b5e <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 8003d68:	682b      	ldr	r3, [r5, #0]
 8003d6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d6e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003d70:	f7fd fbea 	bl	8001548 <HAL_GetTick>
 8003d74:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d76:	682b      	ldr	r3, [r5, #0]
 8003d78:	0499      	lsls	r1, r3, #18
 8003d7a:	f57f ae9d 	bpl.w	8003ab8 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d7e:	f7fd fbe3 	bl	8001548 <HAL_GetTick>
 8003d82:	1b80      	subs	r0, r0, r6
 8003d84:	2802      	cmp	r0, #2
 8003d86:	d9f6      	bls.n	8003d76 <HAL_RCC_OscConfig+0x33a>
 8003d88:	e6e9      	b.n	8003b5e <HAL_RCC_OscConfig+0x122>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d8a:	f7fd fbdd 	bl	8001548 <HAL_GetTick>
 8003d8e:	1b80      	subs	r0, r0, r6
 8003d90:	2864      	cmp	r0, #100	@ 0x64
 8003d92:	f67f ae9c 	bls.w	8003ace <HAL_RCC_OscConfig+0x92>
 8003d96:	e6e2      	b.n	8003b5e <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d98:	b9b3      	cbnz	r3, 8003dc8 <HAL_RCC_OscConfig+0x38c>
 8003d9a:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d9c:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003da0:	f023 0301 	bic.w	r3, r3, #1
 8003da4:	672b      	str	r3, [r5, #112]	@ 0x70
 8003da6:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003da8:	f023 0304 	bic.w	r3, r3, #4
 8003dac:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8003dae:	f7fd fbcb 	bl	8001548 <HAL_GetTick>
 8003db2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003db4:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003db6:	0798      	lsls	r0, r3, #30
 8003db8:	f57f aea0 	bpl.w	8003afc <HAL_RCC_OscConfig+0xc0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dbc:	f7fd fbc4 	bl	8001548 <HAL_GetTick>
 8003dc0:	1b80      	subs	r0, r0, r6
 8003dc2:	42b8      	cmp	r0, r7
 8003dc4:	d9f6      	bls.n	8003db4 <HAL_RCC_OscConfig+0x378>
 8003dc6:	e6ca      	b.n	8003b5e <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dc8:	2b05      	cmp	r3, #5
 8003dca:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003dcc:	d103      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x39a>
 8003dce:	f043 0304 	orr.w	r3, r3, #4
 8003dd2:	672b      	str	r3, [r5, #112]	@ 0x70
 8003dd4:	e684      	b.n	8003ae0 <HAL_RCC_OscConfig+0xa4>
 8003dd6:	f023 0301 	bic.w	r3, r3, #1
 8003dda:	672b      	str	r3, [r5, #112]	@ 0x70
 8003ddc:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003dde:	f023 0304 	bic.w	r3, r3, #4
 8003de2:	e680      	b.n	8003ae6 <HAL_RCC_OscConfig+0xaa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003de4:	f7fd fbb0 	bl	8001548 <HAL_GetTick>
 8003de8:	1b40      	subs	r0, r0, r5
 8003dea:	42b8      	cmp	r0, r7
 8003dec:	f67f ae82 	bls.w	8003af4 <HAL_RCC_OscConfig+0xb8>
 8003df0:	e6b5      	b.n	8003b5e <HAL_RCC_OscConfig+0x122>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003df2:	4d67      	ldr	r5, [pc, #412]	@ (8003f90 <HAL_RCC_OscConfig+0x554>)
 8003df4:	692b      	ldr	r3, [r5, #16]
 8003df6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003dfa:	2b18      	cmp	r3, #24
 8003dfc:	d07a      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
 8003dfe:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e00:	2902      	cmp	r1, #2
        __HAL_RCC_PLL_DISABLE();
 8003e02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e06:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e08:	d167      	bne.n	8003eda <HAL_RCC_OscConfig+0x49e>
        tickstart = HAL_GetTick();
 8003e0a:	f7fd fb9d 	bl	8001548 <HAL_GetTick>
 8003e0e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e10:	682b      	ldr	r3, [r5, #0]
 8003e12:	0199      	lsls	r1, r3, #6
 8003e14:	d45b      	bmi.n	8003ece <HAL_RCC_OscConfig+0x492>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e16:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8003e18:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003e1a:	f423 737c 	bic.w	r3, r3, #1008	@ 0x3f0
 8003e1e:	f023 0303 	bic.w	r3, r3, #3
 8003e22:	4313      	orrs	r3, r2
 8003e24:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003e26:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003e2a:	62ab      	str	r3, [r5, #40]	@ 0x28
 8003e2c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003e2e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003e30:	3b01      	subs	r3, #1
 8003e32:	3a01      	subs	r2, #1
 8003e34:	025b      	lsls	r3, r3, #9
 8003e36:	0412      	lsls	r2, r2, #16
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003e42:	3a01      	subs	r2, #1
 8003e44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003e4c:	3a01      	subs	r2, #1
 8003e4e:	0612      	lsls	r2, r2, #24
 8003e50:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8003e54:	4313      	orrs	r3, r2
 8003e56:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8003e58:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003e5a:	f023 0301 	bic.w	r3, r3, #1
 8003e5e:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003e60:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8003e62:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8003e64:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e68:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003e6c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003e70:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003e72:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003e74:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003e76:	f023 030c 	bic.w	r3, r3, #12
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003e7e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003e80:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003e82:	f023 0302 	bic.w	r3, r3, #2
 8003e86:	4313      	orrs	r3, r2
 8003e88:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003e8a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003e8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e90:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e92:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003e94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e98:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003e9a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003e9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ea0:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8003ea2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003ea4:	f043 0301 	orr.w	r3, r3, #1
 8003ea8:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 8003eaa:	682b      	ldr	r3, [r5, #0]
 8003eac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003eb0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003eb2:	f7fd fb49 	bl	8001548 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003eb6:	4d36      	ldr	r5, [pc, #216]	@ (8003f90 <HAL_RCC_OscConfig+0x554>)
        tickstart = HAL_GetTick();
 8003eb8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003eba:	682b      	ldr	r3, [r5, #0]
 8003ebc:	019a      	lsls	r2, r3, #6
 8003ebe:	f53f ae21 	bmi.w	8003b04 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ec2:	f7fd fb41 	bl	8001548 <HAL_GetTick>
 8003ec6:	1b00      	subs	r0, r0, r4
 8003ec8:	2802      	cmp	r0, #2
 8003eca:	d9f6      	bls.n	8003eba <HAL_RCC_OscConfig+0x47e>
 8003ecc:	e647      	b.n	8003b5e <HAL_RCC_OscConfig+0x122>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ece:	f7fd fb3b 	bl	8001548 <HAL_GetTick>
 8003ed2:	1b80      	subs	r0, r0, r6
 8003ed4:	2802      	cmp	r0, #2
 8003ed6:	d99b      	bls.n	8003e10 <HAL_RCC_OscConfig+0x3d4>
 8003ed8:	e641      	b.n	8003b5e <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 8003eda:	f7fd fb35 	bl	8001548 <HAL_GetTick>
 8003ede:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ee0:	682b      	ldr	r3, [r5, #0]
 8003ee2:	019b      	lsls	r3, r3, #6
 8003ee4:	f57f ae0e 	bpl.w	8003b04 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee8:	f7fd fb2e 	bl	8001548 <HAL_GetTick>
 8003eec:	1b00      	subs	r0, r0, r4
 8003eee:	2802      	cmp	r0, #2
 8003ef0:	d9f6      	bls.n	8003ee0 <HAL_RCC_OscConfig+0x4a4>
 8003ef2:	e634      	b.n	8003b5e <HAL_RCC_OscConfig+0x122>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ef4:	2901      	cmp	r1, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003ef6:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003ef8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003efa:	f43f ae18 	beq.w	8003b2e <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003efe:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f02:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003f04:	4281      	cmp	r1, r0
 8003f06:	f47f ae12 	bne.w	8003b2e <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f0a:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f0e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003f10:	428a      	cmp	r2, r1
 8003f12:	f47f ae0c 	bne.w	8003b2e <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003f16:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003f18:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8003f1c:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f1e:	4291      	cmp	r1, r2
 8003f20:	f47f ae05 	bne.w	8003b2e <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003f24:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8003f26:	f3c3 2146 	ubfx	r1, r3, #9, #7
 8003f2a:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003f2c:	4291      	cmp	r1, r2
 8003f2e:	f47f adfe 	bne.w	8003b2e <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003f32:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003f34:	f3c3 4106 	ubfx	r1, r3, #16, #7
 8003f38:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003f3a:	4291      	cmp	r1, r2
 8003f3c:	f47f adf7 	bne.w	8003b2e <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003f40:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003f42:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8003f46:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	f47f adf0 	bne.w	8003b2e <HAL_RCC_OscConfig+0xf2>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003f4e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003f50:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003f52:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003f56:	429a      	cmp	r2, r3
 8003f58:	f43f add4 	beq.w	8003b04 <HAL_RCC_OscConfig+0xc8>
          __HAL_RCC_PLLFRACN_DISABLE();
 8003f5c:	4d0c      	ldr	r5, [pc, #48]	@ (8003f90 <HAL_RCC_OscConfig+0x554>)
 8003f5e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003f60:	f023 0301 	bic.w	r3, r3, #1
 8003f64:	62eb      	str	r3, [r5, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 8003f66:	f7fd faef 	bl	8001548 <HAL_GetTick>
 8003f6a:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003f6c:	f7fd faec 	bl	8001548 <HAL_GetTick>
 8003f70:	42b0      	cmp	r0, r6
 8003f72:	d0fb      	beq.n	8003f6c <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f74:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8003f76:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8003f78:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f7c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003f80:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003f84:	636b      	str	r3, [r5, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8003f86:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003f88:	f043 0301 	orr.w	r3, r3, #1
 8003f8c:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8003f8e:	e5b9      	b.n	8003b04 <HAL_RCC_OscConfig+0xc8>
 8003f90:	58024400 	.word	0x58024400

08003f94 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003f94:	b570      	push	{r4, r5, r6, lr}
 8003f96:	4c23      	ldr	r4, [pc, #140]	@ (8004024 <HAL_RCC_MCOConfig+0x90>)
 8003f98:	b088      	sub	sp, #32
 8003f9a:	460e      	mov	r6, r1
 8003f9c:	4615      	mov	r5, r2
  if (RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8003f9e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  if (RCC_MCOx == RCC_MCO1)
 8003fa2:	b9f8      	cbnz	r0, 8003fe4 <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 8003fa4:	f043 0301 	orr.w	r3, r3, #1

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fa8:	f44f 7c80 	mov.w	ip, #256	@ 0x100
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8003fac:	a903      	add	r1, sp, #12
    MCO1_CLK_ENABLE();
 8003fae:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8003fb2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003fb6:	9007      	str	r0, [sp, #28]
    MCO1_CLK_ENABLE();
 8003fb8:	f003 0301 	and.w	r3, r3, #1
 8003fbc:	9301      	str	r3, [sp, #4]
 8003fbe:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	e9cd c303 	strd	ip, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fc6:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc8:	e9cd 0305 	strd	r0, r3, [sp, #20]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8003fcc:	4816      	ldr	r0, [pc, #88]	@ (8004028 <HAL_RCC_MCOConfig+0x94>)
 8003fce:	f7ff f8af 	bl	8003130 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8003fd2:	6923      	ldr	r3, [r4, #16]
 8003fd4:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 8003fd8:	ea43 0106 	orr.w	r1, r3, r6
 8003fdc:	4329      	orrs	r1, r5
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8003fde:	6121      	str	r1, [r4, #16]
  }
}
 8003fe0:	b008      	add	sp, #32
 8003fe2:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 8003fe4:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe8:	f44f 7200 	mov.w	r2, #512	@ 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fec:	2103      	movs	r1, #3
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003fee:	480f      	ldr	r0, [pc, #60]	@ (800402c <HAL_RCC_MCOConfig+0x98>)
    MCO2_CLK_ENABLE();
 8003ff0:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8003ff4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	9302      	str	r3, [sp, #8]
 8003ffe:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004000:	2302      	movs	r3, #2
 8004002:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004006:	2300      	movs	r3, #0
 8004008:	e9cd 3105 	strd	r3, r1, [sp, #20]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800400c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800400e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8004010:	f7ff f88e 	bl	8003130 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8004014:	6923      	ldr	r3, [r4, #16]
 8004016:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 800401a:	ea43 0106 	orr.w	r1, r3, r6
 800401e:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
 8004022:	e7dc      	b.n	8003fde <HAL_RCC_MCOConfig+0x4a>
 8004024:	58024400 	.word	0x58024400
 8004028:	58020000 	.word	0x58020000
 800402c:	58020800 	.word	0x58020800

08004030 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004030:	4b49      	ldr	r3, [pc, #292]	@ (8004158 <HAL_RCC_GetSysClockFreq+0x128>)
 8004032:	691a      	ldr	r2, [r3, #16]
 8004034:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8004038:	2a10      	cmp	r2, #16
{
 800403a:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800403c:	f000 8088 	beq.w	8004150 <HAL_RCC_GetSysClockFreq+0x120>
 8004040:	2a18      	cmp	r2, #24
 8004042:	d00c      	beq.n	800405e <HAL_RCC_GetSysClockFreq+0x2e>
 8004044:	2a00      	cmp	r2, #0
 8004046:	f040 8085 	bne.w	8004154 <HAL_RCC_GetSysClockFreq+0x124>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	4843      	ldr	r0, [pc, #268]	@ (800415c <HAL_RCC_GetSysClockFreq+0x12c>)
 800404e:	f012 0f20 	tst.w	r2, #32
 8004052:	d003      	beq.n	800405c <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800405a:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800405c:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800405e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004060:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004062:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
      if (pllm != 0U)
 8004064:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004068:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800406c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      if (pllm != 0U)
 800406e:	d0f5      	beq.n	800405c <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004070:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004074:	f004 0401 	and.w	r4, r4, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004078:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800407c:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004080:	4362      	muls	r2, r4
 8004082:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8004086:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004088:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800408c:	ee06 2a90 	vmov	s13, r2
 8004090:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8004094:	d04e      	beq.n	8004134 <HAL_RCC_GetSysClockFreq+0x104>
 8004096:	2902      	cmp	r1, #2
 8004098:	d03e      	beq.n	8004118 <HAL_RCC_GetSysClockFreq+0xe8>
 800409a:	2900      	cmp	r1, #0
 800409c:	d14a      	bne.n	8004134 <HAL_RCC_GetSysClockFreq+0x104>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	0692      	lsls	r2, r2, #26
 80040a2:	d527      	bpl.n	80040f4 <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80040a4:	6819      	ldr	r1, [r3, #0]
 80040a6:	4a2d      	ldr	r2, [pc, #180]	@ (800415c <HAL_RCC_GetSysClockFreq+0x12c>)
 80040a8:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80040ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80040ae:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80040b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040b4:	ee07 2a90 	vmov	s15, r2
 80040b8:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80040bc:	eec5 7a87 	vdiv.f32	s15, s11, s14
 80040c0:	ee07 3a10 	vmov	s14, r3
 80040c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80040c8:	ee37 7a26 	vadd.f32	s14, s14, s13
 80040cc:	ee37 7a06 	vadd.f32	s14, s14, s12
 80040d0:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80040d4:	4b20      	ldr	r3, [pc, #128]	@ (8004158 <HAL_RCC_GetSysClockFreq+0x128>)
 80040d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80040dc:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80040de:	ee07 3a10 	vmov	s14, r3
 80040e2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80040e6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80040ea:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80040ee:	ee17 0a90 	vmov	r0, s15
 80040f2:	e7b3      	b.n	800405c <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80040f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040fa:	ee07 3a90 	vmov	s15, r3
 80040fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004106:	ee77 7a86 	vadd.f32	s15, s15, s12
 800410a:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8004160 <HAL_RCC_GetSysClockFreq+0x130>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800410e:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004112:	ee67 7aa6 	vmul.f32	s15, s15, s13
            break;
 8004116:	e7dd      	b.n	80040d4 <HAL_RCC_GetSysClockFreq+0xa4>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800411a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800411e:	ee07 3a90 	vmov	s15, r3
 8004122:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800412a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800412e:	ed9f 6a0d 	vldr	s12, [pc, #52]	@ 8004164 <HAL_RCC_GetSysClockFreq+0x134>
 8004132:	e7ec      	b.n	800410e <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800413a:	ee07 3a90 	vmov	s15, r3
 800413e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004146:	ee77 7a86 	vadd.f32	s15, s15, s12
 800414a:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 8004168 <HAL_RCC_GetSysClockFreq+0x138>
 800414e:	e7de      	b.n	800410e <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004150:	4806      	ldr	r0, [pc, #24]	@ (800416c <HAL_RCC_GetSysClockFreq+0x13c>)
 8004152:	e783      	b.n	800405c <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 8004154:	4806      	ldr	r0, [pc, #24]	@ (8004170 <HAL_RCC_GetSysClockFreq+0x140>)
 8004156:	e781      	b.n	800405c <HAL_RCC_GetSysClockFreq+0x2c>
 8004158:	58024400 	.word	0x58024400
 800415c:	03d09000 	.word	0x03d09000
 8004160:	4c742400 	.word	0x4c742400
 8004164:	4af42400 	.word	0x4af42400
 8004168:	4a742400 	.word	0x4a742400
 800416c:	007a1200 	.word	0x007a1200
 8004170:	003d0900 	.word	0x003d0900

08004174 <HAL_RCC_ClockConfig>:
{
 8004174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004178:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800417a:	4604      	mov	r4, r0
 800417c:	b910      	cbnz	r0, 8004184 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800417e:	2001      	movs	r0, #1
}
 8004180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004184:	4a88      	ldr	r2, [pc, #544]	@ (80043a8 <HAL_RCC_ClockConfig+0x234>)
 8004186:	6813      	ldr	r3, [r2, #0]
 8004188:	f003 030f 	and.w	r3, r3, #15
 800418c:	428b      	cmp	r3, r1
 800418e:	f0c0 8093 	bcc.w	80042b8 <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004192:	6823      	ldr	r3, [r4, #0]
 8004194:	075f      	lsls	r7, r3, #29
 8004196:	f100 809b 	bmi.w	80042d0 <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800419a:	071e      	lsls	r6, r3, #28
 800419c:	d50b      	bpl.n	80041b6 <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800419e:	4983      	ldr	r1, [pc, #524]	@ (80043ac <HAL_RCC_ClockConfig+0x238>)
 80041a0:	6960      	ldr	r0, [r4, #20]
 80041a2:	69ca      	ldr	r2, [r1, #28]
 80041a4:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80041a8:	4290      	cmp	r0, r2
 80041aa:	d904      	bls.n	80041b6 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80041ac:	69ca      	ldr	r2, [r1, #28]
 80041ae:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80041b2:	4302      	orrs	r2, r0
 80041b4:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041b6:	06d8      	lsls	r0, r3, #27
 80041b8:	d50b      	bpl.n	80041d2 <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80041ba:	497c      	ldr	r1, [pc, #496]	@ (80043ac <HAL_RCC_ClockConfig+0x238>)
 80041bc:	69a0      	ldr	r0, [r4, #24]
 80041be:	69ca      	ldr	r2, [r1, #28]
 80041c0:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 80041c4:	4290      	cmp	r0, r2
 80041c6:	d904      	bls.n	80041d2 <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80041c8:	69ca      	ldr	r2, [r1, #28]
 80041ca:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80041ce:	4302      	orrs	r2, r0
 80041d0:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80041d2:	0699      	lsls	r1, r3, #26
 80041d4:	d50b      	bpl.n	80041ee <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80041d6:	4975      	ldr	r1, [pc, #468]	@ (80043ac <HAL_RCC_ClockConfig+0x238>)
 80041d8:	69e0      	ldr	r0, [r4, #28]
 80041da:	6a0a      	ldr	r2, [r1, #32]
 80041dc:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80041e0:	4290      	cmp	r0, r2
 80041e2:	d904      	bls.n	80041ee <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80041e4:	6a0a      	ldr	r2, [r1, #32]
 80041e6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80041ea:	4302      	orrs	r2, r0
 80041ec:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041ee:	079a      	lsls	r2, r3, #30
 80041f0:	d50b      	bpl.n	800420a <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80041f2:	496e      	ldr	r1, [pc, #440]	@ (80043ac <HAL_RCC_ClockConfig+0x238>)
 80041f4:	68e0      	ldr	r0, [r4, #12]
 80041f6:	698a      	ldr	r2, [r1, #24]
 80041f8:	f002 020f 	and.w	r2, r2, #15
 80041fc:	4290      	cmp	r0, r2
 80041fe:	d904      	bls.n	800420a <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004200:	698a      	ldr	r2, [r1, #24]
 8004202:	f022 020f 	bic.w	r2, r2, #15
 8004206:	4302      	orrs	r2, r0
 8004208:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800420a:	07df      	lsls	r7, r3, #31
 800420c:	d46e      	bmi.n	80042ec <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800420e:	6823      	ldr	r3, [r4, #0]
 8004210:	079e      	lsls	r6, r3, #30
 8004212:	f100 80a1 	bmi.w	8004358 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004216:	4964      	ldr	r1, [pc, #400]	@ (80043a8 <HAL_RCC_ClockConfig+0x234>)
 8004218:	680a      	ldr	r2, [r1, #0]
 800421a:	f002 020f 	and.w	r2, r2, #15
 800421e:	42aa      	cmp	r2, r5
 8004220:	f200 80a8 	bhi.w	8004374 <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004224:	0758      	lsls	r0, r3, #29
 8004226:	f100 80b1 	bmi.w	800438c <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800422a:	0719      	lsls	r1, r3, #28
 800422c:	d50b      	bpl.n	8004246 <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800422e:	495f      	ldr	r1, [pc, #380]	@ (80043ac <HAL_RCC_ClockConfig+0x238>)
 8004230:	6960      	ldr	r0, [r4, #20]
 8004232:	69ca      	ldr	r2, [r1, #28]
 8004234:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8004238:	4290      	cmp	r0, r2
 800423a:	d204      	bcs.n	8004246 <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800423c:	69ca      	ldr	r2, [r1, #28]
 800423e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004242:	4302      	orrs	r2, r0
 8004244:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004246:	06da      	lsls	r2, r3, #27
 8004248:	d50b      	bpl.n	8004262 <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800424a:	4958      	ldr	r1, [pc, #352]	@ (80043ac <HAL_RCC_ClockConfig+0x238>)
 800424c:	69a0      	ldr	r0, [r4, #24]
 800424e:	69ca      	ldr	r2, [r1, #28]
 8004250:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8004254:	4290      	cmp	r0, r2
 8004256:	d204      	bcs.n	8004262 <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004258:	69ca      	ldr	r2, [r1, #28]
 800425a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800425e:	4302      	orrs	r2, r0
 8004260:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004262:	069b      	lsls	r3, r3, #26
 8004264:	d50b      	bpl.n	800427e <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004266:	4a51      	ldr	r2, [pc, #324]	@ (80043ac <HAL_RCC_ClockConfig+0x238>)
 8004268:	69e1      	ldr	r1, [r4, #28]
 800426a:	6a13      	ldr	r3, [r2, #32]
 800426c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004270:	4299      	cmp	r1, r3
 8004272:	d204      	bcs.n	800427e <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004274:	6a13      	ldr	r3, [r2, #32]
 8004276:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800427a:	430b      	orrs	r3, r1
 800427c:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800427e:	f7ff fed7 	bl	8004030 <HAL_RCC_GetSysClockFreq>
 8004282:	494a      	ldr	r1, [pc, #296]	@ (80043ac <HAL_RCC_ClockConfig+0x238>)
 8004284:	4a4a      	ldr	r2, [pc, #296]	@ (80043b0 <HAL_RCC_ClockConfig+0x23c>)
 8004286:	698b      	ldr	r3, [r1, #24]
 8004288:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800428c:	5cd3      	ldrb	r3, [r2, r3]
 800428e:	f003 031f 	and.w	r3, r3, #31
 8004292:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004294:	698b      	ldr	r3, [r1, #24]
 8004296:	f003 030f 	and.w	r3, r3, #15
 800429a:	5cd3      	ldrb	r3, [r2, r3]
 800429c:	4a45      	ldr	r2, [pc, #276]	@ (80043b4 <HAL_RCC_ClockConfig+0x240>)
 800429e:	f003 031f 	and.w	r3, r3, #31
 80042a2:	fa20 f303 	lsr.w	r3, r0, r3
 80042a6:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 80042a8:	4b43      	ldr	r3, [pc, #268]	@ (80043b8 <HAL_RCC_ClockConfig+0x244>)
 80042aa:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 80042ac:	4b43      	ldr	r3, [pc, #268]	@ (80043bc <HAL_RCC_ClockConfig+0x248>)
}
 80042ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 80042b2:	6818      	ldr	r0, [r3, #0]
 80042b4:	f7fd b8e8 	b.w	8001488 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042b8:	6813      	ldr	r3, [r2, #0]
 80042ba:	f023 030f 	bic.w	r3, r3, #15
 80042be:	430b      	orrs	r3, r1
 80042c0:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042c2:	6813      	ldr	r3, [r2, #0]
 80042c4:	f003 030f 	and.w	r3, r3, #15
 80042c8:	428b      	cmp	r3, r1
 80042ca:	f47f af58 	bne.w	800417e <HAL_RCC_ClockConfig+0xa>
 80042ce:	e760      	b.n	8004192 <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80042d0:	4936      	ldr	r1, [pc, #216]	@ (80043ac <HAL_RCC_ClockConfig+0x238>)
 80042d2:	6920      	ldr	r0, [r4, #16]
 80042d4:	698a      	ldr	r2, [r1, #24]
 80042d6:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80042da:	4290      	cmp	r0, r2
 80042dc:	f67f af5d 	bls.w	800419a <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80042e0:	698a      	ldr	r2, [r1, #24]
 80042e2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80042e6:	4302      	orrs	r2, r0
 80042e8:	618a      	str	r2, [r1, #24]
 80042ea:	e756      	b.n	800419a <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80042ec:	4b2f      	ldr	r3, [pc, #188]	@ (80043ac <HAL_RCC_ClockConfig+0x238>)
 80042ee:	68a1      	ldr	r1, [r4, #8]
 80042f0:	699a      	ldr	r2, [r3, #24]
 80042f2:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 80042f6:	430a      	orrs	r2, r1
 80042f8:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042fa:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80042fc:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042fe:	2902      	cmp	r1, #2
 8004300:	d11d      	bne.n	800433e <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004302:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004306:	f43f af3a 	beq.w	800417e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800430a:	691a      	ldr	r2, [r3, #16]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800430c:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004310:	4f26      	ldr	r7, [pc, #152]	@ (80043ac <HAL_RCC_ClockConfig+0x238>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004312:	f022 0207 	bic.w	r2, r2, #7
 8004316:	430a      	orrs	r2, r1
 8004318:	611a      	str	r2, [r3, #16]
    tickstart = HAL_GetTick();
 800431a:	f7fd f915 	bl	8001548 <HAL_GetTick>
 800431e:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	6862      	ldr	r2, [r4, #4]
 8004324:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004328:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800432c:	f43f af6f 	beq.w	800420e <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004330:	f7fd f90a 	bl	8001548 <HAL_GetTick>
 8004334:	1b80      	subs	r0, r0, r6
 8004336:	4540      	cmp	r0, r8
 8004338:	d9f2      	bls.n	8004320 <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 800433a:	2003      	movs	r0, #3
 800433c:	e720      	b.n	8004180 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800433e:	2903      	cmp	r1, #3
 8004340:	d102      	bne.n	8004348 <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004342:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8004346:	e7de      	b.n	8004306 <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004348:	2901      	cmp	r1, #1
 800434a:	d102      	bne.n	8004352 <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800434c:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8004350:	e7d9      	b.n	8004306 <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004352:	f012 0f04 	tst.w	r2, #4
 8004356:	e7d6      	b.n	8004306 <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004358:	4914      	ldr	r1, [pc, #80]	@ (80043ac <HAL_RCC_ClockConfig+0x238>)
 800435a:	68e0      	ldr	r0, [r4, #12]
 800435c:	698a      	ldr	r2, [r1, #24]
 800435e:	f002 020f 	and.w	r2, r2, #15
 8004362:	4290      	cmp	r0, r2
 8004364:	f4bf af57 	bcs.w	8004216 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004368:	698a      	ldr	r2, [r1, #24]
 800436a:	f022 020f 	bic.w	r2, r2, #15
 800436e:	4302      	orrs	r2, r0
 8004370:	618a      	str	r2, [r1, #24]
 8004372:	e750      	b.n	8004216 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004374:	680a      	ldr	r2, [r1, #0]
 8004376:	f022 020f 	bic.w	r2, r2, #15
 800437a:	432a      	orrs	r2, r5
 800437c:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800437e:	680a      	ldr	r2, [r1, #0]
 8004380:	f002 020f 	and.w	r2, r2, #15
 8004384:	42aa      	cmp	r2, r5
 8004386:	f47f aefa 	bne.w	800417e <HAL_RCC_ClockConfig+0xa>
 800438a:	e74b      	b.n	8004224 <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800438c:	4907      	ldr	r1, [pc, #28]	@ (80043ac <HAL_RCC_ClockConfig+0x238>)
 800438e:	6920      	ldr	r0, [r4, #16]
 8004390:	698a      	ldr	r2, [r1, #24]
 8004392:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8004396:	4290      	cmp	r0, r2
 8004398:	f4bf af47 	bcs.w	800422a <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800439c:	698a      	ldr	r2, [r1, #24]
 800439e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80043a2:	4302      	orrs	r2, r0
 80043a4:	618a      	str	r2, [r1, #24]
 80043a6:	e740      	b.n	800422a <HAL_RCC_ClockConfig+0xb6>
 80043a8:	52002000 	.word	0x52002000
 80043ac:	58024400 	.word	0x58024400
 80043b0:	0800ed1b 	.word	0x0800ed1b
 80043b4:	24000008 	.word	0x24000008
 80043b8:	2400000c 	.word	0x2400000c
 80043bc:	24000014 	.word	0x24000014

080043c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043c0:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80043c2:	f7ff fe35 	bl	8004030 <HAL_RCC_GetSysClockFreq>
 80043c6:	4a0b      	ldr	r2, [pc, #44]	@ (80043f4 <HAL_RCC_GetHCLKFreq+0x34>)
 80043c8:	490b      	ldr	r1, [pc, #44]	@ (80043f8 <HAL_RCC_GetHCLKFreq+0x38>)
 80043ca:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043cc:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80043ce:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043d2:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80043d6:	5ccb      	ldrb	r3, [r1, r3]
 80043d8:	f003 031f 	and.w	r3, r3, #31
 80043dc:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043e0:	5c88      	ldrb	r0, [r1, r2]
 80043e2:	4a06      	ldr	r2, [pc, #24]	@ (80043fc <HAL_RCC_GetHCLKFreq+0x3c>)
 80043e4:	f000 001f 	and.w	r0, r0, #31
 80043e8:	fa23 f000 	lsr.w	r0, r3, r0
 80043ec:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80043ee:	4a04      	ldr	r2, [pc, #16]	@ (8004400 <HAL_RCC_GetHCLKFreq+0x40>)
 80043f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 80043f2:	bd08      	pop	{r3, pc}
 80043f4:	58024400 	.word	0x58024400
 80043f8:	0800ed1b 	.word	0x0800ed1b
 80043fc:	24000008 	.word	0x24000008
 8004400:	2400000c 	.word	0x2400000c

08004404 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004404:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004406:	f7ff ffdb 	bl	80043c0 <HAL_RCC_GetHCLKFreq>
 800440a:	4b05      	ldr	r3, [pc, #20]	@ (8004420 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800440c:	4a05      	ldr	r2, [pc, #20]	@ (8004424 <HAL_RCC_GetPCLK1Freq+0x20>)
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004414:	5cd3      	ldrb	r3, [r2, r3]
 8004416:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800441a:	40d8      	lsrs	r0, r3
 800441c:	bd08      	pop	{r3, pc}
 800441e:	bf00      	nop
 8004420:	58024400 	.word	0x58024400
 8004424:	0800ed1b 	.word	0x0800ed1b

08004428 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004428:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800442a:	f7ff ffc9 	bl	80043c0 <HAL_RCC_GetHCLKFreq>
 800442e:	4b05      	ldr	r3, [pc, #20]	@ (8004444 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004430:	4a05      	ldr	r2, [pc, #20]	@ (8004448 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004432:	69db      	ldr	r3, [r3, #28]
 8004434:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004438:	5cd3      	ldrb	r3, [r2, r3]
 800443a:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800443e:	40d8      	lsrs	r0, r3
 8004440:	bd08      	pop	{r3, pc}
 8004442:	bf00      	nop
 8004444:	58024400 	.word	0x58024400
 8004448:	0800ed1b 	.word	0x0800ed1b

0800444c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800444c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800444e:	4c3a      	ldr	r4, [pc, #232]	@ (8004538 <RCCEx_PLL2_Config+0xec>)
{
 8004450:	4606      	mov	r6, r0
 8004452:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004454:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004456:	f003 0303 	and.w	r3, r3, #3
 800445a:	2b03      	cmp	r3, #3
 800445c:	d069      	beq.n	8004532 <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800445e:	6823      	ldr	r3, [r4, #0]
 8004460:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004464:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004466:	f7fd f86f 	bl	8001548 <HAL_GetTick>
 800446a:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800446c:	6823      	ldr	r3, [r4, #0]
 800446e:	011a      	lsls	r2, r3, #4
 8004470:	d44b      	bmi.n	800450a <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004472:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004474:	6832      	ldr	r2, [r6, #0]
 8004476:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800447a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800447e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004480:	68b3      	ldr	r3, [r6, #8]
 8004482:	68f2      	ldr	r2, [r6, #12]
 8004484:	3b01      	subs	r3, #1
 8004486:	3a01      	subs	r2, #1
 8004488:	025b      	lsls	r3, r3, #9
 800448a:	0412      	lsls	r2, r2, #16
 800448c:	b29b      	uxth	r3, r3
 800448e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004492:	4313      	orrs	r3, r2
 8004494:	6872      	ldr	r2, [r6, #4]
 8004496:	3a01      	subs	r2, #1
 8004498:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800449c:	4313      	orrs	r3, r2
 800449e:	6932      	ldr	r2, [r6, #16]
 80044a0:	3a01      	subs	r2, #1
 80044a2:	0612      	lsls	r2, r2, #24
 80044a4:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80044a8:	4313      	orrs	r3, r2
 80044aa:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80044ac:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80044ae:	6972      	ldr	r2, [r6, #20]
 80044b0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80044b4:	4313      	orrs	r3, r2
 80044b6:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80044b8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80044ba:	69b2      	ldr	r2, [r6, #24]
 80044bc:	f023 0320 	bic.w	r3, r3, #32
 80044c0:	4313      	orrs	r3, r2
 80044c2:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80044c4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80044c6:	f023 0310 	bic.w	r3, r3, #16
 80044ca:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80044cc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80044ce:	69f2      	ldr	r2, [r6, #28]
 80044d0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80044d4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80044d8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80044dc:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80044de:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80044e0:	f043 0310 	orr.w	r3, r3, #16
 80044e4:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80044e6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 80044e8:	b9b5      	cbnz	r5, 8004518 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80044ea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80044ee:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80044f0:	4c11      	ldr	r4, [pc, #68]	@ (8004538 <RCCEx_PLL2_Config+0xec>)
 80044f2:	6823      	ldr	r3, [r4, #0]
 80044f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80044f8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044fa:	f7fd f825 	bl	8001548 <HAL_GetTick>
 80044fe:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004500:	6823      	ldr	r3, [r4, #0]
 8004502:	011b      	lsls	r3, r3, #4
 8004504:	d50f      	bpl.n	8004526 <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 8004506:	2000      	movs	r0, #0
 8004508:	e005      	b.n	8004516 <RCCEx_PLL2_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800450a:	f7fd f81d 	bl	8001548 <HAL_GetTick>
 800450e:	1bc0      	subs	r0, r0, r7
 8004510:	2802      	cmp	r0, #2
 8004512:	d9ab      	bls.n	800446c <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8004514:	2003      	movs	r0, #3
}
 8004516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 8004518:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800451a:	bf0c      	ite	eq
 800451c:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004520:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 8004524:	e7e3      	b.n	80044ee <RCCEx_PLL2_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004526:	f7fd f80f 	bl	8001548 <HAL_GetTick>
 800452a:	1b40      	subs	r0, r0, r5
 800452c:	2802      	cmp	r0, #2
 800452e:	d9e7      	bls.n	8004500 <RCCEx_PLL2_Config+0xb4>
 8004530:	e7f0      	b.n	8004514 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 8004532:	2001      	movs	r0, #1
 8004534:	e7ef      	b.n	8004516 <RCCEx_PLL2_Config+0xca>
 8004536:	bf00      	nop
 8004538:	58024400 	.word	0x58024400

0800453c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800453c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800453e:	4c3a      	ldr	r4, [pc, #232]	@ (8004628 <RCCEx_PLL3_Config+0xec>)
{
 8004540:	4606      	mov	r6, r0
 8004542:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004544:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004546:	f003 0303 	and.w	r3, r3, #3
 800454a:	2b03      	cmp	r3, #3
 800454c:	d069      	beq.n	8004622 <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800454e:	6823      	ldr	r3, [r4, #0]
 8004550:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004554:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004556:	f7fc fff7 	bl	8001548 <HAL_GetTick>
 800455a:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800455c:	6823      	ldr	r3, [r4, #0]
 800455e:	009a      	lsls	r2, r3, #2
 8004560:	d44b      	bmi.n	80045fa <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004562:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004564:	6832      	ldr	r2, [r6, #0]
 8004566:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 800456a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800456e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004570:	68b3      	ldr	r3, [r6, #8]
 8004572:	68f2      	ldr	r2, [r6, #12]
 8004574:	3b01      	subs	r3, #1
 8004576:	3a01      	subs	r2, #1
 8004578:	025b      	lsls	r3, r3, #9
 800457a:	0412      	lsls	r2, r2, #16
 800457c:	b29b      	uxth	r3, r3
 800457e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004582:	4313      	orrs	r3, r2
 8004584:	6872      	ldr	r2, [r6, #4]
 8004586:	3a01      	subs	r2, #1
 8004588:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800458c:	4313      	orrs	r3, r2
 800458e:	6932      	ldr	r2, [r6, #16]
 8004590:	3a01      	subs	r2, #1
 8004592:	0612      	lsls	r2, r2, #24
 8004594:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004598:	4313      	orrs	r3, r2
 800459a:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800459c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800459e:	6972      	ldr	r2, [r6, #20]
 80045a0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80045a4:	4313      	orrs	r3, r2
 80045a6:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80045a8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80045aa:	69b2      	ldr	r2, [r6, #24]
 80045ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80045b0:	4313      	orrs	r3, r2
 80045b2:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80045b4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80045b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045ba:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80045bc:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80045be:	69f2      	ldr	r2, [r6, #28]
 80045c0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80045c4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80045c8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80045cc:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80045ce:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80045d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045d4:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80045d6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 80045d8:	b9b5      	cbnz	r5, 8004608 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80045da:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80045de:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80045e0:	4c11      	ldr	r4, [pc, #68]	@ (8004628 <RCCEx_PLL3_Config+0xec>)
 80045e2:	6823      	ldr	r3, [r4, #0]
 80045e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045e8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045ea:	f7fc ffad 	bl	8001548 <HAL_GetTick>
 80045ee:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80045f0:	6823      	ldr	r3, [r4, #0]
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	d50f      	bpl.n	8004616 <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 80045f6:	2000      	movs	r0, #0
 80045f8:	e005      	b.n	8004606 <RCCEx_PLL3_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80045fa:	f7fc ffa5 	bl	8001548 <HAL_GetTick>
 80045fe:	1bc0      	subs	r0, r0, r7
 8004600:	2802      	cmp	r0, #2
 8004602:	d9ab      	bls.n	800455c <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 8004604:	2003      	movs	r0, #3
}
 8004606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 8004608:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800460a:	bf0c      	ite	eq
 800460c:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004610:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 8004614:	e7e3      	b.n	80045de <RCCEx_PLL3_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004616:	f7fc ff97 	bl	8001548 <HAL_GetTick>
 800461a:	1b40      	subs	r0, r0, r5
 800461c:	2802      	cmp	r0, #2
 800461e:	d9e7      	bls.n	80045f0 <RCCEx_PLL3_Config+0xb4>
 8004620:	e7f0      	b.n	8004604 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 8004622:	2001      	movs	r0, #1
 8004624:	e7ef      	b.n	8004606 <RCCEx_PLL3_Config+0xca>
 8004626:	bf00      	nop
 8004628:	58024400 	.word	0x58024400

0800462c <HAL_RCCEx_PeriphCLKConfig>:
{
 800462c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004630:	6803      	ldr	r3, [r0, #0]
{
 8004632:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004634:	0118      	lsls	r0, r3, #4
 8004636:	d51e      	bpl.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8004638:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 800463a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800463e:	d02b      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8004640:	d80f      	bhi.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x36>
 8004642:	b1d3      	cbz	r3, 800467a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004644:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004648:	d01d      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 800464a:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800464c:	682b      	ldr	r3, [r5, #0]
 800464e:	05d9      	lsls	r1, r3, #23
 8004650:	d551      	bpl.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0xca>
    switch (PeriphClkInit->Sai1ClockSelection)
 8004652:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8004654:	2b04      	cmp	r3, #4
 8004656:	d84d      	bhi.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8004658:	e8df f003 	tbb	[pc, r3]
 800465c:	29463f24 	.word	0x29463f24
 8004660:	29          	.byte	0x29
 8004661:	00          	.byte	0x00
    switch (PeriphClkInit->SpdifrxClockSelection)
 8004662:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004666:	d1f0      	bne.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x1e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004668:	4a85      	ldr	r2, [pc, #532]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800466a:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 800466c:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800466e:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004672:	430b      	orrs	r3, r1
 8004674:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004676:	2600      	movs	r6, #0
 8004678:	e7e8      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x20>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800467a:	4a81      	ldr	r2, [pc, #516]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800467c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800467e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004682:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8004684:	e7f0      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004686:	2102      	movs	r1, #2
 8004688:	f105 0008 	add.w	r0, r5, #8
 800468c:	f7ff fede 	bl	800444c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004690:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 8004692:	2800      	cmp	r0, #0
 8004694:	d1da      	bne.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x20>
 8004696:	e7e7      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004698:	2102      	movs	r1, #2
 800469a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800469e:	f7ff ff4d 	bl	800453c <RCCEx_PLL3_Config>
 80046a2:	e7f5      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x64>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046a4:	4a76      	ldr	r2, [pc, #472]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80046a6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80046a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
    switch (PeriphClkInit->SpdifrxClockSelection)
 80046ae:	4634      	mov	r4, r6
    if (ret == HAL_OK)
 80046b0:	bb1c      	cbnz	r4, 80046fa <HAL_RCCEx_PeriphCLKConfig+0xce>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046b2:	4a73      	ldr	r2, [pc, #460]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80046b4:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80046b6:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80046b8:	f023 0307 	bic.w	r3, r3, #7
 80046bc:	430b      	orrs	r3, r1
 80046be:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80046c0:	682b      	ldr	r3, [r5, #0]
 80046c2:	059a      	lsls	r2, r3, #22
 80046c4:	d528      	bpl.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0xec>
    switch (PeriphClkInit->Sai23ClockSelection)
 80046c6:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 80046c8:	2b80      	cmp	r3, #128	@ 0x80
 80046ca:	d043      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x128>
 80046cc:	d817      	bhi.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0xd2>
 80046ce:	b3a3      	cbz	r3, 800473a <HAL_RCCEx_PeriphCLKConfig+0x10e>
 80046d0:	2b40      	cmp	r3, #64	@ 0x40
 80046d2:	d038      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x11a>
 80046d4:	2601      	movs	r6, #1
 80046d6:	4634      	mov	r4, r6
 80046d8:	e01e      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0xec>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046da:	2100      	movs	r1, #0
 80046dc:	f105 0008 	add.w	r0, r5, #8
 80046e0:	f7ff feb4 	bl	800444c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046e4:	4604      	mov	r4, r0
        break;
 80046e6:	e7e3      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x84>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046e8:	2100      	movs	r1, #0
 80046ea:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 80046ee:	f7ff ff25 	bl	800453c <RCCEx_PLL3_Config>
 80046f2:	e7f7      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    switch (PeriphClkInit->Sai1ClockSelection)
 80046f4:	2601      	movs	r6, #1
 80046f6:	4634      	mov	r4, r6
 80046f8:	e7e2      	b.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x94>
 80046fa:	4626      	mov	r6, r4
 80046fc:	e7e0      	b.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch (PeriphClkInit->Sai23ClockSelection)
 80046fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8004700:	d002      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8004702:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004706:	d1e5      	bne.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    if (ret == HAL_OK)
 8004708:	bb54      	cbnz	r4, 8004760 <HAL_RCCEx_PeriphCLKConfig+0x134>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800470a:	4a5d      	ldr	r2, [pc, #372]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800470c:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 800470e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8004710:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 8004714:	430b      	orrs	r3, r1
 8004716:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004718:	682b      	ldr	r3, [r5, #0]
 800471a:	055b      	lsls	r3, r3, #21
 800471c:	d531      	bpl.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x156>
    switch (PeriphClkInit->Sai4AClockSelection)
 800471e:	f8d5 30a8 	ldr.w	r3, [r5, #168]	@ 0xa8
 8004722:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004726:	d049      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004728:	d81c      	bhi.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x138>
 800472a:	2b00      	cmp	r3, #0
 800472c:	d039      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x176>
 800472e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004732:	d03c      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x182>
 8004734:	2601      	movs	r6, #1
 8004736:	4634      	mov	r4, r6
 8004738:	e023      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x156>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800473a:	4a51      	ldr	r2, [pc, #324]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800473c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800473e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004742:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8004744:	e7e0      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0xdc>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004746:	2100      	movs	r1, #0
 8004748:	f105 0008 	add.w	r0, r5, #8
 800474c:	f7ff fe7e 	bl	800444c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004750:	4604      	mov	r4, r0
        break;
 8004752:	e7d9      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0xdc>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004754:	2100      	movs	r1, #0
 8004756:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800475a:	f7ff feef 	bl	800453c <RCCEx_PLL3_Config>
 800475e:	e7f7      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x124>
 8004760:	4626      	mov	r6, r4
 8004762:	e7d9      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0xec>
    switch (PeriphClkInit->Sai4AClockSelection)
 8004764:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004768:	d002      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x144>
 800476a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800476e:	d1e1      	bne.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x108>
    if (ret == HAL_OK)
 8004770:	bb54      	cbnz	r4, 80047c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004772:	4a43      	ldr	r2, [pc, #268]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004774:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 8004778:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800477a:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 800477e:	430b      	orrs	r3, r1
 8004780:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004782:	682b      	ldr	r3, [r5, #0]
 8004784:	051f      	lsls	r7, r3, #20
 8004786:	d530      	bpl.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x1be>
    switch (PeriphClkInit->Sai4BClockSelection)
 8004788:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 800478c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004790:	d045      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 8004792:	d81b      	bhi.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 8004794:	b3b3      	cbz	r3, 8004804 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8004796:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800479a:	d039      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800479c:	2601      	movs	r6, #1
 800479e:	4634      	mov	r4, r6
 80047a0:	e023      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x1be>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047a2:	4a37      	ldr	r2, [pc, #220]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80047a4:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80047a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 80047ac:	e7e0      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x144>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047ae:	2100      	movs	r1, #0
 80047b0:	f105 0008 	add.w	r0, r5, #8
 80047b4:	f7ff fe4a 	bl	800444c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047b8:	4604      	mov	r4, r0
        break;
 80047ba:	e7d9      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x144>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047bc:	2100      	movs	r1, #0
 80047be:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 80047c2:	f7ff febb 	bl	800453c <RCCEx_PLL3_Config>
 80047c6:	e7f7      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80047c8:	4626      	mov	r6, r4
 80047ca:	e7da      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x156>
    switch (PeriphClkInit->Sai4BClockSelection)
 80047cc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80047d0:	d002      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 80047d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80047d6:	d1e1      	bne.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x170>
    if (ret == HAL_OK)
 80047d8:	bb3c      	cbnz	r4, 800482a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80047da:	4a29      	ldr	r2, [pc, #164]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80047dc:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 80047e0:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80047e2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80047e6:	430b      	orrs	r3, r1
 80047e8:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80047ea:	682b      	ldr	r3, [r5, #0]
 80047ec:	0198      	lsls	r0, r3, #6
 80047ee:	d528      	bpl.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x216>
    switch (PeriphClkInit->QspiClockSelection)
 80047f0:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80047f2:	2b20      	cmp	r3, #32
 80047f4:	d03b      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x242>
 80047f6:	d81a      	bhi.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x202>
 80047f8:	b1db      	cbz	r3, 8004832 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80047fa:	2b10      	cmp	r3, #16
 80047fc:	d031      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x236>
 80047fe:	2601      	movs	r6, #1
 8004800:	4634      	mov	r4, r6
 8004802:	e01e      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x216>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004804:	4a1e      	ldr	r2, [pc, #120]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004806:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004808:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800480c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800480e:	e7e3      	b.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004810:	2100      	movs	r1, #0
 8004812:	f105 0008 	add.w	r0, r5, #8
 8004816:	f7ff fe19 	bl	800444c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800481a:	4604      	mov	r4, r0
        break;
 800481c:	e7dc      	b.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800481e:	2100      	movs	r1, #0
 8004820:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004824:	f7ff fe8a 	bl	800453c <RCCEx_PLL3_Config>
 8004828:	e7f7      	b.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800482a:	4626      	mov	r6, r4
 800482c:	e7dd      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x1be>
    switch (PeriphClkInit->QspiClockSelection)
 800482e:	2b30      	cmp	r3, #48	@ 0x30
 8004830:	d1e5      	bne.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    if (ret == HAL_OK)
 8004832:	bb1c      	cbnz	r4, 800487c <HAL_RCCEx_PeriphCLKConfig+0x250>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004834:	4a12      	ldr	r2, [pc, #72]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004836:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8004838:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800483a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800483e:	430b      	orrs	r3, r1
 8004840:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004842:	682b      	ldr	r3, [r5, #0]
 8004844:	04d9      	lsls	r1, r3, #19
 8004846:	d52c      	bpl.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    switch (PeriphClkInit->Spi123ClockSelection)
 8004848:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 800484a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800484e:	d076      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8004850:	d818      	bhi.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8004852:	2b00      	cmp	r3, #0
 8004854:	d066      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8004856:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800485a:	d069      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800485c:	2601      	movs	r6, #1
 800485e:	4634      	mov	r4, r6
 8004860:	e01f      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x276>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004862:	4a07      	ldr	r2, [pc, #28]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004864:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004866:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800486a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800486c:	e7e1      	b.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x206>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800486e:	2102      	movs	r1, #2
 8004870:	f105 0008 	add.w	r0, r5, #8
 8004874:	f7ff fdea 	bl	800444c <RCCEx_PLL2_Config>
 8004878:	4604      	mov	r4, r0
        break;
 800487a:	e7da      	b.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800487c:	4626      	mov	r6, r4
 800487e:	e7e0      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x216>
 8004880:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi123ClockSelection)
 8004884:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004888:	d002      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800488a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800488e:	d1e5      	bne.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x230>
    if (ret == HAL_OK)
 8004890:	2c00      	cmp	r4, #0
 8004892:	d15a      	bne.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x31e>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004894:	4a9e      	ldr	r2, [pc, #632]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004896:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8004898:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800489a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800489e:	430b      	orrs	r3, r1
 80048a0:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80048a2:	682b      	ldr	r3, [r5, #0]
 80048a4:	049a      	lsls	r2, r3, #18
 80048a6:	d50b      	bpl.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x294>
    switch (PeriphClkInit->Spi45ClockSelection)
 80048a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80048aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80048ae:	d066      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x352>
 80048b0:	d84d      	bhi.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x322>
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d053      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x332>
 80048b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048ba:	d059      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80048bc:	2601      	movs	r6, #1
 80048be:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80048c0:	682b      	ldr	r3, [r5, #0]
 80048c2:	045b      	lsls	r3, r3, #17
 80048c4:	d50c      	bpl.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    switch (PeriphClkInit->Spi6ClockSelection)
 80048c6:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 80048ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048ce:	d077      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x394>
 80048d0:	d85d      	bhi.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x362>
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d063      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x372>
 80048d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048da:	d06a      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x386>
 80048dc:	2601      	movs	r6, #1
 80048de:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80048e0:	682b      	ldr	r3, [r5, #0]
 80048e2:	041f      	lsls	r7, r3, #16
 80048e4:	d511      	bpl.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    switch (PeriphClkInit->FdcanClockSelection)
 80048e6:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80048e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048ec:	d070      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80048ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048f2:	d073      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d178      	bne.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x3be>
    if (ret == HAL_OK)
 80048f8:	2c00      	cmp	r4, #0
 80048fa:	d179      	bne.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80048fc:	4a84      	ldr	r2, [pc, #528]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048fe:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8004900:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8004902:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8004906:	430b      	orrs	r3, r1
 8004908:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800490a:	682b      	ldr	r3, [r5, #0]
 800490c:	01d8      	lsls	r0, r3, #7
 800490e:	d57f      	bpl.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    switch (PeriphClkInit->FmcClockSelection)
 8004910:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8004912:	2b03      	cmp	r3, #3
 8004914:	f200 80d8 	bhi.w	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8004918:	e8df f013 	tbh	[pc, r3, lsl #1]
 800491c:	006c0071 	.word	0x006c0071
 8004920:	007100cf 	.word	0x007100cf
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004924:	4a7a      	ldr	r2, [pc, #488]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004926:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004928:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800492c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800492e:	e7af      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x264>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004930:	2100      	movs	r1, #0
 8004932:	f105 0008 	add.w	r0, r5, #8
 8004936:	f7ff fd89 	bl	800444c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800493a:	4604      	mov	r4, r0
        break;
 800493c:	e7a8      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x264>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800493e:	2100      	movs	r1, #0
 8004940:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004944:	f7ff fdfa 	bl	800453c <RCCEx_PLL3_Config>
 8004948:	e7f7      	b.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x30e>
 800494a:	4626      	mov	r6, r4
 800494c:	e7a9      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    switch (PeriphClkInit->Spi45ClockSelection)
 800494e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004952:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8004956:	d002      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004958:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800495c:	d1ae      	bne.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x290>
    if (ret == HAL_OK)
 800495e:	b9a4      	cbnz	r4, 800498a <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004960:	4a6b      	ldr	r2, [pc, #428]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004962:	6e69      	ldr	r1, [r5, #100]	@ 0x64
 8004964:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8004966:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800496a:	430b      	orrs	r3, r1
 800496c:	6513      	str	r3, [r2, #80]	@ 0x50
 800496e:	e7a7      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x294>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004970:	2101      	movs	r1, #1
 8004972:	f105 0008 	add.w	r0, r5, #8
 8004976:	f7ff fd69 	bl	800444c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800497a:	4604      	mov	r4, r0
        break;
 800497c:	e7ef      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x332>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800497e:	2101      	movs	r1, #1
 8004980:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004984:	f7ff fdda 	bl	800453c <RCCEx_PLL3_Config>
 8004988:	e7f7      	b.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800498a:	4626      	mov	r6, r4
 800498c:	e798      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x294>
    switch (PeriphClkInit->Spi6ClockSelection)
 800498e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004992:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8004996:	d002      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004998:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800499c:	d19e      	bne.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    if (ret == HAL_OK)
 800499e:	b9ac      	cbnz	r4, 80049cc <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80049a0:	4a5b      	ldr	r2, [pc, #364]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049a2:	f8d5 10b0 	ldr.w	r1, [r5, #176]	@ 0xb0
 80049a6:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80049a8:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 80049ac:	430b      	orrs	r3, r1
 80049ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80049b0:	e796      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80049b2:	2101      	movs	r1, #1
 80049b4:	f105 0008 	add.w	r0, r5, #8
 80049b8:	f7ff fd48 	bl	800444c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049bc:	4604      	mov	r4, r0
        break;
 80049be:	e7ee      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x372>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049c0:	2101      	movs	r1, #1
 80049c2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 80049c6:	f7ff fdb9 	bl	800453c <RCCEx_PLL3_Config>
 80049ca:	e7f7      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x390>
 80049cc:	4626      	mov	r6, r4
 80049ce:	e787      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049d0:	4a4f      	ldr	r2, [pc, #316]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049d2:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80049d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 80049da:	e78d      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80049dc:	2101      	movs	r1, #1
 80049de:	f105 0008 	add.w	r0, r5, #8
 80049e2:	f7ff fd33 	bl	800444c <RCCEx_PLL2_Config>
 80049e6:	4604      	mov	r4, r0
        break;
 80049e8:	e786      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    switch (PeriphClkInit->FdcanClockSelection)
 80049ea:	2601      	movs	r6, #1
 80049ec:	4634      	mov	r4, r6
 80049ee:	e78c      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80049f0:	4626      	mov	r6, r4
 80049f2:	e78a      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x2de>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049f4:	4a46      	ldr	r2, [pc, #280]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049f6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80049f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 80049fe:	2c00      	cmp	r4, #0
 8004a00:	d165      	bne.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004a02:	4a43      	ldr	r2, [pc, #268]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a04:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 8004a06:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8004a08:	f023 0303 	bic.w	r3, r3, #3
 8004a0c:	430b      	orrs	r3, r1
 8004a0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a10:	682b      	ldr	r3, [r5, #0]
 8004a12:	0259      	lsls	r1, r3, #9
 8004a14:	d539      	bpl.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a16:	4f3f      	ldr	r7, [pc, #252]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a1e:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8004a20:	f7fc fd92 	bl	8001548 <HAL_GetTick>
 8004a24:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	05da      	lsls	r2, r3, #23
 8004a2a:	d552      	bpl.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    if (ret == HAL_OK)
 8004a2c:	2c00      	cmp	r4, #0
 8004a2e:	d175      	bne.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004a30:	4b37      	ldr	r3, [pc, #220]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a32:	f8d5 00b4 	ldr.w	r0, [r5, #180]	@ 0xb4
 8004a36:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004a38:	4042      	eors	r2, r0
 8004a3a:	f412 7f40 	tst.w	r2, #768	@ 0x300
 8004a3e:	d00b      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x42c>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a40:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a42:	6f19      	ldr	r1, [r3, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a44:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a48:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8004a4c:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a4e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004a50:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8004a54:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 8004a56:	671a      	str	r2, [r3, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004a58:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8004a5c:	d042      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a5e:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8004a62:	492b      	ldr	r1, [pc, #172]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a64:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8004a68:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8004a6c:	d14b      	bne.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004a6e:	6908      	ldr	r0, [r1, #16]
 8004a70:	4a29      	ldr	r2, [pc, #164]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a72:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
 8004a76:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8004a7a:	4302      	orrs	r2, r0
 8004a7c:	610a      	str	r2, [r1, #16]
 8004a7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a82:	4a23      	ldr	r2, [pc, #140]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a84:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8004a86:	430b      	orrs	r3, r1
 8004a88:	6713      	str	r3, [r2, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004a8a:	682b      	ldr	r3, [r5, #0]
 8004a8c:	07d8      	lsls	r0, r3, #31
 8004a8e:	d509      	bpl.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x478>
    switch (PeriphClkInit->Usart16ClockSelection)
 8004a90:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 8004a92:	2b10      	cmp	r3, #16
 8004a94:	d05a      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x520>
 8004a96:	d843      	bhi.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d047      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x500>
 8004a9c:	2b08      	cmp	r3, #8
 8004a9e:	d04e      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x512>
 8004aa0:	2601      	movs	r6, #1
 8004aa2:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004aa4:	682b      	ldr	r3, [r5, #0]
 8004aa6:	0799      	lsls	r1, r3, #30
 8004aa8:	d566      	bpl.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004aaa:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 8004aac:	2b05      	cmp	r3, #5
 8004aae:	d879      	bhi.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x578>
 8004ab0:	e8df f003 	tbb	[pc, r3]
 8004ab4:	5a72545a 	.word	0x5a72545a
 8004ab8:	5a5a      	.short	0x5a5a
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004aba:	2102      	movs	r1, #2
 8004abc:	f105 0008 	add.w	r0, r5, #8
 8004ac0:	f7ff fcc4 	bl	800444c <RCCEx_PLL2_Config>
 8004ac4:	4604      	mov	r4, r0
        break;
 8004ac6:	e79a      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    switch (PeriphClkInit->FmcClockSelection)
 8004ac8:	2601      	movs	r6, #1
 8004aca:	4634      	mov	r4, r6
 8004acc:	e7a0      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004ace:	4626      	mov	r6, r4
 8004ad0:	e79e      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ad2:	f7fc fd39 	bl	8001548 <HAL_GetTick>
 8004ad6:	eba0 0008 	sub.w	r0, r0, r8
 8004ada:	2864      	cmp	r0, #100	@ 0x64
 8004adc:	d9a3      	bls.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
        ret = HAL_TIMEOUT;
 8004ade:	2603      	movs	r6, #3
 8004ae0:	4634      	mov	r4, r6
 8004ae2:	e7d2      	b.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x45e>
        tickstart = HAL_GetTick();
 8004ae4:	f7fc fd30 	bl	8001548 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ae8:	f8df 8024 	ldr.w	r8, [pc, #36]	@ 8004b10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        tickstart = HAL_GetTick();
 8004aec:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aee:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004af2:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8004af6:	079b      	lsls	r3, r3, #30
 8004af8:	d4b1      	bmi.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x432>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004afa:	f7fc fd25 	bl	8001548 <HAL_GetTick>
 8004afe:	1bc0      	subs	r0, r0, r7
 8004b00:	4548      	cmp	r0, r9
 8004b02:	d9f6      	bls.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8004b04:	e7eb      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b06:	690a      	ldr	r2, [r1, #16]
 8004b08:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8004b0c:	e7b6      	b.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x450>
 8004b0e:	bf00      	nop
 8004b10:	58024400 	.word	0x58024400
 8004b14:	58024800 	.word	0x58024800
 8004b18:	00ffffcf 	.word	0x00ffffcf
 8004b1c:	4626      	mov	r6, r4
 8004b1e:	e7b4      	b.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    switch (PeriphClkInit->Usart16ClockSelection)
 8004b20:	f023 0208 	bic.w	r2, r3, #8
 8004b24:	2a20      	cmp	r2, #32
 8004b26:	d001      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x500>
 8004b28:	2b18      	cmp	r3, #24
 8004b2a:	d1b9      	bne.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x474>
    if (ret == HAL_OK)
 8004b2c:	b9a4      	cbnz	r4, 8004b58 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004b2e:	4a20      	ldr	r2, [pc, #128]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8004b30:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
 8004b32:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004b34:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8004b38:	430b      	orrs	r3, r1
 8004b3a:	6553      	str	r3, [r2, #84]	@ 0x54
 8004b3c:	e7b2      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x478>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b3e:	2101      	movs	r1, #1
 8004b40:	f105 0008 	add.w	r0, r5, #8
 8004b44:	f7ff fc82 	bl	800444c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b48:	4604      	mov	r4, r0
        break;
 8004b4a:	e7ef      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x500>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b4c:	2101      	movs	r1, #1
 8004b4e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004b52:	f7ff fcf3 	bl	800453c <RCCEx_PLL3_Config>
 8004b56:	e7f7      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 8004b58:	4626      	mov	r6, r4
 8004b5a:	e7a3      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x478>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b5c:	2101      	movs	r1, #1
 8004b5e:	f105 0008 	add.w	r0, r5, #8
 8004b62:	f7ff fc73 	bl	800444c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b66:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8004b68:	b9fc      	cbnz	r4, 8004baa <HAL_RCCEx_PeriphCLKConfig+0x57e>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004b6a:	4a11      	ldr	r2, [pc, #68]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8004b6c:	6fa9      	ldr	r1, [r5, #120]	@ 0x78
 8004b6e:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004b70:	f023 0307 	bic.w	r3, r3, #7
 8004b74:	430b      	orrs	r3, r1
 8004b76:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b78:	682b      	ldr	r3, [r5, #0]
 8004b7a:	075a      	lsls	r2, r3, #29
 8004b7c:	d52b      	bpl.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004b7e:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8004b82:	2b05      	cmp	r3, #5
 8004b84:	f200 816e 	bhi.w	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8004b88:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004b8c:	0014001a 	.word	0x0014001a
 8004b90:	001a0166 	.word	0x001a0166
 8004b94:	001a001a 	.word	0x001a001a
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b98:	2101      	movs	r1, #1
 8004b9a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004b9e:	f7ff fccd 	bl	800453c <RCCEx_PLL3_Config>
 8004ba2:	e7e0      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x53a>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004ba4:	2601      	movs	r6, #1
 8004ba6:	4634      	mov	r4, r6
 8004ba8:	e7e6      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x54c>
 8004baa:	4626      	mov	r6, r4
 8004bac:	e7e4      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x54c>
 8004bae:	bf00      	nop
 8004bb0:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004bb4:	2101      	movs	r1, #1
 8004bb6:	f105 0008 	add.w	r0, r5, #8
 8004bba:	f7ff fc47 	bl	800444c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004bbe:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8004bc0:	2c00      	cmp	r4, #0
 8004bc2:	f040 8152 	bne.w	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x83e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004bc6:	4aaa      	ldr	r2, [pc, #680]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004bc8:	f8d5 1094 	ldr.w	r1, [r5, #148]	@ 0x94
 8004bcc:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004bce:	f023 0307 	bic.w	r3, r3, #7
 8004bd2:	430b      	orrs	r3, r1
 8004bd4:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004bd6:	682b      	ldr	r3, [r5, #0]
 8004bd8:	069b      	lsls	r3, r3, #26
 8004bda:	d510      	bpl.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x5d2>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004bdc:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8004be0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004be4:	f000 8160 	beq.w	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
 8004be8:	f200 8144 	bhi.w	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f000 814a 	beq.w	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x85a>
 8004bf2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004bf6:	f000 8150 	beq.w	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x86e>
 8004bfa:	2601      	movs	r6, #1
 8004bfc:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004bfe:	682b      	ldr	r3, [r5, #0]
 8004c00:	065f      	lsls	r7, r3, #25
 8004c02:	d510      	bpl.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004c04:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 8004c08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c0c:	f000 816e 	beq.w	8004eec <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8004c10:	f200 8152 	bhi.w	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f000 8158 	beq.w	8004eca <HAL_RCCEx_PeriphCLKConfig+0x89e>
 8004c1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c1e:	f000 815e 	beq.w	8004ede <HAL_RCCEx_PeriphCLKConfig+0x8b2>
 8004c22:	2601      	movs	r6, #1
 8004c24:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004c26:	682b      	ldr	r3, [r5, #0]
 8004c28:	0618      	lsls	r0, r3, #24
 8004c2a:	d510      	bpl.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x622>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004c2c:	f8d5 30a0 	ldr.w	r3, [r5, #160]	@ 0xa0
 8004c30:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c34:	f000 817c 	beq.w	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x904>
 8004c38:	f200 8160 	bhi.w	8004efc <HAL_RCCEx_PeriphCLKConfig+0x8d0>
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f000 8166 	beq.w	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004c42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c46:	f000 816c 	beq.w	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8004c4a:	2601      	movs	r6, #1
 8004c4c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004c4e:	682b      	ldr	r3, [r5, #0]
 8004c50:	0719      	lsls	r1, r3, #28
 8004c52:	d514      	bpl.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x652>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004c54:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
 8004c58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c5c:	d107      	bne.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x642>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004c5e:	2102      	movs	r1, #2
 8004c60:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004c64:	f7ff fc6a 	bl	800453c <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8004c68:	2800      	cmp	r0, #0
 8004c6a:	bf18      	it	ne
 8004c6c:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004c6e:	4a80      	ldr	r2, [pc, #512]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004c70:	f8d5 1084 	ldr.w	r1, [r5, #132]	@ 0x84
 8004c74:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004c76:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004c7a:	430b      	orrs	r3, r1
 8004c7c:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c7e:	682b      	ldr	r3, [r5, #0]
 8004c80:	06da      	lsls	r2, r3, #27
 8004c82:	d514      	bpl.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x682>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004c84:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8004c88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c8c:	d107      	bne.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x672>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004c8e:	2102      	movs	r1, #2
 8004c90:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004c94:	f7ff fc52 	bl	800453c <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8004c98:	2800      	cmp	r0, #0
 8004c9a:	bf18      	it	ne
 8004c9c:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c9e:	4a74      	ldr	r2, [pc, #464]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004ca0:	f8d5 1098 	ldr.w	r1, [r5, #152]	@ 0x98
 8004ca4:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004ca6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004caa:	430b      	orrs	r3, r1
 8004cac:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004cae:	682b      	ldr	r3, [r5, #0]
 8004cb0:	031b      	lsls	r3, r3, #12
 8004cb2:	d51b      	bpl.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    switch (PeriphClkInit->AdcClockSelection)
 8004cb4:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 8004cb8:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8004cbc:	f000 8140 	beq.w	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x914>
 8004cc0:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8004cc4:	d007      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8004cc6:	2900      	cmp	r1, #0
 8004cc8:	f040 8140 	bne.w	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x920>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ccc:	f105 0008 	add.w	r0, r5, #8
 8004cd0:	f7ff fbbc 	bl	800444c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004cd4:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8004cd6:	2c00      	cmp	r4, #0
 8004cd8:	f040 813b 	bne.w	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x926>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004cdc:	4a64      	ldr	r2, [pc, #400]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004cde:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 8004ce2:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004ce4:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8004ce8:	430b      	orrs	r3, r1
 8004cea:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004cec:	682b      	ldr	r3, [r5, #0]
 8004cee:	035f      	lsls	r7, r3, #13
 8004cf0:	d50f      	bpl.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    switch (PeriphClkInit->UsbClockSelection)
 8004cf2:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
 8004cf6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004cfa:	f000 813b 	beq.w	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x948>
 8004cfe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004d02:	f000 812d 	beq.w	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8004d06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d0a:	f000 8124 	beq.w	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x92a>
 8004d0e:	2601      	movs	r6, #1
 8004d10:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004d12:	682b      	ldr	r3, [r5, #0]
 8004d14:	03d8      	lsls	r0, r3, #15
 8004d16:	d509      	bpl.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x700>
    switch (PeriphClkInit->SdmmcClockSelection)
 8004d18:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f000 8133 	beq.w	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004d20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d24:	f000 813d 	beq.w	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8004d28:	2601      	movs	r6, #1
 8004d2a:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004d2c:	682b      	ldr	r3, [r5, #0]
 8004d2e:	0099      	lsls	r1, r3, #2
 8004d30:	d507      	bpl.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x716>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004d32:	2102      	movs	r1, #2
 8004d34:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004d38:	f7ff fc00 	bl	800453c <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 8004d3c:	2800      	cmp	r0, #0
 8004d3e:	bf18      	it	ne
 8004d40:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004d42:	e9d5 3100 	ldrd	r3, r1, [r5]
 8004d46:	039a      	lsls	r2, r3, #14
 8004d48:	f140 8143 	bpl.w	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    switch (PeriphClkInit->RngClockSelection)
 8004d4c:	f8d5 0080 	ldr.w	r0, [r5, #128]	@ 0x80
 8004d50:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8004d54:	f000 813f 	beq.w	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
 8004d58:	f200 812c 	bhi.w	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8004d5c:	2800      	cmp	r0, #0
 8004d5e:	f000 812f 	beq.w	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x994>
 8004d62:	2401      	movs	r4, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d64:	02df      	lsls	r7, r3, #11
 8004d66:	d506      	bpl.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x74a>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d68:	4841      	ldr	r0, [pc, #260]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004d6a:	6f6e      	ldr	r6, [r5, #116]	@ 0x74
 8004d6c:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8004d6e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004d72:	4332      	orrs	r2, r6
 8004d74:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004d76:	00de      	lsls	r6, r3, #3
 8004d78:	d507      	bpl.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x75e>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004d7a:	483d      	ldr	r0, [pc, #244]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004d7c:	f8d5 60b8 	ldr.w	r6, [r5, #184]	@ 0xb8
 8004d80:	6902      	ldr	r2, [r0, #16]
 8004d82:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004d86:	4332      	orrs	r2, r6
 8004d88:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d8a:	0298      	lsls	r0, r3, #10
 8004d8c:	d506      	bpl.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x770>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d8e:	4838      	ldr	r0, [pc, #224]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004d90:	6eee      	ldr	r6, [r5, #108]	@ 0x6c
 8004d92:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8004d94:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8004d98:	4332      	orrs	r2, r6
 8004d9a:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004d9c:	005a      	lsls	r2, r3, #1
 8004d9e:	d509      	bpl.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x788>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004da0:	4a33      	ldr	r2, [pc, #204]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004da2:	6910      	ldr	r0, [r2, #16]
 8004da4:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 8004da8:	6110      	str	r0, [r2, #16]
 8004daa:	6910      	ldr	r0, [r2, #16]
 8004dac:	f8d5 60bc 	ldr.w	r6, [r5, #188]	@ 0xbc
 8004db0:	4330      	orrs	r0, r6
 8004db2:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	da06      	bge.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x79a>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004db8:	482d      	ldr	r0, [pc, #180]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004dba:	6d6e      	ldr	r6, [r5, #84]	@ 0x54
 8004dbc:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8004dbe:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004dc2:	4332      	orrs	r2, r6
 8004dc4:	64c2      	str	r2, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004dc6:	021f      	lsls	r7, r3, #8
 8004dc8:	d507      	bpl.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004dca:	4a29      	ldr	r2, [pc, #164]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004dcc:	f8d5 008c 	ldr.w	r0, [r5, #140]	@ 0x8c
 8004dd0:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004dd2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004dd6:	4303      	orrs	r3, r0
 8004dd8:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004dda:	07ce      	lsls	r6, r1, #31
 8004ddc:	d506      	bpl.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x7c0>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004dde:	2100      	movs	r1, #0
 8004de0:	f105 0008 	add.w	r0, r5, #8
 8004de4:	f7ff fb32 	bl	800444c <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8004de8:	4607      	mov	r7, r0
 8004dea:	b900      	cbnz	r0, 8004dee <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    switch (PeriphClkInit->RngClockSelection)
 8004dec:	4627      	mov	r7, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004dee:	686b      	ldr	r3, [r5, #4]
 8004df0:	079c      	lsls	r4, r3, #30
 8004df2:	d506      	bpl.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x7d6>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004df4:	2101      	movs	r1, #1
 8004df6:	f105 0008 	add.w	r0, r5, #8
 8004dfa:	f7ff fb27 	bl	800444c <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8004dfe:	4606      	mov	r6, r0
 8004e00:	b900      	cbnz	r0, 8004e04 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    switch (PeriphClkInit->RngClockSelection)
 8004e02:	463e      	mov	r6, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004e04:	686b      	ldr	r3, [r5, #4]
 8004e06:	0758      	lsls	r0, r3, #29
 8004e08:	d506      	bpl.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e0a:	2102      	movs	r1, #2
 8004e0c:	f105 0008 	add.w	r0, r5, #8
 8004e10:	f7ff fb1c 	bl	800444c <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8004e14:	4604      	mov	r4, r0
 8004e16:	b900      	cbnz	r0, 8004e1a <HAL_RCCEx_PeriphCLKConfig+0x7ee>
    switch (PeriphClkInit->RngClockSelection)
 8004e18:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004e1a:	686b      	ldr	r3, [r5, #4]
 8004e1c:	0719      	lsls	r1, r3, #28
 8004e1e:	d506      	bpl.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x802>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e20:	2100      	movs	r1, #0
 8004e22:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004e26:	f7ff fb89 	bl	800453c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8004e2a:	4606      	mov	r6, r0
 8004e2c:	b900      	cbnz	r0, 8004e30 <HAL_RCCEx_PeriphCLKConfig+0x804>
    switch (PeriphClkInit->RngClockSelection)
 8004e2e:	4626      	mov	r6, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004e30:	686b      	ldr	r3, [r5, #4]
 8004e32:	06da      	lsls	r2, r3, #27
 8004e34:	d506      	bpl.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x818>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e36:	2101      	movs	r1, #1
 8004e38:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004e3c:	f7ff fb7e 	bl	800453c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8004e40:	4604      	mov	r4, r0
 8004e42:	b900      	cbnz	r0, 8004e46 <HAL_RCCEx_PeriphCLKConfig+0x81a>
    switch (PeriphClkInit->RngClockSelection)
 8004e44:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004e46:	686b      	ldr	r3, [r5, #4]
 8004e48:	069b      	lsls	r3, r3, #26
 8004e4a:	f100 80ca 	bmi.w	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  if (status == HAL_OK)
 8004e4e:	1e20      	subs	r0, r4, #0
 8004e50:	bf18      	it	ne
 8004e52:	2001      	movne	r0, #1
}
 8004e54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e58:	2101      	movs	r1, #1
 8004e5a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004e5e:	f7ff fb6d 	bl	800453c <RCCEx_PLL3_Config>
 8004e62:	e6ac      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x592>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004e64:	2601      	movs	r6, #1
 8004e66:	4634      	mov	r4, r6
 8004e68:	e6b5      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8004e6a:	4626      	mov	r6, r4
 8004e6c:	e6b3      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8004e6e:	bf00      	nop
 8004e70:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004e74:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004e78:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8004e7c:	d003      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x85a>
 8004e7e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004e82:	f47f aeba 	bne.w	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    if (ret == HAL_OK)
 8004e86:	b9ac      	cbnz	r4, 8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x888>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e88:	4a5b      	ldr	r2, [pc, #364]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8004e8a:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
 8004e8e:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004e90:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 8004e94:	430b      	orrs	r3, r1
 8004e96:	6553      	str	r3, [r2, #84]	@ 0x54
 8004e98:	e6b1      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x5d2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e9a:	2100      	movs	r1, #0
 8004e9c:	f105 0008 	add.w	r0, r5, #8
 8004ea0:	f7ff fad4 	bl	800444c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ea4:	4604      	mov	r4, r0
        break;
 8004ea6:	e7ee      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x85a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ea8:	2102      	movs	r1, #2
 8004eaa:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004eae:	f7ff fb45 	bl	800453c <RCCEx_PLL3_Config>
 8004eb2:	e7f7      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x878>
 8004eb4:	4626      	mov	r6, r4
 8004eb6:	e6a2      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x5d2>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004eb8:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004ebc:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 8004ec0:	d003      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x89e>
 8004ec2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ec6:	f47f aeac 	bne.w	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    if (ret == HAL_OK)
 8004eca:	b9ac      	cbnz	r4, 8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ecc:	4a4a      	ldr	r2, [pc, #296]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8004ece:	f8d5 109c 	ldr.w	r1, [r5, #156]	@ 0x9c
 8004ed2:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004ed4:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8004ed8:	430b      	orrs	r3, r1
 8004eda:	6593      	str	r3, [r2, #88]	@ 0x58
 8004edc:	e6a3      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ede:	2100      	movs	r1, #0
 8004ee0:	f105 0008 	add.w	r0, r5, #8
 8004ee4:	f7ff fab2 	bl	800444c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ee8:	4604      	mov	r4, r0
        break;
 8004eea:	e7ee      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x89e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004eec:	2102      	movs	r1, #2
 8004eee:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004ef2:	f7ff fb23 	bl	800453c <RCCEx_PLL3_Config>
 8004ef6:	e7f7      	b.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8004ef8:	4626      	mov	r6, r4
 8004efa:	e694      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004efc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004f00:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8004f04:	d003      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004f06:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004f0a:	f47f ae9e 	bne.w	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    if (ret == HAL_OK)
 8004f0e:	b9ac      	cbnz	r4, 8004f3c <HAL_RCCEx_PeriphCLKConfig+0x910>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004f10:	4a39      	ldr	r2, [pc, #228]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8004f12:	f8d5 10a0 	ldr.w	r1, [r5, #160]	@ 0xa0
 8004f16:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004f18:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8004f1c:	430b      	orrs	r3, r1
 8004f1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f20:	e695      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x622>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f22:	2100      	movs	r1, #0
 8004f24:	f105 0008 	add.w	r0, r5, #8
 8004f28:	f7ff fa90 	bl	800444c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f2c:	4604      	mov	r4, r0
        break;
 8004f2e:	e7ee      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f30:	2102      	movs	r1, #2
 8004f32:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004f36:	f7ff fb01 	bl	800453c <RCCEx_PLL3_Config>
 8004f3a:	e7f7      	b.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x900>
 8004f3c:	4626      	mov	r6, r4
 8004f3e:	e686      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x622>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f40:	2102      	movs	r1, #2
 8004f42:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004f46:	f7ff faf9 	bl	800453c <RCCEx_PLL3_Config>
 8004f4a:	e6c3      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
    switch (PeriphClkInit->AdcClockSelection)
 8004f4c:	2601      	movs	r6, #1
 8004f4e:	4634      	mov	r4, r6
 8004f50:	e6cc      	b.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 8004f52:	4626      	mov	r6, r4
 8004f54:	e6ca      	b.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x6c0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f56:	4a28      	ldr	r2, [pc, #160]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8004f58:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004f5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8004f60:	b97c      	cbnz	r4, 8004f82 <HAL_RCCEx_PeriphCLKConfig+0x956>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f62:	4a25      	ldr	r2, [pc, #148]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8004f64:	f8d5 1088 	ldr.w	r1, [r5, #136]	@ 0x88
 8004f68:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004f6a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004f6e:	430b      	orrs	r3, r1
 8004f70:	6553      	str	r3, [r2, #84]	@ 0x54
 8004f72:	e6ce      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f74:	2101      	movs	r1, #1
 8004f76:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004f7a:	f7ff fadf 	bl	800453c <RCCEx_PLL3_Config>
 8004f7e:	4604      	mov	r4, r0
        break;
 8004f80:	e7ee      	b.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8004f82:	4626      	mov	r6, r4
 8004f84:	e6c5      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f86:	4a1c      	ldr	r2, [pc, #112]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8004f88:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004f8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8004f90:	b974      	cbnz	r4, 8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x984>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004f92:	4a19      	ldr	r2, [pc, #100]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8004f94:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 8004f96:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8004f98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f9c:	430b      	orrs	r3, r1
 8004f9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004fa0:	e6c4      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x700>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004fa2:	2102      	movs	r1, #2
 8004fa4:	f105 0008 	add.w	r0, r5, #8
 8004fa8:	f7ff fa50 	bl	800444c <RCCEx_PLL2_Config>
 8004fac:	4604      	mov	r4, r0
        break;
 8004fae:	e7ef      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8004fb0:	4626      	mov	r6, r4
 8004fb2:	e6bb      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x700>
    switch (PeriphClkInit->RngClockSelection)
 8004fb4:	f420 7280 	bic.w	r2, r0, #256	@ 0x100
 8004fb8:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8004fbc:	f47f aed1 	bne.w	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x736>
    if (ret == HAL_OK)
 8004fc0:	2c00      	cmp	r4, #0
 8004fc2:	f47f aecf 	bne.w	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x738>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004fc6:	4c0c      	ldr	r4, [pc, #48]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8004fc8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004fca:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004fce:	4302      	orrs	r2, r0
 8004fd0:	6562      	str	r2, [r4, #84]	@ 0x54
      status = HAL_ERROR;
 8004fd2:	4634      	mov	r4, r6
 8004fd4:	e6c6      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x738>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fd6:	4f08      	ldr	r7, [pc, #32]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8004fd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fda:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004fde:	62fa      	str	r2, [r7, #44]	@ 0x2c
        break;
 8004fe0:	e7ee      	b.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x994>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004fe2:	2102      	movs	r1, #2
 8004fe4:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004fe8:	f7ff faa8 	bl	800453c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8004fec:	2800      	cmp	r0, #0
 8004fee:	f43f af2e 	beq.w	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x822>
  return HAL_ERROR;
 8004ff2:	2001      	movs	r0, #1
 8004ff4:	e72e      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x828>
 8004ff6:	bf00      	nop
 8004ff8:	58024400 	.word	0x58024400

08004ffc <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8004ffc:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004ffe:	f7ff f9df 	bl	80043c0 <HAL_RCC_GetHCLKFreq>
 8005002:	4b05      	ldr	r3, [pc, #20]	@ (8005018 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8005004:	4a05      	ldr	r2, [pc, #20]	@ (800501c <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8005006:	6a1b      	ldr	r3, [r3, #32]
 8005008:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800500c:	5cd3      	ldrb	r3, [r2, r3]
 800500e:	f003 031f 	and.w	r3, r3, #31
}
 8005012:	40d8      	lsrs	r0, r3
 8005014:	bd08      	pop	{r3, pc}
 8005016:	bf00      	nop
 8005018:	58024400 	.word	0x58024400
 800501c:	0800ed1b 	.word	0x0800ed1b

08005020 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005020:	494f      	ldr	r1, [pc, #316]	@ (8005160 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 8005022:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005024:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005026:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005028:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (pll2m != 0U)
 800502a:	f416 3f7c 	tst.w	r6, #258048	@ 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800502e:	f3c6 3305 	ubfx	r3, r6, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005032:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
  if (pll2m != 0U)
 8005034:	f000 8090 	beq.w	8005158 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005038:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800503c:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005040:	f3c5 1200 	ubfx	r2, r5, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005044:	f004 0403 	and.w	r4, r4, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005048:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800504c:	4353      	muls	r3, r2
    switch (pllsource)
 800504e:	2c01      	cmp	r4, #1
 8005050:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005054:	ee06 3a90 	vmov	s13, r3
 8005058:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 800505c:	d06e      	beq.n	800513c <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
 800505e:	2c02      	cmp	r4, #2
 8005060:	d05e      	beq.n	8005120 <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 8005062:	2c00      	cmp	r4, #0
 8005064:	d16a      	bne.n	800513c <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005066:	680b      	ldr	r3, [r1, #0]
 8005068:	069b      	lsls	r3, r3, #26
 800506a:	d547      	bpl.n	80050fc <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800506c:	680a      	ldr	r2, [r1, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800506e:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005070:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 8005074:	4a3b      	ldr	r2, [pc, #236]	@ (8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005076:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800507a:	40ca      	lsrs	r2, r1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800507c:	ee07 2a90 	vmov	s15, r2
 8005080:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8005084:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8005088:	ee07 3a10 	vmov	s14, r3
 800508c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005090:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005094:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005098:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800509c:	4a30      	ldr	r2, [pc, #192]	@ (8005160 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 800509e:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80050a0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80050a4:	ee07 3a10 	vmov	s14, r3
 80050a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80050ac:	ee37 7a06 	vadd.f32	s14, s14, s12
 80050b0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80050b4:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80050b8:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80050bc:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80050be:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80050c2:	ee07 3a10 	vmov	s14, r3
 80050c6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80050ca:	ee37 7a06 	vadd.f32	s14, s14, s12
 80050ce:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80050d2:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80050d6:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80050da:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80050dc:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80050e0:	ee06 3a90 	vmov	s13, r3
 80050e4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80050e8:	ee76 6a86 	vadd.f32	s13, s13, s12
 80050ec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80050f0:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80050f4:	ee17 3a90 	vmov	r3, s15
 80050f8:	6083      	str	r3, [r0, #8]
}
 80050fa:	bd70      	pop	{r4, r5, r6, pc}
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80050fc:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 80050fe:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 8005168 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8005102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005106:	ee07 3a90 	vmov	s15, r3
 800510a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800510e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005112:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005116:	eec5 6a87 	vdiv.f32	s13, s11, s14
 800511a:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 800511e:	e7bd      	b.n	800509c <HAL_RCCEx_GetPLL2ClockFreq+0x7c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005120:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 8005122:	eddf 5a12 	vldr	s11, [pc, #72]	@ 800516c <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8005126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800512a:	ee07 3a90 	vmov	s15, r3
 800512e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005136:	ee77 7a86 	vadd.f32	s15, s15, s12
 800513a:	e7ec      	b.n	8005116 <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800513c:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 800513e:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 8005170 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 8005142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005146:	ee07 3a90 	vmov	s15, r3
 800514a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800514e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005152:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005156:	e7de      	b.n	8005116 <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005158:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800515c:	e7cc      	b.n	80050f8 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 800515e:	bf00      	nop
 8005160:	58024400 	.word	0x58024400
 8005164:	03d09000 	.word	0x03d09000
 8005168:	4c742400 	.word	0x4c742400
 800516c:	4af42400 	.word	0x4af42400
 8005170:	4a742400 	.word	0x4a742400

08005174 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005174:	494f      	ldr	r1, [pc, #316]	@ (80052b4 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 8005176:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005178:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800517a:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800517c:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (pll3m != 0U)
 800517e:	f016 7f7c 	tst.w	r6, #66060288	@ 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005182:	f3c6 5305 	ubfx	r3, r6, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005186:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
  if (pll3m != 0U)
 8005188:	f000 8090 	beq.w	80052ac <HAL_RCCEx_GetPLL3ClockFreq+0x138>
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800518c:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005190:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005194:	f3c5 2200 	ubfx	r2, r5, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005198:	f004 0403 	and.w	r4, r4, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800519c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80051a0:	4353      	muls	r3, r2
    switch (pllsource)
 80051a2:	2c01      	cmp	r4, #1
 80051a4:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80051a8:	ee06 3a90 	vmov	s13, r3
 80051ac:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 80051b0:	d06e      	beq.n	8005290 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
 80051b2:	2c02      	cmp	r4, #2
 80051b4:	d05e      	beq.n	8005274 <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 80051b6:	2c00      	cmp	r4, #0
 80051b8:	d16a      	bne.n	8005290 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051ba:	680b      	ldr	r3, [r1, #0]
 80051bc:	069b      	lsls	r3, r3, #26
 80051be:	d547      	bpl.n	8005250 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80051c0:	680a      	ldr	r2, [r1, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80051c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80051c4:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 80051c8:	4a3b      	ldr	r2, [pc, #236]	@ (80052b8 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80051ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80051ce:	40ca      	lsrs	r2, r1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80051d0:	ee07 2a90 	vmov	s15, r2
 80051d4:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80051d8:	eec5 7a87 	vdiv.f32	s15, s11, s14
 80051dc:	ee07 3a10 	vmov	s14, r3
 80051e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80051e4:	ee37 7a26 	vadd.f32	s14, s14, s13
 80051e8:	ee37 7a06 	vadd.f32	s14, s14, s12
 80051ec:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80051f0:	4a30      	ldr	r2, [pc, #192]	@ (80052b4 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 80051f2:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80051f4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80051f8:	ee07 3a10 	vmov	s14, r3
 80051fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005200:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005204:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005208:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800520c:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005210:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005212:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005216:	ee07 3a10 	vmov	s14, r3
 800521a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800521e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005222:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005226:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800522a:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800522e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005230:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005234:	ee06 3a90 	vmov	s13, r3
 8005238:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800523c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005240:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005244:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8005248:	ee17 3a90 	vmov	r3, s15
 800524c:	6083      	str	r3, [r0, #8]
}
 800524e:	bd70      	pop	{r4, r5, r6, pc}
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005250:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005252:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 80052bc <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8005256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800525a:	ee07 3a90 	vmov	s15, r3
 800525e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005266:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800526a:	eec5 6a87 	vdiv.f32	s13, s11, s14
 800526e:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 8005272:	e7bd      	b.n	80051f0 <HAL_RCCEx_GetPLL3ClockFreq+0x7c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005274:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005276:	eddf 5a12 	vldr	s11, [pc, #72]	@ 80052c0 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 800527a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800527e:	ee07 3a90 	vmov	s15, r3
 8005282:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800528a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800528e:	e7ec      	b.n	800526a <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005290:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005292:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 80052c4 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 8005296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800529a:	ee07 3a90 	vmov	s15, r3
 800529e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052a6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80052aa:	e7de      	b.n	800526a <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80052ac:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80052b0:	e7cc      	b.n	800524c <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 80052b2:	bf00      	nop
 80052b4:	58024400 	.word	0x58024400
 80052b8:	03d09000 	.word	0x03d09000
 80052bc:	4c742400 	.word	0x4c742400
 80052c0:	4af42400 	.word	0x4af42400
 80052c4:	4a742400 	.word	0x4a742400

080052c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052c8:	b510      	push	{r4, lr}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80052ca:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052cc:	e852 3f00 	ldrex	r3, [r2]
 80052d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d4:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80052d8:	6802      	ldr	r2, [r0, #0]
 80052da:	2900      	cmp	r1, #0
 80052dc:	d1f5      	bne.n	80052ca <UART_EndRxTransfer+0x2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80052de:	4c0f      	ldr	r4, [pc, #60]	@ (800531c <UART_EndRxTransfer+0x54>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e0:	f102 0308 	add.w	r3, r2, #8
 80052e4:	e853 3f00 	ldrex	r3, [r3]
 80052e8:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ea:	f102 0c08 	add.w	ip, r2, #8
 80052ee:	e84c 3100 	strex	r1, r3, [ip]
 80052f2:	2900      	cmp	r1, #0
 80052f4:	d1f4      	bne.n	80052e0 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052f6:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d107      	bne.n	800530c <UART_EndRxTransfer+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fc:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005300:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005304:	e842 3100 	strex	r1, r3, [r2]
 8005308:	2900      	cmp	r1, #0
 800530a:	d1f7      	bne.n	80052fc <UART_EndRxTransfer+0x34>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800530c:	2320      	movs	r3, #32
 800530e:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005312:	2300      	movs	r3, #0
 8005314:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005316:	6743      	str	r3, [r0, #116]	@ 0x74
}
 8005318:	bd10      	pop	{r4, pc}
 800531a:	bf00      	nop
 800531c:	effffffe 	.word	0xeffffffe

08005320 <UART_SetConfig>:
{
 8005320:	b530      	push	{r4, r5, lr}
 8005322:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8005324:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005326:	69c0      	ldr	r0, [r0, #28]
{
 8005328:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800532a:	6921      	ldr	r1, [r4, #16]
 800532c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800532e:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005330:	430a      	orrs	r2, r1
 8005332:	6961      	ldr	r1, [r4, #20]
 8005334:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005336:	499c      	ldr	r1, [pc, #624]	@ (80055a8 <UART_SetConfig+0x288>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005338:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800533a:	4029      	ands	r1, r5
 800533c:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800533e:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005340:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8005348:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800534a:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800534c:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800534e:	4a97      	ldr	r2, [pc, #604]	@ (80055ac <UART_SetConfig+0x28c>)
 8005350:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 8005352:	bf1c      	itt	ne
 8005354:	6a22      	ldrne	r2, [r4, #32]
 8005356:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005358:	689a      	ldr	r2, [r3, #8]
 800535a:	f022 426e 	bic.w	r2, r2, #3992977408	@ 0xee000000
 800535e:	f422 6230 	bic.w	r2, r2, #2816	@ 0xb00
 8005362:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005364:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005366:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005368:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800536a:	f022 020f 	bic.w	r2, r2, #15
 800536e:	430a      	orrs	r2, r1
 8005370:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005372:	4a8f      	ldr	r2, [pc, #572]	@ (80055b0 <UART_SetConfig+0x290>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d128      	bne.n	80053ca <UART_SetConfig+0xaa>
 8005378:	4b8e      	ldr	r3, [pc, #568]	@ (80055b4 <UART_SetConfig+0x294>)
 800537a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800537c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005380:	2b18      	cmp	r3, #24
 8005382:	f000 812f 	beq.w	80055e4 <UART_SetConfig+0x2c4>
 8005386:	d814      	bhi.n	80053b2 <UART_SetConfig+0x92>
 8005388:	2b08      	cmp	r3, #8
 800538a:	f000 8154 	beq.w	8005636 <UART_SetConfig+0x316>
 800538e:	2b10      	cmp	r3, #16
 8005390:	f000 8102 	beq.w	8005598 <UART_SetConfig+0x278>
 8005394:	2b00      	cmp	r3, #0
 8005396:	f000 80f9 	beq.w	800558c <UART_SetConfig+0x26c>
 800539a:	2380      	movs	r3, #128	@ 0x80
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800539c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80053a0:	f040 80b4 	bne.w	800550c <UART_SetConfig+0x1ec>
    switch (clocksource)
 80053a4:	2b08      	cmp	r3, #8
 80053a6:	d846      	bhi.n	8005436 <UART_SetConfig+0x116>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053a8:	4668      	mov	r0, sp
 80053aa:	f7ff fe39 	bl	8005020 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80053ae:	9801      	ldr	r0, [sp, #4]
        break;
 80053b0:	e0e9      	b.n	8005586 <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053b2:	2b20      	cmp	r3, #32
 80053b4:	f000 80dd 	beq.w	8005572 <UART_SetConfig+0x252>
 80053b8:	2b28      	cmp	r3, #40	@ 0x28
 80053ba:	d1ee      	bne.n	800539a <UART_SetConfig+0x7a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053bc:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80053c0:	f000 811d 	beq.w	80055fe <UART_SetConfig+0x2de>
        pclk = (uint32_t) LSE_VALUE;
 80053c4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80053c8:	e0be      	b.n	8005548 <UART_SetConfig+0x228>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053ca:	4a7b      	ldr	r2, [pc, #492]	@ (80055b8 <UART_SetConfig+0x298>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d115      	bne.n	80053fc <UART_SetConfig+0xdc>
 80053d0:	4b78      	ldr	r3, [pc, #480]	@ (80055b4 <UART_SetConfig+0x294>)
 80053d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053d4:	f003 0307 	and.w	r3, r3, #7
 80053d8:	2b05      	cmp	r3, #5
 80053da:	d82c      	bhi.n	8005436 <UART_SetConfig+0x116>
 80053dc:	a201      	add	r2, pc, #4	@ (adr r2, 80053e4 <UART_SetConfig+0xc4>)
 80053de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e2:	bf00      	nop
 80053e4:	0800557d 	.word	0x0800557d
 80053e8:	08005509 	.word	0x08005509
 80053ec:	08005599 	.word	0x08005599
 80053f0:	080055e5 	.word	0x080055e5
 80053f4:	08005573 	.word	0x08005573
 80053f8:	080053bd 	.word	0x080053bd
 80053fc:	4a6f      	ldr	r2, [pc, #444]	@ (80055bc <UART_SetConfig+0x29c>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d0e6      	beq.n	80053d0 <UART_SetConfig+0xb0>
 8005402:	4a6f      	ldr	r2, [pc, #444]	@ (80055c0 <UART_SetConfig+0x2a0>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d0e3      	beq.n	80053d0 <UART_SetConfig+0xb0>
 8005408:	4a6e      	ldr	r2, [pc, #440]	@ (80055c4 <UART_SetConfig+0x2a4>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d0e0      	beq.n	80053d0 <UART_SetConfig+0xb0>
 800540e:	4a6e      	ldr	r2, [pc, #440]	@ (80055c8 <UART_SetConfig+0x2a8>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d118      	bne.n	8005446 <UART_SetConfig+0x126>
 8005414:	4b67      	ldr	r3, [pc, #412]	@ (80055b4 <UART_SetConfig+0x294>)
 8005416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005418:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800541c:	2b18      	cmp	r3, #24
 800541e:	f000 80e1 	beq.w	80055e4 <UART_SetConfig+0x2c4>
 8005422:	d80a      	bhi.n	800543a <UART_SetConfig+0x11a>
 8005424:	2b08      	cmp	r3, #8
 8005426:	f000 8106 	beq.w	8005636 <UART_SetConfig+0x316>
 800542a:	2b10      	cmp	r3, #16
 800542c:	f000 80b4 	beq.w	8005598 <UART_SetConfig+0x278>
 8005430:	2b00      	cmp	r3, #0
 8005432:	f000 80ab 	beq.w	800558c <UART_SetConfig+0x26c>
        pclk = (uint32_t) CSI_VALUE;
 8005436:	2001      	movs	r0, #1
 8005438:	e049      	b.n	80054ce <UART_SetConfig+0x1ae>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800543a:	2b20      	cmp	r3, #32
 800543c:	f000 8099 	beq.w	8005572 <UART_SetConfig+0x252>
 8005440:	2b28      	cmp	r3, #40	@ 0x28
 8005442:	d0bb      	beq.n	80053bc <UART_SetConfig+0x9c>
 8005444:	e7f7      	b.n	8005436 <UART_SetConfig+0x116>
 8005446:	4a61      	ldr	r2, [pc, #388]	@ (80055cc <UART_SetConfig+0x2ac>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d0c1      	beq.n	80053d0 <UART_SetConfig+0xb0>
 800544c:	4a60      	ldr	r2, [pc, #384]	@ (80055d0 <UART_SetConfig+0x2b0>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d0be      	beq.n	80053d0 <UART_SetConfig+0xb0>
 8005452:	4a56      	ldr	r2, [pc, #344]	@ (80055ac <UART_SetConfig+0x28c>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d1ee      	bne.n	8005436 <UART_SetConfig+0x116>
 8005458:	f502 320e 	add.w	r2, r2, #145408	@ 0x23800
 800545c:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800545e:	f003 0307 	and.w	r3, r3, #7
 8005462:	2b05      	cmp	r3, #5
 8005464:	d8e7      	bhi.n	8005436 <UART_SetConfig+0x116>
 8005466:	e8df f003 	tbb	[pc, r3]
 800546a:	2b49      	.short	0x2b49
 800546c:	4c033f3a 	.word	0x4c033f3a
        pclk = (uint32_t) CSI_VALUE;
 8005470:	4858      	ldr	r0, [pc, #352]	@ (80055d4 <UART_SetConfig+0x2b4>)
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005472:	4b59      	ldr	r3, [pc, #356]	@ (80055d8 <UART_SetConfig+0x2b8>)
 8005474:	6a62      	ldr	r2, [r4, #36]	@ 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005476:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005478:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800547c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005480:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005484:	4299      	cmp	r1, r3
 8005486:	d8d6      	bhi.n	8005436 <UART_SetConfig+0x116>
 8005488:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800548c:	d8d3      	bhi.n	8005436 <UART_SetConfig+0x116>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800548e:	2300      	movs	r3, #0
 8005490:	4619      	mov	r1, r3
 8005492:	f7fa ff7d 	bl	8000390 <__aeabi_uldivmod>
 8005496:	462a      	mov	r2, r5
 8005498:	0209      	lsls	r1, r1, #8
 800549a:	086b      	lsrs	r3, r5, #1
 800549c:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80054a0:	0200      	lsls	r0, r0, #8
 80054a2:	18c0      	adds	r0, r0, r3
 80054a4:	f04f 0300 	mov.w	r3, #0
 80054a8:	f141 0100 	adc.w	r1, r1, #0
 80054ac:	f7fa ff70 	bl	8000390 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80054b0:	4b4a      	ldr	r3, [pc, #296]	@ (80055dc <UART_SetConfig+0x2bc>)
 80054b2:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d8bd      	bhi.n	8005436 <UART_SetConfig+0x116>
          huart->Instance->BRR = usartdiv;
 80054ba:	6823      	ldr	r3, [r4, #0]
 80054bc:	60d8      	str	r0, [r3, #12]
 80054be:	e005      	b.n	80054cc <UART_SetConfig+0x1ac>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054c0:	4668      	mov	r0, sp
 80054c2:	f7ff fdad 	bl	8005020 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80054c6:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 80054c8:	2800      	cmp	r0, #0
 80054ca:	d1d2      	bne.n	8005472 <UART_SetConfig+0x152>
        pclk = (uint32_t) CSI_VALUE;
 80054cc:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 80054ce:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80054d2:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 80054d4:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80054d6:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
}
 80054da:	b007      	add	sp, #28
 80054dc:	bd30      	pop	{r4, r5, pc}
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054de:	a803      	add	r0, sp, #12
 80054e0:	f7ff fe48 	bl	8005174 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80054e4:	9804      	ldr	r0, [sp, #16]
        break;
 80054e6:	e7ef      	b.n	80054c8 <UART_SetConfig+0x1a8>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054e8:	6813      	ldr	r3, [r2, #0]
 80054ea:	483d      	ldr	r0, [pc, #244]	@ (80055e0 <UART_SetConfig+0x2c0>)
 80054ec:	f013 0f20 	tst.w	r3, #32
 80054f0:	d0bf      	beq.n	8005472 <UART_SetConfig+0x152>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80054f2:	6813      	ldr	r3, [r2, #0]
 80054f4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80054f8:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 80054fa:	e7ba      	b.n	8005472 <UART_SetConfig+0x152>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80054fc:	f7ff fd7e 	bl	8004ffc <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 8005500:	e7e2      	b.n	80054c8 <UART_SetConfig+0x1a8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005502:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8005506:	e7b4      	b.n	8005472 <UART_SetConfig+0x152>
 8005508:	2304      	movs	r3, #4
 800550a:	e747      	b.n	800539c <UART_SetConfig+0x7c>
    switch (clocksource)
 800550c:	2b08      	cmp	r3, #8
 800550e:	d892      	bhi.n	8005436 <UART_SetConfig+0x116>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005510:	4668      	mov	r0, sp
 8005512:	f7ff fd85 	bl	8005020 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005516:	9801      	ldr	r0, [sp, #4]
        break;
 8005518:	e001      	b.n	800551e <UART_SetConfig+0x1fe>
        pclk = HAL_RCC_GetPCLK1Freq();
 800551a:	f7fe ff73 	bl	8004404 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800551e:	2800      	cmp	r0, #0
 8005520:	d0d4      	beq.n	80054cc <UART_SetConfig+0x1ac>
 8005522:	e011      	b.n	8005548 <UART_SetConfig+0x228>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005524:	f7fe ff80 	bl	8004428 <HAL_RCC_GetPCLK2Freq>
        break;
 8005528:	e7f9      	b.n	800551e <UART_SetConfig+0x1fe>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800552a:	a803      	add	r0, sp, #12
 800552c:	f7ff fe22 	bl	8005174 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005530:	9804      	ldr	r0, [sp, #16]
        break;
 8005532:	e7f4      	b.n	800551e <UART_SetConfig+0x1fe>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005534:	4b1f      	ldr	r3, [pc, #124]	@ (80055b4 <UART_SetConfig+0x294>)
 8005536:	482a      	ldr	r0, [pc, #168]	@ (80055e0 <UART_SetConfig+0x2c0>)
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	f012 0f20 	tst.w	r2, #32
 800553e:	d003      	beq.n	8005548 <UART_SetConfig+0x228>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005546:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005548:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800554a:	4b23      	ldr	r3, [pc, #140]	@ (80055d8 <UART_SetConfig+0x2b8>)
 800554c:	6862      	ldr	r2, [r4, #4]
 800554e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005552:	fbb0 f3f3 	udiv	r3, r0, r3
 8005556:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800555a:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800555e:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8005562:	f1a3 0110 	sub.w	r1, r3, #16
 8005566:	4291      	cmp	r1, r2
 8005568:	f63f af65 	bhi.w	8005436 <UART_SetConfig+0x116>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800556c:	6822      	ldr	r2, [r4, #0]
 800556e:	60d3      	str	r3, [r2, #12]
 8005570:	e7ac      	b.n	80054cc <UART_SetConfig+0x1ac>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005572:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005576:	4817      	ldr	r0, [pc, #92]	@ (80055d4 <UART_SetConfig+0x2b4>)
 8005578:	d1e6      	bne.n	8005548 <UART_SetConfig+0x228>
 800557a:	e040      	b.n	80055fe <UART_SetConfig+0x2de>
 800557c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005580:	d1cb      	bne.n	800551a <UART_SetConfig+0x1fa>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005582:	f7fe ff3f 	bl	8004404 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005586:	2800      	cmp	r0, #0
 8005588:	d0a0      	beq.n	80054cc <UART_SetConfig+0x1ac>
 800558a:	e038      	b.n	80055fe <UART_SetConfig+0x2de>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800558c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005590:	d1c8      	bne.n	8005524 <UART_SetConfig+0x204>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005592:	f7fe ff49 	bl	8004428 <HAL_RCC_GetPCLK2Freq>
        break;
 8005596:	e7f6      	b.n	8005586 <UART_SetConfig+0x266>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005598:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800559c:	d1c5      	bne.n	800552a <UART_SetConfig+0x20a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800559e:	a803      	add	r0, sp, #12
 80055a0:	f7ff fde8 	bl	8005174 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80055a4:	9804      	ldr	r0, [sp, #16]
        break;
 80055a6:	e7ee      	b.n	8005586 <UART_SetConfig+0x266>
 80055a8:	cfff69f3 	.word	0xcfff69f3
 80055ac:	58000c00 	.word	0x58000c00
 80055b0:	40011000 	.word	0x40011000
 80055b4:	58024400 	.word	0x58024400
 80055b8:	40004400 	.word	0x40004400
 80055bc:	40004800 	.word	0x40004800
 80055c0:	40004c00 	.word	0x40004c00
 80055c4:	40005000 	.word	0x40005000
 80055c8:	40011400 	.word	0x40011400
 80055cc:	40007800 	.word	0x40007800
 80055d0:	40007c00 	.word	0x40007c00
 80055d4:	003d0900 	.word	0x003d0900
 80055d8:	0800ed34 	.word	0x0800ed34
 80055dc:	000ffcff 	.word	0x000ffcff
 80055e0:	03d09000 	.word	0x03d09000
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055e4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80055e8:	d1a4      	bne.n	8005534 <UART_SetConfig+0x214>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055ea:	4b15      	ldr	r3, [pc, #84]	@ (8005640 <UART_SetConfig+0x320>)
 80055ec:	4815      	ldr	r0, [pc, #84]	@ (8005644 <UART_SetConfig+0x324>)
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	f012 0f20 	tst.w	r2, #32
 80055f4:	d003      	beq.n	80055fe <UART_SetConfig+0x2de>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80055fc:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055fe:	4b12      	ldr	r3, [pc, #72]	@ (8005648 <UART_SetConfig+0x328>)
 8005600:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005602:	6861      	ldr	r1, [r4, #4]
 8005604:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8005608:	084b      	lsrs	r3, r1, #1
 800560a:	fbb0 f2f2 	udiv	r2, r0, r2
 800560e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005612:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005616:	fbb3 f3f1 	udiv	r3, r3, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800561a:	f1a3 0110 	sub.w	r1, r3, #16
 800561e:	4291      	cmp	r1, r2
 8005620:	f63f af09 	bhi.w	8005436 <UART_SetConfig+0x116>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005624:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005628:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800562c:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800562e:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 8005630:	4313      	orrs	r3, r2
 8005632:	60cb      	str	r3, [r1, #12]
 8005634:	e74a      	b.n	80054cc <UART_SetConfig+0x1ac>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005636:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800563a:	f47f af69 	bne.w	8005510 <UART_SetConfig+0x1f0>
 800563e:	e6b3      	b.n	80053a8 <UART_SetConfig+0x88>
 8005640:	58024400 	.word	0x58024400
 8005644:	03d09000 	.word	0x03d09000
 8005648:	0800ed34 	.word	0x0800ed34

0800564c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800564c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800564e:	071a      	lsls	r2, r3, #28
{
 8005650:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005652:	d506      	bpl.n	8005662 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005654:	6801      	ldr	r1, [r0, #0]
 8005656:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8005658:	684a      	ldr	r2, [r1, #4]
 800565a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800565e:	4322      	orrs	r2, r4
 8005660:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005662:	07dc      	lsls	r4, r3, #31
 8005664:	d506      	bpl.n	8005674 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005666:	6801      	ldr	r1, [r0, #0]
 8005668:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 800566a:	684a      	ldr	r2, [r1, #4]
 800566c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005670:	4322      	orrs	r2, r4
 8005672:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005674:	0799      	lsls	r1, r3, #30
 8005676:	d506      	bpl.n	8005686 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005678:	6801      	ldr	r1, [r0, #0]
 800567a:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800567c:	684a      	ldr	r2, [r1, #4]
 800567e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005682:	4322      	orrs	r2, r4
 8005684:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005686:	075a      	lsls	r2, r3, #29
 8005688:	d506      	bpl.n	8005698 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800568a:	6801      	ldr	r1, [r0, #0]
 800568c:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 800568e:	684a      	ldr	r2, [r1, #4]
 8005690:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005694:	4322      	orrs	r2, r4
 8005696:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005698:	06dc      	lsls	r4, r3, #27
 800569a:	d506      	bpl.n	80056aa <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800569c:	6801      	ldr	r1, [r0, #0]
 800569e:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 80056a0:	688a      	ldr	r2, [r1, #8]
 80056a2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80056a6:	4322      	orrs	r2, r4
 80056a8:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056aa:	0699      	lsls	r1, r3, #26
 80056ac:	d506      	bpl.n	80056bc <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056ae:	6801      	ldr	r1, [r0, #0]
 80056b0:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 80056b2:	688a      	ldr	r2, [r1, #8]
 80056b4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80056b8:	4322      	orrs	r2, r4
 80056ba:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056bc:	065a      	lsls	r2, r3, #25
 80056be:	d510      	bpl.n	80056e2 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056c0:	6801      	ldr	r1, [r0, #0]
 80056c2:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 80056c4:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056c6:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056ca:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 80056ce:	ea42 0204 	orr.w	r2, r2, r4
 80056d2:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056d4:	d105      	bne.n	80056e2 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056d6:	684a      	ldr	r2, [r1, #4]
 80056d8:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 80056da:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 80056de:	4322      	orrs	r2, r4
 80056e0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056e2:	061b      	lsls	r3, r3, #24
 80056e4:	d506      	bpl.n	80056f4 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056e6:	6802      	ldr	r2, [r0, #0]
 80056e8:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 80056ea:	6853      	ldr	r3, [r2, #4]
 80056ec:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80056f0:	430b      	orrs	r3, r1
 80056f2:	6053      	str	r3, [r2, #4]
}
 80056f4:	bd10      	pop	{r4, pc}

080056f6 <UART_WaitOnFlagUntilTimeout>:
{
 80056f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056fa:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80056fe:	4604      	mov	r4, r0
 8005700:	460d      	mov	r5, r1
 8005702:	4617      	mov	r7, r2
 8005704:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005706:	6822      	ldr	r2, [r4, #0]
 8005708:	69d3      	ldr	r3, [r2, #28]
 800570a:	ea35 0303 	bics.w	r3, r5, r3
 800570e:	bf0c      	ite	eq
 8005710:	2301      	moveq	r3, #1
 8005712:	2300      	movne	r3, #0
 8005714:	42bb      	cmp	r3, r7
 8005716:	d001      	beq.n	800571c <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8005718:	2000      	movs	r0, #0
 800571a:	e022      	b.n	8005762 <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 800571c:	f1b9 3fff 	cmp.w	r9, #4294967295
 8005720:	d0f2      	beq.n	8005708 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005722:	f7fb ff11 	bl	8001548 <HAL_GetTick>
 8005726:	eba0 0008 	sub.w	r0, r0, r8
 800572a:	4548      	cmp	r0, r9
 800572c:	d829      	bhi.n	8005782 <UART_WaitOnFlagUntilTimeout+0x8c>
 800572e:	f1b9 0f00 	cmp.w	r9, #0
 8005732:	d026      	beq.n	8005782 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005734:	6821      	ldr	r1, [r4, #0]
 8005736:	680b      	ldr	r3, [r1, #0]
 8005738:	075a      	lsls	r2, r3, #29
 800573a:	d5e4      	bpl.n	8005706 <UART_WaitOnFlagUntilTimeout+0x10>
 800573c:	2d80      	cmp	r5, #128	@ 0x80
 800573e:	d0e2      	beq.n	8005706 <UART_WaitOnFlagUntilTimeout+0x10>
 8005740:	2d40      	cmp	r5, #64	@ 0x40
 8005742:	d0e0      	beq.n	8005706 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005744:	69ce      	ldr	r6, [r1, #28]
 8005746:	f016 0608 	ands.w	r6, r6, #8
 800574a:	d00c      	beq.n	8005766 <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800574c:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
 800574e:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005750:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
 8005752:	f7ff fdb9 	bl	80052c8 <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 8005756:	2300      	movs	r3, #0
          return HAL_ERROR;
 8005758:	2001      	movs	r0, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800575a:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 800575e:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8005762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005766:	69cb      	ldr	r3, [r1, #28]
 8005768:	051b      	lsls	r3, r3, #20
 800576a:	d5cc      	bpl.n	8005706 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800576c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
          UART_EndRxTransfer(huart);
 8005770:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005772:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 8005774:	f7ff fda8 	bl	80052c8 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005778:	2320      	movs	r3, #32
          __HAL_UNLOCK(huart);
 800577a:	f884 6084 	strb.w	r6, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800577e:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        return HAL_TIMEOUT;
 8005782:	2003      	movs	r0, #3
 8005784:	e7ed      	b.n	8005762 <UART_WaitOnFlagUntilTimeout+0x6c>

08005786 <HAL_UART_Transmit>:
{
 8005786:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800578a:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800578c:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 8005790:	4604      	mov	r4, r0
 8005792:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8005794:	2b20      	cmp	r3, #32
{
 8005796:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8005798:	d146      	bne.n	8005828 <HAL_UART_Transmit+0xa2>
    if ((pData == NULL) || (Size == 0U))
 800579a:	2900      	cmp	r1, #0
 800579c:	d046      	beq.n	800582c <HAL_UART_Transmit+0xa6>
 800579e:	2a00      	cmp	r2, #0
 80057a0:	d044      	beq.n	800582c <HAL_UART_Transmit+0xa6>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057a2:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057a4:	2500      	movs	r5, #0
 80057a6:	f8c0 5090 	str.w	r5, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057aa:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    tickstart = HAL_GetTick();
 80057ae:	f7fb fecb 	bl	8001548 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057b2:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80057b4:	4681      	mov	r9, r0
    huart->TxXferSize  = Size;
 80057b6:	f8a4 7054 	strh.w	r7, [r4, #84]	@ 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 80057be:	f8a4 7056 	strh.w	r7, [r4, #86]	@ 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057c2:	d103      	bne.n	80057cc <HAL_UART_Transmit+0x46>
 80057c4:	6923      	ldr	r3, [r4, #16]
 80057c6:	b90b      	cbnz	r3, 80057cc <HAL_UART_Transmit+0x46>
 80057c8:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80057ca:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 80057cc:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057d0:	464b      	mov	r3, r9
 80057d2:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 80057d6:	b292      	uxth	r2, r2
 80057d8:	b942      	cbnz	r2, 80057ec <HAL_UART_Transmit+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057da:	2140      	movs	r1, #64	@ 0x40
 80057dc:	4620      	mov	r0, r4
 80057de:	f7ff ff8a 	bl	80056f6 <UART_WaitOnFlagUntilTimeout>
 80057e2:	2320      	movs	r3, #32
 80057e4:	b948      	cbnz	r0, 80057fa <HAL_UART_Transmit+0x74>
    huart->gState = HAL_UART_STATE_READY;
 80057e6:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    return HAL_OK;
 80057ea:	e009      	b.n	8005800 <HAL_UART_Transmit+0x7a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057ec:	2200      	movs	r2, #0
 80057ee:	2180      	movs	r1, #128	@ 0x80
 80057f0:	4620      	mov	r0, r4
 80057f2:	f7ff ff80 	bl	80056f6 <UART_WaitOnFlagUntilTimeout>
 80057f6:	b130      	cbz	r0, 8005806 <HAL_UART_Transmit+0x80>
        huart->gState = HAL_UART_STATE_READY;
 80057f8:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 80057fa:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 80057fc:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
}
 8005800:	b003      	add	sp, #12
 8005802:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005806:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8005808:	b95e      	cbnz	r6, 8005822 <HAL_UART_Transmit+0x9c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800580a:	f835 3b02 	ldrh.w	r3, [r5], #2
 800580e:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005812:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8005814:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 8005818:	3a01      	subs	r2, #1
 800581a:	b292      	uxth	r2, r2
 800581c:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
 8005820:	e7d4      	b.n	80057cc <HAL_UART_Transmit+0x46>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005822:	f816 3b01 	ldrb.w	r3, [r6], #1
 8005826:	e7f4      	b.n	8005812 <HAL_UART_Transmit+0x8c>
    return HAL_BUSY;
 8005828:	2002      	movs	r0, #2
 800582a:	e7e9      	b.n	8005800 <HAL_UART_Transmit+0x7a>
      return  HAL_ERROR;
 800582c:	2001      	movs	r0, #1
 800582e:	e7e7      	b.n	8005800 <HAL_UART_Transmit+0x7a>

08005830 <UART_CheckIdleState>:
{
 8005830:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005832:	2600      	movs	r6, #0
{
 8005834:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005836:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 800583a:	f7fb fe85 	bl	8001548 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800583e:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8005840:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	071a      	lsls	r2, r3, #28
 8005846:	d51c      	bpl.n	8005882 <UART_CheckIdleState+0x52>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005848:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800584c:	4632      	mov	r2, r6
 800584e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005852:	9300      	str	r3, [sp, #0]
 8005854:	4603      	mov	r3, r0
 8005856:	4620      	mov	r0, r4
 8005858:	f7ff ff4d 	bl	80056f6 <UART_WaitOnFlagUntilTimeout>
 800585c:	b188      	cbz	r0, 8005882 <UART_CheckIdleState+0x52>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800585e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005860:	e852 3f00 	ldrex	r3, [r2]
 8005864:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005868:	e842 3100 	strex	r1, r3, [r2]
 800586c:	2900      	cmp	r1, #0
 800586e:	d1f6      	bne.n	800585e <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
 8005870:	2320      	movs	r3, #32
 8005872:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 8005876:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8005878:	2300      	movs	r3, #0
 800587a:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 800587e:	b002      	add	sp, #8
 8005880:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005882:	6823      	ldr	r3, [r4, #0]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	075b      	lsls	r3, r3, #29
 8005888:	d524      	bpl.n	80058d4 <UART_CheckIdleState+0xa4>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800588a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800588e:	2200      	movs	r2, #0
 8005890:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005894:	4620      	mov	r0, r4
 8005896:	9300      	str	r3, [sp, #0]
 8005898:	462b      	mov	r3, r5
 800589a:	f7ff ff2c 	bl	80056f6 <UART_WaitOnFlagUntilTimeout>
 800589e:	b1c8      	cbz	r0, 80058d4 <UART_CheckIdleState+0xa4>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80058a0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a2:	e852 3f00 	ldrex	r3, [r2]
 80058a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058aa:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80058ae:	6822      	ldr	r2, [r4, #0]
 80058b0:	2900      	cmp	r1, #0
 80058b2:	d1f5      	bne.n	80058a0 <UART_CheckIdleState+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b4:	f102 0308 	add.w	r3, r2, #8
 80058b8:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058bc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c0:	f102 0008 	add.w	r0, r2, #8
 80058c4:	e840 3100 	strex	r1, r3, [r0]
 80058c8:	2900      	cmp	r1, #0
 80058ca:	d1f3      	bne.n	80058b4 <UART_CheckIdleState+0x84>
      huart->RxState = HAL_UART_STATE_READY;
 80058cc:	2320      	movs	r3, #32
 80058ce:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 80058d2:	e7d0      	b.n	8005876 <UART_CheckIdleState+0x46>
  huart->gState = HAL_UART_STATE_READY;
 80058d4:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058d6:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80058d8:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80058dc:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058e0:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058e2:	6720      	str	r0, [r4, #112]	@ 0x70
  return HAL_OK;
 80058e4:	e7c8      	b.n	8005878 <UART_CheckIdleState+0x48>

080058e6 <HAL_UART_Init>:
{
 80058e6:	b510      	push	{r4, lr}
  if (huart == NULL)
 80058e8:	4604      	mov	r4, r0
 80058ea:	b350      	cbz	r0, 8005942 <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 80058ec:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 80058f0:	b91b      	cbnz	r3, 80058fa <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 80058f2:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 80058f6:	f7fb fcbd 	bl	8001274 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80058fa:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 80058fc:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80058fe:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8005902:	6813      	ldr	r3, [r2, #0]
 8005904:	f023 0301 	bic.w	r3, r3, #1
 8005908:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800590a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800590c:	b113      	cbz	r3, 8005914 <HAL_UART_Init+0x2e>
    UART_AdvFeatureConfig(huart);
 800590e:	4620      	mov	r0, r4
 8005910:	f7ff fe9c 	bl	800564c <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005914:	4620      	mov	r0, r4
 8005916:	f7ff fd03 	bl	8005320 <UART_SetConfig>
 800591a:	2801      	cmp	r0, #1
 800591c:	d011      	beq.n	8005942 <HAL_UART_Init+0x5c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800591e:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8005920:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005922:	685a      	ldr	r2, [r3, #4]
 8005924:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005928:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800592a:	689a      	ldr	r2, [r3, #8]
 800592c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005930:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	f042 0201 	orr.w	r2, r2, #1
}
 8005938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 800593c:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800593e:	f7ff bf77 	b.w	8005830 <UART_CheckIdleState>
}
 8005942:	2001      	movs	r0, #1
 8005944:	bd10      	pop	{r4, pc}
	...

08005948 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005948:	6e43      	ldr	r3, [r0, #100]	@ 0x64
{
 800594a:	b530      	push	{r4, r5, lr}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800594c:	b92b      	cbnz	r3, 800595a <UARTEx_SetNbDataToProcess+0x12>
  {
    huart->NbTxDataToProcess = 1U;
 800594e:	2301      	movs	r3, #1
 8005950:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005954:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005958:	bd30      	pop	{r4, r5, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800595a:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800595c:	4d09      	ldr	r5, [pc, #36]	@ (8005984 <UARTEx_SetNbDataToProcess+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800595e:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005960:	6899      	ldr	r1, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8005962:	4c09      	ldr	r4, [pc, #36]	@ (8005988 <UARTEx_SetNbDataToProcess+0x40>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005964:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005968:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800596a:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 800596c:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800596e:	011b      	lsls	r3, r3, #4
 8005970:	fbb3 f3f1 	udiv	r3, r3, r1
 8005974:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005978:	5cab      	ldrb	r3, [r5, r2]
                               (uint16_t)denominator[rx_fifo_threshold];
 800597a:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800597c:	011b      	lsls	r3, r3, #4
 800597e:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8005982:	e7e7      	b.n	8005954 <UARTEx_SetNbDataToProcess+0xc>
 8005984:	0800ed54 	.word	0x0800ed54
 8005988:	0800ed4c 	.word	0x0800ed4c

0800598c <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 800598c:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8005990:	2b01      	cmp	r3, #1
 8005992:	d014      	beq.n	80059be <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005994:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005996:	2324      	movs	r3, #36	@ 0x24
 8005998:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800599c:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800599e:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80059a0:	f021 5100 	bic.w	r1, r1, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 80059a4:	f023 0301 	bic.w	r3, r3, #1
 80059a8:	6013      	str	r3, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80059aa:	2300      	movs	r3, #0
 80059ac:	6643      	str	r3, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059ae:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 80059b0:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 80059b2:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_READY;
 80059b6:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  return HAL_OK;
 80059ba:	4618      	mov	r0, r3
 80059bc:	4770      	bx	lr
  __HAL_LOCK(huart);
 80059be:	2002      	movs	r0, #2
}
 80059c0:	4770      	bx	lr

080059c2 <HAL_UARTEx_SetTxFifoThreshold>:
{
 80059c2:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 80059c4:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
{
 80059c8:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d017      	beq.n	80059fe <HAL_UARTEx_SetTxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059ce:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80059d0:	2324      	movs	r3, #36	@ 0x24
 80059d2:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059d6:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 80059d8:	682b      	ldr	r3, [r5, #0]
 80059da:	f023 0301 	bic.w	r3, r3, #1
 80059de:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80059e0:	68ab      	ldr	r3, [r5, #8]
 80059e2:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 80059e6:	4319      	orrs	r1, r3
 80059e8:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 80059ea:	f7ff ffad 	bl	8005948 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 80059ee:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059f0:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 80059f2:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 80059f6:	2000      	movs	r0, #0
 80059f8:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 80059fc:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 80059fe:	2002      	movs	r0, #2
 8005a00:	e7fc      	b.n	80059fc <HAL_UARTEx_SetTxFifoThreshold+0x3a>

08005a02 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8005a02:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8005a04:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
{
 8005a08:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d017      	beq.n	8005a3e <HAL_UARTEx_SetRxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a0e:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005a10:	2324      	movs	r3, #36	@ 0x24
 8005a12:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a16:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8005a18:	682b      	ldr	r3, [r5, #0]
 8005a1a:	f023 0301 	bic.w	r3, r3, #1
 8005a1e:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005a20:	68ab      	ldr	r3, [r5, #8]
 8005a22:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 8005a26:	4319      	orrs	r1, r3
 8005a28:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 8005a2a:	f7ff ff8d 	bl	8005948 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8005a2e:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a30:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005a32:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8005a36:	2000      	movs	r0, #0
 8005a38:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8005a3c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8005a3e:	2002      	movs	r0, #2
 8005a40:	e7fc      	b.n	8005a3c <HAL_UARTEx_SetRxFifoThreshold+0x3a>
	...

08005a44 <acquire_and_process_data>:
  return 0;
}

/* USER CODE BEGIN 2 */
int acquire_and_process_data(void)
{
 8005a44:	b570      	push	{r4, r5, r6, lr}
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8005a46:	483a      	ldr	r0, [pc, #232]	@ (8005b30 <acquire_and_process_data+0xec>)
  HAL_Delay(20);
  extern uint32_t imagedata128[128 * 128 /2];
  for (int i = 0; i < 128 * 128 / 2; ++i) {
 8005a48:	2400      	movs	r4, #0
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8005a4a:	f7fa fc99 	bl	8000380 <strlen>
 8005a4e:	4938      	ldr	r1, [pc, #224]	@ (8005b30 <acquire_and_process_data+0xec>)
 8005a50:	b282      	uxth	r2, r0
 8005a52:	230a      	movs	r3, #10
 8005a54:	4837      	ldr	r0, [pc, #220]	@ (8005b34 <acquire_and_process_data+0xf0>)
          uint8_t green2 = (pixels >> 5) & 0x3F;
          uint8_t blue2 = pixels & 0x1F;

          // Scale to 8-bit components
          uint8_t red1_8bit = (red1 * 255) / 31;
          uint8_t green1_8bit = (green1 * 255) / 63;
 8005a56:	253f      	movs	r5, #63	@ 0x3f
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8005a58:	f7ff fe95 	bl	8005786 <HAL_UART_Transmit>
  HAL_Delay(20);
 8005a5c:	2014      	movs	r0, #20
 8005a5e:	f7fb fd79 	bl	8001554 <HAL_Delay>
  for (int i = 0; i < 128 * 128 / 2; ++i) {
 8005a62:	4e35      	ldr	r6, [pc, #212]	@ (8005b38 <acquire_and_process_data+0xf4>)
 8005a64:	4935      	ldr	r1, [pc, #212]	@ (8005b3c <acquire_and_process_data+0xf8>)
          uint8_t red1_8bit = (red1 * 255) / 31;
 8005a66:	201f      	movs	r0, #31

          // Place the 8-bit components in the AI input buffer
          // Assuming the AI expects RGB values in separate consecutive bytes

          // Store first pixel
          data_in_1[6*i] = (float) red1_8bit / 255;
 8005a68:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8005b40 <acquire_and_process_data+0xfc>
          uint32_t pixels = imagedata128[i];
 8005a6c:	f856 3b04 	ldr.w	r3, [r6], #4
  for (int i = 0; i < 128 * 128 / 2; ++i) {
 8005a70:	3401      	adds	r4, #1
 8005a72:	3118      	adds	r1, #24
          uint8_t red1 = (pixels >> 27) & 0x1F;
 8005a74:	0eda      	lsrs	r2, r3, #27
  for (int i = 0; i < 128 * 128 / 2; ++i) {
 8005a76:	f5b4 5f00 	cmp.w	r4, #8192	@ 0x2000
          uint8_t red1_8bit = (red1 * 255) / 31;
 8005a7a:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 8005a7e:	fbb2 f2f0 	udiv	r2, r2, r0
          data_in_1[6*i] = (float) red1_8bit / 255;
 8005a82:	b2d2      	uxtb	r2, r2
 8005a84:	ee07 2a90 	vmov	s15, r2
          uint8_t green1_8bit = (green1 * 255) / 63;
 8005a88:	f3c3 5245 	ubfx	r2, r3, #21, #6
          data_in_1[6*i] = (float) red1_8bit / 255;
 8005a8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
          uint8_t green1_8bit = (green1 * 255) / 63;
 8005a90:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 8005a94:	fbb2 f2f5 	udiv	r2, r2, r5
          data_in_1[6*i] = (float) red1_8bit / 255;
 8005a98:	eec7 6a87 	vdiv.f32	s13, s15, s14
          data_in_1[6*i+1] = (float) green1_8bit / 255;
 8005a9c:	b2d2      	uxtb	r2, r2
 8005a9e:	ee07 2a90 	vmov	s15, r2
          uint8_t blue1_8bit = (blue1 * 255) / 31;
 8005aa2:	f3c3 4204 	ubfx	r2, r3, #16, #5
 8005aa6:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
          data_in_1[6*i+1] = (float) green1_8bit / 255;
 8005aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
          uint8_t blue1_8bit = (blue1 * 255) / 31;
 8005aae:	fbb2 f2f0 	udiv	r2, r2, r0
          data_in_1[6*i+2] = (float) blue1_8bit / 255;
 8005ab2:	b2d2      	uxtb	r2, r2
          data_in_1[6*i] = (float) red1_8bit / 255;
 8005ab4:	ed41 6a06 	vstr	s13, [r1, #-24]	@ 0xffffffe8
          data_in_1[6*i+1] = (float) green1_8bit / 255;
 8005ab8:	eec7 6a87 	vdiv.f32	s13, s15, s14
          data_in_1[6*i+2] = (float) blue1_8bit / 255;
 8005abc:	ee07 2a90 	vmov	s15, r2
          uint8_t red2_8bit = (red2 * 255) / 31;
 8005ac0:	f3c3 22c4 	ubfx	r2, r3, #11, #5
 8005ac4:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
          data_in_1[6*i+2] = (float) blue1_8bit / 255;
 8005ac8:	eef8 7a67 	vcvt.f32.u32	s15, s15
          uint8_t red2_8bit = (red2 * 255) / 31;
 8005acc:	fbb2 f2f0 	udiv	r2, r2, r0
          data_in_1[6*i+3] = (float) red2_8bit / 255;
 8005ad0:	b2d2      	uxtb	r2, r2
          data_in_1[6*i+1] = (float) green1_8bit / 255;
 8005ad2:	ed41 6a05 	vstr	s13, [r1, #-20]	@ 0xffffffec
          data_in_1[6*i+2] = (float) blue1_8bit / 255;
 8005ad6:	eec7 6a87 	vdiv.f32	s13, s15, s14
          data_in_1[6*i+3] = (float) red2_8bit / 255;
 8005ada:	ee07 2a90 	vmov	s15, r2
          uint8_t green2_8bit = (green2 * 255) / 63;
 8005ade:	f3c3 1245 	ubfx	r2, r3, #5, #6
          uint8_t blue2_8bit = (blue2 * 255) / 31;
 8005ae2:	f003 031f 	and.w	r3, r3, #31
          uint8_t green2_8bit = (green2 * 255) / 63;
 8005ae6:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
          uint8_t blue2_8bit = (blue2 * 255) / 31;
 8005aea:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
          data_in_1[6*i+3] = (float) red2_8bit / 255;
 8005aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
          uint8_t green2_8bit = (green2 * 255) / 63;
 8005af2:	fbb2 f2f5 	udiv	r2, r2, r5
          data_in_1[6*i+4] = (float) green2_8bit / 255;
 8005af6:	b2d2      	uxtb	r2, r2
          uint8_t blue2_8bit = (blue2 * 255) / 31;
 8005af8:	fbb3 f3f0 	udiv	r3, r3, r0
          data_in_1[6*i+2] = (float) blue1_8bit / 255;
 8005afc:	ed41 6a04 	vstr	s13, [r1, #-16]
          data_in_1[6*i+3] = (float) red2_8bit / 255;
 8005b00:	eec7 6a87 	vdiv.f32	s13, s15, s14
          data_in_1[6*i+4] = (float) green2_8bit / 255;
 8005b04:	ee07 2a90 	vmov	s15, r2
          data_in_1[6*i+5] = (float) blue2_8bit /255;
 8005b08:	b2db      	uxtb	r3, r3
          data_in_1[6*i+4] = (float) green2_8bit / 255;
 8005b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
          data_in_1[6*i+3] = (float) red2_8bit / 255;
 8005b0e:	ed41 6a03 	vstr	s13, [r1, #-12]
          data_in_1[6*i+4] = (float) green2_8bit / 255;
 8005b12:	eec7 6a87 	vdiv.f32	s13, s15, s14
          data_in_1[6*i+5] = (float) blue2_8bit /255;
 8005b16:	ee07 3a90 	vmov	s15, r3
 8005b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
          data_in_1[6*i+4] = (float) green2_8bit / 255;
 8005b1e:	ed41 6a02 	vstr	s13, [r1, #-8]
          data_in_1[6*i+5] = (float) blue2_8bit /255;
 8005b22:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005b26:	ed41 6a01 	vstr	s13, [r1, #-4]
  for (int i = 0; i < 128 * 128 / 2; ++i) {
 8005b2a:	d19f      	bne.n	8005a6c <acquire_and_process_data+0x28>
  }
  return 0;
}
 8005b2c:	2000      	movs	r0, #0
 8005b2e:	bd70      	pop	{r4, r5, r6, pc}
 8005b30:	24038fa0 	.word	0x24038fa0
 8005b34:	24008d48 	.word	0x24008d48
 8005b38:	24000d48 	.word	0x24000d48
 8005b3c:	240390dc 	.word	0x240390dc
 8005b40:	437f0000 	.word	0x437f0000

08005b44 <indexlargest>:
  	HAL_Delay(20);
  return 0;
}

int indexlargest(const float *arr, int n) { //Find the index of the largest element of an array
    if (n <= 0) return -1; // Return -1 for an empty array
 8005b44:	2900      	cmp	r1, #0
int indexlargest(const float *arr, int n) { //Find the index of the largest element of an array
 8005b46:	4603      	mov	r3, r0
    if (n <= 0) return -1; // Return -1 for an empty array
 8005b48:	dd16      	ble.n	8005b78 <indexlargest+0x34>

    int maxIndex = 0; // Start with the first element as the largest
    int max = arr[0];
 8005b4a:	ecf3 7a01 	vldmia	r3!, {s15}
    for (int i = 1; i < n; i++) {
 8005b4e:	2201      	movs	r2, #1
    int maxIndex = 0; // Start with the first element as the largest
 8005b50:	2000      	movs	r0, #0
    int max = arr[0];
 8005b52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    for (int i = 1; i < n; i++) {
 8005b56:	428a      	cmp	r2, r1
 8005b58:	d100      	bne.n	8005b5c <indexlargest+0x18>
 8005b5a:	4770      	bx	lr
        if (arr[i] > max) {
 8005b5c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005b60:	ecb3 7a01 	vldmia	r3!, {s14}
 8005b64:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8005b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            max = arr[i];
 8005b6c:	bfc4      	itt	gt
 8005b6e:	4610      	movgt	r0, r2
 8005b70:	eefd 7ac7 	vcvtgt.s32.f32	s15, s14
    for (int i = 1; i < n; i++) {
 8005b74:	3201      	adds	r2, #1
 8005b76:	e7ee      	b.n	8005b56 <indexlargest+0x12>
    if (n <= 0) return -1; // Return -1 for an empty array
 8005b78:	f04f 30ff 	mov.w	r0, #4294967295
            maxIndex = i; // Update maxIndex to the current index
        }
    }
    return maxIndex;
}
 8005b7c:	4770      	bx	lr
	...

08005b80 <post_process>:
{
 8005b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b82:	4d79      	ldr	r5, [pc, #484]	@ (8005d68 <post_process+0x1e8>)
	for (int i = 0; i < 54; ++i) {
 8005b84:	2400      	movs	r4, #0
	  	sprintf(buffer, "index: %d, data: %f\r\n",i, data_out_1[i]);
 8005b86:	4f79      	ldr	r7, [pc, #484]	@ (8005d6c <post_process+0x1ec>)
	  	HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8005b88:	4e79      	ldr	r6, [pc, #484]	@ (8005d70 <post_process+0x1f0>)
{
 8005b8a:	ed2d 8b02 	vpush	{d8}
	float temp = 0;
 8005b8e:	ed9f 8a79 	vldr	s16, [pc, #484]	@ 8005d74 <post_process+0x1f4>
{
 8005b92:	b0e7      	sub	sp, #412	@ 0x19c
		temp += data_out_1[i];
 8005b94:	ecb5 7a01 	vldmia	r5!, {s14}
	  	sprintf(buffer, "index: %d, data: %f\r\n",i, data_out_1[i]);
 8005b98:	4622      	mov	r2, r4
 8005b9a:	4639      	mov	r1, r7
 8005b9c:	a802      	add	r0, sp, #8
		temp += data_out_1[i];
 8005b9e:	ee38 8a07 	vadd.f32	s16, s16, s14
	for (int i = 0; i < 54; ++i) {
 8005ba2:	3401      	adds	r4, #1
	  	sprintf(buffer, "index: %d, data: %f\r\n",i, data_out_1[i]);
 8005ba4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8005ba8:	ed8d 7b00 	vstr	d7, [sp]
 8005bac:	f006 fe2a 	bl	800c804 <siprintf>
	  	HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8005bb0:	a802      	add	r0, sp, #8
 8005bb2:	f7fa fbe5 	bl	8000380 <strlen>
 8005bb6:	230a      	movs	r3, #10
 8005bb8:	b282      	uxth	r2, r0
 8005bba:	a902      	add	r1, sp, #8
 8005bbc:	4630      	mov	r0, r6
 8005bbe:	f7ff fde2 	bl	8005786 <HAL_UART_Transmit>
	  	HAL_Delay(20);
 8005bc2:	2014      	movs	r0, #20
 8005bc4:	f7fb fcc6 	bl	8001554 <HAL_Delay>
	for (int i = 0; i < 54; ++i) {
 8005bc8:	2c36      	cmp	r4, #54	@ 0x36
 8005bca:	d1e3      	bne.n	8005b94 <post_process+0x14>
  	sprintf(buffer, "temp: %f\r\n", temp);
 8005bcc:	eeb7 7ac8 	vcvt.f64.f32	d7, s16
 8005bd0:	4969      	ldr	r1, [pc, #420]	@ (8005d78 <post_process+0x1f8>)
 8005bd2:	a802      	add	r0, sp, #8
 8005bd4:	ec53 2b17 	vmov	r2, r3, d7
 8005bd8:	f006 fe14 	bl	800c804 <siprintf>
  	HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8005bdc:	a802      	add	r0, sp, #8
 8005bde:	f7fa fbcf 	bl	8000380 <strlen>
 8005be2:	230a      	movs	r3, #10
 8005be4:	b282      	uxth	r2, r0
 8005be6:	a902      	add	r1, sp, #8
 8005be8:	4861      	ldr	r0, [pc, #388]	@ (8005d70 <post_process+0x1f0>)
 8005bea:	f7ff fdcc 	bl	8005786 <HAL_UART_Transmit>
  	HAL_Delay(20);
 8005bee:	2014      	movs	r0, #20
 8005bf0:	f7fb fcb0 	bl	8001554 <HAL_Delay>
  	int index = indexlargest(data_out_1, 54);
 8005bf4:	4621      	mov	r1, r4
 8005bf6:	485c      	ldr	r0, [pc, #368]	@ (8005d68 <post_process+0x1e8>)
 8005bf8:	f7ff ffa4 	bl	8005b44 <indexlargest>
  	sprintf(buffer, "index :%d \r\n", index);
 8005bfc:	495f      	ldr	r1, [pc, #380]	@ (8005d7c <post_process+0x1fc>)
 8005bfe:	4602      	mov	r2, r0
  	int index = indexlargest(data_out_1, 54);
 8005c00:	4604      	mov	r4, r0
  	sprintf(buffer, "index :%d \r\n", index);
 8005c02:	a802      	add	r0, sp, #8
 8005c04:	f006 fdfe 	bl	800c804 <siprintf>
  	HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8005c08:	a802      	add	r0, sp, #8
 8005c0a:	f7fa fbb9 	bl	8000380 <strlen>
 8005c0e:	230a      	movs	r3, #10
 8005c10:	b282      	uxth	r2, r0
 8005c12:	a902      	add	r1, sp, #8
 8005c14:	4856      	ldr	r0, [pc, #344]	@ (8005d70 <post_process+0x1f0>)
 8005c16:	f7ff fdb6 	bl	8005786 <HAL_UART_Transmit>
  	HAL_Delay(20);
 8005c1a:	2014      	movs	r0, #20
 8005c1c:	f7fb fc9a 	bl	8001554 <HAL_Delay>
  	if (index >= 1 && index <= 13) {
 8005c20:	1e63      	subs	r3, r4, #1
 8005c22:	2b0c      	cmp	r3, #12
 8005c24:	d816      	bhi.n	8005c54 <post_process+0xd4>
  		strcpy(suit, "Clubs");
 8005c26:	4956      	ldr	r1, [pc, #344]	@ (8005d80 <post_process+0x200>)
  		strcpy(suit, "Diamonds");
 8005c28:	a834      	add	r0, sp, #208	@ 0xd0
 8005c2a:	f006 ff06 	bl	800ca3a <strcpy>
  	int offset = -1;
 8005c2e:	f04f 33ff 	mov.w	r3, #4294967295
  	int ranknum = (index + offset) % 13;
 8005c32:	4423      	add	r3, r4
 8005c34:	220d      	movs	r2, #13
 8005c36:	fb93 f1f2 	sdiv	r1, r3, r2
 8005c3a:	fb02 3311 	mls	r3, r2, r1, r3
  	switch(ranknum) {
 8005c3e:	2b0c      	cmp	r3, #12
 8005c40:	d832      	bhi.n	8005ca8 <post_process+0x128>
 8005c42:	e8df f003 	tbb	[pc, r3]
 8005c46:	792d      	.short	0x792d
 8005c48:	817f7d7b 	.word	0x817f7d7b
 8005c4c:	89878583 	.word	0x89878583
 8005c50:	8d8b      	.short	0x8d8b
 8005c52:	8f          	.byte	0x8f
 8005c53:	00          	.byte	0x00
  	} else if (index >= 14 && index <= 26) {
 8005c54:	f1a4 030e 	sub.w	r3, r4, #14
 8005c58:	2b0c      	cmp	r3, #12
 8005c5a:	d801      	bhi.n	8005c60 <post_process+0xe0>
  		strcpy(suit, "Diamonds");
 8005c5c:	4949      	ldr	r1, [pc, #292]	@ (8005d84 <post_process+0x204>)
 8005c5e:	e7e3      	b.n	8005c28 <post_process+0xa8>
  	} else if (index >= 27 && index <= 39) {
 8005c60:	f1a4 031b 	sub.w	r3, r4, #27
 8005c64:	2b0c      	cmp	r3, #12
 8005c66:	d801      	bhi.n	8005c6c <post_process+0xec>
  		strcpy(suit, "Hearts");
 8005c68:	4947      	ldr	r1, [pc, #284]	@ (8005d88 <post_process+0x208>)
 8005c6a:	e7dd      	b.n	8005c28 <post_process+0xa8>
  	} else if (index >= 41 && index <= 53) {
 8005c6c:	f1a4 0329 	sub.w	r3, r4, #41	@ 0x29
 8005c70:	2b0c      	cmp	r3, #12
 8005c72:	d806      	bhi.n	8005c82 <post_process+0x102>
  		strcpy(suit, "Spades");
 8005c74:	4945      	ldr	r1, [pc, #276]	@ (8005d8c <post_process+0x20c>)
 8005c76:	a834      	add	r0, sp, #208	@ 0xd0
 8005c78:	f006 fedf 	bl	800ca3a <strcpy>
  		offset = -2;
 8005c7c:	f06f 0301 	mvn.w	r3, #1
 8005c80:	e7d7      	b.n	8005c32 <post_process+0xb2>
  	} else if (index == 0) {
 8005c82:	b94c      	cbnz	r4, 8005c98 <post_process+0x118>
  	  lcd_clear();
 8005c84:	f7fa ff0e 	bl	8000aa4 <lcd_clear>
  	  lcd_send_string("Black Joker");
 8005c88:	4841      	ldr	r0, [pc, #260]	@ (8005d90 <post_process+0x210>)
    	lcd_send_string("Red Joker");
 8005c8a:	f7fa feb7 	bl	80009fc <lcd_send_string>
}
 8005c8e:	2000      	movs	r0, #0
 8005c90:	b067      	add	sp, #412	@ 0x19c
 8005c92:	ecbd 8b02 	vpop	{d8}
 8005c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
  		lcd_clear();
 8005c98:	f7fa ff04 	bl	8000aa4 <lcd_clear>
    	lcd_send_string("Red Joker");
 8005c9c:	483d      	ldr	r0, [pc, #244]	@ (8005d94 <post_process+0x214>)
 8005c9e:	e7f4      	b.n	8005c8a <post_process+0x10a>
  		strcpy(rank, "Two");
 8005ca0:	493d      	ldr	r1, [pc, #244]	@ (8005d98 <post_process+0x218>)
  		strcpy(rank, "Ten");
 8005ca2:	a81b      	add	r0, sp, #108	@ 0x6c
 8005ca4:	f006 fec9 	bl	800ca3a <strcpy>
  	sprintf(buffer, rank);
 8005ca8:	a91b      	add	r1, sp, #108	@ 0x6c
 8005caa:	a802      	add	r0, sp, #8
 8005cac:	f006 fdaa 	bl	800c804 <siprintf>
  	HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8005cb0:	a802      	add	r0, sp, #8
 8005cb2:	f7fa fb65 	bl	8000380 <strlen>
 8005cb6:	230a      	movs	r3, #10
 8005cb8:	b282      	uxth	r2, r0
 8005cba:	a902      	add	r1, sp, #8
 8005cbc:	482c      	ldr	r0, [pc, #176]	@ (8005d70 <post_process+0x1f0>)
 8005cbe:	f7ff fd62 	bl	8005786 <HAL_UART_Transmit>
  	HAL_Delay(20);
 8005cc2:	2014      	movs	r0, #20
 8005cc4:	f7fb fc46 	bl	8001554 <HAL_Delay>
  	sprintf(buffer, suit);
 8005cc8:	a934      	add	r1, sp, #208	@ 0xd0
 8005cca:	a802      	add	r0, sp, #8
 8005ccc:	f006 fd9a 	bl	800c804 <siprintf>
  	HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8005cd0:	a802      	add	r0, sp, #8
 8005cd2:	f7fa fb55 	bl	8000380 <strlen>
 8005cd6:	230a      	movs	r3, #10
 8005cd8:	b282      	uxth	r2, r0
 8005cda:	a902      	add	r1, sp, #8
 8005cdc:	4824      	ldr	r0, [pc, #144]	@ (8005d70 <post_process+0x1f0>)
 8005cde:	f7ff fd52 	bl	8005786 <HAL_UART_Transmit>
  	HAL_Delay(20);
 8005ce2:	2014      	movs	r0, #20
 8005ce4:	f7fb fc36 	bl	8001554 <HAL_Delay>
  	char temp1[100] = "";
 8005ce8:	2100      	movs	r1, #0
 8005cea:	2260      	movs	r2, #96	@ 0x60
 8005cec:	a84e      	add	r0, sp, #312	@ 0x138
 8005cee:	914d      	str	r1, [sp, #308]	@ 0x134
 8005cf0:	f006 fe05 	bl	800c8fe <memset>
  	strcat(temp1, rank);
 8005cf4:	a91b      	add	r1, sp, #108	@ 0x6c
 8005cf6:	a84d      	add	r0, sp, #308	@ 0x134
 8005cf8:	f006 fe09 	bl	800c90e <strcat>
  	strcat(temp1, " of ");
 8005cfc:	4927      	ldr	r1, [pc, #156]	@ (8005d9c <post_process+0x21c>)
 8005cfe:	a84d      	add	r0, sp, #308	@ 0x134
 8005d00:	f006 fe05 	bl	800c90e <strcat>
  	strcat(temp1, suit);
 8005d04:	a934      	add	r1, sp, #208	@ 0xd0
 8005d06:	a84d      	add	r0, sp, #308	@ 0x134
 8005d08:	f006 fe01 	bl	800c90e <strcat>
	lcd_clear();
 8005d0c:	f7fa feca 	bl	8000aa4 <lcd_clear>
	lcd_send_string(temp1);
 8005d10:	a84d      	add	r0, sp, #308	@ 0x134
 8005d12:	f7fa fe73 	bl	80009fc <lcd_send_string>
  	sprintf(buffer, temp1);
 8005d16:	a94d      	add	r1, sp, #308	@ 0x134
 8005d18:	a802      	add	r0, sp, #8
 8005d1a:	f006 fd73 	bl	800c804 <siprintf>
  	HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8005d1e:	a802      	add	r0, sp, #8
 8005d20:	f7fa fb2e 	bl	8000380 <strlen>
 8005d24:	230a      	movs	r3, #10
 8005d26:	b282      	uxth	r2, r0
 8005d28:	a902      	add	r1, sp, #8
 8005d2a:	4811      	ldr	r0, [pc, #68]	@ (8005d70 <post_process+0x1f0>)
 8005d2c:	f7ff fd2b 	bl	8005786 <HAL_UART_Transmit>
  	HAL_Delay(20);
 8005d30:	2014      	movs	r0, #20
 8005d32:	f7fb fc0f 	bl	8001554 <HAL_Delay>
  return 0;
 8005d36:	e7aa      	b.n	8005c8e <post_process+0x10e>
  		strcpy(rank, "Three");
 8005d38:	4919      	ldr	r1, [pc, #100]	@ (8005da0 <post_process+0x220>)
 8005d3a:	e7b2      	b.n	8005ca2 <post_process+0x122>
  		strcpy(rank, "Four");
 8005d3c:	4919      	ldr	r1, [pc, #100]	@ (8005da4 <post_process+0x224>)
 8005d3e:	e7b0      	b.n	8005ca2 <post_process+0x122>
  		strcpy(rank, "Five");
 8005d40:	4919      	ldr	r1, [pc, #100]	@ (8005da8 <post_process+0x228>)
 8005d42:	e7ae      	b.n	8005ca2 <post_process+0x122>
  		strcpy(rank, "Six");
 8005d44:	4919      	ldr	r1, [pc, #100]	@ (8005dac <post_process+0x22c>)
 8005d46:	e7ac      	b.n	8005ca2 <post_process+0x122>
  		strcpy(rank, "Seven");
 8005d48:	4919      	ldr	r1, [pc, #100]	@ (8005db0 <post_process+0x230>)
 8005d4a:	e7aa      	b.n	8005ca2 <post_process+0x122>
  		strcpy(rank, "Eight");
 8005d4c:	4919      	ldr	r1, [pc, #100]	@ (8005db4 <post_process+0x234>)
 8005d4e:	e7a8      	b.n	8005ca2 <post_process+0x122>
  		strcpy(rank, "Nine");
 8005d50:	4919      	ldr	r1, [pc, #100]	@ (8005db8 <post_process+0x238>)
 8005d52:	e7a6      	b.n	8005ca2 <post_process+0x122>
  		strcpy(rank, "Ace");
 8005d54:	4919      	ldr	r1, [pc, #100]	@ (8005dbc <post_process+0x23c>)
 8005d56:	e7a4      	b.n	8005ca2 <post_process+0x122>
  		strcpy(rank, "Jack");
 8005d58:	4919      	ldr	r1, [pc, #100]	@ (8005dc0 <post_process+0x240>)
 8005d5a:	e7a2      	b.n	8005ca2 <post_process+0x122>
  		strcpy(rank, "King");
 8005d5c:	4919      	ldr	r1, [pc, #100]	@ (8005dc4 <post_process+0x244>)
 8005d5e:	e7a0      	b.n	8005ca2 <post_process+0x122>
  		strcpy(rank, "Queen");
 8005d60:	4919      	ldr	r1, [pc, #100]	@ (8005dc8 <post_process+0x248>)
 8005d62:	e79e      	b.n	8005ca2 <post_process+0x122>
  		strcpy(rank, "Ten");
 8005d64:	4919      	ldr	r1, [pc, #100]	@ (8005dcc <post_process+0x24c>)
 8005d66:	e79c      	b.n	8005ca2 <post_process+0x122>
 8005d68:	24039004 	.word	0x24039004
 8005d6c:	0800ed5c 	.word	0x0800ed5c
 8005d70:	24008d48 	.word	0x24008d48
 8005d74:	00000000 	.word	0x00000000
 8005d78:	0800ed72 	.word	0x0800ed72
 8005d7c:	0800ed7d 	.word	0x0800ed7d
 8005d80:	0800ed8a 	.word	0x0800ed8a
 8005d84:	0800ed90 	.word	0x0800ed90
 8005d88:	0800ed99 	.word	0x0800ed99
 8005d8c:	0800eda0 	.word	0x0800eda0
 8005d90:	0800eda7 	.word	0x0800eda7
 8005d94:	0800edb3 	.word	0x0800edb3
 8005d98:	0800edbd 	.word	0x0800edbd
 8005d9c:	0800edfe 	.word	0x0800edfe
 8005da0:	0800edc1 	.word	0x0800edc1
 8005da4:	0800edc7 	.word	0x0800edc7
 8005da8:	0800edcc 	.word	0x0800edcc
 8005dac:	0800edd1 	.word	0x0800edd1
 8005db0:	0800edd5 	.word	0x0800edd5
 8005db4:	0800eddb 	.word	0x0800eddb
 8005db8:	0800ede1 	.word	0x0800ede1
 8005dbc:	0800ede6 	.word	0x0800ede6
 8005dc0:	0800edea 	.word	0x0800edea
 8005dc4:	0800edef 	.word	0x0800edef
 8005dc8:	0800edf4 	.word	0x0800edf4
 8005dcc:	0800edfa 	.word	0x0800edfa

08005dd0 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 8005dd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  err = ai_network_create_and_init(&network, act_addr, NULL);
 8005dd2:	4d1a      	ldr	r5, [pc, #104]	@ (8005e3c <MX_X_CUBE_AI_Init+0x6c>)
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	491a      	ldr	r1, [pc, #104]	@ (8005e40 <MX_X_CUBE_AI_Init+0x70>)
 8005dd8:	4628      	mov	r0, r5
 8005dda:	f000 fa0f 	bl	80061fc <ai_network_create_and_init>
  if (err.type != AI_ERROR_NONE) {
 8005dde:	f010 04ff 	ands.w	r4, r0, #255	@ 0xff
 8005de2:	d015      	beq.n	8005e10 <MX_X_CUBE_AI_Init+0x40>
    {sprintf(buffer, "TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8005de4:	f3c0 2017 	ubfx	r0, r0, #8, #24
 8005de8:	4623      	mov	r3, r4
 8005dea:	4a16      	ldr	r2, [pc, #88]	@ (8005e44 <MX_X_CUBE_AI_Init+0x74>)
 8005dec:	4916      	ldr	r1, [pc, #88]	@ (8005e48 <MX_X_CUBE_AI_Init+0x78>)
 8005dee:	9000      	str	r0, [sp, #0]
 8005df0:	4816      	ldr	r0, [pc, #88]	@ (8005e4c <MX_X_CUBE_AI_Init+0x7c>)
 8005df2:	f006 fd07 	bl	800c804 <siprintf>
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8005df6:	4815      	ldr	r0, [pc, #84]	@ (8005e4c <MX_X_CUBE_AI_Init+0x7c>)
 8005df8:	f7fa fac2 	bl	8000380 <strlen>
 8005dfc:	230a      	movs	r3, #10
 8005dfe:	b282      	uxth	r2, r0
 8005e00:	4912      	ldr	r1, [pc, #72]	@ (8005e4c <MX_X_CUBE_AI_Init+0x7c>)
 8005e02:	4813      	ldr	r0, [pc, #76]	@ (8005e50 <MX_X_CUBE_AI_Init+0x80>)
 8005e04:	f7ff fcbf 	bl	8005786 <HAL_UART_Transmit>
  HAL_Delay(20);
 8005e08:	2014      	movs	r0, #20
 8005e0a:	f7fb fba3 	bl	8001554 <HAL_Delay>
  do {} while (1);
 8005e0e:	e7fe      	b.n	8005e0e <MX_X_CUBE_AI_Init+0x3e>
  ai_input = ai_network_inputs_get(network, NULL);
 8005e10:	4621      	mov	r1, r4
 8005e12:	6828      	ldr	r0, [r5, #0]
 8005e14:	f000 f8f2 	bl	8005ffc <ai_network_inputs_get>
 8005e18:	4b0e      	ldr	r3, [pc, #56]	@ (8005e54 <MX_X_CUBE_AI_Init+0x84>)
  ai_output = ai_network_outputs_get(network, NULL);
 8005e1a:	4621      	mov	r1, r4
  ai_input = ai_network_inputs_get(network, NULL);
 8005e1c:	6018      	str	r0, [r3, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 8005e1e:	6828      	ldr	r0, [r5, #0]
 8005e20:	f000 f8f6 	bl	8006010 <ai_network_outputs_get>
 8005e24:	4b0c      	ldr	r3, [pc, #48]	@ (8005e58 <MX_X_CUBE_AI_Init+0x88>)
	  data_out_1[i] = 0;
 8005e26:	f44f 7258 	mov.w	r2, #864	@ 0x360
 8005e2a:	4621      	mov	r1, r4
  ai_output = ai_network_outputs_get(network, NULL);
 8005e2c:	6018      	str	r0, [r3, #0]
	  data_out_1[i] = 0;
 8005e2e:	480b      	ldr	r0, [pc, #44]	@ (8005e5c <MX_X_CUBE_AI_Init+0x8c>)
    /* USER CODE BEGIN 5 */

  ai_boostrap(data_activations0);
    /* USER CODE END 5 */
}
 8005e30:	b003      	add	sp, #12
 8005e32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  data_out_1[i] = 0;
 8005e36:	f006 bd62 	b.w	800c8fe <memset>
 8005e3a:	bf00      	nop
 8005e3c:	24008f80 	.word	0x24008f80
 8005e40:	24000018 	.word	0x24000018
 8005e44:	0800ee03 	.word	0x0800ee03
 8005e48:	0800ee1e 	.word	0x0800ee1e
 8005e4c:	24038fa0 	.word	0x24038fa0
 8005e50:	24008d48 	.word	0x24008d48
 8005e54:	24008f7c 	.word	0x24008f7c
 8005e58:	24008f78 	.word	0x24008f78
 8005e5c:	24039004 	.word	0x24039004

08005e60 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 8005e60:	b530      	push	{r4, r5, lr}
    /* USER CODE BEGIN 6 */
  int res = -1;
  extern UART_HandleTypeDef huart4;
  char buffer [100];
  sprintf(buffer, "AI Process Starts, AI_NETWORK_IN_NUM: %d, data_out_size: %d, data_in_size: %d\r\n", AI_NETWORK_IN_NUM, sizeof(data_out_1), sizeof(data_in_1));
 8005e62:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
{
 8005e66:	b09d      	sub	sp, #116	@ 0x74
  sprintf(buffer, "AI Process Starts, AI_NETWORK_IN_NUM: %d, data_out_size: %d, data_in_size: %d\r\n", AI_NETWORK_IN_NUM, sizeof(data_out_1), sizeof(data_in_1));
 8005e68:	2201      	movs	r2, #1
 8005e6a:	494d      	ldr	r1, [pc, #308]	@ (8005fa0 <MX_X_CUBE_AI_Process+0x140>)
 8005e6c:	9300      	str	r3, [sp, #0]
 8005e6e:	a803      	add	r0, sp, #12
 8005e70:	23d8      	movs	r3, #216	@ 0xd8
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
  HAL_Delay(20);
  if (network) {
 8005e72:	4c4c      	ldr	r4, [pc, #304]	@ (8005fa4 <MX_X_CUBE_AI_Process+0x144>)
  sprintf(buffer, "AI Process Starts, AI_NETWORK_IN_NUM: %d, data_out_size: %d, data_in_size: %d\r\n", AI_NETWORK_IN_NUM, sizeof(data_out_1), sizeof(data_in_1));
 8005e74:	f006 fcc6 	bl	800c804 <siprintf>
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8005e78:	a803      	add	r0, sp, #12
 8005e7a:	f7fa fa81 	bl	8000380 <strlen>
 8005e7e:	230a      	movs	r3, #10
 8005e80:	b282      	uxth	r2, r0
 8005e82:	a903      	add	r1, sp, #12
 8005e84:	4848      	ldr	r0, [pc, #288]	@ (8005fa8 <MX_X_CUBE_AI_Process+0x148>)
 8005e86:	f7ff fc7e 	bl	8005786 <HAL_UART_Transmit>
  HAL_Delay(20);
 8005e8a:	2014      	movs	r0, #20
 8005e8c:	f7fb fb62 	bl	8001554 <HAL_Delay>
  if (network) {
 8005e90:	6823      	ldr	r3, [r4, #0]
 8005e92:	b98b      	cbnz	r3, 8005eb8 <MX_X_CUBE_AI_Process+0x58>
	  	HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
	  	HAL_Delay(20);
//      }
  }
  if (res) {
	  sprintf(buffer, "AI Failed!\r\n");
 8005e94:	4945      	ldr	r1, [pc, #276]	@ (8005fac <MX_X_CUBE_AI_Process+0x14c>)
 8005e96:	a803      	add	r0, sp, #12
 8005e98:	f006 fdcf 	bl	800ca3a <strcpy>
	  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8005e9c:	a803      	add	r0, sp, #12
 8005e9e:	f7fa fa6f 	bl	8000380 <strlen>
 8005ea2:	230a      	movs	r3, #10
 8005ea4:	b282      	uxth	r2, r0
 8005ea6:	a903      	add	r1, sp, #12
 8005ea8:	483f      	ldr	r0, [pc, #252]	@ (8005fa8 <MX_X_CUBE_AI_Process+0x148>)
 8005eaa:	f7ff fc6c 	bl	8005786 <HAL_UART_Transmit>
	  HAL_Delay(20);
 8005eae:	2014      	movs	r0, #20
 8005eb0:	f7fb fb50 	bl	8001554 <HAL_Delay>
  }
    /* USER CODE END 6 */
}
 8005eb4:	b01d      	add	sp, #116	@ 0x74
 8005eb6:	bd30      	pop	{r4, r5, pc}
      res = acquire_and_process_data();
 8005eb8:	f7ff fdc4 	bl	8005a44 <acquire_and_process_data>
	  sprintf(buffer, "data acquired passed\r\n");
 8005ebc:	493c      	ldr	r1, [pc, #240]	@ (8005fb0 <MX_X_CUBE_AI_Process+0x150>)
      res = acquire_and_process_data();
 8005ebe:	4605      	mov	r5, r0
	  sprintf(buffer, "data acquired passed\r\n");
 8005ec0:	a803      	add	r0, sp, #12
 8005ec2:	f006 fdba 	bl	800ca3a <strcpy>
	  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8005ec6:	a803      	add	r0, sp, #12
 8005ec8:	f7fa fa5a 	bl	8000380 <strlen>
 8005ecc:	230a      	movs	r3, #10
 8005ece:	b282      	uxth	r2, r0
 8005ed0:	a903      	add	r1, sp, #12
 8005ed2:	4835      	ldr	r0, [pc, #212]	@ (8005fa8 <MX_X_CUBE_AI_Process+0x148>)
 8005ed4:	f7ff fc57 	bl	8005786 <HAL_UART_Transmit>
	  HAL_Delay(20);
 8005ed8:	2014      	movs	r0, #20
 8005eda:	f7fb fb3b 	bl	8001554 <HAL_Delay>
      if (res == 0) {
 8005ede:	2d00      	cmp	r5, #0
 8005ee0:	d146      	bne.n	8005f70 <MX_X_CUBE_AI_Process+0x110>
  ai_input[0].data = AI_HANDLE_PTR(in_data);
 8005ee2:	4b34      	ldr	r3, [pc, #208]	@ (8005fb4 <MX_X_CUBE_AI_Process+0x154>)
  batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 8005ee4:	6820      	ldr	r0, [r4, #0]
  ai_input[0].data = AI_HANDLE_PTR(in_data);
 8005ee6:	6819      	ldr	r1, [r3, #0]
 8005ee8:	4b33      	ldr	r3, [pc, #204]	@ (8005fb8 <MX_X_CUBE_AI_Process+0x158>)
 8005eea:	604b      	str	r3, [r1, #4]
  ai_output[0].data = AI_HANDLE_PTR(out_data);
 8005eec:	4b33      	ldr	r3, [pc, #204]	@ (8005fbc <MX_X_CUBE_AI_Process+0x15c>)
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	4b33      	ldr	r3, [pc, #204]	@ (8005fc0 <MX_X_CUBE_AI_Process+0x160>)
 8005ef2:	6053      	str	r3, [r2, #4]
  batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 8005ef4:	f000 f9c9 	bl	800628a <ai_network_run>
  if (batch != 1) {
 8005ef8:	2801      	cmp	r0, #1
  batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 8005efa:	4602      	mov	r2, r0
  if (batch != 1) {
 8005efc:	d028      	beq.n	8005f50 <MX_X_CUBE_AI_Process+0xf0>
	  	sprintf(buffer, "Batch Mismatch! Batch number rn is: %d",batch);
 8005efe:	4931      	ldr	r1, [pc, #196]	@ (8005fc4 <MX_X_CUBE_AI_Process+0x164>)
 8005f00:	4831      	ldr	r0, [pc, #196]	@ (8005fc8 <MX_X_CUBE_AI_Process+0x168>)
 8005f02:	f006 fc7f 	bl	800c804 <siprintf>
	  	HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8005f06:	4830      	ldr	r0, [pc, #192]	@ (8005fc8 <MX_X_CUBE_AI_Process+0x168>)
 8005f08:	f7fa fa3a 	bl	8000380 <strlen>
 8005f0c:	230a      	movs	r3, #10
 8005f0e:	b282      	uxth	r2, r0
 8005f10:	492d      	ldr	r1, [pc, #180]	@ (8005fc8 <MX_X_CUBE_AI_Process+0x168>)
 8005f12:	4825      	ldr	r0, [pc, #148]	@ (8005fa8 <MX_X_CUBE_AI_Process+0x148>)
 8005f14:	f7ff fc37 	bl	8005786 <HAL_UART_Transmit>
	  	HAL_Delay(20);
 8005f18:	2014      	movs	r0, #20
 8005f1a:	f7fb fb1b 	bl	8001554 <HAL_Delay>
    ai_log_err(ai_network_get_error(network),
 8005f1e:	6820      	ldr	r0, [r4, #0]
 8005f20:	f000 f85c 	bl	8005fdc <ai_network_get_error>
    {sprintf(buffer, "TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8005f24:	f3c0 2317 	ubfx	r3, r0, #8, #24
 8005f28:	4a28      	ldr	r2, [pc, #160]	@ (8005fcc <MX_X_CUBE_AI_Process+0x16c>)
 8005f2a:	4929      	ldr	r1, [pc, #164]	@ (8005fd0 <MX_X_CUBE_AI_Process+0x170>)
 8005f2c:	9300      	str	r3, [sp, #0]
 8005f2e:	b2c3      	uxtb	r3, r0
 8005f30:	4825      	ldr	r0, [pc, #148]	@ (8005fc8 <MX_X_CUBE_AI_Process+0x168>)
 8005f32:	f006 fc67 	bl	800c804 <siprintf>
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8005f36:	4824      	ldr	r0, [pc, #144]	@ (8005fc8 <MX_X_CUBE_AI_Process+0x168>)
 8005f38:	f7fa fa22 	bl	8000380 <strlen>
 8005f3c:	230a      	movs	r3, #10
 8005f3e:	b282      	uxth	r2, r0
 8005f40:	4921      	ldr	r1, [pc, #132]	@ (8005fc8 <MX_X_CUBE_AI_Process+0x168>)
 8005f42:	4819      	ldr	r0, [pc, #100]	@ (8005fa8 <MX_X_CUBE_AI_Process+0x148>)
 8005f44:	f7ff fc1f 	bl	8005786 <HAL_UART_Transmit>
  HAL_Delay(20);
 8005f48:	2014      	movs	r0, #20
 8005f4a:	f7fb fb03 	bl	8001554 <HAL_Delay>
  do {} while (1);
 8005f4e:	e7fe      	b.n	8005f4e <MX_X_CUBE_AI_Process+0xee>
  	  	sprintf(buffer, "ai_run passed:\r\n");
 8005f50:	4920      	ldr	r1, [pc, #128]	@ (8005fd4 <MX_X_CUBE_AI_Process+0x174>)
 8005f52:	a803      	add	r0, sp, #12
 8005f54:	f006 fd71 	bl	800ca3a <strcpy>
  	  	HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8005f58:	a803      	add	r0, sp, #12
 8005f5a:	f7fa fa11 	bl	8000380 <strlen>
 8005f5e:	230a      	movs	r3, #10
 8005f60:	b282      	uxth	r2, r0
 8005f62:	a903      	add	r1, sp, #12
 8005f64:	4810      	ldr	r0, [pc, #64]	@ (8005fa8 <MX_X_CUBE_AI_Process+0x148>)
 8005f66:	f7ff fc0e 	bl	8005786 <HAL_UART_Transmit>
  	  	HAL_Delay(20);
 8005f6a:	2014      	movs	r0, #20
 8005f6c:	f7fb faf2 	bl	8001554 <HAL_Delay>
        res = post_process();
 8005f70:	f7ff fe06 	bl	8005b80 <post_process>
	  	sprintf(buffer, "post process passed\r\n");
 8005f74:	4918      	ldr	r1, [pc, #96]	@ (8005fd8 <MX_X_CUBE_AI_Process+0x178>)
        res = post_process();
 8005f76:	4604      	mov	r4, r0
	  	sprintf(buffer, "post process passed\r\n");
 8005f78:	a803      	add	r0, sp, #12
 8005f7a:	f006 fd5e 	bl	800ca3a <strcpy>
	  	HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8005f7e:	a803      	add	r0, sp, #12
 8005f80:	f7fa f9fe 	bl	8000380 <strlen>
 8005f84:	230a      	movs	r3, #10
 8005f86:	b282      	uxth	r2, r0
 8005f88:	a903      	add	r1, sp, #12
 8005f8a:	4807      	ldr	r0, [pc, #28]	@ (8005fa8 <MX_X_CUBE_AI_Process+0x148>)
 8005f8c:	f7ff fbfb 	bl	8005786 <HAL_UART_Transmit>
	  	HAL_Delay(20);
 8005f90:	2014      	movs	r0, #20
 8005f92:	f7fb fadf 	bl	8001554 <HAL_Delay>
  if (res) {
 8005f96:	2c00      	cmp	r4, #0
 8005f98:	f47f af7c 	bne.w	8005e94 <MX_X_CUBE_AI_Process+0x34>
 8005f9c:	e78a      	b.n	8005eb4 <MX_X_CUBE_AI_Process+0x54>
 8005f9e:	bf00      	nop
 8005fa0:	0800ee50 	.word	0x0800ee50
 8005fa4:	24008f80 	.word	0x24008f80
 8005fa8:	24008d48 	.word	0x24008d48
 8005fac:	0800eea0 	.word	0x0800eea0
 8005fb0:	0800eead 	.word	0x0800eead
 8005fb4:	24008f7c 	.word	0x24008f7c
 8005fb8:	240390dc 	.word	0x240390dc
 8005fbc:	24008f78 	.word	0x24008f78
 8005fc0:	24039004 	.word	0x24039004
 8005fc4:	0800eec4 	.word	0x0800eec4
 8005fc8:	24038fa0 	.word	0x24038fa0
 8005fcc:	0800eeeb 	.word	0x0800eeeb
 8005fd0:	0800ee1e 	.word	0x0800ee1e
 8005fd4:	0800eefa 	.word	0x0800eefa
 8005fd8:	0800ef0b 	.word	0x0800ef0b

08005fdc <ai_network_get_error>:
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 8005fdc:	f000 ba8c 	b.w	80064f8 <ai_platform_network_get_error>

08005fe0 <ai_network_create>:
}

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8005fe0:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 8005fe2:	2305      	movs	r3, #5
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	e9cd 3200 	strd	r3, r2, [sp]
 8005fea:	2301      	movs	r3, #1
 8005fec:	4a02      	ldr	r2, [pc, #8]	@ (8005ff8 <ai_network_create+0x18>)
 8005fee:	f000 fea9 	bl	8006d44 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8005ff2:	b003      	add	sp, #12
 8005ff4:	f85d fb04 	ldr.w	pc, [sp], #4
 8005ff8:	2400001c 	.word	0x2400001c

08005ffc <ai_network_inputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 8005ffc:	b910      	cbnz	r0, 8006004 <ai_network_inputs_get+0x8>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8005ffe:	4802      	ldr	r0, [pc, #8]	@ (8006008 <ai_network_inputs_get+0xc>)
 8006000:	4b02      	ldr	r3, [pc, #8]	@ (800600c <ai_network_inputs_get+0x10>)
 8006002:	6003      	str	r3, [r0, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8006004:	f000 bb8a 	b.w	800671c <ai_platform_inputs_get>
 8006008:	2400001c 	.word	0x2400001c
 800600c:	a1c00100 	.word	0xa1c00100

08006010 <ai_network_outputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 8006010:	b910      	cbnz	r0, 8006018 <ai_network_outputs_get+0x8>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8006012:	4802      	ldr	r0, [pc, #8]	@ (800601c <ai_network_outputs_get+0xc>)
 8006014:	4b02      	ldr	r3, [pc, #8]	@ (8006020 <ai_network_outputs_get+0x10>)
 8006016:	6003      	str	r3, [r0, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8006018:	f000 bd0c 	b.w	8006a34 <ai_platform_outputs_get>
 800601c:	2400001c 	.word	0x2400001c
 8006020:	a1c00100 	.word	0xa1c00100

08006024 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8006024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006028:	4607      	mov	r7, r0
 800602a:	4688      	mov	r8, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800602c:	f001 f864 	bl	80070f8 <ai_platform_network_init>
  if (!net_ctx) return false;
 8006030:	4604      	mov	r4, r0
 8006032:	2800      	cmp	r0, #0
 8006034:	f000 80a4 	beq.w	8006180 <ai_network_init+0x15c>
  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 8006038:	4e58      	ldr	r6, [pc, #352]	@ (800619c <ai_network_init+0x178>)
 800603a:	4642      	mov	r2, r8
 800603c:	2101      	movs	r1, #1
 800603e:	4630      	mov	r0, r6
 8006040:	f000 f990 	bl	8006364 <ai_platform_get_weights_map>
 8006044:	4605      	mov	r5, r0
 8006046:	2800      	cmp	r0, #0
 8006048:	f000 809c 	beq.w	8006184 <ai_network_init+0x160>
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800604c:	4a54      	ldr	r2, [pc, #336]	@ (80061a0 <ai_network_init+0x17c>)
 800604e:	6813      	ldr	r3, [r2, #0]
 8006050:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006054:	6013      	str	r3, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8006056:	6833      	ldr	r3, [r6, #0]
    conv2d_1_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8006058:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800605c:	4a51      	ldr	r2, [pc, #324]	@ (80061a4 <ai_network_init+0x180>)
    gemm_7_bias_array.data = AI_PTR(g_network_weights_map[0] + 378396);
 800605e:	f503 26b8 	add.w	r6, r3, #376832	@ 0x5c000
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8006062:	6811      	ldr	r1, [r2, #0]
 8006064:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8006068:	6011      	str	r1, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 452);
 800606a:	f503 71e2 	add.w	r1, r3, #452	@ 0x1c4
    conv2d_1_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 452);
 800606e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8006072:	4a4d      	ldr	r2, [pc, #308]	@ (80061a8 <ai_network_init+0x184>)
 8006074:	6811      	ldr	r1, [r2, #0]
 8006076:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800607a:	6011      	str	r1, [r2, #0]
    conv2d_3_weights_array.data = AI_PTR(g_network_weights_map[0] + 476);
 800607c:	f503 71ee 	add.w	r1, r3, #476	@ 0x1dc
    conv2d_3_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 476);
 8006080:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8006084:	4a49      	ldr	r2, [pc, #292]	@ (80061ac <ai_network_init+0x188>)
 8006086:	6811      	ldr	r1, [r2, #0]
 8006088:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800608c:	6011      	str	r1, [r2, #0]
    conv2d_3_bias_array.data = AI_PTR(g_network_weights_map[0] + 2012);
 800608e:	f203 71dc 	addw	r1, r3, #2012	@ 0x7dc
    conv2d_3_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 2012);
 8006092:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_7_weights_array.format |= AI_FMT_FLAG_CONST;
 8006096:	4a46      	ldr	r2, [pc, #280]	@ (80061b0 <ai_network_init+0x18c>)
 8006098:	6811      	ldr	r1, [r2, #0]
 800609a:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800609e:	6011      	str	r1, [r2, #0]
    gemm_7_weights_array.data = AI_PTR(g_network_weights_map[0] + 2076);
 80060a0:	f603 011c 	addw	r1, r3, #2076	@ 0x81c
    gemm_8_bias_array.data = AI_PTR(g_network_weights_map[0] + 385356);
 80060a4:	f503 23bc 	add.w	r3, r3, #385024	@ 0x5e000
    gemm_7_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 2076);
 80060a8:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_7_bias_array.format |= AI_FMT_FLAG_CONST;
 80060ac:	4a41      	ldr	r2, [pc, #260]	@ (80061b4 <ai_network_init+0x190>)
    gemm_8_bias_array.data = AI_PTR(g_network_weights_map[0] + 385356);
 80060ae:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
    gemm_7_bias_array.format |= AI_FMT_FLAG_CONST;
 80060b2:	6811      	ldr	r1, [r2, #0]
 80060b4:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80060b8:	6011      	str	r1, [r2, #0]
    gemm_7_bias_array.data = AI_PTR(g_network_weights_map[0] + 378396);
 80060ba:	f206 611c 	addw	r1, r6, #1564	@ 0x61c
    gemm_8_weights_array.data = AI_PTR(g_network_weights_map[0] + 378876);
 80060be:	f206 76fc 	addw	r6, r6, #2044	@ 0x7fc
    gemm_7_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 378396);
 80060c2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_8_weights_array.format |= AI_FMT_FLAG_CONST;
 80060c6:	4a3c      	ldr	r2, [pc, #240]	@ (80061b8 <ai_network_init+0x194>)
 80060c8:	6811      	ldr	r1, [r2, #0]
 80060ca:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
    gemm_8_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 378876);
 80060ce:	e9c2 6602 	strd	r6, r6, [r2, #8]
    gemm_8_weights_array.format |= AI_FMT_FLAG_CONST;
 80060d2:	6011      	str	r1, [r2, #0]
    gemm_8_bias_array.format |= AI_FMT_FLAG_CONST;
 80060d4:	4a39      	ldr	r2, [pc, #228]	@ (80061bc <ai_network_init+0x198>)
 80060d6:	6811      	ldr	r1, [r2, #0]
 80060d8:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80060dc:	6011      	str	r1, [r2, #0]
    gemm_8_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 385356);
 80060de:	e9c2 3302 	strd	r3, r3, [r2, #8]
  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 80060e2:	f8df 9114 	ldr.w	r9, [pc, #276]	@ 80061f8 <ai_network_init+0x1d4>
 80060e6:	4642      	mov	r2, r8
 80060e8:	2101      	movs	r1, #1
 80060ea:	4648      	mov	r0, r9
 80060ec:	f000 f992 	bl	8006414 <ai_platform_get_activations_map>
 80060f0:	4606      	mov	r6, r0
 80060f2:	2800      	cmp	r0, #0
 80060f4:	d04c      	beq.n	8006190 <ai_network_init+0x16c>
    serving_default_input_10_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80060f6:	f8d9 3000 	ldr.w	r3, [r9]
 80060fa:	4a31      	ldr	r2, [pc, #196]	@ (80061c0 <ai_network_init+0x19c>)
    conv2d_1_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 49156);
 80060fc:	4931      	ldr	r1, [pc, #196]	@ (80061c4 <ai_network_init+0x1a0>)
    serving_default_input_10_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80060fe:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conversion_0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8006102:	4a31      	ldr	r2, [pc, #196]	@ (80061c8 <ai_network_init+0x1a4>)
    conversion_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8006104:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_1_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 49156);
 8006108:	f503 4240 	add.w	r2, r3, #49152	@ 0xc000
 800610c:	3204      	adds	r2, #4
    conv2d_1_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 49156);
 800610e:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_1_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 50440);
 8006112:	f503 4245 	add.w	r2, r3, #50432	@ 0xc500
 8006116:	492d      	ldr	r1, [pc, #180]	@ (80061cc <ai_network_init+0x1a8>)
 8006118:	3208      	adds	r2, #8
    conv2d_1_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 50440);
 800611a:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_1_output_array.data = AI_PTR(g_network_activations_map[0] + 51184);
 800611e:	f503 4247 	add.w	r2, r3, #50944	@ 0xc700
 8006122:	492b      	ldr	r1, [pc, #172]	@ (80061d0 <ai_network_init+0x1ac>)
 8006124:	32f0      	adds	r2, #240	@ 0xf0
    conv2d_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 51184);
 8006126:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_3_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800612a:	4a2a      	ldr	r2, [pc, #168]	@ (80061d4 <ai_network_init+0x1b0>)
    conv2d_3_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 3680);
 800612c:	f503 6166 	add.w	r1, r3, #3680	@ 0xe60
    conv2d_3_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8006130:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_3_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 3680);
 8006134:	4a28      	ldr	r2, [pc, #160]	@ (80061d8 <ai_network_init+0x1b4>)
    conv2d_3_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 3680);
 8006136:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_3_output_array.data = AI_PTR(g_network_activations_map[0] + 4576);
 800613a:	f503 518f 	add.w	r1, r3, #4576	@ 0x11e0
 800613e:	4a27      	ldr	r2, [pc, #156]	@ (80061dc <ai_network_init+0x1b8>)
    conv2d_3_output_array.data_start = AI_PTR(g_network_activations_map[0] + 4576);
 8006140:	e9c2 1102 	strd	r1, r1, [r2, #8]
    transpose_5_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8006144:	4a26      	ldr	r2, [pc, #152]	@ (80061e0 <ai_network_init+0x1bc>)
    gemm_7_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 3136);
 8006146:	f503 6144 	add.w	r1, r3, #3136	@ 0xc40
    transpose_5_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800614a:	e9c2 3302 	strd	r3, r3, [r2, #8]
    gemm_7_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 3136);
 800614e:	4a25      	ldr	r2, [pc, #148]	@ (80061e4 <ai_network_init+0x1c0>)
    gemm_7_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 3136);
 8006150:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_7_output_array.data = AI_PTR(g_network_activations_map[0] + 9408);
 8006154:	f503 5113 	add.w	r1, r3, #9408	@ 0x24c0
 8006158:	4a23      	ldr	r2, [pc, #140]	@ (80061e8 <ai_network_init+0x1c4>)
    gemm_7_output_array.data_start = AI_PTR(g_network_activations_map[0] + 9408);
 800615a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_8_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800615e:	4a23      	ldr	r2, [pc, #140]	@ (80061ec <ai_network_init+0x1c8>)
    gemm_8_output_array.data = AI_PTR(g_network_activations_map[0] + 240);
 8006160:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
    gemm_8_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8006164:	e9c2 3302 	strd	r3, r3, [r2, #8]
    gemm_8_output_array.data = AI_PTR(g_network_activations_map[0] + 240);
 8006168:	4a21      	ldr	r2, [pc, #132]	@ (80061f0 <ai_network_init+0x1cc>)
    gemm_8_output_array.data_start = AI_PTR(g_network_activations_map[0] + 240);
 800616a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conversion_9_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800616e:	4a21      	ldr	r2, [pc, #132]	@ (80061f4 <ai_network_init+0x1d0>)
    conversion_9_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8006170:	e9c2 3302 	strd	r3, r3, [r2, #8]

  ai_bool ok = true;
  ok &= network_configure_weights(net_ctx, params);
  ok &= network_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 8006174:	4638      	mov	r0, r7
 8006176:	f001 f95b 	bl	8007430 <ai_platform_network_post_init>
 800617a:	4030      	ands	r0, r6
 800617c:	4005      	ands	r5, r0
 800617e:	b2e8      	uxtb	r0, r5

  return ok;
}
 8006180:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8006184:	2212      	movs	r2, #18
 8006186:	2130      	movs	r1, #48	@ 0x30
 8006188:	4620      	mov	r0, r4
 800618a:	f000 fac1 	bl	8006710 <ai_platform_network_set_error>
  return false;
 800618e:	e7a8      	b.n	80060e2 <ai_network_init+0xbe>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8006190:	2213      	movs	r2, #19
 8006192:	2130      	movs	r1, #48	@ 0x30
 8006194:	4620      	mov	r0, r4
 8006196:	f000 fabb 	bl	8006710 <ai_platform_network_set_error>
  return false;
 800619a:	e7eb      	b.n	8006174 <ai_network_init+0x150>
 800619c:	2406919c 	.word	0x2406919c
 80061a0:	24000ad8 	.word	0x24000ad8
 80061a4:	24000ac8 	.word	0x24000ac8
 80061a8:	24000ab8 	.word	0x24000ab8
 80061ac:	24000aa8 	.word	0x24000aa8
 80061b0:	24000a98 	.word	0x24000a98
 80061b4:	24000a88 	.word	0x24000a88
 80061b8:	24000a78 	.word	0x24000a78
 80061bc:	24000a68 	.word	0x24000a68
 80061c0:	240009f8 	.word	0x240009f8
 80061c4:	24000a58 	.word	0x24000a58
 80061c8:	240009e8 	.word	0x240009e8
 80061cc:	24000a48 	.word	0x24000a48
 80061d0:	240009d8 	.word	0x240009d8
 80061d4:	24000a38 	.word	0x24000a38
 80061d8:	24000a28 	.word	0x24000a28
 80061dc:	240009c8 	.word	0x240009c8
 80061e0:	240009b8 	.word	0x240009b8
 80061e4:	24000a18 	.word	0x24000a18
 80061e8:	240009a8 	.word	0x240009a8
 80061ec:	24000a08 	.word	0x24000a08
 80061f0:	24000998 	.word	0x24000998
 80061f4:	24000ae8 	.word	0x24000ae8
 80061f8:	240691a0 	.word	0x240691a0

080061fc <ai_network_create_and_init>:
{
 80061fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006200:	4688      	mov	r8, r1
 8006202:	b08f      	sub	sp, #60	@ 0x3c
    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8006204:	2100      	movs	r1, #0
{
 8006206:	4606      	mov	r6, r0
 8006208:	4617      	mov	r7, r2
    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 800620a:	f7ff fee9 	bl	8005fe0 <ai_network_create>
    if (err.type != AI_ERROR_NONE)
 800620e:	f010 09ff 	ands.w	r9, r0, #255	@ 0xff
    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8006212:	4604      	mov	r4, r0
    if (err.type != AI_ERROR_NONE)
 8006214:	d107      	bne.n	8006226 <ai_network_create_and_init+0x2a>
    if (ai_network_data_params_get(&params) != true) {
 8006216:	4668      	mov	r0, sp
 8006218:	f000 f83a 	bl	8006290 <ai_network_data_params_get>
 800621c:	b938      	cbnz	r0, 800622e <ai_network_create_and_init+0x32>
  return ai_platform_network_get_error(network);
 800621e:	6830      	ldr	r0, [r6, #0]
 8006220:	f000 f96a 	bl	80064f8 <ai_platform_network_get_error>
 8006224:	4604      	mov	r4, r0
}
 8006226:	4620      	mov	r0, r4
 8006228:	b00f      	add	sp, #60	@ 0x3c
 800622a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (activations) {
 800622e:	f1b8 0f00 	cmp.w	r8, #0
 8006232:	d11a      	bne.n	800626a <ai_network_create_and_init+0x6e>
    if (weights) {
 8006234:	bb3f      	cbnz	r7, 8006286 <ai_network_create_and_init+0x8a>
    if (ai_network_init(*network, &params) != true) {
 8006236:	4669      	mov	r1, sp
 8006238:	6830      	ldr	r0, [r6, #0]
 800623a:	f7ff fef3 	bl	8006024 <ai_network_init>
 800623e:	b928      	cbnz	r0, 800624c <ai_network_create_and_init+0x50>
  return ai_platform_network_get_error(network);
 8006240:	6830      	ldr	r0, [r6, #0]
 8006242:	f000 f959 	bl	80064f8 <ai_platform_network_get_error>
 8006246:	4604      	mov	r4, r0
 8006248:	fa5f f980 	uxtb.w	r9, r0
    return err;
 800624c:	f369 0407 	bfi	r4, r9, #0, #8
 8006250:	e7e9      	b.n	8006226 <ai_network_create_and_init+0x2a>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8006252:	f858 2025 	ldr.w	r2, [r8, r5, lsl #2]
 8006256:	4629      	mov	r1, r5
        for (int idx=0;idx<params.map_activations.size;idx++)
 8006258:	3501      	adds	r5, #1
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 800625a:	a803      	add	r0, sp, #12
 800625c:	f000 f86e 	bl	800633c <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8006260:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8006264:	42ab      	cmp	r3, r5
 8006266:	dcf4      	bgt.n	8006252 <ai_network_create_and_init+0x56>
 8006268:	e7e4      	b.n	8006234 <ai_network_create_and_init+0x38>
 800626a:	464d      	mov	r5, r9
 800626c:	e7f8      	b.n	8006260 <ai_network_create_and_init+0x64>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 800626e:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
 8006272:	4629      	mov	r1, r5
        for (int idx=0;idx<params.map_weights.size;idx++)
 8006274:	3501      	adds	r5, #1
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8006276:	a801      	add	r0, sp, #4
 8006278:	f000 f860 	bl	800633c <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 800627c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8006280:	42ab      	cmp	r3, r5
 8006282:	dcf4      	bgt.n	800626e <ai_network_create_and_init+0x72>
 8006284:	e7d7      	b.n	8006236 <ai_network_create_and_init+0x3a>
 8006286:	2500      	movs	r5, #0
 8006288:	e7f8      	b.n	800627c <ai_network_create_and_init+0x80>

0800628a <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 800628a:	f001 b9fb 	b.w	8007684 <ai_platform_network_process>
	...

08006290 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8006290:	b530      	push	{r4, r5, lr}
  if (!params) return false;
 8006292:	4603      	mov	r3, r0
{
 8006294:	b085      	sub	sp, #20
  if (!params) return false;
 8006296:	b170      	cbz	r0, 80062b6 <ai_network_data_params_get+0x26>
  
  const ai_buffer_array map_activations = 
 8006298:	4c08      	ldr	r4, [pc, #32]	@ (80062bc <ai_network_data_params_get+0x2c>)
 800629a:	466a      	mov	r2, sp
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 800629c:	ad02      	add	r5, sp, #8
  const ai_buffer_array map_activations = 
 800629e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80062a2:	e882 0003 	stmia.w	r2, {r0, r1}
  const ai_buffer_array map_weights = 
 80062a6:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 80062aa:	e885 0003 	stmia.w	r5, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 80062ae:	4629      	mov	r1, r5
 80062b0:	4618      	mov	r0, r3
 80062b2:	f000 f907 	bl	80064c4 <ai_platform_bind_network_params>
}
 80062b6:	b005      	add	sp, #20
 80062b8:	bd30      	pop	{r4, r5, pc}
 80062ba:	bf00      	nop
 80062bc:	0800ec20 	.word	0x0800ec20

080062c0 <ai_buffer_get_size>:
 80062c0:	b368      	cbz	r0, 800631e <ai_buffer_get_size+0x5e>
 80062c2:	4b17      	ldr	r3, [pc, #92]	@ (8006320 <ai_buffer_get_size+0x60>)
 80062c4:	4a17      	ldr	r2, [pc, #92]	@ (8006324 <ai_buffer_get_size+0x64>)
 80062c6:	b410      	push	{r4}
 80062c8:	6804      	ldr	r4, [r0, #0]
 80062ca:	4023      	ands	r3, r4
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d123      	bne.n	8006318 <ai_buffer_get_size+0x58>
 80062d0:	b311      	cbz	r1, 8006318 <ai_buffer_get_size+0x58>
 80062d2:	6984      	ldr	r4, [r0, #24]
 80062d4:	6862      	ldr	r2, [r4, #4]
 80062d6:	321f      	adds	r2, #31
 80062d8:	f022 021f 	bic.w	r2, r2, #31
 80062dc:	7d03      	ldrb	r3, [r0, #20]
 80062de:	6941      	ldr	r1, [r0, #20]
 80062e0:	f1a3 0301 	sub.w	r3, r3, #1
 80062e4:	f3c1 2017 	ubfx	r0, r1, #8, #24
 80062e8:	fab3 f383 	clz	r3, r3
 80062ec:	095b      	lsrs	r3, r3, #5
 80062ee:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 80062f2:	da0c      	bge.n	800630e <ai_buffer_get_size+0x4e>
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d103      	bne.n	8006300 <ai_buffer_get_size+0x40>
 80062f8:	2802      	cmp	r0, #2
 80062fa:	f04f 0302 	mov.w	r3, #2
 80062fe:	d006      	beq.n	800630e <ai_buffer_get_size+0x4e>
 8006300:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8006304:	3301      	adds	r3, #1
 8006306:	4298      	cmp	r0, r3
 8006308:	fb01 f202 	mul.w	r2, r1, r2
 800630c:	d1f2      	bne.n	80062f4 <ai_buffer_get_size+0x34>
 800630e:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8006312:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006316:	4770      	bx	lr
 8006318:	6984      	ldr	r4, [r0, #24]
 800631a:	6862      	ldr	r2, [r4, #4]
 800631c:	e7de      	b.n	80062dc <ai_buffer_get_size+0x1c>
 800631e:	4770      	bx	lr
 8006320:	017fffff 	.word	0x017fffff
 8006324:	000400c0 	.word	0x000400c0

08006328 <ai_buffer_array_sane>:
 8006328:	b138      	cbz	r0, 800633a <ai_buffer_array_sane+0x12>
 800632a:	6843      	ldr	r3, [r0, #4]
 800632c:	b123      	cbz	r3, 8006338 <ai_buffer_array_sane+0x10>
 800632e:	8840      	ldrh	r0, [r0, #2]
 8006330:	3800      	subs	r0, #0
 8006332:	bf18      	it	ne
 8006334:	2001      	movne	r0, #1
 8006336:	4770      	bx	lr
 8006338:	4618      	mov	r0, r3
 800633a:	4770      	bx	lr

0800633c <ai_buffer_array_item_set_address>:
 800633c:	b150      	cbz	r0, 8006354 <ai_buffer_array_item_set_address+0x18>
 800633e:	6843      	ldr	r3, [r0, #4]
 8006340:	b14b      	cbz	r3, 8006356 <ai_buffer_array_item_set_address+0x1a>
 8006342:	8840      	ldrh	r0, [r0, #2]
 8006344:	b900      	cbnz	r0, 8006348 <ai_buffer_array_item_set_address+0xc>
 8006346:	4770      	bx	lr
 8006348:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800634c:	2001      	movs	r0, #1
 800634e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006352:	604a      	str	r2, [r1, #4]
 8006354:	4770      	bx	lr
 8006356:	4618      	mov	r0, r3
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop

0800635c <_ai_platform_acquire_crc>:
 800635c:	2001      	movs	r0, #1
 800635e:	4770      	bx	lr

08006360 <_ai_platform_release_crc>:
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop

08006364 <ai_platform_get_weights_map>:
 8006364:	2900      	cmp	r1, #0
 8006366:	bf18      	it	ne
 8006368:	2800      	cmpne	r0, #0
 800636a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800636c:	bf0c      	ite	eq
 800636e:	2401      	moveq	r4, #1
 8006370:	2400      	movne	r4, #0
 8006372:	2a00      	cmp	r2, #0
 8006374:	bf08      	it	eq
 8006376:	f044 0401 	orreq.w	r4, r4, #1
 800637a:	b114      	cbz	r4, 8006382 <ai_platform_get_weights_map+0x1e>
 800637c:	2400      	movs	r4, #0
 800637e:	4620      	mov	r0, r4
 8006380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006382:	4616      	mov	r6, r2
 8006384:	4b22      	ldr	r3, [pc, #136]	@ (8006410 <ai_platform_get_weights_map+0xac>)
 8006386:	6812      	ldr	r2, [r2, #0]
 8006388:	4605      	mov	r5, r0
 800638a:	460f      	mov	r7, r1
 800638c:	429a      	cmp	r2, r3
 800638e:	d022      	beq.n	80063d6 <ai_platform_get_weights_map+0x72>
 8006390:	6870      	ldr	r0, [r6, #4]
 8006392:	2800      	cmp	r0, #0
 8006394:	d0f2      	beq.n	800637c <ai_platform_get_weights_map+0x18>
 8006396:	6806      	ldr	r6, [r0, #0]
 8006398:	429e      	cmp	r6, r3
 800639a:	d006      	beq.n	80063aa <ai_platform_get_weights_map+0x46>
 800639c:	f1a1 0401 	sub.w	r4, r1, #1
 80063a0:	6028      	str	r0, [r5, #0]
 80063a2:	fab4 f484 	clz	r4, r4
 80063a6:	0964      	lsrs	r4, r4, #5
 80063a8:	e7e9      	b.n	800637e <ai_platform_get_weights_map+0x1a>
 80063aa:	3d04      	subs	r5, #4
 80063ac:	4602      	mov	r2, r0
 80063ae:	4621      	mov	r1, r4
 80063b0:	e000      	b.n	80063b4 <ai_platform_get_weights_map+0x50>
 80063b2:	4619      	mov	r1, r3
 80063b4:	f852 3f04 	ldr.w	r3, [r2, #4]!
 80063b8:	42b3      	cmp	r3, r6
 80063ba:	d025      	beq.n	8006408 <ai_platform_get_weights_map+0xa4>
 80063bc:	f845 3f04 	str.w	r3, [r5, #4]!
 80063c0:	1c4b      	adds	r3, r1, #1
 80063c2:	429f      	cmp	r7, r3
 80063c4:	d8f5      	bhi.n	80063b2 <ai_platform_get_weights_map+0x4e>
 80063c6:	d1da      	bne.n	800637e <ai_platform_get_weights_map+0x1a>
 80063c8:	3102      	adds	r1, #2
 80063ca:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 80063ce:	42b3      	cmp	r3, r6
 80063d0:	d1d5      	bne.n	800637e <ai_platform_get_weights_map+0x1a>
 80063d2:	2401      	movs	r4, #1
 80063d4:	e7d3      	b.n	800637e <ai_platform_get_weights_map+0x1a>
 80063d6:	1d30      	adds	r0, r6, #4
 80063d8:	f7ff ffa6 	bl	8006328 <ai_buffer_array_sane>
 80063dc:	2800      	cmp	r0, #0
 80063de:	d0cd      	beq.n	800637c <ai_platform_get_weights_map+0x18>
 80063e0:	88f3      	ldrh	r3, [r6, #6]
 80063e2:	429f      	cmp	r7, r3
 80063e4:	d1ca      	bne.n	800637c <ai_platform_get_weights_map+0x18>
 80063e6:	3d04      	subs	r5, #4
 80063e8:	4622      	mov	r2, r4
 80063ea:	68b3      	ldr	r3, [r6, #8]
 80063ec:	4423      	add	r3, r4
 80063ee:	341c      	adds	r4, #28
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	b123      	cbz	r3, 80063fe <ai_platform_get_weights_map+0x9a>
 80063f4:	3201      	adds	r2, #1
 80063f6:	f845 3f04 	str.w	r3, [r5, #4]!
 80063fa:	4297      	cmp	r7, r2
 80063fc:	d8f5      	bhi.n	80063ea <ai_platform_get_weights_map+0x86>
 80063fe:	1abc      	subs	r4, r7, r2
 8006400:	fab4 f484 	clz	r4, r4
 8006404:	0964      	lsrs	r4, r4, #5
 8006406:	e7ba      	b.n	800637e <ai_platform_get_weights_map+0x1a>
 8006408:	428f      	cmp	r7, r1
 800640a:	d1b8      	bne.n	800637e <ai_platform_get_weights_map+0x1a>
 800640c:	e7e1      	b.n	80063d2 <ai_platform_get_weights_map+0x6e>
 800640e:	bf00      	nop
 8006410:	a1facade 	.word	0xa1facade

08006414 <ai_platform_get_activations_map>:
 8006414:	2900      	cmp	r1, #0
 8006416:	bf18      	it	ne
 8006418:	2800      	cmpne	r0, #0
 800641a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800641c:	bf0c      	ite	eq
 800641e:	2401      	moveq	r4, #1
 8006420:	2400      	movne	r4, #0
 8006422:	2a00      	cmp	r2, #0
 8006424:	bf08      	it	eq
 8006426:	f044 0401 	orreq.w	r4, r4, #1
 800642a:	b114      	cbz	r4, 8006432 <ai_platform_get_activations_map+0x1e>
 800642c:	2400      	movs	r4, #0
 800642e:	4620      	mov	r0, r4
 8006430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006432:	4616      	mov	r6, r2
 8006434:	4b22      	ldr	r3, [pc, #136]	@ (80064c0 <ai_platform_get_activations_map+0xac>)
 8006436:	6812      	ldr	r2, [r2, #0]
 8006438:	4605      	mov	r5, r0
 800643a:	460f      	mov	r7, r1
 800643c:	429a      	cmp	r2, r3
 800643e:	d022      	beq.n	8006486 <ai_platform_get_activations_map+0x72>
 8006440:	6a30      	ldr	r0, [r6, #32]
 8006442:	2800      	cmp	r0, #0
 8006444:	d0f2      	beq.n	800642c <ai_platform_get_activations_map+0x18>
 8006446:	6806      	ldr	r6, [r0, #0]
 8006448:	429e      	cmp	r6, r3
 800644a:	d006      	beq.n	800645a <ai_platform_get_activations_map+0x46>
 800644c:	f1a1 0401 	sub.w	r4, r1, #1
 8006450:	6028      	str	r0, [r5, #0]
 8006452:	fab4 f484 	clz	r4, r4
 8006456:	0964      	lsrs	r4, r4, #5
 8006458:	e7e9      	b.n	800642e <ai_platform_get_activations_map+0x1a>
 800645a:	3d04      	subs	r5, #4
 800645c:	4602      	mov	r2, r0
 800645e:	4621      	mov	r1, r4
 8006460:	e000      	b.n	8006464 <ai_platform_get_activations_map+0x50>
 8006462:	4619      	mov	r1, r3
 8006464:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8006468:	42b3      	cmp	r3, r6
 800646a:	d026      	beq.n	80064ba <ai_platform_get_activations_map+0xa6>
 800646c:	f845 3f04 	str.w	r3, [r5, #4]!
 8006470:	1c4b      	adds	r3, r1, #1
 8006472:	429f      	cmp	r7, r3
 8006474:	d8f5      	bhi.n	8006462 <ai_platform_get_activations_map+0x4e>
 8006476:	d1da      	bne.n	800642e <ai_platform_get_activations_map+0x1a>
 8006478:	3102      	adds	r1, #2
 800647a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800647e:	42b3      	cmp	r3, r6
 8006480:	d1d5      	bne.n	800642e <ai_platform_get_activations_map+0x1a>
 8006482:	2401      	movs	r4, #1
 8006484:	e7d3      	b.n	800642e <ai_platform_get_activations_map+0x1a>
 8006486:	f106 000c 	add.w	r0, r6, #12
 800648a:	f7ff ff4d 	bl	8006328 <ai_buffer_array_sane>
 800648e:	2800      	cmp	r0, #0
 8006490:	d0cc      	beq.n	800642c <ai_platform_get_activations_map+0x18>
 8006492:	89f3      	ldrh	r3, [r6, #14]
 8006494:	429f      	cmp	r7, r3
 8006496:	d1c9      	bne.n	800642c <ai_platform_get_activations_map+0x18>
 8006498:	3d04      	subs	r5, #4
 800649a:	4622      	mov	r2, r4
 800649c:	6933      	ldr	r3, [r6, #16]
 800649e:	4423      	add	r3, r4
 80064a0:	341c      	adds	r4, #28
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	b123      	cbz	r3, 80064b0 <ai_platform_get_activations_map+0x9c>
 80064a6:	3201      	adds	r2, #1
 80064a8:	f845 3f04 	str.w	r3, [r5, #4]!
 80064ac:	4297      	cmp	r7, r2
 80064ae:	d8f5      	bhi.n	800649c <ai_platform_get_activations_map+0x88>
 80064b0:	1abc      	subs	r4, r7, r2
 80064b2:	fab4 f484 	clz	r4, r4
 80064b6:	0964      	lsrs	r4, r4, #5
 80064b8:	e7b9      	b.n	800642e <ai_platform_get_activations_map+0x1a>
 80064ba:	428f      	cmp	r7, r1
 80064bc:	d1b7      	bne.n	800642e <ai_platform_get_activations_map+0x1a>
 80064be:	e7e0      	b.n	8006482 <ai_platform_get_activations_map+0x6e>
 80064c0:	a1facade 	.word	0xa1facade

080064c4 <ai_platform_bind_network_params>:
 80064c4:	2a00      	cmp	r2, #0
 80064c6:	bf18      	it	ne
 80064c8:	2900      	cmpne	r1, #0
 80064ca:	d010      	beq.n	80064ee <ai_platform_bind_network_params+0x2a>
 80064cc:	b178      	cbz	r0, 80064ee <ai_platform_bind_network_params+0x2a>
 80064ce:	4603      	mov	r3, r0
 80064d0:	4808      	ldr	r0, [pc, #32]	@ (80064f4 <ai_platform_bind_network_params+0x30>)
 80064d2:	f103 0c0c 	add.w	ip, r3, #12
 80064d6:	f843 0b04 	str.w	r0, [r3], #4
 80064da:	c903      	ldmia	r1, {r0, r1}
 80064dc:	e883 0003 	stmia.w	r3, {r0, r1}
 80064e0:	2301      	movs	r3, #1
 80064e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80064e6:	e88c 0003 	stmia.w	ip, {r0, r1}
 80064ea:	4618      	mov	r0, r3
 80064ec:	4770      	bx	lr
 80064ee:	2300      	movs	r3, #0
 80064f0:	4618      	mov	r0, r3
 80064f2:	4770      	bx	lr
 80064f4:	a1facade 	.word	0xa1facade

080064f8 <ai_platform_network_get_error>:
 80064f8:	b510      	push	{r4, lr}
 80064fa:	2800      	cmp	r0, #0
 80064fc:	d03f      	beq.n	800657e <ai_platform_network_get_error+0x86>
 80064fe:	4b7d      	ldr	r3, [pc, #500]	@ (80066f4 <ai_platform_network_get_error+0x1fc>)
 8006500:	4604      	mov	r4, r0
 8006502:	6802      	ldr	r2, [r0, #0]
 8006504:	429a      	cmp	r2, r3
 8006506:	d13a      	bne.n	800657e <ai_platform_network_get_error+0x86>
 8006508:	f7ff ff28 	bl	800635c <_ai_platform_acquire_crc>
 800650c:	4b7a      	ldr	r3, [pc, #488]	@ (80066f8 <ai_platform_network_get_error+0x200>)
 800650e:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006518:	189a      	adds	r2, r3, r2
 800651a:	2a01      	cmp	r2, #1
 800651c:	f240 8086 	bls.w	800662c <ai_platform_network_get_error+0x134>
 8006520:	f240 4249 	movw	r2, #1097	@ 0x449
 8006524:	4293      	cmp	r3, r2
 8006526:	f000 8081 	beq.w	800662c <ai_platform_network_get_error+0x134>
 800652a:	4a74      	ldr	r2, [pc, #464]	@ (80066fc <ai_platform_network_get_error+0x204>)
 800652c:	6813      	ldr	r3, [r2, #0]
 800652e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006532:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8006536:	f000 8087 	beq.w	8006648 <ai_platform_network_get_error+0x150>
 800653a:	6813      	ldr	r3, [r2, #0]
 800653c:	f240 4183 	movw	r1, #1155	@ 0x483
 8006540:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006544:	428b      	cmp	r3, r1
 8006546:	f000 80a9 	beq.w	800669c <ai_platform_network_get_error+0x1a4>
 800654a:	6813      	ldr	r3, [r2, #0]
 800654c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006550:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8006554:	f000 80c0 	beq.w	80066d8 <ai_platform_network_get_error+0x1e0>
 8006558:	6813      	ldr	r3, [r2, #0]
 800655a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800655e:	2b00      	cmp	r3, #0
 8006560:	f040 8082 	bne.w	8006668 <ai_platform_network_get_error+0x170>
 8006564:	4a66      	ldr	r2, [pc, #408]	@ (8006700 <ai_platform_network_get_error+0x208>)
 8006566:	2301      	movs	r3, #1
 8006568:	6093      	str	r3, [r2, #8]
 800656a:	6893      	ldr	r3, [r2, #8]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d1fc      	bne.n	800656a <ai_platform_network_get_error+0x72>
 8006570:	4964      	ldr	r1, [pc, #400]	@ (8006704 <ai_platform_network_get_error+0x20c>)
 8006572:	4b65      	ldr	r3, [pc, #404]	@ (8006708 <ai_platform_network_get_error+0x210>)
 8006574:	6011      	str	r1, [r2, #0]
 8006576:	6812      	ldr	r2, [r2, #0]
 8006578:	429a      	cmp	r2, r3
 800657a:	d075      	beq.n	8006668 <ai_platform_network_get_error+0x170>
 800657c:	e7fe      	b.n	800657c <ai_platform_network_get_error+0x84>
 800657e:	f7ff feed 	bl	800635c <_ai_platform_acquire_crc>
 8006582:	4b5d      	ldr	r3, [pc, #372]	@ (80066f8 <ai_platform_network_get_error+0x200>)
 8006584:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800658e:	185a      	adds	r2, r3, r1
 8006590:	2a01      	cmp	r2, #1
 8006592:	d929      	bls.n	80065e8 <ai_platform_network_get_error+0xf0>
 8006594:	f240 4249 	movw	r2, #1097	@ 0x449
 8006598:	4293      	cmp	r3, r2
 800659a:	d025      	beq.n	80065e8 <ai_platform_network_get_error+0xf0>
 800659c:	4a57      	ldr	r2, [pc, #348]	@ (80066fc <ai_platform_network_get_error+0x204>)
 800659e:	6813      	ldr	r3, [r2, #0]
 80065a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80065a4:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 80065a8:	d02b      	beq.n	8006602 <ai_platform_network_get_error+0x10a>
 80065aa:	6813      	ldr	r3, [r2, #0]
 80065ac:	f240 4183 	movw	r1, #1155	@ 0x483
 80065b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80065b4:	428b      	cmp	r3, r1
 80065b6:	d060      	beq.n	800667a <ai_platform_network_get_error+0x182>
 80065b8:	6813      	ldr	r3, [r2, #0]
 80065ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80065be:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 80065c2:	d07c      	beq.n	80066be <ai_platform_network_get_error+0x1c6>
 80065c4:	6813      	ldr	r3, [r2, #0]
 80065c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d129      	bne.n	8006622 <ai_platform_network_get_error+0x12a>
 80065ce:	4a4c      	ldr	r2, [pc, #304]	@ (8006700 <ai_platform_network_get_error+0x208>)
 80065d0:	2301      	movs	r3, #1
 80065d2:	6093      	str	r3, [r2, #8]
 80065d4:	6893      	ldr	r3, [r2, #8]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1fc      	bne.n	80065d4 <ai_platform_network_get_error+0xdc>
 80065da:	494a      	ldr	r1, [pc, #296]	@ (8006704 <ai_platform_network_get_error+0x20c>)
 80065dc:	4b4a      	ldr	r3, [pc, #296]	@ (8006708 <ai_platform_network_get_error+0x210>)
 80065de:	6011      	str	r1, [r2, #0]
 80065e0:	6812      	ldr	r2, [r2, #0]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d01d      	beq.n	8006622 <ai_platform_network_get_error+0x12a>
 80065e6:	e7fe      	b.n	80065e6 <ai_platform_network_get_error+0xee>
 80065e8:	4a45      	ldr	r2, [pc, #276]	@ (8006700 <ai_platform_network_get_error+0x208>)
 80065ea:	2301      	movs	r3, #1
 80065ec:	6093      	str	r3, [r2, #8]
 80065ee:	6893      	ldr	r3, [r2, #8]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d1fc      	bne.n	80065ee <ai_platform_network_get_error+0xf6>
 80065f4:	4943      	ldr	r1, [pc, #268]	@ (8006704 <ai_platform_network_get_error+0x20c>)
 80065f6:	4b44      	ldr	r3, [pc, #272]	@ (8006708 <ai_platform_network_get_error+0x210>)
 80065f8:	6011      	str	r1, [r2, #0]
 80065fa:	6812      	ldr	r2, [r2, #0]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d010      	beq.n	8006622 <ai_platform_network_get_error+0x12a>
 8006600:	e7fe      	b.n	8006600 <ai_platform_network_get_error+0x108>
 8006602:	4a42      	ldr	r2, [pc, #264]	@ (800670c <ai_platform_network_get_error+0x214>)
 8006604:	2301      	movs	r3, #1
 8006606:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800660a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1fb      	bne.n	800660a <ai_platform_network_get_error+0x112>
 8006612:	493c      	ldr	r1, [pc, #240]	@ (8006704 <ai_platform_network_get_error+0x20c>)
 8006614:	4b3c      	ldr	r3, [pc, #240]	@ (8006708 <ai_platform_network_get_error+0x210>)
 8006616:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 800661a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800661e:	429a      	cmp	r2, r3
 8006620:	d111      	bne.n	8006646 <ai_platform_network_get_error+0x14e>
 8006622:	f7ff fe9d 	bl	8006360 <_ai_platform_release_crc>
 8006626:	f241 0010 	movw	r0, #4112	@ 0x1010
 800662a:	bd10      	pop	{r4, pc}
 800662c:	4a34      	ldr	r2, [pc, #208]	@ (8006700 <ai_platform_network_get_error+0x208>)
 800662e:	2301      	movs	r3, #1
 8006630:	6093      	str	r3, [r2, #8]
 8006632:	6893      	ldr	r3, [r2, #8]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d1fc      	bne.n	8006632 <ai_platform_network_get_error+0x13a>
 8006638:	4932      	ldr	r1, [pc, #200]	@ (8006704 <ai_platform_network_get_error+0x20c>)
 800663a:	4b33      	ldr	r3, [pc, #204]	@ (8006708 <ai_platform_network_get_error+0x210>)
 800663c:	6011      	str	r1, [r2, #0]
 800663e:	6812      	ldr	r2, [r2, #0]
 8006640:	429a      	cmp	r2, r3
 8006642:	d011      	beq.n	8006668 <ai_platform_network_get_error+0x170>
 8006644:	e7fe      	b.n	8006644 <ai_platform_network_get_error+0x14c>
 8006646:	e7fe      	b.n	8006646 <ai_platform_network_get_error+0x14e>
 8006648:	4a30      	ldr	r2, [pc, #192]	@ (800670c <ai_platform_network_get_error+0x214>)
 800664a:	2301      	movs	r3, #1
 800664c:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006650:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1fb      	bne.n	8006650 <ai_platform_network_get_error+0x158>
 8006658:	492a      	ldr	r1, [pc, #168]	@ (8006704 <ai_platform_network_get_error+0x20c>)
 800665a:	4b2b      	ldr	r3, [pc, #172]	@ (8006708 <ai_platform_network_get_error+0x210>)
 800665c:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8006660:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006664:	429a      	cmp	r2, r3
 8006666:	d107      	bne.n	8006678 <ai_platform_network_get_error+0x180>
 8006668:	f7ff fe7a 	bl	8006360 <_ai_platform_release_crc>
 800666c:	f104 0010 	add.w	r0, r4, #16
 8006670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006674:	f001 bae4 	b.w	8007c40 <core_get_error>
 8006678:	e7fe      	b.n	8006678 <ai_platform_network_get_error+0x180>
 800667a:	4a24      	ldr	r2, [pc, #144]	@ (800670c <ai_platform_network_get_error+0x214>)
 800667c:	2301      	movs	r3, #1
 800667e:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006682:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006686:	2b00      	cmp	r3, #0
 8006688:	d1fb      	bne.n	8006682 <ai_platform_network_get_error+0x18a>
 800668a:	491e      	ldr	r1, [pc, #120]	@ (8006704 <ai_platform_network_get_error+0x20c>)
 800668c:	4b1e      	ldr	r3, [pc, #120]	@ (8006708 <ai_platform_network_get_error+0x210>)
 800668e:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8006692:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006696:	429a      	cmp	r2, r3
 8006698:	d0c3      	beq.n	8006622 <ai_platform_network_get_error+0x12a>
 800669a:	e7fe      	b.n	800669a <ai_platform_network_get_error+0x1a2>
 800669c:	4a1b      	ldr	r2, [pc, #108]	@ (800670c <ai_platform_network_get_error+0x214>)
 800669e:	2301      	movs	r3, #1
 80066a0:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80066a4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d1fb      	bne.n	80066a4 <ai_platform_network_get_error+0x1ac>
 80066ac:	4915      	ldr	r1, [pc, #84]	@ (8006704 <ai_platform_network_get_error+0x20c>)
 80066ae:	4b16      	ldr	r3, [pc, #88]	@ (8006708 <ai_platform_network_get_error+0x210>)
 80066b0:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 80066b4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d0d5      	beq.n	8006668 <ai_platform_network_get_error+0x170>
 80066bc:	e7fe      	b.n	80066bc <ai_platform_network_get_error+0x1c4>
 80066be:	4a10      	ldr	r2, [pc, #64]	@ (8006700 <ai_platform_network_get_error+0x208>)
 80066c0:	2301      	movs	r3, #1
 80066c2:	6093      	str	r3, [r2, #8]
 80066c4:	6893      	ldr	r3, [r2, #8]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1fc      	bne.n	80066c4 <ai_platform_network_get_error+0x1cc>
 80066ca:	490e      	ldr	r1, [pc, #56]	@ (8006704 <ai_platform_network_get_error+0x20c>)
 80066cc:	4b0e      	ldr	r3, [pc, #56]	@ (8006708 <ai_platform_network_get_error+0x210>)
 80066ce:	6011      	str	r1, [r2, #0]
 80066d0:	6812      	ldr	r2, [r2, #0]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d0a5      	beq.n	8006622 <ai_platform_network_get_error+0x12a>
 80066d6:	e7fe      	b.n	80066d6 <ai_platform_network_get_error+0x1de>
 80066d8:	4a09      	ldr	r2, [pc, #36]	@ (8006700 <ai_platform_network_get_error+0x208>)
 80066da:	2301      	movs	r3, #1
 80066dc:	6093      	str	r3, [r2, #8]
 80066de:	6893      	ldr	r3, [r2, #8]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d1fc      	bne.n	80066de <ai_platform_network_get_error+0x1e6>
 80066e4:	4907      	ldr	r1, [pc, #28]	@ (8006704 <ai_platform_network_get_error+0x20c>)
 80066e6:	4b08      	ldr	r3, [pc, #32]	@ (8006708 <ai_platform_network_get_error+0x210>)
 80066e8:	6011      	str	r1, [r2, #0]
 80066ea:	6812      	ldr	r2, [r2, #0]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d0bb      	beq.n	8006668 <ai_platform_network_get_error+0x170>
 80066f0:	e7fe      	b.n	80066f0 <ai_platform_network_get_error+0x1f8>
 80066f2:	bf00      	nop
 80066f4:	a1c00100 	.word	0xa1c00100
 80066f8:	e0042000 	.word	0xe0042000
 80066fc:	5c001000 	.word	0x5c001000
 8006700:	40023000 	.word	0x40023000
 8006704:	f407a5c2 	.word	0xf407a5c2
 8006708:	b5e8b5cd 	.word	0xb5e8b5cd
 800670c:	58024000 	.word	0x58024000

08006710 <ai_platform_network_set_error>:
 8006710:	b110      	cbz	r0, 8006718 <ai_platform_network_set_error+0x8>
 8006712:	3010      	adds	r0, #16
 8006714:	f001 ba9a 	b.w	8007c4c <core_set_error>
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop

0800671c <ai_platform_inputs_get>:
 800671c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006720:	b085      	sub	sp, #20
 8006722:	9102      	str	r1, [sp, #8]
 8006724:	2800      	cmp	r0, #0
 8006726:	f000 8093 	beq.w	8006850 <ai_platform_inputs_get+0x134>
 800672a:	4baa      	ldr	r3, [pc, #680]	@ (80069d4 <ai_platform_inputs_get+0x2b8>)
 800672c:	4681      	mov	r9, r0
 800672e:	6802      	ldr	r2, [r0, #0]
 8006730:	429a      	cmp	r2, r3
 8006732:	f040 808d 	bne.w	8006850 <ai_platform_inputs_get+0x134>
 8006736:	f7ff fe11 	bl	800635c <_ai_platform_acquire_crc>
 800673a:	4ba7      	ldr	r3, [pc, #668]	@ (80069d8 <ai_platform_inputs_get+0x2bc>)
 800673c:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006746:	189a      	adds	r2, r3, r2
 8006748:	2a01      	cmp	r2, #1
 800674a:	f240 80da 	bls.w	8006902 <ai_platform_inputs_get+0x1e6>
 800674e:	f240 4249 	movw	r2, #1097	@ 0x449
 8006752:	4293      	cmp	r3, r2
 8006754:	f000 80d5 	beq.w	8006902 <ai_platform_inputs_get+0x1e6>
 8006758:	4aa0      	ldr	r2, [pc, #640]	@ (80069dc <ai_platform_inputs_get+0x2c0>)
 800675a:	6813      	ldr	r3, [r2, #0]
 800675c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006760:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8006764:	f000 80dc 	beq.w	8006920 <ai_platform_inputs_get+0x204>
 8006768:	6813      	ldr	r3, [r2, #0]
 800676a:	f240 4183 	movw	r1, #1155	@ 0x483
 800676e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006772:	428b      	cmp	r3, r1
 8006774:	f000 810e 	beq.w	8006994 <ai_platform_inputs_get+0x278>
 8006778:	6813      	ldr	r3, [r2, #0]
 800677a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800677e:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8006782:	f000 8143 	beq.w	8006a0c <ai_platform_inputs_get+0x2f0>
 8006786:	6813      	ldr	r3, [r2, #0]
 8006788:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800678c:	2b00      	cmp	r3, #0
 800678e:	f000 8113 	beq.w	80069b8 <ai_platform_inputs_get+0x29c>
 8006792:	f7ff fde5 	bl	8006360 <_ai_platform_release_crc>
 8006796:	f8b9 302c 	ldrh.w	r3, [r9, #44]	@ 0x2c
 800679a:	2b00      	cmp	r3, #0
 800679c:	f000 80d2 	beq.w	8006944 <ai_platform_inputs_get+0x228>
 80067a0:	f8d9 a030 	ldr.w	sl, [r9, #48]	@ 0x30
 80067a4:	f1ba 0f00 	cmp.w	sl, #0
 80067a8:	f000 80cc 	beq.w	8006944 <ai_platform_inputs_get+0x228>
 80067ac:	2100      	movs	r1, #0
 80067ae:	f8cd 900c 	str.w	r9, [sp, #12]
 80067b2:	460d      	mov	r5, r1
 80067b4:	4689      	mov	r9, r1
 80067b6:	e016      	b.n	80067e6 <ai_platform_inputs_get+0xca>
 80067b8:	9a01      	ldr	r2, [sp, #4]
 80067ba:	2301      	movs	r3, #1
 80067bc:	f848 3002 	str.w	r3, [r8, r2]
 80067c0:	69b2      	ldr	r2, [r6, #24]
 80067c2:	f04f 0301 	mov.w	r3, #1
 80067c6:	6856      	ldr	r6, [r2, #4]
 80067c8:	3501      	adds	r5, #1
 80067ca:	f109 091c 	add.w	r9, r9, #28
 80067ce:	7523      	strb	r3, [r4, #20]
 80067d0:	2300      	movs	r3, #0
 80067d2:	6962      	ldr	r2, [r4, #20]
 80067d4:	60a7      	str	r7, [r4, #8]
 80067d6:	f36b 221f 	bfi	r2, fp, #8, #24
 80067da:	6126      	str	r6, [r4, #16]
 80067dc:	61a1      	str	r1, [r4, #24]
 80067de:	60e3      	str	r3, [r4, #12]
 80067e0:	6162      	str	r2, [r4, #20]
 80067e2:	e9c4 0c00 	strd	r0, ip, [r4]
 80067e6:	f8ba 3000 	ldrh.w	r3, [sl]
 80067ea:	b2ac      	uxth	r4, r5
 80067ec:	42ab      	cmp	r3, r5
 80067ee:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 80067f2:	9301      	str	r3, [sp, #4]
 80067f4:	f240 80b5 	bls.w	8006962 <ai_platform_inputs_get+0x246>
 80067f8:	f8da 3004 	ldr.w	r3, [sl, #4]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f000 80b0 	beq.w	8006962 <ai_platform_inputs_get+0x246>
 8006802:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8006806:	2e00      	cmp	r6, #0
 8006808:	f000 80ab 	beq.w	8006962 <ai_platform_inputs_get+0x246>
 800680c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8006810:	69b2      	ldr	r2, [r6, #24]
 8006812:	68f1      	ldr	r1, [r6, #12]
 8006814:	6810      	ldr	r0, [r2, #0]
 8006816:	9100      	str	r1, [sp, #0]
 8006818:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800681c:	68b3      	ldr	r3, [r6, #8]
 800681e:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8006822:	444c      	add	r4, r9
 8006824:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 8006828:	f005 f918 	bl	800ba5c <ai_array_to_buffer_fmt>
 800682c:	69b2      	ldr	r2, [r6, #24]
 800682e:	9900      	ldr	r1, [sp, #0]
 8006830:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8006834:	2f00      	cmp	r7, #0
 8006836:	d0c4      	beq.n	80067c2 <ai_platform_inputs_get+0xa6>
 8006838:	2200      	movs	r2, #0
 800683a:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 800683e:	6832      	ldr	r2, [r6, #0]
 8006840:	607a      	str	r2, [r7, #4]
 8006842:	b112      	cbz	r2, 800684a <ai_platform_inputs_get+0x12e>
 8006844:	8852      	ldrh	r2, [r2, #2]
 8006846:	2a00      	cmp	r2, #0
 8006848:	d1b6      	bne.n	80067b8 <ai_platform_inputs_get+0x9c>
 800684a:	69b2      	ldr	r2, [r6, #24]
 800684c:	2700      	movs	r7, #0
 800684e:	e7b8      	b.n	80067c2 <ai_platform_inputs_get+0xa6>
 8006850:	f7ff fd84 	bl	800635c <_ai_platform_acquire_crc>
 8006854:	4b60      	ldr	r3, [pc, #384]	@ (80069d8 <ai_platform_inputs_get+0x2bc>)
 8006856:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006860:	185a      	adds	r2, r3, r1
 8006862:	2a01      	cmp	r2, #1
 8006864:	d92a      	bls.n	80068bc <ai_platform_inputs_get+0x1a0>
 8006866:	f240 4249 	movw	r2, #1097	@ 0x449
 800686a:	4293      	cmp	r3, r2
 800686c:	d026      	beq.n	80068bc <ai_platform_inputs_get+0x1a0>
 800686e:	4a5b      	ldr	r2, [pc, #364]	@ (80069dc <ai_platform_inputs_get+0x2c0>)
 8006870:	6813      	ldr	r3, [r2, #0]
 8006872:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006876:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 800687a:	d02c      	beq.n	80068d6 <ai_platform_inputs_get+0x1ba>
 800687c:	6813      	ldr	r3, [r2, #0]
 800687e:	f240 4183 	movw	r1, #1155	@ 0x483
 8006882:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006886:	428b      	cmp	r3, r1
 8006888:	d073      	beq.n	8006972 <ai_platform_inputs_get+0x256>
 800688a:	6813      	ldr	r3, [r2, #0]
 800688c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006890:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8006894:	f000 80ac 	beq.w	80069f0 <ai_platform_inputs_get+0x2d4>
 8006898:	6813      	ldr	r3, [r2, #0]
 800689a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d129      	bne.n	80068f6 <ai_platform_inputs_get+0x1da>
 80068a2:	4a4f      	ldr	r2, [pc, #316]	@ (80069e0 <ai_platform_inputs_get+0x2c4>)
 80068a4:	2301      	movs	r3, #1
 80068a6:	6093      	str	r3, [r2, #8]
 80068a8:	6893      	ldr	r3, [r2, #8]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d1fc      	bne.n	80068a8 <ai_platform_inputs_get+0x18c>
 80068ae:	494d      	ldr	r1, [pc, #308]	@ (80069e4 <ai_platform_inputs_get+0x2c8>)
 80068b0:	4b4d      	ldr	r3, [pc, #308]	@ (80069e8 <ai_platform_inputs_get+0x2cc>)
 80068b2:	6011      	str	r1, [r2, #0]
 80068b4:	6812      	ldr	r2, [r2, #0]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d01d      	beq.n	80068f6 <ai_platform_inputs_get+0x1da>
 80068ba:	e7fe      	b.n	80068ba <ai_platform_inputs_get+0x19e>
 80068bc:	4a48      	ldr	r2, [pc, #288]	@ (80069e0 <ai_platform_inputs_get+0x2c4>)
 80068be:	2301      	movs	r3, #1
 80068c0:	6093      	str	r3, [r2, #8]
 80068c2:	6893      	ldr	r3, [r2, #8]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1fc      	bne.n	80068c2 <ai_platform_inputs_get+0x1a6>
 80068c8:	4946      	ldr	r1, [pc, #280]	@ (80069e4 <ai_platform_inputs_get+0x2c8>)
 80068ca:	4b47      	ldr	r3, [pc, #284]	@ (80069e8 <ai_platform_inputs_get+0x2cc>)
 80068cc:	6011      	str	r1, [r2, #0]
 80068ce:	6812      	ldr	r2, [r2, #0]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d010      	beq.n	80068f6 <ai_platform_inputs_get+0x1da>
 80068d4:	e7fe      	b.n	80068d4 <ai_platform_inputs_get+0x1b8>
 80068d6:	4a45      	ldr	r2, [pc, #276]	@ (80069ec <ai_platform_inputs_get+0x2d0>)
 80068d8:	2301      	movs	r3, #1
 80068da:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80068de:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d1fb      	bne.n	80068de <ai_platform_inputs_get+0x1c2>
 80068e6:	493f      	ldr	r1, [pc, #252]	@ (80069e4 <ai_platform_inputs_get+0x2c8>)
 80068e8:	4b3f      	ldr	r3, [pc, #252]	@ (80069e8 <ai_platform_inputs_get+0x2cc>)
 80068ea:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 80068ee:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d113      	bne.n	800691e <ai_platform_inputs_get+0x202>
 80068f6:	f7ff fd33 	bl	8006360 <_ai_platform_release_crc>
 80068fa:	2000      	movs	r0, #0
 80068fc:	b005      	add	sp, #20
 80068fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006902:	4a37      	ldr	r2, [pc, #220]	@ (80069e0 <ai_platform_inputs_get+0x2c4>)
 8006904:	2301      	movs	r3, #1
 8006906:	6093      	str	r3, [r2, #8]
 8006908:	6893      	ldr	r3, [r2, #8]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1fc      	bne.n	8006908 <ai_platform_inputs_get+0x1ec>
 800690e:	4b35      	ldr	r3, [pc, #212]	@ (80069e4 <ai_platform_inputs_get+0x2c8>)
 8006910:	6013      	str	r3, [r2, #0]
 8006912:	4b35      	ldr	r3, [pc, #212]	@ (80069e8 <ai_platform_inputs_get+0x2cc>)
 8006914:	6812      	ldr	r2, [r2, #0]
 8006916:	429a      	cmp	r2, r3
 8006918:	f43f af3b 	beq.w	8006792 <ai_platform_inputs_get+0x76>
 800691c:	e7fe      	b.n	800691c <ai_platform_inputs_get+0x200>
 800691e:	e7fe      	b.n	800691e <ai_platform_inputs_get+0x202>
 8006920:	4a32      	ldr	r2, [pc, #200]	@ (80069ec <ai_platform_inputs_get+0x2d0>)
 8006922:	2301      	movs	r3, #1
 8006924:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006928:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800692c:	2b00      	cmp	r3, #0
 800692e:	d1fb      	bne.n	8006928 <ai_platform_inputs_get+0x20c>
 8006930:	4b2c      	ldr	r3, [pc, #176]	@ (80069e4 <ai_platform_inputs_get+0x2c8>)
 8006932:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8006936:	4b2c      	ldr	r3, [pc, #176]	@ (80069e8 <ai_platform_inputs_get+0x2cc>)
 8006938:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800693c:	429a      	cmp	r2, r3
 800693e:	f43f af28 	beq.w	8006792 <ai_platform_inputs_get+0x76>
 8006942:	e7fe      	b.n	8006942 <ai_platform_inputs_get+0x226>
 8006944:	2400      	movs	r4, #0
 8006946:	2218      	movs	r2, #24
 8006948:	2111      	movs	r1, #17
 800694a:	f109 0010 	add.w	r0, r9, #16
 800694e:	f001 f97d 	bl	8007c4c <core_set_error>
 8006952:	4620      	mov	r0, r4
 8006954:	9b02      	ldr	r3, [sp, #8]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d0d0      	beq.n	80068fc <ai_platform_inputs_get+0x1e0>
 800695a:	801c      	strh	r4, [r3, #0]
 800695c:	b005      	add	sp, #20
 800695e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006962:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006966:	2c00      	cmp	r4, #0
 8006968:	d0ec      	beq.n	8006944 <ai_platform_inputs_get+0x228>
 800696a:	f8da 3008 	ldr.w	r3, [sl, #8]
 800696e:	6858      	ldr	r0, [r3, #4]
 8006970:	e7f0      	b.n	8006954 <ai_platform_inputs_get+0x238>
 8006972:	4a1e      	ldr	r2, [pc, #120]	@ (80069ec <ai_platform_inputs_get+0x2d0>)
 8006974:	2301      	movs	r3, #1
 8006976:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800697a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800697e:	2b00      	cmp	r3, #0
 8006980:	d1fb      	bne.n	800697a <ai_platform_inputs_get+0x25e>
 8006982:	4918      	ldr	r1, [pc, #96]	@ (80069e4 <ai_platform_inputs_get+0x2c8>)
 8006984:	4b18      	ldr	r3, [pc, #96]	@ (80069e8 <ai_platform_inputs_get+0x2cc>)
 8006986:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 800698a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800698e:	429a      	cmp	r2, r3
 8006990:	d0b1      	beq.n	80068f6 <ai_platform_inputs_get+0x1da>
 8006992:	e7fe      	b.n	8006992 <ai_platform_inputs_get+0x276>
 8006994:	4a15      	ldr	r2, [pc, #84]	@ (80069ec <ai_platform_inputs_get+0x2d0>)
 8006996:	2301      	movs	r3, #1
 8006998:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800699c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d1fb      	bne.n	800699c <ai_platform_inputs_get+0x280>
 80069a4:	4b0f      	ldr	r3, [pc, #60]	@ (80069e4 <ai_platform_inputs_get+0x2c8>)
 80069a6:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 80069aa:	4b0f      	ldr	r3, [pc, #60]	@ (80069e8 <ai_platform_inputs_get+0x2cc>)
 80069ac:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 80069b0:	429a      	cmp	r2, r3
 80069b2:	f43f aeee 	beq.w	8006792 <ai_platform_inputs_get+0x76>
 80069b6:	e7fe      	b.n	80069b6 <ai_platform_inputs_get+0x29a>
 80069b8:	4a09      	ldr	r2, [pc, #36]	@ (80069e0 <ai_platform_inputs_get+0x2c4>)
 80069ba:	2301      	movs	r3, #1
 80069bc:	6093      	str	r3, [r2, #8]
 80069be:	6893      	ldr	r3, [r2, #8]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d1fc      	bne.n	80069be <ai_platform_inputs_get+0x2a2>
 80069c4:	4b07      	ldr	r3, [pc, #28]	@ (80069e4 <ai_platform_inputs_get+0x2c8>)
 80069c6:	6013      	str	r3, [r2, #0]
 80069c8:	4b07      	ldr	r3, [pc, #28]	@ (80069e8 <ai_platform_inputs_get+0x2cc>)
 80069ca:	6812      	ldr	r2, [r2, #0]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	f43f aee0 	beq.w	8006792 <ai_platform_inputs_get+0x76>
 80069d2:	e7fe      	b.n	80069d2 <ai_platform_inputs_get+0x2b6>
 80069d4:	a1c00100 	.word	0xa1c00100
 80069d8:	e0042000 	.word	0xe0042000
 80069dc:	5c001000 	.word	0x5c001000
 80069e0:	40023000 	.word	0x40023000
 80069e4:	f407a5c2 	.word	0xf407a5c2
 80069e8:	b5e8b5cd 	.word	0xb5e8b5cd
 80069ec:	58024000 	.word	0x58024000
 80069f0:	4a0d      	ldr	r2, [pc, #52]	@ (8006a28 <ai_platform_inputs_get+0x30c>)
 80069f2:	2301      	movs	r3, #1
 80069f4:	6093      	str	r3, [r2, #8]
 80069f6:	6893      	ldr	r3, [r2, #8]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d1fc      	bne.n	80069f6 <ai_platform_inputs_get+0x2da>
 80069fc:	490b      	ldr	r1, [pc, #44]	@ (8006a2c <ai_platform_inputs_get+0x310>)
 80069fe:	4b0c      	ldr	r3, [pc, #48]	@ (8006a30 <ai_platform_inputs_get+0x314>)
 8006a00:	6011      	str	r1, [r2, #0]
 8006a02:	6812      	ldr	r2, [r2, #0]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	f43f af76 	beq.w	80068f6 <ai_platform_inputs_get+0x1da>
 8006a0a:	e7fe      	b.n	8006a0a <ai_platform_inputs_get+0x2ee>
 8006a0c:	4a06      	ldr	r2, [pc, #24]	@ (8006a28 <ai_platform_inputs_get+0x30c>)
 8006a0e:	2301      	movs	r3, #1
 8006a10:	6093      	str	r3, [r2, #8]
 8006a12:	6893      	ldr	r3, [r2, #8]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d1fc      	bne.n	8006a12 <ai_platform_inputs_get+0x2f6>
 8006a18:	4b04      	ldr	r3, [pc, #16]	@ (8006a2c <ai_platform_inputs_get+0x310>)
 8006a1a:	6013      	str	r3, [r2, #0]
 8006a1c:	4b04      	ldr	r3, [pc, #16]	@ (8006a30 <ai_platform_inputs_get+0x314>)
 8006a1e:	6812      	ldr	r2, [r2, #0]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	f43f aeb6 	beq.w	8006792 <ai_platform_inputs_get+0x76>
 8006a26:	e7fe      	b.n	8006a26 <ai_platform_inputs_get+0x30a>
 8006a28:	40023000 	.word	0x40023000
 8006a2c:	f407a5c2 	.word	0xf407a5c2
 8006a30:	b5e8b5cd 	.word	0xb5e8b5cd

08006a34 <ai_platform_outputs_get>:
 8006a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a38:	b085      	sub	sp, #20
 8006a3a:	9102      	str	r1, [sp, #8]
 8006a3c:	2800      	cmp	r0, #0
 8006a3e:	f000 808f 	beq.w	8006b60 <ai_platform_outputs_get+0x12c>
 8006a42:	4ba8      	ldr	r3, [pc, #672]	@ (8006ce4 <ai_platform_outputs_get+0x2b0>)
 8006a44:	4681      	mov	r9, r0
 8006a46:	6802      	ldr	r2, [r0, #0]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	f040 8089 	bne.w	8006b60 <ai_platform_outputs_get+0x12c>
 8006a4e:	f7ff fc85 	bl	800635c <_ai_platform_acquire_crc>
 8006a52:	4ba5      	ldr	r3, [pc, #660]	@ (8006ce8 <ai_platform_outputs_get+0x2b4>)
 8006a54:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a5e:	189a      	adds	r2, r3, r2
 8006a60:	2a01      	cmp	r2, #1
 8006a62:	f240 80d6 	bls.w	8006c12 <ai_platform_outputs_get+0x1de>
 8006a66:	f240 4249 	movw	r2, #1097	@ 0x449
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	f000 80d1 	beq.w	8006c12 <ai_platform_outputs_get+0x1de>
 8006a70:	4a9e      	ldr	r2, [pc, #632]	@ (8006cec <ai_platform_outputs_get+0x2b8>)
 8006a72:	6813      	ldr	r3, [r2, #0]
 8006a74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a78:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8006a7c:	f000 80d8 	beq.w	8006c30 <ai_platform_outputs_get+0x1fc>
 8006a80:	6813      	ldr	r3, [r2, #0]
 8006a82:	f240 4183 	movw	r1, #1155	@ 0x483
 8006a86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a8a:	428b      	cmp	r3, r1
 8006a8c:	f000 8109 	beq.w	8006ca2 <ai_platform_outputs_get+0x26e>
 8006a90:	6813      	ldr	r3, [r2, #0]
 8006a92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a96:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8006a9a:	f000 813f 	beq.w	8006d1c <ai_platform_outputs_get+0x2e8>
 8006a9e:	6813      	ldr	r3, [r2, #0]
 8006aa0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	f000 810e 	beq.w	8006cc6 <ai_platform_outputs_get+0x292>
 8006aaa:	f7ff fc59 	bl	8006360 <_ai_platform_release_crc>
 8006aae:	f8b9 302c 	ldrh.w	r3, [r9, #44]	@ 0x2c
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	f240 80db 	bls.w	8006c6e <ai_platform_outputs_get+0x23a>
 8006ab8:	2100      	movs	r1, #0
 8006aba:	f8d9 a030 	ldr.w	sl, [r9, #48]	@ 0x30
 8006abe:	f8cd 900c 	str.w	r9, [sp, #12]
 8006ac2:	460d      	mov	r5, r1
 8006ac4:	4689      	mov	r9, r1
 8006ac6:	e016      	b.n	8006af6 <ai_platform_outputs_get+0xc2>
 8006ac8:	9a01      	ldr	r2, [sp, #4]
 8006aca:	2301      	movs	r3, #1
 8006acc:	f848 3002 	str.w	r3, [r8, r2]
 8006ad0:	69b2      	ldr	r2, [r6, #24]
 8006ad2:	f04f 0301 	mov.w	r3, #1
 8006ad6:	6856      	ldr	r6, [r2, #4]
 8006ad8:	3501      	adds	r5, #1
 8006ada:	f109 091c 	add.w	r9, r9, #28
 8006ade:	7523      	strb	r3, [r4, #20]
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	6962      	ldr	r2, [r4, #20]
 8006ae4:	60a7      	str	r7, [r4, #8]
 8006ae6:	f36b 221f 	bfi	r2, fp, #8, #24
 8006aea:	6126      	str	r6, [r4, #16]
 8006aec:	61a1      	str	r1, [r4, #24]
 8006aee:	60e3      	str	r3, [r4, #12]
 8006af0:	6162      	str	r2, [r4, #20]
 8006af2:	e9c4 0c00 	strd	r0, ip, [r4]
 8006af6:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8006afa:	b2ac      	uxth	r4, r5
 8006afc:	42ab      	cmp	r3, r5
 8006afe:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 8006b02:	9301      	str	r3, [sp, #4]
 8006b04:	f240 80a6 	bls.w	8006c54 <ai_platform_outputs_get+0x220>
 8006b08:	f8da 3010 	ldr.w	r3, [sl, #16]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f000 80a1 	beq.w	8006c54 <ai_platform_outputs_get+0x220>
 8006b12:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8006b16:	2e00      	cmp	r6, #0
 8006b18:	f000 809c 	beq.w	8006c54 <ai_platform_outputs_get+0x220>
 8006b1c:	f8da 3014 	ldr.w	r3, [sl, #20]
 8006b20:	69b2      	ldr	r2, [r6, #24]
 8006b22:	68f1      	ldr	r1, [r6, #12]
 8006b24:	6810      	ldr	r0, [r2, #0]
 8006b26:	9100      	str	r1, [sp, #0]
 8006b28:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 8006b2c:	68b3      	ldr	r3, [r6, #8]
 8006b2e:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8006b32:	444c      	add	r4, r9
 8006b34:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 8006b38:	f004 ff90 	bl	800ba5c <ai_array_to_buffer_fmt>
 8006b3c:	69b2      	ldr	r2, [r6, #24]
 8006b3e:	9900      	ldr	r1, [sp, #0]
 8006b40:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8006b44:	2f00      	cmp	r7, #0
 8006b46:	d0c4      	beq.n	8006ad2 <ai_platform_outputs_get+0x9e>
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 8006b4e:	6832      	ldr	r2, [r6, #0]
 8006b50:	607a      	str	r2, [r7, #4]
 8006b52:	b112      	cbz	r2, 8006b5a <ai_platform_outputs_get+0x126>
 8006b54:	8852      	ldrh	r2, [r2, #2]
 8006b56:	2a00      	cmp	r2, #0
 8006b58:	d1b6      	bne.n	8006ac8 <ai_platform_outputs_get+0x94>
 8006b5a:	69b2      	ldr	r2, [r6, #24]
 8006b5c:	2700      	movs	r7, #0
 8006b5e:	e7b8      	b.n	8006ad2 <ai_platform_outputs_get+0x9e>
 8006b60:	f7ff fbfc 	bl	800635c <_ai_platform_acquire_crc>
 8006b64:	4b60      	ldr	r3, [pc, #384]	@ (8006ce8 <ai_platform_outputs_get+0x2b4>)
 8006b66:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b70:	185a      	adds	r2, r3, r1
 8006b72:	2a01      	cmp	r2, #1
 8006b74:	d92a      	bls.n	8006bcc <ai_platform_outputs_get+0x198>
 8006b76:	f240 4249 	movw	r2, #1097	@ 0x449
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d026      	beq.n	8006bcc <ai_platform_outputs_get+0x198>
 8006b7e:	4a5b      	ldr	r2, [pc, #364]	@ (8006cec <ai_platform_outputs_get+0x2b8>)
 8006b80:	6813      	ldr	r3, [r2, #0]
 8006b82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b86:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8006b8a:	d02c      	beq.n	8006be6 <ai_platform_outputs_get+0x1b2>
 8006b8c:	6813      	ldr	r3, [r2, #0]
 8006b8e:	f240 4183 	movw	r1, #1155	@ 0x483
 8006b92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b96:	428b      	cmp	r3, r1
 8006b98:	d072      	beq.n	8006c80 <ai_platform_outputs_get+0x24c>
 8006b9a:	6813      	ldr	r3, [r2, #0]
 8006b9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ba0:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8006ba4:	f000 80ac 	beq.w	8006d00 <ai_platform_outputs_get+0x2cc>
 8006ba8:	6813      	ldr	r3, [r2, #0]
 8006baa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d129      	bne.n	8006c06 <ai_platform_outputs_get+0x1d2>
 8006bb2:	4a4f      	ldr	r2, [pc, #316]	@ (8006cf0 <ai_platform_outputs_get+0x2bc>)
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	6093      	str	r3, [r2, #8]
 8006bb8:	6893      	ldr	r3, [r2, #8]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1fc      	bne.n	8006bb8 <ai_platform_outputs_get+0x184>
 8006bbe:	494d      	ldr	r1, [pc, #308]	@ (8006cf4 <ai_platform_outputs_get+0x2c0>)
 8006bc0:	4b4d      	ldr	r3, [pc, #308]	@ (8006cf8 <ai_platform_outputs_get+0x2c4>)
 8006bc2:	6011      	str	r1, [r2, #0]
 8006bc4:	6812      	ldr	r2, [r2, #0]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d01d      	beq.n	8006c06 <ai_platform_outputs_get+0x1d2>
 8006bca:	e7fe      	b.n	8006bca <ai_platform_outputs_get+0x196>
 8006bcc:	4a48      	ldr	r2, [pc, #288]	@ (8006cf0 <ai_platform_outputs_get+0x2bc>)
 8006bce:	2301      	movs	r3, #1
 8006bd0:	6093      	str	r3, [r2, #8]
 8006bd2:	6893      	ldr	r3, [r2, #8]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d1fc      	bne.n	8006bd2 <ai_platform_outputs_get+0x19e>
 8006bd8:	4946      	ldr	r1, [pc, #280]	@ (8006cf4 <ai_platform_outputs_get+0x2c0>)
 8006bda:	4b47      	ldr	r3, [pc, #284]	@ (8006cf8 <ai_platform_outputs_get+0x2c4>)
 8006bdc:	6011      	str	r1, [r2, #0]
 8006bde:	6812      	ldr	r2, [r2, #0]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d010      	beq.n	8006c06 <ai_platform_outputs_get+0x1d2>
 8006be4:	e7fe      	b.n	8006be4 <ai_platform_outputs_get+0x1b0>
 8006be6:	4a45      	ldr	r2, [pc, #276]	@ (8006cfc <ai_platform_outputs_get+0x2c8>)
 8006be8:	2301      	movs	r3, #1
 8006bea:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006bee:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1fb      	bne.n	8006bee <ai_platform_outputs_get+0x1ba>
 8006bf6:	493f      	ldr	r1, [pc, #252]	@ (8006cf4 <ai_platform_outputs_get+0x2c0>)
 8006bf8:	4b3f      	ldr	r3, [pc, #252]	@ (8006cf8 <ai_platform_outputs_get+0x2c4>)
 8006bfa:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8006bfe:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d113      	bne.n	8006c2e <ai_platform_outputs_get+0x1fa>
 8006c06:	f7ff fbab 	bl	8006360 <_ai_platform_release_crc>
 8006c0a:	2000      	movs	r0, #0
 8006c0c:	b005      	add	sp, #20
 8006c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c12:	4a37      	ldr	r2, [pc, #220]	@ (8006cf0 <ai_platform_outputs_get+0x2bc>)
 8006c14:	2301      	movs	r3, #1
 8006c16:	6093      	str	r3, [r2, #8]
 8006c18:	6893      	ldr	r3, [r2, #8]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d1fc      	bne.n	8006c18 <ai_platform_outputs_get+0x1e4>
 8006c1e:	4b35      	ldr	r3, [pc, #212]	@ (8006cf4 <ai_platform_outputs_get+0x2c0>)
 8006c20:	6013      	str	r3, [r2, #0]
 8006c22:	4b35      	ldr	r3, [pc, #212]	@ (8006cf8 <ai_platform_outputs_get+0x2c4>)
 8006c24:	6812      	ldr	r2, [r2, #0]
 8006c26:	429a      	cmp	r2, r3
 8006c28:	f43f af3f 	beq.w	8006aaa <ai_platform_outputs_get+0x76>
 8006c2c:	e7fe      	b.n	8006c2c <ai_platform_outputs_get+0x1f8>
 8006c2e:	e7fe      	b.n	8006c2e <ai_platform_outputs_get+0x1fa>
 8006c30:	4a32      	ldr	r2, [pc, #200]	@ (8006cfc <ai_platform_outputs_get+0x2c8>)
 8006c32:	2301      	movs	r3, #1
 8006c34:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006c38:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d1fb      	bne.n	8006c38 <ai_platform_outputs_get+0x204>
 8006c40:	4b2c      	ldr	r3, [pc, #176]	@ (8006cf4 <ai_platform_outputs_get+0x2c0>)
 8006c42:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8006c46:	4b2c      	ldr	r3, [pc, #176]	@ (8006cf8 <ai_platform_outputs_get+0x2c4>)
 8006c48:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	f43f af2c 	beq.w	8006aaa <ai_platform_outputs_get+0x76>
 8006c52:	e7fe      	b.n	8006c52 <ai_platform_outputs_get+0x21e>
 8006c54:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006c58:	b14c      	cbz	r4, 8006c6e <ai_platform_outputs_get+0x23a>
 8006c5a:	f8da 3014 	ldr.w	r3, [sl, #20]
 8006c5e:	6858      	ldr	r0, [r3, #4]
 8006c60:	9b02      	ldr	r3, [sp, #8]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d0d2      	beq.n	8006c0c <ai_platform_outputs_get+0x1d8>
 8006c66:	801c      	strh	r4, [r3, #0]
 8006c68:	b005      	add	sp, #20
 8006c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c6e:	2400      	movs	r4, #0
 8006c70:	2218      	movs	r2, #24
 8006c72:	2111      	movs	r1, #17
 8006c74:	f109 0010 	add.w	r0, r9, #16
 8006c78:	f000 ffe8 	bl	8007c4c <core_set_error>
 8006c7c:	4620      	mov	r0, r4
 8006c7e:	e7ef      	b.n	8006c60 <ai_platform_outputs_get+0x22c>
 8006c80:	4a1e      	ldr	r2, [pc, #120]	@ (8006cfc <ai_platform_outputs_get+0x2c8>)
 8006c82:	2301      	movs	r3, #1
 8006c84:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006c88:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d1fb      	bne.n	8006c88 <ai_platform_outputs_get+0x254>
 8006c90:	4918      	ldr	r1, [pc, #96]	@ (8006cf4 <ai_platform_outputs_get+0x2c0>)
 8006c92:	4b19      	ldr	r3, [pc, #100]	@ (8006cf8 <ai_platform_outputs_get+0x2c4>)
 8006c94:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8006c98:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d0b2      	beq.n	8006c06 <ai_platform_outputs_get+0x1d2>
 8006ca0:	e7fe      	b.n	8006ca0 <ai_platform_outputs_get+0x26c>
 8006ca2:	4a16      	ldr	r2, [pc, #88]	@ (8006cfc <ai_platform_outputs_get+0x2c8>)
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006caa:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1fb      	bne.n	8006caa <ai_platform_outputs_get+0x276>
 8006cb2:	4b10      	ldr	r3, [pc, #64]	@ (8006cf4 <ai_platform_outputs_get+0x2c0>)
 8006cb4:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8006cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8006cf8 <ai_platform_outputs_get+0x2c4>)
 8006cba:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	f43f aef3 	beq.w	8006aaa <ai_platform_outputs_get+0x76>
 8006cc4:	e7fe      	b.n	8006cc4 <ai_platform_outputs_get+0x290>
 8006cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8006cf0 <ai_platform_outputs_get+0x2bc>)
 8006cc8:	2301      	movs	r3, #1
 8006cca:	6093      	str	r3, [r2, #8]
 8006ccc:	6893      	ldr	r3, [r2, #8]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d1fc      	bne.n	8006ccc <ai_platform_outputs_get+0x298>
 8006cd2:	4b08      	ldr	r3, [pc, #32]	@ (8006cf4 <ai_platform_outputs_get+0x2c0>)
 8006cd4:	6013      	str	r3, [r2, #0]
 8006cd6:	4b08      	ldr	r3, [pc, #32]	@ (8006cf8 <ai_platform_outputs_get+0x2c4>)
 8006cd8:	6812      	ldr	r2, [r2, #0]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	f43f aee5 	beq.w	8006aaa <ai_platform_outputs_get+0x76>
 8006ce0:	e7fe      	b.n	8006ce0 <ai_platform_outputs_get+0x2ac>
 8006ce2:	bf00      	nop
 8006ce4:	a1c00100 	.word	0xa1c00100
 8006ce8:	e0042000 	.word	0xe0042000
 8006cec:	5c001000 	.word	0x5c001000
 8006cf0:	40023000 	.word	0x40023000
 8006cf4:	f407a5c2 	.word	0xf407a5c2
 8006cf8:	b5e8b5cd 	.word	0xb5e8b5cd
 8006cfc:	58024000 	.word	0x58024000
 8006d00:	4a0d      	ldr	r2, [pc, #52]	@ (8006d38 <ai_platform_outputs_get+0x304>)
 8006d02:	2301      	movs	r3, #1
 8006d04:	6093      	str	r3, [r2, #8]
 8006d06:	6893      	ldr	r3, [r2, #8]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d1fc      	bne.n	8006d06 <ai_platform_outputs_get+0x2d2>
 8006d0c:	490b      	ldr	r1, [pc, #44]	@ (8006d3c <ai_platform_outputs_get+0x308>)
 8006d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8006d40 <ai_platform_outputs_get+0x30c>)
 8006d10:	6011      	str	r1, [r2, #0]
 8006d12:	6812      	ldr	r2, [r2, #0]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	f43f af76 	beq.w	8006c06 <ai_platform_outputs_get+0x1d2>
 8006d1a:	e7fe      	b.n	8006d1a <ai_platform_outputs_get+0x2e6>
 8006d1c:	4a06      	ldr	r2, [pc, #24]	@ (8006d38 <ai_platform_outputs_get+0x304>)
 8006d1e:	2301      	movs	r3, #1
 8006d20:	6093      	str	r3, [r2, #8]
 8006d22:	6893      	ldr	r3, [r2, #8]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1fc      	bne.n	8006d22 <ai_platform_outputs_get+0x2ee>
 8006d28:	4b04      	ldr	r3, [pc, #16]	@ (8006d3c <ai_platform_outputs_get+0x308>)
 8006d2a:	6013      	str	r3, [r2, #0]
 8006d2c:	4b04      	ldr	r3, [pc, #16]	@ (8006d40 <ai_platform_outputs_get+0x30c>)
 8006d2e:	6812      	ldr	r2, [r2, #0]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	f43f aeba 	beq.w	8006aaa <ai_platform_outputs_get+0x76>
 8006d36:	e7fe      	b.n	8006d36 <ai_platform_outputs_get+0x302>
 8006d38:	40023000 	.word	0x40023000
 8006d3c:	f407a5c2 	.word	0xf407a5c2
 8006d40:	b5e8b5cd 	.word	0xb5e8b5cd

08006d44 <ai_platform_network_create>:
 8006d44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006d48:	b083      	sub	sp, #12
 8006d4a:	4604      	mov	r4, r0
 8006d4c:	4615      	mov	r5, r2
 8006d4e:	461e      	mov	r6, r3
 8006d50:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 8006d54:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 8006d58:	f7ff fb00 	bl	800635c <_ai_platform_acquire_crc>
 8006d5c:	2800      	cmp	r0, #0
 8006d5e:	f000 80bd 	beq.w	8006edc <ai_platform_network_create+0x198>
 8006d62:	4ba5      	ldr	r3, [pc, #660]	@ (8006ff8 <ai_platform_network_create+0x2b4>)
 8006d64:	f46f 6c8a 	mvn.w	ip, #1104	@ 0x450
 8006d68:	4601      	mov	r1, r0
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d70:	eb03 020c 	add.w	r2, r3, ip
 8006d74:	2a01      	cmp	r2, #1
 8006d76:	f240 80a8 	bls.w	8006eca <ai_platform_network_create+0x186>
 8006d7a:	f240 4249 	movw	r2, #1097	@ 0x449
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	f000 80a3 	beq.w	8006eca <ai_platform_network_create+0x186>
 8006d84:	4a9d      	ldr	r2, [pc, #628]	@ (8006ffc <ai_platform_network_create+0x2b8>)
 8006d86:	6813      	ldr	r3, [r2, #0]
 8006d88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d8c:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8006d90:	f000 80b9 	beq.w	8006f06 <ai_platform_network_create+0x1c2>
 8006d94:	6813      	ldr	r3, [r2, #0]
 8006d96:	f240 4c83 	movw	ip, #1155	@ 0x483
 8006d9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d9e:	4563      	cmp	r3, ip
 8006da0:	f000 80a1 	beq.w	8006ee6 <ai_platform_network_create+0x1a2>
 8006da4:	6813      	ldr	r3, [r2, #0]
 8006da6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006daa:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8006dae:	f000 8153 	beq.w	8007058 <ai_platform_network_create+0x314>
 8006db2:	6813      	ldr	r3, [r2, #0]
 8006db4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	f040 808d 	bne.w	8006ed8 <ai_platform_network_create+0x194>
 8006dbe:	4a90      	ldr	r2, [pc, #576]	@ (8007000 <ai_platform_network_create+0x2bc>)
 8006dc0:	2318      	movs	r3, #24
 8006dc2:	6093      	str	r3, [r2, #8]
 8006dc4:	6893      	ldr	r3, [r2, #8]
 8006dc6:	2b18      	cmp	r3, #24
 8006dc8:	f040 8086 	bne.w	8006ed8 <ai_platform_network_create+0x194>
 8006dcc:	2301      	movs	r3, #1
 8006dce:	6093      	str	r3, [r2, #8]
 8006dd0:	6893      	ldr	r3, [r2, #8]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1fc      	bne.n	8006dd0 <ai_platform_network_create+0x8c>
 8006dd6:	4608      	mov	r0, r1
 8006dd8:	f7ff fac2 	bl	8006360 <_ai_platform_release_crc>
 8006ddc:	f7ff fabe 	bl	800635c <_ai_platform_acquire_crc>
 8006de0:	4b85      	ldr	r3, [pc, #532]	@ (8006ff8 <ai_platform_network_create+0x2b4>)
 8006de2:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006dec:	189a      	adds	r2, r3, r2
 8006dee:	2a01      	cmp	r2, #1
 8006df0:	f240 809f 	bls.w	8006f32 <ai_platform_network_create+0x1ee>
 8006df4:	f240 4249 	movw	r2, #1097	@ 0x449
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	f000 809a 	beq.w	8006f32 <ai_platform_network_create+0x1ee>
 8006dfe:	4a7f      	ldr	r2, [pc, #508]	@ (8006ffc <ai_platform_network_create+0x2b8>)
 8006e00:	6813      	ldr	r3, [r2, #0]
 8006e02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e06:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8006e0a:	f000 80a0 	beq.w	8006f4e <ai_platform_network_create+0x20a>
 8006e0e:	6813      	ldr	r3, [r2, #0]
 8006e10:	f240 4183 	movw	r1, #1155	@ 0x483
 8006e14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e18:	428b      	cmp	r3, r1
 8006e1a:	f000 80bf 	beq.w	8006f9c <ai_platform_network_create+0x258>
 8006e1e:	6813      	ldr	r3, [r2, #0]
 8006e20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e24:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8006e28:	f000 8123 	beq.w	8007072 <ai_platform_network_create+0x32e>
 8006e2c:	6813      	ldr	r3, [r2, #0]
 8006e2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	f000 80c4 	beq.w	8006fc0 <ai_platform_network_create+0x27c>
 8006e38:	f7ff fa92 	bl	8006360 <_ai_platform_release_crc>
 8006e3c:	2c00      	cmp	r4, #0
 8006e3e:	f000 80aa 	beq.w	8006f96 <ai_platform_network_create+0x252>
 8006e42:	4b70      	ldr	r3, [pc, #448]	@ (8007004 <ai_platform_network_create+0x2c0>)
 8006e44:	602b      	str	r3, [r5, #0]
 8006e46:	6025      	str	r5, [r4, #0]
 8006e48:	f000 fef8 	bl	8007c3c <core_init>
 8006e4c:	2800      	cmp	r0, #0
 8006e4e:	f000 8090 	beq.w	8006f72 <ai_platform_network_create+0x22e>
 8006e52:	f7ff fa83 	bl	800635c <_ai_platform_acquire_crc>
 8006e56:	4b68      	ldr	r3, [pc, #416]	@ (8006ff8 <ai_platform_network_create+0x2b4>)
 8006e58:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e62:	185a      	adds	r2, r3, r1
 8006e64:	2a01      	cmp	r2, #1
 8006e66:	f240 80b9 	bls.w	8006fdc <ai_platform_network_create+0x298>
 8006e6a:	f240 4249 	movw	r2, #1097	@ 0x449
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	f000 80b4 	beq.w	8006fdc <ai_platform_network_create+0x298>
 8006e74:	4a61      	ldr	r2, [pc, #388]	@ (8006ffc <ai_platform_network_create+0x2b8>)
 8006e76:	6813      	ldr	r3, [r2, #0]
 8006e78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e7c:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8006e80:	f000 80c8 	beq.w	8007014 <ai_platform_network_create+0x2d0>
 8006e84:	6813      	ldr	r3, [r2, #0]
 8006e86:	f240 4183 	movw	r1, #1155	@ 0x483
 8006e8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e8e:	428b      	cmp	r3, r1
 8006e90:	f000 8107 	beq.w	80070a2 <ai_platform_network_create+0x35e>
 8006e94:	6813      	ldr	r3, [r2, #0]
 8006e96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e9a:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8006e9e:	f000 8111 	beq.w	80070c4 <ai_platform_network_create+0x380>
 8006ea2:	6813      	ldr	r3, [r2, #0]
 8006ea4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	f040 80c3 	bne.w	8007034 <ai_platform_network_create+0x2f0>
 8006eae:	4b54      	ldr	r3, [pc, #336]	@ (8007000 <ai_platform_network_create+0x2bc>)
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	609a      	str	r2, [r3, #8]
 8006eb4:	689a      	ldr	r2, [r3, #8]
 8006eb6:	2a00      	cmp	r2, #0
 8006eb8:	d1fc      	bne.n	8006eb4 <ai_platform_network_create+0x170>
 8006eba:	4a53      	ldr	r2, [pc, #332]	@ (8007008 <ai_platform_network_create+0x2c4>)
 8006ebc:	601a      	str	r2, [r3, #0]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	4b52      	ldr	r3, [pc, #328]	@ (800700c <ai_platform_network_create+0x2c8>)
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	f000 80b6 	beq.w	8007034 <ai_platform_network_create+0x2f0>
 8006ec8:	e7fe      	b.n	8006ec8 <ai_platform_network_create+0x184>
 8006eca:	4b4d      	ldr	r3, [pc, #308]	@ (8007000 <ai_platform_network_create+0x2bc>)
 8006ecc:	2218      	movs	r2, #24
 8006ece:	609a      	str	r2, [r3, #8]
 8006ed0:	689a      	ldr	r2, [r3, #8]
 8006ed2:	2a18      	cmp	r2, #24
 8006ed4:	d027      	beq.n	8006f26 <ai_platform_network_create+0x1e2>
 8006ed6:	4608      	mov	r0, r1
 8006ed8:	f7ff fa42 	bl	8006360 <_ai_platform_release_crc>
 8006edc:	f244 1033 	movw	r0, #16691	@ 0x4133
 8006ee0:	b003      	add	sp, #12
 8006ee2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ee6:	4a4a      	ldr	r2, [pc, #296]	@ (8007010 <ai_platform_network_create+0x2cc>)
 8006ee8:	2318      	movs	r3, #24
 8006eea:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006eee:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006ef2:	2b18      	cmp	r3, #24
 8006ef4:	d1f0      	bne.n	8006ed8 <ai_platform_network_create+0x194>
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006efc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d1fb      	bne.n	8006efc <ai_platform_network_create+0x1b8>
 8006f04:	e767      	b.n	8006dd6 <ai_platform_network_create+0x92>
 8006f06:	4a42      	ldr	r2, [pc, #264]	@ (8007010 <ai_platform_network_create+0x2cc>)
 8006f08:	2318      	movs	r3, #24
 8006f0a:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006f0e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006f12:	2b18      	cmp	r3, #24
 8006f14:	d1e0      	bne.n	8006ed8 <ai_platform_network_create+0x194>
 8006f16:	2301      	movs	r3, #1
 8006f18:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006f1c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d1fb      	bne.n	8006f1c <ai_platform_network_create+0x1d8>
 8006f24:	e757      	b.n	8006dd6 <ai_platform_network_create+0x92>
 8006f26:	2201      	movs	r2, #1
 8006f28:	609a      	str	r2, [r3, #8]
 8006f2a:	689a      	ldr	r2, [r3, #8]
 8006f2c:	2a00      	cmp	r2, #0
 8006f2e:	d1fc      	bne.n	8006f2a <ai_platform_network_create+0x1e6>
 8006f30:	e751      	b.n	8006dd6 <ai_platform_network_create+0x92>
 8006f32:	4a33      	ldr	r2, [pc, #204]	@ (8007000 <ai_platform_network_create+0x2bc>)
 8006f34:	2301      	movs	r3, #1
 8006f36:	6093      	str	r3, [r2, #8]
 8006f38:	6891      	ldr	r1, [r2, #8]
 8006f3a:	2900      	cmp	r1, #0
 8006f3c:	d1fc      	bne.n	8006f38 <ai_platform_network_create+0x1f4>
 8006f3e:	4b32      	ldr	r3, [pc, #200]	@ (8007008 <ai_platform_network_create+0x2c4>)
 8006f40:	6013      	str	r3, [r2, #0]
 8006f42:	4b32      	ldr	r3, [pc, #200]	@ (800700c <ai_platform_network_create+0x2c8>)
 8006f44:	6812      	ldr	r2, [r2, #0]
 8006f46:	429a      	cmp	r2, r3
 8006f48:	f43f af76 	beq.w	8006e38 <ai_platform_network_create+0xf4>
 8006f4c:	e7fe      	b.n	8006f4c <ai_platform_network_create+0x208>
 8006f4e:	4a30      	ldr	r2, [pc, #192]	@ (8007010 <ai_platform_network_create+0x2cc>)
 8006f50:	2301      	movs	r3, #1
 8006f52:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006f56:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d1fb      	bne.n	8006f56 <ai_platform_network_create+0x212>
 8006f5e:	4b2a      	ldr	r3, [pc, #168]	@ (8007008 <ai_platform_network_create+0x2c4>)
 8006f60:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8006f64:	4b29      	ldr	r3, [pc, #164]	@ (800700c <ai_platform_network_create+0x2c8>)
 8006f66:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	f43f af64 	beq.w	8006e38 <ai_platform_network_create+0xf4>
 8006f70:	e7fe      	b.n	8006f70 <ai_platform_network_create+0x22c>
 8006f72:	f04f 0930 	mov.w	r9, #48	@ 0x30
 8006f76:	2300      	movs	r3, #0
 8006f78:	6023      	str	r3, [r4, #0]
 8006f7a:	2410      	movs	r4, #16
 8006f7c:	4642      	mov	r2, r8
 8006f7e:	4639      	mov	r1, r7
 8006f80:	4630      	mov	r0, r6
 8006f82:	f004 fe0f 	bl	800bba4 <ai_version_get>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2000      	movs	r0, #0
 8006f8a:	64ab      	str	r3, [r5, #72]	@ 0x48
 8006f8c:	f369 0007 	bfi	r0, r9, #0, #8
 8006f90:	f364 201f 	bfi	r0, r4, #8, #24
 8006f94:	e7a4      	b.n	8006ee0 <ai_platform_network_create+0x19c>
 8006f96:	f241 0010 	movw	r0, #4112	@ 0x1010
 8006f9a:	e7a1      	b.n	8006ee0 <ai_platform_network_create+0x19c>
 8006f9c:	4a1c      	ldr	r2, [pc, #112]	@ (8007010 <ai_platform_network_create+0x2cc>)
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006fa4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d1fb      	bne.n	8006fa4 <ai_platform_network_create+0x260>
 8006fac:	4b16      	ldr	r3, [pc, #88]	@ (8007008 <ai_platform_network_create+0x2c4>)
 8006fae:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8006fb2:	4b16      	ldr	r3, [pc, #88]	@ (800700c <ai_platform_network_create+0x2c8>)
 8006fb4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	f43f af3d 	beq.w	8006e38 <ai_platform_network_create+0xf4>
 8006fbe:	e7fe      	b.n	8006fbe <ai_platform_network_create+0x27a>
 8006fc0:	4a0f      	ldr	r2, [pc, #60]	@ (8007000 <ai_platform_network_create+0x2bc>)
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	6093      	str	r3, [r2, #8]
 8006fc6:	6893      	ldr	r3, [r2, #8]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d1fc      	bne.n	8006fc6 <ai_platform_network_create+0x282>
 8006fcc:	4b0e      	ldr	r3, [pc, #56]	@ (8007008 <ai_platform_network_create+0x2c4>)
 8006fce:	6013      	str	r3, [r2, #0]
 8006fd0:	4b0e      	ldr	r3, [pc, #56]	@ (800700c <ai_platform_network_create+0x2c8>)
 8006fd2:	6812      	ldr	r2, [r2, #0]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	f43f af2f 	beq.w	8006e38 <ai_platform_network_create+0xf4>
 8006fda:	e7fe      	b.n	8006fda <ai_platform_network_create+0x296>
 8006fdc:	4a08      	ldr	r2, [pc, #32]	@ (8007000 <ai_platform_network_create+0x2bc>)
 8006fde:	2301      	movs	r3, #1
 8006fe0:	6093      	str	r3, [r2, #8]
 8006fe2:	6893      	ldr	r3, [r2, #8]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d1fc      	bne.n	8006fe2 <ai_platform_network_create+0x29e>
 8006fe8:	4b07      	ldr	r3, [pc, #28]	@ (8007008 <ai_platform_network_create+0x2c4>)
 8006fea:	6013      	str	r3, [r2, #0]
 8006fec:	4b07      	ldr	r3, [pc, #28]	@ (800700c <ai_platform_network_create+0x2c8>)
 8006fee:	6812      	ldr	r2, [r2, #0]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d01f      	beq.n	8007034 <ai_platform_network_create+0x2f0>
 8006ff4:	e7fe      	b.n	8006ff4 <ai_platform_network_create+0x2b0>
 8006ff6:	bf00      	nop
 8006ff8:	e0042000 	.word	0xe0042000
 8006ffc:	5c001000 	.word	0x5c001000
 8007000:	40023000 	.word	0x40023000
 8007004:	a1c00100 	.word	0xa1c00100
 8007008:	f407a5c2 	.word	0xf407a5c2
 800700c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007010:	58024000 	.word	0x58024000
 8007014:	4a33      	ldr	r2, [pc, #204]	@ (80070e4 <ai_platform_network_create+0x3a0>)
 8007016:	2301      	movs	r3, #1
 8007018:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800701c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8007020:	2b00      	cmp	r3, #0
 8007022:	d1fb      	bne.n	800701c <ai_platform_network_create+0x2d8>
 8007024:	4b30      	ldr	r3, [pc, #192]	@ (80070e8 <ai_platform_network_create+0x3a4>)
 8007026:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 800702a:	4b30      	ldr	r3, [pc, #192]	@ (80070ec <ai_platform_network_create+0x3a8>)
 800702c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8007030:	429a      	cmp	r2, r3
 8007032:	d12c      	bne.n	800708e <ai_platform_network_create+0x34a>
 8007034:	f7ff f994 	bl	8006360 <_ai_platform_release_crc>
 8007038:	2200      	movs	r2, #0
 800703a:	4639      	mov	r1, r7
 800703c:	4630      	mov	r0, r6
 800703e:	f004 fdb1 	bl	800bba4 <ai_version_get>
 8007042:	4681      	mov	r9, r0
 8007044:	2200      	movs	r2, #0
 8007046:	2105      	movs	r1, #5
 8007048:	2001      	movs	r0, #1
 800704a:	f004 fdab 	bl	800bba4 <ai_version_get>
 800704e:	4581      	cmp	r9, r0
 8007050:	d01e      	beq.n	8007090 <ai_platform_network_create+0x34c>
 8007052:	f04f 0901 	mov.w	r9, #1
 8007056:	e78e      	b.n	8006f76 <ai_platform_network_create+0x232>
 8007058:	4b25      	ldr	r3, [pc, #148]	@ (80070f0 <ai_platform_network_create+0x3ac>)
 800705a:	2218      	movs	r2, #24
 800705c:	609a      	str	r2, [r3, #8]
 800705e:	689a      	ldr	r2, [r3, #8]
 8007060:	2a18      	cmp	r2, #24
 8007062:	f47f af39 	bne.w	8006ed8 <ai_platform_network_create+0x194>
 8007066:	2201      	movs	r2, #1
 8007068:	609a      	str	r2, [r3, #8]
 800706a:	689a      	ldr	r2, [r3, #8]
 800706c:	2a00      	cmp	r2, #0
 800706e:	d1fc      	bne.n	800706a <ai_platform_network_create+0x326>
 8007070:	e6b1      	b.n	8006dd6 <ai_platform_network_create+0x92>
 8007072:	4a1f      	ldr	r2, [pc, #124]	@ (80070f0 <ai_platform_network_create+0x3ac>)
 8007074:	2301      	movs	r3, #1
 8007076:	6093      	str	r3, [r2, #8]
 8007078:	6893      	ldr	r3, [r2, #8]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d1fc      	bne.n	8007078 <ai_platform_network_create+0x334>
 800707e:	4b1a      	ldr	r3, [pc, #104]	@ (80070e8 <ai_platform_network_create+0x3a4>)
 8007080:	6013      	str	r3, [r2, #0]
 8007082:	4b1a      	ldr	r3, [pc, #104]	@ (80070ec <ai_platform_network_create+0x3a8>)
 8007084:	6812      	ldr	r2, [r2, #0]
 8007086:	429a      	cmp	r2, r3
 8007088:	f43f aed6 	beq.w	8006e38 <ai_platform_network_create+0xf4>
 800708c:	e7fe      	b.n	800708c <ai_platform_network_create+0x348>
 800708e:	e7fe      	b.n	800708e <ai_platform_network_create+0x34a>
 8007090:	4b18      	ldr	r3, [pc, #96]	@ (80070f4 <ai_platform_network_create+0x3b0>)
 8007092:	a801      	add	r0, sp, #4
 8007094:	9301      	str	r3, [sp, #4]
 8007096:	f000 ff35 	bl	8007f04 <ai_check_custom_types>
 800709a:	b300      	cbz	r0, 80070de <ai_platform_network_create+0x39a>
 800709c:	2400      	movs	r4, #0
 800709e:	46a1      	mov	r9, r4
 80070a0:	e76c      	b.n	8006f7c <ai_platform_network_create+0x238>
 80070a2:	4b10      	ldr	r3, [pc, #64]	@ (80070e4 <ai_platform_network_create+0x3a0>)
 80070a4:	2201      	movs	r2, #1
 80070a6:	f8c3 2c08 	str.w	r2, [r3, #3080]	@ 0xc08
 80070aa:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	@ 0xc08
 80070ae:	2a00      	cmp	r2, #0
 80070b0:	d1fb      	bne.n	80070aa <ai_platform_network_create+0x366>
 80070b2:	4a0d      	ldr	r2, [pc, #52]	@ (80070e8 <ai_platform_network_create+0x3a4>)
 80070b4:	f8c3 2c00 	str.w	r2, [r3, #3072]	@ 0xc00
 80070b8:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	@ 0xc00
 80070bc:	4b0b      	ldr	r3, [pc, #44]	@ (80070ec <ai_platform_network_create+0x3a8>)
 80070be:	429a      	cmp	r2, r3
 80070c0:	d0b8      	beq.n	8007034 <ai_platform_network_create+0x2f0>
 80070c2:	e7fe      	b.n	80070c2 <ai_platform_network_create+0x37e>
 80070c4:	4b0a      	ldr	r3, [pc, #40]	@ (80070f0 <ai_platform_network_create+0x3ac>)
 80070c6:	2201      	movs	r2, #1
 80070c8:	609a      	str	r2, [r3, #8]
 80070ca:	689a      	ldr	r2, [r3, #8]
 80070cc:	2a00      	cmp	r2, #0
 80070ce:	d1fc      	bne.n	80070ca <ai_platform_network_create+0x386>
 80070d0:	4a05      	ldr	r2, [pc, #20]	@ (80070e8 <ai_platform_network_create+0x3a4>)
 80070d2:	601a      	str	r2, [r3, #0]
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	4b05      	ldr	r3, [pc, #20]	@ (80070ec <ai_platform_network_create+0x3a8>)
 80070d8:	429a      	cmp	r2, r3
 80070da:	d0ab      	beq.n	8007034 <ai_platform_network_create+0x2f0>
 80070dc:	e7fe      	b.n	80070dc <ai_platform_network_create+0x398>
 80070de:	f04f 0902 	mov.w	r9, #2
 80070e2:	e748      	b.n	8006f76 <ai_platform_network_create+0x232>
 80070e4:	58024000 	.word	0x58024000
 80070e8:	f407a5c2 	.word	0xf407a5c2
 80070ec:	b5e8b5cd 	.word	0xb5e8b5cd
 80070f0:	40023000 	.word	0x40023000
 80070f4:	84048403 	.word	0x84048403

080070f8 <ai_platform_network_init>:
 80070f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070fc:	2800      	cmp	r0, #0
 80070fe:	d052      	beq.n	80071a6 <ai_platform_network_init+0xae>
 8007100:	4bab      	ldr	r3, [pc, #684]	@ (80073b0 <ai_platform_network_init+0x2b8>)
 8007102:	4604      	mov	r4, r0
 8007104:	6802      	ldr	r2, [r0, #0]
 8007106:	429a      	cmp	r2, r3
 8007108:	d14d      	bne.n	80071a6 <ai_platform_network_init+0xae>
 800710a:	460d      	mov	r5, r1
 800710c:	f7ff f926 	bl	800635c <_ai_platform_acquire_crc>
 8007110:	4ba8      	ldr	r3, [pc, #672]	@ (80073b4 <ai_platform_network_init+0x2bc>)
 8007112:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800711c:	189a      	adds	r2, r3, r2
 800711e:	2a01      	cmp	r2, #1
 8007120:	f240 809b 	bls.w	800725a <ai_platform_network_init+0x162>
 8007124:	f240 4249 	movw	r2, #1097	@ 0x449
 8007128:	4293      	cmp	r3, r2
 800712a:	f000 8096 	beq.w	800725a <ai_platform_network_init+0x162>
 800712e:	4aa2      	ldr	r2, [pc, #648]	@ (80073b8 <ai_platform_network_init+0x2c0>)
 8007130:	6813      	ldr	r3, [r2, #0]
 8007132:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007136:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 800713a:	f000 809d 	beq.w	8007278 <ai_platform_network_init+0x180>
 800713e:	6813      	ldr	r3, [r2, #0]
 8007140:	f240 4183 	movw	r1, #1155	@ 0x483
 8007144:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007148:	428b      	cmp	r3, r1
 800714a:	f000 80e4 	beq.w	8007316 <ai_platform_network_init+0x21e>
 800714e:	6813      	ldr	r3, [r2, #0]
 8007150:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007154:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8007158:	f000 811b 	beq.w	8007392 <ai_platform_network_init+0x29a>
 800715c:	6813      	ldr	r3, [r2, #0]
 800715e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007162:	2b00      	cmp	r3, #0
 8007164:	f000 80f9 	beq.w	800735a <ai_platform_network_init+0x262>
 8007168:	f7ff f8fa 	bl	8006360 <_ai_platform_release_crc>
 800716c:	2d00      	cmp	r5, #0
 800716e:	f000 8147 	beq.w	8007400 <ai_platform_network_init+0x308>
 8007172:	4b92      	ldr	r3, [pc, #584]	@ (80073bc <ai_platform_network_init+0x2c4>)
 8007174:	682a      	ldr	r2, [r5, #0]
 8007176:	429a      	cmp	r2, r3
 8007178:	f040 8090 	bne.w	800729c <ai_platform_network_init+0x1a4>
 800717c:	692b      	ldr	r3, [r5, #16]
 800717e:	89ae      	ldrh	r6, [r5, #12]
 8007180:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 8007184:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 8007188:	62a3      	str	r3, [r4, #40]	@ 0x28
 800718a:	e9c4 1207 	strd	r1, r2, [r4, #28]
 800718e:	2303      	movs	r3, #3
 8007190:	84a6      	strh	r6, [r4, #36]	@ 0x24
 8007192:	4626      	mov	r6, r4
 8007194:	4620      	mov	r0, r4
 8007196:	f8a4 c026 	strh.w	ip, [r4, #38]	@ 0x26
 800719a:	60e3      	str	r3, [r4, #12]
 800719c:	f000 feda 	bl	8007f54 <ai_layers_init_all>
 80071a0:	4630      	mov	r0, r6
 80071a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071a6:	f7ff f8d9 	bl	800635c <_ai_platform_acquire_crc>
 80071aa:	4b82      	ldr	r3, [pc, #520]	@ (80073b4 <ai_platform_network_init+0x2bc>)
 80071ac:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071b6:	185a      	adds	r2, r3, r1
 80071b8:	2a01      	cmp	r2, #1
 80071ba:	d92b      	bls.n	8007214 <ai_platform_network_init+0x11c>
 80071bc:	f240 4249 	movw	r2, #1097	@ 0x449
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d027      	beq.n	8007214 <ai_platform_network_init+0x11c>
 80071c4:	4a7c      	ldr	r2, [pc, #496]	@ (80073b8 <ai_platform_network_init+0x2c0>)
 80071c6:	6813      	ldr	r3, [r2, #0]
 80071c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071cc:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 80071d0:	d02d      	beq.n	800722e <ai_platform_network_init+0x136>
 80071d2:	6813      	ldr	r3, [r2, #0]
 80071d4:	f240 4183 	movw	r1, #1155	@ 0x483
 80071d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071dc:	428b      	cmp	r3, r1
 80071de:	f000 8089 	beq.w	80072f4 <ai_platform_network_init+0x1fc>
 80071e2:	6813      	ldr	r3, [r2, #0]
 80071e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071e8:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 80071ec:	f000 80c3 	beq.w	8007376 <ai_platform_network_init+0x27e>
 80071f0:	6813      	ldr	r3, [r2, #0]
 80071f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d129      	bne.n	800724e <ai_platform_network_init+0x156>
 80071fa:	4a71      	ldr	r2, [pc, #452]	@ (80073c0 <ai_platform_network_init+0x2c8>)
 80071fc:	2301      	movs	r3, #1
 80071fe:	6093      	str	r3, [r2, #8]
 8007200:	6893      	ldr	r3, [r2, #8]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d1fc      	bne.n	8007200 <ai_platform_network_init+0x108>
 8007206:	496f      	ldr	r1, [pc, #444]	@ (80073c4 <ai_platform_network_init+0x2cc>)
 8007208:	4b6f      	ldr	r3, [pc, #444]	@ (80073c8 <ai_platform_network_init+0x2d0>)
 800720a:	6011      	str	r1, [r2, #0]
 800720c:	6812      	ldr	r2, [r2, #0]
 800720e:	429a      	cmp	r2, r3
 8007210:	d01d      	beq.n	800724e <ai_platform_network_init+0x156>
 8007212:	e7fe      	b.n	8007212 <ai_platform_network_init+0x11a>
 8007214:	4a6a      	ldr	r2, [pc, #424]	@ (80073c0 <ai_platform_network_init+0x2c8>)
 8007216:	2301      	movs	r3, #1
 8007218:	6093      	str	r3, [r2, #8]
 800721a:	6893      	ldr	r3, [r2, #8]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d1fc      	bne.n	800721a <ai_platform_network_init+0x122>
 8007220:	4968      	ldr	r1, [pc, #416]	@ (80073c4 <ai_platform_network_init+0x2cc>)
 8007222:	4b69      	ldr	r3, [pc, #420]	@ (80073c8 <ai_platform_network_init+0x2d0>)
 8007224:	6011      	str	r1, [r2, #0]
 8007226:	6812      	ldr	r2, [r2, #0]
 8007228:	429a      	cmp	r2, r3
 800722a:	d010      	beq.n	800724e <ai_platform_network_init+0x156>
 800722c:	e7fe      	b.n	800722c <ai_platform_network_init+0x134>
 800722e:	4a67      	ldr	r2, [pc, #412]	@ (80073cc <ai_platform_network_init+0x2d4>)
 8007230:	2301      	movs	r3, #1
 8007232:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8007236:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800723a:	2b00      	cmp	r3, #0
 800723c:	d1fb      	bne.n	8007236 <ai_platform_network_init+0x13e>
 800723e:	4961      	ldr	r1, [pc, #388]	@ (80073c4 <ai_platform_network_init+0x2cc>)
 8007240:	4b61      	ldr	r3, [pc, #388]	@ (80073c8 <ai_platform_network_init+0x2d0>)
 8007242:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8007246:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800724a:	429a      	cmp	r2, r3
 800724c:	d113      	bne.n	8007276 <ai_platform_network_init+0x17e>
 800724e:	2600      	movs	r6, #0
 8007250:	f7ff f886 	bl	8006360 <_ai_platform_release_crc>
 8007254:	4630      	mov	r0, r6
 8007256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800725a:	4a59      	ldr	r2, [pc, #356]	@ (80073c0 <ai_platform_network_init+0x2c8>)
 800725c:	2301      	movs	r3, #1
 800725e:	6093      	str	r3, [r2, #8]
 8007260:	6893      	ldr	r3, [r2, #8]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1fc      	bne.n	8007260 <ai_platform_network_init+0x168>
 8007266:	4b57      	ldr	r3, [pc, #348]	@ (80073c4 <ai_platform_network_init+0x2cc>)
 8007268:	6013      	str	r3, [r2, #0]
 800726a:	4b57      	ldr	r3, [pc, #348]	@ (80073c8 <ai_platform_network_init+0x2d0>)
 800726c:	6812      	ldr	r2, [r2, #0]
 800726e:	429a      	cmp	r2, r3
 8007270:	f43f af7a 	beq.w	8007168 <ai_platform_network_init+0x70>
 8007274:	e7fe      	b.n	8007274 <ai_platform_network_init+0x17c>
 8007276:	e7fe      	b.n	8007276 <ai_platform_network_init+0x17e>
 8007278:	4a54      	ldr	r2, [pc, #336]	@ (80073cc <ai_platform_network_init+0x2d4>)
 800727a:	2301      	movs	r3, #1
 800727c:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8007280:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8007284:	2b00      	cmp	r3, #0
 8007286:	d1fb      	bne.n	8007280 <ai_platform_network_init+0x188>
 8007288:	4b4e      	ldr	r3, [pc, #312]	@ (80073c4 <ai_platform_network_init+0x2cc>)
 800728a:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 800728e:	4b4e      	ldr	r3, [pc, #312]	@ (80073c8 <ai_platform_network_init+0x2d0>)
 8007290:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8007294:	429a      	cmp	r2, r3
 8007296:	f43f af67 	beq.w	8007168 <ai_platform_network_init+0x70>
 800729a:	e7fe      	b.n	800729a <ai_platform_network_init+0x1a2>
 800729c:	2101      	movs	r1, #1
 800729e:	4628      	mov	r0, r5
 80072a0:	f105 081c 	add.w	r8, r5, #28
 80072a4:	686e      	ldr	r6, [r5, #4]
 80072a6:	f7ff f80b 	bl	80062c0 <ai_buffer_get_size>
 80072aa:	4607      	mov	r7, r0
 80072ac:	2101      	movs	r1, #1
 80072ae:	4640      	mov	r0, r8
 80072b0:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80072b4:	f7ff f804 	bl	80062c0 <ai_buffer_get_size>
 80072b8:	2f00      	cmp	r7, #0
 80072ba:	d13e      	bne.n	800733a <ai_platform_network_init+0x242>
 80072bc:	2800      	cmp	r0, #0
 80072be:	f000 808e 	beq.w	80073de <ai_platform_network_init+0x2e6>
 80072c2:	f1b9 0f00 	cmp.w	r9, #0
 80072c6:	f000 8094 	beq.w	80073f2 <ai_platform_network_init+0x2fa>
 80072ca:	f04f 0c01 	mov.w	ip, #1
 80072ce:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 80072d0:	2600      	movs	r6, #0
 80072d2:	83e7      	strh	r7, [r4, #30]
 80072d4:	4563      	cmp	r3, ip
 80072d6:	83a6      	strh	r6, [r4, #28]
 80072d8:	d37a      	bcc.n	80073d0 <ai_platform_network_init+0x2d8>
 80072da:	f1bc 0f00 	cmp.w	ip, #0
 80072de:	f000 809c 	beq.w	800741a <ai_platform_network_init+0x322>
 80072e2:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 80072e4:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 80072e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80072ea:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 80072ee:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80072f2:	e74c      	b.n	800718e <ai_platform_network_init+0x96>
 80072f4:	4a35      	ldr	r2, [pc, #212]	@ (80073cc <ai_platform_network_init+0x2d4>)
 80072f6:	2301      	movs	r3, #1
 80072f8:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80072fc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8007300:	2b00      	cmp	r3, #0
 8007302:	d1fb      	bne.n	80072fc <ai_platform_network_init+0x204>
 8007304:	492f      	ldr	r1, [pc, #188]	@ (80073c4 <ai_platform_network_init+0x2cc>)
 8007306:	4b30      	ldr	r3, [pc, #192]	@ (80073c8 <ai_platform_network_init+0x2d0>)
 8007308:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 800730c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8007310:	429a      	cmp	r2, r3
 8007312:	d09c      	beq.n	800724e <ai_platform_network_init+0x156>
 8007314:	e7fe      	b.n	8007314 <ai_platform_network_init+0x21c>
 8007316:	4a2d      	ldr	r2, [pc, #180]	@ (80073cc <ai_platform_network_init+0x2d4>)
 8007318:	2301      	movs	r3, #1
 800731a:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800731e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8007322:	2b00      	cmp	r3, #0
 8007324:	d1fb      	bne.n	800731e <ai_platform_network_init+0x226>
 8007326:	4b27      	ldr	r3, [pc, #156]	@ (80073c4 <ai_platform_network_init+0x2cc>)
 8007328:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 800732c:	4b26      	ldr	r3, [pc, #152]	@ (80073c8 <ai_platform_network_init+0x2d0>)
 800732e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8007332:	429a      	cmp	r2, r3
 8007334:	f43f af18 	beq.w	8007168 <ai_platform_network_init+0x70>
 8007338:	e7fe      	b.n	8007338 <ai_platform_network_init+0x240>
 800733a:	2800      	cmp	r0, #0
 800733c:	d153      	bne.n	80073e6 <ai_platform_network_init+0x2ee>
 800733e:	4680      	mov	r8, r0
 8007340:	4684      	mov	ip, r0
 8007342:	2e00      	cmp	r6, #0
 8007344:	d063      	beq.n	800740e <ai_platform_network_init+0x316>
 8007346:	8be6      	ldrh	r6, [r4, #30]
 8007348:	2e00      	cmp	r6, #0
 800734a:	d168      	bne.n	800741e <ai_platform_network_init+0x326>
 800734c:	2212      	movs	r2, #18
 800734e:	2116      	movs	r1, #22
 8007350:	f104 0010 	add.w	r0, r4, #16
 8007354:	f000 fc7a 	bl	8007c4c <core_set_error>
 8007358:	e77c      	b.n	8007254 <ai_platform_network_init+0x15c>
 800735a:	4a19      	ldr	r2, [pc, #100]	@ (80073c0 <ai_platform_network_init+0x2c8>)
 800735c:	2301      	movs	r3, #1
 800735e:	6093      	str	r3, [r2, #8]
 8007360:	6893      	ldr	r3, [r2, #8]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d1fc      	bne.n	8007360 <ai_platform_network_init+0x268>
 8007366:	4b17      	ldr	r3, [pc, #92]	@ (80073c4 <ai_platform_network_init+0x2cc>)
 8007368:	6013      	str	r3, [r2, #0]
 800736a:	4b17      	ldr	r3, [pc, #92]	@ (80073c8 <ai_platform_network_init+0x2d0>)
 800736c:	6812      	ldr	r2, [r2, #0]
 800736e:	429a      	cmp	r2, r3
 8007370:	f43f aefa 	beq.w	8007168 <ai_platform_network_init+0x70>
 8007374:	e7fe      	b.n	8007374 <ai_platform_network_init+0x27c>
 8007376:	4a12      	ldr	r2, [pc, #72]	@ (80073c0 <ai_platform_network_init+0x2c8>)
 8007378:	2301      	movs	r3, #1
 800737a:	6093      	str	r3, [r2, #8]
 800737c:	6893      	ldr	r3, [r2, #8]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d1fc      	bne.n	800737c <ai_platform_network_init+0x284>
 8007382:	4910      	ldr	r1, [pc, #64]	@ (80073c4 <ai_platform_network_init+0x2cc>)
 8007384:	4b10      	ldr	r3, [pc, #64]	@ (80073c8 <ai_platform_network_init+0x2d0>)
 8007386:	6011      	str	r1, [r2, #0]
 8007388:	6812      	ldr	r2, [r2, #0]
 800738a:	429a      	cmp	r2, r3
 800738c:	f43f af5f 	beq.w	800724e <ai_platform_network_init+0x156>
 8007390:	e7fe      	b.n	8007390 <ai_platform_network_init+0x298>
 8007392:	4a0b      	ldr	r2, [pc, #44]	@ (80073c0 <ai_platform_network_init+0x2c8>)
 8007394:	2301      	movs	r3, #1
 8007396:	6093      	str	r3, [r2, #8]
 8007398:	6893      	ldr	r3, [r2, #8]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d1fc      	bne.n	8007398 <ai_platform_network_init+0x2a0>
 800739e:	4b09      	ldr	r3, [pc, #36]	@ (80073c4 <ai_platform_network_init+0x2cc>)
 80073a0:	6013      	str	r3, [r2, #0]
 80073a2:	4b09      	ldr	r3, [pc, #36]	@ (80073c8 <ai_platform_network_init+0x2d0>)
 80073a4:	6812      	ldr	r2, [r2, #0]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	f43f aede 	beq.w	8007168 <ai_platform_network_init+0x70>
 80073ac:	e7fe      	b.n	80073ac <ai_platform_network_init+0x2b4>
 80073ae:	bf00      	nop
 80073b0:	a1c00100 	.word	0xa1c00100
 80073b4:	e0042000 	.word	0xe0042000
 80073b8:	5c001000 	.word	0x5c001000
 80073bc:	a1facade 	.word	0xa1facade
 80073c0:	40023000 	.word	0x40023000
 80073c4:	f407a5c2 	.word	0xf407a5c2
 80073c8:	b5e8b5cd 	.word	0xb5e8b5cd
 80073cc:	58024000 	.word	0x58024000
 80073d0:	2213      	movs	r2, #19
 80073d2:	2116      	movs	r1, #22
 80073d4:	f104 0010 	add.w	r0, r4, #16
 80073d8:	f000 fc38 	bl	8007c4c <core_set_error>
 80073dc:	e73a      	b.n	8007254 <ai_platform_network_init+0x15c>
 80073de:	4607      	mov	r7, r0
 80073e0:	4680      	mov	r8, r0
 80073e2:	4684      	mov	ip, r0
 80073e4:	e773      	b.n	80072ce <ai_platform_network_init+0x1d6>
 80073e6:	f1b9 0f00 	cmp.w	r9, #0
 80073ea:	d002      	beq.n	80073f2 <ai_platform_network_init+0x2fa>
 80073ec:	f04f 0c01 	mov.w	ip, #1
 80073f0:	e7a7      	b.n	8007342 <ai_platform_network_init+0x24a>
 80073f2:	2110      	movs	r1, #16
 80073f4:	2213      	movs	r2, #19
 80073f6:	2600      	movs	r6, #0
 80073f8:	1860      	adds	r0, r4, r1
 80073fa:	f000 fc27 	bl	8007c4c <core_set_error>
 80073fe:	e729      	b.n	8007254 <ai_platform_network_init+0x15c>
 8007400:	2110      	movs	r1, #16
 8007402:	2211      	movs	r2, #17
 8007404:	462e      	mov	r6, r5
 8007406:	1860      	adds	r0, r4, r1
 8007408:	f000 fc20 	bl	8007c4c <core_set_error>
 800740c:	e722      	b.n	8007254 <ai_platform_network_init+0x15c>
 800740e:	2110      	movs	r1, #16
 8007410:	2212      	movs	r2, #18
 8007412:	1860      	adds	r0, r4, r1
 8007414:	f000 fc1a 	bl	8007c4c <core_set_error>
 8007418:	e71c      	b.n	8007254 <ai_platform_network_init+0x15c>
 800741a:	4666      	mov	r6, ip
 800741c:	e6b7      	b.n	800718e <ai_platform_network_init+0x96>
 800741e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007420:	6a26      	ldr	r6, [r4, #32]
 8007422:	2701      	movs	r7, #1
 8007424:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007426:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800742a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800742e:	e74e      	b.n	80072ce <ai_platform_network_init+0x1d6>

08007430 <ai_platform_network_post_init>:
 8007430:	b538      	push	{r3, r4, r5, lr}
 8007432:	2800      	cmp	r0, #0
 8007434:	d04e      	beq.n	80074d4 <ai_platform_network_post_init+0xa4>
 8007436:	4b8c      	ldr	r3, [pc, #560]	@ (8007668 <ai_platform_network_post_init+0x238>)
 8007438:	4604      	mov	r4, r0
 800743a:	6802      	ldr	r2, [r0, #0]
 800743c:	429a      	cmp	r2, r3
 800743e:	d149      	bne.n	80074d4 <ai_platform_network_post_init+0xa4>
 8007440:	f7fe ff8c 	bl	800635c <_ai_platform_acquire_crc>
 8007444:	4b89      	ldr	r3, [pc, #548]	@ (800766c <ai_platform_network_post_init+0x23c>)
 8007446:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007450:	189a      	adds	r2, r3, r2
 8007452:	2a01      	cmp	r2, #1
 8007454:	f240 8095 	bls.w	8007582 <ai_platform_network_post_init+0x152>
 8007458:	f240 4249 	movw	r2, #1097	@ 0x449
 800745c:	4293      	cmp	r3, r2
 800745e:	f000 8090 	beq.w	8007582 <ai_platform_network_post_init+0x152>
 8007462:	4a83      	ldr	r2, [pc, #524]	@ (8007670 <ai_platform_network_post_init+0x240>)
 8007464:	6813      	ldr	r3, [r2, #0]
 8007466:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800746a:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 800746e:	f000 8096 	beq.w	800759e <ai_platform_network_post_init+0x16e>
 8007472:	6813      	ldr	r3, [r2, #0]
 8007474:	f240 4183 	movw	r1, #1155	@ 0x483
 8007478:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800747c:	428b      	cmp	r3, r1
 800747e:	f000 80b8 	beq.w	80075f2 <ai_platform_network_post_init+0x1c2>
 8007482:	6813      	ldr	r3, [r2, #0]
 8007484:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007488:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 800748c:	f000 80de 	beq.w	800764c <ai_platform_network_post_init+0x21c>
 8007490:	6813      	ldr	r3, [r2, #0]
 8007492:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007496:	2b00      	cmp	r3, #0
 8007498:	f000 80bd 	beq.w	8007616 <ai_platform_network_post_init+0x1e6>
 800749c:	f7fe ff60 	bl	8006360 <_ai_platform_release_crc>
 80074a0:	68e3      	ldr	r3, [r4, #12]
 80074a2:	f013 0502 	ands.w	r5, r3, #2
 80074a6:	f000 808c 	beq.w	80075c2 <ai_platform_network_post_init+0x192>
 80074aa:	4620      	mov	r0, r4
 80074ac:	f000 fd60 	bl	8007f70 <ai_layers_post_init_all>
 80074b0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80074b2:	b16b      	cbz	r3, 80074d0 <ai_platform_network_post_init+0xa0>
 80074b4:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 80074b6:	e007      	b.n	80074c8 <ai_platform_network_post_init+0x98>
 80074b8:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	@ 0x3c
 80074bc:	4798      	blx	r3
 80074be:	692b      	ldr	r3, [r5, #16]
 80074c0:	b133      	cbz	r3, 80074d0 <ai_platform_network_post_init+0xa0>
 80074c2:	42ab      	cmp	r3, r5
 80074c4:	461d      	mov	r5, r3
 80074c6:	d003      	beq.n	80074d0 <ai_platform_network_post_init+0xa0>
 80074c8:	4629      	mov	r1, r5
 80074ca:	2000      	movs	r0, #0
 80074cc:	2d00      	cmp	r5, #0
 80074ce:	d1f3      	bne.n	80074b8 <ai_platform_network_post_init+0x88>
 80074d0:	2001      	movs	r0, #1
 80074d2:	bd38      	pop	{r3, r4, r5, pc}
 80074d4:	f7fe ff42 	bl	800635c <_ai_platform_acquire_crc>
 80074d8:	4b64      	ldr	r3, [pc, #400]	@ (800766c <ai_platform_network_post_init+0x23c>)
 80074da:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80074e4:	185a      	adds	r2, r3, r1
 80074e6:	2a01      	cmp	r2, #1
 80074e8:	d92a      	bls.n	8007540 <ai_platform_network_post_init+0x110>
 80074ea:	f240 4249 	movw	r2, #1097	@ 0x449
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d026      	beq.n	8007540 <ai_platform_network_post_init+0x110>
 80074f2:	4a5f      	ldr	r2, [pc, #380]	@ (8007670 <ai_platform_network_post_init+0x240>)
 80074f4:	6813      	ldr	r3, [r2, #0]
 80074f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80074fa:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 80074fe:	d02c      	beq.n	800755a <ai_platform_network_post_init+0x12a>
 8007500:	6813      	ldr	r3, [r2, #0]
 8007502:	f240 4183 	movw	r1, #1155	@ 0x483
 8007506:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800750a:	428b      	cmp	r3, r1
 800750c:	d060      	beq.n	80075d0 <ai_platform_network_post_init+0x1a0>
 800750e:	6813      	ldr	r3, [r2, #0]
 8007510:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007514:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8007518:	f000 808b 	beq.w	8007632 <ai_platform_network_post_init+0x202>
 800751c:	6813      	ldr	r3, [r2, #0]
 800751e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007522:	2b00      	cmp	r3, #0
 8007524:	d129      	bne.n	800757a <ai_platform_network_post_init+0x14a>
 8007526:	4a53      	ldr	r2, [pc, #332]	@ (8007674 <ai_platform_network_post_init+0x244>)
 8007528:	2301      	movs	r3, #1
 800752a:	6093      	str	r3, [r2, #8]
 800752c:	6893      	ldr	r3, [r2, #8]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d1fc      	bne.n	800752c <ai_platform_network_post_init+0xfc>
 8007532:	4951      	ldr	r1, [pc, #324]	@ (8007678 <ai_platform_network_post_init+0x248>)
 8007534:	4b51      	ldr	r3, [pc, #324]	@ (800767c <ai_platform_network_post_init+0x24c>)
 8007536:	6011      	str	r1, [r2, #0]
 8007538:	6812      	ldr	r2, [r2, #0]
 800753a:	429a      	cmp	r2, r3
 800753c:	d01d      	beq.n	800757a <ai_platform_network_post_init+0x14a>
 800753e:	e7fe      	b.n	800753e <ai_platform_network_post_init+0x10e>
 8007540:	4a4c      	ldr	r2, [pc, #304]	@ (8007674 <ai_platform_network_post_init+0x244>)
 8007542:	2301      	movs	r3, #1
 8007544:	6093      	str	r3, [r2, #8]
 8007546:	6893      	ldr	r3, [r2, #8]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d1fc      	bne.n	8007546 <ai_platform_network_post_init+0x116>
 800754c:	494a      	ldr	r1, [pc, #296]	@ (8007678 <ai_platform_network_post_init+0x248>)
 800754e:	4b4b      	ldr	r3, [pc, #300]	@ (800767c <ai_platform_network_post_init+0x24c>)
 8007550:	6011      	str	r1, [r2, #0]
 8007552:	6812      	ldr	r2, [r2, #0]
 8007554:	429a      	cmp	r2, r3
 8007556:	d010      	beq.n	800757a <ai_platform_network_post_init+0x14a>
 8007558:	e7fe      	b.n	8007558 <ai_platform_network_post_init+0x128>
 800755a:	4a49      	ldr	r2, [pc, #292]	@ (8007680 <ai_platform_network_post_init+0x250>)
 800755c:	2301      	movs	r3, #1
 800755e:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8007562:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8007566:	2b00      	cmp	r3, #0
 8007568:	d1fb      	bne.n	8007562 <ai_platform_network_post_init+0x132>
 800756a:	4943      	ldr	r1, [pc, #268]	@ (8007678 <ai_platform_network_post_init+0x248>)
 800756c:	4b43      	ldr	r3, [pc, #268]	@ (800767c <ai_platform_network_post_init+0x24c>)
 800756e:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8007572:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8007576:	429a      	cmp	r2, r3
 8007578:	d110      	bne.n	800759c <ai_platform_network_post_init+0x16c>
 800757a:	f7fe fef1 	bl	8006360 <_ai_platform_release_crc>
 800757e:	2000      	movs	r0, #0
 8007580:	bd38      	pop	{r3, r4, r5, pc}
 8007582:	4a3c      	ldr	r2, [pc, #240]	@ (8007674 <ai_platform_network_post_init+0x244>)
 8007584:	2301      	movs	r3, #1
 8007586:	6093      	str	r3, [r2, #8]
 8007588:	6893      	ldr	r3, [r2, #8]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d1fc      	bne.n	8007588 <ai_platform_network_post_init+0x158>
 800758e:	493a      	ldr	r1, [pc, #232]	@ (8007678 <ai_platform_network_post_init+0x248>)
 8007590:	4b3a      	ldr	r3, [pc, #232]	@ (800767c <ai_platform_network_post_init+0x24c>)
 8007592:	6011      	str	r1, [r2, #0]
 8007594:	6812      	ldr	r2, [r2, #0]
 8007596:	429a      	cmp	r2, r3
 8007598:	d080      	beq.n	800749c <ai_platform_network_post_init+0x6c>
 800759a:	e7fe      	b.n	800759a <ai_platform_network_post_init+0x16a>
 800759c:	e7fe      	b.n	800759c <ai_platform_network_post_init+0x16c>
 800759e:	4a38      	ldr	r2, [pc, #224]	@ (8007680 <ai_platform_network_post_init+0x250>)
 80075a0:	2301      	movs	r3, #1
 80075a2:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80075a6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d1fb      	bne.n	80075a6 <ai_platform_network_post_init+0x176>
 80075ae:	4932      	ldr	r1, [pc, #200]	@ (8007678 <ai_platform_network_post_init+0x248>)
 80075b0:	4b32      	ldr	r3, [pc, #200]	@ (800767c <ai_platform_network_post_init+0x24c>)
 80075b2:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 80075b6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 80075ba:	429a      	cmp	r2, r3
 80075bc:	f43f af6e 	beq.w	800749c <ai_platform_network_post_init+0x6c>
 80075c0:	e7fe      	b.n	80075c0 <ai_platform_network_post_init+0x190>
 80075c2:	2210      	movs	r2, #16
 80075c4:	2111      	movs	r1, #17
 80075c6:	18a0      	adds	r0, r4, r2
 80075c8:	f000 fb40 	bl	8007c4c <core_set_error>
 80075cc:	4628      	mov	r0, r5
 80075ce:	bd38      	pop	{r3, r4, r5, pc}
 80075d0:	4a2b      	ldr	r2, [pc, #172]	@ (8007680 <ai_platform_network_post_init+0x250>)
 80075d2:	2301      	movs	r3, #1
 80075d4:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80075d8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d1fb      	bne.n	80075d8 <ai_platform_network_post_init+0x1a8>
 80075e0:	4925      	ldr	r1, [pc, #148]	@ (8007678 <ai_platform_network_post_init+0x248>)
 80075e2:	4b26      	ldr	r3, [pc, #152]	@ (800767c <ai_platform_network_post_init+0x24c>)
 80075e4:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 80075e8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d0c4      	beq.n	800757a <ai_platform_network_post_init+0x14a>
 80075f0:	e7fe      	b.n	80075f0 <ai_platform_network_post_init+0x1c0>
 80075f2:	4a23      	ldr	r2, [pc, #140]	@ (8007680 <ai_platform_network_post_init+0x250>)
 80075f4:	2301      	movs	r3, #1
 80075f6:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80075fa:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d1fb      	bne.n	80075fa <ai_platform_network_post_init+0x1ca>
 8007602:	491d      	ldr	r1, [pc, #116]	@ (8007678 <ai_platform_network_post_init+0x248>)
 8007604:	4b1d      	ldr	r3, [pc, #116]	@ (800767c <ai_platform_network_post_init+0x24c>)
 8007606:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 800760a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800760e:	429a      	cmp	r2, r3
 8007610:	f43f af44 	beq.w	800749c <ai_platform_network_post_init+0x6c>
 8007614:	e7fe      	b.n	8007614 <ai_platform_network_post_init+0x1e4>
 8007616:	4a17      	ldr	r2, [pc, #92]	@ (8007674 <ai_platform_network_post_init+0x244>)
 8007618:	2301      	movs	r3, #1
 800761a:	6093      	str	r3, [r2, #8]
 800761c:	6893      	ldr	r3, [r2, #8]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d1fc      	bne.n	800761c <ai_platform_network_post_init+0x1ec>
 8007622:	4915      	ldr	r1, [pc, #84]	@ (8007678 <ai_platform_network_post_init+0x248>)
 8007624:	4b15      	ldr	r3, [pc, #84]	@ (800767c <ai_platform_network_post_init+0x24c>)
 8007626:	6011      	str	r1, [r2, #0]
 8007628:	6812      	ldr	r2, [r2, #0]
 800762a:	429a      	cmp	r2, r3
 800762c:	f43f af36 	beq.w	800749c <ai_platform_network_post_init+0x6c>
 8007630:	e7fe      	b.n	8007630 <ai_platform_network_post_init+0x200>
 8007632:	4a10      	ldr	r2, [pc, #64]	@ (8007674 <ai_platform_network_post_init+0x244>)
 8007634:	2301      	movs	r3, #1
 8007636:	6093      	str	r3, [r2, #8]
 8007638:	6893      	ldr	r3, [r2, #8]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d1fc      	bne.n	8007638 <ai_platform_network_post_init+0x208>
 800763e:	490e      	ldr	r1, [pc, #56]	@ (8007678 <ai_platform_network_post_init+0x248>)
 8007640:	4b0e      	ldr	r3, [pc, #56]	@ (800767c <ai_platform_network_post_init+0x24c>)
 8007642:	6011      	str	r1, [r2, #0]
 8007644:	6812      	ldr	r2, [r2, #0]
 8007646:	429a      	cmp	r2, r3
 8007648:	d097      	beq.n	800757a <ai_platform_network_post_init+0x14a>
 800764a:	e7fe      	b.n	800764a <ai_platform_network_post_init+0x21a>
 800764c:	4a09      	ldr	r2, [pc, #36]	@ (8007674 <ai_platform_network_post_init+0x244>)
 800764e:	2301      	movs	r3, #1
 8007650:	6093      	str	r3, [r2, #8]
 8007652:	6893      	ldr	r3, [r2, #8]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d1fc      	bne.n	8007652 <ai_platform_network_post_init+0x222>
 8007658:	4907      	ldr	r1, [pc, #28]	@ (8007678 <ai_platform_network_post_init+0x248>)
 800765a:	4b08      	ldr	r3, [pc, #32]	@ (800767c <ai_platform_network_post_init+0x24c>)
 800765c:	6011      	str	r1, [r2, #0]
 800765e:	6812      	ldr	r2, [r2, #0]
 8007660:	429a      	cmp	r2, r3
 8007662:	f43f af1b 	beq.w	800749c <ai_platform_network_post_init+0x6c>
 8007666:	e7fe      	b.n	8007666 <ai_platform_network_post_init+0x236>
 8007668:	a1c00100 	.word	0xa1c00100
 800766c:	e0042000 	.word	0xe0042000
 8007670:	5c001000 	.word	0x5c001000
 8007674:	40023000 	.word	0x40023000
 8007678:	f407a5c2 	.word	0xf407a5c2
 800767c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007680:	58024000 	.word	0x58024000

08007684 <ai_platform_network_process>:
 8007684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007688:	b085      	sub	sp, #20
 800768a:	460e      	mov	r6, r1
 800768c:	4605      	mov	r5, r0
 800768e:	9201      	str	r2, [sp, #4]
 8007690:	b120      	cbz	r0, 800769c <ai_platform_network_process+0x18>
 8007692:	4b24      	ldr	r3, [pc, #144]	@ (8007724 <ai_platform_network_process+0xa0>)
 8007694:	6802      	ldr	r2, [r0, #0]
 8007696:	429a      	cmp	r2, r3
 8007698:	bf18      	it	ne
 800769a:	2500      	movne	r5, #0
 800769c:	f7fe fe5e 	bl	800635c <_ai_platform_acquire_crc>
 80076a0:	4b21      	ldr	r3, [pc, #132]	@ (8007728 <ai_platform_network_process+0xa4>)
 80076a2:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80076ac:	185a      	adds	r2, r3, r1
 80076ae:	2a01      	cmp	r2, #1
 80076b0:	d92b      	bls.n	800770a <ai_platform_network_process+0x86>
 80076b2:	f240 4249 	movw	r2, #1097	@ 0x449
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d027      	beq.n	800770a <ai_platform_network_process+0x86>
 80076ba:	4a1c      	ldr	r2, [pc, #112]	@ (800772c <ai_platform_network_process+0xa8>)
 80076bc:	6813      	ldr	r3, [r2, #0]
 80076be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80076c2:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 80076c6:	d039      	beq.n	800773c <ai_platform_network_process+0xb8>
 80076c8:	6813      	ldr	r3, [r2, #0]
 80076ca:	f240 4183 	movw	r1, #1155	@ 0x483
 80076ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80076d2:	428b      	cmp	r3, r1
 80076d4:	f000 819c 	beq.w	8007a10 <ai_platform_network_process+0x38c>
 80076d8:	6813      	ldr	r3, [r2, #0]
 80076da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80076de:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 80076e2:	f000 8179 	beq.w	80079d8 <ai_platform_network_process+0x354>
 80076e6:	6813      	ldr	r3, [r2, #0]
 80076e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d136      	bne.n	800775e <ai_platform_network_process+0xda>
 80076f0:	4a0f      	ldr	r2, [pc, #60]	@ (8007730 <ai_platform_network_process+0xac>)
 80076f2:	2301      	movs	r3, #1
 80076f4:	6093      	str	r3, [r2, #8]
 80076f6:	6893      	ldr	r3, [r2, #8]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d1fc      	bne.n	80076f6 <ai_platform_network_process+0x72>
 80076fc:	4b0d      	ldr	r3, [pc, #52]	@ (8007734 <ai_platform_network_process+0xb0>)
 80076fe:	6013      	str	r3, [r2, #0]
 8007700:	4b0d      	ldr	r3, [pc, #52]	@ (8007738 <ai_platform_network_process+0xb4>)
 8007702:	6812      	ldr	r2, [r2, #0]
 8007704:	429a      	cmp	r2, r3
 8007706:	d02a      	beq.n	800775e <ai_platform_network_process+0xda>
 8007708:	e7fe      	b.n	8007708 <ai_platform_network_process+0x84>
 800770a:	4a09      	ldr	r2, [pc, #36]	@ (8007730 <ai_platform_network_process+0xac>)
 800770c:	2301      	movs	r3, #1
 800770e:	6093      	str	r3, [r2, #8]
 8007710:	6893      	ldr	r3, [r2, #8]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d1fc      	bne.n	8007710 <ai_platform_network_process+0x8c>
 8007716:	4b07      	ldr	r3, [pc, #28]	@ (8007734 <ai_platform_network_process+0xb0>)
 8007718:	6013      	str	r3, [r2, #0]
 800771a:	4b07      	ldr	r3, [pc, #28]	@ (8007738 <ai_platform_network_process+0xb4>)
 800771c:	6812      	ldr	r2, [r2, #0]
 800771e:	429a      	cmp	r2, r3
 8007720:	d01d      	beq.n	800775e <ai_platform_network_process+0xda>
 8007722:	e7fe      	b.n	8007722 <ai_platform_network_process+0x9e>
 8007724:	a1c00100 	.word	0xa1c00100
 8007728:	e0042000 	.word	0xe0042000
 800772c:	5c001000 	.word	0x5c001000
 8007730:	40023000 	.word	0x40023000
 8007734:	f407a5c2 	.word	0xf407a5c2
 8007738:	b5e8b5cd 	.word	0xb5e8b5cd
 800773c:	4ab0      	ldr	r2, [pc, #704]	@ (8007a00 <ai_platform_network_process+0x37c>)
 800773e:	2301      	movs	r3, #1
 8007740:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8007744:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8007748:	2b00      	cmp	r3, #0
 800774a:	d1fb      	bne.n	8007744 <ai_platform_network_process+0xc0>
 800774c:	4bad      	ldr	r3, [pc, #692]	@ (8007a04 <ai_platform_network_process+0x380>)
 800774e:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8007752:	4bad      	ldr	r3, [pc, #692]	@ (8007a08 <ai_platform_network_process+0x384>)
 8007754:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8007758:	429a      	cmp	r2, r3
 800775a:	f040 812b 	bne.w	80079b4 <ai_platform_network_process+0x330>
 800775e:	f7fe fdff 	bl	8006360 <_ai_platform_release_crc>
 8007762:	2d00      	cmp	r5, #0
 8007764:	f000 8172 	beq.w	8007a4c <ai_platform_network_process+0x3c8>
 8007768:	8dab      	ldrh	r3, [r5, #44]	@ 0x2c
 800776a:	2b00      	cmp	r3, #0
 800776c:	f000 8123 	beq.w	80079b6 <ai_platform_network_process+0x332>
 8007770:	68eb      	ldr	r3, [r5, #12]
 8007772:	2200      	movs	r2, #0
 8007774:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8007778:	f003 0303 	and.w	r3, r3, #3
 800777c:	616a      	str	r2, [r5, #20]
 800777e:	2b03      	cmp	r3, #3
 8007780:	f040 811f 	bne.w	80079c2 <ai_platform_network_process+0x33e>
 8007784:	2e00      	cmp	r6, #0
 8007786:	f000 8156 	beq.w	8007a36 <ai_platform_network_process+0x3b2>
 800778a:	fab8 f788 	clz	r7, r8
 800778e:	097f      	lsrs	r7, r7, #5
 8007790:	f1b8 0f00 	cmp.w	r8, #0
 8007794:	f000 814f 	beq.w	8007a36 <ai_platform_network_process+0x3b2>
 8007798:	f8b8 3000 	ldrh.w	r3, [r8]
 800779c:	2b00      	cmp	r3, #0
 800779e:	f000 814a 	beq.w	8007a36 <ai_platform_network_process+0x3b2>
 80077a2:	69b3      	ldr	r3, [r6, #24]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	e9cd 3502 	strd	r3, r5, [sp, #8]
 80077aa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d072      	beq.n	8007898 <ai_platform_network_process+0x214>
 80077b2:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 80077b6:	2c00      	cmp	r4, #0
 80077b8:	d06e      	beq.n	8007898 <ai_platform_network_process+0x214>
 80077ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80077be:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80077c2:	f8d3 a000 	ldr.w	sl, [r3]
 80077c6:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 80077ca:	f000 8133 	beq.w	8007a34 <ai_platform_network_process+0x3b0>
 80077ce:	69a3      	ldr	r3, [r4, #24]
 80077d0:	2101      	movs	r1, #1
 80077d2:	4630      	mov	r0, r6
 80077d4:	685d      	ldr	r5, [r3, #4]
 80077d6:	f7fe fd73 	bl	80062c0 <ai_buffer_get_size>
 80077da:	4285      	cmp	r5, r0
 80077dc:	f0c0 8138 	bcc.w	8007a50 <ai_platform_network_process+0x3cc>
 80077e0:	68e0      	ldr	r0, [r4, #12]
 80077e2:	69b1      	ldr	r1, [r6, #24]
 80077e4:	68c2      	ldr	r2, [r0, #12]
 80077e6:	68cb      	ldr	r3, [r1, #12]
 80077e8:	429a      	cmp	r2, r3
 80077ea:	f040 8131 	bne.w	8007a50 <ai_platform_network_process+0x3cc>
 80077ee:	6882      	ldr	r2, [r0, #8]
 80077f0:	688b      	ldr	r3, [r1, #8]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	f040 812c 	bne.w	8007a50 <ai_platform_network_process+0x3cc>
 80077f8:	6842      	ldr	r2, [r0, #4]
 80077fa:	684b      	ldr	r3, [r1, #4]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	f040 8127 	bne.w	8007a50 <ai_platform_network_process+0x3cc>
 8007802:	69a3      	ldr	r3, [r4, #24]
 8007804:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007808:	f004 f9bc 	bl	800bb84 <ai_array_get_data_byte_size>
 800780c:	4605      	mov	r5, r0
 800780e:	4620      	mov	r0, r4
 8007810:	f004 f9ce 	bl	800bbb0 <get_tensor_byte_size>
 8007814:	4285      	cmp	r5, r0
 8007816:	f0c0 811b 	bcc.w	8007a50 <ai_platform_network_process+0x3cc>
 800781a:	69a3      	ldr	r3, [r4, #24]
 800781c:	6818      	ldr	r0, [r3, #0]
 800781e:	f004 f91d 	bl	800ba5c <ai_array_to_buffer_fmt>
 8007822:	6833      	ldr	r3, [r6, #0]
 8007824:	4058      	eors	r0, r3
 8007826:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 800782a:	f040 81c8 	bne.w	8007bbe <ai_platform_network_process+0x53a>
 800782e:	6873      	ldr	r3, [r6, #4]
 8007830:	2b00      	cmp	r3, #0
 8007832:	f000 81bb 	beq.w	8007bac <ai_platform_network_process+0x528>
 8007836:	69b3      	ldr	r3, [r6, #24]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	2b00      	cmp	r3, #0
 800783c:	f000 81c8 	beq.w	8007bd0 <ai_platform_network_process+0x54c>
 8007840:	9a02      	ldr	r2, [sp, #8]
 8007842:	4620      	mov	r0, r4
 8007844:	3701      	adds	r7, #1
 8007846:	361c      	adds	r6, #28
 8007848:	429a      	cmp	r2, r3
 800784a:	bf38      	it	cc
 800784c:	461a      	movcc	r2, r3
 800784e:	9202      	str	r2, [sp, #8]
 8007850:	f004 f9ae 	bl	800bbb0 <get_tensor_byte_size>
 8007854:	f8c9 0008 	str.w	r0, [r9, #8]
 8007858:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	fb00 f303 	mul.w	r3, r0, r3
 8007862:	f8c9 300c 	str.w	r3, [r9, #12]
 8007866:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800786a:	440b      	add	r3, r1
 800786c:	f8c9 1004 	str.w	r1, [r9, #4]
 8007870:	f84a 300b 	str.w	r3, [sl, fp]
 8007874:	69a0      	ldr	r0, [r4, #24]
 8007876:	6803      	ldr	r3, [r0, #0]
 8007878:	009a      	lsls	r2, r3, #2
 800787a:	f100 80bb 	bmi.w	80079f4 <ai_platform_network_process+0x370>
 800787e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8007882:	1a9b      	subs	r3, r3, r2
 8007884:	4419      	add	r1, r3
 8007886:	6081      	str	r1, [r0, #8]
 8007888:	69a3      	ldr	r3, [r4, #24]
 800788a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800788e:	60da      	str	r2, [r3, #12]
 8007890:	f8b8 3000 	ldrh.w	r3, [r8]
 8007894:	42bb      	cmp	r3, r7
 8007896:	d888      	bhi.n	80077aa <ai_platform_network_process+0x126>
 8007898:	9d03      	ldr	r5, [sp, #12]
 800789a:	9b01      	ldr	r3, [sp, #4]
 800789c:	8daa      	ldrh	r2, [r5, #44]	@ 0x2c
 800789e:	2b00      	cmp	r3, #0
 80078a0:	f000 819f 	beq.w	8007be2 <ai_platform_network_process+0x55e>
 80078a4:	2a01      	cmp	r2, #1
 80078a6:	f240 8179 	bls.w	8007b9c <ai_platform_network_process+0x518>
 80078aa:	f8d5 9030 	ldr.w	r9, [r5, #48]	@ 0x30
 80078ae:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	f000 8172 	beq.w	8007b9c <ai_platform_network_process+0x518>
 80078b8:	9e01      	ldr	r6, [sp, #4]
 80078ba:	2700      	movs	r7, #0
 80078bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	f000 80d3 	beq.w	8007a6c <ai_platform_network_process+0x3e8>
 80078c6:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 80078ca:	2c00      	cmp	r4, #0
 80078cc:	f000 80ce 	beq.w	8007a6c <ai_platform_network_process+0x3e8>
 80078d0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80078d4:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80078d8:	f8d3 8000 	ldr.w	r8, [r3]
 80078dc:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 80078e0:	f000 819d 	beq.w	8007c1e <ai_platform_network_process+0x59a>
 80078e4:	69a3      	ldr	r3, [r4, #24]
 80078e6:	2101      	movs	r1, #1
 80078e8:	4630      	mov	r0, r6
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	9301      	str	r3, [sp, #4]
 80078ee:	f7fe fce7 	bl	80062c0 <ai_buffer_get_size>
 80078f2:	9b01      	ldr	r3, [sp, #4]
 80078f4:	4283      	cmp	r3, r0
 80078f6:	f0c0 8151 	bcc.w	8007b9c <ai_platform_network_process+0x518>
 80078fa:	68e0      	ldr	r0, [r4, #12]
 80078fc:	69b1      	ldr	r1, [r6, #24]
 80078fe:	68c2      	ldr	r2, [r0, #12]
 8007900:	68cb      	ldr	r3, [r1, #12]
 8007902:	429a      	cmp	r2, r3
 8007904:	f040 814a 	bne.w	8007b9c <ai_platform_network_process+0x518>
 8007908:	6882      	ldr	r2, [r0, #8]
 800790a:	688b      	ldr	r3, [r1, #8]
 800790c:	429a      	cmp	r2, r3
 800790e:	f040 8145 	bne.w	8007b9c <ai_platform_network_process+0x518>
 8007912:	6842      	ldr	r2, [r0, #4]
 8007914:	684b      	ldr	r3, [r1, #4]
 8007916:	429a      	cmp	r2, r3
 8007918:	f040 8140 	bne.w	8007b9c <ai_platform_network_process+0x518>
 800791c:	69a3      	ldr	r3, [r4, #24]
 800791e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007922:	f004 f92f 	bl	800bb84 <ai_array_get_data_byte_size>
 8007926:	9001      	str	r0, [sp, #4]
 8007928:	4620      	mov	r0, r4
 800792a:	f004 f941 	bl	800bbb0 <get_tensor_byte_size>
 800792e:	9b01      	ldr	r3, [sp, #4]
 8007930:	4283      	cmp	r3, r0
 8007932:	f0c0 8133 	bcc.w	8007b9c <ai_platform_network_process+0x518>
 8007936:	69a3      	ldr	r3, [r4, #24]
 8007938:	6818      	ldr	r0, [r3, #0]
 800793a:	f004 f88f 	bl	800ba5c <ai_array_to_buffer_fmt>
 800793e:	6833      	ldr	r3, [r6, #0]
 8007940:	4058      	eors	r0, r3
 8007942:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8007946:	f040 815a 	bne.w	8007bfe <ai_platform_network_process+0x57a>
 800794a:	6873      	ldr	r3, [r6, #4]
 800794c:	2b00      	cmp	r3, #0
 800794e:	f000 814e 	beq.w	8007bee <ai_platform_network_process+0x56a>
 8007952:	69b3      	ldr	r3, [r6, #24]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	2b00      	cmp	r3, #0
 8007958:	f000 8159 	beq.w	8007c0e <ai_platform_network_process+0x58a>
 800795c:	9a02      	ldr	r2, [sp, #8]
 800795e:	4620      	mov	r0, r4
 8007960:	3701      	adds	r7, #1
 8007962:	361c      	adds	r6, #28
 8007964:	429a      	cmp	r2, r3
 8007966:	bf38      	it	cc
 8007968:	461a      	movcc	r2, r3
 800796a:	9202      	str	r2, [sp, #8]
 800796c:	f004 f920 	bl	800bbb0 <get_tensor_byte_size>
 8007970:	f8ca 0008 	str.w	r0, [sl, #8]
 8007974:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	fb00 f303 	mul.w	r3, r0, r3
 800797e:	f8ca 300c 	str.w	r3, [sl, #12]
 8007982:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8007986:	440b      	add	r3, r1
 8007988:	f8ca 1004 	str.w	r1, [sl, #4]
 800798c:	f848 300b 	str.w	r3, [r8, fp]
 8007990:	69a0      	ldr	r0, [r4, #24]
 8007992:	6803      	ldr	r3, [r0, #0]
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	d464      	bmi.n	8007a62 <ai_platform_network_process+0x3de>
 8007998:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800799c:	1a9b      	subs	r3, r3, r2
 800799e:	4419      	add	r1, r3
 80079a0:	6081      	str	r1, [r0, #8]
 80079a2:	69a3      	ldr	r3, [r4, #24]
 80079a4:	f8da 2004 	ldr.w	r2, [sl, #4]
 80079a8:	60da      	str	r2, [r3, #12]
 80079aa:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80079ae:	429f      	cmp	r7, r3
 80079b0:	d384      	bcc.n	80078bc <ai_platform_network_process+0x238>
 80079b2:	e05b      	b.n	8007a6c <ai_platform_network_process+0x3e8>
 80079b4:	e7fe      	b.n	80079b4 <ai_platform_network_process+0x330>
 80079b6:	68ea      	ldr	r2, [r5, #12]
 80079b8:	616b      	str	r3, [r5, #20]
 80079ba:	f002 0203 	and.w	r2, r2, #3
 80079be:	2a03      	cmp	r2, #3
 80079c0:	d039      	beq.n	8007a36 <ai_platform_network_process+0x3b2>
 80079c2:	2230      	movs	r2, #48	@ 0x30
 80079c4:	2111      	movs	r1, #17
 80079c6:	f105 0010 	add.w	r0, r5, #16
 80079ca:	2400      	movs	r4, #0
 80079cc:	f000 f93e 	bl	8007c4c <core_set_error>
 80079d0:	4620      	mov	r0, r4
 80079d2:	b005      	add	sp, #20
 80079d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079d8:	4a0c      	ldr	r2, [pc, #48]	@ (8007a0c <ai_platform_network_process+0x388>)
 80079da:	2301      	movs	r3, #1
 80079dc:	6093      	str	r3, [r2, #8]
 80079de:	6893      	ldr	r3, [r2, #8]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d1fc      	bne.n	80079de <ai_platform_network_process+0x35a>
 80079e4:	4b07      	ldr	r3, [pc, #28]	@ (8007a04 <ai_platform_network_process+0x380>)
 80079e6:	6013      	str	r3, [r2, #0]
 80079e8:	4b07      	ldr	r3, [pc, #28]	@ (8007a08 <ai_platform_network_process+0x384>)
 80079ea:	6812      	ldr	r2, [r2, #0]
 80079ec:	429a      	cmp	r2, r3
 80079ee:	f43f aeb6 	beq.w	800775e <ai_platform_network_process+0xda>
 80079f2:	e7fe      	b.n	80079f2 <ai_platform_network_process+0x36e>
 80079f4:	f8b8 3000 	ldrh.w	r3, [r8]
 80079f8:	429f      	cmp	r7, r3
 80079fa:	f4ff aed6 	bcc.w	80077aa <ai_platform_network_process+0x126>
 80079fe:	e74b      	b.n	8007898 <ai_platform_network_process+0x214>
 8007a00:	58024000 	.word	0x58024000
 8007a04:	f407a5c2 	.word	0xf407a5c2
 8007a08:	b5e8b5cd 	.word	0xb5e8b5cd
 8007a0c:	40023000 	.word	0x40023000
 8007a10:	4a87      	ldr	r2, [pc, #540]	@ (8007c30 <ai_platform_network_process+0x5ac>)
 8007a12:	2301      	movs	r3, #1
 8007a14:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8007a18:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d1fb      	bne.n	8007a18 <ai_platform_network_process+0x394>
 8007a20:	4b84      	ldr	r3, [pc, #528]	@ (8007c34 <ai_platform_network_process+0x5b0>)
 8007a22:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8007a26:	4b84      	ldr	r3, [pc, #528]	@ (8007c38 <ai_platform_network_process+0x5b4>)
 8007a28:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	f43f ae96 	beq.w	800775e <ai_platform_network_process+0xda>
 8007a32:	e7fe      	b.n	8007a32 <ai_platform_network_process+0x3ae>
 8007a34:	9d03      	ldr	r5, [sp, #12]
 8007a36:	2400      	movs	r4, #0
 8007a38:	2217      	movs	r2, #23
 8007a3a:	2112      	movs	r1, #18
 8007a3c:	f105 0010 	add.w	r0, r5, #16
 8007a40:	f000 f904 	bl	8007c4c <core_set_error>
 8007a44:	4620      	mov	r0, r4
 8007a46:	b005      	add	sp, #20
 8007a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a4c:	462c      	mov	r4, r5
 8007a4e:	e7bf      	b.n	80079d0 <ai_platform_network_process+0x34c>
 8007a50:	9d03      	ldr	r5, [sp, #12]
 8007a52:	2218      	movs	r2, #24
 8007a54:	2112      	movs	r1, #18
 8007a56:	2400      	movs	r4, #0
 8007a58:	f105 0010 	add.w	r0, r5, #16
 8007a5c:	f000 f8f6 	bl	8007c4c <core_set_error>
 8007a60:	e7b6      	b.n	80079d0 <ai_platform_network_process+0x34c>
 8007a62:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007a66:	429f      	cmp	r7, r3
 8007a68:	f4ff af28 	bcc.w	80078bc <ai_platform_network_process+0x238>
 8007a6c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8007a70:	8daa      	ldrh	r2, [r5, #44]	@ 0x2c
 8007a72:	82ab      	strh	r3, [r5, #20]
 8007a74:	2a00      	cmp	r2, #0
 8007a76:	f040 808b 	bne.w	8007b90 <ai_platform_network_process+0x50c>
 8007a7a:	4616      	mov	r6, r2
 8007a7c:	4617      	mov	r7, r2
 8007a7e:	8aec      	ldrh	r4, [r5, #22]
 8007a80:	429c      	cmp	r4, r3
 8007a82:	d2a5      	bcs.n	80079d0 <ai_platform_network_process+0x34c>
 8007a84:	46ab      	mov	fp, r5
 8007a86:	2e00      	cmp	r6, #0
 8007a88:	d030      	beq.n	8007aec <ai_platform_network_process+0x468>
 8007a8a:	f04f 0800 	mov.w	r8, #0
 8007a8e:	e014      	b.n	8007aba <ai_platform_network_process+0x436>
 8007a90:	6882      	ldr	r2, [r0, #8]
 8007a92:	68c5      	ldr	r5, [r0, #12]
 8007a94:	6863      	ldr	r3, [r4, #4]
 8007a96:	1b52      	subs	r2, r2, r5
 8007a98:	4413      	add	r3, r2
 8007a9a:	6083      	str	r3, [r0, #8]
 8007a9c:	698b      	ldr	r3, [r1, #24]
 8007a9e:	6862      	ldr	r2, [r4, #4]
 8007aa0:	60da      	str	r2, [r3, #12]
 8007aa2:	f859 200a 	ldr.w	r2, [r9, sl]
 8007aa6:	f108 0801 	add.w	r8, r8, #1
 8007aaa:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8007aae:	440b      	add	r3, r1
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d301      	bcc.n	8007ab8 <ai_platform_network_process+0x434>
 8007ab4:	68e3      	ldr	r3, [r4, #12]
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	6063      	str	r3, [r4, #4]
 8007aba:	8833      	ldrh	r3, [r6, #0]
 8007abc:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8007ac0:	4543      	cmp	r3, r8
 8007ac2:	d913      	bls.n	8007aec <ai_platform_network_process+0x468>
 8007ac4:	6873      	ldr	r3, [r6, #4]
 8007ac6:	b18b      	cbz	r3, 8007aec <ai_platform_network_process+0x468>
 8007ac8:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8007acc:	b171      	cbz	r1, 8007aec <ai_platform_network_process+0x468>
 8007ace:	6988      	ldr	r0, [r1, #24]
 8007ad0:	68b2      	ldr	r2, [r6, #8]
 8007ad2:	6803      	ldr	r3, [r0, #0]
 8007ad4:	f8d2 9000 	ldr.w	r9, [r2]
 8007ad8:	009d      	lsls	r5, r3, #2
 8007ada:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8007ade:	d5d7      	bpl.n	8007a90 <ai_platform_network_process+0x40c>
 8007ae0:	6881      	ldr	r1, [r0, #8]
 8007ae2:	68a2      	ldr	r2, [r4, #8]
 8007ae4:	6860      	ldr	r0, [r4, #4]
 8007ae6:	f002 fb99 	bl	800a21c <st_int8_copy>
 8007aea:	e7da      	b.n	8007aa2 <ai_platform_network_process+0x41e>
 8007aec:	4658      	mov	r0, fp
 8007aee:	f000 fa53 	bl	8007f98 <ai_layers_forward_all>
 8007af2:	2f00      	cmp	r7, #0
 8007af4:	d03d      	beq.n	8007b72 <ai_platform_network_process+0x4ee>
 8007af6:	2400      	movs	r4, #0
 8007af8:	e016      	b.n	8007b28 <ai_platform_network_process+0x4a4>
 8007afa:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8007afe:	f859 100a 	ldr.w	r1, [r9, sl]
 8007b02:	4413      	add	r3, r2
 8007b04:	428b      	cmp	r3, r1
 8007b06:	d302      	bcc.n	8007b0e <ai_platform_network_process+0x48a>
 8007b08:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007b0c:	1acb      	subs	r3, r1, r3
 8007b0e:	f8c8 3004 	str.w	r3, [r8, #4]
 8007b12:	6981      	ldr	r1, [r0, #24]
 8007b14:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8007b18:	1b52      	subs	r2, r2, r5
 8007b1a:	4413      	add	r3, r2
 8007b1c:	608b      	str	r3, [r1, #8]
 8007b1e:	6983      	ldr	r3, [r0, #24]
 8007b20:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007b24:	60da      	str	r2, [r3, #12]
 8007b26:	3401      	adds	r4, #1
 8007b28:	883b      	ldrh	r3, [r7, #0]
 8007b2a:	42a3      	cmp	r3, r4
 8007b2c:	d921      	bls.n	8007b72 <ai_platform_network_process+0x4ee>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	b1fb      	cbz	r3, 8007b72 <ai_platform_network_process+0x4ee>
 8007b32:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007b36:	b1e0      	cbz	r0, 8007b72 <ai_platform_network_process+0x4ee>
 8007b38:	68ba      	ldr	r2, [r7, #8]
 8007b3a:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8007b3e:	6983      	ldr	r3, [r0, #24]
 8007b40:	f8d2 9000 	ldr.w	r9, [r2]
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8007b4a:	0092      	lsls	r2, r2, #2
 8007b4c:	d5d5      	bpl.n	8007afa <ai_platform_network_process+0x476>
 8007b4e:	6898      	ldr	r0, [r3, #8]
 8007b50:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8007b54:	f002 fb62 	bl	800a21c <st_int8_copy>
 8007b58:	f859 200a 	ldr.w	r2, [r9, sl]
 8007b5c:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8007b60:	440b      	add	r3, r1
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d302      	bcc.n	8007b6c <ai_platform_network_process+0x4e8>
 8007b66:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007b6a:	1ad3      	subs	r3, r2, r3
 8007b6c:	f8c8 3004 	str.w	r3, [r8, #4]
 8007b70:	e7d9      	b.n	8007b26 <ai_platform_network_process+0x4a2>
 8007b72:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8007b76:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8007b7a:	3401      	adds	r4, #1
 8007b7c:	b2a4      	uxth	r4, r4
 8007b7e:	42a3      	cmp	r3, r4
 8007b80:	f8ab 4016 	strh.w	r4, [fp, #22]
 8007b84:	f63f af7f 	bhi.w	8007a86 <ai_platform_network_process+0x402>
 8007b88:	4620      	mov	r0, r4
 8007b8a:	b005      	add	sp, #20
 8007b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b90:	2a01      	cmp	r2, #1
 8007b92:	6b2e      	ldr	r6, [r5, #48]	@ 0x30
 8007b94:	d029      	beq.n	8007bea <ai_platform_network_process+0x566>
 8007b96:	f106 070c 	add.w	r7, r6, #12
 8007b9a:	e770      	b.n	8007a7e <ai_platform_network_process+0x3fa>
 8007b9c:	2218      	movs	r2, #24
 8007b9e:	2113      	movs	r1, #19
 8007ba0:	f105 0010 	add.w	r0, r5, #16
 8007ba4:	2400      	movs	r4, #0
 8007ba6:	f000 f851 	bl	8007c4c <core_set_error>
 8007baa:	e711      	b.n	80079d0 <ai_platform_network_process+0x34c>
 8007bac:	9d03      	ldr	r5, [sp, #12]
 8007bae:	4604      	mov	r4, r0
 8007bb0:	2217      	movs	r2, #23
 8007bb2:	2112      	movs	r1, #18
 8007bb4:	f105 0010 	add.w	r0, r5, #16
 8007bb8:	f000 f848 	bl	8007c4c <core_set_error>
 8007bbc:	e708      	b.n	80079d0 <ai_platform_network_process+0x34c>
 8007bbe:	9d03      	ldr	r5, [sp, #12]
 8007bc0:	2219      	movs	r2, #25
 8007bc2:	2112      	movs	r1, #18
 8007bc4:	2400      	movs	r4, #0
 8007bc6:	f105 0010 	add.w	r0, r5, #16
 8007bca:	f000 f83f 	bl	8007c4c <core_set_error>
 8007bce:	e6ff      	b.n	80079d0 <ai_platform_network_process+0x34c>
 8007bd0:	9d03      	ldr	r5, [sp, #12]
 8007bd2:	4604      	mov	r4, r0
 8007bd4:	2221      	movs	r2, #33	@ 0x21
 8007bd6:	2112      	movs	r1, #18
 8007bd8:	f105 0010 	add.w	r0, r5, #16
 8007bdc:	f000 f836 	bl	8007c4c <core_set_error>
 8007be0:	e6f6      	b.n	80079d0 <ai_platform_network_process+0x34c>
 8007be2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8007be6:	82ab      	strh	r3, [r5, #20]
 8007be8:	e744      	b.n	8007a74 <ai_platform_network_process+0x3f0>
 8007bea:	2700      	movs	r7, #0
 8007bec:	e747      	b.n	8007a7e <ai_platform_network_process+0x3fa>
 8007bee:	4604      	mov	r4, r0
 8007bf0:	2217      	movs	r2, #23
 8007bf2:	2113      	movs	r1, #19
 8007bf4:	f105 0010 	add.w	r0, r5, #16
 8007bf8:	f000 f828 	bl	8007c4c <core_set_error>
 8007bfc:	e6e8      	b.n	80079d0 <ai_platform_network_process+0x34c>
 8007bfe:	2219      	movs	r2, #25
 8007c00:	2113      	movs	r1, #19
 8007c02:	f105 0010 	add.w	r0, r5, #16
 8007c06:	2400      	movs	r4, #0
 8007c08:	f000 f820 	bl	8007c4c <core_set_error>
 8007c0c:	e6e0      	b.n	80079d0 <ai_platform_network_process+0x34c>
 8007c0e:	4604      	mov	r4, r0
 8007c10:	2221      	movs	r2, #33	@ 0x21
 8007c12:	2113      	movs	r1, #19
 8007c14:	f105 0010 	add.w	r0, r5, #16
 8007c18:	f000 f818 	bl	8007c4c <core_set_error>
 8007c1c:	e6d8      	b.n	80079d0 <ai_platform_network_process+0x34c>
 8007c1e:	2217      	movs	r2, #23
 8007c20:	2113      	movs	r1, #19
 8007c22:	f105 0010 	add.w	r0, r5, #16
 8007c26:	4654      	mov	r4, sl
 8007c28:	f000 f810 	bl	8007c4c <core_set_error>
 8007c2c:	e6d0      	b.n	80079d0 <ai_platform_network_process+0x34c>
 8007c2e:	bf00      	nop
 8007c30:	58024000 	.word	0x58024000
 8007c34:	f407a5c2 	.word	0xf407a5c2
 8007c38:	b5e8b5cd 	.word	0xb5e8b5cd

08007c3c <core_init>:
 8007c3c:	2001      	movs	r0, #1
 8007c3e:	4770      	bx	lr

08007c40 <core_get_error>:
 8007c40:	4603      	mov	r3, r0
 8007c42:	2200      	movs	r2, #0
 8007c44:	6800      	ldr	r0, [r0, #0]
 8007c46:	601a      	str	r2, [r3, #0]
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop

08007c4c <core_set_error>:
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	7800      	ldrb	r0, [r0, #0]
 8007c50:	b108      	cbz	r0, 8007c56 <core_set_error+0xa>
 8007c52:	2000      	movs	r0, #0
 8007c54:	4770      	bx	lr
 8007c56:	7019      	strb	r1, [r3, #0]
 8007c58:	2001      	movs	r0, #1
 8007c5a:	6819      	ldr	r1, [r3, #0]
 8007c5c:	f362 211f 	bfi	r1, r2, #8, #24
 8007c60:	6019      	str	r1, [r3, #0]
 8007c62:	4770      	bx	lr

08007c64 <node_convert>:
 8007c64:	6982      	ldr	r2, [r0, #24]
 8007c66:	8813      	ldrh	r3, [r2, #0]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d04a      	beq.n	8007d02 <node_convert+0x9e>
 8007c6c:	6852      	ldr	r2, [r2, #4]
 8007c6e:	6850      	ldr	r0, [r2, #4]
 8007c70:	b100      	cbz	r0, 8007c74 <node_convert+0x10>
 8007c72:	6800      	ldr	r0, [r0, #0]
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	f000 813d 	beq.w	8007ef4 <node_convert+0x290>
 8007c7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c7e:	6915      	ldr	r5, [r2, #16]
 8007c80:	b105      	cbz	r5, 8007c84 <node_convert+0x20>
 8007c82:	682d      	ldr	r5, [r5, #0]
 8007c84:	6883      	ldr	r3, [r0, #8]
 8007c86:	0a1b      	lsrs	r3, r3, #8
 8007c88:	f000 80ee 	beq.w	8007e68 <node_convert+0x204>
 8007c8c:	68c1      	ldr	r1, [r0, #12]
 8007c8e:	2401      	movs	r4, #1
 8007c90:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8007c94:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007c98:	4299      	cmp	r1, r3
 8007c9a:	fb02 f404 	mul.w	r4, r2, r4
 8007c9e:	d1f9      	bne.n	8007c94 <node_convert+0x30>
 8007ca0:	6982      	ldr	r2, [r0, #24]
 8007ca2:	69af      	ldr	r7, [r5, #24]
 8007ca4:	6813      	ldr	r3, [r2, #0]
 8007ca6:	f3c3 4143 	ubfx	r1, r3, #17, #4
 8007caa:	2901      	cmp	r1, #1
 8007cac:	d02b      	beq.n	8007d06 <node_convert+0xa2>
 8007cae:	6801      	ldr	r1, [r0, #0]
 8007cb0:	68bd      	ldr	r5, [r7, #8]
 8007cb2:	2900      	cmp	r1, #0
 8007cb4:	d069      	beq.n	8007d8a <node_convert+0x126>
 8007cb6:	684e      	ldr	r6, [r1, #4]
 8007cb8:	f3c3 50c0 	ubfx	r0, r3, #23, #1
 8007cbc:	6892      	ldr	r2, [r2, #8]
 8007cbe:	2e00      	cmp	r6, #0
 8007cc0:	f000 80b8 	beq.w	8007e34 <node_convert+0x1d0>
 8007cc4:	884b      	ldrh	r3, [r1, #2]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	f000 8089 	beq.w	8007dde <node_convert+0x17a>
 8007ccc:	6833      	ldr	r3, [r6, #0]
 8007cce:	ed93 7a00 	vldr	s14, [r3]
 8007cd2:	6873      	ldr	r3, [r6, #4]
 8007cd4:	2800      	cmp	r0, #0
 8007cd6:	f000 80c5 	beq.w	8007e64 <node_convert+0x200>
 8007cda:	f993 0000 	ldrsb.w	r0, [r3]
 8007cde:	b174      	cbz	r4, 8007cfe <node_convert+0x9a>
 8007ce0:	4629      	mov	r1, r5
 8007ce2:	4414      	add	r4, r2
 8007ce4:	f912 3b01 	ldrsb.w	r3, [r2], #1
 8007ce8:	1a1b      	subs	r3, r3, r0
 8007cea:	42a2      	cmp	r2, r4
 8007cec:	ee07 3a90 	vmov	s15, r3
 8007cf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007cf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007cf8:	ece1 7a01 	vstmia	r1!, {s15}
 8007cfc:	d1f2      	bne.n	8007ce4 <node_convert+0x80>
 8007cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	deff      	udf	#255	@ 0xff
 8007d06:	682e      	ldr	r6, [r5, #0]
 8007d08:	6895      	ldr	r5, [r2, #8]
 8007d0a:	2e00      	cmp	r6, #0
 8007d0c:	f000 80ae 	beq.w	8007e6c <node_convert+0x208>
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	6871      	ldr	r1, [r6, #4]
 8007d14:	68ba      	ldr	r2, [r7, #8]
 8007d16:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 8007d1a:	2900      	cmp	r1, #0
 8007d1c:	d064      	beq.n	8007de8 <node_convert+0x184>
 8007d1e:	8870      	ldrh	r0, [r6, #2]
 8007d20:	2800      	cmp	r0, #0
 8007d22:	d067      	beq.n	8007df4 <node_convert+0x190>
 8007d24:	6808      	ldr	r0, [r1, #0]
 8007d26:	edd0 7a00 	vldr	s15, [r0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	f000 80d7 	beq.w	8007ede <node_convert+0x27a>
 8007d30:	684b      	ldr	r3, [r1, #4]
 8007d32:	f993 3000 	ldrsb.w	r3, [r3]
 8007d36:	ee06 3a90 	vmov	s13, r3
 8007d3a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007d3e:	2c00      	cmp	r4, #0
 8007d40:	d0dd      	beq.n	8007cfe <node_convert+0x9a>
 8007d42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d46:	4414      	add	r4, r2
 8007d48:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8007d4c:	ed9f 5a6b 	vldr	s10, [pc, #428]	@ 8007efc <node_convert+0x298>
 8007d50:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8007d54:	ecb5 7a01 	vldmia	r5!, {s14}
 8007d58:	eef0 7a66 	vmov.f32	s15, s13
 8007d5c:	eee7 7a06 	vfma.f32	s15, s14, s12
 8007d60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d68:	bfac      	ite	ge
 8007d6a:	ee77 7aa5 	vaddge.f32	s15, s15, s11
 8007d6e:	ee77 7ac5 	vsublt.f32	s15, s15, s10
 8007d72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d76:	ee17 3a90 	vmov	r3, s15
 8007d7a:	f303 0307 	ssat	r3, #8, r3
 8007d7e:	f802 3b01 	strb.w	r3, [r2], #1
 8007d82:	42a2      	cmp	r2, r4
 8007d84:	d1e6      	bne.n	8007d54 <node_convert+0xf0>
 8007d86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d8a:	f3c3 11c6 	ubfx	r1, r3, #7, #7
 8007d8e:	f003 067f 	and.w	r6, r3, #127	@ 0x7f
 8007d92:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 8007d96:	6890      	ldr	r0, [r2, #8]
 8007d98:	1b8e      	subs	r6, r1, r6
 8007d9a:	2908      	cmp	r1, #8
 8007d9c:	4622      	mov	r2, r4
 8007d9e:	4629      	mov	r1, r5
 8007da0:	f106 0640 	add.w	r6, r6, #64	@ 0x40
 8007da4:	eba6 0603 	sub.w	r6, r6, r3
 8007da8:	f000 808b 	beq.w	8007ec2 <node_convert+0x25e>
 8007dac:	f003 fd8c 	bl	800b8c8 <arm_q15_to_float>
 8007db0:	2e00      	cmp	r6, #0
 8007db2:	d0a4      	beq.n	8007cfe <node_convert+0x9a>
 8007db4:	ee07 6a90 	vmov	s15, r6
 8007db8:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8007dbc:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8007dc0:	f006 fd2a 	bl	800e818 <powf>
 8007dc4:	2c00      	cmp	r4, #0
 8007dc6:	d09a      	beq.n	8007cfe <node_convert+0x9a>
 8007dc8:	2300      	movs	r3, #0
 8007dca:	ecf5 7a01 	vldmia	r5!, {s15}
 8007dce:	3301      	adds	r3, #1
 8007dd0:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007dd4:	429c      	cmp	r4, r3
 8007dd6:	ed45 7a01 	vstr	s15, [r5, #-4]
 8007dda:	d1f6      	bne.n	8007dca <node_convert+0x166>
 8007ddc:	e78f      	b.n	8007cfe <node_convert+0x9a>
 8007dde:	b358      	cbz	r0, 8007e38 <node_convert+0x1d4>
 8007de0:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8007f00 <node_convert+0x29c>
 8007de4:	4618      	mov	r0, r3
 8007de6:	e77a      	b.n	8007cde <node_convert+0x7a>
 8007de8:	b133      	cbz	r3, 8007df8 <node_convert+0x194>
 8007dea:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8007f00 <node_convert+0x29c>
 8007dee:	eef0 7a66 	vmov.f32	s15, s13
 8007df2:	e7a4      	b.n	8007d3e <node_convert+0xda>
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d1f8      	bne.n	8007dea <node_convert+0x186>
 8007df8:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8007dfc:	eddf 7a40 	vldr	s15, [pc, #256]	@ 8007f00 <node_convert+0x29c>
 8007e00:	2c00      	cmp	r4, #0
 8007e02:	f43f af7c 	beq.w	8007cfe <node_convert+0x9a>
 8007e06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e0a:	4414      	add	r4, r2
 8007e0c:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8007e10:	ecb5 7a01 	vldmia	r5!, {s14}
 8007e14:	eef0 7a66 	vmov.f32	s15, s13
 8007e18:	eee7 7a06 	vfma.f32	s15, s14, s12
 8007e1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e20:	ee17 3a90 	vmov	r3, s15
 8007e24:	f383 0308 	usat	r3, #8, r3
 8007e28:	f802 3b01 	strb.w	r3, [r2], #1
 8007e2c:	42a2      	cmp	r2, r4
 8007e2e:	d1ef      	bne.n	8007e10 <node_convert+0x1ac>
 8007e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e34:	2800      	cmp	r0, #0
 8007e36:	d147      	bne.n	8007ec8 <node_convert+0x264>
 8007e38:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8007f00 <node_convert+0x29c>
 8007e3c:	2c00      	cmp	r4, #0
 8007e3e:	f43f af5e 	beq.w	8007cfe <node_convert+0x9a>
 8007e42:	4629      	mov	r1, r5
 8007e44:	4414      	add	r4, r2
 8007e46:	f812 3b01 	ldrb.w	r3, [r2], #1
 8007e4a:	1a1b      	subs	r3, r3, r0
 8007e4c:	42a2      	cmp	r2, r4
 8007e4e:	ee07 3a90 	vmov	s15, r3
 8007e52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007e5a:	ece1 7a01 	vstmia	r1!, {s15}
 8007e5e:	d1f2      	bne.n	8007e46 <node_convert+0x1e2>
 8007e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e64:	7818      	ldrb	r0, [r3, #0]
 8007e66:	e7e9      	b.n	8007e3c <node_convert+0x1d8>
 8007e68:	2401      	movs	r4, #1
 8007e6a:	e719      	b.n	8007ca0 <node_convert+0x3c>
 8007e6c:	683a      	ldr	r2, [r7, #0]
 8007e6e:	f3c2 18c6 	ubfx	r8, r2, #7, #7
 8007e72:	f002 037f 	and.w	r3, r2, #127	@ 0x7f
 8007e76:	f3c2 52c0 	ubfx	r2, r2, #23, #1
 8007e7a:	eba8 0303 	sub.w	r3, r8, r3
 8007e7e:	3340      	adds	r3, #64	@ 0x40
 8007e80:	1a9b      	subs	r3, r3, r2
 8007e82:	d014      	beq.n	8007eae <node_convert+0x24a>
 8007e84:	425b      	negs	r3, r3
 8007e86:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8007e8a:	ee00 3a90 	vmov	s1, r3
 8007e8e:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8007e92:	f006 fcc1 	bl	800e818 <powf>
 8007e96:	b154      	cbz	r4, 8007eae <node_convert+0x24a>
 8007e98:	4633      	mov	r3, r6
 8007e9a:	462a      	mov	r2, r5
 8007e9c:	ecf2 7a01 	vldmia	r2!, {s15}
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007ea6:	42a3      	cmp	r3, r4
 8007ea8:	ed42 7a01 	vstr	s15, [r2, #-4]
 8007eac:	d1f6      	bne.n	8007e9c <node_convert+0x238>
 8007eae:	f1b8 0f08 	cmp.w	r8, #8
 8007eb2:	d00d      	beq.n	8007ed0 <node_convert+0x26c>
 8007eb4:	4622      	mov	r2, r4
 8007eb6:	68b9      	ldr	r1, [r7, #8]
 8007eb8:	4628      	mov	r0, r5
 8007eba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ebe:	f003 bb81 	b.w	800b5c4 <arm_float_to_q15>
 8007ec2:	f003 fd67 	bl	800b994 <arm_q7_to_float>
 8007ec6:	e773      	b.n	8007db0 <node_convert+0x14c>
 8007ec8:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8007f00 <node_convert+0x29c>
 8007ecc:	4630      	mov	r0, r6
 8007ece:	e706      	b.n	8007cde <node_convert+0x7a>
 8007ed0:	4622      	mov	r2, r4
 8007ed2:	68b9      	ldr	r1, [r7, #8]
 8007ed4:	4628      	mov	r0, r5
 8007ed6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007eda:	f003 bc29 	b.w	800b730 <arm_float_to_q7>
 8007ede:	684b      	ldr	r3, [r1, #4]
 8007ee0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	ee06 3a90 	vmov	s13, r3
 8007eea:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007eee:	ee76 6a87 	vadd.f32	s13, s13, s14
 8007ef2:	e785      	b.n	8007e00 <node_convert+0x19c>
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	deff      	udf	#255	@ 0xff
 8007efa:	bf00      	nop
 8007efc:	3efffffc 	.word	0x3efffffc
 8007f00:	00000000 	.word	0x00000000

08007f04 <ai_check_custom_types>:
 8007f04:	b082      	sub	sp, #8
 8007f06:	4b12      	ldr	r3, [pc, #72]	@ (8007f50 <ai_check_custom_types+0x4c>)
 8007f08:	9301      	str	r3, [sp, #4]
 8007f0a:	b118      	cbz	r0, 8007f14 <ai_check_custom_types+0x10>
 8007f0c:	7803      	ldrb	r3, [r0, #0]
 8007f0e:	2b03      	cmp	r3, #3
 8007f10:	d002      	beq.n	8007f18 <ai_check_custom_types+0x14>
 8007f12:	2000      	movs	r0, #0
 8007f14:	b002      	add	sp, #8
 8007f16:	4770      	bx	lr
 8007f18:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d004      	beq.n	8007f2a <ai_check_custom_types+0x26>
 8007f20:	2001      	movs	r0, #1
 8007f22:	f080 0001 	eor.w	r0, r0, #1
 8007f26:	b002      	add	sp, #8
 8007f28:	4770      	bx	lr
 8007f2a:	7842      	ldrb	r2, [r0, #1]
 8007f2c:	3001      	adds	r0, #1
 8007f2e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007f32:	429a      	cmp	r2, r3
 8007f34:	d1f4      	bne.n	8007f20 <ai_check_custom_types+0x1c>
 8007f36:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8007f3a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d1ee      	bne.n	8007f20 <ai_check_custom_types+0x1c>
 8007f42:	7842      	ldrb	r2, [r0, #1]
 8007f44:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d1e9      	bne.n	8007f20 <ai_check_custom_types+0x1c>
 8007f4c:	2000      	movs	r0, #0
 8007f4e:	e7e8      	b.n	8007f22 <ai_check_custom_types+0x1e>
 8007f50:	84048403 	.word	0x84048403

08007f54 <ai_layers_init_all>:
 8007f54:	2100      	movs	r1, #0
 8007f56:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8007f58:	b13b      	cbz	r3, 8007f6a <ai_layers_init_all+0x16>
 8007f5a:	691a      	ldr	r2, [r3, #16]
 8007f5c:	3101      	adds	r1, #1
 8007f5e:	60d8      	str	r0, [r3, #12]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	4613      	mov	r3, r2
 8007f64:	d001      	beq.n	8007f6a <ai_layers_init_all+0x16>
 8007f66:	2a00      	cmp	r2, #0
 8007f68:	d1f6      	bne.n	8007f58 <ai_layers_init_all+0x4>
 8007f6a:	4608      	mov	r0, r1
 8007f6c:	4770      	bx	lr
 8007f6e:	bf00      	nop

08007f70 <ai_layers_post_init_all>:
 8007f70:	b538      	push	{r3, r4, r5, lr}
 8007f72:	2500      	movs	r5, #0
 8007f74:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8007f76:	b16c      	cbz	r4, 8007f94 <ai_layers_post_init_all+0x24>
 8007f78:	6863      	ldr	r3, [r4, #4]
 8007f7a:	07db      	lsls	r3, r3, #31
 8007f7c:	d504      	bpl.n	8007f88 <ai_layers_post_init_all+0x18>
 8007f7e:	6a23      	ldr	r3, [r4, #32]
 8007f80:	4620      	mov	r0, r4
 8007f82:	b10b      	cbz	r3, 8007f88 <ai_layers_post_init_all+0x18>
 8007f84:	3501      	adds	r5, #1
 8007f86:	4798      	blx	r3
 8007f88:	6923      	ldr	r3, [r4, #16]
 8007f8a:	42a3      	cmp	r3, r4
 8007f8c:	461c      	mov	r4, r3
 8007f8e:	d001      	beq.n	8007f94 <ai_layers_post_init_all+0x24>
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d1f0      	bne.n	8007f76 <ai_layers_post_init_all+0x6>
 8007f94:	4628      	mov	r0, r5
 8007f96:	bd38      	pop	{r3, r4, r5, pc}

08007f98 <ai_layers_forward_all>:
 8007f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f9c:	f8d0 803c 	ldr.w	r8, [r0, #60]	@ 0x3c
 8007fa0:	4604      	mov	r4, r0
 8007fa2:	f1b8 0f00 	cmp.w	r8, #0
 8007fa6:	d02a      	beq.n	8007ffe <ai_layers_forward_all+0x66>
 8007fa8:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8007faa:	6381      	str	r1, [r0, #56]	@ 0x38
 8007fac:	b319      	cbz	r1, 8007ff6 <ai_layers_forward_all+0x5e>
 8007fae:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8007fb0:	2001      	movs	r0, #1
 8007fb2:	47c0      	blx	r8
 8007fb4:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8007fb6:	b1f6      	cbz	r6, 8007ff6 <ai_layers_forward_all+0x5e>
 8007fb8:	2700      	movs	r7, #0
 8007fba:	4631      	mov	r1, r6
 8007fbc:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8007fbe:	2002      	movs	r0, #2
 8007fc0:	47c0      	blx	r8
 8007fc2:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8007fc4:	4628      	mov	r0, r5
 8007fc6:	696b      	ldr	r3, [r5, #20]
 8007fc8:	4798      	blx	r3
 8007fca:	692e      	ldr	r6, [r5, #16]
 8007fcc:	2003      	movs	r0, #3
 8007fce:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8007fd0:	42b5      	cmp	r5, r6
 8007fd2:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007fd4:	d007      	beq.n	8007fe6 <ai_layers_forward_all+0x4e>
 8007fd6:	47c0      	blx	r8
 8007fd8:	3701      	adds	r7, #1
 8007fda:	63a6      	str	r6, [r4, #56]	@ 0x38
 8007fdc:	2e00      	cmp	r6, #0
 8007fde:	d1ec      	bne.n	8007fba <ai_layers_forward_all+0x22>
 8007fe0:	4638      	mov	r0, r7
 8007fe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fe6:	2003      	movs	r0, #3
 8007fe8:	3701      	adds	r7, #1
 8007fea:	47c0      	blx	r8
 8007fec:	2300      	movs	r3, #0
 8007fee:	4638      	mov	r0, r7
 8007ff0:	63a3      	str	r3, [r4, #56]	@ 0x38
 8007ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ff6:	2700      	movs	r7, #0
 8007ff8:	4638      	mov	r0, r7
 8007ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ffe:	6b45      	ldr	r5, [r0, #52]	@ 0x34
 8008000:	6385      	str	r5, [r0, #56]	@ 0x38
 8008002:	2d00      	cmp	r5, #0
 8008004:	d0f7      	beq.n	8007ff6 <ai_layers_forward_all+0x5e>
 8008006:	4647      	mov	r7, r8
 8008008:	696b      	ldr	r3, [r5, #20]
 800800a:	4628      	mov	r0, r5
 800800c:	4798      	blx	r3
 800800e:	462b      	mov	r3, r5
 8008010:	692d      	ldr	r5, [r5, #16]
 8008012:	429d      	cmp	r5, r3
 8008014:	d004      	beq.n	8008020 <ai_layers_forward_all+0x88>
 8008016:	3701      	adds	r7, #1
 8008018:	63a5      	str	r5, [r4, #56]	@ 0x38
 800801a:	2d00      	cmp	r5, #0
 800801c:	d1f4      	bne.n	8008008 <ai_layers_forward_all+0x70>
 800801e:	e7df      	b.n	8007fe0 <ai_layers_forward_all+0x48>
 8008020:	2300      	movs	r3, #0
 8008022:	3701      	adds	r7, #1
 8008024:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008026:	e7db      	b.n	8007fe0 <ai_layers_forward_all+0x48>

08008028 <func_dummy>:
 8008028:	4770      	bx	lr
 800802a:	bf00      	nop

0800802c <forward_conv2d_sssa8_ch_nl_pool>:
 800802c:	6982      	ldr	r2, [r0, #24]
 800802e:	8813      	ldrh	r3, [r2, #0]
 8008030:	2b00      	cmp	r3, #0
 8008032:	f000 823f 	beq.w	80084b4 <forward_conv2d_sssa8_ch_nl_pool+0x488>
 8008036:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800803a:	ed2d 8b04 	vpush	{d8-d9}
 800803e:	6852      	ldr	r2, [r2, #4]
 8008040:	b0cf      	sub	sp, #316	@ 0x13c
 8008042:	4681      	mov	r9, r0
 8008044:	f8d2 a004 	ldr.w	sl, [r2, #4]
 8008048:	f1ba 0f00 	cmp.w	sl, #0
 800804c:	d001      	beq.n	8008052 <forward_conv2d_sssa8_ch_nl_pool+0x26>
 800804e:	f8da a000 	ldr.w	sl, [sl]
 8008052:	2b01      	cmp	r3, #1
 8008054:	f000 8285 	beq.w	8008562 <forward_conv2d_sssa8_ch_nl_pool+0x536>
 8008058:	6911      	ldr	r1, [r2, #16]
 800805a:	911b      	str	r1, [sp, #108]	@ 0x6c
 800805c:	b109      	cbz	r1, 8008062 <forward_conv2d_sssa8_ch_nl_pool+0x36>
 800805e:	6809      	ldr	r1, [r1, #0]
 8008060:	911b      	str	r1, [sp, #108]	@ 0x6c
 8008062:	2b02      	cmp	r3, #2
 8008064:	f000 8223 	beq.w	80084ae <forward_conv2d_sssa8_ch_nl_pool+0x482>
 8008068:	69d1      	ldr	r1, [r2, #28]
 800806a:	2900      	cmp	r1, #0
 800806c:	f000 8274 	beq.w	8008558 <forward_conv2d_sssa8_ch_nl_pool+0x52c>
 8008070:	8b10      	ldrh	r0, [r2, #24]
 8008072:	680c      	ldr	r4, [r1, #0]
 8008074:	2801      	cmp	r0, #1
 8008076:	9415      	str	r4, [sp, #84]	@ 0x54
 8008078:	f200 821e 	bhi.w	80084b8 <forward_conv2d_sssa8_ch_nl_pool+0x48c>
 800807c:	2000      	movs	r0, #0
 800807e:	9018      	str	r0, [sp, #96]	@ 0x60
 8008080:	2b03      	cmp	r3, #3
 8008082:	f000 8271 	beq.w	8008568 <forward_conv2d_sssa8_ch_nl_pool+0x53c>
 8008086:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8008088:	2b00      	cmp	r3, #0
 800808a:	f000 8268 	beq.w	800855e <forward_conv2d_sssa8_ch_nl_pool+0x532>
 800808e:	f8d9 2024 	ldr.w	r2, [r9, #36]	@ 0x24
 8008092:	6818      	ldr	r0, [r3, #0]
 8008094:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8008098:	922e      	str	r2, [sp, #184]	@ 0xb8
 800809a:	9026      	str	r0, [sp, #152]	@ 0x98
 800809c:	2a00      	cmp	r2, #0
 800809e:	f000 8255 	beq.w	800854c <forward_conv2d_sssa8_ch_nl_pool+0x520>
 80080a2:	f8d3 b008 	ldr.w	fp, [r3, #8]
 80080a6:	f8d8 200c 	ldr.w	r2, [r8, #12]
 80080aa:	f8da 600c 	ldr.w	r6, [sl, #12]
 80080ae:	6852      	ldr	r2, [r2, #4]
 80080b0:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80080b2:	4615      	mov	r5, r2
 80080b4:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 80080b6:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80080ba:	b2ad      	uxth	r5, r5
 80080bc:	6874      	ldr	r4, [r6, #4]
 80080be:	68c0      	ldr	r0, [r0, #12]
 80080c0:	9417      	str	r4, [sp, #92]	@ 0x5c
 80080c2:	951e      	str	r5, [sp, #120]	@ 0x78
 80080c4:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 80080c8:	f8d9 303c 	ldr.w	r3, [r9, #60]	@ 0x3c
 80080cc:	ee09 5a90 	vmov	s19, r5
 80080d0:	68c5      	ldr	r5, [r0, #12]
 80080d2:	6880      	ldr	r0, [r0, #8]
 80080d4:	9520      	str	r5, [sp, #128]	@ 0x80
 80080d6:	9034      	str	r0, [sp, #208]	@ 0xd0
 80080d8:	f8d9 402c 	ldr.w	r4, [r9, #44]	@ 0x2c
 80080dc:	921f      	str	r2, [sp, #124]	@ 0x7c
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	f8d9 7058 	ldr.w	r7, [r9, #88]	@ 0x58
 80080e4:	e9d6 5002 	ldrd	r5, r0, [r6, #8]
 80080e8:	9538      	str	r5, [sp, #224]	@ 0xe0
 80080ea:	f8b9 5028 	ldrh.w	r5, [r9, #40]	@ 0x28
 80080ee:	952f      	str	r5, [sp, #188]	@ 0xbc
 80080f0:	b2a5      	uxth	r5, r4
 80080f2:	9530      	str	r5, [sp, #192]	@ 0xc0
 80080f4:	b295      	uxth	r5, r2
 80080f6:	9516      	str	r5, [sp, #88]	@ 0x58
 80080f8:	889d      	ldrh	r5, [r3, #4]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	9531      	str	r5, [sp, #196]	@ 0xc4
 80080fe:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8008102:	9524      	str	r5, [sp, #144]	@ 0x90
 8008104:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8008108:	9532      	str	r5, [sp, #200]	@ 0xc8
 800810a:	f8d9 5044 	ldr.w	r5, [r9, #68]	@ 0x44
 800810e:	9535      	str	r5, [sp, #212]	@ 0xd4
 8008110:	f8d9 504c 	ldr.w	r5, [r9, #76]	@ 0x4c
 8008114:	9536      	str	r5, [sp, #216]	@ 0xd8
 8008116:	f8d9 5050 	ldr.w	r5, [r9, #80]	@ 0x50
 800811a:	9519      	str	r5, [sp, #100]	@ 0x64
 800811c:	683d      	ldr	r5, [r7, #0]
 800811e:	9527      	str	r5, [sp, #156]	@ 0x9c
 8008120:	687d      	ldr	r5, [r7, #4]
 8008122:	9537      	str	r5, [sp, #220]	@ 0xdc
 8008124:	2900      	cmp	r1, #0
 8008126:	f000 8204 	beq.w	8008532 <forward_conv2d_sssa8_ch_nl_pool+0x506>
 800812a:	6889      	ldr	r1, [r1, #8]
 800812c:	2900      	cmp	r1, #0
 800812e:	f000 8200 	beq.w	8008532 <forward_conv2d_sssa8_ch_nl_pool+0x506>
 8008132:	698d      	ldr	r5, [r1, #24]
 8008134:	2d00      	cmp	r5, #0
 8008136:	bf08      	it	eq
 8008138:	4629      	moveq	r1, r5
 800813a:	ee08 1a90 	vmov	s17, r1
 800813e:	b292      	uxth	r2, r2
 8008140:	f8db 6018 	ldr.w	r6, [fp, #24]
 8008144:	b2a1      	uxth	r1, r4
 8008146:	f8d8 5018 	ldr.w	r5, [r8, #24]
 800814a:	fa12 f783 	uxtah	r7, r2, r3
 800814e:	1813      	adds	r3, r2, r0
 8008150:	aa3f      	add	r2, sp, #252	@ 0xfc
 8008152:	9123      	str	r1, [sp, #140]	@ 0x8c
 8008154:	4407      	add	r7, r0
 8008156:	931d      	str	r3, [sp, #116]	@ 0x74
 8008158:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800815a:	f10d 0cec 	add.w	ip, sp, #236	@ 0xec
 800815e:	924c      	str	r2, [sp, #304]	@ 0x130
 8008160:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008164:	1aff      	subs	r7, r7, r3
 8008166:	ac43      	add	r4, sp, #268	@ 0x10c
 8008168:	a847      	add	r0, sp, #284	@ 0x11c
 800816a:	f8cd c128 	str.w	ip, [sp, #296]	@ 0x128
 800816e:	fbb7 f3f1 	udiv	r3, r7, r1
 8008172:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 8008174:	f240 4101 	movw	r1, #1025	@ 0x401
 8008178:	9313      	str	r3, [sp, #76]	@ 0x4c
 800817a:	2300      	movs	r3, #0
 800817c:	69bf      	ldr	r7, [r7, #24]
 800817e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8008180:	933b      	str	r3, [sp, #236]	@ 0xec
 8008182:	933f      	str	r3, [sp, #252]	@ 0xfc
 8008184:	933e      	str	r3, [sp, #248]	@ 0xf8
 8008186:	9342      	str	r3, [sp, #264]	@ 0x108
 8008188:	934d      	str	r3, [sp, #308]	@ 0x134
 800818a:	9728      	str	r7, [sp, #160]	@ 0xa0
 800818c:	e9cd 333c 	strd	r3, r3, [sp, #240]	@ 0xf0
 8008190:	e9cd 3340 	strd	r3, r3, [sp, #256]	@ 0x100
 8008194:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 8008198:	e9cd 2148 	strd	r2, r1, [sp, #288]	@ 0x120
 800819c:	f240 4102 	movw	r1, #1026	@ 0x402
 80081a0:	9322      	str	r3, [sp, #136]	@ 0x88
 80081a2:	f8d9 305c 	ldr.w	r3, [r9, #92]	@ 0x5c
 80081a6:	914b      	str	r1, [sp, #300]	@ 0x12c
 80081a8:	4659      	mov	r1, fp
 80081aa:	9333      	str	r3, [sp, #204]	@ 0xcc
 80081ac:	f003 fd16 	bl	800bbdc <core_tensor_clone>
 80081b0:	4631      	mov	r1, r6
 80081b2:	4620      	mov	r0, r4
 80081b4:	f003 fd44 	bl	800bc40 <core_array_clone>
 80081b8:	944d      	str	r4, [sp, #308]	@ 0x134
 80081ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80081be:	9915      	ldr	r1, [sp, #84]	@ 0x54
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	6809      	ldr	r1, [r1, #0]
 80081c4:	931c      	str	r3, [sp, #112]	@ 0x70
 80081c6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80081c8:	f8da 2000 	ldr.w	r2, [sl]
 80081cc:	f8d3 e018 	ldr.w	lr, [r3, #24]
 80081d0:	f9bd 409c 	ldrsh.w	r4, [sp, #156]	@ 0x9c
 80081d4:	f8de 3008 	ldr.w	r3, [lr, #8]
 80081d8:	9114      	str	r1, [sp, #80]	@ 0x50
 80081da:	9325      	str	r3, [sp, #148]	@ 0x94
 80081dc:	f8d8 3000 	ldr.w	r3, [r8]
 80081e0:	2a00      	cmp	r2, #0
 80081e2:	f000 818e 	beq.w	8008502 <forward_conv2d_sssa8_ch_nl_pool+0x4d6>
 80081e6:	6851      	ldr	r1, [r2, #4]
 80081e8:	2900      	cmp	r1, #0
 80081ea:	f000 818a 	beq.w	8008502 <forward_conv2d_sssa8_ch_nl_pool+0x4d6>
 80081ee:	8850      	ldrh	r0, [r2, #2]
 80081f0:	2800      	cmp	r0, #0
 80081f2:	f000 8186 	beq.w	8008502 <forward_conv2d_sssa8_ch_nl_pool+0x4d6>
 80081f6:	6809      	ldr	r1, [r1, #0]
 80081f8:	ed91 0a00 	vldr	s0, [r1]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	f000 817d 	beq.w	80084fc <forward_conv2d_sssa8_ch_nl_pool+0x4d0>
 8008202:	6859      	ldr	r1, [r3, #4]
 8008204:	2900      	cmp	r1, #0
 8008206:	f000 8179 	beq.w	80084fc <forward_conv2d_sssa8_ch_nl_pool+0x4d0>
 800820a:	8858      	ldrh	r0, [r3, #2]
 800820c:	2800      	cmp	r0, #0
 800820e:	f000 8175 	beq.w	80084fc <forward_conv2d_sssa8_ch_nl_pool+0x4d0>
 8008212:	6809      	ldr	r1, [r1, #0]
 8008214:	edd1 0a00 	vldr	s1, [r1]
 8008218:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800821a:	f8da c018 	ldr.w	ip, [sl, #24]
 800821e:	6988      	ldr	r0, [r1, #24]
 8008220:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8008222:	f8dc 7008 	ldr.w	r7, [ip, #8]
 8008226:	6989      	ldr	r1, [r1, #24]
 8008228:	6880      	ldr	r0, [r0, #8]
 800822a:	6889      	ldr	r1, [r1, #8]
 800822c:	9718      	str	r7, [sp, #96]	@ 0x60
 800822e:	912d      	str	r1, [sp, #180]	@ 0xb4
 8008230:	f899 1041 	ldrb.w	r1, [r9, #65]	@ 0x41
 8008234:	902c      	str	r0, [sp, #176]	@ 0xb0
 8008236:	912b      	str	r1, [sp, #172]	@ 0xac
 8008238:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800823a:	b121      	cbz	r1, 8008246 <forward_conv2d_sssa8_ch_nl_pool+0x21a>
 800823c:	6849      	ldr	r1, [r1, #4]
 800823e:	9114      	str	r1, [sp, #80]	@ 0x50
 8008240:	b109      	cbz	r1, 8008246 <forward_conv2d_sssa8_ch_nl_pool+0x21a>
 8008242:	6809      	ldr	r1, [r1, #0]
 8008244:	9114      	str	r1, [sp, #80]	@ 0x50
 8008246:	2a00      	cmp	r2, #0
 8008248:	f000 8171 	beq.w	800852e <forward_conv2d_sssa8_ch_nl_pool+0x502>
 800824c:	6851      	ldr	r1, [r2, #4]
 800824e:	2900      	cmp	r1, #0
 8008250:	f000 817a 	beq.w	8008548 <forward_conv2d_sssa8_ch_nl_pool+0x51c>
 8008254:	8852      	ldrh	r2, [r2, #2]
 8008256:	2a00      	cmp	r2, #0
 8008258:	f000 8169 	beq.w	800852e <forward_conv2d_sssa8_ch_nl_pool+0x502>
 800825c:	684a      	ldr	r2, [r1, #4]
 800825e:	f992 2000 	ldrsb.w	r2, [r2]
 8008262:	9229      	str	r2, [sp, #164]	@ 0xa4
 8008264:	2b00      	cmp	r3, #0
 8008266:	f000 8160 	beq.w	800852a <forward_conv2d_sssa8_ch_nl_pool+0x4fe>
 800826a:	685a      	ldr	r2, [r3, #4]
 800826c:	2a00      	cmp	r2, #0
 800826e:	f000 8171 	beq.w	8008554 <forward_conv2d_sssa8_ch_nl_pool+0x528>
 8008272:	885b      	ldrh	r3, [r3, #2]
 8008274:	2b00      	cmp	r3, #0
 8008276:	f000 8158 	beq.w	800852a <forward_conv2d_sssa8_ch_nl_pool+0x4fe>
 800827a:	6853      	ldr	r3, [r2, #4]
 800827c:	f993 3000 	ldrsb.w	r3, [r3]
 8008280:	932a      	str	r3, [sp, #168]	@ 0xa8
 8008282:	f8bd a07c 	ldrh.w	sl, [sp, #124]	@ 0x7c
 8008286:	edcd 0a1a 	vstr	s1, [sp, #104]	@ 0x68
 800828a:	ed8d 0a15 	vstr	s0, [sp, #84]	@ 0x54
 800828e:	e9de 0100 	ldrd	r0, r1, [lr]
 8008292:	f003 fc4f 	bl	800bb34 <ai_array_get_byte_size>
 8008296:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8008298:	eba0 034a 	sub.w	r3, r0, sl, lsl #1
 800829c:	eddd 0a1a 	vldr	s1, [sp, #104]	@ 0x68
 80082a0:	ed9d 0a15 	vldr	s0, [sp, #84]	@ 0x54
 80082a4:	4413      	add	r3, r2
 80082a6:	9814      	ldr	r0, [sp, #80]	@ 0x50
 80082a8:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80082aa:	f001 fc03 	bl	8009ab4 <align_factor_ch>
 80082ae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	f000 8117 	beq.w	80084e4 <forward_conv2d_sssa8_ch_nl_pool+0x4b8>
 80082b6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80082b8:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 80082bc:	fb02 f10a 	mul.w	r1, r2, sl
 80082c0:	b292      	uxth	r2, r2
 80082c2:	f04f 0a00 	mov.w	sl, #0
 80082c6:	9417      	str	r4, [sp, #92]	@ 0x5c
 80082c8:	ee08 1a10 	vmov	s16, r1
 80082cc:	9221      	str	r2, [sp, #132]	@ 0x84
 80082ce:	9938      	ldr	r1, [sp, #224]	@ 0xe0
 80082d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80082d2:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
 80082d6:	fb01 f202 	mul.w	r2, r1, r2
 80082da:	fb03 f202 	mul.w	r2, r3, r2
 80082de:	fb01 f303 	mul.w	r3, r1, r3
 80082e2:	9238      	str	r2, [sp, #224]	@ 0xe0
 80082e4:	9339      	str	r3, [sp, #228]	@ 0xe4
 80082e6:	b28b      	uxth	r3, r1
 80082e8:	ee09 3a10 	vmov	s18, r3
 80082ec:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	@ 0x88
 80082f0:	931c      	str	r3, [sp, #112]	@ 0x70
 80082f2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80082f4:	931f      	str	r3, [sp, #124]	@ 0x7c
 80082f6:	e0b8      	b.n	800846a <forward_conv2d_sssa8_ch_nl_pool+0x43e>
 80082f8:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80082fa:	68aa      	ldr	r2, [r5, #8]
 80082fc:	699b      	ldr	r3, [r3, #24]
 80082fe:	9214      	str	r2, [sp, #80]	@ 0x50
 8008300:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008304:	f003 fc16 	bl	800bb34 <ai_array_get_byte_size>
 8008308:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800830a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800830c:	ee19 1a10 	vmov	r1, s18
 8008310:	930d      	str	r3, [sp, #52]	@ 0x34
 8008312:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8008314:	920c      	str	r2, [sp, #48]	@ 0x30
 8008316:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008318:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800831a:	9010      	str	r0, [sp, #64]	@ 0x40
 800831c:	930a      	str	r3, [sp, #40]	@ 0x28
 800831e:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8008320:	9309      	str	r3, [sp, #36]	@ 0x24
 8008322:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8008324:	9308      	str	r3, [sp, #32]
 8008326:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008328:	9307      	str	r3, [sp, #28]
 800832a:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 800832c:	9306      	str	r3, [sp, #24]
 800832e:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8008330:	9305      	str	r3, [sp, #20]
 8008332:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8008334:	9304      	str	r3, [sp, #16]
 8008336:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8008338:	9301      	str	r3, [sp, #4]
 800833a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 800833c:	9300      	str	r3, [sp, #0]
 800833e:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8008340:	9311      	str	r3, [sp, #68]	@ 0x44
 8008342:	2301      	movs	r3, #1
 8008344:	930e      	str	r3, [sp, #56]	@ 0x38
 8008346:	f8bd 3090 	ldrh.w	r3, [sp, #144]	@ 0x90
 800834a:	9303      	str	r3, [sp, #12]
 800834c:	f8bd 30c8 	ldrh.w	r3, [sp, #200]	@ 0xc8
 8008350:	9302      	str	r3, [sp, #8]
 8008352:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8008354:	9f1f      	ldr	r7, [sp, #124]	@ 0x7c
 8008356:	429c      	cmp	r4, r3
 8008358:	bf08      	it	eq
 800835a:	f1ba 0f00 	cmpeq.w	sl, #0
 800835e:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8008360:	b2ba      	uxth	r2, r7
 8008362:	bf0c      	ite	eq
 8008364:	2301      	moveq	r3, #1
 8008366:	2300      	movne	r3, #0
 8008368:	930f      	str	r3, [sp, #60]	@ 0x3c
 800836a:	ee19 3a90 	vmov	r3, s19
 800836e:	f000 fc1d 	bl	8008bac <forward_lite_conv2d_sssa8_ch>
 8008372:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008374:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8008376:	4293      	cmp	r3, r2
 8008378:	f000 80b0 	beq.w	80084dc <forward_conv2d_sssa8_ch_nl_pool+0x4b0>
 800837c:	1ad3      	subs	r3, r2, r3
 800837e:	463a      	mov	r2, r7
 8008380:	429f      	cmp	r7, r3
 8008382:	931d      	str	r3, [sp, #116]	@ 0x74
 8008384:	bf28      	it	cs
 8008386:	461a      	movcs	r2, r3
 8008388:	921f      	str	r2, [sp, #124]	@ 0x7c
 800838a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800838c:	2b00      	cmp	r3, #0
 800838e:	f040 8096 	bne.w	80084be <forward_conv2d_sssa8_ch_nl_pool+0x492>
 8008392:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8008394:	9a38      	ldr	r2, [sp, #224]	@ 0xe0
 8008396:	4413      	add	r3, r2
 8008398:	9318      	str	r3, [sp, #96]	@ 0x60
 800839a:	3401      	adds	r4, #1
 800839c:	ee18 3a90 	vmov	r3, s17
 80083a0:	ee18 2a10 	vmov	r2, s16
 80083a4:	4641      	mov	r1, r8
 80083a6:	b224      	sxth	r4, r4
 80083a8:	4658      	mov	r0, fp
 80083aa:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 80083ac:	47b8      	blx	r7
 80083ae:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80083b0:	429c      	cmp	r4, r3
 80083b2:	db32      	blt.n	800841a <forward_conv2d_sssa8_ch_nl_pool+0x3ee>
 80083b4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80083b6:	2201      	movs	r2, #1
 80083b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80083ba:	a847      	add	r0, sp, #284	@ 0x11c
 80083bc:	9308      	str	r3, [sp, #32]
 80083be:	4492      	add	sl, r2
 80083c0:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 80083c4:	9207      	str	r2, [sp, #28]
 80083c6:	1ae4      	subs	r4, r4, r3
 80083c8:	9305      	str	r3, [sp, #20]
 80083ca:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 80083ce:	f8bd 2088 	ldrh.w	r2, [sp, #136]	@ 0x88
 80083d2:	b224      	sxth	r4, r4
 80083d4:	9303      	str	r3, [sp, #12]
 80083d6:	f8bd 30d0 	ldrh.w	r3, [sp, #208]	@ 0xd0
 80083da:	9201      	str	r2, [sp, #4]
 80083dc:	1a52      	subs	r2, r2, r1
 80083de:	9306      	str	r3, [sp, #24]
 80083e0:	f8bd 30d8 	ldrh.w	r3, [sp, #216]	@ 0xd8
 80083e4:	b292      	uxth	r2, r2
 80083e6:	9921      	ldr	r1, [sp, #132]	@ 0x84
 80083e8:	9304      	str	r3, [sp, #16]
 80083ea:	f8bd 30dc 	ldrh.w	r3, [sp, #220]	@ 0xdc
 80083ee:	9f33      	ldr	r7, [sp, #204]	@ 0xcc
 80083f0:	9302      	str	r3, [sp, #8]
 80083f2:	f8bd 30d4 	ldrh.w	r3, [sp, #212]	@ 0xd4
 80083f6:	9300      	str	r3, [sp, #0]
 80083f8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80083fa:	47b8      	blx	r7
 80083fc:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80083fe:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 8008402:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8008404:	1ad3      	subs	r3, r2, r3
 8008406:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800840a:	b21a      	sxth	r2, r3
 800840c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800840e:	695b      	ldr	r3, [r3, #20]
 8008410:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008412:	68da      	ldr	r2, [r3, #12]
 8008414:	688b      	ldr	r3, [r1, #8]
 8008416:	4413      	add	r3, r2
 8008418:	608b      	str	r3, [r1, #8]
 800841a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800841e:	68aa      	ldr	r2, [r5, #8]
 8008420:	68db      	ldr	r3, [r3, #12]
 8008422:	4413      	add	r3, r2
 8008424:	60ab      	str	r3, [r5, #8]
 8008426:	f8d9 2024 	ldr.w	r2, [r9, #36]	@ 0x24
 800842a:	b132      	cbz	r2, 800843a <forward_conv2d_sssa8_ch_nl_pool+0x40e>
 800842c:	f8db 3014 	ldr.w	r3, [fp, #20]
 8008430:	68da      	ldr	r2, [r3, #12]
 8008432:	68b3      	ldr	r3, [r6, #8]
 8008434:	4413      	add	r3, r2
 8008436:	60b3      	str	r3, [r6, #8]
 8008438:	68ab      	ldr	r3, [r5, #8]
 800843a:	68ea      	ldr	r2, [r5, #12]
 800843c:	4640      	mov	r0, r8
 800843e:	9315      	str	r3, [sp, #84]	@ 0x54
 8008440:	9214      	str	r2, [sp, #80]	@ 0x50
 8008442:	f003 fbb5 	bl	800bbb0 <get_tensor_byte_size>
 8008446:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008448:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800844a:	4410      	add	r0, r2
 800844c:	4283      	cmp	r3, r0
 800844e:	d306      	bcc.n	800845e <forward_conv2d_sssa8_ch_nl_pool+0x432>
 8008450:	68eb      	ldr	r3, [r5, #12]
 8008452:	60ab      	str	r3, [r5, #8]
 8008454:	f8d9 3024 	ldr.w	r3, [r9, #36]	@ 0x24
 8008458:	b10b      	cbz	r3, 800845e <forward_conv2d_sssa8_ch_nl_pool+0x432>
 800845a:	68f3      	ldr	r3, [r6, #12]
 800845c:	60b3      	str	r3, [r6, #8]
 800845e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008460:	3b01      	subs	r3, #1
 8008462:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008464:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008466:	459a      	cmp	sl, r3
 8008468:	d23c      	bcs.n	80084e4 <forward_conv2d_sssa8_ch_nl_pool+0x4b8>
 800846a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800846c:	3301      	adds	r3, #1
 800846e:	2b00      	cmp	r3, #0
 8008470:	f73f af42 	bgt.w	80082f8 <forward_conv2d_sssa8_ch_nl_pool+0x2cc>
 8008474:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008476:	2b00      	cmp	r3, #0
 8008478:	da99      	bge.n	80083ae <forward_conv2d_sssa8_ch_nl_pool+0x382>
 800847a:	ee18 3a10 	vmov	r3, s16
 800847e:	e9d6 1202 	ldrd	r1, r2, [r6, #8]
 8008482:	fb03 1314 	mls	r3, r3, r4, r1
 8008486:	429a      	cmp	r2, r3
 8008488:	d901      	bls.n	800848e <forward_conv2d_sssa8_ch_nl_pool+0x462>
 800848a:	6870      	ldr	r0, [r6, #4]
 800848c:	4403      	add	r3, r0
 800848e:	429a      	cmp	r2, r3
 8008490:	d202      	bcs.n	8008498 <forward_conv2d_sssa8_ch_nl_pool+0x46c>
 8008492:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8008494:	42a0      	cmp	r0, r4
 8008496:	d137      	bne.n	8008508 <forward_conv2d_sssa8_ch_nl_pool+0x4dc>
 8008498:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800849a:	b2a4      	uxth	r4, r4
 800849c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800849e:	4413      	add	r3, r2
 80084a0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80084a2:	1b1b      	subs	r3, r3, r4
 80084a4:	4414      	add	r4, r2
 80084a6:	b21b      	sxth	r3, r3
 80084a8:	b224      	sxth	r4, r4
 80084aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80084ac:	e77f      	b.n	80083ae <forward_conv2d_sssa8_ch_nl_pool+0x382>
 80084ae:	2300      	movs	r3, #0
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	deff      	udf	#255	@ 0xff
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	deff      	udf	#255	@ 0xff
 80084b8:	6848      	ldr	r0, [r1, #4]
 80084ba:	9018      	str	r0, [sp, #96]	@ 0x60
 80084bc:	e5e0      	b.n	8008080 <forward_conv2d_sssa8_ch_nl_pool+0x54>
 80084be:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 80084c0:	461a      	mov	r2, r3
 80084c2:	1a5b      	subs	r3, r3, r1
 80084c4:	d505      	bpl.n	80084d2 <forward_conv2d_sssa8_ch_nl_pool+0x4a6>
 80084c6:	1a8a      	subs	r2, r1, r2
 80084c8:	9839      	ldr	r0, [sp, #228]	@ 0xe4
 80084ca:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80084cc:	fb00 1202 	mla	r2, r0, r2, r1
 80084d0:	9218      	str	r2, [sp, #96]	@ 0x60
 80084d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	9316      	str	r3, [sp, #88]	@ 0x58
 80084da:	e75e      	b.n	800839a <forward_conv2d_sssa8_ch_nl_pool+0x36e>
 80084dc:	2300      	movs	r3, #0
 80084de:	931f      	str	r3, [sp, #124]	@ 0x7c
 80084e0:	931d      	str	r3, [sp, #116]	@ 0x74
 80084e2:	e752      	b.n	800838a <forward_conv2d_sssa8_ch_nl_pool+0x35e>
 80084e4:	68eb      	ldr	r3, [r5, #12]
 80084e6:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 80084e8:	60ab      	str	r3, [r5, #8]
 80084ea:	68f3      	ldr	r3, [r6, #12]
 80084ec:	60b3      	str	r3, [r6, #8]
 80084ee:	68d3      	ldr	r3, [r2, #12]
 80084f0:	6093      	str	r3, [r2, #8]
 80084f2:	b04f      	add	sp, #316	@ 0x13c
 80084f4:	ecbd 8b04 	vpop	{d8-d9}
 80084f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084fc:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8008570 <forward_conv2d_sssa8_ch_nl_pool+0x544>
 8008500:	e68a      	b.n	8008218 <forward_conv2d_sssa8_ch_nl_pool+0x1ec>
 8008502:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 8008570 <forward_conv2d_sssa8_ch_nl_pool+0x544>
 8008506:	e679      	b.n	80081fc <forward_conv2d_sssa8_ch_nl_pool+0x1d0>
 8008508:	6870      	ldr	r0, [r6, #4]
 800850a:	4402      	add	r2, r0
 800850c:	4293      	cmp	r3, r2
 800850e:	d2c3      	bcs.n	8008498 <forward_conv2d_sssa8_ch_nl_pool+0x46c>
 8008510:	3901      	subs	r1, #1
 8008512:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8008514:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008518:	f801 2f01 	strb.w	r2, [r1, #1]!
 800851c:	68f2      	ldr	r2, [r6, #12]
 800851e:	6870      	ldr	r0, [r6, #4]
 8008520:	4402      	add	r2, r0
 8008522:	4293      	cmp	r3, r2
 8008524:	d3f6      	bcc.n	8008514 <forward_conv2d_sssa8_ch_nl_pool+0x4e8>
 8008526:	9713      	str	r7, [sp, #76]	@ 0x4c
 8008528:	e7b6      	b.n	8008498 <forward_conv2d_sssa8_ch_nl_pool+0x46c>
 800852a:	932a      	str	r3, [sp, #168]	@ 0xa8
 800852c:	e6a9      	b.n	8008282 <forward_conv2d_sssa8_ch_nl_pool+0x256>
 800852e:	9229      	str	r2, [sp, #164]	@ 0xa4
 8008530:	e698      	b.n	8008264 <forward_conv2d_sssa8_ch_nl_pool+0x238>
 8008532:	f8d9 1020 	ldr.w	r1, [r9, #32]
 8008536:	ee08 1a90 	vmov	s17, r1
 800853a:	2900      	cmp	r1, #0
 800853c:	f43f adff 	beq.w	800813e <forward_conv2d_sssa8_ch_nl_pool+0x112>
 8008540:	6889      	ldr	r1, [r1, #8]
 8008542:	ee08 1a90 	vmov	s17, r1
 8008546:	e5fa      	b.n	800813e <forward_conv2d_sssa8_ch_nl_pool+0x112>
 8008548:	9129      	str	r1, [sp, #164]	@ 0xa4
 800854a:	e68b      	b.n	8008264 <forward_conv2d_sssa8_ch_nl_pool+0x238>
 800854c:	4b09      	ldr	r3, [pc, #36]	@ (8008574 <forward_conv2d_sssa8_ch_nl_pool+0x548>)
 800854e:	46c3      	mov	fp, r8
 8008550:	932e      	str	r3, [sp, #184]	@ 0xb8
 8008552:	e5a8      	b.n	80080a6 <forward_conv2d_sssa8_ch_nl_pool+0x7a>
 8008554:	922a      	str	r2, [sp, #168]	@ 0xa8
 8008556:	e694      	b.n	8008282 <forward_conv2d_sssa8_ch_nl_pool+0x256>
 8008558:	9115      	str	r1, [sp, #84]	@ 0x54
 800855a:	9118      	str	r1, [sp, #96]	@ 0x60
 800855c:	e590      	b.n	8008080 <forward_conv2d_sssa8_ch_nl_pool+0x54>
 800855e:	68db      	ldr	r3, [r3, #12]
 8008560:	deff      	udf	#255	@ 0xff
 8008562:	2300      	movs	r3, #0
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	deff      	udf	#255	@ 0xff
 8008568:	2300      	movs	r3, #0
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	deff      	udf	#255	@ 0xff
 800856e:	bf00      	nop
 8008570:	00000000 	.word	0x00000000
 8008574:	08008029 	.word	0x08008029

08008578 <forward_dense_integer_SSSA>:
 8008578:	6982      	ldr	r2, [r0, #24]
 800857a:	8813      	ldrh	r3, [r2, #0]
 800857c:	2b00      	cmp	r3, #0
 800857e:	f000 80c8 	beq.w	8008712 <forward_dense_integer_SSSA+0x19a>
 8008582:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008586:	6852      	ldr	r2, [r2, #4]
 8008588:	b093      	sub	sp, #76	@ 0x4c
 800858a:	6854      	ldr	r4, [r2, #4]
 800858c:	b104      	cbz	r4, 8008590 <forward_dense_integer_SSSA+0x18>
 800858e:	6824      	ldr	r4, [r4, #0]
 8008590:	2b01      	cmp	r3, #1
 8008592:	f000 8161 	beq.w	8008858 <forward_dense_integer_SSSA+0x2e0>
 8008596:	6911      	ldr	r1, [r2, #16]
 8008598:	b101      	cbz	r1, 800859c <forward_dense_integer_SSSA+0x24>
 800859a:	6809      	ldr	r1, [r1, #0]
 800859c:	2b02      	cmp	r3, #2
 800859e:	f000 815e 	beq.w	800885e <forward_dense_integer_SSSA+0x2e6>
 80085a2:	69d5      	ldr	r5, [r2, #28]
 80085a4:	2d00      	cmp	r5, #0
 80085a6:	f000 8108 	beq.w	80087ba <forward_dense_integer_SSSA+0x242>
 80085aa:	8b16      	ldrh	r6, [r2, #24]
 80085ac:	6828      	ldr	r0, [r5, #0]
 80085ae:	2e01      	cmp	r6, #1
 80085b0:	f240 812d 	bls.w	800880e <forward_dense_integer_SSSA+0x296>
 80085b4:	686d      	ldr	r5, [r5, #4]
 80085b6:	2b03      	cmp	r3, #3
 80085b8:	f000 8154 	beq.w	8008864 <forward_dense_integer_SSSA+0x2ec>
 80085bc:	f8d2 9028 	ldr.w	r9, [r2, #40]	@ 0x28
 80085c0:	69ab      	ldr	r3, [r5, #24]
 80085c2:	f1b9 0f00 	cmp.w	r9, #0
 80085c6:	f000 810f 	beq.w	80087e8 <forward_dense_integer_SSSA+0x270>
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	68e2      	ldr	r2, [r4, #12]
 80085ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80085d0:	68cb      	ldr	r3, [r1, #12]
 80085d2:	6856      	ldr	r6, [r2, #4]
 80085d4:	f8d9 9000 	ldr.w	r9, [r9]
 80085d8:	f8d4 e018 	ldr.w	lr, [r4, #24]
 80085dc:	698d      	ldr	r5, [r1, #24]
 80085de:	960f      	str	r6, [sp, #60]	@ 0x3c
 80085e0:	e9d3 a201 	ldrd	sl, r2, [r3, #4]
 80085e4:	68db      	ldr	r3, [r3, #12]
 80085e6:	fb03 f302 	mul.w	r3, r3, r2
 80085ea:	b2b2      	uxth	r2, r6
 80085ec:	930c      	str	r3, [sp, #48]	@ 0x30
 80085ee:	fa1f f38a 	uxth.w	r3, sl
 80085f2:	f1b9 0f00 	cmp.w	r9, #0
 80085f6:	d003      	beq.n	8008600 <forward_dense_integer_SSSA+0x88>
 80085f8:	f8d9 6018 	ldr.w	r6, [r9, #24]
 80085fc:	f8d6 9008 	ldr.w	r9, [r6, #8]
 8008600:	6827      	ldr	r7, [r4, #0]
 8008602:	f8d0 b000 	ldr.w	fp, [r0]
 8008606:	680c      	ldr	r4, [r1, #0]
 8008608:	6981      	ldr	r1, [r0, #24]
 800860a:	2f00      	cmp	r7, #0
 800860c:	f000 8083 	beq.w	8008716 <forward_dense_integer_SSSA+0x19e>
 8008610:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8008614:	f1bc 0f00 	cmp.w	ip, #0
 8008618:	f000 80b1 	beq.w	800877e <forward_dense_integer_SSSA+0x206>
 800861c:	8878      	ldrh	r0, [r7, #2]
 800861e:	2800      	cmp	r0, #0
 8008620:	f000 809c 	beq.w	800875c <forward_dense_integer_SSSA+0x1e4>
 8008624:	f8dc 6000 	ldr.w	r6, [ip]
 8008628:	edd6 7a00 	vldr	s15, [r6]
 800862c:	2c00      	cmp	r4, #0
 800862e:	f000 809a 	beq.w	8008766 <forward_dense_integer_SSSA+0x1ee>
 8008632:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8008636:	f1b8 0f00 	cmp.w	r8, #0
 800863a:	f000 80a9 	beq.w	8008790 <forward_dense_integer_SSSA+0x218>
 800863e:	8860      	ldrh	r0, [r4, #2]
 8008640:	2800      	cmp	r0, #0
 8008642:	d074      	beq.n	800872e <forward_dense_integer_SSSA+0x1b6>
 8008644:	68ae      	ldr	r6, [r5, #8]
 8008646:	f8de 5008 	ldr.w	r5, [lr, #8]
 800864a:	6889      	ldr	r1, [r1, #8]
 800864c:	950d      	str	r5, [sp, #52]	@ 0x34
 800864e:	f8d8 5000 	ldr.w	r5, [r8]
 8008652:	ed95 0a00 	vldr	s0, [r5]
 8008656:	f1bc 0f00 	cmp.w	ip, #0
 800865a:	d076      	beq.n	800874a <forward_dense_integer_SSSA+0x1d2>
 800865c:	8878      	ldrh	r0, [r7, #2]
 800865e:	2800      	cmp	r0, #0
 8008660:	f000 80a3 	beq.w	80087aa <forward_dense_integer_SSSA+0x232>
 8008664:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8008668:	f990 7000 	ldrsb.w	r7, [r0]
 800866c:	2c00      	cmp	r4, #0
 800866e:	f000 80eb 	beq.w	8008848 <forward_dense_integer_SSSA+0x2d0>
 8008672:	f1b8 0f00 	cmp.w	r8, #0
 8008676:	f000 809d 	beq.w	80087b4 <forward_dense_integer_SSSA+0x23c>
 800867a:	8860      	ldrh	r0, [r4, #2]
 800867c:	2800      	cmp	r0, #0
 800867e:	d167      	bne.n	8008750 <forward_dense_integer_SSSA+0x1d8>
 8008680:	900a      	str	r0, [sp, #40]	@ 0x28
 8008682:	910e      	str	r1, [sp, #56]	@ 0x38
 8008684:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008688:	f1bb 0f00 	cmp.w	fp, #0
 800868c:	f000 80de 	beq.w	800884c <forward_dense_integer_SSSA+0x2d4>
 8008690:	f8db 0004 	ldr.w	r0, [fp, #4]
 8008694:	2800      	cmp	r0, #0
 8008696:	f000 80d9 	beq.w	800884c <forward_dense_integer_SSSA+0x2d4>
 800869a:	6800      	ldr	r0, [r0, #0]
 800869c:	2400      	movs	r4, #0
 800869e:	f10d 0842 	add.w	r8, sp, #66	@ 0x42
 80086a2:	f8ad 4042 	strh.w	r4, [sp, #66]	@ 0x42
 80086a6:	9411      	str	r4, [sp, #68]	@ 0x44
 80086a8:	ed90 7a00 	vldr	s14, [r0]
 80086ac:	4640      	mov	r0, r8
 80086ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80086b2:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80086b6:	f001 f9ab 	bl	8009a10 <align_factor>
 80086ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80086bc:	9011      	str	r0, [sp, #68]	@ 0x44
 80086be:	b32b      	cbz	r3, 800870c <forward_dense_integer_SSSA+0x194>
 80086c0:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 80086c4:	4699      	mov	r9, r3
 80086c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086c8:	fa1f fa8a 	uxth.w	sl, sl
 80086cc:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80086ce:	f8bd b03c 	ldrh.w	fp, [sp, #60]	@ 0x3c
 80086d2:	970d      	str	r7, [sp, #52]	@ 0x34
 80086d4:	461f      	mov	r7, r3
 80086d6:	9a08      	ldr	r2, [sp, #32]
 80086d8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80086da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80086dc:	3401      	adds	r4, #1
 80086de:	4628      	mov	r0, r5
 80086e0:	9605      	str	r6, [sp, #20]
 80086e2:	9306      	str	r3, [sp, #24]
 80086e4:	4456      	add	r6, sl
 80086e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086e8:	445d      	add	r5, fp
 80086ea:	9304      	str	r3, [sp, #16]
 80086ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086ee:	9303      	str	r3, [sp, #12]
 80086f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80086f2:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80086f6:	ab11      	add	r3, sp, #68	@ 0x44
 80086f8:	9300      	str	r3, [sp, #0]
 80086fa:	463b      	mov	r3, r7
 80086fc:	e9cd 1208 	strd	r1, r2, [sp, #32]
 8008700:	f001 fa92 	bl	8009c28 <st_sssa8_fully_connected>
 8008704:	454c      	cmp	r4, r9
 8008706:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800870a:	d1e6      	bne.n	80086da <forward_dense_integer_SSSA+0x162>
 800870c:	b013      	add	sp, #76	@ 0x4c
 800870e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	deff      	udf	#255	@ 0xff
 8008716:	2c00      	cmp	r4, #0
 8008718:	d056      	beq.n	80087c8 <forward_dense_integer_SSSA+0x250>
 800871a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800871e:	f1b8 0f00 	cmp.w	r8, #0
 8008722:	d05d      	beq.n	80087e0 <forward_dense_integer_SSSA+0x268>
 8008724:	8860      	ldrh	r0, [r4, #2]
 8008726:	2800      	cmp	r0, #0
 8008728:	d173      	bne.n	8008812 <forward_dense_integer_SSSA+0x29a>
 800872a:	eddf 7a50 	vldr	s15, [pc, #320]	@ 800886c <forward_dense_integer_SSSA+0x2f4>
 800872e:	68ae      	ldr	r6, [r5, #8]
 8008730:	f8de 5008 	ldr.w	r5, [lr, #8]
 8008734:	6889      	ldr	r1, [r1, #8]
 8008736:	950d      	str	r5, [sp, #52]	@ 0x34
 8008738:	2f00      	cmp	r7, #0
 800873a:	d041      	beq.n	80087c0 <forward_dense_integer_SSSA+0x248>
 800873c:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8008740:	ed9f 0a4a 	vldr	s0, [pc, #296]	@ 800886c <forward_dense_integer_SSSA+0x2f4>
 8008744:	f1bc 0f00 	cmp.w	ip, #0
 8008748:	d188      	bne.n	800865c <forward_dense_integer_SSSA+0xe4>
 800874a:	4667      	mov	r7, ip
 800874c:	2800      	cmp	r0, #0
 800874e:	d097      	beq.n	8008680 <forward_dense_integer_SSSA+0x108>
 8008750:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008754:	f990 0000 	ldrsb.w	r0, [r0]
 8008758:	900a      	str	r0, [sp, #40]	@ 0x28
 800875a:	e792      	b.n	8008682 <forward_dense_integer_SSSA+0x10a>
 800875c:	eddf 7a43 	vldr	s15, [pc, #268]	@ 800886c <forward_dense_integer_SSSA+0x2f4>
 8008760:	2c00      	cmp	r4, #0
 8008762:	f47f af66 	bne.w	8008632 <forward_dense_integer_SSSA+0xba>
 8008766:	68ae      	ldr	r6, [r5, #8]
 8008768:	f8de 5008 	ldr.w	r5, [lr, #8]
 800876c:	6889      	ldr	r1, [r1, #8]
 800876e:	950d      	str	r5, [sp, #52]	@ 0x34
 8008770:	2800      	cmp	r0, #0
 8008772:	d15a      	bne.n	800882a <forward_dense_integer_SSSA+0x2b2>
 8008774:	4607      	mov	r7, r0
 8008776:	ed9f 0a3d 	vldr	s0, [pc, #244]	@ 800886c <forward_dense_integer_SSSA+0x2f4>
 800877a:	900a      	str	r0, [sp, #40]	@ 0x28
 800877c:	e781      	b.n	8008682 <forward_dense_integer_SSSA+0x10a>
 800877e:	b31c      	cbz	r4, 80087c8 <forward_dense_integer_SSSA+0x250>
 8008780:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8008784:	eddf 7a39 	vldr	s15, [pc, #228]	@ 800886c <forward_dense_integer_SSSA+0x2f4>
 8008788:	f1b8 0f00 	cmp.w	r8, #0
 800878c:	f47f af57 	bne.w	800863e <forward_dense_integer_SSSA+0xc6>
 8008790:	f8de 0008 	ldr.w	r0, [lr, #8]
 8008794:	68ae      	ldr	r6, [r5, #8]
 8008796:	6889      	ldr	r1, [r1, #8]
 8008798:	900d      	str	r0, [sp, #52]	@ 0x34
 800879a:	f1bc 0f00 	cmp.w	ip, #0
 800879e:	d00e      	beq.n	80087be <forward_dense_integer_SSSA+0x246>
 80087a0:	8878      	ldrh	r0, [r7, #2]
 80087a2:	2800      	cmp	r0, #0
 80087a4:	d149      	bne.n	800883a <forward_dense_integer_SSSA+0x2c2>
 80087a6:	ed9f 0a31 	vldr	s0, [pc, #196]	@ 800886c <forward_dense_integer_SSSA+0x2f4>
 80087aa:	2700      	movs	r7, #0
 80087ac:	f1b8 0f00 	cmp.w	r8, #0
 80087b0:	f47f af63 	bne.w	800867a <forward_dense_integer_SSSA+0x102>
 80087b4:	2000      	movs	r0, #0
 80087b6:	900a      	str	r0, [sp, #40]	@ 0x28
 80087b8:	e763      	b.n	8008682 <forward_dense_integer_SSSA+0x10a>
 80087ba:	4628      	mov	r0, r5
 80087bc:	e6fb      	b.n	80085b6 <forward_dense_integer_SSSA+0x3e>
 80087be:	4667      	mov	r7, ip
 80087c0:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 800886c <forward_dense_integer_SSSA+0x2f4>
 80087c4:	970a      	str	r7, [sp, #40]	@ 0x28
 80087c6:	e75c      	b.n	8008682 <forward_dense_integer_SSSA+0x10a>
 80087c8:	eddf 7a28 	vldr	s15, [pc, #160]	@ 800886c <forward_dense_integer_SSSA+0x2f4>
 80087cc:	4627      	mov	r7, r4
 80087ce:	f8de 0008 	ldr.w	r0, [lr, #8]
 80087d2:	eeb0 0a67 	vmov.f32	s0, s15
 80087d6:	68ae      	ldr	r6, [r5, #8]
 80087d8:	6889      	ldr	r1, [r1, #8]
 80087da:	900d      	str	r0, [sp, #52]	@ 0x34
 80087dc:	970a      	str	r7, [sp, #40]	@ 0x28
 80087de:	e750      	b.n	8008682 <forward_dense_integer_SSSA+0x10a>
 80087e0:	eddf 7a22 	vldr	s15, [pc, #136]	@ 800886c <forward_dense_integer_SSSA+0x2f4>
 80087e4:	4647      	mov	r7, r8
 80087e6:	e7f2      	b.n	80087ce <forward_dense_integer_SSSA+0x256>
 80087e8:	689b      	ldr	r3, [r3, #8]
 80087ea:	68e2      	ldr	r2, [r4, #12]
 80087ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 80087ee:	68cb      	ldr	r3, [r1, #12]
 80087f0:	6856      	ldr	r6, [r2, #4]
 80087f2:	f8d4 e018 	ldr.w	lr, [r4, #24]
 80087f6:	698d      	ldr	r5, [r1, #24]
 80087f8:	960f      	str	r6, [sp, #60]	@ 0x3c
 80087fa:	e9d3 a201 	ldrd	sl, r2, [r3, #4]
 80087fe:	68db      	ldr	r3, [r3, #12]
 8008800:	fb03 f302 	mul.w	r3, r3, r2
 8008804:	b2b2      	uxth	r2, r6
 8008806:	930c      	str	r3, [sp, #48]	@ 0x30
 8008808:	fa1f f38a 	uxth.w	r3, sl
 800880c:	e6f8      	b.n	8008600 <forward_dense_integer_SSSA+0x88>
 800880e:	2500      	movs	r5, #0
 8008810:	e6d1      	b.n	80085b6 <forward_dense_integer_SSSA+0x3e>
 8008812:	f8de 0008 	ldr.w	r0, [lr, #8]
 8008816:	68ae      	ldr	r6, [r5, #8]
 8008818:	900d      	str	r0, [sp, #52]	@ 0x34
 800881a:	f8d8 0000 	ldr.w	r0, [r8]
 800881e:	6889      	ldr	r1, [r1, #8]
 8008820:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800886c <forward_dense_integer_SSSA+0x2f4>
 8008824:	ed90 0a00 	vldr	s0, [r0]
 8008828:	e792      	b.n	8008750 <forward_dense_integer_SSSA+0x1d8>
 800882a:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800882e:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 800886c <forward_dense_integer_SSSA+0x2f4>
 8008832:	f990 7000 	ldrsb.w	r7, [r0]
 8008836:	940a      	str	r4, [sp, #40]	@ 0x28
 8008838:	e723      	b.n	8008682 <forward_dense_integer_SSSA+0x10a>
 800883a:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800883e:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 800886c <forward_dense_integer_SSSA+0x2f4>
 8008842:	f990 7000 	ldrsb.w	r7, [r0]
 8008846:	e7b5      	b.n	80087b4 <forward_dense_integer_SSSA+0x23c>
 8008848:	940a      	str	r4, [sp, #40]	@ 0x28
 800884a:	e71a      	b.n	8008682 <forward_dense_integer_SSSA+0x10a>
 800884c:	2300      	movs	r3, #0
 800884e:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 8008852:	9311      	str	r3, [sp, #68]	@ 0x44
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	deff      	udf	#255	@ 0xff
 8008858:	2300      	movs	r3, #0
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	deff      	udf	#255	@ 0xff
 800885e:	2300      	movs	r3, #0
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	deff      	udf	#255	@ 0xff
 8008864:	2300      	movs	r3, #0
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	deff      	udf	#255	@ 0xff
 800886a:	bf00      	nop
 800886c:	00000000 	.word	0x00000000

08008870 <forward_transpose>:
 8008870:	6983      	ldr	r3, [r0, #24]
 8008872:	881a      	ldrh	r2, [r3, #0]
 8008874:	2a00      	cmp	r2, #0
 8008876:	d035      	beq.n	80088e4 <forward_transpose+0x74>
 8008878:	6859      	ldr	r1, [r3, #4]
 800887a:	684b      	ldr	r3, [r1, #4]
 800887c:	b103      	cbz	r3, 8008880 <forward_transpose+0x10>
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	2a01      	cmp	r2, #1
 8008882:	f000 80a3 	beq.w	80089cc <forward_transpose+0x15c>
 8008886:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800888a:	690c      	ldr	r4, [r1, #16]
 800888c:	b08b      	sub	sp, #44	@ 0x2c
 800888e:	b104      	cbz	r4, 8008892 <forward_transpose+0x22>
 8008890:	6824      	ldr	r4, [r4, #0]
 8008892:	6a05      	ldr	r5, [r0, #32]
 8008894:	e9d3 6204 	ldrd	r6, r2, [r3, #16]
 8008898:	6869      	ldr	r1, [r5, #4]
 800889a:	f5b6 6fa0 	cmp.w	r6, #1280	@ 0x500
 800889e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80088a2:	9100      	str	r1, [sp, #0]
 80088a4:	68a9      	ldr	r1, [r5, #8]
 80088a6:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80088aa:	9106      	str	r1, [sp, #24]
 80088ac:	68e9      	ldr	r1, [r5, #12]
 80088ae:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80088b2:	9107      	str	r1, [sp, #28]
 80088b4:	d318      	bcc.n	80088e8 <forward_transpose+0x78>
 80088b6:	69c1      	ldr	r1, [r0, #28]
 80088b8:	f5b1 6fa0 	cmp.w	r1, #1280	@ 0x500
 80088bc:	f0c0 8082 	bcc.w	80089c4 <forward_transpose+0x154>
 80088c0:	6929      	ldr	r1, [r5, #16]
 80088c2:	0089      	lsls	r1, r1, #2
 80088c4:	f026 06ff 	bic.w	r6, r6, #255	@ 0xff
 80088c8:	5851      	ldr	r1, [r2, r1]
 80088ca:	f5b6 6fc0 	cmp.w	r6, #1536	@ 0x600
 80088ce:	9102      	str	r1, [sp, #8]
 80088d0:	d111      	bne.n	80088f6 <forward_transpose+0x86>
 80088d2:	69c1      	ldr	r1, [r0, #28]
 80088d4:	f5b1 6fc0 	cmp.w	r1, #1536	@ 0x600
 80088d8:	d376      	bcc.n	80089c8 <forward_transpose+0x158>
 80088da:	6969      	ldr	r1, [r5, #20]
 80088dc:	0089      	lsls	r1, r1, #2
 80088de:	5852      	ldr	r2, [r2, r1]
 80088e0:	9203      	str	r2, [sp, #12]
 80088e2:	e00a      	b.n	80088fa <forward_transpose+0x8a>
 80088e4:	6853      	ldr	r3, [r2, #4]
 80088e6:	deff      	udf	#255	@ 0xff
 80088e8:	f026 06ff 	bic.w	r6, r6, #255	@ 0xff
 80088ec:	2100      	movs	r1, #0
 80088ee:	f5b6 6fc0 	cmp.w	r6, #1536	@ 0x600
 80088f2:	9102      	str	r1, [sp, #8]
 80088f4:	d0ed      	beq.n	80088d2 <forward_transpose+0x62>
 80088f6:	2200      	movs	r2, #0
 80088f8:	9203      	str	r2, [sp, #12]
 80088fa:	699b      	ldr	r3, [r3, #24]
 80088fc:	69a2      	ldr	r2, [r4, #24]
 80088fe:	68e1      	ldr	r1, [r4, #12]
 8008900:	6896      	ldr	r6, [r2, #8]
 8008902:	681a      	ldr	r2, [r3, #0]
 8008904:	689b      	ldr	r3, [r3, #8]
 8008906:	f3c2 2283 	ubfx	r2, r2, #10, #4
 800890a:	9301      	str	r3, [sp, #4]
 800890c:	68cb      	ldr	r3, [r1, #12]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d055      	beq.n	80089be <forward_transpose+0x14e>
 8008912:	2300      	movs	r3, #0
 8008914:	6888      	ldr	r0, [r1, #8]
 8008916:	9305      	str	r3, [sp, #20]
 8008918:	2800      	cmp	r0, #0
 800891a:	d050      	beq.n	80089be <forward_transpose+0x14e>
 800891c:	68a5      	ldr	r5, [r4, #8]
 800891e:	2000      	movs	r0, #0
 8008920:	4692      	mov	sl, r2
 8008922:	9308      	str	r3, [sp, #32]
 8008924:	f3c5 2517 	ubfx	r5, r5, #8, #24
 8008928:	9004      	str	r0, [sp, #16]
 800892a:	469b      	mov	fp, r3
 800892c:	f04f 0800 	mov.w	r8, #0
 8008930:	9309      	str	r3, [sp, #36]	@ 0x24
 8008932:	2d04      	cmp	r5, #4
 8008934:	bf8c      	ite	hi
 8008936:	690b      	ldrhi	r3, [r1, #16]
 8008938:	2301      	movls	r3, #1
 800893a:	4598      	cmp	r8, r3
 800893c:	d229      	bcs.n	8008992 <forward_transpose+0x122>
 800893e:	2d05      	cmp	r5, #5
 8008940:	46d9      	mov	r9, fp
 8008942:	f04f 0700 	mov.w	r7, #0
 8008946:	d91d      	bls.n	8008984 <forward_transpose+0x114>
 8008948:	694a      	ldr	r2, [r1, #20]
 800894a:	4297      	cmp	r7, r2
 800894c:	d21c      	bcs.n	8008988 <forward_transpose+0x118>
 800894e:	684a      	ldr	r2, [r1, #4]
 8008950:	b192      	cbz	r2, 8008978 <forward_transpose+0x108>
 8008952:	2500      	movs	r5, #0
 8008954:	9b00      	ldr	r3, [sp, #0]
 8008956:	4631      	mov	r1, r6
 8008958:	4652      	mov	r2, sl
 800895a:	4456      	add	r6, sl
 800895c:	fb03 9005 	mla	r0, r3, r5, r9
 8008960:	9b01      	ldr	r3, [sp, #4]
 8008962:	3501      	adds	r5, #1
 8008964:	4418      	add	r0, r3
 8008966:	f001 fc59 	bl	800a21c <st_int8_copy>
 800896a:	68e1      	ldr	r1, [r4, #12]
 800896c:	684b      	ldr	r3, [r1, #4]
 800896e:	429d      	cmp	r5, r3
 8008970:	d3f0      	bcc.n	8008954 <forward_transpose+0xe4>
 8008972:	68a3      	ldr	r3, [r4, #8]
 8008974:	f3c3 2517 	ubfx	r5, r3, #8, #24
 8008978:	9b03      	ldr	r3, [sp, #12]
 800897a:	2d05      	cmp	r5, #5
 800897c:	f107 0701 	add.w	r7, r7, #1
 8008980:	4499      	add	r9, r3
 8008982:	d8e1      	bhi.n	8008948 <forward_transpose+0xd8>
 8008984:	2f00      	cmp	r7, #0
 8008986:	d0e2      	beq.n	800894e <forward_transpose+0xde>
 8008988:	9b02      	ldr	r3, [sp, #8]
 800898a:	f108 0801 	add.w	r8, r8, #1
 800898e:	449b      	add	fp, r3
 8008990:	e7cf      	b.n	8008932 <forward_transpose+0xc2>
 8008992:	9a04      	ldr	r2, [sp, #16]
 8008994:	9806      	ldr	r0, [sp, #24]
 8008996:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008998:	3201      	adds	r2, #1
 800899a:	4403      	add	r3, r0
 800899c:	6888      	ldr	r0, [r1, #8]
 800899e:	9204      	str	r2, [sp, #16]
 80089a0:	4282      	cmp	r2, r0
 80089a2:	d3c2      	bcc.n	800892a <forward_transpose+0xba>
 80089a4:	9d05      	ldr	r5, [sp, #20]
 80089a6:	4652      	mov	r2, sl
 80089a8:	9b08      	ldr	r3, [sp, #32]
 80089aa:	3501      	adds	r5, #1
 80089ac:	462f      	mov	r7, r5
 80089ae:	9505      	str	r5, [sp, #20]
 80089b0:	68cd      	ldr	r5, [r1, #12]
 80089b2:	42af      	cmp	r7, r5
 80089b4:	d203      	bcs.n	80089be <forward_transpose+0x14e>
 80089b6:	9d07      	ldr	r5, [sp, #28]
 80089b8:	442b      	add	r3, r5
 80089ba:	2800      	cmp	r0, #0
 80089bc:	d1ae      	bne.n	800891c <forward_transpose+0xac>
 80089be:	b00b      	add	sp, #44	@ 0x2c
 80089c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089c4:	2104      	movs	r1, #4
 80089c6:	e77d      	b.n	80088c4 <forward_transpose+0x54>
 80089c8:	2104      	movs	r1, #4
 80089ca:	e788      	b.n	80088de <forward_transpose+0x6e>
 80089cc:	2300      	movs	r3, #0
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	deff      	udf	#255	@ 0xff
 80089d2:	bf00      	nop

080089d4 <pool_func_mp_array_integer_INT8>:
 80089d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089d8:	b093      	sub	sp, #76	@ 0x4c
 80089da:	468c      	mov	ip, r1
 80089dc:	469a      	mov	sl, r3
 80089de:	6804      	ldr	r4, [r0, #0]
 80089e0:	f8bd 1074 	ldrh.w	r1, [sp, #116]	@ 0x74
 80089e4:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 80089e8:	910e      	str	r1, [sp, #56]	@ 0x38
 80089ea:	f8bd 1078 	ldrh.w	r1, [sp, #120]	@ 0x78
 80089ee:	930d      	str	r3, [sp, #52]	@ 0x34
 80089f0:	910f      	str	r1, [sp, #60]	@ 0x3c
 80089f2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80089f4:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 80089f8:	6980      	ldr	r0, [r0, #24]
 80089fa:	9110      	str	r1, [sp, #64]	@ 0x40
 80089fc:	f8bd b080 	ldrh.w	fp, [sp, #128]	@ 0x80
 8008a00:	f8bd 7084 	ldrh.w	r7, [sp, #132]	@ 0x84
 8008a04:	f8bd e088 	ldrh.w	lr, [sp, #136]	@ 0x88
 8008a08:	f8bd 808c 	ldrh.w	r8, [sp, #140]	@ 0x8c
 8008a0c:	6999      	ldr	r1, [r3, #24]
 8008a0e:	681d      	ldr	r5, [r3, #0]
 8008a10:	2c00      	cmp	r4, #0
 8008a12:	d068      	beq.n	8008ae6 <pool_func_mp_array_integer_INT8+0x112>
 8008a14:	6866      	ldr	r6, [r4, #4]
 8008a16:	2e00      	cmp	r6, #0
 8008a18:	d04c      	beq.n	8008ab4 <pool_func_mp_array_integer_INT8+0xe0>
 8008a1a:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 8008a1e:	f1b9 0f00 	cmp.w	r9, #0
 8008a22:	d07a      	beq.n	8008b1a <pool_func_mp_array_integer_INT8+0x146>
 8008a24:	6833      	ldr	r3, [r6, #0]
 8008a26:	edd3 7a00 	vldr	s15, [r3]
 8008a2a:	2d00      	cmp	r5, #0
 8008a2c:	d079      	beq.n	8008b22 <pool_func_mp_array_integer_INT8+0x14e>
 8008a2e:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8008a32:	f1b9 0f00 	cmp.w	r9, #0
 8008a36:	d046      	beq.n	8008ac6 <pool_func_mp_array_integer_INT8+0xf2>
 8008a38:	886b      	ldrh	r3, [r5, #2]
 8008a3a:	9311      	str	r3, [sp, #68]	@ 0x44
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d05f      	beq.n	8008b00 <pool_func_mp_array_integer_INT8+0x12c>
 8008a40:	f8d9 3000 	ldr.w	r3, [r9]
 8008a44:	6880      	ldr	r0, [r0, #8]
 8008a46:	ed93 7a00 	vldr	s14, [r3]
 8008a4a:	6889      	ldr	r1, [r1, #8]
 8008a4c:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8008a50:	2e00      	cmp	r6, #0
 8008a52:	d060      	beq.n	8008b16 <pool_func_mp_array_integer_INT8+0x142>
 8008a54:	8863      	ldrh	r3, [r4, #2]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	f000 808c 	beq.w	8008b74 <pool_func_mp_array_integer_INT8+0x1a0>
 8008a5c:	6873      	ldr	r3, [r6, #4]
 8008a5e:	f993 4000 	ldrsb.w	r4, [r3]
 8008a62:	2d00      	cmp	r5, #0
 8008a64:	d03d      	beq.n	8008ae2 <pool_func_mp_array_integer_INT8+0x10e>
 8008a66:	f1b9 0f00 	cmp.w	r9, #0
 8008a6a:	d03a      	beq.n	8008ae2 <pool_func_mp_array_integer_INT8+0x10e>
 8008a6c:	886b      	ldrh	r3, [r5, #2]
 8008a6e:	9311      	str	r3, [sp, #68]	@ 0x44
 8008a70:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008a72:	b11b      	cbz	r3, 8008a7c <pool_func_mp_array_integer_INT8+0xa8>
 8008a74:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008a78:	f993 3000 	ldrsb.w	r3, [r3]
 8008a7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a84:	da5f      	bge.n	8008b46 <pool_func_mp_array_integer_INT8+0x172>
 8008a86:	f8cd a000 	str.w	sl, [sp]
 8008a8a:	e9cd 4309 	strd	r4, r3, [sp, #36]	@ 0x24
 8008a8e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008a90:	9304      	str	r3, [sp, #16]
 8008a92:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a94:	9303      	str	r3, [sp, #12]
 8008a96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a98:	9302      	str	r3, [sp, #8]
 8008a9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008a9c:	9301      	str	r3, [sp, #4]
 8008a9e:	4613      	mov	r3, r2
 8008aa0:	4662      	mov	r2, ip
 8008aa2:	e9cd e807 	strd	lr, r8, [sp, #28]
 8008aa6:	e9cd b705 	strd	fp, r7, [sp, #20]
 8008aaa:	f000 fed1 	bl	8009850 <forward_lite_maxpool_is8os8_scaleneg>
 8008aae:	b013      	add	sp, #76	@ 0x4c
 8008ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ab4:	2d00      	cmp	r5, #0
 8008ab6:	d040      	beq.n	8008b3a <pool_func_mp_array_integer_INT8+0x166>
 8008ab8:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8008abc:	eddf 7a39 	vldr	s15, [pc, #228]	@ 8008ba4 <pool_func_mp_array_integer_INT8+0x1d0>
 8008ac0:	f1b9 0f00 	cmp.w	r9, #0
 8008ac4:	d1b8      	bne.n	8008a38 <pool_func_mp_array_integer_INT8+0x64>
 8008ac6:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8008ba4 <pool_func_mp_array_integer_INT8+0x1d0>
 8008aca:	6880      	ldr	r0, [r0, #8]
 8008acc:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8008ad0:	6889      	ldr	r1, [r1, #8]
 8008ad2:	2e00      	cmp	r6, #0
 8008ad4:	d063      	beq.n	8008b9e <pool_func_mp_array_integer_INT8+0x1ca>
 8008ad6:	8863      	ldrh	r3, [r4, #2]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d04b      	beq.n	8008b74 <pool_func_mp_array_integer_INT8+0x1a0>
 8008adc:	6873      	ldr	r3, [r6, #4]
 8008ade:	f993 4000 	ldrsb.w	r4, [r3]
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	e7ca      	b.n	8008a7c <pool_func_mp_array_integer_INT8+0xa8>
 8008ae6:	2d00      	cmp	r5, #0
 8008ae8:	d046      	beq.n	8008b78 <pool_func_mp_array_integer_INT8+0x1a4>
 8008aea:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8008aee:	f1b9 0f00 	cmp.w	r9, #0
 8008af2:	d022      	beq.n	8008b3a <pool_func_mp_array_integer_INT8+0x166>
 8008af4:	886b      	ldrh	r3, [r5, #2]
 8008af6:	9311      	str	r3, [sp, #68]	@ 0x44
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d144      	bne.n	8008b86 <pool_func_mp_array_integer_INT8+0x1b2>
 8008afc:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8008ba4 <pool_func_mp_array_integer_INT8+0x1d0>
 8008b00:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8008ba4 <pool_func_mp_array_integer_INT8+0x1d0>
 8008b04:	6880      	ldr	r0, [r0, #8]
 8008b06:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8008b0a:	6889      	ldr	r1, [r1, #8]
 8008b0c:	2c00      	cmp	r4, #0
 8008b0e:	d0e8      	beq.n	8008ae2 <pool_func_mp_array_integer_INT8+0x10e>
 8008b10:	6866      	ldr	r6, [r4, #4]
 8008b12:	2e00      	cmp	r6, #0
 8008b14:	d19e      	bne.n	8008a54 <pool_func_mp_array_integer_INT8+0x80>
 8008b16:	4634      	mov	r4, r6
 8008b18:	e7aa      	b.n	8008a70 <pool_func_mp_array_integer_INT8+0x9c>
 8008b1a:	eddf 7a22 	vldr	s15, [pc, #136]	@ 8008ba4 <pool_func_mp_array_integer_INT8+0x1d0>
 8008b1e:	2d00      	cmp	r5, #0
 8008b20:	d185      	bne.n	8008a2e <pool_func_mp_array_integer_INT8+0x5a>
 8008b22:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8008ba4 <pool_func_mp_array_integer_INT8+0x1d0>
 8008b26:	6880      	ldr	r0, [r0, #8]
 8008b28:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8008b2c:	6889      	ldr	r1, [r1, #8]
 8008b2e:	f1b9 0f00 	cmp.w	r9, #0
 8008b32:	d12f      	bne.n	8008b94 <pool_func_mp_array_integer_INT8+0x1c0>
 8008b34:	464c      	mov	r4, r9
 8008b36:	464b      	mov	r3, r9
 8008b38:	e7a0      	b.n	8008a7c <pool_func_mp_array_integer_INT8+0xa8>
 8008b3a:	2400      	movs	r4, #0
 8008b3c:	6880      	ldr	r0, [r0, #8]
 8008b3e:	6889      	ldr	r1, [r1, #8]
 8008b40:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8008ba8 <pool_func_mp_array_integer_INT8+0x1d4>
 8008b44:	4623      	mov	r3, r4
 8008b46:	f8cd a000 	str.w	sl, [sp]
 8008b4a:	e9cd 4309 	strd	r4, r3, [sp, #36]	@ 0x24
 8008b4e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008b50:	9304      	str	r3, [sp, #16]
 8008b52:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b54:	9303      	str	r3, [sp, #12]
 8008b56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b58:	9302      	str	r3, [sp, #8]
 8008b5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008b5c:	9301      	str	r3, [sp, #4]
 8008b5e:	4613      	mov	r3, r2
 8008b60:	4662      	mov	r2, ip
 8008b62:	e9cd e807 	strd	lr, r8, [sp, #28]
 8008b66:	e9cd b705 	strd	fp, r7, [sp, #20]
 8008b6a:	f000 fd8f 	bl	800968c <forward_lite_maxpool_is8os8_scalepos>
 8008b6e:	b013      	add	sp, #76	@ 0x4c
 8008b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b74:	2400      	movs	r4, #0
 8008b76:	e776      	b.n	8008a66 <pool_func_mp_array_integer_INT8+0x92>
 8008b78:	462c      	mov	r4, r5
 8008b7a:	6880      	ldr	r0, [r0, #8]
 8008b7c:	6889      	ldr	r1, [r1, #8]
 8008b7e:	462b      	mov	r3, r5
 8008b80:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8008ba8 <pool_func_mp_array_integer_INT8+0x1d4>
 8008b84:	e7df      	b.n	8008b46 <pool_func_mp_array_integer_INT8+0x172>
 8008b86:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8008ba4 <pool_func_mp_array_integer_INT8+0x1d0>
 8008b8a:	6880      	ldr	r0, [r0, #8]
 8008b8c:	eef0 7a40 	vmov.f32	s15, s0
 8008b90:	6889      	ldr	r1, [r1, #8]
 8008b92:	e76f      	b.n	8008a74 <pool_func_mp_array_integer_INT8+0xa0>
 8008b94:	6874      	ldr	r4, [r6, #4]
 8008b96:	462b      	mov	r3, r5
 8008b98:	f994 4000 	ldrsb.w	r4, [r4]
 8008b9c:	e76e      	b.n	8008a7c <pool_func_mp_array_integer_INT8+0xa8>
 8008b9e:	4634      	mov	r4, r6
 8008ba0:	4633      	mov	r3, r6
 8008ba2:	e76b      	b.n	8008a7c <pool_func_mp_array_integer_INT8+0xa8>
 8008ba4:	00000000 	.word	0x00000000
 8008ba8:	7fc00000 	.word	0x7fc00000

08008bac <forward_lite_conv2d_sssa8_ch>:
 8008bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bb0:	ed2d 8b08 	vpush	{d8-d11}
 8008bb4:	b0d5      	sub	sp, #340	@ 0x154
 8008bb6:	469a      	mov	sl, r3
 8008bb8:	4689      	mov	r9, r1
 8008bba:	f8bd 319c 	ldrh.w	r3, [sp, #412]	@ 0x19c
 8008bbe:	f8dd b1d8 	ldr.w	fp, [sp, #472]	@ 0x1d8
 8008bc2:	9213      	str	r2, [sp, #76]	@ 0x4c
 8008bc4:	ee09 3a10 	vmov	s18, r3
 8008bc8:	f8bd 21a0 	ldrh.w	r2, [sp, #416]	@ 0x1a0
 8008bcc:	ebab 0543 	sub.w	r5, fp, r3, lsl #1
 8008bd0:	f89d 11c4 	ldrb.w	r1, [sp, #452]	@ 0x1c4
 8008bd4:	9225      	str	r2, [sp, #148]	@ 0x94
 8008bd6:	9a77      	ldr	r2, [sp, #476]	@ 0x1dc
 8008bd8:	f8bd 61d0 	ldrh.w	r6, [sp, #464]	@ 0x1d0
 8008bdc:	4415      	add	r5, r2
 8008bde:	f8bd 21a4 	ldrh.w	r2, [sp, #420]	@ 0x1a4
 8008be2:	9011      	str	r0, [sp, #68]	@ 0x44
 8008be4:	922a      	str	r2, [sp, #168]	@ 0xa8
 8008be6:	f8bd 21a8 	ldrh.w	r2, [sp, #424]	@ 0x1a8
 8008bea:	f8bd 01cc 	ldrh.w	r0, [sp, #460]	@ 0x1cc
 8008bee:	9214      	str	r2, [sp, #80]	@ 0x50
 8008bf0:	f8bd 21ac 	ldrh.w	r2, [sp, #428]	@ 0x1ac
 8008bf4:	9629      	str	r6, [sp, #164]	@ 0xa4
 8008bf6:	005e      	lsls	r6, r3, #1
 8008bf8:	9224      	str	r2, [sp, #144]	@ 0x90
 8008bfa:	07cb      	lsls	r3, r1, #31
 8008bfc:	f8bd 21b0 	ldrh.w	r2, [sp, #432]	@ 0x1b0
 8008c00:	f99d 81bc 	ldrsb.w	r8, [sp, #444]	@ 0x1bc
 8008c04:	9220      	str	r2, [sp, #128]	@ 0x80
 8008c06:	f8bd 21b4 	ldrh.w	r2, [sp, #436]	@ 0x1b4
 8008c0a:	f99d 41c0 	ldrsb.w	r4, [sp, #448]	@ 0x1c0
 8008c0e:	922b      	str	r2, [sp, #172]	@ 0xac
 8008c10:	f8bd 71d4 	ldrh.w	r7, [sp, #468]	@ 0x1d4
 8008c14:	9a6e      	ldr	r2, [sp, #440]	@ 0x1b8
 8008c16:	9126      	str	r1, [sp, #152]	@ 0x98
 8008c18:	9012      	str	r0, [sp, #72]	@ 0x48
 8008c1a:	f140 8429 	bpl.w	8009470 <forward_lite_conv2d_sssa8_ch+0x8c4>
 8008c1e:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 8008c20:	1c83      	adds	r3, r0, #2
 8008c22:	3102      	adds	r1, #2
 8008c24:	fb01 f303 	mul.w	r3, r1, r3
 8008c28:	931d      	str	r3, [sp, #116]	@ 0x74
 8008c2a:	9b77      	ldr	r3, [sp, #476]	@ 0x1dc
 8008c2c:	4650      	mov	r0, sl
 8008c2e:	9966      	ldr	r1, [sp, #408]	@ 0x198
 8008c30:	9201      	str	r2, [sp, #4]
 8008c32:	ee19 2a10 	vmov	r2, s18
 8008c36:	e9cd 8302 	strd	r8, r3, [sp, #8]
 8008c3a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8008c3c:	9300      	str	r3, [sp, #0]
 8008c3e:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8008c40:	f000 ff68 	bl	8009b14 <st_sssa8_ch_convolve_rank1upd>
 8008c44:	ee19 2a10 	vmov	r2, s18
 8008c48:	9977      	ldr	r1, [sp, #476]	@ 0x1dc
 8008c4a:	18b3      	adds	r3, r6, r2
 8008c4c:	9825      	ldr	r0, [sp, #148]	@ 0x94
 8008c4e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8008c52:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8008c54:	fb10 f303 	smulbb	r3, r0, r3
 8008c58:	9119      	str	r1, [sp, #100]	@ 0x64
 8008c5a:	fb13 f30a 	smulbb	r3, r3, sl
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	931c      	str	r3, [sp, #112]	@ 0x70
 8008c62:	ebc2 7342 	rsb	r3, r2, r2, lsl #29
 8008c66:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8008c6a:	ee0a 3a10 	vmov	s20, r3
 8008c6e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8008c72:	9323      	str	r3, [sp, #140]	@ 0x8c
 8008c74:	b1d2      	cbz	r2, 8008cac <forward_lite_conv2d_sssa8_ch+0x100>
 8008c76:	1d19      	adds	r1, r3, #4
 8008c78:	f04f 0c01 	mov.w	ip, #1
 8008c7c:	eb05 0e06 	add.w	lr, r5, r6
 8008c80:	f935 3b02 	ldrsh.w	r3, [r5], #2
 8008c84:	1e5a      	subs	r2, r3, #1
 8008c86:	fa0c f003 	lsl.w	r0, ip, r3
 8008c8a:	fa04 f303 	lsl.w	r3, r4, r3
 8008c8e:	b292      	uxth	r2, r2
 8008c90:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8008c94:	2a14      	cmp	r2, #20
 8008c96:	f200 8184 	bhi.w	8008fa2 <forward_lite_conv2d_sssa8_ch+0x3f6>
 8008c9a:	45ae      	cmp	lr, r5
 8008c9c:	f841 3c04 	str.w	r3, [r1, #-4]
 8008ca0:	f101 0104 	add.w	r1, r1, #4
 8008ca4:	d1ec      	bne.n	8008c80 <forward_lite_conv2d_sssa8_ch+0xd4>
 8008ca6:	9b77      	ldr	r3, [sp, #476]	@ 0x1dc
 8008ca8:	eb03 050b 	add.w	r5, r3, fp
 8008cac:	1bab      	subs	r3, r5, r6
 8008cae:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8008cb0:	9e2a      	ldr	r6, [sp, #168]	@ 0xa8
 8008cb2:	aa34      	add	r2, sp, #208	@ 0xd0
 8008cb4:	9322      	str	r3, [sp, #136]	@ 0x88
 8008cb6:	a94a      	add	r1, sp, #296	@ 0x128
 8008cb8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008cba:	fb06 f504 	mul.w	r5, r6, r4
 8008cbe:	a840      	add	r0, sp, #256	@ 0x100
 8008cc0:	fb0a fb04 	mul.w	fp, sl, r4
 8008cc4:	9335      	str	r3, [sp, #212]	@ 0xd4
 8008cc6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008cc8:	943e      	str	r4, [sp, #248]	@ 0xf8
 8008cca:	933a      	str	r3, [sp, #232]	@ 0xe8
 8008ccc:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8008cce:	fb0a f405 	mul.w	r4, sl, r5
 8008cd2:	f8cd 90d8 	str.w	r9, [sp, #216]	@ 0xd8
 8008cd6:	9339      	str	r3, [sp, #228]	@ 0xe4
 8008cd8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008cda:	963d      	str	r6, [sp, #244]	@ 0xf4
 8008cdc:	934c      	str	r3, [sp, #304]	@ 0x130
 8008cde:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008ce0:	934d      	str	r3, [sp, #308]	@ 0x134
 8008ce2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008ce4:	934e      	str	r3, [sp, #312]	@ 0x138
 8008ce6:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8008ce8:	934f      	str	r3, [sp, #316]	@ 0x13c
 8008cea:	ab3c      	add	r3, sp, #240	@ 0xf0
 8008cec:	9300      	str	r3, [sp, #0]
 8008cee:	ab38      	add	r3, sp, #224	@ 0xe0
 8008cf0:	f001 fd9e 	bl	800a830 <ai_padding_opt_init>
 8008cf4:	ee19 3a10 	vmov	r3, s18
 8008cf8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008cfa:	fb03 f404 	mul.w	r4, r3, r4
 8008cfe:	fb0b f306 	mul.w	r3, fp, r6
 8008d02:	f5b4 6f20 	cmp.w	r4, #2560	@ 0xa00
 8008d06:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008d0a:	bfa8      	it	ge
 8008d0c:	f44f 6420 	movge.w	r4, #2560	@ 0xa00
 8008d10:	2f01      	cmp	r7, #1
 8008d12:	ee09 3a90 	vmov	s19, r3
 8008d16:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8008d18:	f003 0202 	and.w	r2, r3, #2
 8008d1c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008d20:	9230      	str	r2, [sp, #192]	@ 0xc0
 8008d22:	931e      	str	r3, [sp, #120]	@ 0x78
 8008d24:	f000 838f 	beq.w	8009446 <forward_lite_conv2d_sssa8_ch+0x89a>
 8008d28:	2300      	movs	r3, #0
 8008d2a:	932e      	str	r3, [sp, #184]	@ 0xb8
 8008d2c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	f240 824c 	bls.w	80091cc <forward_lite_conv2d_sssa8_ch+0x620>
 8008d34:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8008d36:	ee19 2a10 	vmov	r2, s18
 8008d3a:	fbb4 f3f3 	udiv	r3, r4, r3
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	4293      	cmp	r3, r2
 8008d42:	4619      	mov	r1, r3
 8008d44:	bf28      	it	cs
 8008d46:	4611      	movcs	r1, r2
 8008d48:	fbb2 f3f1 	udiv	r3, r2, r1
 8008d4c:	fb01 2213 	mls	r2, r1, r3, r2
 8008d50:	b29b      	uxth	r3, r3
 8008d52:	911f      	str	r1, [sp, #124]	@ 0x7c
 8008d54:	b292      	uxth	r2, r2
 8008d56:	2a00      	cmp	r2, #0
 8008d58:	f040 812b 	bne.w	8008fb2 <forward_lite_conv2d_sssa8_ch+0x406>
 8008d5c:	1e5a      	subs	r2, r3, #1
 8008d5e:	b292      	uxth	r2, r2
 8008d60:	922d      	str	r2, [sp, #180]	@ 0xb4
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	f000 8219 	beq.w	800919a <forward_lite_conv2d_sssa8_ch+0x5ee>
 8008d68:	fb0a f505 	mul.w	r5, sl, r5
 8008d6c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d6e:	fa0f f688 	sxth.w	r6, r8
 8008d72:	ed8d 9a2f 	vstr	s18, [sp, #188]	@ 0xbc
 8008d76:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8008d7a:	ea4f 084a 	mov.w	r8, sl, lsl #1
 8008d7e:	ee0a 6a90 	vmov	s21, r6
 8008d82:	9318      	str	r3, [sp, #96]	@ 0x60
 8008d84:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8008d86:	f8cd 80b0 	str.w	r8, [sp, #176]	@ 0xb0
 8008d8a:	46d0      	mov	r8, sl
 8008d8c:	f1a3 0303 	sub.w	r3, r3, #3
 8008d90:	fab3 f383 	clz	r3, r3
 8008d94:	095b      	lsrs	r3, r3, #5
 8008d96:	9328      	str	r3, [sp, #160]	@ 0xa0
 8008d98:	f00a 0303 	and.w	r3, sl, #3
 8008d9c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008d9e:	ea4f 034b 	mov.w	r3, fp, lsl #1
 8008da2:	931a      	str	r3, [sp, #104]	@ 0x68
 8008da4:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8008da6:	b953      	cbnz	r3, 8008dbe <forward_lite_conv2d_sssa8_ch+0x212>
 8008da8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	f040 8206 	bne.w	80091bc <forward_lite_conv2d_sssa8_ch+0x610>
 8008db0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8008db2:	ee19 1a90 	vmov	r1, s19
 8008db6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008db8:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8008dba:	f001 fc7f 	bl	800a6bc <st_int8_to16_dual_interleaved>
 8008dbe:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8008dc0:	2b03      	cmp	r3, #3
 8008dc2:	f000 81ef 	beq.w	80091a4 <forward_lite_conv2d_sssa8_ch+0x5f8>
 8008dc6:	9b72      	ldr	r3, [sp, #456]	@ 0x1c8
 8008dc8:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008dca:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	f000 80b3 	beq.w	8008f38 <forward_lite_conv2d_sssa8_ch+0x38c>
 8008dd2:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8008dd4:	2400      	movs	r4, #0
 8008dd6:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008dd8:	ee08 ba90 	vmov	s17, fp
 8008ddc:	425b      	negs	r3, r3
 8008dde:	4626      	mov	r6, r4
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	9321      	str	r3, [sp, #132]	@ 0x84
 8008de4:	a840      	add	r0, sp, #256	@ 0x100
 8008de6:	f001 fd7d 	bl	800a8e4 <ai_padding_opt_phase1>
 8008dea:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	f000 81ca 	beq.w	8009186 <forward_lite_conv2d_sssa8_ch+0x5da>
 8008df2:	b2a3      	uxth	r3, r4
 8008df4:	9327      	str	r3, [sp, #156]	@ 0x9c
 8008df6:	e9dd 322a 	ldrd	r3, r2, [sp, #168]	@ 0xa8
 8008dfa:	1a9b      	subs	r3, r3, r2
 8008dfc:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008dfe:	fb06 3302 	mla	r3, r6, r2, r3
 8008e02:	f9bd 2084 	ldrsh.w	r2, [sp, #132]	@ 0x84
 8008e06:	930d      	str	r3, [sp, #52]	@ 0x34
 8008e08:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008e0a:	425b      	negs	r3, r3
 8008e0c:	b29b      	uxth	r3, r3
 8008e0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008e10:	2300      	movs	r3, #0
 8008e12:	930c      	str	r3, [sp, #48]	@ 0x30
 8008e14:	e9cd 3216 	strd	r3, r2, [sp, #88]	@ 0x58
 8008e18:	9b40      	ldr	r3, [sp, #256]	@ 0x100
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	f000 80e6 	beq.w	8008fec <forward_lite_conv2d_sssa8_ch+0x440>
 8008e20:	3b01      	subs	r3, #1
 8008e22:	9340      	str	r3, [sp, #256]	@ 0x100
 8008e24:	2301      	movs	r3, #1
 8008e26:	f8ad 3126 	strh.w	r3, [sp, #294]	@ 0x126
 8008e2a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008e2c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	f280 80ea 	bge.w	8009008 <forward_lite_conv2d_sssa8_ch+0x45c>
 8008e34:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8008e36:	46c3      	mov	fp, r8
 8008e38:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008e3a:	ee1a 7a90 	vmov	r7, s21
 8008e3e:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8008e40:	f8dd a0b0 	ldr.w	sl, [sp, #176]	@ 0xb0
 8008e44:	fb01 3402 	mla	r4, r1, r2, r3
 8008e48:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008e4a:	1ae4      	subs	r4, r4, r3
 8008e4c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 8008e50:	9310      	str	r3, [sp, #64]	@ 0x40
 8008e52:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8008e56:	930e      	str	r3, [sp, #56]	@ 0x38
 8008e58:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e60:	42a3      	cmp	r3, r4
 8008e62:	da25      	bge.n	8008eb0 <forward_lite_conv2d_sssa8_ch+0x304>
 8008e64:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008e66:	ea4f 78d1 	mov.w	r8, r1, lsr #31
 8008e6a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008e6c:	4291      	cmp	r1, r2
 8008e6e:	bfd8      	it	le
 8008e70:	f048 0801 	orrle.w	r8, r8, #1
 8008e74:	fb09 f202 	mul.w	r2, r9, r2
 8008e78:	9215      	str	r2, [sp, #84]	@ 0x54
 8008e7a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008e7c:	2a00      	cmp	r2, #0
 8008e7e:	f000 809c 	beq.w	8008fba <forward_lite_conv2d_sssa8_ch+0x40e>
 8008e82:	461e      	mov	r6, r3
 8008e84:	469e      	mov	lr, r3
 8008e86:	0ff3      	lsrs	r3, r6, #31
 8008e88:	4629      	mov	r1, r5
 8008e8a:	465a      	mov	r2, fp
 8008e8c:	4638      	mov	r0, r7
 8008e8e:	45f1      	cmp	r9, lr
 8008e90:	bfd8      	it	le
 8008e92:	f043 0301 	orrle.w	r3, r3, #1
 8008e96:	b91b      	cbnz	r3, 8008ea0 <forward_lite_conv2d_sssa8_ch+0x2f4>
 8008e98:	f1b8 0f00 	cmp.w	r8, #0
 8008e9c:	f000 8144 	beq.w	8009128 <forward_lite_conv2d_sssa8_ch+0x57c>
 8008ea0:	f002 fb62 	bl	800b568 <arm_fill_q15>
 8008ea4:	3601      	adds	r6, #1
 8008ea6:	4455      	add	r5, sl
 8008ea8:	b236      	sxth	r6, r6
 8008eaa:	42a6      	cmp	r6, r4
 8008eac:	46b6      	mov	lr, r6
 8008eae:	dbea      	blt.n	8008e86 <forward_lite_conv2d_sssa8_ch+0x2da>
 8008eb0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008eb2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008eb4:	3201      	adds	r2, #1
 8008eb6:	b213      	sxth	r3, r2
 8008eb8:	428b      	cmp	r3, r1
 8008eba:	461a      	mov	r2, r3
 8008ebc:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ebe:	dbce      	blt.n	8008e5e <forward_lite_conv2d_sssa8_ch+0x2b2>
 8008ec0:	46d8      	mov	r8, fp
 8008ec2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8008ec4:	42ab      	cmp	r3, r5
 8008ec6:	f000 80a6 	beq.w	8009016 <forward_lite_conv2d_sssa8_ch+0x46a>
 8008eca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ecc:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8008ece:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8008ed0:	440b      	add	r3, r1
 8008ed2:	3201      	adds	r2, #1
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	b212      	sxth	r2, r2
 8008ed8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008eda:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008edc:	920c      	str	r2, [sp, #48]	@ 0x30
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	9216      	str	r2, [sp, #88]	@ 0x58
 8008ee2:	db99      	blt.n	8008e18 <forward_lite_conv2d_sssa8_ch+0x26c>
 8008ee4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008ee6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008ee8:	9c27      	ldr	r4, [sp, #156]	@ 0x9c
 8008eea:	4413      	add	r3, r2
 8008eec:	3401      	adds	r4, #1
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	b224      	sxth	r4, r4
 8008ef2:	9321      	str	r3, [sp, #132]	@ 0x84
 8008ef4:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8008ef6:	4626      	mov	r6, r4
 8008ef8:	429c      	cmp	r4, r3
 8008efa:	f6ff af73 	blt.w	8008de4 <forward_lite_conv2d_sssa8_ch+0x238>
 8008efe:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8008f00:	ee18 ba90 	vmov	fp, s17
 8008f04:	42a9      	cmp	r1, r5
 8008f06:	d017      	beq.n	8008f38 <forward_lite_conv2d_sssa8_ch+0x38c>
 8008f08:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8008f0a:	ee1a 2a10 	vmov	r2, s20
 8008f0e:	ee19 0a90 	vmov	r0, s19
 8008f12:	9307      	str	r3, [sp, #28]
 8008f14:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8008f16:	9306      	str	r3, [sp, #24]
 8008f18:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008f1a:	9305      	str	r3, [sp, #20]
 8008f1c:	9b77      	ldr	r3, [sp, #476]	@ 0x1dc
 8008f1e:	9304      	str	r3, [sp, #16]
 8008f20:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008f22:	9303      	str	r3, [sp, #12]
 8008f24:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8008f26:	9302      	str	r3, [sp, #8]
 8008f28:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8008f2a:	9301      	str	r3, [sp, #4]
 8008f2c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008f2e:	9300      	str	r3, [sp, #0]
 8008f30:	ee19 3a10 	vmov	r3, s18
 8008f34:	f002 f8da 	bl	800b0ec <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 8008f38:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8008f3a:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8008f3c:	1a9b      	subs	r3, r3, r2
 8008f3e:	b299      	uxth	r1, r3
 8008f40:	4613      	mov	r3, r2
 8008f42:	428a      	cmp	r2, r1
 8008f44:	912f      	str	r1, [sp, #188]	@ 0xbc
 8008f46:	bf28      	it	cs
 8008f48:	460b      	movcs	r3, r1
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	f000 811e 	beq.w	800918c <forward_lite_conv2d_sssa8_ch+0x5e0>
 8008f50:	9966      	ldr	r1, [sp, #408]	@ 0x198
 8008f52:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8008f54:	fb00 1102 	mla	r1, r0, r2, r1
 8008f58:	9166      	str	r1, [sp, #408]	@ 0x198
 8008f5a:	ee1a 1a10 	vmov	r1, s20
 8008f5e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008f62:	ee0a 1a10 	vmov	s20, r1
 8008f66:	9922      	ldr	r1, [sp, #136]	@ 0x88
 8008f68:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8008f6c:	9122      	str	r1, [sp, #136]	@ 0x88
 8008f6e:	9977      	ldr	r1, [sp, #476]	@ 0x1dc
 8008f70:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008f74:	9177      	str	r1, [sp, #476]	@ 0x1dc
 8008f76:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8008f78:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008f7c:	9123      	str	r1, [sp, #140]	@ 0x8c
 8008f7e:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 8008f80:	2900      	cmp	r1, #0
 8008f82:	f000 8115 	beq.w	80091b0 <forward_lite_conv2d_sssa8_ch+0x604>
 8008f86:	9972      	ldr	r1, [sp, #456]	@ 0x1c8
 8008f88:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8008f8a:	931f      	str	r3, [sp, #124]	@ 0x7c
 8008f8c:	fb00 1202 	mla	r2, r0, r2, r1
 8008f90:	9272      	str	r2, [sp, #456]	@ 0x1c8
 8008f92:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8008f94:	1e53      	subs	r3, r2, #1
 8008f96:	b29b      	uxth	r3, r3
 8008f98:	2a00      	cmp	r2, #0
 8008f9a:	f000 80fe 	beq.w	800919a <forward_lite_conv2d_sssa8_ch+0x5ee>
 8008f9e:	932d      	str	r3, [sp, #180]	@ 0xb4
 8008fa0:	e700      	b.n	8008da4 <forward_lite_conv2d_sssa8_ch+0x1f8>
 8008fa2:	45ae      	cmp	lr, r5
 8008fa4:	f841 4c04 	str.w	r4, [r1, #-4]
 8008fa8:	f101 0104 	add.w	r1, r1, #4
 8008fac:	f47f ae68 	bne.w	8008c80 <forward_lite_conv2d_sssa8_ch+0xd4>
 8008fb0:	e679      	b.n	8008ca6 <forward_lite_conv2d_sssa8_ch+0xfa>
 8008fb2:	1c5a      	adds	r2, r3, #1
 8008fb4:	932d      	str	r3, [sp, #180]	@ 0xb4
 8008fb6:	b293      	uxth	r3, r2
 8008fb8:	e6d3      	b.n	8008d62 <forward_lite_conv2d_sssa8_ch+0x1b6>
 8008fba:	469c      	mov	ip, r3
 8008fbc:	461e      	mov	r6, r3
 8008fbe:	45e1      	cmp	r9, ip
 8008fc0:	465a      	mov	r2, fp
 8008fc2:	4629      	mov	r1, r5
 8008fc4:	4638      	mov	r0, r7
 8008fc6:	bfcc      	ite	gt
 8008fc8:	2300      	movgt	r3, #0
 8008fca:	2301      	movle	r3, #1
 8008fcc:	ea53 73d6 	orrs.w	r3, r3, r6, lsr #31
 8008fd0:	d103      	bne.n	8008fda <forward_lite_conv2d_sssa8_ch+0x42e>
 8008fd2:	f1b8 0f00 	cmp.w	r8, #0
 8008fd6:	f000 809e 	beq.w	8009116 <forward_lite_conv2d_sssa8_ch+0x56a>
 8008fda:	f002 fac5 	bl	800b568 <arm_fill_q15>
 8008fde:	3601      	adds	r6, #1
 8008fe0:	4455      	add	r5, sl
 8008fe2:	b236      	sxth	r6, r6
 8008fe4:	42a6      	cmp	r6, r4
 8008fe6:	46b4      	mov	ip, r6
 8008fe8:	dbe9      	blt.n	8008fbe <forward_lite_conv2d_sssa8_ch+0x412>
 8008fea:	e761      	b.n	8008eb0 <forward_lite_conv2d_sssa8_ch+0x304>
 8008fec:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d13d      	bne.n	800906e <forward_lite_conv2d_sssa8_ch+0x4c2>
 8008ff2:	9b42      	ldr	r3, [sp, #264]	@ 0x108
 8008ff4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008ff6:	3b01      	subs	r3, #1
 8008ff8:	9342      	str	r3, [sp, #264]	@ 0x108
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	f8ad 3126 	strh.w	r3, [sp, #294]	@ 0x126
 8009000:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009002:	4293      	cmp	r3, r2
 8009004:	f6ff af16 	blt.w	8008e34 <forward_lite_conv2d_sssa8_ch+0x288>
 8009008:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 800900c:	9310      	str	r3, [sp, #64]	@ 0x40
 800900e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8009010:	42ab      	cmp	r3, r5
 8009012:	f47f af5a 	bne.w	8008eca <forward_lite_conv2d_sssa8_ch+0x31e>
 8009016:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009018:	2b00      	cmp	r3, #0
 800901a:	f040 808e 	bne.w	800913a <forward_lite_conv2d_sssa8_ch+0x58e>
 800901e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8009020:	2b00      	cmp	r3, #0
 8009022:	f000 808a 	beq.w	800913a <forward_lite_conv2d_sssa8_ch+0x58e>
 8009026:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8009028:	ee1a 2a10 	vmov	r2, s20
 800902c:	9919      	ldr	r1, [sp, #100]	@ 0x64
 800902e:	ee19 0a90 	vmov	r0, s19
 8009032:	9308      	str	r3, [sp, #32]
 8009034:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8009036:	9307      	str	r3, [sp, #28]
 8009038:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800903a:	9306      	str	r3, [sp, #24]
 800903c:	9b77      	ldr	r3, [sp, #476]	@ 0x1dc
 800903e:	9305      	str	r3, [sp, #20]
 8009040:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009042:	9304      	str	r3, [sp, #16]
 8009044:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8009046:	9303      	str	r3, [sp, #12]
 8009048:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800904a:	9302      	str	r3, [sp, #8]
 800904c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800904e:	9300      	str	r3, [sp, #0]
 8009050:	2302      	movs	r3, #2
 8009052:	9301      	str	r3, [sp, #4]
 8009054:	ee19 3a10 	vmov	r3, s18
 8009058:	f001 fc5e 	bl	800a918 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 800905c:	901b      	str	r0, [sp, #108]	@ 0x6c
 800905e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009060:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009062:	3b01      	subs	r3, #1
 8009064:	4293      	cmp	r3, r2
 8009066:	f000 8089 	beq.w	800917c <forward_lite_conv2d_sssa8_ch+0x5d0>
 800906a:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800906c:	e72d      	b.n	8008eca <forward_lite_conv2d_sssa8_ch+0x31e>
 800906e:	3b01      	subs	r3, #1
 8009070:	9341      	str	r3, [sp, #260]	@ 0x104
 8009072:	f8bd 3124 	ldrh.w	r3, [sp, #292]	@ 0x124
 8009076:	2b01      	cmp	r3, #1
 8009078:	f8ad 3126 	strh.w	r3, [sp, #294]	@ 0x126
 800907c:	f43f aed5 	beq.w	8008e2a <forward_lite_conv2d_sssa8_ch+0x27e>
 8009080:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 8009084:	f9bd 402c 	ldrsh.w	r4, [sp, #44]	@ 0x2c
 8009088:	9310      	str	r3, [sp, #64]	@ 0x40
 800908a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800908c:	bb0b      	cbnz	r3, 80090d2 <forward_lite_conv2d_sssa8_ch+0x526>
 800908e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009090:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009092:	428b      	cmp	r3, r1
 8009094:	f6bf af15 	bge.w	8008ec2 <forward_lite_conv2d_sssa8_ch+0x316>
 8009098:	46ab      	mov	fp, r5
 800909a:	464f      	mov	r7, r9
 800909c:	4625      	mov	r5, r4
 800909e:	461e      	mov	r6, r3
 80090a0:	4618      	mov	r0, r3
 80090a2:	ee18 2a90 	vmov	r2, s17
 80090a6:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 80090a8:	4689      	mov	r9, r1
 80090aa:	f8dd a044 	ldr.w	sl, [sp, #68]	@ 0x44
 80090ae:	3601      	adds	r6, #1
 80090b0:	fb00 5007 	mla	r0, r0, r7, r5
 80090b4:	4659      	mov	r1, fp
 80090b6:	920a      	str	r2, [sp, #40]	@ 0x28
 80090b8:	b236      	sxth	r6, r6
 80090ba:	fb08 a000 	mla	r0, r8, r0, sl
 80090be:	f001 f9cf 	bl	800a460 <st_int8_to16_no_shift_interleaved>
 80090c2:	44a3      	add	fp, r4
 80090c4:	454e      	cmp	r6, r9
 80090c6:	4630      	mov	r0, r6
 80090c8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80090ca:	dbf0      	blt.n	80090ae <forward_lite_conv2d_sssa8_ch+0x502>
 80090cc:	465d      	mov	r5, fp
 80090ce:	46b9      	mov	r9, r7
 80090d0:	e6f7      	b.n	8008ec2 <forward_lite_conv2d_sssa8_ch+0x316>
 80090d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80090d4:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80090d6:	428b      	cmp	r3, r1
 80090d8:	f6bf aef3 	bge.w	8008ec2 <forward_lite_conv2d_sssa8_ch+0x316>
 80090dc:	46ab      	mov	fp, r5
 80090de:	464f      	mov	r7, r9
 80090e0:	4625      	mov	r5, r4
 80090e2:	461e      	mov	r6, r3
 80090e4:	4618      	mov	r0, r3
 80090e6:	ee18 2a90 	vmov	r2, s17
 80090ea:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 80090ec:	4689      	mov	r9, r1
 80090ee:	f8dd a044 	ldr.w	sl, [sp, #68]	@ 0x44
 80090f2:	3601      	adds	r6, #1
 80090f4:	fb00 5007 	mla	r0, r0, r7, r5
 80090f8:	4659      	mov	r1, fp
 80090fa:	920a      	str	r2, [sp, #40]	@ 0x28
 80090fc:	b236      	sxth	r6, r6
 80090fe:	fb08 a000 	mla	r0, r8, r0, sl
 8009102:	f001 f94b 	bl	800a39c <st_int8_to16_no_shift>
 8009106:	44a3      	add	fp, r4
 8009108:	454e      	cmp	r6, r9
 800910a:	4630      	mov	r0, r6
 800910c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800910e:	dbf0      	blt.n	80090f2 <forward_lite_conv2d_sssa8_ch+0x546>
 8009110:	465d      	mov	r5, fp
 8009112:	46b9      	mov	r9, r7
 8009114:	e6d5      	b.n	8008ec2 <forward_lite_conv2d_sssa8_ch+0x316>
 8009116:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009118:	eb03 000c 	add.w	r0, r3, ip
 800911c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800911e:	fb0b 3000 	mla	r0, fp, r0, r3
 8009122:	f001 f99d 	bl	800a460 <st_int8_to16_no_shift_interleaved>
 8009126:	e75a      	b.n	8008fde <forward_lite_conv2d_sssa8_ch+0x432>
 8009128:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800912a:	eb03 000e 	add.w	r0, r3, lr
 800912e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009130:	fb0b 3000 	mla	r0, fp, r0, r3
 8009134:	f001 f932 	bl	800a39c <st_int8_to16_no_shift>
 8009138:	e6b4      	b.n	8008ea4 <forward_lite_conv2d_sssa8_ch+0x2f8>
 800913a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800913c:	ee1a 2a10 	vmov	r2, s20
 8009140:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8009142:	ee19 0a90 	vmov	r0, s19
 8009146:	9308      	str	r3, [sp, #32]
 8009148:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800914a:	9307      	str	r3, [sp, #28]
 800914c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800914e:	9306      	str	r3, [sp, #24]
 8009150:	9b77      	ldr	r3, [sp, #476]	@ 0x1dc
 8009152:	9305      	str	r3, [sp, #20]
 8009154:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009156:	9304      	str	r3, [sp, #16]
 8009158:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800915a:	9303      	str	r3, [sp, #12]
 800915c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800915e:	9302      	str	r3, [sp, #8]
 8009160:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009162:	9300      	str	r3, [sp, #0]
 8009164:	2300      	movs	r3, #0
 8009166:	9301      	str	r3, [sp, #4]
 8009168:	ee19 3a10 	vmov	r3, s18
 800916c:	f001 fbd4 	bl	800a918 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 8009170:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8009172:	901b      	str	r0, [sp, #108]	@ 0x6c
 8009174:	2b03      	cmp	r3, #3
 8009176:	f47f af78 	bne.w	800906a <forward_lite_conv2d_sssa8_ch+0x4be>
 800917a:	e770      	b.n	800905e <forward_lite_conv2d_sssa8_ch+0x4b2>
 800917c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800917e:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009180:	3302      	adds	r3, #2
 8009182:	931b      	str	r3, [sp, #108]	@ 0x6c
 8009184:	e6a1      	b.n	8008eca <forward_lite_conv2d_sssa8_ch+0x31e>
 8009186:	b2a3      	uxth	r3, r4
 8009188:	9327      	str	r3, [sp, #156]	@ 0x9c
 800918a:	e6ab      	b.n	8008ee4 <forward_lite_conv2d_sssa8_ch+0x338>
 800918c:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 800918e:	931f      	str	r3, [sp, #124]	@ 0x7c
 8009190:	1e53      	subs	r3, r2, #1
 8009192:	b29b      	uxth	r3, r3
 8009194:	2a00      	cmp	r2, #0
 8009196:	f47f af02 	bne.w	8008f9e <forward_lite_conv2d_sssa8_ch+0x3f2>
 800919a:	b055      	add	sp, #340	@ 0x154
 800919c:	ecbd 8b08 	vpop	{d8-d11}
 80091a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80091a6:	9a72      	ldr	r2, [sp, #456]	@ 0x1c8
 80091a8:	3303      	adds	r3, #3
 80091aa:	18d3      	adds	r3, r2, r3
 80091ac:	931b      	str	r3, [sp, #108]	@ 0x6c
 80091ae:	e60c      	b.n	8008dca <forward_lite_conv2d_sssa8_ch+0x21e>
 80091b0:	4611      	mov	r1, r2
 80091b2:	9a72      	ldr	r2, [sp, #456]	@ 0x1c8
 80091b4:	931f      	str	r3, [sp, #124]	@ 0x7c
 80091b6:	440a      	add	r2, r1
 80091b8:	9272      	str	r2, [sp, #456]	@ 0x1c8
 80091ba:	e6ea      	b.n	8008f92 <forward_lite_conv2d_sssa8_ch+0x3e6>
 80091bc:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80091be:	ee19 1a90 	vmov	r1, s19
 80091c2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80091c4:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80091c6:	f001 f98f 	bl	800a4e8 <st_int8_to16_dual>
 80091ca:	e5f8      	b.n	8008dbe <forward_lite_conv2d_sssa8_ch+0x212>
 80091cc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80091ce:	ee19 1a10 	vmov	r1, s18
 80091d2:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80091d4:	fb02 f303 	mul.w	r3, r2, r3
 80091d8:	9a72      	ldr	r2, [sp, #456]	@ 0x1c8
 80091da:	fb01 2303 	mla	r3, r1, r3, r2
 80091de:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80091e0:	429a      	cmp	r2, r3
 80091e2:	f4bf ada7 	bcs.w	8008d34 <forward_lite_conv2d_sssa8_ch+0x188>
 80091e6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80091e8:	fb03 f309 	mul.w	r3, r3, r9
 80091ec:	fb0a 2303 	mla	r3, sl, r3, r2
 80091f0:	9a72      	ldr	r2, [sp, #456]	@ 0x1c8
 80091f2:	429a      	cmp	r2, r3
 80091f4:	f4bf ad9e 	bcs.w	8008d34 <forward_lite_conv2d_sssa8_ch+0x188>
 80091f8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80091fa:	fbb4 f3f3 	udiv	r3, r4, r3
 80091fe:	b29b      	uxth	r3, r3
 8009200:	4619      	mov	r1, r3
 8009202:	ee19 3a10 	vmov	r3, s18
 8009206:	4299      	cmp	r1, r3
 8009208:	bf28      	it	cs
 800920a:	4619      	movcs	r1, r3
 800920c:	fbb3 f2f1 	udiv	r2, r3, r1
 8009210:	fb01 3312 	mls	r3, r1, r2, r3
 8009214:	b292      	uxth	r2, r2
 8009216:	9131      	str	r1, [sp, #196]	@ 0xc4
 8009218:	b29b      	uxth	r3, r3
 800921a:	922f      	str	r2, [sp, #188]	@ 0xbc
 800921c:	b11b      	cbz	r3, 8009226 <forward_lite_conv2d_sssa8_ch+0x67a>
 800921e:	4613      	mov	r3, r2
 8009220:	3301      	adds	r3, #1
 8009222:	b29b      	uxth	r3, r3
 8009224:	932f      	str	r3, [sp, #188]	@ 0xbc
 8009226:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8009228:	2b00      	cmp	r3, #0
 800922a:	d0b6      	beq.n	800919a <forward_lite_conv2d_sssa8_ch+0x5ee>
 800922c:	fb0a f505 	mul.w	r5, sl, r5
 8009230:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009232:	fa0f f788 	sxth.w	r7, r8
 8009236:	2400      	movs	r4, #0
 8009238:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800923c:	ea4f 084a 	mov.w	r8, sl, lsl #1
 8009240:	4625      	mov	r5, r4
 8009242:	9316      	str	r3, [sp, #88]	@ 0x58
 8009244:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8009246:	f8cd 80b0 	str.w	r8, [sp, #176]	@ 0xb0
 800924a:	46d0      	mov	r8, sl
 800924c:	3b01      	subs	r3, #1
 800924e:	b29b      	uxth	r3, r3
 8009250:	9333      	str	r3, [sp, #204]	@ 0xcc
 8009252:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8009254:	425b      	negs	r3, r3
 8009256:	b29b      	uxth	r3, r3
 8009258:	9330      	str	r3, [sp, #192]	@ 0xc0
 800925a:	f00a 0303 	and.w	r3, sl, #3
 800925e:	930d      	str	r3, [sp, #52]	@ 0x34
 8009260:	ea4f 034b 	mov.w	r3, fp, lsl #1
 8009264:	9317      	str	r3, [sp, #92]	@ 0x5c
 8009266:	a840      	add	r0, sp, #256	@ 0x100
 8009268:	f001 fb3c 	bl	800a8e4 <ai_padding_opt_phase1>
 800926c:	ee19 3a10 	vmov	r3, s18
 8009270:	9a72      	ldr	r2, [sp, #456]	@ 0x1c8
 8009272:	fb05 f303 	mul.w	r3, r5, r3
 8009276:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8009278:	fb01 2303 	mla	r3, r1, r3, r2
 800927c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800927e:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8009280:	b953      	cbnz	r3, 8009298 <forward_lite_conv2d_sssa8_ch+0x6ec>
 8009282:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009284:	2b00      	cmp	r3, #0
 8009286:	f040 81ea 	bne.w	800965e <forward_lite_conv2d_sssa8_ch+0xab2>
 800928a:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 800928c:	ee19 1a90 	vmov	r1, s19
 8009290:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009292:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8009294:	f001 fa12 	bl	800a6bc <st_int8_to16_dual_interleaved>
 8009298:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 800929a:	2b00      	cmp	r3, #0
 800929c:	f000 81ea 	beq.w	8009674 <forward_lite_conv2d_sssa8_ch+0xac8>
 80092a0:	b2a3      	uxth	r3, r4
 80092a2:	eef0 aa4a 	vmov.f32	s21, s20
 80092a6:	ee08 ba90 	vmov	s17, fp
 80092aa:	ee0b 7a10 	vmov	s22, r7
 80092ae:	9332      	str	r3, [sp, #200]	@ 0xc8
 80092b0:	ed8d 9a28 	vstr	s18, [sp, #160]	@ 0xa0
 80092b4:	e9dd 322a 	ldrd	r3, r2, [sp, #168]	@ 0xa8
 80092b8:	1a9b      	subs	r3, r3, r2
 80092ba:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80092bc:	fb05 3302 	mla	r3, r5, r2, r3
 80092c0:	930c      	str	r3, [sp, #48]	@ 0x30
 80092c2:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	@ 0xc0
 80092c6:	9315      	str	r3, [sp, #84]	@ 0x54
 80092c8:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 80092ca:	9327      	str	r3, [sp, #156]	@ 0x9c
 80092cc:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 80092ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80092d0:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80092d2:	932d      	str	r3, [sp, #180]	@ 0xb4
 80092d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80092d6:	931f      	str	r3, [sp, #124]	@ 0x7c
 80092d8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80092da:	9326      	str	r3, [sp, #152]	@ 0x98
 80092dc:	9b77      	ldr	r3, [sp, #476]	@ 0x1dc
 80092de:	9321      	str	r3, [sp, #132]	@ 0x84
 80092e0:	9a44      	ldr	r2, [sp, #272]	@ 0x110
 80092e2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80092e4:	9241      	str	r2, [sp, #260]	@ 0x104
 80092e6:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80092e8:	9340      	str	r3, [sp, #256]	@ 0x100
 80092ea:	9242      	str	r2, [sp, #264]	@ 0x108
 80092ec:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80092ee:	2a00      	cmp	r2, #0
 80092f0:	f000 815e 	beq.w	80095b0 <forward_lite_conv2d_sssa8_ch+0xa04>
 80092f4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80092f6:	2100      	movs	r1, #0
 80092f8:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80092fa:	4252      	negs	r2, r2
 80092fc:	b292      	uxth	r2, r2
 80092fe:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009300:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009302:	9218      	str	r2, [sp, #96]	@ 0x60
 8009304:	460a      	mov	r2, r1
 8009306:	2b00      	cmp	r3, #0
 8009308:	d060      	beq.n	80093cc <forward_lite_conv2d_sssa8_ch+0x820>
 800930a:	3b01      	subs	r3, #1
 800930c:	9340      	str	r3, [sp, #256]	@ 0x100
 800930e:	2301      	movs	r3, #1
 8009310:	f8ad 3126 	strh.w	r3, [sp, #294]	@ 0x126
 8009314:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009316:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8009318:	4283      	cmp	r3, r0
 800931a:	dd64      	ble.n	80093e6 <forward_lite_conv2d_sssa8_ch+0x83a>
 800931c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800931e:	46c3      	mov	fp, r8
 8009320:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8009322:	ee1b 7a10 	vmov	r7, s22
 8009326:	f8dd a0b0 	ldr.w	sl, [sp, #176]	@ 0xb0
 800932a:	fb02 3200 	mla	r2, r2, r0, r3
 800932e:	b28b      	uxth	r3, r1
 8009330:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009332:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009334:	1ad5      	subs	r5, r2, r3
 8009336:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 800933a:	930e      	str	r3, [sp, #56]	@ 0x38
 800933c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800933e:	461a      	mov	r2, r3
 8009340:	930a      	str	r3, [sp, #40]	@ 0x28
 8009342:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009344:	429d      	cmp	r5, r3
 8009346:	dd25      	ble.n	8009394 <forward_lite_conv2d_sssa8_ch+0x7e8>
 8009348:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800934a:	ea4f 78d1 	mov.w	r8, r1, lsr #31
 800934e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009350:	4291      	cmp	r1, r2
 8009352:	bfd8      	it	le
 8009354:	f048 0801 	orrle.w	r8, r8, #1
 8009358:	fb02 f209 	mul.w	r2, r2, r9
 800935c:	9210      	str	r2, [sp, #64]	@ 0x40
 800935e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009360:	2a00      	cmp	r2, #0
 8009362:	f000 808c 	beq.w	800947e <forward_lite_conv2d_sssa8_ch+0x8d2>
 8009366:	461e      	mov	r6, r3
 8009368:	469e      	mov	lr, r3
 800936a:	0ff3      	lsrs	r3, r6, #31
 800936c:	4621      	mov	r1, r4
 800936e:	465a      	mov	r2, fp
 8009370:	4638      	mov	r0, r7
 8009372:	45f1      	cmp	r9, lr
 8009374:	bfd8      	it	le
 8009376:	f043 0301 	orrle.w	r3, r3, #1
 800937a:	b91b      	cbnz	r3, 8009384 <forward_lite_conv2d_sssa8_ch+0x7d8>
 800937c:	f1b8 0f00 	cmp.w	r8, #0
 8009380:	f000 80e8 	beq.w	8009554 <forward_lite_conv2d_sssa8_ch+0x9a8>
 8009384:	f002 f8f0 	bl	800b568 <arm_fill_q15>
 8009388:	3601      	adds	r6, #1
 800938a:	4454      	add	r4, sl
 800938c:	b236      	sxth	r6, r6
 800938e:	42b5      	cmp	r5, r6
 8009390:	46b6      	mov	lr, r6
 8009392:	dcea      	bgt.n	800936a <forward_lite_conv2d_sssa8_ch+0x7be>
 8009394:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009396:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009398:	3201      	adds	r2, #1
 800939a:	b213      	sxth	r3, r2
 800939c:	428b      	cmp	r3, r1
 800939e:	461a      	mov	r2, r3
 80093a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80093a2:	dbce      	blt.n	8009342 <forward_lite_conv2d_sssa8_ch+0x796>
 80093a4:	46d8      	mov	r8, fp
 80093a6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80093a8:	42a3      	cmp	r3, r4
 80093aa:	d021      	beq.n	80093f0 <forward_lite_conv2d_sssa8_ch+0x844>
 80093ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80093ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80093b0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80093b2:	4413      	add	r3, r2
 80093b4:	3101      	adds	r1, #1
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	b209      	sxth	r1, r1
 80093ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80093bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80093be:	460a      	mov	r2, r1
 80093c0:	4299      	cmp	r1, r3
 80093c2:	f280 80d9 	bge.w	8009578 <forward_lite_conv2d_sssa8_ch+0x9cc>
 80093c6:	9b40      	ldr	r3, [sp, #256]	@ 0x100
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d19e      	bne.n	800930a <forward_lite_conv2d_sssa8_ch+0x75e>
 80093cc:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d16d      	bne.n	80094ae <forward_lite_conv2d_sssa8_ch+0x902>
 80093d2:	9b42      	ldr	r3, [sp, #264]	@ 0x108
 80093d4:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80093d6:	3b01      	subs	r3, #1
 80093d8:	9342      	str	r3, [sp, #264]	@ 0x108
 80093da:	2301      	movs	r3, #1
 80093dc:	f8ad 3126 	strh.w	r3, [sp, #294]	@ 0x126
 80093e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80093e2:	4283      	cmp	r3, r0
 80093e4:	dc9a      	bgt.n	800931c <forward_lite_conv2d_sssa8_ch+0x770>
 80093e6:	b28b      	uxth	r3, r1
 80093e8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80093ea:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80093ec:	42a3      	cmp	r3, r4
 80093ee:	d1dd      	bne.n	80093ac <forward_lite_conv2d_sssa8_ch+0x800>
 80093f0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80093f2:	ee1a 2a90 	vmov	r2, s21
 80093f6:	9919      	ldr	r1, [sp, #100]	@ 0x64
 80093f8:	ee19 0a90 	vmov	r0, s19
 80093fc:	9308      	str	r3, [sp, #32]
 80093fe:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8009400:	9307      	str	r3, [sp, #28]
 8009402:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8009404:	9306      	str	r3, [sp, #24]
 8009406:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009408:	9305      	str	r3, [sp, #20]
 800940a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800940c:	9304      	str	r3, [sp, #16]
 800940e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8009410:	9303      	str	r3, [sp, #12]
 8009412:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8009414:	9302      	str	r3, [sp, #8]
 8009416:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009418:	9300      	str	r3, [sp, #0]
 800941a:	2300      	movs	r3, #0
 800941c:	9301      	str	r3, [sp, #4]
 800941e:	ee19 3a10 	vmov	r3, s18
 8009422:	f001 fa79 	bl	800a918 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 8009426:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009428:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800942a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800942c:	4413      	add	r3, r2
 800942e:	9018      	str	r0, [sp, #96]	@ 0x60
 8009430:	3101      	adds	r1, #1
 8009432:	b29b      	uxth	r3, r3
 8009434:	b209      	sxth	r1, r1
 8009436:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009438:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800943a:	460a      	mov	r2, r1
 800943c:	428b      	cmp	r3, r1
 800943e:	f340 80b7 	ble.w	80095b0 <forward_lite_conv2d_sssa8_ch+0xa04>
 8009442:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009444:	e7bf      	b.n	80093c6 <forward_lite_conv2d_sssa8_ch+0x81a>
 8009446:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009448:	ee19 1a10 	vmov	r1, s18
 800944c:	fb01 f302 	mul.w	r3, r1, r2
 8009450:	42a3      	cmp	r3, r4
 8009452:	f73f ac69 	bgt.w	8008d28 <forward_lite_conv2d_sssa8_ch+0x17c>
 8009456:	f01a 0f03 	tst.w	sl, #3
 800945a:	972e      	str	r7, [sp, #184]	@ 0xb8
 800945c:	f040 810d 	bne.w	800967a <forward_lite_conv2d_sssa8_ch+0xace>
 8009460:	ee19 3a10 	vmov	r3, s18
 8009464:	ee19 1a90 	vmov	r1, s19
 8009468:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800946a:	f001 f927 	bl	800a6bc <st_int8_to16_dual_interleaved>
 800946e:	e45d      	b.n	8008d2c <forward_lite_conv2d_sssa8_ch+0x180>
 8009470:	4603      	mov	r3, r0
 8009472:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 8009474:	fb01 f303 	mul.w	r3, r1, r3
 8009478:	931d      	str	r3, [sp, #116]	@ 0x74
 800947a:	f7ff bbd6 	b.w	8008c2a <forward_lite_conv2d_sssa8_ch+0x7e>
 800947e:	469c      	mov	ip, r3
 8009480:	461e      	mov	r6, r3
 8009482:	45e1      	cmp	r9, ip
 8009484:	465a      	mov	r2, fp
 8009486:	4621      	mov	r1, r4
 8009488:	4638      	mov	r0, r7
 800948a:	bfcc      	ite	gt
 800948c:	2300      	movgt	r3, #0
 800948e:	2301      	movle	r3, #1
 8009490:	ea53 73d6 	orrs.w	r3, r3, r6, lsr #31
 8009494:	d102      	bne.n	800949c <forward_lite_conv2d_sssa8_ch+0x8f0>
 8009496:	f1b8 0f00 	cmp.w	r8, #0
 800949a:	d064      	beq.n	8009566 <forward_lite_conv2d_sssa8_ch+0x9ba>
 800949c:	f002 f864 	bl	800b568 <arm_fill_q15>
 80094a0:	3601      	adds	r6, #1
 80094a2:	4454      	add	r4, sl
 80094a4:	b236      	sxth	r6, r6
 80094a6:	42ae      	cmp	r6, r5
 80094a8:	46b4      	mov	ip, r6
 80094aa:	dbea      	blt.n	8009482 <forward_lite_conv2d_sssa8_ch+0x8d6>
 80094ac:	e772      	b.n	8009394 <forward_lite_conv2d_sssa8_ch+0x7e8>
 80094ae:	3b01      	subs	r3, #1
 80094b0:	9341      	str	r3, [sp, #260]	@ 0x104
 80094b2:	f8bd 3124 	ldrh.w	r3, [sp, #292]	@ 0x124
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	f8ad 3126 	strh.w	r3, [sp, #294]	@ 0x126
 80094bc:	f43f af2a 	beq.w	8009314 <forward_lite_conv2d_sssa8_ch+0x768>
 80094c0:	b28b      	uxth	r3, r1
 80094c2:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	@ 0x2c
 80094c6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80094c8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80094ca:	bb0b      	cbnz	r3, 8009510 <forward_lite_conv2d_sssa8_ch+0x964>
 80094cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80094ce:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80094d0:	4293      	cmp	r3, r2
 80094d2:	f77f af68 	ble.w	80093a6 <forward_lite_conv2d_sssa8_ch+0x7fa>
 80094d6:	4616      	mov	r6, r2
 80094d8:	4610      	mov	r0, r2
 80094da:	46a3      	mov	fp, r4
 80094dc:	464f      	mov	r7, r9
 80094de:	462c      	mov	r4, r5
 80094e0:	ee18 2a90 	vmov	r2, s17
 80094e4:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 80094e6:	4699      	mov	r9, r3
 80094e8:	f8dd a044 	ldr.w	sl, [sp, #68]	@ 0x44
 80094ec:	3601      	adds	r6, #1
 80094ee:	fb00 4007 	mla	r0, r0, r7, r4
 80094f2:	4659      	mov	r1, fp
 80094f4:	920a      	str	r2, [sp, #40]	@ 0x28
 80094f6:	b236      	sxth	r6, r6
 80094f8:	fb08 a000 	mla	r0, r8, r0, sl
 80094fc:	f000 ffb0 	bl	800a460 <st_int8_to16_no_shift_interleaved>
 8009500:	44ab      	add	fp, r5
 8009502:	454e      	cmp	r6, r9
 8009504:	4630      	mov	r0, r6
 8009506:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009508:	dbf0      	blt.n	80094ec <forward_lite_conv2d_sssa8_ch+0x940>
 800950a:	465c      	mov	r4, fp
 800950c:	46b9      	mov	r9, r7
 800950e:	e74a      	b.n	80093a6 <forward_lite_conv2d_sssa8_ch+0x7fa>
 8009510:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009512:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009514:	4293      	cmp	r3, r2
 8009516:	f77f af46 	ble.w	80093a6 <forward_lite_conv2d_sssa8_ch+0x7fa>
 800951a:	4616      	mov	r6, r2
 800951c:	4610      	mov	r0, r2
 800951e:	46a3      	mov	fp, r4
 8009520:	464f      	mov	r7, r9
 8009522:	462c      	mov	r4, r5
 8009524:	ee18 2a90 	vmov	r2, s17
 8009528:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 800952a:	4699      	mov	r9, r3
 800952c:	f8dd a044 	ldr.w	sl, [sp, #68]	@ 0x44
 8009530:	3601      	adds	r6, #1
 8009532:	fb00 4007 	mla	r0, r0, r7, r4
 8009536:	4659      	mov	r1, fp
 8009538:	920a      	str	r2, [sp, #40]	@ 0x28
 800953a:	b236      	sxth	r6, r6
 800953c:	fb08 a000 	mla	r0, r8, r0, sl
 8009540:	f000 ff2c 	bl	800a39c <st_int8_to16_no_shift>
 8009544:	44ab      	add	fp, r5
 8009546:	454e      	cmp	r6, r9
 8009548:	4630      	mov	r0, r6
 800954a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800954c:	dbf0      	blt.n	8009530 <forward_lite_conv2d_sssa8_ch+0x984>
 800954e:	465c      	mov	r4, fp
 8009550:	46b9      	mov	r9, r7
 8009552:	e728      	b.n	80093a6 <forward_lite_conv2d_sssa8_ch+0x7fa>
 8009554:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009556:	eb03 000e 	add.w	r0, r3, lr
 800955a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800955c:	fb0b 3000 	mla	r0, fp, r0, r3
 8009560:	f000 ff1c 	bl	800a39c <st_int8_to16_no_shift>
 8009564:	e710      	b.n	8009388 <forward_lite_conv2d_sssa8_ch+0x7dc>
 8009566:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009568:	eb03 000c 	add.w	r0, r3, ip
 800956c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800956e:	fb0b 3000 	mla	r0, fp, r0, r3
 8009572:	f000 ff75 	bl	800a460 <st_int8_to16_no_shift_interleaved>
 8009576:	e793      	b.n	80094a0 <forward_lite_conv2d_sssa8_ch+0x8f4>
 8009578:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800957a:	429c      	cmp	r4, r3
 800957c:	d018      	beq.n	80095b0 <forward_lite_conv2d_sssa8_ch+0xa04>
 800957e:	4619      	mov	r1, r3
 8009580:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8009582:	ee1a 2a90 	vmov	r2, s21
 8009586:	ee19 0a90 	vmov	r0, s19
 800958a:	9307      	str	r3, [sp, #28]
 800958c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800958e:	9306      	str	r3, [sp, #24]
 8009590:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8009592:	9305      	str	r3, [sp, #20]
 8009594:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009596:	9304      	str	r3, [sp, #16]
 8009598:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800959a:	9303      	str	r3, [sp, #12]
 800959c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800959e:	9302      	str	r3, [sp, #8]
 80095a0:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80095a2:	9301      	str	r3, [sp, #4]
 80095a4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80095a6:	9300      	str	r3, [sp, #0]
 80095a8:	ee19 3a10 	vmov	r3, s18
 80095ac:	f001 fd9e 	bl	800b0ec <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 80095b0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80095b2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80095b4:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 80095b6:	1a9b      	subs	r3, r3, r2
 80095b8:	4411      	add	r1, r2
 80095ba:	911b      	str	r1, [sp, #108]	@ 0x6c
 80095bc:	b299      	uxth	r1, r3
 80095be:	4613      	mov	r3, r2
 80095c0:	428a      	cmp	r2, r1
 80095c2:	9128      	str	r1, [sp, #160]	@ 0xa0
 80095c4:	bf28      	it	cs
 80095c6:	460b      	movcs	r3, r1
 80095c8:	b29b      	uxth	r3, r3
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d03e      	beq.n	800964c <forward_lite_conv2d_sssa8_ch+0xaa0>
 80095ce:	ee1a 4a90 	vmov	r4, s21
 80095d2:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 80095d4:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80095d6:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80095da:	fb01 0002 	mla	r0, r1, r2, r0
 80095de:	ee0a 4a90 	vmov	s21, r4
 80095e2:	9c26      	ldr	r4, [sp, #152]	@ 0x98
 80095e4:	902d      	str	r0, [sp, #180]	@ 0xb4
 80095e6:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 80095ea:	9426      	str	r4, [sp, #152]	@ 0x98
 80095ec:	9c21      	ldr	r4, [sp, #132]	@ 0x84
 80095ee:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80095f2:	9421      	str	r4, [sp, #132]	@ 0x84
 80095f4:	9c1f      	ldr	r4, [sp, #124]	@ 0x7c
 80095f6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80095fa:	921f      	str	r2, [sp, #124]	@ 0x7c
 80095fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80095fe:	bb3a      	cbnz	r2, 8009650 <forward_lite_conv2d_sssa8_ch+0xaa4>
 8009600:	460a      	mov	r2, r1
 8009602:	ee19 1a90 	vmov	r1, s19
 8009606:	931a      	str	r3, [sp, #104]	@ 0x68
 8009608:	f001 f858 	bl	800a6bc <st_int8_to16_dual_interleaved>
 800960c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800960e:	3b01      	subs	r3, #1
 8009610:	b29b      	uxth	r3, r3
 8009612:	461a      	mov	r2, r3
 8009614:	9327      	str	r3, [sp, #156]	@ 0x9c
 8009616:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800961a:	429a      	cmp	r2, r3
 800961c:	f47f ae60 	bne.w	80092e0 <forward_lite_conv2d_sssa8_ch+0x734>
 8009620:	ee18 ba90 	vmov	fp, s17
 8009624:	ee1b 7a10 	vmov	r7, s22
 8009628:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 800962a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800962c:	9c32      	ldr	r4, [sp, #200]	@ 0xc8
 800962e:	4413      	add	r3, r2
 8009630:	3401      	adds	r4, #1
 8009632:	b29b      	uxth	r3, r3
 8009634:	b224      	sxth	r4, r4
 8009636:	9330      	str	r3, [sp, #192]	@ 0xc0
 8009638:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800963a:	4625      	mov	r5, r4
 800963c:	429c      	cmp	r4, r3
 800963e:	f6ff ae12 	blt.w	8009266 <forward_lite_conv2d_sssa8_ch+0x6ba>
 8009642:	b055      	add	sp, #340	@ 0x154
 8009644:	ecbd 8b08 	vpop	{d8-d11}
 8009648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800964c:	931a      	str	r3, [sp, #104]	@ 0x68
 800964e:	e7dd      	b.n	800960c <forward_lite_conv2d_sssa8_ch+0xa60>
 8009650:	460a      	mov	r2, r1
 8009652:	ee19 1a90 	vmov	r1, s19
 8009656:	931a      	str	r3, [sp, #104]	@ 0x68
 8009658:	f000 ff46 	bl	800a4e8 <st_int8_to16_dual>
 800965c:	e7d6      	b.n	800960c <forward_lite_conv2d_sssa8_ch+0xa60>
 800965e:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8009660:	ee19 1a90 	vmov	r1, s19
 8009664:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009666:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8009668:	f000 ff3e 	bl	800a4e8 <st_int8_to16_dual>
 800966c:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 800966e:	2b00      	cmp	r3, #0
 8009670:	f47f ae16 	bne.w	80092a0 <forward_lite_conv2d_sssa8_ch+0x6f4>
 8009674:	b2a3      	uxth	r3, r4
 8009676:	9332      	str	r3, [sp, #200]	@ 0xc8
 8009678:	e7d6      	b.n	8009628 <forward_lite_conv2d_sssa8_ch+0xa7c>
 800967a:	ee19 3a10 	vmov	r3, s18
 800967e:	ee19 1a90 	vmov	r1, s19
 8009682:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8009684:	f000 ff30 	bl	800a4e8 <st_int8_to16_dual>
 8009688:	f7ff bb50 	b.w	8008d2c <forward_lite_conv2d_sssa8_ch+0x180>

0800968c <forward_lite_maxpool_is8os8_scalepos>:
 800968c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009690:	b095      	sub	sp, #84	@ 0x54
 8009692:	4614      	mov	r4, r2
 8009694:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8009698:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 800969c:	f99d 009c 	ldrsb.w	r0, [sp, #156]	@ 0x9c
 80096a0:	910d      	str	r1, [sp, #52]	@ 0x34
 80096a2:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 80096a6:	930c      	str	r3, [sp, #48]	@ 0x30
 80096a8:	910e      	str	r1, [sp, #56]	@ 0x38
 80096aa:	f8bd 1084 	ldrh.w	r1, [sp, #132]	@ 0x84
 80096ae:	f8bd 3098 	ldrh.w	r3, [sp, #152]	@ 0x98
 80096b2:	910f      	str	r1, [sp, #60]	@ 0x3c
 80096b4:	f8bd 1088 	ldrh.w	r1, [sp, #136]	@ 0x88
 80096b8:	9206      	str	r2, [sp, #24]
 80096ba:	9110      	str	r1, [sp, #64]	@ 0x40
 80096bc:	f8bd 108c 	ldrh.w	r1, [sp, #140]	@ 0x8c
 80096c0:	f8bd a078 	ldrh.w	sl, [sp, #120]	@ 0x78
 80096c4:	9111      	str	r1, [sp, #68]	@ 0x44
 80096c6:	f8bd 1090 	ldrh.w	r1, [sp, #144]	@ 0x90
 80096ca:	f99d 20a0 	ldrsb.w	r2, [sp, #160]	@ 0xa0
 80096ce:	9112      	str	r1, [sp, #72]	@ 0x48
 80096d0:	f8bd 1094 	ldrh.w	r1, [sp, #148]	@ 0x94
 80096d4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80096d6:	9107      	str	r1, [sp, #28]
 80096d8:	9003      	str	r0, [sp, #12]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	f000 8094 	beq.w	8009808 <forward_lite_maxpool_is8os8_scalepos+0x17c>
 80096e0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80096e4:	eeb4 0a67 	vcmp.f32	s0, s15
 80096e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096ec:	bf0c      	ite	eq
 80096ee:	2301      	moveq	r3, #1
 80096f0:	2300      	movne	r3, #0
 80096f2:	4290      	cmp	r0, r2
 80096f4:	bf14      	ite	ne
 80096f6:	2300      	movne	r3, #0
 80096f8:	f003 0301 	andeq.w	r3, r3, #1
 80096fc:	9301      	str	r3, [sp, #4]
 80096fe:	2900      	cmp	r1, #0
 8009700:	f000 8082 	beq.w	8009808 <forward_lite_maxpool_is8os8_scalepos+0x17c>
 8009704:	f1ba 0f00 	cmp.w	sl, #0
 8009708:	d07e      	beq.n	8009808 <forward_lite_maxpool_is8os8_scalepos+0x17c>
 800970a:	ee07 2a90 	vmov	s15, r2
 800970e:	2300      	movs	r3, #0
 8009710:	ed9f 6a4e 	vldr	s12, [pc, #312]	@ 800984c <forward_lite_maxpool_is8os8_scalepos+0x1c0>
 8009714:	fb04 fb0a 	mul.w	fp, r4, sl
 8009718:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800971c:	9304      	str	r3, [sp, #16]
 800971e:	9b04      	ldr	r3, [sp, #16]
 8009720:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8009724:	9907      	ldr	r1, [sp, #28]
 8009726:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009728:	fb03 f202 	mul.w	r2, r3, r2
 800972c:	fb03 f301 	mul.w	r3, r3, r1
 8009730:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8009732:	9308      	str	r3, [sp, #32]
 8009734:	2300      	movs	r3, #0
 8009736:	9305      	str	r3, [sp, #20]
 8009738:	1a53      	subs	r3, r2, r1
 800973a:	1a8a      	subs	r2, r1, r2
 800973c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800973e:	2b00      	cmp	r3, #0
 8009740:	eb02 0c01 	add.w	ip, r2, r1
 8009744:	bfd8      	it	le
 8009746:	4691      	movle	r9, r2
 8009748:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800974a:	bfc8      	it	gt
 800974c:	f04f 0900 	movgt.w	r9, #0
 8009750:	4594      	cmp	ip, r2
 8009752:	444b      	add	r3, r9
 8009754:	bfa8      	it	ge
 8009756:	4694      	movge	ip, r2
 8009758:	9a06      	ldr	r2, [sp, #24]
 800975a:	fb02 f303 	mul.w	r3, r2, r3
 800975e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009760:	9a05      	ldr	r2, [sp, #20]
 8009762:	f04f 0e00 	mov.w	lr, #0
 8009766:	9908      	ldr	r1, [sp, #32]
 8009768:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800976a:	eb02 0801 	add.w	r8, r2, r1
 800976e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009770:	fb03 f302 	mul.w	r3, r3, r2
 8009774:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009776:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8009778:	fb0a 2808 	mla	r8, sl, r8, r2
 800977c:	1a5a      	subs	r2, r3, r1
 800977e:	1acb      	subs	r3, r1, r3
 8009780:	9906      	ldr	r1, [sp, #24]
 8009782:	2a00      	cmp	r2, #0
 8009784:	bfd8      	it	le
 8009786:	461f      	movle	r7, r3
 8009788:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800978a:	bfc8      	it	gt
 800978c:	2700      	movgt	r7, #0
 800978e:	18d3      	adds	r3, r2, r3
 8009790:	1a8a      	subs	r2, r1, r2
 8009792:	4294      	cmp	r4, r2
 8009794:	443b      	add	r3, r7
 8009796:	bfa8      	it	ge
 8009798:	4614      	movge	r4, r2
 800979a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800979c:	fb0a 2303 	mla	r3, sl, r3, r2
 80097a0:	9302      	str	r3, [sp, #8]
 80097a2:	45e1      	cmp	r9, ip
 80097a4:	da4e      	bge.n	8009844 <forward_lite_maxpool_is8os8_scalepos+0x1b8>
 80097a6:	9b02      	ldr	r3, [sp, #8]
 80097a8:	464d      	mov	r5, r9
 80097aa:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 80097ae:	eb03 060e 	add.w	r6, r3, lr
 80097b2:	42a7      	cmp	r7, r4
 80097b4:	da0a      	bge.n	80097cc <forward_lite_maxpool_is8os8_scalepos+0x140>
 80097b6:	4632      	mov	r2, r6
 80097b8:	463b      	mov	r3, r7
 80097ba:	f992 0000 	ldrsb.w	r0, [r2]
 80097be:	3301      	adds	r3, #1
 80097c0:	4452      	add	r2, sl
 80097c2:	4281      	cmp	r1, r0
 80097c4:	bfb8      	it	lt
 80097c6:	4601      	movlt	r1, r0
 80097c8:	429c      	cmp	r4, r3
 80097ca:	d1f6      	bne.n	80097ba <forward_lite_maxpool_is8os8_scalepos+0x12e>
 80097cc:	3501      	adds	r5, #1
 80097ce:	445e      	add	r6, fp
 80097d0:	45ac      	cmp	ip, r5
 80097d2:	d1ee      	bne.n	80097b2 <forward_lite_maxpool_is8os8_scalepos+0x126>
 80097d4:	9b01      	ldr	r3, [sp, #4]
 80097d6:	b1d3      	cbz	r3, 800980e <forward_lite_maxpool_is8os8_scalepos+0x182>
 80097d8:	f888 1000 	strb.w	r1, [r8]
 80097dc:	f10e 0e01 	add.w	lr, lr, #1
 80097e0:	f108 0801 	add.w	r8, r8, #1
 80097e4:	fa1f f38e 	uxth.w	r3, lr
 80097e8:	459a      	cmp	sl, r3
 80097ea:	d8da      	bhi.n	80097a2 <forward_lite_maxpool_is8os8_scalepos+0x116>
 80097ec:	9b05      	ldr	r3, [sp, #20]
 80097ee:	9a07      	ldr	r2, [sp, #28]
 80097f0:	3301      	adds	r3, #1
 80097f2:	b29b      	uxth	r3, r3
 80097f4:	429a      	cmp	r2, r3
 80097f6:	9305      	str	r3, [sp, #20]
 80097f8:	d8b2      	bhi.n	8009760 <forward_lite_maxpool_is8os8_scalepos+0xd4>
 80097fa:	9b04      	ldr	r3, [sp, #16]
 80097fc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80097fe:	3301      	adds	r3, #1
 8009800:	b29b      	uxth	r3, r3
 8009802:	429a      	cmp	r2, r3
 8009804:	9304      	str	r3, [sp, #16]
 8009806:	d88a      	bhi.n	800971e <forward_lite_maxpool_is8os8_scalepos+0x92>
 8009808:	b015      	add	sp, #84	@ 0x54
 800980a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800980e:	9b03      	ldr	r3, [sp, #12]
 8009810:	eeb0 7a66 	vmov.f32	s14, s13
 8009814:	1ac9      	subs	r1, r1, r3
 8009816:	ee07 1a90 	vmov	s15, r1
 800981a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800981e:	eea7 7a80 	vfma.f32	s14, s15, s0
 8009822:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8009826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800982a:	fe65 7a86 	vselge.f32	s15, s11, s12
 800982e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009832:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009836:	ee17 3a90 	vmov	r3, s15
 800983a:	f303 0307 	ssat	r3, #8, r3
 800983e:	f888 3000 	strb.w	r3, [r8]
 8009842:	e7cb      	b.n	80097dc <forward_lite_maxpool_is8os8_scalepos+0x150>
 8009844:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 8009848:	e7c4      	b.n	80097d4 <forward_lite_maxpool_is8os8_scalepos+0x148>
 800984a:	bf00      	nop
 800984c:	befffffc 	.word	0xbefffffc

08009850 <forward_lite_maxpool_is8os8_scaleneg>:
 8009850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009854:	b095      	sub	sp, #84	@ 0x54
 8009856:	4614      	mov	r4, r2
 8009858:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800985c:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 8009860:	f99d 009c 	ldrsb.w	r0, [sp, #156]	@ 0x9c
 8009864:	910d      	str	r1, [sp, #52]	@ 0x34
 8009866:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 800986a:	930c      	str	r3, [sp, #48]	@ 0x30
 800986c:	910e      	str	r1, [sp, #56]	@ 0x38
 800986e:	f8bd 1084 	ldrh.w	r1, [sp, #132]	@ 0x84
 8009872:	f8bd 3098 	ldrh.w	r3, [sp, #152]	@ 0x98
 8009876:	910f      	str	r1, [sp, #60]	@ 0x3c
 8009878:	f8bd 1088 	ldrh.w	r1, [sp, #136]	@ 0x88
 800987c:	9206      	str	r2, [sp, #24]
 800987e:	9110      	str	r1, [sp, #64]	@ 0x40
 8009880:	f8bd 108c 	ldrh.w	r1, [sp, #140]	@ 0x8c
 8009884:	f8bd a078 	ldrh.w	sl, [sp, #120]	@ 0x78
 8009888:	9111      	str	r1, [sp, #68]	@ 0x44
 800988a:	f8bd 1090 	ldrh.w	r1, [sp, #144]	@ 0x90
 800988e:	f99d 20a0 	ldrsb.w	r2, [sp, #160]	@ 0xa0
 8009892:	9112      	str	r1, [sp, #72]	@ 0x48
 8009894:	f8bd 1094 	ldrh.w	r1, [sp, #148]	@ 0x94
 8009898:	9313      	str	r3, [sp, #76]	@ 0x4c
 800989a:	9107      	str	r1, [sp, #28]
 800989c:	9003      	str	r0, [sp, #12]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	f000 8093 	beq.w	80099ca <forward_lite_maxpool_is8os8_scaleneg+0x17a>
 80098a4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80098a8:	eeb4 0a67 	vcmp.f32	s0, s15
 80098ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098b0:	bf0c      	ite	eq
 80098b2:	2301      	moveq	r3, #1
 80098b4:	2300      	movne	r3, #0
 80098b6:	4290      	cmp	r0, r2
 80098b8:	bf14      	ite	ne
 80098ba:	2300      	movne	r3, #0
 80098bc:	f003 0301 	andeq.w	r3, r3, #1
 80098c0:	9301      	str	r3, [sp, #4]
 80098c2:	2900      	cmp	r1, #0
 80098c4:	f000 8081 	beq.w	80099ca <forward_lite_maxpool_is8os8_scaleneg+0x17a>
 80098c8:	f1ba 0f00 	cmp.w	sl, #0
 80098cc:	d07d      	beq.n	80099ca <forward_lite_maxpool_is8os8_scaleneg+0x17a>
 80098ce:	ee07 2a90 	vmov	s15, r2
 80098d2:	2300      	movs	r3, #0
 80098d4:	ed9f 6a4d 	vldr	s12, [pc, #308]	@ 8009a0c <forward_lite_maxpool_is8os8_scaleneg+0x1bc>
 80098d8:	fb04 fb0a 	mul.w	fp, r4, sl
 80098dc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80098e0:	9304      	str	r3, [sp, #16]
 80098e2:	9b04      	ldr	r3, [sp, #16]
 80098e4:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 80098e8:	9907      	ldr	r1, [sp, #28]
 80098ea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80098ec:	fb03 f202 	mul.w	r2, r3, r2
 80098f0:	fb03 f301 	mul.w	r3, r3, r1
 80098f4:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80098f6:	9308      	str	r3, [sp, #32]
 80098f8:	2300      	movs	r3, #0
 80098fa:	9305      	str	r3, [sp, #20]
 80098fc:	1a53      	subs	r3, r2, r1
 80098fe:	1a8a      	subs	r2, r1, r2
 8009900:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009902:	2b00      	cmp	r3, #0
 8009904:	eb02 0c01 	add.w	ip, r2, r1
 8009908:	bfd8      	it	le
 800990a:	4691      	movle	r9, r2
 800990c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800990e:	bfc8      	it	gt
 8009910:	f04f 0900 	movgt.w	r9, #0
 8009914:	4594      	cmp	ip, r2
 8009916:	444b      	add	r3, r9
 8009918:	bfa8      	it	ge
 800991a:	4694      	movge	ip, r2
 800991c:	9a06      	ldr	r2, [sp, #24]
 800991e:	fb02 f303 	mul.w	r3, r2, r3
 8009922:	9309      	str	r3, [sp, #36]	@ 0x24
 8009924:	9a05      	ldr	r2, [sp, #20]
 8009926:	f04f 0e00 	mov.w	lr, #0
 800992a:	9908      	ldr	r1, [sp, #32]
 800992c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800992e:	eb02 0801 	add.w	r8, r2, r1
 8009932:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009934:	fb03 f302 	mul.w	r3, r3, r2
 8009938:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800993a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 800993c:	fb0a 2808 	mla	r8, sl, r8, r2
 8009940:	1a5a      	subs	r2, r3, r1
 8009942:	1acb      	subs	r3, r1, r3
 8009944:	9906      	ldr	r1, [sp, #24]
 8009946:	2a00      	cmp	r2, #0
 8009948:	bfd8      	it	le
 800994a:	461f      	movle	r7, r3
 800994c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800994e:	bfc8      	it	gt
 8009950:	2700      	movgt	r7, #0
 8009952:	18d3      	adds	r3, r2, r3
 8009954:	1a8a      	subs	r2, r1, r2
 8009956:	4294      	cmp	r4, r2
 8009958:	443b      	add	r3, r7
 800995a:	bfa8      	it	ge
 800995c:	4614      	movge	r4, r2
 800995e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009960:	fb0a 2303 	mla	r3, sl, r3, r2
 8009964:	9302      	str	r3, [sp, #8]
 8009966:	45e1      	cmp	r9, ip
 8009968:	da4d      	bge.n	8009a06 <forward_lite_maxpool_is8os8_scaleneg+0x1b6>
 800996a:	9b02      	ldr	r3, [sp, #8]
 800996c:	464d      	mov	r5, r9
 800996e:	217f      	movs	r1, #127	@ 0x7f
 8009970:	eb03 060e 	add.w	r6, r3, lr
 8009974:	42a7      	cmp	r7, r4
 8009976:	da0a      	bge.n	800998e <forward_lite_maxpool_is8os8_scaleneg+0x13e>
 8009978:	4632      	mov	r2, r6
 800997a:	463b      	mov	r3, r7
 800997c:	f992 0000 	ldrsb.w	r0, [r2]
 8009980:	3301      	adds	r3, #1
 8009982:	4452      	add	r2, sl
 8009984:	4281      	cmp	r1, r0
 8009986:	bfa8      	it	ge
 8009988:	4601      	movge	r1, r0
 800998a:	429c      	cmp	r4, r3
 800998c:	d1f6      	bne.n	800997c <forward_lite_maxpool_is8os8_scaleneg+0x12c>
 800998e:	3501      	adds	r5, #1
 8009990:	445e      	add	r6, fp
 8009992:	45ac      	cmp	ip, r5
 8009994:	d1ee      	bne.n	8009974 <forward_lite_maxpool_is8os8_scaleneg+0x124>
 8009996:	9b01      	ldr	r3, [sp, #4]
 8009998:	b1d3      	cbz	r3, 80099d0 <forward_lite_maxpool_is8os8_scaleneg+0x180>
 800999a:	f888 1000 	strb.w	r1, [r8]
 800999e:	f10e 0e01 	add.w	lr, lr, #1
 80099a2:	f108 0801 	add.w	r8, r8, #1
 80099a6:	fa1f f38e 	uxth.w	r3, lr
 80099aa:	459a      	cmp	sl, r3
 80099ac:	d8db      	bhi.n	8009966 <forward_lite_maxpool_is8os8_scaleneg+0x116>
 80099ae:	9b05      	ldr	r3, [sp, #20]
 80099b0:	9a07      	ldr	r2, [sp, #28]
 80099b2:	3301      	adds	r3, #1
 80099b4:	b29b      	uxth	r3, r3
 80099b6:	429a      	cmp	r2, r3
 80099b8:	9305      	str	r3, [sp, #20]
 80099ba:	d8b3      	bhi.n	8009924 <forward_lite_maxpool_is8os8_scaleneg+0xd4>
 80099bc:	9b04      	ldr	r3, [sp, #16]
 80099be:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80099c0:	3301      	adds	r3, #1
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	429a      	cmp	r2, r3
 80099c6:	9304      	str	r3, [sp, #16]
 80099c8:	d88b      	bhi.n	80098e2 <forward_lite_maxpool_is8os8_scaleneg+0x92>
 80099ca:	b015      	add	sp, #84	@ 0x54
 80099cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099d0:	9b03      	ldr	r3, [sp, #12]
 80099d2:	eeb0 7a66 	vmov.f32	s14, s13
 80099d6:	1ac9      	subs	r1, r1, r3
 80099d8:	ee07 1a90 	vmov	s15, r1
 80099dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80099e0:	eea7 7a80 	vfma.f32	s14, s15, s0
 80099e4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80099e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099ec:	fe65 7a86 	vselge.f32	s15, s11, s12
 80099f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80099f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80099f8:	ee17 3a90 	vmov	r3, s15
 80099fc:	f303 0307 	ssat	r3, #8, r3
 8009a00:	f888 3000 	strb.w	r3, [r8]
 8009a04:	e7cb      	b.n	800999e <forward_lite_maxpool_is8os8_scaleneg+0x14e>
 8009a06:	217f      	movs	r1, #127	@ 0x7f
 8009a08:	e7c5      	b.n	8009996 <forward_lite_maxpool_is8os8_scaleneg+0x146>
 8009a0a:	bf00      	nop
 8009a0c:	befffffc 	.word	0xbefffffc

08009a10 <align_factor>:
 8009a10:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009a14:	4602      	mov	r2, r0
 8009a16:	b508      	push	{r3, lr}
 8009a18:	eeb4 0a67 	vcmp.f32	s0, s15
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	8003      	strh	r3, [r0, #0]
 8009a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a24:	d524      	bpl.n	8009a70 <align_factor+0x60>
 8009a26:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a2e:	dd1f      	ble.n	8009a70 <align_factor+0x60>
 8009a30:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8009a34:	2301      	movs	r3, #1
 8009a36:	e005      	b.n	8009a44 <align_factor+0x34>
 8009a38:	8013      	strh	r3, [r2, #0]
 8009a3a:	b28b      	uxth	r3, r1
 8009a3c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009a40:	2b21      	cmp	r3, #33	@ 0x21
 8009a42:	d02b      	beq.n	8009a9c <align_factor+0x8c>
 8009a44:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8009a48:	1c59      	adds	r1, r3, #1
 8009a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a4e:	d4f3      	bmi.n	8009a38 <align_factor+0x28>
 8009a50:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8009ab0 <align_factor+0xa0>
 8009a54:	ee60 7a27 	vmul.f32	s15, s0, s15
 8009a58:	ee17 0a90 	vmov	r0, s15
 8009a5c:	f7f6 fcb0 	bl	80003c0 <__aeabi_f2lz>
 8009a60:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 8009a64:	d003      	beq.n	8009a6e <align_factor+0x5e>
 8009a66:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8009a6a:	ea80 70e1 	eor.w	r0, r0, r1, asr #31
 8009a6e:	bd08      	pop	{r3, pc}
 8009a70:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009a74:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009a78:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8009a7c:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8009a80:	e005      	b.n	8009a8e <align_factor+0x7e>
 8009a82:	8013      	strh	r3, [r2, #0]
 8009a84:	b28b      	uxth	r3, r1
 8009a86:	ee20 0a07 	vmul.f32	s0, s0, s14
 8009a8a:	4283      	cmp	r3, r0
 8009a8c:	d00a      	beq.n	8009aa4 <align_factor+0x94>
 8009a8e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8009a92:	1e59      	subs	r1, r3, #1
 8009a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a98:	dcf3      	bgt.n	8009a82 <align_factor+0x72>
 8009a9a:	e7d9      	b.n	8009a50 <align_factor+0x40>
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	8013      	strh	r3, [r2, #0]
 8009aa2:	bd08      	pop	{r3, pc}
 8009aa4:	f64f 73e2 	movw	r3, #65506	@ 0xffe2
 8009aa8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009aac:	8013      	strh	r3, [r2, #0]
 8009aae:	e7cf      	b.n	8009a50 <align_factor+0x40>
 8009ab0:	4f000000 	.word	0x4f000000

08009ab4 <align_factor_ch>:
 8009ab4:	b361      	cbz	r1, 8009b10 <align_factor_ch+0x5c>
 8009ab6:	ee80 7a20 	vdiv.f32	s14, s0, s1
 8009aba:	f1a2 0c04 	sub.w	ip, r2, #4
 8009abe:	b530      	push	{r4, r5, lr}
 8009ac0:	f1a3 0e02 	sub.w	lr, r3, #2
 8009ac4:	eb00 0481 	add.w	r4, r0, r1, lsl #2
 8009ac8:	2500      	movs	r5, #0
 8009aca:	ecf0 7a01 	vldmia	r0!, {s15}
 8009ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ad2:	ee17 2a90 	vmov	r2, s15
 8009ad6:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8009ada:	f3c2 0316 	ubfx	r3, r2, #0, #23
 8009ade:	2a00      	cmp	r2, #0
 8009ae0:	f503 0300 	add.w	r3, r3, #8388608	@ 0x800000
 8009ae4:	f1c1 017e 	rsb	r1, r1, #126	@ 0x7e
 8009ae8:	bfb8      	it	lt
 8009aea:	425b      	neglt	r3, r3
 8009aec:	291f      	cmp	r1, #31
 8009aee:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 8009af2:	dc06      	bgt.n	8009b02 <align_factor_ch+0x4e>
 8009af4:	4284      	cmp	r4, r0
 8009af6:	f82e 1f02 	strh.w	r1, [lr, #2]!
 8009afa:	f84c 3f04 	str.w	r3, [ip, #4]!
 8009afe:	d1e4      	bne.n	8009aca <align_factor_ch+0x16>
 8009b00:	bd30      	pop	{r4, r5, pc}
 8009b02:	4284      	cmp	r4, r0
 8009b04:	f82e 5f02 	strh.w	r5, [lr, #2]!
 8009b08:	f84c 5f04 	str.w	r5, [ip, #4]!
 8009b0c:	d1dd      	bne.n	8009aca <align_factor_ch+0x16>
 8009b0e:	bd30      	pop	{r4, r5, pc}
 8009b10:	4770      	bx	lr
 8009b12:	bf00      	nop

08009b14 <st_sssa8_ch_convolve_rank1upd>:
 8009b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b18:	b085      	sub	sp, #20
 8009b1a:	f8bd 4038 	ldrh.w	r4, [sp, #56]	@ 0x38
 8009b1e:	f99d b040 	ldrsb.w	fp, [sp, #64]	@ 0x40
 8009b22:	fb13 f304 	smulbb	r3, r3, r4
 8009b26:	460c      	mov	r4, r1
 8009b28:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009b2a:	fb13 f500 	smulbb	r5, r3, r0
 8009b2e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009b30:	2a00      	cmp	r2, #0
 8009b32:	d070      	beq.n	8009c16 <st_sssa8_ch_convolve_rank1upd+0x102>
 8009b34:	b2ad      	uxth	r5, r5
 8009b36:	f1a1 0904 	sub.w	r9, r1, #4
 8009b3a:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
 8009b3e:	08af      	lsrs	r7, r5, #2
 8009b40:	f005 0503 	and.w	r5, r5, #3
 8009b44:	eb03 08c2 	add.w	r8, r3, r2, lsl #3
 8009b48:	1e69      	subs	r1, r5, #1
 8009b4a:	f1a7 0381 	sub.w	r3, r7, #129	@ 0x81
 8009b4e:	f1a7 0280 	sub.w	r2, r7, #128	@ 0x80
 8009b52:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8009b56:	b289      	uxth	r1, r1
 8009b58:	9100      	str	r1, [sp, #0]
 8009b5a:	ebc3 2143 	rsb	r1, r3, r3, lsl #9
 8009b5e:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
 8009b62:	b292      	uxth	r2, r2
 8009b64:	9202      	str	r2, [sp, #8]
 8009b66:	025a      	lsls	r2, r3, #9
 8009b68:	3301      	adds	r3, #1
 8009b6a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009b6e:	025b      	lsls	r3, r3, #9
 8009b70:	9203      	str	r2, [sp, #12]
 8009b72:	9301      	str	r3, [sp, #4]
 8009b74:	2f80      	cmp	r7, #128	@ 0x80
 8009b76:	d953      	bls.n	8009c20 <st_sssa8_ch_convolve_rank1upd+0x10c>
 8009b78:	9b03      	ldr	r3, [sp, #12]
 8009b7a:	f504 7000 	add.w	r0, r4, #512	@ 0x200
 8009b7e:	2600      	movs	r6, #0
 8009b80:	eb04 0c03 	add.w	ip, r4, r3
 8009b84:	f5a0 7100 	sub.w	r1, r0, #512	@ 0x200
 8009b88:	2200      	movs	r2, #0
 8009b8a:	f851 3b04 	ldr.w	r3, [r1], #4
 8009b8e:	fa2f fe83 	sxtb16	lr, r3
 8009b92:	4281      	cmp	r1, r0
 8009b94:	ea4f 2333 	mov.w	r3, r3, ror #8
 8009b98:	fa92 f21e 	qadd16	r2, r2, lr
 8009b9c:	fa2f f383 	sxtb16	r3, r3
 8009ba0:	fa92 f213 	qadd16	r2, r2, r3
 8009ba4:	d1f1      	bne.n	8009b8a <st_sssa8_ch_convolve_rank1upd+0x76>
 8009ba6:	f501 7000 	add.w	r0, r1, #512	@ 0x200
 8009baa:	b213      	sxth	r3, r2
 8009bac:	4560      	cmp	r0, ip
 8009bae:	eb03 4222 	add.w	r2, r3, r2, asr #16
 8009bb2:	4416      	add	r6, r2
 8009bb4:	d1e6      	bne.n	8009b84 <st_sssa8_ch_convolve_rank1upd+0x70>
 8009bb6:	9b01      	ldr	r3, [sp, #4]
 8009bb8:	18e1      	adds	r1, r4, r3
 8009bba:	9c02      	ldr	r4, [sp, #8]
 8009bbc:	b374      	cbz	r4, 8009c1c <st_sssa8_ch_convolve_rank1upd+0x108>
 8009bbe:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	f851 3b04 	ldr.w	r3, [r1], #4
 8009bc8:	fa2f f083 	sxtb16	r0, r3
 8009bcc:	428c      	cmp	r4, r1
 8009bce:	ea4f 2333 	mov.w	r3, r3, ror #8
 8009bd2:	fa92 f210 	qadd16	r2, r2, r0
 8009bd6:	fa2f f383 	sxtb16	r3, r3
 8009bda:	fa92 f213 	qadd16	r2, r2, r3
 8009bde:	d1f1      	bne.n	8009bc4 <st_sssa8_ch_convolve_rank1upd+0xb0>
 8009be0:	b213      	sxth	r3, r2
 8009be2:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8009be6:	441e      	add	r6, r3
 8009be8:	b16d      	cbz	r5, 8009c06 <st_sssa8_ch_convolve_rank1upd+0xf2>
 8009bea:	f994 3000 	ldrsb.w	r3, [r4]
 8009bee:	441e      	add	r6, r3
 8009bf0:	9b00      	ldr	r3, [sp, #0]
 8009bf2:	b13b      	cbz	r3, 8009c04 <st_sssa8_ch_convolve_rank1upd+0xf0>
 8009bf4:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8009bf8:	2d02      	cmp	r5, #2
 8009bfa:	441e      	add	r6, r3
 8009bfc:	d002      	beq.n	8009c04 <st_sssa8_ch_convolve_rank1upd+0xf0>
 8009bfe:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8009c02:	441e      	add	r6, r3
 8009c04:	442c      	add	r4, r5
 8009c06:	f859 3f04 	ldr.w	r3, [r9, #4]!
 8009c0a:	fb0b 3616 	mls	r6, fp, r6, r3
 8009c0e:	f84a 6b04 	str.w	r6, [sl], #4
 8009c12:	45c2      	cmp	sl, r8
 8009c14:	d1ae      	bne.n	8009b74 <st_sssa8_ch_convolve_rank1upd+0x60>
 8009c16:	b005      	add	sp, #20
 8009c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c1c:	460c      	mov	r4, r1
 8009c1e:	e7e3      	b.n	8009be8 <st_sssa8_ch_convolve_rank1upd+0xd4>
 8009c20:	4621      	mov	r1, r4
 8009c22:	2600      	movs	r6, #0
 8009c24:	463c      	mov	r4, r7
 8009c26:	e7c9      	b.n	8009bbc <st_sssa8_ch_convolve_rank1upd+0xa8>

08009c28 <st_sssa8_fully_connected>:
 8009c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c2c:	b097      	sub	sp, #92	@ 0x5c
 8009c2e:	460d      	mov	r5, r1
 8009c30:	4683      	mov	fp, r0
 8009c32:	9c20      	ldr	r4, [sp, #128]	@ 0x80
 8009c34:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009c36:	6823      	ldr	r3, [r4, #0]
 8009c38:	9203      	str	r2, [sp, #12]
 8009c3a:	9307      	str	r3, [sp, #28]
 8009c3c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009c3e:	f99d 6088 	ldrsb.w	r6, [sp, #136]	@ 0x88
 8009c42:	f9b3 1000 	ldrsh.w	r1, [r3]
 8009c46:	f99d 308c 	ldrsb.w	r3, [sp, #140]	@ 0x8c
 8009c4a:	1e4a      	subs	r2, r1, #1
 8009c4c:	9104      	str	r1, [sp, #16]
 8009c4e:	920d      	str	r2, [sp, #52]	@ 0x34
 8009c50:	b292      	uxth	r2, r2
 8009c52:	2a14      	cmp	r2, #20
 8009c54:	f200 81b3 	bhi.w	8009fbe <st_sssa8_fully_connected+0x396>
 8009c58:	2201      	movs	r2, #1
 8009c5a:	408b      	lsls	r3, r1
 8009c5c:	408a      	lsls	r2, r1
 8009c5e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8009c62:	9308      	str	r3, [sp, #32]
 8009c64:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	f000 81ae 	beq.w	8009fc8 <st_sssa8_fully_connected+0x3a0>
 8009c6c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009c6e:	b2b3      	uxth	r3, r6
 8009c70:	9600      	str	r6, [sp, #0]
 8009c72:	4658      	mov	r0, fp
 8009c74:	0851      	lsrs	r1, r2, #1
 8009c76:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8009c7a:	9e03      	ldr	r6, [sp, #12]
 8009c7c:	460c      	mov	r4, r1
 8009c7e:	9115      	str	r1, [sp, #84]	@ 0x54
 8009c80:	4632      	mov	r2, r6
 8009c82:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8009c84:	f000 fb52 	bl	800a32c <st_int8_reordered_no_shift_zero>
 8009c88:	4621      	mov	r1, r4
 8009c8a:	2c00      	cmp	r4, #0
 8009c8c:	f000 8145 	beq.w	8009f1a <st_sssa8_fully_connected+0x2f2>
 8009c90:	4634      	mov	r4, r6
 8009c92:	f1a6 0310 	sub.w	r3, r6, #16
 8009c96:	9e04      	ldr	r6, [sp, #16]
 8009c98:	1e4a      	subs	r2, r1, #1
 8009c9a:	2001      	movs	r0, #1
 8009c9c:	091b      	lsrs	r3, r3, #4
 8009c9e:	1eb1      	subs	r1, r6, #2
 8009ca0:	b292      	uxth	r2, r2
 8009ca2:	3301      	adds	r3, #1
 8009ca4:	fa00 f101 	lsl.w	r1, r0, r1
 8009ca8:	9112      	str	r1, [sp, #72]	@ 0x48
 8009caa:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8009cac:	3110      	adds	r1, #16
 8009cae:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8009cb2:	920e      	str	r2, [sp, #56]	@ 0x38
 8009cb4:	1ee2      	subs	r2, r4, #3
 8009cb6:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009cb8:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009cba:	3208      	adds	r2, #8
 8009cbc:	9205      	str	r2, [sp, #20]
 8009cbe:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8009cc0:	3202      	adds	r2, #2
 8009cc2:	9206      	str	r2, [sp, #24]
 8009cc4:	011a      	lsls	r2, r3, #4
 8009cc6:	9209      	str	r2, [sp, #36]	@ 0x24
 8009cc8:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8009cca:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8009cce:	9310      	str	r3, [sp, #64]	@ 0x40
 8009cd0:	1f23      	subs	r3, r4, #4
 8009cd2:	9311      	str	r3, [sp, #68]	@ 0x44
 8009cd4:	1b83      	subs	r3, r0, r6
 8009cd6:	9314      	str	r3, [sp, #80]	@ 0x50
 8009cd8:	9a03      	ldr	r2, [sp, #12]
 8009cda:	9b05      	ldr	r3, [sp, #20]
 8009cdc:	2a0f      	cmp	r2, #15
 8009cde:	eb05 0b02 	add.w	fp, r5, r2
 8009ce2:	e953 1302 	ldrd	r1, r3, [r3, #-8]
 8009ce6:	f340 8260 	ble.w	800a1aa <st_sssa8_fully_connected+0x582>
 8009cea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009cec:	465c      	mov	r4, fp
 8009cee:	18ae      	adds	r6, r5, r2
 8009cf0:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8009cf2:	682f      	ldr	r7, [r5, #0]
 8009cf4:	f8d4 a000 	ldr.w	sl, [r4]
 8009cf8:	ea4f 2037 	mov.w	r0, r7, ror #8
 8009cfc:	f8d2 9000 	ldr.w	r9, [r2]
 8009d00:	ea4f 2e3a 	mov.w	lr, sl, ror #8
 8009d04:	fa2f f080 	sxtb16	r0, r0
 8009d08:	fa2f fc8e 	sxtb16	ip, lr
 8009d0c:	fa2f f787 	sxtb16	r7, r7
 8009d10:	fa2f fe8a 	sxtb16	lr, sl
 8009d14:	fb29 1107 	smlad	r1, r9, r7, r1
 8009d18:	fb29 390e 	smlad	r9, r9, lr, r3
 8009d1c:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8009d20:	fb28 1100 	smlad	r1, r8, r0, r1
 8009d24:	fb28 9e0c 	smlad	lr, r8, ip, r9
 8009d28:	6868      	ldr	r0, [r5, #4]
 8009d2a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8009d2e:	ea4f 2330 	mov.w	r3, r0, ror #8
 8009d32:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8009d36:	ea4f 2a39 	mov.w	sl, r9, ror #8
 8009d3a:	fa2f f383 	sxtb16	r3, r3
 8009d3e:	fa2f f78a 	sxtb16	r7, sl
 8009d42:	fa2f f080 	sxtb16	r0, r0
 8009d46:	fa2f fa89 	sxtb16	sl, r9
 8009d4a:	fb28 1000 	smlad	r0, r8, r0, r1
 8009d4e:	fb28 e80a 	smlad	r8, r8, sl, lr
 8009d52:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 8009d56:	fb2c 0003 	smlad	r0, ip, r3, r0
 8009d5a:	fb2c 8a07 	smlad	sl, ip, r7, r8
 8009d5e:	68ab      	ldr	r3, [r5, #8]
 8009d60:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8009d64:	ea4f 2133 	mov.w	r1, r3, ror #8
 8009d68:	f8d2 c010 	ldr.w	ip, [r2, #16]
 8009d6c:	ea4f 2e38 	mov.w	lr, r8, ror #8
 8009d70:	fa2f f181 	sxtb16	r1, r1
 8009d74:	fa2f f98e 	sxtb16	r9, lr
 8009d78:	fa2f f383 	sxtb16	r3, r3
 8009d7c:	fa2f fe88 	sxtb16	lr, r8
 8009d80:	fb2c 0303 	smlad	r3, ip, r3, r0
 8009d84:	fb2c ac0e 	smlad	ip, ip, lr, sl
 8009d88:	6957      	ldr	r7, [r2, #20]
 8009d8a:	fb27 3301 	smlad	r3, r7, r1, r3
 8009d8e:	fb27 ce09 	smlad	lr, r7, r9, ip
 8009d92:	68e8      	ldr	r0, [r5, #12]
 8009d94:	3410      	adds	r4, #16
 8009d96:	f854 cc04 	ldr.w	ip, [r4, #-4]
 8009d9a:	3510      	adds	r5, #16
 8009d9c:	ea4f 2130 	mov.w	r1, r0, ror #8
 8009da0:	6997      	ldr	r7, [r2, #24]
 8009da2:	fa2f f881 	sxtb16	r8, r1
 8009da6:	fa2f f180 	sxtb16	r1, r0
 8009daa:	ea4f 203c 	mov.w	r0, ip, ror #8
 8009dae:	fa2f fc8c 	sxtb16	ip, ip
 8009db2:	fa2f f080 	sxtb16	r0, r0
 8009db6:	fb27 3101 	smlad	r1, r7, r1, r3
 8009dba:	fb27 e70c 	smlad	r7, r7, ip, lr
 8009dbe:	69d3      	ldr	r3, [r2, #28]
 8009dc0:	3220      	adds	r2, #32
 8009dc2:	fb23 1108 	smlad	r1, r3, r8, r1
 8009dc6:	fb23 7300 	smlad	r3, r3, r0, r7
 8009dca:	42b5      	cmp	r5, r6
 8009dcc:	d191      	bne.n	8009cf2 <st_sssa8_fully_connected+0xca>
 8009dce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009dd0:	f8dd a040 	ldr.w	sl, [sp, #64]	@ 0x40
 8009dd4:	4493      	add	fp, r2
 8009dd6:	4691      	mov	r9, r2
 8009dd8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009dda:	4591      	cmp	r9, r2
 8009ddc:	f280 81e3 	bge.w	800a1a6 <st_sssa8_fully_connected+0x57e>
 8009de0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009de2:	4657      	mov	r7, sl
 8009de4:	46d8      	mov	r8, fp
 8009de6:	eba2 0209 	sub.w	r2, r2, r9
 8009dea:	0892      	lsrs	r2, r2, #2
 8009dec:	920c      	str	r2, [sp, #48]	@ 0x30
 8009dee:	3201      	adds	r2, #1
 8009df0:	0090      	lsls	r0, r2, #2
 8009df2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009df4:	eb06 0482 	add.w	r4, r6, r2, lsl #2
 8009df8:	900a      	str	r0, [sp, #40]	@ 0x28
 8009dfa:	f856 eb04 	ldr.w	lr, [r6], #4
 8009dfe:	f858 0b04 	ldr.w	r0, [r8], #4
 8009e02:	ea4f 2c3e 	mov.w	ip, lr, ror #8
 8009e06:	683a      	ldr	r2, [r7, #0]
 8009e08:	ea4f 2530 	mov.w	r5, r0, ror #8
 8009e0c:	fa2f fc8c 	sxtb16	ip, ip
 8009e10:	fa2f fe8e 	sxtb16	lr, lr
 8009e14:	fa2f f585 	sxtb16	r5, r5
 8009e18:	fa2f f080 	sxtb16	r0, r0
 8009e1c:	fb22 110e 	smlad	r1, r2, lr, r1
 8009e20:	fb22 3300 	smlad	r3, r2, r0, r3
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	3708      	adds	r7, #8
 8009e28:	fb22 110c 	smlad	r1, r2, ip, r1
 8009e2c:	fb22 3305 	smlad	r3, r2, r5, r3
 8009e30:	42a6      	cmp	r6, r4
 8009e32:	d1e2      	bne.n	8009dfa <st_sssa8_fully_connected+0x1d2>
 8009e34:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009e36:	f109 0904 	add.w	r9, r9, #4
 8009e3a:	eb0a 0ac2 	add.w	sl, sl, r2, lsl #3
 8009e3e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009e40:	4493      	add	fp, r2
 8009e42:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009e44:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 8009e48:	9d03      	ldr	r5, [sp, #12]
 8009e4a:	454d      	cmp	r5, r9
 8009e4c:	dd37      	ble.n	8009ebe <st_sssa8_fully_connected+0x296>
 8009e4e:	f9ba 2000 	ldrsh.w	r2, [sl]
 8009e52:	f994 0000 	ldrsb.w	r0, [r4]
 8009e56:	fb12 1100 	smlabb	r1, r2, r0, r1
 8009e5a:	f99b 0000 	ldrsb.w	r0, [fp]
 8009e5e:	fb12 3300 	smlabb	r3, r2, r0, r3
 8009e62:	f109 0201 	add.w	r2, r9, #1
 8009e66:	42aa      	cmp	r2, r5
 8009e68:	da25      	bge.n	8009eb6 <st_sssa8_fully_connected+0x28e>
 8009e6a:	f9ba 2002 	ldrsh.w	r2, [sl, #2]
 8009e6e:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8009e72:	fb12 1100 	smlabb	r1, r2, r0, r1
 8009e76:	f99b 0001 	ldrsb.w	r0, [fp, #1]
 8009e7a:	fb12 3300 	smlabb	r3, r2, r0, r3
 8009e7e:	f109 0202 	add.w	r2, r9, #2
 8009e82:	42aa      	cmp	r2, r5
 8009e84:	da17      	bge.n	8009eb6 <st_sssa8_fully_connected+0x28e>
 8009e86:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 8009e8a:	f994 0002 	ldrsb.w	r0, [r4, #2]
 8009e8e:	fb12 1100 	smlabb	r1, r2, r0, r1
 8009e92:	f99b 0002 	ldrsb.w	r0, [fp, #2]
 8009e96:	fb12 3300 	smlabb	r3, r2, r0, r3
 8009e9a:	f109 0203 	add.w	r2, r9, #3
 8009e9e:	4295      	cmp	r5, r2
 8009ea0:	dd09      	ble.n	8009eb6 <st_sssa8_fully_connected+0x28e>
 8009ea2:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
 8009ea6:	f99b 0003 	ldrsb.w	r0, [fp, #3]
 8009eaa:	fb12 3300 	smlabb	r3, r2, r0, r3
 8009eae:	f994 0003 	ldrsb.w	r0, [r4, #3]
 8009eb2:	fb12 1100 	smlabb	r1, r2, r0, r1
 8009eb6:	9a03      	ldr	r2, [sp, #12]
 8009eb8:	eba2 0909 	sub.w	r9, r2, r9
 8009ebc:	444c      	add	r4, r9
 8009ebe:	9a04      	ldr	r2, [sp, #16]
 8009ec0:	2a15      	cmp	r2, #21
 8009ec2:	f340 8140 	ble.w	800a146 <st_sssa8_fully_connected+0x51e>
 8009ec6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8009ec8:	9a07      	ldr	r2, [sp, #28]
 8009eca:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8009ecc:	fb51 0102 	smmla	r1, r1, r2, r0
 8009ed0:	fb53 0302 	smmla	r3, r3, r2, r0
 8009ed4:	4129      	asrs	r1, r5
 8009ed6:	9a08      	ldr	r2, [sp, #32]
 8009ed8:	4411      	add	r1, r2
 8009eda:	f301 0107 	ssat	r1, #8, r1
 8009ede:	9806      	ldr	r0, [sp, #24]
 8009ee0:	412b      	asrs	r3, r5
 8009ee2:	f800 1c02 	strb.w	r1, [r0, #-2]
 8009ee6:	4413      	add	r3, r2
 8009ee8:	f303 0307 	ssat	r3, #8, r3
 8009eec:	f800 3c01 	strb.w	r3, [r0, #-1]
 8009ef0:	9a03      	ldr	r2, [sp, #12]
 8009ef2:	9b05      	ldr	r3, [sp, #20]
 8009ef4:	18a5      	adds	r5, r4, r2
 8009ef6:	9a06      	ldr	r2, [sp, #24]
 8009ef8:	3308      	adds	r3, #8
 8009efa:	3202      	adds	r2, #2
 8009efc:	9305      	str	r3, [sp, #20]
 8009efe:	9206      	str	r2, [sp, #24]
 8009f00:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f02:	4293      	cmp	r3, r2
 8009f04:	f47f aee8 	bne.w	8009cd8 <st_sssa8_fully_connected+0xb0>
 8009f08:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8009f0a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009f0c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8009f10:	9225      	str	r2, [sp, #148]	@ 0x94
 8009f12:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009f14:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009f18:	9324      	str	r3, [sp, #144]	@ 0x90
 8009f1a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009f1c:	07db      	lsls	r3, r3, #31
 8009f1e:	d54a      	bpl.n	8009fb6 <st_sssa8_fully_connected+0x38e>
 8009f20:	9a03      	ldr	r2, [sp, #12]
 8009f22:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009f24:	0897      	lsrs	r7, r2, #2
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f000 8175 	beq.w	800a216 <st_sssa8_fully_connected+0x5ee>
 8009f2c:	eb05 0687 	add.w	r6, r5, r7, lsl #2
 8009f30:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8009f32:	f855 2b04 	ldr.w	r2, [r5], #4
 8009f36:	6801      	ldr	r1, [r0, #0]
 8009f38:	fa2f f482 	sxtb16	r4, r2
 8009f3c:	ea4f 2232 	mov.w	r2, r2, ror #8
 8009f40:	fa2f f282 	sxtb16	r2, r2
 8009f44:	fb21 3304 	smlad	r3, r1, r4, r3
 8009f48:	6841      	ldr	r1, [r0, #4]
 8009f4a:	3008      	adds	r0, #8
 8009f4c:	fb21 3302 	smlad	r3, r1, r2, r3
 8009f50:	42b5      	cmp	r5, r6
 8009f52:	d1ee      	bne.n	8009f32 <st_sssa8_fully_connected+0x30a>
 8009f54:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8009f56:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
 8009f5a:	9226      	str	r2, [sp, #152]	@ 0x98
 8009f5c:	9a03      	ldr	r2, [sp, #12]
 8009f5e:	f012 0203 	ands.w	r2, r2, #3
 8009f62:	d016      	beq.n	8009f92 <st_sssa8_fully_connected+0x36a>
 8009f64:	3a01      	subs	r2, #1
 8009f66:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8009f68:	f996 1000 	ldrsb.w	r1, [r6]
 8009f6c:	8800      	ldrh	r0, [r0, #0]
 8009f6e:	b292      	uxth	r2, r2
 8009f70:	fb10 3301 	smlabb	r3, r0, r1, r3
 8009f74:	b16a      	cbz	r2, 8009f92 <st_sssa8_fully_connected+0x36a>
 8009f76:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8009f78:	2a01      	cmp	r2, #1
 8009f7a:	f996 1001 	ldrsb.w	r1, [r6, #1]
 8009f7e:	8840      	ldrh	r0, [r0, #2]
 8009f80:	fb10 3301 	smlabb	r3, r0, r1, r3
 8009f84:	d005      	beq.n	8009f92 <st_sssa8_fully_connected+0x36a>
 8009f86:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8009f88:	f996 2002 	ldrsb.w	r2, [r6, #2]
 8009f8c:	8889      	ldrh	r1, [r1, #4]
 8009f8e:	fb11 3302 	smlabb	r3, r1, r2, r3
 8009f92:	9a04      	ldr	r2, [sp, #16]
 8009f94:	2a15      	cmp	r2, #21
 8009f96:	f340 811c 	ble.w	800a1d2 <st_sssa8_fully_connected+0x5aa>
 8009f9a:	1e91      	subs	r1, r2, #2
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	408a      	lsls	r2, r1
 8009fa0:	9907      	ldr	r1, [sp, #28]
 8009fa2:	fb53 2301 	smmla	r3, r3, r1, r2
 8009fa6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009fa8:	4113      	asrs	r3, r2
 8009faa:	9a08      	ldr	r2, [sp, #32]
 8009fac:	4413      	add	r3, r2
 8009fae:	f303 0307 	ssat	r3, #8, r3
 8009fb2:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8009fb4:	7013      	strb	r3, [r2, #0]
 8009fb6:	2000      	movs	r0, #0
 8009fb8:	b017      	add	sp, #92	@ 0x5c
 8009fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fbe:	9308      	str	r3, [sp, #32]
 8009fc0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	f47f ae52 	bne.w	8009c6c <st_sssa8_fully_connected+0x44>
 8009fc8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009fca:	4270      	negs	r0, r6
 8009fcc:	eac0 4000 	pkhbt	r0, r0, r0, lsl #16
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d0f0      	beq.n	8009fb6 <st_sssa8_fully_connected+0x38e>
 8009fd4:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8009fd6:	3301      	adds	r3, #1
 8009fd8:	9903      	ldr	r1, [sp, #12]
 8009fda:	b236      	sxth	r6, r6
 8009fdc:	18d3      	adds	r3, r2, r3
 8009fde:	9c04      	ldr	r4, [sp, #16]
 8009fe0:	f1a1 0810 	sub.w	r8, r1, #16
 8009fe4:	f102 0e01 	add.w	lr, r2, #1
 8009fe8:	9305      	str	r3, [sp, #20]
 8009fea:	2201      	movs	r2, #1
 8009fec:	f028 080f 	bic.w	r8, r8, #15
 8009ff0:	1ea3      	subs	r3, r4, #2
 8009ff2:	468c      	mov	ip, r1
 8009ff4:	f8dd 9090 	ldr.w	r9, [sp, #144]	@ 0x90
 8009ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8009ffc:	f108 0810 	add.w	r8, r8, #16
 800a000:	f1bc 0f0f 	cmp.w	ip, #15
 800a004:	f8cd b00c 	str.w	fp, [sp, #12]
 800a008:	9309      	str	r3, [sp, #36]	@ 0x24
 800a00a:	eb0b 0308 	add.w	r3, fp, r8
 800a00e:	9306      	str	r3, [sp, #24]
 800a010:	eba2 0304 	sub.w	r3, r2, r4
 800a014:	930a      	str	r3, [sp, #40]	@ 0x28
 800a016:	f859 3b04 	ldr.w	r3, [r9], #4
 800a01a:	dd7e      	ble.n	800a11a <st_sssa8_fully_connected+0x4f2>
 800a01c:	eb05 0708 	add.w	r7, r5, r8
 800a020:	462a      	mov	r2, r5
 800a022:	9d03      	ldr	r5, [sp, #12]
 800a024:	6811      	ldr	r1, [r2, #0]
 800a026:	682c      	ldr	r4, [r5, #0]
 800a028:	fa2f fb81 	sxtb16	fp, r1
 800a02c:	ea4f 2a34 	mov.w	sl, r4, ror #8
 800a030:	ea4f 2131 	mov.w	r1, r1, ror #8
 800a034:	fa20 fa8a 	sxtab16	sl, r0, sl
 800a038:	fa2f f181 	sxtb16	r1, r1
 800a03c:	fa20 f484 	sxtab16	r4, r0, r4
 800a040:	fb24 340b 	smlad	r4, r4, fp, r3
 800a044:	fb2a 4b01 	smlad	fp, sl, r1, r4
 800a048:	6851      	ldr	r1, [r2, #4]
 800a04a:	f8d5 a004 	ldr.w	sl, [r5, #4]
 800a04e:	fa2f f481 	sxtb16	r4, r1
 800a052:	ea4f 233a 	mov.w	r3, sl, ror #8
 800a056:	ea4f 2131 	mov.w	r1, r1, ror #8
 800a05a:	fa20 f383 	sxtab16	r3, r0, r3
 800a05e:	fa2f f181 	sxtb16	r1, r1
 800a062:	fa20 fa8a 	sxtab16	sl, r0, sl
 800a066:	fb2a ba04 	smlad	sl, sl, r4, fp
 800a06a:	fb23 a401 	smlad	r4, r3, r1, sl
 800a06e:	6891      	ldr	r1, [r2, #8]
 800a070:	68ab      	ldr	r3, [r5, #8]
 800a072:	fa2f fb81 	sxtb16	fp, r1
 800a076:	ea4f 2a33 	mov.w	sl, r3, ror #8
 800a07a:	ea4f 2131 	mov.w	r1, r1, ror #8
 800a07e:	fa20 fa8a 	sxtab16	sl, r0, sl
 800a082:	fa2f f181 	sxtb16	r1, r1
 800a086:	fa20 f383 	sxtab16	r3, r0, r3
 800a08a:	fb23 430b 	smlad	r3, r3, fp, r4
 800a08e:	fb2a 3301 	smlad	r3, sl, r1, r3
 800a092:	f8d2 a00c 	ldr.w	sl, [r2, #12]
 800a096:	3510      	adds	r5, #16
 800a098:	f855 1c04 	ldr.w	r1, [r5, #-4]
 800a09c:	3210      	adds	r2, #16
 800a09e:	ea4f 2b3a 	mov.w	fp, sl, ror #8
 800a0a2:	ea4f 2431 	mov.w	r4, r1, ror #8
 800a0a6:	fa2f fa8a 	sxtb16	sl, sl
 800a0aa:	fa2f fb8b 	sxtb16	fp, fp
 800a0ae:	fa20 f181 	sxtab16	r1, r0, r1
 800a0b2:	fa20 f484 	sxtab16	r4, r0, r4
 800a0b6:	fb21 330a 	smlad	r3, r1, sl, r3
 800a0ba:	fb24 330b 	smlad	r3, r4, fp, r3
 800a0be:	4297      	cmp	r7, r2
 800a0c0:	d1b0      	bne.n	800a024 <st_sssa8_fully_connected+0x3fc>
 800a0c2:	4645      	mov	r5, r8
 800a0c4:	9f06      	ldr	r7, [sp, #24]
 800a0c6:	45ac      	cmp	ip, r5
 800a0c8:	dd2c      	ble.n	800a124 <st_sssa8_fully_connected+0x4fc>
 800a0ca:	ebac 0505 	sub.w	r5, ip, r5
 800a0ce:	4415      	add	r5, r2
 800a0d0:	4611      	mov	r1, r2
 800a0d2:	f917 4b01 	ldrsb.w	r4, [r7], #1
 800a0d6:	3201      	adds	r2, #1
 800a0d8:	7809      	ldrb	r1, [r1, #0]
 800a0da:	1ba4      	subs	r4, r4, r6
 800a0dc:	42aa      	cmp	r2, r5
 800a0de:	b249      	sxtb	r1, r1
 800a0e0:	fb14 3301 	smlabb	r3, r4, r1, r3
 800a0e4:	d1f4      	bne.n	800a0d0 <st_sssa8_fully_connected+0x4a8>
 800a0e6:	9a04      	ldr	r2, [sp, #16]
 800a0e8:	2a15      	cmp	r2, #21
 800a0ea:	dd1f      	ble.n	800a12c <st_sssa8_fully_connected+0x504>
 800a0ec:	9a07      	ldr	r2, [sp, #28]
 800a0ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a0f0:	fb53 1302 	smmla	r3, r3, r2, r1
 800a0f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a0f6:	4113      	asrs	r3, r2
 800a0f8:	9a08      	ldr	r2, [sp, #32]
 800a0fa:	4413      	add	r3, r2
 800a0fc:	f303 0307 	ssat	r3, #8, r3
 800a100:	f80e 3c01 	strb.w	r3, [lr, #-1]
 800a104:	f10e 0e01 	add.w	lr, lr, #1
 800a108:	9b05      	ldr	r3, [sp, #20]
 800a10a:	459e      	cmp	lr, r3
 800a10c:	f43f af53 	beq.w	8009fb6 <st_sssa8_fully_connected+0x38e>
 800a110:	f1bc 0f0f 	cmp.w	ip, #15
 800a114:	f859 3b04 	ldr.w	r3, [r9], #4
 800a118:	dc80      	bgt.n	800a01c <st_sssa8_fully_connected+0x3f4>
 800a11a:	462a      	mov	r2, r5
 800a11c:	2500      	movs	r5, #0
 800a11e:	9f03      	ldr	r7, [sp, #12]
 800a120:	45ac      	cmp	ip, r5
 800a122:	dcd2      	bgt.n	800a0ca <st_sssa8_fully_connected+0x4a2>
 800a124:	4615      	mov	r5, r2
 800a126:	9a04      	ldr	r2, [sp, #16]
 800a128:	2a15      	cmp	r2, #21
 800a12a:	dcdf      	bgt.n	800a0ec <st_sssa8_fully_connected+0x4c4>
 800a12c:	2a00      	cmp	r2, #0
 800a12e:	dd42      	ble.n	800a1b6 <st_sssa8_fully_connected+0x58e>
 800a130:	005b      	lsls	r3, r3, #1
 800a132:	e9dd 1407 	ldrd	r1, r4, [sp, #28]
 800a136:	fb53 4301 	smmla	r3, r3, r1, r4
 800a13a:	4113      	asrs	r3, r2
 800a13c:	f303 0307 	ssat	r3, #8, r3
 800a140:	f80e 3c01 	strb.w	r3, [lr, #-1]
 800a144:	e7de      	b.n	800a104 <st_sssa8_fully_connected+0x4dc>
 800a146:	2a00      	cmp	r2, #0
 800a148:	dd13      	ble.n	800a172 <st_sssa8_fully_connected+0x54a>
 800a14a:	0049      	lsls	r1, r1, #1
 800a14c:	005b      	lsls	r3, r3, #1
 800a14e:	e9dd 0507 	ldrd	r0, r5, [sp, #28]
 800a152:	fb51 5100 	smmla	r1, r1, r0, r5
 800a156:	fb53 5300 	smmla	r3, r3, r0, r5
 800a15a:	4111      	asrs	r1, r2
 800a15c:	f301 0107 	ssat	r1, #8, r1
 800a160:	9806      	ldr	r0, [sp, #24]
 800a162:	4113      	asrs	r3, r2
 800a164:	f800 1c02 	strb.w	r1, [r0, #-2]
 800a168:	f303 0307 	ssat	r3, #8, r3
 800a16c:	f800 3c01 	strb.w	r3, [r0, #-1]
 800a170:	e6be      	b.n	8009ef0 <st_sssa8_fully_connected+0x2c8>
 800a172:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800a174:	fa01 f200 	lsl.w	r2, r1, r0
 800a178:	f302 021f 	ssat	r2, #32, r2
 800a17c:	9907      	ldr	r1, [sp, #28]
 800a17e:	fb52 f211 	smmulr	r2, r2, r1
 800a182:	4083      	lsls	r3, r0
 800a184:	f303 031f 	ssat	r3, #32, r3
 800a188:	fb53 f311 	smmulr	r3, r3, r1
 800a18c:	9908      	ldr	r1, [sp, #32]
 800a18e:	440a      	add	r2, r1
 800a190:	f302 0207 	ssat	r2, #8, r2
 800a194:	9806      	ldr	r0, [sp, #24]
 800a196:	440b      	add	r3, r1
 800a198:	f800 2c02 	strb.w	r2, [r0, #-2]
 800a19c:	f303 0307 	ssat	r3, #8, r3
 800a1a0:	f800 3c01 	strb.w	r3, [r0, #-1]
 800a1a4:	e6a4      	b.n	8009ef0 <st_sssa8_fully_connected+0x2c8>
 800a1a6:	4634      	mov	r4, r6
 800a1a8:	e64e      	b.n	8009e48 <st_sssa8_fully_connected+0x220>
 800a1aa:	462e      	mov	r6, r5
 800a1ac:	f8dd a098 	ldr.w	sl, [sp, #152]	@ 0x98
 800a1b0:	f04f 0900 	mov.w	r9, #0
 800a1b4:	e610      	b.n	8009dd8 <st_sssa8_fully_connected+0x1b0>
 800a1b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a1b8:	4093      	lsls	r3, r2
 800a1ba:	f303 031f 	ssat	r3, #32, r3
 800a1be:	9a07      	ldr	r2, [sp, #28]
 800a1c0:	fb53 f312 	smmulr	r3, r3, r2
 800a1c4:	9a08      	ldr	r2, [sp, #32]
 800a1c6:	4413      	add	r3, r2
 800a1c8:	f303 0307 	ssat	r3, #8, r3
 800a1cc:	f80e 3c01 	strb.w	r3, [lr, #-1]
 800a1d0:	e798      	b.n	800a104 <st_sssa8_fully_connected+0x4dc>
 800a1d2:	2a00      	cmp	r2, #0
 800a1d4:	dd0d      	ble.n	800a1f2 <st_sssa8_fully_connected+0x5ca>
 800a1d6:	005b      	lsls	r3, r3, #1
 800a1d8:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
 800a1dc:	fb53 0301 	smmla	r3, r3, r1, r0
 800a1e0:	4113      	asrs	r3, r2
 800a1e2:	f303 0307 	ssat	r3, #8, r3
 800a1e6:	2000      	movs	r0, #0
 800a1e8:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 800a1ea:	7013      	strb	r3, [r2, #0]
 800a1ec:	b017      	add	sp, #92	@ 0x5c
 800a1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1f2:	f1c2 0201 	rsb	r2, r2, #1
 800a1f6:	4093      	lsls	r3, r2
 800a1f8:	f303 031f 	ssat	r3, #32, r3
 800a1fc:	9a07      	ldr	r2, [sp, #28]
 800a1fe:	fb53 f312 	smmulr	r3, r3, r2
 800a202:	9a08      	ldr	r2, [sp, #32]
 800a204:	441a      	add	r2, r3
 800a206:	f302 0307 	ssat	r3, #8, r2
 800a20a:	2000      	movs	r0, #0
 800a20c:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 800a20e:	7013      	strb	r3, [r2, #0]
 800a210:	b017      	add	sp, #92	@ 0x5c
 800a212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a216:	462e      	mov	r6, r5
 800a218:	e6a0      	b.n	8009f5c <st_sssa8_fully_connected+0x334>
 800a21a:	bf00      	nop

0800a21c <st_int8_copy>:
 800a21c:	4288      	cmp	r0, r1
 800a21e:	d010      	beq.n	800a242 <st_int8_copy+0x26>
 800a220:	b17a      	cbz	r2, 800a242 <st_int8_copy+0x26>
 800a222:	4288      	cmp	r0, r1
 800a224:	eb00 0302 	add.w	r3, r0, r2
 800a228:	d20c      	bcs.n	800a244 <st_int8_copy+0x28>
 800a22a:	428b      	cmp	r3, r1
 800a22c:	d90a      	bls.n	800a244 <st_int8_copy+0x28>
 800a22e:	4283      	cmp	r3, r0
 800a230:	440a      	add	r2, r1
 800a232:	d906      	bls.n	800a242 <st_int8_copy+0x26>
 800a234:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 800a238:	4283      	cmp	r3, r0
 800a23a:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800a23e:	d1f9      	bne.n	800a234 <st_int8_copy+0x18>
 800a240:	4770      	bx	lr
 800a242:	4770      	bx	lr
 800a244:	078b      	lsls	r3, r1, #30
 800a246:	d102      	bne.n	800a24e <st_int8_copy+0x32>
 800a248:	e008      	b.n	800a25c <st_int8_copy+0x40>
 800a24a:	2a00      	cmp	r2, #0
 800a24c:	d04d      	beq.n	800a2ea <st_int8_copy+0xce>
 800a24e:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800a252:	3a01      	subs	r2, #1
 800a254:	f801 3b01 	strb.w	r3, [r1], #1
 800a258:	078b      	lsls	r3, r1, #30
 800a25a:	d1f6      	bne.n	800a24a <st_int8_copy+0x2e>
 800a25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a260:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 800a264:	d05e      	beq.n	800a324 <st_int8_copy+0x108>
 800a266:	ea40 0301 	orr.w	r3, r0, r1
 800a26a:	075b      	lsls	r3, r3, #29
 800a26c:	d13e      	bne.n	800a2ec <st_int8_copy+0xd0>
 800a26e:	f10e 33ff 	add.w	r3, lr, #4294967295
 800a272:	2b01      	cmp	r3, #1
 800a274:	d93a      	bls.n	800a2ec <st_int8_copy+0xd0>
 800a276:	f100 0310 	add.w	r3, r0, #16
 800a27a:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800a27e:	f101 0c10 	add.w	ip, r1, #16
 800a282:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 800a286:	3310      	adds	r3, #16
 800a288:	f10c 0c10 	add.w	ip, ip, #16
 800a28c:	ed13 6b08 	vldr	d6, [r3, #-32]	@ 0xffffffe0
 800a290:	ed13 7b06 	vldr	d7, [r3, #-24]	@ 0xffffffe8
 800a294:	4573      	cmp	r3, lr
 800a296:	ed0c 6b08 	vstr	d6, [ip, #-32]	@ 0xffffffe0
 800a29a:	ed0c 7b06 	vstr	d7, [ip, #-24]	@ 0xffffffe8
 800a29e:	d1f2      	bne.n	800a286 <st_int8_copy+0x6a>
 800a2a0:	f3c2 0381 	ubfx	r3, r2, #2, #2
 800a2a4:	4421      	add	r1, r4
 800a2a6:	4420      	add	r0, r4
 800a2a8:	f002 0203 	and.w	r2, r2, #3
 800a2ac:	b16b      	cbz	r3, 800a2ca <st_int8_copy+0xae>
 800a2ae:	6804      	ldr	r4, [r0, #0]
 800a2b0:	600c      	str	r4, [r1, #0]
 800a2b2:	1e5c      	subs	r4, r3, #1
 800a2b4:	d005      	beq.n	800a2c2 <st_int8_copy+0xa6>
 800a2b6:	6845      	ldr	r5, [r0, #4]
 800a2b8:	2c01      	cmp	r4, #1
 800a2ba:	604d      	str	r5, [r1, #4]
 800a2bc:	d001      	beq.n	800a2c2 <st_int8_copy+0xa6>
 800a2be:	6884      	ldr	r4, [r0, #8]
 800a2c0:	608c      	str	r4, [r1, #8]
 800a2c2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800a2c6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800a2ca:	b162      	cbz	r2, 800a2e6 <st_int8_copy+0xca>
 800a2cc:	f990 3000 	ldrsb.w	r3, [r0]
 800a2d0:	3a01      	subs	r2, #1
 800a2d2:	700b      	strb	r3, [r1, #0]
 800a2d4:	d007      	beq.n	800a2e6 <st_int8_copy+0xca>
 800a2d6:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800a2da:	2a01      	cmp	r2, #1
 800a2dc:	704b      	strb	r3, [r1, #1]
 800a2de:	d002      	beq.n	800a2e6 <st_int8_copy+0xca>
 800a2e0:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800a2e4:	708b      	strb	r3, [r1, #2]
 800a2e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2ea:	4770      	bx	lr
 800a2ec:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800a2f0:	460b      	mov	r3, r1
 800a2f2:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 800a2f6:	4684      	mov	ip, r0
 800a2f8:	f8dc 8000 	ldr.w	r8, [ip]
 800a2fc:	3310      	adds	r3, #16
 800a2fe:	f8dc 7004 	ldr.w	r7, [ip, #4]
 800a302:	f10c 0c10 	add.w	ip, ip, #16
 800a306:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 800a30a:	f85c 5c04 	ldr.w	r5, [ip, #-4]
 800a30e:	f843 8c10 	str.w	r8, [r3, #-16]
 800a312:	f843 7c0c 	str.w	r7, [r3, #-12]
 800a316:	f843 6c08 	str.w	r6, [r3, #-8]
 800a31a:	f843 5c04 	str.w	r5, [r3, #-4]
 800a31e:	459e      	cmp	lr, r3
 800a320:	d1ea      	bne.n	800a2f8 <st_int8_copy+0xdc>
 800a322:	e7bd      	b.n	800a2a0 <st_int8_copy+0x84>
 800a324:	0893      	lsrs	r3, r2, #2
 800a326:	f002 0203 	and.w	r2, r2, #3
 800a32a:	e7bf      	b.n	800a2ac <st_int8_copy+0x90>

0800a32c <st_int8_reordered_no_shift_zero>:
 800a32c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a32e:	0897      	lsrs	r7, r2, #2
 800a330:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 800a334:	d02f      	beq.n	800a396 <st_int8_reordered_no_shift_zero+0x6a>
 800a336:	eb00 0587 	add.w	r5, r0, r7, lsl #2
 800a33a:	460c      	mov	r4, r1
 800a33c:	f850 cb04 	ldr.w	ip, [r0], #4
 800a340:	ea4f 2e3c 	mov.w	lr, ip, ror #8
 800a344:	fa2f fe8e 	sxtb16	lr, lr
 800a348:	fade fe03 	ssub16	lr, lr, r3
 800a34c:	fa2f fc8c 	sxtb16	ip, ip
 800a350:	fadc fc03 	ssub16	ip, ip, r3
 800a354:	42a8      	cmp	r0, r5
 800a356:	f8c4 c000 	str.w	ip, [r4]
 800a35a:	f8c4 e004 	str.w	lr, [r4, #4]
 800a35e:	f104 0408 	add.w	r4, r4, #8
 800a362:	d1eb      	bne.n	800a33c <st_int8_reordered_no_shift_zero+0x10>
 800a364:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800a368:	f012 0203 	ands.w	r2, r2, #3
 800a36c:	d012      	beq.n	800a394 <st_int8_reordered_no_shift_zero+0x68>
 800a36e:	f995 0000 	ldrsb.w	r0, [r5]
 800a372:	b273      	sxtb	r3, r6
 800a374:	3a01      	subs	r2, #1
 800a376:	eba0 0003 	sub.w	r0, r0, r3
 800a37a:	8008      	strh	r0, [r1, #0]
 800a37c:	d00a      	beq.n	800a394 <st_int8_reordered_no_shift_zero+0x68>
 800a37e:	f995 0001 	ldrsb.w	r0, [r5, #1]
 800a382:	2a01      	cmp	r2, #1
 800a384:	eba0 0003 	sub.w	r0, r0, r3
 800a388:	8048      	strh	r0, [r1, #2]
 800a38a:	d003      	beq.n	800a394 <st_int8_reordered_no_shift_zero+0x68>
 800a38c:	f995 2002 	ldrsb.w	r2, [r5, #2]
 800a390:	1ad3      	subs	r3, r2, r3
 800a392:	808b      	strh	r3, [r1, #4]
 800a394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a396:	4605      	mov	r5, r0
 800a398:	e7e6      	b.n	800a368 <st_int8_reordered_no_shift_zero+0x3c>
 800a39a:	bf00      	nop

0800a39c <st_int8_to16_no_shift>:
 800a39c:	b570      	push	{r4, r5, r6, lr}
 800a39e:	f1b2 0410 	subs.w	r4, r2, #16
 800a3a2:	f04f 0e00 	mov.w	lr, #0
 800a3a6:	d438      	bmi.n	800a41a <st_int8_to16_no_shift+0x7e>
 800a3a8:	f8d0 c000 	ldr.w	ip, [r0]
 800a3ac:	6843      	ldr	r3, [r0, #4]
 800a3ae:	fa2f f59c 	sxtb16	r5, ip, ror #8
 800a3b2:	fa2f fc8c 	sxtb16	ip, ip
 800a3b6:	eac5 462c 	pkhtb	r6, r5, ip, asr #16
 800a3ba:	eacc 4c05 	pkhbt	ip, ip, r5, lsl #16
 800a3be:	fa2f f593 	sxtb16	r5, r3, ror #8
 800a3c2:	3010      	adds	r0, #16
 800a3c4:	604e      	str	r6, [r1, #4]
 800a3c6:	f8c1 c000 	str.w	ip, [r1]
 800a3ca:	fa2f f383 	sxtb16	r3, r3
 800a3ce:	eac5 4623 	pkhtb	r6, r5, r3, asr #16
 800a3d2:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 800a3d6:	60ce      	str	r6, [r1, #12]
 800a3d8:	608b      	str	r3, [r1, #8]
 800a3da:	f850 cc08 	ldr.w	ip, [r0, #-8]
 800a3de:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800a3e2:	fa2f f59c 	sxtb16	r5, ip, ror #8
 800a3e6:	fa2f fc8c 	sxtb16	ip, ip
 800a3ea:	eac5 462c 	pkhtb	r6, r5, ip, asr #16
 800a3ee:	eacc 4c05 	pkhbt	ip, ip, r5, lsl #16
 800a3f2:	fa2f f593 	sxtb16	r5, r3, ror #8
 800a3f6:	f10e 0e10 	add.w	lr, lr, #16
 800a3fa:	f8c1 c010 	str.w	ip, [r1, #16]
 800a3fe:	614e      	str	r6, [r1, #20]
 800a400:	3120      	adds	r1, #32
 800a402:	45a6      	cmp	lr, r4
 800a404:	fa2f f383 	sxtb16	r3, r3
 800a408:	eac5 4c23 	pkhtb	ip, r5, r3, asr #16
 800a40c:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 800a410:	f841 cc04 	str.w	ip, [r1, #-4]
 800a414:	f841 3c08 	str.w	r3, [r1, #-8]
 800a418:	ddc6      	ble.n	800a3a8 <st_int8_to16_no_shift+0xc>
 800a41a:	1f16      	subs	r6, r2, #4
 800a41c:	4576      	cmp	r6, lr
 800a41e:	db12      	blt.n	800a446 <st_int8_to16_no_shift+0xaa>
 800a420:	f850 3b04 	ldr.w	r3, [r0], #4
 800a424:	fa2f f493 	sxtb16	r4, r3, ror #8
 800a428:	f10e 0e04 	add.w	lr, lr, #4
 800a42c:	3108      	adds	r1, #8
 800a42e:	fa2f f383 	sxtb16	r3, r3
 800a432:	45b6      	cmp	lr, r6
 800a434:	eac4 4523 	pkhtb	r5, r4, r3, asr #16
 800a438:	eac3 4304 	pkhbt	r3, r3, r4, lsl #16
 800a43c:	f841 5c04 	str.w	r5, [r1, #-4]
 800a440:	f841 3c08 	str.w	r3, [r1, #-8]
 800a444:	ddec      	ble.n	800a420 <st_int8_to16_no_shift+0x84>
 800a446:	4572      	cmp	r2, lr
 800a448:	dd08      	ble.n	800a45c <st_int8_to16_no_shift+0xc0>
 800a44a:	eba2 020e 	sub.w	r2, r2, lr
 800a44e:	4402      	add	r2, r0
 800a450:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800a454:	4290      	cmp	r0, r2
 800a456:	f821 3b02 	strh.w	r3, [r1], #2
 800a45a:	d1f9      	bne.n	800a450 <st_int8_to16_no_shift+0xb4>
 800a45c:	bd70      	pop	{r4, r5, r6, pc}
 800a45e:	bf00      	nop

0800a460 <st_int8_to16_no_shift_interleaved>:
 800a460:	b570      	push	{r4, r5, r6, lr}
 800a462:	f1b2 0510 	subs.w	r5, r2, #16
 800a466:	f04f 0e00 	mov.w	lr, #0
 800a46a:	d428      	bmi.n	800a4be <st_int8_to16_no_shift_interleaved+0x5e>
 800a46c:	f8d0 c000 	ldr.w	ip, [r0]
 800a470:	6843      	ldr	r3, [r0, #4]
 800a472:	fa2f f69c 	sxtb16	r6, ip, ror #8
 800a476:	fa2f fc8c 	sxtb16	ip, ip
 800a47a:	fa2f f493 	sxtb16	r4, r3, ror #8
 800a47e:	3010      	adds	r0, #16
 800a480:	600e      	str	r6, [r1, #0]
 800a482:	f8c1 c004 	str.w	ip, [r1, #4]
 800a486:	608c      	str	r4, [r1, #8]
 800a488:	fa2f f383 	sxtb16	r3, r3
 800a48c:	60cb      	str	r3, [r1, #12]
 800a48e:	f850 cc08 	ldr.w	ip, [r0, #-8]
 800a492:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800a496:	fa2f f69c 	sxtb16	r6, ip, ror #8
 800a49a:	fa2f fc8c 	sxtb16	ip, ip
 800a49e:	fa2f f493 	sxtb16	r4, r3, ror #8
 800a4a2:	f10e 0e10 	add.w	lr, lr, #16
 800a4a6:	610e      	str	r6, [r1, #16]
 800a4a8:	f8c1 c014 	str.w	ip, [r1, #20]
 800a4ac:	3120      	adds	r1, #32
 800a4ae:	45ae      	cmp	lr, r5
 800a4b0:	f841 4c08 	str.w	r4, [r1, #-8]
 800a4b4:	fa2f f383 	sxtb16	r3, r3
 800a4b8:	f841 3c04 	str.w	r3, [r1, #-4]
 800a4bc:	ddd6      	ble.n	800a46c <st_int8_to16_no_shift_interleaved+0xc>
 800a4be:	1f14      	subs	r4, r2, #4
 800a4c0:	4574      	cmp	r4, lr
 800a4c2:	db10      	blt.n	800a4e6 <st_int8_to16_no_shift_interleaved+0x86>
 800a4c4:	ebae 0e00 	sub.w	lr, lr, r0
 800a4c8:	f850 3b04 	ldr.w	r3, [r0], #4
 800a4cc:	fa2f fc93 	sxtb16	ip, r3, ror #8
 800a4d0:	eb00 020e 	add.w	r2, r0, lr
 800a4d4:	f8c1 c000 	str.w	ip, [r1]
 800a4d8:	3108      	adds	r1, #8
 800a4da:	4294      	cmp	r4, r2
 800a4dc:	fa2f f383 	sxtb16	r3, r3
 800a4e0:	f841 3c04 	str.w	r3, [r1, #-4]
 800a4e4:	daf0      	bge.n	800a4c8 <st_int8_to16_no_shift_interleaved+0x68>
 800a4e6:	bd70      	pop	{r4, r5, r6, pc}

0800a4e8 <st_int8_to16_dual>:
 800a4e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4ec:	4698      	mov	r8, r3
 800a4ee:	085b      	lsrs	r3, r3, #1
 800a4f0:	eb00 0c02 	add.w	ip, r0, r2
 800a4f4:	f000 80b9 	beq.w	800a66a <st_int8_to16_dual+0x182>
 800a4f8:	f1a2 0710 	sub.w	r7, r2, #16
 800a4fc:	1f16      	subs	r6, r2, #4
 800a4fe:	2f00      	cmp	r7, #0
 800a500:	f04f 0500 	mov.w	r5, #0
 800a504:	db73      	blt.n	800a5ee <st_int8_to16_dual+0x106>
 800a506:	f8d0 e000 	ldr.w	lr, [r0]
 800a50a:	f8dc 4000 	ldr.w	r4, [ip]
 800a50e:	fa2f f99e 	sxtb16	r9, lr, ror #8
 800a512:	fa2f fe8e 	sxtb16	lr, lr
 800a516:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 800a51a:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 800a51e:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a522:	f8c1 e000 	str.w	lr, [r1]
 800a526:	f8c1 a008 	str.w	sl, [r1, #8]
 800a52a:	fa2f f484 	sxtb16	r4, r4
 800a52e:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 800a532:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 800a536:	f8c1 e00c 	str.w	lr, [r1, #12]
 800a53a:	604c      	str	r4, [r1, #4]
 800a53c:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800a540:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800a544:	fa2f f99e 	sxtb16	r9, lr, ror #8
 800a548:	fa2f fe8e 	sxtb16	lr, lr
 800a54c:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 800a550:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 800a554:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a558:	f8c1 e010 	str.w	lr, [r1, #16]
 800a55c:	f8c1 a018 	str.w	sl, [r1, #24]
 800a560:	fa2f f484 	sxtb16	r4, r4
 800a564:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 800a568:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 800a56c:	f8c1 e01c 	str.w	lr, [r1, #28]
 800a570:	614c      	str	r4, [r1, #20]
 800a572:	f8d0 e008 	ldr.w	lr, [r0, #8]
 800a576:	f8dc 4008 	ldr.w	r4, [ip, #8]
 800a57a:	fa2f f99e 	sxtb16	r9, lr, ror #8
 800a57e:	fa2f fe8e 	sxtb16	lr, lr
 800a582:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 800a586:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 800a58a:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a58e:	3010      	adds	r0, #16
 800a590:	f10c 0c10 	add.w	ip, ip, #16
 800a594:	f8c1 e020 	str.w	lr, [r1, #32]
 800a598:	f8c1 a028 	str.w	sl, [r1, #40]	@ 0x28
 800a59c:	fa2f f484 	sxtb16	r4, r4
 800a5a0:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 800a5a4:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 800a5a8:	f8c1 e02c 	str.w	lr, [r1, #44]	@ 0x2c
 800a5ac:	624c      	str	r4, [r1, #36]	@ 0x24
 800a5ae:	f850 ec04 	ldr.w	lr, [r0, #-4]
 800a5b2:	f85c 4c04 	ldr.w	r4, [ip, #-4]
 800a5b6:	fa2f fa9e 	sxtb16	sl, lr, ror #8
 800a5ba:	fa2f fe8e 	sxtb16	lr, lr
 800a5be:	eaca 492e 	pkhtb	r9, sl, lr, asr #16
 800a5c2:	eace 4e0a 	pkhbt	lr, lr, sl, lsl #16
 800a5c6:	fa2f fa94 	sxtb16	sl, r4, ror #8
 800a5ca:	3510      	adds	r5, #16
 800a5cc:	f8c1 e030 	str.w	lr, [r1, #48]	@ 0x30
 800a5d0:	f8c1 9038 	str.w	r9, [r1, #56]	@ 0x38
 800a5d4:	3140      	adds	r1, #64	@ 0x40
 800a5d6:	42bd      	cmp	r5, r7
 800a5d8:	fa2f f484 	sxtb16	r4, r4
 800a5dc:	eaca 4e24 	pkhtb	lr, sl, r4, asr #16
 800a5e0:	eac4 440a 	pkhbt	r4, r4, sl, lsl #16
 800a5e4:	f841 ec04 	str.w	lr, [r1, #-4]
 800a5e8:	f841 4c0c 	str.w	r4, [r1, #-12]
 800a5ec:	dd8b      	ble.n	800a506 <st_int8_to16_dual+0x1e>
 800a5ee:	42ae      	cmp	r6, r5
 800a5f0:	db1e      	blt.n	800a630 <st_int8_to16_dual+0x148>
 800a5f2:	f850 4b04 	ldr.w	r4, [r0], #4
 800a5f6:	f85c eb04 	ldr.w	lr, [ip], #4
 800a5fa:	fa2f fa94 	sxtb16	sl, r4, ror #8
 800a5fe:	fa2f f484 	sxtb16	r4, r4
 800a602:	eaca 4924 	pkhtb	r9, sl, r4, asr #16
 800a606:	eac4 440a 	pkhbt	r4, r4, sl, lsl #16
 800a60a:	fa2f fa9e 	sxtb16	sl, lr, ror #8
 800a60e:	3504      	adds	r5, #4
 800a610:	600c      	str	r4, [r1, #0]
 800a612:	f8c1 9008 	str.w	r9, [r1, #8]
 800a616:	3110      	adds	r1, #16
 800a618:	42b5      	cmp	r5, r6
 800a61a:	fa2f fe8e 	sxtb16	lr, lr
 800a61e:	eaca 442e 	pkhtb	r4, sl, lr, asr #16
 800a622:	eace 4e0a 	pkhbt	lr, lr, sl, lsl #16
 800a626:	f841 4c04 	str.w	r4, [r1, #-4]
 800a62a:	f841 ec0c 	str.w	lr, [r1, #-12]
 800a62e:	dde0      	ble.n	800a5f2 <st_int8_to16_dual+0x10a>
 800a630:	42aa      	cmp	r2, r5
 800a632:	dd40      	ble.n	800a6b6 <st_int8_to16_dual+0x1ce>
 800a634:	1b55      	subs	r5, r2, r5
 800a636:	1d0c      	adds	r4, r1, #4
 800a638:	46e6      	mov	lr, ip
 800a63a:	eb00 0a05 	add.w	sl, r0, r5
 800a63e:	f910 9b01 	ldrsb.w	r9, [r0], #1
 800a642:	3404      	adds	r4, #4
 800a644:	f824 9c08 	strh.w	r9, [r4, #-8]
 800a648:	4550      	cmp	r0, sl
 800a64a:	f91e 9b01 	ldrsb.w	r9, [lr], #1
 800a64e:	f824 9c06 	strh.w	r9, [r4, #-6]
 800a652:	d1f4      	bne.n	800a63e <st_int8_to16_dual+0x156>
 800a654:	44ac      	add	ip, r5
 800a656:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800a65a:	3b01      	subs	r3, #1
 800a65c:	eb0a 0002 	add.w	r0, sl, r2
 800a660:	4494      	add	ip, r2
 800a662:	b29b      	uxth	r3, r3
 800a664:	2b00      	cmp	r3, #0
 800a666:	f47f af4a 	bne.w	800a4fe <st_int8_to16_dual+0x16>
 800a66a:	f018 0f01 	tst.w	r8, #1
 800a66e:	d020      	beq.n	800a6b2 <st_int8_to16_dual+0x1ca>
 800a670:	1f17      	subs	r7, r2, #4
 800a672:	f04f 0400 	mov.w	r4, #0
 800a676:	d411      	bmi.n	800a69c <st_int8_to16_dual+0x1b4>
 800a678:	f850 3b04 	ldr.w	r3, [r0], #4
 800a67c:	fa2f f593 	sxtb16	r5, r3, ror #8
 800a680:	3404      	adds	r4, #4
 800a682:	3108      	adds	r1, #8
 800a684:	fa2f f383 	sxtb16	r3, r3
 800a688:	42a7      	cmp	r7, r4
 800a68a:	eac5 4623 	pkhtb	r6, r5, r3, asr #16
 800a68e:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 800a692:	f841 6c04 	str.w	r6, [r1, #-4]
 800a696:	f841 3c08 	str.w	r3, [r1, #-8]
 800a69a:	daed      	bge.n	800a678 <st_int8_to16_dual+0x190>
 800a69c:	42a2      	cmp	r2, r4
 800a69e:	dd08      	ble.n	800a6b2 <st_int8_to16_dual+0x1ca>
 800a6a0:	1b13      	subs	r3, r2, r4
 800a6a2:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800a6a6:	f910 2b01 	ldrsb.w	r2, [r0], #1
 800a6aa:	f821 2b02 	strh.w	r2, [r1], #2
 800a6ae:	428b      	cmp	r3, r1
 800a6b0:	d1f9      	bne.n	800a6a6 <st_int8_to16_dual+0x1be>
 800a6b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6b6:	4682      	mov	sl, r0
 800a6b8:	e7cf      	b.n	800a65a <st_int8_to16_dual+0x172>
 800a6ba:	bf00      	nop

0800a6bc <st_int8_to16_dual_interleaved>:
 800a6bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6c0:	4698      	mov	r8, r3
 800a6c2:	085b      	lsrs	r3, r3, #1
 800a6c4:	eb00 0c02 	add.w	ip, r0, r2
 800a6c8:	f000 808f 	beq.w	800a7ea <st_int8_to16_dual_interleaved+0x12e>
 800a6cc:	f1a2 0710 	sub.w	r7, r2, #16
 800a6d0:	1f16      	subs	r6, r2, #4
 800a6d2:	2f00      	cmp	r7, #0
 800a6d4:	f04f 0e00 	mov.w	lr, #0
 800a6d8:	db4e      	blt.n	800a778 <st_int8_to16_dual_interleaved+0xbc>
 800a6da:	6805      	ldr	r5, [r0, #0]
 800a6dc:	f8dc 4000 	ldr.w	r4, [ip]
 800a6e0:	fa2f fa95 	sxtb16	sl, r5, ror #8
 800a6e4:	fa2f f585 	sxtb16	r5, r5
 800a6e8:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a6ec:	f8c1 a000 	str.w	sl, [r1]
 800a6f0:	f8c1 9004 	str.w	r9, [r1, #4]
 800a6f4:	608d      	str	r5, [r1, #8]
 800a6f6:	fa2f f484 	sxtb16	r4, r4
 800a6fa:	60cc      	str	r4, [r1, #12]
 800a6fc:	6845      	ldr	r5, [r0, #4]
 800a6fe:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800a702:	fa2f fa95 	sxtb16	sl, r5, ror #8
 800a706:	fa2f f585 	sxtb16	r5, r5
 800a70a:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a70e:	f8c1 a010 	str.w	sl, [r1, #16]
 800a712:	f8c1 9014 	str.w	r9, [r1, #20]
 800a716:	618d      	str	r5, [r1, #24]
 800a718:	fa2f f484 	sxtb16	r4, r4
 800a71c:	61cc      	str	r4, [r1, #28]
 800a71e:	6885      	ldr	r5, [r0, #8]
 800a720:	f8dc 4008 	ldr.w	r4, [ip, #8]
 800a724:	fa2f fa95 	sxtb16	sl, r5, ror #8
 800a728:	fa2f f585 	sxtb16	r5, r5
 800a72c:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a730:	3010      	adds	r0, #16
 800a732:	f10c 0c10 	add.w	ip, ip, #16
 800a736:	f8c1 a020 	str.w	sl, [r1, #32]
 800a73a:	f8c1 9024 	str.w	r9, [r1, #36]	@ 0x24
 800a73e:	628d      	str	r5, [r1, #40]	@ 0x28
 800a740:	fa2f f484 	sxtb16	r4, r4
 800a744:	62cc      	str	r4, [r1, #44]	@ 0x2c
 800a746:	f850 5c04 	ldr.w	r5, [r0, #-4]
 800a74a:	f85c 4c04 	ldr.w	r4, [ip, #-4]
 800a74e:	fa2f fa95 	sxtb16	sl, r5, ror #8
 800a752:	fa2f f585 	sxtb16	r5, r5
 800a756:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a75a:	f10e 0e10 	add.w	lr, lr, #16
 800a75e:	f8c1 a030 	str.w	sl, [r1, #48]	@ 0x30
 800a762:	f8c1 9034 	str.w	r9, [r1, #52]	@ 0x34
 800a766:	3140      	adds	r1, #64	@ 0x40
 800a768:	45be      	cmp	lr, r7
 800a76a:	f841 5c08 	str.w	r5, [r1, #-8]
 800a76e:	fa2f f484 	sxtb16	r4, r4
 800a772:	f841 4c04 	str.w	r4, [r1, #-4]
 800a776:	ddb0      	ble.n	800a6da <st_int8_to16_dual_interleaved+0x1e>
 800a778:	4576      	cmp	r6, lr
 800a77a:	db18      	blt.n	800a7ae <st_int8_to16_dual_interleaved+0xf2>
 800a77c:	f850 5b04 	ldr.w	r5, [r0], #4
 800a780:	f85c 4b04 	ldr.w	r4, [ip], #4
 800a784:	fa2f fa95 	sxtb16	sl, r5, ror #8
 800a788:	fa2f f585 	sxtb16	r5, r5
 800a78c:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a790:	f10e 0e04 	add.w	lr, lr, #4
 800a794:	f8c1 a000 	str.w	sl, [r1]
 800a798:	f8c1 9004 	str.w	r9, [r1, #4]
 800a79c:	3110      	adds	r1, #16
 800a79e:	45b6      	cmp	lr, r6
 800a7a0:	f841 5c08 	str.w	r5, [r1, #-8]
 800a7a4:	fa2f f484 	sxtb16	r4, r4
 800a7a8:	f841 4c04 	str.w	r4, [r1, #-4]
 800a7ac:	dde6      	ble.n	800a77c <st_int8_to16_dual_interleaved+0xc0>
 800a7ae:	4572      	cmp	r2, lr
 800a7b0:	dd3c      	ble.n	800a82c <st_int8_to16_dual_interleaved+0x170>
 800a7b2:	eba2 0e0e 	sub.w	lr, r2, lr
 800a7b6:	1d0c      	adds	r4, r1, #4
 800a7b8:	4665      	mov	r5, ip
 800a7ba:	eb00 0a0e 	add.w	sl, r0, lr
 800a7be:	f910 9b01 	ldrsb.w	r9, [r0], #1
 800a7c2:	3404      	adds	r4, #4
 800a7c4:	f824 9c08 	strh.w	r9, [r4, #-8]
 800a7c8:	4550      	cmp	r0, sl
 800a7ca:	f915 9b01 	ldrsb.w	r9, [r5], #1
 800a7ce:	f824 9c06 	strh.w	r9, [r4, #-6]
 800a7d2:	d1f4      	bne.n	800a7be <st_int8_to16_dual_interleaved+0x102>
 800a7d4:	44f4      	add	ip, lr
 800a7d6:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 800a7da:	3b01      	subs	r3, #1
 800a7dc:	eb0a 0002 	add.w	r0, sl, r2
 800a7e0:	4494      	add	ip, r2
 800a7e2:	b29b      	uxth	r3, r3
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	f47f af74 	bne.w	800a6d2 <st_int8_to16_dual_interleaved+0x16>
 800a7ea:	f018 0f01 	tst.w	r8, #1
 800a7ee:	d01b      	beq.n	800a828 <st_int8_to16_dual_interleaved+0x16c>
 800a7f0:	1f16      	subs	r6, r2, #4
 800a7f2:	f04f 0400 	mov.w	r4, #0
 800a7f6:	d40c      	bmi.n	800a812 <st_int8_to16_dual_interleaved+0x156>
 800a7f8:	f850 3b04 	ldr.w	r3, [r0], #4
 800a7fc:	fa2f f593 	sxtb16	r5, r3, ror #8
 800a800:	3404      	adds	r4, #4
 800a802:	600d      	str	r5, [r1, #0]
 800a804:	3108      	adds	r1, #8
 800a806:	42a6      	cmp	r6, r4
 800a808:	fa2f f383 	sxtb16	r3, r3
 800a80c:	f841 3c04 	str.w	r3, [r1, #-4]
 800a810:	daf2      	bge.n	800a7f8 <st_int8_to16_dual_interleaved+0x13c>
 800a812:	42a2      	cmp	r2, r4
 800a814:	dd08      	ble.n	800a828 <st_int8_to16_dual_interleaved+0x16c>
 800a816:	1b13      	subs	r3, r2, r4
 800a818:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800a81c:	f910 2b01 	ldrsb.w	r2, [r0], #1
 800a820:	f821 2b02 	strh.w	r2, [r1], #2
 800a824:	428b      	cmp	r3, r1
 800a826:	d1f9      	bne.n	800a81c <st_int8_to16_dual_interleaved+0x160>
 800a828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a82c:	4682      	mov	sl, r0
 800a82e:	e7d4      	b.n	800a7da <st_int8_to16_dual_interleaved+0x11e>

0800a830 <ai_padding_opt_init>:
 800a830:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a834:	2700      	movs	r7, #0
 800a836:	9c07      	ldr	r4, [sp, #28]
 800a838:	e9c0 7700 	strd	r7, r7, [r0]
 800a83c:	6087      	str	r7, [r0, #8]
 800a83e:	46b9      	mov	r9, r7
 800a840:	690d      	ldr	r5, [r1, #16]
 800a842:	f1c5 0c00 	rsb	ip, r5, #0
 800a846:	689d      	ldr	r5, [r3, #8]
 800a848:	42bd      	cmp	r5, r7
 800a84a:	dd1c      	ble.n	800a886 <ai_padding_opt_init+0x56>
 800a84c:	463e      	mov	r6, r7
 800a84e:	46be      	mov	lr, r7
 800a850:	e010      	b.n	800a874 <ai_padding_opt_init+0x44>
 800a852:	6895      	ldr	r5, [r2, #8]
 800a854:	eba5 080c 	sub.w	r8, r5, ip
 800a858:	68a5      	ldr	r5, [r4, #8]
 800a85a:	45a8      	cmp	r8, r5
 800a85c:	da10      	bge.n	800a880 <ai_padding_opt_init+0x50>
 800a85e:	f109 0901 	add.w	r9, r9, #1
 800a862:	f8c0 9008 	str.w	r9, [r0, #8]
 800a866:	688d      	ldr	r5, [r1, #8]
 800a868:	f10e 0e01 	add.w	lr, lr, #1
 800a86c:	44ac      	add	ip, r5
 800a86e:	689d      	ldr	r5, [r3, #8]
 800a870:	4575      	cmp	r5, lr
 800a872:	dd09      	ble.n	800a888 <ai_padding_opt_init+0x58>
 800a874:	f1bc 0f00 	cmp.w	ip, #0
 800a878:	daeb      	bge.n	800a852 <ai_padding_opt_init+0x22>
 800a87a:	3601      	adds	r6, #1
 800a87c:	6006      	str	r6, [r0, #0]
 800a87e:	e7f2      	b.n	800a866 <ai_padding_opt_init+0x36>
 800a880:	3701      	adds	r7, #1
 800a882:	6047      	str	r7, [r0, #4]
 800a884:	e7ef      	b.n	800a866 <ai_padding_opt_init+0x36>
 800a886:	463e      	mov	r6, r7
 800a888:	2500      	movs	r5, #0
 800a88a:	f8c0 9014 	str.w	r9, [r0, #20]
 800a88e:	e9c0 6703 	strd	r6, r7, [r0, #12]
 800a892:	e9c0 5506 	strd	r5, r5, [r0, #24]
 800a896:	6205      	str	r5, [r0, #32]
 800a898:	694e      	ldr	r6, [r1, #20]
 800a89a:	f1c6 0c00 	rsb	ip, r6, #0
 800a89e:	685e      	ldr	r6, [r3, #4]
 800a8a0:	42ae      	cmp	r6, r5
 800a8a2:	dd1c      	ble.n	800a8de <ai_padding_opt_init+0xae>
 800a8a4:	46ae      	mov	lr, r5
 800a8a6:	e00f      	b.n	800a8c8 <ai_padding_opt_init+0x98>
 800a8a8:	6855      	ldr	r5, [r2, #4]
 800a8aa:	6866      	ldr	r6, [r4, #4]
 800a8ac:	eba5 050c 	sub.w	r5, r5, ip
 800a8b0:	42b5      	cmp	r5, r6
 800a8b2:	da10      	bge.n	800a8d6 <ai_padding_opt_init+0xa6>
 800a8b4:	6a05      	ldr	r5, [r0, #32]
 800a8b6:	3501      	adds	r5, #1
 800a8b8:	6205      	str	r5, [r0, #32]
 800a8ba:	68cd      	ldr	r5, [r1, #12]
 800a8bc:	f10e 0e01 	add.w	lr, lr, #1
 800a8c0:	44ac      	add	ip, r5
 800a8c2:	685d      	ldr	r5, [r3, #4]
 800a8c4:	4575      	cmp	r5, lr
 800a8c6:	dd0a      	ble.n	800a8de <ai_padding_opt_init+0xae>
 800a8c8:	f1bc 0f00 	cmp.w	ip, #0
 800a8cc:	daec      	bge.n	800a8a8 <ai_padding_opt_init+0x78>
 800a8ce:	6985      	ldr	r5, [r0, #24]
 800a8d0:	3501      	adds	r5, #1
 800a8d2:	6185      	str	r5, [r0, #24]
 800a8d4:	e7f1      	b.n	800a8ba <ai_padding_opt_init+0x8a>
 800a8d6:	69c5      	ldr	r5, [r0, #28]
 800a8d8:	3501      	adds	r5, #1
 800a8da:	61c5      	str	r5, [r0, #28]
 800a8dc:	e7ed      	b.n	800a8ba <ai_padding_opt_init+0x8a>
 800a8de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8e2:	bf00      	nop

0800a8e4 <ai_padding_opt_phase1>:
 800a8e4:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 800a8e8:	b923      	cbnz	r3, 800a8f4 <ai_padding_opt_phase1+0x10>
 800a8ea:	b17a      	cbz	r2, 800a90c <ai_padding_opt_phase1+0x28>
 800a8ec:	3a01      	subs	r2, #1
 800a8ee:	8483      	strh	r3, [r0, #36]	@ 0x24
 800a8f0:	61c2      	str	r2, [r0, #28]
 800a8f2:	e004      	b.n	800a8fe <ai_padding_opt_phase1+0x1a>
 800a8f4:	b152      	cbz	r2, 800a90c <ai_padding_opt_phase1+0x28>
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	3b01      	subs	r3, #1
 800a8fa:	8482      	strh	r2, [r0, #36]	@ 0x24
 800a8fc:	6183      	str	r3, [r0, #24]
 800a8fe:	68c3      	ldr	r3, [r0, #12]
 800a900:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
 800a904:	6003      	str	r3, [r0, #0]
 800a906:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800a90a:	4770      	bx	lr
 800a90c:	6a03      	ldr	r3, [r0, #32]
 800a90e:	2201      	movs	r2, #1
 800a910:	3b01      	subs	r3, #1
 800a912:	8482      	strh	r2, [r0, #36]	@ 0x24
 800a914:	6203      	str	r3, [r0, #32]
 800a916:	e7f2      	b.n	800a8fe <ai_padding_opt_phase1+0x1a>

0800a918 <st_sssa8_ch_nn_mat_mult_kernel_opt>:
 800a918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a91c:	b09b      	sub	sp, #108	@ 0x6c
 800a91e:	4683      	mov	fp, r0
 800a920:	f89d 00ac 	ldrb.w	r0, [sp, #172]	@ 0xac
 800a924:	9317      	str	r3, [sp, #92]	@ 0x5c
 800a926:	2800      	cmp	r0, #0
 800a928:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a92a:	9825      	ldr	r0, [sp, #148]	@ 0x94
 800a92c:	bf18      	it	ne
 800a92e:	2301      	movne	r3, #1
 800a930:	f8bd 4098 	ldrh.w	r4, [sp, #152]	@ 0x98
 800a934:	910c      	str	r1, [sp, #48]	@ 0x30
 800a936:	fb00 3303 	mla	r3, r0, r3, r3
 800a93a:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 800a93c:	9414      	str	r4, [sp, #80]	@ 0x50
 800a93e:	0864      	lsrs	r4, r4, #1
 800a940:	4403      	add	r3, r0
 800a942:	f8bd 009c 	ldrh.w	r0, [sp, #156]	@ 0x9c
 800a946:	9205      	str	r2, [sp, #20]
 800a948:	9302      	str	r3, [sp, #8]
 800a94a:	9006      	str	r0, [sp, #24]
 800a94c:	9415      	str	r4, [sp, #84]	@ 0x54
 800a94e:	f000 81c6 	beq.w	800acde <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3c6>
 800a952:	460d      	mov	r5, r1
 800a954:	4601      	mov	r1, r0
 800a956:	f1a0 0310 	sub.w	r3, r0, #16
 800a95a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800a95e:	1ece      	subs	r6, r1, #3
 800a960:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 800a964:	091b      	lsrs	r3, r3, #4
 800a966:	920e      	str	r2, [sp, #56]	@ 0x38
 800a968:	960d      	str	r6, [sp, #52]	@ 0x34
 800a96a:	46d9      	mov	r9, fp
 800a96c:	9e28      	ldr	r6, [sp, #160]	@ 0xa0
 800a96e:	3301      	adds	r3, #1
 800a970:	900f      	str	r0, [sp, #60]	@ 0x3c
 800a972:	3604      	adds	r6, #4
 800a974:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 800a978:	9601      	str	r6, [sp, #4]
 800a97a:	9e29      	ldr	r6, [sp, #164]	@ 0xa4
 800a97c:	9207      	str	r2, [sp, #28]
 800a97e:	011a      	lsls	r2, r3, #4
 800a980:	3608      	adds	r6, #8
 800a982:	9212      	str	r2, [sp, #72]	@ 0x48
 800a984:	019a      	lsls	r2, r3, #6
 800a986:	9604      	str	r6, [sp, #16]
 800a988:	eb05 1343 	add.w	r3, r5, r3, lsl #5
 800a98c:	9e2a      	ldr	r6, [sp, #168]	@ 0xa8
 800a98e:	9311      	str	r3, [sp, #68]	@ 0x44
 800a990:	1f0b      	subs	r3, r1, #4
 800a992:	3608      	adds	r6, #8
 800a994:	9210      	str	r2, [sp, #64]	@ 0x40
 800a996:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a998:	9603      	str	r6, [sp, #12]
 800a99a:	00e6      	lsls	r6, r4, #3
 800a99c:	9616      	str	r6, [sp, #88]	@ 0x58
 800a99e:	9905      	ldr	r1, [sp, #20]
 800a9a0:	9c06      	ldr	r4, [sp, #24]
 800a9a2:	680b      	ldr	r3, [r1, #0]
 800a9a4:	3108      	adds	r1, #8
 800a9a6:	2c0f      	cmp	r4, #15
 800a9a8:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800a9aa:	9319      	str	r3, [sp, #100]	@ 0x64
 800a9ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a9ae:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a9b0:	f851 2c04 	ldr.w	r2, [r1, #-4]
 800a9b4:	9105      	str	r1, [sp, #20]
 800a9b6:	9219      	str	r2, [sp, #100]	@ 0x64
 800a9b8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a9ba:	9919      	ldr	r1, [sp, #100]	@ 0x64
 800a9bc:	f340 82c1 	ble.w	800af42 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x62a>
 800a9c0:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 800a9c2:	464c      	mov	r4, r9
 800a9c4:	9e07      	ldr	r6, [sp, #28]
 800a9c6:	f8d7 e000 	ldr.w	lr, [r7]
 800a9ca:	f8d5 a000 	ldr.w	sl, [r5]
 800a9ce:	f8d4 c000 	ldr.w	ip, [r4]
 800a9d2:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800a9d6:	fb2c 330e 	smlad	r3, ip, lr, r3
 800a9da:	fb2c 000a 	smlad	r0, ip, sl, r0
 800a9de:	fb28 2e0e 	smlad	lr, r8, lr, r2
 800a9e2:	fb28 110a 	smlad	r1, r8, sl, r1
 800a9e6:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800a9ea:	f8d5 8004 	ldr.w	r8, [r5, #4]
 800a9ee:	68a2      	ldr	r2, [r4, #8]
 800a9f0:	f8d4 b00c 	ldr.w	fp, [r4, #12]
 800a9f4:	fb22 330c 	smlad	r3, r2, ip, r3
 800a9f8:	fb22 0008 	smlad	r0, r2, r8, r0
 800a9fc:	fb2b ee0c 	smlad	lr, fp, ip, lr
 800aa00:	fb2b 1808 	smlad	r8, fp, r8, r1
 800aa04:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800aa08:	f8d5 b008 	ldr.w	fp, [r5, #8]
 800aa0c:	6922      	ldr	r2, [r4, #16]
 800aa0e:	f8d4 a014 	ldr.w	sl, [r4, #20]
 800aa12:	fb22 330c 	smlad	r3, r2, ip, r3
 800aa16:	fb22 000b 	smlad	r0, r2, fp, r0
 800aa1a:	fb2a ee0c 	smlad	lr, sl, ip, lr
 800aa1e:	fb2a 8b0b 	smlad	fp, sl, fp, r8
 800aa22:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800aa26:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800aa2a:	f8d4 8018 	ldr.w	r8, [r4, #24]
 800aa2e:	69e1      	ldr	r1, [r4, #28]
 800aa30:	fb28 330c 	smlad	r3, r8, ip, r3
 800aa34:	fb28 000a 	smlad	r0, r8, sl, r0
 800aa38:	fb21 ec0c 	smlad	ip, r1, ip, lr
 800aa3c:	fb21 ba0a 	smlad	sl, r1, sl, fp
 800aa40:	f8d7 e010 	ldr.w	lr, [r7, #16]
 800aa44:	6929      	ldr	r1, [r5, #16]
 800aa46:	f8d4 8020 	ldr.w	r8, [r4, #32]
 800aa4a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800aa4c:	fb28 330e 	smlad	r3, r8, lr, r3
 800aa50:	fb28 0001 	smlad	r0, r8, r1, r0
 800aa54:	fb22 cc0e 	smlad	ip, r2, lr, ip
 800aa58:	fb22 a101 	smlad	r1, r2, r1, sl
 800aa5c:	f8d7 e014 	ldr.w	lr, [r7, #20]
 800aa60:	f8d5 a014 	ldr.w	sl, [r5, #20]
 800aa64:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
 800aa68:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800aa6a:	fb28 330e 	smlad	r3, r8, lr, r3
 800aa6e:	fb28 000a 	smlad	r0, r8, sl, r0
 800aa72:	fb22 cc0e 	smlad	ip, r2, lr, ip
 800aa76:	fb22 120a 	smlad	r2, r2, sl, r1
 800aa7a:	f8d7 e018 	ldr.w	lr, [r7, #24]
 800aa7e:	f8d5 b018 	ldr.w	fp, [r5, #24]
 800aa82:	f8d4 8030 	ldr.w	r8, [r4, #48]	@ 0x30
 800aa86:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aa88:	fb28 330e 	smlad	r3, r8, lr, r3
 800aa8c:	fb28 080b 	smlad	r8, r8, fp, r0
 800aa90:	fb21 ce0e 	smlad	lr, r1, lr, ip
 800aa94:	fb21 210b 	smlad	r1, r1, fp, r2
 800aa98:	69fa      	ldr	r2, [r7, #28]
 800aa9a:	3520      	adds	r5, #32
 800aa9c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800aa9e:	3720      	adds	r7, #32
 800aaa0:	f8d4 c03c 	ldr.w	ip, [r4, #60]	@ 0x3c
 800aaa4:	3440      	adds	r4, #64	@ 0x40
 800aaa6:	f855 bc04 	ldr.w	fp, [r5, #-4]
 800aaaa:	fb20 3302 	smlad	r3, r0, r2, r3
 800aaae:	fb20 800b 	smlad	r0, r0, fp, r8
 800aab2:	fb2c e202 	smlad	r2, ip, r2, lr
 800aab6:	fb2c 110b 	smlad	r1, ip, fp, r1
 800aaba:	42b5      	cmp	r5, r6
 800aabc:	d183      	bne.n	800a9c6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0xae>
 800aabe:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800aac0:	f8dd b048 	ldr.w	fp, [sp, #72]	@ 0x48
 800aac4:	44a1      	add	r9, r4
 800aac6:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800aac8:	9d07      	ldr	r5, [sp, #28]
 800aaca:	9400      	str	r4, [sp, #0]
 800aacc:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 800aace:	45a3      	cmp	fp, r4
 800aad0:	f280 823f 	bge.w	800af52 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x63a>
 800aad4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800aad6:	f8dd c000 	ldr.w	ip, [sp]
 800aada:	eba4 040b 	sub.w	r4, r4, fp
 800aade:	08a4      	lsrs	r4, r4, #2
 800aae0:	4626      	mov	r6, r4
 800aae2:	940a      	str	r4, [sp, #40]	@ 0x28
 800aae4:	464c      	mov	r4, r9
 800aae6:	3601      	adds	r6, #1
 800aae8:	00f7      	lsls	r7, r6, #3
 800aaea:	9609      	str	r6, [sp, #36]	@ 0x24
 800aaec:	eb05 08c6 	add.w	r8, r5, r6, lsl #3
 800aaf0:	9708      	str	r7, [sp, #32]
 800aaf2:	f8dc e000 	ldr.w	lr, [ip]
 800aaf6:	682f      	ldr	r7, [r5, #0]
 800aaf8:	f8d4 a000 	ldr.w	sl, [r4]
 800aafc:	6866      	ldr	r6, [r4, #4]
 800aafe:	fb2a 330e 	smlad	r3, sl, lr, r3
 800ab02:	fb2a 0007 	smlad	r0, sl, r7, r0
 800ab06:	fb26 220e 	smlad	r2, r6, lr, r2
 800ab0a:	fb26 1107 	smlad	r1, r6, r7, r1
 800ab0e:	f8dc 7004 	ldr.w	r7, [ip, #4]
 800ab12:	3508      	adds	r5, #8
 800ab14:	68a6      	ldr	r6, [r4, #8]
 800ab16:	f10c 0c08 	add.w	ip, ip, #8
 800ab1a:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 800ab1e:	3410      	adds	r4, #16
 800ab20:	f855 ac04 	ldr.w	sl, [r5, #-4]
 800ab24:	fb26 3307 	smlad	r3, r6, r7, r3
 800ab28:	fb26 000a 	smlad	r0, r6, sl, r0
 800ab2c:	fb2e 2207 	smlad	r2, lr, r7, r2
 800ab30:	fb2e 110a 	smlad	r1, lr, sl, r1
 800ab34:	4545      	cmp	r5, r8
 800ab36:	d1dc      	bne.n	800aaf2 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1da>
 800ab38:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800ab3a:	f10b 0b04 	add.w	fp, fp, #4
 800ab3e:	9d08      	ldr	r5, [sp, #32]
 800ab40:	eb09 1904 	add.w	r9, r9, r4, lsl #4
 800ab44:	9c00      	ldr	r4, [sp, #0]
 800ab46:	442c      	add	r4, r5
 800ab48:	9400      	str	r4, [sp, #0]
 800ab4a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ab4c:	eb0b 0b84 	add.w	fp, fp, r4, lsl #2
 800ab50:	9f06      	ldr	r7, [sp, #24]
 800ab52:	455f      	cmp	r7, fp
 800ab54:	dd54      	ble.n	800ac00 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2e8>
 800ab56:	9c00      	ldr	r4, [sp, #0]
 800ab58:	f9b9 6000 	ldrsh.w	r6, [r9]
 800ab5c:	f9b4 4000 	ldrsh.w	r4, [r4]
 800ab60:	f9b9 5002 	ldrsh.w	r5, [r9, #2]
 800ab64:	fb04 3306 	mla	r3, r4, r6, r3
 800ab68:	fb05 2204 	mla	r2, r5, r4, r2
 800ab6c:	f9b8 4000 	ldrsh.w	r4, [r8]
 800ab70:	fb04 0006 	mla	r0, r4, r6, r0
 800ab74:	fb05 1104 	mla	r1, r5, r4, r1
 800ab78:	f10b 0401 	add.w	r4, fp, #1
 800ab7c:	42bc      	cmp	r4, r7
 800ab7e:	da3a      	bge.n	800abf6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2de>
 800ab80:	9c00      	ldr	r4, [sp, #0]
 800ab82:	f9b9 6004 	ldrsh.w	r6, [r9, #4]
 800ab86:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
 800ab8a:	f9b9 4006 	ldrsh.w	r4, [r9, #6]
 800ab8e:	fb05 3306 	mla	r3, r5, r6, r3
 800ab92:	fb05 2204 	mla	r2, r5, r4, r2
 800ab96:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 800ab9a:	fb05 1104 	mla	r1, r5, r4, r1
 800ab9e:	f10b 0402 	add.w	r4, fp, #2
 800aba2:	fb06 0005 	mla	r0, r6, r5, r0
 800aba6:	42a7      	cmp	r7, r4
 800aba8:	dd25      	ble.n	800abf6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2de>
 800abaa:	9c00      	ldr	r4, [sp, #0]
 800abac:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 800abb0:	f9b4 5004 	ldrsh.w	r5, [r4, #4]
 800abb4:	f9b9 400a 	ldrsh.w	r4, [r9, #10]
 800abb8:	fb06 3305 	mla	r3, r6, r5, r3
 800abbc:	fb05 2204 	mla	r2, r5, r4, r2
 800abc0:	f9b8 5004 	ldrsh.w	r5, [r8, #4]
 800abc4:	fb05 1104 	mla	r1, r5, r4, r1
 800abc8:	f10b 0403 	add.w	r4, fp, #3
 800abcc:	fb06 0005 	mla	r0, r6, r5, r0
 800abd0:	42a7      	cmp	r7, r4
 800abd2:	dd10      	ble.n	800abf6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2de>
 800abd4:	9c00      	ldr	r4, [sp, #0]
 800abd6:	f9b8 6006 	ldrsh.w	r6, [r8, #6]
 800abda:	f9b4 5006 	ldrsh.w	r5, [r4, #6]
 800abde:	f9b9 400c 	ldrsh.w	r4, [r9, #12]
 800abe2:	fb04 3305 	mla	r3, r4, r5, r3
 800abe6:	fb04 0006 	mla	r0, r4, r6, r0
 800abea:	f9b9 400e 	ldrsh.w	r4, [r9, #14]
 800abee:	fb05 2204 	mla	r2, r5, r4, r2
 800abf2:	fb06 1104 	mla	r1, r6, r4, r1
 800abf6:	9c06      	ldr	r4, [sp, #24]
 800abf8:	eba4 0b0b 	sub.w	fp, r4, fp
 800abfc:	eb09 098b 	add.w	r9, r9, fp, lsl #2
 800ac00:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800ac02:	2c00      	cmp	r4, #0
 800ac04:	f000 80f2 	beq.w	800adec <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4d4>
 800ac08:	9c01      	ldr	r4, [sp, #4]
 800ac0a:	f934 4c04 	ldrsh.w	r4, [r4, #-4]
 800ac0e:	2c15      	cmp	r4, #21
 800ac10:	f340 8147 	ble.w	800aea2 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x58a>
 800ac14:	1ea5      	subs	r5, r4, #2
 800ac16:	2601      	movs	r6, #1
 800ac18:	3c01      	subs	r4, #1
 800ac1a:	fa06 f505 	lsl.w	r5, r6, r5
 800ac1e:	9e04      	ldr	r6, [sp, #16]
 800ac20:	f856 6c08 	ldr.w	r6, [r6, #-8]
 800ac24:	fb53 5306 	smmla	r3, r3, r6, r5
 800ac28:	fb50 5006 	smmla	r0, r0, r6, r5
 800ac2c:	9d03      	ldr	r5, [sp, #12]
 800ac2e:	4123      	asrs	r3, r4
 800ac30:	9e04      	ldr	r6, [sp, #16]
 800ac32:	f855 7c08 	ldr.w	r7, [r5, #-8]
 800ac36:	1f35      	subs	r5, r6, #4
 800ac38:	9e03      	ldr	r6, [sp, #12]
 800ac3a:	443b      	add	r3, r7
 800ac3c:	3e04      	subs	r6, #4
 800ac3e:	f303 0307 	ssat	r3, #8, r3
 800ac42:	4120      	asrs	r0, r4
 800ac44:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 800ac46:	4438      	add	r0, r7
 800ac48:	7023      	strb	r3, [r4, #0]
 800ac4a:	f300 0007 	ssat	r0, #8, r0
 800ac4e:	9b02      	ldr	r3, [sp, #8]
 800ac50:	7018      	strb	r0, [r3, #0]
 800ac52:	4620      	mov	r0, r4
 800ac54:	9b01      	ldr	r3, [sp, #4]
 800ac56:	9c24      	ldr	r4, [sp, #144]	@ 0x90
 800ac58:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
 800ac5c:	1904      	adds	r4, r0, r4
 800ac5e:	9f24      	ldr	r7, [sp, #144]	@ 0x90
 800ac60:	9802      	ldr	r0, [sp, #8]
 800ac62:	2b15      	cmp	r3, #21
 800ac64:	4438      	add	r0, r7
 800ac66:	f340 8109 	ble.w	800ae7c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x564>
 800ac6a:	682f      	ldr	r7, [r5, #0]
 800ac6c:	f04f 0c01 	mov.w	ip, #1
 800ac70:	1e9d      	subs	r5, r3, #2
 800ac72:	3b01      	subs	r3, #1
 800ac74:	6836      	ldr	r6, [r6, #0]
 800ac76:	fa0c f505 	lsl.w	r5, ip, r5
 800ac7a:	fb52 5207 	smmla	r2, r2, r7, r5
 800ac7e:	411a      	asrs	r2, r3
 800ac80:	fb51 5107 	smmla	r1, r1, r7, r5
 800ac84:	4432      	add	r2, r6
 800ac86:	f302 0207 	ssat	r2, #8, r2
 800ac8a:	9d2c      	ldr	r5, [sp, #176]	@ 0xb0
 800ac8c:	4119      	asrs	r1, r3
 800ac8e:	9f24      	ldr	r7, [sp, #144]	@ 0x90
 800ac90:	4431      	add	r1, r6
 800ac92:	55ea      	strb	r2, [r5, r7]
 800ac94:	f301 0107 	ssat	r1, #8, r1
 800ac98:	9b02      	ldr	r3, [sp, #8]
 800ac9a:	55d9      	strb	r1, [r3, r7]
 800ac9c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ac9e:	18e3      	adds	r3, r4, r3
 800aca0:	932c      	str	r3, [sp, #176]	@ 0xb0
 800aca2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800aca4:	18c3      	adds	r3, r0, r3
 800aca6:	9302      	str	r3, [sp, #8]
 800aca8:	9b01      	ldr	r3, [sp, #4]
 800acaa:	9a05      	ldr	r2, [sp, #20]
 800acac:	3304      	adds	r3, #4
 800acae:	9301      	str	r3, [sp, #4]
 800acb0:	9b04      	ldr	r3, [sp, #16]
 800acb2:	3308      	adds	r3, #8
 800acb4:	9304      	str	r3, [sp, #16]
 800acb6:	9b03      	ldr	r3, [sp, #12]
 800acb8:	3308      	adds	r3, #8
 800acba:	9303      	str	r3, [sp, #12]
 800acbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800acbe:	4293      	cmp	r3, r2
 800acc0:	f47f ae6d 	bne.w	800a99e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x86>
 800acc4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800acc6:	46cb      	mov	fp, r9
 800acc8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800acca:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800acce:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800acd0:	9328      	str	r3, [sp, #160]	@ 0xa0
 800acd2:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800acd4:	4413      	add	r3, r2
 800acd6:	9329      	str	r3, [sp, #164]	@ 0xa4
 800acd8:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800acda:	4413      	add	r3, r2
 800acdc:	932a      	str	r3, [sp, #168]	@ 0xa8
 800acde:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ace0:	07db      	lsls	r3, r3, #31
 800ace2:	f140 81b1 	bpl.w	800b048 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x730>
 800ace6:	9a06      	ldr	r2, [sp, #24]
 800ace8:	9b05      	ldr	r3, [sp, #20]
 800acea:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800acec:	0896      	lsrs	r6, r2, #2
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	eb01 0e42 	add.w	lr, r1, r2, lsl #1
 800acf4:	f000 81f6 	beq.w	800b0e4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x7cc>
 800acf8:	00f7      	lsls	r7, r6, #3
 800acfa:	4674      	mov	r4, lr
 800acfc:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800ad00:	4658      	mov	r0, fp
 800ad02:	461a      	mov	r2, r3
 800ad04:	f8d0 c000 	ldr.w	ip, [r0]
 800ad08:	3008      	adds	r0, #8
 800ad0a:	f850 5c04 	ldr.w	r5, [r0, #-4]
 800ad0e:	f8d1 8000 	ldr.w	r8, [r1]
 800ad12:	fb2c 3308 	smlad	r3, ip, r8, r3
 800ad16:	f8d4 8000 	ldr.w	r8, [r4]
 800ad1a:	fb2c 2208 	smlad	r2, ip, r8, r2
 800ad1e:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800ad22:	3408      	adds	r4, #8
 800ad24:	f854 cc04 	ldr.w	ip, [r4, #-4]
 800ad28:	3108      	adds	r1, #8
 800ad2a:	fb25 3308 	smlad	r3, r5, r8, r3
 800ad2e:	fb25 220c 	smlad	r2, r5, ip, r2
 800ad32:	42b1      	cmp	r1, r6
 800ad34:	d1e6      	bne.n	800ad04 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3ec>
 800ad36:	44bb      	add	fp, r7
 800ad38:	44be      	add	lr, r7
 800ad3a:	9906      	ldr	r1, [sp, #24]
 800ad3c:	f011 0103 	ands.w	r1, r1, #3
 800ad40:	d01f      	beq.n	800ad82 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x46a>
 800ad42:	f9bb 0000 	ldrsh.w	r0, [fp]
 800ad46:	3901      	subs	r1, #1
 800ad48:	8834      	ldrh	r4, [r6, #0]
 800ad4a:	b289      	uxth	r1, r1
 800ad4c:	fb14 3300 	smlabb	r3, r4, r0, r3
 800ad50:	f8be 4000 	ldrh.w	r4, [lr]
 800ad54:	fb14 2200 	smlabb	r2, r4, r0, r2
 800ad58:	b199      	cbz	r1, 800ad82 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x46a>
 800ad5a:	f9bb 0002 	ldrsh.w	r0, [fp, #2]
 800ad5e:	2901      	cmp	r1, #1
 800ad60:	8874      	ldrh	r4, [r6, #2]
 800ad62:	fb14 3300 	smlabb	r3, r4, r0, r3
 800ad66:	f8be 4002 	ldrh.w	r4, [lr, #2]
 800ad6a:	fb14 2200 	smlabb	r2, r4, r0, r2
 800ad6e:	d008      	beq.n	800ad82 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x46a>
 800ad70:	f9bb 1004 	ldrsh.w	r1, [fp, #4]
 800ad74:	88b0      	ldrh	r0, [r6, #4]
 800ad76:	fb11 3300 	smlabb	r3, r1, r0, r3
 800ad7a:	f8be 0004 	ldrh.w	r0, [lr, #4]
 800ad7e:	fb11 2200 	smlabb	r2, r1, r0, r2
 800ad82:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 800ad84:	f9b1 0000 	ldrsh.w	r0, [r1]
 800ad88:	2815      	cmp	r0, #21
 800ad8a:	f340 816c 	ble.w	800b066 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x74e>
 800ad8e:	1e85      	subs	r5, r0, #2
 800ad90:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 800ad92:	9c2a      	ldr	r4, [sp, #168]	@ 0xa8
 800ad94:	3801      	subs	r0, #1
 800ad96:	2601      	movs	r6, #1
 800ad98:	6809      	ldr	r1, [r1, #0]
 800ad9a:	6824      	ldr	r4, [r4, #0]
 800ad9c:	40ae      	lsls	r6, r5
 800ad9e:	fb53 6501 	smmla	r5, r3, r1, r6
 800ada2:	fb52 6301 	smmla	r3, r2, r1, r6
 800ada6:	fa45 f200 	asr.w	r2, r5, r0
 800adaa:	4422      	add	r2, r4
 800adac:	f302 0207 	ssat	r2, #8, r2
 800adb0:	4103      	asrs	r3, r0
 800adb2:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 800adb4:	4423      	add	r3, r4
 800adb6:	f801 2b01 	strb.w	r2, [r1], #1
 800adba:	f303 0307 	ssat	r3, #8, r3
 800adbe:	9a02      	ldr	r2, [sp, #8]
 800adc0:	912c      	str	r1, [sp, #176]	@ 0xb0
 800adc2:	7013      	strb	r3, [r2, #0]
 800adc4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	f000 8142 	beq.w	800b050 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x738>
 800adcc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800adce:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 800add0:	3b01      	subs	r3, #1
 800add2:	441a      	add	r2, r3
 800add4:	922c      	str	r2, [sp, #176]	@ 0xb0
 800add6:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800add8:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800adda:	1c98      	adds	r0, r3, #2
 800addc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800adde:	fb02 0013 	mls	r0, r2, r3, r0
 800ade2:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 800ade4:	4418      	add	r0, r3
 800ade6:	b01b      	add	sp, #108	@ 0x6c
 800ade8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adec:	9c01      	ldr	r4, [sp, #4]
 800adee:	f934 4c04 	ldrsh.w	r4, [r4, #-4]
 800adf2:	2c15      	cmp	r4, #21
 800adf4:	f340 8089 	ble.w	800af0a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5f2>
 800adf8:	9f04      	ldr	r7, [sp, #16]
 800adfa:	1ea5      	subs	r5, r4, #2
 800adfc:	2601      	movs	r6, #1
 800adfe:	3c01      	subs	r4, #1
 800ae00:	fa06 f505 	lsl.w	r5, r6, r5
 800ae04:	f857 6c08 	ldr.w	r6, [r7, #-8]
 800ae08:	fb53 5306 	smmla	r3, r3, r6, r5
 800ae0c:	fb50 5006 	smmla	r0, r0, r6, r5
 800ae10:	9d03      	ldr	r5, [sp, #12]
 800ae12:	4123      	asrs	r3, r4
 800ae14:	f855 6c08 	ldr.w	r6, [r5, #-8]
 800ae18:	1f3d      	subs	r5, r7, #4
 800ae1a:	9f03      	ldr	r7, [sp, #12]
 800ae1c:	4433      	add	r3, r6
 800ae1e:	3f04      	subs	r7, #4
 800ae20:	f303 0307 	ssat	r3, #8, r3
 800ae24:	4120      	asrs	r0, r4
 800ae26:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 800ae28:	4430      	add	r0, r6
 800ae2a:	7023      	strb	r3, [r4, #0]
 800ae2c:	f300 0007 	ssat	r0, #8, r0
 800ae30:	9b02      	ldr	r3, [sp, #8]
 800ae32:	7018      	strb	r0, [r3, #0]
 800ae34:	9b01      	ldr	r3, [sp, #4]
 800ae36:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
 800ae3a:	2b15      	cmp	r3, #21
 800ae3c:	dd4f      	ble.n	800aede <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5c6>
 800ae3e:	1e98      	subs	r0, r3, #2
 800ae40:	2601      	movs	r6, #1
 800ae42:	3b01      	subs	r3, #1
 800ae44:	682c      	ldr	r4, [r5, #0]
 800ae46:	fa06 f000 	lsl.w	r0, r6, r0
 800ae4a:	683d      	ldr	r5, [r7, #0]
 800ae4c:	fb52 0204 	smmla	r2, r2, r4, r0
 800ae50:	411a      	asrs	r2, r3
 800ae52:	fb51 0104 	smmla	r1, r1, r4, r0
 800ae56:	442a      	add	r2, r5
 800ae58:	f302 0207 	ssat	r2, #8, r2
 800ae5c:	fa41 f303 	asr.w	r3, r1, r3
 800ae60:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 800ae62:	442b      	add	r3, r5
 800ae64:	704a      	strb	r2, [r1, #1]
 800ae66:	f303 0307 	ssat	r3, #8, r3
 800ae6a:	9a02      	ldr	r2, [sp, #8]
 800ae6c:	7053      	strb	r3, [r2, #1]
 800ae6e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 800ae70:	3302      	adds	r3, #2
 800ae72:	932c      	str	r3, [sp, #176]	@ 0xb0
 800ae74:	9b02      	ldr	r3, [sp, #8]
 800ae76:	3302      	adds	r3, #2
 800ae78:	9302      	str	r3, [sp, #8]
 800ae7a:	e715      	b.n	800aca8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x390>
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	dd6a      	ble.n	800af56 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x63e>
 800ae80:	682d      	ldr	r5, [r5, #0]
 800ae82:	0052      	lsls	r2, r2, #1
 800ae84:	6837      	ldr	r7, [r6, #0]
 800ae86:	0049      	lsls	r1, r1, #1
 800ae88:	fb52 7205 	smmla	r2, r2, r5, r7
 800ae8c:	fb51 7105 	smmla	r1, r1, r5, r7
 800ae90:	411a      	asrs	r2, r3
 800ae92:	f302 0207 	ssat	r2, #8, r2
 800ae96:	4119      	asrs	r1, r3
 800ae98:	7022      	strb	r2, [r4, #0]
 800ae9a:	f301 0107 	ssat	r1, #8, r1
 800ae9e:	7001      	strb	r1, [r0, #0]
 800aea0:	e6fc      	b.n	800ac9c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x384>
 800aea2:	2c00      	cmp	r4, #0
 800aea4:	f340 8092 	ble.w	800afcc <st_sssa8_ch_nn_mat_mult_kernel_opt+0x6b4>
 800aea8:	9f04      	ldr	r7, [sp, #16]
 800aeaa:	005b      	lsls	r3, r3, #1
 800aeac:	9e03      	ldr	r6, [sp, #12]
 800aeae:	0040      	lsls	r0, r0, #1
 800aeb0:	f857 5c08 	ldr.w	r5, [r7, #-8]
 800aeb4:	f856 6c08 	ldr.w	r6, [r6, #-8]
 800aeb8:	fb53 6305 	smmla	r3, r3, r5, r6
 800aebc:	fb50 6005 	smmla	r0, r0, r5, r6
 800aec0:	9e03      	ldr	r6, [sp, #12]
 800aec2:	4123      	asrs	r3, r4
 800aec4:	1f3d      	subs	r5, r7, #4
 800aec6:	3e04      	subs	r6, #4
 800aec8:	f303 0307 	ssat	r3, #8, r3
 800aecc:	4120      	asrs	r0, r4
 800aece:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 800aed0:	7023      	strb	r3, [r4, #0]
 800aed2:	f300 0007 	ssat	r0, #8, r0
 800aed6:	9b02      	ldr	r3, [sp, #8]
 800aed8:	7018      	strb	r0, [r3, #0]
 800aeda:	4620      	mov	r0, r4
 800aedc:	e6ba      	b.n	800ac54 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x33c>
 800aede:	2b00      	cmp	r3, #0
 800aee0:	f340 8097 	ble.w	800b012 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x6fa>
 800aee4:	6828      	ldr	r0, [r5, #0]
 800aee6:	0052      	lsls	r2, r2, #1
 800aee8:	683c      	ldr	r4, [r7, #0]
 800aeea:	0049      	lsls	r1, r1, #1
 800aeec:	fb52 4200 	smmla	r2, r2, r0, r4
 800aef0:	fb51 4100 	smmla	r1, r1, r0, r4
 800aef4:	411a      	asrs	r2, r3
 800aef6:	f302 0207 	ssat	r2, #8, r2
 800aefa:	4119      	asrs	r1, r3
 800aefc:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 800aefe:	705a      	strb	r2, [r3, #1]
 800af00:	f301 0107 	ssat	r1, #8, r1
 800af04:	9b02      	ldr	r3, [sp, #8]
 800af06:	7059      	strb	r1, [r3, #1]
 800af08:	e7b1      	b.n	800ae6e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x556>
 800af0a:	2c00      	cmp	r4, #0
 800af0c:	dd3c      	ble.n	800af88 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x670>
 800af0e:	9f04      	ldr	r7, [sp, #16]
 800af10:	005b      	lsls	r3, r3, #1
 800af12:	9e03      	ldr	r6, [sp, #12]
 800af14:	0040      	lsls	r0, r0, #1
 800af16:	f857 5c08 	ldr.w	r5, [r7, #-8]
 800af1a:	f856 6c08 	ldr.w	r6, [r6, #-8]
 800af1e:	fb53 6305 	smmla	r3, r3, r5, r6
 800af22:	fb50 6005 	smmla	r0, r0, r5, r6
 800af26:	9e03      	ldr	r6, [sp, #12]
 800af28:	1f3d      	subs	r5, r7, #4
 800af2a:	4123      	asrs	r3, r4
 800af2c:	1f37      	subs	r7, r6, #4
 800af2e:	f303 0307 	ssat	r3, #8, r3
 800af32:	4120      	asrs	r0, r4
 800af34:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 800af36:	7023      	strb	r3, [r4, #0]
 800af38:	f300 0007 	ssat	r0, #8, r0
 800af3c:	9b02      	ldr	r3, [sp, #8]
 800af3e:	7018      	strb	r0, [r3, #0]
 800af40:	e778      	b.n	800ae34 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x51c>
 800af42:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800af44:	f04f 0b00 	mov.w	fp, #0
 800af48:	9400      	str	r4, [sp, #0]
 800af4a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 800af4c:	45a3      	cmp	fp, r4
 800af4e:	f6ff adc1 	blt.w	800aad4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1bc>
 800af52:	46a8      	mov	r8, r5
 800af54:	e5fc      	b.n	800ab50 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x238>
 800af56:	f1c3 0301 	rsb	r3, r3, #1
 800af5a:	409a      	lsls	r2, r3
 800af5c:	f302 021f 	ssat	r2, #32, r2
 800af60:	682d      	ldr	r5, [r5, #0]
 800af62:	fb52 f215 	smmulr	r2, r2, r5
 800af66:	fa01 f303 	lsl.w	r3, r1, r3
 800af6a:	f303 031f 	ssat	r3, #32, r3
 800af6e:	fb53 f515 	smmulr	r5, r3, r5
 800af72:	6833      	ldr	r3, [r6, #0]
 800af74:	4413      	add	r3, r2
 800af76:	f303 0307 	ssat	r3, #8, r3
 800af7a:	7023      	strb	r3, [r4, #0]
 800af7c:	6833      	ldr	r3, [r6, #0]
 800af7e:	442b      	add	r3, r5
 800af80:	f303 0307 	ssat	r3, #8, r3
 800af84:	7003      	strb	r3, [r0, #0]
 800af86:	e689      	b.n	800ac9c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x384>
 800af88:	f1c4 0501 	rsb	r5, r4, #1
 800af8c:	fa03 f405 	lsl.w	r4, r3, r5
 800af90:	f304 041f 	ssat	r4, #32, r4
 800af94:	9e04      	ldr	r6, [sp, #16]
 800af96:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800af9a:	fb54 f413 	smmulr	r4, r4, r3
 800af9e:	40a8      	lsls	r0, r5
 800afa0:	f300 001f 	ssat	r0, #32, r0
 800afa4:	1f35      	subs	r5, r6, #4
 800afa6:	fb50 f013 	smmulr	r0, r0, r3
 800afaa:	9e03      	ldr	r6, [sp, #12]
 800afac:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800afb0:	4423      	add	r3, r4
 800afb2:	f303 0307 	ssat	r3, #8, r3
 800afb6:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 800afb8:	1f37      	subs	r7, r6, #4
 800afba:	7023      	strb	r3, [r4, #0]
 800afbc:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800afc0:	4403      	add	r3, r0
 800afc2:	f303 0307 	ssat	r3, #8, r3
 800afc6:	9802      	ldr	r0, [sp, #8]
 800afc8:	7003      	strb	r3, [r0, #0]
 800afca:	e733      	b.n	800ae34 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x51c>
 800afcc:	f1c4 0401 	rsb	r4, r4, #1
 800afd0:	fa03 f604 	lsl.w	r6, r3, r4
 800afd4:	f306 061f 	ssat	r6, #32, r6
 800afd8:	9d04      	ldr	r5, [sp, #16]
 800afda:	f855 3c08 	ldr.w	r3, [r5, #-8]
 800afde:	fb56 f613 	smmulr	r6, r6, r3
 800afe2:	40a0      	lsls	r0, r4
 800afe4:	f300 001f 	ssat	r0, #32, r0
 800afe8:	3d04      	subs	r5, #4
 800afea:	fb50 f013 	smmulr	r0, r0, r3
 800afee:	9c03      	ldr	r4, [sp, #12]
 800aff0:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800aff4:	4433      	add	r3, r6
 800aff6:	f303 0307 	ssat	r3, #8, r3
 800affa:	9e2c      	ldr	r6, [sp, #176]	@ 0xb0
 800affc:	7033      	strb	r3, [r6, #0]
 800affe:	1f26      	subs	r6, r4, #4
 800b000:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800b004:	4403      	add	r3, r0
 800b006:	f303 0307 	ssat	r3, #8, r3
 800b00a:	9802      	ldr	r0, [sp, #8]
 800b00c:	7003      	strb	r3, [r0, #0]
 800b00e:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 800b010:	e620      	b.n	800ac54 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x33c>
 800b012:	f1c3 0301 	rsb	r3, r3, #1
 800b016:	409a      	lsls	r2, r3
 800b018:	f302 021f 	ssat	r2, #32, r2
 800b01c:	6828      	ldr	r0, [r5, #0]
 800b01e:	fb52 f210 	smmulr	r2, r2, r0
 800b022:	fa01 f303 	lsl.w	r3, r1, r3
 800b026:	f303 031f 	ssat	r3, #32, r3
 800b02a:	fb53 f010 	smmulr	r0, r3, r0
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	4413      	add	r3, r2
 800b032:	f303 0307 	ssat	r3, #8, r3
 800b036:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 800b038:	7053      	strb	r3, [r2, #1]
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	4403      	add	r3, r0
 800b03e:	f303 0307 	ssat	r3, #8, r3
 800b042:	9a02      	ldr	r2, [sp, #8]
 800b044:	7053      	strb	r3, [r2, #1]
 800b046:	e712      	b.n	800ae6e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x556>
 800b048:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	f47f aec3 	bne.w	800add6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4be>
 800b050:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 800b052:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800b054:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800b056:	3302      	adds	r3, #2
 800b058:	1a50      	subs	r0, r2, r1
 800b05a:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b05c:	fb02 0003 	mla	r0, r2, r3, r0
 800b060:	b01b      	add	sp, #108	@ 0x6c
 800b062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b066:	2800      	cmp	r0, #0
 800b068:	dd1b      	ble.n	800b0a2 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x78a>
 800b06a:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 800b06c:	0052      	lsls	r2, r2, #1
 800b06e:	9c2a      	ldr	r4, [sp, #168]	@ 0xa8
 800b070:	005b      	lsls	r3, r3, #1
 800b072:	6809      	ldr	r1, [r1, #0]
 800b074:	6824      	ldr	r4, [r4, #0]
 800b076:	fb53 4301 	smmla	r3, r3, r1, r4
 800b07a:	fb52 4101 	smmla	r1, r2, r1, r4
 800b07e:	fa43 f000 	asr.w	r0, r3, r0
 800b082:	f300 0307 	ssat	r3, #8, r0
 800b086:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 800b088:	f802 3b01 	strb.w	r3, [r2], #1
 800b08c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800b08e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b092:	fa41 f303 	asr.w	r3, r1, r3
 800b096:	f303 0307 	ssat	r3, #8, r3
 800b09a:	9902      	ldr	r1, [sp, #8]
 800b09c:	922c      	str	r2, [sp, #176]	@ 0xb0
 800b09e:	700b      	strb	r3, [r1, #0]
 800b0a0:	e690      	b.n	800adc4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4ac>
 800b0a2:	f1c0 0001 	rsb	r0, r0, #1
 800b0a6:	fa03 f100 	lsl.w	r1, r3, r0
 800b0aa:	f301 011f 	ssat	r1, #32, r1
 800b0ae:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800b0b0:	681c      	ldr	r4, [r3, #0]
 800b0b2:	fb51 f114 	smmulr	r1, r1, r4
 800b0b6:	fa02 f300 	lsl.w	r3, r2, r0
 800b0ba:	f303 031f 	ssat	r3, #32, r3
 800b0be:	fb53 f414 	smmulr	r4, r3, r4
 800b0c2:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	440b      	add	r3, r1
 800b0c8:	f303 0307 	ssat	r3, #8, r3
 800b0cc:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 800b0ce:	f802 3b01 	strb.w	r3, [r2], #1
 800b0d2:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	4423      	add	r3, r4
 800b0d8:	f303 0307 	ssat	r3, #8, r3
 800b0dc:	9902      	ldr	r1, [sp, #8]
 800b0de:	922c      	str	r2, [sp, #176]	@ 0xb0
 800b0e0:	700b      	strb	r3, [r1, #0]
 800b0e2:	e66f      	b.n	800adc4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4ac>
 800b0e4:	460e      	mov	r6, r1
 800b0e6:	461a      	mov	r2, r3
 800b0e8:	e627      	b.n	800ad3a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x422>
 800b0ea:	bf00      	nop

0800b0ec <st_sssa8_ch_nn_mat_mult_kernel_single_opt>:
 800b0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0f0:	b095      	sub	sp, #84	@ 0x54
 800b0f2:	f8bd 407c 	ldrh.w	r4, [sp, #124]	@ 0x7c
 800b0f6:	920d      	str	r2, [sp, #52]	@ 0x34
 800b0f8:	f8bd 2080 	ldrh.w	r2, [sp, #128]	@ 0x80
 800b0fc:	9311      	str	r3, [sp, #68]	@ 0x44
 800b0fe:	9204      	str	r2, [sp, #16]
 800b100:	0862      	lsrs	r2, r4, #1
 800b102:	f89d 3090 	ldrb.w	r3, [sp, #144]	@ 0x90
 800b106:	940f      	str	r4, [sp, #60]	@ 0x3c
 800b108:	9106      	str	r1, [sp, #24]
 800b10a:	9310      	str	r3, [sp, #64]	@ 0x40
 800b10c:	920e      	str	r2, [sp, #56]	@ 0x38
 800b10e:	2b00      	cmp	r3, #0
 800b110:	f000 81fb 	beq.w	800b50a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x41e>
 800b114:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b116:	b29c      	uxth	r4, r3
 800b118:	2a00      	cmp	r2, #0
 800b11a:	f000 8144 	beq.w	800b3a6 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2ba>
 800b11e:	1c61      	adds	r1, r4, #1
 800b120:	0064      	lsls	r4, r4, #1
 800b122:	3a01      	subs	r2, #1
 800b124:	9d04      	ldr	r5, [sp, #16]
 800b126:	9407      	str	r4, [sp, #28]
 800b128:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 800b12a:	b292      	uxth	r2, r2
 800b12c:	f1a5 0310 	sub.w	r3, r5, #16
 800b130:	1861      	adds	r1, r4, r1
 800b132:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 800b134:	091b      	lsrs	r3, r3, #4
 800b136:	9102      	str	r1, [sp, #8]
 800b138:	f104 0110 	add.w	r1, r4, #16
 800b13c:	3301      	adds	r3, #1
 800b13e:	f104 0908 	add.w	r9, r4, #8
 800b142:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800b146:	1ee9      	subs	r1, r5, #3
 800b148:	9108      	str	r1, [sp, #32]
 800b14a:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800b14c:	9209      	str	r2, [sp, #36]	@ 0x24
 800b14e:	3104      	adds	r1, #4
 800b150:	9100      	str	r1, [sp, #0]
 800b152:	9922      	ldr	r1, [sp, #136]	@ 0x88
 800b154:	3108      	adds	r1, #8
 800b156:	9101      	str	r1, [sp, #4]
 800b158:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 800b15a:	f101 0b08 	add.w	fp, r1, #8
 800b15e:	9925      	ldr	r1, [sp, #148]	@ 0x94
 800b160:	3101      	adds	r1, #1
 800b162:	9103      	str	r1, [sp, #12]
 800b164:	9906      	ldr	r1, [sp, #24]
 800b166:	eb01 1743 	add.w	r7, r1, r3, lsl #5
 800b16a:	0119      	lsls	r1, r3, #4
 800b16c:	019b      	lsls	r3, r3, #6
 800b16e:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b170:	930a      	str	r3, [sp, #40]	@ 0x28
 800b172:	1f2b      	subs	r3, r5, #4
 800b174:	930c      	str	r3, [sp, #48]	@ 0x30
 800b176:	f859 3c08 	ldr.w	r3, [r9, #-8]
 800b17a:	9904      	ldr	r1, [sp, #16]
 800b17c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b17e:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800b182:	290f      	cmp	r1, #15
 800b184:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b186:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b188:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b18a:	9c06      	ldr	r4, [sp, #24]
 800b18c:	f340 81ba 	ble.w	800b504 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x418>
 800b190:	4601      	mov	r1, r0
 800b192:	f8d4 c000 	ldr.w	ip, [r4]
 800b196:	680e      	ldr	r6, [r1, #0]
 800b198:	fb26 220c 	smlad	r2, r6, ip, r2
 800b19c:	684d      	ldr	r5, [r1, #4]
 800b19e:	fb25 330c 	smlad	r3, r5, ip, r3
 800b1a2:	f8d4 c004 	ldr.w	ip, [r4, #4]
 800b1a6:	688e      	ldr	r6, [r1, #8]
 800b1a8:	fb26 260c 	smlad	r6, r6, ip, r2
 800b1ac:	68cd      	ldr	r5, [r1, #12]
 800b1ae:	fb25 350c 	smlad	r5, r5, ip, r3
 800b1b2:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800b1b6:	690a      	ldr	r2, [r1, #16]
 800b1b8:	fb22 660c 	smlad	r6, r2, ip, r6
 800b1bc:	694b      	ldr	r3, [r1, #20]
 800b1be:	fb23 550c 	smlad	r5, r3, ip, r5
 800b1c2:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800b1c6:	698a      	ldr	r2, [r1, #24]
 800b1c8:	fb22 620c 	smlad	r2, r2, ip, r6
 800b1cc:	69cb      	ldr	r3, [r1, #28]
 800b1ce:	fb23 530c 	smlad	r3, r3, ip, r5
 800b1d2:	f8d4 c010 	ldr.w	ip, [r4, #16]
 800b1d6:	6a0e      	ldr	r6, [r1, #32]
 800b1d8:	fb26 220c 	smlad	r2, r6, ip, r2
 800b1dc:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 800b1de:	fb25 330c 	smlad	r3, r5, ip, r3
 800b1e2:	f8d4 c014 	ldr.w	ip, [r4, #20]
 800b1e6:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
 800b1e8:	fb26 260c 	smlad	r6, r6, ip, r2
 800b1ec:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
 800b1ee:	fb25 350c 	smlad	r5, r5, ip, r3
 800b1f2:	f8d4 c018 	ldr.w	ip, [r4, #24]
 800b1f6:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800b1f8:	fb22 660c 	smlad	r6, r2, ip, r6
 800b1fc:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800b1fe:	fb23 550c 	smlad	r5, r3, ip, r5
 800b202:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 800b206:	3140      	adds	r1, #64	@ 0x40
 800b208:	f851 2c08 	ldr.w	r2, [r1, #-8]
 800b20c:	3420      	adds	r4, #32
 800b20e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b212:	fb22 620c 	smlad	r2, r2, ip, r6
 800b216:	fb23 530c 	smlad	r3, r3, ip, r5
 800b21a:	42bc      	cmp	r4, r7
 800b21c:	d1b9      	bne.n	800b192 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0xa6>
 800b21e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b220:	463c      	mov	r4, r7
 800b222:	f8dd e02c 	ldr.w	lr, [sp, #44]	@ 0x2c
 800b226:	4408      	add	r0, r1
 800b228:	9908      	ldr	r1, [sp, #32]
 800b22a:	458e      	cmp	lr, r1
 800b22c:	da25      	bge.n	800b27a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x18e>
 800b22e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b230:	eba1 0a0e 	sub.w	sl, r1, lr
 800b234:	4601      	mov	r1, r0
 800b236:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
 800b23a:	f10a 0501 	add.w	r5, sl, #1
 800b23e:	eb04 08c5 	add.w	r8, r4, r5, lsl #3
 800b242:	9505      	str	r5, [sp, #20]
 800b244:	6825      	ldr	r5, [r4, #0]
 800b246:	680e      	ldr	r6, [r1, #0]
 800b248:	fb26 2205 	smlad	r2, r6, r5, r2
 800b24c:	684e      	ldr	r6, [r1, #4]
 800b24e:	fb26 3505 	smlad	r5, r6, r5, r3
 800b252:	6866      	ldr	r6, [r4, #4]
 800b254:	3110      	adds	r1, #16
 800b256:	f851 cc08 	ldr.w	ip, [r1, #-8]
 800b25a:	3408      	adds	r4, #8
 800b25c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b260:	fb2c 2206 	smlad	r2, ip, r6, r2
 800b264:	fb23 5306 	smlad	r3, r3, r6, r5
 800b268:	45a0      	cmp	r8, r4
 800b26a:	d1eb      	bne.n	800b244 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x158>
 800b26c:	9905      	ldr	r1, [sp, #20]
 800b26e:	f10e 0e04 	add.w	lr, lr, #4
 800b272:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 800b276:	eb0e 0e8a 	add.w	lr, lr, sl, lsl #2
 800b27a:	9e04      	ldr	r6, [sp, #16]
 800b27c:	4576      	cmp	r6, lr
 800b27e:	dd30      	ble.n	800b2e2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1f6>
 800b280:	f9b4 1000 	ldrsh.w	r1, [r4]
 800b284:	8805      	ldrh	r5, [r0, #0]
 800b286:	fb15 2201 	smlabb	r2, r5, r1, r2
 800b28a:	8845      	ldrh	r5, [r0, #2]
 800b28c:	fb11 3305 	smlabb	r3, r1, r5, r3
 800b290:	f10e 0101 	add.w	r1, lr, #1
 800b294:	428e      	cmp	r6, r1
 800b296:	dd1f      	ble.n	800b2d8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1ec>
 800b298:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800b29c:	8885      	ldrh	r5, [r0, #4]
 800b29e:	fb15 2201 	smlabb	r2, r5, r1, r2
 800b2a2:	88c5      	ldrh	r5, [r0, #6]
 800b2a4:	fb11 3305 	smlabb	r3, r1, r5, r3
 800b2a8:	f10e 0102 	add.w	r1, lr, #2
 800b2ac:	428e      	cmp	r6, r1
 800b2ae:	dd13      	ble.n	800b2d8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1ec>
 800b2b0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800b2b4:	8905      	ldrh	r5, [r0, #8]
 800b2b6:	fb15 2201 	smlabb	r2, r5, r1, r2
 800b2ba:	8945      	ldrh	r5, [r0, #10]
 800b2bc:	fb11 3305 	smlabb	r3, r1, r5, r3
 800b2c0:	f10e 0103 	add.w	r1, lr, #3
 800b2c4:	428e      	cmp	r6, r1
 800b2c6:	dd07      	ble.n	800b2d8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1ec>
 800b2c8:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 800b2cc:	8984      	ldrh	r4, [r0, #12]
 800b2ce:	fb14 2201 	smlabb	r2, r4, r1, r2
 800b2d2:	89c4      	ldrh	r4, [r0, #14]
 800b2d4:	fb11 3304 	smlabb	r3, r1, r4, r3
 800b2d8:	9904      	ldr	r1, [sp, #16]
 800b2da:	eba1 0e0e 	sub.w	lr, r1, lr
 800b2de:	eb00 008e 	add.w	r0, r0, lr, lsl #2
 800b2e2:	9e00      	ldr	r6, [sp, #0]
 800b2e4:	f936 5c04 	ldrsh.w	r5, [r6, #-4]
 800b2e8:	2d15      	cmp	r5, #21
 800b2ea:	f340 80b4 	ble.w	800b456 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x36a>
 800b2ee:	1eac      	subs	r4, r5, #2
 800b2f0:	2101      	movs	r1, #1
 800b2f2:	3d01      	subs	r5, #1
 800b2f4:	f1a6 0c02 	sub.w	ip, r6, #2
 800b2f8:	fa01 f404 	lsl.w	r4, r1, r4
 800b2fc:	9901      	ldr	r1, [sp, #4]
 800b2fe:	f1ab 0604 	sub.w	r6, fp, #4
 800b302:	f851 1c08 	ldr.w	r1, [r1, #-8]
 800b306:	fb52 4401 	smmla	r4, r2, r1, r4
 800b30a:	9901      	ldr	r1, [sp, #4]
 800b30c:	fa44 f505 	asr.w	r5, r4, r5
 800b310:	f85b 4c08 	ldr.w	r4, [fp, #-8]
 800b314:	f1a1 0e04 	sub.w	lr, r1, #4
 800b318:	442c      	add	r4, r5
 800b31a:	f304 0407 	ssat	r4, #8, r4
 800b31e:	9a03      	ldr	r2, [sp, #12]
 800b320:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b324:	f9bc 2000 	ldrsh.w	r2, [ip]
 800b328:	2a15      	cmp	r2, #21
 800b32a:	f340 80b1 	ble.w	800b490 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3a4>
 800b32e:	1e94      	subs	r4, r2, #2
 800b330:	2501      	movs	r5, #1
 800b332:	3a01      	subs	r2, #1
 800b334:	6836      	ldr	r6, [r6, #0]
 800b336:	f8de 1000 	ldr.w	r1, [lr]
 800b33a:	fa05 f404 	lsl.w	r4, r5, r4
 800b33e:	fb53 4301 	smmla	r3, r3, r1, r4
 800b342:	4113      	asrs	r3, r2
 800b344:	4433      	add	r3, r6
 800b346:	f303 0307 	ssat	r3, #8, r3
 800b34a:	9a02      	ldr	r2, [sp, #8]
 800b34c:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b350:	9b00      	ldr	r3, [sp, #0]
 800b352:	f109 0908 	add.w	r9, r9, #8
 800b356:	9a07      	ldr	r2, [sp, #28]
 800b358:	f10b 0b08 	add.w	fp, fp, #8
 800b35c:	3304      	adds	r3, #4
 800b35e:	9300      	str	r3, [sp, #0]
 800b360:	9b01      	ldr	r3, [sp, #4]
 800b362:	3308      	adds	r3, #8
 800b364:	9301      	str	r3, [sp, #4]
 800b366:	9b02      	ldr	r3, [sp, #8]
 800b368:	4413      	add	r3, r2
 800b36a:	9302      	str	r3, [sp, #8]
 800b36c:	9b03      	ldr	r3, [sp, #12]
 800b36e:	4413      	add	r3, r2
 800b370:	9303      	str	r3, [sp, #12]
 800b372:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b374:	4599      	cmp	r9, r3
 800b376:	f47f aefe 	bne.w	800b176 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x8a>
 800b37a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b37c:	4611      	mov	r1, r2
 800b37e:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 800b380:	fb03 2201 	mla	r2, r3, r1, r2
 800b384:	9225      	str	r2, [sp, #148]	@ 0x94
 800b386:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b388:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800b38c:	920d      	str	r2, [sp, #52]	@ 0x34
 800b38e:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b390:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b394:	9221      	str	r2, [sp, #132]	@ 0x84
 800b396:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b398:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800b39c:	9222      	str	r2, [sp, #136]	@ 0x88
 800b39e:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b3a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b3a4:	9323      	str	r3, [sp, #140]	@ 0x8c
 800b3a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3a8:	07db      	lsls	r3, r3, #31
 800b3aa:	d546      	bpl.n	800b43a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x34e>
 800b3ac:	9a04      	ldr	r2, [sp, #16]
 800b3ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b3b0:	0896      	lsrs	r6, r2, #2
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	d013      	beq.n	800b3de <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2f2>
 800b3b6:	00f7      	lsls	r7, r6, #3
 800b3b8:	9906      	ldr	r1, [sp, #24]
 800b3ba:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800b3be:	6804      	ldr	r4, [r0, #0]
 800b3c0:	3008      	adds	r0, #8
 800b3c2:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800b3c6:	680d      	ldr	r5, [r1, #0]
 800b3c8:	fb24 3305 	smlad	r3, r4, r5, r3
 800b3cc:	684c      	ldr	r4, [r1, #4]
 800b3ce:	3108      	adds	r1, #8
 800b3d0:	fb22 3304 	smlad	r3, r2, r4, r3
 800b3d4:	4286      	cmp	r6, r0
 800b3d6:	d1f2      	bne.n	800b3be <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2d2>
 800b3d8:	9a06      	ldr	r2, [sp, #24]
 800b3da:	443a      	add	r2, r7
 800b3dc:	9206      	str	r2, [sp, #24]
 800b3de:	9a04      	ldr	r2, [sp, #16]
 800b3e0:	f012 0203 	ands.w	r2, r2, #3
 800b3e4:	d011      	beq.n	800b40a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x31e>
 800b3e6:	3a01      	subs	r2, #1
 800b3e8:	9d06      	ldr	r5, [sp, #24]
 800b3ea:	8801      	ldrh	r1, [r0, #0]
 800b3ec:	882c      	ldrh	r4, [r5, #0]
 800b3ee:	b292      	uxth	r2, r2
 800b3f0:	fb14 3301 	smlabb	r3, r4, r1, r3
 800b3f4:	b14a      	cbz	r2, 800b40a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x31e>
 800b3f6:	886c      	ldrh	r4, [r5, #2]
 800b3f8:	2a01      	cmp	r2, #1
 800b3fa:	8841      	ldrh	r1, [r0, #2]
 800b3fc:	fb14 3301 	smlabb	r3, r4, r1, r3
 800b400:	d003      	beq.n	800b40a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x31e>
 800b402:	8881      	ldrh	r1, [r0, #4]
 800b404:	88aa      	ldrh	r2, [r5, #4]
 800b406:	fb11 3302 	smlabb	r3, r1, r2, r3
 800b40a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b40c:	f9b2 2000 	ldrsh.w	r2, [r2]
 800b410:	2a15      	cmp	r2, #21
 800b412:	f340 8084 	ble.w	800b51e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x432>
 800b416:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 800b418:	1e95      	subs	r5, r2, #2
 800b41a:	9922      	ldr	r1, [sp, #136]	@ 0x88
 800b41c:	3a01      	subs	r2, #1
 800b41e:	6804      	ldr	r4, [r0, #0]
 800b420:	2001      	movs	r0, #1
 800b422:	6809      	ldr	r1, [r1, #0]
 800b424:	40a8      	lsls	r0, r5
 800b426:	fb53 0301 	smmla	r3, r3, r1, r0
 800b42a:	4113      	asrs	r3, r2
 800b42c:	4423      	add	r3, r4
 800b42e:	f303 0307 	ssat	r3, #8, r3
 800b432:	9825      	ldr	r0, [sp, #148]	@ 0x94
 800b434:	f800 3b01 	strb.w	r3, [r0], #1
 800b438:	9025      	str	r0, [sp, #148]	@ 0x94
 800b43a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d066      	beq.n	800b50e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x422>
 800b440:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b442:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800b444:	fb03 f000 	mul.w	r0, r3, r0
 800b448:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800b44a:	f1c0 0001 	rsb	r0, r0, #1
 800b44e:	4418      	add	r0, r3
 800b450:	b015      	add	sp, #84	@ 0x54
 800b452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b456:	2d00      	cmp	r5, #0
 800b458:	dd29      	ble.n	800b4ae <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3c2>
 800b45a:	9e01      	ldr	r6, [sp, #4]
 800b45c:	0052      	lsls	r2, r2, #1
 800b45e:	f85b 4c08 	ldr.w	r4, [fp, #-8]
 800b462:	f856 1c08 	ldr.w	r1, [r6, #-8]
 800b466:	f1a6 0e04 	sub.w	lr, r6, #4
 800b46a:	fb52 4201 	smmla	r2, r2, r1, r4
 800b46e:	fa42 f505 	asr.w	r5, r2, r5
 800b472:	9a00      	ldr	r2, [sp, #0]
 800b474:	f1ab 0604 	sub.w	r6, fp, #4
 800b478:	f1a2 0c02 	sub.w	ip, r2, #2
 800b47c:	f305 0507 	ssat	r5, #8, r5
 800b480:	9a03      	ldr	r2, [sp, #12]
 800b482:	f802 5c01 	strb.w	r5, [r2, #-1]
 800b486:	f9bc 2000 	ldrsh.w	r2, [ip]
 800b48a:	2a15      	cmp	r2, #21
 800b48c:	f73f af4f 	bgt.w	800b32e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x242>
 800b490:	2a00      	cmp	r2, #0
 800b492:	dd25      	ble.n	800b4e0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3f4>
 800b494:	f8de 1000 	ldr.w	r1, [lr]
 800b498:	005b      	lsls	r3, r3, #1
 800b49a:	6834      	ldr	r4, [r6, #0]
 800b49c:	fb53 4301 	smmla	r3, r3, r1, r4
 800b4a0:	4113      	asrs	r3, r2
 800b4a2:	f303 0307 	ssat	r3, #8, r3
 800b4a6:	9a02      	ldr	r2, [sp, #8]
 800b4a8:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b4ac:	e750      	b.n	800b350 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x264>
 800b4ae:	f1c5 0501 	rsb	r5, r5, #1
 800b4b2:	f1a6 0c02 	sub.w	ip, r6, #2
 800b4b6:	40aa      	lsls	r2, r5
 800b4b8:	f302 021f 	ssat	r2, #32, r2
 800b4bc:	9901      	ldr	r1, [sp, #4]
 800b4be:	f1a1 0e04 	sub.w	lr, r1, #4
 800b4c2:	f851 1c08 	ldr.w	r1, [r1, #-8]
 800b4c6:	fb52 f111 	smmulr	r1, r2, r1
 800b4ca:	f85b 2c08 	ldr.w	r2, [fp, #-8]
 800b4ce:	f1ab 0604 	sub.w	r6, fp, #4
 800b4d2:	440a      	add	r2, r1
 800b4d4:	f302 0207 	ssat	r2, #8, r2
 800b4d8:	9903      	ldr	r1, [sp, #12]
 800b4da:	f801 2c01 	strb.w	r2, [r1, #-1]
 800b4de:	e721      	b.n	800b324 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x238>
 800b4e0:	f1c2 0201 	rsb	r2, r2, #1
 800b4e4:	fa03 f202 	lsl.w	r2, r3, r2
 800b4e8:	f302 021f 	ssat	r2, #32, r2
 800b4ec:	f8de 3000 	ldr.w	r3, [lr]
 800b4f0:	fb52 f313 	smmulr	r3, r2, r3
 800b4f4:	6832      	ldr	r2, [r6, #0]
 800b4f6:	4413      	add	r3, r2
 800b4f8:	f303 0307 	ssat	r3, #8, r3
 800b4fc:	9a02      	ldr	r2, [sp, #8]
 800b4fe:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b502:	e725      	b.n	800b350 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x264>
 800b504:	f04f 0e00 	mov.w	lr, #0
 800b508:	e68e      	b.n	800b228 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x13c>
 800b50a:	2401      	movs	r4, #1
 800b50c:	e604      	b.n	800b118 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2c>
 800b50e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b510:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b512:	1a98      	subs	r0, r3, r2
 800b514:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800b516:	4418      	add	r0, r3
 800b518:	b015      	add	sp, #84	@ 0x54
 800b51a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b51e:	2a00      	cmp	r2, #0
 800b520:	dd0e      	ble.n	800b540 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x454>
 800b522:	9922      	ldr	r1, [sp, #136]	@ 0x88
 800b524:	005b      	lsls	r3, r3, #1
 800b526:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 800b528:	6809      	ldr	r1, [r1, #0]
 800b52a:	6800      	ldr	r0, [r0, #0]
 800b52c:	fb53 0301 	smmla	r3, r3, r1, r0
 800b530:	4113      	asrs	r3, r2
 800b532:	f303 0307 	ssat	r3, #8, r3
 800b536:	9825      	ldr	r0, [sp, #148]	@ 0x94
 800b538:	f800 3b01 	strb.w	r3, [r0], #1
 800b53c:	9025      	str	r0, [sp, #148]	@ 0x94
 800b53e:	e77c      	b.n	800b43a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x34e>
 800b540:	f1c2 0201 	rsb	r2, r2, #1
 800b544:	4093      	lsls	r3, r2
 800b546:	f303 031f 	ssat	r3, #32, r3
 800b54a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b54c:	6812      	ldr	r2, [r2, #0]
 800b54e:	fb53 f312 	smmulr	r3, r3, r2
 800b552:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b554:	6812      	ldr	r2, [r2, #0]
 800b556:	4413      	add	r3, r2
 800b558:	f303 0307 	ssat	r3, #8, r3
 800b55c:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 800b55e:	f802 3b01 	strb.w	r3, [r2], #1
 800b562:	9225      	str	r2, [sp, #148]	@ 0x94
 800b564:	e769      	b.n	800b43a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x34e>
 800b566:	bf00      	nop

0800b568 <arm_fill_q15>:
 800b568:	b510      	push	{r4, lr}
 800b56a:	eac0 4400 	pkhbt	r4, r0, r0, lsl #16
 800b56e:	ea5f 0e92 	movs.w	lr, r2, lsr #2
 800b572:	d013      	beq.n	800b59c <arm_fill_q15+0x34>
 800b574:	f10e 33ff 	add.w	r3, lr, #4294967295
 800b578:	2b09      	cmp	r3, #9
 800b57a:	460b      	mov	r3, r1
 800b57c:	d919      	bls.n	800b5b2 <arm_fill_q15+0x4a>
 800b57e:	f011 0f07 	tst.w	r1, #7
 800b582:	d116      	bne.n	800b5b2 <arm_fill_q15+0x4a>
 800b584:	f04f 0c00 	mov.w	ip, #0
 800b588:	f10c 0c01 	add.w	ip, ip, #1
 800b58c:	45e6      	cmp	lr, ip
 800b58e:	e9c3 4400 	strd	r4, r4, [r3]
 800b592:	f103 0308 	add.w	r3, r3, #8
 800b596:	d1f7      	bne.n	800b588 <arm_fill_q15+0x20>
 800b598:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
 800b59c:	f012 0203 	ands.w	r2, r2, #3
 800b5a0:	d006      	beq.n	800b5b0 <arm_fill_q15+0x48>
 800b5a2:	3a01      	subs	r2, #1
 800b5a4:	8008      	strh	r0, [r1, #0]
 800b5a6:	d003      	beq.n	800b5b0 <arm_fill_q15+0x48>
 800b5a8:	2a01      	cmp	r2, #1
 800b5aa:	8048      	strh	r0, [r1, #2]
 800b5ac:	bf18      	it	ne
 800b5ae:	8088      	strhne	r0, [r1, #4]
 800b5b0:	bd10      	pop	{r4, pc}
 800b5b2:	46f4      	mov	ip, lr
 800b5b4:	f1bc 0c01 	subs.w	ip, ip, #1
 800b5b8:	601c      	str	r4, [r3, #0]
 800b5ba:	605c      	str	r4, [r3, #4]
 800b5bc:	f103 0308 	add.w	r3, r3, #8
 800b5c0:	d1f8      	bne.n	800b5b4 <arm_fill_q15+0x4c>
 800b5c2:	e7e9      	b.n	800b598 <arm_fill_q15+0x30>

0800b5c4 <arm_float_to_q15>:
 800b5c4:	b530      	push	{r4, r5, lr}
 800b5c6:	0895      	lsrs	r5, r2, #2
 800b5c8:	d069      	beq.n	800b69e <arm_float_to_q15+0xda>
 800b5ca:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800b5ce:	f100 0c10 	add.w	ip, r0, #16
 800b5d2:	eefe 5a00 	vmov.f32	s11, #224	@ 0xbf000000 -0.5
 800b5d6:	ed9f 6a55 	vldr	s12, [pc, #340]	@ 800b72c <arm_float_to_q15+0x168>
 800b5da:	f101 0e08 	add.w	lr, r1, #8
 800b5de:	462c      	mov	r4, r5
 800b5e0:	ed5c 7a04 	vldr	s15, [ip, #-16]
 800b5e4:	ee67 6a86 	vmul.f32	s13, s15, s12
 800b5e8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800b5ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5f0:	fe77 7a25 	vselgt.f32	s15, s14, s11
 800b5f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b5fc:	ee17 3a90 	vmov	r3, s15
 800b600:	f303 030f 	ssat	r3, #16, r3
 800b604:	f82e 3c08 	strh.w	r3, [lr, #-8]
 800b608:	ed5c 7a03 	vldr	s15, [ip, #-12]
 800b60c:	ee67 6a86 	vmul.f32	s13, s15, s12
 800b610:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800b614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b618:	fe77 7a25 	vselgt.f32	s15, s14, s11
 800b61c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b620:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b624:	ee17 3a90 	vmov	r3, s15
 800b628:	f303 030f 	ssat	r3, #16, r3
 800b62c:	f82e 3c06 	strh.w	r3, [lr, #-6]
 800b630:	ed5c 7a02 	vldr	s15, [ip, #-8]
 800b634:	ee67 6a86 	vmul.f32	s13, s15, s12
 800b638:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800b63c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b640:	fe77 7a25 	vselgt.f32	s15, s14, s11
 800b644:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b648:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b64c:	ee17 3a90 	vmov	r3, s15
 800b650:	f303 030f 	ssat	r3, #16, r3
 800b654:	f82e 3c04 	strh.w	r3, [lr, #-4]
 800b658:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800b65c:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b660:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b664:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b668:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b66c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b670:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800b674:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b678:	bfcc      	ite	gt
 800b67a:	ee16 3a90 	vmovgt	r3, s13
 800b67e:	ee17 3a90 	vmovle	r3, s15
 800b682:	f303 030f 	ssat	r3, #16, r3
 800b686:	3c01      	subs	r4, #1
 800b688:	f82e 3c02 	strh.w	r3, [lr, #-2]
 800b68c:	f10c 0c10 	add.w	ip, ip, #16
 800b690:	f10e 0e08 	add.w	lr, lr, #8
 800b694:	d1a4      	bne.n	800b5e0 <arm_float_to_q15+0x1c>
 800b696:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800b69a:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800b69e:	f012 0203 	ands.w	r2, r2, #3
 800b6a2:	d042      	beq.n	800b72a <arm_float_to_q15+0x166>
 800b6a4:	edd0 7a00 	vldr	s15, [r0]
 800b6a8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800b6ac:	eddf 5a1f 	vldr	s11, [pc, #124]	@ 800b72c <arm_float_to_q15+0x168>
 800b6b0:	eebe 6a00 	vmov.f32	s12, #224	@ 0xbf000000 -0.5
 800b6b4:	ee67 6aa5 	vmul.f32	s13, s15, s11
 800b6b8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800b6bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6c0:	fe77 7a06 	vselgt.f32	s15, s14, s12
 800b6c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b6cc:	ee17 3a90 	vmov	r3, s15
 800b6d0:	f303 030f 	ssat	r3, #16, r3
 800b6d4:	3a01      	subs	r2, #1
 800b6d6:	800b      	strh	r3, [r1, #0]
 800b6d8:	d027      	beq.n	800b72a <arm_float_to_q15+0x166>
 800b6da:	edd0 7a01 	vldr	s15, [r0, #4]
 800b6de:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b6e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b6e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6ea:	fe77 6a06 	vselgt.f32	s13, s14, s12
 800b6ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b6f6:	ee17 3a90 	vmov	r3, s15
 800b6fa:	f303 030f 	ssat	r3, #16, r3
 800b6fe:	2a01      	cmp	r2, #1
 800b700:	804b      	strh	r3, [r1, #2]
 800b702:	d012      	beq.n	800b72a <arm_float_to_q15+0x166>
 800b704:	edd0 7a02 	vldr	s15, [r0, #8]
 800b708:	ee67 5aa5 	vmul.f32	s11, s15, s11
 800b70c:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 800b710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b714:	fe37 7a06 	vselgt.f32	s14, s14, s12
 800b718:	ee37 7a25 	vadd.f32	s14, s14, s11
 800b71c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800b720:	ee17 3a10 	vmov	r3, s14
 800b724:	f303 030f 	ssat	r3, #16, r3
 800b728:	808b      	strh	r3, [r1, #4]
 800b72a:	bd30      	pop	{r4, r5, pc}
 800b72c:	47000000 	.word	0x47000000

0800b730 <arm_float_to_q7>:
 800b730:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b732:	0895      	lsrs	r5, r2, #2
 800b734:	d06f      	beq.n	800b816 <arm_float_to_q7+0xe6>
 800b736:	f101 0c04 	add.w	ip, r1, #4
 800b73a:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800b73e:	eebe 5a00 	vmov.f32	s10, #224	@ 0xbf000000 -0.5
 800b742:	f100 0e10 	add.w	lr, r0, #16
 800b746:	eddf 5a5f 	vldr	s11, [pc, #380]	@ 800b8c4 <arm_float_to_q7+0x194>
 800b74a:	00ae      	lsls	r6, r5, #2
 800b74c:	eb0c 0485 	add.w	r4, ip, r5, lsl #2
 800b750:	ed5e 7a04 	vldr	s15, [lr, #-16]
 800b754:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800b758:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800b75c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b760:	fe76 7a05 	vselgt.f32	s15, s12, s10
 800b764:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b768:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b76c:	ee17 3a90 	vmov	r3, s15
 800b770:	b21b      	sxth	r3, r3
 800b772:	f303 0307 	ssat	r3, #8, r3
 800b776:	f80c 3c04 	strb.w	r3, [ip, #-4]
 800b77a:	ed5e 7a03 	vldr	s15, [lr, #-12]
 800b77e:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800b782:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800b786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b78a:	fe76 7a05 	vselgt.f32	s15, s12, s10
 800b78e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b792:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b796:	ee17 3a90 	vmov	r3, s15
 800b79a:	b21b      	sxth	r3, r3
 800b79c:	f303 0307 	ssat	r3, #8, r3
 800b7a0:	f80c 3c03 	strb.w	r3, [ip, #-3]
 800b7a4:	ed5e 7a02 	vldr	s15, [lr, #-8]
 800b7a8:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800b7ac:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800b7b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7b4:	fe76 7a05 	vselgt.f32	s15, s12, s10
 800b7b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b7bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b7c0:	ee17 3a90 	vmov	r3, s15
 800b7c4:	b21b      	sxth	r3, r3
 800b7c6:	f303 0307 	ssat	r3, #8, r3
 800b7ca:	f80c 3c02 	strb.w	r3, [ip, #-2]
 800b7ce:	ed5e 6a01 	vldr	s13, [lr, #-4]
 800b7d2:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800b7d6:	ee76 7a86 	vadd.f32	s15, s13, s12
 800b7da:	ee36 7ac6 	vsub.f32	s14, s13, s12
 800b7de:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800b7e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b7e6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800b7ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7ee:	ee17 3a90 	vmov	r3, s15
 800b7f2:	ee17 7a10 	vmov	r7, s14
 800b7f6:	b21b      	sxth	r3, r3
 800b7f8:	b23f      	sxth	r7, r7
 800b7fa:	dd56      	ble.n	800b8aa <arm_float_to_q7+0x17a>
 800b7fc:	f303 0307 	ssat	r3, #8, r3
 800b800:	f80c 3c01 	strb.w	r3, [ip, #-1]
 800b804:	f10c 0c04 	add.w	ip, ip, #4
 800b808:	f10e 0e10 	add.w	lr, lr, #16
 800b80c:	4564      	cmp	r4, ip
 800b80e:	d19f      	bne.n	800b750 <arm_float_to_q7+0x20>
 800b810:	4431      	add	r1, r6
 800b812:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800b816:	f012 0203 	ands.w	r2, r2, #3
 800b81a:	d045      	beq.n	800b8a8 <arm_float_to_q7+0x178>
 800b81c:	edd0 7a00 	vldr	s15, [r0]
 800b820:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800b824:	ed9f 5a27 	vldr	s10, [pc, #156]	@ 800b8c4 <arm_float_to_q7+0x194>
 800b828:	eefe 5a00 	vmov.f32	s11, #224	@ 0xbf000000 -0.5
 800b82c:	ee67 6a85 	vmul.f32	s13, s15, s10
 800b830:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800b834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b838:	fe77 7a25 	vselgt.f32	s15, s14, s11
 800b83c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b840:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b844:	ee17 3a90 	vmov	r3, s15
 800b848:	b21b      	sxth	r3, r3
 800b84a:	f303 0307 	ssat	r3, #8, r3
 800b84e:	3a01      	subs	r2, #1
 800b850:	700b      	strb	r3, [r1, #0]
 800b852:	d029      	beq.n	800b8a8 <arm_float_to_q7+0x178>
 800b854:	edd0 6a01 	vldr	s13, [r0, #4]
 800b858:	ee26 6a85 	vmul.f32	s12, s13, s10
 800b85c:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 800b860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b864:	fe77 6a25 	vselgt.f32	s13, s14, s11
 800b868:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b86c:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800b870:	ee16 3a90 	vmov	r3, s13
 800b874:	b21b      	sxth	r3, r3
 800b876:	f303 0307 	ssat	r3, #8, r3
 800b87a:	2a01      	cmp	r2, #1
 800b87c:	704b      	strb	r3, [r1, #1]
 800b87e:	d013      	beq.n	800b8a8 <arm_float_to_q7+0x178>
 800b880:	edd0 7a02 	vldr	s15, [r0, #8]
 800b884:	ee27 5a85 	vmul.f32	s10, s15, s10
 800b888:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 800b88c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b890:	fe77 7a25 	vselgt.f32	s15, s14, s11
 800b894:	ee77 7a85 	vadd.f32	s15, s15, s10
 800b898:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b89c:	ee17 3a90 	vmov	r3, s15
 800b8a0:	b21b      	sxth	r3, r3
 800b8a2:	f303 0307 	ssat	r3, #8, r3
 800b8a6:	708b      	strb	r3, [r1, #2]
 800b8a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8aa:	f307 0707 	ssat	r7, #8, r7
 800b8ae:	f80c 7c01 	strb.w	r7, [ip, #-1]
 800b8b2:	f10c 0c04 	add.w	ip, ip, #4
 800b8b6:	f10e 0e10 	add.w	lr, lr, #16
 800b8ba:	45a4      	cmp	ip, r4
 800b8bc:	f47f af48 	bne.w	800b750 <arm_float_to_q7+0x20>
 800b8c0:	e7a6      	b.n	800b810 <arm_float_to_q7+0xe0>
 800b8c2:	bf00      	nop
 800b8c4:	43000000 	.word	0x43000000

0800b8c8 <arm_q15_to_float>:
 800b8c8:	b530      	push	{r4, r5, lr}
 800b8ca:	0894      	lsrs	r4, r2, #2
 800b8cc:	d038      	beq.n	800b940 <arm_q15_to_float+0x78>
 800b8ce:	f100 0c08 	add.w	ip, r0, #8
 800b8d2:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800b990 <arm_q15_to_float+0xc8>
 800b8d6:	f101 0310 	add.w	r3, r1, #16
 800b8da:	46a6      	mov	lr, r4
 800b8dc:	f93c 5c08 	ldrsh.w	r5, [ip, #-8]
 800b8e0:	3310      	adds	r3, #16
 800b8e2:	f10c 0c08 	add.w	ip, ip, #8
 800b8e6:	f1be 0e01 	subs.w	lr, lr, #1
 800b8ea:	ee07 5a90 	vmov	s15, r5
 800b8ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b8f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b8f6:	ed43 7a08 	vstr	s15, [r3, #-32]	@ 0xffffffe0
 800b8fa:	f93c 5c0e 	ldrsh.w	r5, [ip, #-14]
 800b8fe:	ee07 5a90 	vmov	s15, r5
 800b902:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b906:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b90a:	ed43 7a07 	vstr	s15, [r3, #-28]	@ 0xffffffe4
 800b90e:	f93c 5c0c 	ldrsh.w	r5, [ip, #-12]
 800b912:	ee07 5a90 	vmov	s15, r5
 800b916:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b91a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b91e:	ed43 7a06 	vstr	s15, [r3, #-24]	@ 0xffffffe8
 800b922:	f93c 5c0a 	ldrsh.w	r5, [ip, #-10]
 800b926:	ee07 5a90 	vmov	s15, r5
 800b92a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b92e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b932:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 800b936:	d1d1      	bne.n	800b8dc <arm_q15_to_float+0x14>
 800b938:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 800b93c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800b940:	f012 0203 	ands.w	r2, r2, #3
 800b944:	d023      	beq.n	800b98e <arm_q15_to_float+0xc6>
 800b946:	f9b0 3000 	ldrsh.w	r3, [r0]
 800b94a:	3a01      	subs	r2, #1
 800b94c:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800b990 <arm_q15_to_float+0xc8>
 800b950:	ee07 3a90 	vmov	s15, r3
 800b954:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b958:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b95c:	edc1 7a00 	vstr	s15, [r1]
 800b960:	d015      	beq.n	800b98e <arm_q15_to_float+0xc6>
 800b962:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800b966:	2a01      	cmp	r2, #1
 800b968:	ee07 3a90 	vmov	s15, r3
 800b96c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b970:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b974:	edc1 7a01 	vstr	s15, [r1, #4]
 800b978:	d009      	beq.n	800b98e <arm_q15_to_float+0xc6>
 800b97a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800b97e:	ee07 3a90 	vmov	s15, r3
 800b982:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b986:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b98a:	edc1 7a02 	vstr	s15, [r1, #8]
 800b98e:	bd30      	pop	{r4, r5, pc}
 800b990:	38000000 	.word	0x38000000

0800b994 <arm_q7_to_float>:
 800b994:	b530      	push	{r4, r5, lr}
 800b996:	0894      	lsrs	r4, r2, #2
 800b998:	d036      	beq.n	800ba08 <arm_q7_to_float+0x74>
 800b99a:	1d03      	adds	r3, r0, #4
 800b99c:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800b9a0:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 800ba58 <arm_q7_to_float+0xc4>
 800b9a4:	f101 0010 	add.w	r0, r1, #16
 800b9a8:	f913 ec04 	ldrsb.w	lr, [r3, #-4]
 800b9ac:	3010      	adds	r0, #16
 800b9ae:	ee07 ea90 	vmov	s15, lr
 800b9b2:	469e      	mov	lr, r3
 800b9b4:	3304      	adds	r3, #4
 800b9b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b9ba:	45e6      	cmp	lr, ip
 800b9bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b9c0:	ed40 7a08 	vstr	s15, [r0, #-32]	@ 0xffffffe0
 800b9c4:	f913 5c07 	ldrsb.w	r5, [r3, #-7]
 800b9c8:	ee07 5a90 	vmov	s15, r5
 800b9cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b9d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b9d4:	ed40 7a07 	vstr	s15, [r0, #-28]	@ 0xffffffe4
 800b9d8:	f913 5c06 	ldrsb.w	r5, [r3, #-6]
 800b9dc:	ee07 5a90 	vmov	s15, r5
 800b9e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b9e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b9e8:	ed40 7a06 	vstr	s15, [r0, #-24]	@ 0xffffffe8
 800b9ec:	f913 5c05 	ldrsb.w	r5, [r3, #-5]
 800b9f0:	ee07 5a90 	vmov	s15, r5
 800b9f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b9f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b9fc:	ed40 7a05 	vstr	s15, [r0, #-20]	@ 0xffffffec
 800ba00:	d1d2      	bne.n	800b9a8 <arm_q7_to_float+0x14>
 800ba02:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 800ba06:	4660      	mov	r0, ip
 800ba08:	f012 0203 	ands.w	r2, r2, #3
 800ba0c:	d023      	beq.n	800ba56 <arm_q7_to_float+0xc2>
 800ba0e:	f990 3000 	ldrsb.w	r3, [r0]
 800ba12:	3a01      	subs	r2, #1
 800ba14:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800ba58 <arm_q7_to_float+0xc4>
 800ba18:	ee07 3a90 	vmov	s15, r3
 800ba1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba20:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ba24:	edc1 7a00 	vstr	s15, [r1]
 800ba28:	d015      	beq.n	800ba56 <arm_q7_to_float+0xc2>
 800ba2a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800ba2e:	2a01      	cmp	r2, #1
 800ba30:	ee07 3a90 	vmov	s15, r3
 800ba34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba38:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ba3c:	edc1 7a01 	vstr	s15, [r1, #4]
 800ba40:	d009      	beq.n	800ba56 <arm_q7_to_float+0xc2>
 800ba42:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800ba46:	ee07 3a90 	vmov	s15, r3
 800ba4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ba52:	edc1 7a02 	vstr	s15, [r1, #8]
 800ba56:	bd30      	pop	{r4, r5, pc}
 800ba58:	3c000000 	.word	0x3c000000

0800ba5c <ai_array_to_buffer_fmt>:
 800ba5c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800ba60:	2b02      	cmp	r3, #2
 800ba62:	d050      	beq.n	800bb06 <ai_array_to_buffer_fmt+0xaa>
 800ba64:	f020 427e 	bic.w	r2, r0, #4261412864	@ 0xfe000000
 800ba68:	4b29      	ldr	r3, [pc, #164]	@ (800bb10 <ai_array_to_buffer_fmt+0xb4>)
 800ba6a:	429a      	cmp	r2, r3
 800ba6c:	d00b      	beq.n	800ba86 <ai_array_to_buffer_fmt+0x2a>
 800ba6e:	dc1c      	bgt.n	800baaa <ai_array_to_buffer_fmt+0x4e>
 800ba70:	4b28      	ldr	r3, [pc, #160]	@ (800bb14 <ai_array_to_buffer_fmt+0xb8>)
 800ba72:	429a      	cmp	r2, r3
 800ba74:	d007      	beq.n	800ba86 <ai_array_to_buffer_fmt+0x2a>
 800ba76:	dd0b      	ble.n	800ba90 <ai_array_to_buffer_fmt+0x34>
 800ba78:	4b27      	ldr	r3, [pc, #156]	@ (800bb18 <ai_array_to_buffer_fmt+0xbc>)
 800ba7a:	429a      	cmp	r2, r3
 800ba7c:	d003      	beq.n	800ba86 <ai_array_to_buffer_fmt+0x2a>
 800ba7e:	f503 33fa 	add.w	r3, r3, #128000	@ 0x1f400
 800ba82:	429a      	cmp	r2, r3
 800ba84:	d131      	bne.n	800baea <ai_array_to_buffer_fmt+0x8e>
 800ba86:	4613      	mov	r3, r2
 800ba88:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800ba8c:	4318      	orrs	r0, r3
 800ba8e:	4770      	bx	lr
 800ba90:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800ba94:	429a      	cmp	r2, r3
 800ba96:	d0f6      	beq.n	800ba86 <ai_array_to_buffer_fmt+0x2a>
 800ba98:	dd2c      	ble.n	800baf4 <ai_array_to_buffer_fmt+0x98>
 800ba9a:	4b20      	ldr	r3, [pc, #128]	@ (800bb1c <ai_array_to_buffer_fmt+0xc0>)
 800ba9c:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800baa0:	429a      	cmp	r2, r3
 800baa2:	bf18      	it	ne
 800baa4:	2340      	movne	r3, #64	@ 0x40
 800baa6:	4318      	orrs	r0, r3
 800baa8:	4770      	bx	lr
 800baaa:	4b1d      	ldr	r3, [pc, #116]	@ (800bb20 <ai_array_to_buffer_fmt+0xc4>)
 800baac:	429a      	cmp	r2, r3
 800baae:	d0ea      	beq.n	800ba86 <ai_array_to_buffer_fmt+0x2a>
 800bab0:	dd0e      	ble.n	800bad0 <ai_array_to_buffer_fmt+0x74>
 800bab2:	4b1c      	ldr	r3, [pc, #112]	@ (800bb24 <ai_array_to_buffer_fmt+0xc8>)
 800bab4:	429a      	cmp	r2, r3
 800bab6:	d0e6      	beq.n	800ba86 <ai_array_to_buffer_fmt+0x2a>
 800bab8:	f503 037e 	add.w	r3, r3, #16646144	@ 0xfe0000
 800babc:	429a      	cmp	r2, r3
 800babe:	d0e2      	beq.n	800ba86 <ai_array_to_buffer_fmt+0x2a>
 800bac0:	4b19      	ldr	r3, [pc, #100]	@ (800bb28 <ai_array_to_buffer_fmt+0xcc>)
 800bac2:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800bac6:	429a      	cmp	r2, r3
 800bac8:	bf18      	it	ne
 800baca:	2340      	movne	r3, #64	@ 0x40
 800bacc:	4318      	orrs	r0, r3
 800bace:	4770      	bx	lr
 800bad0:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800bad4:	429a      	cmp	r2, r3
 800bad6:	d0d6      	beq.n	800ba86 <ai_array_to_buffer_fmt+0x2a>
 800bad8:	3307      	adds	r3, #7
 800bada:	429a      	cmp	r2, r3
 800badc:	d0d3      	beq.n	800ba86 <ai_array_to_buffer_fmt+0x2a>
 800bade:	f2a3 3387 	subw	r3, r3, #903	@ 0x387
 800bae2:	429a      	cmp	r2, r3
 800bae4:	bf18      	it	ne
 800bae6:	2340      	movne	r3, #64	@ 0x40
 800bae8:	e7ce      	b.n	800ba88 <ai_array_to_buffer_fmt+0x2c>
 800baea:	4b10      	ldr	r3, [pc, #64]	@ (800bb2c <ai_array_to_buffer_fmt+0xd0>)
 800baec:	429a      	cmp	r2, r3
 800baee:	bf18      	it	ne
 800baf0:	2340      	movne	r3, #64	@ 0x40
 800baf2:	e7c9      	b.n	800ba88 <ai_array_to_buffer_fmt+0x2c>
 800baf4:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800baf8:	429a      	cmp	r2, r3
 800bafa:	d0c4      	beq.n	800ba86 <ai_array_to_buffer_fmt+0x2a>
 800bafc:	3380      	adds	r3, #128	@ 0x80
 800bafe:	429a      	cmp	r2, r3
 800bb00:	bf18      	it	ne
 800bb02:	2340      	movne	r3, #64	@ 0x40
 800bb04:	e7c0      	b.n	800ba88 <ai_array_to_buffer_fmt+0x2c>
 800bb06:	4b0a      	ldr	r3, [pc, #40]	@ (800bb30 <ai_array_to_buffer_fmt+0xd4>)
 800bb08:	4003      	ands	r3, r0
 800bb0a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800bb0e:	e7bb      	b.n	800ba88 <ai_array_to_buffer_fmt+0x2c>
 800bb10:	00840040 	.word	0x00840040
 800bb14:	00040840 	.word	0x00040840
 800bb18:	00041040 	.word	0x00041040
 800bb1c:	00040447 	.word	0x00040447
 800bb20:	00840840 	.word	0x00840840
 800bb24:	00841040 	.word	0x00841040
 800bb28:	0084084f 	.word	0x0084084f
 800bb2c:	0004084f 	.word	0x0004084f
 800bb30:	00803fff 	.word	0x00803fff

0800bb34 <ai_array_get_byte_size>:
 800bb34:	b319      	cbz	r1, 800bb7e <ai_array_get_byte_size+0x4a>
 800bb36:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800bb3a:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800bb3e:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 800bb42:	11c0      	asrs	r0, r0, #7
 800bb44:	fb03 f101 	mul.w	r1, r3, r1
 800bb48:	2a04      	cmp	r2, #4
 800bb4a:	f101 0107 	add.w	r1, r1, #7
 800bb4e:	f021 0107 	bic.w	r1, r1, #7
 800bb52:	fa21 f10c 	lsr.w	r1, r1, ip
 800bb56:	d00b      	beq.n	800bb70 <ai_array_get_byte_size+0x3c>
 800bb58:	2a08      	cmp	r2, #8
 800bb5a:	d002      	beq.n	800bb62 <ai_array_get_byte_size+0x2e>
 800bb5c:	3107      	adds	r1, #7
 800bb5e:	08c8      	lsrs	r0, r1, #3
 800bb60:	4770      	bx	lr
 800bb62:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 800bb66:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800bb6a:	3107      	adds	r1, #7
 800bb6c:	08c8      	lsrs	r0, r1, #3
 800bb6e:	4770      	bx	lr
 800bb70:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 800bb74:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 800bb78:	3107      	adds	r1, #7
 800bb7a:	08c8      	lsrs	r0, r1, #3
 800bb7c:	4770      	bx	lr
 800bb7e:	4608      	mov	r0, r1
 800bb80:	4770      	bx	lr
 800bb82:	bf00      	nop

0800bb84 <ai_array_get_data_byte_size>:
 800bb84:	b161      	cbz	r1, 800bba0 <ai_array_get_data_byte_size+0x1c>
 800bb86:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800bb8a:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800bb8e:	fb03 f101 	mul.w	r1, r3, r1
 800bb92:	1dc8      	adds	r0, r1, #7
 800bb94:	f020 0007 	bic.w	r0, r0, #7
 800bb98:	40d0      	lsrs	r0, r2
 800bb9a:	3007      	adds	r0, #7
 800bb9c:	08c0      	lsrs	r0, r0, #3
 800bb9e:	4770      	bx	lr
 800bba0:	4608      	mov	r0, r1
 800bba2:	4770      	bx	lr

0800bba4 <ai_version_get>:
 800bba4:	0212      	lsls	r2, r2, #8
 800bba6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800bbaa:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800bbae:	4770      	bx	lr

0800bbb0 <get_tensor_byte_size>:
 800bbb0:	b430      	push	{r4, r5}
 800bbb2:	6985      	ldr	r5, [r0, #24]
 800bbb4:	68c4      	ldr	r4, [r0, #12]
 800bbb6:	6941      	ldr	r1, [r0, #20]
 800bbb8:	4b06      	ldr	r3, [pc, #24]	@ (800bbd4 <get_tensor_byte_size+0x24>)
 800bbba:	6828      	ldr	r0, [r5, #0]
 800bbbc:	4a06      	ldr	r2, [pc, #24]	@ (800bbd8 <get_tensor_byte_size+0x28>)
 800bbbe:	4003      	ands	r3, r0
 800bbc0:	68c9      	ldr	r1, [r1, #12]
 800bbc2:	68e0      	ldr	r0, [r4, #12]
 800bbc4:	4293      	cmp	r3, r2
 800bbc6:	fb01 f000 	mul.w	r0, r1, r0
 800bbca:	d101      	bne.n	800bbd0 <get_tensor_byte_size+0x20>
 800bbcc:	3007      	adds	r0, #7
 800bbce:	08c0      	lsrs	r0, r0, #3
 800bbd0:	bc30      	pop	{r4, r5}
 800bbd2:	4770      	bx	lr
 800bbd4:	017fffff 	.word	0x017fffff
 800bbd8:	000400c0 	.word	0x000400c0

0800bbdc <core_tensor_clone>:
 800bbdc:	680b      	ldr	r3, [r1, #0]
 800bbde:	6882      	ldr	r2, [r0, #8]
 800bbe0:	6003      	str	r3, [r0, #0]
 800bbe2:	684b      	ldr	r3, [r1, #4]
 800bbe4:	6043      	str	r3, [r0, #4]
 800bbe6:	698b      	ldr	r3, [r1, #24]
 800bbe8:	6183      	str	r3, [r0, #24]
 800bbea:	688b      	ldr	r3, [r1, #8]
 800bbec:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800bbf0:	f363 221f 	bfi	r2, r3, #8, #24
 800bbf4:	b410      	push	{r4}
 800bbf6:	6082      	str	r2, [r0, #8]
 800bbf8:	b15b      	cbz	r3, 800bc12 <core_tensor_clone+0x36>
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	68cc      	ldr	r4, [r1, #12]
 800bbfe:	68c2      	ldr	r2, [r0, #12]
 800bc00:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 800bc04:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 800bc08:	3301      	adds	r3, #1
 800bc0a:	6882      	ldr	r2, [r0, #8]
 800bc0c:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 800bc10:	d3f4      	bcc.n	800bbfc <core_tensor_clone+0x20>
 800bc12:	690b      	ldr	r3, [r1, #16]
 800bc14:	6902      	ldr	r2, [r0, #16]
 800bc16:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800bc1a:	f363 221f 	bfi	r2, r3, #8, #24
 800bc1e:	6102      	str	r2, [r0, #16]
 800bc20:	b15b      	cbz	r3, 800bc3a <core_tensor_clone+0x5e>
 800bc22:	2300      	movs	r3, #0
 800bc24:	694c      	ldr	r4, [r1, #20]
 800bc26:	6942      	ldr	r2, [r0, #20]
 800bc28:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 800bc2c:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 800bc30:	3301      	adds	r3, #1
 800bc32:	6902      	ldr	r2, [r0, #16]
 800bc34:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 800bc38:	d3f4      	bcc.n	800bc24 <core_tensor_clone+0x48>
 800bc3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc3e:	4770      	bx	lr

0800bc40 <core_array_clone>:
 800bc40:	4684      	mov	ip, r0
 800bc42:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 800bc44:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800bc48:	4770      	bx	lr
 800bc4a:	bf00      	nop

0800bc4c <malloc>:
 800bc4c:	4b02      	ldr	r3, [pc, #8]	@ (800bc58 <malloc+0xc>)
 800bc4e:	4601      	mov	r1, r0
 800bc50:	6818      	ldr	r0, [r3, #0]
 800bc52:	f000 b825 	b.w	800bca0 <_malloc_r>
 800bc56:	bf00      	nop
 800bc58:	24000b5c 	.word	0x24000b5c

0800bc5c <sbrk_aligned>:
 800bc5c:	b570      	push	{r4, r5, r6, lr}
 800bc5e:	4e0f      	ldr	r6, [pc, #60]	@ (800bc9c <sbrk_aligned+0x40>)
 800bc60:	460c      	mov	r4, r1
 800bc62:	6831      	ldr	r1, [r6, #0]
 800bc64:	4605      	mov	r5, r0
 800bc66:	b911      	cbnz	r1, 800bc6e <sbrk_aligned+0x12>
 800bc68:	f000 fe98 	bl	800c99c <_sbrk_r>
 800bc6c:	6030      	str	r0, [r6, #0]
 800bc6e:	4621      	mov	r1, r4
 800bc70:	4628      	mov	r0, r5
 800bc72:	f000 fe93 	bl	800c99c <_sbrk_r>
 800bc76:	1c43      	adds	r3, r0, #1
 800bc78:	d103      	bne.n	800bc82 <sbrk_aligned+0x26>
 800bc7a:	f04f 34ff 	mov.w	r4, #4294967295
 800bc7e:	4620      	mov	r0, r4
 800bc80:	bd70      	pop	{r4, r5, r6, pc}
 800bc82:	1cc4      	adds	r4, r0, #3
 800bc84:	f024 0403 	bic.w	r4, r4, #3
 800bc88:	42a0      	cmp	r0, r4
 800bc8a:	d0f8      	beq.n	800bc7e <sbrk_aligned+0x22>
 800bc8c:	1a21      	subs	r1, r4, r0
 800bc8e:	4628      	mov	r0, r5
 800bc90:	f000 fe84 	bl	800c99c <_sbrk_r>
 800bc94:	3001      	adds	r0, #1
 800bc96:	d1f2      	bne.n	800bc7e <sbrk_aligned+0x22>
 800bc98:	e7ef      	b.n	800bc7a <sbrk_aligned+0x1e>
 800bc9a:	bf00      	nop
 800bc9c:	240691a4 	.word	0x240691a4

0800bca0 <_malloc_r>:
 800bca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bca4:	1ccd      	adds	r5, r1, #3
 800bca6:	f025 0503 	bic.w	r5, r5, #3
 800bcaa:	3508      	adds	r5, #8
 800bcac:	2d0c      	cmp	r5, #12
 800bcae:	bf38      	it	cc
 800bcb0:	250c      	movcc	r5, #12
 800bcb2:	2d00      	cmp	r5, #0
 800bcb4:	4606      	mov	r6, r0
 800bcb6:	db01      	blt.n	800bcbc <_malloc_r+0x1c>
 800bcb8:	42a9      	cmp	r1, r5
 800bcba:	d904      	bls.n	800bcc6 <_malloc_r+0x26>
 800bcbc:	230c      	movs	r3, #12
 800bcbe:	6033      	str	r3, [r6, #0]
 800bcc0:	2000      	movs	r0, #0
 800bcc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcc6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bd9c <_malloc_r+0xfc>
 800bcca:	f000 f869 	bl	800bda0 <__malloc_lock>
 800bcce:	f8d8 3000 	ldr.w	r3, [r8]
 800bcd2:	461c      	mov	r4, r3
 800bcd4:	bb44      	cbnz	r4, 800bd28 <_malloc_r+0x88>
 800bcd6:	4629      	mov	r1, r5
 800bcd8:	4630      	mov	r0, r6
 800bcda:	f7ff ffbf 	bl	800bc5c <sbrk_aligned>
 800bcde:	1c43      	adds	r3, r0, #1
 800bce0:	4604      	mov	r4, r0
 800bce2:	d158      	bne.n	800bd96 <_malloc_r+0xf6>
 800bce4:	f8d8 4000 	ldr.w	r4, [r8]
 800bce8:	4627      	mov	r7, r4
 800bcea:	2f00      	cmp	r7, #0
 800bcec:	d143      	bne.n	800bd76 <_malloc_r+0xd6>
 800bcee:	2c00      	cmp	r4, #0
 800bcf0:	d04b      	beq.n	800bd8a <_malloc_r+0xea>
 800bcf2:	6823      	ldr	r3, [r4, #0]
 800bcf4:	4639      	mov	r1, r7
 800bcf6:	4630      	mov	r0, r6
 800bcf8:	eb04 0903 	add.w	r9, r4, r3
 800bcfc:	f000 fe4e 	bl	800c99c <_sbrk_r>
 800bd00:	4581      	cmp	r9, r0
 800bd02:	d142      	bne.n	800bd8a <_malloc_r+0xea>
 800bd04:	6821      	ldr	r1, [r4, #0]
 800bd06:	1a6d      	subs	r5, r5, r1
 800bd08:	4629      	mov	r1, r5
 800bd0a:	4630      	mov	r0, r6
 800bd0c:	f7ff ffa6 	bl	800bc5c <sbrk_aligned>
 800bd10:	3001      	adds	r0, #1
 800bd12:	d03a      	beq.n	800bd8a <_malloc_r+0xea>
 800bd14:	6823      	ldr	r3, [r4, #0]
 800bd16:	442b      	add	r3, r5
 800bd18:	6023      	str	r3, [r4, #0]
 800bd1a:	f8d8 3000 	ldr.w	r3, [r8]
 800bd1e:	685a      	ldr	r2, [r3, #4]
 800bd20:	bb62      	cbnz	r2, 800bd7c <_malloc_r+0xdc>
 800bd22:	f8c8 7000 	str.w	r7, [r8]
 800bd26:	e00f      	b.n	800bd48 <_malloc_r+0xa8>
 800bd28:	6822      	ldr	r2, [r4, #0]
 800bd2a:	1b52      	subs	r2, r2, r5
 800bd2c:	d420      	bmi.n	800bd70 <_malloc_r+0xd0>
 800bd2e:	2a0b      	cmp	r2, #11
 800bd30:	d917      	bls.n	800bd62 <_malloc_r+0xc2>
 800bd32:	1961      	adds	r1, r4, r5
 800bd34:	42a3      	cmp	r3, r4
 800bd36:	6025      	str	r5, [r4, #0]
 800bd38:	bf18      	it	ne
 800bd3a:	6059      	strne	r1, [r3, #4]
 800bd3c:	6863      	ldr	r3, [r4, #4]
 800bd3e:	bf08      	it	eq
 800bd40:	f8c8 1000 	streq.w	r1, [r8]
 800bd44:	5162      	str	r2, [r4, r5]
 800bd46:	604b      	str	r3, [r1, #4]
 800bd48:	4630      	mov	r0, r6
 800bd4a:	f000 f82f 	bl	800bdac <__malloc_unlock>
 800bd4e:	f104 000b 	add.w	r0, r4, #11
 800bd52:	1d23      	adds	r3, r4, #4
 800bd54:	f020 0007 	bic.w	r0, r0, #7
 800bd58:	1ac2      	subs	r2, r0, r3
 800bd5a:	bf1c      	itt	ne
 800bd5c:	1a1b      	subne	r3, r3, r0
 800bd5e:	50a3      	strne	r3, [r4, r2]
 800bd60:	e7af      	b.n	800bcc2 <_malloc_r+0x22>
 800bd62:	6862      	ldr	r2, [r4, #4]
 800bd64:	42a3      	cmp	r3, r4
 800bd66:	bf0c      	ite	eq
 800bd68:	f8c8 2000 	streq.w	r2, [r8]
 800bd6c:	605a      	strne	r2, [r3, #4]
 800bd6e:	e7eb      	b.n	800bd48 <_malloc_r+0xa8>
 800bd70:	4623      	mov	r3, r4
 800bd72:	6864      	ldr	r4, [r4, #4]
 800bd74:	e7ae      	b.n	800bcd4 <_malloc_r+0x34>
 800bd76:	463c      	mov	r4, r7
 800bd78:	687f      	ldr	r7, [r7, #4]
 800bd7a:	e7b6      	b.n	800bcea <_malloc_r+0x4a>
 800bd7c:	461a      	mov	r2, r3
 800bd7e:	685b      	ldr	r3, [r3, #4]
 800bd80:	42a3      	cmp	r3, r4
 800bd82:	d1fb      	bne.n	800bd7c <_malloc_r+0xdc>
 800bd84:	2300      	movs	r3, #0
 800bd86:	6053      	str	r3, [r2, #4]
 800bd88:	e7de      	b.n	800bd48 <_malloc_r+0xa8>
 800bd8a:	230c      	movs	r3, #12
 800bd8c:	6033      	str	r3, [r6, #0]
 800bd8e:	4630      	mov	r0, r6
 800bd90:	f000 f80c 	bl	800bdac <__malloc_unlock>
 800bd94:	e794      	b.n	800bcc0 <_malloc_r+0x20>
 800bd96:	6005      	str	r5, [r0, #0]
 800bd98:	e7d6      	b.n	800bd48 <_malloc_r+0xa8>
 800bd9a:	bf00      	nop
 800bd9c:	240691a8 	.word	0x240691a8

0800bda0 <__malloc_lock>:
 800bda0:	4801      	ldr	r0, [pc, #4]	@ (800bda8 <__malloc_lock+0x8>)
 800bda2:	f000 be48 	b.w	800ca36 <__retarget_lock_acquire_recursive>
 800bda6:	bf00      	nop
 800bda8:	240692ec 	.word	0x240692ec

0800bdac <__malloc_unlock>:
 800bdac:	4801      	ldr	r0, [pc, #4]	@ (800bdb4 <__malloc_unlock+0x8>)
 800bdae:	f000 be43 	b.w	800ca38 <__retarget_lock_release_recursive>
 800bdb2:	bf00      	nop
 800bdb4:	240692ec 	.word	0x240692ec

0800bdb8 <_realloc_r>:
 800bdb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdbc:	4680      	mov	r8, r0
 800bdbe:	4615      	mov	r5, r2
 800bdc0:	460c      	mov	r4, r1
 800bdc2:	b921      	cbnz	r1, 800bdce <_realloc_r+0x16>
 800bdc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bdc8:	4611      	mov	r1, r2
 800bdca:	f7ff bf69 	b.w	800bca0 <_malloc_r>
 800bdce:	b92a      	cbnz	r2, 800bddc <_realloc_r+0x24>
 800bdd0:	f001 fc28 	bl	800d624 <_free_r>
 800bdd4:	2400      	movs	r4, #0
 800bdd6:	4620      	mov	r0, r4
 800bdd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bddc:	f001 ffee 	bl	800ddbc <_malloc_usable_size_r>
 800bde0:	4285      	cmp	r5, r0
 800bde2:	4606      	mov	r6, r0
 800bde4:	d802      	bhi.n	800bdec <_realloc_r+0x34>
 800bde6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bdea:	d8f4      	bhi.n	800bdd6 <_realloc_r+0x1e>
 800bdec:	4629      	mov	r1, r5
 800bdee:	4640      	mov	r0, r8
 800bdf0:	f7ff ff56 	bl	800bca0 <_malloc_r>
 800bdf4:	4607      	mov	r7, r0
 800bdf6:	2800      	cmp	r0, #0
 800bdf8:	d0ec      	beq.n	800bdd4 <_realloc_r+0x1c>
 800bdfa:	42b5      	cmp	r5, r6
 800bdfc:	462a      	mov	r2, r5
 800bdfe:	4621      	mov	r1, r4
 800be00:	bf28      	it	cs
 800be02:	4632      	movcs	r2, r6
 800be04:	f000 fe21 	bl	800ca4a <memcpy>
 800be08:	4621      	mov	r1, r4
 800be0a:	4640      	mov	r0, r8
 800be0c:	f001 fc0a 	bl	800d624 <_free_r>
 800be10:	463c      	mov	r4, r7
 800be12:	e7e0      	b.n	800bdd6 <_realloc_r+0x1e>

0800be14 <__cvt>:
 800be14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be16:	ed2d 8b02 	vpush	{d8}
 800be1a:	eeb0 8b40 	vmov.f64	d8, d0
 800be1e:	b085      	sub	sp, #20
 800be20:	4617      	mov	r7, r2
 800be22:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800be24:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800be26:	ee18 2a90 	vmov	r2, s17
 800be2a:	f025 0520 	bic.w	r5, r5, #32
 800be2e:	2a00      	cmp	r2, #0
 800be30:	bfb6      	itet	lt
 800be32:	222d      	movlt	r2, #45	@ 0x2d
 800be34:	2200      	movge	r2, #0
 800be36:	eeb1 8b40 	vneglt.f64	d8, d0
 800be3a:	2d46      	cmp	r5, #70	@ 0x46
 800be3c:	460c      	mov	r4, r1
 800be3e:	701a      	strb	r2, [r3, #0]
 800be40:	d004      	beq.n	800be4c <__cvt+0x38>
 800be42:	2d45      	cmp	r5, #69	@ 0x45
 800be44:	d100      	bne.n	800be48 <__cvt+0x34>
 800be46:	3401      	adds	r4, #1
 800be48:	2102      	movs	r1, #2
 800be4a:	e000      	b.n	800be4e <__cvt+0x3a>
 800be4c:	2103      	movs	r1, #3
 800be4e:	ab03      	add	r3, sp, #12
 800be50:	9301      	str	r3, [sp, #4]
 800be52:	ab02      	add	r3, sp, #8
 800be54:	9300      	str	r3, [sp, #0]
 800be56:	4622      	mov	r2, r4
 800be58:	4633      	mov	r3, r6
 800be5a:	eeb0 0b48 	vmov.f64	d0, d8
 800be5e:	f000 fe8b 	bl	800cb78 <_dtoa_r>
 800be62:	2d47      	cmp	r5, #71	@ 0x47
 800be64:	d114      	bne.n	800be90 <__cvt+0x7c>
 800be66:	07fb      	lsls	r3, r7, #31
 800be68:	d50a      	bpl.n	800be80 <__cvt+0x6c>
 800be6a:	1902      	adds	r2, r0, r4
 800be6c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800be70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be74:	bf08      	it	eq
 800be76:	9203      	streq	r2, [sp, #12]
 800be78:	2130      	movs	r1, #48	@ 0x30
 800be7a:	9b03      	ldr	r3, [sp, #12]
 800be7c:	4293      	cmp	r3, r2
 800be7e:	d319      	bcc.n	800beb4 <__cvt+0xa0>
 800be80:	9b03      	ldr	r3, [sp, #12]
 800be82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800be84:	1a1b      	subs	r3, r3, r0
 800be86:	6013      	str	r3, [r2, #0]
 800be88:	b005      	add	sp, #20
 800be8a:	ecbd 8b02 	vpop	{d8}
 800be8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be90:	2d46      	cmp	r5, #70	@ 0x46
 800be92:	eb00 0204 	add.w	r2, r0, r4
 800be96:	d1e9      	bne.n	800be6c <__cvt+0x58>
 800be98:	7803      	ldrb	r3, [r0, #0]
 800be9a:	2b30      	cmp	r3, #48	@ 0x30
 800be9c:	d107      	bne.n	800beae <__cvt+0x9a>
 800be9e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bea6:	bf1c      	itt	ne
 800bea8:	f1c4 0401 	rsbne	r4, r4, #1
 800beac:	6034      	strne	r4, [r6, #0]
 800beae:	6833      	ldr	r3, [r6, #0]
 800beb0:	441a      	add	r2, r3
 800beb2:	e7db      	b.n	800be6c <__cvt+0x58>
 800beb4:	1c5c      	adds	r4, r3, #1
 800beb6:	9403      	str	r4, [sp, #12]
 800beb8:	7019      	strb	r1, [r3, #0]
 800beba:	e7de      	b.n	800be7a <__cvt+0x66>

0800bebc <__exponent>:
 800bebc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bebe:	2900      	cmp	r1, #0
 800bec0:	bfba      	itte	lt
 800bec2:	4249      	neglt	r1, r1
 800bec4:	232d      	movlt	r3, #45	@ 0x2d
 800bec6:	232b      	movge	r3, #43	@ 0x2b
 800bec8:	2909      	cmp	r1, #9
 800beca:	7002      	strb	r2, [r0, #0]
 800becc:	7043      	strb	r3, [r0, #1]
 800bece:	dd29      	ble.n	800bf24 <__exponent+0x68>
 800bed0:	f10d 0307 	add.w	r3, sp, #7
 800bed4:	461d      	mov	r5, r3
 800bed6:	270a      	movs	r7, #10
 800bed8:	461a      	mov	r2, r3
 800beda:	fbb1 f6f7 	udiv	r6, r1, r7
 800bede:	fb07 1416 	mls	r4, r7, r6, r1
 800bee2:	3430      	adds	r4, #48	@ 0x30
 800bee4:	f802 4c01 	strb.w	r4, [r2, #-1]
 800bee8:	460c      	mov	r4, r1
 800beea:	2c63      	cmp	r4, #99	@ 0x63
 800beec:	f103 33ff 	add.w	r3, r3, #4294967295
 800bef0:	4631      	mov	r1, r6
 800bef2:	dcf1      	bgt.n	800bed8 <__exponent+0x1c>
 800bef4:	3130      	adds	r1, #48	@ 0x30
 800bef6:	1e94      	subs	r4, r2, #2
 800bef8:	f803 1c01 	strb.w	r1, [r3, #-1]
 800befc:	1c41      	adds	r1, r0, #1
 800befe:	4623      	mov	r3, r4
 800bf00:	42ab      	cmp	r3, r5
 800bf02:	d30a      	bcc.n	800bf1a <__exponent+0x5e>
 800bf04:	f10d 0309 	add.w	r3, sp, #9
 800bf08:	1a9b      	subs	r3, r3, r2
 800bf0a:	42ac      	cmp	r4, r5
 800bf0c:	bf88      	it	hi
 800bf0e:	2300      	movhi	r3, #0
 800bf10:	3302      	adds	r3, #2
 800bf12:	4403      	add	r3, r0
 800bf14:	1a18      	subs	r0, r3, r0
 800bf16:	b003      	add	sp, #12
 800bf18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf1a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800bf1e:	f801 6f01 	strb.w	r6, [r1, #1]!
 800bf22:	e7ed      	b.n	800bf00 <__exponent+0x44>
 800bf24:	2330      	movs	r3, #48	@ 0x30
 800bf26:	3130      	adds	r1, #48	@ 0x30
 800bf28:	7083      	strb	r3, [r0, #2]
 800bf2a:	70c1      	strb	r1, [r0, #3]
 800bf2c:	1d03      	adds	r3, r0, #4
 800bf2e:	e7f1      	b.n	800bf14 <__exponent+0x58>

0800bf30 <_printf_float>:
 800bf30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf34:	b08d      	sub	sp, #52	@ 0x34
 800bf36:	460c      	mov	r4, r1
 800bf38:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800bf3c:	4616      	mov	r6, r2
 800bf3e:	461f      	mov	r7, r3
 800bf40:	4605      	mov	r5, r0
 800bf42:	f000 fcf3 	bl	800c92c <_localeconv_r>
 800bf46:	f8d0 b000 	ldr.w	fp, [r0]
 800bf4a:	4658      	mov	r0, fp
 800bf4c:	f7f4 fa18 	bl	8000380 <strlen>
 800bf50:	2300      	movs	r3, #0
 800bf52:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf54:	f8d8 3000 	ldr.w	r3, [r8]
 800bf58:	f894 9018 	ldrb.w	r9, [r4, #24]
 800bf5c:	6822      	ldr	r2, [r4, #0]
 800bf5e:	9005      	str	r0, [sp, #20]
 800bf60:	3307      	adds	r3, #7
 800bf62:	f023 0307 	bic.w	r3, r3, #7
 800bf66:	f103 0108 	add.w	r1, r3, #8
 800bf6a:	f8c8 1000 	str.w	r1, [r8]
 800bf6e:	ed93 0b00 	vldr	d0, [r3]
 800bf72:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800c1d0 <_printf_float+0x2a0>
 800bf76:	eeb0 7bc0 	vabs.f64	d7, d0
 800bf7a:	eeb4 7b46 	vcmp.f64	d7, d6
 800bf7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf82:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800bf86:	dd24      	ble.n	800bfd2 <_printf_float+0xa2>
 800bf88:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800bf8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf90:	d502      	bpl.n	800bf98 <_printf_float+0x68>
 800bf92:	232d      	movs	r3, #45	@ 0x2d
 800bf94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bf98:	498f      	ldr	r1, [pc, #572]	@ (800c1d8 <_printf_float+0x2a8>)
 800bf9a:	4b90      	ldr	r3, [pc, #576]	@ (800c1dc <_printf_float+0x2ac>)
 800bf9c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800bfa0:	bf94      	ite	ls
 800bfa2:	4688      	movls	r8, r1
 800bfa4:	4698      	movhi	r8, r3
 800bfa6:	f022 0204 	bic.w	r2, r2, #4
 800bfaa:	2303      	movs	r3, #3
 800bfac:	6123      	str	r3, [r4, #16]
 800bfae:	6022      	str	r2, [r4, #0]
 800bfb0:	f04f 0a00 	mov.w	sl, #0
 800bfb4:	9700      	str	r7, [sp, #0]
 800bfb6:	4633      	mov	r3, r6
 800bfb8:	aa0b      	add	r2, sp, #44	@ 0x2c
 800bfba:	4621      	mov	r1, r4
 800bfbc:	4628      	mov	r0, r5
 800bfbe:	f000 f9d1 	bl	800c364 <_printf_common>
 800bfc2:	3001      	adds	r0, #1
 800bfc4:	f040 8089 	bne.w	800c0da <_printf_float+0x1aa>
 800bfc8:	f04f 30ff 	mov.w	r0, #4294967295
 800bfcc:	b00d      	add	sp, #52	@ 0x34
 800bfce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfd2:	eeb4 0b40 	vcmp.f64	d0, d0
 800bfd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfda:	d709      	bvc.n	800bff0 <_printf_float+0xc0>
 800bfdc:	ee10 3a90 	vmov	r3, s1
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	bfbc      	itt	lt
 800bfe4:	232d      	movlt	r3, #45	@ 0x2d
 800bfe6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bfea:	497d      	ldr	r1, [pc, #500]	@ (800c1e0 <_printf_float+0x2b0>)
 800bfec:	4b7d      	ldr	r3, [pc, #500]	@ (800c1e4 <_printf_float+0x2b4>)
 800bfee:	e7d5      	b.n	800bf9c <_printf_float+0x6c>
 800bff0:	6863      	ldr	r3, [r4, #4]
 800bff2:	1c59      	adds	r1, r3, #1
 800bff4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800bff8:	d139      	bne.n	800c06e <_printf_float+0x13e>
 800bffa:	2306      	movs	r3, #6
 800bffc:	6063      	str	r3, [r4, #4]
 800bffe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c002:	2300      	movs	r3, #0
 800c004:	6022      	str	r2, [r4, #0]
 800c006:	9303      	str	r3, [sp, #12]
 800c008:	ab0a      	add	r3, sp, #40	@ 0x28
 800c00a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800c00e:	ab09      	add	r3, sp, #36	@ 0x24
 800c010:	9300      	str	r3, [sp, #0]
 800c012:	6861      	ldr	r1, [r4, #4]
 800c014:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c018:	4628      	mov	r0, r5
 800c01a:	f7ff fefb 	bl	800be14 <__cvt>
 800c01e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c022:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c024:	4680      	mov	r8, r0
 800c026:	d129      	bne.n	800c07c <_printf_float+0x14c>
 800c028:	1cc8      	adds	r0, r1, #3
 800c02a:	db02      	blt.n	800c032 <_printf_float+0x102>
 800c02c:	6863      	ldr	r3, [r4, #4]
 800c02e:	4299      	cmp	r1, r3
 800c030:	dd41      	ble.n	800c0b6 <_printf_float+0x186>
 800c032:	f1a9 0902 	sub.w	r9, r9, #2
 800c036:	fa5f f989 	uxtb.w	r9, r9
 800c03a:	3901      	subs	r1, #1
 800c03c:	464a      	mov	r2, r9
 800c03e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c042:	9109      	str	r1, [sp, #36]	@ 0x24
 800c044:	f7ff ff3a 	bl	800bebc <__exponent>
 800c048:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c04a:	1813      	adds	r3, r2, r0
 800c04c:	2a01      	cmp	r2, #1
 800c04e:	4682      	mov	sl, r0
 800c050:	6123      	str	r3, [r4, #16]
 800c052:	dc02      	bgt.n	800c05a <_printf_float+0x12a>
 800c054:	6822      	ldr	r2, [r4, #0]
 800c056:	07d2      	lsls	r2, r2, #31
 800c058:	d501      	bpl.n	800c05e <_printf_float+0x12e>
 800c05a:	3301      	adds	r3, #1
 800c05c:	6123      	str	r3, [r4, #16]
 800c05e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c062:	2b00      	cmp	r3, #0
 800c064:	d0a6      	beq.n	800bfb4 <_printf_float+0x84>
 800c066:	232d      	movs	r3, #45	@ 0x2d
 800c068:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c06c:	e7a2      	b.n	800bfb4 <_printf_float+0x84>
 800c06e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c072:	d1c4      	bne.n	800bffe <_printf_float+0xce>
 800c074:	2b00      	cmp	r3, #0
 800c076:	d1c2      	bne.n	800bffe <_printf_float+0xce>
 800c078:	2301      	movs	r3, #1
 800c07a:	e7bf      	b.n	800bffc <_printf_float+0xcc>
 800c07c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800c080:	d9db      	bls.n	800c03a <_printf_float+0x10a>
 800c082:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800c086:	d118      	bne.n	800c0ba <_printf_float+0x18a>
 800c088:	2900      	cmp	r1, #0
 800c08a:	6863      	ldr	r3, [r4, #4]
 800c08c:	dd0b      	ble.n	800c0a6 <_printf_float+0x176>
 800c08e:	6121      	str	r1, [r4, #16]
 800c090:	b913      	cbnz	r3, 800c098 <_printf_float+0x168>
 800c092:	6822      	ldr	r2, [r4, #0]
 800c094:	07d0      	lsls	r0, r2, #31
 800c096:	d502      	bpl.n	800c09e <_printf_float+0x16e>
 800c098:	3301      	adds	r3, #1
 800c09a:	440b      	add	r3, r1
 800c09c:	6123      	str	r3, [r4, #16]
 800c09e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c0a0:	f04f 0a00 	mov.w	sl, #0
 800c0a4:	e7db      	b.n	800c05e <_printf_float+0x12e>
 800c0a6:	b913      	cbnz	r3, 800c0ae <_printf_float+0x17e>
 800c0a8:	6822      	ldr	r2, [r4, #0]
 800c0aa:	07d2      	lsls	r2, r2, #31
 800c0ac:	d501      	bpl.n	800c0b2 <_printf_float+0x182>
 800c0ae:	3302      	adds	r3, #2
 800c0b0:	e7f4      	b.n	800c09c <_printf_float+0x16c>
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	e7f2      	b.n	800c09c <_printf_float+0x16c>
 800c0b6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800c0ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c0bc:	4299      	cmp	r1, r3
 800c0be:	db05      	blt.n	800c0cc <_printf_float+0x19c>
 800c0c0:	6823      	ldr	r3, [r4, #0]
 800c0c2:	6121      	str	r1, [r4, #16]
 800c0c4:	07d8      	lsls	r0, r3, #31
 800c0c6:	d5ea      	bpl.n	800c09e <_printf_float+0x16e>
 800c0c8:	1c4b      	adds	r3, r1, #1
 800c0ca:	e7e7      	b.n	800c09c <_printf_float+0x16c>
 800c0cc:	2900      	cmp	r1, #0
 800c0ce:	bfd4      	ite	le
 800c0d0:	f1c1 0202 	rsble	r2, r1, #2
 800c0d4:	2201      	movgt	r2, #1
 800c0d6:	4413      	add	r3, r2
 800c0d8:	e7e0      	b.n	800c09c <_printf_float+0x16c>
 800c0da:	6823      	ldr	r3, [r4, #0]
 800c0dc:	055a      	lsls	r2, r3, #21
 800c0de:	d407      	bmi.n	800c0f0 <_printf_float+0x1c0>
 800c0e0:	6923      	ldr	r3, [r4, #16]
 800c0e2:	4642      	mov	r2, r8
 800c0e4:	4631      	mov	r1, r6
 800c0e6:	4628      	mov	r0, r5
 800c0e8:	47b8      	blx	r7
 800c0ea:	3001      	adds	r0, #1
 800c0ec:	d12a      	bne.n	800c144 <_printf_float+0x214>
 800c0ee:	e76b      	b.n	800bfc8 <_printf_float+0x98>
 800c0f0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800c0f4:	f240 80e0 	bls.w	800c2b8 <_printf_float+0x388>
 800c0f8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800c0fc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c104:	d133      	bne.n	800c16e <_printf_float+0x23e>
 800c106:	4a38      	ldr	r2, [pc, #224]	@ (800c1e8 <_printf_float+0x2b8>)
 800c108:	2301      	movs	r3, #1
 800c10a:	4631      	mov	r1, r6
 800c10c:	4628      	mov	r0, r5
 800c10e:	47b8      	blx	r7
 800c110:	3001      	adds	r0, #1
 800c112:	f43f af59 	beq.w	800bfc8 <_printf_float+0x98>
 800c116:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c11a:	4543      	cmp	r3, r8
 800c11c:	db02      	blt.n	800c124 <_printf_float+0x1f4>
 800c11e:	6823      	ldr	r3, [r4, #0]
 800c120:	07d8      	lsls	r0, r3, #31
 800c122:	d50f      	bpl.n	800c144 <_printf_float+0x214>
 800c124:	9b05      	ldr	r3, [sp, #20]
 800c126:	465a      	mov	r2, fp
 800c128:	4631      	mov	r1, r6
 800c12a:	4628      	mov	r0, r5
 800c12c:	47b8      	blx	r7
 800c12e:	3001      	adds	r0, #1
 800c130:	f43f af4a 	beq.w	800bfc8 <_printf_float+0x98>
 800c134:	f04f 0900 	mov.w	r9, #0
 800c138:	f108 38ff 	add.w	r8, r8, #4294967295
 800c13c:	f104 0a1a 	add.w	sl, r4, #26
 800c140:	45c8      	cmp	r8, r9
 800c142:	dc09      	bgt.n	800c158 <_printf_float+0x228>
 800c144:	6823      	ldr	r3, [r4, #0]
 800c146:	079b      	lsls	r3, r3, #30
 800c148:	f100 8107 	bmi.w	800c35a <_printf_float+0x42a>
 800c14c:	68e0      	ldr	r0, [r4, #12]
 800c14e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c150:	4298      	cmp	r0, r3
 800c152:	bfb8      	it	lt
 800c154:	4618      	movlt	r0, r3
 800c156:	e739      	b.n	800bfcc <_printf_float+0x9c>
 800c158:	2301      	movs	r3, #1
 800c15a:	4652      	mov	r2, sl
 800c15c:	4631      	mov	r1, r6
 800c15e:	4628      	mov	r0, r5
 800c160:	47b8      	blx	r7
 800c162:	3001      	adds	r0, #1
 800c164:	f43f af30 	beq.w	800bfc8 <_printf_float+0x98>
 800c168:	f109 0901 	add.w	r9, r9, #1
 800c16c:	e7e8      	b.n	800c140 <_printf_float+0x210>
 800c16e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c170:	2b00      	cmp	r3, #0
 800c172:	dc3b      	bgt.n	800c1ec <_printf_float+0x2bc>
 800c174:	4a1c      	ldr	r2, [pc, #112]	@ (800c1e8 <_printf_float+0x2b8>)
 800c176:	2301      	movs	r3, #1
 800c178:	4631      	mov	r1, r6
 800c17a:	4628      	mov	r0, r5
 800c17c:	47b8      	blx	r7
 800c17e:	3001      	adds	r0, #1
 800c180:	f43f af22 	beq.w	800bfc8 <_printf_float+0x98>
 800c184:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c188:	ea59 0303 	orrs.w	r3, r9, r3
 800c18c:	d102      	bne.n	800c194 <_printf_float+0x264>
 800c18e:	6823      	ldr	r3, [r4, #0]
 800c190:	07d9      	lsls	r1, r3, #31
 800c192:	d5d7      	bpl.n	800c144 <_printf_float+0x214>
 800c194:	9b05      	ldr	r3, [sp, #20]
 800c196:	465a      	mov	r2, fp
 800c198:	4631      	mov	r1, r6
 800c19a:	4628      	mov	r0, r5
 800c19c:	47b8      	blx	r7
 800c19e:	3001      	adds	r0, #1
 800c1a0:	f43f af12 	beq.w	800bfc8 <_printf_float+0x98>
 800c1a4:	f04f 0a00 	mov.w	sl, #0
 800c1a8:	f104 0b1a 	add.w	fp, r4, #26
 800c1ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1ae:	425b      	negs	r3, r3
 800c1b0:	4553      	cmp	r3, sl
 800c1b2:	dc01      	bgt.n	800c1b8 <_printf_float+0x288>
 800c1b4:	464b      	mov	r3, r9
 800c1b6:	e794      	b.n	800c0e2 <_printf_float+0x1b2>
 800c1b8:	2301      	movs	r3, #1
 800c1ba:	465a      	mov	r2, fp
 800c1bc:	4631      	mov	r1, r6
 800c1be:	4628      	mov	r0, r5
 800c1c0:	47b8      	blx	r7
 800c1c2:	3001      	adds	r0, #1
 800c1c4:	f43f af00 	beq.w	800bfc8 <_printf_float+0x98>
 800c1c8:	f10a 0a01 	add.w	sl, sl, #1
 800c1cc:	e7ee      	b.n	800c1ac <_printf_float+0x27c>
 800c1ce:	bf00      	nop
 800c1d0:	ffffffff 	.word	0xffffffff
 800c1d4:	7fefffff 	.word	0x7fefffff
 800c1d8:	0806d308 	.word	0x0806d308
 800c1dc:	0806d30c 	.word	0x0806d30c
 800c1e0:	0806d310 	.word	0x0806d310
 800c1e4:	0806d314 	.word	0x0806d314
 800c1e8:	0806d318 	.word	0x0806d318
 800c1ec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c1ee:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c1f2:	4553      	cmp	r3, sl
 800c1f4:	bfa8      	it	ge
 800c1f6:	4653      	movge	r3, sl
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	4699      	mov	r9, r3
 800c1fc:	dc37      	bgt.n	800c26e <_printf_float+0x33e>
 800c1fe:	2300      	movs	r3, #0
 800c200:	9307      	str	r3, [sp, #28]
 800c202:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c206:	f104 021a 	add.w	r2, r4, #26
 800c20a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c20c:	9907      	ldr	r1, [sp, #28]
 800c20e:	9306      	str	r3, [sp, #24]
 800c210:	eba3 0309 	sub.w	r3, r3, r9
 800c214:	428b      	cmp	r3, r1
 800c216:	dc31      	bgt.n	800c27c <_printf_float+0x34c>
 800c218:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c21a:	459a      	cmp	sl, r3
 800c21c:	dc3b      	bgt.n	800c296 <_printf_float+0x366>
 800c21e:	6823      	ldr	r3, [r4, #0]
 800c220:	07da      	lsls	r2, r3, #31
 800c222:	d438      	bmi.n	800c296 <_printf_float+0x366>
 800c224:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c226:	ebaa 0903 	sub.w	r9, sl, r3
 800c22a:	9b06      	ldr	r3, [sp, #24]
 800c22c:	ebaa 0303 	sub.w	r3, sl, r3
 800c230:	4599      	cmp	r9, r3
 800c232:	bfa8      	it	ge
 800c234:	4699      	movge	r9, r3
 800c236:	f1b9 0f00 	cmp.w	r9, #0
 800c23a:	dc34      	bgt.n	800c2a6 <_printf_float+0x376>
 800c23c:	f04f 0800 	mov.w	r8, #0
 800c240:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c244:	f104 0b1a 	add.w	fp, r4, #26
 800c248:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c24a:	ebaa 0303 	sub.w	r3, sl, r3
 800c24e:	eba3 0309 	sub.w	r3, r3, r9
 800c252:	4543      	cmp	r3, r8
 800c254:	f77f af76 	ble.w	800c144 <_printf_float+0x214>
 800c258:	2301      	movs	r3, #1
 800c25a:	465a      	mov	r2, fp
 800c25c:	4631      	mov	r1, r6
 800c25e:	4628      	mov	r0, r5
 800c260:	47b8      	blx	r7
 800c262:	3001      	adds	r0, #1
 800c264:	f43f aeb0 	beq.w	800bfc8 <_printf_float+0x98>
 800c268:	f108 0801 	add.w	r8, r8, #1
 800c26c:	e7ec      	b.n	800c248 <_printf_float+0x318>
 800c26e:	4642      	mov	r2, r8
 800c270:	4631      	mov	r1, r6
 800c272:	4628      	mov	r0, r5
 800c274:	47b8      	blx	r7
 800c276:	3001      	adds	r0, #1
 800c278:	d1c1      	bne.n	800c1fe <_printf_float+0x2ce>
 800c27a:	e6a5      	b.n	800bfc8 <_printf_float+0x98>
 800c27c:	2301      	movs	r3, #1
 800c27e:	4631      	mov	r1, r6
 800c280:	4628      	mov	r0, r5
 800c282:	9206      	str	r2, [sp, #24]
 800c284:	47b8      	blx	r7
 800c286:	3001      	adds	r0, #1
 800c288:	f43f ae9e 	beq.w	800bfc8 <_printf_float+0x98>
 800c28c:	9b07      	ldr	r3, [sp, #28]
 800c28e:	9a06      	ldr	r2, [sp, #24]
 800c290:	3301      	adds	r3, #1
 800c292:	9307      	str	r3, [sp, #28]
 800c294:	e7b9      	b.n	800c20a <_printf_float+0x2da>
 800c296:	9b05      	ldr	r3, [sp, #20]
 800c298:	465a      	mov	r2, fp
 800c29a:	4631      	mov	r1, r6
 800c29c:	4628      	mov	r0, r5
 800c29e:	47b8      	blx	r7
 800c2a0:	3001      	adds	r0, #1
 800c2a2:	d1bf      	bne.n	800c224 <_printf_float+0x2f4>
 800c2a4:	e690      	b.n	800bfc8 <_printf_float+0x98>
 800c2a6:	9a06      	ldr	r2, [sp, #24]
 800c2a8:	464b      	mov	r3, r9
 800c2aa:	4442      	add	r2, r8
 800c2ac:	4631      	mov	r1, r6
 800c2ae:	4628      	mov	r0, r5
 800c2b0:	47b8      	blx	r7
 800c2b2:	3001      	adds	r0, #1
 800c2b4:	d1c2      	bne.n	800c23c <_printf_float+0x30c>
 800c2b6:	e687      	b.n	800bfc8 <_printf_float+0x98>
 800c2b8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800c2bc:	f1b9 0f01 	cmp.w	r9, #1
 800c2c0:	dc01      	bgt.n	800c2c6 <_printf_float+0x396>
 800c2c2:	07db      	lsls	r3, r3, #31
 800c2c4:	d536      	bpl.n	800c334 <_printf_float+0x404>
 800c2c6:	2301      	movs	r3, #1
 800c2c8:	4642      	mov	r2, r8
 800c2ca:	4631      	mov	r1, r6
 800c2cc:	4628      	mov	r0, r5
 800c2ce:	47b8      	blx	r7
 800c2d0:	3001      	adds	r0, #1
 800c2d2:	f43f ae79 	beq.w	800bfc8 <_printf_float+0x98>
 800c2d6:	9b05      	ldr	r3, [sp, #20]
 800c2d8:	465a      	mov	r2, fp
 800c2da:	4631      	mov	r1, r6
 800c2dc:	4628      	mov	r0, r5
 800c2de:	47b8      	blx	r7
 800c2e0:	3001      	adds	r0, #1
 800c2e2:	f43f ae71 	beq.w	800bfc8 <_printf_float+0x98>
 800c2e6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800c2ea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c2ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2f2:	f109 39ff 	add.w	r9, r9, #4294967295
 800c2f6:	d018      	beq.n	800c32a <_printf_float+0x3fa>
 800c2f8:	464b      	mov	r3, r9
 800c2fa:	f108 0201 	add.w	r2, r8, #1
 800c2fe:	4631      	mov	r1, r6
 800c300:	4628      	mov	r0, r5
 800c302:	47b8      	blx	r7
 800c304:	3001      	adds	r0, #1
 800c306:	d10c      	bne.n	800c322 <_printf_float+0x3f2>
 800c308:	e65e      	b.n	800bfc8 <_printf_float+0x98>
 800c30a:	2301      	movs	r3, #1
 800c30c:	465a      	mov	r2, fp
 800c30e:	4631      	mov	r1, r6
 800c310:	4628      	mov	r0, r5
 800c312:	47b8      	blx	r7
 800c314:	3001      	adds	r0, #1
 800c316:	f43f ae57 	beq.w	800bfc8 <_printf_float+0x98>
 800c31a:	f108 0801 	add.w	r8, r8, #1
 800c31e:	45c8      	cmp	r8, r9
 800c320:	dbf3      	blt.n	800c30a <_printf_float+0x3da>
 800c322:	4653      	mov	r3, sl
 800c324:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c328:	e6dc      	b.n	800c0e4 <_printf_float+0x1b4>
 800c32a:	f04f 0800 	mov.w	r8, #0
 800c32e:	f104 0b1a 	add.w	fp, r4, #26
 800c332:	e7f4      	b.n	800c31e <_printf_float+0x3ee>
 800c334:	2301      	movs	r3, #1
 800c336:	4642      	mov	r2, r8
 800c338:	e7e1      	b.n	800c2fe <_printf_float+0x3ce>
 800c33a:	2301      	movs	r3, #1
 800c33c:	464a      	mov	r2, r9
 800c33e:	4631      	mov	r1, r6
 800c340:	4628      	mov	r0, r5
 800c342:	47b8      	blx	r7
 800c344:	3001      	adds	r0, #1
 800c346:	f43f ae3f 	beq.w	800bfc8 <_printf_float+0x98>
 800c34a:	f108 0801 	add.w	r8, r8, #1
 800c34e:	68e3      	ldr	r3, [r4, #12]
 800c350:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c352:	1a5b      	subs	r3, r3, r1
 800c354:	4543      	cmp	r3, r8
 800c356:	dcf0      	bgt.n	800c33a <_printf_float+0x40a>
 800c358:	e6f8      	b.n	800c14c <_printf_float+0x21c>
 800c35a:	f04f 0800 	mov.w	r8, #0
 800c35e:	f104 0919 	add.w	r9, r4, #25
 800c362:	e7f4      	b.n	800c34e <_printf_float+0x41e>

0800c364 <_printf_common>:
 800c364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c368:	4616      	mov	r6, r2
 800c36a:	4698      	mov	r8, r3
 800c36c:	688a      	ldr	r2, [r1, #8]
 800c36e:	690b      	ldr	r3, [r1, #16]
 800c370:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c374:	4293      	cmp	r3, r2
 800c376:	bfb8      	it	lt
 800c378:	4613      	movlt	r3, r2
 800c37a:	6033      	str	r3, [r6, #0]
 800c37c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c380:	4607      	mov	r7, r0
 800c382:	460c      	mov	r4, r1
 800c384:	b10a      	cbz	r2, 800c38a <_printf_common+0x26>
 800c386:	3301      	adds	r3, #1
 800c388:	6033      	str	r3, [r6, #0]
 800c38a:	6823      	ldr	r3, [r4, #0]
 800c38c:	0699      	lsls	r1, r3, #26
 800c38e:	bf42      	ittt	mi
 800c390:	6833      	ldrmi	r3, [r6, #0]
 800c392:	3302      	addmi	r3, #2
 800c394:	6033      	strmi	r3, [r6, #0]
 800c396:	6825      	ldr	r5, [r4, #0]
 800c398:	f015 0506 	ands.w	r5, r5, #6
 800c39c:	d106      	bne.n	800c3ac <_printf_common+0x48>
 800c39e:	f104 0a19 	add.w	sl, r4, #25
 800c3a2:	68e3      	ldr	r3, [r4, #12]
 800c3a4:	6832      	ldr	r2, [r6, #0]
 800c3a6:	1a9b      	subs	r3, r3, r2
 800c3a8:	42ab      	cmp	r3, r5
 800c3aa:	dc26      	bgt.n	800c3fa <_printf_common+0x96>
 800c3ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c3b0:	6822      	ldr	r2, [r4, #0]
 800c3b2:	3b00      	subs	r3, #0
 800c3b4:	bf18      	it	ne
 800c3b6:	2301      	movne	r3, #1
 800c3b8:	0692      	lsls	r2, r2, #26
 800c3ba:	d42b      	bmi.n	800c414 <_printf_common+0xb0>
 800c3bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c3c0:	4641      	mov	r1, r8
 800c3c2:	4638      	mov	r0, r7
 800c3c4:	47c8      	blx	r9
 800c3c6:	3001      	adds	r0, #1
 800c3c8:	d01e      	beq.n	800c408 <_printf_common+0xa4>
 800c3ca:	6823      	ldr	r3, [r4, #0]
 800c3cc:	6922      	ldr	r2, [r4, #16]
 800c3ce:	f003 0306 	and.w	r3, r3, #6
 800c3d2:	2b04      	cmp	r3, #4
 800c3d4:	bf02      	ittt	eq
 800c3d6:	68e5      	ldreq	r5, [r4, #12]
 800c3d8:	6833      	ldreq	r3, [r6, #0]
 800c3da:	1aed      	subeq	r5, r5, r3
 800c3dc:	68a3      	ldr	r3, [r4, #8]
 800c3de:	bf0c      	ite	eq
 800c3e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c3e4:	2500      	movne	r5, #0
 800c3e6:	4293      	cmp	r3, r2
 800c3e8:	bfc4      	itt	gt
 800c3ea:	1a9b      	subgt	r3, r3, r2
 800c3ec:	18ed      	addgt	r5, r5, r3
 800c3ee:	2600      	movs	r6, #0
 800c3f0:	341a      	adds	r4, #26
 800c3f2:	42b5      	cmp	r5, r6
 800c3f4:	d11a      	bne.n	800c42c <_printf_common+0xc8>
 800c3f6:	2000      	movs	r0, #0
 800c3f8:	e008      	b.n	800c40c <_printf_common+0xa8>
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	4652      	mov	r2, sl
 800c3fe:	4641      	mov	r1, r8
 800c400:	4638      	mov	r0, r7
 800c402:	47c8      	blx	r9
 800c404:	3001      	adds	r0, #1
 800c406:	d103      	bne.n	800c410 <_printf_common+0xac>
 800c408:	f04f 30ff 	mov.w	r0, #4294967295
 800c40c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c410:	3501      	adds	r5, #1
 800c412:	e7c6      	b.n	800c3a2 <_printf_common+0x3e>
 800c414:	18e1      	adds	r1, r4, r3
 800c416:	1c5a      	adds	r2, r3, #1
 800c418:	2030      	movs	r0, #48	@ 0x30
 800c41a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c41e:	4422      	add	r2, r4
 800c420:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c424:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c428:	3302      	adds	r3, #2
 800c42a:	e7c7      	b.n	800c3bc <_printf_common+0x58>
 800c42c:	2301      	movs	r3, #1
 800c42e:	4622      	mov	r2, r4
 800c430:	4641      	mov	r1, r8
 800c432:	4638      	mov	r0, r7
 800c434:	47c8      	blx	r9
 800c436:	3001      	adds	r0, #1
 800c438:	d0e6      	beq.n	800c408 <_printf_common+0xa4>
 800c43a:	3601      	adds	r6, #1
 800c43c:	e7d9      	b.n	800c3f2 <_printf_common+0x8e>
	...

0800c440 <_printf_i>:
 800c440:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c444:	7e0f      	ldrb	r7, [r1, #24]
 800c446:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c448:	2f78      	cmp	r7, #120	@ 0x78
 800c44a:	4691      	mov	r9, r2
 800c44c:	4680      	mov	r8, r0
 800c44e:	460c      	mov	r4, r1
 800c450:	469a      	mov	sl, r3
 800c452:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c456:	d807      	bhi.n	800c468 <_printf_i+0x28>
 800c458:	2f62      	cmp	r7, #98	@ 0x62
 800c45a:	d80a      	bhi.n	800c472 <_printf_i+0x32>
 800c45c:	2f00      	cmp	r7, #0
 800c45e:	f000 80d2 	beq.w	800c606 <_printf_i+0x1c6>
 800c462:	2f58      	cmp	r7, #88	@ 0x58
 800c464:	f000 80b9 	beq.w	800c5da <_printf_i+0x19a>
 800c468:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c46c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c470:	e03a      	b.n	800c4e8 <_printf_i+0xa8>
 800c472:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c476:	2b15      	cmp	r3, #21
 800c478:	d8f6      	bhi.n	800c468 <_printf_i+0x28>
 800c47a:	a101      	add	r1, pc, #4	@ (adr r1, 800c480 <_printf_i+0x40>)
 800c47c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c480:	0800c4d9 	.word	0x0800c4d9
 800c484:	0800c4ed 	.word	0x0800c4ed
 800c488:	0800c469 	.word	0x0800c469
 800c48c:	0800c469 	.word	0x0800c469
 800c490:	0800c469 	.word	0x0800c469
 800c494:	0800c469 	.word	0x0800c469
 800c498:	0800c4ed 	.word	0x0800c4ed
 800c49c:	0800c469 	.word	0x0800c469
 800c4a0:	0800c469 	.word	0x0800c469
 800c4a4:	0800c469 	.word	0x0800c469
 800c4a8:	0800c469 	.word	0x0800c469
 800c4ac:	0800c5ed 	.word	0x0800c5ed
 800c4b0:	0800c517 	.word	0x0800c517
 800c4b4:	0800c5a7 	.word	0x0800c5a7
 800c4b8:	0800c469 	.word	0x0800c469
 800c4bc:	0800c469 	.word	0x0800c469
 800c4c0:	0800c60f 	.word	0x0800c60f
 800c4c4:	0800c469 	.word	0x0800c469
 800c4c8:	0800c517 	.word	0x0800c517
 800c4cc:	0800c469 	.word	0x0800c469
 800c4d0:	0800c469 	.word	0x0800c469
 800c4d4:	0800c5af 	.word	0x0800c5af
 800c4d8:	6833      	ldr	r3, [r6, #0]
 800c4da:	1d1a      	adds	r2, r3, #4
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	6032      	str	r2, [r6, #0]
 800c4e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c4e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	e09d      	b.n	800c628 <_printf_i+0x1e8>
 800c4ec:	6833      	ldr	r3, [r6, #0]
 800c4ee:	6820      	ldr	r0, [r4, #0]
 800c4f0:	1d19      	adds	r1, r3, #4
 800c4f2:	6031      	str	r1, [r6, #0]
 800c4f4:	0606      	lsls	r6, r0, #24
 800c4f6:	d501      	bpl.n	800c4fc <_printf_i+0xbc>
 800c4f8:	681d      	ldr	r5, [r3, #0]
 800c4fa:	e003      	b.n	800c504 <_printf_i+0xc4>
 800c4fc:	0645      	lsls	r5, r0, #25
 800c4fe:	d5fb      	bpl.n	800c4f8 <_printf_i+0xb8>
 800c500:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c504:	2d00      	cmp	r5, #0
 800c506:	da03      	bge.n	800c510 <_printf_i+0xd0>
 800c508:	232d      	movs	r3, #45	@ 0x2d
 800c50a:	426d      	negs	r5, r5
 800c50c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c510:	4859      	ldr	r0, [pc, #356]	@ (800c678 <_printf_i+0x238>)
 800c512:	230a      	movs	r3, #10
 800c514:	e011      	b.n	800c53a <_printf_i+0xfa>
 800c516:	6821      	ldr	r1, [r4, #0]
 800c518:	6833      	ldr	r3, [r6, #0]
 800c51a:	0608      	lsls	r0, r1, #24
 800c51c:	f853 5b04 	ldr.w	r5, [r3], #4
 800c520:	d402      	bmi.n	800c528 <_printf_i+0xe8>
 800c522:	0649      	lsls	r1, r1, #25
 800c524:	bf48      	it	mi
 800c526:	b2ad      	uxthmi	r5, r5
 800c528:	2f6f      	cmp	r7, #111	@ 0x6f
 800c52a:	4853      	ldr	r0, [pc, #332]	@ (800c678 <_printf_i+0x238>)
 800c52c:	6033      	str	r3, [r6, #0]
 800c52e:	bf14      	ite	ne
 800c530:	230a      	movne	r3, #10
 800c532:	2308      	moveq	r3, #8
 800c534:	2100      	movs	r1, #0
 800c536:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c53a:	6866      	ldr	r6, [r4, #4]
 800c53c:	60a6      	str	r6, [r4, #8]
 800c53e:	2e00      	cmp	r6, #0
 800c540:	bfa2      	ittt	ge
 800c542:	6821      	ldrge	r1, [r4, #0]
 800c544:	f021 0104 	bicge.w	r1, r1, #4
 800c548:	6021      	strge	r1, [r4, #0]
 800c54a:	b90d      	cbnz	r5, 800c550 <_printf_i+0x110>
 800c54c:	2e00      	cmp	r6, #0
 800c54e:	d04b      	beq.n	800c5e8 <_printf_i+0x1a8>
 800c550:	4616      	mov	r6, r2
 800c552:	fbb5 f1f3 	udiv	r1, r5, r3
 800c556:	fb03 5711 	mls	r7, r3, r1, r5
 800c55a:	5dc7      	ldrb	r7, [r0, r7]
 800c55c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c560:	462f      	mov	r7, r5
 800c562:	42bb      	cmp	r3, r7
 800c564:	460d      	mov	r5, r1
 800c566:	d9f4      	bls.n	800c552 <_printf_i+0x112>
 800c568:	2b08      	cmp	r3, #8
 800c56a:	d10b      	bne.n	800c584 <_printf_i+0x144>
 800c56c:	6823      	ldr	r3, [r4, #0]
 800c56e:	07df      	lsls	r7, r3, #31
 800c570:	d508      	bpl.n	800c584 <_printf_i+0x144>
 800c572:	6923      	ldr	r3, [r4, #16]
 800c574:	6861      	ldr	r1, [r4, #4]
 800c576:	4299      	cmp	r1, r3
 800c578:	bfde      	ittt	le
 800c57a:	2330      	movle	r3, #48	@ 0x30
 800c57c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c580:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c584:	1b92      	subs	r2, r2, r6
 800c586:	6122      	str	r2, [r4, #16]
 800c588:	f8cd a000 	str.w	sl, [sp]
 800c58c:	464b      	mov	r3, r9
 800c58e:	aa03      	add	r2, sp, #12
 800c590:	4621      	mov	r1, r4
 800c592:	4640      	mov	r0, r8
 800c594:	f7ff fee6 	bl	800c364 <_printf_common>
 800c598:	3001      	adds	r0, #1
 800c59a:	d14a      	bne.n	800c632 <_printf_i+0x1f2>
 800c59c:	f04f 30ff 	mov.w	r0, #4294967295
 800c5a0:	b004      	add	sp, #16
 800c5a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5a6:	6823      	ldr	r3, [r4, #0]
 800c5a8:	f043 0320 	orr.w	r3, r3, #32
 800c5ac:	6023      	str	r3, [r4, #0]
 800c5ae:	4833      	ldr	r0, [pc, #204]	@ (800c67c <_printf_i+0x23c>)
 800c5b0:	2778      	movs	r7, #120	@ 0x78
 800c5b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c5b6:	6823      	ldr	r3, [r4, #0]
 800c5b8:	6831      	ldr	r1, [r6, #0]
 800c5ba:	061f      	lsls	r7, r3, #24
 800c5bc:	f851 5b04 	ldr.w	r5, [r1], #4
 800c5c0:	d402      	bmi.n	800c5c8 <_printf_i+0x188>
 800c5c2:	065f      	lsls	r7, r3, #25
 800c5c4:	bf48      	it	mi
 800c5c6:	b2ad      	uxthmi	r5, r5
 800c5c8:	6031      	str	r1, [r6, #0]
 800c5ca:	07d9      	lsls	r1, r3, #31
 800c5cc:	bf44      	itt	mi
 800c5ce:	f043 0320 	orrmi.w	r3, r3, #32
 800c5d2:	6023      	strmi	r3, [r4, #0]
 800c5d4:	b11d      	cbz	r5, 800c5de <_printf_i+0x19e>
 800c5d6:	2310      	movs	r3, #16
 800c5d8:	e7ac      	b.n	800c534 <_printf_i+0xf4>
 800c5da:	4827      	ldr	r0, [pc, #156]	@ (800c678 <_printf_i+0x238>)
 800c5dc:	e7e9      	b.n	800c5b2 <_printf_i+0x172>
 800c5de:	6823      	ldr	r3, [r4, #0]
 800c5e0:	f023 0320 	bic.w	r3, r3, #32
 800c5e4:	6023      	str	r3, [r4, #0]
 800c5e6:	e7f6      	b.n	800c5d6 <_printf_i+0x196>
 800c5e8:	4616      	mov	r6, r2
 800c5ea:	e7bd      	b.n	800c568 <_printf_i+0x128>
 800c5ec:	6833      	ldr	r3, [r6, #0]
 800c5ee:	6825      	ldr	r5, [r4, #0]
 800c5f0:	6961      	ldr	r1, [r4, #20]
 800c5f2:	1d18      	adds	r0, r3, #4
 800c5f4:	6030      	str	r0, [r6, #0]
 800c5f6:	062e      	lsls	r6, r5, #24
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	d501      	bpl.n	800c600 <_printf_i+0x1c0>
 800c5fc:	6019      	str	r1, [r3, #0]
 800c5fe:	e002      	b.n	800c606 <_printf_i+0x1c6>
 800c600:	0668      	lsls	r0, r5, #25
 800c602:	d5fb      	bpl.n	800c5fc <_printf_i+0x1bc>
 800c604:	8019      	strh	r1, [r3, #0]
 800c606:	2300      	movs	r3, #0
 800c608:	6123      	str	r3, [r4, #16]
 800c60a:	4616      	mov	r6, r2
 800c60c:	e7bc      	b.n	800c588 <_printf_i+0x148>
 800c60e:	6833      	ldr	r3, [r6, #0]
 800c610:	1d1a      	adds	r2, r3, #4
 800c612:	6032      	str	r2, [r6, #0]
 800c614:	681e      	ldr	r6, [r3, #0]
 800c616:	6862      	ldr	r2, [r4, #4]
 800c618:	2100      	movs	r1, #0
 800c61a:	4630      	mov	r0, r6
 800c61c:	f7f3 fe60 	bl	80002e0 <memchr>
 800c620:	b108      	cbz	r0, 800c626 <_printf_i+0x1e6>
 800c622:	1b80      	subs	r0, r0, r6
 800c624:	6060      	str	r0, [r4, #4]
 800c626:	6863      	ldr	r3, [r4, #4]
 800c628:	6123      	str	r3, [r4, #16]
 800c62a:	2300      	movs	r3, #0
 800c62c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c630:	e7aa      	b.n	800c588 <_printf_i+0x148>
 800c632:	6923      	ldr	r3, [r4, #16]
 800c634:	4632      	mov	r2, r6
 800c636:	4649      	mov	r1, r9
 800c638:	4640      	mov	r0, r8
 800c63a:	47d0      	blx	sl
 800c63c:	3001      	adds	r0, #1
 800c63e:	d0ad      	beq.n	800c59c <_printf_i+0x15c>
 800c640:	6823      	ldr	r3, [r4, #0]
 800c642:	079b      	lsls	r3, r3, #30
 800c644:	d413      	bmi.n	800c66e <_printf_i+0x22e>
 800c646:	68e0      	ldr	r0, [r4, #12]
 800c648:	9b03      	ldr	r3, [sp, #12]
 800c64a:	4298      	cmp	r0, r3
 800c64c:	bfb8      	it	lt
 800c64e:	4618      	movlt	r0, r3
 800c650:	e7a6      	b.n	800c5a0 <_printf_i+0x160>
 800c652:	2301      	movs	r3, #1
 800c654:	4632      	mov	r2, r6
 800c656:	4649      	mov	r1, r9
 800c658:	4640      	mov	r0, r8
 800c65a:	47d0      	blx	sl
 800c65c:	3001      	adds	r0, #1
 800c65e:	d09d      	beq.n	800c59c <_printf_i+0x15c>
 800c660:	3501      	adds	r5, #1
 800c662:	68e3      	ldr	r3, [r4, #12]
 800c664:	9903      	ldr	r1, [sp, #12]
 800c666:	1a5b      	subs	r3, r3, r1
 800c668:	42ab      	cmp	r3, r5
 800c66a:	dcf2      	bgt.n	800c652 <_printf_i+0x212>
 800c66c:	e7eb      	b.n	800c646 <_printf_i+0x206>
 800c66e:	2500      	movs	r5, #0
 800c670:	f104 0619 	add.w	r6, r4, #25
 800c674:	e7f5      	b.n	800c662 <_printf_i+0x222>
 800c676:	bf00      	nop
 800c678:	0806d31a 	.word	0x0806d31a
 800c67c:	0806d32b 	.word	0x0806d32b

0800c680 <std>:
 800c680:	2300      	movs	r3, #0
 800c682:	b510      	push	{r4, lr}
 800c684:	4604      	mov	r4, r0
 800c686:	e9c0 3300 	strd	r3, r3, [r0]
 800c68a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c68e:	6083      	str	r3, [r0, #8]
 800c690:	8181      	strh	r1, [r0, #12]
 800c692:	6643      	str	r3, [r0, #100]	@ 0x64
 800c694:	81c2      	strh	r2, [r0, #14]
 800c696:	6183      	str	r3, [r0, #24]
 800c698:	4619      	mov	r1, r3
 800c69a:	2208      	movs	r2, #8
 800c69c:	305c      	adds	r0, #92	@ 0x5c
 800c69e:	f000 f92e 	bl	800c8fe <memset>
 800c6a2:	4b0d      	ldr	r3, [pc, #52]	@ (800c6d8 <std+0x58>)
 800c6a4:	6263      	str	r3, [r4, #36]	@ 0x24
 800c6a6:	4b0d      	ldr	r3, [pc, #52]	@ (800c6dc <std+0x5c>)
 800c6a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c6aa:	4b0d      	ldr	r3, [pc, #52]	@ (800c6e0 <std+0x60>)
 800c6ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c6ae:	4b0d      	ldr	r3, [pc, #52]	@ (800c6e4 <std+0x64>)
 800c6b0:	6323      	str	r3, [r4, #48]	@ 0x30
 800c6b2:	4b0d      	ldr	r3, [pc, #52]	@ (800c6e8 <std+0x68>)
 800c6b4:	6224      	str	r4, [r4, #32]
 800c6b6:	429c      	cmp	r4, r3
 800c6b8:	d006      	beq.n	800c6c8 <std+0x48>
 800c6ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c6be:	4294      	cmp	r4, r2
 800c6c0:	d002      	beq.n	800c6c8 <std+0x48>
 800c6c2:	33d0      	adds	r3, #208	@ 0xd0
 800c6c4:	429c      	cmp	r4, r3
 800c6c6:	d105      	bne.n	800c6d4 <std+0x54>
 800c6c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c6cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6d0:	f000 b9b0 	b.w	800ca34 <__retarget_lock_init_recursive>
 800c6d4:	bd10      	pop	{r4, pc}
 800c6d6:	bf00      	nop
 800c6d8:	0800c845 	.word	0x0800c845
 800c6dc:	0800c867 	.word	0x0800c867
 800c6e0:	0800c89f 	.word	0x0800c89f
 800c6e4:	0800c8c3 	.word	0x0800c8c3
 800c6e8:	240691ac 	.word	0x240691ac

0800c6ec <stdio_exit_handler>:
 800c6ec:	4a02      	ldr	r2, [pc, #8]	@ (800c6f8 <stdio_exit_handler+0xc>)
 800c6ee:	4903      	ldr	r1, [pc, #12]	@ (800c6fc <stdio_exit_handler+0x10>)
 800c6f0:	4803      	ldr	r0, [pc, #12]	@ (800c700 <stdio_exit_handler+0x14>)
 800c6f2:	f000 b869 	b.w	800c7c8 <_fwalk_sglue>
 800c6f6:	bf00      	nop
 800c6f8:	24000b50 	.word	0x24000b50
 800c6fc:	0800e185 	.word	0x0800e185
 800c700:	24000b60 	.word	0x24000b60

0800c704 <cleanup_stdio>:
 800c704:	6841      	ldr	r1, [r0, #4]
 800c706:	4b0c      	ldr	r3, [pc, #48]	@ (800c738 <cleanup_stdio+0x34>)
 800c708:	4299      	cmp	r1, r3
 800c70a:	b510      	push	{r4, lr}
 800c70c:	4604      	mov	r4, r0
 800c70e:	d001      	beq.n	800c714 <cleanup_stdio+0x10>
 800c710:	f001 fd38 	bl	800e184 <_fflush_r>
 800c714:	68a1      	ldr	r1, [r4, #8]
 800c716:	4b09      	ldr	r3, [pc, #36]	@ (800c73c <cleanup_stdio+0x38>)
 800c718:	4299      	cmp	r1, r3
 800c71a:	d002      	beq.n	800c722 <cleanup_stdio+0x1e>
 800c71c:	4620      	mov	r0, r4
 800c71e:	f001 fd31 	bl	800e184 <_fflush_r>
 800c722:	68e1      	ldr	r1, [r4, #12]
 800c724:	4b06      	ldr	r3, [pc, #24]	@ (800c740 <cleanup_stdio+0x3c>)
 800c726:	4299      	cmp	r1, r3
 800c728:	d004      	beq.n	800c734 <cleanup_stdio+0x30>
 800c72a:	4620      	mov	r0, r4
 800c72c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c730:	f001 bd28 	b.w	800e184 <_fflush_r>
 800c734:	bd10      	pop	{r4, pc}
 800c736:	bf00      	nop
 800c738:	240691ac 	.word	0x240691ac
 800c73c:	24069214 	.word	0x24069214
 800c740:	2406927c 	.word	0x2406927c

0800c744 <global_stdio_init.part.0>:
 800c744:	b510      	push	{r4, lr}
 800c746:	4b0b      	ldr	r3, [pc, #44]	@ (800c774 <global_stdio_init.part.0+0x30>)
 800c748:	4c0b      	ldr	r4, [pc, #44]	@ (800c778 <global_stdio_init.part.0+0x34>)
 800c74a:	4a0c      	ldr	r2, [pc, #48]	@ (800c77c <global_stdio_init.part.0+0x38>)
 800c74c:	601a      	str	r2, [r3, #0]
 800c74e:	4620      	mov	r0, r4
 800c750:	2200      	movs	r2, #0
 800c752:	2104      	movs	r1, #4
 800c754:	f7ff ff94 	bl	800c680 <std>
 800c758:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c75c:	2201      	movs	r2, #1
 800c75e:	2109      	movs	r1, #9
 800c760:	f7ff ff8e 	bl	800c680 <std>
 800c764:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c768:	2202      	movs	r2, #2
 800c76a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c76e:	2112      	movs	r1, #18
 800c770:	f7ff bf86 	b.w	800c680 <std>
 800c774:	240692e4 	.word	0x240692e4
 800c778:	240691ac 	.word	0x240691ac
 800c77c:	0800c6ed 	.word	0x0800c6ed

0800c780 <__sfp_lock_acquire>:
 800c780:	4801      	ldr	r0, [pc, #4]	@ (800c788 <__sfp_lock_acquire+0x8>)
 800c782:	f000 b958 	b.w	800ca36 <__retarget_lock_acquire_recursive>
 800c786:	bf00      	nop
 800c788:	240692ed 	.word	0x240692ed

0800c78c <__sfp_lock_release>:
 800c78c:	4801      	ldr	r0, [pc, #4]	@ (800c794 <__sfp_lock_release+0x8>)
 800c78e:	f000 b953 	b.w	800ca38 <__retarget_lock_release_recursive>
 800c792:	bf00      	nop
 800c794:	240692ed 	.word	0x240692ed

0800c798 <__sinit>:
 800c798:	b510      	push	{r4, lr}
 800c79a:	4604      	mov	r4, r0
 800c79c:	f7ff fff0 	bl	800c780 <__sfp_lock_acquire>
 800c7a0:	6a23      	ldr	r3, [r4, #32]
 800c7a2:	b11b      	cbz	r3, 800c7ac <__sinit+0x14>
 800c7a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c7a8:	f7ff bff0 	b.w	800c78c <__sfp_lock_release>
 800c7ac:	4b04      	ldr	r3, [pc, #16]	@ (800c7c0 <__sinit+0x28>)
 800c7ae:	6223      	str	r3, [r4, #32]
 800c7b0:	4b04      	ldr	r3, [pc, #16]	@ (800c7c4 <__sinit+0x2c>)
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d1f5      	bne.n	800c7a4 <__sinit+0xc>
 800c7b8:	f7ff ffc4 	bl	800c744 <global_stdio_init.part.0>
 800c7bc:	e7f2      	b.n	800c7a4 <__sinit+0xc>
 800c7be:	bf00      	nop
 800c7c0:	0800c705 	.word	0x0800c705
 800c7c4:	240692e4 	.word	0x240692e4

0800c7c8 <_fwalk_sglue>:
 800c7c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7cc:	4607      	mov	r7, r0
 800c7ce:	4688      	mov	r8, r1
 800c7d0:	4614      	mov	r4, r2
 800c7d2:	2600      	movs	r6, #0
 800c7d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c7d8:	f1b9 0901 	subs.w	r9, r9, #1
 800c7dc:	d505      	bpl.n	800c7ea <_fwalk_sglue+0x22>
 800c7de:	6824      	ldr	r4, [r4, #0]
 800c7e0:	2c00      	cmp	r4, #0
 800c7e2:	d1f7      	bne.n	800c7d4 <_fwalk_sglue+0xc>
 800c7e4:	4630      	mov	r0, r6
 800c7e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7ea:	89ab      	ldrh	r3, [r5, #12]
 800c7ec:	2b01      	cmp	r3, #1
 800c7ee:	d907      	bls.n	800c800 <_fwalk_sglue+0x38>
 800c7f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c7f4:	3301      	adds	r3, #1
 800c7f6:	d003      	beq.n	800c800 <_fwalk_sglue+0x38>
 800c7f8:	4629      	mov	r1, r5
 800c7fa:	4638      	mov	r0, r7
 800c7fc:	47c0      	blx	r8
 800c7fe:	4306      	orrs	r6, r0
 800c800:	3568      	adds	r5, #104	@ 0x68
 800c802:	e7e9      	b.n	800c7d8 <_fwalk_sglue+0x10>

0800c804 <siprintf>:
 800c804:	b40e      	push	{r1, r2, r3}
 800c806:	b500      	push	{lr}
 800c808:	b09c      	sub	sp, #112	@ 0x70
 800c80a:	ab1d      	add	r3, sp, #116	@ 0x74
 800c80c:	9002      	str	r0, [sp, #8]
 800c80e:	9006      	str	r0, [sp, #24]
 800c810:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c814:	4809      	ldr	r0, [pc, #36]	@ (800c83c <siprintf+0x38>)
 800c816:	9107      	str	r1, [sp, #28]
 800c818:	9104      	str	r1, [sp, #16]
 800c81a:	4909      	ldr	r1, [pc, #36]	@ (800c840 <siprintf+0x3c>)
 800c81c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c820:	9105      	str	r1, [sp, #20]
 800c822:	6800      	ldr	r0, [r0, #0]
 800c824:	9301      	str	r3, [sp, #4]
 800c826:	a902      	add	r1, sp, #8
 800c828:	f001 fb2c 	bl	800de84 <_svfiprintf_r>
 800c82c:	9b02      	ldr	r3, [sp, #8]
 800c82e:	2200      	movs	r2, #0
 800c830:	701a      	strb	r2, [r3, #0]
 800c832:	b01c      	add	sp, #112	@ 0x70
 800c834:	f85d eb04 	ldr.w	lr, [sp], #4
 800c838:	b003      	add	sp, #12
 800c83a:	4770      	bx	lr
 800c83c:	24000b5c 	.word	0x24000b5c
 800c840:	ffff0208 	.word	0xffff0208

0800c844 <__sread>:
 800c844:	b510      	push	{r4, lr}
 800c846:	460c      	mov	r4, r1
 800c848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c84c:	f000 f894 	bl	800c978 <_read_r>
 800c850:	2800      	cmp	r0, #0
 800c852:	bfab      	itete	ge
 800c854:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c856:	89a3      	ldrhlt	r3, [r4, #12]
 800c858:	181b      	addge	r3, r3, r0
 800c85a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c85e:	bfac      	ite	ge
 800c860:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c862:	81a3      	strhlt	r3, [r4, #12]
 800c864:	bd10      	pop	{r4, pc}

0800c866 <__swrite>:
 800c866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c86a:	461f      	mov	r7, r3
 800c86c:	898b      	ldrh	r3, [r1, #12]
 800c86e:	05db      	lsls	r3, r3, #23
 800c870:	4605      	mov	r5, r0
 800c872:	460c      	mov	r4, r1
 800c874:	4616      	mov	r6, r2
 800c876:	d505      	bpl.n	800c884 <__swrite+0x1e>
 800c878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c87c:	2302      	movs	r3, #2
 800c87e:	2200      	movs	r2, #0
 800c880:	f000 f868 	bl	800c954 <_lseek_r>
 800c884:	89a3      	ldrh	r3, [r4, #12]
 800c886:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c88a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c88e:	81a3      	strh	r3, [r4, #12]
 800c890:	4632      	mov	r2, r6
 800c892:	463b      	mov	r3, r7
 800c894:	4628      	mov	r0, r5
 800c896:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c89a:	f000 b88f 	b.w	800c9bc <_write_r>

0800c89e <__sseek>:
 800c89e:	b510      	push	{r4, lr}
 800c8a0:	460c      	mov	r4, r1
 800c8a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8a6:	f000 f855 	bl	800c954 <_lseek_r>
 800c8aa:	1c43      	adds	r3, r0, #1
 800c8ac:	89a3      	ldrh	r3, [r4, #12]
 800c8ae:	bf15      	itete	ne
 800c8b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c8b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c8b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c8ba:	81a3      	strheq	r3, [r4, #12]
 800c8bc:	bf18      	it	ne
 800c8be:	81a3      	strhne	r3, [r4, #12]
 800c8c0:	bd10      	pop	{r4, pc}

0800c8c2 <__sclose>:
 800c8c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8c6:	f000 b835 	b.w	800c934 <_close_r>

0800c8ca <memmove>:
 800c8ca:	4288      	cmp	r0, r1
 800c8cc:	b510      	push	{r4, lr}
 800c8ce:	eb01 0402 	add.w	r4, r1, r2
 800c8d2:	d902      	bls.n	800c8da <memmove+0x10>
 800c8d4:	4284      	cmp	r4, r0
 800c8d6:	4623      	mov	r3, r4
 800c8d8:	d807      	bhi.n	800c8ea <memmove+0x20>
 800c8da:	1e43      	subs	r3, r0, #1
 800c8dc:	42a1      	cmp	r1, r4
 800c8de:	d008      	beq.n	800c8f2 <memmove+0x28>
 800c8e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c8e4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c8e8:	e7f8      	b.n	800c8dc <memmove+0x12>
 800c8ea:	4402      	add	r2, r0
 800c8ec:	4601      	mov	r1, r0
 800c8ee:	428a      	cmp	r2, r1
 800c8f0:	d100      	bne.n	800c8f4 <memmove+0x2a>
 800c8f2:	bd10      	pop	{r4, pc}
 800c8f4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c8f8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c8fc:	e7f7      	b.n	800c8ee <memmove+0x24>

0800c8fe <memset>:
 800c8fe:	4402      	add	r2, r0
 800c900:	4603      	mov	r3, r0
 800c902:	4293      	cmp	r3, r2
 800c904:	d100      	bne.n	800c908 <memset+0xa>
 800c906:	4770      	bx	lr
 800c908:	f803 1b01 	strb.w	r1, [r3], #1
 800c90c:	e7f9      	b.n	800c902 <memset+0x4>

0800c90e <strcat>:
 800c90e:	b510      	push	{r4, lr}
 800c910:	4602      	mov	r2, r0
 800c912:	7814      	ldrb	r4, [r2, #0]
 800c914:	4613      	mov	r3, r2
 800c916:	3201      	adds	r2, #1
 800c918:	2c00      	cmp	r4, #0
 800c91a:	d1fa      	bne.n	800c912 <strcat+0x4>
 800c91c:	3b01      	subs	r3, #1
 800c91e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c922:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c926:	2a00      	cmp	r2, #0
 800c928:	d1f9      	bne.n	800c91e <strcat+0x10>
 800c92a:	bd10      	pop	{r4, pc}

0800c92c <_localeconv_r>:
 800c92c:	4800      	ldr	r0, [pc, #0]	@ (800c930 <_localeconv_r+0x4>)
 800c92e:	4770      	bx	lr
 800c930:	24000c9c 	.word	0x24000c9c

0800c934 <_close_r>:
 800c934:	b538      	push	{r3, r4, r5, lr}
 800c936:	4d06      	ldr	r5, [pc, #24]	@ (800c950 <_close_r+0x1c>)
 800c938:	2300      	movs	r3, #0
 800c93a:	4604      	mov	r4, r0
 800c93c:	4608      	mov	r0, r1
 800c93e:	602b      	str	r3, [r5, #0]
 800c940:	f002 f918 	bl	800eb74 <_close>
 800c944:	1c43      	adds	r3, r0, #1
 800c946:	d102      	bne.n	800c94e <_close_r+0x1a>
 800c948:	682b      	ldr	r3, [r5, #0]
 800c94a:	b103      	cbz	r3, 800c94e <_close_r+0x1a>
 800c94c:	6023      	str	r3, [r4, #0]
 800c94e:	bd38      	pop	{r3, r4, r5, pc}
 800c950:	240692e8 	.word	0x240692e8

0800c954 <_lseek_r>:
 800c954:	b538      	push	{r3, r4, r5, lr}
 800c956:	4d07      	ldr	r5, [pc, #28]	@ (800c974 <_lseek_r+0x20>)
 800c958:	4604      	mov	r4, r0
 800c95a:	4608      	mov	r0, r1
 800c95c:	4611      	mov	r1, r2
 800c95e:	2200      	movs	r2, #0
 800c960:	602a      	str	r2, [r5, #0]
 800c962:	461a      	mov	r2, r3
 800c964:	f002 f92e 	bl	800ebc4 <_lseek>
 800c968:	1c43      	adds	r3, r0, #1
 800c96a:	d102      	bne.n	800c972 <_lseek_r+0x1e>
 800c96c:	682b      	ldr	r3, [r5, #0]
 800c96e:	b103      	cbz	r3, 800c972 <_lseek_r+0x1e>
 800c970:	6023      	str	r3, [r4, #0]
 800c972:	bd38      	pop	{r3, r4, r5, pc}
 800c974:	240692e8 	.word	0x240692e8

0800c978 <_read_r>:
 800c978:	b538      	push	{r3, r4, r5, lr}
 800c97a:	4d07      	ldr	r5, [pc, #28]	@ (800c998 <_read_r+0x20>)
 800c97c:	4604      	mov	r4, r0
 800c97e:	4608      	mov	r0, r1
 800c980:	4611      	mov	r1, r2
 800c982:	2200      	movs	r2, #0
 800c984:	602a      	str	r2, [r5, #0]
 800c986:	461a      	mov	r2, r3
 800c988:	f002 f924 	bl	800ebd4 <_read>
 800c98c:	1c43      	adds	r3, r0, #1
 800c98e:	d102      	bne.n	800c996 <_read_r+0x1e>
 800c990:	682b      	ldr	r3, [r5, #0]
 800c992:	b103      	cbz	r3, 800c996 <_read_r+0x1e>
 800c994:	6023      	str	r3, [r4, #0]
 800c996:	bd38      	pop	{r3, r4, r5, pc}
 800c998:	240692e8 	.word	0x240692e8

0800c99c <_sbrk_r>:
 800c99c:	b538      	push	{r3, r4, r5, lr}
 800c99e:	4d06      	ldr	r5, [pc, #24]	@ (800c9b8 <_sbrk_r+0x1c>)
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	4604      	mov	r4, r0
 800c9a4:	4608      	mov	r0, r1
 800c9a6:	602b      	str	r3, [r5, #0]
 800c9a8:	f7f4 fcc4 	bl	8001334 <_sbrk>
 800c9ac:	1c43      	adds	r3, r0, #1
 800c9ae:	d102      	bne.n	800c9b6 <_sbrk_r+0x1a>
 800c9b0:	682b      	ldr	r3, [r5, #0]
 800c9b2:	b103      	cbz	r3, 800c9b6 <_sbrk_r+0x1a>
 800c9b4:	6023      	str	r3, [r4, #0]
 800c9b6:	bd38      	pop	{r3, r4, r5, pc}
 800c9b8:	240692e8 	.word	0x240692e8

0800c9bc <_write_r>:
 800c9bc:	b538      	push	{r3, r4, r5, lr}
 800c9be:	4d07      	ldr	r5, [pc, #28]	@ (800c9dc <_write_r+0x20>)
 800c9c0:	4604      	mov	r4, r0
 800c9c2:	4608      	mov	r0, r1
 800c9c4:	4611      	mov	r1, r2
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	602a      	str	r2, [r5, #0]
 800c9ca:	461a      	mov	r2, r3
 800c9cc:	f002 f90a 	bl	800ebe4 <_write>
 800c9d0:	1c43      	adds	r3, r0, #1
 800c9d2:	d102      	bne.n	800c9da <_write_r+0x1e>
 800c9d4:	682b      	ldr	r3, [r5, #0]
 800c9d6:	b103      	cbz	r3, 800c9da <_write_r+0x1e>
 800c9d8:	6023      	str	r3, [r4, #0]
 800c9da:	bd38      	pop	{r3, r4, r5, pc}
 800c9dc:	240692e8 	.word	0x240692e8

0800c9e0 <__errno>:
 800c9e0:	4b01      	ldr	r3, [pc, #4]	@ (800c9e8 <__errno+0x8>)
 800c9e2:	6818      	ldr	r0, [r3, #0]
 800c9e4:	4770      	bx	lr
 800c9e6:	bf00      	nop
 800c9e8:	24000b5c 	.word	0x24000b5c

0800c9ec <__libc_init_array>:
 800c9ec:	b570      	push	{r4, r5, r6, lr}
 800c9ee:	4d0d      	ldr	r5, [pc, #52]	@ (800ca24 <__libc_init_array+0x38>)
 800c9f0:	4c0d      	ldr	r4, [pc, #52]	@ (800ca28 <__libc_init_array+0x3c>)
 800c9f2:	1b64      	subs	r4, r4, r5
 800c9f4:	10a4      	asrs	r4, r4, #2
 800c9f6:	2600      	movs	r6, #0
 800c9f8:	42a6      	cmp	r6, r4
 800c9fa:	d109      	bne.n	800ca10 <__libc_init_array+0x24>
 800c9fc:	4d0b      	ldr	r5, [pc, #44]	@ (800ca2c <__libc_init_array+0x40>)
 800c9fe:	4c0c      	ldr	r4, [pc, #48]	@ (800ca30 <__libc_init_array+0x44>)
 800ca00:	f002 f8fa 	bl	800ebf8 <_init>
 800ca04:	1b64      	subs	r4, r4, r5
 800ca06:	10a4      	asrs	r4, r4, #2
 800ca08:	2600      	movs	r6, #0
 800ca0a:	42a6      	cmp	r6, r4
 800ca0c:	d105      	bne.n	800ca1a <__libc_init_array+0x2e>
 800ca0e:	bd70      	pop	{r4, r5, r6, pc}
 800ca10:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca14:	4798      	blx	r3
 800ca16:	3601      	adds	r6, #1
 800ca18:	e7ee      	b.n	800c9f8 <__libc_init_array+0xc>
 800ca1a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca1e:	4798      	blx	r3
 800ca20:	3601      	adds	r6, #1
 800ca22:	e7f2      	b.n	800ca0a <__libc_init_array+0x1e>
 800ca24:	0806d8f0 	.word	0x0806d8f0
 800ca28:	0806d8f0 	.word	0x0806d8f0
 800ca2c:	0806d8f0 	.word	0x0806d8f0
 800ca30:	0806d8f4 	.word	0x0806d8f4

0800ca34 <__retarget_lock_init_recursive>:
 800ca34:	4770      	bx	lr

0800ca36 <__retarget_lock_acquire_recursive>:
 800ca36:	4770      	bx	lr

0800ca38 <__retarget_lock_release_recursive>:
 800ca38:	4770      	bx	lr

0800ca3a <strcpy>:
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca40:	f803 2b01 	strb.w	r2, [r3], #1
 800ca44:	2a00      	cmp	r2, #0
 800ca46:	d1f9      	bne.n	800ca3c <strcpy+0x2>
 800ca48:	4770      	bx	lr

0800ca4a <memcpy>:
 800ca4a:	440a      	add	r2, r1
 800ca4c:	4291      	cmp	r1, r2
 800ca4e:	f100 33ff 	add.w	r3, r0, #4294967295
 800ca52:	d100      	bne.n	800ca56 <memcpy+0xc>
 800ca54:	4770      	bx	lr
 800ca56:	b510      	push	{r4, lr}
 800ca58:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca60:	4291      	cmp	r1, r2
 800ca62:	d1f9      	bne.n	800ca58 <memcpy+0xe>
 800ca64:	bd10      	pop	{r4, pc}

0800ca66 <quorem>:
 800ca66:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca6a:	6903      	ldr	r3, [r0, #16]
 800ca6c:	690c      	ldr	r4, [r1, #16]
 800ca6e:	42a3      	cmp	r3, r4
 800ca70:	4607      	mov	r7, r0
 800ca72:	db7e      	blt.n	800cb72 <quorem+0x10c>
 800ca74:	3c01      	subs	r4, #1
 800ca76:	f101 0814 	add.w	r8, r1, #20
 800ca7a:	00a3      	lsls	r3, r4, #2
 800ca7c:	f100 0514 	add.w	r5, r0, #20
 800ca80:	9300      	str	r3, [sp, #0]
 800ca82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ca86:	9301      	str	r3, [sp, #4]
 800ca88:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ca8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ca90:	3301      	adds	r3, #1
 800ca92:	429a      	cmp	r2, r3
 800ca94:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ca98:	fbb2 f6f3 	udiv	r6, r2, r3
 800ca9c:	d32e      	bcc.n	800cafc <quorem+0x96>
 800ca9e:	f04f 0a00 	mov.w	sl, #0
 800caa2:	46c4      	mov	ip, r8
 800caa4:	46ae      	mov	lr, r5
 800caa6:	46d3      	mov	fp, sl
 800caa8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800caac:	b298      	uxth	r0, r3
 800caae:	fb06 a000 	mla	r0, r6, r0, sl
 800cab2:	0c02      	lsrs	r2, r0, #16
 800cab4:	0c1b      	lsrs	r3, r3, #16
 800cab6:	fb06 2303 	mla	r3, r6, r3, r2
 800caba:	f8de 2000 	ldr.w	r2, [lr]
 800cabe:	b280      	uxth	r0, r0
 800cac0:	b292      	uxth	r2, r2
 800cac2:	1a12      	subs	r2, r2, r0
 800cac4:	445a      	add	r2, fp
 800cac6:	f8de 0000 	ldr.w	r0, [lr]
 800caca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cace:	b29b      	uxth	r3, r3
 800cad0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800cad4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800cad8:	b292      	uxth	r2, r2
 800cada:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800cade:	45e1      	cmp	r9, ip
 800cae0:	f84e 2b04 	str.w	r2, [lr], #4
 800cae4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800cae8:	d2de      	bcs.n	800caa8 <quorem+0x42>
 800caea:	9b00      	ldr	r3, [sp, #0]
 800caec:	58eb      	ldr	r3, [r5, r3]
 800caee:	b92b      	cbnz	r3, 800cafc <quorem+0x96>
 800caf0:	9b01      	ldr	r3, [sp, #4]
 800caf2:	3b04      	subs	r3, #4
 800caf4:	429d      	cmp	r5, r3
 800caf6:	461a      	mov	r2, r3
 800caf8:	d32f      	bcc.n	800cb5a <quorem+0xf4>
 800cafa:	613c      	str	r4, [r7, #16]
 800cafc:	4638      	mov	r0, r7
 800cafe:	f001 f855 	bl	800dbac <__mcmp>
 800cb02:	2800      	cmp	r0, #0
 800cb04:	db25      	blt.n	800cb52 <quorem+0xec>
 800cb06:	4629      	mov	r1, r5
 800cb08:	2000      	movs	r0, #0
 800cb0a:	f858 2b04 	ldr.w	r2, [r8], #4
 800cb0e:	f8d1 c000 	ldr.w	ip, [r1]
 800cb12:	fa1f fe82 	uxth.w	lr, r2
 800cb16:	fa1f f38c 	uxth.w	r3, ip
 800cb1a:	eba3 030e 	sub.w	r3, r3, lr
 800cb1e:	4403      	add	r3, r0
 800cb20:	0c12      	lsrs	r2, r2, #16
 800cb22:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800cb26:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800cb2a:	b29b      	uxth	r3, r3
 800cb2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cb30:	45c1      	cmp	r9, r8
 800cb32:	f841 3b04 	str.w	r3, [r1], #4
 800cb36:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cb3a:	d2e6      	bcs.n	800cb0a <quorem+0xa4>
 800cb3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cb40:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cb44:	b922      	cbnz	r2, 800cb50 <quorem+0xea>
 800cb46:	3b04      	subs	r3, #4
 800cb48:	429d      	cmp	r5, r3
 800cb4a:	461a      	mov	r2, r3
 800cb4c:	d30b      	bcc.n	800cb66 <quorem+0x100>
 800cb4e:	613c      	str	r4, [r7, #16]
 800cb50:	3601      	adds	r6, #1
 800cb52:	4630      	mov	r0, r6
 800cb54:	b003      	add	sp, #12
 800cb56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb5a:	6812      	ldr	r2, [r2, #0]
 800cb5c:	3b04      	subs	r3, #4
 800cb5e:	2a00      	cmp	r2, #0
 800cb60:	d1cb      	bne.n	800cafa <quorem+0x94>
 800cb62:	3c01      	subs	r4, #1
 800cb64:	e7c6      	b.n	800caf4 <quorem+0x8e>
 800cb66:	6812      	ldr	r2, [r2, #0]
 800cb68:	3b04      	subs	r3, #4
 800cb6a:	2a00      	cmp	r2, #0
 800cb6c:	d1ef      	bne.n	800cb4e <quorem+0xe8>
 800cb6e:	3c01      	subs	r4, #1
 800cb70:	e7ea      	b.n	800cb48 <quorem+0xe2>
 800cb72:	2000      	movs	r0, #0
 800cb74:	e7ee      	b.n	800cb54 <quorem+0xee>
	...

0800cb78 <_dtoa_r>:
 800cb78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb7c:	ed2d 8b02 	vpush	{d8}
 800cb80:	69c7      	ldr	r7, [r0, #28]
 800cb82:	b091      	sub	sp, #68	@ 0x44
 800cb84:	ed8d 0b02 	vstr	d0, [sp, #8]
 800cb88:	ec55 4b10 	vmov	r4, r5, d0
 800cb8c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800cb8e:	9107      	str	r1, [sp, #28]
 800cb90:	4681      	mov	r9, r0
 800cb92:	9209      	str	r2, [sp, #36]	@ 0x24
 800cb94:	930d      	str	r3, [sp, #52]	@ 0x34
 800cb96:	b97f      	cbnz	r7, 800cbb8 <_dtoa_r+0x40>
 800cb98:	2010      	movs	r0, #16
 800cb9a:	f7ff f857 	bl	800bc4c <malloc>
 800cb9e:	4602      	mov	r2, r0
 800cba0:	f8c9 001c 	str.w	r0, [r9, #28]
 800cba4:	b920      	cbnz	r0, 800cbb0 <_dtoa_r+0x38>
 800cba6:	4ba0      	ldr	r3, [pc, #640]	@ (800ce28 <_dtoa_r+0x2b0>)
 800cba8:	21ef      	movs	r1, #239	@ 0xef
 800cbaa:	48a0      	ldr	r0, [pc, #640]	@ (800ce2c <_dtoa_r+0x2b4>)
 800cbac:	f001 fb12 	bl	800e1d4 <__assert_func>
 800cbb0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cbb4:	6007      	str	r7, [r0, #0]
 800cbb6:	60c7      	str	r7, [r0, #12]
 800cbb8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cbbc:	6819      	ldr	r1, [r3, #0]
 800cbbe:	b159      	cbz	r1, 800cbd8 <_dtoa_r+0x60>
 800cbc0:	685a      	ldr	r2, [r3, #4]
 800cbc2:	604a      	str	r2, [r1, #4]
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	4093      	lsls	r3, r2
 800cbc8:	608b      	str	r3, [r1, #8]
 800cbca:	4648      	mov	r0, r9
 800cbcc:	f000 fdb4 	bl	800d738 <_Bfree>
 800cbd0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	601a      	str	r2, [r3, #0]
 800cbd8:	1e2b      	subs	r3, r5, #0
 800cbda:	bfbb      	ittet	lt
 800cbdc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cbe0:	9303      	strlt	r3, [sp, #12]
 800cbe2:	2300      	movge	r3, #0
 800cbe4:	2201      	movlt	r2, #1
 800cbe6:	bfac      	ite	ge
 800cbe8:	6033      	strge	r3, [r6, #0]
 800cbea:	6032      	strlt	r2, [r6, #0]
 800cbec:	4b90      	ldr	r3, [pc, #576]	@ (800ce30 <_dtoa_r+0x2b8>)
 800cbee:	9e03      	ldr	r6, [sp, #12]
 800cbf0:	43b3      	bics	r3, r6
 800cbf2:	d110      	bne.n	800cc16 <_dtoa_r+0x9e>
 800cbf4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cbf6:	f242 730f 	movw	r3, #9999	@ 0x270f
 800cbfa:	6013      	str	r3, [r2, #0]
 800cbfc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800cc00:	4323      	orrs	r3, r4
 800cc02:	f000 84de 	beq.w	800d5c2 <_dtoa_r+0xa4a>
 800cc06:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cc08:	4f8a      	ldr	r7, [pc, #552]	@ (800ce34 <_dtoa_r+0x2bc>)
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	f000 84e0 	beq.w	800d5d0 <_dtoa_r+0xa58>
 800cc10:	1cfb      	adds	r3, r7, #3
 800cc12:	f000 bcdb 	b.w	800d5cc <_dtoa_r+0xa54>
 800cc16:	ed9d 8b02 	vldr	d8, [sp, #8]
 800cc1a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800cc1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc22:	d10a      	bne.n	800cc3a <_dtoa_r+0xc2>
 800cc24:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cc26:	2301      	movs	r3, #1
 800cc28:	6013      	str	r3, [r2, #0]
 800cc2a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cc2c:	b113      	cbz	r3, 800cc34 <_dtoa_r+0xbc>
 800cc2e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800cc30:	4b81      	ldr	r3, [pc, #516]	@ (800ce38 <_dtoa_r+0x2c0>)
 800cc32:	6013      	str	r3, [r2, #0]
 800cc34:	4f81      	ldr	r7, [pc, #516]	@ (800ce3c <_dtoa_r+0x2c4>)
 800cc36:	f000 bccb 	b.w	800d5d0 <_dtoa_r+0xa58>
 800cc3a:	aa0e      	add	r2, sp, #56	@ 0x38
 800cc3c:	a90f      	add	r1, sp, #60	@ 0x3c
 800cc3e:	4648      	mov	r0, r9
 800cc40:	eeb0 0b48 	vmov.f64	d0, d8
 800cc44:	f001 f862 	bl	800dd0c <__d2b>
 800cc48:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800cc4c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cc4e:	9001      	str	r0, [sp, #4]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d045      	beq.n	800cce0 <_dtoa_r+0x168>
 800cc54:	eeb0 7b48 	vmov.f64	d7, d8
 800cc58:	ee18 1a90 	vmov	r1, s17
 800cc5c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800cc60:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800cc64:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800cc68:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800cc6c:	2500      	movs	r5, #0
 800cc6e:	ee07 1a90 	vmov	s15, r1
 800cc72:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800cc76:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800ce10 <_dtoa_r+0x298>
 800cc7a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800cc7e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800ce18 <_dtoa_r+0x2a0>
 800cc82:	eea7 6b05 	vfma.f64	d6, d7, d5
 800cc86:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800ce20 <_dtoa_r+0x2a8>
 800cc8a:	ee07 3a90 	vmov	s15, r3
 800cc8e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800cc92:	eeb0 7b46 	vmov.f64	d7, d6
 800cc96:	eea4 7b05 	vfma.f64	d7, d4, d5
 800cc9a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800cc9e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800cca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cca6:	ee16 8a90 	vmov	r8, s13
 800ccaa:	d508      	bpl.n	800ccbe <_dtoa_r+0x146>
 800ccac:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800ccb0:	eeb4 6b47 	vcmp.f64	d6, d7
 800ccb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccb8:	bf18      	it	ne
 800ccba:	f108 38ff 	addne.w	r8, r8, #4294967295
 800ccbe:	f1b8 0f16 	cmp.w	r8, #22
 800ccc2:	d82b      	bhi.n	800cd1c <_dtoa_r+0x1a4>
 800ccc4:	495e      	ldr	r1, [pc, #376]	@ (800ce40 <_dtoa_r+0x2c8>)
 800ccc6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800ccca:	ed91 7b00 	vldr	d7, [r1]
 800ccce:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ccd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccd6:	d501      	bpl.n	800ccdc <_dtoa_r+0x164>
 800ccd8:	f108 38ff 	add.w	r8, r8, #4294967295
 800ccdc:	2100      	movs	r1, #0
 800ccde:	e01e      	b.n	800cd1e <_dtoa_r+0x1a6>
 800cce0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cce2:	4413      	add	r3, r2
 800cce4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800cce8:	2920      	cmp	r1, #32
 800ccea:	bfc1      	itttt	gt
 800ccec:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800ccf0:	408e      	lslgt	r6, r1
 800ccf2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800ccf6:	fa24 f101 	lsrgt.w	r1, r4, r1
 800ccfa:	bfd6      	itet	le
 800ccfc:	f1c1 0120 	rsble	r1, r1, #32
 800cd00:	4331      	orrgt	r1, r6
 800cd02:	fa04 f101 	lslle.w	r1, r4, r1
 800cd06:	ee07 1a90 	vmov	s15, r1
 800cd0a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800cd0e:	3b01      	subs	r3, #1
 800cd10:	ee17 1a90 	vmov	r1, s15
 800cd14:	2501      	movs	r5, #1
 800cd16:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800cd1a:	e7a8      	b.n	800cc6e <_dtoa_r+0xf6>
 800cd1c:	2101      	movs	r1, #1
 800cd1e:	1ad2      	subs	r2, r2, r3
 800cd20:	1e53      	subs	r3, r2, #1
 800cd22:	9306      	str	r3, [sp, #24]
 800cd24:	bf45      	ittet	mi
 800cd26:	f1c2 0301 	rsbmi	r3, r2, #1
 800cd2a:	9305      	strmi	r3, [sp, #20]
 800cd2c:	2300      	movpl	r3, #0
 800cd2e:	2300      	movmi	r3, #0
 800cd30:	bf4c      	ite	mi
 800cd32:	9306      	strmi	r3, [sp, #24]
 800cd34:	9305      	strpl	r3, [sp, #20]
 800cd36:	f1b8 0f00 	cmp.w	r8, #0
 800cd3a:	910c      	str	r1, [sp, #48]	@ 0x30
 800cd3c:	db18      	blt.n	800cd70 <_dtoa_r+0x1f8>
 800cd3e:	9b06      	ldr	r3, [sp, #24]
 800cd40:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800cd44:	4443      	add	r3, r8
 800cd46:	9306      	str	r3, [sp, #24]
 800cd48:	2300      	movs	r3, #0
 800cd4a:	9a07      	ldr	r2, [sp, #28]
 800cd4c:	2a09      	cmp	r2, #9
 800cd4e:	d849      	bhi.n	800cde4 <_dtoa_r+0x26c>
 800cd50:	2a05      	cmp	r2, #5
 800cd52:	bfc4      	itt	gt
 800cd54:	3a04      	subgt	r2, #4
 800cd56:	9207      	strgt	r2, [sp, #28]
 800cd58:	9a07      	ldr	r2, [sp, #28]
 800cd5a:	f1a2 0202 	sub.w	r2, r2, #2
 800cd5e:	bfcc      	ite	gt
 800cd60:	2400      	movgt	r4, #0
 800cd62:	2401      	movle	r4, #1
 800cd64:	2a03      	cmp	r2, #3
 800cd66:	d848      	bhi.n	800cdfa <_dtoa_r+0x282>
 800cd68:	e8df f002 	tbb	[pc, r2]
 800cd6c:	3a2c2e0b 	.word	0x3a2c2e0b
 800cd70:	9b05      	ldr	r3, [sp, #20]
 800cd72:	2200      	movs	r2, #0
 800cd74:	eba3 0308 	sub.w	r3, r3, r8
 800cd78:	9305      	str	r3, [sp, #20]
 800cd7a:	920a      	str	r2, [sp, #40]	@ 0x28
 800cd7c:	f1c8 0300 	rsb	r3, r8, #0
 800cd80:	e7e3      	b.n	800cd4a <_dtoa_r+0x1d2>
 800cd82:	2200      	movs	r2, #0
 800cd84:	9208      	str	r2, [sp, #32]
 800cd86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd88:	2a00      	cmp	r2, #0
 800cd8a:	dc39      	bgt.n	800ce00 <_dtoa_r+0x288>
 800cd8c:	f04f 0b01 	mov.w	fp, #1
 800cd90:	46da      	mov	sl, fp
 800cd92:	465a      	mov	r2, fp
 800cd94:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800cd98:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800cd9c:	2100      	movs	r1, #0
 800cd9e:	2004      	movs	r0, #4
 800cda0:	f100 0614 	add.w	r6, r0, #20
 800cda4:	4296      	cmp	r6, r2
 800cda6:	d930      	bls.n	800ce0a <_dtoa_r+0x292>
 800cda8:	6079      	str	r1, [r7, #4]
 800cdaa:	4648      	mov	r0, r9
 800cdac:	9304      	str	r3, [sp, #16]
 800cdae:	f000 fc83 	bl	800d6b8 <_Balloc>
 800cdb2:	9b04      	ldr	r3, [sp, #16]
 800cdb4:	4607      	mov	r7, r0
 800cdb6:	2800      	cmp	r0, #0
 800cdb8:	d146      	bne.n	800ce48 <_dtoa_r+0x2d0>
 800cdba:	4b22      	ldr	r3, [pc, #136]	@ (800ce44 <_dtoa_r+0x2cc>)
 800cdbc:	4602      	mov	r2, r0
 800cdbe:	f240 11af 	movw	r1, #431	@ 0x1af
 800cdc2:	e6f2      	b.n	800cbaa <_dtoa_r+0x32>
 800cdc4:	2201      	movs	r2, #1
 800cdc6:	e7dd      	b.n	800cd84 <_dtoa_r+0x20c>
 800cdc8:	2200      	movs	r2, #0
 800cdca:	9208      	str	r2, [sp, #32]
 800cdcc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cdce:	eb08 0b02 	add.w	fp, r8, r2
 800cdd2:	f10b 0a01 	add.w	sl, fp, #1
 800cdd6:	4652      	mov	r2, sl
 800cdd8:	2a01      	cmp	r2, #1
 800cdda:	bfb8      	it	lt
 800cddc:	2201      	movlt	r2, #1
 800cdde:	e7db      	b.n	800cd98 <_dtoa_r+0x220>
 800cde0:	2201      	movs	r2, #1
 800cde2:	e7f2      	b.n	800cdca <_dtoa_r+0x252>
 800cde4:	2401      	movs	r4, #1
 800cde6:	2200      	movs	r2, #0
 800cde8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800cdec:	f04f 3bff 	mov.w	fp, #4294967295
 800cdf0:	2100      	movs	r1, #0
 800cdf2:	46da      	mov	sl, fp
 800cdf4:	2212      	movs	r2, #18
 800cdf6:	9109      	str	r1, [sp, #36]	@ 0x24
 800cdf8:	e7ce      	b.n	800cd98 <_dtoa_r+0x220>
 800cdfa:	2201      	movs	r2, #1
 800cdfc:	9208      	str	r2, [sp, #32]
 800cdfe:	e7f5      	b.n	800cdec <_dtoa_r+0x274>
 800ce00:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800ce04:	46da      	mov	sl, fp
 800ce06:	465a      	mov	r2, fp
 800ce08:	e7c6      	b.n	800cd98 <_dtoa_r+0x220>
 800ce0a:	3101      	adds	r1, #1
 800ce0c:	0040      	lsls	r0, r0, #1
 800ce0e:	e7c7      	b.n	800cda0 <_dtoa_r+0x228>
 800ce10:	636f4361 	.word	0x636f4361
 800ce14:	3fd287a7 	.word	0x3fd287a7
 800ce18:	8b60c8b3 	.word	0x8b60c8b3
 800ce1c:	3fc68a28 	.word	0x3fc68a28
 800ce20:	509f79fb 	.word	0x509f79fb
 800ce24:	3fd34413 	.word	0x3fd34413
 800ce28:	0806d349 	.word	0x0806d349
 800ce2c:	0806d360 	.word	0x0806d360
 800ce30:	7ff00000 	.word	0x7ff00000
 800ce34:	0806d345 	.word	0x0806d345
 800ce38:	0806d319 	.word	0x0806d319
 800ce3c:	0806d318 	.word	0x0806d318
 800ce40:	0806d458 	.word	0x0806d458
 800ce44:	0806d3b8 	.word	0x0806d3b8
 800ce48:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800ce4c:	f1ba 0f0e 	cmp.w	sl, #14
 800ce50:	6010      	str	r0, [r2, #0]
 800ce52:	d86f      	bhi.n	800cf34 <_dtoa_r+0x3bc>
 800ce54:	2c00      	cmp	r4, #0
 800ce56:	d06d      	beq.n	800cf34 <_dtoa_r+0x3bc>
 800ce58:	f1b8 0f00 	cmp.w	r8, #0
 800ce5c:	f340 80c2 	ble.w	800cfe4 <_dtoa_r+0x46c>
 800ce60:	4aca      	ldr	r2, [pc, #808]	@ (800d18c <_dtoa_r+0x614>)
 800ce62:	f008 010f 	and.w	r1, r8, #15
 800ce66:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ce6a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800ce6e:	ed92 7b00 	vldr	d7, [r2]
 800ce72:	ea4f 1128 	mov.w	r1, r8, asr #4
 800ce76:	f000 80a9 	beq.w	800cfcc <_dtoa_r+0x454>
 800ce7a:	4ac5      	ldr	r2, [pc, #788]	@ (800d190 <_dtoa_r+0x618>)
 800ce7c:	ed92 6b08 	vldr	d6, [r2, #32]
 800ce80:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800ce84:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ce88:	f001 010f 	and.w	r1, r1, #15
 800ce8c:	2203      	movs	r2, #3
 800ce8e:	48c0      	ldr	r0, [pc, #768]	@ (800d190 <_dtoa_r+0x618>)
 800ce90:	2900      	cmp	r1, #0
 800ce92:	f040 809d 	bne.w	800cfd0 <_dtoa_r+0x458>
 800ce96:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ce9a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ce9e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cea2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800cea4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cea8:	2900      	cmp	r1, #0
 800ceaa:	f000 80c1 	beq.w	800d030 <_dtoa_r+0x4b8>
 800ceae:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800ceb2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ceb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ceba:	f140 80b9 	bpl.w	800d030 <_dtoa_r+0x4b8>
 800cebe:	f1ba 0f00 	cmp.w	sl, #0
 800cec2:	f000 80b5 	beq.w	800d030 <_dtoa_r+0x4b8>
 800cec6:	f1bb 0f00 	cmp.w	fp, #0
 800ceca:	dd31      	ble.n	800cf30 <_dtoa_r+0x3b8>
 800cecc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800ced0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ced4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ced8:	f108 31ff 	add.w	r1, r8, #4294967295
 800cedc:	9104      	str	r1, [sp, #16]
 800cede:	3201      	adds	r2, #1
 800cee0:	465c      	mov	r4, fp
 800cee2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800cee6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800ceea:	ee07 2a90 	vmov	s15, r2
 800ceee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800cef2:	eea7 5b06 	vfma.f64	d5, d7, d6
 800cef6:	ee15 2a90 	vmov	r2, s11
 800cefa:	ec51 0b15 	vmov	r0, r1, d5
 800cefe:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800cf02:	2c00      	cmp	r4, #0
 800cf04:	f040 8098 	bne.w	800d038 <_dtoa_r+0x4c0>
 800cf08:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800cf0c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800cf10:	ec41 0b17 	vmov	d7, r0, r1
 800cf14:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cf18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf1c:	f300 8261 	bgt.w	800d3e2 <_dtoa_r+0x86a>
 800cf20:	eeb1 7b47 	vneg.f64	d7, d7
 800cf24:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cf28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf2c:	f100 80f5 	bmi.w	800d11a <_dtoa_r+0x5a2>
 800cf30:	ed8d 8b02 	vstr	d8, [sp, #8]
 800cf34:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cf36:	2a00      	cmp	r2, #0
 800cf38:	f2c0 812c 	blt.w	800d194 <_dtoa_r+0x61c>
 800cf3c:	f1b8 0f0e 	cmp.w	r8, #14
 800cf40:	f300 8128 	bgt.w	800d194 <_dtoa_r+0x61c>
 800cf44:	4b91      	ldr	r3, [pc, #580]	@ (800d18c <_dtoa_r+0x614>)
 800cf46:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800cf4a:	ed93 6b00 	vldr	d6, [r3]
 800cf4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	da03      	bge.n	800cf5c <_dtoa_r+0x3e4>
 800cf54:	f1ba 0f00 	cmp.w	sl, #0
 800cf58:	f340 80d2 	ble.w	800d100 <_dtoa_r+0x588>
 800cf5c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800cf60:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cf64:	463e      	mov	r6, r7
 800cf66:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800cf6a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800cf6e:	ee15 3a10 	vmov	r3, s10
 800cf72:	3330      	adds	r3, #48	@ 0x30
 800cf74:	f806 3b01 	strb.w	r3, [r6], #1
 800cf78:	1bf3      	subs	r3, r6, r7
 800cf7a:	459a      	cmp	sl, r3
 800cf7c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800cf80:	eea3 7b46 	vfms.f64	d7, d3, d6
 800cf84:	f040 80f8 	bne.w	800d178 <_dtoa_r+0x600>
 800cf88:	ee37 7b07 	vadd.f64	d7, d7, d7
 800cf8c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800cf90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf94:	f300 80dd 	bgt.w	800d152 <_dtoa_r+0x5da>
 800cf98:	eeb4 7b46 	vcmp.f64	d7, d6
 800cf9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfa0:	d104      	bne.n	800cfac <_dtoa_r+0x434>
 800cfa2:	ee15 3a10 	vmov	r3, s10
 800cfa6:	07db      	lsls	r3, r3, #31
 800cfa8:	f100 80d3 	bmi.w	800d152 <_dtoa_r+0x5da>
 800cfac:	9901      	ldr	r1, [sp, #4]
 800cfae:	4648      	mov	r0, r9
 800cfb0:	f000 fbc2 	bl	800d738 <_Bfree>
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cfb8:	7033      	strb	r3, [r6, #0]
 800cfba:	f108 0301 	add.w	r3, r8, #1
 800cfbe:	6013      	str	r3, [r2, #0]
 800cfc0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	f000 8304 	beq.w	800d5d0 <_dtoa_r+0xa58>
 800cfc8:	601e      	str	r6, [r3, #0]
 800cfca:	e301      	b.n	800d5d0 <_dtoa_r+0xa58>
 800cfcc:	2202      	movs	r2, #2
 800cfce:	e75e      	b.n	800ce8e <_dtoa_r+0x316>
 800cfd0:	07cc      	lsls	r4, r1, #31
 800cfd2:	d504      	bpl.n	800cfde <_dtoa_r+0x466>
 800cfd4:	ed90 6b00 	vldr	d6, [r0]
 800cfd8:	3201      	adds	r2, #1
 800cfda:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cfde:	1049      	asrs	r1, r1, #1
 800cfe0:	3008      	adds	r0, #8
 800cfe2:	e755      	b.n	800ce90 <_dtoa_r+0x318>
 800cfe4:	d022      	beq.n	800d02c <_dtoa_r+0x4b4>
 800cfe6:	f1c8 0100 	rsb	r1, r8, #0
 800cfea:	4a68      	ldr	r2, [pc, #416]	@ (800d18c <_dtoa_r+0x614>)
 800cfec:	f001 000f 	and.w	r0, r1, #15
 800cff0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800cff4:	ed92 7b00 	vldr	d7, [r2]
 800cff8:	ee28 7b07 	vmul.f64	d7, d8, d7
 800cffc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d000:	4863      	ldr	r0, [pc, #396]	@ (800d190 <_dtoa_r+0x618>)
 800d002:	1109      	asrs	r1, r1, #4
 800d004:	2400      	movs	r4, #0
 800d006:	2202      	movs	r2, #2
 800d008:	b929      	cbnz	r1, 800d016 <_dtoa_r+0x49e>
 800d00a:	2c00      	cmp	r4, #0
 800d00c:	f43f af49 	beq.w	800cea2 <_dtoa_r+0x32a>
 800d010:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d014:	e745      	b.n	800cea2 <_dtoa_r+0x32a>
 800d016:	07ce      	lsls	r6, r1, #31
 800d018:	d505      	bpl.n	800d026 <_dtoa_r+0x4ae>
 800d01a:	ed90 6b00 	vldr	d6, [r0]
 800d01e:	3201      	adds	r2, #1
 800d020:	2401      	movs	r4, #1
 800d022:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d026:	1049      	asrs	r1, r1, #1
 800d028:	3008      	adds	r0, #8
 800d02a:	e7ed      	b.n	800d008 <_dtoa_r+0x490>
 800d02c:	2202      	movs	r2, #2
 800d02e:	e738      	b.n	800cea2 <_dtoa_r+0x32a>
 800d030:	f8cd 8010 	str.w	r8, [sp, #16]
 800d034:	4654      	mov	r4, sl
 800d036:	e754      	b.n	800cee2 <_dtoa_r+0x36a>
 800d038:	4a54      	ldr	r2, [pc, #336]	@ (800d18c <_dtoa_r+0x614>)
 800d03a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800d03e:	ed12 4b02 	vldr	d4, [r2, #-8]
 800d042:	9a08      	ldr	r2, [sp, #32]
 800d044:	ec41 0b17 	vmov	d7, r0, r1
 800d048:	443c      	add	r4, r7
 800d04a:	b34a      	cbz	r2, 800d0a0 <_dtoa_r+0x528>
 800d04c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800d050:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800d054:	463e      	mov	r6, r7
 800d056:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d05a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800d05e:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d062:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d066:	ee14 2a90 	vmov	r2, s9
 800d06a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d06e:	3230      	adds	r2, #48	@ 0x30
 800d070:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d074:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d07c:	f806 2b01 	strb.w	r2, [r6], #1
 800d080:	d438      	bmi.n	800d0f4 <_dtoa_r+0x57c>
 800d082:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d086:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d08a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d08e:	d462      	bmi.n	800d156 <_dtoa_r+0x5de>
 800d090:	42a6      	cmp	r6, r4
 800d092:	f43f af4d 	beq.w	800cf30 <_dtoa_r+0x3b8>
 800d096:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d09a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d09e:	e7e0      	b.n	800d062 <_dtoa_r+0x4ea>
 800d0a0:	4621      	mov	r1, r4
 800d0a2:	463e      	mov	r6, r7
 800d0a4:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d0a8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800d0ac:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d0b0:	ee14 2a90 	vmov	r2, s9
 800d0b4:	3230      	adds	r2, #48	@ 0x30
 800d0b6:	f806 2b01 	strb.w	r2, [r6], #1
 800d0ba:	42a6      	cmp	r6, r4
 800d0bc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d0c0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d0c4:	d119      	bne.n	800d0fa <_dtoa_r+0x582>
 800d0c6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800d0ca:	ee37 4b05 	vadd.f64	d4, d7, d5
 800d0ce:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d0d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0d6:	dc3e      	bgt.n	800d156 <_dtoa_r+0x5de>
 800d0d8:	ee35 5b47 	vsub.f64	d5, d5, d7
 800d0dc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800d0e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0e4:	f57f af24 	bpl.w	800cf30 <_dtoa_r+0x3b8>
 800d0e8:	460e      	mov	r6, r1
 800d0ea:	3901      	subs	r1, #1
 800d0ec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d0f0:	2b30      	cmp	r3, #48	@ 0x30
 800d0f2:	d0f9      	beq.n	800d0e8 <_dtoa_r+0x570>
 800d0f4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d0f8:	e758      	b.n	800cfac <_dtoa_r+0x434>
 800d0fa:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d0fe:	e7d5      	b.n	800d0ac <_dtoa_r+0x534>
 800d100:	d10b      	bne.n	800d11a <_dtoa_r+0x5a2>
 800d102:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800d106:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d10a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d10e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d116:	f2c0 8161 	blt.w	800d3dc <_dtoa_r+0x864>
 800d11a:	2400      	movs	r4, #0
 800d11c:	4625      	mov	r5, r4
 800d11e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d120:	43db      	mvns	r3, r3
 800d122:	9304      	str	r3, [sp, #16]
 800d124:	463e      	mov	r6, r7
 800d126:	f04f 0800 	mov.w	r8, #0
 800d12a:	4621      	mov	r1, r4
 800d12c:	4648      	mov	r0, r9
 800d12e:	f000 fb03 	bl	800d738 <_Bfree>
 800d132:	2d00      	cmp	r5, #0
 800d134:	d0de      	beq.n	800d0f4 <_dtoa_r+0x57c>
 800d136:	f1b8 0f00 	cmp.w	r8, #0
 800d13a:	d005      	beq.n	800d148 <_dtoa_r+0x5d0>
 800d13c:	45a8      	cmp	r8, r5
 800d13e:	d003      	beq.n	800d148 <_dtoa_r+0x5d0>
 800d140:	4641      	mov	r1, r8
 800d142:	4648      	mov	r0, r9
 800d144:	f000 faf8 	bl	800d738 <_Bfree>
 800d148:	4629      	mov	r1, r5
 800d14a:	4648      	mov	r0, r9
 800d14c:	f000 faf4 	bl	800d738 <_Bfree>
 800d150:	e7d0      	b.n	800d0f4 <_dtoa_r+0x57c>
 800d152:	f8cd 8010 	str.w	r8, [sp, #16]
 800d156:	4633      	mov	r3, r6
 800d158:	461e      	mov	r6, r3
 800d15a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d15e:	2a39      	cmp	r2, #57	@ 0x39
 800d160:	d106      	bne.n	800d170 <_dtoa_r+0x5f8>
 800d162:	429f      	cmp	r7, r3
 800d164:	d1f8      	bne.n	800d158 <_dtoa_r+0x5e0>
 800d166:	9a04      	ldr	r2, [sp, #16]
 800d168:	3201      	adds	r2, #1
 800d16a:	9204      	str	r2, [sp, #16]
 800d16c:	2230      	movs	r2, #48	@ 0x30
 800d16e:	703a      	strb	r2, [r7, #0]
 800d170:	781a      	ldrb	r2, [r3, #0]
 800d172:	3201      	adds	r2, #1
 800d174:	701a      	strb	r2, [r3, #0]
 800d176:	e7bd      	b.n	800d0f4 <_dtoa_r+0x57c>
 800d178:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d17c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d184:	f47f aeef 	bne.w	800cf66 <_dtoa_r+0x3ee>
 800d188:	e710      	b.n	800cfac <_dtoa_r+0x434>
 800d18a:	bf00      	nop
 800d18c:	0806d458 	.word	0x0806d458
 800d190:	0806d430 	.word	0x0806d430
 800d194:	9908      	ldr	r1, [sp, #32]
 800d196:	2900      	cmp	r1, #0
 800d198:	f000 80e3 	beq.w	800d362 <_dtoa_r+0x7ea>
 800d19c:	9907      	ldr	r1, [sp, #28]
 800d19e:	2901      	cmp	r1, #1
 800d1a0:	f300 80c8 	bgt.w	800d334 <_dtoa_r+0x7bc>
 800d1a4:	2d00      	cmp	r5, #0
 800d1a6:	f000 80c1 	beq.w	800d32c <_dtoa_r+0x7b4>
 800d1aa:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d1ae:	9e05      	ldr	r6, [sp, #20]
 800d1b0:	461c      	mov	r4, r3
 800d1b2:	9304      	str	r3, [sp, #16]
 800d1b4:	9b05      	ldr	r3, [sp, #20]
 800d1b6:	4413      	add	r3, r2
 800d1b8:	9305      	str	r3, [sp, #20]
 800d1ba:	9b06      	ldr	r3, [sp, #24]
 800d1bc:	2101      	movs	r1, #1
 800d1be:	4413      	add	r3, r2
 800d1c0:	4648      	mov	r0, r9
 800d1c2:	9306      	str	r3, [sp, #24]
 800d1c4:	f000 fb6c 	bl	800d8a0 <__i2b>
 800d1c8:	9b04      	ldr	r3, [sp, #16]
 800d1ca:	4605      	mov	r5, r0
 800d1cc:	b166      	cbz	r6, 800d1e8 <_dtoa_r+0x670>
 800d1ce:	9a06      	ldr	r2, [sp, #24]
 800d1d0:	2a00      	cmp	r2, #0
 800d1d2:	dd09      	ble.n	800d1e8 <_dtoa_r+0x670>
 800d1d4:	42b2      	cmp	r2, r6
 800d1d6:	9905      	ldr	r1, [sp, #20]
 800d1d8:	bfa8      	it	ge
 800d1da:	4632      	movge	r2, r6
 800d1dc:	1a89      	subs	r1, r1, r2
 800d1de:	9105      	str	r1, [sp, #20]
 800d1e0:	9906      	ldr	r1, [sp, #24]
 800d1e2:	1ab6      	subs	r6, r6, r2
 800d1e4:	1a8a      	subs	r2, r1, r2
 800d1e6:	9206      	str	r2, [sp, #24]
 800d1e8:	b1fb      	cbz	r3, 800d22a <_dtoa_r+0x6b2>
 800d1ea:	9a08      	ldr	r2, [sp, #32]
 800d1ec:	2a00      	cmp	r2, #0
 800d1ee:	f000 80bc 	beq.w	800d36a <_dtoa_r+0x7f2>
 800d1f2:	b19c      	cbz	r4, 800d21c <_dtoa_r+0x6a4>
 800d1f4:	4629      	mov	r1, r5
 800d1f6:	4622      	mov	r2, r4
 800d1f8:	4648      	mov	r0, r9
 800d1fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d1fc:	f000 fc10 	bl	800da20 <__pow5mult>
 800d200:	9a01      	ldr	r2, [sp, #4]
 800d202:	4601      	mov	r1, r0
 800d204:	4605      	mov	r5, r0
 800d206:	4648      	mov	r0, r9
 800d208:	f000 fb60 	bl	800d8cc <__multiply>
 800d20c:	9901      	ldr	r1, [sp, #4]
 800d20e:	9004      	str	r0, [sp, #16]
 800d210:	4648      	mov	r0, r9
 800d212:	f000 fa91 	bl	800d738 <_Bfree>
 800d216:	9a04      	ldr	r2, [sp, #16]
 800d218:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d21a:	9201      	str	r2, [sp, #4]
 800d21c:	1b1a      	subs	r2, r3, r4
 800d21e:	d004      	beq.n	800d22a <_dtoa_r+0x6b2>
 800d220:	9901      	ldr	r1, [sp, #4]
 800d222:	4648      	mov	r0, r9
 800d224:	f000 fbfc 	bl	800da20 <__pow5mult>
 800d228:	9001      	str	r0, [sp, #4]
 800d22a:	2101      	movs	r1, #1
 800d22c:	4648      	mov	r0, r9
 800d22e:	f000 fb37 	bl	800d8a0 <__i2b>
 800d232:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d234:	4604      	mov	r4, r0
 800d236:	2b00      	cmp	r3, #0
 800d238:	f000 81d0 	beq.w	800d5dc <_dtoa_r+0xa64>
 800d23c:	461a      	mov	r2, r3
 800d23e:	4601      	mov	r1, r0
 800d240:	4648      	mov	r0, r9
 800d242:	f000 fbed 	bl	800da20 <__pow5mult>
 800d246:	9b07      	ldr	r3, [sp, #28]
 800d248:	2b01      	cmp	r3, #1
 800d24a:	4604      	mov	r4, r0
 800d24c:	f300 8095 	bgt.w	800d37a <_dtoa_r+0x802>
 800d250:	9b02      	ldr	r3, [sp, #8]
 800d252:	2b00      	cmp	r3, #0
 800d254:	f040 808b 	bne.w	800d36e <_dtoa_r+0x7f6>
 800d258:	9b03      	ldr	r3, [sp, #12]
 800d25a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800d25e:	2a00      	cmp	r2, #0
 800d260:	f040 8087 	bne.w	800d372 <_dtoa_r+0x7fa>
 800d264:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800d268:	0d12      	lsrs	r2, r2, #20
 800d26a:	0512      	lsls	r2, r2, #20
 800d26c:	2a00      	cmp	r2, #0
 800d26e:	f000 8082 	beq.w	800d376 <_dtoa_r+0x7fe>
 800d272:	9b05      	ldr	r3, [sp, #20]
 800d274:	3301      	adds	r3, #1
 800d276:	9305      	str	r3, [sp, #20]
 800d278:	9b06      	ldr	r3, [sp, #24]
 800d27a:	3301      	adds	r3, #1
 800d27c:	9306      	str	r3, [sp, #24]
 800d27e:	2301      	movs	r3, #1
 800d280:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d282:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d284:	2b00      	cmp	r3, #0
 800d286:	f000 81af 	beq.w	800d5e8 <_dtoa_r+0xa70>
 800d28a:	6922      	ldr	r2, [r4, #16]
 800d28c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d290:	6910      	ldr	r0, [r2, #16]
 800d292:	f000 fab9 	bl	800d808 <__hi0bits>
 800d296:	f1c0 0020 	rsb	r0, r0, #32
 800d29a:	9b06      	ldr	r3, [sp, #24]
 800d29c:	4418      	add	r0, r3
 800d29e:	f010 001f 	ands.w	r0, r0, #31
 800d2a2:	d076      	beq.n	800d392 <_dtoa_r+0x81a>
 800d2a4:	f1c0 0220 	rsb	r2, r0, #32
 800d2a8:	2a04      	cmp	r2, #4
 800d2aa:	dd69      	ble.n	800d380 <_dtoa_r+0x808>
 800d2ac:	9b05      	ldr	r3, [sp, #20]
 800d2ae:	f1c0 001c 	rsb	r0, r0, #28
 800d2b2:	4403      	add	r3, r0
 800d2b4:	9305      	str	r3, [sp, #20]
 800d2b6:	9b06      	ldr	r3, [sp, #24]
 800d2b8:	4406      	add	r6, r0
 800d2ba:	4403      	add	r3, r0
 800d2bc:	9306      	str	r3, [sp, #24]
 800d2be:	9b05      	ldr	r3, [sp, #20]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	dd05      	ble.n	800d2d0 <_dtoa_r+0x758>
 800d2c4:	9901      	ldr	r1, [sp, #4]
 800d2c6:	461a      	mov	r2, r3
 800d2c8:	4648      	mov	r0, r9
 800d2ca:	f000 fc03 	bl	800dad4 <__lshift>
 800d2ce:	9001      	str	r0, [sp, #4]
 800d2d0:	9b06      	ldr	r3, [sp, #24]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	dd05      	ble.n	800d2e2 <_dtoa_r+0x76a>
 800d2d6:	4621      	mov	r1, r4
 800d2d8:	461a      	mov	r2, r3
 800d2da:	4648      	mov	r0, r9
 800d2dc:	f000 fbfa 	bl	800dad4 <__lshift>
 800d2e0:	4604      	mov	r4, r0
 800d2e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d056      	beq.n	800d396 <_dtoa_r+0x81e>
 800d2e8:	9801      	ldr	r0, [sp, #4]
 800d2ea:	4621      	mov	r1, r4
 800d2ec:	f000 fc5e 	bl	800dbac <__mcmp>
 800d2f0:	2800      	cmp	r0, #0
 800d2f2:	da50      	bge.n	800d396 <_dtoa_r+0x81e>
 800d2f4:	f108 33ff 	add.w	r3, r8, #4294967295
 800d2f8:	9304      	str	r3, [sp, #16]
 800d2fa:	9901      	ldr	r1, [sp, #4]
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	220a      	movs	r2, #10
 800d300:	4648      	mov	r0, r9
 800d302:	f000 fa3b 	bl	800d77c <__multadd>
 800d306:	9b08      	ldr	r3, [sp, #32]
 800d308:	9001      	str	r0, [sp, #4]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	f000 816e 	beq.w	800d5ec <_dtoa_r+0xa74>
 800d310:	4629      	mov	r1, r5
 800d312:	2300      	movs	r3, #0
 800d314:	220a      	movs	r2, #10
 800d316:	4648      	mov	r0, r9
 800d318:	f000 fa30 	bl	800d77c <__multadd>
 800d31c:	f1bb 0f00 	cmp.w	fp, #0
 800d320:	4605      	mov	r5, r0
 800d322:	dc64      	bgt.n	800d3ee <_dtoa_r+0x876>
 800d324:	9b07      	ldr	r3, [sp, #28]
 800d326:	2b02      	cmp	r3, #2
 800d328:	dc3e      	bgt.n	800d3a8 <_dtoa_r+0x830>
 800d32a:	e060      	b.n	800d3ee <_dtoa_r+0x876>
 800d32c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d32e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d332:	e73c      	b.n	800d1ae <_dtoa_r+0x636>
 800d334:	f10a 34ff 	add.w	r4, sl, #4294967295
 800d338:	42a3      	cmp	r3, r4
 800d33a:	bfbf      	itttt	lt
 800d33c:	1ae2      	sublt	r2, r4, r3
 800d33e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d340:	189b      	addlt	r3, r3, r2
 800d342:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800d344:	bfae      	itee	ge
 800d346:	1b1c      	subge	r4, r3, r4
 800d348:	4623      	movlt	r3, r4
 800d34a:	2400      	movlt	r4, #0
 800d34c:	f1ba 0f00 	cmp.w	sl, #0
 800d350:	bfb5      	itete	lt
 800d352:	9a05      	ldrlt	r2, [sp, #20]
 800d354:	9e05      	ldrge	r6, [sp, #20]
 800d356:	eba2 060a 	sublt.w	r6, r2, sl
 800d35a:	4652      	movge	r2, sl
 800d35c:	bfb8      	it	lt
 800d35e:	2200      	movlt	r2, #0
 800d360:	e727      	b.n	800d1b2 <_dtoa_r+0x63a>
 800d362:	9e05      	ldr	r6, [sp, #20]
 800d364:	9d08      	ldr	r5, [sp, #32]
 800d366:	461c      	mov	r4, r3
 800d368:	e730      	b.n	800d1cc <_dtoa_r+0x654>
 800d36a:	461a      	mov	r2, r3
 800d36c:	e758      	b.n	800d220 <_dtoa_r+0x6a8>
 800d36e:	2300      	movs	r3, #0
 800d370:	e786      	b.n	800d280 <_dtoa_r+0x708>
 800d372:	9b02      	ldr	r3, [sp, #8]
 800d374:	e784      	b.n	800d280 <_dtoa_r+0x708>
 800d376:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d378:	e783      	b.n	800d282 <_dtoa_r+0x70a>
 800d37a:	2300      	movs	r3, #0
 800d37c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d37e:	e784      	b.n	800d28a <_dtoa_r+0x712>
 800d380:	d09d      	beq.n	800d2be <_dtoa_r+0x746>
 800d382:	9b05      	ldr	r3, [sp, #20]
 800d384:	321c      	adds	r2, #28
 800d386:	4413      	add	r3, r2
 800d388:	9305      	str	r3, [sp, #20]
 800d38a:	9b06      	ldr	r3, [sp, #24]
 800d38c:	4416      	add	r6, r2
 800d38e:	4413      	add	r3, r2
 800d390:	e794      	b.n	800d2bc <_dtoa_r+0x744>
 800d392:	4602      	mov	r2, r0
 800d394:	e7f5      	b.n	800d382 <_dtoa_r+0x80a>
 800d396:	f1ba 0f00 	cmp.w	sl, #0
 800d39a:	f8cd 8010 	str.w	r8, [sp, #16]
 800d39e:	46d3      	mov	fp, sl
 800d3a0:	dc21      	bgt.n	800d3e6 <_dtoa_r+0x86e>
 800d3a2:	9b07      	ldr	r3, [sp, #28]
 800d3a4:	2b02      	cmp	r3, #2
 800d3a6:	dd1e      	ble.n	800d3e6 <_dtoa_r+0x86e>
 800d3a8:	f1bb 0f00 	cmp.w	fp, #0
 800d3ac:	f47f aeb7 	bne.w	800d11e <_dtoa_r+0x5a6>
 800d3b0:	4621      	mov	r1, r4
 800d3b2:	465b      	mov	r3, fp
 800d3b4:	2205      	movs	r2, #5
 800d3b6:	4648      	mov	r0, r9
 800d3b8:	f000 f9e0 	bl	800d77c <__multadd>
 800d3bc:	4601      	mov	r1, r0
 800d3be:	4604      	mov	r4, r0
 800d3c0:	9801      	ldr	r0, [sp, #4]
 800d3c2:	f000 fbf3 	bl	800dbac <__mcmp>
 800d3c6:	2800      	cmp	r0, #0
 800d3c8:	f77f aea9 	ble.w	800d11e <_dtoa_r+0x5a6>
 800d3cc:	463e      	mov	r6, r7
 800d3ce:	2331      	movs	r3, #49	@ 0x31
 800d3d0:	f806 3b01 	strb.w	r3, [r6], #1
 800d3d4:	9b04      	ldr	r3, [sp, #16]
 800d3d6:	3301      	adds	r3, #1
 800d3d8:	9304      	str	r3, [sp, #16]
 800d3da:	e6a4      	b.n	800d126 <_dtoa_r+0x5ae>
 800d3dc:	f8cd 8010 	str.w	r8, [sp, #16]
 800d3e0:	4654      	mov	r4, sl
 800d3e2:	4625      	mov	r5, r4
 800d3e4:	e7f2      	b.n	800d3cc <_dtoa_r+0x854>
 800d3e6:	9b08      	ldr	r3, [sp, #32]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	f000 8103 	beq.w	800d5f4 <_dtoa_r+0xa7c>
 800d3ee:	2e00      	cmp	r6, #0
 800d3f0:	dd05      	ble.n	800d3fe <_dtoa_r+0x886>
 800d3f2:	4629      	mov	r1, r5
 800d3f4:	4632      	mov	r2, r6
 800d3f6:	4648      	mov	r0, r9
 800d3f8:	f000 fb6c 	bl	800dad4 <__lshift>
 800d3fc:	4605      	mov	r5, r0
 800d3fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d400:	2b00      	cmp	r3, #0
 800d402:	d058      	beq.n	800d4b6 <_dtoa_r+0x93e>
 800d404:	6869      	ldr	r1, [r5, #4]
 800d406:	4648      	mov	r0, r9
 800d408:	f000 f956 	bl	800d6b8 <_Balloc>
 800d40c:	4606      	mov	r6, r0
 800d40e:	b928      	cbnz	r0, 800d41c <_dtoa_r+0x8a4>
 800d410:	4b82      	ldr	r3, [pc, #520]	@ (800d61c <_dtoa_r+0xaa4>)
 800d412:	4602      	mov	r2, r0
 800d414:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d418:	f7ff bbc7 	b.w	800cbaa <_dtoa_r+0x32>
 800d41c:	692a      	ldr	r2, [r5, #16]
 800d41e:	3202      	adds	r2, #2
 800d420:	0092      	lsls	r2, r2, #2
 800d422:	f105 010c 	add.w	r1, r5, #12
 800d426:	300c      	adds	r0, #12
 800d428:	f7ff fb0f 	bl	800ca4a <memcpy>
 800d42c:	2201      	movs	r2, #1
 800d42e:	4631      	mov	r1, r6
 800d430:	4648      	mov	r0, r9
 800d432:	f000 fb4f 	bl	800dad4 <__lshift>
 800d436:	1c7b      	adds	r3, r7, #1
 800d438:	9305      	str	r3, [sp, #20]
 800d43a:	eb07 030b 	add.w	r3, r7, fp
 800d43e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d440:	9b02      	ldr	r3, [sp, #8]
 800d442:	f003 0301 	and.w	r3, r3, #1
 800d446:	46a8      	mov	r8, r5
 800d448:	9308      	str	r3, [sp, #32]
 800d44a:	4605      	mov	r5, r0
 800d44c:	9b05      	ldr	r3, [sp, #20]
 800d44e:	9801      	ldr	r0, [sp, #4]
 800d450:	4621      	mov	r1, r4
 800d452:	f103 3bff 	add.w	fp, r3, #4294967295
 800d456:	f7ff fb06 	bl	800ca66 <quorem>
 800d45a:	4641      	mov	r1, r8
 800d45c:	9002      	str	r0, [sp, #8]
 800d45e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800d462:	9801      	ldr	r0, [sp, #4]
 800d464:	f000 fba2 	bl	800dbac <__mcmp>
 800d468:	462a      	mov	r2, r5
 800d46a:	9006      	str	r0, [sp, #24]
 800d46c:	4621      	mov	r1, r4
 800d46e:	4648      	mov	r0, r9
 800d470:	f000 fbb8 	bl	800dbe4 <__mdiff>
 800d474:	68c2      	ldr	r2, [r0, #12]
 800d476:	4606      	mov	r6, r0
 800d478:	b9fa      	cbnz	r2, 800d4ba <_dtoa_r+0x942>
 800d47a:	4601      	mov	r1, r0
 800d47c:	9801      	ldr	r0, [sp, #4]
 800d47e:	f000 fb95 	bl	800dbac <__mcmp>
 800d482:	4602      	mov	r2, r0
 800d484:	4631      	mov	r1, r6
 800d486:	4648      	mov	r0, r9
 800d488:	920a      	str	r2, [sp, #40]	@ 0x28
 800d48a:	f000 f955 	bl	800d738 <_Bfree>
 800d48e:	9b07      	ldr	r3, [sp, #28]
 800d490:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d492:	9e05      	ldr	r6, [sp, #20]
 800d494:	ea43 0102 	orr.w	r1, r3, r2
 800d498:	9b08      	ldr	r3, [sp, #32]
 800d49a:	4319      	orrs	r1, r3
 800d49c:	d10f      	bne.n	800d4be <_dtoa_r+0x946>
 800d49e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d4a2:	d028      	beq.n	800d4f6 <_dtoa_r+0x97e>
 800d4a4:	9b06      	ldr	r3, [sp, #24]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	dd02      	ble.n	800d4b0 <_dtoa_r+0x938>
 800d4aa:	9b02      	ldr	r3, [sp, #8]
 800d4ac:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800d4b0:	f88b a000 	strb.w	sl, [fp]
 800d4b4:	e639      	b.n	800d12a <_dtoa_r+0x5b2>
 800d4b6:	4628      	mov	r0, r5
 800d4b8:	e7bd      	b.n	800d436 <_dtoa_r+0x8be>
 800d4ba:	2201      	movs	r2, #1
 800d4bc:	e7e2      	b.n	800d484 <_dtoa_r+0x90c>
 800d4be:	9b06      	ldr	r3, [sp, #24]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	db04      	blt.n	800d4ce <_dtoa_r+0x956>
 800d4c4:	9907      	ldr	r1, [sp, #28]
 800d4c6:	430b      	orrs	r3, r1
 800d4c8:	9908      	ldr	r1, [sp, #32]
 800d4ca:	430b      	orrs	r3, r1
 800d4cc:	d120      	bne.n	800d510 <_dtoa_r+0x998>
 800d4ce:	2a00      	cmp	r2, #0
 800d4d0:	ddee      	ble.n	800d4b0 <_dtoa_r+0x938>
 800d4d2:	9901      	ldr	r1, [sp, #4]
 800d4d4:	2201      	movs	r2, #1
 800d4d6:	4648      	mov	r0, r9
 800d4d8:	f000 fafc 	bl	800dad4 <__lshift>
 800d4dc:	4621      	mov	r1, r4
 800d4de:	9001      	str	r0, [sp, #4]
 800d4e0:	f000 fb64 	bl	800dbac <__mcmp>
 800d4e4:	2800      	cmp	r0, #0
 800d4e6:	dc03      	bgt.n	800d4f0 <_dtoa_r+0x978>
 800d4e8:	d1e2      	bne.n	800d4b0 <_dtoa_r+0x938>
 800d4ea:	f01a 0f01 	tst.w	sl, #1
 800d4ee:	d0df      	beq.n	800d4b0 <_dtoa_r+0x938>
 800d4f0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d4f4:	d1d9      	bne.n	800d4aa <_dtoa_r+0x932>
 800d4f6:	2339      	movs	r3, #57	@ 0x39
 800d4f8:	f88b 3000 	strb.w	r3, [fp]
 800d4fc:	4633      	mov	r3, r6
 800d4fe:	461e      	mov	r6, r3
 800d500:	3b01      	subs	r3, #1
 800d502:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d506:	2a39      	cmp	r2, #57	@ 0x39
 800d508:	d053      	beq.n	800d5b2 <_dtoa_r+0xa3a>
 800d50a:	3201      	adds	r2, #1
 800d50c:	701a      	strb	r2, [r3, #0]
 800d50e:	e60c      	b.n	800d12a <_dtoa_r+0x5b2>
 800d510:	2a00      	cmp	r2, #0
 800d512:	dd07      	ble.n	800d524 <_dtoa_r+0x9ac>
 800d514:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d518:	d0ed      	beq.n	800d4f6 <_dtoa_r+0x97e>
 800d51a:	f10a 0301 	add.w	r3, sl, #1
 800d51e:	f88b 3000 	strb.w	r3, [fp]
 800d522:	e602      	b.n	800d12a <_dtoa_r+0x5b2>
 800d524:	9b05      	ldr	r3, [sp, #20]
 800d526:	9a05      	ldr	r2, [sp, #20]
 800d528:	f803 ac01 	strb.w	sl, [r3, #-1]
 800d52c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d52e:	4293      	cmp	r3, r2
 800d530:	d029      	beq.n	800d586 <_dtoa_r+0xa0e>
 800d532:	9901      	ldr	r1, [sp, #4]
 800d534:	2300      	movs	r3, #0
 800d536:	220a      	movs	r2, #10
 800d538:	4648      	mov	r0, r9
 800d53a:	f000 f91f 	bl	800d77c <__multadd>
 800d53e:	45a8      	cmp	r8, r5
 800d540:	9001      	str	r0, [sp, #4]
 800d542:	f04f 0300 	mov.w	r3, #0
 800d546:	f04f 020a 	mov.w	r2, #10
 800d54a:	4641      	mov	r1, r8
 800d54c:	4648      	mov	r0, r9
 800d54e:	d107      	bne.n	800d560 <_dtoa_r+0x9e8>
 800d550:	f000 f914 	bl	800d77c <__multadd>
 800d554:	4680      	mov	r8, r0
 800d556:	4605      	mov	r5, r0
 800d558:	9b05      	ldr	r3, [sp, #20]
 800d55a:	3301      	adds	r3, #1
 800d55c:	9305      	str	r3, [sp, #20]
 800d55e:	e775      	b.n	800d44c <_dtoa_r+0x8d4>
 800d560:	f000 f90c 	bl	800d77c <__multadd>
 800d564:	4629      	mov	r1, r5
 800d566:	4680      	mov	r8, r0
 800d568:	2300      	movs	r3, #0
 800d56a:	220a      	movs	r2, #10
 800d56c:	4648      	mov	r0, r9
 800d56e:	f000 f905 	bl	800d77c <__multadd>
 800d572:	4605      	mov	r5, r0
 800d574:	e7f0      	b.n	800d558 <_dtoa_r+0x9e0>
 800d576:	f1bb 0f00 	cmp.w	fp, #0
 800d57a:	bfcc      	ite	gt
 800d57c:	465e      	movgt	r6, fp
 800d57e:	2601      	movle	r6, #1
 800d580:	443e      	add	r6, r7
 800d582:	f04f 0800 	mov.w	r8, #0
 800d586:	9901      	ldr	r1, [sp, #4]
 800d588:	2201      	movs	r2, #1
 800d58a:	4648      	mov	r0, r9
 800d58c:	f000 faa2 	bl	800dad4 <__lshift>
 800d590:	4621      	mov	r1, r4
 800d592:	9001      	str	r0, [sp, #4]
 800d594:	f000 fb0a 	bl	800dbac <__mcmp>
 800d598:	2800      	cmp	r0, #0
 800d59a:	dcaf      	bgt.n	800d4fc <_dtoa_r+0x984>
 800d59c:	d102      	bne.n	800d5a4 <_dtoa_r+0xa2c>
 800d59e:	f01a 0f01 	tst.w	sl, #1
 800d5a2:	d1ab      	bne.n	800d4fc <_dtoa_r+0x984>
 800d5a4:	4633      	mov	r3, r6
 800d5a6:	461e      	mov	r6, r3
 800d5a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d5ac:	2a30      	cmp	r2, #48	@ 0x30
 800d5ae:	d0fa      	beq.n	800d5a6 <_dtoa_r+0xa2e>
 800d5b0:	e5bb      	b.n	800d12a <_dtoa_r+0x5b2>
 800d5b2:	429f      	cmp	r7, r3
 800d5b4:	d1a3      	bne.n	800d4fe <_dtoa_r+0x986>
 800d5b6:	9b04      	ldr	r3, [sp, #16]
 800d5b8:	3301      	adds	r3, #1
 800d5ba:	9304      	str	r3, [sp, #16]
 800d5bc:	2331      	movs	r3, #49	@ 0x31
 800d5be:	703b      	strb	r3, [r7, #0]
 800d5c0:	e5b3      	b.n	800d12a <_dtoa_r+0x5b2>
 800d5c2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d5c4:	4f16      	ldr	r7, [pc, #88]	@ (800d620 <_dtoa_r+0xaa8>)
 800d5c6:	b11b      	cbz	r3, 800d5d0 <_dtoa_r+0xa58>
 800d5c8:	f107 0308 	add.w	r3, r7, #8
 800d5cc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800d5ce:	6013      	str	r3, [r2, #0]
 800d5d0:	4638      	mov	r0, r7
 800d5d2:	b011      	add	sp, #68	@ 0x44
 800d5d4:	ecbd 8b02 	vpop	{d8}
 800d5d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5dc:	9b07      	ldr	r3, [sp, #28]
 800d5de:	2b01      	cmp	r3, #1
 800d5e0:	f77f ae36 	ble.w	800d250 <_dtoa_r+0x6d8>
 800d5e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d5e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d5e8:	2001      	movs	r0, #1
 800d5ea:	e656      	b.n	800d29a <_dtoa_r+0x722>
 800d5ec:	f1bb 0f00 	cmp.w	fp, #0
 800d5f0:	f77f aed7 	ble.w	800d3a2 <_dtoa_r+0x82a>
 800d5f4:	463e      	mov	r6, r7
 800d5f6:	9801      	ldr	r0, [sp, #4]
 800d5f8:	4621      	mov	r1, r4
 800d5fa:	f7ff fa34 	bl	800ca66 <quorem>
 800d5fe:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800d602:	f806 ab01 	strb.w	sl, [r6], #1
 800d606:	1bf2      	subs	r2, r6, r7
 800d608:	4593      	cmp	fp, r2
 800d60a:	ddb4      	ble.n	800d576 <_dtoa_r+0x9fe>
 800d60c:	9901      	ldr	r1, [sp, #4]
 800d60e:	2300      	movs	r3, #0
 800d610:	220a      	movs	r2, #10
 800d612:	4648      	mov	r0, r9
 800d614:	f000 f8b2 	bl	800d77c <__multadd>
 800d618:	9001      	str	r0, [sp, #4]
 800d61a:	e7ec      	b.n	800d5f6 <_dtoa_r+0xa7e>
 800d61c:	0806d3b8 	.word	0x0806d3b8
 800d620:	0806d33c 	.word	0x0806d33c

0800d624 <_free_r>:
 800d624:	b538      	push	{r3, r4, r5, lr}
 800d626:	4605      	mov	r5, r0
 800d628:	2900      	cmp	r1, #0
 800d62a:	d041      	beq.n	800d6b0 <_free_r+0x8c>
 800d62c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d630:	1f0c      	subs	r4, r1, #4
 800d632:	2b00      	cmp	r3, #0
 800d634:	bfb8      	it	lt
 800d636:	18e4      	addlt	r4, r4, r3
 800d638:	f7fe fbb2 	bl	800bda0 <__malloc_lock>
 800d63c:	4a1d      	ldr	r2, [pc, #116]	@ (800d6b4 <_free_r+0x90>)
 800d63e:	6813      	ldr	r3, [r2, #0]
 800d640:	b933      	cbnz	r3, 800d650 <_free_r+0x2c>
 800d642:	6063      	str	r3, [r4, #4]
 800d644:	6014      	str	r4, [r2, #0]
 800d646:	4628      	mov	r0, r5
 800d648:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d64c:	f7fe bbae 	b.w	800bdac <__malloc_unlock>
 800d650:	42a3      	cmp	r3, r4
 800d652:	d908      	bls.n	800d666 <_free_r+0x42>
 800d654:	6820      	ldr	r0, [r4, #0]
 800d656:	1821      	adds	r1, r4, r0
 800d658:	428b      	cmp	r3, r1
 800d65a:	bf01      	itttt	eq
 800d65c:	6819      	ldreq	r1, [r3, #0]
 800d65e:	685b      	ldreq	r3, [r3, #4]
 800d660:	1809      	addeq	r1, r1, r0
 800d662:	6021      	streq	r1, [r4, #0]
 800d664:	e7ed      	b.n	800d642 <_free_r+0x1e>
 800d666:	461a      	mov	r2, r3
 800d668:	685b      	ldr	r3, [r3, #4]
 800d66a:	b10b      	cbz	r3, 800d670 <_free_r+0x4c>
 800d66c:	42a3      	cmp	r3, r4
 800d66e:	d9fa      	bls.n	800d666 <_free_r+0x42>
 800d670:	6811      	ldr	r1, [r2, #0]
 800d672:	1850      	adds	r0, r2, r1
 800d674:	42a0      	cmp	r0, r4
 800d676:	d10b      	bne.n	800d690 <_free_r+0x6c>
 800d678:	6820      	ldr	r0, [r4, #0]
 800d67a:	4401      	add	r1, r0
 800d67c:	1850      	adds	r0, r2, r1
 800d67e:	4283      	cmp	r3, r0
 800d680:	6011      	str	r1, [r2, #0]
 800d682:	d1e0      	bne.n	800d646 <_free_r+0x22>
 800d684:	6818      	ldr	r0, [r3, #0]
 800d686:	685b      	ldr	r3, [r3, #4]
 800d688:	6053      	str	r3, [r2, #4]
 800d68a:	4408      	add	r0, r1
 800d68c:	6010      	str	r0, [r2, #0]
 800d68e:	e7da      	b.n	800d646 <_free_r+0x22>
 800d690:	d902      	bls.n	800d698 <_free_r+0x74>
 800d692:	230c      	movs	r3, #12
 800d694:	602b      	str	r3, [r5, #0]
 800d696:	e7d6      	b.n	800d646 <_free_r+0x22>
 800d698:	6820      	ldr	r0, [r4, #0]
 800d69a:	1821      	adds	r1, r4, r0
 800d69c:	428b      	cmp	r3, r1
 800d69e:	bf04      	itt	eq
 800d6a0:	6819      	ldreq	r1, [r3, #0]
 800d6a2:	685b      	ldreq	r3, [r3, #4]
 800d6a4:	6063      	str	r3, [r4, #4]
 800d6a6:	bf04      	itt	eq
 800d6a8:	1809      	addeq	r1, r1, r0
 800d6aa:	6021      	streq	r1, [r4, #0]
 800d6ac:	6054      	str	r4, [r2, #4]
 800d6ae:	e7ca      	b.n	800d646 <_free_r+0x22>
 800d6b0:	bd38      	pop	{r3, r4, r5, pc}
 800d6b2:	bf00      	nop
 800d6b4:	240691a8 	.word	0x240691a8

0800d6b8 <_Balloc>:
 800d6b8:	b570      	push	{r4, r5, r6, lr}
 800d6ba:	69c6      	ldr	r6, [r0, #28]
 800d6bc:	4604      	mov	r4, r0
 800d6be:	460d      	mov	r5, r1
 800d6c0:	b976      	cbnz	r6, 800d6e0 <_Balloc+0x28>
 800d6c2:	2010      	movs	r0, #16
 800d6c4:	f7fe fac2 	bl	800bc4c <malloc>
 800d6c8:	4602      	mov	r2, r0
 800d6ca:	61e0      	str	r0, [r4, #28]
 800d6cc:	b920      	cbnz	r0, 800d6d8 <_Balloc+0x20>
 800d6ce:	4b18      	ldr	r3, [pc, #96]	@ (800d730 <_Balloc+0x78>)
 800d6d0:	4818      	ldr	r0, [pc, #96]	@ (800d734 <_Balloc+0x7c>)
 800d6d2:	216b      	movs	r1, #107	@ 0x6b
 800d6d4:	f000 fd7e 	bl	800e1d4 <__assert_func>
 800d6d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d6dc:	6006      	str	r6, [r0, #0]
 800d6de:	60c6      	str	r6, [r0, #12]
 800d6e0:	69e6      	ldr	r6, [r4, #28]
 800d6e2:	68f3      	ldr	r3, [r6, #12]
 800d6e4:	b183      	cbz	r3, 800d708 <_Balloc+0x50>
 800d6e6:	69e3      	ldr	r3, [r4, #28]
 800d6e8:	68db      	ldr	r3, [r3, #12]
 800d6ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d6ee:	b9b8      	cbnz	r0, 800d720 <_Balloc+0x68>
 800d6f0:	2101      	movs	r1, #1
 800d6f2:	fa01 f605 	lsl.w	r6, r1, r5
 800d6f6:	1d72      	adds	r2, r6, #5
 800d6f8:	0092      	lsls	r2, r2, #2
 800d6fa:	4620      	mov	r0, r4
 800d6fc:	f000 fd88 	bl	800e210 <_calloc_r>
 800d700:	b160      	cbz	r0, 800d71c <_Balloc+0x64>
 800d702:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d706:	e00e      	b.n	800d726 <_Balloc+0x6e>
 800d708:	2221      	movs	r2, #33	@ 0x21
 800d70a:	2104      	movs	r1, #4
 800d70c:	4620      	mov	r0, r4
 800d70e:	f000 fd7f 	bl	800e210 <_calloc_r>
 800d712:	69e3      	ldr	r3, [r4, #28]
 800d714:	60f0      	str	r0, [r6, #12]
 800d716:	68db      	ldr	r3, [r3, #12]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d1e4      	bne.n	800d6e6 <_Balloc+0x2e>
 800d71c:	2000      	movs	r0, #0
 800d71e:	bd70      	pop	{r4, r5, r6, pc}
 800d720:	6802      	ldr	r2, [r0, #0]
 800d722:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d726:	2300      	movs	r3, #0
 800d728:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d72c:	e7f7      	b.n	800d71e <_Balloc+0x66>
 800d72e:	bf00      	nop
 800d730:	0806d349 	.word	0x0806d349
 800d734:	0806d3c9 	.word	0x0806d3c9

0800d738 <_Bfree>:
 800d738:	b570      	push	{r4, r5, r6, lr}
 800d73a:	69c6      	ldr	r6, [r0, #28]
 800d73c:	4605      	mov	r5, r0
 800d73e:	460c      	mov	r4, r1
 800d740:	b976      	cbnz	r6, 800d760 <_Bfree+0x28>
 800d742:	2010      	movs	r0, #16
 800d744:	f7fe fa82 	bl	800bc4c <malloc>
 800d748:	4602      	mov	r2, r0
 800d74a:	61e8      	str	r0, [r5, #28]
 800d74c:	b920      	cbnz	r0, 800d758 <_Bfree+0x20>
 800d74e:	4b09      	ldr	r3, [pc, #36]	@ (800d774 <_Bfree+0x3c>)
 800d750:	4809      	ldr	r0, [pc, #36]	@ (800d778 <_Bfree+0x40>)
 800d752:	218f      	movs	r1, #143	@ 0x8f
 800d754:	f000 fd3e 	bl	800e1d4 <__assert_func>
 800d758:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d75c:	6006      	str	r6, [r0, #0]
 800d75e:	60c6      	str	r6, [r0, #12]
 800d760:	b13c      	cbz	r4, 800d772 <_Bfree+0x3a>
 800d762:	69eb      	ldr	r3, [r5, #28]
 800d764:	6862      	ldr	r2, [r4, #4]
 800d766:	68db      	ldr	r3, [r3, #12]
 800d768:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d76c:	6021      	str	r1, [r4, #0]
 800d76e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d772:	bd70      	pop	{r4, r5, r6, pc}
 800d774:	0806d349 	.word	0x0806d349
 800d778:	0806d3c9 	.word	0x0806d3c9

0800d77c <__multadd>:
 800d77c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d780:	690d      	ldr	r5, [r1, #16]
 800d782:	4607      	mov	r7, r0
 800d784:	460c      	mov	r4, r1
 800d786:	461e      	mov	r6, r3
 800d788:	f101 0c14 	add.w	ip, r1, #20
 800d78c:	2000      	movs	r0, #0
 800d78e:	f8dc 3000 	ldr.w	r3, [ip]
 800d792:	b299      	uxth	r1, r3
 800d794:	fb02 6101 	mla	r1, r2, r1, r6
 800d798:	0c1e      	lsrs	r6, r3, #16
 800d79a:	0c0b      	lsrs	r3, r1, #16
 800d79c:	fb02 3306 	mla	r3, r2, r6, r3
 800d7a0:	b289      	uxth	r1, r1
 800d7a2:	3001      	adds	r0, #1
 800d7a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d7a8:	4285      	cmp	r5, r0
 800d7aa:	f84c 1b04 	str.w	r1, [ip], #4
 800d7ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d7b2:	dcec      	bgt.n	800d78e <__multadd+0x12>
 800d7b4:	b30e      	cbz	r6, 800d7fa <__multadd+0x7e>
 800d7b6:	68a3      	ldr	r3, [r4, #8]
 800d7b8:	42ab      	cmp	r3, r5
 800d7ba:	dc19      	bgt.n	800d7f0 <__multadd+0x74>
 800d7bc:	6861      	ldr	r1, [r4, #4]
 800d7be:	4638      	mov	r0, r7
 800d7c0:	3101      	adds	r1, #1
 800d7c2:	f7ff ff79 	bl	800d6b8 <_Balloc>
 800d7c6:	4680      	mov	r8, r0
 800d7c8:	b928      	cbnz	r0, 800d7d6 <__multadd+0x5a>
 800d7ca:	4602      	mov	r2, r0
 800d7cc:	4b0c      	ldr	r3, [pc, #48]	@ (800d800 <__multadd+0x84>)
 800d7ce:	480d      	ldr	r0, [pc, #52]	@ (800d804 <__multadd+0x88>)
 800d7d0:	21ba      	movs	r1, #186	@ 0xba
 800d7d2:	f000 fcff 	bl	800e1d4 <__assert_func>
 800d7d6:	6922      	ldr	r2, [r4, #16]
 800d7d8:	3202      	adds	r2, #2
 800d7da:	f104 010c 	add.w	r1, r4, #12
 800d7de:	0092      	lsls	r2, r2, #2
 800d7e0:	300c      	adds	r0, #12
 800d7e2:	f7ff f932 	bl	800ca4a <memcpy>
 800d7e6:	4621      	mov	r1, r4
 800d7e8:	4638      	mov	r0, r7
 800d7ea:	f7ff ffa5 	bl	800d738 <_Bfree>
 800d7ee:	4644      	mov	r4, r8
 800d7f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d7f4:	3501      	adds	r5, #1
 800d7f6:	615e      	str	r6, [r3, #20]
 800d7f8:	6125      	str	r5, [r4, #16]
 800d7fa:	4620      	mov	r0, r4
 800d7fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d800:	0806d3b8 	.word	0x0806d3b8
 800d804:	0806d3c9 	.word	0x0806d3c9

0800d808 <__hi0bits>:
 800d808:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d80c:	4603      	mov	r3, r0
 800d80e:	bf36      	itet	cc
 800d810:	0403      	lslcc	r3, r0, #16
 800d812:	2000      	movcs	r0, #0
 800d814:	2010      	movcc	r0, #16
 800d816:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d81a:	bf3c      	itt	cc
 800d81c:	021b      	lslcc	r3, r3, #8
 800d81e:	3008      	addcc	r0, #8
 800d820:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d824:	bf3c      	itt	cc
 800d826:	011b      	lslcc	r3, r3, #4
 800d828:	3004      	addcc	r0, #4
 800d82a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d82e:	bf3c      	itt	cc
 800d830:	009b      	lslcc	r3, r3, #2
 800d832:	3002      	addcc	r0, #2
 800d834:	2b00      	cmp	r3, #0
 800d836:	db05      	blt.n	800d844 <__hi0bits+0x3c>
 800d838:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d83c:	f100 0001 	add.w	r0, r0, #1
 800d840:	bf08      	it	eq
 800d842:	2020      	moveq	r0, #32
 800d844:	4770      	bx	lr

0800d846 <__lo0bits>:
 800d846:	6803      	ldr	r3, [r0, #0]
 800d848:	4602      	mov	r2, r0
 800d84a:	f013 0007 	ands.w	r0, r3, #7
 800d84e:	d00b      	beq.n	800d868 <__lo0bits+0x22>
 800d850:	07d9      	lsls	r1, r3, #31
 800d852:	d421      	bmi.n	800d898 <__lo0bits+0x52>
 800d854:	0798      	lsls	r0, r3, #30
 800d856:	bf49      	itett	mi
 800d858:	085b      	lsrmi	r3, r3, #1
 800d85a:	089b      	lsrpl	r3, r3, #2
 800d85c:	2001      	movmi	r0, #1
 800d85e:	6013      	strmi	r3, [r2, #0]
 800d860:	bf5c      	itt	pl
 800d862:	6013      	strpl	r3, [r2, #0]
 800d864:	2002      	movpl	r0, #2
 800d866:	4770      	bx	lr
 800d868:	b299      	uxth	r1, r3
 800d86a:	b909      	cbnz	r1, 800d870 <__lo0bits+0x2a>
 800d86c:	0c1b      	lsrs	r3, r3, #16
 800d86e:	2010      	movs	r0, #16
 800d870:	b2d9      	uxtb	r1, r3
 800d872:	b909      	cbnz	r1, 800d878 <__lo0bits+0x32>
 800d874:	3008      	adds	r0, #8
 800d876:	0a1b      	lsrs	r3, r3, #8
 800d878:	0719      	lsls	r1, r3, #28
 800d87a:	bf04      	itt	eq
 800d87c:	091b      	lsreq	r3, r3, #4
 800d87e:	3004      	addeq	r0, #4
 800d880:	0799      	lsls	r1, r3, #30
 800d882:	bf04      	itt	eq
 800d884:	089b      	lsreq	r3, r3, #2
 800d886:	3002      	addeq	r0, #2
 800d888:	07d9      	lsls	r1, r3, #31
 800d88a:	d403      	bmi.n	800d894 <__lo0bits+0x4e>
 800d88c:	085b      	lsrs	r3, r3, #1
 800d88e:	f100 0001 	add.w	r0, r0, #1
 800d892:	d003      	beq.n	800d89c <__lo0bits+0x56>
 800d894:	6013      	str	r3, [r2, #0]
 800d896:	4770      	bx	lr
 800d898:	2000      	movs	r0, #0
 800d89a:	4770      	bx	lr
 800d89c:	2020      	movs	r0, #32
 800d89e:	4770      	bx	lr

0800d8a0 <__i2b>:
 800d8a0:	b510      	push	{r4, lr}
 800d8a2:	460c      	mov	r4, r1
 800d8a4:	2101      	movs	r1, #1
 800d8a6:	f7ff ff07 	bl	800d6b8 <_Balloc>
 800d8aa:	4602      	mov	r2, r0
 800d8ac:	b928      	cbnz	r0, 800d8ba <__i2b+0x1a>
 800d8ae:	4b05      	ldr	r3, [pc, #20]	@ (800d8c4 <__i2b+0x24>)
 800d8b0:	4805      	ldr	r0, [pc, #20]	@ (800d8c8 <__i2b+0x28>)
 800d8b2:	f240 1145 	movw	r1, #325	@ 0x145
 800d8b6:	f000 fc8d 	bl	800e1d4 <__assert_func>
 800d8ba:	2301      	movs	r3, #1
 800d8bc:	6144      	str	r4, [r0, #20]
 800d8be:	6103      	str	r3, [r0, #16]
 800d8c0:	bd10      	pop	{r4, pc}
 800d8c2:	bf00      	nop
 800d8c4:	0806d3b8 	.word	0x0806d3b8
 800d8c8:	0806d3c9 	.word	0x0806d3c9

0800d8cc <__multiply>:
 800d8cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8d0:	4614      	mov	r4, r2
 800d8d2:	690a      	ldr	r2, [r1, #16]
 800d8d4:	6923      	ldr	r3, [r4, #16]
 800d8d6:	429a      	cmp	r2, r3
 800d8d8:	bfa8      	it	ge
 800d8da:	4623      	movge	r3, r4
 800d8dc:	460f      	mov	r7, r1
 800d8de:	bfa4      	itt	ge
 800d8e0:	460c      	movge	r4, r1
 800d8e2:	461f      	movge	r7, r3
 800d8e4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d8e8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d8ec:	68a3      	ldr	r3, [r4, #8]
 800d8ee:	6861      	ldr	r1, [r4, #4]
 800d8f0:	eb0a 0609 	add.w	r6, sl, r9
 800d8f4:	42b3      	cmp	r3, r6
 800d8f6:	b085      	sub	sp, #20
 800d8f8:	bfb8      	it	lt
 800d8fa:	3101      	addlt	r1, #1
 800d8fc:	f7ff fedc 	bl	800d6b8 <_Balloc>
 800d900:	b930      	cbnz	r0, 800d910 <__multiply+0x44>
 800d902:	4602      	mov	r2, r0
 800d904:	4b44      	ldr	r3, [pc, #272]	@ (800da18 <__multiply+0x14c>)
 800d906:	4845      	ldr	r0, [pc, #276]	@ (800da1c <__multiply+0x150>)
 800d908:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d90c:	f000 fc62 	bl	800e1d4 <__assert_func>
 800d910:	f100 0514 	add.w	r5, r0, #20
 800d914:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d918:	462b      	mov	r3, r5
 800d91a:	2200      	movs	r2, #0
 800d91c:	4543      	cmp	r3, r8
 800d91e:	d321      	bcc.n	800d964 <__multiply+0x98>
 800d920:	f107 0114 	add.w	r1, r7, #20
 800d924:	f104 0214 	add.w	r2, r4, #20
 800d928:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d92c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d930:	9302      	str	r3, [sp, #8]
 800d932:	1b13      	subs	r3, r2, r4
 800d934:	3b15      	subs	r3, #21
 800d936:	f023 0303 	bic.w	r3, r3, #3
 800d93a:	3304      	adds	r3, #4
 800d93c:	f104 0715 	add.w	r7, r4, #21
 800d940:	42ba      	cmp	r2, r7
 800d942:	bf38      	it	cc
 800d944:	2304      	movcc	r3, #4
 800d946:	9301      	str	r3, [sp, #4]
 800d948:	9b02      	ldr	r3, [sp, #8]
 800d94a:	9103      	str	r1, [sp, #12]
 800d94c:	428b      	cmp	r3, r1
 800d94e:	d80c      	bhi.n	800d96a <__multiply+0x9e>
 800d950:	2e00      	cmp	r6, #0
 800d952:	dd03      	ble.n	800d95c <__multiply+0x90>
 800d954:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d05b      	beq.n	800da14 <__multiply+0x148>
 800d95c:	6106      	str	r6, [r0, #16]
 800d95e:	b005      	add	sp, #20
 800d960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d964:	f843 2b04 	str.w	r2, [r3], #4
 800d968:	e7d8      	b.n	800d91c <__multiply+0x50>
 800d96a:	f8b1 a000 	ldrh.w	sl, [r1]
 800d96e:	f1ba 0f00 	cmp.w	sl, #0
 800d972:	d024      	beq.n	800d9be <__multiply+0xf2>
 800d974:	f104 0e14 	add.w	lr, r4, #20
 800d978:	46a9      	mov	r9, r5
 800d97a:	f04f 0c00 	mov.w	ip, #0
 800d97e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d982:	f8d9 3000 	ldr.w	r3, [r9]
 800d986:	fa1f fb87 	uxth.w	fp, r7
 800d98a:	b29b      	uxth	r3, r3
 800d98c:	fb0a 330b 	mla	r3, sl, fp, r3
 800d990:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d994:	f8d9 7000 	ldr.w	r7, [r9]
 800d998:	4463      	add	r3, ip
 800d99a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d99e:	fb0a c70b 	mla	r7, sl, fp, ip
 800d9a2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d9a6:	b29b      	uxth	r3, r3
 800d9a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d9ac:	4572      	cmp	r2, lr
 800d9ae:	f849 3b04 	str.w	r3, [r9], #4
 800d9b2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d9b6:	d8e2      	bhi.n	800d97e <__multiply+0xb2>
 800d9b8:	9b01      	ldr	r3, [sp, #4]
 800d9ba:	f845 c003 	str.w	ip, [r5, r3]
 800d9be:	9b03      	ldr	r3, [sp, #12]
 800d9c0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d9c4:	3104      	adds	r1, #4
 800d9c6:	f1b9 0f00 	cmp.w	r9, #0
 800d9ca:	d021      	beq.n	800da10 <__multiply+0x144>
 800d9cc:	682b      	ldr	r3, [r5, #0]
 800d9ce:	f104 0c14 	add.w	ip, r4, #20
 800d9d2:	46ae      	mov	lr, r5
 800d9d4:	f04f 0a00 	mov.w	sl, #0
 800d9d8:	f8bc b000 	ldrh.w	fp, [ip]
 800d9dc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d9e0:	fb09 770b 	mla	r7, r9, fp, r7
 800d9e4:	4457      	add	r7, sl
 800d9e6:	b29b      	uxth	r3, r3
 800d9e8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d9ec:	f84e 3b04 	str.w	r3, [lr], #4
 800d9f0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d9f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d9f8:	f8be 3000 	ldrh.w	r3, [lr]
 800d9fc:	fb09 330a 	mla	r3, r9, sl, r3
 800da00:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800da04:	4562      	cmp	r2, ip
 800da06:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800da0a:	d8e5      	bhi.n	800d9d8 <__multiply+0x10c>
 800da0c:	9f01      	ldr	r7, [sp, #4]
 800da0e:	51eb      	str	r3, [r5, r7]
 800da10:	3504      	adds	r5, #4
 800da12:	e799      	b.n	800d948 <__multiply+0x7c>
 800da14:	3e01      	subs	r6, #1
 800da16:	e79b      	b.n	800d950 <__multiply+0x84>
 800da18:	0806d3b8 	.word	0x0806d3b8
 800da1c:	0806d3c9 	.word	0x0806d3c9

0800da20 <__pow5mult>:
 800da20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da24:	4615      	mov	r5, r2
 800da26:	f012 0203 	ands.w	r2, r2, #3
 800da2a:	4607      	mov	r7, r0
 800da2c:	460e      	mov	r6, r1
 800da2e:	d007      	beq.n	800da40 <__pow5mult+0x20>
 800da30:	4c25      	ldr	r4, [pc, #148]	@ (800dac8 <__pow5mult+0xa8>)
 800da32:	3a01      	subs	r2, #1
 800da34:	2300      	movs	r3, #0
 800da36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800da3a:	f7ff fe9f 	bl	800d77c <__multadd>
 800da3e:	4606      	mov	r6, r0
 800da40:	10ad      	asrs	r5, r5, #2
 800da42:	d03d      	beq.n	800dac0 <__pow5mult+0xa0>
 800da44:	69fc      	ldr	r4, [r7, #28]
 800da46:	b97c      	cbnz	r4, 800da68 <__pow5mult+0x48>
 800da48:	2010      	movs	r0, #16
 800da4a:	f7fe f8ff 	bl	800bc4c <malloc>
 800da4e:	4602      	mov	r2, r0
 800da50:	61f8      	str	r0, [r7, #28]
 800da52:	b928      	cbnz	r0, 800da60 <__pow5mult+0x40>
 800da54:	4b1d      	ldr	r3, [pc, #116]	@ (800dacc <__pow5mult+0xac>)
 800da56:	481e      	ldr	r0, [pc, #120]	@ (800dad0 <__pow5mult+0xb0>)
 800da58:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800da5c:	f000 fbba 	bl	800e1d4 <__assert_func>
 800da60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800da64:	6004      	str	r4, [r0, #0]
 800da66:	60c4      	str	r4, [r0, #12]
 800da68:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800da6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800da70:	b94c      	cbnz	r4, 800da86 <__pow5mult+0x66>
 800da72:	f240 2171 	movw	r1, #625	@ 0x271
 800da76:	4638      	mov	r0, r7
 800da78:	f7ff ff12 	bl	800d8a0 <__i2b>
 800da7c:	2300      	movs	r3, #0
 800da7e:	f8c8 0008 	str.w	r0, [r8, #8]
 800da82:	4604      	mov	r4, r0
 800da84:	6003      	str	r3, [r0, #0]
 800da86:	f04f 0900 	mov.w	r9, #0
 800da8a:	07eb      	lsls	r3, r5, #31
 800da8c:	d50a      	bpl.n	800daa4 <__pow5mult+0x84>
 800da8e:	4631      	mov	r1, r6
 800da90:	4622      	mov	r2, r4
 800da92:	4638      	mov	r0, r7
 800da94:	f7ff ff1a 	bl	800d8cc <__multiply>
 800da98:	4631      	mov	r1, r6
 800da9a:	4680      	mov	r8, r0
 800da9c:	4638      	mov	r0, r7
 800da9e:	f7ff fe4b 	bl	800d738 <_Bfree>
 800daa2:	4646      	mov	r6, r8
 800daa4:	106d      	asrs	r5, r5, #1
 800daa6:	d00b      	beq.n	800dac0 <__pow5mult+0xa0>
 800daa8:	6820      	ldr	r0, [r4, #0]
 800daaa:	b938      	cbnz	r0, 800dabc <__pow5mult+0x9c>
 800daac:	4622      	mov	r2, r4
 800daae:	4621      	mov	r1, r4
 800dab0:	4638      	mov	r0, r7
 800dab2:	f7ff ff0b 	bl	800d8cc <__multiply>
 800dab6:	6020      	str	r0, [r4, #0]
 800dab8:	f8c0 9000 	str.w	r9, [r0]
 800dabc:	4604      	mov	r4, r0
 800dabe:	e7e4      	b.n	800da8a <__pow5mult+0x6a>
 800dac0:	4630      	mov	r0, r6
 800dac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dac6:	bf00      	nop
 800dac8:	0806d424 	.word	0x0806d424
 800dacc:	0806d349 	.word	0x0806d349
 800dad0:	0806d3c9 	.word	0x0806d3c9

0800dad4 <__lshift>:
 800dad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dad8:	460c      	mov	r4, r1
 800dada:	6849      	ldr	r1, [r1, #4]
 800dadc:	6923      	ldr	r3, [r4, #16]
 800dade:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dae2:	68a3      	ldr	r3, [r4, #8]
 800dae4:	4607      	mov	r7, r0
 800dae6:	4691      	mov	r9, r2
 800dae8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800daec:	f108 0601 	add.w	r6, r8, #1
 800daf0:	42b3      	cmp	r3, r6
 800daf2:	db0b      	blt.n	800db0c <__lshift+0x38>
 800daf4:	4638      	mov	r0, r7
 800daf6:	f7ff fddf 	bl	800d6b8 <_Balloc>
 800dafa:	4605      	mov	r5, r0
 800dafc:	b948      	cbnz	r0, 800db12 <__lshift+0x3e>
 800dafe:	4602      	mov	r2, r0
 800db00:	4b28      	ldr	r3, [pc, #160]	@ (800dba4 <__lshift+0xd0>)
 800db02:	4829      	ldr	r0, [pc, #164]	@ (800dba8 <__lshift+0xd4>)
 800db04:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800db08:	f000 fb64 	bl	800e1d4 <__assert_func>
 800db0c:	3101      	adds	r1, #1
 800db0e:	005b      	lsls	r3, r3, #1
 800db10:	e7ee      	b.n	800daf0 <__lshift+0x1c>
 800db12:	2300      	movs	r3, #0
 800db14:	f100 0114 	add.w	r1, r0, #20
 800db18:	f100 0210 	add.w	r2, r0, #16
 800db1c:	4618      	mov	r0, r3
 800db1e:	4553      	cmp	r3, sl
 800db20:	db33      	blt.n	800db8a <__lshift+0xb6>
 800db22:	6920      	ldr	r0, [r4, #16]
 800db24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800db28:	f104 0314 	add.w	r3, r4, #20
 800db2c:	f019 091f 	ands.w	r9, r9, #31
 800db30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800db34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800db38:	d02b      	beq.n	800db92 <__lshift+0xbe>
 800db3a:	f1c9 0e20 	rsb	lr, r9, #32
 800db3e:	468a      	mov	sl, r1
 800db40:	2200      	movs	r2, #0
 800db42:	6818      	ldr	r0, [r3, #0]
 800db44:	fa00 f009 	lsl.w	r0, r0, r9
 800db48:	4310      	orrs	r0, r2
 800db4a:	f84a 0b04 	str.w	r0, [sl], #4
 800db4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800db52:	459c      	cmp	ip, r3
 800db54:	fa22 f20e 	lsr.w	r2, r2, lr
 800db58:	d8f3      	bhi.n	800db42 <__lshift+0x6e>
 800db5a:	ebac 0304 	sub.w	r3, ip, r4
 800db5e:	3b15      	subs	r3, #21
 800db60:	f023 0303 	bic.w	r3, r3, #3
 800db64:	3304      	adds	r3, #4
 800db66:	f104 0015 	add.w	r0, r4, #21
 800db6a:	4584      	cmp	ip, r0
 800db6c:	bf38      	it	cc
 800db6e:	2304      	movcc	r3, #4
 800db70:	50ca      	str	r2, [r1, r3]
 800db72:	b10a      	cbz	r2, 800db78 <__lshift+0xa4>
 800db74:	f108 0602 	add.w	r6, r8, #2
 800db78:	3e01      	subs	r6, #1
 800db7a:	4638      	mov	r0, r7
 800db7c:	612e      	str	r6, [r5, #16]
 800db7e:	4621      	mov	r1, r4
 800db80:	f7ff fdda 	bl	800d738 <_Bfree>
 800db84:	4628      	mov	r0, r5
 800db86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db8a:	f842 0f04 	str.w	r0, [r2, #4]!
 800db8e:	3301      	adds	r3, #1
 800db90:	e7c5      	b.n	800db1e <__lshift+0x4a>
 800db92:	3904      	subs	r1, #4
 800db94:	f853 2b04 	ldr.w	r2, [r3], #4
 800db98:	f841 2f04 	str.w	r2, [r1, #4]!
 800db9c:	459c      	cmp	ip, r3
 800db9e:	d8f9      	bhi.n	800db94 <__lshift+0xc0>
 800dba0:	e7ea      	b.n	800db78 <__lshift+0xa4>
 800dba2:	bf00      	nop
 800dba4:	0806d3b8 	.word	0x0806d3b8
 800dba8:	0806d3c9 	.word	0x0806d3c9

0800dbac <__mcmp>:
 800dbac:	690a      	ldr	r2, [r1, #16]
 800dbae:	4603      	mov	r3, r0
 800dbb0:	6900      	ldr	r0, [r0, #16]
 800dbb2:	1a80      	subs	r0, r0, r2
 800dbb4:	b530      	push	{r4, r5, lr}
 800dbb6:	d10e      	bne.n	800dbd6 <__mcmp+0x2a>
 800dbb8:	3314      	adds	r3, #20
 800dbba:	3114      	adds	r1, #20
 800dbbc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800dbc0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800dbc4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800dbc8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800dbcc:	4295      	cmp	r5, r2
 800dbce:	d003      	beq.n	800dbd8 <__mcmp+0x2c>
 800dbd0:	d205      	bcs.n	800dbde <__mcmp+0x32>
 800dbd2:	f04f 30ff 	mov.w	r0, #4294967295
 800dbd6:	bd30      	pop	{r4, r5, pc}
 800dbd8:	42a3      	cmp	r3, r4
 800dbda:	d3f3      	bcc.n	800dbc4 <__mcmp+0x18>
 800dbdc:	e7fb      	b.n	800dbd6 <__mcmp+0x2a>
 800dbde:	2001      	movs	r0, #1
 800dbe0:	e7f9      	b.n	800dbd6 <__mcmp+0x2a>
	...

0800dbe4 <__mdiff>:
 800dbe4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbe8:	4689      	mov	r9, r1
 800dbea:	4606      	mov	r6, r0
 800dbec:	4611      	mov	r1, r2
 800dbee:	4648      	mov	r0, r9
 800dbf0:	4614      	mov	r4, r2
 800dbf2:	f7ff ffdb 	bl	800dbac <__mcmp>
 800dbf6:	1e05      	subs	r5, r0, #0
 800dbf8:	d112      	bne.n	800dc20 <__mdiff+0x3c>
 800dbfa:	4629      	mov	r1, r5
 800dbfc:	4630      	mov	r0, r6
 800dbfe:	f7ff fd5b 	bl	800d6b8 <_Balloc>
 800dc02:	4602      	mov	r2, r0
 800dc04:	b928      	cbnz	r0, 800dc12 <__mdiff+0x2e>
 800dc06:	4b3f      	ldr	r3, [pc, #252]	@ (800dd04 <__mdiff+0x120>)
 800dc08:	f240 2137 	movw	r1, #567	@ 0x237
 800dc0c:	483e      	ldr	r0, [pc, #248]	@ (800dd08 <__mdiff+0x124>)
 800dc0e:	f000 fae1 	bl	800e1d4 <__assert_func>
 800dc12:	2301      	movs	r3, #1
 800dc14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dc18:	4610      	mov	r0, r2
 800dc1a:	b003      	add	sp, #12
 800dc1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc20:	bfbc      	itt	lt
 800dc22:	464b      	movlt	r3, r9
 800dc24:	46a1      	movlt	r9, r4
 800dc26:	4630      	mov	r0, r6
 800dc28:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800dc2c:	bfba      	itte	lt
 800dc2e:	461c      	movlt	r4, r3
 800dc30:	2501      	movlt	r5, #1
 800dc32:	2500      	movge	r5, #0
 800dc34:	f7ff fd40 	bl	800d6b8 <_Balloc>
 800dc38:	4602      	mov	r2, r0
 800dc3a:	b918      	cbnz	r0, 800dc44 <__mdiff+0x60>
 800dc3c:	4b31      	ldr	r3, [pc, #196]	@ (800dd04 <__mdiff+0x120>)
 800dc3e:	f240 2145 	movw	r1, #581	@ 0x245
 800dc42:	e7e3      	b.n	800dc0c <__mdiff+0x28>
 800dc44:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800dc48:	6926      	ldr	r6, [r4, #16]
 800dc4a:	60c5      	str	r5, [r0, #12]
 800dc4c:	f109 0310 	add.w	r3, r9, #16
 800dc50:	f109 0514 	add.w	r5, r9, #20
 800dc54:	f104 0e14 	add.w	lr, r4, #20
 800dc58:	f100 0b14 	add.w	fp, r0, #20
 800dc5c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800dc60:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800dc64:	9301      	str	r3, [sp, #4]
 800dc66:	46d9      	mov	r9, fp
 800dc68:	f04f 0c00 	mov.w	ip, #0
 800dc6c:	9b01      	ldr	r3, [sp, #4]
 800dc6e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800dc72:	f853 af04 	ldr.w	sl, [r3, #4]!
 800dc76:	9301      	str	r3, [sp, #4]
 800dc78:	fa1f f38a 	uxth.w	r3, sl
 800dc7c:	4619      	mov	r1, r3
 800dc7e:	b283      	uxth	r3, r0
 800dc80:	1acb      	subs	r3, r1, r3
 800dc82:	0c00      	lsrs	r0, r0, #16
 800dc84:	4463      	add	r3, ip
 800dc86:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800dc8a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800dc8e:	b29b      	uxth	r3, r3
 800dc90:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800dc94:	4576      	cmp	r6, lr
 800dc96:	f849 3b04 	str.w	r3, [r9], #4
 800dc9a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dc9e:	d8e5      	bhi.n	800dc6c <__mdiff+0x88>
 800dca0:	1b33      	subs	r3, r6, r4
 800dca2:	3b15      	subs	r3, #21
 800dca4:	f023 0303 	bic.w	r3, r3, #3
 800dca8:	3415      	adds	r4, #21
 800dcaa:	3304      	adds	r3, #4
 800dcac:	42a6      	cmp	r6, r4
 800dcae:	bf38      	it	cc
 800dcb0:	2304      	movcc	r3, #4
 800dcb2:	441d      	add	r5, r3
 800dcb4:	445b      	add	r3, fp
 800dcb6:	461e      	mov	r6, r3
 800dcb8:	462c      	mov	r4, r5
 800dcba:	4544      	cmp	r4, r8
 800dcbc:	d30e      	bcc.n	800dcdc <__mdiff+0xf8>
 800dcbe:	f108 0103 	add.w	r1, r8, #3
 800dcc2:	1b49      	subs	r1, r1, r5
 800dcc4:	f021 0103 	bic.w	r1, r1, #3
 800dcc8:	3d03      	subs	r5, #3
 800dcca:	45a8      	cmp	r8, r5
 800dccc:	bf38      	it	cc
 800dcce:	2100      	movcc	r1, #0
 800dcd0:	440b      	add	r3, r1
 800dcd2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dcd6:	b191      	cbz	r1, 800dcfe <__mdiff+0x11a>
 800dcd8:	6117      	str	r7, [r2, #16]
 800dcda:	e79d      	b.n	800dc18 <__mdiff+0x34>
 800dcdc:	f854 1b04 	ldr.w	r1, [r4], #4
 800dce0:	46e6      	mov	lr, ip
 800dce2:	0c08      	lsrs	r0, r1, #16
 800dce4:	fa1c fc81 	uxtah	ip, ip, r1
 800dce8:	4471      	add	r1, lr
 800dcea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800dcee:	b289      	uxth	r1, r1
 800dcf0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800dcf4:	f846 1b04 	str.w	r1, [r6], #4
 800dcf8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dcfc:	e7dd      	b.n	800dcba <__mdiff+0xd6>
 800dcfe:	3f01      	subs	r7, #1
 800dd00:	e7e7      	b.n	800dcd2 <__mdiff+0xee>
 800dd02:	bf00      	nop
 800dd04:	0806d3b8 	.word	0x0806d3b8
 800dd08:	0806d3c9 	.word	0x0806d3c9

0800dd0c <__d2b>:
 800dd0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dd10:	460f      	mov	r7, r1
 800dd12:	2101      	movs	r1, #1
 800dd14:	ec59 8b10 	vmov	r8, r9, d0
 800dd18:	4616      	mov	r6, r2
 800dd1a:	f7ff fccd 	bl	800d6b8 <_Balloc>
 800dd1e:	4604      	mov	r4, r0
 800dd20:	b930      	cbnz	r0, 800dd30 <__d2b+0x24>
 800dd22:	4602      	mov	r2, r0
 800dd24:	4b23      	ldr	r3, [pc, #140]	@ (800ddb4 <__d2b+0xa8>)
 800dd26:	4824      	ldr	r0, [pc, #144]	@ (800ddb8 <__d2b+0xac>)
 800dd28:	f240 310f 	movw	r1, #783	@ 0x30f
 800dd2c:	f000 fa52 	bl	800e1d4 <__assert_func>
 800dd30:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dd34:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dd38:	b10d      	cbz	r5, 800dd3e <__d2b+0x32>
 800dd3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dd3e:	9301      	str	r3, [sp, #4]
 800dd40:	f1b8 0300 	subs.w	r3, r8, #0
 800dd44:	d023      	beq.n	800dd8e <__d2b+0x82>
 800dd46:	4668      	mov	r0, sp
 800dd48:	9300      	str	r3, [sp, #0]
 800dd4a:	f7ff fd7c 	bl	800d846 <__lo0bits>
 800dd4e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dd52:	b1d0      	cbz	r0, 800dd8a <__d2b+0x7e>
 800dd54:	f1c0 0320 	rsb	r3, r0, #32
 800dd58:	fa02 f303 	lsl.w	r3, r2, r3
 800dd5c:	430b      	orrs	r3, r1
 800dd5e:	40c2      	lsrs	r2, r0
 800dd60:	6163      	str	r3, [r4, #20]
 800dd62:	9201      	str	r2, [sp, #4]
 800dd64:	9b01      	ldr	r3, [sp, #4]
 800dd66:	61a3      	str	r3, [r4, #24]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	bf0c      	ite	eq
 800dd6c:	2201      	moveq	r2, #1
 800dd6e:	2202      	movne	r2, #2
 800dd70:	6122      	str	r2, [r4, #16]
 800dd72:	b1a5      	cbz	r5, 800dd9e <__d2b+0x92>
 800dd74:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800dd78:	4405      	add	r5, r0
 800dd7a:	603d      	str	r5, [r7, #0]
 800dd7c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800dd80:	6030      	str	r0, [r6, #0]
 800dd82:	4620      	mov	r0, r4
 800dd84:	b003      	add	sp, #12
 800dd86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd8a:	6161      	str	r1, [r4, #20]
 800dd8c:	e7ea      	b.n	800dd64 <__d2b+0x58>
 800dd8e:	a801      	add	r0, sp, #4
 800dd90:	f7ff fd59 	bl	800d846 <__lo0bits>
 800dd94:	9b01      	ldr	r3, [sp, #4]
 800dd96:	6163      	str	r3, [r4, #20]
 800dd98:	3020      	adds	r0, #32
 800dd9a:	2201      	movs	r2, #1
 800dd9c:	e7e8      	b.n	800dd70 <__d2b+0x64>
 800dd9e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dda2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800dda6:	6038      	str	r0, [r7, #0]
 800dda8:	6918      	ldr	r0, [r3, #16]
 800ddaa:	f7ff fd2d 	bl	800d808 <__hi0bits>
 800ddae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ddb2:	e7e5      	b.n	800dd80 <__d2b+0x74>
 800ddb4:	0806d3b8 	.word	0x0806d3b8
 800ddb8:	0806d3c9 	.word	0x0806d3c9

0800ddbc <_malloc_usable_size_r>:
 800ddbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ddc0:	1f18      	subs	r0, r3, #4
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	bfbc      	itt	lt
 800ddc6:	580b      	ldrlt	r3, [r1, r0]
 800ddc8:	18c0      	addlt	r0, r0, r3
 800ddca:	4770      	bx	lr

0800ddcc <__ssputs_r>:
 800ddcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddd0:	688e      	ldr	r6, [r1, #8]
 800ddd2:	461f      	mov	r7, r3
 800ddd4:	42be      	cmp	r6, r7
 800ddd6:	680b      	ldr	r3, [r1, #0]
 800ddd8:	4682      	mov	sl, r0
 800ddda:	460c      	mov	r4, r1
 800dddc:	4690      	mov	r8, r2
 800ddde:	d82d      	bhi.n	800de3c <__ssputs_r+0x70>
 800dde0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dde4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800dde8:	d026      	beq.n	800de38 <__ssputs_r+0x6c>
 800ddea:	6965      	ldr	r5, [r4, #20]
 800ddec:	6909      	ldr	r1, [r1, #16]
 800ddee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ddf2:	eba3 0901 	sub.w	r9, r3, r1
 800ddf6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ddfa:	1c7b      	adds	r3, r7, #1
 800ddfc:	444b      	add	r3, r9
 800ddfe:	106d      	asrs	r5, r5, #1
 800de00:	429d      	cmp	r5, r3
 800de02:	bf38      	it	cc
 800de04:	461d      	movcc	r5, r3
 800de06:	0553      	lsls	r3, r2, #21
 800de08:	d527      	bpl.n	800de5a <__ssputs_r+0x8e>
 800de0a:	4629      	mov	r1, r5
 800de0c:	f7fd ff48 	bl	800bca0 <_malloc_r>
 800de10:	4606      	mov	r6, r0
 800de12:	b360      	cbz	r0, 800de6e <__ssputs_r+0xa2>
 800de14:	6921      	ldr	r1, [r4, #16]
 800de16:	464a      	mov	r2, r9
 800de18:	f7fe fe17 	bl	800ca4a <memcpy>
 800de1c:	89a3      	ldrh	r3, [r4, #12]
 800de1e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800de22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de26:	81a3      	strh	r3, [r4, #12]
 800de28:	6126      	str	r6, [r4, #16]
 800de2a:	6165      	str	r5, [r4, #20]
 800de2c:	444e      	add	r6, r9
 800de2e:	eba5 0509 	sub.w	r5, r5, r9
 800de32:	6026      	str	r6, [r4, #0]
 800de34:	60a5      	str	r5, [r4, #8]
 800de36:	463e      	mov	r6, r7
 800de38:	42be      	cmp	r6, r7
 800de3a:	d900      	bls.n	800de3e <__ssputs_r+0x72>
 800de3c:	463e      	mov	r6, r7
 800de3e:	6820      	ldr	r0, [r4, #0]
 800de40:	4632      	mov	r2, r6
 800de42:	4641      	mov	r1, r8
 800de44:	f7fe fd41 	bl	800c8ca <memmove>
 800de48:	68a3      	ldr	r3, [r4, #8]
 800de4a:	1b9b      	subs	r3, r3, r6
 800de4c:	60a3      	str	r3, [r4, #8]
 800de4e:	6823      	ldr	r3, [r4, #0]
 800de50:	4433      	add	r3, r6
 800de52:	6023      	str	r3, [r4, #0]
 800de54:	2000      	movs	r0, #0
 800de56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de5a:	462a      	mov	r2, r5
 800de5c:	f7fd ffac 	bl	800bdb8 <_realloc_r>
 800de60:	4606      	mov	r6, r0
 800de62:	2800      	cmp	r0, #0
 800de64:	d1e0      	bne.n	800de28 <__ssputs_r+0x5c>
 800de66:	6921      	ldr	r1, [r4, #16]
 800de68:	4650      	mov	r0, sl
 800de6a:	f7ff fbdb 	bl	800d624 <_free_r>
 800de6e:	230c      	movs	r3, #12
 800de70:	f8ca 3000 	str.w	r3, [sl]
 800de74:	89a3      	ldrh	r3, [r4, #12]
 800de76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de7a:	81a3      	strh	r3, [r4, #12]
 800de7c:	f04f 30ff 	mov.w	r0, #4294967295
 800de80:	e7e9      	b.n	800de56 <__ssputs_r+0x8a>
	...

0800de84 <_svfiprintf_r>:
 800de84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de88:	4698      	mov	r8, r3
 800de8a:	898b      	ldrh	r3, [r1, #12]
 800de8c:	061b      	lsls	r3, r3, #24
 800de8e:	b09d      	sub	sp, #116	@ 0x74
 800de90:	4607      	mov	r7, r0
 800de92:	460d      	mov	r5, r1
 800de94:	4614      	mov	r4, r2
 800de96:	d510      	bpl.n	800deba <_svfiprintf_r+0x36>
 800de98:	690b      	ldr	r3, [r1, #16]
 800de9a:	b973      	cbnz	r3, 800deba <_svfiprintf_r+0x36>
 800de9c:	2140      	movs	r1, #64	@ 0x40
 800de9e:	f7fd feff 	bl	800bca0 <_malloc_r>
 800dea2:	6028      	str	r0, [r5, #0]
 800dea4:	6128      	str	r0, [r5, #16]
 800dea6:	b930      	cbnz	r0, 800deb6 <_svfiprintf_r+0x32>
 800dea8:	230c      	movs	r3, #12
 800deaa:	603b      	str	r3, [r7, #0]
 800deac:	f04f 30ff 	mov.w	r0, #4294967295
 800deb0:	b01d      	add	sp, #116	@ 0x74
 800deb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deb6:	2340      	movs	r3, #64	@ 0x40
 800deb8:	616b      	str	r3, [r5, #20]
 800deba:	2300      	movs	r3, #0
 800debc:	9309      	str	r3, [sp, #36]	@ 0x24
 800debe:	2320      	movs	r3, #32
 800dec0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dec4:	f8cd 800c 	str.w	r8, [sp, #12]
 800dec8:	2330      	movs	r3, #48	@ 0x30
 800deca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e068 <_svfiprintf_r+0x1e4>
 800dece:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ded2:	f04f 0901 	mov.w	r9, #1
 800ded6:	4623      	mov	r3, r4
 800ded8:	469a      	mov	sl, r3
 800deda:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dede:	b10a      	cbz	r2, 800dee4 <_svfiprintf_r+0x60>
 800dee0:	2a25      	cmp	r2, #37	@ 0x25
 800dee2:	d1f9      	bne.n	800ded8 <_svfiprintf_r+0x54>
 800dee4:	ebba 0b04 	subs.w	fp, sl, r4
 800dee8:	d00b      	beq.n	800df02 <_svfiprintf_r+0x7e>
 800deea:	465b      	mov	r3, fp
 800deec:	4622      	mov	r2, r4
 800deee:	4629      	mov	r1, r5
 800def0:	4638      	mov	r0, r7
 800def2:	f7ff ff6b 	bl	800ddcc <__ssputs_r>
 800def6:	3001      	adds	r0, #1
 800def8:	f000 80a7 	beq.w	800e04a <_svfiprintf_r+0x1c6>
 800defc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800defe:	445a      	add	r2, fp
 800df00:	9209      	str	r2, [sp, #36]	@ 0x24
 800df02:	f89a 3000 	ldrb.w	r3, [sl]
 800df06:	2b00      	cmp	r3, #0
 800df08:	f000 809f 	beq.w	800e04a <_svfiprintf_r+0x1c6>
 800df0c:	2300      	movs	r3, #0
 800df0e:	f04f 32ff 	mov.w	r2, #4294967295
 800df12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df16:	f10a 0a01 	add.w	sl, sl, #1
 800df1a:	9304      	str	r3, [sp, #16]
 800df1c:	9307      	str	r3, [sp, #28]
 800df1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800df22:	931a      	str	r3, [sp, #104]	@ 0x68
 800df24:	4654      	mov	r4, sl
 800df26:	2205      	movs	r2, #5
 800df28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df2c:	484e      	ldr	r0, [pc, #312]	@ (800e068 <_svfiprintf_r+0x1e4>)
 800df2e:	f7f2 f9d7 	bl	80002e0 <memchr>
 800df32:	9a04      	ldr	r2, [sp, #16]
 800df34:	b9d8      	cbnz	r0, 800df6e <_svfiprintf_r+0xea>
 800df36:	06d0      	lsls	r0, r2, #27
 800df38:	bf44      	itt	mi
 800df3a:	2320      	movmi	r3, #32
 800df3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df40:	0711      	lsls	r1, r2, #28
 800df42:	bf44      	itt	mi
 800df44:	232b      	movmi	r3, #43	@ 0x2b
 800df46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df4a:	f89a 3000 	ldrb.w	r3, [sl]
 800df4e:	2b2a      	cmp	r3, #42	@ 0x2a
 800df50:	d015      	beq.n	800df7e <_svfiprintf_r+0xfa>
 800df52:	9a07      	ldr	r2, [sp, #28]
 800df54:	4654      	mov	r4, sl
 800df56:	2000      	movs	r0, #0
 800df58:	f04f 0c0a 	mov.w	ip, #10
 800df5c:	4621      	mov	r1, r4
 800df5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df62:	3b30      	subs	r3, #48	@ 0x30
 800df64:	2b09      	cmp	r3, #9
 800df66:	d94b      	bls.n	800e000 <_svfiprintf_r+0x17c>
 800df68:	b1b0      	cbz	r0, 800df98 <_svfiprintf_r+0x114>
 800df6a:	9207      	str	r2, [sp, #28]
 800df6c:	e014      	b.n	800df98 <_svfiprintf_r+0x114>
 800df6e:	eba0 0308 	sub.w	r3, r0, r8
 800df72:	fa09 f303 	lsl.w	r3, r9, r3
 800df76:	4313      	orrs	r3, r2
 800df78:	9304      	str	r3, [sp, #16]
 800df7a:	46a2      	mov	sl, r4
 800df7c:	e7d2      	b.n	800df24 <_svfiprintf_r+0xa0>
 800df7e:	9b03      	ldr	r3, [sp, #12]
 800df80:	1d19      	adds	r1, r3, #4
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	9103      	str	r1, [sp, #12]
 800df86:	2b00      	cmp	r3, #0
 800df88:	bfbb      	ittet	lt
 800df8a:	425b      	neglt	r3, r3
 800df8c:	f042 0202 	orrlt.w	r2, r2, #2
 800df90:	9307      	strge	r3, [sp, #28]
 800df92:	9307      	strlt	r3, [sp, #28]
 800df94:	bfb8      	it	lt
 800df96:	9204      	strlt	r2, [sp, #16]
 800df98:	7823      	ldrb	r3, [r4, #0]
 800df9a:	2b2e      	cmp	r3, #46	@ 0x2e
 800df9c:	d10a      	bne.n	800dfb4 <_svfiprintf_r+0x130>
 800df9e:	7863      	ldrb	r3, [r4, #1]
 800dfa0:	2b2a      	cmp	r3, #42	@ 0x2a
 800dfa2:	d132      	bne.n	800e00a <_svfiprintf_r+0x186>
 800dfa4:	9b03      	ldr	r3, [sp, #12]
 800dfa6:	1d1a      	adds	r2, r3, #4
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	9203      	str	r2, [sp, #12]
 800dfac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dfb0:	3402      	adds	r4, #2
 800dfb2:	9305      	str	r3, [sp, #20]
 800dfb4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e078 <_svfiprintf_r+0x1f4>
 800dfb8:	7821      	ldrb	r1, [r4, #0]
 800dfba:	2203      	movs	r2, #3
 800dfbc:	4650      	mov	r0, sl
 800dfbe:	f7f2 f98f 	bl	80002e0 <memchr>
 800dfc2:	b138      	cbz	r0, 800dfd4 <_svfiprintf_r+0x150>
 800dfc4:	9b04      	ldr	r3, [sp, #16]
 800dfc6:	eba0 000a 	sub.w	r0, r0, sl
 800dfca:	2240      	movs	r2, #64	@ 0x40
 800dfcc:	4082      	lsls	r2, r0
 800dfce:	4313      	orrs	r3, r2
 800dfd0:	3401      	adds	r4, #1
 800dfd2:	9304      	str	r3, [sp, #16]
 800dfd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfd8:	4824      	ldr	r0, [pc, #144]	@ (800e06c <_svfiprintf_r+0x1e8>)
 800dfda:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dfde:	2206      	movs	r2, #6
 800dfe0:	f7f2 f97e 	bl	80002e0 <memchr>
 800dfe4:	2800      	cmp	r0, #0
 800dfe6:	d036      	beq.n	800e056 <_svfiprintf_r+0x1d2>
 800dfe8:	4b21      	ldr	r3, [pc, #132]	@ (800e070 <_svfiprintf_r+0x1ec>)
 800dfea:	bb1b      	cbnz	r3, 800e034 <_svfiprintf_r+0x1b0>
 800dfec:	9b03      	ldr	r3, [sp, #12]
 800dfee:	3307      	adds	r3, #7
 800dff0:	f023 0307 	bic.w	r3, r3, #7
 800dff4:	3308      	adds	r3, #8
 800dff6:	9303      	str	r3, [sp, #12]
 800dff8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dffa:	4433      	add	r3, r6
 800dffc:	9309      	str	r3, [sp, #36]	@ 0x24
 800dffe:	e76a      	b.n	800ded6 <_svfiprintf_r+0x52>
 800e000:	fb0c 3202 	mla	r2, ip, r2, r3
 800e004:	460c      	mov	r4, r1
 800e006:	2001      	movs	r0, #1
 800e008:	e7a8      	b.n	800df5c <_svfiprintf_r+0xd8>
 800e00a:	2300      	movs	r3, #0
 800e00c:	3401      	adds	r4, #1
 800e00e:	9305      	str	r3, [sp, #20]
 800e010:	4619      	mov	r1, r3
 800e012:	f04f 0c0a 	mov.w	ip, #10
 800e016:	4620      	mov	r0, r4
 800e018:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e01c:	3a30      	subs	r2, #48	@ 0x30
 800e01e:	2a09      	cmp	r2, #9
 800e020:	d903      	bls.n	800e02a <_svfiprintf_r+0x1a6>
 800e022:	2b00      	cmp	r3, #0
 800e024:	d0c6      	beq.n	800dfb4 <_svfiprintf_r+0x130>
 800e026:	9105      	str	r1, [sp, #20]
 800e028:	e7c4      	b.n	800dfb4 <_svfiprintf_r+0x130>
 800e02a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e02e:	4604      	mov	r4, r0
 800e030:	2301      	movs	r3, #1
 800e032:	e7f0      	b.n	800e016 <_svfiprintf_r+0x192>
 800e034:	ab03      	add	r3, sp, #12
 800e036:	9300      	str	r3, [sp, #0]
 800e038:	462a      	mov	r2, r5
 800e03a:	4b0e      	ldr	r3, [pc, #56]	@ (800e074 <_svfiprintf_r+0x1f0>)
 800e03c:	a904      	add	r1, sp, #16
 800e03e:	4638      	mov	r0, r7
 800e040:	f7fd ff76 	bl	800bf30 <_printf_float>
 800e044:	1c42      	adds	r2, r0, #1
 800e046:	4606      	mov	r6, r0
 800e048:	d1d6      	bne.n	800dff8 <_svfiprintf_r+0x174>
 800e04a:	89ab      	ldrh	r3, [r5, #12]
 800e04c:	065b      	lsls	r3, r3, #25
 800e04e:	f53f af2d 	bmi.w	800deac <_svfiprintf_r+0x28>
 800e052:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e054:	e72c      	b.n	800deb0 <_svfiprintf_r+0x2c>
 800e056:	ab03      	add	r3, sp, #12
 800e058:	9300      	str	r3, [sp, #0]
 800e05a:	462a      	mov	r2, r5
 800e05c:	4b05      	ldr	r3, [pc, #20]	@ (800e074 <_svfiprintf_r+0x1f0>)
 800e05e:	a904      	add	r1, sp, #16
 800e060:	4638      	mov	r0, r7
 800e062:	f7fe f9ed 	bl	800c440 <_printf_i>
 800e066:	e7ed      	b.n	800e044 <_svfiprintf_r+0x1c0>
 800e068:	0806d520 	.word	0x0806d520
 800e06c:	0806d52a 	.word	0x0806d52a
 800e070:	0800bf31 	.word	0x0800bf31
 800e074:	0800ddcd 	.word	0x0800ddcd
 800e078:	0806d526 	.word	0x0806d526

0800e07c <__sflush_r>:
 800e07c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e084:	0716      	lsls	r6, r2, #28
 800e086:	4605      	mov	r5, r0
 800e088:	460c      	mov	r4, r1
 800e08a:	d454      	bmi.n	800e136 <__sflush_r+0xba>
 800e08c:	684b      	ldr	r3, [r1, #4]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	dc02      	bgt.n	800e098 <__sflush_r+0x1c>
 800e092:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e094:	2b00      	cmp	r3, #0
 800e096:	dd48      	ble.n	800e12a <__sflush_r+0xae>
 800e098:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e09a:	2e00      	cmp	r6, #0
 800e09c:	d045      	beq.n	800e12a <__sflush_r+0xae>
 800e09e:	2300      	movs	r3, #0
 800e0a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e0a4:	682f      	ldr	r7, [r5, #0]
 800e0a6:	6a21      	ldr	r1, [r4, #32]
 800e0a8:	602b      	str	r3, [r5, #0]
 800e0aa:	d030      	beq.n	800e10e <__sflush_r+0x92>
 800e0ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e0ae:	89a3      	ldrh	r3, [r4, #12]
 800e0b0:	0759      	lsls	r1, r3, #29
 800e0b2:	d505      	bpl.n	800e0c0 <__sflush_r+0x44>
 800e0b4:	6863      	ldr	r3, [r4, #4]
 800e0b6:	1ad2      	subs	r2, r2, r3
 800e0b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e0ba:	b10b      	cbz	r3, 800e0c0 <__sflush_r+0x44>
 800e0bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e0be:	1ad2      	subs	r2, r2, r3
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e0c4:	6a21      	ldr	r1, [r4, #32]
 800e0c6:	4628      	mov	r0, r5
 800e0c8:	47b0      	blx	r6
 800e0ca:	1c43      	adds	r3, r0, #1
 800e0cc:	89a3      	ldrh	r3, [r4, #12]
 800e0ce:	d106      	bne.n	800e0de <__sflush_r+0x62>
 800e0d0:	6829      	ldr	r1, [r5, #0]
 800e0d2:	291d      	cmp	r1, #29
 800e0d4:	d82b      	bhi.n	800e12e <__sflush_r+0xb2>
 800e0d6:	4a2a      	ldr	r2, [pc, #168]	@ (800e180 <__sflush_r+0x104>)
 800e0d8:	410a      	asrs	r2, r1
 800e0da:	07d6      	lsls	r6, r2, #31
 800e0dc:	d427      	bmi.n	800e12e <__sflush_r+0xb2>
 800e0de:	2200      	movs	r2, #0
 800e0e0:	6062      	str	r2, [r4, #4]
 800e0e2:	04d9      	lsls	r1, r3, #19
 800e0e4:	6922      	ldr	r2, [r4, #16]
 800e0e6:	6022      	str	r2, [r4, #0]
 800e0e8:	d504      	bpl.n	800e0f4 <__sflush_r+0x78>
 800e0ea:	1c42      	adds	r2, r0, #1
 800e0ec:	d101      	bne.n	800e0f2 <__sflush_r+0x76>
 800e0ee:	682b      	ldr	r3, [r5, #0]
 800e0f0:	b903      	cbnz	r3, 800e0f4 <__sflush_r+0x78>
 800e0f2:	6560      	str	r0, [r4, #84]	@ 0x54
 800e0f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e0f6:	602f      	str	r7, [r5, #0]
 800e0f8:	b1b9      	cbz	r1, 800e12a <__sflush_r+0xae>
 800e0fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e0fe:	4299      	cmp	r1, r3
 800e100:	d002      	beq.n	800e108 <__sflush_r+0x8c>
 800e102:	4628      	mov	r0, r5
 800e104:	f7ff fa8e 	bl	800d624 <_free_r>
 800e108:	2300      	movs	r3, #0
 800e10a:	6363      	str	r3, [r4, #52]	@ 0x34
 800e10c:	e00d      	b.n	800e12a <__sflush_r+0xae>
 800e10e:	2301      	movs	r3, #1
 800e110:	4628      	mov	r0, r5
 800e112:	47b0      	blx	r6
 800e114:	4602      	mov	r2, r0
 800e116:	1c50      	adds	r0, r2, #1
 800e118:	d1c9      	bne.n	800e0ae <__sflush_r+0x32>
 800e11a:	682b      	ldr	r3, [r5, #0]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d0c6      	beq.n	800e0ae <__sflush_r+0x32>
 800e120:	2b1d      	cmp	r3, #29
 800e122:	d001      	beq.n	800e128 <__sflush_r+0xac>
 800e124:	2b16      	cmp	r3, #22
 800e126:	d11e      	bne.n	800e166 <__sflush_r+0xea>
 800e128:	602f      	str	r7, [r5, #0]
 800e12a:	2000      	movs	r0, #0
 800e12c:	e022      	b.n	800e174 <__sflush_r+0xf8>
 800e12e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e132:	b21b      	sxth	r3, r3
 800e134:	e01b      	b.n	800e16e <__sflush_r+0xf2>
 800e136:	690f      	ldr	r7, [r1, #16]
 800e138:	2f00      	cmp	r7, #0
 800e13a:	d0f6      	beq.n	800e12a <__sflush_r+0xae>
 800e13c:	0793      	lsls	r3, r2, #30
 800e13e:	680e      	ldr	r6, [r1, #0]
 800e140:	bf08      	it	eq
 800e142:	694b      	ldreq	r3, [r1, #20]
 800e144:	600f      	str	r7, [r1, #0]
 800e146:	bf18      	it	ne
 800e148:	2300      	movne	r3, #0
 800e14a:	eba6 0807 	sub.w	r8, r6, r7
 800e14e:	608b      	str	r3, [r1, #8]
 800e150:	f1b8 0f00 	cmp.w	r8, #0
 800e154:	dde9      	ble.n	800e12a <__sflush_r+0xae>
 800e156:	6a21      	ldr	r1, [r4, #32]
 800e158:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e15a:	4643      	mov	r3, r8
 800e15c:	463a      	mov	r2, r7
 800e15e:	4628      	mov	r0, r5
 800e160:	47b0      	blx	r6
 800e162:	2800      	cmp	r0, #0
 800e164:	dc08      	bgt.n	800e178 <__sflush_r+0xfc>
 800e166:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e16a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e16e:	81a3      	strh	r3, [r4, #12]
 800e170:	f04f 30ff 	mov.w	r0, #4294967295
 800e174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e178:	4407      	add	r7, r0
 800e17a:	eba8 0800 	sub.w	r8, r8, r0
 800e17e:	e7e7      	b.n	800e150 <__sflush_r+0xd4>
 800e180:	dfbffffe 	.word	0xdfbffffe

0800e184 <_fflush_r>:
 800e184:	b538      	push	{r3, r4, r5, lr}
 800e186:	690b      	ldr	r3, [r1, #16]
 800e188:	4605      	mov	r5, r0
 800e18a:	460c      	mov	r4, r1
 800e18c:	b913      	cbnz	r3, 800e194 <_fflush_r+0x10>
 800e18e:	2500      	movs	r5, #0
 800e190:	4628      	mov	r0, r5
 800e192:	bd38      	pop	{r3, r4, r5, pc}
 800e194:	b118      	cbz	r0, 800e19e <_fflush_r+0x1a>
 800e196:	6a03      	ldr	r3, [r0, #32]
 800e198:	b90b      	cbnz	r3, 800e19e <_fflush_r+0x1a>
 800e19a:	f7fe fafd 	bl	800c798 <__sinit>
 800e19e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d0f3      	beq.n	800e18e <_fflush_r+0xa>
 800e1a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e1a8:	07d0      	lsls	r0, r2, #31
 800e1aa:	d404      	bmi.n	800e1b6 <_fflush_r+0x32>
 800e1ac:	0599      	lsls	r1, r3, #22
 800e1ae:	d402      	bmi.n	800e1b6 <_fflush_r+0x32>
 800e1b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e1b2:	f7fe fc40 	bl	800ca36 <__retarget_lock_acquire_recursive>
 800e1b6:	4628      	mov	r0, r5
 800e1b8:	4621      	mov	r1, r4
 800e1ba:	f7ff ff5f 	bl	800e07c <__sflush_r>
 800e1be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e1c0:	07da      	lsls	r2, r3, #31
 800e1c2:	4605      	mov	r5, r0
 800e1c4:	d4e4      	bmi.n	800e190 <_fflush_r+0xc>
 800e1c6:	89a3      	ldrh	r3, [r4, #12]
 800e1c8:	059b      	lsls	r3, r3, #22
 800e1ca:	d4e1      	bmi.n	800e190 <_fflush_r+0xc>
 800e1cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e1ce:	f7fe fc33 	bl	800ca38 <__retarget_lock_release_recursive>
 800e1d2:	e7dd      	b.n	800e190 <_fflush_r+0xc>

0800e1d4 <__assert_func>:
 800e1d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e1d6:	4614      	mov	r4, r2
 800e1d8:	461a      	mov	r2, r3
 800e1da:	4b09      	ldr	r3, [pc, #36]	@ (800e200 <__assert_func+0x2c>)
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	4605      	mov	r5, r0
 800e1e0:	68d8      	ldr	r0, [r3, #12]
 800e1e2:	b954      	cbnz	r4, 800e1fa <__assert_func+0x26>
 800e1e4:	4b07      	ldr	r3, [pc, #28]	@ (800e204 <__assert_func+0x30>)
 800e1e6:	461c      	mov	r4, r3
 800e1e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e1ec:	9100      	str	r1, [sp, #0]
 800e1ee:	462b      	mov	r3, r5
 800e1f0:	4905      	ldr	r1, [pc, #20]	@ (800e208 <__assert_func+0x34>)
 800e1f2:	f000 f841 	bl	800e278 <fiprintf>
 800e1f6:	f000 f851 	bl	800e29c <abort>
 800e1fa:	4b04      	ldr	r3, [pc, #16]	@ (800e20c <__assert_func+0x38>)
 800e1fc:	e7f4      	b.n	800e1e8 <__assert_func+0x14>
 800e1fe:	bf00      	nop
 800e200:	24000b5c 	.word	0x24000b5c
 800e204:	0800ed89 	.word	0x0800ed89
 800e208:	0806d546 	.word	0x0806d546
 800e20c:	0806d539 	.word	0x0806d539

0800e210 <_calloc_r>:
 800e210:	b570      	push	{r4, r5, r6, lr}
 800e212:	fba1 5402 	umull	r5, r4, r1, r2
 800e216:	b93c      	cbnz	r4, 800e228 <_calloc_r+0x18>
 800e218:	4629      	mov	r1, r5
 800e21a:	f7fd fd41 	bl	800bca0 <_malloc_r>
 800e21e:	4606      	mov	r6, r0
 800e220:	b928      	cbnz	r0, 800e22e <_calloc_r+0x1e>
 800e222:	2600      	movs	r6, #0
 800e224:	4630      	mov	r0, r6
 800e226:	bd70      	pop	{r4, r5, r6, pc}
 800e228:	220c      	movs	r2, #12
 800e22a:	6002      	str	r2, [r0, #0]
 800e22c:	e7f9      	b.n	800e222 <_calloc_r+0x12>
 800e22e:	462a      	mov	r2, r5
 800e230:	4621      	mov	r1, r4
 800e232:	f7fe fb64 	bl	800c8fe <memset>
 800e236:	e7f5      	b.n	800e224 <_calloc_r+0x14>

0800e238 <__ascii_mbtowc>:
 800e238:	b082      	sub	sp, #8
 800e23a:	b901      	cbnz	r1, 800e23e <__ascii_mbtowc+0x6>
 800e23c:	a901      	add	r1, sp, #4
 800e23e:	b142      	cbz	r2, 800e252 <__ascii_mbtowc+0x1a>
 800e240:	b14b      	cbz	r3, 800e256 <__ascii_mbtowc+0x1e>
 800e242:	7813      	ldrb	r3, [r2, #0]
 800e244:	600b      	str	r3, [r1, #0]
 800e246:	7812      	ldrb	r2, [r2, #0]
 800e248:	1e10      	subs	r0, r2, #0
 800e24a:	bf18      	it	ne
 800e24c:	2001      	movne	r0, #1
 800e24e:	b002      	add	sp, #8
 800e250:	4770      	bx	lr
 800e252:	4610      	mov	r0, r2
 800e254:	e7fb      	b.n	800e24e <__ascii_mbtowc+0x16>
 800e256:	f06f 0001 	mvn.w	r0, #1
 800e25a:	e7f8      	b.n	800e24e <__ascii_mbtowc+0x16>

0800e25c <__ascii_wctomb>:
 800e25c:	4603      	mov	r3, r0
 800e25e:	4608      	mov	r0, r1
 800e260:	b141      	cbz	r1, 800e274 <__ascii_wctomb+0x18>
 800e262:	2aff      	cmp	r2, #255	@ 0xff
 800e264:	d904      	bls.n	800e270 <__ascii_wctomb+0x14>
 800e266:	228a      	movs	r2, #138	@ 0x8a
 800e268:	601a      	str	r2, [r3, #0]
 800e26a:	f04f 30ff 	mov.w	r0, #4294967295
 800e26e:	4770      	bx	lr
 800e270:	700a      	strb	r2, [r1, #0]
 800e272:	2001      	movs	r0, #1
 800e274:	4770      	bx	lr
	...

0800e278 <fiprintf>:
 800e278:	b40e      	push	{r1, r2, r3}
 800e27a:	b503      	push	{r0, r1, lr}
 800e27c:	4601      	mov	r1, r0
 800e27e:	ab03      	add	r3, sp, #12
 800e280:	4805      	ldr	r0, [pc, #20]	@ (800e298 <fiprintf+0x20>)
 800e282:	f853 2b04 	ldr.w	r2, [r3], #4
 800e286:	6800      	ldr	r0, [r0, #0]
 800e288:	9301      	str	r3, [sp, #4]
 800e28a:	f000 f837 	bl	800e2fc <_vfiprintf_r>
 800e28e:	b002      	add	sp, #8
 800e290:	f85d eb04 	ldr.w	lr, [sp], #4
 800e294:	b003      	add	sp, #12
 800e296:	4770      	bx	lr
 800e298:	24000b5c 	.word	0x24000b5c

0800e29c <abort>:
 800e29c:	b508      	push	{r3, lr}
 800e29e:	2006      	movs	r0, #6
 800e2a0:	f000 fa00 	bl	800e6a4 <raise>
 800e2a4:	2001      	movs	r0, #1
 800e2a6:	f000 fca5 	bl	800ebf4 <_exit>

0800e2aa <__sfputc_r>:
 800e2aa:	6893      	ldr	r3, [r2, #8]
 800e2ac:	3b01      	subs	r3, #1
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	b410      	push	{r4}
 800e2b2:	6093      	str	r3, [r2, #8]
 800e2b4:	da08      	bge.n	800e2c8 <__sfputc_r+0x1e>
 800e2b6:	6994      	ldr	r4, [r2, #24]
 800e2b8:	42a3      	cmp	r3, r4
 800e2ba:	db01      	blt.n	800e2c0 <__sfputc_r+0x16>
 800e2bc:	290a      	cmp	r1, #10
 800e2be:	d103      	bne.n	800e2c8 <__sfputc_r+0x1e>
 800e2c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e2c4:	f000 b932 	b.w	800e52c <__swbuf_r>
 800e2c8:	6813      	ldr	r3, [r2, #0]
 800e2ca:	1c58      	adds	r0, r3, #1
 800e2cc:	6010      	str	r0, [r2, #0]
 800e2ce:	7019      	strb	r1, [r3, #0]
 800e2d0:	4608      	mov	r0, r1
 800e2d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e2d6:	4770      	bx	lr

0800e2d8 <__sfputs_r>:
 800e2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2da:	4606      	mov	r6, r0
 800e2dc:	460f      	mov	r7, r1
 800e2de:	4614      	mov	r4, r2
 800e2e0:	18d5      	adds	r5, r2, r3
 800e2e2:	42ac      	cmp	r4, r5
 800e2e4:	d101      	bne.n	800e2ea <__sfputs_r+0x12>
 800e2e6:	2000      	movs	r0, #0
 800e2e8:	e007      	b.n	800e2fa <__sfputs_r+0x22>
 800e2ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2ee:	463a      	mov	r2, r7
 800e2f0:	4630      	mov	r0, r6
 800e2f2:	f7ff ffda 	bl	800e2aa <__sfputc_r>
 800e2f6:	1c43      	adds	r3, r0, #1
 800e2f8:	d1f3      	bne.n	800e2e2 <__sfputs_r+0xa>
 800e2fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e2fc <_vfiprintf_r>:
 800e2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e300:	460d      	mov	r5, r1
 800e302:	b09d      	sub	sp, #116	@ 0x74
 800e304:	4614      	mov	r4, r2
 800e306:	4698      	mov	r8, r3
 800e308:	4606      	mov	r6, r0
 800e30a:	b118      	cbz	r0, 800e314 <_vfiprintf_r+0x18>
 800e30c:	6a03      	ldr	r3, [r0, #32]
 800e30e:	b90b      	cbnz	r3, 800e314 <_vfiprintf_r+0x18>
 800e310:	f7fe fa42 	bl	800c798 <__sinit>
 800e314:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e316:	07d9      	lsls	r1, r3, #31
 800e318:	d405      	bmi.n	800e326 <_vfiprintf_r+0x2a>
 800e31a:	89ab      	ldrh	r3, [r5, #12]
 800e31c:	059a      	lsls	r2, r3, #22
 800e31e:	d402      	bmi.n	800e326 <_vfiprintf_r+0x2a>
 800e320:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e322:	f7fe fb88 	bl	800ca36 <__retarget_lock_acquire_recursive>
 800e326:	89ab      	ldrh	r3, [r5, #12]
 800e328:	071b      	lsls	r3, r3, #28
 800e32a:	d501      	bpl.n	800e330 <_vfiprintf_r+0x34>
 800e32c:	692b      	ldr	r3, [r5, #16]
 800e32e:	b99b      	cbnz	r3, 800e358 <_vfiprintf_r+0x5c>
 800e330:	4629      	mov	r1, r5
 800e332:	4630      	mov	r0, r6
 800e334:	f000 f938 	bl	800e5a8 <__swsetup_r>
 800e338:	b170      	cbz	r0, 800e358 <_vfiprintf_r+0x5c>
 800e33a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e33c:	07dc      	lsls	r4, r3, #31
 800e33e:	d504      	bpl.n	800e34a <_vfiprintf_r+0x4e>
 800e340:	f04f 30ff 	mov.w	r0, #4294967295
 800e344:	b01d      	add	sp, #116	@ 0x74
 800e346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e34a:	89ab      	ldrh	r3, [r5, #12]
 800e34c:	0598      	lsls	r0, r3, #22
 800e34e:	d4f7      	bmi.n	800e340 <_vfiprintf_r+0x44>
 800e350:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e352:	f7fe fb71 	bl	800ca38 <__retarget_lock_release_recursive>
 800e356:	e7f3      	b.n	800e340 <_vfiprintf_r+0x44>
 800e358:	2300      	movs	r3, #0
 800e35a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e35c:	2320      	movs	r3, #32
 800e35e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e362:	f8cd 800c 	str.w	r8, [sp, #12]
 800e366:	2330      	movs	r3, #48	@ 0x30
 800e368:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e518 <_vfiprintf_r+0x21c>
 800e36c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e370:	f04f 0901 	mov.w	r9, #1
 800e374:	4623      	mov	r3, r4
 800e376:	469a      	mov	sl, r3
 800e378:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e37c:	b10a      	cbz	r2, 800e382 <_vfiprintf_r+0x86>
 800e37e:	2a25      	cmp	r2, #37	@ 0x25
 800e380:	d1f9      	bne.n	800e376 <_vfiprintf_r+0x7a>
 800e382:	ebba 0b04 	subs.w	fp, sl, r4
 800e386:	d00b      	beq.n	800e3a0 <_vfiprintf_r+0xa4>
 800e388:	465b      	mov	r3, fp
 800e38a:	4622      	mov	r2, r4
 800e38c:	4629      	mov	r1, r5
 800e38e:	4630      	mov	r0, r6
 800e390:	f7ff ffa2 	bl	800e2d8 <__sfputs_r>
 800e394:	3001      	adds	r0, #1
 800e396:	f000 80a7 	beq.w	800e4e8 <_vfiprintf_r+0x1ec>
 800e39a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e39c:	445a      	add	r2, fp
 800e39e:	9209      	str	r2, [sp, #36]	@ 0x24
 800e3a0:	f89a 3000 	ldrb.w	r3, [sl]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	f000 809f 	beq.w	800e4e8 <_vfiprintf_r+0x1ec>
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	f04f 32ff 	mov.w	r2, #4294967295
 800e3b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e3b4:	f10a 0a01 	add.w	sl, sl, #1
 800e3b8:	9304      	str	r3, [sp, #16]
 800e3ba:	9307      	str	r3, [sp, #28]
 800e3bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e3c0:	931a      	str	r3, [sp, #104]	@ 0x68
 800e3c2:	4654      	mov	r4, sl
 800e3c4:	2205      	movs	r2, #5
 800e3c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3ca:	4853      	ldr	r0, [pc, #332]	@ (800e518 <_vfiprintf_r+0x21c>)
 800e3cc:	f7f1 ff88 	bl	80002e0 <memchr>
 800e3d0:	9a04      	ldr	r2, [sp, #16]
 800e3d2:	b9d8      	cbnz	r0, 800e40c <_vfiprintf_r+0x110>
 800e3d4:	06d1      	lsls	r1, r2, #27
 800e3d6:	bf44      	itt	mi
 800e3d8:	2320      	movmi	r3, #32
 800e3da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e3de:	0713      	lsls	r3, r2, #28
 800e3e0:	bf44      	itt	mi
 800e3e2:	232b      	movmi	r3, #43	@ 0x2b
 800e3e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e3e8:	f89a 3000 	ldrb.w	r3, [sl]
 800e3ec:	2b2a      	cmp	r3, #42	@ 0x2a
 800e3ee:	d015      	beq.n	800e41c <_vfiprintf_r+0x120>
 800e3f0:	9a07      	ldr	r2, [sp, #28]
 800e3f2:	4654      	mov	r4, sl
 800e3f4:	2000      	movs	r0, #0
 800e3f6:	f04f 0c0a 	mov.w	ip, #10
 800e3fa:	4621      	mov	r1, r4
 800e3fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e400:	3b30      	subs	r3, #48	@ 0x30
 800e402:	2b09      	cmp	r3, #9
 800e404:	d94b      	bls.n	800e49e <_vfiprintf_r+0x1a2>
 800e406:	b1b0      	cbz	r0, 800e436 <_vfiprintf_r+0x13a>
 800e408:	9207      	str	r2, [sp, #28]
 800e40a:	e014      	b.n	800e436 <_vfiprintf_r+0x13a>
 800e40c:	eba0 0308 	sub.w	r3, r0, r8
 800e410:	fa09 f303 	lsl.w	r3, r9, r3
 800e414:	4313      	orrs	r3, r2
 800e416:	9304      	str	r3, [sp, #16]
 800e418:	46a2      	mov	sl, r4
 800e41a:	e7d2      	b.n	800e3c2 <_vfiprintf_r+0xc6>
 800e41c:	9b03      	ldr	r3, [sp, #12]
 800e41e:	1d19      	adds	r1, r3, #4
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	9103      	str	r1, [sp, #12]
 800e424:	2b00      	cmp	r3, #0
 800e426:	bfbb      	ittet	lt
 800e428:	425b      	neglt	r3, r3
 800e42a:	f042 0202 	orrlt.w	r2, r2, #2
 800e42e:	9307      	strge	r3, [sp, #28]
 800e430:	9307      	strlt	r3, [sp, #28]
 800e432:	bfb8      	it	lt
 800e434:	9204      	strlt	r2, [sp, #16]
 800e436:	7823      	ldrb	r3, [r4, #0]
 800e438:	2b2e      	cmp	r3, #46	@ 0x2e
 800e43a:	d10a      	bne.n	800e452 <_vfiprintf_r+0x156>
 800e43c:	7863      	ldrb	r3, [r4, #1]
 800e43e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e440:	d132      	bne.n	800e4a8 <_vfiprintf_r+0x1ac>
 800e442:	9b03      	ldr	r3, [sp, #12]
 800e444:	1d1a      	adds	r2, r3, #4
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	9203      	str	r2, [sp, #12]
 800e44a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e44e:	3402      	adds	r4, #2
 800e450:	9305      	str	r3, [sp, #20]
 800e452:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e528 <_vfiprintf_r+0x22c>
 800e456:	7821      	ldrb	r1, [r4, #0]
 800e458:	2203      	movs	r2, #3
 800e45a:	4650      	mov	r0, sl
 800e45c:	f7f1 ff40 	bl	80002e0 <memchr>
 800e460:	b138      	cbz	r0, 800e472 <_vfiprintf_r+0x176>
 800e462:	9b04      	ldr	r3, [sp, #16]
 800e464:	eba0 000a 	sub.w	r0, r0, sl
 800e468:	2240      	movs	r2, #64	@ 0x40
 800e46a:	4082      	lsls	r2, r0
 800e46c:	4313      	orrs	r3, r2
 800e46e:	3401      	adds	r4, #1
 800e470:	9304      	str	r3, [sp, #16]
 800e472:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e476:	4829      	ldr	r0, [pc, #164]	@ (800e51c <_vfiprintf_r+0x220>)
 800e478:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e47c:	2206      	movs	r2, #6
 800e47e:	f7f1 ff2f 	bl	80002e0 <memchr>
 800e482:	2800      	cmp	r0, #0
 800e484:	d03f      	beq.n	800e506 <_vfiprintf_r+0x20a>
 800e486:	4b26      	ldr	r3, [pc, #152]	@ (800e520 <_vfiprintf_r+0x224>)
 800e488:	bb1b      	cbnz	r3, 800e4d2 <_vfiprintf_r+0x1d6>
 800e48a:	9b03      	ldr	r3, [sp, #12]
 800e48c:	3307      	adds	r3, #7
 800e48e:	f023 0307 	bic.w	r3, r3, #7
 800e492:	3308      	adds	r3, #8
 800e494:	9303      	str	r3, [sp, #12]
 800e496:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e498:	443b      	add	r3, r7
 800e49a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e49c:	e76a      	b.n	800e374 <_vfiprintf_r+0x78>
 800e49e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e4a2:	460c      	mov	r4, r1
 800e4a4:	2001      	movs	r0, #1
 800e4a6:	e7a8      	b.n	800e3fa <_vfiprintf_r+0xfe>
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	3401      	adds	r4, #1
 800e4ac:	9305      	str	r3, [sp, #20]
 800e4ae:	4619      	mov	r1, r3
 800e4b0:	f04f 0c0a 	mov.w	ip, #10
 800e4b4:	4620      	mov	r0, r4
 800e4b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e4ba:	3a30      	subs	r2, #48	@ 0x30
 800e4bc:	2a09      	cmp	r2, #9
 800e4be:	d903      	bls.n	800e4c8 <_vfiprintf_r+0x1cc>
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d0c6      	beq.n	800e452 <_vfiprintf_r+0x156>
 800e4c4:	9105      	str	r1, [sp, #20]
 800e4c6:	e7c4      	b.n	800e452 <_vfiprintf_r+0x156>
 800e4c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800e4cc:	4604      	mov	r4, r0
 800e4ce:	2301      	movs	r3, #1
 800e4d0:	e7f0      	b.n	800e4b4 <_vfiprintf_r+0x1b8>
 800e4d2:	ab03      	add	r3, sp, #12
 800e4d4:	9300      	str	r3, [sp, #0]
 800e4d6:	462a      	mov	r2, r5
 800e4d8:	4b12      	ldr	r3, [pc, #72]	@ (800e524 <_vfiprintf_r+0x228>)
 800e4da:	a904      	add	r1, sp, #16
 800e4dc:	4630      	mov	r0, r6
 800e4de:	f7fd fd27 	bl	800bf30 <_printf_float>
 800e4e2:	4607      	mov	r7, r0
 800e4e4:	1c78      	adds	r0, r7, #1
 800e4e6:	d1d6      	bne.n	800e496 <_vfiprintf_r+0x19a>
 800e4e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e4ea:	07d9      	lsls	r1, r3, #31
 800e4ec:	d405      	bmi.n	800e4fa <_vfiprintf_r+0x1fe>
 800e4ee:	89ab      	ldrh	r3, [r5, #12]
 800e4f0:	059a      	lsls	r2, r3, #22
 800e4f2:	d402      	bmi.n	800e4fa <_vfiprintf_r+0x1fe>
 800e4f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e4f6:	f7fe fa9f 	bl	800ca38 <__retarget_lock_release_recursive>
 800e4fa:	89ab      	ldrh	r3, [r5, #12]
 800e4fc:	065b      	lsls	r3, r3, #25
 800e4fe:	f53f af1f 	bmi.w	800e340 <_vfiprintf_r+0x44>
 800e502:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e504:	e71e      	b.n	800e344 <_vfiprintf_r+0x48>
 800e506:	ab03      	add	r3, sp, #12
 800e508:	9300      	str	r3, [sp, #0]
 800e50a:	462a      	mov	r2, r5
 800e50c:	4b05      	ldr	r3, [pc, #20]	@ (800e524 <_vfiprintf_r+0x228>)
 800e50e:	a904      	add	r1, sp, #16
 800e510:	4630      	mov	r0, r6
 800e512:	f7fd ff95 	bl	800c440 <_printf_i>
 800e516:	e7e4      	b.n	800e4e2 <_vfiprintf_r+0x1e6>
 800e518:	0806d520 	.word	0x0806d520
 800e51c:	0806d52a 	.word	0x0806d52a
 800e520:	0800bf31 	.word	0x0800bf31
 800e524:	0800e2d9 	.word	0x0800e2d9
 800e528:	0806d526 	.word	0x0806d526

0800e52c <__swbuf_r>:
 800e52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e52e:	460e      	mov	r6, r1
 800e530:	4614      	mov	r4, r2
 800e532:	4605      	mov	r5, r0
 800e534:	b118      	cbz	r0, 800e53e <__swbuf_r+0x12>
 800e536:	6a03      	ldr	r3, [r0, #32]
 800e538:	b90b      	cbnz	r3, 800e53e <__swbuf_r+0x12>
 800e53a:	f7fe f92d 	bl	800c798 <__sinit>
 800e53e:	69a3      	ldr	r3, [r4, #24]
 800e540:	60a3      	str	r3, [r4, #8]
 800e542:	89a3      	ldrh	r3, [r4, #12]
 800e544:	071a      	lsls	r2, r3, #28
 800e546:	d501      	bpl.n	800e54c <__swbuf_r+0x20>
 800e548:	6923      	ldr	r3, [r4, #16]
 800e54a:	b943      	cbnz	r3, 800e55e <__swbuf_r+0x32>
 800e54c:	4621      	mov	r1, r4
 800e54e:	4628      	mov	r0, r5
 800e550:	f000 f82a 	bl	800e5a8 <__swsetup_r>
 800e554:	b118      	cbz	r0, 800e55e <__swbuf_r+0x32>
 800e556:	f04f 37ff 	mov.w	r7, #4294967295
 800e55a:	4638      	mov	r0, r7
 800e55c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e55e:	6823      	ldr	r3, [r4, #0]
 800e560:	6922      	ldr	r2, [r4, #16]
 800e562:	1a98      	subs	r0, r3, r2
 800e564:	6963      	ldr	r3, [r4, #20]
 800e566:	b2f6      	uxtb	r6, r6
 800e568:	4283      	cmp	r3, r0
 800e56a:	4637      	mov	r7, r6
 800e56c:	dc05      	bgt.n	800e57a <__swbuf_r+0x4e>
 800e56e:	4621      	mov	r1, r4
 800e570:	4628      	mov	r0, r5
 800e572:	f7ff fe07 	bl	800e184 <_fflush_r>
 800e576:	2800      	cmp	r0, #0
 800e578:	d1ed      	bne.n	800e556 <__swbuf_r+0x2a>
 800e57a:	68a3      	ldr	r3, [r4, #8]
 800e57c:	3b01      	subs	r3, #1
 800e57e:	60a3      	str	r3, [r4, #8]
 800e580:	6823      	ldr	r3, [r4, #0]
 800e582:	1c5a      	adds	r2, r3, #1
 800e584:	6022      	str	r2, [r4, #0]
 800e586:	701e      	strb	r6, [r3, #0]
 800e588:	6962      	ldr	r2, [r4, #20]
 800e58a:	1c43      	adds	r3, r0, #1
 800e58c:	429a      	cmp	r2, r3
 800e58e:	d004      	beq.n	800e59a <__swbuf_r+0x6e>
 800e590:	89a3      	ldrh	r3, [r4, #12]
 800e592:	07db      	lsls	r3, r3, #31
 800e594:	d5e1      	bpl.n	800e55a <__swbuf_r+0x2e>
 800e596:	2e0a      	cmp	r6, #10
 800e598:	d1df      	bne.n	800e55a <__swbuf_r+0x2e>
 800e59a:	4621      	mov	r1, r4
 800e59c:	4628      	mov	r0, r5
 800e59e:	f7ff fdf1 	bl	800e184 <_fflush_r>
 800e5a2:	2800      	cmp	r0, #0
 800e5a4:	d0d9      	beq.n	800e55a <__swbuf_r+0x2e>
 800e5a6:	e7d6      	b.n	800e556 <__swbuf_r+0x2a>

0800e5a8 <__swsetup_r>:
 800e5a8:	b538      	push	{r3, r4, r5, lr}
 800e5aa:	4b29      	ldr	r3, [pc, #164]	@ (800e650 <__swsetup_r+0xa8>)
 800e5ac:	4605      	mov	r5, r0
 800e5ae:	6818      	ldr	r0, [r3, #0]
 800e5b0:	460c      	mov	r4, r1
 800e5b2:	b118      	cbz	r0, 800e5bc <__swsetup_r+0x14>
 800e5b4:	6a03      	ldr	r3, [r0, #32]
 800e5b6:	b90b      	cbnz	r3, 800e5bc <__swsetup_r+0x14>
 800e5b8:	f7fe f8ee 	bl	800c798 <__sinit>
 800e5bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5c0:	0719      	lsls	r1, r3, #28
 800e5c2:	d422      	bmi.n	800e60a <__swsetup_r+0x62>
 800e5c4:	06da      	lsls	r2, r3, #27
 800e5c6:	d407      	bmi.n	800e5d8 <__swsetup_r+0x30>
 800e5c8:	2209      	movs	r2, #9
 800e5ca:	602a      	str	r2, [r5, #0]
 800e5cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e5d0:	81a3      	strh	r3, [r4, #12]
 800e5d2:	f04f 30ff 	mov.w	r0, #4294967295
 800e5d6:	e033      	b.n	800e640 <__swsetup_r+0x98>
 800e5d8:	0758      	lsls	r0, r3, #29
 800e5da:	d512      	bpl.n	800e602 <__swsetup_r+0x5a>
 800e5dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e5de:	b141      	cbz	r1, 800e5f2 <__swsetup_r+0x4a>
 800e5e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e5e4:	4299      	cmp	r1, r3
 800e5e6:	d002      	beq.n	800e5ee <__swsetup_r+0x46>
 800e5e8:	4628      	mov	r0, r5
 800e5ea:	f7ff f81b 	bl	800d624 <_free_r>
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	6363      	str	r3, [r4, #52]	@ 0x34
 800e5f2:	89a3      	ldrh	r3, [r4, #12]
 800e5f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e5f8:	81a3      	strh	r3, [r4, #12]
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	6063      	str	r3, [r4, #4]
 800e5fe:	6923      	ldr	r3, [r4, #16]
 800e600:	6023      	str	r3, [r4, #0]
 800e602:	89a3      	ldrh	r3, [r4, #12]
 800e604:	f043 0308 	orr.w	r3, r3, #8
 800e608:	81a3      	strh	r3, [r4, #12]
 800e60a:	6923      	ldr	r3, [r4, #16]
 800e60c:	b94b      	cbnz	r3, 800e622 <__swsetup_r+0x7a>
 800e60e:	89a3      	ldrh	r3, [r4, #12]
 800e610:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e614:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e618:	d003      	beq.n	800e622 <__swsetup_r+0x7a>
 800e61a:	4621      	mov	r1, r4
 800e61c:	4628      	mov	r0, r5
 800e61e:	f000 f883 	bl	800e728 <__smakebuf_r>
 800e622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e626:	f013 0201 	ands.w	r2, r3, #1
 800e62a:	d00a      	beq.n	800e642 <__swsetup_r+0x9a>
 800e62c:	2200      	movs	r2, #0
 800e62e:	60a2      	str	r2, [r4, #8]
 800e630:	6962      	ldr	r2, [r4, #20]
 800e632:	4252      	negs	r2, r2
 800e634:	61a2      	str	r2, [r4, #24]
 800e636:	6922      	ldr	r2, [r4, #16]
 800e638:	b942      	cbnz	r2, 800e64c <__swsetup_r+0xa4>
 800e63a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e63e:	d1c5      	bne.n	800e5cc <__swsetup_r+0x24>
 800e640:	bd38      	pop	{r3, r4, r5, pc}
 800e642:	0799      	lsls	r1, r3, #30
 800e644:	bf58      	it	pl
 800e646:	6962      	ldrpl	r2, [r4, #20]
 800e648:	60a2      	str	r2, [r4, #8]
 800e64a:	e7f4      	b.n	800e636 <__swsetup_r+0x8e>
 800e64c:	2000      	movs	r0, #0
 800e64e:	e7f7      	b.n	800e640 <__swsetup_r+0x98>
 800e650:	24000b5c 	.word	0x24000b5c

0800e654 <_raise_r>:
 800e654:	291f      	cmp	r1, #31
 800e656:	b538      	push	{r3, r4, r5, lr}
 800e658:	4605      	mov	r5, r0
 800e65a:	460c      	mov	r4, r1
 800e65c:	d904      	bls.n	800e668 <_raise_r+0x14>
 800e65e:	2316      	movs	r3, #22
 800e660:	6003      	str	r3, [r0, #0]
 800e662:	f04f 30ff 	mov.w	r0, #4294967295
 800e666:	bd38      	pop	{r3, r4, r5, pc}
 800e668:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e66a:	b112      	cbz	r2, 800e672 <_raise_r+0x1e>
 800e66c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e670:	b94b      	cbnz	r3, 800e686 <_raise_r+0x32>
 800e672:	4628      	mov	r0, r5
 800e674:	f000 f830 	bl	800e6d8 <_getpid_r>
 800e678:	4622      	mov	r2, r4
 800e67a:	4601      	mov	r1, r0
 800e67c:	4628      	mov	r0, r5
 800e67e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e682:	f000 b817 	b.w	800e6b4 <_kill_r>
 800e686:	2b01      	cmp	r3, #1
 800e688:	d00a      	beq.n	800e6a0 <_raise_r+0x4c>
 800e68a:	1c59      	adds	r1, r3, #1
 800e68c:	d103      	bne.n	800e696 <_raise_r+0x42>
 800e68e:	2316      	movs	r3, #22
 800e690:	6003      	str	r3, [r0, #0]
 800e692:	2001      	movs	r0, #1
 800e694:	e7e7      	b.n	800e666 <_raise_r+0x12>
 800e696:	2100      	movs	r1, #0
 800e698:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e69c:	4620      	mov	r0, r4
 800e69e:	4798      	blx	r3
 800e6a0:	2000      	movs	r0, #0
 800e6a2:	e7e0      	b.n	800e666 <_raise_r+0x12>

0800e6a4 <raise>:
 800e6a4:	4b02      	ldr	r3, [pc, #8]	@ (800e6b0 <raise+0xc>)
 800e6a6:	4601      	mov	r1, r0
 800e6a8:	6818      	ldr	r0, [r3, #0]
 800e6aa:	f7ff bfd3 	b.w	800e654 <_raise_r>
 800e6ae:	bf00      	nop
 800e6b0:	24000b5c 	.word	0x24000b5c

0800e6b4 <_kill_r>:
 800e6b4:	b538      	push	{r3, r4, r5, lr}
 800e6b6:	4d07      	ldr	r5, [pc, #28]	@ (800e6d4 <_kill_r+0x20>)
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	4604      	mov	r4, r0
 800e6bc:	4608      	mov	r0, r1
 800e6be:	4611      	mov	r1, r2
 800e6c0:	602b      	str	r3, [r5, #0]
 800e6c2:	f000 fa77 	bl	800ebb4 <_kill>
 800e6c6:	1c43      	adds	r3, r0, #1
 800e6c8:	d102      	bne.n	800e6d0 <_kill_r+0x1c>
 800e6ca:	682b      	ldr	r3, [r5, #0]
 800e6cc:	b103      	cbz	r3, 800e6d0 <_kill_r+0x1c>
 800e6ce:	6023      	str	r3, [r4, #0]
 800e6d0:	bd38      	pop	{r3, r4, r5, pc}
 800e6d2:	bf00      	nop
 800e6d4:	240692e8 	.word	0x240692e8

0800e6d8 <_getpid_r>:
 800e6d8:	f000 ba5c 	b.w	800eb94 <_getpid>

0800e6dc <__swhatbuf_r>:
 800e6dc:	b570      	push	{r4, r5, r6, lr}
 800e6de:	460c      	mov	r4, r1
 800e6e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6e4:	2900      	cmp	r1, #0
 800e6e6:	b096      	sub	sp, #88	@ 0x58
 800e6e8:	4615      	mov	r5, r2
 800e6ea:	461e      	mov	r6, r3
 800e6ec:	da0d      	bge.n	800e70a <__swhatbuf_r+0x2e>
 800e6ee:	89a3      	ldrh	r3, [r4, #12]
 800e6f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e6f4:	f04f 0100 	mov.w	r1, #0
 800e6f8:	bf14      	ite	ne
 800e6fa:	2340      	movne	r3, #64	@ 0x40
 800e6fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e700:	2000      	movs	r0, #0
 800e702:	6031      	str	r1, [r6, #0]
 800e704:	602b      	str	r3, [r5, #0]
 800e706:	b016      	add	sp, #88	@ 0x58
 800e708:	bd70      	pop	{r4, r5, r6, pc}
 800e70a:	466a      	mov	r2, sp
 800e70c:	f000 f848 	bl	800e7a0 <_fstat_r>
 800e710:	2800      	cmp	r0, #0
 800e712:	dbec      	blt.n	800e6ee <__swhatbuf_r+0x12>
 800e714:	9901      	ldr	r1, [sp, #4]
 800e716:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e71a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e71e:	4259      	negs	r1, r3
 800e720:	4159      	adcs	r1, r3
 800e722:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e726:	e7eb      	b.n	800e700 <__swhatbuf_r+0x24>

0800e728 <__smakebuf_r>:
 800e728:	898b      	ldrh	r3, [r1, #12]
 800e72a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e72c:	079d      	lsls	r5, r3, #30
 800e72e:	4606      	mov	r6, r0
 800e730:	460c      	mov	r4, r1
 800e732:	d507      	bpl.n	800e744 <__smakebuf_r+0x1c>
 800e734:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e738:	6023      	str	r3, [r4, #0]
 800e73a:	6123      	str	r3, [r4, #16]
 800e73c:	2301      	movs	r3, #1
 800e73e:	6163      	str	r3, [r4, #20]
 800e740:	b003      	add	sp, #12
 800e742:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e744:	ab01      	add	r3, sp, #4
 800e746:	466a      	mov	r2, sp
 800e748:	f7ff ffc8 	bl	800e6dc <__swhatbuf_r>
 800e74c:	9f00      	ldr	r7, [sp, #0]
 800e74e:	4605      	mov	r5, r0
 800e750:	4639      	mov	r1, r7
 800e752:	4630      	mov	r0, r6
 800e754:	f7fd faa4 	bl	800bca0 <_malloc_r>
 800e758:	b948      	cbnz	r0, 800e76e <__smakebuf_r+0x46>
 800e75a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e75e:	059a      	lsls	r2, r3, #22
 800e760:	d4ee      	bmi.n	800e740 <__smakebuf_r+0x18>
 800e762:	f023 0303 	bic.w	r3, r3, #3
 800e766:	f043 0302 	orr.w	r3, r3, #2
 800e76a:	81a3      	strh	r3, [r4, #12]
 800e76c:	e7e2      	b.n	800e734 <__smakebuf_r+0xc>
 800e76e:	89a3      	ldrh	r3, [r4, #12]
 800e770:	6020      	str	r0, [r4, #0]
 800e772:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e776:	81a3      	strh	r3, [r4, #12]
 800e778:	9b01      	ldr	r3, [sp, #4]
 800e77a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e77e:	b15b      	cbz	r3, 800e798 <__smakebuf_r+0x70>
 800e780:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e784:	4630      	mov	r0, r6
 800e786:	f000 f81d 	bl	800e7c4 <_isatty_r>
 800e78a:	b128      	cbz	r0, 800e798 <__smakebuf_r+0x70>
 800e78c:	89a3      	ldrh	r3, [r4, #12]
 800e78e:	f023 0303 	bic.w	r3, r3, #3
 800e792:	f043 0301 	orr.w	r3, r3, #1
 800e796:	81a3      	strh	r3, [r4, #12]
 800e798:	89a3      	ldrh	r3, [r4, #12]
 800e79a:	431d      	orrs	r5, r3
 800e79c:	81a5      	strh	r5, [r4, #12]
 800e79e:	e7cf      	b.n	800e740 <__smakebuf_r+0x18>

0800e7a0 <_fstat_r>:
 800e7a0:	b538      	push	{r3, r4, r5, lr}
 800e7a2:	4d07      	ldr	r5, [pc, #28]	@ (800e7c0 <_fstat_r+0x20>)
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	4604      	mov	r4, r0
 800e7a8:	4608      	mov	r0, r1
 800e7aa:	4611      	mov	r1, r2
 800e7ac:	602b      	str	r3, [r5, #0]
 800e7ae:	f000 f9e9 	bl	800eb84 <_fstat>
 800e7b2:	1c43      	adds	r3, r0, #1
 800e7b4:	d102      	bne.n	800e7bc <_fstat_r+0x1c>
 800e7b6:	682b      	ldr	r3, [r5, #0]
 800e7b8:	b103      	cbz	r3, 800e7bc <_fstat_r+0x1c>
 800e7ba:	6023      	str	r3, [r4, #0]
 800e7bc:	bd38      	pop	{r3, r4, r5, pc}
 800e7be:	bf00      	nop
 800e7c0:	240692e8 	.word	0x240692e8

0800e7c4 <_isatty_r>:
 800e7c4:	b538      	push	{r3, r4, r5, lr}
 800e7c6:	4d06      	ldr	r5, [pc, #24]	@ (800e7e0 <_isatty_r+0x1c>)
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	4604      	mov	r4, r0
 800e7cc:	4608      	mov	r0, r1
 800e7ce:	602b      	str	r3, [r5, #0]
 800e7d0:	f000 f9e8 	bl	800eba4 <_isatty>
 800e7d4:	1c43      	adds	r3, r0, #1
 800e7d6:	d102      	bne.n	800e7de <_isatty_r+0x1a>
 800e7d8:	682b      	ldr	r3, [r5, #0]
 800e7da:	b103      	cbz	r3, 800e7de <_isatty_r+0x1a>
 800e7dc:	6023      	str	r3, [r4, #0]
 800e7de:	bd38      	pop	{r3, r4, r5, pc}
 800e7e0:	240692e8 	.word	0x240692e8

0800e7e4 <checkint>:
 800e7e4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800e7e8:	2b7e      	cmp	r3, #126	@ 0x7e
 800e7ea:	d910      	bls.n	800e80e <checkint+0x2a>
 800e7ec:	2b96      	cmp	r3, #150	@ 0x96
 800e7ee:	d80c      	bhi.n	800e80a <checkint+0x26>
 800e7f0:	2201      	movs	r2, #1
 800e7f2:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800e7f6:	fa02 f303 	lsl.w	r3, r2, r3
 800e7fa:	1e5a      	subs	r2, r3, #1
 800e7fc:	4202      	tst	r2, r0
 800e7fe:	d106      	bne.n	800e80e <checkint+0x2a>
 800e800:	4203      	tst	r3, r0
 800e802:	bf0c      	ite	eq
 800e804:	2002      	moveq	r0, #2
 800e806:	2001      	movne	r0, #1
 800e808:	4770      	bx	lr
 800e80a:	2002      	movs	r0, #2
 800e80c:	4770      	bx	lr
 800e80e:	2000      	movs	r0, #0
 800e810:	4770      	bx	lr
 800e812:	0000      	movs	r0, r0
 800e814:	0000      	movs	r0, r0
	...

0800e818 <powf>:
 800e818:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e81a:	ee10 1a10 	vmov	r1, s0
 800e81e:	ee10 4a90 	vmov	r4, s1
 800e822:	f5a1 0200 	sub.w	r2, r1, #8388608	@ 0x800000
 800e826:	0063      	lsls	r3, r4, #1
 800e828:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800e82c:	eef0 7a40 	vmov.f32	s15, s0
 800e830:	eeb0 7a60 	vmov.f32	s14, s1
 800e834:	f103 30ff 	add.w	r0, r3, #4294967295
 800e838:	f06f 7280 	mvn.w	r2, #16777216	@ 0x1000000
 800e83c:	d252      	bcs.n	800e8e4 <powf+0xcc>
 800e83e:	4290      	cmp	r0, r2
 800e840:	d258      	bcs.n	800e8f4 <powf+0xdc>
 800e842:	2000      	movs	r0, #0
 800e844:	f101 4340 	add.w	r3, r1, #3221225472	@ 0xc0000000
 800e848:	f503 034d 	add.w	r3, r3, #13434880	@ 0xcd0000
 800e84c:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 800e850:	0ddb      	lsrs	r3, r3, #23
 800e852:	4a9d      	ldr	r2, [pc, #628]	@ (800eac8 <powf+0x2b0>)
 800e854:	eebf 2b00 	vmov.f64	d2, #240	@ 0xbf800000 -1.0
 800e858:	05db      	lsls	r3, r3, #23
 800e85a:	1ac9      	subs	r1, r1, r3
 800e85c:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 800e860:	ee07 1a90 	vmov	s15, r1
 800e864:	ed94 5b02 	vldr	d5, [r4, #8]
 800e868:	ed94 4b00 	vldr	d4, [r4]
 800e86c:	15db      	asrs	r3, r3, #23
 800e86e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800e872:	ee07 3a90 	vmov	s15, r3
 800e876:	eea4 2b06 	vfma.f64	d2, d4, d6
 800e87a:	ed92 1b42 	vldr	d1, [r2, #264]	@ 0x108
 800e87e:	ee22 4b02 	vmul.f64	d4, d2, d2
 800e882:	ee24 0b04 	vmul.f64	d0, d4, d4
 800e886:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800e88a:	ee36 6b05 	vadd.f64	d6, d6, d5
 800e88e:	ed92 5b40 	vldr	d5, [r2, #256]	@ 0x100
 800e892:	ed92 3b44 	vldr	d3, [r2, #272]	@ 0x110
 800e896:	eea2 1b05 	vfma.f64	d1, d2, d5
 800e89a:	ed92 5b46 	vldr	d5, [r2, #280]	@ 0x118
 800e89e:	eea2 5b03 	vfma.f64	d5, d2, d3
 800e8a2:	ed92 3b48 	vldr	d3, [r2, #288]	@ 0x120
 800e8a6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800e8aa:	eea2 6b03 	vfma.f64	d6, d2, d3
 800e8ae:	eea4 6b05 	vfma.f64	d6, d4, d5
 800e8b2:	eea1 6b00 	vfma.f64	d6, d1, d0
 800e8b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e8ba:	ee17 3a90 	vmov	r3, s15
 800e8be:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 800e8c2:	f248 03bf 	movw	r3, #32959	@ 0x80bf
 800e8c6:	429a      	cmp	r2, r3
 800e8c8:	f0c0 80b8 	bcc.w	800ea3c <powf+0x224>
 800e8cc:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 800eaa8 <powf+0x290>
 800e8d0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e8d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8d8:	dd79      	ble.n	800e9ce <powf+0x1b6>
 800e8da:	b003      	add	sp, #12
 800e8dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e8e0:	f000 b920 	b.w	800eb24 <__math_oflowf>
 800e8e4:	4290      	cmp	r0, r2
 800e8e6:	d330      	bcc.n	800e94a <powf+0x132>
 800e8e8:	b12b      	cbz	r3, 800e8f6 <powf+0xde>
 800e8ea:	0049      	lsls	r1, r1, #1
 800e8ec:	f1b1 4f7f 	cmp.w	r1, #4278190080	@ 0xff000000
 800e8f0:	d808      	bhi.n	800e904 <powf+0xec>
 800e8f2:	e015      	b.n	800e920 <powf+0x108>
 800e8f4:	b953      	cbnz	r3, 800e90c <powf+0xf4>
 800e8f6:	f481 0180 	eor.w	r1, r1, #4194304	@ 0x400000
 800e8fa:	0049      	lsls	r1, r1, #1
 800e8fc:	f511 0f00 	cmn.w	r1, #8388608	@ 0x800000
 800e900:	f240 80ca 	bls.w	800ea98 <powf+0x280>
 800e904:	ee37 0a87 	vadd.f32	s0, s15, s14
 800e908:	b003      	add	sp, #12
 800e90a:	bd30      	pop	{r4, r5, pc}
 800e90c:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 800e910:	d105      	bne.n	800e91e <powf+0x106>
 800e912:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800e916:	0064      	lsls	r4, r4, #1
 800e918:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800e91c:	e7f0      	b.n	800e900 <powf+0xe8>
 800e91e:	0049      	lsls	r1, r1, #1
 800e920:	f1b3 4f7f 	cmp.w	r3, #4278190080	@ 0xff000000
 800e924:	d1ee      	bne.n	800e904 <powf+0xec>
 800e926:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 800e92a:	f000 80b5 	beq.w	800ea98 <powf+0x280>
 800e92e:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 800e932:	ea6f 0404 	mvn.w	r4, r4
 800e936:	bf34      	ite	cc
 800e938:	2100      	movcc	r1, #0
 800e93a:	2101      	movcs	r1, #1
 800e93c:	0fe4      	lsrs	r4, r4, #31
 800e93e:	42a1      	cmp	r1, r4
 800e940:	f040 80ad 	bne.w	800ea9e <powf+0x286>
 800e944:	ee27 0a07 	vmul.f32	s0, s14, s14
 800e948:	e7de      	b.n	800e908 <powf+0xf0>
 800e94a:	004d      	lsls	r5, r1, #1
 800e94c:	1e6b      	subs	r3, r5, #1
 800e94e:	4293      	cmp	r3, r2
 800e950:	d31b      	bcc.n	800e98a <powf+0x172>
 800e952:	2900      	cmp	r1, #0
 800e954:	ee20 0a00 	vmul.f32	s0, s0, s0
 800e958:	da0e      	bge.n	800e978 <powf+0x160>
 800e95a:	4620      	mov	r0, r4
 800e95c:	f7ff ff42 	bl	800e7e4 <checkint>
 800e960:	2801      	cmp	r0, #1
 800e962:	d109      	bne.n	800e978 <powf+0x160>
 800e964:	eeb1 0a40 	vneg.f32	s0, s0
 800e968:	b945      	cbnz	r5, 800e97c <powf+0x164>
 800e96a:	2c00      	cmp	r4, #0
 800e96c:	dacc      	bge.n	800e908 <powf+0xf0>
 800e96e:	b003      	add	sp, #12
 800e970:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e974:	f000 b8dc 	b.w	800eb30 <__math_divzerof>
 800e978:	2000      	movs	r0, #0
 800e97a:	e7f5      	b.n	800e968 <powf+0x150>
 800e97c:	2c00      	cmp	r4, #0
 800e97e:	dac3      	bge.n	800e908 <powf+0xf0>
 800e980:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800e984:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800e988:	e7be      	b.n	800e908 <powf+0xf0>
 800e98a:	2900      	cmp	r1, #0
 800e98c:	da1d      	bge.n	800e9ca <powf+0x1b2>
 800e98e:	4620      	mov	r0, r4
 800e990:	f7ff ff28 	bl	800e7e4 <checkint>
 800e994:	b920      	cbnz	r0, 800e9a0 <powf+0x188>
 800e996:	b003      	add	sp, #12
 800e998:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e99c:	f000 b8da 	b.w	800eb54 <__math_invalidf>
 800e9a0:	1e43      	subs	r3, r0, #1
 800e9a2:	4258      	negs	r0, r3
 800e9a4:	4158      	adcs	r0, r3
 800e9a6:	0400      	lsls	r0, r0, #16
 800e9a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800e9ac:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800e9b0:	f4bf af48 	bcs.w	800e844 <powf+0x2c>
 800e9b4:	eddf 6a45 	vldr	s13, [pc, #276]	@ 800eacc <powf+0x2b4>
 800e9b8:	ee27 0aa6 	vmul.f32	s0, s15, s13
 800e9bc:	ee10 3a10 	vmov	r3, s0
 800e9c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e9c4:	f1a3 6138 	sub.w	r1, r3, #192937984	@ 0xb800000
 800e9c8:	e73c      	b.n	800e844 <powf+0x2c>
 800e9ca:	2000      	movs	r0, #0
 800e9cc:	e7ee      	b.n	800e9ac <powf+0x194>
 800e9ce:	ed9f 6b38 	vldr	d6, [pc, #224]	@ 800eab0 <powf+0x298>
 800e9d2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e9d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9da:	dd0f      	ble.n	800e9fc <powf+0x1e4>
 800e9dc:	f04f 534c 	mov.w	r3, #855638016	@ 0x33000000
 800e9e0:	b1c0      	cbz	r0, 800ea14 <powf+0x1fc>
 800e9e2:	9301      	str	r3, [sp, #4]
 800e9e4:	eddd 6a01 	vldr	s13, [sp, #4]
 800e9e8:	eebf 6a00 	vmov.f32	s12, #240	@ 0xbf800000 -1.0
 800e9ec:	ee76 6a66 	vsub.f32	s13, s12, s13
 800e9f0:	eef4 6a46 	vcmp.f32	s13, s12
 800e9f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9f8:	f47f af6f 	bne.w	800e8da <powf+0xc2>
 800e9fc:	ed9f 6b2e 	vldr	d6, [pc, #184]	@ 800eab8 <powf+0x2a0>
 800ea00:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ea04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea08:	d80c      	bhi.n	800ea24 <powf+0x20c>
 800ea0a:	b003      	add	sp, #12
 800ea0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ea10:	f000 b87c 	b.w	800eb0c <__math_uflowf>
 800ea14:	9300      	str	r3, [sp, #0]
 800ea16:	eddd 6a00 	vldr	s13, [sp]
 800ea1a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800ea1e:	ee76 6a86 	vadd.f32	s13, s13, s12
 800ea22:	e7e5      	b.n	800e9f0 <powf+0x1d8>
 800ea24:	ed9f 6b26 	vldr	d6, [pc, #152]	@ 800eac0 <powf+0x2a8>
 800ea28:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ea2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea30:	d504      	bpl.n	800ea3c <powf+0x224>
 800ea32:	b003      	add	sp, #12
 800ea34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ea38:	f000 b86e 	b.w	800eb18 <__math_may_uflowf>
 800ea3c:	4b24      	ldr	r3, [pc, #144]	@ (800ead0 <powf+0x2b8>)
 800ea3e:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800ea42:	ed93 5b40 	vldr	d5, [r3, #256]	@ 0x100
 800ea46:	ee37 6b05 	vadd.f64	d6, d7, d5
 800ea4a:	ee16 2a10 	vmov	r2, s12
 800ea4e:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ea52:	f002 011f 	and.w	r1, r2, #31
 800ea56:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ea5a:	ed93 5b42 	vldr	d5, [r3, #264]	@ 0x108
 800ea5e:	ee27 4b07 	vmul.f64	d4, d7, d7
 800ea62:	ed93 6b44 	vldr	d6, [r3, #272]	@ 0x110
 800ea66:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 800ea6a:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 800ea6e:	eea7 6b05 	vfma.f64	d6, d7, d5
 800ea72:	686d      	ldr	r5, [r5, #4]
 800ea74:	ed93 5b46 	vldr	d5, [r3, #280]	@ 0x118
 800ea78:	1880      	adds	r0, r0, r2
 800ea7a:	2100      	movs	r1, #0
 800ea7c:	190a      	adds	r2, r1, r4
 800ea7e:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 800ea82:	eea7 0b05 	vfma.f64	d0, d7, d5
 800ea86:	ec43 2b17 	vmov	d7, r2, r3
 800ea8a:	eea6 0b04 	vfma.f64	d0, d6, d4
 800ea8e:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ea92:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800ea96:	e737      	b.n	800e908 <powf+0xf0>
 800ea98:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ea9c:	e734      	b.n	800e908 <powf+0xf0>
 800ea9e:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 800ead4 <powf+0x2bc>
 800eaa2:	e731      	b.n	800e908 <powf+0xf0>
 800eaa4:	f3af 8000 	nop.w
 800eaa8:	ffd1d571 	.word	0xffd1d571
 800eaac:	405fffff 	.word	0x405fffff
 800eab0:	ffa3aae2 	.word	0xffa3aae2
 800eab4:	405fffff 	.word	0x405fffff
 800eab8:	00000000 	.word	0x00000000
 800eabc:	c062c000 	.word	0xc062c000
 800eac0:	00000000 	.word	0x00000000
 800eac4:	c062a000 	.word	0xc062a000
 800eac8:	0806d7c0 	.word	0x0806d7c0
 800eacc:	4b000000 	.word	0x4b000000
 800ead0:	0806d678 	.word	0x0806d678
 800ead4:	00000000 	.word	0x00000000

0800ead8 <with_errnof>:
 800ead8:	b510      	push	{r4, lr}
 800eada:	ed2d 8b02 	vpush	{d8}
 800eade:	eeb0 8a40 	vmov.f32	s16, s0
 800eae2:	4604      	mov	r4, r0
 800eae4:	f7fd ff7c 	bl	800c9e0 <__errno>
 800eae8:	eeb0 0a48 	vmov.f32	s0, s16
 800eaec:	ecbd 8b02 	vpop	{d8}
 800eaf0:	6004      	str	r4, [r0, #0]
 800eaf2:	bd10      	pop	{r4, pc}

0800eaf4 <xflowf>:
 800eaf4:	b130      	cbz	r0, 800eb04 <xflowf+0x10>
 800eaf6:	eef1 7a40 	vneg.f32	s15, s0
 800eafa:	ee27 0a80 	vmul.f32	s0, s15, s0
 800eafe:	2022      	movs	r0, #34	@ 0x22
 800eb00:	f7ff bfea 	b.w	800ead8 <with_errnof>
 800eb04:	eef0 7a40 	vmov.f32	s15, s0
 800eb08:	e7f7      	b.n	800eafa <xflowf+0x6>
	...

0800eb0c <__math_uflowf>:
 800eb0c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800eb14 <__math_uflowf+0x8>
 800eb10:	f7ff bff0 	b.w	800eaf4 <xflowf>
 800eb14:	10000000 	.word	0x10000000

0800eb18 <__math_may_uflowf>:
 800eb18:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800eb20 <__math_may_uflowf+0x8>
 800eb1c:	f7ff bfea 	b.w	800eaf4 <xflowf>
 800eb20:	1a200000 	.word	0x1a200000

0800eb24 <__math_oflowf>:
 800eb24:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800eb2c <__math_oflowf+0x8>
 800eb28:	f7ff bfe4 	b.w	800eaf4 <xflowf>
 800eb2c:	70000000 	.word	0x70000000

0800eb30 <__math_divzerof>:
 800eb30:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 800eb50 <__math_divzerof+0x20>
 800eb34:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800eb38:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800eb3c:	2800      	cmp	r0, #0
 800eb3e:	f04f 0022 	mov.w	r0, #34	@ 0x22
 800eb42:	fe47 7a87 	vseleq.f32	s15, s15, s14
 800eb46:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800eb4a:	f7ff bfc5 	b.w	800ead8 <with_errnof>
 800eb4e:	bf00      	nop
 800eb50:	00000000 	.word	0x00000000

0800eb54 <__math_invalidf>:
 800eb54:	eef0 7a40 	vmov.f32	s15, s0
 800eb58:	ee30 7a40 	vsub.f32	s14, s0, s0
 800eb5c:	eef4 7a67 	vcmp.f32	s15, s15
 800eb60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb64:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800eb68:	d602      	bvs.n	800eb70 <__math_invalidf+0x1c>
 800eb6a:	2021      	movs	r0, #33	@ 0x21
 800eb6c:	f7ff bfb4 	b.w	800ead8 <with_errnof>
 800eb70:	4770      	bx	lr
	...

0800eb74 <_close>:
 800eb74:	4b02      	ldr	r3, [pc, #8]	@ (800eb80 <_close+0xc>)
 800eb76:	2258      	movs	r2, #88	@ 0x58
 800eb78:	601a      	str	r2, [r3, #0]
 800eb7a:	f04f 30ff 	mov.w	r0, #4294967295
 800eb7e:	4770      	bx	lr
 800eb80:	240692e8 	.word	0x240692e8

0800eb84 <_fstat>:
 800eb84:	4b02      	ldr	r3, [pc, #8]	@ (800eb90 <_fstat+0xc>)
 800eb86:	2258      	movs	r2, #88	@ 0x58
 800eb88:	601a      	str	r2, [r3, #0]
 800eb8a:	f04f 30ff 	mov.w	r0, #4294967295
 800eb8e:	4770      	bx	lr
 800eb90:	240692e8 	.word	0x240692e8

0800eb94 <_getpid>:
 800eb94:	4b02      	ldr	r3, [pc, #8]	@ (800eba0 <_getpid+0xc>)
 800eb96:	2258      	movs	r2, #88	@ 0x58
 800eb98:	601a      	str	r2, [r3, #0]
 800eb9a:	f04f 30ff 	mov.w	r0, #4294967295
 800eb9e:	4770      	bx	lr
 800eba0:	240692e8 	.word	0x240692e8

0800eba4 <_isatty>:
 800eba4:	4b02      	ldr	r3, [pc, #8]	@ (800ebb0 <_isatty+0xc>)
 800eba6:	2258      	movs	r2, #88	@ 0x58
 800eba8:	601a      	str	r2, [r3, #0]
 800ebaa:	2000      	movs	r0, #0
 800ebac:	4770      	bx	lr
 800ebae:	bf00      	nop
 800ebb0:	240692e8 	.word	0x240692e8

0800ebb4 <_kill>:
 800ebb4:	4b02      	ldr	r3, [pc, #8]	@ (800ebc0 <_kill+0xc>)
 800ebb6:	2258      	movs	r2, #88	@ 0x58
 800ebb8:	601a      	str	r2, [r3, #0]
 800ebba:	f04f 30ff 	mov.w	r0, #4294967295
 800ebbe:	4770      	bx	lr
 800ebc0:	240692e8 	.word	0x240692e8

0800ebc4 <_lseek>:
 800ebc4:	4b02      	ldr	r3, [pc, #8]	@ (800ebd0 <_lseek+0xc>)
 800ebc6:	2258      	movs	r2, #88	@ 0x58
 800ebc8:	601a      	str	r2, [r3, #0]
 800ebca:	f04f 30ff 	mov.w	r0, #4294967295
 800ebce:	4770      	bx	lr
 800ebd0:	240692e8 	.word	0x240692e8

0800ebd4 <_read>:
 800ebd4:	4b02      	ldr	r3, [pc, #8]	@ (800ebe0 <_read+0xc>)
 800ebd6:	2258      	movs	r2, #88	@ 0x58
 800ebd8:	601a      	str	r2, [r3, #0]
 800ebda:	f04f 30ff 	mov.w	r0, #4294967295
 800ebde:	4770      	bx	lr
 800ebe0:	240692e8 	.word	0x240692e8

0800ebe4 <_write>:
 800ebe4:	4b02      	ldr	r3, [pc, #8]	@ (800ebf0 <_write+0xc>)
 800ebe6:	2258      	movs	r2, #88	@ 0x58
 800ebe8:	601a      	str	r2, [r3, #0]
 800ebea:	f04f 30ff 	mov.w	r0, #4294967295
 800ebee:	4770      	bx	lr
 800ebf0:	240692e8 	.word	0x240692e8

0800ebf4 <_exit>:
 800ebf4:	e7fe      	b.n	800ebf4 <_exit>
	...

0800ebf8 <_init>:
 800ebf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebfa:	bf00      	nop
 800ebfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ebfe:	bc08      	pop	{r3}
 800ec00:	469e      	mov	lr, r3
 800ec02:	4770      	bx	lr

0800ec04 <_fini>:
 800ec04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec06:	bf00      	nop
 800ec08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec0a:	bc08      	pop	{r3}
 800ec0c:	469e      	mov	lr, r3
 800ec0e:	4770      	bx	lr
