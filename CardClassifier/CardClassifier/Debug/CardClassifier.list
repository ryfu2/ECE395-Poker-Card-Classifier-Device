
CardClassifier.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009980  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08009c20  08009c20  0000ac20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009d90  08009d90  0000ad90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009d98  08009d98  0000ad98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009d9c  08009d9c  0000ad9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  08009da0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000037c  24000064  08009e04  0000b064  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240003e0  08009e04  0000b3e0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b064  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016fac  00000000  00000000  0000b092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002b9e  00000000  00000000  0002203e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000f48  00000000  00000000  00024be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000be1  00000000  00000000  00025b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003708a  00000000  00000000  00026709  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000180b4  00000000  00000000  0005d793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001594e2  00000000  00000000  00075847  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001ced29  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000448c  00000000  00000000  001ced6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000073  00000000  00000000  001d31f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000064 	.word	0x24000064
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009c08 	.word	0x08009c08

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000068 	.word	0x24000068
 80002dc:	08009c08 	.word	0x08009c08

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <ov7670_write>:
//DCMI_HandleTypeDef *sp_hdcmi;
//DMA_HandleTypeDef  *sp_hdma_dcmi;
I2C_HandleTypeDef  *sp_hi2c;
uint32_t    s_destAddressForContiuousMode;
uint32_t ov7670_write(uint8_t regAddr, uint8_t data)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b0a0      	sub	sp, #128	@ 0x80
 8000684:	af02      	add	r7, sp, #8
 8000686:	4603      	mov	r3, r0
 8000688:	460a      	mov	r2, r1
 800068a:	71fb      	strb	r3, [r7, #7]
 800068c:	4613      	mov	r3, r2
 800068e:	71bb      	strb	r3, [r7, #6]
  uint16_t SLAVE_ADDR = 0x42;
 8000690:	2342      	movs	r3, #66	@ 0x42
 8000692:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
  HAL_StatusTypeDef ret;
  uint8_t buffer[2] = {regAddr, data};
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
 800069c:	79bb      	ldrb	r3, [r7, #6]
 800069e:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
  ret = HAL_I2C_Master_Transmit(sp_hi2c, 0x42, &buffer, 2, HAL_MAX_DELAY);
 80006a2:	4b1e      	ldr	r3, [pc, #120]	@ (800071c <ov7670_write+0x9c>)
 80006a4:	6818      	ldr	r0, [r3, #0]
 80006a6:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80006aa:	f04f 33ff 	mov.w	r3, #4294967295
 80006ae:	9300      	str	r3, [sp, #0]
 80006b0:	2302      	movs	r3, #2
 80006b2:	2142      	movs	r1, #66	@ 0x42
 80006b4:	f004 f89c 	bl	80047f0 <HAL_I2C_Master_Transmit>
 80006b8:	4603      	mov	r3, r0
 80006ba:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
  char temp[100];
  sprintf(temp, "Write Status: %d\r\n", ret);
 80006be:	f897 2075 	ldrb.w	r2, [r7, #117]	@ 0x75
 80006c2:	f107 030c 	add.w	r3, r7, #12
 80006c6:	4916      	ldr	r1, [pc, #88]	@ (8000720 <ov7670_write+0xa0>)
 80006c8:	4618      	mov	r0, r3
 80006ca:	f008 fdfd 	bl	80092c8 <siprintf>
  HAL_UART_Transmit(&huart4,temp,strlen(temp),10);
 80006ce:	f107 030c 	add.w	r3, r7, #12
 80006d2:	4618      	mov	r0, r3
 80006d4:	f7ff fe04 	bl	80002e0 <strlen>
 80006d8:	4603      	mov	r3, r0
 80006da:	b29a      	uxth	r2, r3
 80006dc:	f107 010c 	add.w	r1, r7, #12
 80006e0:	230a      	movs	r3, #10
 80006e2:	4810      	ldr	r0, [pc, #64]	@ (8000724 <ov7670_write+0xa4>)
 80006e4:	f007 fcd6 	bl	8008094 <HAL_UART_Transmit>
  sprintf(temp, "Data: %x is now written into address: %x\r\n",data, regAddr);
 80006e8:	79ba      	ldrb	r2, [r7, #6]
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	f107 000c 	add.w	r0, r7, #12
 80006f0:	490d      	ldr	r1, [pc, #52]	@ (8000728 <ov7670_write+0xa8>)
 80006f2:	f008 fde9 	bl	80092c8 <siprintf>
  HAL_UART_Transmit(&huart4,temp,strlen(temp),10);
 80006f6:	f107 030c 	add.w	r3, r7, #12
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff fdf0 	bl	80002e0 <strlen>
 8000700:	4603      	mov	r3, r0
 8000702:	b29a      	uxth	r2, r3
 8000704:	f107 010c 	add.w	r1, r7, #12
 8000708:	230a      	movs	r3, #10
 800070a:	4806      	ldr	r0, [pc, #24]	@ (8000724 <ov7670_write+0xa4>)
 800070c:	f007 fcc2 	bl	8008094 <HAL_UART_Transmit>
  return ret;
 8000710:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
}
 8000714:	4618      	mov	r0, r3
 8000716:	3778      	adds	r7, #120	@ 0x78
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	24000080 	.word	0x24000080
 8000720:	08009c20 	.word	0x08009c20
 8000724:	240001fc 	.word	0x240001fc
 8000728:	08009c34 	.word	0x08009c34

0800072c <ov7670_read>:

uint32_t ov7670_read(uint8_t regAddr, uint8_t *data)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b09e      	sub	sp, #120	@ 0x78
 8000730:	af02      	add	r7, sp, #8
 8000732:	4603      	mov	r3, r0
 8000734:	6039      	str	r1, [r7, #0]
 8000736:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef ret;
  uint16_t SLAVE_ADDR = 0x42;
 8000738:	2342      	movs	r3, #66	@ 0x42
 800073a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  ret = HAL_I2C_Master_Transmit(sp_hi2c, 0x43, &regAddr, 1, HAL_MAX_DELAY);
 800073e:	4b30      	ldr	r3, [pc, #192]	@ (8000800 <ov7670_read+0xd4>)
 8000740:	6818      	ldr	r0, [r3, #0]
 8000742:	1dfa      	adds	r2, r7, #7
 8000744:	f04f 33ff 	mov.w	r3, #4294967295
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	2301      	movs	r3, #1
 800074c:	2143      	movs	r1, #67	@ 0x43
 800074e:	f004 f84f 	bl	80047f0 <HAL_I2C_Master_Transmit>
 8000752:	4603      	mov	r3, r0
 8000754:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
  char buffer [100];
  sprintf(buffer, "Read_Transmit Status: %d\r\n", ret);
 8000758:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800075c:	f107 0308 	add.w	r3, r7, #8
 8000760:	4928      	ldr	r1, [pc, #160]	@ (8000804 <ov7670_read+0xd8>)
 8000762:	4618      	mov	r0, r3
 8000764:	f008 fdb0 	bl	80092c8 <siprintf>
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8000768:	f107 0308 	add.w	r3, r7, #8
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff fdb7 	bl	80002e0 <strlen>
 8000772:	4603      	mov	r3, r0
 8000774:	b29a      	uxth	r2, r3
 8000776:	f107 0108 	add.w	r1, r7, #8
 800077a:	230a      	movs	r3, #10
 800077c:	4822      	ldr	r0, [pc, #136]	@ (8000808 <ov7670_read+0xdc>)
 800077e:	f007 fc89 	bl	8008094 <HAL_UART_Transmit>
  ret = HAL_I2C_Master_Receive(sp_hi2c, 0x43, data, 1, HAL_MAX_DELAY);
 8000782:	4b1f      	ldr	r3, [pc, #124]	@ (8000800 <ov7670_read+0xd4>)
 8000784:	6818      	ldr	r0, [r3, #0]
 8000786:	f04f 33ff 	mov.w	r3, #4294967295
 800078a:	9300      	str	r3, [sp, #0]
 800078c:	2301      	movs	r3, #1
 800078e:	683a      	ldr	r2, [r7, #0]
 8000790:	2143      	movs	r1, #67	@ 0x43
 8000792:	f004 f945 	bl	8004a20 <HAL_I2C_Master_Receive>
 8000796:	4603      	mov	r3, r0
 8000798:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
  sprintf(buffer, "Read_Receive Status: %d\r\n", ret);
 800079c:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80007a0:	f107 0308 	add.w	r3, r7, #8
 80007a4:	4919      	ldr	r1, [pc, #100]	@ (800080c <ov7670_read+0xe0>)
 80007a6:	4618      	mov	r0, r3
 80007a8:	f008 fd8e 	bl	80092c8 <siprintf>
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 80007ac:	f107 0308 	add.w	r3, r7, #8
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff fd95 	bl	80002e0 <strlen>
 80007b6:	4603      	mov	r3, r0
 80007b8:	b29a      	uxth	r2, r3
 80007ba:	f107 0108 	add.w	r1, r7, #8
 80007be:	230a      	movs	r3, #10
 80007c0:	4811      	ldr	r0, [pc, #68]	@ (8000808 <ov7670_read+0xdc>)
 80007c2:	f007 fc67 	bl	8008094 <HAL_UART_Transmit>
  sprintf(buffer, "Address: %x; Data: %x\r\n", regAddr, *data);
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	461a      	mov	r2, r3
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	f107 0008 	add.w	r0, r7, #8
 80007d2:	490f      	ldr	r1, [pc, #60]	@ (8000810 <ov7670_read+0xe4>)
 80007d4:	f008 fd78 	bl	80092c8 <siprintf>
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 80007d8:	f107 0308 	add.w	r3, r7, #8
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff fd7f 	bl	80002e0 <strlen>
 80007e2:	4603      	mov	r3, r0
 80007e4:	b29a      	uxth	r2, r3
 80007e6:	f107 0108 	add.w	r1, r7, #8
 80007ea:	230a      	movs	r3, #10
 80007ec:	4806      	ldr	r0, [pc, #24]	@ (8000808 <ov7670_read+0xdc>)
 80007ee:	f007 fc51 	bl	8008094 <HAL_UART_Transmit>
  return ret;
 80007f2:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3770      	adds	r7, #112	@ 0x70
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	24000080 	.word	0x24000080
 8000804:	08009c60 	.word	0x08009c60
 8000808:	240001fc 	.word	0x240001fc
 800080c:	08009c7c 	.word	0x08009c7c
 8000810:	08009c98 	.word	0x08009c98

08000814 <ov7670_init>:

uint32_t ov7670_init(I2C_HandleTypeDef *p_hi2c)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b09c      	sub	sp, #112	@ 0x70
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
//  sp_hdcmi     = p_hdcmi;
//  sp_hdma_dcmi = p_hdma_dcmi;
  sp_hi2c      = p_hi2c;
 800081c:	4a1e      	ldr	r2, [pc, #120]	@ (8000898 <ov7670_init+0x84>)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	6013      	str	r3, [r2, #0]
 // s_destAddressForContiuousMode = 0;

  HAL_GPIO_WritePin(CAM_RST_GPIO_Port, CAM_RST_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	2120      	movs	r1, #32
 8000826:	481d      	ldr	r0, [pc, #116]	@ (800089c <ov7670_init+0x88>)
 8000828:	f003 ff2c 	bl	8004684 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800082c:	2064      	movs	r0, #100	@ 0x64
 800082e:	f000 ffe3 	bl	80017f8 <HAL_Delay>
  HAL_GPIO_WritePin(CAM_RST_GPIO_Port, CAM_RST_Pin, GPIO_PIN_SET);
 8000832:	2201      	movs	r2, #1
 8000834:	2120      	movs	r1, #32
 8000836:	4819      	ldr	r0, [pc, #100]	@ (800089c <ov7670_init+0x88>)
 8000838:	f003 ff24 	bl	8004684 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800083c:	2064      	movs	r0, #100	@ 0x64
 800083e:	f000 ffdb 	bl	80017f8 <HAL_Delay>
  char temp[100];
  sprintf(temp, "Initializing OV7670...\r\n");
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	4916      	ldr	r1, [pc, #88]	@ (80008a0 <ov7670_init+0x8c>)
 8000848:	4618      	mov	r0, r3
 800084a:	f008 fd3d 	bl	80092c8 <siprintf>
  ov7670_write(0x12, 0x80);  // RESET
 800084e:	2180      	movs	r1, #128	@ 0x80
 8000850:	2012      	movs	r0, #18
 8000852:	f7ff ff15 	bl	8000680 <ov7670_write>
  HAL_Delay(100);
 8000856:	2064      	movs	r0, #100	@ 0x64
 8000858:	f000 ffce 	bl	80017f8 <HAL_Delay>
  HAL_UART_Transmit(&huart4,temp,strlen(temp),10);
 800085c:	f107 030c 	add.w	r3, r7, #12
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff fd3d 	bl	80002e0 <strlen>
 8000866:	4603      	mov	r3, r0
 8000868:	b29a      	uxth	r2, r3
 800086a:	f107 010c 	add.w	r1, r7, #12
 800086e:	230a      	movs	r3, #10
 8000870:	480c      	ldr	r0, [pc, #48]	@ (80008a4 <ov7670_init+0x90>)
 8000872:	f007 fc0f 	bl	8008094 <HAL_UART_Transmit>
  HAL_Delay(100);
 8000876:	2064      	movs	r0, #100	@ 0x64
 8000878:	f000 ffbe 	bl	80017f8 <HAL_Delay>
  uint8_t buffer[4];
  ov7670_read(0x0F, buffer);
 800087c:	f107 0308 	add.w	r3, r7, #8
 8000880:	4619      	mov	r1, r3
 8000882:	200f      	movs	r0, #15
 8000884:	f7ff ff52 	bl	800072c <ov7670_read>
  HAL_Delay(100);
 8000888:	2064      	movs	r0, #100	@ 0x64
 800088a:	f000 ffb5 	bl	80017f8 <HAL_Delay>


  return 1;
 800088e:	2301      	movs	r3, #1
}
 8000890:	4618      	mov	r0, r3
 8000892:	3770      	adds	r7, #112	@ 0x70
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	24000080 	.word	0x24000080
 800089c:	58020800 	.word	0x58020800
 80008a0:	08009cb0 	.word	0x08009cb0
 80008a4:	240001fc 	.word	0x240001fc

080008a8 <HAL_DCMI_FrameEventCallback>:
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
  return 0;
}

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  if(s_dstAddress != 0) {
 80008b0:	4b09      	ldr	r3, [pc, #36]	@ (80008d8 <HAL_DCMI_FrameEventCallback+0x30>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d00b      	beq.n	80008d0 <HAL_DCMI_FrameEventCallback+0x28>
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, s_dstAddress, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT / 2);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	3328      	adds	r3, #40	@ 0x28
 80008c2:	4619      	mov	r1, r3
 80008c4:	4b04      	ldr	r3, [pc, #16]	@ (80008d8 <HAL_DCMI_FrameEventCallback+0x30>)
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	f44f 5346 	mov.w	r3, #12672	@ 0x3180
 80008cc:	f001 fd68 	bl	80023a0 <HAL_DMA_Start_IT>
  }
}
 80008d0:	bf00      	nop
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	24000084 	.word	0x24000084

080008dc <lcd_send_cmd>:
#include "lcd.h"
#include "main.h"
I2C_HandleTypeDef  *lcd_sp_hi2c;
uint16_t SLAVE_ADDRESS_LCD = 0x4E;
void lcd_send_cmd (char cmd)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af02      	add	r7, sp, #8
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	f023 030f 	bic.w	r3, r3, #15
 80008ec:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	011b      	lsls	r3, r3, #4
 80008f2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80008f4:	7bfb      	ldrb	r3, [r7, #15]
 80008f6:	f043 030c 	orr.w	r3, r3, #12
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80008fe:	7bfb      	ldrb	r3, [r7, #15]
 8000900:	f043 0308 	orr.w	r3, r3, #8
 8000904:	b2db      	uxtb	r3, r3
 8000906:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000908:	7bbb      	ldrb	r3, [r7, #14]
 800090a:	f043 030c 	orr.w	r3, r3, #12
 800090e:	b2db      	uxtb	r3, r3
 8000910:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000912:	7bbb      	ldrb	r3, [r7, #14]
 8000914:	f043 0308 	orr.w	r3, r3, #8
 8000918:	b2db      	uxtb	r3, r3
 800091a:	72fb      	strb	r3, [r7, #11]
	uint16_t ret = HAL_I2C_Master_Transmit (lcd_sp_hi2c, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800091c:	4b08      	ldr	r3, [pc, #32]	@ (8000940 <lcd_send_cmd+0x64>)
 800091e:	6818      	ldr	r0, [r3, #0]
 8000920:	4b08      	ldr	r3, [pc, #32]	@ (8000944 <lcd_send_cmd+0x68>)
 8000922:	8819      	ldrh	r1, [r3, #0]
 8000924:	f107 0208 	add.w	r2, r7, #8
 8000928:	2364      	movs	r3, #100	@ 0x64
 800092a:	9300      	str	r3, [sp, #0]
 800092c:	2304      	movs	r3, #4
 800092e:	f003 ff5f 	bl	80047f0 <HAL_I2C_Master_Transmit>
 8000932:	4603      	mov	r3, r0
 8000934:	81bb      	strh	r3, [r7, #12]
}
 8000936:	bf00      	nop
 8000938:	3710      	adds	r7, #16
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	24000088 	.word	0x24000088
 8000944:	24000000 	.word	0x24000000

08000948 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af02      	add	r7, sp, #8
 800094e:	4603      	mov	r3, r0
 8000950:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	f023 030f 	bic.w	r3, r3, #15
 8000958:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	011b      	lsls	r3, r3, #4
 800095e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8000960:	7bfb      	ldrb	r3, [r7, #15]
 8000962:	f043 030d 	orr.w	r3, r3, #13
 8000966:	b2db      	uxtb	r3, r3
 8000968:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 800096a:	7bfb      	ldrb	r3, [r7, #15]
 800096c:	f043 0309 	orr.w	r3, r3, #9
 8000970:	b2db      	uxtb	r3, r3
 8000972:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8000974:	7bbb      	ldrb	r3, [r7, #14]
 8000976:	f043 030d 	orr.w	r3, r3, #13
 800097a:	b2db      	uxtb	r3, r3
 800097c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 800097e:	7bbb      	ldrb	r3, [r7, #14]
 8000980:	f043 0309 	orr.w	r3, r3, #9
 8000984:	b2db      	uxtb	r3, r3
 8000986:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (lcd_sp_hi2c, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000988:	4b07      	ldr	r3, [pc, #28]	@ (80009a8 <lcd_send_data+0x60>)
 800098a:	6818      	ldr	r0, [r3, #0]
 800098c:	4b07      	ldr	r3, [pc, #28]	@ (80009ac <lcd_send_data+0x64>)
 800098e:	8819      	ldrh	r1, [r3, #0]
 8000990:	f107 0208 	add.w	r2, r7, #8
 8000994:	2364      	movs	r3, #100	@ 0x64
 8000996:	9300      	str	r3, [sp, #0]
 8000998:	2304      	movs	r3, #4
 800099a:	f003 ff29 	bl	80047f0 <HAL_I2C_Master_Transmit>
}
 800099e:	bf00      	nop
 80009a0:	3710      	adds	r7, #16
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	24000088 	.word	0x24000088
 80009ac:	24000000 	.word	0x24000000

080009b0 <lcd_send_string>:
void lcd_send_string (char *str)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	while (*str) {
 80009b8:	e009      	b.n	80009ce <lcd_send_string+0x1e>
		HAL_Delay(10);
 80009ba:	200a      	movs	r0, #10
 80009bc:	f000 ff1c 	bl	80017f8 <HAL_Delay>
		lcd_send_data (*str++);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	1c5a      	adds	r2, r3, #1
 80009c4:	607a      	str	r2, [r7, #4]
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff ffbd 	bl	8000948 <lcd_send_data>
	while (*str) {
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d1f1      	bne.n	80009ba <lcd_send_string+0xa>
	}
}
 80009d6:	bf00      	nop
 80009d8:	bf00      	nop
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <lcd_init>:

void lcd_init (I2C_HandleTypeDef* p_hi2c)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	lcd_sp_hi2c = p_hi2c;
 80009e8:	4a21      	ldr	r2, [pc, #132]	@ (8000a70 <lcd_init+0x90>)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6013      	str	r3, [r2, #0]
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80009ee:	2032      	movs	r0, #50	@ 0x32
 80009f0:	f000 ff02 	bl	80017f8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80009f4:	2030      	movs	r0, #48	@ 0x30
 80009f6:	f7ff ff71 	bl	80008dc <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80009fa:	2005      	movs	r0, #5
 80009fc:	f000 fefc 	bl	80017f8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000a00:	2030      	movs	r0, #48	@ 0x30
 8000a02:	f7ff ff6b 	bl	80008dc <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000a06:	2001      	movs	r0, #1
 8000a08:	f000 fef6 	bl	80017f8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000a0c:	2030      	movs	r0, #48	@ 0x30
 8000a0e:	f7ff ff65 	bl	80008dc <lcd_send_cmd>
	HAL_Delay(10);
 8000a12:	200a      	movs	r0, #10
 8000a14:	f000 fef0 	bl	80017f8 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000a18:	2020      	movs	r0, #32
 8000a1a:	f7ff ff5f 	bl	80008dc <lcd_send_cmd>
	HAL_Delay(10);
 8000a1e:	200a      	movs	r0, #10
 8000a20:	f000 feea 	bl	80017f8 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000a24:	2028      	movs	r0, #40	@ 0x28
 8000a26:	f7ff ff59 	bl	80008dc <lcd_send_cmd>
	HAL_Delay(1);
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	f000 fee4 	bl	80017f8 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000a30:	2008      	movs	r0, #8
 8000a32:	f7ff ff53 	bl	80008dc <lcd_send_cmd>
	HAL_Delay(1);
 8000a36:	2001      	movs	r0, #1
 8000a38:	f000 fede 	bl	80017f8 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	f7ff ff4d 	bl	80008dc <lcd_send_cmd>
	HAL_Delay(1);
 8000a42:	2001      	movs	r0, #1
 8000a44:	f000 fed8 	bl	80017f8 <HAL_Delay>
	HAL_Delay(1);
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f000 fed5 	bl	80017f8 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000a4e:	2006      	movs	r0, #6
 8000a50:	f7ff ff44 	bl	80008dc <lcd_send_cmd>
	HAL_Delay(1);
 8000a54:	2001      	movs	r0, #1
 8000a56:	f000 fecf 	bl	80017f8 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000a5a:	200c      	movs	r0, #12
 8000a5c:	f7ff ff3e 	bl	80008dc <lcd_send_cmd>
	lcd_send_string("");
 8000a60:	4804      	ldr	r0, [pc, #16]	@ (8000a74 <lcd_init+0x94>)
 8000a62:	f7ff ffa5 	bl	80009b0 <lcd_send_string>
}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	24000088 	.word	0x24000088
 8000a74:	08009ce0 	.word	0x08009ce0

08000a78 <lcd_clear>:

void lcd_clear() {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 8000a7c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a80:	f000 feba 	bl	80017f8 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000a84:	2001      	movs	r0, #1
 8000a86:	f7ff ff29 	bl	80008dc <lcd_send_cmd>
	HAL_Delay(1);
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	f000 feb4 	bl	80017f8 <HAL_Delay>
	lcd_send_string("");
 8000a90:	4804      	ldr	r0, [pc, #16]	@ (8000aa4 <lcd_clear+0x2c>)
 8000a92:	f7ff ff8d 	bl	80009b0 <lcd_send_string>
	HAL_Delay(500);
 8000a96:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a9a:	f000 fead 	bl	80017f8 <HAL_Delay>
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	08009ce0 	.word	0x08009ce0

08000aa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b0b2      	sub	sp, #200	@ 0xc8
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aae:	f000 fe11 	bl	80016d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ab2:	f000 f841 	bl	8000b38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ab6:	f000 f9cf 	bl	8000e58 <MX_GPIO_Init>
  MX_DMA_Init();
 8000aba:	f000 f9ad 	bl	8000e18 <MX_DMA_Init>
  MX_DCMI_Init();
 8000abe:	f000 f8ab 	bl	8000c18 <MX_DCMI_Init>
  MX_I2C1_Init();
 8000ac2:	f000 f8dd 	bl	8000c80 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000ac6:	f000 f91b 	bl	8000d00 <MX_I2C2_Init>
  MX_UART4_Init();
 8000aca:	f000 f959 	bl	8000d80 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  ///// START OF LCD //////

  lcd_init(&hi2c2);
 8000ace:	4815      	ldr	r0, [pc, #84]	@ (8000b24 <main+0x7c>)
 8000ad0:	f7ff ff86 	bl	80009e0 <lcd_init>
  lcd_clear();
 8000ad4:	f7ff ffd0 	bl	8000a78 <lcd_clear>
  lcd_send_string("Initializing...");
 8000ad8:	4813      	ldr	r0, [pc, #76]	@ (8000b28 <main+0x80>)
 8000ada:	f7ff ff69 	bl	80009b0 <lcd_send_string>
  lcd_clear();
 8000ade:	f7ff ffcb 	bl	8000a78 <lcd_clear>
  lcd_send_string("81 loaded to x15");
 8000ae2:	4812      	ldr	r0, [pc, #72]	@ (8000b2c <main+0x84>)
 8000ae4:	f7ff ff64 	bl	80009b0 <lcd_send_string>
  ///// END OF LCD /////

  ///// START OF OV7670 CAMERA /////
  ov7670_init(&hi2c1);
 8000ae8:	4811      	ldr	r0, [pc, #68]	@ (8000b30 <main+0x88>)
 8000aea:	f7ff fe93 	bl	8000814 <ov7670_init>

  // TEST WRITING 0x81 to 0x15
  HAL_Delay(100);
 8000aee:	2064      	movs	r0, #100	@ 0x64
 8000af0:	f000 fe82 	bl	80017f8 <HAL_Delay>
  ov7670_write(0x15,0x81);
 8000af4:	2181      	movs	r1, #129	@ 0x81
 8000af6:	2015      	movs	r0, #21
 8000af8:	f7ff fdc2 	bl	8000680 <ov7670_write>

  uint8_t data[100];
  char buffer [100];

  ov7670_read(0x15,data);
 8000afc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b00:	4619      	mov	r1, r3
 8000b02:	2015      	movs	r0, #21
 8000b04:	f7ff fe12 	bl	800072c <ov7670_read>
  sprintf(buffer, "Addr:0x15; D:%x;", *data);
 8000b08:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	463b      	mov	r3, r7
 8000b10:	4908      	ldr	r1, [pc, #32]	@ (8000b34 <main+0x8c>)
 8000b12:	4618      	mov	r0, r3
 8000b14:	f008 fbd8 	bl	80092c8 <siprintf>

  // RESET CAMERA
  ov7670_init(&hi2c1);
 8000b18:	4805      	ldr	r0, [pc, #20]	@ (8000b30 <main+0x88>)
 8000b1a:	f7ff fe7b 	bl	8000814 <ov7670_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b1e:	bf00      	nop
 8000b20:	e7fd      	b.n	8000b1e <main+0x76>
 8000b22:	bf00      	nop
 8000b24:	240001a8 	.word	0x240001a8
 8000b28:	08009ce4 	.word	0x08009ce4
 8000b2c:	08009cf4 	.word	0x08009cf4
 8000b30:	24000154 	.word	0x24000154
 8000b34:	08009d08 	.word	0x08009d08

08000b38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b09c      	sub	sp, #112	@ 0x70
 8000b3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b42:	224c      	movs	r2, #76	@ 0x4c
 8000b44:	2100      	movs	r1, #0
 8000b46:	4618      	mov	r0, r3
 8000b48:	f008 fbde 	bl	8009308 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	2220      	movs	r2, #32
 8000b50:	2100      	movs	r1, #0
 8000b52:	4618      	mov	r0, r3
 8000b54:	f008 fbd8 	bl	8009308 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b58:	2002      	movs	r0, #2
 8000b5a:	f004 fb95 	bl	8005288 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b5e:	2300      	movs	r3, #0
 8000b60:	603b      	str	r3, [r7, #0]
 8000b62:	4b2b      	ldr	r3, [pc, #172]	@ (8000c10 <SystemClock_Config+0xd8>)
 8000b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b66:	4a2a      	ldr	r2, [pc, #168]	@ (8000c10 <SystemClock_Config+0xd8>)
 8000b68:	f023 0301 	bic.w	r3, r3, #1
 8000b6c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000b6e:	4b28      	ldr	r3, [pc, #160]	@ (8000c10 <SystemClock_Config+0xd8>)
 8000b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	603b      	str	r3, [r7, #0]
 8000b78:	4b26      	ldr	r3, [pc, #152]	@ (8000c14 <SystemClock_Config+0xdc>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b80:	4a24      	ldr	r2, [pc, #144]	@ (8000c14 <SystemClock_Config+0xdc>)
 8000b82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b86:	6193      	str	r3, [r2, #24]
 8000b88:	4b22      	ldr	r3, [pc, #136]	@ (8000c14 <SystemClock_Config+0xdc>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b90:	603b      	str	r3, [r7, #0]
 8000b92:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b94:	bf00      	nop
 8000b96:	4b1f      	ldr	r3, [pc, #124]	@ (8000c14 <SystemClock_Config+0xdc>)
 8000b98:	699b      	ldr	r3, [r3, #24]
 8000b9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ba2:	d1f8      	bne.n	8000b96 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bac:	2340      	movs	r3, #64	@ 0x40
 8000bae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f004 fb9f 	bl	80052fc <HAL_RCC_OscConfig>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000bc4:	f000 fa0e 	bl	8000fe4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc8:	233f      	movs	r3, #63	@ 0x3f
 8000bca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000bdc:	2340      	movs	r3, #64	@ 0x40
 8000bde:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000be4:	2300      	movs	r3, #0
 8000be6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	2101      	movs	r1, #1
 8000bec:	4618      	mov	r0, r3
 8000bee:	f004 ffdf 	bl	8005bb0 <HAL_RCC_ClockConfig>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000bf8:	f000 f9f4 	bl	8000fe4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_3);
 8000bfc:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000c00:	2100      	movs	r1, #0
 8000c02:	2000      	movs	r0, #0
 8000c04:	f005 f98a 	bl	8005f1c <HAL_RCC_MCOConfig>
}
 8000c08:	bf00      	nop
 8000c0a:	3770      	adds	r7, #112	@ 0x70
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	58000400 	.word	0x58000400
 8000c14:	58024800 	.word	0x58024800

08000c18 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000c1c:	4b16      	ldr	r3, [pc, #88]	@ (8000c78 <MX_DCMI_Init+0x60>)
 8000c1e:	4a17      	ldr	r2, [pc, #92]	@ (8000c7c <MX_DCMI_Init+0x64>)
 8000c20:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000c22:	4b15      	ldr	r3, [pc, #84]	@ (8000c78 <MX_DCMI_Init+0x60>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000c28:	4b13      	ldr	r3, [pc, #76]	@ (8000c78 <MX_DCMI_Init+0x60>)
 8000c2a:	2220      	movs	r2, #32
 8000c2c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000c2e:	4b12      	ldr	r3, [pc, #72]	@ (8000c78 <MX_DCMI_Init+0x60>)
 8000c30:	2280      	movs	r2, #128	@ 0x80
 8000c32:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000c34:	4b10      	ldr	r3, [pc, #64]	@ (8000c78 <MX_DCMI_Init+0x60>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c78 <MX_DCMI_Init+0x60>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000c40:	4b0d      	ldr	r3, [pc, #52]	@ (8000c78 <MX_DCMI_Init+0x60>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000c46:	4b0c      	ldr	r3, [pc, #48]	@ (8000c78 <MX_DCMI_Init+0x60>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c78 <MX_DCMI_Init+0x60>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000c52:	4b09      	ldr	r3, [pc, #36]	@ (8000c78 <MX_DCMI_Init+0x60>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000c58:	4b07      	ldr	r3, [pc, #28]	@ (8000c78 <MX_DCMI_Init+0x60>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000c5e:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <MX_DCMI_Init+0x60>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000c64:	4804      	ldr	r0, [pc, #16]	@ (8000c78 <MX_DCMI_Init+0x60>)
 8000c66:	f000 ff07 	bl	8001a78 <HAL_DCMI_Init>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000c70:	f000 f9b8 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	2400008c 	.word	0x2400008c
 8000c7c:	48020000 	.word	0x48020000

08000c80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c84:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf4 <MX_I2C1_Init+0x74>)
 8000c86:	4a1c      	ldr	r2, [pc, #112]	@ (8000cf8 <MX_I2C1_Init+0x78>)
 8000c88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000c8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf4 <MX_I2C1_Init+0x74>)
 8000c8c:	4a1b      	ldr	r2, [pc, #108]	@ (8000cfc <MX_I2C1_Init+0x7c>)
 8000c8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c90:	4b18      	ldr	r3, [pc, #96]	@ (8000cf4 <MX_I2C1_Init+0x74>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c96:	4b17      	ldr	r3, [pc, #92]	@ (8000cf4 <MX_I2C1_Init+0x74>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c9c:	4b15      	ldr	r3, [pc, #84]	@ (8000cf4 <MX_I2C1_Init+0x74>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ca2:	4b14      	ldr	r3, [pc, #80]	@ (8000cf4 <MX_I2C1_Init+0x74>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ca8:	4b12      	ldr	r3, [pc, #72]	@ (8000cf4 <MX_I2C1_Init+0x74>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cae:	4b11      	ldr	r3, [pc, #68]	@ (8000cf4 <MX_I2C1_Init+0x74>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf4 <MX_I2C1_Init+0x74>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cba:	480e      	ldr	r0, [pc, #56]	@ (8000cf4 <MX_I2C1_Init+0x74>)
 8000cbc:	f003 fcfc 	bl	80046b8 <HAL_I2C_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cc6:	f000 f98d 	bl	8000fe4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4809      	ldr	r0, [pc, #36]	@ (8000cf4 <MX_I2C1_Init+0x74>)
 8000cce:	f004 fa43 	bl	8005158 <HAL_I2CEx_ConfigAnalogFilter>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000cd8:	f000 f984 	bl	8000fe4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4805      	ldr	r0, [pc, #20]	@ (8000cf4 <MX_I2C1_Init+0x74>)
 8000ce0:	f004 fa85 	bl	80051ee <HAL_I2CEx_ConfigDigitalFilter>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000cea:	f000 f97b 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	24000154 	.word	0x24000154
 8000cf8:	40005400 	.word	0x40005400
 8000cfc:	00707cbb 	.word	0x00707cbb

08000d00 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d04:	4b1b      	ldr	r3, [pc, #108]	@ (8000d74 <MX_I2C2_Init+0x74>)
 8000d06:	4a1c      	ldr	r2, [pc, #112]	@ (8000d78 <MX_I2C2_Init+0x78>)
 8000d08:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8000d0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d74 <MX_I2C2_Init+0x74>)
 8000d0c:	4a1b      	ldr	r2, [pc, #108]	@ (8000d7c <MX_I2C2_Init+0x7c>)
 8000d0e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000d10:	4b18      	ldr	r3, [pc, #96]	@ (8000d74 <MX_I2C2_Init+0x74>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d16:	4b17      	ldr	r3, [pc, #92]	@ (8000d74 <MX_I2C2_Init+0x74>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d1c:	4b15      	ldr	r3, [pc, #84]	@ (8000d74 <MX_I2C2_Init+0x74>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d22:	4b14      	ldr	r3, [pc, #80]	@ (8000d74 <MX_I2C2_Init+0x74>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d28:	4b12      	ldr	r3, [pc, #72]	@ (8000d74 <MX_I2C2_Init+0x74>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d2e:	4b11      	ldr	r3, [pc, #68]	@ (8000d74 <MX_I2C2_Init+0x74>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d34:	4b0f      	ldr	r3, [pc, #60]	@ (8000d74 <MX_I2C2_Init+0x74>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d3a:	480e      	ldr	r0, [pc, #56]	@ (8000d74 <MX_I2C2_Init+0x74>)
 8000d3c:	f003 fcbc 	bl	80046b8 <HAL_I2C_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000d46:	f000 f94d 	bl	8000fe4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4809      	ldr	r0, [pc, #36]	@ (8000d74 <MX_I2C2_Init+0x74>)
 8000d4e:	f004 fa03 	bl	8005158 <HAL_I2CEx_ConfigAnalogFilter>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000d58:	f000 f944 	bl	8000fe4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4805      	ldr	r0, [pc, #20]	@ (8000d74 <MX_I2C2_Init+0x74>)
 8000d60:	f004 fa45 	bl	80051ee <HAL_I2CEx_ConfigDigitalFilter>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000d6a:	f000 f93b 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	240001a8 	.word	0x240001a8
 8000d78:	40005800 	.word	0x40005800
 8000d7c:	00707cbb 	.word	0x00707cbb

08000d80 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000d84:	4b22      	ldr	r3, [pc, #136]	@ (8000e10 <MX_UART4_Init+0x90>)
 8000d86:	4a23      	ldr	r2, [pc, #140]	@ (8000e14 <MX_UART4_Init+0x94>)
 8000d88:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000d8a:	4b21      	ldr	r3, [pc, #132]	@ (8000e10 <MX_UART4_Init+0x90>)
 8000d8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d90:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000d92:	4b1f      	ldr	r3, [pc, #124]	@ (8000e10 <MX_UART4_Init+0x90>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000d98:	4b1d      	ldr	r3, [pc, #116]	@ (8000e10 <MX_UART4_Init+0x90>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000d9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000e10 <MX_UART4_Init+0x90>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000da4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e10 <MX_UART4_Init+0x90>)
 8000da6:	220c      	movs	r2, #12
 8000da8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000daa:	4b19      	ldr	r3, [pc, #100]	@ (8000e10 <MX_UART4_Init+0x90>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db0:	4b17      	ldr	r3, [pc, #92]	@ (8000e10 <MX_UART4_Init+0x90>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000db6:	4b16      	ldr	r3, [pc, #88]	@ (8000e10 <MX_UART4_Init+0x90>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dbc:	4b14      	ldr	r3, [pc, #80]	@ (8000e10 <MX_UART4_Init+0x90>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dc2:	4b13      	ldr	r3, [pc, #76]	@ (8000e10 <MX_UART4_Init+0x90>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000dc8:	4811      	ldr	r0, [pc, #68]	@ (8000e10 <MX_UART4_Init+0x90>)
 8000dca:	f007 f913 	bl	8007ff4 <HAL_UART_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000dd4:	f000 f906 	bl	8000fe4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dd8:	2100      	movs	r1, #0
 8000dda:	480d      	ldr	r0, [pc, #52]	@ (8000e10 <MX_UART4_Init+0x90>)
 8000ddc:	f008 f9a9 	bl	8009132 <HAL_UARTEx_SetTxFifoThreshold>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000de6:	f000 f8fd 	bl	8000fe4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dea:	2100      	movs	r1, #0
 8000dec:	4808      	ldr	r0, [pc, #32]	@ (8000e10 <MX_UART4_Init+0x90>)
 8000dee:	f008 f9de 	bl	80091ae <HAL_UARTEx_SetRxFifoThreshold>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000df8:	f000 f8f4 	bl	8000fe4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000dfc:	4804      	ldr	r0, [pc, #16]	@ (8000e10 <MX_UART4_Init+0x90>)
 8000dfe:	f008 f95f 	bl	80090c0 <HAL_UARTEx_DisableFifoMode>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000e08:	f000 f8ec 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	240001fc 	.word	0x240001fc
 8000e14:	40004c00 	.word	0x40004c00

08000e18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e54 <MX_DMA_Init+0x3c>)
 8000e20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e24:	4a0b      	ldr	r2, [pc, #44]	@ (8000e54 <MX_DMA_Init+0x3c>)
 8000e26:	f043 0301 	orr.w	r3, r3, #1
 8000e2a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e2e:	4b09      	ldr	r3, [pc, #36]	@ (8000e54 <MX_DMA_Init+0x3c>)
 8000e30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2100      	movs	r1, #0
 8000e40:	200b      	movs	r0, #11
 8000e42:	f000 fde4 	bl	8001a0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e46:	200b      	movs	r0, #11
 8000e48:	f000 fdfb 	bl	8001a42 <HAL_NVIC_EnableIRQ>

}
 8000e4c:	bf00      	nop
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	58024400 	.word	0x58024400

08000e58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08a      	sub	sp, #40	@ 0x28
 8000e5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	60da      	str	r2, [r3, #12]
 8000e6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e6e:	4b57      	ldr	r3, [pc, #348]	@ (8000fcc <MX_GPIO_Init+0x174>)
 8000e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e74:	4a55      	ldr	r2, [pc, #340]	@ (8000fcc <MX_GPIO_Init+0x174>)
 8000e76:	f043 0310 	orr.w	r3, r3, #16
 8000e7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e7e:	4b53      	ldr	r3, [pc, #332]	@ (8000fcc <MX_GPIO_Init+0x174>)
 8000e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e84:	f003 0310 	and.w	r3, r3, #16
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8c:	4b4f      	ldr	r3, [pc, #316]	@ (8000fcc <MX_GPIO_Init+0x174>)
 8000e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e92:	4a4e      	ldr	r2, [pc, #312]	@ (8000fcc <MX_GPIO_Init+0x174>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e9c:	4b4b      	ldr	r3, [pc, #300]	@ (8000fcc <MX_GPIO_Init+0x174>)
 8000e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eaa:	4b48      	ldr	r3, [pc, #288]	@ (8000fcc <MX_GPIO_Init+0x174>)
 8000eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb0:	4a46      	ldr	r2, [pc, #280]	@ (8000fcc <MX_GPIO_Init+0x174>)
 8000eb2:	f043 0304 	orr.w	r3, r3, #4
 8000eb6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eba:	4b44      	ldr	r3, [pc, #272]	@ (8000fcc <MX_GPIO_Init+0x174>)
 8000ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ec0:	f003 0304 	and.w	r3, r3, #4
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec8:	4b40      	ldr	r3, [pc, #256]	@ (8000fcc <MX_GPIO_Init+0x174>)
 8000eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ece:	4a3f      	ldr	r2, [pc, #252]	@ (8000fcc <MX_GPIO_Init+0x174>)
 8000ed0:	f043 0302 	orr.w	r3, r3, #2
 8000ed4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ed8:	4b3c      	ldr	r3, [pc, #240]	@ (8000fcc <MX_GPIO_Init+0x174>)
 8000eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ede:	f003 0302 	and.w	r3, r3, #2
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ee6:	4b39      	ldr	r3, [pc, #228]	@ (8000fcc <MX_GPIO_Init+0x174>)
 8000ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eec:	4a37      	ldr	r2, [pc, #220]	@ (8000fcc <MX_GPIO_Init+0x174>)
 8000eee:	f043 0308 	orr.w	r3, r3, #8
 8000ef2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ef6:	4b35      	ldr	r3, [pc, #212]	@ (8000fcc <MX_GPIO_Init+0x174>)
 8000ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000efc:	f003 0308 	and.w	r3, r3, #8
 8000f00:	603b      	str	r3, [r7, #0]
 8000f02:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2104      	movs	r1, #4
 8000f08:	4831      	ldr	r0, [pc, #196]	@ (8000fd0 <MX_GPIO_Init+0x178>)
 8000f0a:	f003 fbbb 	bl	8004684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAM_RST_GPIO_Port, CAM_RST_Pin, GPIO_PIN_RESET);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2120      	movs	r1, #32
 8000f12:	4830      	ldr	r0, [pc, #192]	@ (8000fd4 <MX_GPIO_Init+0x17c>)
 8000f14:	f003 fbb6 	bl	8004684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWDN_GPIO_Port, PWDN_Pin, GPIO_PIN_SET);
 8000f18:	2201      	movs	r2, #1
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	482e      	ldr	r0, [pc, #184]	@ (8000fd8 <MX_GPIO_Init+0x180>)
 8000f1e:	f003 fbb1 	bl	8004684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CAPTURE_Pin|LED_Pin, GPIO_PIN_RESET);
 8000f22:	2200      	movs	r2, #0
 8000f24:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8000f28:	482c      	ldr	r0, [pc, #176]	@ (8000fdc <MX_GPIO_Init+0x184>)
 8000f2a:	f003 fbab 	bl	8004684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f2e:	2304      	movs	r3, #4
 8000f30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f32:	2301      	movs	r3, #1
 8000f34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	4619      	mov	r1, r3
 8000f44:	4822      	ldr	r0, [pc, #136]	@ (8000fd0 <MX_GPIO_Init+0x178>)
 8000f46:	f003 f9ed 	bl	8004324 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAM_RST_Pin */
  GPIO_InitStruct.Pin = CAM_RST_Pin;
 8000f4a:	2320      	movs	r3, #32
 8000f4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	2300      	movs	r3, #0
 8000f58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAM_RST_GPIO_Port, &GPIO_InitStruct);
 8000f5a:	f107 0314 	add.w	r3, r7, #20
 8000f5e:	4619      	mov	r1, r3
 8000f60:	481c      	ldr	r0, [pc, #112]	@ (8000fd4 <MX_GPIO_Init+0x17c>)
 8000f62:	f003 f9df 	bl	8004324 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWDN_Pin */
  GPIO_InitStruct.Pin = PWDN_Pin;
 8000f66:	2301      	movs	r3, #1
 8000f68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f72:	2300      	movs	r3, #0
 8000f74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PWDN_GPIO_Port, &GPIO_InitStruct);
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4816      	ldr	r0, [pc, #88]	@ (8000fd8 <MX_GPIO_Init+0x180>)
 8000f7e:	f003 f9d1 	bl	8004324 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAPTURE_Pin LED_Pin */
  GPIO_InitStruct.Pin = CAPTURE_Pin|LED_Pin;
 8000f82:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000f86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f90:	2300      	movs	r3, #0
 8000f92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4810      	ldr	r0, [pc, #64]	@ (8000fdc <MX_GPIO_Init+0x184>)
 8000f9c:	f003 f9c2 	bl	8004324 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fa0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb6:	f107 0314 	add.w	r3, r7, #20
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4808      	ldr	r0, [pc, #32]	@ (8000fe0 <MX_GPIO_Init+0x188>)
 8000fbe:	f003 f9b1 	bl	8004324 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fc2:	bf00      	nop
 8000fc4:	3728      	adds	r7, #40	@ 0x28
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	58024400 	.word	0x58024400
 8000fd0:	58021000 	.word	0x58021000
 8000fd4:	58020800 	.word	0x58020800
 8000fd8:	58020400 	.word	0x58020400
 8000fdc:	58020c00 	.word	0x58020c00
 8000fe0:	58020000 	.word	0x58020000

08000fe4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe8:	b672      	cpsid	i
}
 8000fea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <Error_Handler+0x8>

08000ff0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8001020 <HAL_MspInit+0x30>)
 8000ff8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ffc:	4a08      	ldr	r2, [pc, #32]	@ (8001020 <HAL_MspInit+0x30>)
 8000ffe:	f043 0302 	orr.w	r3, r3, #2
 8001002:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001006:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <HAL_MspInit+0x30>)
 8001008:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800100c:	f003 0302 	and.w	r3, r3, #2
 8001010:	607b      	str	r3, [r7, #4]
 8001012:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	58024400 	.word	0x58024400

08001024 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08e      	sub	sp, #56	@ 0x38
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a75      	ldr	r2, [pc, #468]	@ (8001218 <HAL_DCMI_MspInit+0x1f4>)
 8001042:	4293      	cmp	r3, r2
 8001044:	f040 80e3 	bne.w	800120e <HAL_DCMI_MspInit+0x1ea>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001048:	4b74      	ldr	r3, [pc, #464]	@ (800121c <HAL_DCMI_MspInit+0x1f8>)
 800104a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800104e:	4a73      	ldr	r2, [pc, #460]	@ (800121c <HAL_DCMI_MspInit+0x1f8>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8001058:	4b70      	ldr	r3, [pc, #448]	@ (800121c <HAL_DCMI_MspInit+0x1f8>)
 800105a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	623b      	str	r3, [r7, #32]
 8001064:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001066:	4b6d      	ldr	r3, [pc, #436]	@ (800121c <HAL_DCMI_MspInit+0x1f8>)
 8001068:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800106c:	4a6b      	ldr	r2, [pc, #428]	@ (800121c <HAL_DCMI_MspInit+0x1f8>)
 800106e:	f043 0310 	orr.w	r3, r3, #16
 8001072:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001076:	4b69      	ldr	r3, [pc, #420]	@ (800121c <HAL_DCMI_MspInit+0x1f8>)
 8001078:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800107c:	f003 0310 	and.w	r3, r3, #16
 8001080:	61fb      	str	r3, [r7, #28]
 8001082:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001084:	4b65      	ldr	r3, [pc, #404]	@ (800121c <HAL_DCMI_MspInit+0x1f8>)
 8001086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800108a:	4a64      	ldr	r2, [pc, #400]	@ (800121c <HAL_DCMI_MspInit+0x1f8>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001094:	4b61      	ldr	r3, [pc, #388]	@ (800121c <HAL_DCMI_MspInit+0x1f8>)
 8001096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	61bb      	str	r3, [r7, #24]
 80010a0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a2:	4b5e      	ldr	r3, [pc, #376]	@ (800121c <HAL_DCMI_MspInit+0x1f8>)
 80010a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010a8:	4a5c      	ldr	r2, [pc, #368]	@ (800121c <HAL_DCMI_MspInit+0x1f8>)
 80010aa:	f043 0304 	orr.w	r3, r3, #4
 80010ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010b2:	4b5a      	ldr	r3, [pc, #360]	@ (800121c <HAL_DCMI_MspInit+0x1f8>)
 80010b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010b8:	f003 0304 	and.w	r3, r3, #4
 80010bc:	617b      	str	r3, [r7, #20]
 80010be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010c0:	4b56      	ldr	r3, [pc, #344]	@ (800121c <HAL_DCMI_MspInit+0x1f8>)
 80010c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010c6:	4a55      	ldr	r2, [pc, #340]	@ (800121c <HAL_DCMI_MspInit+0x1f8>)
 80010c8:	f043 0308 	orr.w	r3, r3, #8
 80010cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010d0:	4b52      	ldr	r3, [pc, #328]	@ (800121c <HAL_DCMI_MspInit+0x1f8>)
 80010d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010d6:	f003 0308 	and.w	r3, r3, #8
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010de:	4b4f      	ldr	r3, [pc, #316]	@ (800121c <HAL_DCMI_MspInit+0x1f8>)
 80010e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010e4:	4a4d      	ldr	r2, [pc, #308]	@ (800121c <HAL_DCMI_MspInit+0x1f8>)
 80010e6:	f043 0302 	orr.w	r3, r3, #2
 80010ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010ee:	4b4b      	ldr	r3, [pc, #300]	@ (800121c <HAL_DCMI_MspInit+0x1f8>)
 80010f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010f4:	f003 0302 	and.w	r3, r3, #2
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80010fc:	2370      	movs	r3, #112	@ 0x70
 80010fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001100:	2302      	movs	r3, #2
 8001102:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001104:	2302      	movs	r3, #2
 8001106:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001108:	2303      	movs	r3, #3
 800110a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800110c:	230d      	movs	r3, #13
 800110e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001110:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001114:	4619      	mov	r1, r3
 8001116:	4842      	ldr	r0, [pc, #264]	@ (8001220 <HAL_DCMI_MspInit+0x1fc>)
 8001118:	f003 f904 	bl	8004324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800111c:	2350      	movs	r3, #80	@ 0x50
 800111e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001124:	2302      	movs	r3, #2
 8001126:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001128:	2303      	movs	r3, #3
 800112a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800112c:	230d      	movs	r3, #13
 800112e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001130:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001134:	4619      	mov	r1, r3
 8001136:	483b      	ldr	r0, [pc, #236]	@ (8001224 <HAL_DCMI_MspInit+0x200>)
 8001138:	f003 f8f4 	bl	8004324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800113c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001140:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001146:	2302      	movs	r3, #2
 8001148:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114a:	2303      	movs	r3, #3
 800114c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800114e:	230d      	movs	r3, #13
 8001150:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001152:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001156:	4619      	mov	r1, r3
 8001158:	4833      	ldr	r0, [pc, #204]	@ (8001228 <HAL_DCMI_MspInit+0x204>)
 800115a:	f003 f8e3 	bl	8004324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800115e:	2308      	movs	r3, #8
 8001160:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001162:	2302      	movs	r3, #2
 8001164:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001166:	2302      	movs	r3, #2
 8001168:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116a:	2303      	movs	r3, #3
 800116c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800116e:	230d      	movs	r3, #13
 8001170:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001172:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001176:	4619      	mov	r1, r3
 8001178:	482c      	ldr	r0, [pc, #176]	@ (800122c <HAL_DCMI_MspInit+0x208>)
 800117a:	f003 f8d3 	bl	8004324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800117e:	2380      	movs	r3, #128	@ 0x80
 8001180:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001182:	2302      	movs	r3, #2
 8001184:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001186:	2302      	movs	r3, #2
 8001188:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118a:	2303      	movs	r3, #3
 800118c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800118e:	230d      	movs	r3, #13
 8001190:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001192:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001196:	4619      	mov	r1, r3
 8001198:	4825      	ldr	r0, [pc, #148]	@ (8001230 <HAL_DCMI_MspInit+0x20c>)
 800119a:	f003 f8c3 	bl	8004324 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 800119e:	4b25      	ldr	r3, [pc, #148]	@ (8001234 <HAL_DCMI_MspInit+0x210>)
 80011a0:	4a25      	ldr	r2, [pc, #148]	@ (8001238 <HAL_DCMI_MspInit+0x214>)
 80011a2:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 80011a4:	4b23      	ldr	r3, [pc, #140]	@ (8001234 <HAL_DCMI_MspInit+0x210>)
 80011a6:	224b      	movs	r2, #75	@ 0x4b
 80011a8:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011aa:	4b22      	ldr	r3, [pc, #136]	@ (8001234 <HAL_DCMI_MspInit+0x210>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80011b0:	4b20      	ldr	r3, [pc, #128]	@ (8001234 <HAL_DCMI_MspInit+0x210>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80011b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001234 <HAL_DCMI_MspInit+0x210>)
 80011b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011bc:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011be:	4b1d      	ldr	r3, [pc, #116]	@ (8001234 <HAL_DCMI_MspInit+0x210>)
 80011c0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80011c4:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001234 <HAL_DCMI_MspInit+0x210>)
 80011c8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011cc:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 80011ce:	4b19      	ldr	r3, [pc, #100]	@ (8001234 <HAL_DCMI_MspInit+0x210>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80011d4:	4b17      	ldr	r3, [pc, #92]	@ (8001234 <HAL_DCMI_MspInit+0x210>)
 80011d6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80011da:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011dc:	4b15      	ldr	r3, [pc, #84]	@ (8001234 <HAL_DCMI_MspInit+0x210>)
 80011de:	2200      	movs	r2, #0
 80011e0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80011e2:	4814      	ldr	r0, [pc, #80]	@ (8001234 <HAL_DCMI_MspInit+0x210>)
 80011e4:	f000 fd80 	bl	8001ce8 <HAL_DMA_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <HAL_DCMI_MspInit+0x1ce>
    {
      Error_Handler();
 80011ee:	f7ff fef9 	bl	8000fe4 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a0f      	ldr	r2, [pc, #60]	@ (8001234 <HAL_DCMI_MspInit+0x210>)
 80011f6:	649a      	str	r2, [r3, #72]	@ 0x48
 80011f8:	4a0e      	ldr	r2, [pc, #56]	@ (8001234 <HAL_DCMI_MspInit+0x210>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	2100      	movs	r1, #0
 8001202:	204e      	movs	r0, #78	@ 0x4e
 8001204:	f000 fc03 	bl	8001a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8001208:	204e      	movs	r0, #78	@ 0x4e
 800120a:	f000 fc1a 	bl	8001a42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 800120e:	bf00      	nop
 8001210:	3738      	adds	r7, #56	@ 0x38
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	48020000 	.word	0x48020000
 800121c:	58024400 	.word	0x58024400
 8001220:	58021000 	.word	0x58021000
 8001224:	58020000 	.word	0x58020000
 8001228:	58020800 	.word	0x58020800
 800122c:	58020c00 	.word	0x58020c00
 8001230:	58020400 	.word	0x58020400
 8001234:	240000dc 	.word	0x240000dc
 8001238:	40020010 	.word	0x40020010

0800123c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b0bc      	sub	sp, #240	@ 0xf0
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001254:	f107 0318 	add.w	r3, r7, #24
 8001258:	22c0      	movs	r2, #192	@ 0xc0
 800125a:	2100      	movs	r1, #0
 800125c:	4618      	mov	r0, r3
 800125e:	f008 f853 	bl	8009308 <memset>
  if(hi2c->Instance==I2C1)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a4d      	ldr	r2, [pc, #308]	@ (800139c <HAL_I2C_MspInit+0x160>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d147      	bne.n	80012fc <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800126c:	f04f 0208 	mov.w	r2, #8
 8001270:	f04f 0300 	mov.w	r3, #0
 8001274:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001278:	2300      	movs	r3, #0
 800127a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800127e:	f107 0318 	add.w	r3, r7, #24
 8001282:	4618      	mov	r0, r3
 8001284:	f005 f88a 	bl	800639c <HAL_RCCEx_PeriphCLKConfig>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800128e:	f7ff fea9 	bl	8000fe4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001292:	4b43      	ldr	r3, [pc, #268]	@ (80013a0 <HAL_I2C_MspInit+0x164>)
 8001294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001298:	4a41      	ldr	r2, [pc, #260]	@ (80013a0 <HAL_I2C_MspInit+0x164>)
 800129a:	f043 0302 	orr.w	r3, r3, #2
 800129e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012a2:	4b3f      	ldr	r3, [pc, #252]	@ (80013a0 <HAL_I2C_MspInit+0x164>)
 80012a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	617b      	str	r3, [r7, #20]
 80012ae:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012b0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80012b4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012b8:	2312      	movs	r3, #18
 80012ba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012be:	2301      	movs	r3, #1
 80012c0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c4:	2300      	movs	r3, #0
 80012c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012ca:	2304      	movs	r3, #4
 80012cc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80012d4:	4619      	mov	r1, r3
 80012d6:	4833      	ldr	r0, [pc, #204]	@ (80013a4 <HAL_I2C_MspInit+0x168>)
 80012d8:	f003 f824 	bl	8004324 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012dc:	4b30      	ldr	r3, [pc, #192]	@ (80013a0 <HAL_I2C_MspInit+0x164>)
 80012de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012e2:	4a2f      	ldr	r2, [pc, #188]	@ (80013a0 <HAL_I2C_MspInit+0x164>)
 80012e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012e8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80012ec:	4b2c      	ldr	r3, [pc, #176]	@ (80013a0 <HAL_I2C_MspInit+0x164>)
 80012ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80012fa:	e04b      	b.n	8001394 <HAL_I2C_MspInit+0x158>
  else if(hi2c->Instance==I2C2)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a29      	ldr	r2, [pc, #164]	@ (80013a8 <HAL_I2C_MspInit+0x16c>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d146      	bne.n	8001394 <HAL_I2C_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001306:	f04f 0208 	mov.w	r2, #8
 800130a:	f04f 0300 	mov.w	r3, #0
 800130e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001312:	2300      	movs	r3, #0
 8001314:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001318:	f107 0318 	add.w	r3, r7, #24
 800131c:	4618      	mov	r0, r3
 800131e:	f005 f83d 	bl	800639c <HAL_RCCEx_PeriphCLKConfig>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 8001328:	f7ff fe5c 	bl	8000fe4 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800132c:	4b1c      	ldr	r3, [pc, #112]	@ (80013a0 <HAL_I2C_MspInit+0x164>)
 800132e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001332:	4a1b      	ldr	r2, [pc, #108]	@ (80013a0 <HAL_I2C_MspInit+0x164>)
 8001334:	f043 0302 	orr.w	r3, r3, #2
 8001338:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800133c:	4b18      	ldr	r3, [pc, #96]	@ (80013a0 <HAL_I2C_MspInit+0x164>)
 800133e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800134a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800134e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001352:	2312      	movs	r3, #18
 8001354:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135e:	2300      	movs	r3, #0
 8001360:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001364:	2304      	movs	r3, #4
 8001366:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800136e:	4619      	mov	r1, r3
 8001370:	480c      	ldr	r0, [pc, #48]	@ (80013a4 <HAL_I2C_MspInit+0x168>)
 8001372:	f002 ffd7 	bl	8004324 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001376:	4b0a      	ldr	r3, [pc, #40]	@ (80013a0 <HAL_I2C_MspInit+0x164>)
 8001378:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800137c:	4a08      	ldr	r2, [pc, #32]	@ (80013a0 <HAL_I2C_MspInit+0x164>)
 800137e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001382:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001386:	4b06      	ldr	r3, [pc, #24]	@ (80013a0 <HAL_I2C_MspInit+0x164>)
 8001388:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800138c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	68bb      	ldr	r3, [r7, #8]
}
 8001394:	bf00      	nop
 8001396:	37f0      	adds	r7, #240	@ 0xf0
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40005400 	.word	0x40005400
 80013a0:	58024400 	.word	0x58024400
 80013a4:	58020400 	.word	0x58020400
 80013a8:	40005800 	.word	0x40005800

080013ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b0ba      	sub	sp, #232	@ 0xe8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013c4:	f107 0310 	add.w	r3, r7, #16
 80013c8:	22c0      	movs	r2, #192	@ 0xc0
 80013ca:	2100      	movs	r1, #0
 80013cc:	4618      	mov	r0, r3
 80013ce:	f007 ff9b 	bl	8009308 <memset>
  if(huart->Instance==UART4)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a26      	ldr	r2, [pc, #152]	@ (8001470 <HAL_UART_MspInit+0xc4>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d145      	bne.n	8001468 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80013dc:	f04f 0202 	mov.w	r2, #2
 80013e0:	f04f 0300 	mov.w	r3, #0
 80013e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80013e8:	2300      	movs	r3, #0
 80013ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ee:	f107 0310 	add.w	r3, r7, #16
 80013f2:	4618      	mov	r0, r3
 80013f4:	f004 ffd2 	bl	800639c <HAL_RCCEx_PeriphCLKConfig>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80013fe:	f7ff fdf1 	bl	8000fe4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001402:	4b1c      	ldr	r3, [pc, #112]	@ (8001474 <HAL_UART_MspInit+0xc8>)
 8001404:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001408:	4a1a      	ldr	r2, [pc, #104]	@ (8001474 <HAL_UART_MspInit+0xc8>)
 800140a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800140e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001412:	4b18      	ldr	r3, [pc, #96]	@ (8001474 <HAL_UART_MspInit+0xc8>)
 8001414:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001418:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001420:	4b14      	ldr	r3, [pc, #80]	@ (8001474 <HAL_UART_MspInit+0xc8>)
 8001422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001426:	4a13      	ldr	r2, [pc, #76]	@ (8001474 <HAL_UART_MspInit+0xc8>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001430:	4b10      	ldr	r3, [pc, #64]	@ (8001474 <HAL_UART_MspInit+0xc8>)
 8001432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800143e:	2303      	movs	r3, #3
 8001440:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001444:	2302      	movs	r3, #2
 8001446:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001450:	2300      	movs	r3, #0
 8001452:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001456:	2308      	movs	r3, #8
 8001458:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001460:	4619      	mov	r1, r3
 8001462:	4805      	ldr	r0, [pc, #20]	@ (8001478 <HAL_UART_MspInit+0xcc>)
 8001464:	f002 ff5e 	bl	8004324 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001468:	bf00      	nop
 800146a:	37e8      	adds	r7, #232	@ 0xe8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40004c00 	.word	0x40004c00
 8001474:	58024400 	.word	0x58024400
 8001478:	58020000 	.word	0x58020000

0800147c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <NMI_Handler+0x4>

08001484 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001488:	bf00      	nop
 800148a:	e7fd      	b.n	8001488 <HardFault_Handler+0x4>

0800148c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001490:	bf00      	nop
 8001492:	e7fd      	b.n	8001490 <MemManage_Handler+0x4>

08001494 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001498:	bf00      	nop
 800149a:	e7fd      	b.n	8001498 <BusFault_Handler+0x4>

0800149c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a0:	bf00      	nop
 80014a2:	e7fd      	b.n	80014a0 <UsageFault_Handler+0x4>

080014a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d2:	f000 f971 	bl	80017b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
	...

080014dc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 80014e0:	4802      	ldr	r0, [pc, #8]	@ (80014ec <DMA1_Stream0_IRQHandler+0x10>)
 80014e2:	f001 fc0d 	bl	8002d00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	240000dc 	.word	0x240000dc

080014f0 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80014f4:	4802      	ldr	r0, [pc, #8]	@ (8001500 <DCMI_IRQHandler+0x10>)
 80014f6:	f000 fb39 	bl	8001b6c <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	2400008c 	.word	0x2400008c

08001504 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800150c:	4a14      	ldr	r2, [pc, #80]	@ (8001560 <_sbrk+0x5c>)
 800150e:	4b15      	ldr	r3, [pc, #84]	@ (8001564 <_sbrk+0x60>)
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001518:	4b13      	ldr	r3, [pc, #76]	@ (8001568 <_sbrk+0x64>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d102      	bne.n	8001526 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001520:	4b11      	ldr	r3, [pc, #68]	@ (8001568 <_sbrk+0x64>)
 8001522:	4a12      	ldr	r2, [pc, #72]	@ (800156c <_sbrk+0x68>)
 8001524:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001526:	4b10      	ldr	r3, [pc, #64]	@ (8001568 <_sbrk+0x64>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4413      	add	r3, r2
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	429a      	cmp	r2, r3
 8001532:	d207      	bcs.n	8001544 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001534:	f007 fef0 	bl	8009318 <__errno>
 8001538:	4603      	mov	r3, r0
 800153a:	220c      	movs	r2, #12
 800153c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800153e:	f04f 33ff 	mov.w	r3, #4294967295
 8001542:	e009      	b.n	8001558 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001544:	4b08      	ldr	r3, [pc, #32]	@ (8001568 <_sbrk+0x64>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800154a:	4b07      	ldr	r3, [pc, #28]	@ (8001568 <_sbrk+0x64>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4413      	add	r3, r2
 8001552:	4a05      	ldr	r2, [pc, #20]	@ (8001568 <_sbrk+0x64>)
 8001554:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001556:	68fb      	ldr	r3, [r7, #12]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3718      	adds	r7, #24
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	24080000 	.word	0x24080000
 8001564:	00000400 	.word	0x00000400
 8001568:	24000290 	.word	0x24000290
 800156c:	240003e0 	.word	0x240003e0

08001570 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001574:	4b37      	ldr	r3, [pc, #220]	@ (8001654 <SystemInit+0xe4>)
 8001576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800157a:	4a36      	ldr	r2, [pc, #216]	@ (8001654 <SystemInit+0xe4>)
 800157c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001580:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001584:	4b34      	ldr	r3, [pc, #208]	@ (8001658 <SystemInit+0xe8>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 030f 	and.w	r3, r3, #15
 800158c:	2b06      	cmp	r3, #6
 800158e:	d807      	bhi.n	80015a0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001590:	4b31      	ldr	r3, [pc, #196]	@ (8001658 <SystemInit+0xe8>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f023 030f 	bic.w	r3, r3, #15
 8001598:	4a2f      	ldr	r2, [pc, #188]	@ (8001658 <SystemInit+0xe8>)
 800159a:	f043 0307 	orr.w	r3, r3, #7
 800159e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80015a0:	4b2e      	ldr	r3, [pc, #184]	@ (800165c <SystemInit+0xec>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a2d      	ldr	r2, [pc, #180]	@ (800165c <SystemInit+0xec>)
 80015a6:	f043 0301 	orr.w	r3, r3, #1
 80015aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80015ac:	4b2b      	ldr	r3, [pc, #172]	@ (800165c <SystemInit+0xec>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80015b2:	4b2a      	ldr	r3, [pc, #168]	@ (800165c <SystemInit+0xec>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	4929      	ldr	r1, [pc, #164]	@ (800165c <SystemInit+0xec>)
 80015b8:	4b29      	ldr	r3, [pc, #164]	@ (8001660 <SystemInit+0xf0>)
 80015ba:	4013      	ands	r3, r2
 80015bc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015be:	4b26      	ldr	r3, [pc, #152]	@ (8001658 <SystemInit+0xe8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0308 	and.w	r3, r3, #8
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d007      	beq.n	80015da <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015ca:	4b23      	ldr	r3, [pc, #140]	@ (8001658 <SystemInit+0xe8>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f023 030f 	bic.w	r3, r3, #15
 80015d2:	4a21      	ldr	r2, [pc, #132]	@ (8001658 <SystemInit+0xe8>)
 80015d4:	f043 0307 	orr.w	r3, r3, #7
 80015d8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80015da:	4b20      	ldr	r3, [pc, #128]	@ (800165c <SystemInit+0xec>)
 80015dc:	2200      	movs	r2, #0
 80015de:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80015e0:	4b1e      	ldr	r3, [pc, #120]	@ (800165c <SystemInit+0xec>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80015e6:	4b1d      	ldr	r3, [pc, #116]	@ (800165c <SystemInit+0xec>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80015ec:	4b1b      	ldr	r3, [pc, #108]	@ (800165c <SystemInit+0xec>)
 80015ee:	4a1d      	ldr	r2, [pc, #116]	@ (8001664 <SystemInit+0xf4>)
 80015f0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80015f2:	4b1a      	ldr	r3, [pc, #104]	@ (800165c <SystemInit+0xec>)
 80015f4:	4a1c      	ldr	r2, [pc, #112]	@ (8001668 <SystemInit+0xf8>)
 80015f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80015f8:	4b18      	ldr	r3, [pc, #96]	@ (800165c <SystemInit+0xec>)
 80015fa:	4a1c      	ldr	r2, [pc, #112]	@ (800166c <SystemInit+0xfc>)
 80015fc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80015fe:	4b17      	ldr	r3, [pc, #92]	@ (800165c <SystemInit+0xec>)
 8001600:	2200      	movs	r2, #0
 8001602:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001604:	4b15      	ldr	r3, [pc, #84]	@ (800165c <SystemInit+0xec>)
 8001606:	4a19      	ldr	r2, [pc, #100]	@ (800166c <SystemInit+0xfc>)
 8001608:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800160a:	4b14      	ldr	r3, [pc, #80]	@ (800165c <SystemInit+0xec>)
 800160c:	2200      	movs	r2, #0
 800160e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001610:	4b12      	ldr	r3, [pc, #72]	@ (800165c <SystemInit+0xec>)
 8001612:	4a16      	ldr	r2, [pc, #88]	@ (800166c <SystemInit+0xfc>)
 8001614:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001616:	4b11      	ldr	r3, [pc, #68]	@ (800165c <SystemInit+0xec>)
 8001618:	2200      	movs	r2, #0
 800161a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800161c:	4b0f      	ldr	r3, [pc, #60]	@ (800165c <SystemInit+0xec>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a0e      	ldr	r2, [pc, #56]	@ (800165c <SystemInit+0xec>)
 8001622:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001626:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001628:	4b0c      	ldr	r3, [pc, #48]	@ (800165c <SystemInit+0xec>)
 800162a:	2200      	movs	r2, #0
 800162c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800162e:	4b10      	ldr	r3, [pc, #64]	@ (8001670 <SystemInit+0x100>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	4b10      	ldr	r3, [pc, #64]	@ (8001674 <SystemInit+0x104>)
 8001634:	4013      	ands	r3, r2
 8001636:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800163a:	d202      	bcs.n	8001642 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800163c:	4b0e      	ldr	r3, [pc, #56]	@ (8001678 <SystemInit+0x108>)
 800163e:	2201      	movs	r2, #1
 8001640:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001642:	4b0e      	ldr	r3, [pc, #56]	@ (800167c <SystemInit+0x10c>)
 8001644:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001648:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800164a:	bf00      	nop
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	e000ed00 	.word	0xe000ed00
 8001658:	52002000 	.word	0x52002000
 800165c:	58024400 	.word	0x58024400
 8001660:	eaf6ed7f 	.word	0xeaf6ed7f
 8001664:	02020200 	.word	0x02020200
 8001668:	01ff0000 	.word	0x01ff0000
 800166c:	01010280 	.word	0x01010280
 8001670:	5c001000 	.word	0x5c001000
 8001674:	ffff0000 	.word	0xffff0000
 8001678:	51008108 	.word	0x51008108
 800167c:	52004000 	.word	0x52004000

08001680 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001680:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001684:	f7ff ff74 	bl	8001570 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001688:	480c      	ldr	r0, [pc, #48]	@ (80016bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800168a:	490d      	ldr	r1, [pc, #52]	@ (80016c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800168c:	4a0d      	ldr	r2, [pc, #52]	@ (80016c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800168e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001690:	e002      	b.n	8001698 <LoopCopyDataInit>

08001692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001696:	3304      	adds	r3, #4

08001698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800169a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800169c:	d3f9      	bcc.n	8001692 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800169e:	4a0a      	ldr	r2, [pc, #40]	@ (80016c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016a0:	4c0a      	ldr	r4, [pc, #40]	@ (80016cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80016a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016a4:	e001      	b.n	80016aa <LoopFillZerobss>

080016a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016a8:	3204      	adds	r2, #4

080016aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016ac:	d3fb      	bcc.n	80016a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016ae:	f007 fe39 	bl	8009324 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016b2:	f7ff f9f9 	bl	8000aa8 <main>
  bx  lr
 80016b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016b8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80016bc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80016c0:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 80016c4:	08009da0 	.word	0x08009da0
  ldr r2, =_sbss
 80016c8:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 80016cc:	240003e0 	.word	0x240003e0

080016d0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016d0:	e7fe      	b.n	80016d0 <ADC3_IRQHandler>
	...

080016d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016da:	2003      	movs	r0, #3
 80016dc:	f000 f98c 	bl	80019f8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016e0:	f004 fc86 	bl	8005ff0 <HAL_RCC_GetSysClockFreq>
 80016e4:	4602      	mov	r2, r0
 80016e6:	4b15      	ldr	r3, [pc, #84]	@ (800173c <HAL_Init+0x68>)
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	0a1b      	lsrs	r3, r3, #8
 80016ec:	f003 030f 	and.w	r3, r3, #15
 80016f0:	4913      	ldr	r1, [pc, #76]	@ (8001740 <HAL_Init+0x6c>)
 80016f2:	5ccb      	ldrb	r3, [r1, r3]
 80016f4:	f003 031f 	and.w	r3, r3, #31
 80016f8:	fa22 f303 	lsr.w	r3, r2, r3
 80016fc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016fe:	4b0f      	ldr	r3, [pc, #60]	@ (800173c <HAL_Init+0x68>)
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	f003 030f 	and.w	r3, r3, #15
 8001706:	4a0e      	ldr	r2, [pc, #56]	@ (8001740 <HAL_Init+0x6c>)
 8001708:	5cd3      	ldrb	r3, [r2, r3]
 800170a:	f003 031f 	and.w	r3, r3, #31
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	fa22 f303 	lsr.w	r3, r2, r3
 8001714:	4a0b      	ldr	r2, [pc, #44]	@ (8001744 <HAL_Init+0x70>)
 8001716:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001718:	4a0b      	ldr	r2, [pc, #44]	@ (8001748 <HAL_Init+0x74>)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800171e:	200f      	movs	r0, #15
 8001720:	f000 f814 	bl	800174c <HAL_InitTick>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e002      	b.n	8001734 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800172e:	f7ff fc5f 	bl	8000ff0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001732:	2300      	movs	r3, #0
}
 8001734:	4618      	mov	r0, r3
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	58024400 	.word	0x58024400
 8001740:	08009d1c 	.word	0x08009d1c
 8001744:	24000008 	.word	0x24000008
 8001748:	24000004 	.word	0x24000004

0800174c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001754:	4b15      	ldr	r3, [pc, #84]	@ (80017ac <HAL_InitTick+0x60>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d101      	bne.n	8001760 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e021      	b.n	80017a4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001760:	4b13      	ldr	r3, [pc, #76]	@ (80017b0 <HAL_InitTick+0x64>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	4b11      	ldr	r3, [pc, #68]	@ (80017ac <HAL_InitTick+0x60>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	4619      	mov	r1, r3
 800176a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800176e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001772:	fbb2 f3f3 	udiv	r3, r2, r3
 8001776:	4618      	mov	r0, r3
 8001778:	f000 f971 	bl	8001a5e <HAL_SYSTICK_Config>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e00e      	b.n	80017a4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2b0f      	cmp	r3, #15
 800178a:	d80a      	bhi.n	80017a2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800178c:	2200      	movs	r2, #0
 800178e:	6879      	ldr	r1, [r7, #4]
 8001790:	f04f 30ff 	mov.w	r0, #4294967295
 8001794:	f000 f93b 	bl	8001a0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001798:	4a06      	ldr	r2, [pc, #24]	@ (80017b4 <HAL_InitTick+0x68>)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800179e:	2300      	movs	r3, #0
 80017a0:	e000      	b.n	80017a4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	24000010 	.word	0x24000010
 80017b0:	24000004 	.word	0x24000004
 80017b4:	2400000c 	.word	0x2400000c

080017b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017bc:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <HAL_IncTick+0x20>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	461a      	mov	r2, r3
 80017c2:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <HAL_IncTick+0x24>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4413      	add	r3, r2
 80017c8:	4a04      	ldr	r2, [pc, #16]	@ (80017dc <HAL_IncTick+0x24>)
 80017ca:	6013      	str	r3, [r2, #0]
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	24000010 	.word	0x24000010
 80017dc:	24000294 	.word	0x24000294

080017e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  return uwTick;
 80017e4:	4b03      	ldr	r3, [pc, #12]	@ (80017f4 <HAL_GetTick+0x14>)
 80017e6:	681b      	ldr	r3, [r3, #0]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	24000294 	.word	0x24000294

080017f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001800:	f7ff ffee 	bl	80017e0 <HAL_GetTick>
 8001804:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001810:	d005      	beq.n	800181e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001812:	4b0a      	ldr	r3, [pc, #40]	@ (800183c <HAL_Delay+0x44>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	461a      	mov	r2, r3
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	4413      	add	r3, r2
 800181c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800181e:	bf00      	nop
 8001820:	f7ff ffde 	bl	80017e0 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	429a      	cmp	r2, r3
 800182e:	d8f7      	bhi.n	8001820 <HAL_Delay+0x28>
  {
  }
}
 8001830:	bf00      	nop
 8001832:	bf00      	nop
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	24000010 	.word	0x24000010

08001840 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001844:	4b03      	ldr	r3, [pc, #12]	@ (8001854 <HAL_GetREVID+0x14>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	0c1b      	lsrs	r3, r3, #16
}
 800184a:	4618      	mov	r0, r3
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	5c001000 	.word	0x5c001000

08001858 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001868:	4b0b      	ldr	r3, [pc, #44]	@ (8001898 <__NVIC_SetPriorityGrouping+0x40>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800186e:	68ba      	ldr	r2, [r7, #8]
 8001870:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001874:	4013      	ands	r3, r2
 8001876:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001880:	4b06      	ldr	r3, [pc, #24]	@ (800189c <__NVIC_SetPriorityGrouping+0x44>)
 8001882:	4313      	orrs	r3, r2
 8001884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001886:	4a04      	ldr	r2, [pc, #16]	@ (8001898 <__NVIC_SetPriorityGrouping+0x40>)
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	60d3      	str	r3, [r2, #12]
}
 800188c:	bf00      	nop
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	e000ed00 	.word	0xe000ed00
 800189c:	05fa0000 	.word	0x05fa0000

080018a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a4:	4b04      	ldr	r3, [pc, #16]	@ (80018b8 <__NVIC_GetPriorityGrouping+0x18>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	0a1b      	lsrs	r3, r3, #8
 80018aa:	f003 0307 	and.w	r3, r3, #7
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	db0b      	blt.n	80018e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ce:	88fb      	ldrh	r3, [r7, #6]
 80018d0:	f003 021f 	and.w	r2, r3, #31
 80018d4:	4907      	ldr	r1, [pc, #28]	@ (80018f4 <__NVIC_EnableIRQ+0x38>)
 80018d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018da:	095b      	lsrs	r3, r3, #5
 80018dc:	2001      	movs	r0, #1
 80018de:	fa00 f202 	lsl.w	r2, r0, r2
 80018e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	e000e100 	.word	0xe000e100

080018f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	6039      	str	r1, [r7, #0]
 8001902:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001904:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001908:	2b00      	cmp	r3, #0
 800190a:	db0a      	blt.n	8001922 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	b2da      	uxtb	r2, r3
 8001910:	490c      	ldr	r1, [pc, #48]	@ (8001944 <__NVIC_SetPriority+0x4c>)
 8001912:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001916:	0112      	lsls	r2, r2, #4
 8001918:	b2d2      	uxtb	r2, r2
 800191a:	440b      	add	r3, r1
 800191c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001920:	e00a      	b.n	8001938 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	b2da      	uxtb	r2, r3
 8001926:	4908      	ldr	r1, [pc, #32]	@ (8001948 <__NVIC_SetPriority+0x50>)
 8001928:	88fb      	ldrh	r3, [r7, #6]
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	3b04      	subs	r3, #4
 8001930:	0112      	lsls	r2, r2, #4
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	440b      	add	r3, r1
 8001936:	761a      	strb	r2, [r3, #24]
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	e000e100 	.word	0xe000e100
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800194c:	b480      	push	{r7}
 800194e:	b089      	sub	sp, #36	@ 0x24
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	f1c3 0307 	rsb	r3, r3, #7
 8001966:	2b04      	cmp	r3, #4
 8001968:	bf28      	it	cs
 800196a:	2304      	movcs	r3, #4
 800196c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3304      	adds	r3, #4
 8001972:	2b06      	cmp	r3, #6
 8001974:	d902      	bls.n	800197c <NVIC_EncodePriority+0x30>
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	3b03      	subs	r3, #3
 800197a:	e000      	b.n	800197e <NVIC_EncodePriority+0x32>
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001980:	f04f 32ff 	mov.w	r2, #4294967295
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	43da      	mvns	r2, r3
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	401a      	ands	r2, r3
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001994:	f04f 31ff 	mov.w	r1, #4294967295
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	fa01 f303 	lsl.w	r3, r1, r3
 800199e:	43d9      	mvns	r1, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a4:	4313      	orrs	r3, r2
         );
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3724      	adds	r7, #36	@ 0x24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
	...

080019b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3b01      	subs	r3, #1
 80019c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019c4:	d301      	bcc.n	80019ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019c6:	2301      	movs	r3, #1
 80019c8:	e00f      	b.n	80019ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ca:	4a0a      	ldr	r2, [pc, #40]	@ (80019f4 <SysTick_Config+0x40>)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019d2:	210f      	movs	r1, #15
 80019d4:	f04f 30ff 	mov.w	r0, #4294967295
 80019d8:	f7ff ff8e 	bl	80018f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019dc:	4b05      	ldr	r3, [pc, #20]	@ (80019f4 <SysTick_Config+0x40>)
 80019de:	2200      	movs	r2, #0
 80019e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019e2:	4b04      	ldr	r3, [pc, #16]	@ (80019f4 <SysTick_Config+0x40>)
 80019e4:	2207      	movs	r2, #7
 80019e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	e000e010 	.word	0xe000e010

080019f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f7ff ff29 	bl	8001858 <__NVIC_SetPriorityGrouping>
}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b086      	sub	sp, #24
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	4603      	mov	r3, r0
 8001a16:	60b9      	str	r1, [r7, #8]
 8001a18:	607a      	str	r2, [r7, #4]
 8001a1a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a1c:	f7ff ff40 	bl	80018a0 <__NVIC_GetPriorityGrouping>
 8001a20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	68b9      	ldr	r1, [r7, #8]
 8001a26:	6978      	ldr	r0, [r7, #20]
 8001a28:	f7ff ff90 	bl	800194c <NVIC_EncodePriority>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a32:	4611      	mov	r1, r2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff5f 	bl	80018f8 <__NVIC_SetPriority>
}
 8001a3a:	bf00      	nop
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	4603      	mov	r3, r0
 8001a4a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff ff33 	bl	80018bc <__NVIC_EnableIRQ>
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff ffa4 	bl	80019b4 <SysTick_Config>
 8001a6c:	4603      	mov	r3, r0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e069      	b.n	8001b5e <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d102      	bne.n	8001a9c <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff fac4 	bl	8001024 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d002      	beq.n	8001ab2 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6819      	ldr	r1, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	4b2a      	ldr	r3, [pc, #168]	@ (8001b68 <HAL_DCMI_Init+0xf0>)
 8001abe:	400b      	ands	r3, r1
 8001ac0:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6819      	ldr	r1, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685a      	ldr	r2, [r3, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001ad6:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001ae2:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001aee:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af4:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001afa:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b00:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001b06:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	2b10      	cmp	r3, #16
 8001b16:	d112      	bne.n	8001b3e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	7f1b      	ldrb	r3, [r3, #28]
 8001b1c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	7f5b      	ldrb	r3, [r3, #29]
 8001b22:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001b24:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	7f9b      	ldrb	r3, [r3, #30]
 8001b2a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8001b2c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	7fdb      	ldrb	r3, [r3, #31]
 8001b34:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8001b3a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001b3c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68da      	ldr	r2, [r3, #12]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f042 021e 	orr.w	r2, r2, #30
 8001b4c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	ffe0f007 	.word	0xffe0f007

08001b6c <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f003 0304 	and.w	r3, r3, #4
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d016      	beq.n	8001bb4 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2204      	movs	r2, #4
 8001b8c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b92:	f043 0202 	orr.w	r2, r3, #2
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2204      	movs	r2, #4
 8001b9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ba6:	4a31      	ldr	r2, [pc, #196]	@ (8001c6c <HAL_DCMI_IRQHandler+0x100>)
 8001ba8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f000 fe60 	bl	8002874 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d016      	beq.n	8001bec <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bca:	f043 0201 	orr.w	r2, r3, #1
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2204      	movs	r2, #4
 8001bd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bde:	4a23      	ldr	r2, [pc, #140]	@ (8001c6c <HAL_DCMI_IRQHandler+0x100>)
 8001be0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001be6:	4618      	mov	r0, r3
 8001be8:	f000 fe44 	bl	8002874 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f003 0310 	and.w	r3, r3, #16
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d006      	beq.n	8001c04 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2210      	movs	r2, #16
 8001bfc:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 f840 	bl	8001c84 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f003 0308 	and.w	r3, r3, #8
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d006      	beq.n	8001c1c <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2208      	movs	r2, #8
 8001c14:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 f83e 	bl	8001c98 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d01d      	beq.n	8001c62 <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d107      	bne.n	8001c44 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68da      	ldr	r2, [r3, #12]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f022 021e 	bic.w	r2, r2, #30
 8001c42:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68da      	ldr	r2, [r3, #12]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 0201 	bic.w	r2, r2, #1
 8001c52:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7fe fe23 	bl	80008a8 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8001c62:	bf00      	nop
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	08001cad 	.word	0x08001cad

08001c70 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cb8:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d009      	beq.n	8001cd8 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cd0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8001cd8:	68f8      	ldr	r0, [r7, #12]
 8001cda:	f7ff ffc9 	bl	8001c70 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8001cde:	bf00      	nop
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
	...

08001ce8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001cf0:	f7ff fd76 	bl	80017e0 <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d101      	bne.n	8001d00 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e316      	b.n	800232e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a66      	ldr	r2, [pc, #408]	@ (8001ea0 <HAL_DMA_Init+0x1b8>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d04a      	beq.n	8001da0 <HAL_DMA_Init+0xb8>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a65      	ldr	r2, [pc, #404]	@ (8001ea4 <HAL_DMA_Init+0x1bc>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d045      	beq.n	8001da0 <HAL_DMA_Init+0xb8>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a63      	ldr	r2, [pc, #396]	@ (8001ea8 <HAL_DMA_Init+0x1c0>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d040      	beq.n	8001da0 <HAL_DMA_Init+0xb8>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a62      	ldr	r2, [pc, #392]	@ (8001eac <HAL_DMA_Init+0x1c4>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d03b      	beq.n	8001da0 <HAL_DMA_Init+0xb8>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a60      	ldr	r2, [pc, #384]	@ (8001eb0 <HAL_DMA_Init+0x1c8>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d036      	beq.n	8001da0 <HAL_DMA_Init+0xb8>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a5f      	ldr	r2, [pc, #380]	@ (8001eb4 <HAL_DMA_Init+0x1cc>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d031      	beq.n	8001da0 <HAL_DMA_Init+0xb8>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a5d      	ldr	r2, [pc, #372]	@ (8001eb8 <HAL_DMA_Init+0x1d0>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d02c      	beq.n	8001da0 <HAL_DMA_Init+0xb8>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a5c      	ldr	r2, [pc, #368]	@ (8001ebc <HAL_DMA_Init+0x1d4>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d027      	beq.n	8001da0 <HAL_DMA_Init+0xb8>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a5a      	ldr	r2, [pc, #360]	@ (8001ec0 <HAL_DMA_Init+0x1d8>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d022      	beq.n	8001da0 <HAL_DMA_Init+0xb8>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a59      	ldr	r2, [pc, #356]	@ (8001ec4 <HAL_DMA_Init+0x1dc>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d01d      	beq.n	8001da0 <HAL_DMA_Init+0xb8>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a57      	ldr	r2, [pc, #348]	@ (8001ec8 <HAL_DMA_Init+0x1e0>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d018      	beq.n	8001da0 <HAL_DMA_Init+0xb8>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a56      	ldr	r2, [pc, #344]	@ (8001ecc <HAL_DMA_Init+0x1e4>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d013      	beq.n	8001da0 <HAL_DMA_Init+0xb8>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a54      	ldr	r2, [pc, #336]	@ (8001ed0 <HAL_DMA_Init+0x1e8>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d00e      	beq.n	8001da0 <HAL_DMA_Init+0xb8>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a53      	ldr	r2, [pc, #332]	@ (8001ed4 <HAL_DMA_Init+0x1ec>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d009      	beq.n	8001da0 <HAL_DMA_Init+0xb8>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a51      	ldr	r2, [pc, #324]	@ (8001ed8 <HAL_DMA_Init+0x1f0>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d004      	beq.n	8001da0 <HAL_DMA_Init+0xb8>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a50      	ldr	r2, [pc, #320]	@ (8001edc <HAL_DMA_Init+0x1f4>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d101      	bne.n	8001da4 <HAL_DMA_Init+0xbc>
 8001da0:	2301      	movs	r3, #1
 8001da2:	e000      	b.n	8001da6 <HAL_DMA_Init+0xbe>
 8001da4:	2300      	movs	r3, #0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f000 813b 	beq.w	8002022 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2202      	movs	r2, #2
 8001db0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a37      	ldr	r2, [pc, #220]	@ (8001ea0 <HAL_DMA_Init+0x1b8>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d04a      	beq.n	8001e5c <HAL_DMA_Init+0x174>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a36      	ldr	r2, [pc, #216]	@ (8001ea4 <HAL_DMA_Init+0x1bc>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d045      	beq.n	8001e5c <HAL_DMA_Init+0x174>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a34      	ldr	r2, [pc, #208]	@ (8001ea8 <HAL_DMA_Init+0x1c0>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d040      	beq.n	8001e5c <HAL_DMA_Init+0x174>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a33      	ldr	r2, [pc, #204]	@ (8001eac <HAL_DMA_Init+0x1c4>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d03b      	beq.n	8001e5c <HAL_DMA_Init+0x174>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a31      	ldr	r2, [pc, #196]	@ (8001eb0 <HAL_DMA_Init+0x1c8>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d036      	beq.n	8001e5c <HAL_DMA_Init+0x174>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a30      	ldr	r2, [pc, #192]	@ (8001eb4 <HAL_DMA_Init+0x1cc>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d031      	beq.n	8001e5c <HAL_DMA_Init+0x174>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a2e      	ldr	r2, [pc, #184]	@ (8001eb8 <HAL_DMA_Init+0x1d0>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d02c      	beq.n	8001e5c <HAL_DMA_Init+0x174>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a2d      	ldr	r2, [pc, #180]	@ (8001ebc <HAL_DMA_Init+0x1d4>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d027      	beq.n	8001e5c <HAL_DMA_Init+0x174>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a2b      	ldr	r2, [pc, #172]	@ (8001ec0 <HAL_DMA_Init+0x1d8>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d022      	beq.n	8001e5c <HAL_DMA_Init+0x174>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a2a      	ldr	r2, [pc, #168]	@ (8001ec4 <HAL_DMA_Init+0x1dc>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d01d      	beq.n	8001e5c <HAL_DMA_Init+0x174>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a28      	ldr	r2, [pc, #160]	@ (8001ec8 <HAL_DMA_Init+0x1e0>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d018      	beq.n	8001e5c <HAL_DMA_Init+0x174>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a27      	ldr	r2, [pc, #156]	@ (8001ecc <HAL_DMA_Init+0x1e4>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d013      	beq.n	8001e5c <HAL_DMA_Init+0x174>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a25      	ldr	r2, [pc, #148]	@ (8001ed0 <HAL_DMA_Init+0x1e8>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d00e      	beq.n	8001e5c <HAL_DMA_Init+0x174>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a24      	ldr	r2, [pc, #144]	@ (8001ed4 <HAL_DMA_Init+0x1ec>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d009      	beq.n	8001e5c <HAL_DMA_Init+0x174>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a22      	ldr	r2, [pc, #136]	@ (8001ed8 <HAL_DMA_Init+0x1f0>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d004      	beq.n	8001e5c <HAL_DMA_Init+0x174>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a21      	ldr	r2, [pc, #132]	@ (8001edc <HAL_DMA_Init+0x1f4>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d108      	bne.n	8001e6e <HAL_DMA_Init+0x186>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f022 0201 	bic.w	r2, r2, #1
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	e007      	b.n	8001e7e <HAL_DMA_Init+0x196>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 0201 	bic.w	r2, r2, #1
 8001e7c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001e7e:	e02f      	b.n	8001ee0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e80:	f7ff fcae 	bl	80017e0 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b05      	cmp	r3, #5
 8001e8c:	d928      	bls.n	8001ee0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2220      	movs	r2, #32
 8001e92:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2203      	movs	r2, #3
 8001e98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e246      	b.n	800232e <HAL_DMA_Init+0x646>
 8001ea0:	40020010 	.word	0x40020010
 8001ea4:	40020028 	.word	0x40020028
 8001ea8:	40020040 	.word	0x40020040
 8001eac:	40020058 	.word	0x40020058
 8001eb0:	40020070 	.word	0x40020070
 8001eb4:	40020088 	.word	0x40020088
 8001eb8:	400200a0 	.word	0x400200a0
 8001ebc:	400200b8 	.word	0x400200b8
 8001ec0:	40020410 	.word	0x40020410
 8001ec4:	40020428 	.word	0x40020428
 8001ec8:	40020440 	.word	0x40020440
 8001ecc:	40020458 	.word	0x40020458
 8001ed0:	40020470 	.word	0x40020470
 8001ed4:	40020488 	.word	0x40020488
 8001ed8:	400204a0 	.word	0x400204a0
 8001edc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1c8      	bne.n	8001e80 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	4b83      	ldr	r3, [pc, #524]	@ (8002108 <HAL_DMA_Init+0x420>)
 8001efa:	4013      	ands	r3, r2
 8001efc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001f06:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f12:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f1e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f30:	2b04      	cmp	r3, #4
 8001f32:	d107      	bne.n	8001f44 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001f44:	4b71      	ldr	r3, [pc, #452]	@ (800210c <HAL_DMA_Init+0x424>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	4b71      	ldr	r3, [pc, #452]	@ (8002110 <HAL_DMA_Init+0x428>)
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001f50:	d328      	bcc.n	8001fa4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b28      	cmp	r3, #40	@ 0x28
 8001f58:	d903      	bls.n	8001f62 <HAL_DMA_Init+0x27a>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b2e      	cmp	r3, #46	@ 0x2e
 8001f60:	d917      	bls.n	8001f92 <HAL_DMA_Init+0x2aa>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b3e      	cmp	r3, #62	@ 0x3e
 8001f68:	d903      	bls.n	8001f72 <HAL_DMA_Init+0x28a>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b42      	cmp	r3, #66	@ 0x42
 8001f70:	d90f      	bls.n	8001f92 <HAL_DMA_Init+0x2aa>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2b46      	cmp	r3, #70	@ 0x46
 8001f78:	d903      	bls.n	8001f82 <HAL_DMA_Init+0x29a>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b48      	cmp	r3, #72	@ 0x48
 8001f80:	d907      	bls.n	8001f92 <HAL_DMA_Init+0x2aa>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b4e      	cmp	r3, #78	@ 0x4e
 8001f88:	d905      	bls.n	8001f96 <HAL_DMA_Init+0x2ae>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b52      	cmp	r3, #82	@ 0x52
 8001f90:	d801      	bhi.n	8001f96 <HAL_DMA_Init+0x2ae>
 8001f92:	2301      	movs	r3, #1
 8001f94:	e000      	b.n	8001f98 <HAL_DMA_Init+0x2b0>
 8001f96:	2300      	movs	r3, #0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d003      	beq.n	8001fa4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001fa2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	f023 0307 	bic.w	r3, r3, #7
 8001fba:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc0:	697a      	ldr	r2, [r7, #20]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	d117      	bne.n	8001ffe <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00e      	beq.n	8001ffe <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f002 f815 	bl	8004010 <DMA_CheckFifoParam>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d008      	beq.n	8001ffe <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2240      	movs	r2, #64	@ 0x40
 8001ff0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e197      	b.n	800232e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f001 ff50 	bl	8003eac <DMA_CalcBaseAndBitshift>
 800200c:	4603      	mov	r3, r0
 800200e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002014:	f003 031f 	and.w	r3, r3, #31
 8002018:	223f      	movs	r2, #63	@ 0x3f
 800201a:	409a      	lsls	r2, r3
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	e0cd      	b.n	80021be <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a3b      	ldr	r2, [pc, #236]	@ (8002114 <HAL_DMA_Init+0x42c>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d022      	beq.n	8002072 <HAL_DMA_Init+0x38a>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a39      	ldr	r2, [pc, #228]	@ (8002118 <HAL_DMA_Init+0x430>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d01d      	beq.n	8002072 <HAL_DMA_Init+0x38a>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a38      	ldr	r2, [pc, #224]	@ (800211c <HAL_DMA_Init+0x434>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d018      	beq.n	8002072 <HAL_DMA_Init+0x38a>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a36      	ldr	r2, [pc, #216]	@ (8002120 <HAL_DMA_Init+0x438>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d013      	beq.n	8002072 <HAL_DMA_Init+0x38a>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a35      	ldr	r2, [pc, #212]	@ (8002124 <HAL_DMA_Init+0x43c>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d00e      	beq.n	8002072 <HAL_DMA_Init+0x38a>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a33      	ldr	r2, [pc, #204]	@ (8002128 <HAL_DMA_Init+0x440>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d009      	beq.n	8002072 <HAL_DMA_Init+0x38a>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a32      	ldr	r2, [pc, #200]	@ (800212c <HAL_DMA_Init+0x444>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d004      	beq.n	8002072 <HAL_DMA_Init+0x38a>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a30      	ldr	r2, [pc, #192]	@ (8002130 <HAL_DMA_Init+0x448>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d101      	bne.n	8002076 <HAL_DMA_Init+0x38e>
 8002072:	2301      	movs	r3, #1
 8002074:	e000      	b.n	8002078 <HAL_DMA_Init+0x390>
 8002076:	2300      	movs	r3, #0
 8002078:	2b00      	cmp	r3, #0
 800207a:	f000 8097 	beq.w	80021ac <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a24      	ldr	r2, [pc, #144]	@ (8002114 <HAL_DMA_Init+0x42c>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d021      	beq.n	80020cc <HAL_DMA_Init+0x3e4>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a22      	ldr	r2, [pc, #136]	@ (8002118 <HAL_DMA_Init+0x430>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d01c      	beq.n	80020cc <HAL_DMA_Init+0x3e4>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a21      	ldr	r2, [pc, #132]	@ (800211c <HAL_DMA_Init+0x434>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d017      	beq.n	80020cc <HAL_DMA_Init+0x3e4>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a1f      	ldr	r2, [pc, #124]	@ (8002120 <HAL_DMA_Init+0x438>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d012      	beq.n	80020cc <HAL_DMA_Init+0x3e4>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a1e      	ldr	r2, [pc, #120]	@ (8002124 <HAL_DMA_Init+0x43c>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d00d      	beq.n	80020cc <HAL_DMA_Init+0x3e4>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a1c      	ldr	r2, [pc, #112]	@ (8002128 <HAL_DMA_Init+0x440>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d008      	beq.n	80020cc <HAL_DMA_Init+0x3e4>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a1b      	ldr	r2, [pc, #108]	@ (800212c <HAL_DMA_Init+0x444>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d003      	beq.n	80020cc <HAL_DMA_Init+0x3e4>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a19      	ldr	r2, [pc, #100]	@ (8002130 <HAL_DMA_Init+0x448>)
 80020ca:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2202      	movs	r2, #2
 80020d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	4b13      	ldr	r3, [pc, #76]	@ (8002134 <HAL_DMA_Init+0x44c>)
 80020e8:	4013      	ands	r3, r2
 80020ea:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	2b40      	cmp	r3, #64	@ 0x40
 80020f2:	d021      	beq.n	8002138 <HAL_DMA_Init+0x450>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	2b80      	cmp	r3, #128	@ 0x80
 80020fa:	d102      	bne.n	8002102 <HAL_DMA_Init+0x41a>
 80020fc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002100:	e01b      	b.n	800213a <HAL_DMA_Init+0x452>
 8002102:	2300      	movs	r3, #0
 8002104:	e019      	b.n	800213a <HAL_DMA_Init+0x452>
 8002106:	bf00      	nop
 8002108:	fe10803f 	.word	0xfe10803f
 800210c:	5c001000 	.word	0x5c001000
 8002110:	ffff0000 	.word	0xffff0000
 8002114:	58025408 	.word	0x58025408
 8002118:	5802541c 	.word	0x5802541c
 800211c:	58025430 	.word	0x58025430
 8002120:	58025444 	.word	0x58025444
 8002124:	58025458 	.word	0x58025458
 8002128:	5802546c 	.word	0x5802546c
 800212c:	58025480 	.word	0x58025480
 8002130:	58025494 	.word	0x58025494
 8002134:	fffe000f 	.word	0xfffe000f
 8002138:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	68d2      	ldr	r2, [r2, #12]
 800213e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002140:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002148:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002150:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002158:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002160:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a1b      	ldr	r3, [r3, #32]
 8002166:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002168:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	4313      	orrs	r3, r2
 800216e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	697a      	ldr	r2, [r7, #20]
 8002176:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	461a      	mov	r2, r3
 800217e:	4b6e      	ldr	r3, [pc, #440]	@ (8002338 <HAL_DMA_Init+0x650>)
 8002180:	4413      	add	r3, r2
 8002182:	4a6e      	ldr	r2, [pc, #440]	@ (800233c <HAL_DMA_Init+0x654>)
 8002184:	fba2 2303 	umull	r2, r3, r2, r3
 8002188:	091b      	lsrs	r3, r3, #4
 800218a:	009a      	lsls	r2, r3, #2
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f001 fe8b 	bl	8003eac <DMA_CalcBaseAndBitshift>
 8002196:	4603      	mov	r3, r0
 8002198:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800219e:	f003 031f 	and.w	r3, r3, #31
 80021a2:	2201      	movs	r2, #1
 80021a4:	409a      	lsls	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	e008      	b.n	80021be <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2240      	movs	r2, #64	@ 0x40
 80021b0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2203      	movs	r2, #3
 80021b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e0b7      	b.n	800232e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a5f      	ldr	r2, [pc, #380]	@ (8002340 <HAL_DMA_Init+0x658>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d072      	beq.n	80022ae <HAL_DMA_Init+0x5c6>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a5d      	ldr	r2, [pc, #372]	@ (8002344 <HAL_DMA_Init+0x65c>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d06d      	beq.n	80022ae <HAL_DMA_Init+0x5c6>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a5c      	ldr	r2, [pc, #368]	@ (8002348 <HAL_DMA_Init+0x660>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d068      	beq.n	80022ae <HAL_DMA_Init+0x5c6>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a5a      	ldr	r2, [pc, #360]	@ (800234c <HAL_DMA_Init+0x664>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d063      	beq.n	80022ae <HAL_DMA_Init+0x5c6>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a59      	ldr	r2, [pc, #356]	@ (8002350 <HAL_DMA_Init+0x668>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d05e      	beq.n	80022ae <HAL_DMA_Init+0x5c6>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a57      	ldr	r2, [pc, #348]	@ (8002354 <HAL_DMA_Init+0x66c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d059      	beq.n	80022ae <HAL_DMA_Init+0x5c6>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a56      	ldr	r2, [pc, #344]	@ (8002358 <HAL_DMA_Init+0x670>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d054      	beq.n	80022ae <HAL_DMA_Init+0x5c6>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a54      	ldr	r2, [pc, #336]	@ (800235c <HAL_DMA_Init+0x674>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d04f      	beq.n	80022ae <HAL_DMA_Init+0x5c6>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a53      	ldr	r2, [pc, #332]	@ (8002360 <HAL_DMA_Init+0x678>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d04a      	beq.n	80022ae <HAL_DMA_Init+0x5c6>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a51      	ldr	r2, [pc, #324]	@ (8002364 <HAL_DMA_Init+0x67c>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d045      	beq.n	80022ae <HAL_DMA_Init+0x5c6>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a50      	ldr	r2, [pc, #320]	@ (8002368 <HAL_DMA_Init+0x680>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d040      	beq.n	80022ae <HAL_DMA_Init+0x5c6>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a4e      	ldr	r2, [pc, #312]	@ (800236c <HAL_DMA_Init+0x684>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d03b      	beq.n	80022ae <HAL_DMA_Init+0x5c6>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a4d      	ldr	r2, [pc, #308]	@ (8002370 <HAL_DMA_Init+0x688>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d036      	beq.n	80022ae <HAL_DMA_Init+0x5c6>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a4b      	ldr	r2, [pc, #300]	@ (8002374 <HAL_DMA_Init+0x68c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d031      	beq.n	80022ae <HAL_DMA_Init+0x5c6>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a4a      	ldr	r2, [pc, #296]	@ (8002378 <HAL_DMA_Init+0x690>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d02c      	beq.n	80022ae <HAL_DMA_Init+0x5c6>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a48      	ldr	r2, [pc, #288]	@ (800237c <HAL_DMA_Init+0x694>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d027      	beq.n	80022ae <HAL_DMA_Init+0x5c6>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a47      	ldr	r2, [pc, #284]	@ (8002380 <HAL_DMA_Init+0x698>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d022      	beq.n	80022ae <HAL_DMA_Init+0x5c6>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a45      	ldr	r2, [pc, #276]	@ (8002384 <HAL_DMA_Init+0x69c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d01d      	beq.n	80022ae <HAL_DMA_Init+0x5c6>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a44      	ldr	r2, [pc, #272]	@ (8002388 <HAL_DMA_Init+0x6a0>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d018      	beq.n	80022ae <HAL_DMA_Init+0x5c6>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a42      	ldr	r2, [pc, #264]	@ (800238c <HAL_DMA_Init+0x6a4>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d013      	beq.n	80022ae <HAL_DMA_Init+0x5c6>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a41      	ldr	r2, [pc, #260]	@ (8002390 <HAL_DMA_Init+0x6a8>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d00e      	beq.n	80022ae <HAL_DMA_Init+0x5c6>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a3f      	ldr	r2, [pc, #252]	@ (8002394 <HAL_DMA_Init+0x6ac>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d009      	beq.n	80022ae <HAL_DMA_Init+0x5c6>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a3e      	ldr	r2, [pc, #248]	@ (8002398 <HAL_DMA_Init+0x6b0>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d004      	beq.n	80022ae <HAL_DMA_Init+0x5c6>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a3c      	ldr	r2, [pc, #240]	@ (800239c <HAL_DMA_Init+0x6b4>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d101      	bne.n	80022b2 <HAL_DMA_Init+0x5ca>
 80022ae:	2301      	movs	r3, #1
 80022b0:	e000      	b.n	80022b4 <HAL_DMA_Init+0x5cc>
 80022b2:	2300      	movs	r3, #0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d032      	beq.n	800231e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f001 ff25 	bl	8004108 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	2b80      	cmp	r3, #128	@ 0x80
 80022c4:	d102      	bne.n	80022cc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685a      	ldr	r2, [r3, #4]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022d4:	b2d2      	uxtb	r2, r2
 80022d6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80022e0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d010      	beq.n	800230c <HAL_DMA_Init+0x624>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2b08      	cmp	r3, #8
 80022f0:	d80c      	bhi.n	800230c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f001 ffa2 	bl	800423c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002308:	605a      	str	r2, [r3, #4]
 800230a:	e008      	b.n	800231e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	a7fdabf8 	.word	0xa7fdabf8
 800233c:	cccccccd 	.word	0xcccccccd
 8002340:	40020010 	.word	0x40020010
 8002344:	40020028 	.word	0x40020028
 8002348:	40020040 	.word	0x40020040
 800234c:	40020058 	.word	0x40020058
 8002350:	40020070 	.word	0x40020070
 8002354:	40020088 	.word	0x40020088
 8002358:	400200a0 	.word	0x400200a0
 800235c:	400200b8 	.word	0x400200b8
 8002360:	40020410 	.word	0x40020410
 8002364:	40020428 	.word	0x40020428
 8002368:	40020440 	.word	0x40020440
 800236c:	40020458 	.word	0x40020458
 8002370:	40020470 	.word	0x40020470
 8002374:	40020488 	.word	0x40020488
 8002378:	400204a0 	.word	0x400204a0
 800237c:	400204b8 	.word	0x400204b8
 8002380:	58025408 	.word	0x58025408
 8002384:	5802541c 	.word	0x5802541c
 8002388:	58025430 	.word	0x58025430
 800238c:	58025444 	.word	0x58025444
 8002390:	58025458 	.word	0x58025458
 8002394:	5802546c 	.word	0x5802546c
 8002398:	58025480 	.word	0x58025480
 800239c:	58025494 	.word	0x58025494

080023a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
 80023ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023ae:	2300      	movs	r3, #0
 80023b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e226      	b.n	800280a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d101      	bne.n	80023ca <HAL_DMA_Start_IT+0x2a>
 80023c6:	2302      	movs	r3, #2
 80023c8:	e21f      	b.n	800280a <HAL_DMA_Start_IT+0x46a>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b01      	cmp	r3, #1
 80023dc:	f040 820a 	bne.w	80027f4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2202      	movs	r2, #2
 80023e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a68      	ldr	r2, [pc, #416]	@ (8002594 <HAL_DMA_Start_IT+0x1f4>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d04a      	beq.n	800248e <HAL_DMA_Start_IT+0xee>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a66      	ldr	r2, [pc, #408]	@ (8002598 <HAL_DMA_Start_IT+0x1f8>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d045      	beq.n	800248e <HAL_DMA_Start_IT+0xee>
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a65      	ldr	r2, [pc, #404]	@ (800259c <HAL_DMA_Start_IT+0x1fc>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d040      	beq.n	800248e <HAL_DMA_Start_IT+0xee>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a63      	ldr	r2, [pc, #396]	@ (80025a0 <HAL_DMA_Start_IT+0x200>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d03b      	beq.n	800248e <HAL_DMA_Start_IT+0xee>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a62      	ldr	r2, [pc, #392]	@ (80025a4 <HAL_DMA_Start_IT+0x204>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d036      	beq.n	800248e <HAL_DMA_Start_IT+0xee>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a60      	ldr	r2, [pc, #384]	@ (80025a8 <HAL_DMA_Start_IT+0x208>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d031      	beq.n	800248e <HAL_DMA_Start_IT+0xee>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a5f      	ldr	r2, [pc, #380]	@ (80025ac <HAL_DMA_Start_IT+0x20c>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d02c      	beq.n	800248e <HAL_DMA_Start_IT+0xee>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a5d      	ldr	r2, [pc, #372]	@ (80025b0 <HAL_DMA_Start_IT+0x210>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d027      	beq.n	800248e <HAL_DMA_Start_IT+0xee>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a5c      	ldr	r2, [pc, #368]	@ (80025b4 <HAL_DMA_Start_IT+0x214>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d022      	beq.n	800248e <HAL_DMA_Start_IT+0xee>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a5a      	ldr	r2, [pc, #360]	@ (80025b8 <HAL_DMA_Start_IT+0x218>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d01d      	beq.n	800248e <HAL_DMA_Start_IT+0xee>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a59      	ldr	r2, [pc, #356]	@ (80025bc <HAL_DMA_Start_IT+0x21c>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d018      	beq.n	800248e <HAL_DMA_Start_IT+0xee>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a57      	ldr	r2, [pc, #348]	@ (80025c0 <HAL_DMA_Start_IT+0x220>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d013      	beq.n	800248e <HAL_DMA_Start_IT+0xee>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a56      	ldr	r2, [pc, #344]	@ (80025c4 <HAL_DMA_Start_IT+0x224>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d00e      	beq.n	800248e <HAL_DMA_Start_IT+0xee>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a54      	ldr	r2, [pc, #336]	@ (80025c8 <HAL_DMA_Start_IT+0x228>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d009      	beq.n	800248e <HAL_DMA_Start_IT+0xee>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a53      	ldr	r2, [pc, #332]	@ (80025cc <HAL_DMA_Start_IT+0x22c>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d004      	beq.n	800248e <HAL_DMA_Start_IT+0xee>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a51      	ldr	r2, [pc, #324]	@ (80025d0 <HAL_DMA_Start_IT+0x230>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d108      	bne.n	80024a0 <HAL_DMA_Start_IT+0x100>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 0201 	bic.w	r2, r2, #1
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	e007      	b.n	80024b0 <HAL_DMA_Start_IT+0x110>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 0201 	bic.w	r2, r2, #1
 80024ae:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	68b9      	ldr	r1, [r7, #8]
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f001 fb4c 	bl	8003b54 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a34      	ldr	r2, [pc, #208]	@ (8002594 <HAL_DMA_Start_IT+0x1f4>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d04a      	beq.n	800255c <HAL_DMA_Start_IT+0x1bc>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a33      	ldr	r2, [pc, #204]	@ (8002598 <HAL_DMA_Start_IT+0x1f8>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d045      	beq.n	800255c <HAL_DMA_Start_IT+0x1bc>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a31      	ldr	r2, [pc, #196]	@ (800259c <HAL_DMA_Start_IT+0x1fc>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d040      	beq.n	800255c <HAL_DMA_Start_IT+0x1bc>
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a30      	ldr	r2, [pc, #192]	@ (80025a0 <HAL_DMA_Start_IT+0x200>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d03b      	beq.n	800255c <HAL_DMA_Start_IT+0x1bc>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a2e      	ldr	r2, [pc, #184]	@ (80025a4 <HAL_DMA_Start_IT+0x204>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d036      	beq.n	800255c <HAL_DMA_Start_IT+0x1bc>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a2d      	ldr	r2, [pc, #180]	@ (80025a8 <HAL_DMA_Start_IT+0x208>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d031      	beq.n	800255c <HAL_DMA_Start_IT+0x1bc>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a2b      	ldr	r2, [pc, #172]	@ (80025ac <HAL_DMA_Start_IT+0x20c>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d02c      	beq.n	800255c <HAL_DMA_Start_IT+0x1bc>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a2a      	ldr	r2, [pc, #168]	@ (80025b0 <HAL_DMA_Start_IT+0x210>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d027      	beq.n	800255c <HAL_DMA_Start_IT+0x1bc>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a28      	ldr	r2, [pc, #160]	@ (80025b4 <HAL_DMA_Start_IT+0x214>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d022      	beq.n	800255c <HAL_DMA_Start_IT+0x1bc>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a27      	ldr	r2, [pc, #156]	@ (80025b8 <HAL_DMA_Start_IT+0x218>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d01d      	beq.n	800255c <HAL_DMA_Start_IT+0x1bc>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a25      	ldr	r2, [pc, #148]	@ (80025bc <HAL_DMA_Start_IT+0x21c>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d018      	beq.n	800255c <HAL_DMA_Start_IT+0x1bc>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a24      	ldr	r2, [pc, #144]	@ (80025c0 <HAL_DMA_Start_IT+0x220>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d013      	beq.n	800255c <HAL_DMA_Start_IT+0x1bc>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a22      	ldr	r2, [pc, #136]	@ (80025c4 <HAL_DMA_Start_IT+0x224>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d00e      	beq.n	800255c <HAL_DMA_Start_IT+0x1bc>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a21      	ldr	r2, [pc, #132]	@ (80025c8 <HAL_DMA_Start_IT+0x228>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d009      	beq.n	800255c <HAL_DMA_Start_IT+0x1bc>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a1f      	ldr	r2, [pc, #124]	@ (80025cc <HAL_DMA_Start_IT+0x22c>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d004      	beq.n	800255c <HAL_DMA_Start_IT+0x1bc>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a1e      	ldr	r2, [pc, #120]	@ (80025d0 <HAL_DMA_Start_IT+0x230>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d101      	bne.n	8002560 <HAL_DMA_Start_IT+0x1c0>
 800255c:	2301      	movs	r3, #1
 800255e:	e000      	b.n	8002562 <HAL_DMA_Start_IT+0x1c2>
 8002560:	2300      	movs	r3, #0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d036      	beq.n	80025d4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f023 021e 	bic.w	r2, r3, #30
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f042 0216 	orr.w	r2, r2, #22
 8002578:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257e:	2b00      	cmp	r3, #0
 8002580:	d03e      	beq.n	8002600 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f042 0208 	orr.w	r2, r2, #8
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	e035      	b.n	8002600 <HAL_DMA_Start_IT+0x260>
 8002594:	40020010 	.word	0x40020010
 8002598:	40020028 	.word	0x40020028
 800259c:	40020040 	.word	0x40020040
 80025a0:	40020058 	.word	0x40020058
 80025a4:	40020070 	.word	0x40020070
 80025a8:	40020088 	.word	0x40020088
 80025ac:	400200a0 	.word	0x400200a0
 80025b0:	400200b8 	.word	0x400200b8
 80025b4:	40020410 	.word	0x40020410
 80025b8:	40020428 	.word	0x40020428
 80025bc:	40020440 	.word	0x40020440
 80025c0:	40020458 	.word	0x40020458
 80025c4:	40020470 	.word	0x40020470
 80025c8:	40020488 	.word	0x40020488
 80025cc:	400204a0 	.word	0x400204a0
 80025d0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f023 020e 	bic.w	r2, r3, #14
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f042 020a 	orr.w	r2, r2, #10
 80025e6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d007      	beq.n	8002600 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f042 0204 	orr.w	r2, r2, #4
 80025fe:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a83      	ldr	r2, [pc, #524]	@ (8002814 <HAL_DMA_Start_IT+0x474>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d072      	beq.n	80026f0 <HAL_DMA_Start_IT+0x350>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a82      	ldr	r2, [pc, #520]	@ (8002818 <HAL_DMA_Start_IT+0x478>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d06d      	beq.n	80026f0 <HAL_DMA_Start_IT+0x350>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a80      	ldr	r2, [pc, #512]	@ (800281c <HAL_DMA_Start_IT+0x47c>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d068      	beq.n	80026f0 <HAL_DMA_Start_IT+0x350>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a7f      	ldr	r2, [pc, #508]	@ (8002820 <HAL_DMA_Start_IT+0x480>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d063      	beq.n	80026f0 <HAL_DMA_Start_IT+0x350>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a7d      	ldr	r2, [pc, #500]	@ (8002824 <HAL_DMA_Start_IT+0x484>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d05e      	beq.n	80026f0 <HAL_DMA_Start_IT+0x350>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a7c      	ldr	r2, [pc, #496]	@ (8002828 <HAL_DMA_Start_IT+0x488>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d059      	beq.n	80026f0 <HAL_DMA_Start_IT+0x350>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a7a      	ldr	r2, [pc, #488]	@ (800282c <HAL_DMA_Start_IT+0x48c>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d054      	beq.n	80026f0 <HAL_DMA_Start_IT+0x350>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a79      	ldr	r2, [pc, #484]	@ (8002830 <HAL_DMA_Start_IT+0x490>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d04f      	beq.n	80026f0 <HAL_DMA_Start_IT+0x350>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a77      	ldr	r2, [pc, #476]	@ (8002834 <HAL_DMA_Start_IT+0x494>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d04a      	beq.n	80026f0 <HAL_DMA_Start_IT+0x350>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a76      	ldr	r2, [pc, #472]	@ (8002838 <HAL_DMA_Start_IT+0x498>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d045      	beq.n	80026f0 <HAL_DMA_Start_IT+0x350>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a74      	ldr	r2, [pc, #464]	@ (800283c <HAL_DMA_Start_IT+0x49c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d040      	beq.n	80026f0 <HAL_DMA_Start_IT+0x350>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a73      	ldr	r2, [pc, #460]	@ (8002840 <HAL_DMA_Start_IT+0x4a0>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d03b      	beq.n	80026f0 <HAL_DMA_Start_IT+0x350>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a71      	ldr	r2, [pc, #452]	@ (8002844 <HAL_DMA_Start_IT+0x4a4>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d036      	beq.n	80026f0 <HAL_DMA_Start_IT+0x350>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a70      	ldr	r2, [pc, #448]	@ (8002848 <HAL_DMA_Start_IT+0x4a8>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d031      	beq.n	80026f0 <HAL_DMA_Start_IT+0x350>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a6e      	ldr	r2, [pc, #440]	@ (800284c <HAL_DMA_Start_IT+0x4ac>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d02c      	beq.n	80026f0 <HAL_DMA_Start_IT+0x350>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a6d      	ldr	r2, [pc, #436]	@ (8002850 <HAL_DMA_Start_IT+0x4b0>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d027      	beq.n	80026f0 <HAL_DMA_Start_IT+0x350>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a6b      	ldr	r2, [pc, #428]	@ (8002854 <HAL_DMA_Start_IT+0x4b4>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d022      	beq.n	80026f0 <HAL_DMA_Start_IT+0x350>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a6a      	ldr	r2, [pc, #424]	@ (8002858 <HAL_DMA_Start_IT+0x4b8>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d01d      	beq.n	80026f0 <HAL_DMA_Start_IT+0x350>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a68      	ldr	r2, [pc, #416]	@ (800285c <HAL_DMA_Start_IT+0x4bc>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d018      	beq.n	80026f0 <HAL_DMA_Start_IT+0x350>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a67      	ldr	r2, [pc, #412]	@ (8002860 <HAL_DMA_Start_IT+0x4c0>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d013      	beq.n	80026f0 <HAL_DMA_Start_IT+0x350>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a65      	ldr	r2, [pc, #404]	@ (8002864 <HAL_DMA_Start_IT+0x4c4>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d00e      	beq.n	80026f0 <HAL_DMA_Start_IT+0x350>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a64      	ldr	r2, [pc, #400]	@ (8002868 <HAL_DMA_Start_IT+0x4c8>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d009      	beq.n	80026f0 <HAL_DMA_Start_IT+0x350>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a62      	ldr	r2, [pc, #392]	@ (800286c <HAL_DMA_Start_IT+0x4cc>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d004      	beq.n	80026f0 <HAL_DMA_Start_IT+0x350>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a61      	ldr	r2, [pc, #388]	@ (8002870 <HAL_DMA_Start_IT+0x4d0>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d101      	bne.n	80026f4 <HAL_DMA_Start_IT+0x354>
 80026f0:	2301      	movs	r3, #1
 80026f2:	e000      	b.n	80026f6 <HAL_DMA_Start_IT+0x356>
 80026f4:	2300      	movs	r3, #0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d01a      	beq.n	8002730 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d007      	beq.n	8002718 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002712:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002716:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800271c:	2b00      	cmp	r3, #0
 800271e:	d007      	beq.n	8002730 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800272a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800272e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a37      	ldr	r2, [pc, #220]	@ (8002814 <HAL_DMA_Start_IT+0x474>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d04a      	beq.n	80027d0 <HAL_DMA_Start_IT+0x430>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a36      	ldr	r2, [pc, #216]	@ (8002818 <HAL_DMA_Start_IT+0x478>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d045      	beq.n	80027d0 <HAL_DMA_Start_IT+0x430>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a34      	ldr	r2, [pc, #208]	@ (800281c <HAL_DMA_Start_IT+0x47c>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d040      	beq.n	80027d0 <HAL_DMA_Start_IT+0x430>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a33      	ldr	r2, [pc, #204]	@ (8002820 <HAL_DMA_Start_IT+0x480>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d03b      	beq.n	80027d0 <HAL_DMA_Start_IT+0x430>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a31      	ldr	r2, [pc, #196]	@ (8002824 <HAL_DMA_Start_IT+0x484>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d036      	beq.n	80027d0 <HAL_DMA_Start_IT+0x430>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a30      	ldr	r2, [pc, #192]	@ (8002828 <HAL_DMA_Start_IT+0x488>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d031      	beq.n	80027d0 <HAL_DMA_Start_IT+0x430>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a2e      	ldr	r2, [pc, #184]	@ (800282c <HAL_DMA_Start_IT+0x48c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d02c      	beq.n	80027d0 <HAL_DMA_Start_IT+0x430>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a2d      	ldr	r2, [pc, #180]	@ (8002830 <HAL_DMA_Start_IT+0x490>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d027      	beq.n	80027d0 <HAL_DMA_Start_IT+0x430>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a2b      	ldr	r2, [pc, #172]	@ (8002834 <HAL_DMA_Start_IT+0x494>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d022      	beq.n	80027d0 <HAL_DMA_Start_IT+0x430>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a2a      	ldr	r2, [pc, #168]	@ (8002838 <HAL_DMA_Start_IT+0x498>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d01d      	beq.n	80027d0 <HAL_DMA_Start_IT+0x430>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a28      	ldr	r2, [pc, #160]	@ (800283c <HAL_DMA_Start_IT+0x49c>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d018      	beq.n	80027d0 <HAL_DMA_Start_IT+0x430>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a27      	ldr	r2, [pc, #156]	@ (8002840 <HAL_DMA_Start_IT+0x4a0>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d013      	beq.n	80027d0 <HAL_DMA_Start_IT+0x430>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a25      	ldr	r2, [pc, #148]	@ (8002844 <HAL_DMA_Start_IT+0x4a4>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d00e      	beq.n	80027d0 <HAL_DMA_Start_IT+0x430>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a24      	ldr	r2, [pc, #144]	@ (8002848 <HAL_DMA_Start_IT+0x4a8>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d009      	beq.n	80027d0 <HAL_DMA_Start_IT+0x430>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a22      	ldr	r2, [pc, #136]	@ (800284c <HAL_DMA_Start_IT+0x4ac>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d004      	beq.n	80027d0 <HAL_DMA_Start_IT+0x430>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a21      	ldr	r2, [pc, #132]	@ (8002850 <HAL_DMA_Start_IT+0x4b0>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d108      	bne.n	80027e2 <HAL_DMA_Start_IT+0x442>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 0201 	orr.w	r2, r2, #1
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	e012      	b.n	8002808 <HAL_DMA_Start_IT+0x468>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f042 0201 	orr.w	r2, r2, #1
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	e009      	b.n	8002808 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80027fa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002808:	7dfb      	ldrb	r3, [r7, #23]
}
 800280a:	4618      	mov	r0, r3
 800280c:	3718      	adds	r7, #24
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40020010 	.word	0x40020010
 8002818:	40020028 	.word	0x40020028
 800281c:	40020040 	.word	0x40020040
 8002820:	40020058 	.word	0x40020058
 8002824:	40020070 	.word	0x40020070
 8002828:	40020088 	.word	0x40020088
 800282c:	400200a0 	.word	0x400200a0
 8002830:	400200b8 	.word	0x400200b8
 8002834:	40020410 	.word	0x40020410
 8002838:	40020428 	.word	0x40020428
 800283c:	40020440 	.word	0x40020440
 8002840:	40020458 	.word	0x40020458
 8002844:	40020470 	.word	0x40020470
 8002848:	40020488 	.word	0x40020488
 800284c:	400204a0 	.word	0x400204a0
 8002850:	400204b8 	.word	0x400204b8
 8002854:	58025408 	.word	0x58025408
 8002858:	5802541c 	.word	0x5802541c
 800285c:	58025430 	.word	0x58025430
 8002860:	58025444 	.word	0x58025444
 8002864:	58025458 	.word	0x58025458
 8002868:	5802546c 	.word	0x5802546c
 800286c:	58025480 	.word	0x58025480
 8002870:	58025494 	.word	0x58025494

08002874 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e237      	b.n	8002cf6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d004      	beq.n	800289c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2280      	movs	r2, #128	@ 0x80
 8002896:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e22c      	b.n	8002cf6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a5c      	ldr	r2, [pc, #368]	@ (8002a14 <HAL_DMA_Abort_IT+0x1a0>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d04a      	beq.n	800293c <HAL_DMA_Abort_IT+0xc8>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a5b      	ldr	r2, [pc, #364]	@ (8002a18 <HAL_DMA_Abort_IT+0x1a4>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d045      	beq.n	800293c <HAL_DMA_Abort_IT+0xc8>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a59      	ldr	r2, [pc, #356]	@ (8002a1c <HAL_DMA_Abort_IT+0x1a8>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d040      	beq.n	800293c <HAL_DMA_Abort_IT+0xc8>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a58      	ldr	r2, [pc, #352]	@ (8002a20 <HAL_DMA_Abort_IT+0x1ac>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d03b      	beq.n	800293c <HAL_DMA_Abort_IT+0xc8>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a56      	ldr	r2, [pc, #344]	@ (8002a24 <HAL_DMA_Abort_IT+0x1b0>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d036      	beq.n	800293c <HAL_DMA_Abort_IT+0xc8>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a55      	ldr	r2, [pc, #340]	@ (8002a28 <HAL_DMA_Abort_IT+0x1b4>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d031      	beq.n	800293c <HAL_DMA_Abort_IT+0xc8>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a53      	ldr	r2, [pc, #332]	@ (8002a2c <HAL_DMA_Abort_IT+0x1b8>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d02c      	beq.n	800293c <HAL_DMA_Abort_IT+0xc8>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a52      	ldr	r2, [pc, #328]	@ (8002a30 <HAL_DMA_Abort_IT+0x1bc>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d027      	beq.n	800293c <HAL_DMA_Abort_IT+0xc8>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a50      	ldr	r2, [pc, #320]	@ (8002a34 <HAL_DMA_Abort_IT+0x1c0>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d022      	beq.n	800293c <HAL_DMA_Abort_IT+0xc8>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a4f      	ldr	r2, [pc, #316]	@ (8002a38 <HAL_DMA_Abort_IT+0x1c4>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d01d      	beq.n	800293c <HAL_DMA_Abort_IT+0xc8>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a4d      	ldr	r2, [pc, #308]	@ (8002a3c <HAL_DMA_Abort_IT+0x1c8>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d018      	beq.n	800293c <HAL_DMA_Abort_IT+0xc8>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a4c      	ldr	r2, [pc, #304]	@ (8002a40 <HAL_DMA_Abort_IT+0x1cc>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d013      	beq.n	800293c <HAL_DMA_Abort_IT+0xc8>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a4a      	ldr	r2, [pc, #296]	@ (8002a44 <HAL_DMA_Abort_IT+0x1d0>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d00e      	beq.n	800293c <HAL_DMA_Abort_IT+0xc8>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a49      	ldr	r2, [pc, #292]	@ (8002a48 <HAL_DMA_Abort_IT+0x1d4>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d009      	beq.n	800293c <HAL_DMA_Abort_IT+0xc8>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a47      	ldr	r2, [pc, #284]	@ (8002a4c <HAL_DMA_Abort_IT+0x1d8>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d004      	beq.n	800293c <HAL_DMA_Abort_IT+0xc8>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a46      	ldr	r2, [pc, #280]	@ (8002a50 <HAL_DMA_Abort_IT+0x1dc>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d101      	bne.n	8002940 <HAL_DMA_Abort_IT+0xcc>
 800293c:	2301      	movs	r3, #1
 800293e:	e000      	b.n	8002942 <HAL_DMA_Abort_IT+0xce>
 8002940:	2300      	movs	r3, #0
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 8086 	beq.w	8002a54 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2204      	movs	r2, #4
 800294c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a2f      	ldr	r2, [pc, #188]	@ (8002a14 <HAL_DMA_Abort_IT+0x1a0>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d04a      	beq.n	80029f0 <HAL_DMA_Abort_IT+0x17c>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a2e      	ldr	r2, [pc, #184]	@ (8002a18 <HAL_DMA_Abort_IT+0x1a4>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d045      	beq.n	80029f0 <HAL_DMA_Abort_IT+0x17c>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a2c      	ldr	r2, [pc, #176]	@ (8002a1c <HAL_DMA_Abort_IT+0x1a8>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d040      	beq.n	80029f0 <HAL_DMA_Abort_IT+0x17c>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a2b      	ldr	r2, [pc, #172]	@ (8002a20 <HAL_DMA_Abort_IT+0x1ac>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d03b      	beq.n	80029f0 <HAL_DMA_Abort_IT+0x17c>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a29      	ldr	r2, [pc, #164]	@ (8002a24 <HAL_DMA_Abort_IT+0x1b0>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d036      	beq.n	80029f0 <HAL_DMA_Abort_IT+0x17c>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a28      	ldr	r2, [pc, #160]	@ (8002a28 <HAL_DMA_Abort_IT+0x1b4>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d031      	beq.n	80029f0 <HAL_DMA_Abort_IT+0x17c>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a26      	ldr	r2, [pc, #152]	@ (8002a2c <HAL_DMA_Abort_IT+0x1b8>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d02c      	beq.n	80029f0 <HAL_DMA_Abort_IT+0x17c>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a25      	ldr	r2, [pc, #148]	@ (8002a30 <HAL_DMA_Abort_IT+0x1bc>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d027      	beq.n	80029f0 <HAL_DMA_Abort_IT+0x17c>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a23      	ldr	r2, [pc, #140]	@ (8002a34 <HAL_DMA_Abort_IT+0x1c0>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d022      	beq.n	80029f0 <HAL_DMA_Abort_IT+0x17c>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a22      	ldr	r2, [pc, #136]	@ (8002a38 <HAL_DMA_Abort_IT+0x1c4>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d01d      	beq.n	80029f0 <HAL_DMA_Abort_IT+0x17c>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a20      	ldr	r2, [pc, #128]	@ (8002a3c <HAL_DMA_Abort_IT+0x1c8>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d018      	beq.n	80029f0 <HAL_DMA_Abort_IT+0x17c>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a1f      	ldr	r2, [pc, #124]	@ (8002a40 <HAL_DMA_Abort_IT+0x1cc>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d013      	beq.n	80029f0 <HAL_DMA_Abort_IT+0x17c>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a1d      	ldr	r2, [pc, #116]	@ (8002a44 <HAL_DMA_Abort_IT+0x1d0>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d00e      	beq.n	80029f0 <HAL_DMA_Abort_IT+0x17c>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a1c      	ldr	r2, [pc, #112]	@ (8002a48 <HAL_DMA_Abort_IT+0x1d4>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d009      	beq.n	80029f0 <HAL_DMA_Abort_IT+0x17c>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a1a      	ldr	r2, [pc, #104]	@ (8002a4c <HAL_DMA_Abort_IT+0x1d8>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d004      	beq.n	80029f0 <HAL_DMA_Abort_IT+0x17c>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a19      	ldr	r2, [pc, #100]	@ (8002a50 <HAL_DMA_Abort_IT+0x1dc>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d108      	bne.n	8002a02 <HAL_DMA_Abort_IT+0x18e>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 0201 	bic.w	r2, r2, #1
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	e178      	b.n	8002cf4 <HAL_DMA_Abort_IT+0x480>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 0201 	bic.w	r2, r2, #1
 8002a10:	601a      	str	r2, [r3, #0]
 8002a12:	e16f      	b.n	8002cf4 <HAL_DMA_Abort_IT+0x480>
 8002a14:	40020010 	.word	0x40020010
 8002a18:	40020028 	.word	0x40020028
 8002a1c:	40020040 	.word	0x40020040
 8002a20:	40020058 	.word	0x40020058
 8002a24:	40020070 	.word	0x40020070
 8002a28:	40020088 	.word	0x40020088
 8002a2c:	400200a0 	.word	0x400200a0
 8002a30:	400200b8 	.word	0x400200b8
 8002a34:	40020410 	.word	0x40020410
 8002a38:	40020428 	.word	0x40020428
 8002a3c:	40020440 	.word	0x40020440
 8002a40:	40020458 	.word	0x40020458
 8002a44:	40020470 	.word	0x40020470
 8002a48:	40020488 	.word	0x40020488
 8002a4c:	400204a0 	.word	0x400204a0
 8002a50:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 020e 	bic.w	r2, r2, #14
 8002a62:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a6c      	ldr	r2, [pc, #432]	@ (8002c1c <HAL_DMA_Abort_IT+0x3a8>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d04a      	beq.n	8002b04 <HAL_DMA_Abort_IT+0x290>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a6b      	ldr	r2, [pc, #428]	@ (8002c20 <HAL_DMA_Abort_IT+0x3ac>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d045      	beq.n	8002b04 <HAL_DMA_Abort_IT+0x290>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a69      	ldr	r2, [pc, #420]	@ (8002c24 <HAL_DMA_Abort_IT+0x3b0>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d040      	beq.n	8002b04 <HAL_DMA_Abort_IT+0x290>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a68      	ldr	r2, [pc, #416]	@ (8002c28 <HAL_DMA_Abort_IT+0x3b4>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d03b      	beq.n	8002b04 <HAL_DMA_Abort_IT+0x290>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a66      	ldr	r2, [pc, #408]	@ (8002c2c <HAL_DMA_Abort_IT+0x3b8>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d036      	beq.n	8002b04 <HAL_DMA_Abort_IT+0x290>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a65      	ldr	r2, [pc, #404]	@ (8002c30 <HAL_DMA_Abort_IT+0x3bc>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d031      	beq.n	8002b04 <HAL_DMA_Abort_IT+0x290>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a63      	ldr	r2, [pc, #396]	@ (8002c34 <HAL_DMA_Abort_IT+0x3c0>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d02c      	beq.n	8002b04 <HAL_DMA_Abort_IT+0x290>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a62      	ldr	r2, [pc, #392]	@ (8002c38 <HAL_DMA_Abort_IT+0x3c4>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d027      	beq.n	8002b04 <HAL_DMA_Abort_IT+0x290>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a60      	ldr	r2, [pc, #384]	@ (8002c3c <HAL_DMA_Abort_IT+0x3c8>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d022      	beq.n	8002b04 <HAL_DMA_Abort_IT+0x290>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a5f      	ldr	r2, [pc, #380]	@ (8002c40 <HAL_DMA_Abort_IT+0x3cc>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d01d      	beq.n	8002b04 <HAL_DMA_Abort_IT+0x290>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a5d      	ldr	r2, [pc, #372]	@ (8002c44 <HAL_DMA_Abort_IT+0x3d0>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d018      	beq.n	8002b04 <HAL_DMA_Abort_IT+0x290>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a5c      	ldr	r2, [pc, #368]	@ (8002c48 <HAL_DMA_Abort_IT+0x3d4>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d013      	beq.n	8002b04 <HAL_DMA_Abort_IT+0x290>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a5a      	ldr	r2, [pc, #360]	@ (8002c4c <HAL_DMA_Abort_IT+0x3d8>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d00e      	beq.n	8002b04 <HAL_DMA_Abort_IT+0x290>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a59      	ldr	r2, [pc, #356]	@ (8002c50 <HAL_DMA_Abort_IT+0x3dc>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d009      	beq.n	8002b04 <HAL_DMA_Abort_IT+0x290>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a57      	ldr	r2, [pc, #348]	@ (8002c54 <HAL_DMA_Abort_IT+0x3e0>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d004      	beq.n	8002b04 <HAL_DMA_Abort_IT+0x290>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a56      	ldr	r2, [pc, #344]	@ (8002c58 <HAL_DMA_Abort_IT+0x3e4>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d108      	bne.n	8002b16 <HAL_DMA_Abort_IT+0x2a2>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f022 0201 	bic.w	r2, r2, #1
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	e007      	b.n	8002b26 <HAL_DMA_Abort_IT+0x2b2>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 0201 	bic.w	r2, r2, #1
 8002b24:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a3c      	ldr	r2, [pc, #240]	@ (8002c1c <HAL_DMA_Abort_IT+0x3a8>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d072      	beq.n	8002c16 <HAL_DMA_Abort_IT+0x3a2>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a3a      	ldr	r2, [pc, #232]	@ (8002c20 <HAL_DMA_Abort_IT+0x3ac>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d06d      	beq.n	8002c16 <HAL_DMA_Abort_IT+0x3a2>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a39      	ldr	r2, [pc, #228]	@ (8002c24 <HAL_DMA_Abort_IT+0x3b0>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d068      	beq.n	8002c16 <HAL_DMA_Abort_IT+0x3a2>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a37      	ldr	r2, [pc, #220]	@ (8002c28 <HAL_DMA_Abort_IT+0x3b4>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d063      	beq.n	8002c16 <HAL_DMA_Abort_IT+0x3a2>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a36      	ldr	r2, [pc, #216]	@ (8002c2c <HAL_DMA_Abort_IT+0x3b8>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d05e      	beq.n	8002c16 <HAL_DMA_Abort_IT+0x3a2>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a34      	ldr	r2, [pc, #208]	@ (8002c30 <HAL_DMA_Abort_IT+0x3bc>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d059      	beq.n	8002c16 <HAL_DMA_Abort_IT+0x3a2>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a33      	ldr	r2, [pc, #204]	@ (8002c34 <HAL_DMA_Abort_IT+0x3c0>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d054      	beq.n	8002c16 <HAL_DMA_Abort_IT+0x3a2>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a31      	ldr	r2, [pc, #196]	@ (8002c38 <HAL_DMA_Abort_IT+0x3c4>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d04f      	beq.n	8002c16 <HAL_DMA_Abort_IT+0x3a2>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a30      	ldr	r2, [pc, #192]	@ (8002c3c <HAL_DMA_Abort_IT+0x3c8>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d04a      	beq.n	8002c16 <HAL_DMA_Abort_IT+0x3a2>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a2e      	ldr	r2, [pc, #184]	@ (8002c40 <HAL_DMA_Abort_IT+0x3cc>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d045      	beq.n	8002c16 <HAL_DMA_Abort_IT+0x3a2>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a2d      	ldr	r2, [pc, #180]	@ (8002c44 <HAL_DMA_Abort_IT+0x3d0>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d040      	beq.n	8002c16 <HAL_DMA_Abort_IT+0x3a2>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a2b      	ldr	r2, [pc, #172]	@ (8002c48 <HAL_DMA_Abort_IT+0x3d4>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d03b      	beq.n	8002c16 <HAL_DMA_Abort_IT+0x3a2>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a2a      	ldr	r2, [pc, #168]	@ (8002c4c <HAL_DMA_Abort_IT+0x3d8>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d036      	beq.n	8002c16 <HAL_DMA_Abort_IT+0x3a2>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a28      	ldr	r2, [pc, #160]	@ (8002c50 <HAL_DMA_Abort_IT+0x3dc>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d031      	beq.n	8002c16 <HAL_DMA_Abort_IT+0x3a2>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a27      	ldr	r2, [pc, #156]	@ (8002c54 <HAL_DMA_Abort_IT+0x3e0>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d02c      	beq.n	8002c16 <HAL_DMA_Abort_IT+0x3a2>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a25      	ldr	r2, [pc, #148]	@ (8002c58 <HAL_DMA_Abort_IT+0x3e4>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d027      	beq.n	8002c16 <HAL_DMA_Abort_IT+0x3a2>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a24      	ldr	r2, [pc, #144]	@ (8002c5c <HAL_DMA_Abort_IT+0x3e8>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d022      	beq.n	8002c16 <HAL_DMA_Abort_IT+0x3a2>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a22      	ldr	r2, [pc, #136]	@ (8002c60 <HAL_DMA_Abort_IT+0x3ec>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d01d      	beq.n	8002c16 <HAL_DMA_Abort_IT+0x3a2>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a21      	ldr	r2, [pc, #132]	@ (8002c64 <HAL_DMA_Abort_IT+0x3f0>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d018      	beq.n	8002c16 <HAL_DMA_Abort_IT+0x3a2>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a1f      	ldr	r2, [pc, #124]	@ (8002c68 <HAL_DMA_Abort_IT+0x3f4>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d013      	beq.n	8002c16 <HAL_DMA_Abort_IT+0x3a2>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a1e      	ldr	r2, [pc, #120]	@ (8002c6c <HAL_DMA_Abort_IT+0x3f8>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d00e      	beq.n	8002c16 <HAL_DMA_Abort_IT+0x3a2>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a1c      	ldr	r2, [pc, #112]	@ (8002c70 <HAL_DMA_Abort_IT+0x3fc>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d009      	beq.n	8002c16 <HAL_DMA_Abort_IT+0x3a2>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a1b      	ldr	r2, [pc, #108]	@ (8002c74 <HAL_DMA_Abort_IT+0x400>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d004      	beq.n	8002c16 <HAL_DMA_Abort_IT+0x3a2>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a19      	ldr	r2, [pc, #100]	@ (8002c78 <HAL_DMA_Abort_IT+0x404>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d132      	bne.n	8002c7c <HAL_DMA_Abort_IT+0x408>
 8002c16:	2301      	movs	r3, #1
 8002c18:	e031      	b.n	8002c7e <HAL_DMA_Abort_IT+0x40a>
 8002c1a:	bf00      	nop
 8002c1c:	40020010 	.word	0x40020010
 8002c20:	40020028 	.word	0x40020028
 8002c24:	40020040 	.word	0x40020040
 8002c28:	40020058 	.word	0x40020058
 8002c2c:	40020070 	.word	0x40020070
 8002c30:	40020088 	.word	0x40020088
 8002c34:	400200a0 	.word	0x400200a0
 8002c38:	400200b8 	.word	0x400200b8
 8002c3c:	40020410 	.word	0x40020410
 8002c40:	40020428 	.word	0x40020428
 8002c44:	40020440 	.word	0x40020440
 8002c48:	40020458 	.word	0x40020458
 8002c4c:	40020470 	.word	0x40020470
 8002c50:	40020488 	.word	0x40020488
 8002c54:	400204a0 	.word	0x400204a0
 8002c58:	400204b8 	.word	0x400204b8
 8002c5c:	58025408 	.word	0x58025408
 8002c60:	5802541c 	.word	0x5802541c
 8002c64:	58025430 	.word	0x58025430
 8002c68:	58025444 	.word	0x58025444
 8002c6c:	58025458 	.word	0x58025458
 8002c70:	5802546c 	.word	0x5802546c
 8002c74:	58025480 	.word	0x58025480
 8002c78:	58025494 	.word	0x58025494
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d028      	beq.n	8002cd4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c90:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c96:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c9c:	f003 031f 	and.w	r3, r3, #31
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	409a      	lsls	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002cb0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00c      	beq.n	8002cd4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cc4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002cc8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002cd2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d003      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop

08002d00 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b08a      	sub	sp, #40	@ 0x28
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d0c:	4b67      	ldr	r3, [pc, #412]	@ (8002eac <HAL_DMA_IRQHandler+0x1ac>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a67      	ldr	r2, [pc, #412]	@ (8002eb0 <HAL_DMA_IRQHandler+0x1b0>)
 8002d12:	fba2 2303 	umull	r2, r3, r2, r3
 8002d16:	0a9b      	lsrs	r3, r3, #10
 8002d18:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d1e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d24:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a5f      	ldr	r2, [pc, #380]	@ (8002eb4 <HAL_DMA_IRQHandler+0x1b4>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d04a      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0xd2>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a5d      	ldr	r2, [pc, #372]	@ (8002eb8 <HAL_DMA_IRQHandler+0x1b8>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d045      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0xd2>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a5c      	ldr	r2, [pc, #368]	@ (8002ebc <HAL_DMA_IRQHandler+0x1bc>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d040      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0xd2>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a5a      	ldr	r2, [pc, #360]	@ (8002ec0 <HAL_DMA_IRQHandler+0x1c0>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d03b      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0xd2>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a59      	ldr	r2, [pc, #356]	@ (8002ec4 <HAL_DMA_IRQHandler+0x1c4>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d036      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0xd2>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a57      	ldr	r2, [pc, #348]	@ (8002ec8 <HAL_DMA_IRQHandler+0x1c8>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d031      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0xd2>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a56      	ldr	r2, [pc, #344]	@ (8002ecc <HAL_DMA_IRQHandler+0x1cc>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d02c      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0xd2>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a54      	ldr	r2, [pc, #336]	@ (8002ed0 <HAL_DMA_IRQHandler+0x1d0>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d027      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0xd2>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a53      	ldr	r2, [pc, #332]	@ (8002ed4 <HAL_DMA_IRQHandler+0x1d4>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d022      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0xd2>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a51      	ldr	r2, [pc, #324]	@ (8002ed8 <HAL_DMA_IRQHandler+0x1d8>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d01d      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0xd2>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a50      	ldr	r2, [pc, #320]	@ (8002edc <HAL_DMA_IRQHandler+0x1dc>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d018      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0xd2>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a4e      	ldr	r2, [pc, #312]	@ (8002ee0 <HAL_DMA_IRQHandler+0x1e0>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d013      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0xd2>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a4d      	ldr	r2, [pc, #308]	@ (8002ee4 <HAL_DMA_IRQHandler+0x1e4>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d00e      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0xd2>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a4b      	ldr	r2, [pc, #300]	@ (8002ee8 <HAL_DMA_IRQHandler+0x1e8>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d009      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0xd2>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a4a      	ldr	r2, [pc, #296]	@ (8002eec <HAL_DMA_IRQHandler+0x1ec>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d004      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0xd2>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a48      	ldr	r2, [pc, #288]	@ (8002ef0 <HAL_DMA_IRQHandler+0x1f0>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d101      	bne.n	8002dd6 <HAL_DMA_IRQHandler+0xd6>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e000      	b.n	8002dd8 <HAL_DMA_IRQHandler+0xd8>
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f000 842b 	beq.w	8003634 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002de2:	f003 031f 	and.w	r3, r3, #31
 8002de6:	2208      	movs	r2, #8
 8002de8:	409a      	lsls	r2, r3
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	4013      	ands	r3, r2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 80a2 	beq.w	8002f38 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a2e      	ldr	r2, [pc, #184]	@ (8002eb4 <HAL_DMA_IRQHandler+0x1b4>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d04a      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x194>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a2d      	ldr	r2, [pc, #180]	@ (8002eb8 <HAL_DMA_IRQHandler+0x1b8>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d045      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x194>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a2b      	ldr	r2, [pc, #172]	@ (8002ebc <HAL_DMA_IRQHandler+0x1bc>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d040      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x194>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a2a      	ldr	r2, [pc, #168]	@ (8002ec0 <HAL_DMA_IRQHandler+0x1c0>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d03b      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x194>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a28      	ldr	r2, [pc, #160]	@ (8002ec4 <HAL_DMA_IRQHandler+0x1c4>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d036      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x194>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a27      	ldr	r2, [pc, #156]	@ (8002ec8 <HAL_DMA_IRQHandler+0x1c8>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d031      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x194>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a25      	ldr	r2, [pc, #148]	@ (8002ecc <HAL_DMA_IRQHandler+0x1cc>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d02c      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x194>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a24      	ldr	r2, [pc, #144]	@ (8002ed0 <HAL_DMA_IRQHandler+0x1d0>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d027      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x194>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a22      	ldr	r2, [pc, #136]	@ (8002ed4 <HAL_DMA_IRQHandler+0x1d4>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d022      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x194>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a21      	ldr	r2, [pc, #132]	@ (8002ed8 <HAL_DMA_IRQHandler+0x1d8>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d01d      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x194>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a1f      	ldr	r2, [pc, #124]	@ (8002edc <HAL_DMA_IRQHandler+0x1dc>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d018      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x194>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a1e      	ldr	r2, [pc, #120]	@ (8002ee0 <HAL_DMA_IRQHandler+0x1e0>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d013      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x194>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a1c      	ldr	r2, [pc, #112]	@ (8002ee4 <HAL_DMA_IRQHandler+0x1e4>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d00e      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x194>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a1b      	ldr	r2, [pc, #108]	@ (8002ee8 <HAL_DMA_IRQHandler+0x1e8>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d009      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x194>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a19      	ldr	r2, [pc, #100]	@ (8002eec <HAL_DMA_IRQHandler+0x1ec>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d004      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x194>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a18      	ldr	r2, [pc, #96]	@ (8002ef0 <HAL_DMA_IRQHandler+0x1f0>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d12f      	bne.n	8002ef4 <HAL_DMA_IRQHandler+0x1f4>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0304 	and.w	r3, r3, #4
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	bf14      	ite	ne
 8002ea2:	2301      	movne	r3, #1
 8002ea4:	2300      	moveq	r3, #0
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	e02e      	b.n	8002f08 <HAL_DMA_IRQHandler+0x208>
 8002eaa:	bf00      	nop
 8002eac:	24000004 	.word	0x24000004
 8002eb0:	1b4e81b5 	.word	0x1b4e81b5
 8002eb4:	40020010 	.word	0x40020010
 8002eb8:	40020028 	.word	0x40020028
 8002ebc:	40020040 	.word	0x40020040
 8002ec0:	40020058 	.word	0x40020058
 8002ec4:	40020070 	.word	0x40020070
 8002ec8:	40020088 	.word	0x40020088
 8002ecc:	400200a0 	.word	0x400200a0
 8002ed0:	400200b8 	.word	0x400200b8
 8002ed4:	40020410 	.word	0x40020410
 8002ed8:	40020428 	.word	0x40020428
 8002edc:	40020440 	.word	0x40020440
 8002ee0:	40020458 	.word	0x40020458
 8002ee4:	40020470 	.word	0x40020470
 8002ee8:	40020488 	.word	0x40020488
 8002eec:	400204a0 	.word	0x400204a0
 8002ef0:	400204b8 	.word	0x400204b8
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0308 	and.w	r3, r3, #8
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	bf14      	ite	ne
 8002f02:	2301      	movne	r3, #1
 8002f04:	2300      	moveq	r3, #0
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d015      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 0204 	bic.w	r2, r2, #4
 8002f1a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f20:	f003 031f 	and.w	r3, r3, #31
 8002f24:	2208      	movs	r2, #8
 8002f26:	409a      	lsls	r2, r3
 8002f28:	6a3b      	ldr	r3, [r7, #32]
 8002f2a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f30:	f043 0201 	orr.w	r2, r3, #1
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f3c:	f003 031f 	and.w	r3, r3, #31
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	fa22 f303 	lsr.w	r3, r2, r3
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d06e      	beq.n	800302c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a69      	ldr	r2, [pc, #420]	@ (80030f8 <HAL_DMA_IRQHandler+0x3f8>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d04a      	beq.n	8002fee <HAL_DMA_IRQHandler+0x2ee>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a67      	ldr	r2, [pc, #412]	@ (80030fc <HAL_DMA_IRQHandler+0x3fc>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d045      	beq.n	8002fee <HAL_DMA_IRQHandler+0x2ee>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a66      	ldr	r2, [pc, #408]	@ (8003100 <HAL_DMA_IRQHandler+0x400>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d040      	beq.n	8002fee <HAL_DMA_IRQHandler+0x2ee>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a64      	ldr	r2, [pc, #400]	@ (8003104 <HAL_DMA_IRQHandler+0x404>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d03b      	beq.n	8002fee <HAL_DMA_IRQHandler+0x2ee>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a63      	ldr	r2, [pc, #396]	@ (8003108 <HAL_DMA_IRQHandler+0x408>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d036      	beq.n	8002fee <HAL_DMA_IRQHandler+0x2ee>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a61      	ldr	r2, [pc, #388]	@ (800310c <HAL_DMA_IRQHandler+0x40c>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d031      	beq.n	8002fee <HAL_DMA_IRQHandler+0x2ee>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a60      	ldr	r2, [pc, #384]	@ (8003110 <HAL_DMA_IRQHandler+0x410>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d02c      	beq.n	8002fee <HAL_DMA_IRQHandler+0x2ee>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a5e      	ldr	r2, [pc, #376]	@ (8003114 <HAL_DMA_IRQHandler+0x414>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d027      	beq.n	8002fee <HAL_DMA_IRQHandler+0x2ee>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a5d      	ldr	r2, [pc, #372]	@ (8003118 <HAL_DMA_IRQHandler+0x418>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d022      	beq.n	8002fee <HAL_DMA_IRQHandler+0x2ee>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a5b      	ldr	r2, [pc, #364]	@ (800311c <HAL_DMA_IRQHandler+0x41c>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d01d      	beq.n	8002fee <HAL_DMA_IRQHandler+0x2ee>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a5a      	ldr	r2, [pc, #360]	@ (8003120 <HAL_DMA_IRQHandler+0x420>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d018      	beq.n	8002fee <HAL_DMA_IRQHandler+0x2ee>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a58      	ldr	r2, [pc, #352]	@ (8003124 <HAL_DMA_IRQHandler+0x424>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d013      	beq.n	8002fee <HAL_DMA_IRQHandler+0x2ee>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a57      	ldr	r2, [pc, #348]	@ (8003128 <HAL_DMA_IRQHandler+0x428>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d00e      	beq.n	8002fee <HAL_DMA_IRQHandler+0x2ee>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a55      	ldr	r2, [pc, #340]	@ (800312c <HAL_DMA_IRQHandler+0x42c>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d009      	beq.n	8002fee <HAL_DMA_IRQHandler+0x2ee>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a54      	ldr	r2, [pc, #336]	@ (8003130 <HAL_DMA_IRQHandler+0x430>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d004      	beq.n	8002fee <HAL_DMA_IRQHandler+0x2ee>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a52      	ldr	r2, [pc, #328]	@ (8003134 <HAL_DMA_IRQHandler+0x434>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d10a      	bne.n	8003004 <HAL_DMA_IRQHandler+0x304>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	bf14      	ite	ne
 8002ffc:	2301      	movne	r3, #1
 8002ffe:	2300      	moveq	r3, #0
 8003000:	b2db      	uxtb	r3, r3
 8003002:	e003      	b.n	800300c <HAL_DMA_IRQHandler+0x30c>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2300      	movs	r3, #0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00d      	beq.n	800302c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003014:	f003 031f 	and.w	r3, r3, #31
 8003018:	2201      	movs	r2, #1
 800301a:	409a      	lsls	r2, r3
 800301c:	6a3b      	ldr	r3, [r7, #32]
 800301e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003024:	f043 0202 	orr.w	r2, r3, #2
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003030:	f003 031f 	and.w	r3, r3, #31
 8003034:	2204      	movs	r2, #4
 8003036:	409a      	lsls	r2, r3
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	4013      	ands	r3, r2
 800303c:	2b00      	cmp	r3, #0
 800303e:	f000 808f 	beq.w	8003160 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a2c      	ldr	r2, [pc, #176]	@ (80030f8 <HAL_DMA_IRQHandler+0x3f8>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d04a      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x3e2>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a2a      	ldr	r2, [pc, #168]	@ (80030fc <HAL_DMA_IRQHandler+0x3fc>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d045      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x3e2>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a29      	ldr	r2, [pc, #164]	@ (8003100 <HAL_DMA_IRQHandler+0x400>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d040      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x3e2>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a27      	ldr	r2, [pc, #156]	@ (8003104 <HAL_DMA_IRQHandler+0x404>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d03b      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x3e2>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a26      	ldr	r2, [pc, #152]	@ (8003108 <HAL_DMA_IRQHandler+0x408>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d036      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x3e2>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a24      	ldr	r2, [pc, #144]	@ (800310c <HAL_DMA_IRQHandler+0x40c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d031      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x3e2>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a23      	ldr	r2, [pc, #140]	@ (8003110 <HAL_DMA_IRQHandler+0x410>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d02c      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x3e2>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a21      	ldr	r2, [pc, #132]	@ (8003114 <HAL_DMA_IRQHandler+0x414>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d027      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x3e2>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a20      	ldr	r2, [pc, #128]	@ (8003118 <HAL_DMA_IRQHandler+0x418>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d022      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x3e2>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a1e      	ldr	r2, [pc, #120]	@ (800311c <HAL_DMA_IRQHandler+0x41c>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d01d      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x3e2>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a1d      	ldr	r2, [pc, #116]	@ (8003120 <HAL_DMA_IRQHandler+0x420>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d018      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x3e2>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a1b      	ldr	r2, [pc, #108]	@ (8003124 <HAL_DMA_IRQHandler+0x424>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d013      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x3e2>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a1a      	ldr	r2, [pc, #104]	@ (8003128 <HAL_DMA_IRQHandler+0x428>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d00e      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x3e2>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a18      	ldr	r2, [pc, #96]	@ (800312c <HAL_DMA_IRQHandler+0x42c>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d009      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x3e2>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a17      	ldr	r2, [pc, #92]	@ (8003130 <HAL_DMA_IRQHandler+0x430>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d004      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x3e2>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a15      	ldr	r2, [pc, #84]	@ (8003134 <HAL_DMA_IRQHandler+0x434>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d12a      	bne.n	8003138 <HAL_DMA_IRQHandler+0x438>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	bf14      	ite	ne
 80030f0:	2301      	movne	r3, #1
 80030f2:	2300      	moveq	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	e023      	b.n	8003140 <HAL_DMA_IRQHandler+0x440>
 80030f8:	40020010 	.word	0x40020010
 80030fc:	40020028 	.word	0x40020028
 8003100:	40020040 	.word	0x40020040
 8003104:	40020058 	.word	0x40020058
 8003108:	40020070 	.word	0x40020070
 800310c:	40020088 	.word	0x40020088
 8003110:	400200a0 	.word	0x400200a0
 8003114:	400200b8 	.word	0x400200b8
 8003118:	40020410 	.word	0x40020410
 800311c:	40020428 	.word	0x40020428
 8003120:	40020440 	.word	0x40020440
 8003124:	40020458 	.word	0x40020458
 8003128:	40020470 	.word	0x40020470
 800312c:	40020488 	.word	0x40020488
 8003130:	400204a0 	.word	0x400204a0
 8003134:	400204b8 	.word	0x400204b8
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2300      	movs	r3, #0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00d      	beq.n	8003160 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003148:	f003 031f 	and.w	r3, r3, #31
 800314c:	2204      	movs	r2, #4
 800314e:	409a      	lsls	r2, r3
 8003150:	6a3b      	ldr	r3, [r7, #32]
 8003152:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003158:	f043 0204 	orr.w	r2, r3, #4
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003164:	f003 031f 	and.w	r3, r3, #31
 8003168:	2210      	movs	r2, #16
 800316a:	409a      	lsls	r2, r3
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	4013      	ands	r3, r2
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 80a6 	beq.w	80032c2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a85      	ldr	r2, [pc, #532]	@ (8003390 <HAL_DMA_IRQHandler+0x690>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d04a      	beq.n	8003216 <HAL_DMA_IRQHandler+0x516>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a83      	ldr	r2, [pc, #524]	@ (8003394 <HAL_DMA_IRQHandler+0x694>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d045      	beq.n	8003216 <HAL_DMA_IRQHandler+0x516>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a82      	ldr	r2, [pc, #520]	@ (8003398 <HAL_DMA_IRQHandler+0x698>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d040      	beq.n	8003216 <HAL_DMA_IRQHandler+0x516>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a80      	ldr	r2, [pc, #512]	@ (800339c <HAL_DMA_IRQHandler+0x69c>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d03b      	beq.n	8003216 <HAL_DMA_IRQHandler+0x516>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a7f      	ldr	r2, [pc, #508]	@ (80033a0 <HAL_DMA_IRQHandler+0x6a0>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d036      	beq.n	8003216 <HAL_DMA_IRQHandler+0x516>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a7d      	ldr	r2, [pc, #500]	@ (80033a4 <HAL_DMA_IRQHandler+0x6a4>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d031      	beq.n	8003216 <HAL_DMA_IRQHandler+0x516>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a7c      	ldr	r2, [pc, #496]	@ (80033a8 <HAL_DMA_IRQHandler+0x6a8>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d02c      	beq.n	8003216 <HAL_DMA_IRQHandler+0x516>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a7a      	ldr	r2, [pc, #488]	@ (80033ac <HAL_DMA_IRQHandler+0x6ac>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d027      	beq.n	8003216 <HAL_DMA_IRQHandler+0x516>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a79      	ldr	r2, [pc, #484]	@ (80033b0 <HAL_DMA_IRQHandler+0x6b0>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d022      	beq.n	8003216 <HAL_DMA_IRQHandler+0x516>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a77      	ldr	r2, [pc, #476]	@ (80033b4 <HAL_DMA_IRQHandler+0x6b4>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d01d      	beq.n	8003216 <HAL_DMA_IRQHandler+0x516>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a76      	ldr	r2, [pc, #472]	@ (80033b8 <HAL_DMA_IRQHandler+0x6b8>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d018      	beq.n	8003216 <HAL_DMA_IRQHandler+0x516>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a74      	ldr	r2, [pc, #464]	@ (80033bc <HAL_DMA_IRQHandler+0x6bc>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d013      	beq.n	8003216 <HAL_DMA_IRQHandler+0x516>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a73      	ldr	r2, [pc, #460]	@ (80033c0 <HAL_DMA_IRQHandler+0x6c0>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d00e      	beq.n	8003216 <HAL_DMA_IRQHandler+0x516>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a71      	ldr	r2, [pc, #452]	@ (80033c4 <HAL_DMA_IRQHandler+0x6c4>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d009      	beq.n	8003216 <HAL_DMA_IRQHandler+0x516>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a70      	ldr	r2, [pc, #448]	@ (80033c8 <HAL_DMA_IRQHandler+0x6c8>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d004      	beq.n	8003216 <HAL_DMA_IRQHandler+0x516>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a6e      	ldr	r2, [pc, #440]	@ (80033cc <HAL_DMA_IRQHandler+0x6cc>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d10a      	bne.n	800322c <HAL_DMA_IRQHandler+0x52c>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0308 	and.w	r3, r3, #8
 8003220:	2b00      	cmp	r3, #0
 8003222:	bf14      	ite	ne
 8003224:	2301      	movne	r3, #1
 8003226:	2300      	moveq	r3, #0
 8003228:	b2db      	uxtb	r3, r3
 800322a:	e009      	b.n	8003240 <HAL_DMA_IRQHandler+0x540>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0304 	and.w	r3, r3, #4
 8003236:	2b00      	cmp	r3, #0
 8003238:	bf14      	ite	ne
 800323a:	2301      	movne	r3, #1
 800323c:	2300      	moveq	r3, #0
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b00      	cmp	r3, #0
 8003242:	d03e      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003248:	f003 031f 	and.w	r3, r3, #31
 800324c:	2210      	movs	r2, #16
 800324e:	409a      	lsls	r2, r3
 8003250:	6a3b      	ldr	r3, [r7, #32]
 8003252:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d018      	beq.n	8003294 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d108      	bne.n	8003282 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003274:	2b00      	cmp	r3, #0
 8003276:	d024      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	4798      	blx	r3
 8003280:	e01f      	b.n	80032c2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003286:	2b00      	cmp	r3, #0
 8003288:	d01b      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	4798      	blx	r3
 8003292:	e016      	b.n	80032c2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d107      	bne.n	80032b2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f022 0208 	bic.w	r2, r2, #8
 80032b0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c6:	f003 031f 	and.w	r3, r3, #31
 80032ca:	2220      	movs	r2, #32
 80032cc:	409a      	lsls	r2, r3
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	4013      	ands	r3, r2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 8110 	beq.w	80034f8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a2c      	ldr	r2, [pc, #176]	@ (8003390 <HAL_DMA_IRQHandler+0x690>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d04a      	beq.n	8003378 <HAL_DMA_IRQHandler+0x678>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a2b      	ldr	r2, [pc, #172]	@ (8003394 <HAL_DMA_IRQHandler+0x694>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d045      	beq.n	8003378 <HAL_DMA_IRQHandler+0x678>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a29      	ldr	r2, [pc, #164]	@ (8003398 <HAL_DMA_IRQHandler+0x698>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d040      	beq.n	8003378 <HAL_DMA_IRQHandler+0x678>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a28      	ldr	r2, [pc, #160]	@ (800339c <HAL_DMA_IRQHandler+0x69c>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d03b      	beq.n	8003378 <HAL_DMA_IRQHandler+0x678>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a26      	ldr	r2, [pc, #152]	@ (80033a0 <HAL_DMA_IRQHandler+0x6a0>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d036      	beq.n	8003378 <HAL_DMA_IRQHandler+0x678>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a25      	ldr	r2, [pc, #148]	@ (80033a4 <HAL_DMA_IRQHandler+0x6a4>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d031      	beq.n	8003378 <HAL_DMA_IRQHandler+0x678>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a23      	ldr	r2, [pc, #140]	@ (80033a8 <HAL_DMA_IRQHandler+0x6a8>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d02c      	beq.n	8003378 <HAL_DMA_IRQHandler+0x678>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a22      	ldr	r2, [pc, #136]	@ (80033ac <HAL_DMA_IRQHandler+0x6ac>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d027      	beq.n	8003378 <HAL_DMA_IRQHandler+0x678>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a20      	ldr	r2, [pc, #128]	@ (80033b0 <HAL_DMA_IRQHandler+0x6b0>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d022      	beq.n	8003378 <HAL_DMA_IRQHandler+0x678>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a1f      	ldr	r2, [pc, #124]	@ (80033b4 <HAL_DMA_IRQHandler+0x6b4>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d01d      	beq.n	8003378 <HAL_DMA_IRQHandler+0x678>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a1d      	ldr	r2, [pc, #116]	@ (80033b8 <HAL_DMA_IRQHandler+0x6b8>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d018      	beq.n	8003378 <HAL_DMA_IRQHandler+0x678>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a1c      	ldr	r2, [pc, #112]	@ (80033bc <HAL_DMA_IRQHandler+0x6bc>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d013      	beq.n	8003378 <HAL_DMA_IRQHandler+0x678>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a1a      	ldr	r2, [pc, #104]	@ (80033c0 <HAL_DMA_IRQHandler+0x6c0>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d00e      	beq.n	8003378 <HAL_DMA_IRQHandler+0x678>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a19      	ldr	r2, [pc, #100]	@ (80033c4 <HAL_DMA_IRQHandler+0x6c4>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d009      	beq.n	8003378 <HAL_DMA_IRQHandler+0x678>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a17      	ldr	r2, [pc, #92]	@ (80033c8 <HAL_DMA_IRQHandler+0x6c8>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d004      	beq.n	8003378 <HAL_DMA_IRQHandler+0x678>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a16      	ldr	r2, [pc, #88]	@ (80033cc <HAL_DMA_IRQHandler+0x6cc>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d12b      	bne.n	80033d0 <HAL_DMA_IRQHandler+0x6d0>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0310 	and.w	r3, r3, #16
 8003382:	2b00      	cmp	r3, #0
 8003384:	bf14      	ite	ne
 8003386:	2301      	movne	r3, #1
 8003388:	2300      	moveq	r3, #0
 800338a:	b2db      	uxtb	r3, r3
 800338c:	e02a      	b.n	80033e4 <HAL_DMA_IRQHandler+0x6e4>
 800338e:	bf00      	nop
 8003390:	40020010 	.word	0x40020010
 8003394:	40020028 	.word	0x40020028
 8003398:	40020040 	.word	0x40020040
 800339c:	40020058 	.word	0x40020058
 80033a0:	40020070 	.word	0x40020070
 80033a4:	40020088 	.word	0x40020088
 80033a8:	400200a0 	.word	0x400200a0
 80033ac:	400200b8 	.word	0x400200b8
 80033b0:	40020410 	.word	0x40020410
 80033b4:	40020428 	.word	0x40020428
 80033b8:	40020440 	.word	0x40020440
 80033bc:	40020458 	.word	0x40020458
 80033c0:	40020470 	.word	0x40020470
 80033c4:	40020488 	.word	0x40020488
 80033c8:	400204a0 	.word	0x400204a0
 80033cc:	400204b8 	.word	0x400204b8
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	bf14      	ite	ne
 80033de:	2301      	movne	r3, #1
 80033e0:	2300      	moveq	r3, #0
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f000 8087 	beq.w	80034f8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ee:	f003 031f 	and.w	r3, r3, #31
 80033f2:	2220      	movs	r2, #32
 80033f4:	409a      	lsls	r2, r3
 80033f6:	6a3b      	ldr	r3, [r7, #32]
 80033f8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b04      	cmp	r3, #4
 8003404:	d139      	bne.n	800347a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 0216 	bic.w	r2, r2, #22
 8003414:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	695a      	ldr	r2, [r3, #20]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003424:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342a:	2b00      	cmp	r3, #0
 800342c:	d103      	bne.n	8003436 <HAL_DMA_IRQHandler+0x736>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003432:	2b00      	cmp	r3, #0
 8003434:	d007      	beq.n	8003446 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 0208 	bic.w	r2, r2, #8
 8003444:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800344a:	f003 031f 	and.w	r3, r3, #31
 800344e:	223f      	movs	r2, #63	@ 0x3f
 8003450:	409a      	lsls	r2, r3
 8003452:	6a3b      	ldr	r3, [r7, #32]
 8003454:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800346a:	2b00      	cmp	r3, #0
 800346c:	f000 834a 	beq.w	8003b04 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	4798      	blx	r3
          }
          return;
 8003478:	e344      	b.n	8003b04 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d018      	beq.n	80034ba <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d108      	bne.n	80034a8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800349a:	2b00      	cmp	r3, #0
 800349c:	d02c      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	4798      	blx	r3
 80034a6:	e027      	b.n	80034f8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d023      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	4798      	blx	r3
 80034b8:	e01e      	b.n	80034f8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10f      	bne.n	80034e8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f022 0210 	bic.w	r2, r2, #16
 80034d6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d003      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 8306 	beq.w	8003b0e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	f000 8088 	beq.w	8003620 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2204      	movs	r2, #4
 8003514:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a7a      	ldr	r2, [pc, #488]	@ (8003708 <HAL_DMA_IRQHandler+0xa08>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d04a      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x8b8>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a79      	ldr	r2, [pc, #484]	@ (800370c <HAL_DMA_IRQHandler+0xa0c>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d045      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x8b8>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a77      	ldr	r2, [pc, #476]	@ (8003710 <HAL_DMA_IRQHandler+0xa10>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d040      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x8b8>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a76      	ldr	r2, [pc, #472]	@ (8003714 <HAL_DMA_IRQHandler+0xa14>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d03b      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x8b8>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a74      	ldr	r2, [pc, #464]	@ (8003718 <HAL_DMA_IRQHandler+0xa18>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d036      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x8b8>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a73      	ldr	r2, [pc, #460]	@ (800371c <HAL_DMA_IRQHandler+0xa1c>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d031      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x8b8>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a71      	ldr	r2, [pc, #452]	@ (8003720 <HAL_DMA_IRQHandler+0xa20>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d02c      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x8b8>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a70      	ldr	r2, [pc, #448]	@ (8003724 <HAL_DMA_IRQHandler+0xa24>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d027      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x8b8>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a6e      	ldr	r2, [pc, #440]	@ (8003728 <HAL_DMA_IRQHandler+0xa28>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d022      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x8b8>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a6d      	ldr	r2, [pc, #436]	@ (800372c <HAL_DMA_IRQHandler+0xa2c>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d01d      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x8b8>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a6b      	ldr	r2, [pc, #428]	@ (8003730 <HAL_DMA_IRQHandler+0xa30>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d018      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x8b8>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a6a      	ldr	r2, [pc, #424]	@ (8003734 <HAL_DMA_IRQHandler+0xa34>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d013      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x8b8>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a68      	ldr	r2, [pc, #416]	@ (8003738 <HAL_DMA_IRQHandler+0xa38>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d00e      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x8b8>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a67      	ldr	r2, [pc, #412]	@ (800373c <HAL_DMA_IRQHandler+0xa3c>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d009      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x8b8>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a65      	ldr	r2, [pc, #404]	@ (8003740 <HAL_DMA_IRQHandler+0xa40>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d004      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x8b8>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a64      	ldr	r2, [pc, #400]	@ (8003744 <HAL_DMA_IRQHandler+0xa44>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d108      	bne.n	80035ca <HAL_DMA_IRQHandler+0x8ca>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0201 	bic.w	r2, r2, #1
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	e007      	b.n	80035da <HAL_DMA_IRQHandler+0x8da>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 0201 	bic.w	r2, r2, #1
 80035d8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	3301      	adds	r3, #1
 80035de:	60fb      	str	r3, [r7, #12]
 80035e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d307      	bcc.n	80035f6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1f2      	bne.n	80035da <HAL_DMA_IRQHandler+0x8da>
 80035f4:	e000      	b.n	80035f8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80035f6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d004      	beq.n	8003610 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2203      	movs	r2, #3
 800360a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800360e:	e003      	b.n	8003618 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 8272 	beq.w	8003b0e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	4798      	blx	r3
 8003632:	e26c      	b.n	8003b0e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a43      	ldr	r2, [pc, #268]	@ (8003748 <HAL_DMA_IRQHandler+0xa48>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d022      	beq.n	8003684 <HAL_DMA_IRQHandler+0x984>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a42      	ldr	r2, [pc, #264]	@ (800374c <HAL_DMA_IRQHandler+0xa4c>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d01d      	beq.n	8003684 <HAL_DMA_IRQHandler+0x984>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a40      	ldr	r2, [pc, #256]	@ (8003750 <HAL_DMA_IRQHandler+0xa50>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d018      	beq.n	8003684 <HAL_DMA_IRQHandler+0x984>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a3f      	ldr	r2, [pc, #252]	@ (8003754 <HAL_DMA_IRQHandler+0xa54>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d013      	beq.n	8003684 <HAL_DMA_IRQHandler+0x984>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a3d      	ldr	r2, [pc, #244]	@ (8003758 <HAL_DMA_IRQHandler+0xa58>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d00e      	beq.n	8003684 <HAL_DMA_IRQHandler+0x984>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a3c      	ldr	r2, [pc, #240]	@ (800375c <HAL_DMA_IRQHandler+0xa5c>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d009      	beq.n	8003684 <HAL_DMA_IRQHandler+0x984>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a3a      	ldr	r2, [pc, #232]	@ (8003760 <HAL_DMA_IRQHandler+0xa60>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d004      	beq.n	8003684 <HAL_DMA_IRQHandler+0x984>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a39      	ldr	r2, [pc, #228]	@ (8003764 <HAL_DMA_IRQHandler+0xa64>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d101      	bne.n	8003688 <HAL_DMA_IRQHandler+0x988>
 8003684:	2301      	movs	r3, #1
 8003686:	e000      	b.n	800368a <HAL_DMA_IRQHandler+0x98a>
 8003688:	2300      	movs	r3, #0
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 823f 	beq.w	8003b0e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800369c:	f003 031f 	and.w	r3, r3, #31
 80036a0:	2204      	movs	r2, #4
 80036a2:	409a      	lsls	r2, r3
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	4013      	ands	r3, r2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f000 80cd 	beq.w	8003848 <HAL_DMA_IRQHandler+0xb48>
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 80c7 	beq.w	8003848 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036be:	f003 031f 	and.w	r3, r3, #31
 80036c2:	2204      	movs	r2, #4
 80036c4:	409a      	lsls	r2, r3
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d049      	beq.n	8003768 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d109      	bne.n	80036f2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f000 8210 	beq.w	8003b08 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036f0:	e20a      	b.n	8003b08 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f000 8206 	beq.w	8003b08 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003704:	e200      	b.n	8003b08 <HAL_DMA_IRQHandler+0xe08>
 8003706:	bf00      	nop
 8003708:	40020010 	.word	0x40020010
 800370c:	40020028 	.word	0x40020028
 8003710:	40020040 	.word	0x40020040
 8003714:	40020058 	.word	0x40020058
 8003718:	40020070 	.word	0x40020070
 800371c:	40020088 	.word	0x40020088
 8003720:	400200a0 	.word	0x400200a0
 8003724:	400200b8 	.word	0x400200b8
 8003728:	40020410 	.word	0x40020410
 800372c:	40020428 	.word	0x40020428
 8003730:	40020440 	.word	0x40020440
 8003734:	40020458 	.word	0x40020458
 8003738:	40020470 	.word	0x40020470
 800373c:	40020488 	.word	0x40020488
 8003740:	400204a0 	.word	0x400204a0
 8003744:	400204b8 	.word	0x400204b8
 8003748:	58025408 	.word	0x58025408
 800374c:	5802541c 	.word	0x5802541c
 8003750:	58025430 	.word	0x58025430
 8003754:	58025444 	.word	0x58025444
 8003758:	58025458 	.word	0x58025458
 800375c:	5802546c 	.word	0x5802546c
 8003760:	58025480 	.word	0x58025480
 8003764:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	f003 0320 	and.w	r3, r3, #32
 800376e:	2b00      	cmp	r3, #0
 8003770:	d160      	bne.n	8003834 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a7f      	ldr	r2, [pc, #508]	@ (8003974 <HAL_DMA_IRQHandler+0xc74>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d04a      	beq.n	8003812 <HAL_DMA_IRQHandler+0xb12>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a7d      	ldr	r2, [pc, #500]	@ (8003978 <HAL_DMA_IRQHandler+0xc78>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d045      	beq.n	8003812 <HAL_DMA_IRQHandler+0xb12>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a7c      	ldr	r2, [pc, #496]	@ (800397c <HAL_DMA_IRQHandler+0xc7c>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d040      	beq.n	8003812 <HAL_DMA_IRQHandler+0xb12>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a7a      	ldr	r2, [pc, #488]	@ (8003980 <HAL_DMA_IRQHandler+0xc80>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d03b      	beq.n	8003812 <HAL_DMA_IRQHandler+0xb12>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a79      	ldr	r2, [pc, #484]	@ (8003984 <HAL_DMA_IRQHandler+0xc84>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d036      	beq.n	8003812 <HAL_DMA_IRQHandler+0xb12>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a77      	ldr	r2, [pc, #476]	@ (8003988 <HAL_DMA_IRQHandler+0xc88>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d031      	beq.n	8003812 <HAL_DMA_IRQHandler+0xb12>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a76      	ldr	r2, [pc, #472]	@ (800398c <HAL_DMA_IRQHandler+0xc8c>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d02c      	beq.n	8003812 <HAL_DMA_IRQHandler+0xb12>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a74      	ldr	r2, [pc, #464]	@ (8003990 <HAL_DMA_IRQHandler+0xc90>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d027      	beq.n	8003812 <HAL_DMA_IRQHandler+0xb12>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a73      	ldr	r2, [pc, #460]	@ (8003994 <HAL_DMA_IRQHandler+0xc94>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d022      	beq.n	8003812 <HAL_DMA_IRQHandler+0xb12>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a71      	ldr	r2, [pc, #452]	@ (8003998 <HAL_DMA_IRQHandler+0xc98>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d01d      	beq.n	8003812 <HAL_DMA_IRQHandler+0xb12>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a70      	ldr	r2, [pc, #448]	@ (800399c <HAL_DMA_IRQHandler+0xc9c>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d018      	beq.n	8003812 <HAL_DMA_IRQHandler+0xb12>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a6e      	ldr	r2, [pc, #440]	@ (80039a0 <HAL_DMA_IRQHandler+0xca0>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d013      	beq.n	8003812 <HAL_DMA_IRQHandler+0xb12>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a6d      	ldr	r2, [pc, #436]	@ (80039a4 <HAL_DMA_IRQHandler+0xca4>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d00e      	beq.n	8003812 <HAL_DMA_IRQHandler+0xb12>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a6b      	ldr	r2, [pc, #428]	@ (80039a8 <HAL_DMA_IRQHandler+0xca8>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d009      	beq.n	8003812 <HAL_DMA_IRQHandler+0xb12>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a6a      	ldr	r2, [pc, #424]	@ (80039ac <HAL_DMA_IRQHandler+0xcac>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d004      	beq.n	8003812 <HAL_DMA_IRQHandler+0xb12>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a68      	ldr	r2, [pc, #416]	@ (80039b0 <HAL_DMA_IRQHandler+0xcb0>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d108      	bne.n	8003824 <HAL_DMA_IRQHandler+0xb24>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 0208 	bic.w	r2, r2, #8
 8003820:	601a      	str	r2, [r3, #0]
 8003822:	e007      	b.n	8003834 <HAL_DMA_IRQHandler+0xb34>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 0204 	bic.w	r2, r2, #4
 8003832:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 8165 	beq.w	8003b08 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003846:	e15f      	b.n	8003b08 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800384c:	f003 031f 	and.w	r3, r3, #31
 8003850:	2202      	movs	r2, #2
 8003852:	409a      	lsls	r2, r3
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	4013      	ands	r3, r2
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 80c5 	beq.w	80039e8 <HAL_DMA_IRQHandler+0xce8>
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 80bf 	beq.w	80039e8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800386e:	f003 031f 	and.w	r3, r3, #31
 8003872:	2202      	movs	r2, #2
 8003874:	409a      	lsls	r2, r3
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d018      	beq.n	80038b6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d109      	bne.n	80038a2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003892:	2b00      	cmp	r3, #0
 8003894:	f000 813a 	beq.w	8003b0c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038a0:	e134      	b.n	8003b0c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f000 8130 	beq.w	8003b0c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038b4:	e12a      	b.n	8003b0c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	f003 0320 	and.w	r3, r3, #32
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f040 8089 	bne.w	80039d4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a2b      	ldr	r2, [pc, #172]	@ (8003974 <HAL_DMA_IRQHandler+0xc74>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d04a      	beq.n	8003962 <HAL_DMA_IRQHandler+0xc62>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a29      	ldr	r2, [pc, #164]	@ (8003978 <HAL_DMA_IRQHandler+0xc78>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d045      	beq.n	8003962 <HAL_DMA_IRQHandler+0xc62>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a28      	ldr	r2, [pc, #160]	@ (800397c <HAL_DMA_IRQHandler+0xc7c>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d040      	beq.n	8003962 <HAL_DMA_IRQHandler+0xc62>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a26      	ldr	r2, [pc, #152]	@ (8003980 <HAL_DMA_IRQHandler+0xc80>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d03b      	beq.n	8003962 <HAL_DMA_IRQHandler+0xc62>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a25      	ldr	r2, [pc, #148]	@ (8003984 <HAL_DMA_IRQHandler+0xc84>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d036      	beq.n	8003962 <HAL_DMA_IRQHandler+0xc62>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a23      	ldr	r2, [pc, #140]	@ (8003988 <HAL_DMA_IRQHandler+0xc88>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d031      	beq.n	8003962 <HAL_DMA_IRQHandler+0xc62>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a22      	ldr	r2, [pc, #136]	@ (800398c <HAL_DMA_IRQHandler+0xc8c>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d02c      	beq.n	8003962 <HAL_DMA_IRQHandler+0xc62>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a20      	ldr	r2, [pc, #128]	@ (8003990 <HAL_DMA_IRQHandler+0xc90>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d027      	beq.n	8003962 <HAL_DMA_IRQHandler+0xc62>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a1f      	ldr	r2, [pc, #124]	@ (8003994 <HAL_DMA_IRQHandler+0xc94>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d022      	beq.n	8003962 <HAL_DMA_IRQHandler+0xc62>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a1d      	ldr	r2, [pc, #116]	@ (8003998 <HAL_DMA_IRQHandler+0xc98>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d01d      	beq.n	8003962 <HAL_DMA_IRQHandler+0xc62>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a1c      	ldr	r2, [pc, #112]	@ (800399c <HAL_DMA_IRQHandler+0xc9c>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d018      	beq.n	8003962 <HAL_DMA_IRQHandler+0xc62>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a1a      	ldr	r2, [pc, #104]	@ (80039a0 <HAL_DMA_IRQHandler+0xca0>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d013      	beq.n	8003962 <HAL_DMA_IRQHandler+0xc62>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a19      	ldr	r2, [pc, #100]	@ (80039a4 <HAL_DMA_IRQHandler+0xca4>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d00e      	beq.n	8003962 <HAL_DMA_IRQHandler+0xc62>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a17      	ldr	r2, [pc, #92]	@ (80039a8 <HAL_DMA_IRQHandler+0xca8>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d009      	beq.n	8003962 <HAL_DMA_IRQHandler+0xc62>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a16      	ldr	r2, [pc, #88]	@ (80039ac <HAL_DMA_IRQHandler+0xcac>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d004      	beq.n	8003962 <HAL_DMA_IRQHandler+0xc62>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a14      	ldr	r2, [pc, #80]	@ (80039b0 <HAL_DMA_IRQHandler+0xcb0>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d128      	bne.n	80039b4 <HAL_DMA_IRQHandler+0xcb4>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 0214 	bic.w	r2, r2, #20
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	e027      	b.n	80039c4 <HAL_DMA_IRQHandler+0xcc4>
 8003974:	40020010 	.word	0x40020010
 8003978:	40020028 	.word	0x40020028
 800397c:	40020040 	.word	0x40020040
 8003980:	40020058 	.word	0x40020058
 8003984:	40020070 	.word	0x40020070
 8003988:	40020088 	.word	0x40020088
 800398c:	400200a0 	.word	0x400200a0
 8003990:	400200b8 	.word	0x400200b8
 8003994:	40020410 	.word	0x40020410
 8003998:	40020428 	.word	0x40020428
 800399c:	40020440 	.word	0x40020440
 80039a0:	40020458 	.word	0x40020458
 80039a4:	40020470 	.word	0x40020470
 80039a8:	40020488 	.word	0x40020488
 80039ac:	400204a0 	.word	0x400204a0
 80039b0:	400204b8 	.word	0x400204b8
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f022 020a 	bic.w	r2, r2, #10
 80039c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f000 8097 	beq.w	8003b0c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039e6:	e091      	b.n	8003b0c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ec:	f003 031f 	and.w	r3, r3, #31
 80039f0:	2208      	movs	r2, #8
 80039f2:	409a      	lsls	r2, r3
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	4013      	ands	r3, r2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f000 8088 	beq.w	8003b0e <HAL_DMA_IRQHandler+0xe0e>
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	f003 0308 	and.w	r3, r3, #8
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 8082 	beq.w	8003b0e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a41      	ldr	r2, [pc, #260]	@ (8003b14 <HAL_DMA_IRQHandler+0xe14>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d04a      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xdaa>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a3f      	ldr	r2, [pc, #252]	@ (8003b18 <HAL_DMA_IRQHandler+0xe18>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d045      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xdaa>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a3e      	ldr	r2, [pc, #248]	@ (8003b1c <HAL_DMA_IRQHandler+0xe1c>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d040      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xdaa>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a3c      	ldr	r2, [pc, #240]	@ (8003b20 <HAL_DMA_IRQHandler+0xe20>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d03b      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xdaa>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a3b      	ldr	r2, [pc, #236]	@ (8003b24 <HAL_DMA_IRQHandler+0xe24>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d036      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xdaa>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a39      	ldr	r2, [pc, #228]	@ (8003b28 <HAL_DMA_IRQHandler+0xe28>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d031      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xdaa>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a38      	ldr	r2, [pc, #224]	@ (8003b2c <HAL_DMA_IRQHandler+0xe2c>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d02c      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xdaa>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a36      	ldr	r2, [pc, #216]	@ (8003b30 <HAL_DMA_IRQHandler+0xe30>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d027      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xdaa>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a35      	ldr	r2, [pc, #212]	@ (8003b34 <HAL_DMA_IRQHandler+0xe34>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d022      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xdaa>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a33      	ldr	r2, [pc, #204]	@ (8003b38 <HAL_DMA_IRQHandler+0xe38>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d01d      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xdaa>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a32      	ldr	r2, [pc, #200]	@ (8003b3c <HAL_DMA_IRQHandler+0xe3c>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d018      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xdaa>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a30      	ldr	r2, [pc, #192]	@ (8003b40 <HAL_DMA_IRQHandler+0xe40>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d013      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xdaa>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a2f      	ldr	r2, [pc, #188]	@ (8003b44 <HAL_DMA_IRQHandler+0xe44>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d00e      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xdaa>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a2d      	ldr	r2, [pc, #180]	@ (8003b48 <HAL_DMA_IRQHandler+0xe48>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d009      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xdaa>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a2c      	ldr	r2, [pc, #176]	@ (8003b4c <HAL_DMA_IRQHandler+0xe4c>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d004      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xdaa>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a2a      	ldr	r2, [pc, #168]	@ (8003b50 <HAL_DMA_IRQHandler+0xe50>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d108      	bne.n	8003abc <HAL_DMA_IRQHandler+0xdbc>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f022 021c 	bic.w	r2, r2, #28
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	e007      	b.n	8003acc <HAL_DMA_IRQHandler+0xdcc>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f022 020e 	bic.w	r2, r2, #14
 8003aca:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ad0:	f003 031f 	and.w	r3, r3, #31
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	409a      	lsls	r2, r3
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d009      	beq.n	8003b0e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	4798      	blx	r3
 8003b02:	e004      	b.n	8003b0e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003b04:	bf00      	nop
 8003b06:	e002      	b.n	8003b0e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b08:	bf00      	nop
 8003b0a:	e000      	b.n	8003b0e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b0c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003b0e:	3728      	adds	r7, #40	@ 0x28
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40020010 	.word	0x40020010
 8003b18:	40020028 	.word	0x40020028
 8003b1c:	40020040 	.word	0x40020040
 8003b20:	40020058 	.word	0x40020058
 8003b24:	40020070 	.word	0x40020070
 8003b28:	40020088 	.word	0x40020088
 8003b2c:	400200a0 	.word	0x400200a0
 8003b30:	400200b8 	.word	0x400200b8
 8003b34:	40020410 	.word	0x40020410
 8003b38:	40020428 	.word	0x40020428
 8003b3c:	40020440 	.word	0x40020440
 8003b40:	40020458 	.word	0x40020458
 8003b44:	40020470 	.word	0x40020470
 8003b48:	40020488 	.word	0x40020488
 8003b4c:	400204a0 	.word	0x400204a0
 8003b50:	400204b8 	.word	0x400204b8

08003b54 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b087      	sub	sp, #28
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
 8003b60:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b66:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b6c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a7f      	ldr	r2, [pc, #508]	@ (8003d70 <DMA_SetConfig+0x21c>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d072      	beq.n	8003c5e <DMA_SetConfig+0x10a>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a7d      	ldr	r2, [pc, #500]	@ (8003d74 <DMA_SetConfig+0x220>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d06d      	beq.n	8003c5e <DMA_SetConfig+0x10a>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a7c      	ldr	r2, [pc, #496]	@ (8003d78 <DMA_SetConfig+0x224>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d068      	beq.n	8003c5e <DMA_SetConfig+0x10a>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a7a      	ldr	r2, [pc, #488]	@ (8003d7c <DMA_SetConfig+0x228>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d063      	beq.n	8003c5e <DMA_SetConfig+0x10a>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a79      	ldr	r2, [pc, #484]	@ (8003d80 <DMA_SetConfig+0x22c>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d05e      	beq.n	8003c5e <DMA_SetConfig+0x10a>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a77      	ldr	r2, [pc, #476]	@ (8003d84 <DMA_SetConfig+0x230>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d059      	beq.n	8003c5e <DMA_SetConfig+0x10a>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a76      	ldr	r2, [pc, #472]	@ (8003d88 <DMA_SetConfig+0x234>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d054      	beq.n	8003c5e <DMA_SetConfig+0x10a>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a74      	ldr	r2, [pc, #464]	@ (8003d8c <DMA_SetConfig+0x238>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d04f      	beq.n	8003c5e <DMA_SetConfig+0x10a>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a73      	ldr	r2, [pc, #460]	@ (8003d90 <DMA_SetConfig+0x23c>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d04a      	beq.n	8003c5e <DMA_SetConfig+0x10a>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a71      	ldr	r2, [pc, #452]	@ (8003d94 <DMA_SetConfig+0x240>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d045      	beq.n	8003c5e <DMA_SetConfig+0x10a>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a70      	ldr	r2, [pc, #448]	@ (8003d98 <DMA_SetConfig+0x244>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d040      	beq.n	8003c5e <DMA_SetConfig+0x10a>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a6e      	ldr	r2, [pc, #440]	@ (8003d9c <DMA_SetConfig+0x248>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d03b      	beq.n	8003c5e <DMA_SetConfig+0x10a>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a6d      	ldr	r2, [pc, #436]	@ (8003da0 <DMA_SetConfig+0x24c>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d036      	beq.n	8003c5e <DMA_SetConfig+0x10a>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a6b      	ldr	r2, [pc, #428]	@ (8003da4 <DMA_SetConfig+0x250>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d031      	beq.n	8003c5e <DMA_SetConfig+0x10a>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a6a      	ldr	r2, [pc, #424]	@ (8003da8 <DMA_SetConfig+0x254>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d02c      	beq.n	8003c5e <DMA_SetConfig+0x10a>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a68      	ldr	r2, [pc, #416]	@ (8003dac <DMA_SetConfig+0x258>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d027      	beq.n	8003c5e <DMA_SetConfig+0x10a>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a67      	ldr	r2, [pc, #412]	@ (8003db0 <DMA_SetConfig+0x25c>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d022      	beq.n	8003c5e <DMA_SetConfig+0x10a>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a65      	ldr	r2, [pc, #404]	@ (8003db4 <DMA_SetConfig+0x260>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d01d      	beq.n	8003c5e <DMA_SetConfig+0x10a>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a64      	ldr	r2, [pc, #400]	@ (8003db8 <DMA_SetConfig+0x264>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d018      	beq.n	8003c5e <DMA_SetConfig+0x10a>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a62      	ldr	r2, [pc, #392]	@ (8003dbc <DMA_SetConfig+0x268>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d013      	beq.n	8003c5e <DMA_SetConfig+0x10a>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a61      	ldr	r2, [pc, #388]	@ (8003dc0 <DMA_SetConfig+0x26c>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d00e      	beq.n	8003c5e <DMA_SetConfig+0x10a>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a5f      	ldr	r2, [pc, #380]	@ (8003dc4 <DMA_SetConfig+0x270>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d009      	beq.n	8003c5e <DMA_SetConfig+0x10a>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a5e      	ldr	r2, [pc, #376]	@ (8003dc8 <DMA_SetConfig+0x274>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d004      	beq.n	8003c5e <DMA_SetConfig+0x10a>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a5c      	ldr	r2, [pc, #368]	@ (8003dcc <DMA_SetConfig+0x278>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d101      	bne.n	8003c62 <DMA_SetConfig+0x10e>
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e000      	b.n	8003c64 <DMA_SetConfig+0x110>
 8003c62:	2300      	movs	r3, #0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00d      	beq.n	8003c84 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003c70:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d004      	beq.n	8003c84 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003c82:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a39      	ldr	r2, [pc, #228]	@ (8003d70 <DMA_SetConfig+0x21c>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d04a      	beq.n	8003d24 <DMA_SetConfig+0x1d0>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a38      	ldr	r2, [pc, #224]	@ (8003d74 <DMA_SetConfig+0x220>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d045      	beq.n	8003d24 <DMA_SetConfig+0x1d0>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a36      	ldr	r2, [pc, #216]	@ (8003d78 <DMA_SetConfig+0x224>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d040      	beq.n	8003d24 <DMA_SetConfig+0x1d0>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a35      	ldr	r2, [pc, #212]	@ (8003d7c <DMA_SetConfig+0x228>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d03b      	beq.n	8003d24 <DMA_SetConfig+0x1d0>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a33      	ldr	r2, [pc, #204]	@ (8003d80 <DMA_SetConfig+0x22c>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d036      	beq.n	8003d24 <DMA_SetConfig+0x1d0>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a32      	ldr	r2, [pc, #200]	@ (8003d84 <DMA_SetConfig+0x230>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d031      	beq.n	8003d24 <DMA_SetConfig+0x1d0>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a30      	ldr	r2, [pc, #192]	@ (8003d88 <DMA_SetConfig+0x234>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d02c      	beq.n	8003d24 <DMA_SetConfig+0x1d0>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a2f      	ldr	r2, [pc, #188]	@ (8003d8c <DMA_SetConfig+0x238>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d027      	beq.n	8003d24 <DMA_SetConfig+0x1d0>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a2d      	ldr	r2, [pc, #180]	@ (8003d90 <DMA_SetConfig+0x23c>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d022      	beq.n	8003d24 <DMA_SetConfig+0x1d0>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a2c      	ldr	r2, [pc, #176]	@ (8003d94 <DMA_SetConfig+0x240>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d01d      	beq.n	8003d24 <DMA_SetConfig+0x1d0>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a2a      	ldr	r2, [pc, #168]	@ (8003d98 <DMA_SetConfig+0x244>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d018      	beq.n	8003d24 <DMA_SetConfig+0x1d0>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a29      	ldr	r2, [pc, #164]	@ (8003d9c <DMA_SetConfig+0x248>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d013      	beq.n	8003d24 <DMA_SetConfig+0x1d0>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a27      	ldr	r2, [pc, #156]	@ (8003da0 <DMA_SetConfig+0x24c>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d00e      	beq.n	8003d24 <DMA_SetConfig+0x1d0>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a26      	ldr	r2, [pc, #152]	@ (8003da4 <DMA_SetConfig+0x250>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d009      	beq.n	8003d24 <DMA_SetConfig+0x1d0>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a24      	ldr	r2, [pc, #144]	@ (8003da8 <DMA_SetConfig+0x254>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d004      	beq.n	8003d24 <DMA_SetConfig+0x1d0>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a23      	ldr	r2, [pc, #140]	@ (8003dac <DMA_SetConfig+0x258>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d101      	bne.n	8003d28 <DMA_SetConfig+0x1d4>
 8003d24:	2301      	movs	r3, #1
 8003d26:	e000      	b.n	8003d2a <DMA_SetConfig+0x1d6>
 8003d28:	2300      	movs	r3, #0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d059      	beq.n	8003de2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d32:	f003 031f 	and.w	r3, r3, #31
 8003d36:	223f      	movs	r2, #63	@ 0x3f
 8003d38:	409a      	lsls	r2, r3
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003d4c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	2b40      	cmp	r3, #64	@ 0x40
 8003d5c:	d138      	bne.n	8003dd0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68ba      	ldr	r2, [r7, #8]
 8003d6c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003d6e:	e086      	b.n	8003e7e <DMA_SetConfig+0x32a>
 8003d70:	40020010 	.word	0x40020010
 8003d74:	40020028 	.word	0x40020028
 8003d78:	40020040 	.word	0x40020040
 8003d7c:	40020058 	.word	0x40020058
 8003d80:	40020070 	.word	0x40020070
 8003d84:	40020088 	.word	0x40020088
 8003d88:	400200a0 	.word	0x400200a0
 8003d8c:	400200b8 	.word	0x400200b8
 8003d90:	40020410 	.word	0x40020410
 8003d94:	40020428 	.word	0x40020428
 8003d98:	40020440 	.word	0x40020440
 8003d9c:	40020458 	.word	0x40020458
 8003da0:	40020470 	.word	0x40020470
 8003da4:	40020488 	.word	0x40020488
 8003da8:	400204a0 	.word	0x400204a0
 8003dac:	400204b8 	.word	0x400204b8
 8003db0:	58025408 	.word	0x58025408
 8003db4:	5802541c 	.word	0x5802541c
 8003db8:	58025430 	.word	0x58025430
 8003dbc:	58025444 	.word	0x58025444
 8003dc0:	58025458 	.word	0x58025458
 8003dc4:	5802546c 	.word	0x5802546c
 8003dc8:	58025480 	.word	0x58025480
 8003dcc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68ba      	ldr	r2, [r7, #8]
 8003dd6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	60da      	str	r2, [r3, #12]
}
 8003de0:	e04d      	b.n	8003e7e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a29      	ldr	r2, [pc, #164]	@ (8003e8c <DMA_SetConfig+0x338>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d022      	beq.n	8003e32 <DMA_SetConfig+0x2de>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a27      	ldr	r2, [pc, #156]	@ (8003e90 <DMA_SetConfig+0x33c>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d01d      	beq.n	8003e32 <DMA_SetConfig+0x2de>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a26      	ldr	r2, [pc, #152]	@ (8003e94 <DMA_SetConfig+0x340>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d018      	beq.n	8003e32 <DMA_SetConfig+0x2de>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a24      	ldr	r2, [pc, #144]	@ (8003e98 <DMA_SetConfig+0x344>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d013      	beq.n	8003e32 <DMA_SetConfig+0x2de>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a23      	ldr	r2, [pc, #140]	@ (8003e9c <DMA_SetConfig+0x348>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d00e      	beq.n	8003e32 <DMA_SetConfig+0x2de>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a21      	ldr	r2, [pc, #132]	@ (8003ea0 <DMA_SetConfig+0x34c>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d009      	beq.n	8003e32 <DMA_SetConfig+0x2de>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a20      	ldr	r2, [pc, #128]	@ (8003ea4 <DMA_SetConfig+0x350>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d004      	beq.n	8003e32 <DMA_SetConfig+0x2de>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a1e      	ldr	r2, [pc, #120]	@ (8003ea8 <DMA_SetConfig+0x354>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d101      	bne.n	8003e36 <DMA_SetConfig+0x2e2>
 8003e32:	2301      	movs	r3, #1
 8003e34:	e000      	b.n	8003e38 <DMA_SetConfig+0x2e4>
 8003e36:	2300      	movs	r3, #0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d020      	beq.n	8003e7e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e40:	f003 031f 	and.w	r3, r3, #31
 8003e44:	2201      	movs	r2, #1
 8003e46:	409a      	lsls	r2, r3
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	2b40      	cmp	r3, #64	@ 0x40
 8003e5a:	d108      	bne.n	8003e6e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	60da      	str	r2, [r3, #12]
}
 8003e6c:	e007      	b.n	8003e7e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	60da      	str	r2, [r3, #12]
}
 8003e7e:	bf00      	nop
 8003e80:	371c      	adds	r7, #28
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	58025408 	.word	0x58025408
 8003e90:	5802541c 	.word	0x5802541c
 8003e94:	58025430 	.word	0x58025430
 8003e98:	58025444 	.word	0x58025444
 8003e9c:	58025458 	.word	0x58025458
 8003ea0:	5802546c 	.word	0x5802546c
 8003ea4:	58025480 	.word	0x58025480
 8003ea8:	58025494 	.word	0x58025494

08003eac <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a42      	ldr	r2, [pc, #264]	@ (8003fc4 <DMA_CalcBaseAndBitshift+0x118>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d04a      	beq.n	8003f54 <DMA_CalcBaseAndBitshift+0xa8>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a41      	ldr	r2, [pc, #260]	@ (8003fc8 <DMA_CalcBaseAndBitshift+0x11c>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d045      	beq.n	8003f54 <DMA_CalcBaseAndBitshift+0xa8>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a3f      	ldr	r2, [pc, #252]	@ (8003fcc <DMA_CalcBaseAndBitshift+0x120>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d040      	beq.n	8003f54 <DMA_CalcBaseAndBitshift+0xa8>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a3e      	ldr	r2, [pc, #248]	@ (8003fd0 <DMA_CalcBaseAndBitshift+0x124>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d03b      	beq.n	8003f54 <DMA_CalcBaseAndBitshift+0xa8>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a3c      	ldr	r2, [pc, #240]	@ (8003fd4 <DMA_CalcBaseAndBitshift+0x128>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d036      	beq.n	8003f54 <DMA_CalcBaseAndBitshift+0xa8>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a3b      	ldr	r2, [pc, #236]	@ (8003fd8 <DMA_CalcBaseAndBitshift+0x12c>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d031      	beq.n	8003f54 <DMA_CalcBaseAndBitshift+0xa8>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a39      	ldr	r2, [pc, #228]	@ (8003fdc <DMA_CalcBaseAndBitshift+0x130>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d02c      	beq.n	8003f54 <DMA_CalcBaseAndBitshift+0xa8>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a38      	ldr	r2, [pc, #224]	@ (8003fe0 <DMA_CalcBaseAndBitshift+0x134>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d027      	beq.n	8003f54 <DMA_CalcBaseAndBitshift+0xa8>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a36      	ldr	r2, [pc, #216]	@ (8003fe4 <DMA_CalcBaseAndBitshift+0x138>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d022      	beq.n	8003f54 <DMA_CalcBaseAndBitshift+0xa8>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a35      	ldr	r2, [pc, #212]	@ (8003fe8 <DMA_CalcBaseAndBitshift+0x13c>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d01d      	beq.n	8003f54 <DMA_CalcBaseAndBitshift+0xa8>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a33      	ldr	r2, [pc, #204]	@ (8003fec <DMA_CalcBaseAndBitshift+0x140>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d018      	beq.n	8003f54 <DMA_CalcBaseAndBitshift+0xa8>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a32      	ldr	r2, [pc, #200]	@ (8003ff0 <DMA_CalcBaseAndBitshift+0x144>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d013      	beq.n	8003f54 <DMA_CalcBaseAndBitshift+0xa8>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a30      	ldr	r2, [pc, #192]	@ (8003ff4 <DMA_CalcBaseAndBitshift+0x148>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d00e      	beq.n	8003f54 <DMA_CalcBaseAndBitshift+0xa8>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a2f      	ldr	r2, [pc, #188]	@ (8003ff8 <DMA_CalcBaseAndBitshift+0x14c>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d009      	beq.n	8003f54 <DMA_CalcBaseAndBitshift+0xa8>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a2d      	ldr	r2, [pc, #180]	@ (8003ffc <DMA_CalcBaseAndBitshift+0x150>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d004      	beq.n	8003f54 <DMA_CalcBaseAndBitshift+0xa8>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a2c      	ldr	r2, [pc, #176]	@ (8004000 <DMA_CalcBaseAndBitshift+0x154>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d101      	bne.n	8003f58 <DMA_CalcBaseAndBitshift+0xac>
 8003f54:	2301      	movs	r3, #1
 8003f56:	e000      	b.n	8003f5a <DMA_CalcBaseAndBitshift+0xae>
 8003f58:	2300      	movs	r3, #0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d024      	beq.n	8003fa8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	3b10      	subs	r3, #16
 8003f66:	4a27      	ldr	r2, [pc, #156]	@ (8004004 <DMA_CalcBaseAndBitshift+0x158>)
 8003f68:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6c:	091b      	lsrs	r3, r3, #4
 8003f6e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f003 0307 	and.w	r3, r3, #7
 8003f76:	4a24      	ldr	r2, [pc, #144]	@ (8004008 <DMA_CalcBaseAndBitshift+0x15c>)
 8003f78:	5cd3      	ldrb	r3, [r2, r3]
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2b03      	cmp	r3, #3
 8003f84:	d908      	bls.n	8003f98 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	4b1f      	ldr	r3, [pc, #124]	@ (800400c <DMA_CalcBaseAndBitshift+0x160>)
 8003f8e:	4013      	ands	r3, r2
 8003f90:	1d1a      	adds	r2, r3, #4
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	659a      	str	r2, [r3, #88]	@ 0x58
 8003f96:	e00d      	b.n	8003fb4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	4b1b      	ldr	r3, [pc, #108]	@ (800400c <DMA_CalcBaseAndBitshift+0x160>)
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fa6:	e005      	b.n	8003fb4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3714      	adds	r7, #20
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr
 8003fc4:	40020010 	.word	0x40020010
 8003fc8:	40020028 	.word	0x40020028
 8003fcc:	40020040 	.word	0x40020040
 8003fd0:	40020058 	.word	0x40020058
 8003fd4:	40020070 	.word	0x40020070
 8003fd8:	40020088 	.word	0x40020088
 8003fdc:	400200a0 	.word	0x400200a0
 8003fe0:	400200b8 	.word	0x400200b8
 8003fe4:	40020410 	.word	0x40020410
 8003fe8:	40020428 	.word	0x40020428
 8003fec:	40020440 	.word	0x40020440
 8003ff0:	40020458 	.word	0x40020458
 8003ff4:	40020470 	.word	0x40020470
 8003ff8:	40020488 	.word	0x40020488
 8003ffc:	400204a0 	.word	0x400204a0
 8004000:	400204b8 	.word	0x400204b8
 8004004:	aaaaaaab 	.word	0xaaaaaaab
 8004008:	08009d2c 	.word	0x08009d2c
 800400c:	fffffc00 	.word	0xfffffc00

08004010 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004018:	2300      	movs	r3, #0
 800401a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d120      	bne.n	8004066 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004028:	2b03      	cmp	r3, #3
 800402a:	d858      	bhi.n	80040de <DMA_CheckFifoParam+0xce>
 800402c:	a201      	add	r2, pc, #4	@ (adr r2, 8004034 <DMA_CheckFifoParam+0x24>)
 800402e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004032:	bf00      	nop
 8004034:	08004045 	.word	0x08004045
 8004038:	08004057 	.word	0x08004057
 800403c:	08004045 	.word	0x08004045
 8004040:	080040df 	.word	0x080040df
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004048:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d048      	beq.n	80040e2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004054:	e045      	b.n	80040e2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800405a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800405e:	d142      	bne.n	80040e6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004064:	e03f      	b.n	80040e6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800406e:	d123      	bne.n	80040b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004074:	2b03      	cmp	r3, #3
 8004076:	d838      	bhi.n	80040ea <DMA_CheckFifoParam+0xda>
 8004078:	a201      	add	r2, pc, #4	@ (adr r2, 8004080 <DMA_CheckFifoParam+0x70>)
 800407a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800407e:	bf00      	nop
 8004080:	08004091 	.word	0x08004091
 8004084:	08004097 	.word	0x08004097
 8004088:	08004091 	.word	0x08004091
 800408c:	080040a9 	.word	0x080040a9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	73fb      	strb	r3, [r7, #15]
        break;
 8004094:	e030      	b.n	80040f8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800409a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d025      	beq.n	80040ee <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80040a6:	e022      	b.n	80040ee <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80040b0:	d11f      	bne.n	80040f2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80040b6:	e01c      	b.n	80040f2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d902      	bls.n	80040c6 <DMA_CheckFifoParam+0xb6>
 80040c0:	2b03      	cmp	r3, #3
 80040c2:	d003      	beq.n	80040cc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80040c4:	e018      	b.n	80040f8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	73fb      	strb	r3, [r7, #15]
        break;
 80040ca:	e015      	b.n	80040f8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00e      	beq.n	80040f6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	73fb      	strb	r3, [r7, #15]
    break;
 80040dc:	e00b      	b.n	80040f6 <DMA_CheckFifoParam+0xe6>
        break;
 80040de:	bf00      	nop
 80040e0:	e00a      	b.n	80040f8 <DMA_CheckFifoParam+0xe8>
        break;
 80040e2:	bf00      	nop
 80040e4:	e008      	b.n	80040f8 <DMA_CheckFifoParam+0xe8>
        break;
 80040e6:	bf00      	nop
 80040e8:	e006      	b.n	80040f8 <DMA_CheckFifoParam+0xe8>
        break;
 80040ea:	bf00      	nop
 80040ec:	e004      	b.n	80040f8 <DMA_CheckFifoParam+0xe8>
        break;
 80040ee:	bf00      	nop
 80040f0:	e002      	b.n	80040f8 <DMA_CheckFifoParam+0xe8>
        break;
 80040f2:	bf00      	nop
 80040f4:	e000      	b.n	80040f8 <DMA_CheckFifoParam+0xe8>
    break;
 80040f6:	bf00      	nop
    }
  }

  return status;
 80040f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3714      	adds	r7, #20
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop

08004108 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a38      	ldr	r2, [pc, #224]	@ (80041fc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d022      	beq.n	8004166 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a36      	ldr	r2, [pc, #216]	@ (8004200 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d01d      	beq.n	8004166 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a35      	ldr	r2, [pc, #212]	@ (8004204 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d018      	beq.n	8004166 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a33      	ldr	r2, [pc, #204]	@ (8004208 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d013      	beq.n	8004166 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a32      	ldr	r2, [pc, #200]	@ (800420c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d00e      	beq.n	8004166 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a30      	ldr	r2, [pc, #192]	@ (8004210 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d009      	beq.n	8004166 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a2f      	ldr	r2, [pc, #188]	@ (8004214 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d004      	beq.n	8004166 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a2d      	ldr	r2, [pc, #180]	@ (8004218 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d101      	bne.n	800416a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004166:	2301      	movs	r3, #1
 8004168:	e000      	b.n	800416c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800416a:	2300      	movs	r3, #0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d01a      	beq.n	80041a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	b2db      	uxtb	r3, r3
 8004176:	3b08      	subs	r3, #8
 8004178:	4a28      	ldr	r2, [pc, #160]	@ (800421c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800417a:	fba2 2303 	umull	r2, r3, r2, r3
 800417e:	091b      	lsrs	r3, r3, #4
 8004180:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	4b26      	ldr	r3, [pc, #152]	@ (8004220 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004186:	4413      	add	r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	461a      	mov	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a24      	ldr	r2, [pc, #144]	@ (8004224 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004194:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f003 031f 	and.w	r3, r3, #31
 800419c:	2201      	movs	r2, #1
 800419e:	409a      	lsls	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80041a4:	e024      	b.n	80041f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	3b10      	subs	r3, #16
 80041ae:	4a1e      	ldr	r2, [pc, #120]	@ (8004228 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80041b0:	fba2 2303 	umull	r2, r3, r2, r3
 80041b4:	091b      	lsrs	r3, r3, #4
 80041b6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	4a1c      	ldr	r2, [pc, #112]	@ (800422c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d806      	bhi.n	80041ce <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	4a1b      	ldr	r2, [pc, #108]	@ (8004230 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d902      	bls.n	80041ce <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	3308      	adds	r3, #8
 80041cc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	4b18      	ldr	r3, [pc, #96]	@ (8004234 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80041d2:	4413      	add	r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	461a      	mov	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a16      	ldr	r2, [pc, #88]	@ (8004238 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80041e0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f003 031f 	and.w	r3, r3, #31
 80041e8:	2201      	movs	r2, #1
 80041ea:	409a      	lsls	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80041f0:	bf00      	nop
 80041f2:	3714      	adds	r7, #20
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr
 80041fc:	58025408 	.word	0x58025408
 8004200:	5802541c 	.word	0x5802541c
 8004204:	58025430 	.word	0x58025430
 8004208:	58025444 	.word	0x58025444
 800420c:	58025458 	.word	0x58025458
 8004210:	5802546c 	.word	0x5802546c
 8004214:	58025480 	.word	0x58025480
 8004218:	58025494 	.word	0x58025494
 800421c:	cccccccd 	.word	0xcccccccd
 8004220:	16009600 	.word	0x16009600
 8004224:	58025880 	.word	0x58025880
 8004228:	aaaaaaab 	.word	0xaaaaaaab
 800422c:	400204b8 	.word	0x400204b8
 8004230:	4002040f 	.word	0x4002040f
 8004234:	10008200 	.word	0x10008200
 8004238:	40020880 	.word	0x40020880

0800423c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	b2db      	uxtb	r3, r3
 800424a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d04a      	beq.n	80042e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2b08      	cmp	r3, #8
 8004256:	d847      	bhi.n	80042e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a25      	ldr	r2, [pc, #148]	@ (80042f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d022      	beq.n	80042a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a24      	ldr	r2, [pc, #144]	@ (80042f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d01d      	beq.n	80042a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a22      	ldr	r2, [pc, #136]	@ (80042fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d018      	beq.n	80042a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a21      	ldr	r2, [pc, #132]	@ (8004300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d013      	beq.n	80042a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a1f      	ldr	r2, [pc, #124]	@ (8004304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d00e      	beq.n	80042a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a1e      	ldr	r2, [pc, #120]	@ (8004308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d009      	beq.n	80042a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a1c      	ldr	r2, [pc, #112]	@ (800430c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d004      	beq.n	80042a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a1b      	ldr	r2, [pc, #108]	@ (8004310 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d101      	bne.n	80042ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80042a8:	2301      	movs	r3, #1
 80042aa:	e000      	b.n	80042ae <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80042ac:	2300      	movs	r3, #0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00a      	beq.n	80042c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	4b17      	ldr	r3, [pc, #92]	@ (8004314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80042b6:	4413      	add	r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	461a      	mov	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a15      	ldr	r2, [pc, #84]	@ (8004318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80042c4:	671a      	str	r2, [r3, #112]	@ 0x70
 80042c6:	e009      	b.n	80042dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	4b14      	ldr	r3, [pc, #80]	@ (800431c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80042cc:	4413      	add	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	461a      	mov	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a11      	ldr	r2, [pc, #68]	@ (8004320 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80042da:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	3b01      	subs	r3, #1
 80042e0:	2201      	movs	r2, #1
 80042e2:	409a      	lsls	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80042e8:	bf00      	nop
 80042ea:	3714      	adds	r7, #20
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr
 80042f4:	58025408 	.word	0x58025408
 80042f8:	5802541c 	.word	0x5802541c
 80042fc:	58025430 	.word	0x58025430
 8004300:	58025444 	.word	0x58025444
 8004304:	58025458 	.word	0x58025458
 8004308:	5802546c 	.word	0x5802546c
 800430c:	58025480 	.word	0x58025480
 8004310:	58025494 	.word	0x58025494
 8004314:	1600963f 	.word	0x1600963f
 8004318:	58025940 	.word	0x58025940
 800431c:	1000823f 	.word	0x1000823f
 8004320:	40020940 	.word	0x40020940

08004324 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004324:	b480      	push	{r7}
 8004326:	b089      	sub	sp, #36	@ 0x24
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800432e:	2300      	movs	r3, #0
 8004330:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004332:	4b89      	ldr	r3, [pc, #548]	@ (8004558 <HAL_GPIO_Init+0x234>)
 8004334:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004336:	e194      	b.n	8004662 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	2101      	movs	r1, #1
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	fa01 f303 	lsl.w	r3, r1, r3
 8004344:	4013      	ands	r3, r2
 8004346:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	2b00      	cmp	r3, #0
 800434c:	f000 8186 	beq.w	800465c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f003 0303 	and.w	r3, r3, #3
 8004358:	2b01      	cmp	r3, #1
 800435a:	d005      	beq.n	8004368 <HAL_GPIO_Init+0x44>
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f003 0303 	and.w	r3, r3, #3
 8004364:	2b02      	cmp	r3, #2
 8004366:	d130      	bne.n	80043ca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	005b      	lsls	r3, r3, #1
 8004372:	2203      	movs	r2, #3
 8004374:	fa02 f303 	lsl.w	r3, r2, r3
 8004378:	43db      	mvns	r3, r3
 800437a:	69ba      	ldr	r2, [r7, #24]
 800437c:	4013      	ands	r3, r2
 800437e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	68da      	ldr	r2, [r3, #12]
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	005b      	lsls	r3, r3, #1
 8004388:	fa02 f303 	lsl.w	r3, r2, r3
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	4313      	orrs	r3, r2
 8004390:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800439e:	2201      	movs	r2, #1
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	fa02 f303 	lsl.w	r3, r2, r3
 80043a6:	43db      	mvns	r3, r3
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	4013      	ands	r3, r2
 80043ac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	091b      	lsrs	r3, r3, #4
 80043b4:	f003 0201 	and.w	r2, r3, #1
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	fa02 f303 	lsl.w	r3, r2, r3
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	69ba      	ldr	r2, [r7, #24]
 80043c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f003 0303 	and.w	r3, r3, #3
 80043d2:	2b03      	cmp	r3, #3
 80043d4:	d017      	beq.n	8004406 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	2203      	movs	r2, #3
 80043e2:	fa02 f303 	lsl.w	r3, r2, r3
 80043e6:	43db      	mvns	r3, r3
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	4013      	ands	r3, r2
 80043ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	689a      	ldr	r2, [r3, #8]
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	005b      	lsls	r3, r3, #1
 80043f6:	fa02 f303 	lsl.w	r3, r2, r3
 80043fa:	69ba      	ldr	r2, [r7, #24]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	69ba      	ldr	r2, [r7, #24]
 8004404:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f003 0303 	and.w	r3, r3, #3
 800440e:	2b02      	cmp	r3, #2
 8004410:	d123      	bne.n	800445a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	08da      	lsrs	r2, r3, #3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	3208      	adds	r2, #8
 800441a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800441e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	f003 0307 	and.w	r3, r3, #7
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	220f      	movs	r2, #15
 800442a:	fa02 f303 	lsl.w	r3, r2, r3
 800442e:	43db      	mvns	r3, r3
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	4013      	ands	r3, r2
 8004434:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	691a      	ldr	r2, [r3, #16]
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	f003 0307 	and.w	r3, r3, #7
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	fa02 f303 	lsl.w	r3, r2, r3
 8004446:	69ba      	ldr	r2, [r7, #24]
 8004448:	4313      	orrs	r3, r2
 800444a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	08da      	lsrs	r2, r3, #3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	3208      	adds	r2, #8
 8004454:	69b9      	ldr	r1, [r7, #24]
 8004456:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	005b      	lsls	r3, r3, #1
 8004464:	2203      	movs	r2, #3
 8004466:	fa02 f303 	lsl.w	r3, r2, r3
 800446a:	43db      	mvns	r3, r3
 800446c:	69ba      	ldr	r2, [r7, #24]
 800446e:	4013      	ands	r3, r2
 8004470:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f003 0203 	and.w	r2, r3, #3
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	005b      	lsls	r3, r3, #1
 800447e:	fa02 f303 	lsl.w	r3, r2, r3
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	4313      	orrs	r3, r2
 8004486:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	69ba      	ldr	r2, [r7, #24]
 800448c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004496:	2b00      	cmp	r3, #0
 8004498:	f000 80e0 	beq.w	800465c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800449c:	4b2f      	ldr	r3, [pc, #188]	@ (800455c <HAL_GPIO_Init+0x238>)
 800449e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80044a2:	4a2e      	ldr	r2, [pc, #184]	@ (800455c <HAL_GPIO_Init+0x238>)
 80044a4:	f043 0302 	orr.w	r3, r3, #2
 80044a8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80044ac:	4b2b      	ldr	r3, [pc, #172]	@ (800455c <HAL_GPIO_Init+0x238>)
 80044ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	60fb      	str	r3, [r7, #12]
 80044b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044ba:	4a29      	ldr	r2, [pc, #164]	@ (8004560 <HAL_GPIO_Init+0x23c>)
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	089b      	lsrs	r3, r3, #2
 80044c0:	3302      	adds	r3, #2
 80044c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	f003 0303 	and.w	r3, r3, #3
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	220f      	movs	r2, #15
 80044d2:	fa02 f303 	lsl.w	r3, r2, r3
 80044d6:	43db      	mvns	r3, r3
 80044d8:	69ba      	ldr	r2, [r7, #24]
 80044da:	4013      	ands	r3, r2
 80044dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a20      	ldr	r2, [pc, #128]	@ (8004564 <HAL_GPIO_Init+0x240>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d052      	beq.n	800458c <HAL_GPIO_Init+0x268>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a1f      	ldr	r2, [pc, #124]	@ (8004568 <HAL_GPIO_Init+0x244>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d031      	beq.n	8004552 <HAL_GPIO_Init+0x22e>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a1e      	ldr	r2, [pc, #120]	@ (800456c <HAL_GPIO_Init+0x248>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d02b      	beq.n	800454e <HAL_GPIO_Init+0x22a>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a1d      	ldr	r2, [pc, #116]	@ (8004570 <HAL_GPIO_Init+0x24c>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d025      	beq.n	800454a <HAL_GPIO_Init+0x226>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a1c      	ldr	r2, [pc, #112]	@ (8004574 <HAL_GPIO_Init+0x250>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d01f      	beq.n	8004546 <HAL_GPIO_Init+0x222>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a1b      	ldr	r2, [pc, #108]	@ (8004578 <HAL_GPIO_Init+0x254>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d019      	beq.n	8004542 <HAL_GPIO_Init+0x21e>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a1a      	ldr	r2, [pc, #104]	@ (800457c <HAL_GPIO_Init+0x258>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d013      	beq.n	800453e <HAL_GPIO_Init+0x21a>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a19      	ldr	r2, [pc, #100]	@ (8004580 <HAL_GPIO_Init+0x25c>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d00d      	beq.n	800453a <HAL_GPIO_Init+0x216>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a18      	ldr	r2, [pc, #96]	@ (8004584 <HAL_GPIO_Init+0x260>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d007      	beq.n	8004536 <HAL_GPIO_Init+0x212>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a17      	ldr	r2, [pc, #92]	@ (8004588 <HAL_GPIO_Init+0x264>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d101      	bne.n	8004532 <HAL_GPIO_Init+0x20e>
 800452e:	2309      	movs	r3, #9
 8004530:	e02d      	b.n	800458e <HAL_GPIO_Init+0x26a>
 8004532:	230a      	movs	r3, #10
 8004534:	e02b      	b.n	800458e <HAL_GPIO_Init+0x26a>
 8004536:	2308      	movs	r3, #8
 8004538:	e029      	b.n	800458e <HAL_GPIO_Init+0x26a>
 800453a:	2307      	movs	r3, #7
 800453c:	e027      	b.n	800458e <HAL_GPIO_Init+0x26a>
 800453e:	2306      	movs	r3, #6
 8004540:	e025      	b.n	800458e <HAL_GPIO_Init+0x26a>
 8004542:	2305      	movs	r3, #5
 8004544:	e023      	b.n	800458e <HAL_GPIO_Init+0x26a>
 8004546:	2304      	movs	r3, #4
 8004548:	e021      	b.n	800458e <HAL_GPIO_Init+0x26a>
 800454a:	2303      	movs	r3, #3
 800454c:	e01f      	b.n	800458e <HAL_GPIO_Init+0x26a>
 800454e:	2302      	movs	r3, #2
 8004550:	e01d      	b.n	800458e <HAL_GPIO_Init+0x26a>
 8004552:	2301      	movs	r3, #1
 8004554:	e01b      	b.n	800458e <HAL_GPIO_Init+0x26a>
 8004556:	bf00      	nop
 8004558:	58000080 	.word	0x58000080
 800455c:	58024400 	.word	0x58024400
 8004560:	58000400 	.word	0x58000400
 8004564:	58020000 	.word	0x58020000
 8004568:	58020400 	.word	0x58020400
 800456c:	58020800 	.word	0x58020800
 8004570:	58020c00 	.word	0x58020c00
 8004574:	58021000 	.word	0x58021000
 8004578:	58021400 	.word	0x58021400
 800457c:	58021800 	.word	0x58021800
 8004580:	58021c00 	.word	0x58021c00
 8004584:	58022000 	.word	0x58022000
 8004588:	58022400 	.word	0x58022400
 800458c:	2300      	movs	r3, #0
 800458e:	69fa      	ldr	r2, [r7, #28]
 8004590:	f002 0203 	and.w	r2, r2, #3
 8004594:	0092      	lsls	r2, r2, #2
 8004596:	4093      	lsls	r3, r2
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	4313      	orrs	r3, r2
 800459c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800459e:	4938      	ldr	r1, [pc, #224]	@ (8004680 <HAL_GPIO_Init+0x35c>)
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	089b      	lsrs	r3, r3, #2
 80045a4:	3302      	adds	r3, #2
 80045a6:	69ba      	ldr	r2, [r7, #24]
 80045a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80045ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	43db      	mvns	r3, r3
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	4013      	ands	r3, r2
 80045bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80045d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80045da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	43db      	mvns	r3, r3
 80045e6:	69ba      	ldr	r2, [r7, #24]
 80045e8:	4013      	ands	r3, r2
 80045ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d003      	beq.n	8004600 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004600:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	43db      	mvns	r3, r3
 8004612:	69ba      	ldr	r2, [r7, #24]
 8004614:	4013      	ands	r3, r2
 8004616:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d003      	beq.n	800462c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004624:	69ba      	ldr	r2, [r7, #24]
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	4313      	orrs	r3, r2
 800462a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	43db      	mvns	r3, r3
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	4013      	ands	r3, r2
 8004640:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d003      	beq.n	8004656 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800464e:	69ba      	ldr	r2, [r7, #24]
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	4313      	orrs	r3, r2
 8004654:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	3301      	adds	r3, #1
 8004660:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	fa22 f303 	lsr.w	r3, r2, r3
 800466c:	2b00      	cmp	r3, #0
 800466e:	f47f ae63 	bne.w	8004338 <HAL_GPIO_Init+0x14>
  }
}
 8004672:	bf00      	nop
 8004674:	bf00      	nop
 8004676:	3724      	adds	r7, #36	@ 0x24
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	58000400 	.word	0x58000400

08004684 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	460b      	mov	r3, r1
 800468e:	807b      	strh	r3, [r7, #2]
 8004690:	4613      	mov	r3, r2
 8004692:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004694:	787b      	ldrb	r3, [r7, #1]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800469a:	887a      	ldrh	r2, [r7, #2]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80046a0:	e003      	b.n	80046aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80046a2:	887b      	ldrh	r3, [r7, #2]
 80046a4:	041a      	lsls	r2, r3, #16
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	619a      	str	r2, [r3, #24]
}
 80046aa:	bf00      	nop
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
	...

080046b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e08b      	b.n	80047e2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d106      	bne.n	80046e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f7fc fdac 	bl	800123c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2224      	movs	r2, #36	@ 0x24
 80046e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 0201 	bic.w	r2, r2, #1
 80046fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685a      	ldr	r2, [r3, #4]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004708:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	689a      	ldr	r2, [r3, #8]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004718:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d107      	bne.n	8004732 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689a      	ldr	r2, [r3, #8]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800472e:	609a      	str	r2, [r3, #8]
 8004730:	e006      	b.n	8004740 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	689a      	ldr	r2, [r3, #8]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800473e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	2b02      	cmp	r3, #2
 8004746:	d108      	bne.n	800475a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004756:	605a      	str	r2, [r3, #4]
 8004758:	e007      	b.n	800476a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	685a      	ldr	r2, [r3, #4]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004768:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	6859      	ldr	r1, [r3, #4]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	4b1d      	ldr	r3, [pc, #116]	@ (80047ec <HAL_I2C_Init+0x134>)
 8004776:	430b      	orrs	r3, r1
 8004778:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68da      	ldr	r2, [r3, #12]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004788:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	691a      	ldr	r2, [r3, #16]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	430a      	orrs	r2, r1
 80047a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	69d9      	ldr	r1, [r3, #28]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a1a      	ldr	r2, [r3, #32]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	430a      	orrs	r2, r1
 80047b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f042 0201 	orr.w	r2, r2, #1
 80047c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2220      	movs	r2, #32
 80047ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3708      	adds	r7, #8
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	02008000 	.word	0x02008000

080047f0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b088      	sub	sp, #32
 80047f4:	af02      	add	r7, sp, #8
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	607a      	str	r2, [r7, #4]
 80047fa:	461a      	mov	r2, r3
 80047fc:	460b      	mov	r3, r1
 80047fe:	817b      	strh	r3, [r7, #10]
 8004800:	4613      	mov	r3, r2
 8004802:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800480a:	b2db      	uxtb	r3, r3
 800480c:	2b20      	cmp	r3, #32
 800480e:	f040 80fd 	bne.w	8004a0c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004818:	2b01      	cmp	r3, #1
 800481a:	d101      	bne.n	8004820 <HAL_I2C_Master_Transmit+0x30>
 800481c:	2302      	movs	r3, #2
 800481e:	e0f6      	b.n	8004a0e <HAL_I2C_Master_Transmit+0x21e>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004828:	f7fc ffda 	bl	80017e0 <HAL_GetTick>
 800482c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	2319      	movs	r3, #25
 8004834:	2201      	movs	r2, #1
 8004836:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f000 fa0a 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e0e1      	b.n	8004a0e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2221      	movs	r2, #33	@ 0x21
 800484e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2210      	movs	r2, #16
 8004856:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	893a      	ldrh	r2, [r7, #8]
 800486a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004876:	b29b      	uxth	r3, r3
 8004878:	2bff      	cmp	r3, #255	@ 0xff
 800487a:	d906      	bls.n	800488a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	22ff      	movs	r2, #255	@ 0xff
 8004880:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004882:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004886:	617b      	str	r3, [r7, #20]
 8004888:	e007      	b.n	800489a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800488e:	b29a      	uxth	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004894:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004898:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d024      	beq.n	80048ec <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a6:	781a      	ldrb	r2, [r3, #0]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b2:	1c5a      	adds	r2, r3, #1
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048bc:	b29b      	uxth	r3, r3
 80048be:	3b01      	subs	r3, #1
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048ca:	3b01      	subs	r3, #1
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	3301      	adds	r3, #1
 80048da:	b2da      	uxtb	r2, r3
 80048dc:	8979      	ldrh	r1, [r7, #10]
 80048de:	4b4e      	ldr	r3, [pc, #312]	@ (8004a18 <HAL_I2C_Master_Transmit+0x228>)
 80048e0:	9300      	str	r3, [sp, #0]
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f000 fc05 	bl	80050f4 <I2C_TransferConfig>
 80048ea:	e066      	b.n	80049ba <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048f0:	b2da      	uxtb	r2, r3
 80048f2:	8979      	ldrh	r1, [r7, #10]
 80048f4:	4b48      	ldr	r3, [pc, #288]	@ (8004a18 <HAL_I2C_Master_Transmit+0x228>)
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f000 fbfa 	bl	80050f4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004900:	e05b      	b.n	80049ba <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	6a39      	ldr	r1, [r7, #32]
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f000 f9fd 	bl	8004d06 <I2C_WaitOnTXISFlagUntilTimeout>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e07b      	b.n	8004a0e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800491a:	781a      	ldrb	r2, [r3, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004926:	1c5a      	adds	r2, r3, #1
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004930:	b29b      	uxth	r3, r3
 8004932:	3b01      	subs	r3, #1
 8004934:	b29a      	uxth	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800493e:	3b01      	subs	r3, #1
 8004940:	b29a      	uxth	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800494a:	b29b      	uxth	r3, r3
 800494c:	2b00      	cmp	r3, #0
 800494e:	d034      	beq.n	80049ba <HAL_I2C_Master_Transmit+0x1ca>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004954:	2b00      	cmp	r3, #0
 8004956:	d130      	bne.n	80049ba <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	9300      	str	r3, [sp, #0]
 800495c:	6a3b      	ldr	r3, [r7, #32]
 800495e:	2200      	movs	r2, #0
 8004960:	2180      	movs	r1, #128	@ 0x80
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f000 f976 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e04d      	b.n	8004a0e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004976:	b29b      	uxth	r3, r3
 8004978:	2bff      	cmp	r3, #255	@ 0xff
 800497a:	d90e      	bls.n	800499a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	22ff      	movs	r2, #255	@ 0xff
 8004980:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004986:	b2da      	uxtb	r2, r3
 8004988:	8979      	ldrh	r1, [r7, #10]
 800498a:	2300      	movs	r3, #0
 800498c:	9300      	str	r3, [sp, #0]
 800498e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f000 fbae 	bl	80050f4 <I2C_TransferConfig>
 8004998:	e00f      	b.n	80049ba <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800499e:	b29a      	uxth	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049a8:	b2da      	uxtb	r2, r3
 80049aa:	8979      	ldrh	r1, [r7, #10]
 80049ac:	2300      	movs	r3, #0
 80049ae:	9300      	str	r3, [sp, #0]
 80049b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f000 fb9d 	bl	80050f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049be:	b29b      	uxth	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d19e      	bne.n	8004902 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	6a39      	ldr	r1, [r7, #32]
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f000 f9e3 	bl	8004d94 <I2C_WaitOnSTOPFlagUntilTimeout>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d001      	beq.n	80049d8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e01a      	b.n	8004a0e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2220      	movs	r2, #32
 80049de:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6859      	ldr	r1, [r3, #4]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	4b0c      	ldr	r3, [pc, #48]	@ (8004a1c <HAL_I2C_Master_Transmit+0x22c>)
 80049ec:	400b      	ands	r3, r1
 80049ee:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2220      	movs	r2, #32
 80049f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	e000      	b.n	8004a0e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004a0c:	2302      	movs	r3, #2
  }
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3718      	adds	r7, #24
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	80002000 	.word	0x80002000
 8004a1c:	fe00e800 	.word	0xfe00e800

08004a20 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b088      	sub	sp, #32
 8004a24:	af02      	add	r7, sp, #8
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	607a      	str	r2, [r7, #4]
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	817b      	strh	r3, [r7, #10]
 8004a30:	4613      	mov	r3, r2
 8004a32:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b20      	cmp	r3, #32
 8004a3e:	f040 80db 	bne.w	8004bf8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d101      	bne.n	8004a50 <HAL_I2C_Master_Receive+0x30>
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	e0d4      	b.n	8004bfa <HAL_I2C_Master_Receive+0x1da>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004a58:	f7fc fec2 	bl	80017e0 <HAL_GetTick>
 8004a5c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	9300      	str	r3, [sp, #0]
 8004a62:	2319      	movs	r3, #25
 8004a64:	2201      	movs	r2, #1
 8004a66:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	f000 f8f2 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d001      	beq.n	8004a7a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e0bf      	b.n	8004bfa <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2222      	movs	r2, #34	@ 0x22
 8004a7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2210      	movs	r2, #16
 8004a86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	893a      	ldrh	r2, [r7, #8]
 8004a9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	2bff      	cmp	r3, #255	@ 0xff
 8004aaa:	d90e      	bls.n	8004aca <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	22ff      	movs	r2, #255	@ 0xff
 8004ab0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ab6:	b2da      	uxtb	r2, r3
 8004ab8:	8979      	ldrh	r1, [r7, #10]
 8004aba:	4b52      	ldr	r3, [pc, #328]	@ (8004c04 <HAL_I2C_Master_Receive+0x1e4>)
 8004abc:	9300      	str	r3, [sp, #0]
 8004abe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f000 fb16 	bl	80050f4 <I2C_TransferConfig>
 8004ac8:	e06d      	b.n	8004ba6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ad8:	b2da      	uxtb	r2, r3
 8004ada:	8979      	ldrh	r1, [r7, #10]
 8004adc:	4b49      	ldr	r3, [pc, #292]	@ (8004c04 <HAL_I2C_Master_Receive+0x1e4>)
 8004ade:	9300      	str	r3, [sp, #0]
 8004ae0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f000 fb05 	bl	80050f4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004aea:	e05c      	b.n	8004ba6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	6a39      	ldr	r1, [r7, #32]
 8004af0:	68f8      	ldr	r0, [r7, #12]
 8004af2:	f000 f993 	bl	8004e1c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d001      	beq.n	8004b00 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e07c      	b.n	8004bfa <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b0a:	b2d2      	uxtb	r2, r2
 8004b0c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b12:	1c5a      	adds	r2, r3, #1
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d034      	beq.n	8004ba6 <HAL_I2C_Master_Receive+0x186>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d130      	bne.n	8004ba6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	9300      	str	r3, [sp, #0]
 8004b48:	6a3b      	ldr	r3, [r7, #32]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	2180      	movs	r1, #128	@ 0x80
 8004b4e:	68f8      	ldr	r0, [r7, #12]
 8004b50:	f000 f880 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d001      	beq.n	8004b5e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e04d      	b.n	8004bfa <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	2bff      	cmp	r3, #255	@ 0xff
 8004b66:	d90e      	bls.n	8004b86 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	22ff      	movs	r2, #255	@ 0xff
 8004b6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b72:	b2da      	uxtb	r2, r3
 8004b74:	8979      	ldrh	r1, [r7, #10]
 8004b76:	2300      	movs	r3, #0
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f000 fab8 	bl	80050f4 <I2C_TransferConfig>
 8004b84:	e00f      	b.n	8004ba6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b94:	b2da      	uxtb	r2, r3
 8004b96:	8979      	ldrh	r1, [r7, #10]
 8004b98:	2300      	movs	r3, #0
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f000 faa7 	bl	80050f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d19d      	bne.n	8004aec <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	6a39      	ldr	r1, [r7, #32]
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f000 f8ed 	bl	8004d94 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d001      	beq.n	8004bc4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e01a      	b.n	8004bfa <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2220      	movs	r2, #32
 8004bca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6859      	ldr	r1, [r3, #4]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8004c08 <HAL_I2C_Master_Receive+0x1e8>)
 8004bd8:	400b      	ands	r3, r1
 8004bda:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2220      	movs	r2, #32
 8004be0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	e000      	b.n	8004bfa <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004bf8:	2302      	movs	r3, #2
  }
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3718      	adds	r7, #24
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	80002400 	.word	0x80002400
 8004c08:	fe00e800 	.word	0xfe00e800

08004c0c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d103      	bne.n	8004c2a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2200      	movs	r2, #0
 8004c28:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d007      	beq.n	8004c48 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	699a      	ldr	r2, [r3, #24]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f042 0201 	orr.w	r2, r2, #1
 8004c46:	619a      	str	r2, [r3, #24]
  }
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	603b      	str	r3, [r7, #0]
 8004c60:	4613      	mov	r3, r2
 8004c62:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c64:	e03b      	b.n	8004cde <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c66:	69ba      	ldr	r2, [r7, #24]
 8004c68:	6839      	ldr	r1, [r7, #0]
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f000 f962 	bl	8004f34 <I2C_IsErrorOccurred>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d001      	beq.n	8004c7a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e041      	b.n	8004cfe <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c80:	d02d      	beq.n	8004cde <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c82:	f7fc fdad 	bl	80017e0 <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d302      	bcc.n	8004c98 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d122      	bne.n	8004cde <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	699a      	ldr	r2, [r3, #24]
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	68ba      	ldr	r2, [r7, #8]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	bf0c      	ite	eq
 8004ca8:	2301      	moveq	r3, #1
 8004caa:	2300      	movne	r3, #0
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	461a      	mov	r2, r3
 8004cb0:	79fb      	ldrb	r3, [r7, #7]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d113      	bne.n	8004cde <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cba:	f043 0220 	orr.w	r2, r3, #32
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2220      	movs	r2, #32
 8004cc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e00f      	b.n	8004cfe <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	699a      	ldr	r2, [r3, #24]
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	bf0c      	ite	eq
 8004cee:	2301      	moveq	r3, #1
 8004cf0:	2300      	movne	r3, #0
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	79fb      	ldrb	r3, [r7, #7]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d0b4      	beq.n	8004c66 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b084      	sub	sp, #16
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	60f8      	str	r0, [r7, #12]
 8004d0e:	60b9      	str	r1, [r7, #8]
 8004d10:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d12:	e033      	b.n	8004d7c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	68b9      	ldr	r1, [r7, #8]
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f000 f90b 	bl	8004f34 <I2C_IsErrorOccurred>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d001      	beq.n	8004d28 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e031      	b.n	8004d8c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d2e:	d025      	beq.n	8004d7c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d30:	f7fc fd56 	bl	80017e0 <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	68ba      	ldr	r2, [r7, #8]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d302      	bcc.n	8004d46 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d11a      	bne.n	8004d7c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	f003 0302 	and.w	r3, r3, #2
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d013      	beq.n	8004d7c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d58:	f043 0220 	orr.w	r2, r3, #32
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2220      	movs	r2, #32
 8004d64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e007      	b.n	8004d8c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d1c4      	bne.n	8004d14 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004da0:	e02f      	b.n	8004e02 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	68b9      	ldr	r1, [r7, #8]
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f000 f8c4 	bl	8004f34 <I2C_IsErrorOccurred>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e02d      	b.n	8004e12 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004db6:	f7fc fd13 	bl	80017e0 <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d302      	bcc.n	8004dcc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d11a      	bne.n	8004e02 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	f003 0320 	and.w	r3, r3, #32
 8004dd6:	2b20      	cmp	r3, #32
 8004dd8:	d013      	beq.n	8004e02 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dde:	f043 0220 	orr.w	r2, r3, #32
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2220      	movs	r2, #32
 8004dea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e007      	b.n	8004e12 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	f003 0320 	and.w	r3, r3, #32
 8004e0c:	2b20      	cmp	r3, #32
 8004e0e:	d1c8      	bne.n	8004da2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
	...

08004e1c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004e2c:	e071      	b.n	8004f12 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	68b9      	ldr	r1, [r7, #8]
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	f000 f87e 	bl	8004f34 <I2C_IsErrorOccurred>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	f003 0320 	and.w	r3, r3, #32
 8004e4c:	2b20      	cmp	r3, #32
 8004e4e:	d13b      	bne.n	8004ec8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8004e50:	7dfb      	ldrb	r3, [r7, #23]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d138      	bne.n	8004ec8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	f003 0304 	and.w	r3, r3, #4
 8004e60:	2b04      	cmp	r3, #4
 8004e62:	d105      	bne.n	8004e70 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d001      	beq.n	8004e70 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	f003 0310 	and.w	r3, r3, #16
 8004e7a:	2b10      	cmp	r3, #16
 8004e7c:	d121      	bne.n	8004ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2210      	movs	r2, #16
 8004e84:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2204      	movs	r2, #4
 8004e8a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2220      	movs	r2, #32
 8004e92:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6859      	ldr	r1, [r3, #4]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	4b24      	ldr	r3, [pc, #144]	@ (8004f30 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8004ea0:	400b      	ands	r3, r1
 8004ea2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2220      	movs	r2, #32
 8004ea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	75fb      	strb	r3, [r7, #23]
 8004ec0:	e002      	b.n	8004ec8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8004ec8:	f7fc fc8a 	bl	80017e0 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	68ba      	ldr	r2, [r7, #8]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d302      	bcc.n	8004ede <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d119      	bne.n	8004f12 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8004ede:	7dfb      	ldrb	r3, [r7, #23]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d116      	bne.n	8004f12 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	f003 0304 	and.w	r3, r3, #4
 8004eee:	2b04      	cmp	r3, #4
 8004ef0:	d00f      	beq.n	8004f12 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ef6:	f043 0220 	orr.w	r2, r3, #32
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2220      	movs	r2, #32
 8004f02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	f003 0304 	and.w	r3, r3, #4
 8004f1c:	2b04      	cmp	r3, #4
 8004f1e:	d002      	beq.n	8004f26 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8004f20:	7dfb      	ldrb	r3, [r7, #23]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d083      	beq.n	8004e2e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8004f26:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3718      	adds	r7, #24
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	fe00e800 	.word	0xfe00e800

08004f34 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b08a      	sub	sp, #40	@ 0x28
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f40:	2300      	movs	r3, #0
 8004f42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	f003 0310 	and.w	r3, r3, #16
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d068      	beq.n	8005032 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2210      	movs	r2, #16
 8004f66:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004f68:	e049      	b.n	8004ffe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f70:	d045      	beq.n	8004ffe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004f72:	f7fc fc35 	bl	80017e0 <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d302      	bcc.n	8004f88 <I2C_IsErrorOccurred+0x54>
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d13a      	bne.n	8004ffe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f92:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004f9a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004fa6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004faa:	d121      	bne.n	8004ff0 <I2C_IsErrorOccurred+0xbc>
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004fb2:	d01d      	beq.n	8004ff0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004fb4:	7cfb      	ldrb	r3, [r7, #19]
 8004fb6:	2b20      	cmp	r3, #32
 8004fb8:	d01a      	beq.n	8004ff0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	685a      	ldr	r2, [r3, #4]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004fc8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004fca:	f7fc fc09 	bl	80017e0 <HAL_GetTick>
 8004fce:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fd0:	e00e      	b.n	8004ff0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004fd2:	f7fc fc05 	bl	80017e0 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	2b19      	cmp	r3, #25
 8004fde:	d907      	bls.n	8004ff0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004fe0:	6a3b      	ldr	r3, [r7, #32]
 8004fe2:	f043 0320 	orr.w	r3, r3, #32
 8004fe6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004fee:	e006      	b.n	8004ffe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	f003 0320 	and.w	r3, r3, #32
 8004ffa:	2b20      	cmp	r3, #32
 8004ffc:	d1e9      	bne.n	8004fd2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	f003 0320 	and.w	r3, r3, #32
 8005008:	2b20      	cmp	r3, #32
 800500a:	d003      	beq.n	8005014 <I2C_IsErrorOccurred+0xe0>
 800500c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005010:	2b00      	cmp	r3, #0
 8005012:	d0aa      	beq.n	8004f6a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005014:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005018:	2b00      	cmp	r3, #0
 800501a:	d103      	bne.n	8005024 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2220      	movs	r2, #32
 8005022:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005024:	6a3b      	ldr	r3, [r7, #32]
 8005026:	f043 0304 	orr.w	r3, r3, #4
 800502a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00b      	beq.n	800505c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005044:	6a3b      	ldr	r3, [r7, #32]
 8005046:	f043 0301 	orr.w	r3, r3, #1
 800504a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005054:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00b      	beq.n	800507e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005066:	6a3b      	ldr	r3, [r7, #32]
 8005068:	f043 0308 	orr.w	r3, r3, #8
 800506c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005076:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00b      	beq.n	80050a0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005088:	6a3b      	ldr	r3, [r7, #32]
 800508a:	f043 0302 	orr.w	r3, r3, #2
 800508e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005098:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80050a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d01c      	beq.n	80050e2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f7ff fdaf 	bl	8004c0c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	6859      	ldr	r1, [r3, #4]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	4b0d      	ldr	r3, [pc, #52]	@ (80050f0 <I2C_IsErrorOccurred+0x1bc>)
 80050ba:	400b      	ands	r3, r1
 80050bc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050c2:	6a3b      	ldr	r3, [r7, #32]
 80050c4:	431a      	orrs	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2220      	movs	r2, #32
 80050ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80050e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3728      	adds	r7, #40	@ 0x28
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	fe00e800 	.word	0xfe00e800

080050f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b087      	sub	sp, #28
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	607b      	str	r3, [r7, #4]
 80050fe:	460b      	mov	r3, r1
 8005100:	817b      	strh	r3, [r7, #10]
 8005102:	4613      	mov	r3, r2
 8005104:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005106:	897b      	ldrh	r3, [r7, #10]
 8005108:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800510c:	7a7b      	ldrb	r3, [r7, #9]
 800510e:	041b      	lsls	r3, r3, #16
 8005110:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005114:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800511a:	6a3b      	ldr	r3, [r7, #32]
 800511c:	4313      	orrs	r3, r2
 800511e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005122:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	685a      	ldr	r2, [r3, #4]
 800512a:	6a3b      	ldr	r3, [r7, #32]
 800512c:	0d5b      	lsrs	r3, r3, #21
 800512e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005132:	4b08      	ldr	r3, [pc, #32]	@ (8005154 <I2C_TransferConfig+0x60>)
 8005134:	430b      	orrs	r3, r1
 8005136:	43db      	mvns	r3, r3
 8005138:	ea02 0103 	and.w	r1, r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	430a      	orrs	r2, r1
 8005144:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005146:	bf00      	nop
 8005148:	371c      	adds	r7, #28
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	03ff63ff 	.word	0x03ff63ff

08005158 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b20      	cmp	r3, #32
 800516c:	d138      	bne.n	80051e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005174:	2b01      	cmp	r3, #1
 8005176:	d101      	bne.n	800517c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005178:	2302      	movs	r3, #2
 800517a:	e032      	b.n	80051e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2224      	movs	r2, #36	@ 0x24
 8005188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f022 0201 	bic.w	r2, r2, #1
 800519a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80051aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6819      	ldr	r1, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	683a      	ldr	r2, [r7, #0]
 80051b8:	430a      	orrs	r2, r1
 80051ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f042 0201 	orr.w	r2, r2, #1
 80051ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2220      	movs	r2, #32
 80051d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80051dc:	2300      	movs	r3, #0
 80051de:	e000      	b.n	80051e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80051e0:	2302      	movs	r3, #2
  }
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	370c      	adds	r7, #12
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr

080051ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80051ee:	b480      	push	{r7}
 80051f0:	b085      	sub	sp, #20
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
 80051f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	2b20      	cmp	r3, #32
 8005202:	d139      	bne.n	8005278 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800520a:	2b01      	cmp	r3, #1
 800520c:	d101      	bne.n	8005212 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800520e:	2302      	movs	r3, #2
 8005210:	e033      	b.n	800527a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2224      	movs	r2, #36	@ 0x24
 800521e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f022 0201 	bic.w	r2, r2, #1
 8005230:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005240:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	021b      	lsls	r3, r3, #8
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	4313      	orrs	r3, r2
 800524a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f042 0201 	orr.w	r2, r2, #1
 8005262:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2220      	movs	r2, #32
 8005268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005274:	2300      	movs	r3, #0
 8005276:	e000      	b.n	800527a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005278:	2302      	movs	r3, #2
  }
}
 800527a:	4618      	mov	r0, r3
 800527c:	3714      	adds	r7, #20
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
	...

08005288 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005290:	4b19      	ldr	r3, [pc, #100]	@ (80052f8 <HAL_PWREx_ConfigSupply+0x70>)
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	f003 0304 	and.w	r3, r3, #4
 8005298:	2b04      	cmp	r3, #4
 800529a:	d00a      	beq.n	80052b2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800529c:	4b16      	ldr	r3, [pc, #88]	@ (80052f8 <HAL_PWREx_ConfigSupply+0x70>)
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	f003 0307 	and.w	r3, r3, #7
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d001      	beq.n	80052ae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e01f      	b.n	80052ee <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80052ae:	2300      	movs	r3, #0
 80052b0:	e01d      	b.n	80052ee <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80052b2:	4b11      	ldr	r3, [pc, #68]	@ (80052f8 <HAL_PWREx_ConfigSupply+0x70>)
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	f023 0207 	bic.w	r2, r3, #7
 80052ba:	490f      	ldr	r1, [pc, #60]	@ (80052f8 <HAL_PWREx_ConfigSupply+0x70>)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4313      	orrs	r3, r2
 80052c0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80052c2:	f7fc fa8d 	bl	80017e0 <HAL_GetTick>
 80052c6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80052c8:	e009      	b.n	80052de <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80052ca:	f7fc fa89 	bl	80017e0 <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80052d8:	d901      	bls.n	80052de <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e007      	b.n	80052ee <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80052de:	4b06      	ldr	r3, [pc, #24]	@ (80052f8 <HAL_PWREx_ConfigSupply+0x70>)
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052ea:	d1ee      	bne.n	80052ca <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3710      	adds	r7, #16
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	58024800 	.word	0x58024800

080052fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b08c      	sub	sp, #48	@ 0x30
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d102      	bne.n	8005310 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	f000 bc48 	b.w	8005ba0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	2b00      	cmp	r3, #0
 800531a:	f000 8088 	beq.w	800542e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800531e:	4b99      	ldr	r3, [pc, #612]	@ (8005584 <HAL_RCC_OscConfig+0x288>)
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005326:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005328:	4b96      	ldr	r3, [pc, #600]	@ (8005584 <HAL_RCC_OscConfig+0x288>)
 800532a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800532c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800532e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005330:	2b10      	cmp	r3, #16
 8005332:	d007      	beq.n	8005344 <HAL_RCC_OscConfig+0x48>
 8005334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005336:	2b18      	cmp	r3, #24
 8005338:	d111      	bne.n	800535e <HAL_RCC_OscConfig+0x62>
 800533a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800533c:	f003 0303 	and.w	r3, r3, #3
 8005340:	2b02      	cmp	r3, #2
 8005342:	d10c      	bne.n	800535e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005344:	4b8f      	ldr	r3, [pc, #572]	@ (8005584 <HAL_RCC_OscConfig+0x288>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d06d      	beq.n	800542c <HAL_RCC_OscConfig+0x130>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d169      	bne.n	800542c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	f000 bc21 	b.w	8005ba0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005366:	d106      	bne.n	8005376 <HAL_RCC_OscConfig+0x7a>
 8005368:	4b86      	ldr	r3, [pc, #536]	@ (8005584 <HAL_RCC_OscConfig+0x288>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a85      	ldr	r2, [pc, #532]	@ (8005584 <HAL_RCC_OscConfig+0x288>)
 800536e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005372:	6013      	str	r3, [r2, #0]
 8005374:	e02e      	b.n	80053d4 <HAL_RCC_OscConfig+0xd8>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d10c      	bne.n	8005398 <HAL_RCC_OscConfig+0x9c>
 800537e:	4b81      	ldr	r3, [pc, #516]	@ (8005584 <HAL_RCC_OscConfig+0x288>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a80      	ldr	r2, [pc, #512]	@ (8005584 <HAL_RCC_OscConfig+0x288>)
 8005384:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005388:	6013      	str	r3, [r2, #0]
 800538a:	4b7e      	ldr	r3, [pc, #504]	@ (8005584 <HAL_RCC_OscConfig+0x288>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a7d      	ldr	r2, [pc, #500]	@ (8005584 <HAL_RCC_OscConfig+0x288>)
 8005390:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005394:	6013      	str	r3, [r2, #0]
 8005396:	e01d      	b.n	80053d4 <HAL_RCC_OscConfig+0xd8>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80053a0:	d10c      	bne.n	80053bc <HAL_RCC_OscConfig+0xc0>
 80053a2:	4b78      	ldr	r3, [pc, #480]	@ (8005584 <HAL_RCC_OscConfig+0x288>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a77      	ldr	r2, [pc, #476]	@ (8005584 <HAL_RCC_OscConfig+0x288>)
 80053a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80053ac:	6013      	str	r3, [r2, #0]
 80053ae:	4b75      	ldr	r3, [pc, #468]	@ (8005584 <HAL_RCC_OscConfig+0x288>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a74      	ldr	r2, [pc, #464]	@ (8005584 <HAL_RCC_OscConfig+0x288>)
 80053b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053b8:	6013      	str	r3, [r2, #0]
 80053ba:	e00b      	b.n	80053d4 <HAL_RCC_OscConfig+0xd8>
 80053bc:	4b71      	ldr	r3, [pc, #452]	@ (8005584 <HAL_RCC_OscConfig+0x288>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a70      	ldr	r2, [pc, #448]	@ (8005584 <HAL_RCC_OscConfig+0x288>)
 80053c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053c6:	6013      	str	r3, [r2, #0]
 80053c8:	4b6e      	ldr	r3, [pc, #440]	@ (8005584 <HAL_RCC_OscConfig+0x288>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a6d      	ldr	r2, [pc, #436]	@ (8005584 <HAL_RCC_OscConfig+0x288>)
 80053ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d013      	beq.n	8005404 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053dc:	f7fc fa00 	bl	80017e0 <HAL_GetTick>
 80053e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053e2:	e008      	b.n	80053f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053e4:	f7fc f9fc 	bl	80017e0 <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	2b64      	cmp	r3, #100	@ 0x64
 80053f0:	d901      	bls.n	80053f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e3d4      	b.n	8005ba0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053f6:	4b63      	ldr	r3, [pc, #396]	@ (8005584 <HAL_RCC_OscConfig+0x288>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d0f0      	beq.n	80053e4 <HAL_RCC_OscConfig+0xe8>
 8005402:	e014      	b.n	800542e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005404:	f7fc f9ec 	bl	80017e0 <HAL_GetTick>
 8005408:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800540a:	e008      	b.n	800541e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800540c:	f7fc f9e8 	bl	80017e0 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	2b64      	cmp	r3, #100	@ 0x64
 8005418:	d901      	bls.n	800541e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e3c0      	b.n	8005ba0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800541e:	4b59      	ldr	r3, [pc, #356]	@ (8005584 <HAL_RCC_OscConfig+0x288>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1f0      	bne.n	800540c <HAL_RCC_OscConfig+0x110>
 800542a:	e000      	b.n	800542e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800542c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	2b00      	cmp	r3, #0
 8005438:	f000 80ca 	beq.w	80055d0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800543c:	4b51      	ldr	r3, [pc, #324]	@ (8005584 <HAL_RCC_OscConfig+0x288>)
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005444:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005446:	4b4f      	ldr	r3, [pc, #316]	@ (8005584 <HAL_RCC_OscConfig+0x288>)
 8005448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800544a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800544c:	6a3b      	ldr	r3, [r7, #32]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d007      	beq.n	8005462 <HAL_RCC_OscConfig+0x166>
 8005452:	6a3b      	ldr	r3, [r7, #32]
 8005454:	2b18      	cmp	r3, #24
 8005456:	d156      	bne.n	8005506 <HAL_RCC_OscConfig+0x20a>
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	f003 0303 	and.w	r3, r3, #3
 800545e:	2b00      	cmp	r3, #0
 8005460:	d151      	bne.n	8005506 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005462:	4b48      	ldr	r3, [pc, #288]	@ (8005584 <HAL_RCC_OscConfig+0x288>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0304 	and.w	r3, r3, #4
 800546a:	2b00      	cmp	r3, #0
 800546c:	d005      	beq.n	800547a <HAL_RCC_OscConfig+0x17e>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d101      	bne.n	800547a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e392      	b.n	8005ba0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800547a:	4b42      	ldr	r3, [pc, #264]	@ (8005584 <HAL_RCC_OscConfig+0x288>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f023 0219 	bic.w	r2, r3, #25
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	493f      	ldr	r1, [pc, #252]	@ (8005584 <HAL_RCC_OscConfig+0x288>)
 8005488:	4313      	orrs	r3, r2
 800548a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800548c:	f7fc f9a8 	bl	80017e0 <HAL_GetTick>
 8005490:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005492:	e008      	b.n	80054a6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005494:	f7fc f9a4 	bl	80017e0 <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d901      	bls.n	80054a6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e37c      	b.n	8005ba0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054a6:	4b37      	ldr	r3, [pc, #220]	@ (8005584 <HAL_RCC_OscConfig+0x288>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0304 	and.w	r3, r3, #4
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d0f0      	beq.n	8005494 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054b2:	f7fc f9c5 	bl	8001840 <HAL_GetREVID>
 80054b6:	4603      	mov	r3, r0
 80054b8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80054bc:	4293      	cmp	r3, r2
 80054be:	d817      	bhi.n	80054f0 <HAL_RCC_OscConfig+0x1f4>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	2b40      	cmp	r3, #64	@ 0x40
 80054c6:	d108      	bne.n	80054da <HAL_RCC_OscConfig+0x1de>
 80054c8:	4b2e      	ldr	r3, [pc, #184]	@ (8005584 <HAL_RCC_OscConfig+0x288>)
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80054d0:	4a2c      	ldr	r2, [pc, #176]	@ (8005584 <HAL_RCC_OscConfig+0x288>)
 80054d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054d6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054d8:	e07a      	b.n	80055d0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054da:	4b2a      	ldr	r3, [pc, #168]	@ (8005584 <HAL_RCC_OscConfig+0x288>)
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	031b      	lsls	r3, r3, #12
 80054e8:	4926      	ldr	r1, [pc, #152]	@ (8005584 <HAL_RCC_OscConfig+0x288>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054ee:	e06f      	b.n	80055d0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054f0:	4b24      	ldr	r3, [pc, #144]	@ (8005584 <HAL_RCC_OscConfig+0x288>)
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	061b      	lsls	r3, r3, #24
 80054fe:	4921      	ldr	r1, [pc, #132]	@ (8005584 <HAL_RCC_OscConfig+0x288>)
 8005500:	4313      	orrs	r3, r2
 8005502:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005504:	e064      	b.n	80055d0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d047      	beq.n	800559e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800550e:	4b1d      	ldr	r3, [pc, #116]	@ (8005584 <HAL_RCC_OscConfig+0x288>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f023 0219 	bic.w	r2, r3, #25
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	491a      	ldr	r1, [pc, #104]	@ (8005584 <HAL_RCC_OscConfig+0x288>)
 800551c:	4313      	orrs	r3, r2
 800551e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005520:	f7fc f95e 	bl	80017e0 <HAL_GetTick>
 8005524:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005526:	e008      	b.n	800553a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005528:	f7fc f95a 	bl	80017e0 <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	2b02      	cmp	r3, #2
 8005534:	d901      	bls.n	800553a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e332      	b.n	8005ba0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800553a:	4b12      	ldr	r3, [pc, #72]	@ (8005584 <HAL_RCC_OscConfig+0x288>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0304 	and.w	r3, r3, #4
 8005542:	2b00      	cmp	r3, #0
 8005544:	d0f0      	beq.n	8005528 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005546:	f7fc f97b 	bl	8001840 <HAL_GetREVID>
 800554a:	4603      	mov	r3, r0
 800554c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005550:	4293      	cmp	r3, r2
 8005552:	d819      	bhi.n	8005588 <HAL_RCC_OscConfig+0x28c>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	2b40      	cmp	r3, #64	@ 0x40
 800555a:	d108      	bne.n	800556e <HAL_RCC_OscConfig+0x272>
 800555c:	4b09      	ldr	r3, [pc, #36]	@ (8005584 <HAL_RCC_OscConfig+0x288>)
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005564:	4a07      	ldr	r2, [pc, #28]	@ (8005584 <HAL_RCC_OscConfig+0x288>)
 8005566:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800556a:	6053      	str	r3, [r2, #4]
 800556c:	e030      	b.n	80055d0 <HAL_RCC_OscConfig+0x2d4>
 800556e:	4b05      	ldr	r3, [pc, #20]	@ (8005584 <HAL_RCC_OscConfig+0x288>)
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	031b      	lsls	r3, r3, #12
 800557c:	4901      	ldr	r1, [pc, #4]	@ (8005584 <HAL_RCC_OscConfig+0x288>)
 800557e:	4313      	orrs	r3, r2
 8005580:	604b      	str	r3, [r1, #4]
 8005582:	e025      	b.n	80055d0 <HAL_RCC_OscConfig+0x2d4>
 8005584:	58024400 	.word	0x58024400
 8005588:	4b9a      	ldr	r3, [pc, #616]	@ (80057f4 <HAL_RCC_OscConfig+0x4f8>)
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	061b      	lsls	r3, r3, #24
 8005596:	4997      	ldr	r1, [pc, #604]	@ (80057f4 <HAL_RCC_OscConfig+0x4f8>)
 8005598:	4313      	orrs	r3, r2
 800559a:	604b      	str	r3, [r1, #4]
 800559c:	e018      	b.n	80055d0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800559e:	4b95      	ldr	r3, [pc, #596]	@ (80057f4 <HAL_RCC_OscConfig+0x4f8>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a94      	ldr	r2, [pc, #592]	@ (80057f4 <HAL_RCC_OscConfig+0x4f8>)
 80055a4:	f023 0301 	bic.w	r3, r3, #1
 80055a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055aa:	f7fc f919 	bl	80017e0 <HAL_GetTick>
 80055ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80055b0:	e008      	b.n	80055c4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055b2:	f7fc f915 	bl	80017e0 <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d901      	bls.n	80055c4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e2ed      	b.n	8005ba0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80055c4:	4b8b      	ldr	r3, [pc, #556]	@ (80057f4 <HAL_RCC_OscConfig+0x4f8>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0304 	and.w	r3, r3, #4
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d1f0      	bne.n	80055b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0310 	and.w	r3, r3, #16
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f000 80a9 	beq.w	8005730 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055de:	4b85      	ldr	r3, [pc, #532]	@ (80057f4 <HAL_RCC_OscConfig+0x4f8>)
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80055e6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80055e8:	4b82      	ldr	r3, [pc, #520]	@ (80057f4 <HAL_RCC_OscConfig+0x4f8>)
 80055ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ec:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	2b08      	cmp	r3, #8
 80055f2:	d007      	beq.n	8005604 <HAL_RCC_OscConfig+0x308>
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	2b18      	cmp	r3, #24
 80055f8:	d13a      	bne.n	8005670 <HAL_RCC_OscConfig+0x374>
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f003 0303 	and.w	r3, r3, #3
 8005600:	2b01      	cmp	r3, #1
 8005602:	d135      	bne.n	8005670 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005604:	4b7b      	ldr	r3, [pc, #492]	@ (80057f4 <HAL_RCC_OscConfig+0x4f8>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800560c:	2b00      	cmp	r3, #0
 800560e:	d005      	beq.n	800561c <HAL_RCC_OscConfig+0x320>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	69db      	ldr	r3, [r3, #28]
 8005614:	2b80      	cmp	r3, #128	@ 0x80
 8005616:	d001      	beq.n	800561c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e2c1      	b.n	8005ba0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800561c:	f7fc f910 	bl	8001840 <HAL_GetREVID>
 8005620:	4603      	mov	r3, r0
 8005622:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005626:	4293      	cmp	r3, r2
 8005628:	d817      	bhi.n	800565a <HAL_RCC_OscConfig+0x35e>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	2b20      	cmp	r3, #32
 8005630:	d108      	bne.n	8005644 <HAL_RCC_OscConfig+0x348>
 8005632:	4b70      	ldr	r3, [pc, #448]	@ (80057f4 <HAL_RCC_OscConfig+0x4f8>)
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800563a:	4a6e      	ldr	r2, [pc, #440]	@ (80057f4 <HAL_RCC_OscConfig+0x4f8>)
 800563c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005640:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005642:	e075      	b.n	8005730 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005644:	4b6b      	ldr	r3, [pc, #428]	@ (80057f4 <HAL_RCC_OscConfig+0x4f8>)
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a1b      	ldr	r3, [r3, #32]
 8005650:	069b      	lsls	r3, r3, #26
 8005652:	4968      	ldr	r1, [pc, #416]	@ (80057f4 <HAL_RCC_OscConfig+0x4f8>)
 8005654:	4313      	orrs	r3, r2
 8005656:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005658:	e06a      	b.n	8005730 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800565a:	4b66      	ldr	r3, [pc, #408]	@ (80057f4 <HAL_RCC_OscConfig+0x4f8>)
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	061b      	lsls	r3, r3, #24
 8005668:	4962      	ldr	r1, [pc, #392]	@ (80057f4 <HAL_RCC_OscConfig+0x4f8>)
 800566a:	4313      	orrs	r3, r2
 800566c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800566e:	e05f      	b.n	8005730 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	69db      	ldr	r3, [r3, #28]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d042      	beq.n	80056fe <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005678:	4b5e      	ldr	r3, [pc, #376]	@ (80057f4 <HAL_RCC_OscConfig+0x4f8>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a5d      	ldr	r2, [pc, #372]	@ (80057f4 <HAL_RCC_OscConfig+0x4f8>)
 800567e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005682:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005684:	f7fc f8ac 	bl	80017e0 <HAL_GetTick>
 8005688:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800568a:	e008      	b.n	800569e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800568c:	f7fc f8a8 	bl	80017e0 <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	2b02      	cmp	r3, #2
 8005698:	d901      	bls.n	800569e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e280      	b.n	8005ba0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800569e:	4b55      	ldr	r3, [pc, #340]	@ (80057f4 <HAL_RCC_OscConfig+0x4f8>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d0f0      	beq.n	800568c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80056aa:	f7fc f8c9 	bl	8001840 <HAL_GetREVID>
 80056ae:	4603      	mov	r3, r0
 80056b0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d817      	bhi.n	80056e8 <HAL_RCC_OscConfig+0x3ec>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a1b      	ldr	r3, [r3, #32]
 80056bc:	2b20      	cmp	r3, #32
 80056be:	d108      	bne.n	80056d2 <HAL_RCC_OscConfig+0x3d6>
 80056c0:	4b4c      	ldr	r3, [pc, #304]	@ (80057f4 <HAL_RCC_OscConfig+0x4f8>)
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80056c8:	4a4a      	ldr	r2, [pc, #296]	@ (80057f4 <HAL_RCC_OscConfig+0x4f8>)
 80056ca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80056ce:	6053      	str	r3, [r2, #4]
 80056d0:	e02e      	b.n	8005730 <HAL_RCC_OscConfig+0x434>
 80056d2:	4b48      	ldr	r3, [pc, #288]	@ (80057f4 <HAL_RCC_OscConfig+0x4f8>)
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	069b      	lsls	r3, r3, #26
 80056e0:	4944      	ldr	r1, [pc, #272]	@ (80057f4 <HAL_RCC_OscConfig+0x4f8>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	604b      	str	r3, [r1, #4]
 80056e6:	e023      	b.n	8005730 <HAL_RCC_OscConfig+0x434>
 80056e8:	4b42      	ldr	r3, [pc, #264]	@ (80057f4 <HAL_RCC_OscConfig+0x4f8>)
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a1b      	ldr	r3, [r3, #32]
 80056f4:	061b      	lsls	r3, r3, #24
 80056f6:	493f      	ldr	r1, [pc, #252]	@ (80057f4 <HAL_RCC_OscConfig+0x4f8>)
 80056f8:	4313      	orrs	r3, r2
 80056fa:	60cb      	str	r3, [r1, #12]
 80056fc:	e018      	b.n	8005730 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80056fe:	4b3d      	ldr	r3, [pc, #244]	@ (80057f4 <HAL_RCC_OscConfig+0x4f8>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a3c      	ldr	r2, [pc, #240]	@ (80057f4 <HAL_RCC_OscConfig+0x4f8>)
 8005704:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005708:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800570a:	f7fc f869 	bl	80017e0 <HAL_GetTick>
 800570e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005710:	e008      	b.n	8005724 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005712:	f7fc f865 	bl	80017e0 <HAL_GetTick>
 8005716:	4602      	mov	r2, r0
 8005718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	2b02      	cmp	r3, #2
 800571e:	d901      	bls.n	8005724 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e23d      	b.n	8005ba0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005724:	4b33      	ldr	r3, [pc, #204]	@ (80057f4 <HAL_RCC_OscConfig+0x4f8>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1f0      	bne.n	8005712 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 0308 	and.w	r3, r3, #8
 8005738:	2b00      	cmp	r3, #0
 800573a:	d036      	beq.n	80057aa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	695b      	ldr	r3, [r3, #20]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d019      	beq.n	8005778 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005744:	4b2b      	ldr	r3, [pc, #172]	@ (80057f4 <HAL_RCC_OscConfig+0x4f8>)
 8005746:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005748:	4a2a      	ldr	r2, [pc, #168]	@ (80057f4 <HAL_RCC_OscConfig+0x4f8>)
 800574a:	f043 0301 	orr.w	r3, r3, #1
 800574e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005750:	f7fc f846 	bl	80017e0 <HAL_GetTick>
 8005754:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005756:	e008      	b.n	800576a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005758:	f7fc f842 	bl	80017e0 <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	2b02      	cmp	r3, #2
 8005764:	d901      	bls.n	800576a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e21a      	b.n	8005ba0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800576a:	4b22      	ldr	r3, [pc, #136]	@ (80057f4 <HAL_RCC_OscConfig+0x4f8>)
 800576c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800576e:	f003 0302 	and.w	r3, r3, #2
 8005772:	2b00      	cmp	r3, #0
 8005774:	d0f0      	beq.n	8005758 <HAL_RCC_OscConfig+0x45c>
 8005776:	e018      	b.n	80057aa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005778:	4b1e      	ldr	r3, [pc, #120]	@ (80057f4 <HAL_RCC_OscConfig+0x4f8>)
 800577a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800577c:	4a1d      	ldr	r2, [pc, #116]	@ (80057f4 <HAL_RCC_OscConfig+0x4f8>)
 800577e:	f023 0301 	bic.w	r3, r3, #1
 8005782:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005784:	f7fc f82c 	bl	80017e0 <HAL_GetTick>
 8005788:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800578a:	e008      	b.n	800579e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800578c:	f7fc f828 	bl	80017e0 <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	2b02      	cmp	r3, #2
 8005798:	d901      	bls.n	800579e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e200      	b.n	8005ba0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800579e:	4b15      	ldr	r3, [pc, #84]	@ (80057f4 <HAL_RCC_OscConfig+0x4f8>)
 80057a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057a2:	f003 0302 	and.w	r3, r3, #2
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1f0      	bne.n	800578c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0320 	and.w	r3, r3, #32
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d039      	beq.n	800582a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	699b      	ldr	r3, [r3, #24]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d01c      	beq.n	80057f8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80057be:	4b0d      	ldr	r3, [pc, #52]	@ (80057f4 <HAL_RCC_OscConfig+0x4f8>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a0c      	ldr	r2, [pc, #48]	@ (80057f4 <HAL_RCC_OscConfig+0x4f8>)
 80057c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80057c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80057ca:	f7fc f809 	bl	80017e0 <HAL_GetTick>
 80057ce:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80057d0:	e008      	b.n	80057e4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057d2:	f7fc f805 	bl	80017e0 <HAL_GetTick>
 80057d6:	4602      	mov	r2, r0
 80057d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d901      	bls.n	80057e4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	e1dd      	b.n	8005ba0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80057e4:	4b03      	ldr	r3, [pc, #12]	@ (80057f4 <HAL_RCC_OscConfig+0x4f8>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d0f0      	beq.n	80057d2 <HAL_RCC_OscConfig+0x4d6>
 80057f0:	e01b      	b.n	800582a <HAL_RCC_OscConfig+0x52e>
 80057f2:	bf00      	nop
 80057f4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80057f8:	4b9b      	ldr	r3, [pc, #620]	@ (8005a68 <HAL_RCC_OscConfig+0x76c>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a9a      	ldr	r2, [pc, #616]	@ (8005a68 <HAL_RCC_OscConfig+0x76c>)
 80057fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005802:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005804:	f7fb ffec 	bl	80017e0 <HAL_GetTick>
 8005808:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800580a:	e008      	b.n	800581e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800580c:	f7fb ffe8 	bl	80017e0 <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	2b02      	cmp	r3, #2
 8005818:	d901      	bls.n	800581e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	e1c0      	b.n	8005ba0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800581e:	4b92      	ldr	r3, [pc, #584]	@ (8005a68 <HAL_RCC_OscConfig+0x76c>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1f0      	bne.n	800580c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0304 	and.w	r3, r3, #4
 8005832:	2b00      	cmp	r3, #0
 8005834:	f000 8081 	beq.w	800593a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005838:	4b8c      	ldr	r3, [pc, #560]	@ (8005a6c <HAL_RCC_OscConfig+0x770>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a8b      	ldr	r2, [pc, #556]	@ (8005a6c <HAL_RCC_OscConfig+0x770>)
 800583e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005842:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005844:	f7fb ffcc 	bl	80017e0 <HAL_GetTick>
 8005848:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800584a:	e008      	b.n	800585e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800584c:	f7fb ffc8 	bl	80017e0 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	2b64      	cmp	r3, #100	@ 0x64
 8005858:	d901      	bls.n	800585e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e1a0      	b.n	8005ba0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800585e:	4b83      	ldr	r3, [pc, #524]	@ (8005a6c <HAL_RCC_OscConfig+0x770>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005866:	2b00      	cmp	r3, #0
 8005868:	d0f0      	beq.n	800584c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	2b01      	cmp	r3, #1
 8005870:	d106      	bne.n	8005880 <HAL_RCC_OscConfig+0x584>
 8005872:	4b7d      	ldr	r3, [pc, #500]	@ (8005a68 <HAL_RCC_OscConfig+0x76c>)
 8005874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005876:	4a7c      	ldr	r2, [pc, #496]	@ (8005a68 <HAL_RCC_OscConfig+0x76c>)
 8005878:	f043 0301 	orr.w	r3, r3, #1
 800587c:	6713      	str	r3, [r2, #112]	@ 0x70
 800587e:	e02d      	b.n	80058dc <HAL_RCC_OscConfig+0x5e0>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d10c      	bne.n	80058a2 <HAL_RCC_OscConfig+0x5a6>
 8005888:	4b77      	ldr	r3, [pc, #476]	@ (8005a68 <HAL_RCC_OscConfig+0x76c>)
 800588a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800588c:	4a76      	ldr	r2, [pc, #472]	@ (8005a68 <HAL_RCC_OscConfig+0x76c>)
 800588e:	f023 0301 	bic.w	r3, r3, #1
 8005892:	6713      	str	r3, [r2, #112]	@ 0x70
 8005894:	4b74      	ldr	r3, [pc, #464]	@ (8005a68 <HAL_RCC_OscConfig+0x76c>)
 8005896:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005898:	4a73      	ldr	r2, [pc, #460]	@ (8005a68 <HAL_RCC_OscConfig+0x76c>)
 800589a:	f023 0304 	bic.w	r3, r3, #4
 800589e:	6713      	str	r3, [r2, #112]	@ 0x70
 80058a0:	e01c      	b.n	80058dc <HAL_RCC_OscConfig+0x5e0>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	2b05      	cmp	r3, #5
 80058a8:	d10c      	bne.n	80058c4 <HAL_RCC_OscConfig+0x5c8>
 80058aa:	4b6f      	ldr	r3, [pc, #444]	@ (8005a68 <HAL_RCC_OscConfig+0x76c>)
 80058ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058ae:	4a6e      	ldr	r2, [pc, #440]	@ (8005a68 <HAL_RCC_OscConfig+0x76c>)
 80058b0:	f043 0304 	orr.w	r3, r3, #4
 80058b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80058b6:	4b6c      	ldr	r3, [pc, #432]	@ (8005a68 <HAL_RCC_OscConfig+0x76c>)
 80058b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058ba:	4a6b      	ldr	r2, [pc, #428]	@ (8005a68 <HAL_RCC_OscConfig+0x76c>)
 80058bc:	f043 0301 	orr.w	r3, r3, #1
 80058c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80058c2:	e00b      	b.n	80058dc <HAL_RCC_OscConfig+0x5e0>
 80058c4:	4b68      	ldr	r3, [pc, #416]	@ (8005a68 <HAL_RCC_OscConfig+0x76c>)
 80058c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058c8:	4a67      	ldr	r2, [pc, #412]	@ (8005a68 <HAL_RCC_OscConfig+0x76c>)
 80058ca:	f023 0301 	bic.w	r3, r3, #1
 80058ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80058d0:	4b65      	ldr	r3, [pc, #404]	@ (8005a68 <HAL_RCC_OscConfig+0x76c>)
 80058d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058d4:	4a64      	ldr	r2, [pc, #400]	@ (8005a68 <HAL_RCC_OscConfig+0x76c>)
 80058d6:	f023 0304 	bic.w	r3, r3, #4
 80058da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d015      	beq.n	8005910 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058e4:	f7fb ff7c 	bl	80017e0 <HAL_GetTick>
 80058e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058ea:	e00a      	b.n	8005902 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ec:	f7fb ff78 	bl	80017e0 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d901      	bls.n	8005902 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e14e      	b.n	8005ba0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005902:	4b59      	ldr	r3, [pc, #356]	@ (8005a68 <HAL_RCC_OscConfig+0x76c>)
 8005904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005906:	f003 0302 	and.w	r3, r3, #2
 800590a:	2b00      	cmp	r3, #0
 800590c:	d0ee      	beq.n	80058ec <HAL_RCC_OscConfig+0x5f0>
 800590e:	e014      	b.n	800593a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005910:	f7fb ff66 	bl	80017e0 <HAL_GetTick>
 8005914:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005916:	e00a      	b.n	800592e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005918:	f7fb ff62 	bl	80017e0 <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005926:	4293      	cmp	r3, r2
 8005928:	d901      	bls.n	800592e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e138      	b.n	8005ba0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800592e:	4b4e      	ldr	r3, [pc, #312]	@ (8005a68 <HAL_RCC_OscConfig+0x76c>)
 8005930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005932:	f003 0302 	and.w	r3, r3, #2
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1ee      	bne.n	8005918 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800593e:	2b00      	cmp	r3, #0
 8005940:	f000 812d 	beq.w	8005b9e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005944:	4b48      	ldr	r3, [pc, #288]	@ (8005a68 <HAL_RCC_OscConfig+0x76c>)
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800594c:	2b18      	cmp	r3, #24
 800594e:	f000 80bd 	beq.w	8005acc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005956:	2b02      	cmp	r3, #2
 8005958:	f040 809e 	bne.w	8005a98 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800595c:	4b42      	ldr	r3, [pc, #264]	@ (8005a68 <HAL_RCC_OscConfig+0x76c>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a41      	ldr	r2, [pc, #260]	@ (8005a68 <HAL_RCC_OscConfig+0x76c>)
 8005962:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005966:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005968:	f7fb ff3a 	bl	80017e0 <HAL_GetTick>
 800596c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800596e:	e008      	b.n	8005982 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005970:	f7fb ff36 	bl	80017e0 <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	2b02      	cmp	r3, #2
 800597c:	d901      	bls.n	8005982 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	e10e      	b.n	8005ba0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005982:	4b39      	ldr	r3, [pc, #228]	@ (8005a68 <HAL_RCC_OscConfig+0x76c>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1f0      	bne.n	8005970 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800598e:	4b36      	ldr	r3, [pc, #216]	@ (8005a68 <HAL_RCC_OscConfig+0x76c>)
 8005990:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005992:	4b37      	ldr	r3, [pc, #220]	@ (8005a70 <HAL_RCC_OscConfig+0x774>)
 8005994:	4013      	ands	r3, r2
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800599e:	0112      	lsls	r2, r2, #4
 80059a0:	430a      	orrs	r2, r1
 80059a2:	4931      	ldr	r1, [pc, #196]	@ (8005a68 <HAL_RCC_OscConfig+0x76c>)
 80059a4:	4313      	orrs	r3, r2
 80059a6:	628b      	str	r3, [r1, #40]	@ 0x28
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ac:	3b01      	subs	r3, #1
 80059ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059b6:	3b01      	subs	r3, #1
 80059b8:	025b      	lsls	r3, r3, #9
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	431a      	orrs	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059c2:	3b01      	subs	r3, #1
 80059c4:	041b      	lsls	r3, r3, #16
 80059c6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80059ca:	431a      	orrs	r2, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059d0:	3b01      	subs	r3, #1
 80059d2:	061b      	lsls	r3, r3, #24
 80059d4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80059d8:	4923      	ldr	r1, [pc, #140]	@ (8005a68 <HAL_RCC_OscConfig+0x76c>)
 80059da:	4313      	orrs	r3, r2
 80059dc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80059de:	4b22      	ldr	r3, [pc, #136]	@ (8005a68 <HAL_RCC_OscConfig+0x76c>)
 80059e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059e2:	4a21      	ldr	r2, [pc, #132]	@ (8005a68 <HAL_RCC_OscConfig+0x76c>)
 80059e4:	f023 0301 	bic.w	r3, r3, #1
 80059e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80059ea:	4b1f      	ldr	r3, [pc, #124]	@ (8005a68 <HAL_RCC_OscConfig+0x76c>)
 80059ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059ee:	4b21      	ldr	r3, [pc, #132]	@ (8005a74 <HAL_RCC_OscConfig+0x778>)
 80059f0:	4013      	ands	r3, r2
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80059f6:	00d2      	lsls	r2, r2, #3
 80059f8:	491b      	ldr	r1, [pc, #108]	@ (8005a68 <HAL_RCC_OscConfig+0x76c>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80059fe:	4b1a      	ldr	r3, [pc, #104]	@ (8005a68 <HAL_RCC_OscConfig+0x76c>)
 8005a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a02:	f023 020c 	bic.w	r2, r3, #12
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a0a:	4917      	ldr	r1, [pc, #92]	@ (8005a68 <HAL_RCC_OscConfig+0x76c>)
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005a10:	4b15      	ldr	r3, [pc, #84]	@ (8005a68 <HAL_RCC_OscConfig+0x76c>)
 8005a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a14:	f023 0202 	bic.w	r2, r3, #2
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a1c:	4912      	ldr	r1, [pc, #72]	@ (8005a68 <HAL_RCC_OscConfig+0x76c>)
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005a22:	4b11      	ldr	r3, [pc, #68]	@ (8005a68 <HAL_RCC_OscConfig+0x76c>)
 8005a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a26:	4a10      	ldr	r2, [pc, #64]	@ (8005a68 <HAL_RCC_OscConfig+0x76c>)
 8005a28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8005a68 <HAL_RCC_OscConfig+0x76c>)
 8005a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a32:	4a0d      	ldr	r2, [pc, #52]	@ (8005a68 <HAL_RCC_OscConfig+0x76c>)
 8005a34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a38:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8005a68 <HAL_RCC_OscConfig+0x76c>)
 8005a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8005a68 <HAL_RCC_OscConfig+0x76c>)
 8005a40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a44:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005a46:	4b08      	ldr	r3, [pc, #32]	@ (8005a68 <HAL_RCC_OscConfig+0x76c>)
 8005a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a4a:	4a07      	ldr	r2, [pc, #28]	@ (8005a68 <HAL_RCC_OscConfig+0x76c>)
 8005a4c:	f043 0301 	orr.w	r3, r3, #1
 8005a50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a52:	4b05      	ldr	r3, [pc, #20]	@ (8005a68 <HAL_RCC_OscConfig+0x76c>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a04      	ldr	r2, [pc, #16]	@ (8005a68 <HAL_RCC_OscConfig+0x76c>)
 8005a58:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a5e:	f7fb febf 	bl	80017e0 <HAL_GetTick>
 8005a62:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a64:	e011      	b.n	8005a8a <HAL_RCC_OscConfig+0x78e>
 8005a66:	bf00      	nop
 8005a68:	58024400 	.word	0x58024400
 8005a6c:	58024800 	.word	0x58024800
 8005a70:	fffffc0c 	.word	0xfffffc0c
 8005a74:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a78:	f7fb feb2 	bl	80017e0 <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d901      	bls.n	8005a8a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e08a      	b.n	8005ba0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a8a:	4b47      	ldr	r3, [pc, #284]	@ (8005ba8 <HAL_RCC_OscConfig+0x8ac>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d0f0      	beq.n	8005a78 <HAL_RCC_OscConfig+0x77c>
 8005a96:	e082      	b.n	8005b9e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a98:	4b43      	ldr	r3, [pc, #268]	@ (8005ba8 <HAL_RCC_OscConfig+0x8ac>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a42      	ldr	r2, [pc, #264]	@ (8005ba8 <HAL_RCC_OscConfig+0x8ac>)
 8005a9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005aa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aa4:	f7fb fe9c 	bl	80017e0 <HAL_GetTick>
 8005aa8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005aaa:	e008      	b.n	8005abe <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005aac:	f7fb fe98 	bl	80017e0 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d901      	bls.n	8005abe <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e070      	b.n	8005ba0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005abe:	4b3a      	ldr	r3, [pc, #232]	@ (8005ba8 <HAL_RCC_OscConfig+0x8ac>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1f0      	bne.n	8005aac <HAL_RCC_OscConfig+0x7b0>
 8005aca:	e068      	b.n	8005b9e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005acc:	4b36      	ldr	r3, [pc, #216]	@ (8005ba8 <HAL_RCC_OscConfig+0x8ac>)
 8005ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ad0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005ad2:	4b35      	ldr	r3, [pc, #212]	@ (8005ba8 <HAL_RCC_OscConfig+0x8ac>)
 8005ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ad6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d031      	beq.n	8005b44 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	f003 0203 	and.w	r2, r3, #3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d12a      	bne.n	8005b44 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	091b      	lsrs	r3, r3, #4
 8005af2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d122      	bne.n	8005b44 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b08:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d11a      	bne.n	8005b44 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	0a5b      	lsrs	r3, r3, #9
 8005b12:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b1a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d111      	bne.n	8005b44 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	0c1b      	lsrs	r3, r3, #16
 8005b24:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b2c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d108      	bne.n	8005b44 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	0e1b      	lsrs	r3, r3, #24
 8005b36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b3e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d001      	beq.n	8005b48 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e02b      	b.n	8005ba0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005b48:	4b17      	ldr	r3, [pc, #92]	@ (8005ba8 <HAL_RCC_OscConfig+0x8ac>)
 8005b4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b4c:	08db      	lsrs	r3, r3, #3
 8005b4e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b52:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d01f      	beq.n	8005b9e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005b5e:	4b12      	ldr	r3, [pc, #72]	@ (8005ba8 <HAL_RCC_OscConfig+0x8ac>)
 8005b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b62:	4a11      	ldr	r2, [pc, #68]	@ (8005ba8 <HAL_RCC_OscConfig+0x8ac>)
 8005b64:	f023 0301 	bic.w	r3, r3, #1
 8005b68:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005b6a:	f7fb fe39 	bl	80017e0 <HAL_GetTick>
 8005b6e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005b70:	bf00      	nop
 8005b72:	f7fb fe35 	bl	80017e0 <HAL_GetTick>
 8005b76:	4602      	mov	r2, r0
 8005b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d0f9      	beq.n	8005b72 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8005ba8 <HAL_RCC_OscConfig+0x8ac>)
 8005b80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b82:	4b0a      	ldr	r3, [pc, #40]	@ (8005bac <HAL_RCC_OscConfig+0x8b0>)
 8005b84:	4013      	ands	r3, r2
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005b8a:	00d2      	lsls	r2, r2, #3
 8005b8c:	4906      	ldr	r1, [pc, #24]	@ (8005ba8 <HAL_RCC_OscConfig+0x8ac>)
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005b92:	4b05      	ldr	r3, [pc, #20]	@ (8005ba8 <HAL_RCC_OscConfig+0x8ac>)
 8005b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b96:	4a04      	ldr	r2, [pc, #16]	@ (8005ba8 <HAL_RCC_OscConfig+0x8ac>)
 8005b98:	f043 0301 	orr.w	r3, r3, #1
 8005b9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3730      	adds	r7, #48	@ 0x30
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	58024400 	.word	0x58024400
 8005bac:	ffff0007 	.word	0xffff0007

08005bb0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b086      	sub	sp, #24
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d101      	bne.n	8005bc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e19c      	b.n	8005efe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005bc4:	4b8a      	ldr	r3, [pc, #552]	@ (8005df0 <HAL_RCC_ClockConfig+0x240>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 030f 	and.w	r3, r3, #15
 8005bcc:	683a      	ldr	r2, [r7, #0]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d910      	bls.n	8005bf4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bd2:	4b87      	ldr	r3, [pc, #540]	@ (8005df0 <HAL_RCC_ClockConfig+0x240>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f023 020f 	bic.w	r2, r3, #15
 8005bda:	4985      	ldr	r1, [pc, #532]	@ (8005df0 <HAL_RCC_ClockConfig+0x240>)
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005be2:	4b83      	ldr	r3, [pc, #524]	@ (8005df0 <HAL_RCC_ClockConfig+0x240>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 030f 	and.w	r3, r3, #15
 8005bea:	683a      	ldr	r2, [r7, #0]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d001      	beq.n	8005bf4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e184      	b.n	8005efe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 0304 	and.w	r3, r3, #4
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d010      	beq.n	8005c22 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	691a      	ldr	r2, [r3, #16]
 8005c04:	4b7b      	ldr	r3, [pc, #492]	@ (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d908      	bls.n	8005c22 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005c10:	4b78      	ldr	r3, [pc, #480]	@ (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005c12:	699b      	ldr	r3, [r3, #24]
 8005c14:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	4975      	ldr	r1, [pc, #468]	@ (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 0308 	and.w	r3, r3, #8
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d010      	beq.n	8005c50 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	695a      	ldr	r2, [r3, #20]
 8005c32:	4b70      	ldr	r3, [pc, #448]	@ (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005c34:	69db      	ldr	r3, [r3, #28]
 8005c36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d908      	bls.n	8005c50 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005c3e:	4b6d      	ldr	r3, [pc, #436]	@ (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005c40:	69db      	ldr	r3, [r3, #28]
 8005c42:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	496a      	ldr	r1, [pc, #424]	@ (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 0310 	and.w	r3, r3, #16
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d010      	beq.n	8005c7e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	699a      	ldr	r2, [r3, #24]
 8005c60:	4b64      	ldr	r3, [pc, #400]	@ (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005c62:	69db      	ldr	r3, [r3, #28]
 8005c64:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d908      	bls.n	8005c7e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005c6c:	4b61      	ldr	r3, [pc, #388]	@ (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005c6e:	69db      	ldr	r3, [r3, #28]
 8005c70:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	495e      	ldr	r1, [pc, #376]	@ (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 0320 	and.w	r3, r3, #32
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d010      	beq.n	8005cac <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	69da      	ldr	r2, [r3, #28]
 8005c8e:	4b59      	ldr	r3, [pc, #356]	@ (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d908      	bls.n	8005cac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005c9a:	4b56      	ldr	r3, [pc, #344]	@ (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	69db      	ldr	r3, [r3, #28]
 8005ca6:	4953      	ldr	r1, [pc, #332]	@ (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0302 	and.w	r3, r3, #2
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d010      	beq.n	8005cda <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	68da      	ldr	r2, [r3, #12]
 8005cbc:	4b4d      	ldr	r3, [pc, #308]	@ (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	f003 030f 	and.w	r3, r3, #15
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d908      	bls.n	8005cda <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cc8:	4b4a      	ldr	r3, [pc, #296]	@ (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005cca:	699b      	ldr	r3, [r3, #24]
 8005ccc:	f023 020f 	bic.w	r2, r3, #15
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	4947      	ldr	r1, [pc, #284]	@ (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0301 	and.w	r3, r3, #1
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d055      	beq.n	8005d92 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005ce6:	4b43      	ldr	r3, [pc, #268]	@ (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	4940      	ldr	r1, [pc, #256]	@ (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d107      	bne.n	8005d10 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d00:	4b3c      	ldr	r3, [pc, #240]	@ (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d121      	bne.n	8005d50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e0f6      	b.n	8005efe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	2b03      	cmp	r3, #3
 8005d16:	d107      	bne.n	8005d28 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d18:	4b36      	ldr	r3, [pc, #216]	@ (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d115      	bne.n	8005d50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e0ea      	b.n	8005efe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d107      	bne.n	8005d40 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d30:	4b30      	ldr	r3, [pc, #192]	@ (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d109      	bne.n	8005d50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e0de      	b.n	8005efe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d40:	4b2c      	ldr	r3, [pc, #176]	@ (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0304 	and.w	r3, r3, #4
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d101      	bne.n	8005d50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e0d6      	b.n	8005efe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d50:	4b28      	ldr	r3, [pc, #160]	@ (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	f023 0207 	bic.w	r2, r3, #7
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	4925      	ldr	r1, [pc, #148]	@ (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d62:	f7fb fd3d 	bl	80017e0 <HAL_GetTick>
 8005d66:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d68:	e00a      	b.n	8005d80 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d6a:	f7fb fd39 	bl	80017e0 <HAL_GetTick>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d901      	bls.n	8005d80 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e0be      	b.n	8005efe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d80:	4b1c      	ldr	r3, [pc, #112]	@ (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	00db      	lsls	r3, r3, #3
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d1eb      	bne.n	8005d6a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 0302 	and.w	r3, r3, #2
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d010      	beq.n	8005dc0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	68da      	ldr	r2, [r3, #12]
 8005da2:	4b14      	ldr	r3, [pc, #80]	@ (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	f003 030f 	and.w	r3, r3, #15
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d208      	bcs.n	8005dc0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005dae:	4b11      	ldr	r3, [pc, #68]	@ (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	f023 020f 	bic.w	r2, r3, #15
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	490e      	ldr	r1, [pc, #56]	@ (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8005df0 <HAL_RCC_ClockConfig+0x240>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 030f 	and.w	r3, r3, #15
 8005dc8:	683a      	ldr	r2, [r7, #0]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d214      	bcs.n	8005df8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dce:	4b08      	ldr	r3, [pc, #32]	@ (8005df0 <HAL_RCC_ClockConfig+0x240>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f023 020f 	bic.w	r2, r3, #15
 8005dd6:	4906      	ldr	r1, [pc, #24]	@ (8005df0 <HAL_RCC_ClockConfig+0x240>)
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dde:	4b04      	ldr	r3, [pc, #16]	@ (8005df0 <HAL_RCC_ClockConfig+0x240>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 030f 	and.w	r3, r3, #15
 8005de6:	683a      	ldr	r2, [r7, #0]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d005      	beq.n	8005df8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e086      	b.n	8005efe <HAL_RCC_ClockConfig+0x34e>
 8005df0:	52002000 	.word	0x52002000
 8005df4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0304 	and.w	r3, r3, #4
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d010      	beq.n	8005e26 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	691a      	ldr	r2, [r3, #16]
 8005e08:	4b3f      	ldr	r3, [pc, #252]	@ (8005f08 <HAL_RCC_ClockConfig+0x358>)
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d208      	bcs.n	8005e26 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005e14:	4b3c      	ldr	r3, [pc, #240]	@ (8005f08 <HAL_RCC_ClockConfig+0x358>)
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	4939      	ldr	r1, [pc, #228]	@ (8005f08 <HAL_RCC_ClockConfig+0x358>)
 8005e22:	4313      	orrs	r3, r2
 8005e24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 0308 	and.w	r3, r3, #8
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d010      	beq.n	8005e54 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	695a      	ldr	r2, [r3, #20]
 8005e36:	4b34      	ldr	r3, [pc, #208]	@ (8005f08 <HAL_RCC_ClockConfig+0x358>)
 8005e38:	69db      	ldr	r3, [r3, #28]
 8005e3a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d208      	bcs.n	8005e54 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005e42:	4b31      	ldr	r3, [pc, #196]	@ (8005f08 <HAL_RCC_ClockConfig+0x358>)
 8005e44:	69db      	ldr	r3, [r3, #28]
 8005e46:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	695b      	ldr	r3, [r3, #20]
 8005e4e:	492e      	ldr	r1, [pc, #184]	@ (8005f08 <HAL_RCC_ClockConfig+0x358>)
 8005e50:	4313      	orrs	r3, r2
 8005e52:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0310 	and.w	r3, r3, #16
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d010      	beq.n	8005e82 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	699a      	ldr	r2, [r3, #24]
 8005e64:	4b28      	ldr	r3, [pc, #160]	@ (8005f08 <HAL_RCC_ClockConfig+0x358>)
 8005e66:	69db      	ldr	r3, [r3, #28]
 8005e68:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d208      	bcs.n	8005e82 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005e70:	4b25      	ldr	r3, [pc, #148]	@ (8005f08 <HAL_RCC_ClockConfig+0x358>)
 8005e72:	69db      	ldr	r3, [r3, #28]
 8005e74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	4922      	ldr	r1, [pc, #136]	@ (8005f08 <HAL_RCC_ClockConfig+0x358>)
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 0320 	and.w	r3, r3, #32
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d010      	beq.n	8005eb0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	69da      	ldr	r2, [r3, #28]
 8005e92:	4b1d      	ldr	r3, [pc, #116]	@ (8005f08 <HAL_RCC_ClockConfig+0x358>)
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d208      	bcs.n	8005eb0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8005f08 <HAL_RCC_ClockConfig+0x358>)
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	69db      	ldr	r3, [r3, #28]
 8005eaa:	4917      	ldr	r1, [pc, #92]	@ (8005f08 <HAL_RCC_ClockConfig+0x358>)
 8005eac:	4313      	orrs	r3, r2
 8005eae:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005eb0:	f000 f89e 	bl	8005ff0 <HAL_RCC_GetSysClockFreq>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	4b14      	ldr	r3, [pc, #80]	@ (8005f08 <HAL_RCC_ClockConfig+0x358>)
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	0a1b      	lsrs	r3, r3, #8
 8005ebc:	f003 030f 	and.w	r3, r3, #15
 8005ec0:	4912      	ldr	r1, [pc, #72]	@ (8005f0c <HAL_RCC_ClockConfig+0x35c>)
 8005ec2:	5ccb      	ldrb	r3, [r1, r3]
 8005ec4:	f003 031f 	and.w	r3, r3, #31
 8005ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8005ecc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ece:	4b0e      	ldr	r3, [pc, #56]	@ (8005f08 <HAL_RCC_ClockConfig+0x358>)
 8005ed0:	699b      	ldr	r3, [r3, #24]
 8005ed2:	f003 030f 	and.w	r3, r3, #15
 8005ed6:	4a0d      	ldr	r2, [pc, #52]	@ (8005f0c <HAL_RCC_ClockConfig+0x35c>)
 8005ed8:	5cd3      	ldrb	r3, [r2, r3]
 8005eda:	f003 031f 	and.w	r3, r3, #31
 8005ede:	693a      	ldr	r2, [r7, #16]
 8005ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ee4:	4a0a      	ldr	r2, [pc, #40]	@ (8005f10 <HAL_RCC_ClockConfig+0x360>)
 8005ee6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ee8:	4a0a      	ldr	r2, [pc, #40]	@ (8005f14 <HAL_RCC_ClockConfig+0x364>)
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005eee:	4b0a      	ldr	r3, [pc, #40]	@ (8005f18 <HAL_RCC_ClockConfig+0x368>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7fb fc2a 	bl	800174c <HAL_InitTick>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3718      	adds	r7, #24
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	58024400 	.word	0x58024400
 8005f0c:	08009d1c 	.word	0x08009d1c
 8005f10:	24000008 	.word	0x24000008
 8005f14:	24000004 	.word	0x24000004
 8005f18:	2400000c 	.word	0x2400000c

08005f1c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b08c      	sub	sp, #48	@ 0x30
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d12a      	bne.n	8005f84 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8005f2e:	4b2d      	ldr	r3, [pc, #180]	@ (8005fe4 <HAL_RCC_MCOConfig+0xc8>)
 8005f30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f34:	4a2b      	ldr	r2, [pc, #172]	@ (8005fe4 <HAL_RCC_MCOConfig+0xc8>)
 8005f36:	f043 0301 	orr.w	r3, r3, #1
 8005f3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005f3e:	4b29      	ldr	r3, [pc, #164]	@ (8005fe4 <HAL_RCC_MCOConfig+0xc8>)
 8005f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f44:	f003 0301 	and.w	r3, r3, #1
 8005f48:	61bb      	str	r3, [r7, #24]
 8005f4a:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8005f4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005f50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f52:	2302      	movs	r3, #2
 8005f54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f56:	2303      	movs	r3, #3
 8005f58:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005f62:	f107 031c 	add.w	r3, r7, #28
 8005f66:	4619      	mov	r1, r3
 8005f68:	481f      	ldr	r0, [pc, #124]	@ (8005fe8 <HAL_RCC_MCOConfig+0xcc>)
 8005f6a:	f7fe f9db 	bl	8004324 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8005f6e:	4b1d      	ldr	r3, [pc, #116]	@ (8005fe4 <HAL_RCC_MCOConfig+0xc8>)
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8005f76:	68b9      	ldr	r1, [r7, #8]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	430b      	orrs	r3, r1
 8005f7c:	4919      	ldr	r1, [pc, #100]	@ (8005fe4 <HAL_RCC_MCOConfig+0xc8>)
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8005f82:	e02a      	b.n	8005fda <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8005f84:	4b17      	ldr	r3, [pc, #92]	@ (8005fe4 <HAL_RCC_MCOConfig+0xc8>)
 8005f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f8a:	4a16      	ldr	r2, [pc, #88]	@ (8005fe4 <HAL_RCC_MCOConfig+0xc8>)
 8005f8c:	f043 0304 	orr.w	r3, r3, #4
 8005f90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005f94:	4b13      	ldr	r3, [pc, #76]	@ (8005fe4 <HAL_RCC_MCOConfig+0xc8>)
 8005f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f9a:	f003 0304 	and.w	r3, r3, #4
 8005f9e:	617b      	str	r3, [r7, #20]
 8005fa0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005fa2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fa8:	2302      	movs	r3, #2
 8005faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fac:	2303      	movs	r3, #3
 8005fae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005fb8:	f107 031c 	add.w	r3, r7, #28
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	480b      	ldr	r0, [pc, #44]	@ (8005fec <HAL_RCC_MCOConfig+0xd0>)
 8005fc0:	f7fe f9b0 	bl	8004324 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8005fc4:	4b07      	ldr	r3, [pc, #28]	@ (8005fe4 <HAL_RCC_MCOConfig+0xc8>)
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	01d9      	lsls	r1, r3, #7
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	430b      	orrs	r3, r1
 8005fd4:	4903      	ldr	r1, [pc, #12]	@ (8005fe4 <HAL_RCC_MCOConfig+0xc8>)
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	610b      	str	r3, [r1, #16]
}
 8005fda:	bf00      	nop
 8005fdc:	3730      	adds	r7, #48	@ 0x30
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	58024400 	.word	0x58024400
 8005fe8:	58020000 	.word	0x58020000
 8005fec:	58020800 	.word	0x58020800

08005ff0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b089      	sub	sp, #36	@ 0x24
 8005ff4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ff6:	4bb3      	ldr	r3, [pc, #716]	@ (80062c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ffe:	2b18      	cmp	r3, #24
 8006000:	f200 8155 	bhi.w	80062ae <HAL_RCC_GetSysClockFreq+0x2be>
 8006004:	a201      	add	r2, pc, #4	@ (adr r2, 800600c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800600a:	bf00      	nop
 800600c:	08006071 	.word	0x08006071
 8006010:	080062af 	.word	0x080062af
 8006014:	080062af 	.word	0x080062af
 8006018:	080062af 	.word	0x080062af
 800601c:	080062af 	.word	0x080062af
 8006020:	080062af 	.word	0x080062af
 8006024:	080062af 	.word	0x080062af
 8006028:	080062af 	.word	0x080062af
 800602c:	08006097 	.word	0x08006097
 8006030:	080062af 	.word	0x080062af
 8006034:	080062af 	.word	0x080062af
 8006038:	080062af 	.word	0x080062af
 800603c:	080062af 	.word	0x080062af
 8006040:	080062af 	.word	0x080062af
 8006044:	080062af 	.word	0x080062af
 8006048:	080062af 	.word	0x080062af
 800604c:	0800609d 	.word	0x0800609d
 8006050:	080062af 	.word	0x080062af
 8006054:	080062af 	.word	0x080062af
 8006058:	080062af 	.word	0x080062af
 800605c:	080062af 	.word	0x080062af
 8006060:	080062af 	.word	0x080062af
 8006064:	080062af 	.word	0x080062af
 8006068:	080062af 	.word	0x080062af
 800606c:	080060a3 	.word	0x080060a3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006070:	4b94      	ldr	r3, [pc, #592]	@ (80062c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0320 	and.w	r3, r3, #32
 8006078:	2b00      	cmp	r3, #0
 800607a:	d009      	beq.n	8006090 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800607c:	4b91      	ldr	r3, [pc, #580]	@ (80062c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	08db      	lsrs	r3, r3, #3
 8006082:	f003 0303 	and.w	r3, r3, #3
 8006086:	4a90      	ldr	r2, [pc, #576]	@ (80062c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006088:	fa22 f303 	lsr.w	r3, r2, r3
 800608c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800608e:	e111      	b.n	80062b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006090:	4b8d      	ldr	r3, [pc, #564]	@ (80062c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006092:	61bb      	str	r3, [r7, #24]
      break;
 8006094:	e10e      	b.n	80062b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006096:	4b8d      	ldr	r3, [pc, #564]	@ (80062cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006098:	61bb      	str	r3, [r7, #24]
      break;
 800609a:	e10b      	b.n	80062b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800609c:	4b8c      	ldr	r3, [pc, #560]	@ (80062d0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800609e:	61bb      	str	r3, [r7, #24]
      break;
 80060a0:	e108      	b.n	80062b4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80060a2:	4b88      	ldr	r3, [pc, #544]	@ (80062c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060a6:	f003 0303 	and.w	r3, r3, #3
 80060aa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80060ac:	4b85      	ldr	r3, [pc, #532]	@ (80062c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060b0:	091b      	lsrs	r3, r3, #4
 80060b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80060b6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80060b8:	4b82      	ldr	r3, [pc, #520]	@ (80062c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060bc:	f003 0301 	and.w	r3, r3, #1
 80060c0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80060c2:	4b80      	ldr	r3, [pc, #512]	@ (80062c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060c6:	08db      	lsrs	r3, r3, #3
 80060c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	fb02 f303 	mul.w	r3, r2, r3
 80060d2:	ee07 3a90 	vmov	s15, r3
 80060d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060da:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	f000 80e1 	beq.w	80062a8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	f000 8083 	beq.w	80061f4 <HAL_RCC_GetSysClockFreq+0x204>
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	2b02      	cmp	r3, #2
 80060f2:	f200 80a1 	bhi.w	8006238 <HAL_RCC_GetSysClockFreq+0x248>
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d003      	beq.n	8006104 <HAL_RCC_GetSysClockFreq+0x114>
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d056      	beq.n	80061b0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006102:	e099      	b.n	8006238 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006104:	4b6f      	ldr	r3, [pc, #444]	@ (80062c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0320 	and.w	r3, r3, #32
 800610c:	2b00      	cmp	r3, #0
 800610e:	d02d      	beq.n	800616c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006110:	4b6c      	ldr	r3, [pc, #432]	@ (80062c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	08db      	lsrs	r3, r3, #3
 8006116:	f003 0303 	and.w	r3, r3, #3
 800611a:	4a6b      	ldr	r2, [pc, #428]	@ (80062c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800611c:	fa22 f303 	lsr.w	r3, r2, r3
 8006120:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	ee07 3a90 	vmov	s15, r3
 8006128:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	ee07 3a90 	vmov	s15, r3
 8006132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800613a:	4b62      	ldr	r3, [pc, #392]	@ (80062c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800613c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800613e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006142:	ee07 3a90 	vmov	s15, r3
 8006146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800614a:	ed97 6a02 	vldr	s12, [r7, #8]
 800614e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80062d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800615a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800615e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006166:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800616a:	e087      	b.n	800627c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	ee07 3a90 	vmov	s15, r3
 8006172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006176:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80062d8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800617a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800617e:	4b51      	ldr	r3, [pc, #324]	@ (80062c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006186:	ee07 3a90 	vmov	s15, r3
 800618a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800618e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006192:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80062d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800619a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800619e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80061ae:	e065      	b.n	800627c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	ee07 3a90 	vmov	s15, r3
 80061b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ba:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80062dc <HAL_RCC_GetSysClockFreq+0x2ec>
 80061be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061c2:	4b40      	ldr	r3, [pc, #256]	@ (80062c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ca:	ee07 3a90 	vmov	s15, r3
 80061ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80061d6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80062d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80061da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80061f2:	e043      	b.n	800627c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	ee07 3a90 	vmov	s15, r3
 80061fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061fe:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80062e0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006206:	4b2f      	ldr	r3, [pc, #188]	@ (80062c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800620a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800620e:	ee07 3a90 	vmov	s15, r3
 8006212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006216:	ed97 6a02 	vldr	s12, [r7, #8]
 800621a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80062d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800621e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006222:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006226:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800622a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800622e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006232:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006236:	e021      	b.n	800627c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	ee07 3a90 	vmov	s15, r3
 800623e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006242:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80062dc <HAL_RCC_GetSysClockFreq+0x2ec>
 8006246:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800624a:	4b1e      	ldr	r3, [pc, #120]	@ (80062c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800624c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800624e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006252:	ee07 3a90 	vmov	s15, r3
 8006256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800625a:	ed97 6a02 	vldr	s12, [r7, #8]
 800625e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80062d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800626a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800626e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006276:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800627a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800627c:	4b11      	ldr	r3, [pc, #68]	@ (80062c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800627e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006280:	0a5b      	lsrs	r3, r3, #9
 8006282:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006286:	3301      	adds	r3, #1
 8006288:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	ee07 3a90 	vmov	s15, r3
 8006290:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006294:	edd7 6a07 	vldr	s13, [r7, #28]
 8006298:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800629c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062a0:	ee17 3a90 	vmov	r3, s15
 80062a4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80062a6:	e005      	b.n	80062b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80062a8:	2300      	movs	r3, #0
 80062aa:	61bb      	str	r3, [r7, #24]
      break;
 80062ac:	e002      	b.n	80062b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80062ae:	4b07      	ldr	r3, [pc, #28]	@ (80062cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80062b0:	61bb      	str	r3, [r7, #24]
      break;
 80062b2:	bf00      	nop
  }

  return sysclockfreq;
 80062b4:	69bb      	ldr	r3, [r7, #24]
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3724      	adds	r7, #36	@ 0x24
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	58024400 	.word	0x58024400
 80062c8:	03d09000 	.word	0x03d09000
 80062cc:	003d0900 	.word	0x003d0900
 80062d0:	017d7840 	.word	0x017d7840
 80062d4:	46000000 	.word	0x46000000
 80062d8:	4c742400 	.word	0x4c742400
 80062dc:	4a742400 	.word	0x4a742400
 80062e0:	4bbebc20 	.word	0x4bbebc20

080062e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80062ea:	f7ff fe81 	bl	8005ff0 <HAL_RCC_GetSysClockFreq>
 80062ee:	4602      	mov	r2, r0
 80062f0:	4b10      	ldr	r3, [pc, #64]	@ (8006334 <HAL_RCC_GetHCLKFreq+0x50>)
 80062f2:	699b      	ldr	r3, [r3, #24]
 80062f4:	0a1b      	lsrs	r3, r3, #8
 80062f6:	f003 030f 	and.w	r3, r3, #15
 80062fa:	490f      	ldr	r1, [pc, #60]	@ (8006338 <HAL_RCC_GetHCLKFreq+0x54>)
 80062fc:	5ccb      	ldrb	r3, [r1, r3]
 80062fe:	f003 031f 	and.w	r3, r3, #31
 8006302:	fa22 f303 	lsr.w	r3, r2, r3
 8006306:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006308:	4b0a      	ldr	r3, [pc, #40]	@ (8006334 <HAL_RCC_GetHCLKFreq+0x50>)
 800630a:	699b      	ldr	r3, [r3, #24]
 800630c:	f003 030f 	and.w	r3, r3, #15
 8006310:	4a09      	ldr	r2, [pc, #36]	@ (8006338 <HAL_RCC_GetHCLKFreq+0x54>)
 8006312:	5cd3      	ldrb	r3, [r2, r3]
 8006314:	f003 031f 	and.w	r3, r3, #31
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	fa22 f303 	lsr.w	r3, r2, r3
 800631e:	4a07      	ldr	r2, [pc, #28]	@ (800633c <HAL_RCC_GetHCLKFreq+0x58>)
 8006320:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006322:	4a07      	ldr	r2, [pc, #28]	@ (8006340 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006328:	4b04      	ldr	r3, [pc, #16]	@ (800633c <HAL_RCC_GetHCLKFreq+0x58>)
 800632a:	681b      	ldr	r3, [r3, #0]
}
 800632c:	4618      	mov	r0, r3
 800632e:	3708      	adds	r7, #8
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	58024400 	.word	0x58024400
 8006338:	08009d1c 	.word	0x08009d1c
 800633c:	24000008 	.word	0x24000008
 8006340:	24000004 	.word	0x24000004

08006344 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006348:	f7ff ffcc 	bl	80062e4 <HAL_RCC_GetHCLKFreq>
 800634c:	4602      	mov	r2, r0
 800634e:	4b06      	ldr	r3, [pc, #24]	@ (8006368 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006350:	69db      	ldr	r3, [r3, #28]
 8006352:	091b      	lsrs	r3, r3, #4
 8006354:	f003 0307 	and.w	r3, r3, #7
 8006358:	4904      	ldr	r1, [pc, #16]	@ (800636c <HAL_RCC_GetPCLK1Freq+0x28>)
 800635a:	5ccb      	ldrb	r3, [r1, r3]
 800635c:	f003 031f 	and.w	r3, r3, #31
 8006360:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006364:	4618      	mov	r0, r3
 8006366:	bd80      	pop	{r7, pc}
 8006368:	58024400 	.word	0x58024400
 800636c:	08009d1c 	.word	0x08009d1c

08006370 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006374:	f7ff ffb6 	bl	80062e4 <HAL_RCC_GetHCLKFreq>
 8006378:	4602      	mov	r2, r0
 800637a:	4b06      	ldr	r3, [pc, #24]	@ (8006394 <HAL_RCC_GetPCLK2Freq+0x24>)
 800637c:	69db      	ldr	r3, [r3, #28]
 800637e:	0a1b      	lsrs	r3, r3, #8
 8006380:	f003 0307 	and.w	r3, r3, #7
 8006384:	4904      	ldr	r1, [pc, #16]	@ (8006398 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006386:	5ccb      	ldrb	r3, [r1, r3]
 8006388:	f003 031f 	and.w	r3, r3, #31
 800638c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006390:	4618      	mov	r0, r3
 8006392:	bd80      	pop	{r7, pc}
 8006394:	58024400 	.word	0x58024400
 8006398:	08009d1c 	.word	0x08009d1c

0800639c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800639c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063a0:	b0ca      	sub	sp, #296	@ 0x128
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80063a8:	2300      	movs	r3, #0
 80063aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80063ae:	2300      	movs	r3, #0
 80063b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80063b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063bc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80063c0:	2500      	movs	r5, #0
 80063c2:	ea54 0305 	orrs.w	r3, r4, r5
 80063c6:	d049      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80063c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80063ce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80063d2:	d02f      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80063d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80063d8:	d828      	bhi.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80063da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80063de:	d01a      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80063e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80063e4:	d822      	bhi.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d003      	beq.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80063ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063ee:	d007      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80063f0:	e01c      	b.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063f2:	4bb8      	ldr	r3, [pc, #736]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80063f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063f6:	4ab7      	ldr	r2, [pc, #732]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80063f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80063fe:	e01a      	b.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006404:	3308      	adds	r3, #8
 8006406:	2102      	movs	r1, #2
 8006408:	4618      	mov	r0, r3
 800640a:	f001 fc8f 	bl	8007d2c <RCCEx_PLL2_Config>
 800640e:	4603      	mov	r3, r0
 8006410:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006414:	e00f      	b.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800641a:	3328      	adds	r3, #40	@ 0x28
 800641c:	2102      	movs	r1, #2
 800641e:	4618      	mov	r0, r3
 8006420:	f001 fd36 	bl	8007e90 <RCCEx_PLL3_Config>
 8006424:	4603      	mov	r3, r0
 8006426:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800642a:	e004      	b.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006432:	e000      	b.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006434:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006436:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800643a:	2b00      	cmp	r3, #0
 800643c:	d10a      	bne.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800643e:	4ba5      	ldr	r3, [pc, #660]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006440:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006442:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800644a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800644c:	4aa1      	ldr	r2, [pc, #644]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800644e:	430b      	orrs	r3, r1
 8006450:	6513      	str	r3, [r2, #80]	@ 0x50
 8006452:	e003      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006454:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006458:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800645c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006464:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006468:	f04f 0900 	mov.w	r9, #0
 800646c:	ea58 0309 	orrs.w	r3, r8, r9
 8006470:	d047      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006478:	2b04      	cmp	r3, #4
 800647a:	d82a      	bhi.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800647c:	a201      	add	r2, pc, #4	@ (adr r2, 8006484 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800647e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006482:	bf00      	nop
 8006484:	08006499 	.word	0x08006499
 8006488:	080064a7 	.word	0x080064a7
 800648c:	080064bd 	.word	0x080064bd
 8006490:	080064db 	.word	0x080064db
 8006494:	080064db 	.word	0x080064db
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006498:	4b8e      	ldr	r3, [pc, #568]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800649a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800649c:	4a8d      	ldr	r2, [pc, #564]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800649e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80064a4:	e01a      	b.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064aa:	3308      	adds	r3, #8
 80064ac:	2100      	movs	r1, #0
 80064ae:	4618      	mov	r0, r3
 80064b0:	f001 fc3c 	bl	8007d2c <RCCEx_PLL2_Config>
 80064b4:	4603      	mov	r3, r0
 80064b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80064ba:	e00f      	b.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80064bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064c0:	3328      	adds	r3, #40	@ 0x28
 80064c2:	2100      	movs	r1, #0
 80064c4:	4618      	mov	r0, r3
 80064c6:	f001 fce3 	bl	8007e90 <RCCEx_PLL3_Config>
 80064ca:	4603      	mov	r3, r0
 80064cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80064d0:	e004      	b.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064d8:	e000      	b.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80064da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d10a      	bne.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80064e4:	4b7b      	ldr	r3, [pc, #492]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80064e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064e8:	f023 0107 	bic.w	r1, r3, #7
 80064ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064f2:	4a78      	ldr	r2, [pc, #480]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80064f4:	430b      	orrs	r3, r1
 80064f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80064f8:	e003      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800650e:	f04f 0b00 	mov.w	fp, #0
 8006512:	ea5a 030b 	orrs.w	r3, sl, fp
 8006516:	d04c      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800651c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800651e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006522:	d030      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006524:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006528:	d829      	bhi.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800652a:	2bc0      	cmp	r3, #192	@ 0xc0
 800652c:	d02d      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800652e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006530:	d825      	bhi.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006532:	2b80      	cmp	r3, #128	@ 0x80
 8006534:	d018      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006536:	2b80      	cmp	r3, #128	@ 0x80
 8006538:	d821      	bhi.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800653a:	2b00      	cmp	r3, #0
 800653c:	d002      	beq.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800653e:	2b40      	cmp	r3, #64	@ 0x40
 8006540:	d007      	beq.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006542:	e01c      	b.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006544:	4b63      	ldr	r3, [pc, #396]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006548:	4a62      	ldr	r2, [pc, #392]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800654a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800654e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006550:	e01c      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006556:	3308      	adds	r3, #8
 8006558:	2100      	movs	r1, #0
 800655a:	4618      	mov	r0, r3
 800655c:	f001 fbe6 	bl	8007d2c <RCCEx_PLL2_Config>
 8006560:	4603      	mov	r3, r0
 8006562:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006566:	e011      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800656c:	3328      	adds	r3, #40	@ 0x28
 800656e:	2100      	movs	r1, #0
 8006570:	4618      	mov	r0, r3
 8006572:	f001 fc8d 	bl	8007e90 <RCCEx_PLL3_Config>
 8006576:	4603      	mov	r3, r0
 8006578:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800657c:	e006      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006584:	e002      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006586:	bf00      	nop
 8006588:	e000      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800658a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800658c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006590:	2b00      	cmp	r3, #0
 8006592:	d10a      	bne.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006594:	4b4f      	ldr	r3, [pc, #316]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006596:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006598:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800659c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065a2:	4a4c      	ldr	r2, [pc, #304]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80065a4:	430b      	orrs	r3, r1
 80065a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80065a8:	e003      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80065b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ba:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80065be:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80065c2:	2300      	movs	r3, #0
 80065c4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80065c8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80065cc:	460b      	mov	r3, r1
 80065ce:	4313      	orrs	r3, r2
 80065d0:	d053      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80065d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80065da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80065de:	d035      	beq.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80065e0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80065e4:	d82e      	bhi.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80065e6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80065ea:	d031      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80065ec:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80065f0:	d828      	bhi.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80065f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80065f6:	d01a      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x292>
 80065f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80065fc:	d822      	bhi.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d003      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006602:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006606:	d007      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006608:	e01c      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800660a:	4b32      	ldr	r3, [pc, #200]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800660c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800660e:	4a31      	ldr	r2, [pc, #196]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006610:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006614:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006616:	e01c      	b.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800661c:	3308      	adds	r3, #8
 800661e:	2100      	movs	r1, #0
 8006620:	4618      	mov	r0, r3
 8006622:	f001 fb83 	bl	8007d2c <RCCEx_PLL2_Config>
 8006626:	4603      	mov	r3, r0
 8006628:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800662c:	e011      	b.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800662e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006632:	3328      	adds	r3, #40	@ 0x28
 8006634:	2100      	movs	r1, #0
 8006636:	4618      	mov	r0, r3
 8006638:	f001 fc2a 	bl	8007e90 <RCCEx_PLL3_Config>
 800663c:	4603      	mov	r3, r0
 800663e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006642:	e006      	b.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800664a:	e002      	b.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800664c:	bf00      	nop
 800664e:	e000      	b.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006650:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006652:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10b      	bne.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800665a:	4b1e      	ldr	r3, [pc, #120]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800665c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800665e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006662:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006666:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800666a:	4a1a      	ldr	r2, [pc, #104]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800666c:	430b      	orrs	r3, r1
 800666e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006670:	e003      	b.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006672:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006676:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800667a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800667e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006682:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006686:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800668a:	2300      	movs	r3, #0
 800668c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006690:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006694:	460b      	mov	r3, r1
 8006696:	4313      	orrs	r3, r2
 8006698:	d056      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800669a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800669e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80066a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80066a6:	d038      	beq.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80066a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80066ac:	d831      	bhi.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80066ae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80066b2:	d034      	beq.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80066b4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80066b8:	d82b      	bhi.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80066ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80066be:	d01d      	beq.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x360>
 80066c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80066c4:	d825      	bhi.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d006      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80066ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80066ce:	d00a      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80066d0:	e01f      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80066d2:	bf00      	nop
 80066d4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066d8:	4ba2      	ldr	r3, [pc, #648]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80066da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066dc:	4aa1      	ldr	r2, [pc, #644]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80066de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80066e4:	e01c      	b.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ea:	3308      	adds	r3, #8
 80066ec:	2100      	movs	r1, #0
 80066ee:	4618      	mov	r0, r3
 80066f0:	f001 fb1c 	bl	8007d2c <RCCEx_PLL2_Config>
 80066f4:	4603      	mov	r3, r0
 80066f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80066fa:	e011      	b.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80066fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006700:	3328      	adds	r3, #40	@ 0x28
 8006702:	2100      	movs	r1, #0
 8006704:	4618      	mov	r0, r3
 8006706:	f001 fbc3 	bl	8007e90 <RCCEx_PLL3_Config>
 800670a:	4603      	mov	r3, r0
 800670c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006710:	e006      	b.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006718:	e002      	b.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800671a:	bf00      	nop
 800671c:	e000      	b.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800671e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006720:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006724:	2b00      	cmp	r3, #0
 8006726:	d10b      	bne.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006728:	4b8e      	ldr	r3, [pc, #568]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800672a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800672c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006730:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006734:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006738:	4a8a      	ldr	r2, [pc, #552]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800673a:	430b      	orrs	r3, r1
 800673c:	6593      	str	r3, [r2, #88]	@ 0x58
 800673e:	e003      	b.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006740:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006744:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800674c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006750:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006754:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006758:	2300      	movs	r3, #0
 800675a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800675e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006762:	460b      	mov	r3, r1
 8006764:	4313      	orrs	r3, r2
 8006766:	d03a      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800676c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800676e:	2b30      	cmp	r3, #48	@ 0x30
 8006770:	d01f      	beq.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006772:	2b30      	cmp	r3, #48	@ 0x30
 8006774:	d819      	bhi.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006776:	2b20      	cmp	r3, #32
 8006778:	d00c      	beq.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800677a:	2b20      	cmp	r3, #32
 800677c:	d815      	bhi.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800677e:	2b00      	cmp	r3, #0
 8006780:	d019      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006782:	2b10      	cmp	r3, #16
 8006784:	d111      	bne.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006786:	4b77      	ldr	r3, [pc, #476]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800678a:	4a76      	ldr	r2, [pc, #472]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800678c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006790:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006792:	e011      	b.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006798:	3308      	adds	r3, #8
 800679a:	2102      	movs	r1, #2
 800679c:	4618      	mov	r0, r3
 800679e:	f001 fac5 	bl	8007d2c <RCCEx_PLL2_Config>
 80067a2:	4603      	mov	r3, r0
 80067a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80067a8:	e006      	b.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067b0:	e002      	b.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80067b2:	bf00      	nop
 80067b4:	e000      	b.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80067b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d10a      	bne.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80067c0:	4b68      	ldr	r3, [pc, #416]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80067c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067c4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80067c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067ce:	4a65      	ldr	r2, [pc, #404]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80067d0:	430b      	orrs	r3, r1
 80067d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80067d4:	e003      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80067de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80067ea:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80067ee:	2300      	movs	r3, #0
 80067f0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80067f4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80067f8:	460b      	mov	r3, r1
 80067fa:	4313      	orrs	r3, r2
 80067fc:	d051      	beq.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80067fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006802:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006804:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006808:	d035      	beq.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800680a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800680e:	d82e      	bhi.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006810:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006814:	d031      	beq.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006816:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800681a:	d828      	bhi.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800681c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006820:	d01a      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006822:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006826:	d822      	bhi.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006828:	2b00      	cmp	r3, #0
 800682a:	d003      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800682c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006830:	d007      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006832:	e01c      	b.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006834:	4b4b      	ldr	r3, [pc, #300]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006838:	4a4a      	ldr	r2, [pc, #296]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800683a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800683e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006840:	e01c      	b.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006846:	3308      	adds	r3, #8
 8006848:	2100      	movs	r1, #0
 800684a:	4618      	mov	r0, r3
 800684c:	f001 fa6e 	bl	8007d2c <RCCEx_PLL2_Config>
 8006850:	4603      	mov	r3, r0
 8006852:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006856:	e011      	b.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800685c:	3328      	adds	r3, #40	@ 0x28
 800685e:	2100      	movs	r1, #0
 8006860:	4618      	mov	r0, r3
 8006862:	f001 fb15 	bl	8007e90 <RCCEx_PLL3_Config>
 8006866:	4603      	mov	r3, r0
 8006868:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800686c:	e006      	b.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006874:	e002      	b.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006876:	bf00      	nop
 8006878:	e000      	b.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800687a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800687c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006880:	2b00      	cmp	r3, #0
 8006882:	d10a      	bne.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006884:	4b37      	ldr	r3, [pc, #220]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006886:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006888:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800688c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006890:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006892:	4a34      	ldr	r2, [pc, #208]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006894:	430b      	orrs	r3, r1
 8006896:	6513      	str	r3, [r2, #80]	@ 0x50
 8006898:	e003      	b.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800689a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800689e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80068a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068aa:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80068ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80068b2:	2300      	movs	r3, #0
 80068b4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80068b8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80068bc:	460b      	mov	r3, r1
 80068be:	4313      	orrs	r3, r2
 80068c0:	d056      	beq.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80068c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80068cc:	d033      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80068ce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80068d2:	d82c      	bhi.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80068d4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80068d8:	d02f      	beq.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80068da:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80068de:	d826      	bhi.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80068e0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80068e4:	d02b      	beq.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80068e6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80068ea:	d820      	bhi.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80068ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068f0:	d012      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80068f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068f6:	d81a      	bhi.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d022      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80068fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006900:	d115      	bne.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006906:	3308      	adds	r3, #8
 8006908:	2101      	movs	r1, #1
 800690a:	4618      	mov	r0, r3
 800690c:	f001 fa0e 	bl	8007d2c <RCCEx_PLL2_Config>
 8006910:	4603      	mov	r3, r0
 8006912:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006916:	e015      	b.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800691c:	3328      	adds	r3, #40	@ 0x28
 800691e:	2101      	movs	r1, #1
 8006920:	4618      	mov	r0, r3
 8006922:	f001 fab5 	bl	8007e90 <RCCEx_PLL3_Config>
 8006926:	4603      	mov	r3, r0
 8006928:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800692c:	e00a      	b.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006934:	e006      	b.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006936:	bf00      	nop
 8006938:	e004      	b.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800693a:	bf00      	nop
 800693c:	e002      	b.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800693e:	bf00      	nop
 8006940:	e000      	b.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006942:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006944:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006948:	2b00      	cmp	r3, #0
 800694a:	d10d      	bne.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800694c:	4b05      	ldr	r3, [pc, #20]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800694e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006950:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006958:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800695a:	4a02      	ldr	r2, [pc, #8]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800695c:	430b      	orrs	r3, r1
 800695e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006960:	e006      	b.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006962:	bf00      	nop
 8006964:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006968:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800696c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006978:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800697c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006980:	2300      	movs	r3, #0
 8006982:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006986:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800698a:	460b      	mov	r3, r1
 800698c:	4313      	orrs	r3, r2
 800698e:	d055      	beq.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006994:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006998:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800699c:	d033      	beq.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800699e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80069a2:	d82c      	bhi.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 80069a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069a8:	d02f      	beq.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80069aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069ae:	d826      	bhi.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 80069b0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80069b4:	d02b      	beq.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80069b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80069ba:	d820      	bhi.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 80069bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069c0:	d012      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80069c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069c6:	d81a      	bhi.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d022      	beq.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80069cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069d0:	d115      	bne.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80069d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069d6:	3308      	adds	r3, #8
 80069d8:	2101      	movs	r1, #1
 80069da:	4618      	mov	r0, r3
 80069dc:	f001 f9a6 	bl	8007d2c <RCCEx_PLL2_Config>
 80069e0:	4603      	mov	r3, r0
 80069e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80069e6:	e015      	b.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ec:	3328      	adds	r3, #40	@ 0x28
 80069ee:	2101      	movs	r1, #1
 80069f0:	4618      	mov	r0, r3
 80069f2:	f001 fa4d 	bl	8007e90 <RCCEx_PLL3_Config>
 80069f6:	4603      	mov	r3, r0
 80069f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80069fc:	e00a      	b.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a04:	e006      	b.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006a06:	bf00      	nop
 8006a08:	e004      	b.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006a0a:	bf00      	nop
 8006a0c:	e002      	b.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006a0e:	bf00      	nop
 8006a10:	e000      	b.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006a12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d10b      	bne.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006a1c:	4ba3      	ldr	r3, [pc, #652]	@ (8006cac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a20:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a28:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006a2c:	4a9f      	ldr	r2, [pc, #636]	@ (8006cac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a2e:	430b      	orrs	r3, r1
 8006a30:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a32:	e003      	b.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a44:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006a48:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006a52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006a56:	460b      	mov	r3, r1
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	d037      	beq.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a66:	d00e      	beq.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006a68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a6c:	d816      	bhi.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d018      	beq.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006a72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a76:	d111      	bne.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a78:	4b8c      	ldr	r3, [pc, #560]	@ (8006cac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a7c:	4a8b      	ldr	r2, [pc, #556]	@ (8006cac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006a84:	e00f      	b.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a8a:	3308      	adds	r3, #8
 8006a8c:	2101      	movs	r1, #1
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f001 f94c 	bl	8007d2c <RCCEx_PLL2_Config>
 8006a94:	4603      	mov	r3, r0
 8006a96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006a9a:	e004      	b.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006aa2:	e000      	b.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006aa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d10a      	bne.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006aae:	4b7f      	ldr	r3, [pc, #508]	@ (8006cac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ab0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ab2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006abc:	4a7b      	ldr	r2, [pc, #492]	@ (8006cac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006abe:	430b      	orrs	r3, r1
 8006ac0:	6513      	str	r3, [r2, #80]	@ 0x50
 8006ac2:	e003      	b.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ac4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ac8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006ad8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006adc:	2300      	movs	r3, #0
 8006ade:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006ae2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	d039      	beq.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006af0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006af2:	2b03      	cmp	r3, #3
 8006af4:	d81c      	bhi.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006af6:	a201      	add	r2, pc, #4	@ (adr r2, 8006afc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006afc:	08006b39 	.word	0x08006b39
 8006b00:	08006b0d 	.word	0x08006b0d
 8006b04:	08006b1b 	.word	0x08006b1b
 8006b08:	08006b39 	.word	0x08006b39
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b0c:	4b67      	ldr	r3, [pc, #412]	@ (8006cac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b10:	4a66      	ldr	r2, [pc, #408]	@ (8006cac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006b18:	e00f      	b.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b1e:	3308      	adds	r3, #8
 8006b20:	2102      	movs	r1, #2
 8006b22:	4618      	mov	r0, r3
 8006b24:	f001 f902 	bl	8007d2c <RCCEx_PLL2_Config>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006b2e:	e004      	b.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b36:	e000      	b.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006b38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d10a      	bne.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006b42:	4b5a      	ldr	r3, [pc, #360]	@ (8006cac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b46:	f023 0103 	bic.w	r1, r3, #3
 8006b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b50:	4a56      	ldr	r2, [pc, #344]	@ (8006cac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b52:	430b      	orrs	r3, r1
 8006b54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006b56:	e003      	b.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b68:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006b6c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b70:	2300      	movs	r3, #0
 8006b72:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006b76:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	f000 809f 	beq.w	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b82:	4b4b      	ldr	r3, [pc, #300]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a4a      	ldr	r2, [pc, #296]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006b88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b8c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b8e:	f7fa fe27 	bl	80017e0 <HAL_GetTick>
 8006b92:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b96:	e00b      	b.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b98:	f7fa fe22 	bl	80017e0 <HAL_GetTick>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006ba2:	1ad3      	subs	r3, r2, r3
 8006ba4:	2b64      	cmp	r3, #100	@ 0x64
 8006ba6:	d903      	bls.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006ba8:	2303      	movs	r3, #3
 8006baa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006bae:	e005      	b.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006bb0:	4b3f      	ldr	r3, [pc, #252]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d0ed      	beq.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006bbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d179      	bne.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006bc4:	4b39      	ldr	r3, [pc, #228]	@ (8006cac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006bc6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bcc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006bd0:	4053      	eors	r3, r2
 8006bd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d015      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006bda:	4b34      	ldr	r3, [pc, #208]	@ (8006cac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006bdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006be2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006be6:	4b31      	ldr	r3, [pc, #196]	@ (8006cac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006be8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bea:	4a30      	ldr	r2, [pc, #192]	@ (8006cac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006bec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bf0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006bf2:	4b2e      	ldr	r3, [pc, #184]	@ (8006cac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bf6:	4a2d      	ldr	r2, [pc, #180]	@ (8006cac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006bf8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bfc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006bfe:	4a2b      	ldr	r2, [pc, #172]	@ (8006cac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c00:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c04:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006c0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c12:	d118      	bne.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c14:	f7fa fde4 	bl	80017e0 <HAL_GetTick>
 8006c18:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c1c:	e00d      	b.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c1e:	f7fa fddf 	bl	80017e0 <HAL_GetTick>
 8006c22:	4602      	mov	r2, r0
 8006c24:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006c28:	1ad2      	subs	r2, r2, r3
 8006c2a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d903      	bls.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006c32:	2303      	movs	r3, #3
 8006c34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006c38:	e005      	b.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c3a:	4b1c      	ldr	r3, [pc, #112]	@ (8006cac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c3e:	f003 0302 	and.w	r3, r3, #2
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d0eb      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006c46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d129      	bne.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c52:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006c56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c5e:	d10e      	bne.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006c60:	4b12      	ldr	r3, [pc, #72]	@ (8006cac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c6c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006c70:	091a      	lsrs	r2, r3, #4
 8006c72:	4b10      	ldr	r3, [pc, #64]	@ (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006c74:	4013      	ands	r3, r2
 8006c76:	4a0d      	ldr	r2, [pc, #52]	@ (8006cac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c78:	430b      	orrs	r3, r1
 8006c7a:	6113      	str	r3, [r2, #16]
 8006c7c:	e005      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8006cac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	4a0a      	ldr	r2, [pc, #40]	@ (8006cac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c84:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006c88:	6113      	str	r3, [r2, #16]
 8006c8a:	4b08      	ldr	r3, [pc, #32]	@ (8006cac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c8c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c92:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006c96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c9a:	4a04      	ldr	r2, [pc, #16]	@ (8006cac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c9c:	430b      	orrs	r3, r1
 8006c9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ca0:	e00e      	b.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006ca2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ca6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8006caa:	e009      	b.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006cac:	58024400 	.word	0x58024400
 8006cb0:	58024800 	.word	0x58024800
 8006cb4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc8:	f002 0301 	and.w	r3, r2, #1
 8006ccc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006cd6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006cda:	460b      	mov	r3, r1
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	f000 8089 	beq.w	8006df4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ce6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006ce8:	2b28      	cmp	r3, #40	@ 0x28
 8006cea:	d86b      	bhi.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006cec:	a201      	add	r2, pc, #4	@ (adr r2, 8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf2:	bf00      	nop
 8006cf4:	08006dcd 	.word	0x08006dcd
 8006cf8:	08006dc5 	.word	0x08006dc5
 8006cfc:	08006dc5 	.word	0x08006dc5
 8006d00:	08006dc5 	.word	0x08006dc5
 8006d04:	08006dc5 	.word	0x08006dc5
 8006d08:	08006dc5 	.word	0x08006dc5
 8006d0c:	08006dc5 	.word	0x08006dc5
 8006d10:	08006dc5 	.word	0x08006dc5
 8006d14:	08006d99 	.word	0x08006d99
 8006d18:	08006dc5 	.word	0x08006dc5
 8006d1c:	08006dc5 	.word	0x08006dc5
 8006d20:	08006dc5 	.word	0x08006dc5
 8006d24:	08006dc5 	.word	0x08006dc5
 8006d28:	08006dc5 	.word	0x08006dc5
 8006d2c:	08006dc5 	.word	0x08006dc5
 8006d30:	08006dc5 	.word	0x08006dc5
 8006d34:	08006daf 	.word	0x08006daf
 8006d38:	08006dc5 	.word	0x08006dc5
 8006d3c:	08006dc5 	.word	0x08006dc5
 8006d40:	08006dc5 	.word	0x08006dc5
 8006d44:	08006dc5 	.word	0x08006dc5
 8006d48:	08006dc5 	.word	0x08006dc5
 8006d4c:	08006dc5 	.word	0x08006dc5
 8006d50:	08006dc5 	.word	0x08006dc5
 8006d54:	08006dcd 	.word	0x08006dcd
 8006d58:	08006dc5 	.word	0x08006dc5
 8006d5c:	08006dc5 	.word	0x08006dc5
 8006d60:	08006dc5 	.word	0x08006dc5
 8006d64:	08006dc5 	.word	0x08006dc5
 8006d68:	08006dc5 	.word	0x08006dc5
 8006d6c:	08006dc5 	.word	0x08006dc5
 8006d70:	08006dc5 	.word	0x08006dc5
 8006d74:	08006dcd 	.word	0x08006dcd
 8006d78:	08006dc5 	.word	0x08006dc5
 8006d7c:	08006dc5 	.word	0x08006dc5
 8006d80:	08006dc5 	.word	0x08006dc5
 8006d84:	08006dc5 	.word	0x08006dc5
 8006d88:	08006dc5 	.word	0x08006dc5
 8006d8c:	08006dc5 	.word	0x08006dc5
 8006d90:	08006dc5 	.word	0x08006dc5
 8006d94:	08006dcd 	.word	0x08006dcd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d9c:	3308      	adds	r3, #8
 8006d9e:	2101      	movs	r1, #1
 8006da0:	4618      	mov	r0, r3
 8006da2:	f000 ffc3 	bl	8007d2c <RCCEx_PLL2_Config>
 8006da6:	4603      	mov	r3, r0
 8006da8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006dac:	e00f      	b.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006db2:	3328      	adds	r3, #40	@ 0x28
 8006db4:	2101      	movs	r1, #1
 8006db6:	4618      	mov	r0, r3
 8006db8:	f001 f86a 	bl	8007e90 <RCCEx_PLL3_Config>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006dc2:	e004      	b.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006dca:	e000      	b.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006dcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d10a      	bne.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006dd6:	4bbf      	ldr	r3, [pc, #764]	@ (80070d4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dda:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006de2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006de4:	4abb      	ldr	r2, [pc, #748]	@ (80070d4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006de6:	430b      	orrs	r3, r1
 8006de8:	6553      	str	r3, [r2, #84]	@ 0x54
 8006dea:	e003      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006df0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfc:	f002 0302 	and.w	r3, r2, #2
 8006e00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006e04:	2300      	movs	r3, #0
 8006e06:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006e0a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006e0e:	460b      	mov	r3, r1
 8006e10:	4313      	orrs	r3, r2
 8006e12:	d041      	beq.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006e1a:	2b05      	cmp	r3, #5
 8006e1c:	d824      	bhi.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006e1e:	a201      	add	r2, pc, #4	@ (adr r2, 8006e24 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e24:	08006e71 	.word	0x08006e71
 8006e28:	08006e3d 	.word	0x08006e3d
 8006e2c:	08006e53 	.word	0x08006e53
 8006e30:	08006e71 	.word	0x08006e71
 8006e34:	08006e71 	.word	0x08006e71
 8006e38:	08006e71 	.word	0x08006e71
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e40:	3308      	adds	r3, #8
 8006e42:	2101      	movs	r1, #1
 8006e44:	4618      	mov	r0, r3
 8006e46:	f000 ff71 	bl	8007d2c <RCCEx_PLL2_Config>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006e50:	e00f      	b.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e56:	3328      	adds	r3, #40	@ 0x28
 8006e58:	2101      	movs	r1, #1
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f001 f818 	bl	8007e90 <RCCEx_PLL3_Config>
 8006e60:	4603      	mov	r3, r0
 8006e62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006e66:	e004      	b.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e6e:	e000      	b.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006e70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d10a      	bne.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006e7a:	4b96      	ldr	r3, [pc, #600]	@ (80070d4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006e7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e7e:	f023 0107 	bic.w	r1, r3, #7
 8006e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006e88:	4a92      	ldr	r2, [pc, #584]	@ (80070d4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006e8a:	430b      	orrs	r3, r1
 8006e8c:	6553      	str	r3, [r2, #84]	@ 0x54
 8006e8e:	e003      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea0:	f002 0304 	and.w	r3, r2, #4
 8006ea4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006eae:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	d044      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ebc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ec0:	2b05      	cmp	r3, #5
 8006ec2:	d825      	bhi.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006ec4:	a201      	add	r2, pc, #4	@ (adr r2, 8006ecc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eca:	bf00      	nop
 8006ecc:	08006f19 	.word	0x08006f19
 8006ed0:	08006ee5 	.word	0x08006ee5
 8006ed4:	08006efb 	.word	0x08006efb
 8006ed8:	08006f19 	.word	0x08006f19
 8006edc:	08006f19 	.word	0x08006f19
 8006ee0:	08006f19 	.word	0x08006f19
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ee8:	3308      	adds	r3, #8
 8006eea:	2101      	movs	r1, #1
 8006eec:	4618      	mov	r0, r3
 8006eee:	f000 ff1d 	bl	8007d2c <RCCEx_PLL2_Config>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006ef8:	e00f      	b.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006efe:	3328      	adds	r3, #40	@ 0x28
 8006f00:	2101      	movs	r1, #1
 8006f02:	4618      	mov	r0, r3
 8006f04:	f000 ffc4 	bl	8007e90 <RCCEx_PLL3_Config>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006f0e:	e004      	b.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f16:	e000      	b.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006f18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d10b      	bne.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006f22:	4b6c      	ldr	r3, [pc, #432]	@ (80070d4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f26:	f023 0107 	bic.w	r1, r3, #7
 8006f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f32:	4a68      	ldr	r2, [pc, #416]	@ (80070d4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006f34:	430b      	orrs	r3, r1
 8006f36:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f38:	e003      	b.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4a:	f002 0320 	and.w	r3, r2, #32
 8006f4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006f52:	2300      	movs	r3, #0
 8006f54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006f58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	d055      	beq.n	800700e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006f6e:	d033      	beq.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006f70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006f74:	d82c      	bhi.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006f76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f7a:	d02f      	beq.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f80:	d826      	bhi.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006f82:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006f86:	d02b      	beq.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006f88:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006f8c:	d820      	bhi.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006f8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f92:	d012      	beq.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006f94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f98:	d81a      	bhi.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d022      	beq.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006f9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006fa2:	d115      	bne.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fa8:	3308      	adds	r3, #8
 8006faa:	2100      	movs	r1, #0
 8006fac:	4618      	mov	r0, r3
 8006fae:	f000 febd 	bl	8007d2c <RCCEx_PLL2_Config>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006fb8:	e015      	b.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fbe:	3328      	adds	r3, #40	@ 0x28
 8006fc0:	2102      	movs	r1, #2
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f000 ff64 	bl	8007e90 <RCCEx_PLL3_Config>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006fce:	e00a      	b.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006fd6:	e006      	b.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006fd8:	bf00      	nop
 8006fda:	e004      	b.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006fdc:	bf00      	nop
 8006fde:	e002      	b.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006fe0:	bf00      	nop
 8006fe2:	e000      	b.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006fe4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fe6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d10b      	bne.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006fee:	4b39      	ldr	r3, [pc, #228]	@ (80070d4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ff2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ffe:	4a35      	ldr	r2, [pc, #212]	@ (80070d4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007000:	430b      	orrs	r3, r1
 8007002:	6553      	str	r3, [r2, #84]	@ 0x54
 8007004:	e003      	b.n	800700e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007006:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800700a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800700e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007016:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800701a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800701e:	2300      	movs	r3, #0
 8007020:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007024:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007028:	460b      	mov	r3, r1
 800702a:	4313      	orrs	r3, r2
 800702c:	d058      	beq.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800702e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007032:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007036:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800703a:	d033      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800703c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007040:	d82c      	bhi.n	800709c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007042:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007046:	d02f      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007048:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800704c:	d826      	bhi.n	800709c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800704e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007052:	d02b      	beq.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007054:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007058:	d820      	bhi.n	800709c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800705a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800705e:	d012      	beq.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007060:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007064:	d81a      	bhi.n	800709c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007066:	2b00      	cmp	r3, #0
 8007068:	d022      	beq.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800706a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800706e:	d115      	bne.n	800709c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007074:	3308      	adds	r3, #8
 8007076:	2100      	movs	r1, #0
 8007078:	4618      	mov	r0, r3
 800707a:	f000 fe57 	bl	8007d2c <RCCEx_PLL2_Config>
 800707e:	4603      	mov	r3, r0
 8007080:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007084:	e015      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800708a:	3328      	adds	r3, #40	@ 0x28
 800708c:	2102      	movs	r1, #2
 800708e:	4618      	mov	r0, r3
 8007090:	f000 fefe 	bl	8007e90 <RCCEx_PLL3_Config>
 8007094:	4603      	mov	r3, r0
 8007096:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800709a:	e00a      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80070a2:	e006      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80070a4:	bf00      	nop
 80070a6:	e004      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80070a8:	bf00      	nop
 80070aa:	e002      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80070ac:	bf00      	nop
 80070ae:	e000      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80070b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d10e      	bne.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80070ba:	4b06      	ldr	r3, [pc, #24]	@ (80070d4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80070bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070be:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80070c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80070ca:	4a02      	ldr	r2, [pc, #8]	@ (80070d4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80070cc:	430b      	orrs	r3, r1
 80070ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80070d0:	e006      	b.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80070d2:	bf00      	nop
 80070d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80070e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80070ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80070f0:	2300      	movs	r3, #0
 80070f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80070f6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80070fa:	460b      	mov	r3, r1
 80070fc:	4313      	orrs	r3, r2
 80070fe:	d055      	beq.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007100:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007104:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007108:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800710c:	d033      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800710e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007112:	d82c      	bhi.n	800716e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007114:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007118:	d02f      	beq.n	800717a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800711a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800711e:	d826      	bhi.n	800716e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007120:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007124:	d02b      	beq.n	800717e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007126:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800712a:	d820      	bhi.n	800716e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800712c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007130:	d012      	beq.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007132:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007136:	d81a      	bhi.n	800716e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007138:	2b00      	cmp	r3, #0
 800713a:	d022      	beq.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800713c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007140:	d115      	bne.n	800716e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007146:	3308      	adds	r3, #8
 8007148:	2100      	movs	r1, #0
 800714a:	4618      	mov	r0, r3
 800714c:	f000 fdee 	bl	8007d2c <RCCEx_PLL2_Config>
 8007150:	4603      	mov	r3, r0
 8007152:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007156:	e015      	b.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800715c:	3328      	adds	r3, #40	@ 0x28
 800715e:	2102      	movs	r1, #2
 8007160:	4618      	mov	r0, r3
 8007162:	f000 fe95 	bl	8007e90 <RCCEx_PLL3_Config>
 8007166:	4603      	mov	r3, r0
 8007168:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800716c:	e00a      	b.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007174:	e006      	b.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007176:	bf00      	nop
 8007178:	e004      	b.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800717a:	bf00      	nop
 800717c:	e002      	b.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800717e:	bf00      	nop
 8007180:	e000      	b.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007182:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007184:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007188:	2b00      	cmp	r3, #0
 800718a:	d10b      	bne.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800718c:	4ba1      	ldr	r3, [pc, #644]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800718e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007190:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007198:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800719c:	4a9d      	ldr	r2, [pc, #628]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800719e:	430b      	orrs	r3, r1
 80071a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80071a2:	e003      	b.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80071ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b4:	f002 0308 	and.w	r3, r2, #8
 80071b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80071bc:	2300      	movs	r3, #0
 80071be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80071c2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80071c6:	460b      	mov	r3, r1
 80071c8:	4313      	orrs	r3, r2
 80071ca:	d01e      	beq.n	800720a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80071cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071d8:	d10c      	bne.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80071da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071de:	3328      	adds	r3, #40	@ 0x28
 80071e0:	2102      	movs	r1, #2
 80071e2:	4618      	mov	r0, r3
 80071e4:	f000 fe54 	bl	8007e90 <RCCEx_PLL3_Config>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d002      	beq.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80071f4:	4b87      	ldr	r3, [pc, #540]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80071f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071f8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80071fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007200:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007204:	4a83      	ldr	r2, [pc, #524]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007206:	430b      	orrs	r3, r1
 8007208:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800720a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800720e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007212:	f002 0310 	and.w	r3, r2, #16
 8007216:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800721a:	2300      	movs	r3, #0
 800721c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007220:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007224:	460b      	mov	r3, r1
 8007226:	4313      	orrs	r3, r2
 8007228:	d01e      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800722a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800722e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007232:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007236:	d10c      	bne.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800723c:	3328      	adds	r3, #40	@ 0x28
 800723e:	2102      	movs	r1, #2
 8007240:	4618      	mov	r0, r3
 8007242:	f000 fe25 	bl	8007e90 <RCCEx_PLL3_Config>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d002      	beq.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007252:	4b70      	ldr	r3, [pc, #448]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007256:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800725a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800725e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007262:	4a6c      	ldr	r2, [pc, #432]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007264:	430b      	orrs	r3, r1
 8007266:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800726c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007270:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007274:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007278:	2300      	movs	r3, #0
 800727a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800727e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007282:	460b      	mov	r3, r1
 8007284:	4313      	orrs	r3, r2
 8007286:	d03e      	beq.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800728c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007290:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007294:	d022      	beq.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007296:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800729a:	d81b      	bhi.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800729c:	2b00      	cmp	r3, #0
 800729e:	d003      	beq.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80072a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072a4:	d00b      	beq.n	80072be <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80072a6:	e015      	b.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80072a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072ac:	3308      	adds	r3, #8
 80072ae:	2100      	movs	r1, #0
 80072b0:	4618      	mov	r0, r3
 80072b2:	f000 fd3b 	bl	8007d2c <RCCEx_PLL2_Config>
 80072b6:	4603      	mov	r3, r0
 80072b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80072bc:	e00f      	b.n	80072de <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80072be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072c2:	3328      	adds	r3, #40	@ 0x28
 80072c4:	2102      	movs	r1, #2
 80072c6:	4618      	mov	r0, r3
 80072c8:	f000 fde2 	bl	8007e90 <RCCEx_PLL3_Config>
 80072cc:	4603      	mov	r3, r0
 80072ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80072d2:	e004      	b.n	80072de <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80072da:	e000      	b.n	80072de <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80072dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d10b      	bne.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80072e6:	4b4b      	ldr	r3, [pc, #300]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80072e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072ea:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80072ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80072f6:	4a47      	ldr	r2, [pc, #284]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80072f8:	430b      	orrs	r3, r1
 80072fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80072fc:	e003      	b.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007302:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800730a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800730e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007312:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007314:	2300      	movs	r3, #0
 8007316:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007318:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800731c:	460b      	mov	r3, r1
 800731e:	4313      	orrs	r3, r2
 8007320:	d03b      	beq.n	800739a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800732a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800732e:	d01f      	beq.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007330:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007334:	d818      	bhi.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007336:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800733a:	d003      	beq.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800733c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007340:	d007      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007342:	e011      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007344:	4b33      	ldr	r3, [pc, #204]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007348:	4a32      	ldr	r2, [pc, #200]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800734a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800734e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007350:	e00f      	b.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007356:	3328      	adds	r3, #40	@ 0x28
 8007358:	2101      	movs	r1, #1
 800735a:	4618      	mov	r0, r3
 800735c:	f000 fd98 	bl	8007e90 <RCCEx_PLL3_Config>
 8007360:	4603      	mov	r3, r0
 8007362:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007366:	e004      	b.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800736e:	e000      	b.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007370:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007372:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007376:	2b00      	cmp	r3, #0
 8007378:	d10b      	bne.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800737a:	4b26      	ldr	r3, [pc, #152]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800737c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800737e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800738a:	4a22      	ldr	r2, [pc, #136]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800738c:	430b      	orrs	r3, r1
 800738e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007390:	e003      	b.n	800739a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007392:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007396:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800739a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800739e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80073a6:	673b      	str	r3, [r7, #112]	@ 0x70
 80073a8:	2300      	movs	r3, #0
 80073aa:	677b      	str	r3, [r7, #116]	@ 0x74
 80073ac:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80073b0:	460b      	mov	r3, r1
 80073b2:	4313      	orrs	r3, r2
 80073b4:	d034      	beq.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80073b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d003      	beq.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80073c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073c4:	d007      	beq.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80073c6:	e011      	b.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073c8:	4b12      	ldr	r3, [pc, #72]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80073ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073cc:	4a11      	ldr	r2, [pc, #68]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80073ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80073d4:	e00e      	b.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80073d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073da:	3308      	adds	r3, #8
 80073dc:	2102      	movs	r1, #2
 80073de:	4618      	mov	r0, r3
 80073e0:	f000 fca4 	bl	8007d2c <RCCEx_PLL2_Config>
 80073e4:	4603      	mov	r3, r0
 80073e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80073ea:	e003      	b.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80073f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d10d      	bne.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80073fc:	4b05      	ldr	r3, [pc, #20]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80073fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007400:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007408:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800740a:	4a02      	ldr	r2, [pc, #8]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800740c:	430b      	orrs	r3, r1
 800740e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007410:	e006      	b.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007412:	bf00      	nop
 8007414:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007418:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800741c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007428:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800742c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800742e:	2300      	movs	r3, #0
 8007430:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007432:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007436:	460b      	mov	r3, r1
 8007438:	4313      	orrs	r3, r2
 800743a:	d00c      	beq.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800743c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007440:	3328      	adds	r3, #40	@ 0x28
 8007442:	2102      	movs	r1, #2
 8007444:	4618      	mov	r0, r3
 8007446:	f000 fd23 	bl	8007e90 <RCCEx_PLL3_Config>
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d002      	beq.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800745a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007462:	663b      	str	r3, [r7, #96]	@ 0x60
 8007464:	2300      	movs	r3, #0
 8007466:	667b      	str	r3, [r7, #100]	@ 0x64
 8007468:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800746c:	460b      	mov	r3, r1
 800746e:	4313      	orrs	r3, r2
 8007470:	d038      	beq.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007476:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800747a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800747e:	d018      	beq.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007480:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007484:	d811      	bhi.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007486:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800748a:	d014      	beq.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800748c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007490:	d80b      	bhi.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007492:	2b00      	cmp	r3, #0
 8007494:	d011      	beq.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007496:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800749a:	d106      	bne.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800749c:	4bc3      	ldr	r3, [pc, #780]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800749e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074a0:	4ac2      	ldr	r2, [pc, #776]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80074a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80074a8:	e008      	b.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80074b0:	e004      	b.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80074b2:	bf00      	nop
 80074b4:	e002      	b.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80074b6:	bf00      	nop
 80074b8:	e000      	b.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80074ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d10b      	bne.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80074c4:	4bb9      	ldr	r3, [pc, #740]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80074c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074c8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80074cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074d4:	4ab5      	ldr	r2, [pc, #724]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80074d6:	430b      	orrs	r3, r1
 80074d8:	6553      	str	r3, [r2, #84]	@ 0x54
 80074da:	e003      	b.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80074e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ec:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80074f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80074f2:	2300      	movs	r3, #0
 80074f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80074f6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80074fa:	460b      	mov	r3, r1
 80074fc:	4313      	orrs	r3, r2
 80074fe:	d009      	beq.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007500:	4baa      	ldr	r3, [pc, #680]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007502:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007504:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007508:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800750c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800750e:	4aa7      	ldr	r2, [pc, #668]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007510:	430b      	orrs	r3, r1
 8007512:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007520:	653b      	str	r3, [r7, #80]	@ 0x50
 8007522:	2300      	movs	r3, #0
 8007524:	657b      	str	r3, [r7, #84]	@ 0x54
 8007526:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800752a:	460b      	mov	r3, r1
 800752c:	4313      	orrs	r3, r2
 800752e:	d00a      	beq.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007530:	4b9e      	ldr	r3, [pc, #632]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007532:	691b      	ldr	r3, [r3, #16]
 8007534:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007538:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800753c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007540:	4a9a      	ldr	r2, [pc, #616]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007542:	430b      	orrs	r3, r1
 8007544:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800754a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800754e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007552:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007554:	2300      	movs	r3, #0
 8007556:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007558:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800755c:	460b      	mov	r3, r1
 800755e:	4313      	orrs	r3, r2
 8007560:	d009      	beq.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007562:	4b92      	ldr	r3, [pc, #584]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007564:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007566:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800756a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800756e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007570:	4a8e      	ldr	r2, [pc, #568]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007572:	430b      	orrs	r3, r1
 8007574:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800757a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800757e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007582:	643b      	str	r3, [r7, #64]	@ 0x40
 8007584:	2300      	movs	r3, #0
 8007586:	647b      	str	r3, [r7, #68]	@ 0x44
 8007588:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800758c:	460b      	mov	r3, r1
 800758e:	4313      	orrs	r3, r2
 8007590:	d00e      	beq.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007592:	4b86      	ldr	r3, [pc, #536]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	4a85      	ldr	r2, [pc, #532]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007598:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800759c:	6113      	str	r3, [r2, #16]
 800759e:	4b83      	ldr	r3, [pc, #524]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80075a0:	6919      	ldr	r1, [r3, #16]
 80075a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075a6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80075aa:	4a80      	ldr	r2, [pc, #512]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80075ac:	430b      	orrs	r3, r1
 80075ae:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80075b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80075bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80075be:	2300      	movs	r3, #0
 80075c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80075c2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80075c6:	460b      	mov	r3, r1
 80075c8:	4313      	orrs	r3, r2
 80075ca:	d009      	beq.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80075cc:	4b77      	ldr	r3, [pc, #476]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80075ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075d0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80075d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075da:	4a74      	ldr	r2, [pc, #464]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80075dc:	430b      	orrs	r3, r1
 80075de:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80075e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80075ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80075ee:	2300      	movs	r3, #0
 80075f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80075f2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80075f6:	460b      	mov	r3, r1
 80075f8:	4313      	orrs	r3, r2
 80075fa:	d00a      	beq.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80075fc:	4b6b      	ldr	r3, [pc, #428]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80075fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007600:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007608:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800760c:	4a67      	ldr	r2, [pc, #412]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800760e:	430b      	orrs	r3, r1
 8007610:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800761a:	2100      	movs	r1, #0
 800761c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800761e:	f003 0301 	and.w	r3, r3, #1
 8007622:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007624:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007628:	460b      	mov	r3, r1
 800762a:	4313      	orrs	r3, r2
 800762c:	d011      	beq.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800762e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007632:	3308      	adds	r3, #8
 8007634:	2100      	movs	r1, #0
 8007636:	4618      	mov	r0, r3
 8007638:	f000 fb78 	bl	8007d2c <RCCEx_PLL2_Config>
 800763c:	4603      	mov	r3, r0
 800763e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007642:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007646:	2b00      	cmp	r3, #0
 8007648:	d003      	beq.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800764a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800764e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765a:	2100      	movs	r1, #0
 800765c:	6239      	str	r1, [r7, #32]
 800765e:	f003 0302 	and.w	r3, r3, #2
 8007662:	627b      	str	r3, [r7, #36]	@ 0x24
 8007664:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007668:	460b      	mov	r3, r1
 800766a:	4313      	orrs	r3, r2
 800766c:	d011      	beq.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800766e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007672:	3308      	adds	r3, #8
 8007674:	2101      	movs	r1, #1
 8007676:	4618      	mov	r0, r3
 8007678:	f000 fb58 	bl	8007d2c <RCCEx_PLL2_Config>
 800767c:	4603      	mov	r3, r0
 800767e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007682:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007686:	2b00      	cmp	r3, #0
 8007688:	d003      	beq.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800768a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800768e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800769a:	2100      	movs	r1, #0
 800769c:	61b9      	str	r1, [r7, #24]
 800769e:	f003 0304 	and.w	r3, r3, #4
 80076a2:	61fb      	str	r3, [r7, #28]
 80076a4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80076a8:	460b      	mov	r3, r1
 80076aa:	4313      	orrs	r3, r2
 80076ac:	d011      	beq.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80076ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076b2:	3308      	adds	r3, #8
 80076b4:	2102      	movs	r1, #2
 80076b6:	4618      	mov	r0, r3
 80076b8:	f000 fb38 	bl	8007d2c <RCCEx_PLL2_Config>
 80076bc:	4603      	mov	r3, r0
 80076be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80076c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d003      	beq.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80076d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076da:	2100      	movs	r1, #0
 80076dc:	6139      	str	r1, [r7, #16]
 80076de:	f003 0308 	and.w	r3, r3, #8
 80076e2:	617b      	str	r3, [r7, #20]
 80076e4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80076e8:	460b      	mov	r3, r1
 80076ea:	4313      	orrs	r3, r2
 80076ec:	d011      	beq.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80076ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076f2:	3328      	adds	r3, #40	@ 0x28
 80076f4:	2100      	movs	r1, #0
 80076f6:	4618      	mov	r0, r3
 80076f8:	f000 fbca 	bl	8007e90 <RCCEx_PLL3_Config>
 80076fc:	4603      	mov	r3, r0
 80076fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8007702:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007706:	2b00      	cmp	r3, #0
 8007708:	d003      	beq.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800770a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800770e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800771a:	2100      	movs	r1, #0
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	f003 0310 	and.w	r3, r3, #16
 8007722:	60fb      	str	r3, [r7, #12]
 8007724:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007728:	460b      	mov	r3, r1
 800772a:	4313      	orrs	r3, r2
 800772c:	d011      	beq.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800772e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007732:	3328      	adds	r3, #40	@ 0x28
 8007734:	2101      	movs	r1, #1
 8007736:	4618      	mov	r0, r3
 8007738:	f000 fbaa 	bl	8007e90 <RCCEx_PLL3_Config>
 800773c:	4603      	mov	r3, r0
 800773e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007742:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007746:	2b00      	cmp	r3, #0
 8007748:	d003      	beq.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800774a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800774e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800775a:	2100      	movs	r1, #0
 800775c:	6039      	str	r1, [r7, #0]
 800775e:	f003 0320 	and.w	r3, r3, #32
 8007762:	607b      	str	r3, [r7, #4]
 8007764:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007768:	460b      	mov	r3, r1
 800776a:	4313      	orrs	r3, r2
 800776c:	d011      	beq.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800776e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007772:	3328      	adds	r3, #40	@ 0x28
 8007774:	2102      	movs	r1, #2
 8007776:	4618      	mov	r0, r3
 8007778:	f000 fb8a 	bl	8007e90 <RCCEx_PLL3_Config>
 800777c:	4603      	mov	r3, r0
 800777e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007782:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007786:	2b00      	cmp	r3, #0
 8007788:	d003      	beq.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800778a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800778e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8007792:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8007796:	2b00      	cmp	r3, #0
 8007798:	d101      	bne.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800779a:	2300      	movs	r3, #0
 800779c:	e000      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800779e:	2301      	movs	r3, #1
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80077a6:	46bd      	mov	sp, r7
 80077a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077ac:	58024400 	.word	0x58024400

080077b0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80077b4:	f7fe fd96 	bl	80062e4 <HAL_RCC_GetHCLKFreq>
 80077b8:	4602      	mov	r2, r0
 80077ba:	4b06      	ldr	r3, [pc, #24]	@ (80077d4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80077bc:	6a1b      	ldr	r3, [r3, #32]
 80077be:	091b      	lsrs	r3, r3, #4
 80077c0:	f003 0307 	and.w	r3, r3, #7
 80077c4:	4904      	ldr	r1, [pc, #16]	@ (80077d8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80077c6:	5ccb      	ldrb	r3, [r1, r3]
 80077c8:	f003 031f 	and.w	r3, r3, #31
 80077cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	58024400 	.word	0x58024400
 80077d8:	08009d1c 	.word	0x08009d1c

080077dc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80077dc:	b480      	push	{r7}
 80077de:	b089      	sub	sp, #36	@ 0x24
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80077e4:	4ba1      	ldr	r3, [pc, #644]	@ (8007a6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077e8:	f003 0303 	and.w	r3, r3, #3
 80077ec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80077ee:	4b9f      	ldr	r3, [pc, #636]	@ (8007a6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077f2:	0b1b      	lsrs	r3, r3, #12
 80077f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80077f8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80077fa:	4b9c      	ldr	r3, [pc, #624]	@ (8007a6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077fe:	091b      	lsrs	r3, r3, #4
 8007800:	f003 0301 	and.w	r3, r3, #1
 8007804:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007806:	4b99      	ldr	r3, [pc, #612]	@ (8007a6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007808:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800780a:	08db      	lsrs	r3, r3, #3
 800780c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007810:	693a      	ldr	r2, [r7, #16]
 8007812:	fb02 f303 	mul.w	r3, r2, r3
 8007816:	ee07 3a90 	vmov	s15, r3
 800781a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800781e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	2b00      	cmp	r3, #0
 8007826:	f000 8111 	beq.w	8007a4c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	2b02      	cmp	r3, #2
 800782e:	f000 8083 	beq.w	8007938 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	2b02      	cmp	r3, #2
 8007836:	f200 80a1 	bhi.w	800797c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800783a:	69bb      	ldr	r3, [r7, #24]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d003      	beq.n	8007848 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007840:	69bb      	ldr	r3, [r7, #24]
 8007842:	2b01      	cmp	r3, #1
 8007844:	d056      	beq.n	80078f4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007846:	e099      	b.n	800797c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007848:	4b88      	ldr	r3, [pc, #544]	@ (8007a6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 0320 	and.w	r3, r3, #32
 8007850:	2b00      	cmp	r3, #0
 8007852:	d02d      	beq.n	80078b0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007854:	4b85      	ldr	r3, [pc, #532]	@ (8007a6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	08db      	lsrs	r3, r3, #3
 800785a:	f003 0303 	and.w	r3, r3, #3
 800785e:	4a84      	ldr	r2, [pc, #528]	@ (8007a70 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007860:	fa22 f303 	lsr.w	r3, r2, r3
 8007864:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	ee07 3a90 	vmov	s15, r3
 800786c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	ee07 3a90 	vmov	s15, r3
 8007876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800787a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800787e:	4b7b      	ldr	r3, [pc, #492]	@ (8007a6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007886:	ee07 3a90 	vmov	s15, r3
 800788a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800788e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007892:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007a74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007896:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800789a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800789e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80078ae:	e087      	b.n	80079c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	ee07 3a90 	vmov	s15, r3
 80078b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078ba:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007a78 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80078be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078c2:	4b6a      	ldr	r3, [pc, #424]	@ (8007a6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078ca:	ee07 3a90 	vmov	s15, r3
 80078ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80078d6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007a74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80078da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078f2:	e065      	b.n	80079c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	ee07 3a90 	vmov	s15, r3
 80078fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078fe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007a7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007902:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007906:	4b59      	ldr	r3, [pc, #356]	@ (8007a6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800790a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800790e:	ee07 3a90 	vmov	s15, r3
 8007912:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007916:	ed97 6a03 	vldr	s12, [r7, #12]
 800791a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007a74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800791e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007922:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007926:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800792a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800792e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007932:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007936:	e043      	b.n	80079c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	ee07 3a90 	vmov	s15, r3
 800793e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007942:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007a80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007946:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800794a:	4b48      	ldr	r3, [pc, #288]	@ (8007a6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800794c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800794e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007952:	ee07 3a90 	vmov	s15, r3
 8007956:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800795a:	ed97 6a03 	vldr	s12, [r7, #12]
 800795e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007a74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007962:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007966:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800796a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800796e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007972:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007976:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800797a:	e021      	b.n	80079c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	ee07 3a90 	vmov	s15, r3
 8007982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007986:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007a7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800798a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800798e:	4b37      	ldr	r3, [pc, #220]	@ (8007a6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007990:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007996:	ee07 3a90 	vmov	s15, r3
 800799a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800799e:	ed97 6a03 	vldr	s12, [r7, #12]
 80079a2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007a74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80079a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079be:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80079c0:	4b2a      	ldr	r3, [pc, #168]	@ (8007a6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079c4:	0a5b      	lsrs	r3, r3, #9
 80079c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079ca:	ee07 3a90 	vmov	s15, r3
 80079ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80079d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079da:	edd7 6a07 	vldr	s13, [r7, #28]
 80079de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079e6:	ee17 2a90 	vmov	r2, s15
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80079ee:	4b1f      	ldr	r3, [pc, #124]	@ (8007a6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079f2:	0c1b      	lsrs	r3, r3, #16
 80079f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079f8:	ee07 3a90 	vmov	s15, r3
 80079fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a00:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a08:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a14:	ee17 2a90 	vmov	r2, s15
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007a1c:	4b13      	ldr	r3, [pc, #76]	@ (8007a6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a20:	0e1b      	lsrs	r3, r3, #24
 8007a22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a26:	ee07 3a90 	vmov	s15, r3
 8007a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a36:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a42:	ee17 2a90 	vmov	r2, s15
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007a4a:	e008      	b.n	8007a5e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	609a      	str	r2, [r3, #8]
}
 8007a5e:	bf00      	nop
 8007a60:	3724      	adds	r7, #36	@ 0x24
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr
 8007a6a:	bf00      	nop
 8007a6c:	58024400 	.word	0x58024400
 8007a70:	03d09000 	.word	0x03d09000
 8007a74:	46000000 	.word	0x46000000
 8007a78:	4c742400 	.word	0x4c742400
 8007a7c:	4a742400 	.word	0x4a742400
 8007a80:	4bbebc20 	.word	0x4bbebc20

08007a84 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b089      	sub	sp, #36	@ 0x24
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a8c:	4ba1      	ldr	r3, [pc, #644]	@ (8007d14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a90:	f003 0303 	and.w	r3, r3, #3
 8007a94:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007a96:	4b9f      	ldr	r3, [pc, #636]	@ (8007d14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a9a:	0d1b      	lsrs	r3, r3, #20
 8007a9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007aa0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007aa2:	4b9c      	ldr	r3, [pc, #624]	@ (8007d14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aa6:	0a1b      	lsrs	r3, r3, #8
 8007aa8:	f003 0301 	and.w	r3, r3, #1
 8007aac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007aae:	4b99      	ldr	r3, [pc, #612]	@ (8007d14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ab2:	08db      	lsrs	r3, r3, #3
 8007ab4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ab8:	693a      	ldr	r2, [r7, #16]
 8007aba:	fb02 f303 	mul.w	r3, r2, r3
 8007abe:	ee07 3a90 	vmov	s15, r3
 8007ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ac6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	f000 8111 	beq.w	8007cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007ad2:	69bb      	ldr	r3, [r7, #24]
 8007ad4:	2b02      	cmp	r3, #2
 8007ad6:	f000 8083 	beq.w	8007be0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	2b02      	cmp	r3, #2
 8007ade:	f200 80a1 	bhi.w	8007c24 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007ae2:	69bb      	ldr	r3, [r7, #24]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d003      	beq.n	8007af0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d056      	beq.n	8007b9c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007aee:	e099      	b.n	8007c24 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007af0:	4b88      	ldr	r3, [pc, #544]	@ (8007d14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f003 0320 	and.w	r3, r3, #32
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d02d      	beq.n	8007b58 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007afc:	4b85      	ldr	r3, [pc, #532]	@ (8007d14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	08db      	lsrs	r3, r3, #3
 8007b02:	f003 0303 	and.w	r3, r3, #3
 8007b06:	4a84      	ldr	r2, [pc, #528]	@ (8007d18 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007b08:	fa22 f303 	lsr.w	r3, r2, r3
 8007b0c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	ee07 3a90 	vmov	s15, r3
 8007b14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	ee07 3a90 	vmov	s15, r3
 8007b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b26:	4b7b      	ldr	r3, [pc, #492]	@ (8007d14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b2e:	ee07 3a90 	vmov	s15, r3
 8007b32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b36:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b3a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007d1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b52:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007b56:	e087      	b.n	8007c68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	ee07 3a90 	vmov	s15, r3
 8007b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b62:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007d20 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007b66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b6a:	4b6a      	ldr	r3, [pc, #424]	@ (8007d14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b72:	ee07 3a90 	vmov	s15, r3
 8007b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b7e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007d1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b9a:	e065      	b.n	8007c68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	ee07 3a90 	vmov	s15, r3
 8007ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ba6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007d24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bae:	4b59      	ldr	r3, [pc, #356]	@ (8007d14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bb6:	ee07 3a90 	vmov	s15, r3
 8007bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bc2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007d1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007bde:	e043      	b.n	8007c68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	ee07 3a90 	vmov	s15, r3
 8007be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bea:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007d28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bf2:	4b48      	ldr	r3, [pc, #288]	@ (8007d14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bfa:	ee07 3a90 	vmov	s15, r3
 8007bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c02:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c06:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007d1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c22:	e021      	b.n	8007c68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	ee07 3a90 	vmov	s15, r3
 8007c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c2e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007d24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007c32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c36:	4b37      	ldr	r3, [pc, #220]	@ (8007d14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c3e:	ee07 3a90 	vmov	s15, r3
 8007c42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c46:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c4a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007d1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c66:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007c68:	4b2a      	ldr	r3, [pc, #168]	@ (8007d14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c6c:	0a5b      	lsrs	r3, r3, #9
 8007c6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c72:	ee07 3a90 	vmov	s15, r3
 8007c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c82:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c8e:	ee17 2a90 	vmov	r2, s15
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007c96:	4b1f      	ldr	r3, [pc, #124]	@ (8007d14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c9a:	0c1b      	lsrs	r3, r3, #16
 8007c9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ca0:	ee07 3a90 	vmov	s15, r3
 8007ca4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ca8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007cac:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007cb0:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cbc:	ee17 2a90 	vmov	r2, s15
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007cc4:	4b13      	ldr	r3, [pc, #76]	@ (8007d14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cc8:	0e1b      	lsrs	r3, r3, #24
 8007cca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007cce:	ee07 3a90 	vmov	s15, r3
 8007cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cd6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007cda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007cde:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ce2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ce6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cea:	ee17 2a90 	vmov	r2, s15
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007cf2:	e008      	b.n	8007d06 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	609a      	str	r2, [r3, #8]
}
 8007d06:	bf00      	nop
 8007d08:	3724      	adds	r7, #36	@ 0x24
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr
 8007d12:	bf00      	nop
 8007d14:	58024400 	.word	0x58024400
 8007d18:	03d09000 	.word	0x03d09000
 8007d1c:	46000000 	.word	0x46000000
 8007d20:	4c742400 	.word	0x4c742400
 8007d24:	4a742400 	.word	0x4a742400
 8007d28:	4bbebc20 	.word	0x4bbebc20

08007d2c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d36:	2300      	movs	r3, #0
 8007d38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007d3a:	4b53      	ldr	r3, [pc, #332]	@ (8007e88 <RCCEx_PLL2_Config+0x15c>)
 8007d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d3e:	f003 0303 	and.w	r3, r3, #3
 8007d42:	2b03      	cmp	r3, #3
 8007d44:	d101      	bne.n	8007d4a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	e099      	b.n	8007e7e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007d4a:	4b4f      	ldr	r3, [pc, #316]	@ (8007e88 <RCCEx_PLL2_Config+0x15c>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a4e      	ldr	r2, [pc, #312]	@ (8007e88 <RCCEx_PLL2_Config+0x15c>)
 8007d50:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007d54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d56:	f7f9 fd43 	bl	80017e0 <HAL_GetTick>
 8007d5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007d5c:	e008      	b.n	8007d70 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007d5e:	f7f9 fd3f 	bl	80017e0 <HAL_GetTick>
 8007d62:	4602      	mov	r2, r0
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	1ad3      	subs	r3, r2, r3
 8007d68:	2b02      	cmp	r3, #2
 8007d6a:	d901      	bls.n	8007d70 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007d6c:	2303      	movs	r3, #3
 8007d6e:	e086      	b.n	8007e7e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007d70:	4b45      	ldr	r3, [pc, #276]	@ (8007e88 <RCCEx_PLL2_Config+0x15c>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d1f0      	bne.n	8007d5e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007d7c:	4b42      	ldr	r3, [pc, #264]	@ (8007e88 <RCCEx_PLL2_Config+0x15c>)
 8007d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d80:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	031b      	lsls	r3, r3, #12
 8007d8a:	493f      	ldr	r1, [pc, #252]	@ (8007e88 <RCCEx_PLL2_Config+0x15c>)
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	3b01      	subs	r3, #1
 8007d96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	025b      	lsls	r3, r3, #9
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	431a      	orrs	r2, r3
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	68db      	ldr	r3, [r3, #12]
 8007daa:	3b01      	subs	r3, #1
 8007dac:	041b      	lsls	r3, r3, #16
 8007dae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007db2:	431a      	orrs	r2, r3
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	691b      	ldr	r3, [r3, #16]
 8007db8:	3b01      	subs	r3, #1
 8007dba:	061b      	lsls	r3, r3, #24
 8007dbc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007dc0:	4931      	ldr	r1, [pc, #196]	@ (8007e88 <RCCEx_PLL2_Config+0x15c>)
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007dc6:	4b30      	ldr	r3, [pc, #192]	@ (8007e88 <RCCEx_PLL2_Config+0x15c>)
 8007dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	695b      	ldr	r3, [r3, #20]
 8007dd2:	492d      	ldr	r1, [pc, #180]	@ (8007e88 <RCCEx_PLL2_Config+0x15c>)
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007dd8:	4b2b      	ldr	r3, [pc, #172]	@ (8007e88 <RCCEx_PLL2_Config+0x15c>)
 8007dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ddc:	f023 0220 	bic.w	r2, r3, #32
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	699b      	ldr	r3, [r3, #24]
 8007de4:	4928      	ldr	r1, [pc, #160]	@ (8007e88 <RCCEx_PLL2_Config+0x15c>)
 8007de6:	4313      	orrs	r3, r2
 8007de8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007dea:	4b27      	ldr	r3, [pc, #156]	@ (8007e88 <RCCEx_PLL2_Config+0x15c>)
 8007dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dee:	4a26      	ldr	r2, [pc, #152]	@ (8007e88 <RCCEx_PLL2_Config+0x15c>)
 8007df0:	f023 0310 	bic.w	r3, r3, #16
 8007df4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007df6:	4b24      	ldr	r3, [pc, #144]	@ (8007e88 <RCCEx_PLL2_Config+0x15c>)
 8007df8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007dfa:	4b24      	ldr	r3, [pc, #144]	@ (8007e8c <RCCEx_PLL2_Config+0x160>)
 8007dfc:	4013      	ands	r3, r2
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	69d2      	ldr	r2, [r2, #28]
 8007e02:	00d2      	lsls	r2, r2, #3
 8007e04:	4920      	ldr	r1, [pc, #128]	@ (8007e88 <RCCEx_PLL2_Config+0x15c>)
 8007e06:	4313      	orrs	r3, r2
 8007e08:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007e0a:	4b1f      	ldr	r3, [pc, #124]	@ (8007e88 <RCCEx_PLL2_Config+0x15c>)
 8007e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e0e:	4a1e      	ldr	r2, [pc, #120]	@ (8007e88 <RCCEx_PLL2_Config+0x15c>)
 8007e10:	f043 0310 	orr.w	r3, r3, #16
 8007e14:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d106      	bne.n	8007e2a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007e1c:	4b1a      	ldr	r3, [pc, #104]	@ (8007e88 <RCCEx_PLL2_Config+0x15c>)
 8007e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e20:	4a19      	ldr	r2, [pc, #100]	@ (8007e88 <RCCEx_PLL2_Config+0x15c>)
 8007e22:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007e26:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007e28:	e00f      	b.n	8007e4a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d106      	bne.n	8007e3e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007e30:	4b15      	ldr	r3, [pc, #84]	@ (8007e88 <RCCEx_PLL2_Config+0x15c>)
 8007e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e34:	4a14      	ldr	r2, [pc, #80]	@ (8007e88 <RCCEx_PLL2_Config+0x15c>)
 8007e36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e3a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007e3c:	e005      	b.n	8007e4a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007e3e:	4b12      	ldr	r3, [pc, #72]	@ (8007e88 <RCCEx_PLL2_Config+0x15c>)
 8007e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e42:	4a11      	ldr	r2, [pc, #68]	@ (8007e88 <RCCEx_PLL2_Config+0x15c>)
 8007e44:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007e48:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8007e88 <RCCEx_PLL2_Config+0x15c>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a0e      	ldr	r2, [pc, #56]	@ (8007e88 <RCCEx_PLL2_Config+0x15c>)
 8007e50:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007e54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e56:	f7f9 fcc3 	bl	80017e0 <HAL_GetTick>
 8007e5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007e5c:	e008      	b.n	8007e70 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007e5e:	f7f9 fcbf 	bl	80017e0 <HAL_GetTick>
 8007e62:	4602      	mov	r2, r0
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	1ad3      	subs	r3, r2, r3
 8007e68:	2b02      	cmp	r3, #2
 8007e6a:	d901      	bls.n	8007e70 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007e6c:	2303      	movs	r3, #3
 8007e6e:	e006      	b.n	8007e7e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007e70:	4b05      	ldr	r3, [pc, #20]	@ (8007e88 <RCCEx_PLL2_Config+0x15c>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d0f0      	beq.n	8007e5e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	58024400 	.word	0x58024400
 8007e8c:	ffff0007 	.word	0xffff0007

08007e90 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007e9e:	4b53      	ldr	r3, [pc, #332]	@ (8007fec <RCCEx_PLL3_Config+0x15c>)
 8007ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ea2:	f003 0303 	and.w	r3, r3, #3
 8007ea6:	2b03      	cmp	r3, #3
 8007ea8:	d101      	bne.n	8007eae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e099      	b.n	8007fe2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007eae:	4b4f      	ldr	r3, [pc, #316]	@ (8007fec <RCCEx_PLL3_Config+0x15c>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a4e      	ldr	r2, [pc, #312]	@ (8007fec <RCCEx_PLL3_Config+0x15c>)
 8007eb4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007eb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007eba:	f7f9 fc91 	bl	80017e0 <HAL_GetTick>
 8007ebe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ec0:	e008      	b.n	8007ed4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007ec2:	f7f9 fc8d 	bl	80017e0 <HAL_GetTick>
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	1ad3      	subs	r3, r2, r3
 8007ecc:	2b02      	cmp	r3, #2
 8007ece:	d901      	bls.n	8007ed4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007ed0:	2303      	movs	r3, #3
 8007ed2:	e086      	b.n	8007fe2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ed4:	4b45      	ldr	r3, [pc, #276]	@ (8007fec <RCCEx_PLL3_Config+0x15c>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d1f0      	bne.n	8007ec2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007ee0:	4b42      	ldr	r3, [pc, #264]	@ (8007fec <RCCEx_PLL3_Config+0x15c>)
 8007ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ee4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	051b      	lsls	r3, r3, #20
 8007eee:	493f      	ldr	r1, [pc, #252]	@ (8007fec <RCCEx_PLL3_Config+0x15c>)
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	628b      	str	r3, [r1, #40]	@ 0x28
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	3b01      	subs	r3, #1
 8007efa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	3b01      	subs	r3, #1
 8007f04:	025b      	lsls	r3, r3, #9
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	431a      	orrs	r2, r3
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	3b01      	subs	r3, #1
 8007f10:	041b      	lsls	r3, r3, #16
 8007f12:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007f16:	431a      	orrs	r2, r3
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	3b01      	subs	r3, #1
 8007f1e:	061b      	lsls	r3, r3, #24
 8007f20:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007f24:	4931      	ldr	r1, [pc, #196]	@ (8007fec <RCCEx_PLL3_Config+0x15c>)
 8007f26:	4313      	orrs	r3, r2
 8007f28:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007f2a:	4b30      	ldr	r3, [pc, #192]	@ (8007fec <RCCEx_PLL3_Config+0x15c>)
 8007f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f2e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	695b      	ldr	r3, [r3, #20]
 8007f36:	492d      	ldr	r1, [pc, #180]	@ (8007fec <RCCEx_PLL3_Config+0x15c>)
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007f3c:	4b2b      	ldr	r3, [pc, #172]	@ (8007fec <RCCEx_PLL3_Config+0x15c>)
 8007f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f40:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	699b      	ldr	r3, [r3, #24]
 8007f48:	4928      	ldr	r1, [pc, #160]	@ (8007fec <RCCEx_PLL3_Config+0x15c>)
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007f4e:	4b27      	ldr	r3, [pc, #156]	@ (8007fec <RCCEx_PLL3_Config+0x15c>)
 8007f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f52:	4a26      	ldr	r2, [pc, #152]	@ (8007fec <RCCEx_PLL3_Config+0x15c>)
 8007f54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f58:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007f5a:	4b24      	ldr	r3, [pc, #144]	@ (8007fec <RCCEx_PLL3_Config+0x15c>)
 8007f5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f5e:	4b24      	ldr	r3, [pc, #144]	@ (8007ff0 <RCCEx_PLL3_Config+0x160>)
 8007f60:	4013      	ands	r3, r2
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	69d2      	ldr	r2, [r2, #28]
 8007f66:	00d2      	lsls	r2, r2, #3
 8007f68:	4920      	ldr	r1, [pc, #128]	@ (8007fec <RCCEx_PLL3_Config+0x15c>)
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007f6e:	4b1f      	ldr	r3, [pc, #124]	@ (8007fec <RCCEx_PLL3_Config+0x15c>)
 8007f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f72:	4a1e      	ldr	r2, [pc, #120]	@ (8007fec <RCCEx_PLL3_Config+0x15c>)
 8007f74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f78:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d106      	bne.n	8007f8e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007f80:	4b1a      	ldr	r3, [pc, #104]	@ (8007fec <RCCEx_PLL3_Config+0x15c>)
 8007f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f84:	4a19      	ldr	r2, [pc, #100]	@ (8007fec <RCCEx_PLL3_Config+0x15c>)
 8007f86:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007f8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007f8c:	e00f      	b.n	8007fae <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d106      	bne.n	8007fa2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007f94:	4b15      	ldr	r3, [pc, #84]	@ (8007fec <RCCEx_PLL3_Config+0x15c>)
 8007f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f98:	4a14      	ldr	r2, [pc, #80]	@ (8007fec <RCCEx_PLL3_Config+0x15c>)
 8007f9a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007f9e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007fa0:	e005      	b.n	8007fae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007fa2:	4b12      	ldr	r3, [pc, #72]	@ (8007fec <RCCEx_PLL3_Config+0x15c>)
 8007fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fa6:	4a11      	ldr	r2, [pc, #68]	@ (8007fec <RCCEx_PLL3_Config+0x15c>)
 8007fa8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007fac:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007fae:	4b0f      	ldr	r3, [pc, #60]	@ (8007fec <RCCEx_PLL3_Config+0x15c>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a0e      	ldr	r2, [pc, #56]	@ (8007fec <RCCEx_PLL3_Config+0x15c>)
 8007fb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007fb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fba:	f7f9 fc11 	bl	80017e0 <HAL_GetTick>
 8007fbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007fc0:	e008      	b.n	8007fd4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007fc2:	f7f9 fc0d 	bl	80017e0 <HAL_GetTick>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	1ad3      	subs	r3, r2, r3
 8007fcc:	2b02      	cmp	r3, #2
 8007fce:	d901      	bls.n	8007fd4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007fd0:	2303      	movs	r3, #3
 8007fd2:	e006      	b.n	8007fe2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007fd4:	4b05      	ldr	r3, [pc, #20]	@ (8007fec <RCCEx_PLL3_Config+0x15c>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d0f0      	beq.n	8007fc2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3710      	adds	r7, #16
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop
 8007fec:	58024400 	.word	0x58024400
 8007ff0:	ffff0007 	.word	0xffff0007

08007ff4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d101      	bne.n	8008006 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008002:	2301      	movs	r3, #1
 8008004:	e042      	b.n	800808c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800800c:	2b00      	cmp	r3, #0
 800800e:	d106      	bne.n	800801e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f7f9 f9c7 	bl	80013ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2224      	movs	r2, #36	@ 0x24
 8008022:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f022 0201 	bic.w	r2, r2, #1
 8008034:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800803a:	2b00      	cmp	r3, #0
 800803c:	d002      	beq.n	8008044 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 fe1e 	bl	8008c80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 f8b3 	bl	80081b0 <UART_SetConfig>
 800804a:	4603      	mov	r3, r0
 800804c:	2b01      	cmp	r3, #1
 800804e:	d101      	bne.n	8008054 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	e01b      	b.n	800808c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	685a      	ldr	r2, [r3, #4]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008062:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	689a      	ldr	r2, [r3, #8]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008072:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f042 0201 	orr.w	r2, r2, #1
 8008082:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 fe9d 	bl	8008dc4 <UART_CheckIdleState>
 800808a:	4603      	mov	r3, r0
}
 800808c:	4618      	mov	r0, r3
 800808e:	3708      	adds	r7, #8
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b08a      	sub	sp, #40	@ 0x28
 8008098:	af02      	add	r7, sp, #8
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	603b      	str	r3, [r7, #0]
 80080a0:	4613      	mov	r3, r2
 80080a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080aa:	2b20      	cmp	r3, #32
 80080ac:	d17b      	bne.n	80081a6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d002      	beq.n	80080ba <HAL_UART_Transmit+0x26>
 80080b4:	88fb      	ldrh	r3, [r7, #6]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d101      	bne.n	80080be <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80080ba:	2301      	movs	r3, #1
 80080bc:	e074      	b.n	80081a8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2200      	movs	r2, #0
 80080c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2221      	movs	r2, #33	@ 0x21
 80080ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80080ce:	f7f9 fb87 	bl	80017e0 <HAL_GetTick>
 80080d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	88fa      	ldrh	r2, [r7, #6]
 80080d8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	88fa      	ldrh	r2, [r7, #6]
 80080e0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080ec:	d108      	bne.n	8008100 <HAL_UART_Transmit+0x6c>
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	691b      	ldr	r3, [r3, #16]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d104      	bne.n	8008100 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80080f6:	2300      	movs	r3, #0
 80080f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	61bb      	str	r3, [r7, #24]
 80080fe:	e003      	b.n	8008108 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008104:	2300      	movs	r3, #0
 8008106:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008108:	e030      	b.n	800816c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	9300      	str	r3, [sp, #0]
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	2200      	movs	r2, #0
 8008112:	2180      	movs	r1, #128	@ 0x80
 8008114:	68f8      	ldr	r0, [r7, #12]
 8008116:	f000 feff 	bl	8008f18 <UART_WaitOnFlagUntilTimeout>
 800811a:	4603      	mov	r3, r0
 800811c:	2b00      	cmp	r3, #0
 800811e:	d005      	beq.n	800812c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2220      	movs	r2, #32
 8008124:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008128:	2303      	movs	r3, #3
 800812a:	e03d      	b.n	80081a8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800812c:	69fb      	ldr	r3, [r7, #28]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d10b      	bne.n	800814a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008132:	69bb      	ldr	r3, [r7, #24]
 8008134:	881b      	ldrh	r3, [r3, #0]
 8008136:	461a      	mov	r2, r3
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008140:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008142:	69bb      	ldr	r3, [r7, #24]
 8008144:	3302      	adds	r3, #2
 8008146:	61bb      	str	r3, [r7, #24]
 8008148:	e007      	b.n	800815a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800814a:	69fb      	ldr	r3, [r7, #28]
 800814c:	781a      	ldrb	r2, [r3, #0]
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008154:	69fb      	ldr	r3, [r7, #28]
 8008156:	3301      	adds	r3, #1
 8008158:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008160:	b29b      	uxth	r3, r3
 8008162:	3b01      	subs	r3, #1
 8008164:	b29a      	uxth	r2, r3
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008172:	b29b      	uxth	r3, r3
 8008174:	2b00      	cmp	r3, #0
 8008176:	d1c8      	bne.n	800810a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	9300      	str	r3, [sp, #0]
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	2200      	movs	r2, #0
 8008180:	2140      	movs	r1, #64	@ 0x40
 8008182:	68f8      	ldr	r0, [r7, #12]
 8008184:	f000 fec8 	bl	8008f18 <UART_WaitOnFlagUntilTimeout>
 8008188:	4603      	mov	r3, r0
 800818a:	2b00      	cmp	r3, #0
 800818c:	d005      	beq.n	800819a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2220      	movs	r2, #32
 8008192:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008196:	2303      	movs	r3, #3
 8008198:	e006      	b.n	80081a8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2220      	movs	r2, #32
 800819e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80081a2:	2300      	movs	r3, #0
 80081a4:	e000      	b.n	80081a8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80081a6:	2302      	movs	r3, #2
  }
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3720      	adds	r7, #32
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081b4:	b092      	sub	sp, #72	@ 0x48
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80081ba:	2300      	movs	r3, #0
 80081bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	689a      	ldr	r2, [r3, #8]
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	691b      	ldr	r3, [r3, #16]
 80081c8:	431a      	orrs	r2, r3
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	695b      	ldr	r3, [r3, #20]
 80081ce:	431a      	orrs	r2, r3
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	69db      	ldr	r3, [r3, #28]
 80081d4:	4313      	orrs	r3, r2
 80081d6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	4bbe      	ldr	r3, [pc, #760]	@ (80084d8 <UART_SetConfig+0x328>)
 80081e0:	4013      	ands	r3, r2
 80081e2:	697a      	ldr	r2, [r7, #20]
 80081e4:	6812      	ldr	r2, [r2, #0]
 80081e6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80081e8:	430b      	orrs	r3, r1
 80081ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	68da      	ldr	r2, [r3, #12]
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	430a      	orrs	r2, r1
 8008200:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	699b      	ldr	r3, [r3, #24]
 8008206:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4ab3      	ldr	r2, [pc, #716]	@ (80084dc <UART_SetConfig+0x32c>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d004      	beq.n	800821c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	6a1b      	ldr	r3, [r3, #32]
 8008216:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008218:	4313      	orrs	r3, r2
 800821a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	689a      	ldr	r2, [r3, #8]
 8008222:	4baf      	ldr	r3, [pc, #700]	@ (80084e0 <UART_SetConfig+0x330>)
 8008224:	4013      	ands	r3, r2
 8008226:	697a      	ldr	r2, [r7, #20]
 8008228:	6812      	ldr	r2, [r2, #0]
 800822a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800822c:	430b      	orrs	r3, r1
 800822e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008236:	f023 010f 	bic.w	r1, r3, #15
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	430a      	orrs	r2, r1
 8008244:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4aa6      	ldr	r2, [pc, #664]	@ (80084e4 <UART_SetConfig+0x334>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d177      	bne.n	8008340 <UART_SetConfig+0x190>
 8008250:	4ba5      	ldr	r3, [pc, #660]	@ (80084e8 <UART_SetConfig+0x338>)
 8008252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008254:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008258:	2b28      	cmp	r3, #40	@ 0x28
 800825a:	d86d      	bhi.n	8008338 <UART_SetConfig+0x188>
 800825c:	a201      	add	r2, pc, #4	@ (adr r2, 8008264 <UART_SetConfig+0xb4>)
 800825e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008262:	bf00      	nop
 8008264:	08008309 	.word	0x08008309
 8008268:	08008339 	.word	0x08008339
 800826c:	08008339 	.word	0x08008339
 8008270:	08008339 	.word	0x08008339
 8008274:	08008339 	.word	0x08008339
 8008278:	08008339 	.word	0x08008339
 800827c:	08008339 	.word	0x08008339
 8008280:	08008339 	.word	0x08008339
 8008284:	08008311 	.word	0x08008311
 8008288:	08008339 	.word	0x08008339
 800828c:	08008339 	.word	0x08008339
 8008290:	08008339 	.word	0x08008339
 8008294:	08008339 	.word	0x08008339
 8008298:	08008339 	.word	0x08008339
 800829c:	08008339 	.word	0x08008339
 80082a0:	08008339 	.word	0x08008339
 80082a4:	08008319 	.word	0x08008319
 80082a8:	08008339 	.word	0x08008339
 80082ac:	08008339 	.word	0x08008339
 80082b0:	08008339 	.word	0x08008339
 80082b4:	08008339 	.word	0x08008339
 80082b8:	08008339 	.word	0x08008339
 80082bc:	08008339 	.word	0x08008339
 80082c0:	08008339 	.word	0x08008339
 80082c4:	08008321 	.word	0x08008321
 80082c8:	08008339 	.word	0x08008339
 80082cc:	08008339 	.word	0x08008339
 80082d0:	08008339 	.word	0x08008339
 80082d4:	08008339 	.word	0x08008339
 80082d8:	08008339 	.word	0x08008339
 80082dc:	08008339 	.word	0x08008339
 80082e0:	08008339 	.word	0x08008339
 80082e4:	08008329 	.word	0x08008329
 80082e8:	08008339 	.word	0x08008339
 80082ec:	08008339 	.word	0x08008339
 80082f0:	08008339 	.word	0x08008339
 80082f4:	08008339 	.word	0x08008339
 80082f8:	08008339 	.word	0x08008339
 80082fc:	08008339 	.word	0x08008339
 8008300:	08008339 	.word	0x08008339
 8008304:	08008331 	.word	0x08008331
 8008308:	2301      	movs	r3, #1
 800830a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800830e:	e222      	b.n	8008756 <UART_SetConfig+0x5a6>
 8008310:	2304      	movs	r3, #4
 8008312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008316:	e21e      	b.n	8008756 <UART_SetConfig+0x5a6>
 8008318:	2308      	movs	r3, #8
 800831a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800831e:	e21a      	b.n	8008756 <UART_SetConfig+0x5a6>
 8008320:	2310      	movs	r3, #16
 8008322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008326:	e216      	b.n	8008756 <UART_SetConfig+0x5a6>
 8008328:	2320      	movs	r3, #32
 800832a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800832e:	e212      	b.n	8008756 <UART_SetConfig+0x5a6>
 8008330:	2340      	movs	r3, #64	@ 0x40
 8008332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008336:	e20e      	b.n	8008756 <UART_SetConfig+0x5a6>
 8008338:	2380      	movs	r3, #128	@ 0x80
 800833a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800833e:	e20a      	b.n	8008756 <UART_SetConfig+0x5a6>
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a69      	ldr	r2, [pc, #420]	@ (80084ec <UART_SetConfig+0x33c>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d130      	bne.n	80083ac <UART_SetConfig+0x1fc>
 800834a:	4b67      	ldr	r3, [pc, #412]	@ (80084e8 <UART_SetConfig+0x338>)
 800834c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800834e:	f003 0307 	and.w	r3, r3, #7
 8008352:	2b05      	cmp	r3, #5
 8008354:	d826      	bhi.n	80083a4 <UART_SetConfig+0x1f4>
 8008356:	a201      	add	r2, pc, #4	@ (adr r2, 800835c <UART_SetConfig+0x1ac>)
 8008358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800835c:	08008375 	.word	0x08008375
 8008360:	0800837d 	.word	0x0800837d
 8008364:	08008385 	.word	0x08008385
 8008368:	0800838d 	.word	0x0800838d
 800836c:	08008395 	.word	0x08008395
 8008370:	0800839d 	.word	0x0800839d
 8008374:	2300      	movs	r3, #0
 8008376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800837a:	e1ec      	b.n	8008756 <UART_SetConfig+0x5a6>
 800837c:	2304      	movs	r3, #4
 800837e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008382:	e1e8      	b.n	8008756 <UART_SetConfig+0x5a6>
 8008384:	2308      	movs	r3, #8
 8008386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800838a:	e1e4      	b.n	8008756 <UART_SetConfig+0x5a6>
 800838c:	2310      	movs	r3, #16
 800838e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008392:	e1e0      	b.n	8008756 <UART_SetConfig+0x5a6>
 8008394:	2320      	movs	r3, #32
 8008396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800839a:	e1dc      	b.n	8008756 <UART_SetConfig+0x5a6>
 800839c:	2340      	movs	r3, #64	@ 0x40
 800839e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083a2:	e1d8      	b.n	8008756 <UART_SetConfig+0x5a6>
 80083a4:	2380      	movs	r3, #128	@ 0x80
 80083a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083aa:	e1d4      	b.n	8008756 <UART_SetConfig+0x5a6>
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a4f      	ldr	r2, [pc, #316]	@ (80084f0 <UART_SetConfig+0x340>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d130      	bne.n	8008418 <UART_SetConfig+0x268>
 80083b6:	4b4c      	ldr	r3, [pc, #304]	@ (80084e8 <UART_SetConfig+0x338>)
 80083b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083ba:	f003 0307 	and.w	r3, r3, #7
 80083be:	2b05      	cmp	r3, #5
 80083c0:	d826      	bhi.n	8008410 <UART_SetConfig+0x260>
 80083c2:	a201      	add	r2, pc, #4	@ (adr r2, 80083c8 <UART_SetConfig+0x218>)
 80083c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c8:	080083e1 	.word	0x080083e1
 80083cc:	080083e9 	.word	0x080083e9
 80083d0:	080083f1 	.word	0x080083f1
 80083d4:	080083f9 	.word	0x080083f9
 80083d8:	08008401 	.word	0x08008401
 80083dc:	08008409 	.word	0x08008409
 80083e0:	2300      	movs	r3, #0
 80083e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083e6:	e1b6      	b.n	8008756 <UART_SetConfig+0x5a6>
 80083e8:	2304      	movs	r3, #4
 80083ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083ee:	e1b2      	b.n	8008756 <UART_SetConfig+0x5a6>
 80083f0:	2308      	movs	r3, #8
 80083f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083f6:	e1ae      	b.n	8008756 <UART_SetConfig+0x5a6>
 80083f8:	2310      	movs	r3, #16
 80083fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083fe:	e1aa      	b.n	8008756 <UART_SetConfig+0x5a6>
 8008400:	2320      	movs	r3, #32
 8008402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008406:	e1a6      	b.n	8008756 <UART_SetConfig+0x5a6>
 8008408:	2340      	movs	r3, #64	@ 0x40
 800840a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800840e:	e1a2      	b.n	8008756 <UART_SetConfig+0x5a6>
 8008410:	2380      	movs	r3, #128	@ 0x80
 8008412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008416:	e19e      	b.n	8008756 <UART_SetConfig+0x5a6>
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a35      	ldr	r2, [pc, #212]	@ (80084f4 <UART_SetConfig+0x344>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d130      	bne.n	8008484 <UART_SetConfig+0x2d4>
 8008422:	4b31      	ldr	r3, [pc, #196]	@ (80084e8 <UART_SetConfig+0x338>)
 8008424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008426:	f003 0307 	and.w	r3, r3, #7
 800842a:	2b05      	cmp	r3, #5
 800842c:	d826      	bhi.n	800847c <UART_SetConfig+0x2cc>
 800842e:	a201      	add	r2, pc, #4	@ (adr r2, 8008434 <UART_SetConfig+0x284>)
 8008430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008434:	0800844d 	.word	0x0800844d
 8008438:	08008455 	.word	0x08008455
 800843c:	0800845d 	.word	0x0800845d
 8008440:	08008465 	.word	0x08008465
 8008444:	0800846d 	.word	0x0800846d
 8008448:	08008475 	.word	0x08008475
 800844c:	2300      	movs	r3, #0
 800844e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008452:	e180      	b.n	8008756 <UART_SetConfig+0x5a6>
 8008454:	2304      	movs	r3, #4
 8008456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800845a:	e17c      	b.n	8008756 <UART_SetConfig+0x5a6>
 800845c:	2308      	movs	r3, #8
 800845e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008462:	e178      	b.n	8008756 <UART_SetConfig+0x5a6>
 8008464:	2310      	movs	r3, #16
 8008466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800846a:	e174      	b.n	8008756 <UART_SetConfig+0x5a6>
 800846c:	2320      	movs	r3, #32
 800846e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008472:	e170      	b.n	8008756 <UART_SetConfig+0x5a6>
 8008474:	2340      	movs	r3, #64	@ 0x40
 8008476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800847a:	e16c      	b.n	8008756 <UART_SetConfig+0x5a6>
 800847c:	2380      	movs	r3, #128	@ 0x80
 800847e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008482:	e168      	b.n	8008756 <UART_SetConfig+0x5a6>
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a1b      	ldr	r2, [pc, #108]	@ (80084f8 <UART_SetConfig+0x348>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d142      	bne.n	8008514 <UART_SetConfig+0x364>
 800848e:	4b16      	ldr	r3, [pc, #88]	@ (80084e8 <UART_SetConfig+0x338>)
 8008490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008492:	f003 0307 	and.w	r3, r3, #7
 8008496:	2b05      	cmp	r3, #5
 8008498:	d838      	bhi.n	800850c <UART_SetConfig+0x35c>
 800849a:	a201      	add	r2, pc, #4	@ (adr r2, 80084a0 <UART_SetConfig+0x2f0>)
 800849c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a0:	080084b9 	.word	0x080084b9
 80084a4:	080084c1 	.word	0x080084c1
 80084a8:	080084c9 	.word	0x080084c9
 80084ac:	080084d1 	.word	0x080084d1
 80084b0:	080084fd 	.word	0x080084fd
 80084b4:	08008505 	.word	0x08008505
 80084b8:	2300      	movs	r3, #0
 80084ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084be:	e14a      	b.n	8008756 <UART_SetConfig+0x5a6>
 80084c0:	2304      	movs	r3, #4
 80084c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084c6:	e146      	b.n	8008756 <UART_SetConfig+0x5a6>
 80084c8:	2308      	movs	r3, #8
 80084ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084ce:	e142      	b.n	8008756 <UART_SetConfig+0x5a6>
 80084d0:	2310      	movs	r3, #16
 80084d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084d6:	e13e      	b.n	8008756 <UART_SetConfig+0x5a6>
 80084d8:	cfff69f3 	.word	0xcfff69f3
 80084dc:	58000c00 	.word	0x58000c00
 80084e0:	11fff4ff 	.word	0x11fff4ff
 80084e4:	40011000 	.word	0x40011000
 80084e8:	58024400 	.word	0x58024400
 80084ec:	40004400 	.word	0x40004400
 80084f0:	40004800 	.word	0x40004800
 80084f4:	40004c00 	.word	0x40004c00
 80084f8:	40005000 	.word	0x40005000
 80084fc:	2320      	movs	r3, #32
 80084fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008502:	e128      	b.n	8008756 <UART_SetConfig+0x5a6>
 8008504:	2340      	movs	r3, #64	@ 0x40
 8008506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800850a:	e124      	b.n	8008756 <UART_SetConfig+0x5a6>
 800850c:	2380      	movs	r3, #128	@ 0x80
 800850e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008512:	e120      	b.n	8008756 <UART_SetConfig+0x5a6>
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4acb      	ldr	r2, [pc, #812]	@ (8008848 <UART_SetConfig+0x698>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d176      	bne.n	800860c <UART_SetConfig+0x45c>
 800851e:	4bcb      	ldr	r3, [pc, #812]	@ (800884c <UART_SetConfig+0x69c>)
 8008520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008522:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008526:	2b28      	cmp	r3, #40	@ 0x28
 8008528:	d86c      	bhi.n	8008604 <UART_SetConfig+0x454>
 800852a:	a201      	add	r2, pc, #4	@ (adr r2, 8008530 <UART_SetConfig+0x380>)
 800852c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008530:	080085d5 	.word	0x080085d5
 8008534:	08008605 	.word	0x08008605
 8008538:	08008605 	.word	0x08008605
 800853c:	08008605 	.word	0x08008605
 8008540:	08008605 	.word	0x08008605
 8008544:	08008605 	.word	0x08008605
 8008548:	08008605 	.word	0x08008605
 800854c:	08008605 	.word	0x08008605
 8008550:	080085dd 	.word	0x080085dd
 8008554:	08008605 	.word	0x08008605
 8008558:	08008605 	.word	0x08008605
 800855c:	08008605 	.word	0x08008605
 8008560:	08008605 	.word	0x08008605
 8008564:	08008605 	.word	0x08008605
 8008568:	08008605 	.word	0x08008605
 800856c:	08008605 	.word	0x08008605
 8008570:	080085e5 	.word	0x080085e5
 8008574:	08008605 	.word	0x08008605
 8008578:	08008605 	.word	0x08008605
 800857c:	08008605 	.word	0x08008605
 8008580:	08008605 	.word	0x08008605
 8008584:	08008605 	.word	0x08008605
 8008588:	08008605 	.word	0x08008605
 800858c:	08008605 	.word	0x08008605
 8008590:	080085ed 	.word	0x080085ed
 8008594:	08008605 	.word	0x08008605
 8008598:	08008605 	.word	0x08008605
 800859c:	08008605 	.word	0x08008605
 80085a0:	08008605 	.word	0x08008605
 80085a4:	08008605 	.word	0x08008605
 80085a8:	08008605 	.word	0x08008605
 80085ac:	08008605 	.word	0x08008605
 80085b0:	080085f5 	.word	0x080085f5
 80085b4:	08008605 	.word	0x08008605
 80085b8:	08008605 	.word	0x08008605
 80085bc:	08008605 	.word	0x08008605
 80085c0:	08008605 	.word	0x08008605
 80085c4:	08008605 	.word	0x08008605
 80085c8:	08008605 	.word	0x08008605
 80085cc:	08008605 	.word	0x08008605
 80085d0:	080085fd 	.word	0x080085fd
 80085d4:	2301      	movs	r3, #1
 80085d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085da:	e0bc      	b.n	8008756 <UART_SetConfig+0x5a6>
 80085dc:	2304      	movs	r3, #4
 80085de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085e2:	e0b8      	b.n	8008756 <UART_SetConfig+0x5a6>
 80085e4:	2308      	movs	r3, #8
 80085e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085ea:	e0b4      	b.n	8008756 <UART_SetConfig+0x5a6>
 80085ec:	2310      	movs	r3, #16
 80085ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085f2:	e0b0      	b.n	8008756 <UART_SetConfig+0x5a6>
 80085f4:	2320      	movs	r3, #32
 80085f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085fa:	e0ac      	b.n	8008756 <UART_SetConfig+0x5a6>
 80085fc:	2340      	movs	r3, #64	@ 0x40
 80085fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008602:	e0a8      	b.n	8008756 <UART_SetConfig+0x5a6>
 8008604:	2380      	movs	r3, #128	@ 0x80
 8008606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800860a:	e0a4      	b.n	8008756 <UART_SetConfig+0x5a6>
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a8f      	ldr	r2, [pc, #572]	@ (8008850 <UART_SetConfig+0x6a0>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d130      	bne.n	8008678 <UART_SetConfig+0x4c8>
 8008616:	4b8d      	ldr	r3, [pc, #564]	@ (800884c <UART_SetConfig+0x69c>)
 8008618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800861a:	f003 0307 	and.w	r3, r3, #7
 800861e:	2b05      	cmp	r3, #5
 8008620:	d826      	bhi.n	8008670 <UART_SetConfig+0x4c0>
 8008622:	a201      	add	r2, pc, #4	@ (adr r2, 8008628 <UART_SetConfig+0x478>)
 8008624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008628:	08008641 	.word	0x08008641
 800862c:	08008649 	.word	0x08008649
 8008630:	08008651 	.word	0x08008651
 8008634:	08008659 	.word	0x08008659
 8008638:	08008661 	.word	0x08008661
 800863c:	08008669 	.word	0x08008669
 8008640:	2300      	movs	r3, #0
 8008642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008646:	e086      	b.n	8008756 <UART_SetConfig+0x5a6>
 8008648:	2304      	movs	r3, #4
 800864a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800864e:	e082      	b.n	8008756 <UART_SetConfig+0x5a6>
 8008650:	2308      	movs	r3, #8
 8008652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008656:	e07e      	b.n	8008756 <UART_SetConfig+0x5a6>
 8008658:	2310      	movs	r3, #16
 800865a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800865e:	e07a      	b.n	8008756 <UART_SetConfig+0x5a6>
 8008660:	2320      	movs	r3, #32
 8008662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008666:	e076      	b.n	8008756 <UART_SetConfig+0x5a6>
 8008668:	2340      	movs	r3, #64	@ 0x40
 800866a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800866e:	e072      	b.n	8008756 <UART_SetConfig+0x5a6>
 8008670:	2380      	movs	r3, #128	@ 0x80
 8008672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008676:	e06e      	b.n	8008756 <UART_SetConfig+0x5a6>
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a75      	ldr	r2, [pc, #468]	@ (8008854 <UART_SetConfig+0x6a4>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d130      	bne.n	80086e4 <UART_SetConfig+0x534>
 8008682:	4b72      	ldr	r3, [pc, #456]	@ (800884c <UART_SetConfig+0x69c>)
 8008684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008686:	f003 0307 	and.w	r3, r3, #7
 800868a:	2b05      	cmp	r3, #5
 800868c:	d826      	bhi.n	80086dc <UART_SetConfig+0x52c>
 800868e:	a201      	add	r2, pc, #4	@ (adr r2, 8008694 <UART_SetConfig+0x4e4>)
 8008690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008694:	080086ad 	.word	0x080086ad
 8008698:	080086b5 	.word	0x080086b5
 800869c:	080086bd 	.word	0x080086bd
 80086a0:	080086c5 	.word	0x080086c5
 80086a4:	080086cd 	.word	0x080086cd
 80086a8:	080086d5 	.word	0x080086d5
 80086ac:	2300      	movs	r3, #0
 80086ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086b2:	e050      	b.n	8008756 <UART_SetConfig+0x5a6>
 80086b4:	2304      	movs	r3, #4
 80086b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086ba:	e04c      	b.n	8008756 <UART_SetConfig+0x5a6>
 80086bc:	2308      	movs	r3, #8
 80086be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086c2:	e048      	b.n	8008756 <UART_SetConfig+0x5a6>
 80086c4:	2310      	movs	r3, #16
 80086c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086ca:	e044      	b.n	8008756 <UART_SetConfig+0x5a6>
 80086cc:	2320      	movs	r3, #32
 80086ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086d2:	e040      	b.n	8008756 <UART_SetConfig+0x5a6>
 80086d4:	2340      	movs	r3, #64	@ 0x40
 80086d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086da:	e03c      	b.n	8008756 <UART_SetConfig+0x5a6>
 80086dc:	2380      	movs	r3, #128	@ 0x80
 80086de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086e2:	e038      	b.n	8008756 <UART_SetConfig+0x5a6>
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a5b      	ldr	r2, [pc, #364]	@ (8008858 <UART_SetConfig+0x6a8>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d130      	bne.n	8008750 <UART_SetConfig+0x5a0>
 80086ee:	4b57      	ldr	r3, [pc, #348]	@ (800884c <UART_SetConfig+0x69c>)
 80086f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086f2:	f003 0307 	and.w	r3, r3, #7
 80086f6:	2b05      	cmp	r3, #5
 80086f8:	d826      	bhi.n	8008748 <UART_SetConfig+0x598>
 80086fa:	a201      	add	r2, pc, #4	@ (adr r2, 8008700 <UART_SetConfig+0x550>)
 80086fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008700:	08008719 	.word	0x08008719
 8008704:	08008721 	.word	0x08008721
 8008708:	08008729 	.word	0x08008729
 800870c:	08008731 	.word	0x08008731
 8008710:	08008739 	.word	0x08008739
 8008714:	08008741 	.word	0x08008741
 8008718:	2302      	movs	r3, #2
 800871a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800871e:	e01a      	b.n	8008756 <UART_SetConfig+0x5a6>
 8008720:	2304      	movs	r3, #4
 8008722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008726:	e016      	b.n	8008756 <UART_SetConfig+0x5a6>
 8008728:	2308      	movs	r3, #8
 800872a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800872e:	e012      	b.n	8008756 <UART_SetConfig+0x5a6>
 8008730:	2310      	movs	r3, #16
 8008732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008736:	e00e      	b.n	8008756 <UART_SetConfig+0x5a6>
 8008738:	2320      	movs	r3, #32
 800873a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800873e:	e00a      	b.n	8008756 <UART_SetConfig+0x5a6>
 8008740:	2340      	movs	r3, #64	@ 0x40
 8008742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008746:	e006      	b.n	8008756 <UART_SetConfig+0x5a6>
 8008748:	2380      	movs	r3, #128	@ 0x80
 800874a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800874e:	e002      	b.n	8008756 <UART_SetConfig+0x5a6>
 8008750:	2380      	movs	r3, #128	@ 0x80
 8008752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a3f      	ldr	r2, [pc, #252]	@ (8008858 <UART_SetConfig+0x6a8>)
 800875c:	4293      	cmp	r3, r2
 800875e:	f040 80f8 	bne.w	8008952 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008762:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008766:	2b20      	cmp	r3, #32
 8008768:	dc46      	bgt.n	80087f8 <UART_SetConfig+0x648>
 800876a:	2b02      	cmp	r3, #2
 800876c:	f2c0 8082 	blt.w	8008874 <UART_SetConfig+0x6c4>
 8008770:	3b02      	subs	r3, #2
 8008772:	2b1e      	cmp	r3, #30
 8008774:	d87e      	bhi.n	8008874 <UART_SetConfig+0x6c4>
 8008776:	a201      	add	r2, pc, #4	@ (adr r2, 800877c <UART_SetConfig+0x5cc>)
 8008778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800877c:	080087ff 	.word	0x080087ff
 8008780:	08008875 	.word	0x08008875
 8008784:	08008807 	.word	0x08008807
 8008788:	08008875 	.word	0x08008875
 800878c:	08008875 	.word	0x08008875
 8008790:	08008875 	.word	0x08008875
 8008794:	08008817 	.word	0x08008817
 8008798:	08008875 	.word	0x08008875
 800879c:	08008875 	.word	0x08008875
 80087a0:	08008875 	.word	0x08008875
 80087a4:	08008875 	.word	0x08008875
 80087a8:	08008875 	.word	0x08008875
 80087ac:	08008875 	.word	0x08008875
 80087b0:	08008875 	.word	0x08008875
 80087b4:	08008827 	.word	0x08008827
 80087b8:	08008875 	.word	0x08008875
 80087bc:	08008875 	.word	0x08008875
 80087c0:	08008875 	.word	0x08008875
 80087c4:	08008875 	.word	0x08008875
 80087c8:	08008875 	.word	0x08008875
 80087cc:	08008875 	.word	0x08008875
 80087d0:	08008875 	.word	0x08008875
 80087d4:	08008875 	.word	0x08008875
 80087d8:	08008875 	.word	0x08008875
 80087dc:	08008875 	.word	0x08008875
 80087e0:	08008875 	.word	0x08008875
 80087e4:	08008875 	.word	0x08008875
 80087e8:	08008875 	.word	0x08008875
 80087ec:	08008875 	.word	0x08008875
 80087f0:	08008875 	.word	0x08008875
 80087f4:	08008867 	.word	0x08008867
 80087f8:	2b40      	cmp	r3, #64	@ 0x40
 80087fa:	d037      	beq.n	800886c <UART_SetConfig+0x6bc>
 80087fc:	e03a      	b.n	8008874 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80087fe:	f7fe ffd7 	bl	80077b0 <HAL_RCCEx_GetD3PCLK1Freq>
 8008802:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008804:	e03c      	b.n	8008880 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008806:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800880a:	4618      	mov	r0, r3
 800880c:	f7fe ffe6 	bl	80077dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008812:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008814:	e034      	b.n	8008880 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008816:	f107 0318 	add.w	r3, r7, #24
 800881a:	4618      	mov	r0, r3
 800881c:	f7ff f932 	bl	8007a84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008820:	69fb      	ldr	r3, [r7, #28]
 8008822:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008824:	e02c      	b.n	8008880 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008826:	4b09      	ldr	r3, [pc, #36]	@ (800884c <UART_SetConfig+0x69c>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f003 0320 	and.w	r3, r3, #32
 800882e:	2b00      	cmp	r3, #0
 8008830:	d016      	beq.n	8008860 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008832:	4b06      	ldr	r3, [pc, #24]	@ (800884c <UART_SetConfig+0x69c>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	08db      	lsrs	r3, r3, #3
 8008838:	f003 0303 	and.w	r3, r3, #3
 800883c:	4a07      	ldr	r2, [pc, #28]	@ (800885c <UART_SetConfig+0x6ac>)
 800883e:	fa22 f303 	lsr.w	r3, r2, r3
 8008842:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008844:	e01c      	b.n	8008880 <UART_SetConfig+0x6d0>
 8008846:	bf00      	nop
 8008848:	40011400 	.word	0x40011400
 800884c:	58024400 	.word	0x58024400
 8008850:	40007800 	.word	0x40007800
 8008854:	40007c00 	.word	0x40007c00
 8008858:	58000c00 	.word	0x58000c00
 800885c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008860:	4b9d      	ldr	r3, [pc, #628]	@ (8008ad8 <UART_SetConfig+0x928>)
 8008862:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008864:	e00c      	b.n	8008880 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008866:	4b9d      	ldr	r3, [pc, #628]	@ (8008adc <UART_SetConfig+0x92c>)
 8008868:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800886a:	e009      	b.n	8008880 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800886c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008870:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008872:	e005      	b.n	8008880 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008874:	2300      	movs	r3, #0
 8008876:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008878:	2301      	movs	r3, #1
 800887a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800887e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008880:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008882:	2b00      	cmp	r3, #0
 8008884:	f000 81de 	beq.w	8008c44 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800888c:	4a94      	ldr	r2, [pc, #592]	@ (8008ae0 <UART_SetConfig+0x930>)
 800888e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008892:	461a      	mov	r2, r3
 8008894:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008896:	fbb3 f3f2 	udiv	r3, r3, r2
 800889a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	685a      	ldr	r2, [r3, #4]
 80088a0:	4613      	mov	r3, r2
 80088a2:	005b      	lsls	r3, r3, #1
 80088a4:	4413      	add	r3, r2
 80088a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d305      	bcc.n	80088b8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80088b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d903      	bls.n	80088c0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80088b8:	2301      	movs	r3, #1
 80088ba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80088be:	e1c1      	b.n	8008c44 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088c2:	2200      	movs	r2, #0
 80088c4:	60bb      	str	r3, [r7, #8]
 80088c6:	60fa      	str	r2, [r7, #12]
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088cc:	4a84      	ldr	r2, [pc, #528]	@ (8008ae0 <UART_SetConfig+0x930>)
 80088ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	2200      	movs	r2, #0
 80088d6:	603b      	str	r3, [r7, #0]
 80088d8:	607a      	str	r2, [r7, #4]
 80088da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80088e2:	f7f7 fd55 	bl	8000390 <__aeabi_uldivmod>
 80088e6:	4602      	mov	r2, r0
 80088e8:	460b      	mov	r3, r1
 80088ea:	4610      	mov	r0, r2
 80088ec:	4619      	mov	r1, r3
 80088ee:	f04f 0200 	mov.w	r2, #0
 80088f2:	f04f 0300 	mov.w	r3, #0
 80088f6:	020b      	lsls	r3, r1, #8
 80088f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80088fc:	0202      	lsls	r2, r0, #8
 80088fe:	6979      	ldr	r1, [r7, #20]
 8008900:	6849      	ldr	r1, [r1, #4]
 8008902:	0849      	lsrs	r1, r1, #1
 8008904:	2000      	movs	r0, #0
 8008906:	460c      	mov	r4, r1
 8008908:	4605      	mov	r5, r0
 800890a:	eb12 0804 	adds.w	r8, r2, r4
 800890e:	eb43 0905 	adc.w	r9, r3, r5
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	2200      	movs	r2, #0
 8008918:	469a      	mov	sl, r3
 800891a:	4693      	mov	fp, r2
 800891c:	4652      	mov	r2, sl
 800891e:	465b      	mov	r3, fp
 8008920:	4640      	mov	r0, r8
 8008922:	4649      	mov	r1, r9
 8008924:	f7f7 fd34 	bl	8000390 <__aeabi_uldivmod>
 8008928:	4602      	mov	r2, r0
 800892a:	460b      	mov	r3, r1
 800892c:	4613      	mov	r3, r2
 800892e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008932:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008936:	d308      	bcc.n	800894a <UART_SetConfig+0x79a>
 8008938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800893a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800893e:	d204      	bcs.n	800894a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008946:	60da      	str	r2, [r3, #12]
 8008948:	e17c      	b.n	8008c44 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800894a:	2301      	movs	r3, #1
 800894c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008950:	e178      	b.n	8008c44 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	69db      	ldr	r3, [r3, #28]
 8008956:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800895a:	f040 80c5 	bne.w	8008ae8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800895e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008962:	2b20      	cmp	r3, #32
 8008964:	dc48      	bgt.n	80089f8 <UART_SetConfig+0x848>
 8008966:	2b00      	cmp	r3, #0
 8008968:	db7b      	blt.n	8008a62 <UART_SetConfig+0x8b2>
 800896a:	2b20      	cmp	r3, #32
 800896c:	d879      	bhi.n	8008a62 <UART_SetConfig+0x8b2>
 800896e:	a201      	add	r2, pc, #4	@ (adr r2, 8008974 <UART_SetConfig+0x7c4>)
 8008970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008974:	080089ff 	.word	0x080089ff
 8008978:	08008a07 	.word	0x08008a07
 800897c:	08008a63 	.word	0x08008a63
 8008980:	08008a63 	.word	0x08008a63
 8008984:	08008a0f 	.word	0x08008a0f
 8008988:	08008a63 	.word	0x08008a63
 800898c:	08008a63 	.word	0x08008a63
 8008990:	08008a63 	.word	0x08008a63
 8008994:	08008a1f 	.word	0x08008a1f
 8008998:	08008a63 	.word	0x08008a63
 800899c:	08008a63 	.word	0x08008a63
 80089a0:	08008a63 	.word	0x08008a63
 80089a4:	08008a63 	.word	0x08008a63
 80089a8:	08008a63 	.word	0x08008a63
 80089ac:	08008a63 	.word	0x08008a63
 80089b0:	08008a63 	.word	0x08008a63
 80089b4:	08008a2f 	.word	0x08008a2f
 80089b8:	08008a63 	.word	0x08008a63
 80089bc:	08008a63 	.word	0x08008a63
 80089c0:	08008a63 	.word	0x08008a63
 80089c4:	08008a63 	.word	0x08008a63
 80089c8:	08008a63 	.word	0x08008a63
 80089cc:	08008a63 	.word	0x08008a63
 80089d0:	08008a63 	.word	0x08008a63
 80089d4:	08008a63 	.word	0x08008a63
 80089d8:	08008a63 	.word	0x08008a63
 80089dc:	08008a63 	.word	0x08008a63
 80089e0:	08008a63 	.word	0x08008a63
 80089e4:	08008a63 	.word	0x08008a63
 80089e8:	08008a63 	.word	0x08008a63
 80089ec:	08008a63 	.word	0x08008a63
 80089f0:	08008a63 	.word	0x08008a63
 80089f4:	08008a55 	.word	0x08008a55
 80089f8:	2b40      	cmp	r3, #64	@ 0x40
 80089fa:	d02e      	beq.n	8008a5a <UART_SetConfig+0x8aa>
 80089fc:	e031      	b.n	8008a62 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089fe:	f7fd fca1 	bl	8006344 <HAL_RCC_GetPCLK1Freq>
 8008a02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008a04:	e033      	b.n	8008a6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a06:	f7fd fcb3 	bl	8006370 <HAL_RCC_GetPCLK2Freq>
 8008a0a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008a0c:	e02f      	b.n	8008a6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a12:	4618      	mov	r0, r3
 8008a14:	f7fe fee2 	bl	80077dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a1c:	e027      	b.n	8008a6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a1e:	f107 0318 	add.w	r3, r7, #24
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7ff f82e 	bl	8007a84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008a28:	69fb      	ldr	r3, [r7, #28]
 8008a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a2c:	e01f      	b.n	8008a6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a2e:	4b2d      	ldr	r3, [pc, #180]	@ (8008ae4 <UART_SetConfig+0x934>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f003 0320 	and.w	r3, r3, #32
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d009      	beq.n	8008a4e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008a3a:	4b2a      	ldr	r3, [pc, #168]	@ (8008ae4 <UART_SetConfig+0x934>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	08db      	lsrs	r3, r3, #3
 8008a40:	f003 0303 	and.w	r3, r3, #3
 8008a44:	4a24      	ldr	r2, [pc, #144]	@ (8008ad8 <UART_SetConfig+0x928>)
 8008a46:	fa22 f303 	lsr.w	r3, r2, r3
 8008a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008a4c:	e00f      	b.n	8008a6e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008a4e:	4b22      	ldr	r3, [pc, #136]	@ (8008ad8 <UART_SetConfig+0x928>)
 8008a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a52:	e00c      	b.n	8008a6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008a54:	4b21      	ldr	r3, [pc, #132]	@ (8008adc <UART_SetConfig+0x92c>)
 8008a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a58:	e009      	b.n	8008a6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a60:	e005      	b.n	8008a6e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008a62:	2300      	movs	r3, #0
 8008a64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008a66:	2301      	movs	r3, #1
 8008a68:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008a6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008a6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	f000 80e7 	beq.w	8008c44 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a7a:	4a19      	ldr	r2, [pc, #100]	@ (8008ae0 <UART_SetConfig+0x930>)
 8008a7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a80:	461a      	mov	r2, r3
 8008a82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a84:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a88:	005a      	lsls	r2, r3, #1
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	085b      	lsrs	r3, r3, #1
 8008a90:	441a      	add	r2, r3
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a9a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a9e:	2b0f      	cmp	r3, #15
 8008aa0:	d916      	bls.n	8008ad0 <UART_SetConfig+0x920>
 8008aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008aa8:	d212      	bcs.n	8008ad0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	f023 030f 	bic.w	r3, r3, #15
 8008ab2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ab6:	085b      	lsrs	r3, r3, #1
 8008ab8:	b29b      	uxth	r3, r3
 8008aba:	f003 0307 	and.w	r3, r3, #7
 8008abe:	b29a      	uxth	r2, r3
 8008ac0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008acc:	60da      	str	r2, [r3, #12]
 8008ace:	e0b9      	b.n	8008c44 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008ad6:	e0b5      	b.n	8008c44 <UART_SetConfig+0xa94>
 8008ad8:	03d09000 	.word	0x03d09000
 8008adc:	003d0900 	.word	0x003d0900
 8008ae0:	08009d34 	.word	0x08009d34
 8008ae4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008ae8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008aec:	2b20      	cmp	r3, #32
 8008aee:	dc49      	bgt.n	8008b84 <UART_SetConfig+0x9d4>
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	db7c      	blt.n	8008bee <UART_SetConfig+0xa3e>
 8008af4:	2b20      	cmp	r3, #32
 8008af6:	d87a      	bhi.n	8008bee <UART_SetConfig+0xa3e>
 8008af8:	a201      	add	r2, pc, #4	@ (adr r2, 8008b00 <UART_SetConfig+0x950>)
 8008afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008afe:	bf00      	nop
 8008b00:	08008b8b 	.word	0x08008b8b
 8008b04:	08008b93 	.word	0x08008b93
 8008b08:	08008bef 	.word	0x08008bef
 8008b0c:	08008bef 	.word	0x08008bef
 8008b10:	08008b9b 	.word	0x08008b9b
 8008b14:	08008bef 	.word	0x08008bef
 8008b18:	08008bef 	.word	0x08008bef
 8008b1c:	08008bef 	.word	0x08008bef
 8008b20:	08008bab 	.word	0x08008bab
 8008b24:	08008bef 	.word	0x08008bef
 8008b28:	08008bef 	.word	0x08008bef
 8008b2c:	08008bef 	.word	0x08008bef
 8008b30:	08008bef 	.word	0x08008bef
 8008b34:	08008bef 	.word	0x08008bef
 8008b38:	08008bef 	.word	0x08008bef
 8008b3c:	08008bef 	.word	0x08008bef
 8008b40:	08008bbb 	.word	0x08008bbb
 8008b44:	08008bef 	.word	0x08008bef
 8008b48:	08008bef 	.word	0x08008bef
 8008b4c:	08008bef 	.word	0x08008bef
 8008b50:	08008bef 	.word	0x08008bef
 8008b54:	08008bef 	.word	0x08008bef
 8008b58:	08008bef 	.word	0x08008bef
 8008b5c:	08008bef 	.word	0x08008bef
 8008b60:	08008bef 	.word	0x08008bef
 8008b64:	08008bef 	.word	0x08008bef
 8008b68:	08008bef 	.word	0x08008bef
 8008b6c:	08008bef 	.word	0x08008bef
 8008b70:	08008bef 	.word	0x08008bef
 8008b74:	08008bef 	.word	0x08008bef
 8008b78:	08008bef 	.word	0x08008bef
 8008b7c:	08008bef 	.word	0x08008bef
 8008b80:	08008be1 	.word	0x08008be1
 8008b84:	2b40      	cmp	r3, #64	@ 0x40
 8008b86:	d02e      	beq.n	8008be6 <UART_SetConfig+0xa36>
 8008b88:	e031      	b.n	8008bee <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b8a:	f7fd fbdb 	bl	8006344 <HAL_RCC_GetPCLK1Freq>
 8008b8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008b90:	e033      	b.n	8008bfa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b92:	f7fd fbed 	bl	8006370 <HAL_RCC_GetPCLK2Freq>
 8008b96:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008b98:	e02f      	b.n	8008bfa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f7fe fe1c 	bl	80077dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ba8:	e027      	b.n	8008bfa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008baa:	f107 0318 	add.w	r3, r7, #24
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f7fe ff68 	bl	8007a84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008bb4:	69fb      	ldr	r3, [r7, #28]
 8008bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bb8:	e01f      	b.n	8008bfa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008bba:	4b2d      	ldr	r3, [pc, #180]	@ (8008c70 <UART_SetConfig+0xac0>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f003 0320 	and.w	r3, r3, #32
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d009      	beq.n	8008bda <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008bc6:	4b2a      	ldr	r3, [pc, #168]	@ (8008c70 <UART_SetConfig+0xac0>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	08db      	lsrs	r3, r3, #3
 8008bcc:	f003 0303 	and.w	r3, r3, #3
 8008bd0:	4a28      	ldr	r2, [pc, #160]	@ (8008c74 <UART_SetConfig+0xac4>)
 8008bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8008bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008bd8:	e00f      	b.n	8008bfa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008bda:	4b26      	ldr	r3, [pc, #152]	@ (8008c74 <UART_SetConfig+0xac4>)
 8008bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bde:	e00c      	b.n	8008bfa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008be0:	4b25      	ldr	r3, [pc, #148]	@ (8008c78 <UART_SetConfig+0xac8>)
 8008be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008be4:	e009      	b.n	8008bfa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008be6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bec:	e005      	b.n	8008bfa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008bf8:	bf00      	nop
    }

    if (pclk != 0U)
 8008bfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d021      	beq.n	8008c44 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c04:	4a1d      	ldr	r2, [pc, #116]	@ (8008c7c <UART_SetConfig+0xacc>)
 8008c06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c0e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	085b      	lsrs	r3, r3, #1
 8008c18:	441a      	add	r2, r3
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c22:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c26:	2b0f      	cmp	r3, #15
 8008c28:	d909      	bls.n	8008c3e <UART_SetConfig+0xa8e>
 8008c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c30:	d205      	bcs.n	8008c3e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c34:	b29a      	uxth	r2, r3
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	60da      	str	r2, [r3, #12]
 8008c3c:	e002      	b.n	8008c44 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	2201      	movs	r2, #1
 8008c48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	2200      	movs	r2, #0
 8008c58:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008c60:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3748      	adds	r7, #72	@ 0x48
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c6e:	bf00      	nop
 8008c70:	58024400 	.word	0x58024400
 8008c74:	03d09000 	.word	0x03d09000
 8008c78:	003d0900 	.word	0x003d0900
 8008c7c:	08009d34 	.word	0x08009d34

08008c80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b083      	sub	sp, #12
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c8c:	f003 0308 	and.w	r3, r3, #8
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d00a      	beq.n	8008caa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	430a      	orrs	r2, r1
 8008ca8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cae:	f003 0301 	and.w	r3, r3, #1
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d00a      	beq.n	8008ccc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	430a      	orrs	r2, r1
 8008cca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cd0:	f003 0302 	and.w	r3, r3, #2
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d00a      	beq.n	8008cee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	430a      	orrs	r2, r1
 8008cec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cf2:	f003 0304 	and.w	r3, r3, #4
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d00a      	beq.n	8008d10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	430a      	orrs	r2, r1
 8008d0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d14:	f003 0310 	and.w	r3, r3, #16
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d00a      	beq.n	8008d32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	689b      	ldr	r3, [r3, #8]
 8008d22:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	430a      	orrs	r2, r1
 8008d30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d36:	f003 0320 	and.w	r3, r3, #32
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d00a      	beq.n	8008d54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	689b      	ldr	r3, [r3, #8]
 8008d44:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	430a      	orrs	r2, r1
 8008d52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d01a      	beq.n	8008d96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	430a      	orrs	r2, r1
 8008d74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d7e:	d10a      	bne.n	8008d96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	430a      	orrs	r2, r1
 8008d94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d00a      	beq.n	8008db8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	430a      	orrs	r2, r1
 8008db6:	605a      	str	r2, [r3, #4]
  }
}
 8008db8:	bf00      	nop
 8008dba:	370c      	adds	r7, #12
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr

08008dc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b098      	sub	sp, #96	@ 0x60
 8008dc8:	af02      	add	r7, sp, #8
 8008dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008dd4:	f7f8 fd04 	bl	80017e0 <HAL_GetTick>
 8008dd8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f003 0308 	and.w	r3, r3, #8
 8008de4:	2b08      	cmp	r3, #8
 8008de6:	d12f      	bne.n	8008e48 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008de8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008dec:	9300      	str	r3, [sp, #0]
 8008dee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008df0:	2200      	movs	r2, #0
 8008df2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 f88e 	bl	8008f18 <UART_WaitOnFlagUntilTimeout>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d022      	beq.n	8008e48 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e0a:	e853 3f00 	ldrex	r3, [r3]
 8008e0e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008e10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e16:	653b      	str	r3, [r7, #80]	@ 0x50
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e20:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e22:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008e26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008e28:	e841 2300 	strex	r3, r2, [r1]
 8008e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008e2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d1e6      	bne.n	8008e02 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2220      	movs	r2, #32
 8008e38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e44:	2303      	movs	r3, #3
 8008e46:	e063      	b.n	8008f10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f003 0304 	and.w	r3, r3, #4
 8008e52:	2b04      	cmp	r3, #4
 8008e54:	d149      	bne.n	8008eea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e56:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008e5a:	9300      	str	r3, [sp, #0]
 8008e5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e5e:	2200      	movs	r2, #0
 8008e60:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 f857 	bl	8008f18 <UART_WaitOnFlagUntilTimeout>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d03c      	beq.n	8008eea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e78:	e853 3f00 	ldrex	r3, [r3]
 8008e7c:	623b      	str	r3, [r7, #32]
   return(result);
 8008e7e:	6a3b      	ldr	r3, [r7, #32]
 8008e80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e90:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e96:	e841 2300 	strex	r3, r2, [r1]
 8008e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d1e6      	bne.n	8008e70 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	3308      	adds	r3, #8
 8008ea8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	e853 3f00 	ldrex	r3, [r3]
 8008eb0:	60fb      	str	r3, [r7, #12]
   return(result);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f023 0301 	bic.w	r3, r3, #1
 8008eb8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	3308      	adds	r3, #8
 8008ec0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ec2:	61fa      	str	r2, [r7, #28]
 8008ec4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec6:	69b9      	ldr	r1, [r7, #24]
 8008ec8:	69fa      	ldr	r2, [r7, #28]
 8008eca:	e841 2300 	strex	r3, r2, [r1]
 8008ece:	617b      	str	r3, [r7, #20]
   return(result);
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d1e5      	bne.n	8008ea2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2220      	movs	r2, #32
 8008eda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ee6:	2303      	movs	r3, #3
 8008ee8:	e012      	b.n	8008f10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2220      	movs	r2, #32
 8008eee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2220      	movs	r2, #32
 8008ef6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2200      	movs	r2, #0
 8008efe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2200      	movs	r2, #0
 8008f04:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008f0e:	2300      	movs	r3, #0
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3758      	adds	r7, #88	@ 0x58
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	603b      	str	r3, [r7, #0]
 8008f24:	4613      	mov	r3, r2
 8008f26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f28:	e04f      	b.n	8008fca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f2a:	69bb      	ldr	r3, [r7, #24]
 8008f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f30:	d04b      	beq.n	8008fca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f32:	f7f8 fc55 	bl	80017e0 <HAL_GetTick>
 8008f36:	4602      	mov	r2, r0
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	1ad3      	subs	r3, r2, r3
 8008f3c:	69ba      	ldr	r2, [r7, #24]
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d302      	bcc.n	8008f48 <UART_WaitOnFlagUntilTimeout+0x30>
 8008f42:	69bb      	ldr	r3, [r7, #24]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d101      	bne.n	8008f4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008f48:	2303      	movs	r3, #3
 8008f4a:	e04e      	b.n	8008fea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f003 0304 	and.w	r3, r3, #4
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d037      	beq.n	8008fca <UART_WaitOnFlagUntilTimeout+0xb2>
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	2b80      	cmp	r3, #128	@ 0x80
 8008f5e:	d034      	beq.n	8008fca <UART_WaitOnFlagUntilTimeout+0xb2>
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	2b40      	cmp	r3, #64	@ 0x40
 8008f64:	d031      	beq.n	8008fca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	69db      	ldr	r3, [r3, #28]
 8008f6c:	f003 0308 	and.w	r3, r3, #8
 8008f70:	2b08      	cmp	r3, #8
 8008f72:	d110      	bne.n	8008f96 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	2208      	movs	r2, #8
 8008f7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008f7c:	68f8      	ldr	r0, [r7, #12]
 8008f7e:	f000 f839 	bl	8008ff4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2208      	movs	r2, #8
 8008f86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	e029      	b.n	8008fea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	69db      	ldr	r3, [r3, #28]
 8008f9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008fa0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008fa4:	d111      	bne.n	8008fca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008fae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008fb0:	68f8      	ldr	r0, [r7, #12]
 8008fb2:	f000 f81f 	bl	8008ff4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2220      	movs	r2, #32
 8008fba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008fc6:	2303      	movs	r3, #3
 8008fc8:	e00f      	b.n	8008fea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	69da      	ldr	r2, [r3, #28]
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	4013      	ands	r3, r2
 8008fd4:	68ba      	ldr	r2, [r7, #8]
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	bf0c      	ite	eq
 8008fda:	2301      	moveq	r3, #1
 8008fdc:	2300      	movne	r3, #0
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	79fb      	ldrb	r3, [r7, #7]
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d0a0      	beq.n	8008f2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008fe8:	2300      	movs	r3, #0
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3710      	adds	r7, #16
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}
	...

08008ff4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b095      	sub	sp, #84	@ 0x54
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009004:	e853 3f00 	ldrex	r3, [r3]
 8009008:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800900a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800900c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009010:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	461a      	mov	r2, r3
 8009018:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800901a:	643b      	str	r3, [r7, #64]	@ 0x40
 800901c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800901e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009020:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009022:	e841 2300 	strex	r3, r2, [r1]
 8009026:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800902a:	2b00      	cmp	r3, #0
 800902c:	d1e6      	bne.n	8008ffc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	3308      	adds	r3, #8
 8009034:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009036:	6a3b      	ldr	r3, [r7, #32]
 8009038:	e853 3f00 	ldrex	r3, [r3]
 800903c:	61fb      	str	r3, [r7, #28]
   return(result);
 800903e:	69fa      	ldr	r2, [r7, #28]
 8009040:	4b1e      	ldr	r3, [pc, #120]	@ (80090bc <UART_EndRxTransfer+0xc8>)
 8009042:	4013      	ands	r3, r2
 8009044:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	3308      	adds	r3, #8
 800904c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800904e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009050:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009052:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009054:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009056:	e841 2300 	strex	r3, r2, [r1]
 800905a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800905c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800905e:	2b00      	cmp	r3, #0
 8009060:	d1e5      	bne.n	800902e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009066:	2b01      	cmp	r3, #1
 8009068:	d118      	bne.n	800909c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	e853 3f00 	ldrex	r3, [r3]
 8009076:	60bb      	str	r3, [r7, #8]
   return(result);
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	f023 0310 	bic.w	r3, r3, #16
 800907e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	461a      	mov	r2, r3
 8009086:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009088:	61bb      	str	r3, [r7, #24]
 800908a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908c:	6979      	ldr	r1, [r7, #20]
 800908e:	69ba      	ldr	r2, [r7, #24]
 8009090:	e841 2300 	strex	r3, r2, [r1]
 8009094:	613b      	str	r3, [r7, #16]
   return(result);
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d1e6      	bne.n	800906a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2220      	movs	r2, #32
 80090a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2200      	movs	r2, #0
 80090a8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80090b0:	bf00      	nop
 80090b2:	3754      	adds	r7, #84	@ 0x54
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr
 80090bc:	effffffe 	.word	0xeffffffe

080090c0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b085      	sub	sp, #20
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d101      	bne.n	80090d6 <HAL_UARTEx_DisableFifoMode+0x16>
 80090d2:	2302      	movs	r3, #2
 80090d4:	e027      	b.n	8009126 <HAL_UARTEx_DisableFifoMode+0x66>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2201      	movs	r2, #1
 80090da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2224      	movs	r2, #36	@ 0x24
 80090e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f022 0201 	bic.w	r2, r2, #1
 80090fc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009104:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2200      	movs	r2, #0
 800910a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	68fa      	ldr	r2, [r7, #12]
 8009112:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2220      	movs	r2, #32
 8009118:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2200      	movs	r2, #0
 8009120:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009124:	2300      	movs	r3, #0
}
 8009126:	4618      	mov	r0, r3
 8009128:	3714      	adds	r7, #20
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr

08009132 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009132:	b580      	push	{r7, lr}
 8009134:	b084      	sub	sp, #16
 8009136:	af00      	add	r7, sp, #0
 8009138:	6078      	str	r0, [r7, #4]
 800913a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009142:	2b01      	cmp	r3, #1
 8009144:	d101      	bne.n	800914a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009146:	2302      	movs	r3, #2
 8009148:	e02d      	b.n	80091a6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2201      	movs	r2, #1
 800914e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2224      	movs	r2, #36	@ 0x24
 8009156:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	681a      	ldr	r2, [r3, #0]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f022 0201 	bic.w	r2, r2, #1
 8009170:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	683a      	ldr	r2, [r7, #0]
 8009182:	430a      	orrs	r2, r1
 8009184:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 f850 	bl	800922c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	68fa      	ldr	r2, [r7, #12]
 8009192:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2220      	movs	r2, #32
 8009198:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2200      	movs	r2, #0
 80091a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80091a4:	2300      	movs	r3, #0
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3710      	adds	r7, #16
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}

080091ae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80091ae:	b580      	push	{r7, lr}
 80091b0:	b084      	sub	sp, #16
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
 80091b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d101      	bne.n	80091c6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80091c2:	2302      	movs	r3, #2
 80091c4:	e02d      	b.n	8009222 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2201      	movs	r2, #1
 80091ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2224      	movs	r2, #36	@ 0x24
 80091d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	681a      	ldr	r2, [r3, #0]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f022 0201 	bic.w	r2, r2, #1
 80091ec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	683a      	ldr	r2, [r7, #0]
 80091fe:	430a      	orrs	r2, r1
 8009200:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 f812 	bl	800922c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	68fa      	ldr	r2, [r7, #12]
 800920e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2220      	movs	r2, #32
 8009214:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2200      	movs	r2, #0
 800921c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009220:	2300      	movs	r3, #0
}
 8009222:	4618      	mov	r0, r3
 8009224:	3710      	adds	r7, #16
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
	...

0800922c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800922c:	b480      	push	{r7}
 800922e:	b085      	sub	sp, #20
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009238:	2b00      	cmp	r3, #0
 800923a:	d108      	bne.n	800924e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2201      	movs	r2, #1
 8009240:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2201      	movs	r2, #1
 8009248:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800924c:	e031      	b.n	80092b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800924e:	2310      	movs	r3, #16
 8009250:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009252:	2310      	movs	r3, #16
 8009254:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	689b      	ldr	r3, [r3, #8]
 800925c:	0e5b      	lsrs	r3, r3, #25
 800925e:	b2db      	uxtb	r3, r3
 8009260:	f003 0307 	and.w	r3, r3, #7
 8009264:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	0f5b      	lsrs	r3, r3, #29
 800926e:	b2db      	uxtb	r3, r3
 8009270:	f003 0307 	and.w	r3, r3, #7
 8009274:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009276:	7bbb      	ldrb	r3, [r7, #14]
 8009278:	7b3a      	ldrb	r2, [r7, #12]
 800927a:	4911      	ldr	r1, [pc, #68]	@ (80092c0 <UARTEx_SetNbDataToProcess+0x94>)
 800927c:	5c8a      	ldrb	r2, [r1, r2]
 800927e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009282:	7b3a      	ldrb	r2, [r7, #12]
 8009284:	490f      	ldr	r1, [pc, #60]	@ (80092c4 <UARTEx_SetNbDataToProcess+0x98>)
 8009286:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009288:	fb93 f3f2 	sdiv	r3, r3, r2
 800928c:	b29a      	uxth	r2, r3
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009294:	7bfb      	ldrb	r3, [r7, #15]
 8009296:	7b7a      	ldrb	r2, [r7, #13]
 8009298:	4909      	ldr	r1, [pc, #36]	@ (80092c0 <UARTEx_SetNbDataToProcess+0x94>)
 800929a:	5c8a      	ldrb	r2, [r1, r2]
 800929c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80092a0:	7b7a      	ldrb	r2, [r7, #13]
 80092a2:	4908      	ldr	r1, [pc, #32]	@ (80092c4 <UARTEx_SetNbDataToProcess+0x98>)
 80092a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80092a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80092aa:	b29a      	uxth	r2, r3
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80092b2:	bf00      	nop
 80092b4:	3714      	adds	r7, #20
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr
 80092be:	bf00      	nop
 80092c0:	08009d4c 	.word	0x08009d4c
 80092c4:	08009d54 	.word	0x08009d54

080092c8 <siprintf>:
 80092c8:	b40e      	push	{r1, r2, r3}
 80092ca:	b500      	push	{lr}
 80092cc:	b09c      	sub	sp, #112	@ 0x70
 80092ce:	ab1d      	add	r3, sp, #116	@ 0x74
 80092d0:	9002      	str	r0, [sp, #8]
 80092d2:	9006      	str	r0, [sp, #24]
 80092d4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80092d8:	4809      	ldr	r0, [pc, #36]	@ (8009300 <siprintf+0x38>)
 80092da:	9107      	str	r1, [sp, #28]
 80092dc:	9104      	str	r1, [sp, #16]
 80092de:	4909      	ldr	r1, [pc, #36]	@ (8009304 <siprintf+0x3c>)
 80092e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80092e4:	9105      	str	r1, [sp, #20]
 80092e6:	6800      	ldr	r0, [r0, #0]
 80092e8:	9301      	str	r3, [sp, #4]
 80092ea:	a902      	add	r1, sp, #8
 80092ec:	f000 f994 	bl	8009618 <_svfiprintf_r>
 80092f0:	9b02      	ldr	r3, [sp, #8]
 80092f2:	2200      	movs	r2, #0
 80092f4:	701a      	strb	r2, [r3, #0]
 80092f6:	b01c      	add	sp, #112	@ 0x70
 80092f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80092fc:	b003      	add	sp, #12
 80092fe:	4770      	bx	lr
 8009300:	24000014 	.word	0x24000014
 8009304:	ffff0208 	.word	0xffff0208

08009308 <memset>:
 8009308:	4402      	add	r2, r0
 800930a:	4603      	mov	r3, r0
 800930c:	4293      	cmp	r3, r2
 800930e:	d100      	bne.n	8009312 <memset+0xa>
 8009310:	4770      	bx	lr
 8009312:	f803 1b01 	strb.w	r1, [r3], #1
 8009316:	e7f9      	b.n	800930c <memset+0x4>

08009318 <__errno>:
 8009318:	4b01      	ldr	r3, [pc, #4]	@ (8009320 <__errno+0x8>)
 800931a:	6818      	ldr	r0, [r3, #0]
 800931c:	4770      	bx	lr
 800931e:	bf00      	nop
 8009320:	24000014 	.word	0x24000014

08009324 <__libc_init_array>:
 8009324:	b570      	push	{r4, r5, r6, lr}
 8009326:	4d0d      	ldr	r5, [pc, #52]	@ (800935c <__libc_init_array+0x38>)
 8009328:	4c0d      	ldr	r4, [pc, #52]	@ (8009360 <__libc_init_array+0x3c>)
 800932a:	1b64      	subs	r4, r4, r5
 800932c:	10a4      	asrs	r4, r4, #2
 800932e:	2600      	movs	r6, #0
 8009330:	42a6      	cmp	r6, r4
 8009332:	d109      	bne.n	8009348 <__libc_init_array+0x24>
 8009334:	4d0b      	ldr	r5, [pc, #44]	@ (8009364 <__libc_init_array+0x40>)
 8009336:	4c0c      	ldr	r4, [pc, #48]	@ (8009368 <__libc_init_array+0x44>)
 8009338:	f000 fc66 	bl	8009c08 <_init>
 800933c:	1b64      	subs	r4, r4, r5
 800933e:	10a4      	asrs	r4, r4, #2
 8009340:	2600      	movs	r6, #0
 8009342:	42a6      	cmp	r6, r4
 8009344:	d105      	bne.n	8009352 <__libc_init_array+0x2e>
 8009346:	bd70      	pop	{r4, r5, r6, pc}
 8009348:	f855 3b04 	ldr.w	r3, [r5], #4
 800934c:	4798      	blx	r3
 800934e:	3601      	adds	r6, #1
 8009350:	e7ee      	b.n	8009330 <__libc_init_array+0xc>
 8009352:	f855 3b04 	ldr.w	r3, [r5], #4
 8009356:	4798      	blx	r3
 8009358:	3601      	adds	r6, #1
 800935a:	e7f2      	b.n	8009342 <__libc_init_array+0x1e>
 800935c:	08009d98 	.word	0x08009d98
 8009360:	08009d98 	.word	0x08009d98
 8009364:	08009d98 	.word	0x08009d98
 8009368:	08009d9c 	.word	0x08009d9c

0800936c <__retarget_lock_acquire_recursive>:
 800936c:	4770      	bx	lr

0800936e <__retarget_lock_release_recursive>:
 800936e:	4770      	bx	lr

08009370 <_free_r>:
 8009370:	b538      	push	{r3, r4, r5, lr}
 8009372:	4605      	mov	r5, r0
 8009374:	2900      	cmp	r1, #0
 8009376:	d041      	beq.n	80093fc <_free_r+0x8c>
 8009378:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800937c:	1f0c      	subs	r4, r1, #4
 800937e:	2b00      	cmp	r3, #0
 8009380:	bfb8      	it	lt
 8009382:	18e4      	addlt	r4, r4, r3
 8009384:	f000 f8e0 	bl	8009548 <__malloc_lock>
 8009388:	4a1d      	ldr	r2, [pc, #116]	@ (8009400 <_free_r+0x90>)
 800938a:	6813      	ldr	r3, [r2, #0]
 800938c:	b933      	cbnz	r3, 800939c <_free_r+0x2c>
 800938e:	6063      	str	r3, [r4, #4]
 8009390:	6014      	str	r4, [r2, #0]
 8009392:	4628      	mov	r0, r5
 8009394:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009398:	f000 b8dc 	b.w	8009554 <__malloc_unlock>
 800939c:	42a3      	cmp	r3, r4
 800939e:	d908      	bls.n	80093b2 <_free_r+0x42>
 80093a0:	6820      	ldr	r0, [r4, #0]
 80093a2:	1821      	adds	r1, r4, r0
 80093a4:	428b      	cmp	r3, r1
 80093a6:	bf01      	itttt	eq
 80093a8:	6819      	ldreq	r1, [r3, #0]
 80093aa:	685b      	ldreq	r3, [r3, #4]
 80093ac:	1809      	addeq	r1, r1, r0
 80093ae:	6021      	streq	r1, [r4, #0]
 80093b0:	e7ed      	b.n	800938e <_free_r+0x1e>
 80093b2:	461a      	mov	r2, r3
 80093b4:	685b      	ldr	r3, [r3, #4]
 80093b6:	b10b      	cbz	r3, 80093bc <_free_r+0x4c>
 80093b8:	42a3      	cmp	r3, r4
 80093ba:	d9fa      	bls.n	80093b2 <_free_r+0x42>
 80093bc:	6811      	ldr	r1, [r2, #0]
 80093be:	1850      	adds	r0, r2, r1
 80093c0:	42a0      	cmp	r0, r4
 80093c2:	d10b      	bne.n	80093dc <_free_r+0x6c>
 80093c4:	6820      	ldr	r0, [r4, #0]
 80093c6:	4401      	add	r1, r0
 80093c8:	1850      	adds	r0, r2, r1
 80093ca:	4283      	cmp	r3, r0
 80093cc:	6011      	str	r1, [r2, #0]
 80093ce:	d1e0      	bne.n	8009392 <_free_r+0x22>
 80093d0:	6818      	ldr	r0, [r3, #0]
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	6053      	str	r3, [r2, #4]
 80093d6:	4408      	add	r0, r1
 80093d8:	6010      	str	r0, [r2, #0]
 80093da:	e7da      	b.n	8009392 <_free_r+0x22>
 80093dc:	d902      	bls.n	80093e4 <_free_r+0x74>
 80093de:	230c      	movs	r3, #12
 80093e0:	602b      	str	r3, [r5, #0]
 80093e2:	e7d6      	b.n	8009392 <_free_r+0x22>
 80093e4:	6820      	ldr	r0, [r4, #0]
 80093e6:	1821      	adds	r1, r4, r0
 80093e8:	428b      	cmp	r3, r1
 80093ea:	bf04      	itt	eq
 80093ec:	6819      	ldreq	r1, [r3, #0]
 80093ee:	685b      	ldreq	r3, [r3, #4]
 80093f0:	6063      	str	r3, [r4, #4]
 80093f2:	bf04      	itt	eq
 80093f4:	1809      	addeq	r1, r1, r0
 80093f6:	6021      	streq	r1, [r4, #0]
 80093f8:	6054      	str	r4, [r2, #4]
 80093fa:	e7ca      	b.n	8009392 <_free_r+0x22>
 80093fc:	bd38      	pop	{r3, r4, r5, pc}
 80093fe:	bf00      	nop
 8009400:	240003dc 	.word	0x240003dc

08009404 <sbrk_aligned>:
 8009404:	b570      	push	{r4, r5, r6, lr}
 8009406:	4e0f      	ldr	r6, [pc, #60]	@ (8009444 <sbrk_aligned+0x40>)
 8009408:	460c      	mov	r4, r1
 800940a:	6831      	ldr	r1, [r6, #0]
 800940c:	4605      	mov	r5, r0
 800940e:	b911      	cbnz	r1, 8009416 <sbrk_aligned+0x12>
 8009410:	f000 fba6 	bl	8009b60 <_sbrk_r>
 8009414:	6030      	str	r0, [r6, #0]
 8009416:	4621      	mov	r1, r4
 8009418:	4628      	mov	r0, r5
 800941a:	f000 fba1 	bl	8009b60 <_sbrk_r>
 800941e:	1c43      	adds	r3, r0, #1
 8009420:	d103      	bne.n	800942a <sbrk_aligned+0x26>
 8009422:	f04f 34ff 	mov.w	r4, #4294967295
 8009426:	4620      	mov	r0, r4
 8009428:	bd70      	pop	{r4, r5, r6, pc}
 800942a:	1cc4      	adds	r4, r0, #3
 800942c:	f024 0403 	bic.w	r4, r4, #3
 8009430:	42a0      	cmp	r0, r4
 8009432:	d0f8      	beq.n	8009426 <sbrk_aligned+0x22>
 8009434:	1a21      	subs	r1, r4, r0
 8009436:	4628      	mov	r0, r5
 8009438:	f000 fb92 	bl	8009b60 <_sbrk_r>
 800943c:	3001      	adds	r0, #1
 800943e:	d1f2      	bne.n	8009426 <sbrk_aligned+0x22>
 8009440:	e7ef      	b.n	8009422 <sbrk_aligned+0x1e>
 8009442:	bf00      	nop
 8009444:	240003d8 	.word	0x240003d8

08009448 <_malloc_r>:
 8009448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800944c:	1ccd      	adds	r5, r1, #3
 800944e:	f025 0503 	bic.w	r5, r5, #3
 8009452:	3508      	adds	r5, #8
 8009454:	2d0c      	cmp	r5, #12
 8009456:	bf38      	it	cc
 8009458:	250c      	movcc	r5, #12
 800945a:	2d00      	cmp	r5, #0
 800945c:	4606      	mov	r6, r0
 800945e:	db01      	blt.n	8009464 <_malloc_r+0x1c>
 8009460:	42a9      	cmp	r1, r5
 8009462:	d904      	bls.n	800946e <_malloc_r+0x26>
 8009464:	230c      	movs	r3, #12
 8009466:	6033      	str	r3, [r6, #0]
 8009468:	2000      	movs	r0, #0
 800946a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800946e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009544 <_malloc_r+0xfc>
 8009472:	f000 f869 	bl	8009548 <__malloc_lock>
 8009476:	f8d8 3000 	ldr.w	r3, [r8]
 800947a:	461c      	mov	r4, r3
 800947c:	bb44      	cbnz	r4, 80094d0 <_malloc_r+0x88>
 800947e:	4629      	mov	r1, r5
 8009480:	4630      	mov	r0, r6
 8009482:	f7ff ffbf 	bl	8009404 <sbrk_aligned>
 8009486:	1c43      	adds	r3, r0, #1
 8009488:	4604      	mov	r4, r0
 800948a:	d158      	bne.n	800953e <_malloc_r+0xf6>
 800948c:	f8d8 4000 	ldr.w	r4, [r8]
 8009490:	4627      	mov	r7, r4
 8009492:	2f00      	cmp	r7, #0
 8009494:	d143      	bne.n	800951e <_malloc_r+0xd6>
 8009496:	2c00      	cmp	r4, #0
 8009498:	d04b      	beq.n	8009532 <_malloc_r+0xea>
 800949a:	6823      	ldr	r3, [r4, #0]
 800949c:	4639      	mov	r1, r7
 800949e:	4630      	mov	r0, r6
 80094a0:	eb04 0903 	add.w	r9, r4, r3
 80094a4:	f000 fb5c 	bl	8009b60 <_sbrk_r>
 80094a8:	4581      	cmp	r9, r0
 80094aa:	d142      	bne.n	8009532 <_malloc_r+0xea>
 80094ac:	6821      	ldr	r1, [r4, #0]
 80094ae:	1a6d      	subs	r5, r5, r1
 80094b0:	4629      	mov	r1, r5
 80094b2:	4630      	mov	r0, r6
 80094b4:	f7ff ffa6 	bl	8009404 <sbrk_aligned>
 80094b8:	3001      	adds	r0, #1
 80094ba:	d03a      	beq.n	8009532 <_malloc_r+0xea>
 80094bc:	6823      	ldr	r3, [r4, #0]
 80094be:	442b      	add	r3, r5
 80094c0:	6023      	str	r3, [r4, #0]
 80094c2:	f8d8 3000 	ldr.w	r3, [r8]
 80094c6:	685a      	ldr	r2, [r3, #4]
 80094c8:	bb62      	cbnz	r2, 8009524 <_malloc_r+0xdc>
 80094ca:	f8c8 7000 	str.w	r7, [r8]
 80094ce:	e00f      	b.n	80094f0 <_malloc_r+0xa8>
 80094d0:	6822      	ldr	r2, [r4, #0]
 80094d2:	1b52      	subs	r2, r2, r5
 80094d4:	d420      	bmi.n	8009518 <_malloc_r+0xd0>
 80094d6:	2a0b      	cmp	r2, #11
 80094d8:	d917      	bls.n	800950a <_malloc_r+0xc2>
 80094da:	1961      	adds	r1, r4, r5
 80094dc:	42a3      	cmp	r3, r4
 80094de:	6025      	str	r5, [r4, #0]
 80094e0:	bf18      	it	ne
 80094e2:	6059      	strne	r1, [r3, #4]
 80094e4:	6863      	ldr	r3, [r4, #4]
 80094e6:	bf08      	it	eq
 80094e8:	f8c8 1000 	streq.w	r1, [r8]
 80094ec:	5162      	str	r2, [r4, r5]
 80094ee:	604b      	str	r3, [r1, #4]
 80094f0:	4630      	mov	r0, r6
 80094f2:	f000 f82f 	bl	8009554 <__malloc_unlock>
 80094f6:	f104 000b 	add.w	r0, r4, #11
 80094fa:	1d23      	adds	r3, r4, #4
 80094fc:	f020 0007 	bic.w	r0, r0, #7
 8009500:	1ac2      	subs	r2, r0, r3
 8009502:	bf1c      	itt	ne
 8009504:	1a1b      	subne	r3, r3, r0
 8009506:	50a3      	strne	r3, [r4, r2]
 8009508:	e7af      	b.n	800946a <_malloc_r+0x22>
 800950a:	6862      	ldr	r2, [r4, #4]
 800950c:	42a3      	cmp	r3, r4
 800950e:	bf0c      	ite	eq
 8009510:	f8c8 2000 	streq.w	r2, [r8]
 8009514:	605a      	strne	r2, [r3, #4]
 8009516:	e7eb      	b.n	80094f0 <_malloc_r+0xa8>
 8009518:	4623      	mov	r3, r4
 800951a:	6864      	ldr	r4, [r4, #4]
 800951c:	e7ae      	b.n	800947c <_malloc_r+0x34>
 800951e:	463c      	mov	r4, r7
 8009520:	687f      	ldr	r7, [r7, #4]
 8009522:	e7b6      	b.n	8009492 <_malloc_r+0x4a>
 8009524:	461a      	mov	r2, r3
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	42a3      	cmp	r3, r4
 800952a:	d1fb      	bne.n	8009524 <_malloc_r+0xdc>
 800952c:	2300      	movs	r3, #0
 800952e:	6053      	str	r3, [r2, #4]
 8009530:	e7de      	b.n	80094f0 <_malloc_r+0xa8>
 8009532:	230c      	movs	r3, #12
 8009534:	6033      	str	r3, [r6, #0]
 8009536:	4630      	mov	r0, r6
 8009538:	f000 f80c 	bl	8009554 <__malloc_unlock>
 800953c:	e794      	b.n	8009468 <_malloc_r+0x20>
 800953e:	6005      	str	r5, [r0, #0]
 8009540:	e7d6      	b.n	80094f0 <_malloc_r+0xa8>
 8009542:	bf00      	nop
 8009544:	240003dc 	.word	0x240003dc

08009548 <__malloc_lock>:
 8009548:	4801      	ldr	r0, [pc, #4]	@ (8009550 <__malloc_lock+0x8>)
 800954a:	f7ff bf0f 	b.w	800936c <__retarget_lock_acquire_recursive>
 800954e:	bf00      	nop
 8009550:	240003d4 	.word	0x240003d4

08009554 <__malloc_unlock>:
 8009554:	4801      	ldr	r0, [pc, #4]	@ (800955c <__malloc_unlock+0x8>)
 8009556:	f7ff bf0a 	b.w	800936e <__retarget_lock_release_recursive>
 800955a:	bf00      	nop
 800955c:	240003d4 	.word	0x240003d4

08009560 <__ssputs_r>:
 8009560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009564:	688e      	ldr	r6, [r1, #8]
 8009566:	461f      	mov	r7, r3
 8009568:	42be      	cmp	r6, r7
 800956a:	680b      	ldr	r3, [r1, #0]
 800956c:	4682      	mov	sl, r0
 800956e:	460c      	mov	r4, r1
 8009570:	4690      	mov	r8, r2
 8009572:	d82d      	bhi.n	80095d0 <__ssputs_r+0x70>
 8009574:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009578:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800957c:	d026      	beq.n	80095cc <__ssputs_r+0x6c>
 800957e:	6965      	ldr	r5, [r4, #20]
 8009580:	6909      	ldr	r1, [r1, #16]
 8009582:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009586:	eba3 0901 	sub.w	r9, r3, r1
 800958a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800958e:	1c7b      	adds	r3, r7, #1
 8009590:	444b      	add	r3, r9
 8009592:	106d      	asrs	r5, r5, #1
 8009594:	429d      	cmp	r5, r3
 8009596:	bf38      	it	cc
 8009598:	461d      	movcc	r5, r3
 800959a:	0553      	lsls	r3, r2, #21
 800959c:	d527      	bpl.n	80095ee <__ssputs_r+0x8e>
 800959e:	4629      	mov	r1, r5
 80095a0:	f7ff ff52 	bl	8009448 <_malloc_r>
 80095a4:	4606      	mov	r6, r0
 80095a6:	b360      	cbz	r0, 8009602 <__ssputs_r+0xa2>
 80095a8:	6921      	ldr	r1, [r4, #16]
 80095aa:	464a      	mov	r2, r9
 80095ac:	f000 fae8 	bl	8009b80 <memcpy>
 80095b0:	89a3      	ldrh	r3, [r4, #12]
 80095b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80095b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095ba:	81a3      	strh	r3, [r4, #12]
 80095bc:	6126      	str	r6, [r4, #16]
 80095be:	6165      	str	r5, [r4, #20]
 80095c0:	444e      	add	r6, r9
 80095c2:	eba5 0509 	sub.w	r5, r5, r9
 80095c6:	6026      	str	r6, [r4, #0]
 80095c8:	60a5      	str	r5, [r4, #8]
 80095ca:	463e      	mov	r6, r7
 80095cc:	42be      	cmp	r6, r7
 80095ce:	d900      	bls.n	80095d2 <__ssputs_r+0x72>
 80095d0:	463e      	mov	r6, r7
 80095d2:	6820      	ldr	r0, [r4, #0]
 80095d4:	4632      	mov	r2, r6
 80095d6:	4641      	mov	r1, r8
 80095d8:	f000 faa8 	bl	8009b2c <memmove>
 80095dc:	68a3      	ldr	r3, [r4, #8]
 80095de:	1b9b      	subs	r3, r3, r6
 80095e0:	60a3      	str	r3, [r4, #8]
 80095e2:	6823      	ldr	r3, [r4, #0]
 80095e4:	4433      	add	r3, r6
 80095e6:	6023      	str	r3, [r4, #0]
 80095e8:	2000      	movs	r0, #0
 80095ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095ee:	462a      	mov	r2, r5
 80095f0:	f000 fad4 	bl	8009b9c <_realloc_r>
 80095f4:	4606      	mov	r6, r0
 80095f6:	2800      	cmp	r0, #0
 80095f8:	d1e0      	bne.n	80095bc <__ssputs_r+0x5c>
 80095fa:	6921      	ldr	r1, [r4, #16]
 80095fc:	4650      	mov	r0, sl
 80095fe:	f7ff feb7 	bl	8009370 <_free_r>
 8009602:	230c      	movs	r3, #12
 8009604:	f8ca 3000 	str.w	r3, [sl]
 8009608:	89a3      	ldrh	r3, [r4, #12]
 800960a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800960e:	81a3      	strh	r3, [r4, #12]
 8009610:	f04f 30ff 	mov.w	r0, #4294967295
 8009614:	e7e9      	b.n	80095ea <__ssputs_r+0x8a>
	...

08009618 <_svfiprintf_r>:
 8009618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800961c:	4698      	mov	r8, r3
 800961e:	898b      	ldrh	r3, [r1, #12]
 8009620:	061b      	lsls	r3, r3, #24
 8009622:	b09d      	sub	sp, #116	@ 0x74
 8009624:	4607      	mov	r7, r0
 8009626:	460d      	mov	r5, r1
 8009628:	4614      	mov	r4, r2
 800962a:	d510      	bpl.n	800964e <_svfiprintf_r+0x36>
 800962c:	690b      	ldr	r3, [r1, #16]
 800962e:	b973      	cbnz	r3, 800964e <_svfiprintf_r+0x36>
 8009630:	2140      	movs	r1, #64	@ 0x40
 8009632:	f7ff ff09 	bl	8009448 <_malloc_r>
 8009636:	6028      	str	r0, [r5, #0]
 8009638:	6128      	str	r0, [r5, #16]
 800963a:	b930      	cbnz	r0, 800964a <_svfiprintf_r+0x32>
 800963c:	230c      	movs	r3, #12
 800963e:	603b      	str	r3, [r7, #0]
 8009640:	f04f 30ff 	mov.w	r0, #4294967295
 8009644:	b01d      	add	sp, #116	@ 0x74
 8009646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800964a:	2340      	movs	r3, #64	@ 0x40
 800964c:	616b      	str	r3, [r5, #20]
 800964e:	2300      	movs	r3, #0
 8009650:	9309      	str	r3, [sp, #36]	@ 0x24
 8009652:	2320      	movs	r3, #32
 8009654:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009658:	f8cd 800c 	str.w	r8, [sp, #12]
 800965c:	2330      	movs	r3, #48	@ 0x30
 800965e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80097fc <_svfiprintf_r+0x1e4>
 8009662:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009666:	f04f 0901 	mov.w	r9, #1
 800966a:	4623      	mov	r3, r4
 800966c:	469a      	mov	sl, r3
 800966e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009672:	b10a      	cbz	r2, 8009678 <_svfiprintf_r+0x60>
 8009674:	2a25      	cmp	r2, #37	@ 0x25
 8009676:	d1f9      	bne.n	800966c <_svfiprintf_r+0x54>
 8009678:	ebba 0b04 	subs.w	fp, sl, r4
 800967c:	d00b      	beq.n	8009696 <_svfiprintf_r+0x7e>
 800967e:	465b      	mov	r3, fp
 8009680:	4622      	mov	r2, r4
 8009682:	4629      	mov	r1, r5
 8009684:	4638      	mov	r0, r7
 8009686:	f7ff ff6b 	bl	8009560 <__ssputs_r>
 800968a:	3001      	adds	r0, #1
 800968c:	f000 80a7 	beq.w	80097de <_svfiprintf_r+0x1c6>
 8009690:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009692:	445a      	add	r2, fp
 8009694:	9209      	str	r2, [sp, #36]	@ 0x24
 8009696:	f89a 3000 	ldrb.w	r3, [sl]
 800969a:	2b00      	cmp	r3, #0
 800969c:	f000 809f 	beq.w	80097de <_svfiprintf_r+0x1c6>
 80096a0:	2300      	movs	r3, #0
 80096a2:	f04f 32ff 	mov.w	r2, #4294967295
 80096a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096aa:	f10a 0a01 	add.w	sl, sl, #1
 80096ae:	9304      	str	r3, [sp, #16]
 80096b0:	9307      	str	r3, [sp, #28]
 80096b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80096b6:	931a      	str	r3, [sp, #104]	@ 0x68
 80096b8:	4654      	mov	r4, sl
 80096ba:	2205      	movs	r2, #5
 80096bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096c0:	484e      	ldr	r0, [pc, #312]	@ (80097fc <_svfiprintf_r+0x1e4>)
 80096c2:	f7f6 fe15 	bl	80002f0 <memchr>
 80096c6:	9a04      	ldr	r2, [sp, #16]
 80096c8:	b9d8      	cbnz	r0, 8009702 <_svfiprintf_r+0xea>
 80096ca:	06d0      	lsls	r0, r2, #27
 80096cc:	bf44      	itt	mi
 80096ce:	2320      	movmi	r3, #32
 80096d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80096d4:	0711      	lsls	r1, r2, #28
 80096d6:	bf44      	itt	mi
 80096d8:	232b      	movmi	r3, #43	@ 0x2b
 80096da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80096de:	f89a 3000 	ldrb.w	r3, [sl]
 80096e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80096e4:	d015      	beq.n	8009712 <_svfiprintf_r+0xfa>
 80096e6:	9a07      	ldr	r2, [sp, #28]
 80096e8:	4654      	mov	r4, sl
 80096ea:	2000      	movs	r0, #0
 80096ec:	f04f 0c0a 	mov.w	ip, #10
 80096f0:	4621      	mov	r1, r4
 80096f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096f6:	3b30      	subs	r3, #48	@ 0x30
 80096f8:	2b09      	cmp	r3, #9
 80096fa:	d94b      	bls.n	8009794 <_svfiprintf_r+0x17c>
 80096fc:	b1b0      	cbz	r0, 800972c <_svfiprintf_r+0x114>
 80096fe:	9207      	str	r2, [sp, #28]
 8009700:	e014      	b.n	800972c <_svfiprintf_r+0x114>
 8009702:	eba0 0308 	sub.w	r3, r0, r8
 8009706:	fa09 f303 	lsl.w	r3, r9, r3
 800970a:	4313      	orrs	r3, r2
 800970c:	9304      	str	r3, [sp, #16]
 800970e:	46a2      	mov	sl, r4
 8009710:	e7d2      	b.n	80096b8 <_svfiprintf_r+0xa0>
 8009712:	9b03      	ldr	r3, [sp, #12]
 8009714:	1d19      	adds	r1, r3, #4
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	9103      	str	r1, [sp, #12]
 800971a:	2b00      	cmp	r3, #0
 800971c:	bfbb      	ittet	lt
 800971e:	425b      	neglt	r3, r3
 8009720:	f042 0202 	orrlt.w	r2, r2, #2
 8009724:	9307      	strge	r3, [sp, #28]
 8009726:	9307      	strlt	r3, [sp, #28]
 8009728:	bfb8      	it	lt
 800972a:	9204      	strlt	r2, [sp, #16]
 800972c:	7823      	ldrb	r3, [r4, #0]
 800972e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009730:	d10a      	bne.n	8009748 <_svfiprintf_r+0x130>
 8009732:	7863      	ldrb	r3, [r4, #1]
 8009734:	2b2a      	cmp	r3, #42	@ 0x2a
 8009736:	d132      	bne.n	800979e <_svfiprintf_r+0x186>
 8009738:	9b03      	ldr	r3, [sp, #12]
 800973a:	1d1a      	adds	r2, r3, #4
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	9203      	str	r2, [sp, #12]
 8009740:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009744:	3402      	adds	r4, #2
 8009746:	9305      	str	r3, [sp, #20]
 8009748:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800980c <_svfiprintf_r+0x1f4>
 800974c:	7821      	ldrb	r1, [r4, #0]
 800974e:	2203      	movs	r2, #3
 8009750:	4650      	mov	r0, sl
 8009752:	f7f6 fdcd 	bl	80002f0 <memchr>
 8009756:	b138      	cbz	r0, 8009768 <_svfiprintf_r+0x150>
 8009758:	9b04      	ldr	r3, [sp, #16]
 800975a:	eba0 000a 	sub.w	r0, r0, sl
 800975e:	2240      	movs	r2, #64	@ 0x40
 8009760:	4082      	lsls	r2, r0
 8009762:	4313      	orrs	r3, r2
 8009764:	3401      	adds	r4, #1
 8009766:	9304      	str	r3, [sp, #16]
 8009768:	f814 1b01 	ldrb.w	r1, [r4], #1
 800976c:	4824      	ldr	r0, [pc, #144]	@ (8009800 <_svfiprintf_r+0x1e8>)
 800976e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009772:	2206      	movs	r2, #6
 8009774:	f7f6 fdbc 	bl	80002f0 <memchr>
 8009778:	2800      	cmp	r0, #0
 800977a:	d036      	beq.n	80097ea <_svfiprintf_r+0x1d2>
 800977c:	4b21      	ldr	r3, [pc, #132]	@ (8009804 <_svfiprintf_r+0x1ec>)
 800977e:	bb1b      	cbnz	r3, 80097c8 <_svfiprintf_r+0x1b0>
 8009780:	9b03      	ldr	r3, [sp, #12]
 8009782:	3307      	adds	r3, #7
 8009784:	f023 0307 	bic.w	r3, r3, #7
 8009788:	3308      	adds	r3, #8
 800978a:	9303      	str	r3, [sp, #12]
 800978c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800978e:	4433      	add	r3, r6
 8009790:	9309      	str	r3, [sp, #36]	@ 0x24
 8009792:	e76a      	b.n	800966a <_svfiprintf_r+0x52>
 8009794:	fb0c 3202 	mla	r2, ip, r2, r3
 8009798:	460c      	mov	r4, r1
 800979a:	2001      	movs	r0, #1
 800979c:	e7a8      	b.n	80096f0 <_svfiprintf_r+0xd8>
 800979e:	2300      	movs	r3, #0
 80097a0:	3401      	adds	r4, #1
 80097a2:	9305      	str	r3, [sp, #20]
 80097a4:	4619      	mov	r1, r3
 80097a6:	f04f 0c0a 	mov.w	ip, #10
 80097aa:	4620      	mov	r0, r4
 80097ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097b0:	3a30      	subs	r2, #48	@ 0x30
 80097b2:	2a09      	cmp	r2, #9
 80097b4:	d903      	bls.n	80097be <_svfiprintf_r+0x1a6>
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d0c6      	beq.n	8009748 <_svfiprintf_r+0x130>
 80097ba:	9105      	str	r1, [sp, #20]
 80097bc:	e7c4      	b.n	8009748 <_svfiprintf_r+0x130>
 80097be:	fb0c 2101 	mla	r1, ip, r1, r2
 80097c2:	4604      	mov	r4, r0
 80097c4:	2301      	movs	r3, #1
 80097c6:	e7f0      	b.n	80097aa <_svfiprintf_r+0x192>
 80097c8:	ab03      	add	r3, sp, #12
 80097ca:	9300      	str	r3, [sp, #0]
 80097cc:	462a      	mov	r2, r5
 80097ce:	4b0e      	ldr	r3, [pc, #56]	@ (8009808 <_svfiprintf_r+0x1f0>)
 80097d0:	a904      	add	r1, sp, #16
 80097d2:	4638      	mov	r0, r7
 80097d4:	f3af 8000 	nop.w
 80097d8:	1c42      	adds	r2, r0, #1
 80097da:	4606      	mov	r6, r0
 80097dc:	d1d6      	bne.n	800978c <_svfiprintf_r+0x174>
 80097de:	89ab      	ldrh	r3, [r5, #12]
 80097e0:	065b      	lsls	r3, r3, #25
 80097e2:	f53f af2d 	bmi.w	8009640 <_svfiprintf_r+0x28>
 80097e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80097e8:	e72c      	b.n	8009644 <_svfiprintf_r+0x2c>
 80097ea:	ab03      	add	r3, sp, #12
 80097ec:	9300      	str	r3, [sp, #0]
 80097ee:	462a      	mov	r2, r5
 80097f0:	4b05      	ldr	r3, [pc, #20]	@ (8009808 <_svfiprintf_r+0x1f0>)
 80097f2:	a904      	add	r1, sp, #16
 80097f4:	4638      	mov	r0, r7
 80097f6:	f000 f879 	bl	80098ec <_printf_i>
 80097fa:	e7ed      	b.n	80097d8 <_svfiprintf_r+0x1c0>
 80097fc:	08009d5c 	.word	0x08009d5c
 8009800:	08009d66 	.word	0x08009d66
 8009804:	00000000 	.word	0x00000000
 8009808:	08009561 	.word	0x08009561
 800980c:	08009d62 	.word	0x08009d62

08009810 <_printf_common>:
 8009810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009814:	4616      	mov	r6, r2
 8009816:	4698      	mov	r8, r3
 8009818:	688a      	ldr	r2, [r1, #8]
 800981a:	690b      	ldr	r3, [r1, #16]
 800981c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009820:	4293      	cmp	r3, r2
 8009822:	bfb8      	it	lt
 8009824:	4613      	movlt	r3, r2
 8009826:	6033      	str	r3, [r6, #0]
 8009828:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800982c:	4607      	mov	r7, r0
 800982e:	460c      	mov	r4, r1
 8009830:	b10a      	cbz	r2, 8009836 <_printf_common+0x26>
 8009832:	3301      	adds	r3, #1
 8009834:	6033      	str	r3, [r6, #0]
 8009836:	6823      	ldr	r3, [r4, #0]
 8009838:	0699      	lsls	r1, r3, #26
 800983a:	bf42      	ittt	mi
 800983c:	6833      	ldrmi	r3, [r6, #0]
 800983e:	3302      	addmi	r3, #2
 8009840:	6033      	strmi	r3, [r6, #0]
 8009842:	6825      	ldr	r5, [r4, #0]
 8009844:	f015 0506 	ands.w	r5, r5, #6
 8009848:	d106      	bne.n	8009858 <_printf_common+0x48>
 800984a:	f104 0a19 	add.w	sl, r4, #25
 800984e:	68e3      	ldr	r3, [r4, #12]
 8009850:	6832      	ldr	r2, [r6, #0]
 8009852:	1a9b      	subs	r3, r3, r2
 8009854:	42ab      	cmp	r3, r5
 8009856:	dc26      	bgt.n	80098a6 <_printf_common+0x96>
 8009858:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800985c:	6822      	ldr	r2, [r4, #0]
 800985e:	3b00      	subs	r3, #0
 8009860:	bf18      	it	ne
 8009862:	2301      	movne	r3, #1
 8009864:	0692      	lsls	r2, r2, #26
 8009866:	d42b      	bmi.n	80098c0 <_printf_common+0xb0>
 8009868:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800986c:	4641      	mov	r1, r8
 800986e:	4638      	mov	r0, r7
 8009870:	47c8      	blx	r9
 8009872:	3001      	adds	r0, #1
 8009874:	d01e      	beq.n	80098b4 <_printf_common+0xa4>
 8009876:	6823      	ldr	r3, [r4, #0]
 8009878:	6922      	ldr	r2, [r4, #16]
 800987a:	f003 0306 	and.w	r3, r3, #6
 800987e:	2b04      	cmp	r3, #4
 8009880:	bf02      	ittt	eq
 8009882:	68e5      	ldreq	r5, [r4, #12]
 8009884:	6833      	ldreq	r3, [r6, #0]
 8009886:	1aed      	subeq	r5, r5, r3
 8009888:	68a3      	ldr	r3, [r4, #8]
 800988a:	bf0c      	ite	eq
 800988c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009890:	2500      	movne	r5, #0
 8009892:	4293      	cmp	r3, r2
 8009894:	bfc4      	itt	gt
 8009896:	1a9b      	subgt	r3, r3, r2
 8009898:	18ed      	addgt	r5, r5, r3
 800989a:	2600      	movs	r6, #0
 800989c:	341a      	adds	r4, #26
 800989e:	42b5      	cmp	r5, r6
 80098a0:	d11a      	bne.n	80098d8 <_printf_common+0xc8>
 80098a2:	2000      	movs	r0, #0
 80098a4:	e008      	b.n	80098b8 <_printf_common+0xa8>
 80098a6:	2301      	movs	r3, #1
 80098a8:	4652      	mov	r2, sl
 80098aa:	4641      	mov	r1, r8
 80098ac:	4638      	mov	r0, r7
 80098ae:	47c8      	blx	r9
 80098b0:	3001      	adds	r0, #1
 80098b2:	d103      	bne.n	80098bc <_printf_common+0xac>
 80098b4:	f04f 30ff 	mov.w	r0, #4294967295
 80098b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098bc:	3501      	adds	r5, #1
 80098be:	e7c6      	b.n	800984e <_printf_common+0x3e>
 80098c0:	18e1      	adds	r1, r4, r3
 80098c2:	1c5a      	adds	r2, r3, #1
 80098c4:	2030      	movs	r0, #48	@ 0x30
 80098c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80098ca:	4422      	add	r2, r4
 80098cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80098d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80098d4:	3302      	adds	r3, #2
 80098d6:	e7c7      	b.n	8009868 <_printf_common+0x58>
 80098d8:	2301      	movs	r3, #1
 80098da:	4622      	mov	r2, r4
 80098dc:	4641      	mov	r1, r8
 80098de:	4638      	mov	r0, r7
 80098e0:	47c8      	blx	r9
 80098e2:	3001      	adds	r0, #1
 80098e4:	d0e6      	beq.n	80098b4 <_printf_common+0xa4>
 80098e6:	3601      	adds	r6, #1
 80098e8:	e7d9      	b.n	800989e <_printf_common+0x8e>
	...

080098ec <_printf_i>:
 80098ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80098f0:	7e0f      	ldrb	r7, [r1, #24]
 80098f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80098f4:	2f78      	cmp	r7, #120	@ 0x78
 80098f6:	4691      	mov	r9, r2
 80098f8:	4680      	mov	r8, r0
 80098fa:	460c      	mov	r4, r1
 80098fc:	469a      	mov	sl, r3
 80098fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009902:	d807      	bhi.n	8009914 <_printf_i+0x28>
 8009904:	2f62      	cmp	r7, #98	@ 0x62
 8009906:	d80a      	bhi.n	800991e <_printf_i+0x32>
 8009908:	2f00      	cmp	r7, #0
 800990a:	f000 80d2 	beq.w	8009ab2 <_printf_i+0x1c6>
 800990e:	2f58      	cmp	r7, #88	@ 0x58
 8009910:	f000 80b9 	beq.w	8009a86 <_printf_i+0x19a>
 8009914:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009918:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800991c:	e03a      	b.n	8009994 <_printf_i+0xa8>
 800991e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009922:	2b15      	cmp	r3, #21
 8009924:	d8f6      	bhi.n	8009914 <_printf_i+0x28>
 8009926:	a101      	add	r1, pc, #4	@ (adr r1, 800992c <_printf_i+0x40>)
 8009928:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800992c:	08009985 	.word	0x08009985
 8009930:	08009999 	.word	0x08009999
 8009934:	08009915 	.word	0x08009915
 8009938:	08009915 	.word	0x08009915
 800993c:	08009915 	.word	0x08009915
 8009940:	08009915 	.word	0x08009915
 8009944:	08009999 	.word	0x08009999
 8009948:	08009915 	.word	0x08009915
 800994c:	08009915 	.word	0x08009915
 8009950:	08009915 	.word	0x08009915
 8009954:	08009915 	.word	0x08009915
 8009958:	08009a99 	.word	0x08009a99
 800995c:	080099c3 	.word	0x080099c3
 8009960:	08009a53 	.word	0x08009a53
 8009964:	08009915 	.word	0x08009915
 8009968:	08009915 	.word	0x08009915
 800996c:	08009abb 	.word	0x08009abb
 8009970:	08009915 	.word	0x08009915
 8009974:	080099c3 	.word	0x080099c3
 8009978:	08009915 	.word	0x08009915
 800997c:	08009915 	.word	0x08009915
 8009980:	08009a5b 	.word	0x08009a5b
 8009984:	6833      	ldr	r3, [r6, #0]
 8009986:	1d1a      	adds	r2, r3, #4
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	6032      	str	r2, [r6, #0]
 800998c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009990:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009994:	2301      	movs	r3, #1
 8009996:	e09d      	b.n	8009ad4 <_printf_i+0x1e8>
 8009998:	6833      	ldr	r3, [r6, #0]
 800999a:	6820      	ldr	r0, [r4, #0]
 800999c:	1d19      	adds	r1, r3, #4
 800999e:	6031      	str	r1, [r6, #0]
 80099a0:	0606      	lsls	r6, r0, #24
 80099a2:	d501      	bpl.n	80099a8 <_printf_i+0xbc>
 80099a4:	681d      	ldr	r5, [r3, #0]
 80099a6:	e003      	b.n	80099b0 <_printf_i+0xc4>
 80099a8:	0645      	lsls	r5, r0, #25
 80099aa:	d5fb      	bpl.n	80099a4 <_printf_i+0xb8>
 80099ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80099b0:	2d00      	cmp	r5, #0
 80099b2:	da03      	bge.n	80099bc <_printf_i+0xd0>
 80099b4:	232d      	movs	r3, #45	@ 0x2d
 80099b6:	426d      	negs	r5, r5
 80099b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80099bc:	4859      	ldr	r0, [pc, #356]	@ (8009b24 <_printf_i+0x238>)
 80099be:	230a      	movs	r3, #10
 80099c0:	e011      	b.n	80099e6 <_printf_i+0xfa>
 80099c2:	6821      	ldr	r1, [r4, #0]
 80099c4:	6833      	ldr	r3, [r6, #0]
 80099c6:	0608      	lsls	r0, r1, #24
 80099c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80099cc:	d402      	bmi.n	80099d4 <_printf_i+0xe8>
 80099ce:	0649      	lsls	r1, r1, #25
 80099d0:	bf48      	it	mi
 80099d2:	b2ad      	uxthmi	r5, r5
 80099d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80099d6:	4853      	ldr	r0, [pc, #332]	@ (8009b24 <_printf_i+0x238>)
 80099d8:	6033      	str	r3, [r6, #0]
 80099da:	bf14      	ite	ne
 80099dc:	230a      	movne	r3, #10
 80099de:	2308      	moveq	r3, #8
 80099e0:	2100      	movs	r1, #0
 80099e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80099e6:	6866      	ldr	r6, [r4, #4]
 80099e8:	60a6      	str	r6, [r4, #8]
 80099ea:	2e00      	cmp	r6, #0
 80099ec:	bfa2      	ittt	ge
 80099ee:	6821      	ldrge	r1, [r4, #0]
 80099f0:	f021 0104 	bicge.w	r1, r1, #4
 80099f4:	6021      	strge	r1, [r4, #0]
 80099f6:	b90d      	cbnz	r5, 80099fc <_printf_i+0x110>
 80099f8:	2e00      	cmp	r6, #0
 80099fa:	d04b      	beq.n	8009a94 <_printf_i+0x1a8>
 80099fc:	4616      	mov	r6, r2
 80099fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8009a02:	fb03 5711 	mls	r7, r3, r1, r5
 8009a06:	5dc7      	ldrb	r7, [r0, r7]
 8009a08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009a0c:	462f      	mov	r7, r5
 8009a0e:	42bb      	cmp	r3, r7
 8009a10:	460d      	mov	r5, r1
 8009a12:	d9f4      	bls.n	80099fe <_printf_i+0x112>
 8009a14:	2b08      	cmp	r3, #8
 8009a16:	d10b      	bne.n	8009a30 <_printf_i+0x144>
 8009a18:	6823      	ldr	r3, [r4, #0]
 8009a1a:	07df      	lsls	r7, r3, #31
 8009a1c:	d508      	bpl.n	8009a30 <_printf_i+0x144>
 8009a1e:	6923      	ldr	r3, [r4, #16]
 8009a20:	6861      	ldr	r1, [r4, #4]
 8009a22:	4299      	cmp	r1, r3
 8009a24:	bfde      	ittt	le
 8009a26:	2330      	movle	r3, #48	@ 0x30
 8009a28:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009a2c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009a30:	1b92      	subs	r2, r2, r6
 8009a32:	6122      	str	r2, [r4, #16]
 8009a34:	f8cd a000 	str.w	sl, [sp]
 8009a38:	464b      	mov	r3, r9
 8009a3a:	aa03      	add	r2, sp, #12
 8009a3c:	4621      	mov	r1, r4
 8009a3e:	4640      	mov	r0, r8
 8009a40:	f7ff fee6 	bl	8009810 <_printf_common>
 8009a44:	3001      	adds	r0, #1
 8009a46:	d14a      	bne.n	8009ade <_printf_i+0x1f2>
 8009a48:	f04f 30ff 	mov.w	r0, #4294967295
 8009a4c:	b004      	add	sp, #16
 8009a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a52:	6823      	ldr	r3, [r4, #0]
 8009a54:	f043 0320 	orr.w	r3, r3, #32
 8009a58:	6023      	str	r3, [r4, #0]
 8009a5a:	4833      	ldr	r0, [pc, #204]	@ (8009b28 <_printf_i+0x23c>)
 8009a5c:	2778      	movs	r7, #120	@ 0x78
 8009a5e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009a62:	6823      	ldr	r3, [r4, #0]
 8009a64:	6831      	ldr	r1, [r6, #0]
 8009a66:	061f      	lsls	r7, r3, #24
 8009a68:	f851 5b04 	ldr.w	r5, [r1], #4
 8009a6c:	d402      	bmi.n	8009a74 <_printf_i+0x188>
 8009a6e:	065f      	lsls	r7, r3, #25
 8009a70:	bf48      	it	mi
 8009a72:	b2ad      	uxthmi	r5, r5
 8009a74:	6031      	str	r1, [r6, #0]
 8009a76:	07d9      	lsls	r1, r3, #31
 8009a78:	bf44      	itt	mi
 8009a7a:	f043 0320 	orrmi.w	r3, r3, #32
 8009a7e:	6023      	strmi	r3, [r4, #0]
 8009a80:	b11d      	cbz	r5, 8009a8a <_printf_i+0x19e>
 8009a82:	2310      	movs	r3, #16
 8009a84:	e7ac      	b.n	80099e0 <_printf_i+0xf4>
 8009a86:	4827      	ldr	r0, [pc, #156]	@ (8009b24 <_printf_i+0x238>)
 8009a88:	e7e9      	b.n	8009a5e <_printf_i+0x172>
 8009a8a:	6823      	ldr	r3, [r4, #0]
 8009a8c:	f023 0320 	bic.w	r3, r3, #32
 8009a90:	6023      	str	r3, [r4, #0]
 8009a92:	e7f6      	b.n	8009a82 <_printf_i+0x196>
 8009a94:	4616      	mov	r6, r2
 8009a96:	e7bd      	b.n	8009a14 <_printf_i+0x128>
 8009a98:	6833      	ldr	r3, [r6, #0]
 8009a9a:	6825      	ldr	r5, [r4, #0]
 8009a9c:	6961      	ldr	r1, [r4, #20]
 8009a9e:	1d18      	adds	r0, r3, #4
 8009aa0:	6030      	str	r0, [r6, #0]
 8009aa2:	062e      	lsls	r6, r5, #24
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	d501      	bpl.n	8009aac <_printf_i+0x1c0>
 8009aa8:	6019      	str	r1, [r3, #0]
 8009aaa:	e002      	b.n	8009ab2 <_printf_i+0x1c6>
 8009aac:	0668      	lsls	r0, r5, #25
 8009aae:	d5fb      	bpl.n	8009aa8 <_printf_i+0x1bc>
 8009ab0:	8019      	strh	r1, [r3, #0]
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	6123      	str	r3, [r4, #16]
 8009ab6:	4616      	mov	r6, r2
 8009ab8:	e7bc      	b.n	8009a34 <_printf_i+0x148>
 8009aba:	6833      	ldr	r3, [r6, #0]
 8009abc:	1d1a      	adds	r2, r3, #4
 8009abe:	6032      	str	r2, [r6, #0]
 8009ac0:	681e      	ldr	r6, [r3, #0]
 8009ac2:	6862      	ldr	r2, [r4, #4]
 8009ac4:	2100      	movs	r1, #0
 8009ac6:	4630      	mov	r0, r6
 8009ac8:	f7f6 fc12 	bl	80002f0 <memchr>
 8009acc:	b108      	cbz	r0, 8009ad2 <_printf_i+0x1e6>
 8009ace:	1b80      	subs	r0, r0, r6
 8009ad0:	6060      	str	r0, [r4, #4]
 8009ad2:	6863      	ldr	r3, [r4, #4]
 8009ad4:	6123      	str	r3, [r4, #16]
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009adc:	e7aa      	b.n	8009a34 <_printf_i+0x148>
 8009ade:	6923      	ldr	r3, [r4, #16]
 8009ae0:	4632      	mov	r2, r6
 8009ae2:	4649      	mov	r1, r9
 8009ae4:	4640      	mov	r0, r8
 8009ae6:	47d0      	blx	sl
 8009ae8:	3001      	adds	r0, #1
 8009aea:	d0ad      	beq.n	8009a48 <_printf_i+0x15c>
 8009aec:	6823      	ldr	r3, [r4, #0]
 8009aee:	079b      	lsls	r3, r3, #30
 8009af0:	d413      	bmi.n	8009b1a <_printf_i+0x22e>
 8009af2:	68e0      	ldr	r0, [r4, #12]
 8009af4:	9b03      	ldr	r3, [sp, #12]
 8009af6:	4298      	cmp	r0, r3
 8009af8:	bfb8      	it	lt
 8009afa:	4618      	movlt	r0, r3
 8009afc:	e7a6      	b.n	8009a4c <_printf_i+0x160>
 8009afe:	2301      	movs	r3, #1
 8009b00:	4632      	mov	r2, r6
 8009b02:	4649      	mov	r1, r9
 8009b04:	4640      	mov	r0, r8
 8009b06:	47d0      	blx	sl
 8009b08:	3001      	adds	r0, #1
 8009b0a:	d09d      	beq.n	8009a48 <_printf_i+0x15c>
 8009b0c:	3501      	adds	r5, #1
 8009b0e:	68e3      	ldr	r3, [r4, #12]
 8009b10:	9903      	ldr	r1, [sp, #12]
 8009b12:	1a5b      	subs	r3, r3, r1
 8009b14:	42ab      	cmp	r3, r5
 8009b16:	dcf2      	bgt.n	8009afe <_printf_i+0x212>
 8009b18:	e7eb      	b.n	8009af2 <_printf_i+0x206>
 8009b1a:	2500      	movs	r5, #0
 8009b1c:	f104 0619 	add.w	r6, r4, #25
 8009b20:	e7f5      	b.n	8009b0e <_printf_i+0x222>
 8009b22:	bf00      	nop
 8009b24:	08009d6d 	.word	0x08009d6d
 8009b28:	08009d7e 	.word	0x08009d7e

08009b2c <memmove>:
 8009b2c:	4288      	cmp	r0, r1
 8009b2e:	b510      	push	{r4, lr}
 8009b30:	eb01 0402 	add.w	r4, r1, r2
 8009b34:	d902      	bls.n	8009b3c <memmove+0x10>
 8009b36:	4284      	cmp	r4, r0
 8009b38:	4623      	mov	r3, r4
 8009b3a:	d807      	bhi.n	8009b4c <memmove+0x20>
 8009b3c:	1e43      	subs	r3, r0, #1
 8009b3e:	42a1      	cmp	r1, r4
 8009b40:	d008      	beq.n	8009b54 <memmove+0x28>
 8009b42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b4a:	e7f8      	b.n	8009b3e <memmove+0x12>
 8009b4c:	4402      	add	r2, r0
 8009b4e:	4601      	mov	r1, r0
 8009b50:	428a      	cmp	r2, r1
 8009b52:	d100      	bne.n	8009b56 <memmove+0x2a>
 8009b54:	bd10      	pop	{r4, pc}
 8009b56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b5e:	e7f7      	b.n	8009b50 <memmove+0x24>

08009b60 <_sbrk_r>:
 8009b60:	b538      	push	{r3, r4, r5, lr}
 8009b62:	4d06      	ldr	r5, [pc, #24]	@ (8009b7c <_sbrk_r+0x1c>)
 8009b64:	2300      	movs	r3, #0
 8009b66:	4604      	mov	r4, r0
 8009b68:	4608      	mov	r0, r1
 8009b6a:	602b      	str	r3, [r5, #0]
 8009b6c:	f7f7 fcca 	bl	8001504 <_sbrk>
 8009b70:	1c43      	adds	r3, r0, #1
 8009b72:	d102      	bne.n	8009b7a <_sbrk_r+0x1a>
 8009b74:	682b      	ldr	r3, [r5, #0]
 8009b76:	b103      	cbz	r3, 8009b7a <_sbrk_r+0x1a>
 8009b78:	6023      	str	r3, [r4, #0]
 8009b7a:	bd38      	pop	{r3, r4, r5, pc}
 8009b7c:	240003d0 	.word	0x240003d0

08009b80 <memcpy>:
 8009b80:	440a      	add	r2, r1
 8009b82:	4291      	cmp	r1, r2
 8009b84:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b88:	d100      	bne.n	8009b8c <memcpy+0xc>
 8009b8a:	4770      	bx	lr
 8009b8c:	b510      	push	{r4, lr}
 8009b8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b96:	4291      	cmp	r1, r2
 8009b98:	d1f9      	bne.n	8009b8e <memcpy+0xe>
 8009b9a:	bd10      	pop	{r4, pc}

08009b9c <_realloc_r>:
 8009b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ba0:	4680      	mov	r8, r0
 8009ba2:	4615      	mov	r5, r2
 8009ba4:	460c      	mov	r4, r1
 8009ba6:	b921      	cbnz	r1, 8009bb2 <_realloc_r+0x16>
 8009ba8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bac:	4611      	mov	r1, r2
 8009bae:	f7ff bc4b 	b.w	8009448 <_malloc_r>
 8009bb2:	b92a      	cbnz	r2, 8009bc0 <_realloc_r+0x24>
 8009bb4:	f7ff fbdc 	bl	8009370 <_free_r>
 8009bb8:	2400      	movs	r4, #0
 8009bba:	4620      	mov	r0, r4
 8009bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bc0:	f000 f81a 	bl	8009bf8 <_malloc_usable_size_r>
 8009bc4:	4285      	cmp	r5, r0
 8009bc6:	4606      	mov	r6, r0
 8009bc8:	d802      	bhi.n	8009bd0 <_realloc_r+0x34>
 8009bca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009bce:	d8f4      	bhi.n	8009bba <_realloc_r+0x1e>
 8009bd0:	4629      	mov	r1, r5
 8009bd2:	4640      	mov	r0, r8
 8009bd4:	f7ff fc38 	bl	8009448 <_malloc_r>
 8009bd8:	4607      	mov	r7, r0
 8009bda:	2800      	cmp	r0, #0
 8009bdc:	d0ec      	beq.n	8009bb8 <_realloc_r+0x1c>
 8009bde:	42b5      	cmp	r5, r6
 8009be0:	462a      	mov	r2, r5
 8009be2:	4621      	mov	r1, r4
 8009be4:	bf28      	it	cs
 8009be6:	4632      	movcs	r2, r6
 8009be8:	f7ff ffca 	bl	8009b80 <memcpy>
 8009bec:	4621      	mov	r1, r4
 8009bee:	4640      	mov	r0, r8
 8009bf0:	f7ff fbbe 	bl	8009370 <_free_r>
 8009bf4:	463c      	mov	r4, r7
 8009bf6:	e7e0      	b.n	8009bba <_realloc_r+0x1e>

08009bf8 <_malloc_usable_size_r>:
 8009bf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bfc:	1f18      	subs	r0, r3, #4
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	bfbc      	itt	lt
 8009c02:	580b      	ldrlt	r3, [r1, r0]
 8009c04:	18c0      	addlt	r0, r0, r3
 8009c06:	4770      	bx	lr

08009c08 <_init>:
 8009c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c0a:	bf00      	nop
 8009c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c0e:	bc08      	pop	{r3}
 8009c10:	469e      	mov	lr, r3
 8009c12:	4770      	bx	lr

08009c14 <_fini>:
 8009c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c16:	bf00      	nop
 8009c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c1a:	bc08      	pop	{r3}
 8009c1c:	469e      	mov	lr, r3
 8009c1e:	4770      	bx	lr
