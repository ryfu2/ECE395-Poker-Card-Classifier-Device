
CardClassifier.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae54  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  0800b0f4  0800b0f4  0000c0f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b268  0800b268  0000c268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b270  0800b270  0000c270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b274  0800b274  0000c274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000068  24000000  0800b278  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000037c  24000068  0800b2e0  0000d068  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240003e4  0800b2e0  0000d3e4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d068  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001787f  00000000  00000000  0000d096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002d99  00000000  00000000  00024915  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000fa8  00000000  00000000  000276b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000c2b  00000000  00000000  00028658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037327  00000000  00000000  00029283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019334  00000000  00000000  000605aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001596ef  00000000  00000000  000798de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d2fcd  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004604  00000000  00000000  001d3010  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000073  00000000  00000000  001d7614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000068 	.word	0x24000068
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b0dc 	.word	0x0800b0dc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400006c 	.word	0x2400006c
 80002dc:	0800b0dc 	.word	0x0800b0dc

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <ov7670_write>:
//DCMI_HandleTypeDef *sp_hdcmi;
//DMA_HandleTypeDef  *sp_hdma_dcmi;
I2C_HandleTypeDef  *sp_hi2c;
uint32_t    s_destAddressForContiuousMode;
uint32_t ov7670_write(uint8_t regAddr, uint8_t data)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b0a0      	sub	sp, #128	@ 0x80
 8000684:	af02      	add	r7, sp, #8
 8000686:	4603      	mov	r3, r0
 8000688:	460a      	mov	r2, r1
 800068a:	71fb      	strb	r3, [r7, #7]
 800068c:	4613      	mov	r3, r2
 800068e:	71bb      	strb	r3, [r7, #6]
  uint16_t SLAVE_ADDR = 0x42;
 8000690:	2342      	movs	r3, #66	@ 0x42
 8000692:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
  HAL_StatusTypeDef ret;
  uint8_t buffer[2] = {regAddr, data};
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
 800069c:	79bb      	ldrb	r3, [r7, #6]
 800069e:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
  ret = HAL_I2C_Master_Transmit(sp_hi2c, 0x42, &buffer, 2, HAL_MAX_DELAY);
 80006a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000710 <ov7670_write+0x90>)
 80006a4:	6818      	ldr	r0, [r3, #0]
 80006a6:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80006aa:	f04f 33ff 	mov.w	r3, #4294967295
 80006ae:	9300      	str	r3, [sp, #0]
 80006b0:	2302      	movs	r3, #2
 80006b2:	2142      	movs	r1, #66	@ 0x42
 80006b4:	f005 fb06 	bl	8005cc4 <HAL_I2C_Master_Transmit>
 80006b8:	4603      	mov	r3, r0
 80006ba:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
  char temp[100];
  sprintf(temp, "Write Status: %d\r\n", ret);
 80006be:	f897 2075 	ldrb.w	r2, [r7, #117]	@ 0x75
 80006c2:	f107 030c 	add.w	r3, r7, #12
 80006c6:	4913      	ldr	r1, [pc, #76]	@ (8000714 <ov7670_write+0x94>)
 80006c8:	4618      	mov	r0, r3
 80006ca:	f00a f867 	bl	800a79c <siprintf>
  HAL_UART_Transmit(&huart4,temp,strlen(temp),10);
 80006ce:	f107 030c 	add.w	r3, r7, #12
 80006d2:	4618      	mov	r0, r3
 80006d4:	f7ff fe04 	bl	80002e0 <strlen>
 80006d8:	4603      	mov	r3, r0
 80006da:	b29a      	uxth	r2, r3
 80006dc:	f107 010c 	add.w	r1, r7, #12
 80006e0:	230a      	movs	r3, #10
 80006e2:	480d      	ldr	r0, [pc, #52]	@ (8000718 <ov7670_write+0x98>)
 80006e4:	f008 ff40 	bl	8009568 <HAL_UART_Transmit>
//  sprintf(temp, "Data: %x is now written into address: %x\r\n",data, regAddr);
  HAL_UART_Transmit(&huart4,temp,strlen(temp),10);
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff fdf7 	bl	80002e0 <strlen>
 80006f2:	4603      	mov	r3, r0
 80006f4:	b29a      	uxth	r2, r3
 80006f6:	f107 010c 	add.w	r1, r7, #12
 80006fa:	230a      	movs	r3, #10
 80006fc:	4806      	ldr	r0, [pc, #24]	@ (8000718 <ov7670_write+0x98>)
 80006fe:	f008 ff33 	bl	8009568 <HAL_UART_Transmit>
  return ret;
 8000702:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
}
 8000706:	4618      	mov	r0, r3
 8000708:	3778      	adds	r7, #120	@ 0x78
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	24000084 	.word	0x24000084
 8000714:	0800b0f4 	.word	0x0800b0f4
 8000718:	24000200 	.word	0x24000200

0800071c <ov7670_read>:

uint32_t ov7670_read(uint8_t regAddr, uint8_t *data)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b09e      	sub	sp, #120	@ 0x78
 8000720:	af02      	add	r7, sp, #8
 8000722:	4603      	mov	r3, r0
 8000724:	6039      	str	r1, [r7, #0]
 8000726:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef ret;
  uint16_t SLAVE_ADDR = 0x42;
 8000728:	2342      	movs	r3, #66	@ 0x42
 800072a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  ret = HAL_I2C_Master_Transmit(sp_hi2c, 0x43, &regAddr, 1, HAL_MAX_DELAY);
 800072e:	4b30      	ldr	r3, [pc, #192]	@ (80007f0 <ov7670_read+0xd4>)
 8000730:	6818      	ldr	r0, [r3, #0]
 8000732:	1dfa      	adds	r2, r7, #7
 8000734:	f04f 33ff 	mov.w	r3, #4294967295
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	2301      	movs	r3, #1
 800073c:	2143      	movs	r1, #67	@ 0x43
 800073e:	f005 fac1 	bl	8005cc4 <HAL_I2C_Master_Transmit>
 8000742:	4603      	mov	r3, r0
 8000744:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
  char buffer [100];
  sprintf(buffer, "Read_Transmit Status: %d\r\n", ret);
 8000748:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800074c:	f107 0308 	add.w	r3, r7, #8
 8000750:	4928      	ldr	r1, [pc, #160]	@ (80007f4 <ov7670_read+0xd8>)
 8000752:	4618      	mov	r0, r3
 8000754:	f00a f822 	bl	800a79c <siprintf>
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8000758:	f107 0308 	add.w	r3, r7, #8
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff fdbf 	bl	80002e0 <strlen>
 8000762:	4603      	mov	r3, r0
 8000764:	b29a      	uxth	r2, r3
 8000766:	f107 0108 	add.w	r1, r7, #8
 800076a:	230a      	movs	r3, #10
 800076c:	4822      	ldr	r0, [pc, #136]	@ (80007f8 <ov7670_read+0xdc>)
 800076e:	f008 fefb 	bl	8009568 <HAL_UART_Transmit>
  ret = HAL_I2C_Master_Receive(sp_hi2c, 0x43, data, 1, HAL_MAX_DELAY);
 8000772:	4b1f      	ldr	r3, [pc, #124]	@ (80007f0 <ov7670_read+0xd4>)
 8000774:	6818      	ldr	r0, [r3, #0]
 8000776:	f04f 33ff 	mov.w	r3, #4294967295
 800077a:	9300      	str	r3, [sp, #0]
 800077c:	2301      	movs	r3, #1
 800077e:	683a      	ldr	r2, [r7, #0]
 8000780:	2143      	movs	r1, #67	@ 0x43
 8000782:	f005 fbb7 	bl	8005ef4 <HAL_I2C_Master_Receive>
 8000786:	4603      	mov	r3, r0
 8000788:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
  sprintf(buffer, "Read_Receive Status: %d\r\n", ret);
 800078c:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8000790:	f107 0308 	add.w	r3, r7, #8
 8000794:	4919      	ldr	r1, [pc, #100]	@ (80007fc <ov7670_read+0xe0>)
 8000796:	4618      	mov	r0, r3
 8000798:	f00a f800 	bl	800a79c <siprintf>
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 800079c:	f107 0308 	add.w	r3, r7, #8
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff fd9d 	bl	80002e0 <strlen>
 80007a6:	4603      	mov	r3, r0
 80007a8:	b29a      	uxth	r2, r3
 80007aa:	f107 0108 	add.w	r1, r7, #8
 80007ae:	230a      	movs	r3, #10
 80007b0:	4811      	ldr	r0, [pc, #68]	@ (80007f8 <ov7670_read+0xdc>)
 80007b2:	f008 fed9 	bl	8009568 <HAL_UART_Transmit>
  sprintf(buffer, "Address: %x; Data: %x\r\n", regAddr, *data);
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	461a      	mov	r2, r3
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	f107 0008 	add.w	r0, r7, #8
 80007c2:	490f      	ldr	r1, [pc, #60]	@ (8000800 <ov7670_read+0xe4>)
 80007c4:	f009 ffea 	bl	800a79c <siprintf>
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 80007c8:	f107 0308 	add.w	r3, r7, #8
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff fd87 	bl	80002e0 <strlen>
 80007d2:	4603      	mov	r3, r0
 80007d4:	b29a      	uxth	r2, r3
 80007d6:	f107 0108 	add.w	r1, r7, #8
 80007da:	230a      	movs	r3, #10
 80007dc:	4806      	ldr	r0, [pc, #24]	@ (80007f8 <ov7670_read+0xdc>)
 80007de:	f008 fec3 	bl	8009568 <HAL_UART_Transmit>
  return ret;
 80007e2:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3770      	adds	r7, #112	@ 0x70
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	24000084 	.word	0x24000084
 80007f4:	0800b108 	.word	0x0800b108
 80007f8:	24000200 	.word	0x24000200
 80007fc:	0800b124 	.word	0x0800b124
 8000800:	0800b140 	.word	0x0800b140

08000804 <ov7670_init>:

uint32_t ov7670_init(I2C_HandleTypeDef *p_hi2c)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b09c      	sub	sp, #112	@ 0x70
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
//  sp_hdcmi     = p_hdcmi;
//  sp_hdma_dcmi = p_hdma_dcmi;
  sp_hi2c      = p_hi2c;
 800080c:	4a1e      	ldr	r2, [pc, #120]	@ (8000888 <ov7670_init+0x84>)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	6013      	str	r3, [r2, #0]
 // s_destAddressForContiuousMode = 0;

  HAL_GPIO_WritePin(CAM_RST_GPIO_Port, CAM_RST_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2120      	movs	r1, #32
 8000816:	481d      	ldr	r0, [pc, #116]	@ (800088c <ov7670_init+0x88>)
 8000818:	f005 f99e 	bl	8005b58 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800081c:	2064      	movs	r0, #100	@ 0x64
 800081e:	f001 f8d3 	bl	80019c8 <HAL_Delay>
  HAL_GPIO_WritePin(CAM_RST_GPIO_Port, CAM_RST_Pin, GPIO_PIN_SET);
 8000822:	2201      	movs	r2, #1
 8000824:	2120      	movs	r1, #32
 8000826:	4819      	ldr	r0, [pc, #100]	@ (800088c <ov7670_init+0x88>)
 8000828:	f005 f996 	bl	8005b58 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800082c:	2064      	movs	r0, #100	@ 0x64
 800082e:	f001 f8cb 	bl	80019c8 <HAL_Delay>
  char temp[100];
  sprintf(temp, "Initializing OV7670...\r\n");
 8000832:	f107 030c 	add.w	r3, r7, #12
 8000836:	4916      	ldr	r1, [pc, #88]	@ (8000890 <ov7670_init+0x8c>)
 8000838:	4618      	mov	r0, r3
 800083a:	f009 ffaf 	bl	800a79c <siprintf>
  ov7670_write(0x12, 0x80);  // RESET
 800083e:	2180      	movs	r1, #128	@ 0x80
 8000840:	2012      	movs	r0, #18
 8000842:	f7ff ff1d 	bl	8000680 <ov7670_write>
  HAL_Delay(100);
 8000846:	2064      	movs	r0, #100	@ 0x64
 8000848:	f001 f8be 	bl	80019c8 <HAL_Delay>
  HAL_UART_Transmit(&huart4,temp,strlen(temp),10);
 800084c:	f107 030c 	add.w	r3, r7, #12
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff fd45 	bl	80002e0 <strlen>
 8000856:	4603      	mov	r3, r0
 8000858:	b29a      	uxth	r2, r3
 800085a:	f107 010c 	add.w	r1, r7, #12
 800085e:	230a      	movs	r3, #10
 8000860:	480c      	ldr	r0, [pc, #48]	@ (8000894 <ov7670_init+0x90>)
 8000862:	f008 fe81 	bl	8009568 <HAL_UART_Transmit>
  HAL_Delay(100);
 8000866:	2064      	movs	r0, #100	@ 0x64
 8000868:	f001 f8ae 	bl	80019c8 <HAL_Delay>
  uint8_t buffer[4];
  ov7670_read(0x0F, buffer);
 800086c:	f107 0308 	add.w	r3, r7, #8
 8000870:	4619      	mov	r1, r3
 8000872:	200f      	movs	r0, #15
 8000874:	f7ff ff52 	bl	800071c <ov7670_read>
  HAL_Delay(100);
 8000878:	2064      	movs	r0, #100	@ 0x64
 800087a:	f001 f8a5 	bl	80019c8 <HAL_Delay>


  return 1;
 800087e:	2301      	movs	r3, #1
}
 8000880:	4618      	mov	r0, r3
 8000882:	3770      	adds	r7, #112	@ 0x70
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	24000084 	.word	0x24000084
 800088c:	58020800 	.word	0x58020800
 8000890:	0800b158 	.word	0x0800b158
 8000894:	24000200 	.word	0x24000200

08000898 <ov7670_stopCap>:

//DCMI Data Transfer
static uint32_t s_dstAddress;

uint32_t ov7670_stopCap()
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b09a      	sub	sp, #104	@ 0x68
 800089c:	af00      	add	r7, sp, #0
  char buffer [100];
  HAL_StatusTypeDef ret;
  ret = HAL_DCMI_Stop(sp_hdcmi);
 800089e:	4b08      	ldr	r3, [pc, #32]	@ (80008c0 <ov7670_stopCap+0x28>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4618      	mov	r0, r3
 80008a4:	f001 fb0c 	bl	8001ec0 <HAL_DCMI_Stop>
 80008a8:	4603      	mov	r3, r0
 80008aa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  s_dstAddress = 0;
 80008ae:	4b05      	ldr	r3, [pc, #20]	@ (80008c4 <ov7670_stopCap+0x2c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
  return 0;
 80008b4:	2300      	movs	r3, #0
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3768      	adds	r7, #104	@ 0x68
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	24000000 	.word	0x24000000
 80008c4:	24000088 	.word	0x24000088

080008c8 <ov7670_startCap>:

uint32_t ov7670_startCap(uint32_t destAddress)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b09c      	sub	sp, #112	@ 0x70
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret;
  ov7670_stopCap();
 80008d0:	f7ff ffe2 	bl	8000898 <ov7670_stopCap>
  /* note: continuous mode automatically invokes DCMI, but DMA needs to be invoked manually */
  s_dstAddress = destAddress;
 80008d4:	4a14      	ldr	r2, [pc, #80]	@ (8000928 <ov7670_startCap+0x60>)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6013      	str	r3, [r2, #0]
  ret = HAL_DCMI_Start_DMA(sp_hdcmi,1, destAddress, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT / 2); //mode 1 for single frame
 80008da:	4b14      	ldr	r3, [pc, #80]	@ (800092c <ov7670_startCap+0x64>)
 80008dc:	6818      	ldr	r0, [r3, #0]
 80008de:	f44f 5346 	mov.w	r3, #12672	@ 0x3180
 80008e2:	687a      	ldr	r2, [r7, #4]
 80008e4:	2101      	movs	r1, #1
 80008e6:	f001 fa29 	bl	8001d3c <HAL_DCMI_Start_DMA>
 80008ea:	4603      	mov	r3, r0
 80008ec:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  ov7670_stopCap();
 80008f0:	f7ff ffd2 	bl	8000898 <ov7670_stopCap>
  char buffer [100];
  sprintf(buffer, "Return code: %d\r\n", ret);
 80008f4:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 80008f8:	f107 0308 	add.w	r3, r7, #8
 80008fc:	490c      	ldr	r1, [pc, #48]	@ (8000930 <ov7670_startCap+0x68>)
 80008fe:	4618      	mov	r0, r3
 8000900:	f009 ff4c 	bl	800a79c <siprintf>
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8000904:	f107 0308 	add.w	r3, r7, #8
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff fce9 	bl	80002e0 <strlen>
 800090e:	4603      	mov	r3, r0
 8000910:	b29a      	uxth	r2, r3
 8000912:	f107 0108 	add.w	r1, r7, #8
 8000916:	230a      	movs	r3, #10
 8000918:	4806      	ldr	r0, [pc, #24]	@ (8000934 <ov7670_startCap+0x6c>)
 800091a:	f008 fe25 	bl	8009568 <HAL_UART_Transmit>
  return 0;
 800091e:	2300      	movs	r3, #0
}
 8000920:	4618      	mov	r0, r3
 8000922:	3770      	adds	r7, #112	@ 0x70
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	24000088 	.word	0x24000088
 800092c:	24000000 	.word	0x24000000
 8000930:	0800b174 	.word	0x0800b174
 8000934:	24000200 	.word	0x24000200

08000938 <HAL_DCMI_FrameEventCallback>:

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  if(s_dstAddress != 0) {
 8000940:	4b09      	ldr	r3, [pc, #36]	@ (8000968 <HAL_DCMI_FrameEventCallback+0x30>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d00b      	beq.n	8000960 <HAL_DCMI_FrameEventCallback+0x28>
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, s_dstAddress, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT / 2);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	3328      	adds	r3, #40	@ 0x28
 8000952:	4619      	mov	r1, r3
 8000954:	4b04      	ldr	r3, [pc, #16]	@ (8000968 <HAL_DCMI_FrameEventCallback+0x30>)
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	f44f 5346 	mov.w	r3, #12672	@ 0x3180
 800095c:	f001 ffbc 	bl	80028d8 <HAL_DMA_Start_IT>
  }
}
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	24000088 	.word	0x24000088

0800096c <lcd_send_cmd>:
#include "lcd.h"
#include "main.h"
I2C_HandleTypeDef  *lcd_sp_hi2c;
uint16_t SLAVE_ADDRESS_LCD = 0x4E;
void lcd_send_cmd (char cmd)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af02      	add	r7, sp, #8
 8000972:	4603      	mov	r3, r0
 8000974:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	f023 030f 	bic.w	r3, r3, #15
 800097c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	011b      	lsls	r3, r3, #4
 8000982:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000984:	7bfb      	ldrb	r3, [r7, #15]
 8000986:	f043 030c 	orr.w	r3, r3, #12
 800098a:	b2db      	uxtb	r3, r3
 800098c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800098e:	7bfb      	ldrb	r3, [r7, #15]
 8000990:	f043 0308 	orr.w	r3, r3, #8
 8000994:	b2db      	uxtb	r3, r3
 8000996:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000998:	7bbb      	ldrb	r3, [r7, #14]
 800099a:	f043 030c 	orr.w	r3, r3, #12
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80009a2:	7bbb      	ldrb	r3, [r7, #14]
 80009a4:	f043 0308 	orr.w	r3, r3, #8
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	72fb      	strb	r3, [r7, #11]
	uint16_t ret = HAL_I2C_Master_Transmit (lcd_sp_hi2c, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80009ac:	4b08      	ldr	r3, [pc, #32]	@ (80009d0 <lcd_send_cmd+0x64>)
 80009ae:	6818      	ldr	r0, [r3, #0]
 80009b0:	4b08      	ldr	r3, [pc, #32]	@ (80009d4 <lcd_send_cmd+0x68>)
 80009b2:	8819      	ldrh	r1, [r3, #0]
 80009b4:	f107 0208 	add.w	r2, r7, #8
 80009b8:	2364      	movs	r3, #100	@ 0x64
 80009ba:	9300      	str	r3, [sp, #0]
 80009bc:	2304      	movs	r3, #4
 80009be:	f005 f981 	bl	8005cc4 <HAL_I2C_Master_Transmit>
 80009c2:	4603      	mov	r3, r0
 80009c4:	81bb      	strh	r3, [r7, #12]
}
 80009c6:	bf00      	nop
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	2400008c 	.word	0x2400008c
 80009d4:	24000004 	.word	0x24000004

080009d8 <lcd_send_data>:

void lcd_send_data (char data)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af02      	add	r7, sp, #8
 80009de:	4603      	mov	r3, r0
 80009e0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	f023 030f 	bic.w	r3, r3, #15
 80009e8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	011b      	lsls	r3, r3, #4
 80009ee:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 80009f0:	7bfb      	ldrb	r3, [r7, #15]
 80009f2:	f043 030d 	orr.w	r3, r3, #13
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 80009fa:	7bfb      	ldrb	r3, [r7, #15]
 80009fc:	f043 0309 	orr.w	r3, r3, #9
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8000a04:	7bbb      	ldrb	r3, [r7, #14]
 8000a06:	f043 030d 	orr.w	r3, r3, #13
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8000a0e:	7bbb      	ldrb	r3, [r7, #14]
 8000a10:	f043 0309 	orr.w	r3, r3, #9
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (lcd_sp_hi2c, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000a18:	4b07      	ldr	r3, [pc, #28]	@ (8000a38 <lcd_send_data+0x60>)
 8000a1a:	6818      	ldr	r0, [r3, #0]
 8000a1c:	4b07      	ldr	r3, [pc, #28]	@ (8000a3c <lcd_send_data+0x64>)
 8000a1e:	8819      	ldrh	r1, [r3, #0]
 8000a20:	f107 0208 	add.w	r2, r7, #8
 8000a24:	2364      	movs	r3, #100	@ 0x64
 8000a26:	9300      	str	r3, [sp, #0]
 8000a28:	2304      	movs	r3, #4
 8000a2a:	f005 f94b 	bl	8005cc4 <HAL_I2C_Master_Transmit>
}
 8000a2e:	bf00      	nop
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	2400008c 	.word	0x2400008c
 8000a3c:	24000004 	.word	0x24000004

08000a40 <lcd_send_string>:
void lcd_send_string (char *str)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	while (*str) {
 8000a48:	e009      	b.n	8000a5e <lcd_send_string+0x1e>
		HAL_Delay(10);
 8000a4a:	200a      	movs	r0, #10
 8000a4c:	f000 ffbc 	bl	80019c8 <HAL_Delay>
		lcd_send_data (*str++);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	1c5a      	adds	r2, r3, #1
 8000a54:	607a      	str	r2, [r7, #4]
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff ffbd 	bl	80009d8 <lcd_send_data>
	while (*str) {
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d1f1      	bne.n	8000a4a <lcd_send_string+0xa>
	}
}
 8000a66:	bf00      	nop
 8000a68:	bf00      	nop
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <lcd_init>:

void lcd_init (I2C_HandleTypeDef* p_hi2c)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
	lcd_sp_hi2c = p_hi2c;
 8000a78:	4a21      	ldr	r2, [pc, #132]	@ (8000b00 <lcd_init+0x90>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6013      	str	r3, [r2, #0]
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000a7e:	2032      	movs	r0, #50	@ 0x32
 8000a80:	f000 ffa2 	bl	80019c8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000a84:	2030      	movs	r0, #48	@ 0x30
 8000a86:	f7ff ff71 	bl	800096c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000a8a:	2005      	movs	r0, #5
 8000a8c:	f000 ff9c 	bl	80019c8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000a90:	2030      	movs	r0, #48	@ 0x30
 8000a92:	f7ff ff6b 	bl	800096c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000a96:	2001      	movs	r0, #1
 8000a98:	f000 ff96 	bl	80019c8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000a9c:	2030      	movs	r0, #48	@ 0x30
 8000a9e:	f7ff ff65 	bl	800096c <lcd_send_cmd>
	HAL_Delay(10);
 8000aa2:	200a      	movs	r0, #10
 8000aa4:	f000 ff90 	bl	80019c8 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000aa8:	2020      	movs	r0, #32
 8000aaa:	f7ff ff5f 	bl	800096c <lcd_send_cmd>
	HAL_Delay(10);
 8000aae:	200a      	movs	r0, #10
 8000ab0:	f000 ff8a 	bl	80019c8 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000ab4:	2028      	movs	r0, #40	@ 0x28
 8000ab6:	f7ff ff59 	bl	800096c <lcd_send_cmd>
	HAL_Delay(1);
 8000aba:	2001      	movs	r0, #1
 8000abc:	f000 ff84 	bl	80019c8 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000ac0:	2008      	movs	r0, #8
 8000ac2:	f7ff ff53 	bl	800096c <lcd_send_cmd>
	HAL_Delay(1);
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	f000 ff7e 	bl	80019c8 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000acc:	2001      	movs	r0, #1
 8000ace:	f7ff ff4d 	bl	800096c <lcd_send_cmd>
	HAL_Delay(1);
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	f000 ff78 	bl	80019c8 <HAL_Delay>
	HAL_Delay(1);
 8000ad8:	2001      	movs	r0, #1
 8000ada:	f000 ff75 	bl	80019c8 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000ade:	2006      	movs	r0, #6
 8000ae0:	f7ff ff44 	bl	800096c <lcd_send_cmd>
	HAL_Delay(1);
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	f000 ff6f 	bl	80019c8 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000aea:	200c      	movs	r0, #12
 8000aec:	f7ff ff3e 	bl	800096c <lcd_send_cmd>
	lcd_send_string("");
 8000af0:	4804      	ldr	r0, [pc, #16]	@ (8000b04 <lcd_init+0x94>)
 8000af2:	f7ff ffa5 	bl	8000a40 <lcd_send_string>
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	2400008c 	.word	0x2400008c
 8000b04:	0800b188 	.word	0x0800b188

08000b08 <lcd_clear>:

void lcd_clear() {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 8000b0c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b10:	f000 ff5a 	bl	80019c8 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000b14:	2001      	movs	r0, #1
 8000b16:	f7ff ff29 	bl	800096c <lcd_send_cmd>
	HAL_Delay(1);
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	f000 ff54 	bl	80019c8 <HAL_Delay>
	lcd_send_string("");
 8000b20:	4804      	ldr	r0, [pc, #16]	@ (8000b34 <lcd_clear+0x2c>)
 8000b22:	f7ff ff8d 	bl	8000a40 <lcd_send_string>
	HAL_Delay(500);
 8000b26:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b2a:	f000 ff4d 	bl	80019c8 <HAL_Delay>
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	0800b188 	.word	0x0800b188

08000b38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	f5ad 4d46 	sub.w	sp, sp, #50688	@ 0xc600
 8000b3e:	b0b4      	sub	sp, #208	@ 0xd0
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b42:	f000 feaf 	bl	80018a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b46:	f000 f8df 	bl	8000d08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b4a:	f000 fa6d 	bl	8001028 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b4e:	f000 fa4b 	bl	8000fe8 <MX_DMA_Init>
  MX_DCMI_Init();
 8000b52:	f000 f949 	bl	8000de8 <MX_DCMI_Init>
  MX_I2C1_Init();
 8000b56:	f000 f97b 	bl	8000e50 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000b5a:	f000 f9b9 	bl	8000ed0 <MX_I2C2_Init>
  MX_UART4_Init();
 8000b5e:	f000 f9f7 	bl	8000f50 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  ///// START OF LCD //////

  lcd_init(&hi2c2);
 8000b62:	4860      	ldr	r0, [pc, #384]	@ (8000ce4 <main+0x1ac>)
 8000b64:	f7ff ff84 	bl	8000a70 <lcd_init>
  lcd_clear();
 8000b68:	f7ff ffce 	bl	8000b08 <lcd_clear>
  lcd_send_string("Initializing...");
 8000b6c:	485e      	ldr	r0, [pc, #376]	@ (8000ce8 <main+0x1b0>)
 8000b6e:	f7ff ff67 	bl	8000a40 <lcd_send_string>
  lcd_clear();
 8000b72:	f7ff ffc9 	bl	8000b08 <lcd_clear>
  lcd_send_string("81 loaded to x15");
 8000b76:	485d      	ldr	r0, [pc, #372]	@ (8000cec <main+0x1b4>)
 8000b78:	f7ff ff62 	bl	8000a40 <lcd_send_string>
  ///// END OF LCD /////

  ///// START OF OV7670 CAMERA /////
  ov7670_init(&hi2c1);
 8000b7c:	485c      	ldr	r0, [pc, #368]	@ (8000cf0 <main+0x1b8>)
 8000b7e:	f7ff fe41 	bl	8000804 <ov7670_init>

  // TEST WRITING 0x81 to 0x15
  HAL_Delay(100);
 8000b82:	2064      	movs	r0, #100	@ 0x64
 8000b84:	f000 ff20 	bl	80019c8 <HAL_Delay>
  ov7670_write(0x15,0x81);
 8000b88:	2181      	movs	r1, #129	@ 0x81
 8000b8a:	2015      	movs	r0, #21
 8000b8c:	f7ff fd78 	bl	8000680 <ov7670_write>

  uint8_t data[100];
  char buffer [100];

  ov7670_read(0x15,data);
 8000b90:	f24c 6364 	movw	r3, #50788	@ 0xc664
 8000b94:	443b      	add	r3, r7
 8000b96:	4619      	mov	r1, r3
 8000b98:	2015      	movs	r0, #21
 8000b9a:	f7ff fdbf 	bl	800071c <ov7670_read>
  sprintf(buffer, "Addr:0x15; D:%x;", *data);
 8000b9e:	f24c 6364 	movw	r3, #50788	@ 0xc664
 8000ba2:	443b      	add	r3, r7
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	f507 4346 	add.w	r3, r7, #50688	@ 0xc600
 8000bac:	4951      	ldr	r1, [pc, #324]	@ (8000cf4 <main+0x1bc>)
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f009 fdf4 	bl	800a79c <siprintf>

  // CONFIG CAM REGISTERS
  ov7670_init(&hi2c1);
 8000bb4:	484e      	ldr	r0, [pc, #312]	@ (8000cf0 <main+0x1b8>)
 8000bb6:	f7ff fe25 	bl	8000804 <ov7670_init>
  ov7670_write(0x12,0x0C);
 8000bba:	210c      	movs	r1, #12
 8000bbc:	2012      	movs	r0, #18
 8000bbe:	f7ff fd5f 	bl	8000680 <ov7670_write>
  ov7670_write(0x40,0xD0); //Enable RGB
 8000bc2:	21d0      	movs	r1, #208	@ 0xd0
 8000bc4:	2040      	movs	r0, #64	@ 0x40
 8000bc6:	f7ff fd5b 	bl	8000680 <ov7670_write>
  ov7670_write(0x13,0x20);// Enable banding filter
 8000bca:	2120      	movs	r1, #32
 8000bcc:	2013      	movs	r0, #19
 8000bce:	f7ff fd57 	bl	8000680 <ov7670_write>
  ov7670_write(0x3B,0x12);// Banding filter settings
 8000bd2:	2112      	movs	r1, #18
 8000bd4:	203b      	movs	r0, #59	@ 0x3b
 8000bd6:	f7ff fd53 	bl	8000680 <ov7670_write>
  //  ov7670_write(0x10,0x40); // Adjust Exposure time
  //  ov7670_write(0x13,0x00);// Disable fast AGC/AEC algorithm and banding filter

  // PRINT IMAGE LOG
  uint32_t imagedata[176 * 144 /2];
  for (int i = 0; i < 176*144 / 2; ++i) {
 8000bda:	2300      	movs	r3, #0
 8000bdc:	f24c 62cc 	movw	r2, #50892	@ 0xc6cc
 8000be0:	443a      	add	r2, r7
 8000be2:	6013      	str	r3, [r2, #0]
 8000be4:	e013      	b.n	8000c0e <main+0xd6>
    imagedata[i] = 0;
 8000be6:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8000bea:	f5a3 63da 	sub.w	r3, r3, #1744	@ 0x6d0
 8000bee:	f24c 62cc 	movw	r2, #50892	@ 0xc6cc
 8000bf2:	443a      	add	r2, r7
 8000bf4:	6812      	ldr	r2, [r2, #0]
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (int i = 0; i < 176*144 / 2; ++i) {
 8000bfc:	f24c 63cc 	movw	r3, #50892	@ 0xc6cc
 8000c00:	443b      	add	r3, r7
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	3301      	adds	r3, #1
 8000c06:	f24c 62cc 	movw	r2, #50892	@ 0xc6cc
 8000c0a:	443a      	add	r2, r7
 8000c0c:	6013      	str	r3, [r2, #0]
 8000c0e:	f24c 63cc 	movw	r3, #50892	@ 0xc6cc
 8000c12:	443b      	add	r3, r7
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f5b3 5f46 	cmp.w	r3, #12672	@ 0x3180
 8000c1a:	dbe4      	blt.n	8000be6 <main+0xae>
  }

  sprintf(buffer, "imagedata address: %x\r\n", imagedata); //24073924
 8000c1c:	4b36      	ldr	r3, [pc, #216]	@ (8000cf8 <main+0x1c0>)
 8000c1e:	f503 4346 	add.w	r3, r3, #50688	@ 0xc600
 8000c22:	f103 03d0 	add.w	r3, r3, #208	@ 0xd0
 8000c26:	443b      	add	r3, r7
 8000c28:	f507 4046 	add.w	r0, r7, #50688	@ 0xc600
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	4933      	ldr	r1, [pc, #204]	@ (8000cfc <main+0x1c4>)
 8000c30:	f009 fdb4 	bl	800a79c <siprintf>
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8000c34:	f507 4346 	add.w	r3, r7, #50688	@ 0xc600
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff fb51 	bl	80002e0 <strlen>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	f507 4146 	add.w	r1, r7, #50688	@ 0xc600
 8000c46:	230a      	movs	r3, #10
 8000c48:	482d      	ldr	r0, [pc, #180]	@ (8000d00 <main+0x1c8>)
 8000c4a:	f008 fc8d 	bl	8009568 <HAL_UART_Transmit>
  imagedata[0] = 0xFF; // Check if index 0 properly overwritten
 8000c4e:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8000c52:	f5a3 63da 	sub.w	r3, r3, #1744	@ 0x6d0
 8000c56:	22ff      	movs	r2, #255	@ 0xff
 8000c58:	601a      	str	r2, [r3, #0]
  ov7670_startCap(imagedata);
 8000c5a:	4b27      	ldr	r3, [pc, #156]	@ (8000cf8 <main+0x1c0>)
 8000c5c:	f503 4346 	add.w	r3, r3, #50688	@ 0xc600
 8000c60:	f103 03d0 	add.w	r3, r3, #208	@ 0xd0
 8000c64:	443b      	add	r3, r7
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff fe2e 	bl	80008c8 <ov7670_startCap>

  for (int i = 0; i < 176*144 / 2; ++i) {
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	f24c 62c8 	movw	r2, #50888	@ 0xc6c8
 8000c72:	443a      	add	r2, r7
 8000c74:	6013      	str	r3, [r2, #0]
 8000c76:	e02b      	b.n	8000cd0 <main+0x198>
  	sprintf(buffer, "index: %d, data: %x\r\n",i, imagedata[i]);
 8000c78:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8000c7c:	f5a3 63da 	sub.w	r3, r3, #1744	@ 0x6d0
 8000c80:	f24c 62c8 	movw	r2, #50888	@ 0xc6c8
 8000c84:	443a      	add	r2, r7
 8000c86:	6812      	ldr	r2, [r2, #0]
 8000c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c8c:	f507 4046 	add.w	r0, r7, #50688	@ 0xc600
 8000c90:	f24c 62c8 	movw	r2, #50888	@ 0xc6c8
 8000c94:	443a      	add	r2, r7
 8000c96:	6812      	ldr	r2, [r2, #0]
 8000c98:	491a      	ldr	r1, [pc, #104]	@ (8000d04 <main+0x1cc>)
 8000c9a:	f009 fd7f 	bl	800a79c <siprintf>
  	HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8000c9e:	f507 4346 	add.w	r3, r7, #50688	@ 0xc600
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff fb1c 	bl	80002e0 <strlen>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	b29a      	uxth	r2, r3
 8000cac:	f507 4146 	add.w	r1, r7, #50688	@ 0xc600
 8000cb0:	230a      	movs	r3, #10
 8000cb2:	4813      	ldr	r0, [pc, #76]	@ (8000d00 <main+0x1c8>)
 8000cb4:	f008 fc58 	bl	8009568 <HAL_UART_Transmit>
  	HAL_Delay(20);
 8000cb8:	2014      	movs	r0, #20
 8000cba:	f000 fe85 	bl	80019c8 <HAL_Delay>
  for (int i = 0; i < 176*144 / 2; ++i) {
 8000cbe:	f24c 63c8 	movw	r3, #50888	@ 0xc6c8
 8000cc2:	443b      	add	r3, r7
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	f24c 62c8 	movw	r2, #50888	@ 0xc6c8
 8000ccc:	443a      	add	r2, r7
 8000cce:	6013      	str	r3, [r2, #0]
 8000cd0:	f24c 63c8 	movw	r3, #50888	@ 0xc6c8
 8000cd4:	443b      	add	r3, r7
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f5b3 5f46 	cmp.w	r3, #12672	@ 0x3180
 8000cdc:	dbcc      	blt.n	8000c78 <main+0x140>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cde:	bf00      	nop
 8000ce0:	e7fd      	b.n	8000cde <main+0x1a6>
 8000ce2:	bf00      	nop
 8000ce4:	240001ac 	.word	0x240001ac
 8000ce8:	0800b18c 	.word	0x0800b18c
 8000cec:	0800b19c 	.word	0x0800b19c
 8000cf0:	24000158 	.word	0x24000158
 8000cf4:	0800b1b0 	.word	0x0800b1b0
 8000cf8:	ffff3930 	.word	0xffff3930
 8000cfc:	0800b1c4 	.word	0x0800b1c4
 8000d00:	24000200 	.word	0x24000200
 8000d04:	0800b1dc 	.word	0x0800b1dc

08000d08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b09c      	sub	sp, #112	@ 0x70
 8000d0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d12:	224c      	movs	r2, #76	@ 0x4c
 8000d14:	2100      	movs	r1, #0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f009 fd60 	bl	800a7dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d1c:	1d3b      	adds	r3, r7, #4
 8000d1e:	2220      	movs	r2, #32
 8000d20:	2100      	movs	r1, #0
 8000d22:	4618      	mov	r0, r3
 8000d24:	f009 fd5a 	bl	800a7dc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d28:	2002      	movs	r0, #2
 8000d2a:	f005 fd17 	bl	800675c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d2e:	2300      	movs	r3, #0
 8000d30:	603b      	str	r3, [r7, #0]
 8000d32:	4b2b      	ldr	r3, [pc, #172]	@ (8000de0 <SystemClock_Config+0xd8>)
 8000d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d36:	4a2a      	ldr	r2, [pc, #168]	@ (8000de0 <SystemClock_Config+0xd8>)
 8000d38:	f023 0301 	bic.w	r3, r3, #1
 8000d3c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000d3e:	4b28      	ldr	r3, [pc, #160]	@ (8000de0 <SystemClock_Config+0xd8>)
 8000d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	603b      	str	r3, [r7, #0]
 8000d48:	4b26      	ldr	r3, [pc, #152]	@ (8000de4 <SystemClock_Config+0xdc>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d50:	4a24      	ldr	r2, [pc, #144]	@ (8000de4 <SystemClock_Config+0xdc>)
 8000d52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d56:	6193      	str	r3, [r2, #24]
 8000d58:	4b22      	ldr	r3, [pc, #136]	@ (8000de4 <SystemClock_Config+0xdc>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d60:	603b      	str	r3, [r7, #0]
 8000d62:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d64:	bf00      	nop
 8000d66:	4b1f      	ldr	r3, [pc, #124]	@ (8000de4 <SystemClock_Config+0xdc>)
 8000d68:	699b      	ldr	r3, [r3, #24]
 8000d6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d72:	d1f8      	bne.n	8000d66 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d74:	2302      	movs	r3, #2
 8000d76:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d7c:	2340      	movs	r3, #64	@ 0x40
 8000d7e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d80:	2300      	movs	r3, #0
 8000d82:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f005 fd21 	bl	80067d0 <HAL_RCC_OscConfig>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000d94:	f000 fa0e 	bl	80011b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d98:	233f      	movs	r3, #63	@ 0x3f
 8000d9a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000da4:	2300      	movs	r3, #0
 8000da6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000dac:	2340      	movs	r3, #64	@ 0x40
 8000dae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000db0:	2300      	movs	r3, #0
 8000db2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000db4:	2300      	movs	r3, #0
 8000db6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000db8:	1d3b      	adds	r3, r7, #4
 8000dba:	2101      	movs	r1, #1
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f006 f961 	bl	8007084 <HAL_RCC_ClockConfig>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000dc8:	f000 f9f4 	bl	80011b4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_3);
 8000dcc:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	f006 fb0c 	bl	80073f0 <HAL_RCC_MCOConfig>
}
 8000dd8:	bf00      	nop
 8000dda:	3770      	adds	r7, #112	@ 0x70
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	58000400 	.word	0x58000400
 8000de4:	58024800 	.word	0x58024800

08000de8 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000dec:	4b16      	ldr	r3, [pc, #88]	@ (8000e48 <MX_DCMI_Init+0x60>)
 8000dee:	4a17      	ldr	r2, [pc, #92]	@ (8000e4c <MX_DCMI_Init+0x64>)
 8000df0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000df2:	4b15      	ldr	r3, [pc, #84]	@ (8000e48 <MX_DCMI_Init+0x60>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000df8:	4b13      	ldr	r3, [pc, #76]	@ (8000e48 <MX_DCMI_Init+0x60>)
 8000dfa:	2220      	movs	r2, #32
 8000dfc:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000dfe:	4b12      	ldr	r3, [pc, #72]	@ (8000e48 <MX_DCMI_Init+0x60>)
 8000e00:	2280      	movs	r2, #128	@ 0x80
 8000e02:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000e04:	4b10      	ldr	r3, [pc, #64]	@ (8000e48 <MX_DCMI_Init+0x60>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000e0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e48 <MX_DCMI_Init+0x60>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000e10:	4b0d      	ldr	r3, [pc, #52]	@ (8000e48 <MX_DCMI_Init+0x60>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000e16:	4b0c      	ldr	r3, [pc, #48]	@ (8000e48 <MX_DCMI_Init+0x60>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e48 <MX_DCMI_Init+0x60>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000e22:	4b09      	ldr	r3, [pc, #36]	@ (8000e48 <MX_DCMI_Init+0x60>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000e28:	4b07      	ldr	r3, [pc, #28]	@ (8000e48 <MX_DCMI_Init+0x60>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000e2e:	4b06      	ldr	r3, [pc, #24]	@ (8000e48 <MX_DCMI_Init+0x60>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000e34:	4804      	ldr	r0, [pc, #16]	@ (8000e48 <MX_DCMI_Init+0x60>)
 8000e36:	f000 ff07 	bl	8001c48 <HAL_DCMI_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000e40:	f000 f9b8 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	24000090 	.word	0x24000090
 8000e4c:	48020000 	.word	0x48020000

08000e50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e54:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec4 <MX_I2C1_Init+0x74>)
 8000e56:	4a1c      	ldr	r2, [pc, #112]	@ (8000ec8 <MX_I2C1_Init+0x78>)
 8000e58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000e5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec4 <MX_I2C1_Init+0x74>)
 8000e5c:	4a1b      	ldr	r2, [pc, #108]	@ (8000ecc <MX_I2C1_Init+0x7c>)
 8000e5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e60:	4b18      	ldr	r3, [pc, #96]	@ (8000ec4 <MX_I2C1_Init+0x74>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e66:	4b17      	ldr	r3, [pc, #92]	@ (8000ec4 <MX_I2C1_Init+0x74>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e6c:	4b15      	ldr	r3, [pc, #84]	@ (8000ec4 <MX_I2C1_Init+0x74>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e72:	4b14      	ldr	r3, [pc, #80]	@ (8000ec4 <MX_I2C1_Init+0x74>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e78:	4b12      	ldr	r3, [pc, #72]	@ (8000ec4 <MX_I2C1_Init+0x74>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e7e:	4b11      	ldr	r3, [pc, #68]	@ (8000ec4 <MX_I2C1_Init+0x74>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e84:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec4 <MX_I2C1_Init+0x74>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e8a:	480e      	ldr	r0, [pc, #56]	@ (8000ec4 <MX_I2C1_Init+0x74>)
 8000e8c:	f004 fe7e 	bl	8005b8c <HAL_I2C_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e96:	f000 f98d 	bl	80011b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	4809      	ldr	r0, [pc, #36]	@ (8000ec4 <MX_I2C1_Init+0x74>)
 8000e9e:	f005 fbc5 	bl	800662c <HAL_I2CEx_ConfigAnalogFilter>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ea8:	f000 f984 	bl	80011b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000eac:	2100      	movs	r1, #0
 8000eae:	4805      	ldr	r0, [pc, #20]	@ (8000ec4 <MX_I2C1_Init+0x74>)
 8000eb0:	f005 fc07 	bl	80066c2 <HAL_I2CEx_ConfigDigitalFilter>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000eba:	f000 f97b 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	24000158 	.word	0x24000158
 8000ec8:	40005400 	.word	0x40005400
 8000ecc:	00707cbb 	.word	0x00707cbb

08000ed0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f44 <MX_I2C2_Init+0x74>)
 8000ed6:	4a1c      	ldr	r2, [pc, #112]	@ (8000f48 <MX_I2C2_Init+0x78>)
 8000ed8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8000eda:	4b1a      	ldr	r3, [pc, #104]	@ (8000f44 <MX_I2C2_Init+0x74>)
 8000edc:	4a1b      	ldr	r2, [pc, #108]	@ (8000f4c <MX_I2C2_Init+0x7c>)
 8000ede:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000ee0:	4b18      	ldr	r3, [pc, #96]	@ (8000f44 <MX_I2C2_Init+0x74>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ee6:	4b17      	ldr	r3, [pc, #92]	@ (8000f44 <MX_I2C2_Init+0x74>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000eec:	4b15      	ldr	r3, [pc, #84]	@ (8000f44 <MX_I2C2_Init+0x74>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000ef2:	4b14      	ldr	r3, [pc, #80]	@ (8000f44 <MX_I2C2_Init+0x74>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ef8:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <MX_I2C2_Init+0x74>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000efe:	4b11      	ldr	r3, [pc, #68]	@ (8000f44 <MX_I2C2_Init+0x74>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f04:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <MX_I2C2_Init+0x74>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f0a:	480e      	ldr	r0, [pc, #56]	@ (8000f44 <MX_I2C2_Init+0x74>)
 8000f0c:	f004 fe3e 	bl	8005b8c <HAL_I2C_Init>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000f16:	f000 f94d 	bl	80011b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4809      	ldr	r0, [pc, #36]	@ (8000f44 <MX_I2C2_Init+0x74>)
 8000f1e:	f005 fb85 	bl	800662c <HAL_I2CEx_ConfigAnalogFilter>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000f28:	f000 f944 	bl	80011b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4805      	ldr	r0, [pc, #20]	@ (8000f44 <MX_I2C2_Init+0x74>)
 8000f30:	f005 fbc7 	bl	80066c2 <HAL_I2CEx_ConfigDigitalFilter>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000f3a:	f000 f93b 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	240001ac 	.word	0x240001ac
 8000f48:	40005800 	.word	0x40005800
 8000f4c:	00707cbb 	.word	0x00707cbb

08000f50 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000f54:	4b22      	ldr	r3, [pc, #136]	@ (8000fe0 <MX_UART4_Init+0x90>)
 8000f56:	4a23      	ldr	r2, [pc, #140]	@ (8000fe4 <MX_UART4_Init+0x94>)
 8000f58:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000f5a:	4b21      	ldr	r3, [pc, #132]	@ (8000fe0 <MX_UART4_Init+0x90>)
 8000f5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f60:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000f62:	4b1f      	ldr	r3, [pc, #124]	@ (8000fe0 <MX_UART4_Init+0x90>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000f68:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe0 <MX_UART4_Init+0x90>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000f6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe0 <MX_UART4_Init+0x90>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000f74:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe0 <MX_UART4_Init+0x90>)
 8000f76:	220c      	movs	r2, #12
 8000f78:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f7a:	4b19      	ldr	r3, [pc, #100]	@ (8000fe0 <MX_UART4_Init+0x90>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f80:	4b17      	ldr	r3, [pc, #92]	@ (8000fe0 <MX_UART4_Init+0x90>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f86:	4b16      	ldr	r3, [pc, #88]	@ (8000fe0 <MX_UART4_Init+0x90>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f8c:	4b14      	ldr	r3, [pc, #80]	@ (8000fe0 <MX_UART4_Init+0x90>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f92:	4b13      	ldr	r3, [pc, #76]	@ (8000fe0 <MX_UART4_Init+0x90>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000f98:	4811      	ldr	r0, [pc, #68]	@ (8000fe0 <MX_UART4_Init+0x90>)
 8000f9a:	f008 fa95 	bl	80094c8 <HAL_UART_Init>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000fa4:	f000 f906 	bl	80011b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fa8:	2100      	movs	r1, #0
 8000faa:	480d      	ldr	r0, [pc, #52]	@ (8000fe0 <MX_UART4_Init+0x90>)
 8000fac:	f009 fb2b 	bl	800a606 <HAL_UARTEx_SetTxFifoThreshold>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000fb6:	f000 f8fd 	bl	80011b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4808      	ldr	r0, [pc, #32]	@ (8000fe0 <MX_UART4_Init+0x90>)
 8000fbe:	f009 fb60 	bl	800a682 <HAL_UARTEx_SetRxFifoThreshold>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000fc8:	f000 f8f4 	bl	80011b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000fcc:	4804      	ldr	r0, [pc, #16]	@ (8000fe0 <MX_UART4_Init+0x90>)
 8000fce:	f009 fae1 	bl	800a594 <HAL_UARTEx_DisableFifoMode>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000fd8:	f000 f8ec 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	24000200 	.word	0x24000200
 8000fe4:	40004c00 	.word	0x40004c00

08000fe8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fee:	4b0d      	ldr	r3, [pc, #52]	@ (8001024 <MX_DMA_Init+0x3c>)
 8000ff0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ff4:	4a0b      	ldr	r2, [pc, #44]	@ (8001024 <MX_DMA_Init+0x3c>)
 8000ff6:	f043 0301 	orr.w	r3, r3, #1
 8000ffa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ffe:	4b09      	ldr	r3, [pc, #36]	@ (8001024 <MX_DMA_Init+0x3c>)
 8001000:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800100c:	2200      	movs	r2, #0
 800100e:	2100      	movs	r1, #0
 8001010:	200b      	movs	r0, #11
 8001012:	f000 fde4 	bl	8001bde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001016:	200b      	movs	r0, #11
 8001018:	f000 fdfb 	bl	8001c12 <HAL_NVIC_EnableIRQ>

}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	58024400 	.word	0x58024400

08001028 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08a      	sub	sp, #40	@ 0x28
 800102c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
 800103c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800103e:	4b57      	ldr	r3, [pc, #348]	@ (800119c <MX_GPIO_Init+0x174>)
 8001040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001044:	4a55      	ldr	r2, [pc, #340]	@ (800119c <MX_GPIO_Init+0x174>)
 8001046:	f043 0310 	orr.w	r3, r3, #16
 800104a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800104e:	4b53      	ldr	r3, [pc, #332]	@ (800119c <MX_GPIO_Init+0x174>)
 8001050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001054:	f003 0310 	and.w	r3, r3, #16
 8001058:	613b      	str	r3, [r7, #16]
 800105a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800105c:	4b4f      	ldr	r3, [pc, #316]	@ (800119c <MX_GPIO_Init+0x174>)
 800105e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001062:	4a4e      	ldr	r2, [pc, #312]	@ (800119c <MX_GPIO_Init+0x174>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800106c:	4b4b      	ldr	r3, [pc, #300]	@ (800119c <MX_GPIO_Init+0x174>)
 800106e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800107a:	4b48      	ldr	r3, [pc, #288]	@ (800119c <MX_GPIO_Init+0x174>)
 800107c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001080:	4a46      	ldr	r2, [pc, #280]	@ (800119c <MX_GPIO_Init+0x174>)
 8001082:	f043 0304 	orr.w	r3, r3, #4
 8001086:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800108a:	4b44      	ldr	r3, [pc, #272]	@ (800119c <MX_GPIO_Init+0x174>)
 800108c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001090:	f003 0304 	and.w	r3, r3, #4
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001098:	4b40      	ldr	r3, [pc, #256]	@ (800119c <MX_GPIO_Init+0x174>)
 800109a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800109e:	4a3f      	ldr	r2, [pc, #252]	@ (800119c <MX_GPIO_Init+0x174>)
 80010a0:	f043 0302 	orr.w	r3, r3, #2
 80010a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010a8:	4b3c      	ldr	r3, [pc, #240]	@ (800119c <MX_GPIO_Init+0x174>)
 80010aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010b6:	4b39      	ldr	r3, [pc, #228]	@ (800119c <MX_GPIO_Init+0x174>)
 80010b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010bc:	4a37      	ldr	r2, [pc, #220]	@ (800119c <MX_GPIO_Init+0x174>)
 80010be:	f043 0308 	orr.w	r3, r3, #8
 80010c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010c6:	4b35      	ldr	r3, [pc, #212]	@ (800119c <MX_GPIO_Init+0x174>)
 80010c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010cc:	f003 0308 	and.w	r3, r3, #8
 80010d0:	603b      	str	r3, [r7, #0]
 80010d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2104      	movs	r1, #4
 80010d8:	4831      	ldr	r0, [pc, #196]	@ (80011a0 <MX_GPIO_Init+0x178>)
 80010da:	f004 fd3d 	bl	8005b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAM_RST_GPIO_Port, CAM_RST_Pin, GPIO_PIN_RESET);
 80010de:	2200      	movs	r2, #0
 80010e0:	2120      	movs	r1, #32
 80010e2:	4830      	ldr	r0, [pc, #192]	@ (80011a4 <MX_GPIO_Init+0x17c>)
 80010e4:	f004 fd38 	bl	8005b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWDN_GPIO_Port, PWDN_Pin, GPIO_PIN_SET);
 80010e8:	2201      	movs	r2, #1
 80010ea:	2101      	movs	r1, #1
 80010ec:	482e      	ldr	r0, [pc, #184]	@ (80011a8 <MX_GPIO_Init+0x180>)
 80010ee:	f004 fd33 	bl	8005b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CAPTURE_Pin|LED_Pin, GPIO_PIN_RESET);
 80010f2:	2200      	movs	r2, #0
 80010f4:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 80010f8:	482c      	ldr	r0, [pc, #176]	@ (80011ac <MX_GPIO_Init+0x184>)
 80010fa:	f004 fd2d 	bl	8005b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010fe:	2304      	movs	r3, #4
 8001100:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001102:	2301      	movs	r3, #1
 8001104:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	2300      	movs	r3, #0
 800110c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800110e:	f107 0314 	add.w	r3, r7, #20
 8001112:	4619      	mov	r1, r3
 8001114:	4822      	ldr	r0, [pc, #136]	@ (80011a0 <MX_GPIO_Init+0x178>)
 8001116:	f004 fb6f 	bl	80057f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAM_RST_Pin */
  GPIO_InitStruct.Pin = CAM_RST_Pin;
 800111a:	2320      	movs	r3, #32
 800111c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111e:	2301      	movs	r3, #1
 8001120:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001126:	2300      	movs	r3, #0
 8001128:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAM_RST_GPIO_Port, &GPIO_InitStruct);
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	4619      	mov	r1, r3
 8001130:	481c      	ldr	r0, [pc, #112]	@ (80011a4 <MX_GPIO_Init+0x17c>)
 8001132:	f004 fb61 	bl	80057f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWDN_Pin */
  GPIO_InitStruct.Pin = PWDN_Pin;
 8001136:	2301      	movs	r3, #1
 8001138:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113a:	2301      	movs	r3, #1
 800113c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001142:	2300      	movs	r3, #0
 8001144:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PWDN_GPIO_Port, &GPIO_InitStruct);
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	4619      	mov	r1, r3
 800114c:	4816      	ldr	r0, [pc, #88]	@ (80011a8 <MX_GPIO_Init+0x180>)
 800114e:	f004 fb53 	bl	80057f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAPTURE_Pin LED_Pin */
  GPIO_InitStruct.Pin = CAPTURE_Pin|LED_Pin;
 8001152:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001156:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001158:	2301      	movs	r3, #1
 800115a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001160:	2300      	movs	r3, #0
 8001162:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	4619      	mov	r1, r3
 800116a:	4810      	ldr	r0, [pc, #64]	@ (80011ac <MX_GPIO_Init+0x184>)
 800116c:	f004 fb44 	bl	80057f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001170:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001174:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	2302      	movs	r3, #2
 8001178:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	2300      	movs	r3, #0
 8001180:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001182:	2300      	movs	r3, #0
 8001184:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	4619      	mov	r1, r3
 800118c:	4808      	ldr	r0, [pc, #32]	@ (80011b0 <MX_GPIO_Init+0x188>)
 800118e:	f004 fb33 	bl	80057f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001192:	bf00      	nop
 8001194:	3728      	adds	r7, #40	@ 0x28
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	58024400 	.word	0x58024400
 80011a0:	58021000 	.word	0x58021000
 80011a4:	58020800 	.word	0x58020800
 80011a8:	58020400 	.word	0x58020400
 80011ac:	58020c00 	.word	0x58020c00
 80011b0:	58020000 	.word	0x58020000

080011b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b8:	b672      	cpsid	i
}
 80011ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011bc:	bf00      	nop
 80011be:	e7fd      	b.n	80011bc <Error_Handler+0x8>

080011c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c6:	4b0a      	ldr	r3, [pc, #40]	@ (80011f0 <HAL_MspInit+0x30>)
 80011c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011cc:	4a08      	ldr	r2, [pc, #32]	@ (80011f0 <HAL_MspInit+0x30>)
 80011ce:	f043 0302 	orr.w	r3, r3, #2
 80011d2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80011d6:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <HAL_MspInit+0x30>)
 80011d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011dc:	f003 0302 	and.w	r3, r3, #2
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	58024400 	.word	0x58024400

080011f4 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08e      	sub	sp, #56	@ 0x38
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a75      	ldr	r2, [pc, #468]	@ (80013e8 <HAL_DCMI_MspInit+0x1f4>)
 8001212:	4293      	cmp	r3, r2
 8001214:	f040 80e3 	bne.w	80013de <HAL_DCMI_MspInit+0x1ea>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001218:	4b74      	ldr	r3, [pc, #464]	@ (80013ec <HAL_DCMI_MspInit+0x1f8>)
 800121a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800121e:	4a73      	ldr	r2, [pc, #460]	@ (80013ec <HAL_DCMI_MspInit+0x1f8>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8001228:	4b70      	ldr	r3, [pc, #448]	@ (80013ec <HAL_DCMI_MspInit+0x1f8>)
 800122a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	623b      	str	r3, [r7, #32]
 8001234:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001236:	4b6d      	ldr	r3, [pc, #436]	@ (80013ec <HAL_DCMI_MspInit+0x1f8>)
 8001238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800123c:	4a6b      	ldr	r2, [pc, #428]	@ (80013ec <HAL_DCMI_MspInit+0x1f8>)
 800123e:	f043 0310 	orr.w	r3, r3, #16
 8001242:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001246:	4b69      	ldr	r3, [pc, #420]	@ (80013ec <HAL_DCMI_MspInit+0x1f8>)
 8001248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800124c:	f003 0310 	and.w	r3, r3, #16
 8001250:	61fb      	str	r3, [r7, #28]
 8001252:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001254:	4b65      	ldr	r3, [pc, #404]	@ (80013ec <HAL_DCMI_MspInit+0x1f8>)
 8001256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800125a:	4a64      	ldr	r2, [pc, #400]	@ (80013ec <HAL_DCMI_MspInit+0x1f8>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001264:	4b61      	ldr	r3, [pc, #388]	@ (80013ec <HAL_DCMI_MspInit+0x1f8>)
 8001266:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	61bb      	str	r3, [r7, #24]
 8001270:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001272:	4b5e      	ldr	r3, [pc, #376]	@ (80013ec <HAL_DCMI_MspInit+0x1f8>)
 8001274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001278:	4a5c      	ldr	r2, [pc, #368]	@ (80013ec <HAL_DCMI_MspInit+0x1f8>)
 800127a:	f043 0304 	orr.w	r3, r3, #4
 800127e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001282:	4b5a      	ldr	r3, [pc, #360]	@ (80013ec <HAL_DCMI_MspInit+0x1f8>)
 8001284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001288:	f003 0304 	and.w	r3, r3, #4
 800128c:	617b      	str	r3, [r7, #20]
 800128e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001290:	4b56      	ldr	r3, [pc, #344]	@ (80013ec <HAL_DCMI_MspInit+0x1f8>)
 8001292:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001296:	4a55      	ldr	r2, [pc, #340]	@ (80013ec <HAL_DCMI_MspInit+0x1f8>)
 8001298:	f043 0308 	orr.w	r3, r3, #8
 800129c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012a0:	4b52      	ldr	r3, [pc, #328]	@ (80013ec <HAL_DCMI_MspInit+0x1f8>)
 80012a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012a6:	f003 0308 	and.w	r3, r3, #8
 80012aa:	613b      	str	r3, [r7, #16]
 80012ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ae:	4b4f      	ldr	r3, [pc, #316]	@ (80013ec <HAL_DCMI_MspInit+0x1f8>)
 80012b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012b4:	4a4d      	ldr	r2, [pc, #308]	@ (80013ec <HAL_DCMI_MspInit+0x1f8>)
 80012b6:	f043 0302 	orr.w	r3, r3, #2
 80012ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012be:	4b4b      	ldr	r3, [pc, #300]	@ (80013ec <HAL_DCMI_MspInit+0x1f8>)
 80012c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012c4:	f003 0302 	and.w	r3, r3, #2
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80012cc:	2370      	movs	r3, #112	@ 0x70
 80012ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d0:	2302      	movs	r3, #2
 80012d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012d4:	2302      	movs	r3, #2
 80012d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d8:	2303      	movs	r3, #3
 80012da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80012dc:	230d      	movs	r3, #13
 80012de:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012e4:	4619      	mov	r1, r3
 80012e6:	4842      	ldr	r0, [pc, #264]	@ (80013f0 <HAL_DCMI_MspInit+0x1fc>)
 80012e8:	f004 fa86 	bl	80057f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80012ec:	2350      	movs	r3, #80	@ 0x50
 80012ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f0:	2302      	movs	r3, #2
 80012f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012f4:	2302      	movs	r3, #2
 80012f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f8:	2303      	movs	r3, #3
 80012fa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80012fc:	230d      	movs	r3, #13
 80012fe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001300:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001304:	4619      	mov	r1, r3
 8001306:	483b      	ldr	r0, [pc, #236]	@ (80013f4 <HAL_DCMI_MspInit+0x200>)
 8001308:	f004 fa76 	bl	80057f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800130c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001310:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001312:	2302      	movs	r3, #2
 8001314:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001316:	2302      	movs	r3, #2
 8001318:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131a:	2303      	movs	r3, #3
 800131c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800131e:	230d      	movs	r3, #13
 8001320:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001322:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001326:	4619      	mov	r1, r3
 8001328:	4833      	ldr	r0, [pc, #204]	@ (80013f8 <HAL_DCMI_MspInit+0x204>)
 800132a:	f004 fa65 	bl	80057f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800132e:	2308      	movs	r3, #8
 8001330:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001332:	2302      	movs	r3, #2
 8001334:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001336:	2302      	movs	r3, #2
 8001338:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133a:	2303      	movs	r3, #3
 800133c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800133e:	230d      	movs	r3, #13
 8001340:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001342:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001346:	4619      	mov	r1, r3
 8001348:	482c      	ldr	r0, [pc, #176]	@ (80013fc <HAL_DCMI_MspInit+0x208>)
 800134a:	f004 fa55 	bl	80057f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800134e:	2380      	movs	r3, #128	@ 0x80
 8001350:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001356:	2302      	movs	r3, #2
 8001358:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135a:	2303      	movs	r3, #3
 800135c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800135e:	230d      	movs	r3, #13
 8001360:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001362:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001366:	4619      	mov	r1, r3
 8001368:	4825      	ldr	r0, [pc, #148]	@ (8001400 <HAL_DCMI_MspInit+0x20c>)
 800136a:	f004 fa45 	bl	80057f8 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 800136e:	4b25      	ldr	r3, [pc, #148]	@ (8001404 <HAL_DCMI_MspInit+0x210>)
 8001370:	4a25      	ldr	r2, [pc, #148]	@ (8001408 <HAL_DCMI_MspInit+0x214>)
 8001372:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 8001374:	4b23      	ldr	r3, [pc, #140]	@ (8001404 <HAL_DCMI_MspInit+0x210>)
 8001376:	224b      	movs	r2, #75	@ 0x4b
 8001378:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800137a:	4b22      	ldr	r3, [pc, #136]	@ (8001404 <HAL_DCMI_MspInit+0x210>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8001380:	4b20      	ldr	r3, [pc, #128]	@ (8001404 <HAL_DCMI_MspInit+0x210>)
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8001386:	4b1f      	ldr	r3, [pc, #124]	@ (8001404 <HAL_DCMI_MspInit+0x210>)
 8001388:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800138c:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800138e:	4b1d      	ldr	r3, [pc, #116]	@ (8001404 <HAL_DCMI_MspInit+0x210>)
 8001390:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001394:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001396:	4b1b      	ldr	r3, [pc, #108]	@ (8001404 <HAL_DCMI_MspInit+0x210>)
 8001398:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800139c:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 800139e:	4b19      	ldr	r3, [pc, #100]	@ (8001404 <HAL_DCMI_MspInit+0x210>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80013a4:	4b17      	ldr	r3, [pc, #92]	@ (8001404 <HAL_DCMI_MspInit+0x210>)
 80013a6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80013aa:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013ac:	4b15      	ldr	r3, [pc, #84]	@ (8001404 <HAL_DCMI_MspInit+0x210>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80013b2:	4814      	ldr	r0, [pc, #80]	@ (8001404 <HAL_DCMI_MspInit+0x210>)
 80013b4:	f000 ff34 	bl	8002220 <HAL_DMA_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <HAL_DCMI_MspInit+0x1ce>
    {
      Error_Handler();
 80013be:	f7ff fef9 	bl	80011b4 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a0f      	ldr	r2, [pc, #60]	@ (8001404 <HAL_DCMI_MspInit+0x210>)
 80013c6:	649a      	str	r2, [r3, #72]	@ 0x48
 80013c8:	4a0e      	ldr	r2, [pc, #56]	@ (8001404 <HAL_DCMI_MspInit+0x210>)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2100      	movs	r1, #0
 80013d2:	204e      	movs	r0, #78	@ 0x4e
 80013d4:	f000 fc03 	bl	8001bde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80013d8:	204e      	movs	r0, #78	@ 0x4e
 80013da:	f000 fc1a 	bl	8001c12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80013de:	bf00      	nop
 80013e0:	3738      	adds	r7, #56	@ 0x38
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	48020000 	.word	0x48020000
 80013ec:	58024400 	.word	0x58024400
 80013f0:	58021000 	.word	0x58021000
 80013f4:	58020000 	.word	0x58020000
 80013f8:	58020800 	.word	0x58020800
 80013fc:	58020c00 	.word	0x58020c00
 8001400:	58020400 	.word	0x58020400
 8001404:	240000e0 	.word	0x240000e0
 8001408:	40020010 	.word	0x40020010

0800140c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b0bc      	sub	sp, #240	@ 0xf0
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001424:	f107 0318 	add.w	r3, r7, #24
 8001428:	22c0      	movs	r2, #192	@ 0xc0
 800142a:	2100      	movs	r1, #0
 800142c:	4618      	mov	r0, r3
 800142e:	f009 f9d5 	bl	800a7dc <memset>
  if(hi2c->Instance==I2C1)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a4d      	ldr	r2, [pc, #308]	@ (800156c <HAL_I2C_MspInit+0x160>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d147      	bne.n	80014cc <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800143c:	f04f 0208 	mov.w	r2, #8
 8001440:	f04f 0300 	mov.w	r3, #0
 8001444:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001448:	2300      	movs	r3, #0
 800144a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800144e:	f107 0318 	add.w	r3, r7, #24
 8001452:	4618      	mov	r0, r3
 8001454:	f006 fa0c 	bl	8007870 <HAL_RCCEx_PeriphCLKConfig>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800145e:	f7ff fea9 	bl	80011b4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001462:	4b43      	ldr	r3, [pc, #268]	@ (8001570 <HAL_I2C_MspInit+0x164>)
 8001464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001468:	4a41      	ldr	r2, [pc, #260]	@ (8001570 <HAL_I2C_MspInit+0x164>)
 800146a:	f043 0302 	orr.w	r3, r3, #2
 800146e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001472:	4b3f      	ldr	r3, [pc, #252]	@ (8001570 <HAL_I2C_MspInit+0x164>)
 8001474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001478:	f003 0302 	and.w	r3, r3, #2
 800147c:	617b      	str	r3, [r7, #20]
 800147e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001480:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001484:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001488:	2312      	movs	r3, #18
 800148a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800148e:	2301      	movs	r3, #1
 8001490:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001494:	2300      	movs	r3, #0
 8001496:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800149a:	2304      	movs	r3, #4
 800149c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80014a4:	4619      	mov	r1, r3
 80014a6:	4833      	ldr	r0, [pc, #204]	@ (8001574 <HAL_I2C_MspInit+0x168>)
 80014a8:	f004 f9a6 	bl	80057f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014ac:	4b30      	ldr	r3, [pc, #192]	@ (8001570 <HAL_I2C_MspInit+0x164>)
 80014ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014b2:	4a2f      	ldr	r2, [pc, #188]	@ (8001570 <HAL_I2C_MspInit+0x164>)
 80014b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014b8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80014bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001570 <HAL_I2C_MspInit+0x164>)
 80014be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80014ca:	e04b      	b.n	8001564 <HAL_I2C_MspInit+0x158>
  else if(hi2c->Instance==I2C2)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a29      	ldr	r2, [pc, #164]	@ (8001578 <HAL_I2C_MspInit+0x16c>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d146      	bne.n	8001564 <HAL_I2C_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80014d6:	f04f 0208 	mov.w	r2, #8
 80014da:	f04f 0300 	mov.w	r3, #0
 80014de:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80014e2:	2300      	movs	r3, #0
 80014e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014e8:	f107 0318 	add.w	r3, r7, #24
 80014ec:	4618      	mov	r0, r3
 80014ee:	f006 f9bf 	bl	8007870 <HAL_RCCEx_PeriphCLKConfig>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 80014f8:	f7ff fe5c 	bl	80011b4 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001570 <HAL_I2C_MspInit+0x164>)
 80014fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001502:	4a1b      	ldr	r2, [pc, #108]	@ (8001570 <HAL_I2C_MspInit+0x164>)
 8001504:	f043 0302 	orr.w	r3, r3, #2
 8001508:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800150c:	4b18      	ldr	r3, [pc, #96]	@ (8001570 <HAL_I2C_MspInit+0x164>)
 800150e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800151a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800151e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001522:	2312      	movs	r3, #18
 8001524:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152e:	2300      	movs	r3, #0
 8001530:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001534:	2304      	movs	r3, #4
 8001536:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800153e:	4619      	mov	r1, r3
 8001540:	480c      	ldr	r0, [pc, #48]	@ (8001574 <HAL_I2C_MspInit+0x168>)
 8001542:	f004 f959 	bl	80057f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001546:	4b0a      	ldr	r3, [pc, #40]	@ (8001570 <HAL_I2C_MspInit+0x164>)
 8001548:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800154c:	4a08      	ldr	r2, [pc, #32]	@ (8001570 <HAL_I2C_MspInit+0x164>)
 800154e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001552:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001556:	4b06      	ldr	r3, [pc, #24]	@ (8001570 <HAL_I2C_MspInit+0x164>)
 8001558:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800155c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	68bb      	ldr	r3, [r7, #8]
}
 8001564:	bf00      	nop
 8001566:	37f0      	adds	r7, #240	@ 0xf0
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40005400 	.word	0x40005400
 8001570:	58024400 	.word	0x58024400
 8001574:	58020400 	.word	0x58020400
 8001578:	40005800 	.word	0x40005800

0800157c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b0ba      	sub	sp, #232	@ 0xe8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001584:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001594:	f107 0310 	add.w	r3, r7, #16
 8001598:	22c0      	movs	r2, #192	@ 0xc0
 800159a:	2100      	movs	r1, #0
 800159c:	4618      	mov	r0, r3
 800159e:	f009 f91d 	bl	800a7dc <memset>
  if(huart->Instance==UART4)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a26      	ldr	r2, [pc, #152]	@ (8001640 <HAL_UART_MspInit+0xc4>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d145      	bne.n	8001638 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80015ac:	f04f 0202 	mov.w	r2, #2
 80015b0:	f04f 0300 	mov.w	r3, #0
 80015b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80015b8:	2300      	movs	r3, #0
 80015ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015be:	f107 0310 	add.w	r3, r7, #16
 80015c2:	4618      	mov	r0, r3
 80015c4:	f006 f954 	bl	8007870 <HAL_RCCEx_PeriphCLKConfig>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80015ce:	f7ff fdf1 	bl	80011b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80015d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001644 <HAL_UART_MspInit+0xc8>)
 80015d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015d8:	4a1a      	ldr	r2, [pc, #104]	@ (8001644 <HAL_UART_MspInit+0xc8>)
 80015da:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80015de:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80015e2:	4b18      	ldr	r3, [pc, #96]	@ (8001644 <HAL_UART_MspInit+0xc8>)
 80015e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f0:	4b14      	ldr	r3, [pc, #80]	@ (8001644 <HAL_UART_MspInit+0xc8>)
 80015f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015f6:	4a13      	ldr	r2, [pc, #76]	@ (8001644 <HAL_UART_MspInit+0xc8>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001600:	4b10      	ldr	r3, [pc, #64]	@ (8001644 <HAL_UART_MspInit+0xc8>)
 8001602:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800160e:	2303      	movs	r3, #3
 8001610:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001614:	2302      	movs	r3, #2
 8001616:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001620:	2300      	movs	r3, #0
 8001622:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001626:	2308      	movs	r3, #8
 8001628:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001630:	4619      	mov	r1, r3
 8001632:	4805      	ldr	r0, [pc, #20]	@ (8001648 <HAL_UART_MspInit+0xcc>)
 8001634:	f004 f8e0 	bl	80057f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001638:	bf00      	nop
 800163a:	37e8      	adds	r7, #232	@ 0xe8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40004c00 	.word	0x40004c00
 8001644:	58024400 	.word	0x58024400
 8001648:	58020000 	.word	0x58020000

0800164c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <NMI_Handler+0x4>

08001654 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001658:	bf00      	nop
 800165a:	e7fd      	b.n	8001658 <HardFault_Handler+0x4>

0800165c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001660:	bf00      	nop
 8001662:	e7fd      	b.n	8001660 <MemManage_Handler+0x4>

08001664 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001668:	bf00      	nop
 800166a:	e7fd      	b.n	8001668 <BusFault_Handler+0x4>

0800166c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001670:	bf00      	nop
 8001672:	e7fd      	b.n	8001670 <UsageFault_Handler+0x4>

08001674 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016a2:	f000 f971 	bl	8001988 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
	...

080016ac <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 80016b0:	4802      	ldr	r0, [pc, #8]	@ (80016bc <DMA1_Stream0_IRQHandler+0x10>)
 80016b2:	f002 f8df 	bl	8003874 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	240000e0 	.word	0x240000e0

080016c0 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80016c4:	4802      	ldr	r0, [pc, #8]	@ (80016d0 <DCMI_IRQHandler+0x10>)
 80016c6:	f000 fc5b 	bl	8001f80 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	24000090 	.word	0x24000090

080016d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016dc:	4a14      	ldr	r2, [pc, #80]	@ (8001730 <_sbrk+0x5c>)
 80016de:	4b15      	ldr	r3, [pc, #84]	@ (8001734 <_sbrk+0x60>)
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016e8:	4b13      	ldr	r3, [pc, #76]	@ (8001738 <_sbrk+0x64>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d102      	bne.n	80016f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016f0:	4b11      	ldr	r3, [pc, #68]	@ (8001738 <_sbrk+0x64>)
 80016f2:	4a12      	ldr	r2, [pc, #72]	@ (800173c <_sbrk+0x68>)
 80016f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016f6:	4b10      	ldr	r3, [pc, #64]	@ (8001738 <_sbrk+0x64>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4413      	add	r3, r2
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	429a      	cmp	r2, r3
 8001702:	d207      	bcs.n	8001714 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001704:	f009 f872 	bl	800a7ec <__errno>
 8001708:	4603      	mov	r3, r0
 800170a:	220c      	movs	r2, #12
 800170c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800170e:	f04f 33ff 	mov.w	r3, #4294967295
 8001712:	e009      	b.n	8001728 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001714:	4b08      	ldr	r3, [pc, #32]	@ (8001738 <_sbrk+0x64>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800171a:	4b07      	ldr	r3, [pc, #28]	@ (8001738 <_sbrk+0x64>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4413      	add	r3, r2
 8001722:	4a05      	ldr	r2, [pc, #20]	@ (8001738 <_sbrk+0x64>)
 8001724:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001726:	68fb      	ldr	r3, [r7, #12]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3718      	adds	r7, #24
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	24080000 	.word	0x24080000
 8001734:	00000400 	.word	0x00000400
 8001738:	24000294 	.word	0x24000294
 800173c:	240003e8 	.word	0x240003e8

08001740 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001744:	4b37      	ldr	r3, [pc, #220]	@ (8001824 <SystemInit+0xe4>)
 8001746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800174a:	4a36      	ldr	r2, [pc, #216]	@ (8001824 <SystemInit+0xe4>)
 800174c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001750:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001754:	4b34      	ldr	r3, [pc, #208]	@ (8001828 <SystemInit+0xe8>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 030f 	and.w	r3, r3, #15
 800175c:	2b06      	cmp	r3, #6
 800175e:	d807      	bhi.n	8001770 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001760:	4b31      	ldr	r3, [pc, #196]	@ (8001828 <SystemInit+0xe8>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f023 030f 	bic.w	r3, r3, #15
 8001768:	4a2f      	ldr	r2, [pc, #188]	@ (8001828 <SystemInit+0xe8>)
 800176a:	f043 0307 	orr.w	r3, r3, #7
 800176e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001770:	4b2e      	ldr	r3, [pc, #184]	@ (800182c <SystemInit+0xec>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a2d      	ldr	r2, [pc, #180]	@ (800182c <SystemInit+0xec>)
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800177c:	4b2b      	ldr	r3, [pc, #172]	@ (800182c <SystemInit+0xec>)
 800177e:	2200      	movs	r2, #0
 8001780:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001782:	4b2a      	ldr	r3, [pc, #168]	@ (800182c <SystemInit+0xec>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	4929      	ldr	r1, [pc, #164]	@ (800182c <SystemInit+0xec>)
 8001788:	4b29      	ldr	r3, [pc, #164]	@ (8001830 <SystemInit+0xf0>)
 800178a:	4013      	ands	r3, r2
 800178c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800178e:	4b26      	ldr	r3, [pc, #152]	@ (8001828 <SystemInit+0xe8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0308 	and.w	r3, r3, #8
 8001796:	2b00      	cmp	r3, #0
 8001798:	d007      	beq.n	80017aa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800179a:	4b23      	ldr	r3, [pc, #140]	@ (8001828 <SystemInit+0xe8>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f023 030f 	bic.w	r3, r3, #15
 80017a2:	4a21      	ldr	r2, [pc, #132]	@ (8001828 <SystemInit+0xe8>)
 80017a4:	f043 0307 	orr.w	r3, r3, #7
 80017a8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80017aa:	4b20      	ldr	r3, [pc, #128]	@ (800182c <SystemInit+0xec>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80017b0:	4b1e      	ldr	r3, [pc, #120]	@ (800182c <SystemInit+0xec>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80017b6:	4b1d      	ldr	r3, [pc, #116]	@ (800182c <SystemInit+0xec>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80017bc:	4b1b      	ldr	r3, [pc, #108]	@ (800182c <SystemInit+0xec>)
 80017be:	4a1d      	ldr	r2, [pc, #116]	@ (8001834 <SystemInit+0xf4>)
 80017c0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80017c2:	4b1a      	ldr	r3, [pc, #104]	@ (800182c <SystemInit+0xec>)
 80017c4:	4a1c      	ldr	r2, [pc, #112]	@ (8001838 <SystemInit+0xf8>)
 80017c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80017c8:	4b18      	ldr	r3, [pc, #96]	@ (800182c <SystemInit+0xec>)
 80017ca:	4a1c      	ldr	r2, [pc, #112]	@ (800183c <SystemInit+0xfc>)
 80017cc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80017ce:	4b17      	ldr	r3, [pc, #92]	@ (800182c <SystemInit+0xec>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80017d4:	4b15      	ldr	r3, [pc, #84]	@ (800182c <SystemInit+0xec>)
 80017d6:	4a19      	ldr	r2, [pc, #100]	@ (800183c <SystemInit+0xfc>)
 80017d8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80017da:	4b14      	ldr	r3, [pc, #80]	@ (800182c <SystemInit+0xec>)
 80017dc:	2200      	movs	r2, #0
 80017de:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80017e0:	4b12      	ldr	r3, [pc, #72]	@ (800182c <SystemInit+0xec>)
 80017e2:	4a16      	ldr	r2, [pc, #88]	@ (800183c <SystemInit+0xfc>)
 80017e4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80017e6:	4b11      	ldr	r3, [pc, #68]	@ (800182c <SystemInit+0xec>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017ec:	4b0f      	ldr	r3, [pc, #60]	@ (800182c <SystemInit+0xec>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a0e      	ldr	r2, [pc, #56]	@ (800182c <SystemInit+0xec>)
 80017f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017f6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80017f8:	4b0c      	ldr	r3, [pc, #48]	@ (800182c <SystemInit+0xec>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80017fe:	4b10      	ldr	r3, [pc, #64]	@ (8001840 <SystemInit+0x100>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	4b10      	ldr	r3, [pc, #64]	@ (8001844 <SystemInit+0x104>)
 8001804:	4013      	ands	r3, r2
 8001806:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800180a:	d202      	bcs.n	8001812 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800180c:	4b0e      	ldr	r3, [pc, #56]	@ (8001848 <SystemInit+0x108>)
 800180e:	2201      	movs	r2, #1
 8001810:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001812:	4b0e      	ldr	r3, [pc, #56]	@ (800184c <SystemInit+0x10c>)
 8001814:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001818:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800181a:	bf00      	nop
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	e000ed00 	.word	0xe000ed00
 8001828:	52002000 	.word	0x52002000
 800182c:	58024400 	.word	0x58024400
 8001830:	eaf6ed7f 	.word	0xeaf6ed7f
 8001834:	02020200 	.word	0x02020200
 8001838:	01ff0000 	.word	0x01ff0000
 800183c:	01010280 	.word	0x01010280
 8001840:	5c001000 	.word	0x5c001000
 8001844:	ffff0000 	.word	0xffff0000
 8001848:	51008108 	.word	0x51008108
 800184c:	52004000 	.word	0x52004000

08001850 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001850:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001888 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001854:	f7ff ff74 	bl	8001740 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001858:	480c      	ldr	r0, [pc, #48]	@ (800188c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800185a:	490d      	ldr	r1, [pc, #52]	@ (8001890 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800185c:	4a0d      	ldr	r2, [pc, #52]	@ (8001894 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800185e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001860:	e002      	b.n	8001868 <LoopCopyDataInit>

08001862 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001862:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001864:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001866:	3304      	adds	r3, #4

08001868 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001868:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800186a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800186c:	d3f9      	bcc.n	8001862 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800186e:	4a0a      	ldr	r2, [pc, #40]	@ (8001898 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001870:	4c0a      	ldr	r4, [pc, #40]	@ (800189c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001872:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001874:	e001      	b.n	800187a <LoopFillZerobss>

08001876 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001876:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001878:	3204      	adds	r2, #4

0800187a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800187a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800187c:	d3fb      	bcc.n	8001876 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800187e:	f008 ffbb 	bl	800a7f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001882:	f7ff f959 	bl	8000b38 <main>
  bx  lr
 8001886:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001888:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800188c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001890:	24000068 	.word	0x24000068
  ldr r2, =_sidata
 8001894:	0800b278 	.word	0x0800b278
  ldr r2, =_sbss
 8001898:	24000068 	.word	0x24000068
  ldr r4, =_ebss
 800189c:	240003e4 	.word	0x240003e4

080018a0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018a0:	e7fe      	b.n	80018a0 <ADC3_IRQHandler>
	...

080018a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018aa:	2003      	movs	r0, #3
 80018ac:	f000 f98c 	bl	8001bc8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80018b0:	f005 fe08 	bl	80074c4 <HAL_RCC_GetSysClockFreq>
 80018b4:	4602      	mov	r2, r0
 80018b6:	4b15      	ldr	r3, [pc, #84]	@ (800190c <HAL_Init+0x68>)
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	0a1b      	lsrs	r3, r3, #8
 80018bc:	f003 030f 	and.w	r3, r3, #15
 80018c0:	4913      	ldr	r1, [pc, #76]	@ (8001910 <HAL_Init+0x6c>)
 80018c2:	5ccb      	ldrb	r3, [r1, r3]
 80018c4:	f003 031f 	and.w	r3, r3, #31
 80018c8:	fa22 f303 	lsr.w	r3, r2, r3
 80018cc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80018ce:	4b0f      	ldr	r3, [pc, #60]	@ (800190c <HAL_Init+0x68>)
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	f003 030f 	and.w	r3, r3, #15
 80018d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001910 <HAL_Init+0x6c>)
 80018d8:	5cd3      	ldrb	r3, [r2, r3]
 80018da:	f003 031f 	and.w	r3, r3, #31
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	fa22 f303 	lsr.w	r3, r2, r3
 80018e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001914 <HAL_Init+0x70>)
 80018e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80018e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001918 <HAL_Init+0x74>)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018ee:	200f      	movs	r0, #15
 80018f0:	f000 f814 	bl	800191c <HAL_InitTick>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e002      	b.n	8001904 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80018fe:	f7ff fc5f 	bl	80011c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	58024400 	.word	0x58024400
 8001910:	0800b1f4 	.word	0x0800b1f4
 8001914:	2400000c 	.word	0x2400000c
 8001918:	24000008 	.word	0x24000008

0800191c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001924:	4b15      	ldr	r3, [pc, #84]	@ (800197c <HAL_InitTick+0x60>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e021      	b.n	8001974 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001930:	4b13      	ldr	r3, [pc, #76]	@ (8001980 <HAL_InitTick+0x64>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	4b11      	ldr	r3, [pc, #68]	@ (800197c <HAL_InitTick+0x60>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	4619      	mov	r1, r3
 800193a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800193e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001942:	fbb2 f3f3 	udiv	r3, r2, r3
 8001946:	4618      	mov	r0, r3
 8001948:	f000 f971 	bl	8001c2e <HAL_SYSTICK_Config>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e00e      	b.n	8001974 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2b0f      	cmp	r3, #15
 800195a:	d80a      	bhi.n	8001972 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800195c:	2200      	movs	r2, #0
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	f04f 30ff 	mov.w	r0, #4294967295
 8001964:	f000 f93b 	bl	8001bde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001968:	4a06      	ldr	r2, [pc, #24]	@ (8001984 <HAL_InitTick+0x68>)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800196e:	2300      	movs	r3, #0
 8001970:	e000      	b.n	8001974 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
}
 8001974:	4618      	mov	r0, r3
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	24000014 	.word	0x24000014
 8001980:	24000008 	.word	0x24000008
 8001984:	24000010 	.word	0x24000010

08001988 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800198c:	4b06      	ldr	r3, [pc, #24]	@ (80019a8 <HAL_IncTick+0x20>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	461a      	mov	r2, r3
 8001992:	4b06      	ldr	r3, [pc, #24]	@ (80019ac <HAL_IncTick+0x24>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4413      	add	r3, r2
 8001998:	4a04      	ldr	r2, [pc, #16]	@ (80019ac <HAL_IncTick+0x24>)
 800199a:	6013      	str	r3, [r2, #0]
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	24000014 	.word	0x24000014
 80019ac:	24000298 	.word	0x24000298

080019b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return uwTick;
 80019b4:	4b03      	ldr	r3, [pc, #12]	@ (80019c4 <HAL_GetTick+0x14>)
 80019b6:	681b      	ldr	r3, [r3, #0]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	24000298 	.word	0x24000298

080019c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019d0:	f7ff ffee 	bl	80019b0 <HAL_GetTick>
 80019d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019e0:	d005      	beq.n	80019ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019e2:	4b0a      	ldr	r3, [pc, #40]	@ (8001a0c <HAL_Delay+0x44>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	461a      	mov	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	4413      	add	r3, r2
 80019ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019ee:	bf00      	nop
 80019f0:	f7ff ffde 	bl	80019b0 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d8f7      	bhi.n	80019f0 <HAL_Delay+0x28>
  {
  }
}
 8001a00:	bf00      	nop
 8001a02:	bf00      	nop
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	24000014 	.word	0x24000014

08001a10 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001a14:	4b03      	ldr	r3, [pc, #12]	@ (8001a24 <HAL_GetREVID+0x14>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	0c1b      	lsrs	r3, r3, #16
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	5c001000 	.word	0x5c001000

08001a28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a38:	4b0b      	ldr	r3, [pc, #44]	@ (8001a68 <__NVIC_SetPriorityGrouping+0x40>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a44:	4013      	ands	r3, r2
 8001a46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a50:	4b06      	ldr	r3, [pc, #24]	@ (8001a6c <__NVIC_SetPriorityGrouping+0x44>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a56:	4a04      	ldr	r2, [pc, #16]	@ (8001a68 <__NVIC_SetPriorityGrouping+0x40>)
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	60d3      	str	r3, [r2, #12]
}
 8001a5c:	bf00      	nop
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	e000ed00 	.word	0xe000ed00
 8001a6c:	05fa0000 	.word	0x05fa0000

08001a70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a74:	4b04      	ldr	r3, [pc, #16]	@ (8001a88 <__NVIC_GetPriorityGrouping+0x18>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	0a1b      	lsrs	r3, r3, #8
 8001a7a:	f003 0307 	and.w	r3, r3, #7
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	db0b      	blt.n	8001ab6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a9e:	88fb      	ldrh	r3, [r7, #6]
 8001aa0:	f003 021f 	and.w	r2, r3, #31
 8001aa4:	4907      	ldr	r1, [pc, #28]	@ (8001ac4 <__NVIC_EnableIRQ+0x38>)
 8001aa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aaa:	095b      	lsrs	r3, r3, #5
 8001aac:	2001      	movs	r0, #1
 8001aae:	fa00 f202 	lsl.w	r2, r0, r2
 8001ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	e000e100 	.word	0xe000e100

08001ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	6039      	str	r1, [r7, #0]
 8001ad2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ad4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	db0a      	blt.n	8001af2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	b2da      	uxtb	r2, r3
 8001ae0:	490c      	ldr	r1, [pc, #48]	@ (8001b14 <__NVIC_SetPriority+0x4c>)
 8001ae2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ae6:	0112      	lsls	r2, r2, #4
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	440b      	add	r3, r1
 8001aec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001af0:	e00a      	b.n	8001b08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	4908      	ldr	r1, [pc, #32]	@ (8001b18 <__NVIC_SetPriority+0x50>)
 8001af8:	88fb      	ldrh	r3, [r7, #6]
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	3b04      	subs	r3, #4
 8001b00:	0112      	lsls	r2, r2, #4
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	440b      	add	r3, r1
 8001b06:	761a      	strb	r2, [r3, #24]
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	e000e100 	.word	0xe000e100
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b089      	sub	sp, #36	@ 0x24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f1c3 0307 	rsb	r3, r3, #7
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	bf28      	it	cs
 8001b3a:	2304      	movcs	r3, #4
 8001b3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	3304      	adds	r3, #4
 8001b42:	2b06      	cmp	r3, #6
 8001b44:	d902      	bls.n	8001b4c <NVIC_EncodePriority+0x30>
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	3b03      	subs	r3, #3
 8001b4a:	e000      	b.n	8001b4e <NVIC_EncodePriority+0x32>
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b50:	f04f 32ff 	mov.w	r2, #4294967295
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43da      	mvns	r2, r3
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	401a      	ands	r2, r3
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b64:	f04f 31ff 	mov.w	r1, #4294967295
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6e:	43d9      	mvns	r1, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b74:	4313      	orrs	r3, r2
         );
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3724      	adds	r7, #36	@ 0x24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
	...

08001b84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b94:	d301      	bcc.n	8001b9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b96:	2301      	movs	r3, #1
 8001b98:	e00f      	b.n	8001bba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001bc4 <SysTick_Config+0x40>)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ba2:	210f      	movs	r1, #15
 8001ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba8:	f7ff ff8e 	bl	8001ac8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bac:	4b05      	ldr	r3, [pc, #20]	@ (8001bc4 <SysTick_Config+0x40>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bb2:	4b04      	ldr	r3, [pc, #16]	@ (8001bc4 <SysTick_Config+0x40>)
 8001bb4:	2207      	movs	r2, #7
 8001bb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	e000e010 	.word	0xe000e010

08001bc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f7ff ff29 	bl	8001a28 <__NVIC_SetPriorityGrouping>
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b086      	sub	sp, #24
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	4603      	mov	r3, r0
 8001be6:	60b9      	str	r1, [r7, #8]
 8001be8:	607a      	str	r2, [r7, #4]
 8001bea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bec:	f7ff ff40 	bl	8001a70 <__NVIC_GetPriorityGrouping>
 8001bf0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	68b9      	ldr	r1, [r7, #8]
 8001bf6:	6978      	ldr	r0, [r7, #20]
 8001bf8:	f7ff ff90 	bl	8001b1c <NVIC_EncodePriority>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c02:	4611      	mov	r1, r2
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff ff5f 	bl	8001ac8 <__NVIC_SetPriority>
}
 8001c0a:	bf00      	nop
 8001c0c:	3718      	adds	r7, #24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	4603      	mov	r3, r0
 8001c1a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff ff33 	bl	8001a8c <__NVIC_EnableIRQ>
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b082      	sub	sp, #8
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff ffa4 	bl	8001b84 <SysTick_Config>
 8001c3c:	4603      	mov	r3, r0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
	...

08001c48 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e069      	b.n	8001d2e <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d102      	bne.n	8001c6c <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7ff fac4 	bl	80011f4 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2202      	movs	r2, #2
 8001c70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d002      	beq.n	8001c82 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6819      	ldr	r1, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	4b2a      	ldr	r3, [pc, #168]	@ (8001d38 <HAL_DCMI_Init+0xf0>)
 8001c8e:	400b      	ands	r3, r1
 8001c90:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6819      	ldr	r1, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	695b      	ldr	r3, [r3, #20]
 8001ca0:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001ca6:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001cb2:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001cbe:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc4:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001cca:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd0:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001cd6:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	2b10      	cmp	r3, #16
 8001ce6:	d112      	bne.n	8001d0e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	7f1b      	ldrb	r3, [r3, #28]
 8001cec:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	7f5b      	ldrb	r3, [r3, #29]
 8001cf2:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001cf4:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	7f9b      	ldrb	r3, [r3, #30]
 8001cfa:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8001cfc:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	7fdb      	ldrb	r3, [r3, #31]
 8001d04:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8001d0a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001d0c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68da      	ldr	r2, [r3, #12]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f042 021e 	orr.w	r2, r2, #30
 8001d1c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	ffe0f007 	.word	0xffe0f007

08001d3c <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b088      	sub	sp, #32
 8001d40:	af02      	add	r7, sp, #8
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
 8001d48:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d101      	bne.n	8001d58 <HAL_DCMI_Start_DMA+0x1c>
 8001d54:	2302      	movs	r3, #2
 8001d56:	e0ab      	b.n	8001eb0 <HAL_DCMI_Start_DMA+0x174>
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2202      	movs	r2, #2
 8001d64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001d76:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 0202 	bic.w	r2, r2, #2
 8001d86:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6819      	ldr	r1, [r3, #0]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68ba      	ldr	r2, [r7, #8]
 8001d94:	430a      	orrs	r2, r1
 8001d96:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d9c:	4a46      	ldr	r2, [pc, #280]	@ (8001eb8 <HAL_DCMI_Start_DMA+0x17c>)
 8001d9e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001da4:	4a45      	ldr	r2, [pc, #276]	@ (8001ebc <HAL_DCMI_Start_DMA+0x180>)
 8001da6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dac:	2200      	movs	r2, #0
 8001dae:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2200      	movs	r2, #0
 8001db4:	639a      	str	r2, [r3, #56]	@ 0x38
  hdcmi->XferTransferNumber = 0;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2200      	movs	r2, #0
 8001dba:	641a      	str	r2, [r3, #64]	@ 0x40
  hdcmi->XferSize = 0;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdcmi->pBuffPtr = 0;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	645a      	str	r2, [r3, #68]	@ 0x44

  if (Length <= 0xFFFFU)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dce:	d219      	bcs.n	8001e04 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	3328      	adds	r3, #40	@ 0x28
 8001dda:	4619      	mov	r1, r3
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	f000 fd7a 	bl	80028d8 <HAL_DMA_Start_IT>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d055      	beq.n	8001e96 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2240      	movs	r2, #64	@ 0x40
 8001dee:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e055      	b.n	8001eb0 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e08:	4a2b      	ldr	r2, [pc, #172]	@ (8001eb8 <HAL_DCMI_Start_DMA+0x17c>)
 8001e0a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferSize = Length;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	63da      	str	r2, [r3, #60]	@ 0x3c
    hdcmi->pBuffPtr = pData;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8001e1e:	e009      	b.n	8001e34 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e24:	085a      	lsrs	r2, r3, #1
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	63da      	str	r2, [r3, #60]	@ 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e2e:	005a      	lsls	r2, r3, #1
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	639a      	str	r2, [r3, #56]	@ 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e3c:	d2f0      	bcs.n	8001e20 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e42:	1e9a      	subs	r2, r3, #2
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	4413      	add	r3, r2
 8001e5a:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	3328      	adds	r3, #40	@ 0x28
 8001e66:	4619      	mov	r1, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	f003 f811 	bl	8004e98 <HAL_DMAEx_MultiBufferStart_IT>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00c      	beq.n	8001e96 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2240      	movs	r2, #64	@ 0x40
 8001e80:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e00c      	b.n	8001eb0 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f042 0201 	orr.w	r2, r2, #1
 8001ea4:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3718      	adds	r7, #24
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	080020c1 	.word	0x080020c1
 8001ebc:	080021e7 	.word	0x080021e7

08001ec0 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8001ec8:	4b2b      	ldr	r3, [pc, #172]	@ (8001f78 <HAL_DCMI_Stop+0xb8>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a2b      	ldr	r2, [pc, #172]	@ (8001f7c <HAL_DCMI_Stop+0xbc>)
 8001ece:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed2:	0a5b      	lsrs	r3, r3, #9
 8001ed4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001ed8:	fb02 f303 	mul.w	r3, r2, r3
 8001edc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d101      	bne.n	8001ef0 <HAL_DCMI_Stop+0x30>
 8001eec:	2302      	movs	r3, #2
 8001eee:	e03f      	b.n	8001f70 <HAL_DCMI_Stop+0xb0>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2202      	movs	r2, #2
 8001efc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 0201 	bic.w	r2, r2, #1
 8001f0e:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	3b01      	subs	r3, #1
 8001f14:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d108      	bne.n	8001f2e <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f20:	f043 0220 	orr.w	r2, r3, #32
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	64da      	str	r2, [r3, #76]	@ 0x4c

      status = HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	72fb      	strb	r3, [r7, #11]
      break;
 8001f2c:	e006      	b.n	8001f3c <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1e9      	bne.n	8001f10 <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001f4a:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f50:	4618      	mov	r0, r3
 8001f52:	f000 ff2b 	bl	8002dac <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return status;
 8001f6e:	7afb      	ldrb	r3, [r7, #11]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	24000008 	.word	0x24000008
 8001f7c:	10624dd3 	.word	0x10624dd3

08001f80 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f003 0304 	and.w	r3, r3, #4
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d016      	beq.n	8001fc8 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2204      	movs	r2, #4
 8001fa0:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fa6:	f043 0202 	orr.w	r2, r3, #2
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2204      	movs	r2, #4
 8001fb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fba:	4a31      	ldr	r2, [pc, #196]	@ (8002080 <HAL_DCMI_IRQHandler+0x100>)
 8001fbc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f001 fa10 	bl	80033e8 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d016      	beq.n	8002000 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fde:	f043 0201 	orr.w	r2, r3, #1
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2204      	movs	r2, #4
 8001fea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ff2:	4a23      	ldr	r2, [pc, #140]	@ (8002080 <HAL_DCMI_IRQHandler+0x100>)
 8001ff4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f001 f9f4 	bl	80033e8 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f003 0310 	and.w	r3, r3, #16
 8002006:	2b00      	cmp	r3, #0
 8002008:	d006      	beq.n	8002018 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2210      	movs	r2, #16
 8002010:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f840 	bl	8002098 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f003 0308 	and.w	r3, r3, #8
 800201e:	2b00      	cmp	r3, #0
 8002020:	d006      	beq.n	8002030 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2208      	movs	r2, #8
 8002028:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f83e 	bl	80020ac <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	d01d      	beq.n	8002076 <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b02      	cmp	r3, #2
 8002046:	d107      	bne.n	8002058 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68da      	ldr	r2, [r3, #12]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 021e 	bic.w	r2, r2, #30
 8002056:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68da      	ldr	r2, [r3, #12]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 0201 	bic.w	r2, r2, #1
 8002066:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2201      	movs	r2, #1
 800206e:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f7fe fc61 	bl	8000938 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8002076:	bf00      	nop
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	080021e7 	.word	0x080021e7

08002084 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020cc:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d043      	beq.n	800215e <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020e2:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d118      	bne.n	8002122 <DCMI_DMAXferCplt+0x62>
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d015      	beq.n	8002122 <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002108:	00da      	lsls	r2, r3, #3
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	4413      	add	r3, r2
 800210e:	2200      	movs	r2, #0
 8002110:	4619      	mov	r1, r3
 8002112:	f003 fa1f 	bl	8005554 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800211a:	1e5a      	subs	r2, r3, #1
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002120:	e044      	b.n	80021ac <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d13c      	bne.n	80021ac <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002144:	00da      	lsls	r2, r3, #3
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	4413      	add	r3, r2
 800214a:	2201      	movs	r2, #1
 800214c:	4619      	mov	r1, r3
 800214e:	f003 fa01 	bl	8005554 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002156:	1e5a      	subs	r2, r3, #1
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	639a      	str	r2, [r3, #56]	@ 0x38
 800215c:	e026      	b.n	80021ac <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d006      	beq.n	800217c <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	e017      	b.n	80021ac <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d10f      	bne.n	80021ac <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002190:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002196:	0099      	lsls	r1, r3, #2
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68ba      	ldr	r2, [r7, #8]
 80021a0:	440a      	add	r2, r1
 80021a2:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	639a      	str	r2, [r3, #56]	@ 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d112      	bne.n	80021de <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68da      	ldr	r2, [r3, #12]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f042 0201 	orr.w	r2, r2, #1
 80021c6:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d103      	bne.n	80021de <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
  }
}
 80021de:	bf00      	nop
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b084      	sub	sp, #16
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021f2:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d009      	beq.n	8002212 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800220a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f7ff ff36 	bl	8002084 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8002218:	bf00      	nop
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002228:	f7ff fbc2 	bl	80019b0 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e316      	b.n	8002866 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a66      	ldr	r2, [pc, #408]	@ (80023d8 <HAL_DMA_Init+0x1b8>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d04a      	beq.n	80022d8 <HAL_DMA_Init+0xb8>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a65      	ldr	r2, [pc, #404]	@ (80023dc <HAL_DMA_Init+0x1bc>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d045      	beq.n	80022d8 <HAL_DMA_Init+0xb8>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a63      	ldr	r2, [pc, #396]	@ (80023e0 <HAL_DMA_Init+0x1c0>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d040      	beq.n	80022d8 <HAL_DMA_Init+0xb8>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a62      	ldr	r2, [pc, #392]	@ (80023e4 <HAL_DMA_Init+0x1c4>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d03b      	beq.n	80022d8 <HAL_DMA_Init+0xb8>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a60      	ldr	r2, [pc, #384]	@ (80023e8 <HAL_DMA_Init+0x1c8>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d036      	beq.n	80022d8 <HAL_DMA_Init+0xb8>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a5f      	ldr	r2, [pc, #380]	@ (80023ec <HAL_DMA_Init+0x1cc>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d031      	beq.n	80022d8 <HAL_DMA_Init+0xb8>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a5d      	ldr	r2, [pc, #372]	@ (80023f0 <HAL_DMA_Init+0x1d0>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d02c      	beq.n	80022d8 <HAL_DMA_Init+0xb8>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a5c      	ldr	r2, [pc, #368]	@ (80023f4 <HAL_DMA_Init+0x1d4>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d027      	beq.n	80022d8 <HAL_DMA_Init+0xb8>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a5a      	ldr	r2, [pc, #360]	@ (80023f8 <HAL_DMA_Init+0x1d8>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d022      	beq.n	80022d8 <HAL_DMA_Init+0xb8>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a59      	ldr	r2, [pc, #356]	@ (80023fc <HAL_DMA_Init+0x1dc>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d01d      	beq.n	80022d8 <HAL_DMA_Init+0xb8>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a57      	ldr	r2, [pc, #348]	@ (8002400 <HAL_DMA_Init+0x1e0>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d018      	beq.n	80022d8 <HAL_DMA_Init+0xb8>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a56      	ldr	r2, [pc, #344]	@ (8002404 <HAL_DMA_Init+0x1e4>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d013      	beq.n	80022d8 <HAL_DMA_Init+0xb8>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a54      	ldr	r2, [pc, #336]	@ (8002408 <HAL_DMA_Init+0x1e8>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d00e      	beq.n	80022d8 <HAL_DMA_Init+0xb8>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a53      	ldr	r2, [pc, #332]	@ (800240c <HAL_DMA_Init+0x1ec>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d009      	beq.n	80022d8 <HAL_DMA_Init+0xb8>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a51      	ldr	r2, [pc, #324]	@ (8002410 <HAL_DMA_Init+0x1f0>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d004      	beq.n	80022d8 <HAL_DMA_Init+0xb8>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a50      	ldr	r2, [pc, #320]	@ (8002414 <HAL_DMA_Init+0x1f4>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d101      	bne.n	80022dc <HAL_DMA_Init+0xbc>
 80022d8:	2301      	movs	r3, #1
 80022da:	e000      	b.n	80022de <HAL_DMA_Init+0xbe>
 80022dc:	2300      	movs	r3, #0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f000 813b 	beq.w	800255a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2202      	movs	r2, #2
 80022e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a37      	ldr	r2, [pc, #220]	@ (80023d8 <HAL_DMA_Init+0x1b8>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d04a      	beq.n	8002394 <HAL_DMA_Init+0x174>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a36      	ldr	r2, [pc, #216]	@ (80023dc <HAL_DMA_Init+0x1bc>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d045      	beq.n	8002394 <HAL_DMA_Init+0x174>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a34      	ldr	r2, [pc, #208]	@ (80023e0 <HAL_DMA_Init+0x1c0>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d040      	beq.n	8002394 <HAL_DMA_Init+0x174>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a33      	ldr	r2, [pc, #204]	@ (80023e4 <HAL_DMA_Init+0x1c4>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d03b      	beq.n	8002394 <HAL_DMA_Init+0x174>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a31      	ldr	r2, [pc, #196]	@ (80023e8 <HAL_DMA_Init+0x1c8>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d036      	beq.n	8002394 <HAL_DMA_Init+0x174>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a30      	ldr	r2, [pc, #192]	@ (80023ec <HAL_DMA_Init+0x1cc>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d031      	beq.n	8002394 <HAL_DMA_Init+0x174>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a2e      	ldr	r2, [pc, #184]	@ (80023f0 <HAL_DMA_Init+0x1d0>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d02c      	beq.n	8002394 <HAL_DMA_Init+0x174>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a2d      	ldr	r2, [pc, #180]	@ (80023f4 <HAL_DMA_Init+0x1d4>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d027      	beq.n	8002394 <HAL_DMA_Init+0x174>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a2b      	ldr	r2, [pc, #172]	@ (80023f8 <HAL_DMA_Init+0x1d8>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d022      	beq.n	8002394 <HAL_DMA_Init+0x174>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a2a      	ldr	r2, [pc, #168]	@ (80023fc <HAL_DMA_Init+0x1dc>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d01d      	beq.n	8002394 <HAL_DMA_Init+0x174>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a28      	ldr	r2, [pc, #160]	@ (8002400 <HAL_DMA_Init+0x1e0>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d018      	beq.n	8002394 <HAL_DMA_Init+0x174>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a27      	ldr	r2, [pc, #156]	@ (8002404 <HAL_DMA_Init+0x1e4>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d013      	beq.n	8002394 <HAL_DMA_Init+0x174>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a25      	ldr	r2, [pc, #148]	@ (8002408 <HAL_DMA_Init+0x1e8>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d00e      	beq.n	8002394 <HAL_DMA_Init+0x174>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a24      	ldr	r2, [pc, #144]	@ (800240c <HAL_DMA_Init+0x1ec>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d009      	beq.n	8002394 <HAL_DMA_Init+0x174>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a22      	ldr	r2, [pc, #136]	@ (8002410 <HAL_DMA_Init+0x1f0>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d004      	beq.n	8002394 <HAL_DMA_Init+0x174>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a21      	ldr	r2, [pc, #132]	@ (8002414 <HAL_DMA_Init+0x1f4>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d108      	bne.n	80023a6 <HAL_DMA_Init+0x186>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 0201 	bic.w	r2, r2, #1
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	e007      	b.n	80023b6 <HAL_DMA_Init+0x196>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 0201 	bic.w	r2, r2, #1
 80023b4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80023b6:	e02f      	b.n	8002418 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023b8:	f7ff fafa 	bl	80019b0 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b05      	cmp	r3, #5
 80023c4:	d928      	bls.n	8002418 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2220      	movs	r2, #32
 80023ca:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2203      	movs	r2, #3
 80023d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e246      	b.n	8002866 <HAL_DMA_Init+0x646>
 80023d8:	40020010 	.word	0x40020010
 80023dc:	40020028 	.word	0x40020028
 80023e0:	40020040 	.word	0x40020040
 80023e4:	40020058 	.word	0x40020058
 80023e8:	40020070 	.word	0x40020070
 80023ec:	40020088 	.word	0x40020088
 80023f0:	400200a0 	.word	0x400200a0
 80023f4:	400200b8 	.word	0x400200b8
 80023f8:	40020410 	.word	0x40020410
 80023fc:	40020428 	.word	0x40020428
 8002400:	40020440 	.word	0x40020440
 8002404:	40020458 	.word	0x40020458
 8002408:	40020470 	.word	0x40020470
 800240c:	40020488 	.word	0x40020488
 8002410:	400204a0 	.word	0x400204a0
 8002414:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1c8      	bne.n	80023b8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	4b83      	ldr	r3, [pc, #524]	@ (8002640 <HAL_DMA_Init+0x420>)
 8002432:	4013      	ands	r3, r2
 8002434:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800243e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800244a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002456:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	4313      	orrs	r3, r2
 8002462:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002468:	2b04      	cmp	r3, #4
 800246a:	d107      	bne.n	800247c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002474:	4313      	orrs	r3, r2
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	4313      	orrs	r3, r2
 800247a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800247c:	4b71      	ldr	r3, [pc, #452]	@ (8002644 <HAL_DMA_Init+0x424>)
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	4b71      	ldr	r3, [pc, #452]	@ (8002648 <HAL_DMA_Init+0x428>)
 8002482:	4013      	ands	r3, r2
 8002484:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002488:	d328      	bcc.n	80024dc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	2b28      	cmp	r3, #40	@ 0x28
 8002490:	d903      	bls.n	800249a <HAL_DMA_Init+0x27a>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b2e      	cmp	r3, #46	@ 0x2e
 8002498:	d917      	bls.n	80024ca <HAL_DMA_Init+0x2aa>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2b3e      	cmp	r3, #62	@ 0x3e
 80024a0:	d903      	bls.n	80024aa <HAL_DMA_Init+0x28a>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2b42      	cmp	r3, #66	@ 0x42
 80024a8:	d90f      	bls.n	80024ca <HAL_DMA_Init+0x2aa>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	2b46      	cmp	r3, #70	@ 0x46
 80024b0:	d903      	bls.n	80024ba <HAL_DMA_Init+0x29a>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b48      	cmp	r3, #72	@ 0x48
 80024b8:	d907      	bls.n	80024ca <HAL_DMA_Init+0x2aa>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2b4e      	cmp	r3, #78	@ 0x4e
 80024c0:	d905      	bls.n	80024ce <HAL_DMA_Init+0x2ae>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2b52      	cmp	r3, #82	@ 0x52
 80024c8:	d801      	bhi.n	80024ce <HAL_DMA_Init+0x2ae>
 80024ca:	2301      	movs	r3, #1
 80024cc:	e000      	b.n	80024d0 <HAL_DMA_Init+0x2b0>
 80024ce:	2300      	movs	r3, #0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024da:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	f023 0307 	bic.w	r3, r3, #7
 80024f2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002502:	2b04      	cmp	r3, #4
 8002504:	d117      	bne.n	8002536 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	4313      	orrs	r3, r2
 800250e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00e      	beq.n	8002536 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f002 fb33 	bl	8004b84 <DMA_CheckFifoParam>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d008      	beq.n	8002536 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2240      	movs	r2, #64	@ 0x40
 8002528:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e197      	b.n	8002866 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f002 fa6e 	bl	8004a20 <DMA_CalcBaseAndBitshift>
 8002544:	4603      	mov	r3, r0
 8002546:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800254c:	f003 031f 	and.w	r3, r3, #31
 8002550:	223f      	movs	r2, #63	@ 0x3f
 8002552:	409a      	lsls	r2, r3
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	609a      	str	r2, [r3, #8]
 8002558:	e0cd      	b.n	80026f6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a3b      	ldr	r2, [pc, #236]	@ (800264c <HAL_DMA_Init+0x42c>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d022      	beq.n	80025aa <HAL_DMA_Init+0x38a>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a39      	ldr	r2, [pc, #228]	@ (8002650 <HAL_DMA_Init+0x430>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d01d      	beq.n	80025aa <HAL_DMA_Init+0x38a>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a38      	ldr	r2, [pc, #224]	@ (8002654 <HAL_DMA_Init+0x434>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d018      	beq.n	80025aa <HAL_DMA_Init+0x38a>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a36      	ldr	r2, [pc, #216]	@ (8002658 <HAL_DMA_Init+0x438>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d013      	beq.n	80025aa <HAL_DMA_Init+0x38a>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a35      	ldr	r2, [pc, #212]	@ (800265c <HAL_DMA_Init+0x43c>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d00e      	beq.n	80025aa <HAL_DMA_Init+0x38a>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a33      	ldr	r2, [pc, #204]	@ (8002660 <HAL_DMA_Init+0x440>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d009      	beq.n	80025aa <HAL_DMA_Init+0x38a>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a32      	ldr	r2, [pc, #200]	@ (8002664 <HAL_DMA_Init+0x444>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d004      	beq.n	80025aa <HAL_DMA_Init+0x38a>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a30      	ldr	r2, [pc, #192]	@ (8002668 <HAL_DMA_Init+0x448>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d101      	bne.n	80025ae <HAL_DMA_Init+0x38e>
 80025aa:	2301      	movs	r3, #1
 80025ac:	e000      	b.n	80025b0 <HAL_DMA_Init+0x390>
 80025ae:	2300      	movs	r3, #0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f000 8097 	beq.w	80026e4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a24      	ldr	r2, [pc, #144]	@ (800264c <HAL_DMA_Init+0x42c>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d021      	beq.n	8002604 <HAL_DMA_Init+0x3e4>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a22      	ldr	r2, [pc, #136]	@ (8002650 <HAL_DMA_Init+0x430>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d01c      	beq.n	8002604 <HAL_DMA_Init+0x3e4>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a21      	ldr	r2, [pc, #132]	@ (8002654 <HAL_DMA_Init+0x434>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d017      	beq.n	8002604 <HAL_DMA_Init+0x3e4>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a1f      	ldr	r2, [pc, #124]	@ (8002658 <HAL_DMA_Init+0x438>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d012      	beq.n	8002604 <HAL_DMA_Init+0x3e4>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a1e      	ldr	r2, [pc, #120]	@ (800265c <HAL_DMA_Init+0x43c>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d00d      	beq.n	8002604 <HAL_DMA_Init+0x3e4>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a1c      	ldr	r2, [pc, #112]	@ (8002660 <HAL_DMA_Init+0x440>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d008      	beq.n	8002604 <HAL_DMA_Init+0x3e4>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a1b      	ldr	r2, [pc, #108]	@ (8002664 <HAL_DMA_Init+0x444>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d003      	beq.n	8002604 <HAL_DMA_Init+0x3e4>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a19      	ldr	r2, [pc, #100]	@ (8002668 <HAL_DMA_Init+0x448>)
 8002602:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2202      	movs	r2, #2
 8002608:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	4b13      	ldr	r3, [pc, #76]	@ (800266c <HAL_DMA_Init+0x44c>)
 8002620:	4013      	ands	r3, r2
 8002622:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	2b40      	cmp	r3, #64	@ 0x40
 800262a:	d021      	beq.n	8002670 <HAL_DMA_Init+0x450>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	2b80      	cmp	r3, #128	@ 0x80
 8002632:	d102      	bne.n	800263a <HAL_DMA_Init+0x41a>
 8002634:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002638:	e01b      	b.n	8002672 <HAL_DMA_Init+0x452>
 800263a:	2300      	movs	r3, #0
 800263c:	e019      	b.n	8002672 <HAL_DMA_Init+0x452>
 800263e:	bf00      	nop
 8002640:	fe10803f 	.word	0xfe10803f
 8002644:	5c001000 	.word	0x5c001000
 8002648:	ffff0000 	.word	0xffff0000
 800264c:	58025408 	.word	0x58025408
 8002650:	5802541c 	.word	0x5802541c
 8002654:	58025430 	.word	0x58025430
 8002658:	58025444 	.word	0x58025444
 800265c:	58025458 	.word	0x58025458
 8002660:	5802546c 	.word	0x5802546c
 8002664:	58025480 	.word	0x58025480
 8002668:	58025494 	.word	0x58025494
 800266c:	fffe000f 	.word	0xfffe000f
 8002670:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	68d2      	ldr	r2, [r2, #12]
 8002676:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002678:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002680:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002688:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002690:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002698:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80026a0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	461a      	mov	r2, r3
 80026b6:	4b6e      	ldr	r3, [pc, #440]	@ (8002870 <HAL_DMA_Init+0x650>)
 80026b8:	4413      	add	r3, r2
 80026ba:	4a6e      	ldr	r2, [pc, #440]	@ (8002874 <HAL_DMA_Init+0x654>)
 80026bc:	fba2 2303 	umull	r2, r3, r2, r3
 80026c0:	091b      	lsrs	r3, r3, #4
 80026c2:	009a      	lsls	r2, r3, #2
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f002 f9a9 	bl	8004a20 <DMA_CalcBaseAndBitshift>
 80026ce:	4603      	mov	r3, r0
 80026d0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026d6:	f003 031f 	and.w	r3, r3, #31
 80026da:	2201      	movs	r2, #1
 80026dc:	409a      	lsls	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	e008      	b.n	80026f6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2240      	movs	r2, #64	@ 0x40
 80026e8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2203      	movs	r2, #3
 80026ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e0b7      	b.n	8002866 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a5f      	ldr	r2, [pc, #380]	@ (8002878 <HAL_DMA_Init+0x658>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d072      	beq.n	80027e6 <HAL_DMA_Init+0x5c6>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a5d      	ldr	r2, [pc, #372]	@ (800287c <HAL_DMA_Init+0x65c>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d06d      	beq.n	80027e6 <HAL_DMA_Init+0x5c6>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a5c      	ldr	r2, [pc, #368]	@ (8002880 <HAL_DMA_Init+0x660>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d068      	beq.n	80027e6 <HAL_DMA_Init+0x5c6>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a5a      	ldr	r2, [pc, #360]	@ (8002884 <HAL_DMA_Init+0x664>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d063      	beq.n	80027e6 <HAL_DMA_Init+0x5c6>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a59      	ldr	r2, [pc, #356]	@ (8002888 <HAL_DMA_Init+0x668>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d05e      	beq.n	80027e6 <HAL_DMA_Init+0x5c6>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a57      	ldr	r2, [pc, #348]	@ (800288c <HAL_DMA_Init+0x66c>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d059      	beq.n	80027e6 <HAL_DMA_Init+0x5c6>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a56      	ldr	r2, [pc, #344]	@ (8002890 <HAL_DMA_Init+0x670>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d054      	beq.n	80027e6 <HAL_DMA_Init+0x5c6>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a54      	ldr	r2, [pc, #336]	@ (8002894 <HAL_DMA_Init+0x674>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d04f      	beq.n	80027e6 <HAL_DMA_Init+0x5c6>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a53      	ldr	r2, [pc, #332]	@ (8002898 <HAL_DMA_Init+0x678>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d04a      	beq.n	80027e6 <HAL_DMA_Init+0x5c6>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a51      	ldr	r2, [pc, #324]	@ (800289c <HAL_DMA_Init+0x67c>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d045      	beq.n	80027e6 <HAL_DMA_Init+0x5c6>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a50      	ldr	r2, [pc, #320]	@ (80028a0 <HAL_DMA_Init+0x680>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d040      	beq.n	80027e6 <HAL_DMA_Init+0x5c6>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a4e      	ldr	r2, [pc, #312]	@ (80028a4 <HAL_DMA_Init+0x684>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d03b      	beq.n	80027e6 <HAL_DMA_Init+0x5c6>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a4d      	ldr	r2, [pc, #308]	@ (80028a8 <HAL_DMA_Init+0x688>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d036      	beq.n	80027e6 <HAL_DMA_Init+0x5c6>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a4b      	ldr	r2, [pc, #300]	@ (80028ac <HAL_DMA_Init+0x68c>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d031      	beq.n	80027e6 <HAL_DMA_Init+0x5c6>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a4a      	ldr	r2, [pc, #296]	@ (80028b0 <HAL_DMA_Init+0x690>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d02c      	beq.n	80027e6 <HAL_DMA_Init+0x5c6>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a48      	ldr	r2, [pc, #288]	@ (80028b4 <HAL_DMA_Init+0x694>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d027      	beq.n	80027e6 <HAL_DMA_Init+0x5c6>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a47      	ldr	r2, [pc, #284]	@ (80028b8 <HAL_DMA_Init+0x698>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d022      	beq.n	80027e6 <HAL_DMA_Init+0x5c6>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a45      	ldr	r2, [pc, #276]	@ (80028bc <HAL_DMA_Init+0x69c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d01d      	beq.n	80027e6 <HAL_DMA_Init+0x5c6>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a44      	ldr	r2, [pc, #272]	@ (80028c0 <HAL_DMA_Init+0x6a0>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d018      	beq.n	80027e6 <HAL_DMA_Init+0x5c6>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a42      	ldr	r2, [pc, #264]	@ (80028c4 <HAL_DMA_Init+0x6a4>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d013      	beq.n	80027e6 <HAL_DMA_Init+0x5c6>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a41      	ldr	r2, [pc, #260]	@ (80028c8 <HAL_DMA_Init+0x6a8>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d00e      	beq.n	80027e6 <HAL_DMA_Init+0x5c6>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a3f      	ldr	r2, [pc, #252]	@ (80028cc <HAL_DMA_Init+0x6ac>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d009      	beq.n	80027e6 <HAL_DMA_Init+0x5c6>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a3e      	ldr	r2, [pc, #248]	@ (80028d0 <HAL_DMA_Init+0x6b0>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d004      	beq.n	80027e6 <HAL_DMA_Init+0x5c6>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a3c      	ldr	r2, [pc, #240]	@ (80028d4 <HAL_DMA_Init+0x6b4>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d101      	bne.n	80027ea <HAL_DMA_Init+0x5ca>
 80027e6:	2301      	movs	r3, #1
 80027e8:	e000      	b.n	80027ec <HAL_DMA_Init+0x5cc>
 80027ea:	2300      	movs	r3, #0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d032      	beq.n	8002856 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f002 fa43 	bl	8004c7c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	2b80      	cmp	r3, #128	@ 0x80
 80027fc:	d102      	bne.n	8002804 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800280c:	b2d2      	uxtb	r2, r2
 800280e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002818:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d010      	beq.n	8002844 <HAL_DMA_Init+0x624>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	2b08      	cmp	r3, #8
 8002828:	d80c      	bhi.n	8002844 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f002 fac0 	bl	8004db0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	e008      	b.n	8002856 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3718      	adds	r7, #24
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	a7fdabf8 	.word	0xa7fdabf8
 8002874:	cccccccd 	.word	0xcccccccd
 8002878:	40020010 	.word	0x40020010
 800287c:	40020028 	.word	0x40020028
 8002880:	40020040 	.word	0x40020040
 8002884:	40020058 	.word	0x40020058
 8002888:	40020070 	.word	0x40020070
 800288c:	40020088 	.word	0x40020088
 8002890:	400200a0 	.word	0x400200a0
 8002894:	400200b8 	.word	0x400200b8
 8002898:	40020410 	.word	0x40020410
 800289c:	40020428 	.word	0x40020428
 80028a0:	40020440 	.word	0x40020440
 80028a4:	40020458 	.word	0x40020458
 80028a8:	40020470 	.word	0x40020470
 80028ac:	40020488 	.word	0x40020488
 80028b0:	400204a0 	.word	0x400204a0
 80028b4:	400204b8 	.word	0x400204b8
 80028b8:	58025408 	.word	0x58025408
 80028bc:	5802541c 	.word	0x5802541c
 80028c0:	58025430 	.word	0x58025430
 80028c4:	58025444 	.word	0x58025444
 80028c8:	58025458 	.word	0x58025458
 80028cc:	5802546c 	.word	0x5802546c
 80028d0:	58025480 	.word	0x58025480
 80028d4:	58025494 	.word	0x58025494

080028d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
 80028e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028e6:	2300      	movs	r3, #0
 80028e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e226      	b.n	8002d42 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d101      	bne.n	8002902 <HAL_DMA_Start_IT+0x2a>
 80028fe:	2302      	movs	r3, #2
 8002900:	e21f      	b.n	8002d42 <HAL_DMA_Start_IT+0x46a>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b01      	cmp	r3, #1
 8002914:	f040 820a 	bne.w	8002d2c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2202      	movs	r2, #2
 800291c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a68      	ldr	r2, [pc, #416]	@ (8002acc <HAL_DMA_Start_IT+0x1f4>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d04a      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a66      	ldr	r2, [pc, #408]	@ (8002ad0 <HAL_DMA_Start_IT+0x1f8>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d045      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a65      	ldr	r2, [pc, #404]	@ (8002ad4 <HAL_DMA_Start_IT+0x1fc>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d040      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a63      	ldr	r2, [pc, #396]	@ (8002ad8 <HAL_DMA_Start_IT+0x200>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d03b      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a62      	ldr	r2, [pc, #392]	@ (8002adc <HAL_DMA_Start_IT+0x204>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d036      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a60      	ldr	r2, [pc, #384]	@ (8002ae0 <HAL_DMA_Start_IT+0x208>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d031      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a5f      	ldr	r2, [pc, #380]	@ (8002ae4 <HAL_DMA_Start_IT+0x20c>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d02c      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a5d      	ldr	r2, [pc, #372]	@ (8002ae8 <HAL_DMA_Start_IT+0x210>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d027      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a5c      	ldr	r2, [pc, #368]	@ (8002aec <HAL_DMA_Start_IT+0x214>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d022      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a5a      	ldr	r2, [pc, #360]	@ (8002af0 <HAL_DMA_Start_IT+0x218>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d01d      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a59      	ldr	r2, [pc, #356]	@ (8002af4 <HAL_DMA_Start_IT+0x21c>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d018      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a57      	ldr	r2, [pc, #348]	@ (8002af8 <HAL_DMA_Start_IT+0x220>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d013      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a56      	ldr	r2, [pc, #344]	@ (8002afc <HAL_DMA_Start_IT+0x224>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d00e      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a54      	ldr	r2, [pc, #336]	@ (8002b00 <HAL_DMA_Start_IT+0x228>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d009      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a53      	ldr	r2, [pc, #332]	@ (8002b04 <HAL_DMA_Start_IT+0x22c>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d004      	beq.n	80029c6 <HAL_DMA_Start_IT+0xee>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a51      	ldr	r2, [pc, #324]	@ (8002b08 <HAL_DMA_Start_IT+0x230>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d108      	bne.n	80029d8 <HAL_DMA_Start_IT+0x100>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 0201 	bic.w	r2, r2, #1
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	e007      	b.n	80029e8 <HAL_DMA_Start_IT+0x110>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 0201 	bic.w	r2, r2, #1
 80029e6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	68b9      	ldr	r1, [r7, #8]
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f001 fe6a 	bl	80046c8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a34      	ldr	r2, [pc, #208]	@ (8002acc <HAL_DMA_Start_IT+0x1f4>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d04a      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a33      	ldr	r2, [pc, #204]	@ (8002ad0 <HAL_DMA_Start_IT+0x1f8>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d045      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a31      	ldr	r2, [pc, #196]	@ (8002ad4 <HAL_DMA_Start_IT+0x1fc>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d040      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a30      	ldr	r2, [pc, #192]	@ (8002ad8 <HAL_DMA_Start_IT+0x200>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d03b      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a2e      	ldr	r2, [pc, #184]	@ (8002adc <HAL_DMA_Start_IT+0x204>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d036      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a2d      	ldr	r2, [pc, #180]	@ (8002ae0 <HAL_DMA_Start_IT+0x208>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d031      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a2b      	ldr	r2, [pc, #172]	@ (8002ae4 <HAL_DMA_Start_IT+0x20c>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d02c      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a2a      	ldr	r2, [pc, #168]	@ (8002ae8 <HAL_DMA_Start_IT+0x210>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d027      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a28      	ldr	r2, [pc, #160]	@ (8002aec <HAL_DMA_Start_IT+0x214>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d022      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a27      	ldr	r2, [pc, #156]	@ (8002af0 <HAL_DMA_Start_IT+0x218>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d01d      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a25      	ldr	r2, [pc, #148]	@ (8002af4 <HAL_DMA_Start_IT+0x21c>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d018      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a24      	ldr	r2, [pc, #144]	@ (8002af8 <HAL_DMA_Start_IT+0x220>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d013      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a22      	ldr	r2, [pc, #136]	@ (8002afc <HAL_DMA_Start_IT+0x224>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d00e      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a21      	ldr	r2, [pc, #132]	@ (8002b00 <HAL_DMA_Start_IT+0x228>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d009      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a1f      	ldr	r2, [pc, #124]	@ (8002b04 <HAL_DMA_Start_IT+0x22c>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d004      	beq.n	8002a94 <HAL_DMA_Start_IT+0x1bc>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a1e      	ldr	r2, [pc, #120]	@ (8002b08 <HAL_DMA_Start_IT+0x230>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d101      	bne.n	8002a98 <HAL_DMA_Start_IT+0x1c0>
 8002a94:	2301      	movs	r3, #1
 8002a96:	e000      	b.n	8002a9a <HAL_DMA_Start_IT+0x1c2>
 8002a98:	2300      	movs	r3, #0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d036      	beq.n	8002b0c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f023 021e 	bic.w	r2, r3, #30
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f042 0216 	orr.w	r2, r2, #22
 8002ab0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d03e      	beq.n	8002b38 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f042 0208 	orr.w	r2, r2, #8
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	e035      	b.n	8002b38 <HAL_DMA_Start_IT+0x260>
 8002acc:	40020010 	.word	0x40020010
 8002ad0:	40020028 	.word	0x40020028
 8002ad4:	40020040 	.word	0x40020040
 8002ad8:	40020058 	.word	0x40020058
 8002adc:	40020070 	.word	0x40020070
 8002ae0:	40020088 	.word	0x40020088
 8002ae4:	400200a0 	.word	0x400200a0
 8002ae8:	400200b8 	.word	0x400200b8
 8002aec:	40020410 	.word	0x40020410
 8002af0:	40020428 	.word	0x40020428
 8002af4:	40020440 	.word	0x40020440
 8002af8:	40020458 	.word	0x40020458
 8002afc:	40020470 	.word	0x40020470
 8002b00:	40020488 	.word	0x40020488
 8002b04:	400204a0 	.word	0x400204a0
 8002b08:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f023 020e 	bic.w	r2, r3, #14
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 020a 	orr.w	r2, r2, #10
 8002b1e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d007      	beq.n	8002b38 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f042 0204 	orr.w	r2, r2, #4
 8002b36:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a83      	ldr	r2, [pc, #524]	@ (8002d4c <HAL_DMA_Start_IT+0x474>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d072      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a82      	ldr	r2, [pc, #520]	@ (8002d50 <HAL_DMA_Start_IT+0x478>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d06d      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a80      	ldr	r2, [pc, #512]	@ (8002d54 <HAL_DMA_Start_IT+0x47c>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d068      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a7f      	ldr	r2, [pc, #508]	@ (8002d58 <HAL_DMA_Start_IT+0x480>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d063      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a7d      	ldr	r2, [pc, #500]	@ (8002d5c <HAL_DMA_Start_IT+0x484>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d05e      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a7c      	ldr	r2, [pc, #496]	@ (8002d60 <HAL_DMA_Start_IT+0x488>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d059      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a7a      	ldr	r2, [pc, #488]	@ (8002d64 <HAL_DMA_Start_IT+0x48c>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d054      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a79      	ldr	r2, [pc, #484]	@ (8002d68 <HAL_DMA_Start_IT+0x490>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d04f      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a77      	ldr	r2, [pc, #476]	@ (8002d6c <HAL_DMA_Start_IT+0x494>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d04a      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a76      	ldr	r2, [pc, #472]	@ (8002d70 <HAL_DMA_Start_IT+0x498>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d045      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a74      	ldr	r2, [pc, #464]	@ (8002d74 <HAL_DMA_Start_IT+0x49c>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d040      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a73      	ldr	r2, [pc, #460]	@ (8002d78 <HAL_DMA_Start_IT+0x4a0>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d03b      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a71      	ldr	r2, [pc, #452]	@ (8002d7c <HAL_DMA_Start_IT+0x4a4>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d036      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a70      	ldr	r2, [pc, #448]	@ (8002d80 <HAL_DMA_Start_IT+0x4a8>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d031      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a6e      	ldr	r2, [pc, #440]	@ (8002d84 <HAL_DMA_Start_IT+0x4ac>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d02c      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a6d      	ldr	r2, [pc, #436]	@ (8002d88 <HAL_DMA_Start_IT+0x4b0>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d027      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a6b      	ldr	r2, [pc, #428]	@ (8002d8c <HAL_DMA_Start_IT+0x4b4>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d022      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a6a      	ldr	r2, [pc, #424]	@ (8002d90 <HAL_DMA_Start_IT+0x4b8>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d01d      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a68      	ldr	r2, [pc, #416]	@ (8002d94 <HAL_DMA_Start_IT+0x4bc>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d018      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a67      	ldr	r2, [pc, #412]	@ (8002d98 <HAL_DMA_Start_IT+0x4c0>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d013      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a65      	ldr	r2, [pc, #404]	@ (8002d9c <HAL_DMA_Start_IT+0x4c4>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d00e      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a64      	ldr	r2, [pc, #400]	@ (8002da0 <HAL_DMA_Start_IT+0x4c8>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d009      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a62      	ldr	r2, [pc, #392]	@ (8002da4 <HAL_DMA_Start_IT+0x4cc>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d004      	beq.n	8002c28 <HAL_DMA_Start_IT+0x350>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a61      	ldr	r2, [pc, #388]	@ (8002da8 <HAL_DMA_Start_IT+0x4d0>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d101      	bne.n	8002c2c <HAL_DMA_Start_IT+0x354>
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e000      	b.n	8002c2e <HAL_DMA_Start_IT+0x356>
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d01a      	beq.n	8002c68 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d007      	beq.n	8002c50 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c4e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d007      	beq.n	8002c68 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c62:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c66:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a37      	ldr	r2, [pc, #220]	@ (8002d4c <HAL_DMA_Start_IT+0x474>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d04a      	beq.n	8002d08 <HAL_DMA_Start_IT+0x430>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a36      	ldr	r2, [pc, #216]	@ (8002d50 <HAL_DMA_Start_IT+0x478>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d045      	beq.n	8002d08 <HAL_DMA_Start_IT+0x430>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a34      	ldr	r2, [pc, #208]	@ (8002d54 <HAL_DMA_Start_IT+0x47c>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d040      	beq.n	8002d08 <HAL_DMA_Start_IT+0x430>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a33      	ldr	r2, [pc, #204]	@ (8002d58 <HAL_DMA_Start_IT+0x480>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d03b      	beq.n	8002d08 <HAL_DMA_Start_IT+0x430>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a31      	ldr	r2, [pc, #196]	@ (8002d5c <HAL_DMA_Start_IT+0x484>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d036      	beq.n	8002d08 <HAL_DMA_Start_IT+0x430>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a30      	ldr	r2, [pc, #192]	@ (8002d60 <HAL_DMA_Start_IT+0x488>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d031      	beq.n	8002d08 <HAL_DMA_Start_IT+0x430>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a2e      	ldr	r2, [pc, #184]	@ (8002d64 <HAL_DMA_Start_IT+0x48c>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d02c      	beq.n	8002d08 <HAL_DMA_Start_IT+0x430>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a2d      	ldr	r2, [pc, #180]	@ (8002d68 <HAL_DMA_Start_IT+0x490>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d027      	beq.n	8002d08 <HAL_DMA_Start_IT+0x430>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a2b      	ldr	r2, [pc, #172]	@ (8002d6c <HAL_DMA_Start_IT+0x494>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d022      	beq.n	8002d08 <HAL_DMA_Start_IT+0x430>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a2a      	ldr	r2, [pc, #168]	@ (8002d70 <HAL_DMA_Start_IT+0x498>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d01d      	beq.n	8002d08 <HAL_DMA_Start_IT+0x430>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a28      	ldr	r2, [pc, #160]	@ (8002d74 <HAL_DMA_Start_IT+0x49c>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d018      	beq.n	8002d08 <HAL_DMA_Start_IT+0x430>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a27      	ldr	r2, [pc, #156]	@ (8002d78 <HAL_DMA_Start_IT+0x4a0>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d013      	beq.n	8002d08 <HAL_DMA_Start_IT+0x430>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a25      	ldr	r2, [pc, #148]	@ (8002d7c <HAL_DMA_Start_IT+0x4a4>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d00e      	beq.n	8002d08 <HAL_DMA_Start_IT+0x430>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a24      	ldr	r2, [pc, #144]	@ (8002d80 <HAL_DMA_Start_IT+0x4a8>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d009      	beq.n	8002d08 <HAL_DMA_Start_IT+0x430>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a22      	ldr	r2, [pc, #136]	@ (8002d84 <HAL_DMA_Start_IT+0x4ac>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d004      	beq.n	8002d08 <HAL_DMA_Start_IT+0x430>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a21      	ldr	r2, [pc, #132]	@ (8002d88 <HAL_DMA_Start_IT+0x4b0>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d108      	bne.n	8002d1a <HAL_DMA_Start_IT+0x442>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f042 0201 	orr.w	r2, r2, #1
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	e012      	b.n	8002d40 <HAL_DMA_Start_IT+0x468>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f042 0201 	orr.w	r2, r2, #1
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	e009      	b.n	8002d40 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002d32:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3718      	adds	r7, #24
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	40020010 	.word	0x40020010
 8002d50:	40020028 	.word	0x40020028
 8002d54:	40020040 	.word	0x40020040
 8002d58:	40020058 	.word	0x40020058
 8002d5c:	40020070 	.word	0x40020070
 8002d60:	40020088 	.word	0x40020088
 8002d64:	400200a0 	.word	0x400200a0
 8002d68:	400200b8 	.word	0x400200b8
 8002d6c:	40020410 	.word	0x40020410
 8002d70:	40020428 	.word	0x40020428
 8002d74:	40020440 	.word	0x40020440
 8002d78:	40020458 	.word	0x40020458
 8002d7c:	40020470 	.word	0x40020470
 8002d80:	40020488 	.word	0x40020488
 8002d84:	400204a0 	.word	0x400204a0
 8002d88:	400204b8 	.word	0x400204b8
 8002d8c:	58025408 	.word	0x58025408
 8002d90:	5802541c 	.word	0x5802541c
 8002d94:	58025430 	.word	0x58025430
 8002d98:	58025444 	.word	0x58025444
 8002d9c:	58025458 	.word	0x58025458
 8002da0:	5802546c 	.word	0x5802546c
 8002da4:	58025480 	.word	0x58025480
 8002da8:	58025494 	.word	0x58025494

08002dac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002db4:	f7fe fdfc 	bl	80019b0 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e2dc      	b.n	800337e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d008      	beq.n	8002de2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2280      	movs	r2, #128	@ 0x80
 8002dd4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e2cd      	b.n	800337e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a76      	ldr	r2, [pc, #472]	@ (8002fc0 <HAL_DMA_Abort+0x214>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d04a      	beq.n	8002e82 <HAL_DMA_Abort+0xd6>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a74      	ldr	r2, [pc, #464]	@ (8002fc4 <HAL_DMA_Abort+0x218>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d045      	beq.n	8002e82 <HAL_DMA_Abort+0xd6>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a73      	ldr	r2, [pc, #460]	@ (8002fc8 <HAL_DMA_Abort+0x21c>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d040      	beq.n	8002e82 <HAL_DMA_Abort+0xd6>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a71      	ldr	r2, [pc, #452]	@ (8002fcc <HAL_DMA_Abort+0x220>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d03b      	beq.n	8002e82 <HAL_DMA_Abort+0xd6>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a70      	ldr	r2, [pc, #448]	@ (8002fd0 <HAL_DMA_Abort+0x224>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d036      	beq.n	8002e82 <HAL_DMA_Abort+0xd6>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a6e      	ldr	r2, [pc, #440]	@ (8002fd4 <HAL_DMA_Abort+0x228>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d031      	beq.n	8002e82 <HAL_DMA_Abort+0xd6>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a6d      	ldr	r2, [pc, #436]	@ (8002fd8 <HAL_DMA_Abort+0x22c>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d02c      	beq.n	8002e82 <HAL_DMA_Abort+0xd6>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a6b      	ldr	r2, [pc, #428]	@ (8002fdc <HAL_DMA_Abort+0x230>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d027      	beq.n	8002e82 <HAL_DMA_Abort+0xd6>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a6a      	ldr	r2, [pc, #424]	@ (8002fe0 <HAL_DMA_Abort+0x234>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d022      	beq.n	8002e82 <HAL_DMA_Abort+0xd6>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a68      	ldr	r2, [pc, #416]	@ (8002fe4 <HAL_DMA_Abort+0x238>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d01d      	beq.n	8002e82 <HAL_DMA_Abort+0xd6>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a67      	ldr	r2, [pc, #412]	@ (8002fe8 <HAL_DMA_Abort+0x23c>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d018      	beq.n	8002e82 <HAL_DMA_Abort+0xd6>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a65      	ldr	r2, [pc, #404]	@ (8002fec <HAL_DMA_Abort+0x240>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d013      	beq.n	8002e82 <HAL_DMA_Abort+0xd6>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a64      	ldr	r2, [pc, #400]	@ (8002ff0 <HAL_DMA_Abort+0x244>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d00e      	beq.n	8002e82 <HAL_DMA_Abort+0xd6>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a62      	ldr	r2, [pc, #392]	@ (8002ff4 <HAL_DMA_Abort+0x248>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d009      	beq.n	8002e82 <HAL_DMA_Abort+0xd6>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a61      	ldr	r2, [pc, #388]	@ (8002ff8 <HAL_DMA_Abort+0x24c>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d004      	beq.n	8002e82 <HAL_DMA_Abort+0xd6>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a5f      	ldr	r2, [pc, #380]	@ (8002ffc <HAL_DMA_Abort+0x250>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d101      	bne.n	8002e86 <HAL_DMA_Abort+0xda>
 8002e82:	2301      	movs	r3, #1
 8002e84:	e000      	b.n	8002e88 <HAL_DMA_Abort+0xdc>
 8002e86:	2300      	movs	r3, #0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d013      	beq.n	8002eb4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 021e 	bic.w	r2, r2, #30
 8002e9a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	695a      	ldr	r2, [r3, #20]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002eaa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	617b      	str	r3, [r7, #20]
 8002eb2:	e00a      	b.n	8002eca <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 020e 	bic.w	r2, r2, #14
 8002ec2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a3c      	ldr	r2, [pc, #240]	@ (8002fc0 <HAL_DMA_Abort+0x214>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d072      	beq.n	8002fba <HAL_DMA_Abort+0x20e>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a3a      	ldr	r2, [pc, #232]	@ (8002fc4 <HAL_DMA_Abort+0x218>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d06d      	beq.n	8002fba <HAL_DMA_Abort+0x20e>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a39      	ldr	r2, [pc, #228]	@ (8002fc8 <HAL_DMA_Abort+0x21c>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d068      	beq.n	8002fba <HAL_DMA_Abort+0x20e>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a37      	ldr	r2, [pc, #220]	@ (8002fcc <HAL_DMA_Abort+0x220>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d063      	beq.n	8002fba <HAL_DMA_Abort+0x20e>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a36      	ldr	r2, [pc, #216]	@ (8002fd0 <HAL_DMA_Abort+0x224>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d05e      	beq.n	8002fba <HAL_DMA_Abort+0x20e>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a34      	ldr	r2, [pc, #208]	@ (8002fd4 <HAL_DMA_Abort+0x228>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d059      	beq.n	8002fba <HAL_DMA_Abort+0x20e>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a33      	ldr	r2, [pc, #204]	@ (8002fd8 <HAL_DMA_Abort+0x22c>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d054      	beq.n	8002fba <HAL_DMA_Abort+0x20e>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a31      	ldr	r2, [pc, #196]	@ (8002fdc <HAL_DMA_Abort+0x230>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d04f      	beq.n	8002fba <HAL_DMA_Abort+0x20e>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a30      	ldr	r2, [pc, #192]	@ (8002fe0 <HAL_DMA_Abort+0x234>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d04a      	beq.n	8002fba <HAL_DMA_Abort+0x20e>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a2e      	ldr	r2, [pc, #184]	@ (8002fe4 <HAL_DMA_Abort+0x238>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d045      	beq.n	8002fba <HAL_DMA_Abort+0x20e>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a2d      	ldr	r2, [pc, #180]	@ (8002fe8 <HAL_DMA_Abort+0x23c>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d040      	beq.n	8002fba <HAL_DMA_Abort+0x20e>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a2b      	ldr	r2, [pc, #172]	@ (8002fec <HAL_DMA_Abort+0x240>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d03b      	beq.n	8002fba <HAL_DMA_Abort+0x20e>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a2a      	ldr	r2, [pc, #168]	@ (8002ff0 <HAL_DMA_Abort+0x244>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d036      	beq.n	8002fba <HAL_DMA_Abort+0x20e>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a28      	ldr	r2, [pc, #160]	@ (8002ff4 <HAL_DMA_Abort+0x248>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d031      	beq.n	8002fba <HAL_DMA_Abort+0x20e>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a27      	ldr	r2, [pc, #156]	@ (8002ff8 <HAL_DMA_Abort+0x24c>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d02c      	beq.n	8002fba <HAL_DMA_Abort+0x20e>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a25      	ldr	r2, [pc, #148]	@ (8002ffc <HAL_DMA_Abort+0x250>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d027      	beq.n	8002fba <HAL_DMA_Abort+0x20e>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a24      	ldr	r2, [pc, #144]	@ (8003000 <HAL_DMA_Abort+0x254>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d022      	beq.n	8002fba <HAL_DMA_Abort+0x20e>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a22      	ldr	r2, [pc, #136]	@ (8003004 <HAL_DMA_Abort+0x258>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d01d      	beq.n	8002fba <HAL_DMA_Abort+0x20e>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a21      	ldr	r2, [pc, #132]	@ (8003008 <HAL_DMA_Abort+0x25c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d018      	beq.n	8002fba <HAL_DMA_Abort+0x20e>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a1f      	ldr	r2, [pc, #124]	@ (800300c <HAL_DMA_Abort+0x260>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d013      	beq.n	8002fba <HAL_DMA_Abort+0x20e>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a1e      	ldr	r2, [pc, #120]	@ (8003010 <HAL_DMA_Abort+0x264>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d00e      	beq.n	8002fba <HAL_DMA_Abort+0x20e>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a1c      	ldr	r2, [pc, #112]	@ (8003014 <HAL_DMA_Abort+0x268>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d009      	beq.n	8002fba <HAL_DMA_Abort+0x20e>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a1b      	ldr	r2, [pc, #108]	@ (8003018 <HAL_DMA_Abort+0x26c>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d004      	beq.n	8002fba <HAL_DMA_Abort+0x20e>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a19      	ldr	r2, [pc, #100]	@ (800301c <HAL_DMA_Abort+0x270>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d132      	bne.n	8003020 <HAL_DMA_Abort+0x274>
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e031      	b.n	8003022 <HAL_DMA_Abort+0x276>
 8002fbe:	bf00      	nop
 8002fc0:	40020010 	.word	0x40020010
 8002fc4:	40020028 	.word	0x40020028
 8002fc8:	40020040 	.word	0x40020040
 8002fcc:	40020058 	.word	0x40020058
 8002fd0:	40020070 	.word	0x40020070
 8002fd4:	40020088 	.word	0x40020088
 8002fd8:	400200a0 	.word	0x400200a0
 8002fdc:	400200b8 	.word	0x400200b8
 8002fe0:	40020410 	.word	0x40020410
 8002fe4:	40020428 	.word	0x40020428
 8002fe8:	40020440 	.word	0x40020440
 8002fec:	40020458 	.word	0x40020458
 8002ff0:	40020470 	.word	0x40020470
 8002ff4:	40020488 	.word	0x40020488
 8002ff8:	400204a0 	.word	0x400204a0
 8002ffc:	400204b8 	.word	0x400204b8
 8003000:	58025408 	.word	0x58025408
 8003004:	5802541c 	.word	0x5802541c
 8003008:	58025430 	.word	0x58025430
 800300c:	58025444 	.word	0x58025444
 8003010:	58025458 	.word	0x58025458
 8003014:	5802546c 	.word	0x5802546c
 8003018:	58025480 	.word	0x58025480
 800301c:	58025494 	.word	0x58025494
 8003020:	2300      	movs	r3, #0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d007      	beq.n	8003036 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003030:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003034:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a6d      	ldr	r2, [pc, #436]	@ (80031f0 <HAL_DMA_Abort+0x444>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d04a      	beq.n	80030d6 <HAL_DMA_Abort+0x32a>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a6b      	ldr	r2, [pc, #428]	@ (80031f4 <HAL_DMA_Abort+0x448>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d045      	beq.n	80030d6 <HAL_DMA_Abort+0x32a>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a6a      	ldr	r2, [pc, #424]	@ (80031f8 <HAL_DMA_Abort+0x44c>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d040      	beq.n	80030d6 <HAL_DMA_Abort+0x32a>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a68      	ldr	r2, [pc, #416]	@ (80031fc <HAL_DMA_Abort+0x450>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d03b      	beq.n	80030d6 <HAL_DMA_Abort+0x32a>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a67      	ldr	r2, [pc, #412]	@ (8003200 <HAL_DMA_Abort+0x454>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d036      	beq.n	80030d6 <HAL_DMA_Abort+0x32a>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a65      	ldr	r2, [pc, #404]	@ (8003204 <HAL_DMA_Abort+0x458>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d031      	beq.n	80030d6 <HAL_DMA_Abort+0x32a>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a64      	ldr	r2, [pc, #400]	@ (8003208 <HAL_DMA_Abort+0x45c>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d02c      	beq.n	80030d6 <HAL_DMA_Abort+0x32a>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a62      	ldr	r2, [pc, #392]	@ (800320c <HAL_DMA_Abort+0x460>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d027      	beq.n	80030d6 <HAL_DMA_Abort+0x32a>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a61      	ldr	r2, [pc, #388]	@ (8003210 <HAL_DMA_Abort+0x464>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d022      	beq.n	80030d6 <HAL_DMA_Abort+0x32a>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a5f      	ldr	r2, [pc, #380]	@ (8003214 <HAL_DMA_Abort+0x468>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d01d      	beq.n	80030d6 <HAL_DMA_Abort+0x32a>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a5e      	ldr	r2, [pc, #376]	@ (8003218 <HAL_DMA_Abort+0x46c>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d018      	beq.n	80030d6 <HAL_DMA_Abort+0x32a>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a5c      	ldr	r2, [pc, #368]	@ (800321c <HAL_DMA_Abort+0x470>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d013      	beq.n	80030d6 <HAL_DMA_Abort+0x32a>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a5b      	ldr	r2, [pc, #364]	@ (8003220 <HAL_DMA_Abort+0x474>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d00e      	beq.n	80030d6 <HAL_DMA_Abort+0x32a>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a59      	ldr	r2, [pc, #356]	@ (8003224 <HAL_DMA_Abort+0x478>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d009      	beq.n	80030d6 <HAL_DMA_Abort+0x32a>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a58      	ldr	r2, [pc, #352]	@ (8003228 <HAL_DMA_Abort+0x47c>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d004      	beq.n	80030d6 <HAL_DMA_Abort+0x32a>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a56      	ldr	r2, [pc, #344]	@ (800322c <HAL_DMA_Abort+0x480>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d108      	bne.n	80030e8 <HAL_DMA_Abort+0x33c>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 0201 	bic.w	r2, r2, #1
 80030e4:	601a      	str	r2, [r3, #0]
 80030e6:	e007      	b.n	80030f8 <HAL_DMA_Abort+0x34c>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0201 	bic.w	r2, r2, #1
 80030f6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80030f8:	e013      	b.n	8003122 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030fa:	f7fe fc59 	bl	80019b0 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b05      	cmp	r3, #5
 8003106:	d90c      	bls.n	8003122 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2220      	movs	r2, #32
 800310c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2203      	movs	r2, #3
 8003112:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e12d      	b.n	800337e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1e5      	bne.n	80030fa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a2f      	ldr	r2, [pc, #188]	@ (80031f0 <HAL_DMA_Abort+0x444>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d04a      	beq.n	80031ce <HAL_DMA_Abort+0x422>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a2d      	ldr	r2, [pc, #180]	@ (80031f4 <HAL_DMA_Abort+0x448>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d045      	beq.n	80031ce <HAL_DMA_Abort+0x422>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a2c      	ldr	r2, [pc, #176]	@ (80031f8 <HAL_DMA_Abort+0x44c>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d040      	beq.n	80031ce <HAL_DMA_Abort+0x422>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a2a      	ldr	r2, [pc, #168]	@ (80031fc <HAL_DMA_Abort+0x450>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d03b      	beq.n	80031ce <HAL_DMA_Abort+0x422>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a29      	ldr	r2, [pc, #164]	@ (8003200 <HAL_DMA_Abort+0x454>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d036      	beq.n	80031ce <HAL_DMA_Abort+0x422>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a27      	ldr	r2, [pc, #156]	@ (8003204 <HAL_DMA_Abort+0x458>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d031      	beq.n	80031ce <HAL_DMA_Abort+0x422>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a26      	ldr	r2, [pc, #152]	@ (8003208 <HAL_DMA_Abort+0x45c>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d02c      	beq.n	80031ce <HAL_DMA_Abort+0x422>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a24      	ldr	r2, [pc, #144]	@ (800320c <HAL_DMA_Abort+0x460>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d027      	beq.n	80031ce <HAL_DMA_Abort+0x422>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a23      	ldr	r2, [pc, #140]	@ (8003210 <HAL_DMA_Abort+0x464>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d022      	beq.n	80031ce <HAL_DMA_Abort+0x422>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a21      	ldr	r2, [pc, #132]	@ (8003214 <HAL_DMA_Abort+0x468>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d01d      	beq.n	80031ce <HAL_DMA_Abort+0x422>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a20      	ldr	r2, [pc, #128]	@ (8003218 <HAL_DMA_Abort+0x46c>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d018      	beq.n	80031ce <HAL_DMA_Abort+0x422>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a1e      	ldr	r2, [pc, #120]	@ (800321c <HAL_DMA_Abort+0x470>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d013      	beq.n	80031ce <HAL_DMA_Abort+0x422>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a1d      	ldr	r2, [pc, #116]	@ (8003220 <HAL_DMA_Abort+0x474>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d00e      	beq.n	80031ce <HAL_DMA_Abort+0x422>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a1b      	ldr	r2, [pc, #108]	@ (8003224 <HAL_DMA_Abort+0x478>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d009      	beq.n	80031ce <HAL_DMA_Abort+0x422>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a1a      	ldr	r2, [pc, #104]	@ (8003228 <HAL_DMA_Abort+0x47c>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d004      	beq.n	80031ce <HAL_DMA_Abort+0x422>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a18      	ldr	r2, [pc, #96]	@ (800322c <HAL_DMA_Abort+0x480>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d101      	bne.n	80031d2 <HAL_DMA_Abort+0x426>
 80031ce:	2301      	movs	r3, #1
 80031d0:	e000      	b.n	80031d4 <HAL_DMA_Abort+0x428>
 80031d2:	2300      	movs	r3, #0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d02b      	beq.n	8003230 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031dc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031e2:	f003 031f 	and.w	r3, r3, #31
 80031e6:	223f      	movs	r2, #63	@ 0x3f
 80031e8:	409a      	lsls	r2, r3
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	609a      	str	r2, [r3, #8]
 80031ee:	e02a      	b.n	8003246 <HAL_DMA_Abort+0x49a>
 80031f0:	40020010 	.word	0x40020010
 80031f4:	40020028 	.word	0x40020028
 80031f8:	40020040 	.word	0x40020040
 80031fc:	40020058 	.word	0x40020058
 8003200:	40020070 	.word	0x40020070
 8003204:	40020088 	.word	0x40020088
 8003208:	400200a0 	.word	0x400200a0
 800320c:	400200b8 	.word	0x400200b8
 8003210:	40020410 	.word	0x40020410
 8003214:	40020428 	.word	0x40020428
 8003218:	40020440 	.word	0x40020440
 800321c:	40020458 	.word	0x40020458
 8003220:	40020470 	.word	0x40020470
 8003224:	40020488 	.word	0x40020488
 8003228:	400204a0 	.word	0x400204a0
 800322c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003234:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800323a:	f003 031f 	and.w	r3, r3, #31
 800323e:	2201      	movs	r2, #1
 8003240:	409a      	lsls	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a4f      	ldr	r2, [pc, #316]	@ (8003388 <HAL_DMA_Abort+0x5dc>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d072      	beq.n	8003336 <HAL_DMA_Abort+0x58a>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a4d      	ldr	r2, [pc, #308]	@ (800338c <HAL_DMA_Abort+0x5e0>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d06d      	beq.n	8003336 <HAL_DMA_Abort+0x58a>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a4c      	ldr	r2, [pc, #304]	@ (8003390 <HAL_DMA_Abort+0x5e4>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d068      	beq.n	8003336 <HAL_DMA_Abort+0x58a>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a4a      	ldr	r2, [pc, #296]	@ (8003394 <HAL_DMA_Abort+0x5e8>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d063      	beq.n	8003336 <HAL_DMA_Abort+0x58a>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a49      	ldr	r2, [pc, #292]	@ (8003398 <HAL_DMA_Abort+0x5ec>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d05e      	beq.n	8003336 <HAL_DMA_Abort+0x58a>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a47      	ldr	r2, [pc, #284]	@ (800339c <HAL_DMA_Abort+0x5f0>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d059      	beq.n	8003336 <HAL_DMA_Abort+0x58a>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a46      	ldr	r2, [pc, #280]	@ (80033a0 <HAL_DMA_Abort+0x5f4>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d054      	beq.n	8003336 <HAL_DMA_Abort+0x58a>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a44      	ldr	r2, [pc, #272]	@ (80033a4 <HAL_DMA_Abort+0x5f8>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d04f      	beq.n	8003336 <HAL_DMA_Abort+0x58a>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a43      	ldr	r2, [pc, #268]	@ (80033a8 <HAL_DMA_Abort+0x5fc>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d04a      	beq.n	8003336 <HAL_DMA_Abort+0x58a>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a41      	ldr	r2, [pc, #260]	@ (80033ac <HAL_DMA_Abort+0x600>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d045      	beq.n	8003336 <HAL_DMA_Abort+0x58a>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a40      	ldr	r2, [pc, #256]	@ (80033b0 <HAL_DMA_Abort+0x604>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d040      	beq.n	8003336 <HAL_DMA_Abort+0x58a>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a3e      	ldr	r2, [pc, #248]	@ (80033b4 <HAL_DMA_Abort+0x608>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d03b      	beq.n	8003336 <HAL_DMA_Abort+0x58a>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a3d      	ldr	r2, [pc, #244]	@ (80033b8 <HAL_DMA_Abort+0x60c>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d036      	beq.n	8003336 <HAL_DMA_Abort+0x58a>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a3b      	ldr	r2, [pc, #236]	@ (80033bc <HAL_DMA_Abort+0x610>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d031      	beq.n	8003336 <HAL_DMA_Abort+0x58a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a3a      	ldr	r2, [pc, #232]	@ (80033c0 <HAL_DMA_Abort+0x614>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d02c      	beq.n	8003336 <HAL_DMA_Abort+0x58a>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a38      	ldr	r2, [pc, #224]	@ (80033c4 <HAL_DMA_Abort+0x618>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d027      	beq.n	8003336 <HAL_DMA_Abort+0x58a>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a37      	ldr	r2, [pc, #220]	@ (80033c8 <HAL_DMA_Abort+0x61c>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d022      	beq.n	8003336 <HAL_DMA_Abort+0x58a>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a35      	ldr	r2, [pc, #212]	@ (80033cc <HAL_DMA_Abort+0x620>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d01d      	beq.n	8003336 <HAL_DMA_Abort+0x58a>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a34      	ldr	r2, [pc, #208]	@ (80033d0 <HAL_DMA_Abort+0x624>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d018      	beq.n	8003336 <HAL_DMA_Abort+0x58a>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a32      	ldr	r2, [pc, #200]	@ (80033d4 <HAL_DMA_Abort+0x628>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d013      	beq.n	8003336 <HAL_DMA_Abort+0x58a>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a31      	ldr	r2, [pc, #196]	@ (80033d8 <HAL_DMA_Abort+0x62c>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d00e      	beq.n	8003336 <HAL_DMA_Abort+0x58a>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a2f      	ldr	r2, [pc, #188]	@ (80033dc <HAL_DMA_Abort+0x630>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d009      	beq.n	8003336 <HAL_DMA_Abort+0x58a>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a2e      	ldr	r2, [pc, #184]	@ (80033e0 <HAL_DMA_Abort+0x634>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d004      	beq.n	8003336 <HAL_DMA_Abort+0x58a>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a2c      	ldr	r2, [pc, #176]	@ (80033e4 <HAL_DMA_Abort+0x638>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d101      	bne.n	800333a <HAL_DMA_Abort+0x58e>
 8003336:	2301      	movs	r3, #1
 8003338:	e000      	b.n	800333c <HAL_DMA_Abort+0x590>
 800333a:	2300      	movs	r3, #0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d015      	beq.n	800336c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003348:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00c      	beq.n	800336c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800335c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003360:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800336a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3718      	adds	r7, #24
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40020010 	.word	0x40020010
 800338c:	40020028 	.word	0x40020028
 8003390:	40020040 	.word	0x40020040
 8003394:	40020058 	.word	0x40020058
 8003398:	40020070 	.word	0x40020070
 800339c:	40020088 	.word	0x40020088
 80033a0:	400200a0 	.word	0x400200a0
 80033a4:	400200b8 	.word	0x400200b8
 80033a8:	40020410 	.word	0x40020410
 80033ac:	40020428 	.word	0x40020428
 80033b0:	40020440 	.word	0x40020440
 80033b4:	40020458 	.word	0x40020458
 80033b8:	40020470 	.word	0x40020470
 80033bc:	40020488 	.word	0x40020488
 80033c0:	400204a0 	.word	0x400204a0
 80033c4:	400204b8 	.word	0x400204b8
 80033c8:	58025408 	.word	0x58025408
 80033cc:	5802541c 	.word	0x5802541c
 80033d0:	58025430 	.word	0x58025430
 80033d4:	58025444 	.word	0x58025444
 80033d8:	58025458 	.word	0x58025458
 80033dc:	5802546c 	.word	0x5802546c
 80033e0:	58025480 	.word	0x58025480
 80033e4:	58025494 	.word	0x58025494

080033e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e237      	b.n	800386a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d004      	beq.n	8003410 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2280      	movs	r2, #128	@ 0x80
 800340a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e22c      	b.n	800386a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a5c      	ldr	r2, [pc, #368]	@ (8003588 <HAL_DMA_Abort_IT+0x1a0>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d04a      	beq.n	80034b0 <HAL_DMA_Abort_IT+0xc8>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a5b      	ldr	r2, [pc, #364]	@ (800358c <HAL_DMA_Abort_IT+0x1a4>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d045      	beq.n	80034b0 <HAL_DMA_Abort_IT+0xc8>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a59      	ldr	r2, [pc, #356]	@ (8003590 <HAL_DMA_Abort_IT+0x1a8>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d040      	beq.n	80034b0 <HAL_DMA_Abort_IT+0xc8>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a58      	ldr	r2, [pc, #352]	@ (8003594 <HAL_DMA_Abort_IT+0x1ac>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d03b      	beq.n	80034b0 <HAL_DMA_Abort_IT+0xc8>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a56      	ldr	r2, [pc, #344]	@ (8003598 <HAL_DMA_Abort_IT+0x1b0>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d036      	beq.n	80034b0 <HAL_DMA_Abort_IT+0xc8>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a55      	ldr	r2, [pc, #340]	@ (800359c <HAL_DMA_Abort_IT+0x1b4>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d031      	beq.n	80034b0 <HAL_DMA_Abort_IT+0xc8>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a53      	ldr	r2, [pc, #332]	@ (80035a0 <HAL_DMA_Abort_IT+0x1b8>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d02c      	beq.n	80034b0 <HAL_DMA_Abort_IT+0xc8>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a52      	ldr	r2, [pc, #328]	@ (80035a4 <HAL_DMA_Abort_IT+0x1bc>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d027      	beq.n	80034b0 <HAL_DMA_Abort_IT+0xc8>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a50      	ldr	r2, [pc, #320]	@ (80035a8 <HAL_DMA_Abort_IT+0x1c0>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d022      	beq.n	80034b0 <HAL_DMA_Abort_IT+0xc8>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a4f      	ldr	r2, [pc, #316]	@ (80035ac <HAL_DMA_Abort_IT+0x1c4>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d01d      	beq.n	80034b0 <HAL_DMA_Abort_IT+0xc8>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a4d      	ldr	r2, [pc, #308]	@ (80035b0 <HAL_DMA_Abort_IT+0x1c8>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d018      	beq.n	80034b0 <HAL_DMA_Abort_IT+0xc8>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a4c      	ldr	r2, [pc, #304]	@ (80035b4 <HAL_DMA_Abort_IT+0x1cc>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d013      	beq.n	80034b0 <HAL_DMA_Abort_IT+0xc8>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a4a      	ldr	r2, [pc, #296]	@ (80035b8 <HAL_DMA_Abort_IT+0x1d0>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d00e      	beq.n	80034b0 <HAL_DMA_Abort_IT+0xc8>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a49      	ldr	r2, [pc, #292]	@ (80035bc <HAL_DMA_Abort_IT+0x1d4>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d009      	beq.n	80034b0 <HAL_DMA_Abort_IT+0xc8>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a47      	ldr	r2, [pc, #284]	@ (80035c0 <HAL_DMA_Abort_IT+0x1d8>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d004      	beq.n	80034b0 <HAL_DMA_Abort_IT+0xc8>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a46      	ldr	r2, [pc, #280]	@ (80035c4 <HAL_DMA_Abort_IT+0x1dc>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d101      	bne.n	80034b4 <HAL_DMA_Abort_IT+0xcc>
 80034b0:	2301      	movs	r3, #1
 80034b2:	e000      	b.n	80034b6 <HAL_DMA_Abort_IT+0xce>
 80034b4:	2300      	movs	r3, #0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f000 8086 	beq.w	80035c8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2204      	movs	r2, #4
 80034c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a2f      	ldr	r2, [pc, #188]	@ (8003588 <HAL_DMA_Abort_IT+0x1a0>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d04a      	beq.n	8003564 <HAL_DMA_Abort_IT+0x17c>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a2e      	ldr	r2, [pc, #184]	@ (800358c <HAL_DMA_Abort_IT+0x1a4>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d045      	beq.n	8003564 <HAL_DMA_Abort_IT+0x17c>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a2c      	ldr	r2, [pc, #176]	@ (8003590 <HAL_DMA_Abort_IT+0x1a8>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d040      	beq.n	8003564 <HAL_DMA_Abort_IT+0x17c>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a2b      	ldr	r2, [pc, #172]	@ (8003594 <HAL_DMA_Abort_IT+0x1ac>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d03b      	beq.n	8003564 <HAL_DMA_Abort_IT+0x17c>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a29      	ldr	r2, [pc, #164]	@ (8003598 <HAL_DMA_Abort_IT+0x1b0>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d036      	beq.n	8003564 <HAL_DMA_Abort_IT+0x17c>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a28      	ldr	r2, [pc, #160]	@ (800359c <HAL_DMA_Abort_IT+0x1b4>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d031      	beq.n	8003564 <HAL_DMA_Abort_IT+0x17c>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a26      	ldr	r2, [pc, #152]	@ (80035a0 <HAL_DMA_Abort_IT+0x1b8>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d02c      	beq.n	8003564 <HAL_DMA_Abort_IT+0x17c>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a25      	ldr	r2, [pc, #148]	@ (80035a4 <HAL_DMA_Abort_IT+0x1bc>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d027      	beq.n	8003564 <HAL_DMA_Abort_IT+0x17c>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a23      	ldr	r2, [pc, #140]	@ (80035a8 <HAL_DMA_Abort_IT+0x1c0>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d022      	beq.n	8003564 <HAL_DMA_Abort_IT+0x17c>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a22      	ldr	r2, [pc, #136]	@ (80035ac <HAL_DMA_Abort_IT+0x1c4>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d01d      	beq.n	8003564 <HAL_DMA_Abort_IT+0x17c>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a20      	ldr	r2, [pc, #128]	@ (80035b0 <HAL_DMA_Abort_IT+0x1c8>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d018      	beq.n	8003564 <HAL_DMA_Abort_IT+0x17c>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a1f      	ldr	r2, [pc, #124]	@ (80035b4 <HAL_DMA_Abort_IT+0x1cc>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d013      	beq.n	8003564 <HAL_DMA_Abort_IT+0x17c>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a1d      	ldr	r2, [pc, #116]	@ (80035b8 <HAL_DMA_Abort_IT+0x1d0>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d00e      	beq.n	8003564 <HAL_DMA_Abort_IT+0x17c>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a1c      	ldr	r2, [pc, #112]	@ (80035bc <HAL_DMA_Abort_IT+0x1d4>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d009      	beq.n	8003564 <HAL_DMA_Abort_IT+0x17c>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a1a      	ldr	r2, [pc, #104]	@ (80035c0 <HAL_DMA_Abort_IT+0x1d8>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d004      	beq.n	8003564 <HAL_DMA_Abort_IT+0x17c>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a19      	ldr	r2, [pc, #100]	@ (80035c4 <HAL_DMA_Abort_IT+0x1dc>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d108      	bne.n	8003576 <HAL_DMA_Abort_IT+0x18e>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 0201 	bic.w	r2, r2, #1
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	e178      	b.n	8003868 <HAL_DMA_Abort_IT+0x480>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 0201 	bic.w	r2, r2, #1
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	e16f      	b.n	8003868 <HAL_DMA_Abort_IT+0x480>
 8003588:	40020010 	.word	0x40020010
 800358c:	40020028 	.word	0x40020028
 8003590:	40020040 	.word	0x40020040
 8003594:	40020058 	.word	0x40020058
 8003598:	40020070 	.word	0x40020070
 800359c:	40020088 	.word	0x40020088
 80035a0:	400200a0 	.word	0x400200a0
 80035a4:	400200b8 	.word	0x400200b8
 80035a8:	40020410 	.word	0x40020410
 80035ac:	40020428 	.word	0x40020428
 80035b0:	40020440 	.word	0x40020440
 80035b4:	40020458 	.word	0x40020458
 80035b8:	40020470 	.word	0x40020470
 80035bc:	40020488 	.word	0x40020488
 80035c0:	400204a0 	.word	0x400204a0
 80035c4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 020e 	bic.w	r2, r2, #14
 80035d6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a6c      	ldr	r2, [pc, #432]	@ (8003790 <HAL_DMA_Abort_IT+0x3a8>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d04a      	beq.n	8003678 <HAL_DMA_Abort_IT+0x290>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a6b      	ldr	r2, [pc, #428]	@ (8003794 <HAL_DMA_Abort_IT+0x3ac>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d045      	beq.n	8003678 <HAL_DMA_Abort_IT+0x290>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a69      	ldr	r2, [pc, #420]	@ (8003798 <HAL_DMA_Abort_IT+0x3b0>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d040      	beq.n	8003678 <HAL_DMA_Abort_IT+0x290>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a68      	ldr	r2, [pc, #416]	@ (800379c <HAL_DMA_Abort_IT+0x3b4>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d03b      	beq.n	8003678 <HAL_DMA_Abort_IT+0x290>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a66      	ldr	r2, [pc, #408]	@ (80037a0 <HAL_DMA_Abort_IT+0x3b8>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d036      	beq.n	8003678 <HAL_DMA_Abort_IT+0x290>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a65      	ldr	r2, [pc, #404]	@ (80037a4 <HAL_DMA_Abort_IT+0x3bc>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d031      	beq.n	8003678 <HAL_DMA_Abort_IT+0x290>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a63      	ldr	r2, [pc, #396]	@ (80037a8 <HAL_DMA_Abort_IT+0x3c0>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d02c      	beq.n	8003678 <HAL_DMA_Abort_IT+0x290>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a62      	ldr	r2, [pc, #392]	@ (80037ac <HAL_DMA_Abort_IT+0x3c4>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d027      	beq.n	8003678 <HAL_DMA_Abort_IT+0x290>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a60      	ldr	r2, [pc, #384]	@ (80037b0 <HAL_DMA_Abort_IT+0x3c8>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d022      	beq.n	8003678 <HAL_DMA_Abort_IT+0x290>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a5f      	ldr	r2, [pc, #380]	@ (80037b4 <HAL_DMA_Abort_IT+0x3cc>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d01d      	beq.n	8003678 <HAL_DMA_Abort_IT+0x290>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a5d      	ldr	r2, [pc, #372]	@ (80037b8 <HAL_DMA_Abort_IT+0x3d0>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d018      	beq.n	8003678 <HAL_DMA_Abort_IT+0x290>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a5c      	ldr	r2, [pc, #368]	@ (80037bc <HAL_DMA_Abort_IT+0x3d4>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d013      	beq.n	8003678 <HAL_DMA_Abort_IT+0x290>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a5a      	ldr	r2, [pc, #360]	@ (80037c0 <HAL_DMA_Abort_IT+0x3d8>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d00e      	beq.n	8003678 <HAL_DMA_Abort_IT+0x290>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a59      	ldr	r2, [pc, #356]	@ (80037c4 <HAL_DMA_Abort_IT+0x3dc>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d009      	beq.n	8003678 <HAL_DMA_Abort_IT+0x290>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a57      	ldr	r2, [pc, #348]	@ (80037c8 <HAL_DMA_Abort_IT+0x3e0>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d004      	beq.n	8003678 <HAL_DMA_Abort_IT+0x290>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a56      	ldr	r2, [pc, #344]	@ (80037cc <HAL_DMA_Abort_IT+0x3e4>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d108      	bne.n	800368a <HAL_DMA_Abort_IT+0x2a2>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 0201 	bic.w	r2, r2, #1
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	e007      	b.n	800369a <HAL_DMA_Abort_IT+0x2b2>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 0201 	bic.w	r2, r2, #1
 8003698:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a3c      	ldr	r2, [pc, #240]	@ (8003790 <HAL_DMA_Abort_IT+0x3a8>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d072      	beq.n	800378a <HAL_DMA_Abort_IT+0x3a2>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a3a      	ldr	r2, [pc, #232]	@ (8003794 <HAL_DMA_Abort_IT+0x3ac>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d06d      	beq.n	800378a <HAL_DMA_Abort_IT+0x3a2>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a39      	ldr	r2, [pc, #228]	@ (8003798 <HAL_DMA_Abort_IT+0x3b0>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d068      	beq.n	800378a <HAL_DMA_Abort_IT+0x3a2>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a37      	ldr	r2, [pc, #220]	@ (800379c <HAL_DMA_Abort_IT+0x3b4>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d063      	beq.n	800378a <HAL_DMA_Abort_IT+0x3a2>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a36      	ldr	r2, [pc, #216]	@ (80037a0 <HAL_DMA_Abort_IT+0x3b8>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d05e      	beq.n	800378a <HAL_DMA_Abort_IT+0x3a2>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a34      	ldr	r2, [pc, #208]	@ (80037a4 <HAL_DMA_Abort_IT+0x3bc>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d059      	beq.n	800378a <HAL_DMA_Abort_IT+0x3a2>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a33      	ldr	r2, [pc, #204]	@ (80037a8 <HAL_DMA_Abort_IT+0x3c0>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d054      	beq.n	800378a <HAL_DMA_Abort_IT+0x3a2>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a31      	ldr	r2, [pc, #196]	@ (80037ac <HAL_DMA_Abort_IT+0x3c4>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d04f      	beq.n	800378a <HAL_DMA_Abort_IT+0x3a2>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a30      	ldr	r2, [pc, #192]	@ (80037b0 <HAL_DMA_Abort_IT+0x3c8>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d04a      	beq.n	800378a <HAL_DMA_Abort_IT+0x3a2>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a2e      	ldr	r2, [pc, #184]	@ (80037b4 <HAL_DMA_Abort_IT+0x3cc>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d045      	beq.n	800378a <HAL_DMA_Abort_IT+0x3a2>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a2d      	ldr	r2, [pc, #180]	@ (80037b8 <HAL_DMA_Abort_IT+0x3d0>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d040      	beq.n	800378a <HAL_DMA_Abort_IT+0x3a2>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a2b      	ldr	r2, [pc, #172]	@ (80037bc <HAL_DMA_Abort_IT+0x3d4>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d03b      	beq.n	800378a <HAL_DMA_Abort_IT+0x3a2>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a2a      	ldr	r2, [pc, #168]	@ (80037c0 <HAL_DMA_Abort_IT+0x3d8>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d036      	beq.n	800378a <HAL_DMA_Abort_IT+0x3a2>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a28      	ldr	r2, [pc, #160]	@ (80037c4 <HAL_DMA_Abort_IT+0x3dc>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d031      	beq.n	800378a <HAL_DMA_Abort_IT+0x3a2>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a27      	ldr	r2, [pc, #156]	@ (80037c8 <HAL_DMA_Abort_IT+0x3e0>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d02c      	beq.n	800378a <HAL_DMA_Abort_IT+0x3a2>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a25      	ldr	r2, [pc, #148]	@ (80037cc <HAL_DMA_Abort_IT+0x3e4>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d027      	beq.n	800378a <HAL_DMA_Abort_IT+0x3a2>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a24      	ldr	r2, [pc, #144]	@ (80037d0 <HAL_DMA_Abort_IT+0x3e8>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d022      	beq.n	800378a <HAL_DMA_Abort_IT+0x3a2>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a22      	ldr	r2, [pc, #136]	@ (80037d4 <HAL_DMA_Abort_IT+0x3ec>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d01d      	beq.n	800378a <HAL_DMA_Abort_IT+0x3a2>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a21      	ldr	r2, [pc, #132]	@ (80037d8 <HAL_DMA_Abort_IT+0x3f0>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d018      	beq.n	800378a <HAL_DMA_Abort_IT+0x3a2>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a1f      	ldr	r2, [pc, #124]	@ (80037dc <HAL_DMA_Abort_IT+0x3f4>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d013      	beq.n	800378a <HAL_DMA_Abort_IT+0x3a2>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a1e      	ldr	r2, [pc, #120]	@ (80037e0 <HAL_DMA_Abort_IT+0x3f8>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d00e      	beq.n	800378a <HAL_DMA_Abort_IT+0x3a2>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a1c      	ldr	r2, [pc, #112]	@ (80037e4 <HAL_DMA_Abort_IT+0x3fc>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d009      	beq.n	800378a <HAL_DMA_Abort_IT+0x3a2>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a1b      	ldr	r2, [pc, #108]	@ (80037e8 <HAL_DMA_Abort_IT+0x400>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d004      	beq.n	800378a <HAL_DMA_Abort_IT+0x3a2>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a19      	ldr	r2, [pc, #100]	@ (80037ec <HAL_DMA_Abort_IT+0x404>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d132      	bne.n	80037f0 <HAL_DMA_Abort_IT+0x408>
 800378a:	2301      	movs	r3, #1
 800378c:	e031      	b.n	80037f2 <HAL_DMA_Abort_IT+0x40a>
 800378e:	bf00      	nop
 8003790:	40020010 	.word	0x40020010
 8003794:	40020028 	.word	0x40020028
 8003798:	40020040 	.word	0x40020040
 800379c:	40020058 	.word	0x40020058
 80037a0:	40020070 	.word	0x40020070
 80037a4:	40020088 	.word	0x40020088
 80037a8:	400200a0 	.word	0x400200a0
 80037ac:	400200b8 	.word	0x400200b8
 80037b0:	40020410 	.word	0x40020410
 80037b4:	40020428 	.word	0x40020428
 80037b8:	40020440 	.word	0x40020440
 80037bc:	40020458 	.word	0x40020458
 80037c0:	40020470 	.word	0x40020470
 80037c4:	40020488 	.word	0x40020488
 80037c8:	400204a0 	.word	0x400204a0
 80037cc:	400204b8 	.word	0x400204b8
 80037d0:	58025408 	.word	0x58025408
 80037d4:	5802541c 	.word	0x5802541c
 80037d8:	58025430 	.word	0x58025430
 80037dc:	58025444 	.word	0x58025444
 80037e0:	58025458 	.word	0x58025458
 80037e4:	5802546c 	.word	0x5802546c
 80037e8:	58025480 	.word	0x58025480
 80037ec:	58025494 	.word	0x58025494
 80037f0:	2300      	movs	r3, #0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d028      	beq.n	8003848 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003800:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003804:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800380a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003810:	f003 031f 	and.w	r3, r3, #31
 8003814:	2201      	movs	r2, #1
 8003816:	409a      	lsls	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003824:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00c      	beq.n	8003848 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003838:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800383c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003846:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800385c:	2b00      	cmp	r3, #0
 800385e:	d003      	beq.n	8003868 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop

08003874 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b08a      	sub	sp, #40	@ 0x28
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800387c:	2300      	movs	r3, #0
 800387e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003880:	4b67      	ldr	r3, [pc, #412]	@ (8003a20 <HAL_DMA_IRQHandler+0x1ac>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a67      	ldr	r2, [pc, #412]	@ (8003a24 <HAL_DMA_IRQHandler+0x1b0>)
 8003886:	fba2 2303 	umull	r2, r3, r2, r3
 800388a:	0a9b      	lsrs	r3, r3, #10
 800388c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003892:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003898:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a5f      	ldr	r2, [pc, #380]	@ (8003a28 <HAL_DMA_IRQHandler+0x1b4>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d04a      	beq.n	8003946 <HAL_DMA_IRQHandler+0xd2>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a5d      	ldr	r2, [pc, #372]	@ (8003a2c <HAL_DMA_IRQHandler+0x1b8>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d045      	beq.n	8003946 <HAL_DMA_IRQHandler+0xd2>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a5c      	ldr	r2, [pc, #368]	@ (8003a30 <HAL_DMA_IRQHandler+0x1bc>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d040      	beq.n	8003946 <HAL_DMA_IRQHandler+0xd2>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a5a      	ldr	r2, [pc, #360]	@ (8003a34 <HAL_DMA_IRQHandler+0x1c0>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d03b      	beq.n	8003946 <HAL_DMA_IRQHandler+0xd2>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a59      	ldr	r2, [pc, #356]	@ (8003a38 <HAL_DMA_IRQHandler+0x1c4>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d036      	beq.n	8003946 <HAL_DMA_IRQHandler+0xd2>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a57      	ldr	r2, [pc, #348]	@ (8003a3c <HAL_DMA_IRQHandler+0x1c8>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d031      	beq.n	8003946 <HAL_DMA_IRQHandler+0xd2>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a56      	ldr	r2, [pc, #344]	@ (8003a40 <HAL_DMA_IRQHandler+0x1cc>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d02c      	beq.n	8003946 <HAL_DMA_IRQHandler+0xd2>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a54      	ldr	r2, [pc, #336]	@ (8003a44 <HAL_DMA_IRQHandler+0x1d0>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d027      	beq.n	8003946 <HAL_DMA_IRQHandler+0xd2>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a53      	ldr	r2, [pc, #332]	@ (8003a48 <HAL_DMA_IRQHandler+0x1d4>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d022      	beq.n	8003946 <HAL_DMA_IRQHandler+0xd2>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a51      	ldr	r2, [pc, #324]	@ (8003a4c <HAL_DMA_IRQHandler+0x1d8>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d01d      	beq.n	8003946 <HAL_DMA_IRQHandler+0xd2>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a50      	ldr	r2, [pc, #320]	@ (8003a50 <HAL_DMA_IRQHandler+0x1dc>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d018      	beq.n	8003946 <HAL_DMA_IRQHandler+0xd2>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a4e      	ldr	r2, [pc, #312]	@ (8003a54 <HAL_DMA_IRQHandler+0x1e0>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d013      	beq.n	8003946 <HAL_DMA_IRQHandler+0xd2>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a4d      	ldr	r2, [pc, #308]	@ (8003a58 <HAL_DMA_IRQHandler+0x1e4>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d00e      	beq.n	8003946 <HAL_DMA_IRQHandler+0xd2>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a4b      	ldr	r2, [pc, #300]	@ (8003a5c <HAL_DMA_IRQHandler+0x1e8>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d009      	beq.n	8003946 <HAL_DMA_IRQHandler+0xd2>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a4a      	ldr	r2, [pc, #296]	@ (8003a60 <HAL_DMA_IRQHandler+0x1ec>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d004      	beq.n	8003946 <HAL_DMA_IRQHandler+0xd2>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a48      	ldr	r2, [pc, #288]	@ (8003a64 <HAL_DMA_IRQHandler+0x1f0>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d101      	bne.n	800394a <HAL_DMA_IRQHandler+0xd6>
 8003946:	2301      	movs	r3, #1
 8003948:	e000      	b.n	800394c <HAL_DMA_IRQHandler+0xd8>
 800394a:	2300      	movs	r3, #0
 800394c:	2b00      	cmp	r3, #0
 800394e:	f000 842b 	beq.w	80041a8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003956:	f003 031f 	and.w	r3, r3, #31
 800395a:	2208      	movs	r2, #8
 800395c:	409a      	lsls	r2, r3
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	4013      	ands	r3, r2
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 80a2 	beq.w	8003aac <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a2e      	ldr	r2, [pc, #184]	@ (8003a28 <HAL_DMA_IRQHandler+0x1b4>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d04a      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x194>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a2d      	ldr	r2, [pc, #180]	@ (8003a2c <HAL_DMA_IRQHandler+0x1b8>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d045      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x194>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a2b      	ldr	r2, [pc, #172]	@ (8003a30 <HAL_DMA_IRQHandler+0x1bc>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d040      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x194>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a2a      	ldr	r2, [pc, #168]	@ (8003a34 <HAL_DMA_IRQHandler+0x1c0>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d03b      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x194>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a28      	ldr	r2, [pc, #160]	@ (8003a38 <HAL_DMA_IRQHandler+0x1c4>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d036      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x194>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a27      	ldr	r2, [pc, #156]	@ (8003a3c <HAL_DMA_IRQHandler+0x1c8>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d031      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x194>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a25      	ldr	r2, [pc, #148]	@ (8003a40 <HAL_DMA_IRQHandler+0x1cc>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d02c      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x194>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a24      	ldr	r2, [pc, #144]	@ (8003a44 <HAL_DMA_IRQHandler+0x1d0>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d027      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x194>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a22      	ldr	r2, [pc, #136]	@ (8003a48 <HAL_DMA_IRQHandler+0x1d4>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d022      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x194>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a21      	ldr	r2, [pc, #132]	@ (8003a4c <HAL_DMA_IRQHandler+0x1d8>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d01d      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x194>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a1f      	ldr	r2, [pc, #124]	@ (8003a50 <HAL_DMA_IRQHandler+0x1dc>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d018      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x194>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a1e      	ldr	r2, [pc, #120]	@ (8003a54 <HAL_DMA_IRQHandler+0x1e0>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d013      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x194>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a1c      	ldr	r2, [pc, #112]	@ (8003a58 <HAL_DMA_IRQHandler+0x1e4>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d00e      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x194>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a1b      	ldr	r2, [pc, #108]	@ (8003a5c <HAL_DMA_IRQHandler+0x1e8>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d009      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x194>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a19      	ldr	r2, [pc, #100]	@ (8003a60 <HAL_DMA_IRQHandler+0x1ec>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d004      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x194>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a18      	ldr	r2, [pc, #96]	@ (8003a64 <HAL_DMA_IRQHandler+0x1f0>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d12f      	bne.n	8003a68 <HAL_DMA_IRQHandler+0x1f4>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0304 	and.w	r3, r3, #4
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	bf14      	ite	ne
 8003a16:	2301      	movne	r3, #1
 8003a18:	2300      	moveq	r3, #0
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	e02e      	b.n	8003a7c <HAL_DMA_IRQHandler+0x208>
 8003a1e:	bf00      	nop
 8003a20:	24000008 	.word	0x24000008
 8003a24:	1b4e81b5 	.word	0x1b4e81b5
 8003a28:	40020010 	.word	0x40020010
 8003a2c:	40020028 	.word	0x40020028
 8003a30:	40020040 	.word	0x40020040
 8003a34:	40020058 	.word	0x40020058
 8003a38:	40020070 	.word	0x40020070
 8003a3c:	40020088 	.word	0x40020088
 8003a40:	400200a0 	.word	0x400200a0
 8003a44:	400200b8 	.word	0x400200b8
 8003a48:	40020410 	.word	0x40020410
 8003a4c:	40020428 	.word	0x40020428
 8003a50:	40020440 	.word	0x40020440
 8003a54:	40020458 	.word	0x40020458
 8003a58:	40020470 	.word	0x40020470
 8003a5c:	40020488 	.word	0x40020488
 8003a60:	400204a0 	.word	0x400204a0
 8003a64:	400204b8 	.word	0x400204b8
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0308 	and.w	r3, r3, #8
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	bf14      	ite	ne
 8003a76:	2301      	movne	r3, #1
 8003a78:	2300      	moveq	r3, #0
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d015      	beq.n	8003aac <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 0204 	bic.w	r2, r2, #4
 8003a8e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a94:	f003 031f 	and.w	r3, r3, #31
 8003a98:	2208      	movs	r2, #8
 8003a9a:	409a      	lsls	r2, r3
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aa4:	f043 0201 	orr.w	r2, r3, #1
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ab0:	f003 031f 	and.w	r3, r3, #31
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d06e      	beq.n	8003ba0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a69      	ldr	r2, [pc, #420]	@ (8003c6c <HAL_DMA_IRQHandler+0x3f8>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d04a      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x2ee>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a67      	ldr	r2, [pc, #412]	@ (8003c70 <HAL_DMA_IRQHandler+0x3fc>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d045      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x2ee>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a66      	ldr	r2, [pc, #408]	@ (8003c74 <HAL_DMA_IRQHandler+0x400>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d040      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x2ee>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a64      	ldr	r2, [pc, #400]	@ (8003c78 <HAL_DMA_IRQHandler+0x404>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d03b      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x2ee>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a63      	ldr	r2, [pc, #396]	@ (8003c7c <HAL_DMA_IRQHandler+0x408>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d036      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x2ee>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a61      	ldr	r2, [pc, #388]	@ (8003c80 <HAL_DMA_IRQHandler+0x40c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d031      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x2ee>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a60      	ldr	r2, [pc, #384]	@ (8003c84 <HAL_DMA_IRQHandler+0x410>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d02c      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x2ee>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a5e      	ldr	r2, [pc, #376]	@ (8003c88 <HAL_DMA_IRQHandler+0x414>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d027      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x2ee>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a5d      	ldr	r2, [pc, #372]	@ (8003c8c <HAL_DMA_IRQHandler+0x418>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d022      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x2ee>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a5b      	ldr	r2, [pc, #364]	@ (8003c90 <HAL_DMA_IRQHandler+0x41c>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d01d      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x2ee>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a5a      	ldr	r2, [pc, #360]	@ (8003c94 <HAL_DMA_IRQHandler+0x420>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d018      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x2ee>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a58      	ldr	r2, [pc, #352]	@ (8003c98 <HAL_DMA_IRQHandler+0x424>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d013      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x2ee>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a57      	ldr	r2, [pc, #348]	@ (8003c9c <HAL_DMA_IRQHandler+0x428>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d00e      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x2ee>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a55      	ldr	r2, [pc, #340]	@ (8003ca0 <HAL_DMA_IRQHandler+0x42c>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d009      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x2ee>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a54      	ldr	r2, [pc, #336]	@ (8003ca4 <HAL_DMA_IRQHandler+0x430>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d004      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x2ee>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a52      	ldr	r2, [pc, #328]	@ (8003ca8 <HAL_DMA_IRQHandler+0x434>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d10a      	bne.n	8003b78 <HAL_DMA_IRQHandler+0x304>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	695b      	ldr	r3, [r3, #20]
 8003b68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	bf14      	ite	ne
 8003b70:	2301      	movne	r3, #1
 8003b72:	2300      	moveq	r3, #0
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	e003      	b.n	8003b80 <HAL_DMA_IRQHandler+0x30c>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2300      	movs	r3, #0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00d      	beq.n	8003ba0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b88:	f003 031f 	and.w	r3, r3, #31
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	409a      	lsls	r2, r3
 8003b90:	6a3b      	ldr	r3, [r7, #32]
 8003b92:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b98:	f043 0202 	orr.w	r2, r3, #2
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ba4:	f003 031f 	and.w	r3, r3, #31
 8003ba8:	2204      	movs	r2, #4
 8003baa:	409a      	lsls	r2, r3
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f000 808f 	beq.w	8003cd4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a2c      	ldr	r2, [pc, #176]	@ (8003c6c <HAL_DMA_IRQHandler+0x3f8>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d04a      	beq.n	8003c56 <HAL_DMA_IRQHandler+0x3e2>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a2a      	ldr	r2, [pc, #168]	@ (8003c70 <HAL_DMA_IRQHandler+0x3fc>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d045      	beq.n	8003c56 <HAL_DMA_IRQHandler+0x3e2>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a29      	ldr	r2, [pc, #164]	@ (8003c74 <HAL_DMA_IRQHandler+0x400>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d040      	beq.n	8003c56 <HAL_DMA_IRQHandler+0x3e2>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a27      	ldr	r2, [pc, #156]	@ (8003c78 <HAL_DMA_IRQHandler+0x404>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d03b      	beq.n	8003c56 <HAL_DMA_IRQHandler+0x3e2>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a26      	ldr	r2, [pc, #152]	@ (8003c7c <HAL_DMA_IRQHandler+0x408>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d036      	beq.n	8003c56 <HAL_DMA_IRQHandler+0x3e2>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a24      	ldr	r2, [pc, #144]	@ (8003c80 <HAL_DMA_IRQHandler+0x40c>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d031      	beq.n	8003c56 <HAL_DMA_IRQHandler+0x3e2>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a23      	ldr	r2, [pc, #140]	@ (8003c84 <HAL_DMA_IRQHandler+0x410>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d02c      	beq.n	8003c56 <HAL_DMA_IRQHandler+0x3e2>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a21      	ldr	r2, [pc, #132]	@ (8003c88 <HAL_DMA_IRQHandler+0x414>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d027      	beq.n	8003c56 <HAL_DMA_IRQHandler+0x3e2>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a20      	ldr	r2, [pc, #128]	@ (8003c8c <HAL_DMA_IRQHandler+0x418>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d022      	beq.n	8003c56 <HAL_DMA_IRQHandler+0x3e2>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a1e      	ldr	r2, [pc, #120]	@ (8003c90 <HAL_DMA_IRQHandler+0x41c>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d01d      	beq.n	8003c56 <HAL_DMA_IRQHandler+0x3e2>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a1d      	ldr	r2, [pc, #116]	@ (8003c94 <HAL_DMA_IRQHandler+0x420>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d018      	beq.n	8003c56 <HAL_DMA_IRQHandler+0x3e2>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a1b      	ldr	r2, [pc, #108]	@ (8003c98 <HAL_DMA_IRQHandler+0x424>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d013      	beq.n	8003c56 <HAL_DMA_IRQHandler+0x3e2>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a1a      	ldr	r2, [pc, #104]	@ (8003c9c <HAL_DMA_IRQHandler+0x428>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d00e      	beq.n	8003c56 <HAL_DMA_IRQHandler+0x3e2>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a18      	ldr	r2, [pc, #96]	@ (8003ca0 <HAL_DMA_IRQHandler+0x42c>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d009      	beq.n	8003c56 <HAL_DMA_IRQHandler+0x3e2>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a17      	ldr	r2, [pc, #92]	@ (8003ca4 <HAL_DMA_IRQHandler+0x430>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d004      	beq.n	8003c56 <HAL_DMA_IRQHandler+0x3e2>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a15      	ldr	r2, [pc, #84]	@ (8003ca8 <HAL_DMA_IRQHandler+0x434>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d12a      	bne.n	8003cac <HAL_DMA_IRQHandler+0x438>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	bf14      	ite	ne
 8003c64:	2301      	movne	r3, #1
 8003c66:	2300      	moveq	r3, #0
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	e023      	b.n	8003cb4 <HAL_DMA_IRQHandler+0x440>
 8003c6c:	40020010 	.word	0x40020010
 8003c70:	40020028 	.word	0x40020028
 8003c74:	40020040 	.word	0x40020040
 8003c78:	40020058 	.word	0x40020058
 8003c7c:	40020070 	.word	0x40020070
 8003c80:	40020088 	.word	0x40020088
 8003c84:	400200a0 	.word	0x400200a0
 8003c88:	400200b8 	.word	0x400200b8
 8003c8c:	40020410 	.word	0x40020410
 8003c90:	40020428 	.word	0x40020428
 8003c94:	40020440 	.word	0x40020440
 8003c98:	40020458 	.word	0x40020458
 8003c9c:	40020470 	.word	0x40020470
 8003ca0:	40020488 	.word	0x40020488
 8003ca4:	400204a0 	.word	0x400204a0
 8003ca8:	400204b8 	.word	0x400204b8
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00d      	beq.n	8003cd4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cbc:	f003 031f 	and.w	r3, r3, #31
 8003cc0:	2204      	movs	r2, #4
 8003cc2:	409a      	lsls	r2, r3
 8003cc4:	6a3b      	ldr	r3, [r7, #32]
 8003cc6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ccc:	f043 0204 	orr.w	r2, r3, #4
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cd8:	f003 031f 	and.w	r3, r3, #31
 8003cdc:	2210      	movs	r2, #16
 8003cde:	409a      	lsls	r2, r3
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f000 80a6 	beq.w	8003e36 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a85      	ldr	r2, [pc, #532]	@ (8003f04 <HAL_DMA_IRQHandler+0x690>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d04a      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x516>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a83      	ldr	r2, [pc, #524]	@ (8003f08 <HAL_DMA_IRQHandler+0x694>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d045      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x516>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a82      	ldr	r2, [pc, #520]	@ (8003f0c <HAL_DMA_IRQHandler+0x698>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d040      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x516>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a80      	ldr	r2, [pc, #512]	@ (8003f10 <HAL_DMA_IRQHandler+0x69c>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d03b      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x516>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a7f      	ldr	r2, [pc, #508]	@ (8003f14 <HAL_DMA_IRQHandler+0x6a0>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d036      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x516>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a7d      	ldr	r2, [pc, #500]	@ (8003f18 <HAL_DMA_IRQHandler+0x6a4>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d031      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x516>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a7c      	ldr	r2, [pc, #496]	@ (8003f1c <HAL_DMA_IRQHandler+0x6a8>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d02c      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x516>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a7a      	ldr	r2, [pc, #488]	@ (8003f20 <HAL_DMA_IRQHandler+0x6ac>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d027      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x516>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a79      	ldr	r2, [pc, #484]	@ (8003f24 <HAL_DMA_IRQHandler+0x6b0>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d022      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x516>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a77      	ldr	r2, [pc, #476]	@ (8003f28 <HAL_DMA_IRQHandler+0x6b4>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d01d      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x516>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a76      	ldr	r2, [pc, #472]	@ (8003f2c <HAL_DMA_IRQHandler+0x6b8>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d018      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x516>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a74      	ldr	r2, [pc, #464]	@ (8003f30 <HAL_DMA_IRQHandler+0x6bc>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d013      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x516>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a73      	ldr	r2, [pc, #460]	@ (8003f34 <HAL_DMA_IRQHandler+0x6c0>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d00e      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x516>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a71      	ldr	r2, [pc, #452]	@ (8003f38 <HAL_DMA_IRQHandler+0x6c4>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d009      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x516>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a70      	ldr	r2, [pc, #448]	@ (8003f3c <HAL_DMA_IRQHandler+0x6c8>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d004      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x516>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a6e      	ldr	r2, [pc, #440]	@ (8003f40 <HAL_DMA_IRQHandler+0x6cc>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d10a      	bne.n	8003da0 <HAL_DMA_IRQHandler+0x52c>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0308 	and.w	r3, r3, #8
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	bf14      	ite	ne
 8003d98:	2301      	movne	r3, #1
 8003d9a:	2300      	moveq	r3, #0
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	e009      	b.n	8003db4 <HAL_DMA_IRQHandler+0x540>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0304 	and.w	r3, r3, #4
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	bf14      	ite	ne
 8003dae:	2301      	movne	r3, #1
 8003db0:	2300      	moveq	r3, #0
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d03e      	beq.n	8003e36 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dbc:	f003 031f 	and.w	r3, r3, #31
 8003dc0:	2210      	movs	r2, #16
 8003dc2:	409a      	lsls	r2, r3
 8003dc4:	6a3b      	ldr	r3, [r7, #32]
 8003dc6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d018      	beq.n	8003e08 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d108      	bne.n	8003df6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d024      	beq.n	8003e36 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	4798      	blx	r3
 8003df4:	e01f      	b.n	8003e36 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d01b      	beq.n	8003e36 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	4798      	blx	r3
 8003e06:	e016      	b.n	8003e36 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d107      	bne.n	8003e26 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 0208 	bic.w	r2, r2, #8
 8003e24:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e3a:	f003 031f 	and.w	r3, r3, #31
 8003e3e:	2220      	movs	r2, #32
 8003e40:	409a      	lsls	r2, r3
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	4013      	ands	r3, r2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f000 8110 	beq.w	800406c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a2c      	ldr	r2, [pc, #176]	@ (8003f04 <HAL_DMA_IRQHandler+0x690>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d04a      	beq.n	8003eec <HAL_DMA_IRQHandler+0x678>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a2b      	ldr	r2, [pc, #172]	@ (8003f08 <HAL_DMA_IRQHandler+0x694>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d045      	beq.n	8003eec <HAL_DMA_IRQHandler+0x678>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a29      	ldr	r2, [pc, #164]	@ (8003f0c <HAL_DMA_IRQHandler+0x698>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d040      	beq.n	8003eec <HAL_DMA_IRQHandler+0x678>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a28      	ldr	r2, [pc, #160]	@ (8003f10 <HAL_DMA_IRQHandler+0x69c>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d03b      	beq.n	8003eec <HAL_DMA_IRQHandler+0x678>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a26      	ldr	r2, [pc, #152]	@ (8003f14 <HAL_DMA_IRQHandler+0x6a0>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d036      	beq.n	8003eec <HAL_DMA_IRQHandler+0x678>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a25      	ldr	r2, [pc, #148]	@ (8003f18 <HAL_DMA_IRQHandler+0x6a4>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d031      	beq.n	8003eec <HAL_DMA_IRQHandler+0x678>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a23      	ldr	r2, [pc, #140]	@ (8003f1c <HAL_DMA_IRQHandler+0x6a8>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d02c      	beq.n	8003eec <HAL_DMA_IRQHandler+0x678>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a22      	ldr	r2, [pc, #136]	@ (8003f20 <HAL_DMA_IRQHandler+0x6ac>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d027      	beq.n	8003eec <HAL_DMA_IRQHandler+0x678>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a20      	ldr	r2, [pc, #128]	@ (8003f24 <HAL_DMA_IRQHandler+0x6b0>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d022      	beq.n	8003eec <HAL_DMA_IRQHandler+0x678>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a1f      	ldr	r2, [pc, #124]	@ (8003f28 <HAL_DMA_IRQHandler+0x6b4>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d01d      	beq.n	8003eec <HAL_DMA_IRQHandler+0x678>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a1d      	ldr	r2, [pc, #116]	@ (8003f2c <HAL_DMA_IRQHandler+0x6b8>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d018      	beq.n	8003eec <HAL_DMA_IRQHandler+0x678>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a1c      	ldr	r2, [pc, #112]	@ (8003f30 <HAL_DMA_IRQHandler+0x6bc>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d013      	beq.n	8003eec <HAL_DMA_IRQHandler+0x678>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a1a      	ldr	r2, [pc, #104]	@ (8003f34 <HAL_DMA_IRQHandler+0x6c0>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d00e      	beq.n	8003eec <HAL_DMA_IRQHandler+0x678>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a19      	ldr	r2, [pc, #100]	@ (8003f38 <HAL_DMA_IRQHandler+0x6c4>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d009      	beq.n	8003eec <HAL_DMA_IRQHandler+0x678>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a17      	ldr	r2, [pc, #92]	@ (8003f3c <HAL_DMA_IRQHandler+0x6c8>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d004      	beq.n	8003eec <HAL_DMA_IRQHandler+0x678>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a16      	ldr	r2, [pc, #88]	@ (8003f40 <HAL_DMA_IRQHandler+0x6cc>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d12b      	bne.n	8003f44 <HAL_DMA_IRQHandler+0x6d0>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0310 	and.w	r3, r3, #16
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	bf14      	ite	ne
 8003efa:	2301      	movne	r3, #1
 8003efc:	2300      	moveq	r3, #0
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	e02a      	b.n	8003f58 <HAL_DMA_IRQHandler+0x6e4>
 8003f02:	bf00      	nop
 8003f04:	40020010 	.word	0x40020010
 8003f08:	40020028 	.word	0x40020028
 8003f0c:	40020040 	.word	0x40020040
 8003f10:	40020058 	.word	0x40020058
 8003f14:	40020070 	.word	0x40020070
 8003f18:	40020088 	.word	0x40020088
 8003f1c:	400200a0 	.word	0x400200a0
 8003f20:	400200b8 	.word	0x400200b8
 8003f24:	40020410 	.word	0x40020410
 8003f28:	40020428 	.word	0x40020428
 8003f2c:	40020440 	.word	0x40020440
 8003f30:	40020458 	.word	0x40020458
 8003f34:	40020470 	.word	0x40020470
 8003f38:	40020488 	.word	0x40020488
 8003f3c:	400204a0 	.word	0x400204a0
 8003f40:	400204b8 	.word	0x400204b8
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	bf14      	ite	ne
 8003f52:	2301      	movne	r3, #1
 8003f54:	2300      	moveq	r3, #0
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f000 8087 	beq.w	800406c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f62:	f003 031f 	and.w	r3, r3, #31
 8003f66:	2220      	movs	r2, #32
 8003f68:	409a      	lsls	r2, r3
 8003f6a:	6a3b      	ldr	r3, [r7, #32]
 8003f6c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	d139      	bne.n	8003fee <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 0216 	bic.w	r2, r2, #22
 8003f88:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	695a      	ldr	r2, [r3, #20]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f98:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d103      	bne.n	8003faa <HAL_DMA_IRQHandler+0x736>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d007      	beq.n	8003fba <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f022 0208 	bic.w	r2, r2, #8
 8003fb8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fbe:	f003 031f 	and.w	r3, r3, #31
 8003fc2:	223f      	movs	r2, #63	@ 0x3f
 8003fc4:	409a      	lsls	r2, r3
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
 8003fc8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f000 834a 	beq.w	8004678 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	4798      	blx	r3
          }
          return;
 8003fec:	e344      	b.n	8004678 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d018      	beq.n	800402e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d108      	bne.n	800401c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800400e:	2b00      	cmp	r3, #0
 8004010:	d02c      	beq.n	800406c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	4798      	blx	r3
 800401a:	e027      	b.n	800406c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004020:	2b00      	cmp	r3, #0
 8004022:	d023      	beq.n	800406c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	4798      	blx	r3
 800402c:	e01e      	b.n	800406c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004038:	2b00      	cmp	r3, #0
 800403a:	d10f      	bne.n	800405c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f022 0210 	bic.w	r2, r2, #16
 800404a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004060:	2b00      	cmp	r3, #0
 8004062:	d003      	beq.n	800406c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004070:	2b00      	cmp	r3, #0
 8004072:	f000 8306 	beq.w	8004682 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	f000 8088 	beq.w	8004194 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2204      	movs	r2, #4
 8004088:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a7a      	ldr	r2, [pc, #488]	@ (800427c <HAL_DMA_IRQHandler+0xa08>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d04a      	beq.n	800412c <HAL_DMA_IRQHandler+0x8b8>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a79      	ldr	r2, [pc, #484]	@ (8004280 <HAL_DMA_IRQHandler+0xa0c>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d045      	beq.n	800412c <HAL_DMA_IRQHandler+0x8b8>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a77      	ldr	r2, [pc, #476]	@ (8004284 <HAL_DMA_IRQHandler+0xa10>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d040      	beq.n	800412c <HAL_DMA_IRQHandler+0x8b8>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a76      	ldr	r2, [pc, #472]	@ (8004288 <HAL_DMA_IRQHandler+0xa14>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d03b      	beq.n	800412c <HAL_DMA_IRQHandler+0x8b8>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a74      	ldr	r2, [pc, #464]	@ (800428c <HAL_DMA_IRQHandler+0xa18>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d036      	beq.n	800412c <HAL_DMA_IRQHandler+0x8b8>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a73      	ldr	r2, [pc, #460]	@ (8004290 <HAL_DMA_IRQHandler+0xa1c>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d031      	beq.n	800412c <HAL_DMA_IRQHandler+0x8b8>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a71      	ldr	r2, [pc, #452]	@ (8004294 <HAL_DMA_IRQHandler+0xa20>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d02c      	beq.n	800412c <HAL_DMA_IRQHandler+0x8b8>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a70      	ldr	r2, [pc, #448]	@ (8004298 <HAL_DMA_IRQHandler+0xa24>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d027      	beq.n	800412c <HAL_DMA_IRQHandler+0x8b8>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a6e      	ldr	r2, [pc, #440]	@ (800429c <HAL_DMA_IRQHandler+0xa28>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d022      	beq.n	800412c <HAL_DMA_IRQHandler+0x8b8>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a6d      	ldr	r2, [pc, #436]	@ (80042a0 <HAL_DMA_IRQHandler+0xa2c>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d01d      	beq.n	800412c <HAL_DMA_IRQHandler+0x8b8>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a6b      	ldr	r2, [pc, #428]	@ (80042a4 <HAL_DMA_IRQHandler+0xa30>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d018      	beq.n	800412c <HAL_DMA_IRQHandler+0x8b8>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a6a      	ldr	r2, [pc, #424]	@ (80042a8 <HAL_DMA_IRQHandler+0xa34>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d013      	beq.n	800412c <HAL_DMA_IRQHandler+0x8b8>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a68      	ldr	r2, [pc, #416]	@ (80042ac <HAL_DMA_IRQHandler+0xa38>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d00e      	beq.n	800412c <HAL_DMA_IRQHandler+0x8b8>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a67      	ldr	r2, [pc, #412]	@ (80042b0 <HAL_DMA_IRQHandler+0xa3c>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d009      	beq.n	800412c <HAL_DMA_IRQHandler+0x8b8>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a65      	ldr	r2, [pc, #404]	@ (80042b4 <HAL_DMA_IRQHandler+0xa40>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d004      	beq.n	800412c <HAL_DMA_IRQHandler+0x8b8>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a64      	ldr	r2, [pc, #400]	@ (80042b8 <HAL_DMA_IRQHandler+0xa44>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d108      	bne.n	800413e <HAL_DMA_IRQHandler+0x8ca>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 0201 	bic.w	r2, r2, #1
 800413a:	601a      	str	r2, [r3, #0]
 800413c:	e007      	b.n	800414e <HAL_DMA_IRQHandler+0x8da>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 0201 	bic.w	r2, r2, #1
 800414c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	3301      	adds	r3, #1
 8004152:	60fb      	str	r3, [r7, #12]
 8004154:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004156:	429a      	cmp	r2, r3
 8004158:	d307      	bcc.n	800416a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0301 	and.w	r3, r3, #1
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1f2      	bne.n	800414e <HAL_DMA_IRQHandler+0x8da>
 8004168:	e000      	b.n	800416c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800416a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	d004      	beq.n	8004184 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2203      	movs	r2, #3
 800417e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004182:	e003      	b.n	800418c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004198:	2b00      	cmp	r3, #0
 800419a:	f000 8272 	beq.w	8004682 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	4798      	blx	r3
 80041a6:	e26c      	b.n	8004682 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a43      	ldr	r2, [pc, #268]	@ (80042bc <HAL_DMA_IRQHandler+0xa48>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d022      	beq.n	80041f8 <HAL_DMA_IRQHandler+0x984>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a42      	ldr	r2, [pc, #264]	@ (80042c0 <HAL_DMA_IRQHandler+0xa4c>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d01d      	beq.n	80041f8 <HAL_DMA_IRQHandler+0x984>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a40      	ldr	r2, [pc, #256]	@ (80042c4 <HAL_DMA_IRQHandler+0xa50>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d018      	beq.n	80041f8 <HAL_DMA_IRQHandler+0x984>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a3f      	ldr	r2, [pc, #252]	@ (80042c8 <HAL_DMA_IRQHandler+0xa54>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d013      	beq.n	80041f8 <HAL_DMA_IRQHandler+0x984>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a3d      	ldr	r2, [pc, #244]	@ (80042cc <HAL_DMA_IRQHandler+0xa58>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d00e      	beq.n	80041f8 <HAL_DMA_IRQHandler+0x984>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a3c      	ldr	r2, [pc, #240]	@ (80042d0 <HAL_DMA_IRQHandler+0xa5c>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d009      	beq.n	80041f8 <HAL_DMA_IRQHandler+0x984>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a3a      	ldr	r2, [pc, #232]	@ (80042d4 <HAL_DMA_IRQHandler+0xa60>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d004      	beq.n	80041f8 <HAL_DMA_IRQHandler+0x984>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a39      	ldr	r2, [pc, #228]	@ (80042d8 <HAL_DMA_IRQHandler+0xa64>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d101      	bne.n	80041fc <HAL_DMA_IRQHandler+0x988>
 80041f8:	2301      	movs	r3, #1
 80041fa:	e000      	b.n	80041fe <HAL_DMA_IRQHandler+0x98a>
 80041fc:	2300      	movs	r3, #0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f000 823f 	beq.w	8004682 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004210:	f003 031f 	and.w	r3, r3, #31
 8004214:	2204      	movs	r2, #4
 8004216:	409a      	lsls	r2, r3
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	4013      	ands	r3, r2
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 80cd 	beq.w	80043bc <HAL_DMA_IRQHandler+0xb48>
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 80c7 	beq.w	80043bc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004232:	f003 031f 	and.w	r3, r3, #31
 8004236:	2204      	movs	r2, #4
 8004238:	409a      	lsls	r2, r3
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d049      	beq.n	80042dc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d109      	bne.n	8004266 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004256:	2b00      	cmp	r3, #0
 8004258:	f000 8210 	beq.w	800467c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004264:	e20a      	b.n	800467c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426a:	2b00      	cmp	r3, #0
 800426c:	f000 8206 	beq.w	800467c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004278:	e200      	b.n	800467c <HAL_DMA_IRQHandler+0xe08>
 800427a:	bf00      	nop
 800427c:	40020010 	.word	0x40020010
 8004280:	40020028 	.word	0x40020028
 8004284:	40020040 	.word	0x40020040
 8004288:	40020058 	.word	0x40020058
 800428c:	40020070 	.word	0x40020070
 8004290:	40020088 	.word	0x40020088
 8004294:	400200a0 	.word	0x400200a0
 8004298:	400200b8 	.word	0x400200b8
 800429c:	40020410 	.word	0x40020410
 80042a0:	40020428 	.word	0x40020428
 80042a4:	40020440 	.word	0x40020440
 80042a8:	40020458 	.word	0x40020458
 80042ac:	40020470 	.word	0x40020470
 80042b0:	40020488 	.word	0x40020488
 80042b4:	400204a0 	.word	0x400204a0
 80042b8:	400204b8 	.word	0x400204b8
 80042bc:	58025408 	.word	0x58025408
 80042c0:	5802541c 	.word	0x5802541c
 80042c4:	58025430 	.word	0x58025430
 80042c8:	58025444 	.word	0x58025444
 80042cc:	58025458 	.word	0x58025458
 80042d0:	5802546c 	.word	0x5802546c
 80042d4:	58025480 	.word	0x58025480
 80042d8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	f003 0320 	and.w	r3, r3, #32
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d160      	bne.n	80043a8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a7f      	ldr	r2, [pc, #508]	@ (80044e8 <HAL_DMA_IRQHandler+0xc74>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d04a      	beq.n	8004386 <HAL_DMA_IRQHandler+0xb12>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a7d      	ldr	r2, [pc, #500]	@ (80044ec <HAL_DMA_IRQHandler+0xc78>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d045      	beq.n	8004386 <HAL_DMA_IRQHandler+0xb12>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a7c      	ldr	r2, [pc, #496]	@ (80044f0 <HAL_DMA_IRQHandler+0xc7c>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d040      	beq.n	8004386 <HAL_DMA_IRQHandler+0xb12>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a7a      	ldr	r2, [pc, #488]	@ (80044f4 <HAL_DMA_IRQHandler+0xc80>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d03b      	beq.n	8004386 <HAL_DMA_IRQHandler+0xb12>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a79      	ldr	r2, [pc, #484]	@ (80044f8 <HAL_DMA_IRQHandler+0xc84>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d036      	beq.n	8004386 <HAL_DMA_IRQHandler+0xb12>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a77      	ldr	r2, [pc, #476]	@ (80044fc <HAL_DMA_IRQHandler+0xc88>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d031      	beq.n	8004386 <HAL_DMA_IRQHandler+0xb12>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a76      	ldr	r2, [pc, #472]	@ (8004500 <HAL_DMA_IRQHandler+0xc8c>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d02c      	beq.n	8004386 <HAL_DMA_IRQHandler+0xb12>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a74      	ldr	r2, [pc, #464]	@ (8004504 <HAL_DMA_IRQHandler+0xc90>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d027      	beq.n	8004386 <HAL_DMA_IRQHandler+0xb12>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a73      	ldr	r2, [pc, #460]	@ (8004508 <HAL_DMA_IRQHandler+0xc94>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d022      	beq.n	8004386 <HAL_DMA_IRQHandler+0xb12>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a71      	ldr	r2, [pc, #452]	@ (800450c <HAL_DMA_IRQHandler+0xc98>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d01d      	beq.n	8004386 <HAL_DMA_IRQHandler+0xb12>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a70      	ldr	r2, [pc, #448]	@ (8004510 <HAL_DMA_IRQHandler+0xc9c>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d018      	beq.n	8004386 <HAL_DMA_IRQHandler+0xb12>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a6e      	ldr	r2, [pc, #440]	@ (8004514 <HAL_DMA_IRQHandler+0xca0>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d013      	beq.n	8004386 <HAL_DMA_IRQHandler+0xb12>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a6d      	ldr	r2, [pc, #436]	@ (8004518 <HAL_DMA_IRQHandler+0xca4>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d00e      	beq.n	8004386 <HAL_DMA_IRQHandler+0xb12>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a6b      	ldr	r2, [pc, #428]	@ (800451c <HAL_DMA_IRQHandler+0xca8>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d009      	beq.n	8004386 <HAL_DMA_IRQHandler+0xb12>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a6a      	ldr	r2, [pc, #424]	@ (8004520 <HAL_DMA_IRQHandler+0xcac>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d004      	beq.n	8004386 <HAL_DMA_IRQHandler+0xb12>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a68      	ldr	r2, [pc, #416]	@ (8004524 <HAL_DMA_IRQHandler+0xcb0>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d108      	bne.n	8004398 <HAL_DMA_IRQHandler+0xb24>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 0208 	bic.w	r2, r2, #8
 8004394:	601a      	str	r2, [r3, #0]
 8004396:	e007      	b.n	80043a8 <HAL_DMA_IRQHandler+0xb34>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f022 0204 	bic.w	r2, r2, #4
 80043a6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f000 8165 	beq.w	800467c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043ba:	e15f      	b.n	800467c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043c0:	f003 031f 	and.w	r3, r3, #31
 80043c4:	2202      	movs	r2, #2
 80043c6:	409a      	lsls	r2, r3
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	4013      	ands	r3, r2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 80c5 	beq.w	800455c <HAL_DMA_IRQHandler+0xce8>
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 80bf 	beq.w	800455c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043e2:	f003 031f 	and.w	r3, r3, #31
 80043e6:	2202      	movs	r2, #2
 80043e8:	409a      	lsls	r2, r3
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d018      	beq.n	800442a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d109      	bne.n	8004416 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004406:	2b00      	cmp	r3, #0
 8004408:	f000 813a 	beq.w	8004680 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004414:	e134      	b.n	8004680 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800441a:	2b00      	cmp	r3, #0
 800441c:	f000 8130 	beq.w	8004680 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004428:	e12a      	b.n	8004680 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	f003 0320 	and.w	r3, r3, #32
 8004430:	2b00      	cmp	r3, #0
 8004432:	f040 8089 	bne.w	8004548 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a2b      	ldr	r2, [pc, #172]	@ (80044e8 <HAL_DMA_IRQHandler+0xc74>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d04a      	beq.n	80044d6 <HAL_DMA_IRQHandler+0xc62>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a29      	ldr	r2, [pc, #164]	@ (80044ec <HAL_DMA_IRQHandler+0xc78>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d045      	beq.n	80044d6 <HAL_DMA_IRQHandler+0xc62>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a28      	ldr	r2, [pc, #160]	@ (80044f0 <HAL_DMA_IRQHandler+0xc7c>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d040      	beq.n	80044d6 <HAL_DMA_IRQHandler+0xc62>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a26      	ldr	r2, [pc, #152]	@ (80044f4 <HAL_DMA_IRQHandler+0xc80>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d03b      	beq.n	80044d6 <HAL_DMA_IRQHandler+0xc62>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a25      	ldr	r2, [pc, #148]	@ (80044f8 <HAL_DMA_IRQHandler+0xc84>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d036      	beq.n	80044d6 <HAL_DMA_IRQHandler+0xc62>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a23      	ldr	r2, [pc, #140]	@ (80044fc <HAL_DMA_IRQHandler+0xc88>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d031      	beq.n	80044d6 <HAL_DMA_IRQHandler+0xc62>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a22      	ldr	r2, [pc, #136]	@ (8004500 <HAL_DMA_IRQHandler+0xc8c>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d02c      	beq.n	80044d6 <HAL_DMA_IRQHandler+0xc62>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a20      	ldr	r2, [pc, #128]	@ (8004504 <HAL_DMA_IRQHandler+0xc90>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d027      	beq.n	80044d6 <HAL_DMA_IRQHandler+0xc62>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a1f      	ldr	r2, [pc, #124]	@ (8004508 <HAL_DMA_IRQHandler+0xc94>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d022      	beq.n	80044d6 <HAL_DMA_IRQHandler+0xc62>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a1d      	ldr	r2, [pc, #116]	@ (800450c <HAL_DMA_IRQHandler+0xc98>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d01d      	beq.n	80044d6 <HAL_DMA_IRQHandler+0xc62>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a1c      	ldr	r2, [pc, #112]	@ (8004510 <HAL_DMA_IRQHandler+0xc9c>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d018      	beq.n	80044d6 <HAL_DMA_IRQHandler+0xc62>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a1a      	ldr	r2, [pc, #104]	@ (8004514 <HAL_DMA_IRQHandler+0xca0>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d013      	beq.n	80044d6 <HAL_DMA_IRQHandler+0xc62>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a19      	ldr	r2, [pc, #100]	@ (8004518 <HAL_DMA_IRQHandler+0xca4>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d00e      	beq.n	80044d6 <HAL_DMA_IRQHandler+0xc62>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a17      	ldr	r2, [pc, #92]	@ (800451c <HAL_DMA_IRQHandler+0xca8>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d009      	beq.n	80044d6 <HAL_DMA_IRQHandler+0xc62>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a16      	ldr	r2, [pc, #88]	@ (8004520 <HAL_DMA_IRQHandler+0xcac>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d004      	beq.n	80044d6 <HAL_DMA_IRQHandler+0xc62>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a14      	ldr	r2, [pc, #80]	@ (8004524 <HAL_DMA_IRQHandler+0xcb0>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d128      	bne.n	8004528 <HAL_DMA_IRQHandler+0xcb4>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f022 0214 	bic.w	r2, r2, #20
 80044e4:	601a      	str	r2, [r3, #0]
 80044e6:	e027      	b.n	8004538 <HAL_DMA_IRQHandler+0xcc4>
 80044e8:	40020010 	.word	0x40020010
 80044ec:	40020028 	.word	0x40020028
 80044f0:	40020040 	.word	0x40020040
 80044f4:	40020058 	.word	0x40020058
 80044f8:	40020070 	.word	0x40020070
 80044fc:	40020088 	.word	0x40020088
 8004500:	400200a0 	.word	0x400200a0
 8004504:	400200b8 	.word	0x400200b8
 8004508:	40020410 	.word	0x40020410
 800450c:	40020428 	.word	0x40020428
 8004510:	40020440 	.word	0x40020440
 8004514:	40020458 	.word	0x40020458
 8004518:	40020470 	.word	0x40020470
 800451c:	40020488 	.word	0x40020488
 8004520:	400204a0 	.word	0x400204a0
 8004524:	400204b8 	.word	0x400204b8
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f022 020a 	bic.w	r2, r2, #10
 8004536:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800454c:	2b00      	cmp	r3, #0
 800454e:	f000 8097 	beq.w	8004680 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800455a:	e091      	b.n	8004680 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004560:	f003 031f 	and.w	r3, r3, #31
 8004564:	2208      	movs	r2, #8
 8004566:	409a      	lsls	r2, r3
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	4013      	ands	r3, r2
 800456c:	2b00      	cmp	r3, #0
 800456e:	f000 8088 	beq.w	8004682 <HAL_DMA_IRQHandler+0xe0e>
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	f003 0308 	and.w	r3, r3, #8
 8004578:	2b00      	cmp	r3, #0
 800457a:	f000 8082 	beq.w	8004682 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a41      	ldr	r2, [pc, #260]	@ (8004688 <HAL_DMA_IRQHandler+0xe14>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d04a      	beq.n	800461e <HAL_DMA_IRQHandler+0xdaa>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a3f      	ldr	r2, [pc, #252]	@ (800468c <HAL_DMA_IRQHandler+0xe18>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d045      	beq.n	800461e <HAL_DMA_IRQHandler+0xdaa>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a3e      	ldr	r2, [pc, #248]	@ (8004690 <HAL_DMA_IRQHandler+0xe1c>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d040      	beq.n	800461e <HAL_DMA_IRQHandler+0xdaa>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a3c      	ldr	r2, [pc, #240]	@ (8004694 <HAL_DMA_IRQHandler+0xe20>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d03b      	beq.n	800461e <HAL_DMA_IRQHandler+0xdaa>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a3b      	ldr	r2, [pc, #236]	@ (8004698 <HAL_DMA_IRQHandler+0xe24>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d036      	beq.n	800461e <HAL_DMA_IRQHandler+0xdaa>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a39      	ldr	r2, [pc, #228]	@ (800469c <HAL_DMA_IRQHandler+0xe28>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d031      	beq.n	800461e <HAL_DMA_IRQHandler+0xdaa>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a38      	ldr	r2, [pc, #224]	@ (80046a0 <HAL_DMA_IRQHandler+0xe2c>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d02c      	beq.n	800461e <HAL_DMA_IRQHandler+0xdaa>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a36      	ldr	r2, [pc, #216]	@ (80046a4 <HAL_DMA_IRQHandler+0xe30>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d027      	beq.n	800461e <HAL_DMA_IRQHandler+0xdaa>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a35      	ldr	r2, [pc, #212]	@ (80046a8 <HAL_DMA_IRQHandler+0xe34>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d022      	beq.n	800461e <HAL_DMA_IRQHandler+0xdaa>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a33      	ldr	r2, [pc, #204]	@ (80046ac <HAL_DMA_IRQHandler+0xe38>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d01d      	beq.n	800461e <HAL_DMA_IRQHandler+0xdaa>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a32      	ldr	r2, [pc, #200]	@ (80046b0 <HAL_DMA_IRQHandler+0xe3c>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d018      	beq.n	800461e <HAL_DMA_IRQHandler+0xdaa>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a30      	ldr	r2, [pc, #192]	@ (80046b4 <HAL_DMA_IRQHandler+0xe40>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d013      	beq.n	800461e <HAL_DMA_IRQHandler+0xdaa>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a2f      	ldr	r2, [pc, #188]	@ (80046b8 <HAL_DMA_IRQHandler+0xe44>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d00e      	beq.n	800461e <HAL_DMA_IRQHandler+0xdaa>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a2d      	ldr	r2, [pc, #180]	@ (80046bc <HAL_DMA_IRQHandler+0xe48>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d009      	beq.n	800461e <HAL_DMA_IRQHandler+0xdaa>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a2c      	ldr	r2, [pc, #176]	@ (80046c0 <HAL_DMA_IRQHandler+0xe4c>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d004      	beq.n	800461e <HAL_DMA_IRQHandler+0xdaa>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a2a      	ldr	r2, [pc, #168]	@ (80046c4 <HAL_DMA_IRQHandler+0xe50>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d108      	bne.n	8004630 <HAL_DMA_IRQHandler+0xdbc>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 021c 	bic.w	r2, r2, #28
 800462c:	601a      	str	r2, [r3, #0]
 800462e:	e007      	b.n	8004640 <HAL_DMA_IRQHandler+0xdcc>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 020e 	bic.w	r2, r2, #14
 800463e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004644:	f003 031f 	and.w	r3, r3, #31
 8004648:	2201      	movs	r2, #1
 800464a:	409a      	lsls	r2, r3
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800466a:	2b00      	cmp	r3, #0
 800466c:	d009      	beq.n	8004682 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	4798      	blx	r3
 8004676:	e004      	b.n	8004682 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004678:	bf00      	nop
 800467a:	e002      	b.n	8004682 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800467c:	bf00      	nop
 800467e:	e000      	b.n	8004682 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004680:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004682:	3728      	adds	r7, #40	@ 0x28
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	40020010 	.word	0x40020010
 800468c:	40020028 	.word	0x40020028
 8004690:	40020040 	.word	0x40020040
 8004694:	40020058 	.word	0x40020058
 8004698:	40020070 	.word	0x40020070
 800469c:	40020088 	.word	0x40020088
 80046a0:	400200a0 	.word	0x400200a0
 80046a4:	400200b8 	.word	0x400200b8
 80046a8:	40020410 	.word	0x40020410
 80046ac:	40020428 	.word	0x40020428
 80046b0:	40020440 	.word	0x40020440
 80046b4:	40020458 	.word	0x40020458
 80046b8:	40020470 	.word	0x40020470
 80046bc:	40020488 	.word	0x40020488
 80046c0:	400204a0 	.word	0x400204a0
 80046c4:	400204b8 	.word	0x400204b8

080046c8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b087      	sub	sp, #28
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	607a      	str	r2, [r7, #4]
 80046d4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046da:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046e0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a7f      	ldr	r2, [pc, #508]	@ (80048e4 <DMA_SetConfig+0x21c>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d072      	beq.n	80047d2 <DMA_SetConfig+0x10a>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a7d      	ldr	r2, [pc, #500]	@ (80048e8 <DMA_SetConfig+0x220>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d06d      	beq.n	80047d2 <DMA_SetConfig+0x10a>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a7c      	ldr	r2, [pc, #496]	@ (80048ec <DMA_SetConfig+0x224>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d068      	beq.n	80047d2 <DMA_SetConfig+0x10a>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a7a      	ldr	r2, [pc, #488]	@ (80048f0 <DMA_SetConfig+0x228>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d063      	beq.n	80047d2 <DMA_SetConfig+0x10a>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a79      	ldr	r2, [pc, #484]	@ (80048f4 <DMA_SetConfig+0x22c>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d05e      	beq.n	80047d2 <DMA_SetConfig+0x10a>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a77      	ldr	r2, [pc, #476]	@ (80048f8 <DMA_SetConfig+0x230>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d059      	beq.n	80047d2 <DMA_SetConfig+0x10a>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a76      	ldr	r2, [pc, #472]	@ (80048fc <DMA_SetConfig+0x234>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d054      	beq.n	80047d2 <DMA_SetConfig+0x10a>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a74      	ldr	r2, [pc, #464]	@ (8004900 <DMA_SetConfig+0x238>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d04f      	beq.n	80047d2 <DMA_SetConfig+0x10a>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a73      	ldr	r2, [pc, #460]	@ (8004904 <DMA_SetConfig+0x23c>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d04a      	beq.n	80047d2 <DMA_SetConfig+0x10a>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a71      	ldr	r2, [pc, #452]	@ (8004908 <DMA_SetConfig+0x240>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d045      	beq.n	80047d2 <DMA_SetConfig+0x10a>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a70      	ldr	r2, [pc, #448]	@ (800490c <DMA_SetConfig+0x244>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d040      	beq.n	80047d2 <DMA_SetConfig+0x10a>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a6e      	ldr	r2, [pc, #440]	@ (8004910 <DMA_SetConfig+0x248>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d03b      	beq.n	80047d2 <DMA_SetConfig+0x10a>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a6d      	ldr	r2, [pc, #436]	@ (8004914 <DMA_SetConfig+0x24c>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d036      	beq.n	80047d2 <DMA_SetConfig+0x10a>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a6b      	ldr	r2, [pc, #428]	@ (8004918 <DMA_SetConfig+0x250>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d031      	beq.n	80047d2 <DMA_SetConfig+0x10a>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a6a      	ldr	r2, [pc, #424]	@ (800491c <DMA_SetConfig+0x254>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d02c      	beq.n	80047d2 <DMA_SetConfig+0x10a>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a68      	ldr	r2, [pc, #416]	@ (8004920 <DMA_SetConfig+0x258>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d027      	beq.n	80047d2 <DMA_SetConfig+0x10a>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a67      	ldr	r2, [pc, #412]	@ (8004924 <DMA_SetConfig+0x25c>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d022      	beq.n	80047d2 <DMA_SetConfig+0x10a>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a65      	ldr	r2, [pc, #404]	@ (8004928 <DMA_SetConfig+0x260>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d01d      	beq.n	80047d2 <DMA_SetConfig+0x10a>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a64      	ldr	r2, [pc, #400]	@ (800492c <DMA_SetConfig+0x264>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d018      	beq.n	80047d2 <DMA_SetConfig+0x10a>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a62      	ldr	r2, [pc, #392]	@ (8004930 <DMA_SetConfig+0x268>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d013      	beq.n	80047d2 <DMA_SetConfig+0x10a>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a61      	ldr	r2, [pc, #388]	@ (8004934 <DMA_SetConfig+0x26c>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d00e      	beq.n	80047d2 <DMA_SetConfig+0x10a>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a5f      	ldr	r2, [pc, #380]	@ (8004938 <DMA_SetConfig+0x270>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d009      	beq.n	80047d2 <DMA_SetConfig+0x10a>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a5e      	ldr	r2, [pc, #376]	@ (800493c <DMA_SetConfig+0x274>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d004      	beq.n	80047d2 <DMA_SetConfig+0x10a>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a5c      	ldr	r2, [pc, #368]	@ (8004940 <DMA_SetConfig+0x278>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d101      	bne.n	80047d6 <DMA_SetConfig+0x10e>
 80047d2:	2301      	movs	r3, #1
 80047d4:	e000      	b.n	80047d8 <DMA_SetConfig+0x110>
 80047d6:	2300      	movs	r3, #0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00d      	beq.n	80047f8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80047e4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d004      	beq.n	80047f8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80047f6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a39      	ldr	r2, [pc, #228]	@ (80048e4 <DMA_SetConfig+0x21c>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d04a      	beq.n	8004898 <DMA_SetConfig+0x1d0>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a38      	ldr	r2, [pc, #224]	@ (80048e8 <DMA_SetConfig+0x220>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d045      	beq.n	8004898 <DMA_SetConfig+0x1d0>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a36      	ldr	r2, [pc, #216]	@ (80048ec <DMA_SetConfig+0x224>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d040      	beq.n	8004898 <DMA_SetConfig+0x1d0>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a35      	ldr	r2, [pc, #212]	@ (80048f0 <DMA_SetConfig+0x228>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d03b      	beq.n	8004898 <DMA_SetConfig+0x1d0>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a33      	ldr	r2, [pc, #204]	@ (80048f4 <DMA_SetConfig+0x22c>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d036      	beq.n	8004898 <DMA_SetConfig+0x1d0>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a32      	ldr	r2, [pc, #200]	@ (80048f8 <DMA_SetConfig+0x230>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d031      	beq.n	8004898 <DMA_SetConfig+0x1d0>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a30      	ldr	r2, [pc, #192]	@ (80048fc <DMA_SetConfig+0x234>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d02c      	beq.n	8004898 <DMA_SetConfig+0x1d0>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a2f      	ldr	r2, [pc, #188]	@ (8004900 <DMA_SetConfig+0x238>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d027      	beq.n	8004898 <DMA_SetConfig+0x1d0>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a2d      	ldr	r2, [pc, #180]	@ (8004904 <DMA_SetConfig+0x23c>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d022      	beq.n	8004898 <DMA_SetConfig+0x1d0>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a2c      	ldr	r2, [pc, #176]	@ (8004908 <DMA_SetConfig+0x240>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d01d      	beq.n	8004898 <DMA_SetConfig+0x1d0>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a2a      	ldr	r2, [pc, #168]	@ (800490c <DMA_SetConfig+0x244>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d018      	beq.n	8004898 <DMA_SetConfig+0x1d0>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a29      	ldr	r2, [pc, #164]	@ (8004910 <DMA_SetConfig+0x248>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d013      	beq.n	8004898 <DMA_SetConfig+0x1d0>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a27      	ldr	r2, [pc, #156]	@ (8004914 <DMA_SetConfig+0x24c>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d00e      	beq.n	8004898 <DMA_SetConfig+0x1d0>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a26      	ldr	r2, [pc, #152]	@ (8004918 <DMA_SetConfig+0x250>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d009      	beq.n	8004898 <DMA_SetConfig+0x1d0>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a24      	ldr	r2, [pc, #144]	@ (800491c <DMA_SetConfig+0x254>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d004      	beq.n	8004898 <DMA_SetConfig+0x1d0>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a23      	ldr	r2, [pc, #140]	@ (8004920 <DMA_SetConfig+0x258>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d101      	bne.n	800489c <DMA_SetConfig+0x1d4>
 8004898:	2301      	movs	r3, #1
 800489a:	e000      	b.n	800489e <DMA_SetConfig+0x1d6>
 800489c:	2300      	movs	r3, #0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d059      	beq.n	8004956 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048a6:	f003 031f 	and.w	r3, r3, #31
 80048aa:	223f      	movs	r2, #63	@ 0x3f
 80048ac:	409a      	lsls	r2, r3
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80048c0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	2b40      	cmp	r3, #64	@ 0x40
 80048d0:	d138      	bne.n	8004944 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80048e2:	e086      	b.n	80049f2 <DMA_SetConfig+0x32a>
 80048e4:	40020010 	.word	0x40020010
 80048e8:	40020028 	.word	0x40020028
 80048ec:	40020040 	.word	0x40020040
 80048f0:	40020058 	.word	0x40020058
 80048f4:	40020070 	.word	0x40020070
 80048f8:	40020088 	.word	0x40020088
 80048fc:	400200a0 	.word	0x400200a0
 8004900:	400200b8 	.word	0x400200b8
 8004904:	40020410 	.word	0x40020410
 8004908:	40020428 	.word	0x40020428
 800490c:	40020440 	.word	0x40020440
 8004910:	40020458 	.word	0x40020458
 8004914:	40020470 	.word	0x40020470
 8004918:	40020488 	.word	0x40020488
 800491c:	400204a0 	.word	0x400204a0
 8004920:	400204b8 	.word	0x400204b8
 8004924:	58025408 	.word	0x58025408
 8004928:	5802541c 	.word	0x5802541c
 800492c:	58025430 	.word	0x58025430
 8004930:	58025444 	.word	0x58025444
 8004934:	58025458 	.word	0x58025458
 8004938:	5802546c 	.word	0x5802546c
 800493c:	58025480 	.word	0x58025480
 8004940:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68ba      	ldr	r2, [r7, #8]
 800494a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	60da      	str	r2, [r3, #12]
}
 8004954:	e04d      	b.n	80049f2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a29      	ldr	r2, [pc, #164]	@ (8004a00 <DMA_SetConfig+0x338>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d022      	beq.n	80049a6 <DMA_SetConfig+0x2de>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a27      	ldr	r2, [pc, #156]	@ (8004a04 <DMA_SetConfig+0x33c>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d01d      	beq.n	80049a6 <DMA_SetConfig+0x2de>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a26      	ldr	r2, [pc, #152]	@ (8004a08 <DMA_SetConfig+0x340>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d018      	beq.n	80049a6 <DMA_SetConfig+0x2de>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a24      	ldr	r2, [pc, #144]	@ (8004a0c <DMA_SetConfig+0x344>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d013      	beq.n	80049a6 <DMA_SetConfig+0x2de>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a23      	ldr	r2, [pc, #140]	@ (8004a10 <DMA_SetConfig+0x348>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d00e      	beq.n	80049a6 <DMA_SetConfig+0x2de>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a21      	ldr	r2, [pc, #132]	@ (8004a14 <DMA_SetConfig+0x34c>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d009      	beq.n	80049a6 <DMA_SetConfig+0x2de>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a20      	ldr	r2, [pc, #128]	@ (8004a18 <DMA_SetConfig+0x350>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d004      	beq.n	80049a6 <DMA_SetConfig+0x2de>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a1e      	ldr	r2, [pc, #120]	@ (8004a1c <DMA_SetConfig+0x354>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d101      	bne.n	80049aa <DMA_SetConfig+0x2e2>
 80049a6:	2301      	movs	r3, #1
 80049a8:	e000      	b.n	80049ac <DMA_SetConfig+0x2e4>
 80049aa:	2300      	movs	r3, #0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d020      	beq.n	80049f2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049b4:	f003 031f 	and.w	r3, r3, #31
 80049b8:	2201      	movs	r2, #1
 80049ba:	409a      	lsls	r2, r3
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	683a      	ldr	r2, [r7, #0]
 80049c6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	2b40      	cmp	r3, #64	@ 0x40
 80049ce:	d108      	bne.n	80049e2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68ba      	ldr	r2, [r7, #8]
 80049de:	60da      	str	r2, [r3, #12]
}
 80049e0:	e007      	b.n	80049f2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68ba      	ldr	r2, [r7, #8]
 80049e8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	60da      	str	r2, [r3, #12]
}
 80049f2:	bf00      	nop
 80049f4:	371c      	adds	r7, #28
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	58025408 	.word	0x58025408
 8004a04:	5802541c 	.word	0x5802541c
 8004a08:	58025430 	.word	0x58025430
 8004a0c:	58025444 	.word	0x58025444
 8004a10:	58025458 	.word	0x58025458
 8004a14:	5802546c 	.word	0x5802546c
 8004a18:	58025480 	.word	0x58025480
 8004a1c:	58025494 	.word	0x58025494

08004a20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a42      	ldr	r2, [pc, #264]	@ (8004b38 <DMA_CalcBaseAndBitshift+0x118>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d04a      	beq.n	8004ac8 <DMA_CalcBaseAndBitshift+0xa8>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a41      	ldr	r2, [pc, #260]	@ (8004b3c <DMA_CalcBaseAndBitshift+0x11c>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d045      	beq.n	8004ac8 <DMA_CalcBaseAndBitshift+0xa8>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a3f      	ldr	r2, [pc, #252]	@ (8004b40 <DMA_CalcBaseAndBitshift+0x120>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d040      	beq.n	8004ac8 <DMA_CalcBaseAndBitshift+0xa8>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a3e      	ldr	r2, [pc, #248]	@ (8004b44 <DMA_CalcBaseAndBitshift+0x124>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d03b      	beq.n	8004ac8 <DMA_CalcBaseAndBitshift+0xa8>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a3c      	ldr	r2, [pc, #240]	@ (8004b48 <DMA_CalcBaseAndBitshift+0x128>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d036      	beq.n	8004ac8 <DMA_CalcBaseAndBitshift+0xa8>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a3b      	ldr	r2, [pc, #236]	@ (8004b4c <DMA_CalcBaseAndBitshift+0x12c>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d031      	beq.n	8004ac8 <DMA_CalcBaseAndBitshift+0xa8>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a39      	ldr	r2, [pc, #228]	@ (8004b50 <DMA_CalcBaseAndBitshift+0x130>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d02c      	beq.n	8004ac8 <DMA_CalcBaseAndBitshift+0xa8>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a38      	ldr	r2, [pc, #224]	@ (8004b54 <DMA_CalcBaseAndBitshift+0x134>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d027      	beq.n	8004ac8 <DMA_CalcBaseAndBitshift+0xa8>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a36      	ldr	r2, [pc, #216]	@ (8004b58 <DMA_CalcBaseAndBitshift+0x138>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d022      	beq.n	8004ac8 <DMA_CalcBaseAndBitshift+0xa8>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a35      	ldr	r2, [pc, #212]	@ (8004b5c <DMA_CalcBaseAndBitshift+0x13c>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d01d      	beq.n	8004ac8 <DMA_CalcBaseAndBitshift+0xa8>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a33      	ldr	r2, [pc, #204]	@ (8004b60 <DMA_CalcBaseAndBitshift+0x140>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d018      	beq.n	8004ac8 <DMA_CalcBaseAndBitshift+0xa8>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a32      	ldr	r2, [pc, #200]	@ (8004b64 <DMA_CalcBaseAndBitshift+0x144>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d013      	beq.n	8004ac8 <DMA_CalcBaseAndBitshift+0xa8>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a30      	ldr	r2, [pc, #192]	@ (8004b68 <DMA_CalcBaseAndBitshift+0x148>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d00e      	beq.n	8004ac8 <DMA_CalcBaseAndBitshift+0xa8>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a2f      	ldr	r2, [pc, #188]	@ (8004b6c <DMA_CalcBaseAndBitshift+0x14c>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d009      	beq.n	8004ac8 <DMA_CalcBaseAndBitshift+0xa8>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a2d      	ldr	r2, [pc, #180]	@ (8004b70 <DMA_CalcBaseAndBitshift+0x150>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d004      	beq.n	8004ac8 <DMA_CalcBaseAndBitshift+0xa8>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a2c      	ldr	r2, [pc, #176]	@ (8004b74 <DMA_CalcBaseAndBitshift+0x154>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d101      	bne.n	8004acc <DMA_CalcBaseAndBitshift+0xac>
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e000      	b.n	8004ace <DMA_CalcBaseAndBitshift+0xae>
 8004acc:	2300      	movs	r3, #0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d024      	beq.n	8004b1c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	3b10      	subs	r3, #16
 8004ada:	4a27      	ldr	r2, [pc, #156]	@ (8004b78 <DMA_CalcBaseAndBitshift+0x158>)
 8004adc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae0:	091b      	lsrs	r3, r3, #4
 8004ae2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f003 0307 	and.w	r3, r3, #7
 8004aea:	4a24      	ldr	r2, [pc, #144]	@ (8004b7c <DMA_CalcBaseAndBitshift+0x15c>)
 8004aec:	5cd3      	ldrb	r3, [r2, r3]
 8004aee:	461a      	mov	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2b03      	cmp	r3, #3
 8004af8:	d908      	bls.n	8004b0c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	461a      	mov	r2, r3
 8004b00:	4b1f      	ldr	r3, [pc, #124]	@ (8004b80 <DMA_CalcBaseAndBitshift+0x160>)
 8004b02:	4013      	ands	r3, r2
 8004b04:	1d1a      	adds	r2, r3, #4
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	659a      	str	r2, [r3, #88]	@ 0x58
 8004b0a:	e00d      	b.n	8004b28 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	461a      	mov	r2, r3
 8004b12:	4b1b      	ldr	r3, [pc, #108]	@ (8004b80 <DMA_CalcBaseAndBitshift+0x160>)
 8004b14:	4013      	ands	r3, r2
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b1a:	e005      	b.n	8004b28 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3714      	adds	r7, #20
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr
 8004b38:	40020010 	.word	0x40020010
 8004b3c:	40020028 	.word	0x40020028
 8004b40:	40020040 	.word	0x40020040
 8004b44:	40020058 	.word	0x40020058
 8004b48:	40020070 	.word	0x40020070
 8004b4c:	40020088 	.word	0x40020088
 8004b50:	400200a0 	.word	0x400200a0
 8004b54:	400200b8 	.word	0x400200b8
 8004b58:	40020410 	.word	0x40020410
 8004b5c:	40020428 	.word	0x40020428
 8004b60:	40020440 	.word	0x40020440
 8004b64:	40020458 	.word	0x40020458
 8004b68:	40020470 	.word	0x40020470
 8004b6c:	40020488 	.word	0x40020488
 8004b70:	400204a0 	.word	0x400204a0
 8004b74:	400204b8 	.word	0x400204b8
 8004b78:	aaaaaaab 	.word	0xaaaaaaab
 8004b7c:	0800b204 	.word	0x0800b204
 8004b80:	fffffc00 	.word	0xfffffc00

08004b84 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d120      	bne.n	8004bda <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b9c:	2b03      	cmp	r3, #3
 8004b9e:	d858      	bhi.n	8004c52 <DMA_CheckFifoParam+0xce>
 8004ba0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ba8 <DMA_CheckFifoParam+0x24>)
 8004ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba6:	bf00      	nop
 8004ba8:	08004bb9 	.word	0x08004bb9
 8004bac:	08004bcb 	.word	0x08004bcb
 8004bb0:	08004bb9 	.word	0x08004bb9
 8004bb4:	08004c53 	.word	0x08004c53
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bbc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d048      	beq.n	8004c56 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004bc8:	e045      	b.n	8004c56 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bce:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004bd2:	d142      	bne.n	8004c5a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004bd8:	e03f      	b.n	8004c5a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004be2:	d123      	bne.n	8004c2c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004be8:	2b03      	cmp	r3, #3
 8004bea:	d838      	bhi.n	8004c5e <DMA_CheckFifoParam+0xda>
 8004bec:	a201      	add	r2, pc, #4	@ (adr r2, 8004bf4 <DMA_CheckFifoParam+0x70>)
 8004bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf2:	bf00      	nop
 8004bf4:	08004c05 	.word	0x08004c05
 8004bf8:	08004c0b 	.word	0x08004c0b
 8004bfc:	08004c05 	.word	0x08004c05
 8004c00:	08004c1d 	.word	0x08004c1d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	73fb      	strb	r3, [r7, #15]
        break;
 8004c08:	e030      	b.n	8004c6c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c0e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d025      	beq.n	8004c62 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c1a:	e022      	b.n	8004c62 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c20:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004c24:	d11f      	bne.n	8004c66 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c2a:	e01c      	b.n	8004c66 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d902      	bls.n	8004c3a <DMA_CheckFifoParam+0xb6>
 8004c34:	2b03      	cmp	r3, #3
 8004c36:	d003      	beq.n	8004c40 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004c38:	e018      	b.n	8004c6c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	73fb      	strb	r3, [r7, #15]
        break;
 8004c3e:	e015      	b.n	8004c6c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d00e      	beq.n	8004c6a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	73fb      	strb	r3, [r7, #15]
    break;
 8004c50:	e00b      	b.n	8004c6a <DMA_CheckFifoParam+0xe6>
        break;
 8004c52:	bf00      	nop
 8004c54:	e00a      	b.n	8004c6c <DMA_CheckFifoParam+0xe8>
        break;
 8004c56:	bf00      	nop
 8004c58:	e008      	b.n	8004c6c <DMA_CheckFifoParam+0xe8>
        break;
 8004c5a:	bf00      	nop
 8004c5c:	e006      	b.n	8004c6c <DMA_CheckFifoParam+0xe8>
        break;
 8004c5e:	bf00      	nop
 8004c60:	e004      	b.n	8004c6c <DMA_CheckFifoParam+0xe8>
        break;
 8004c62:	bf00      	nop
 8004c64:	e002      	b.n	8004c6c <DMA_CheckFifoParam+0xe8>
        break;
 8004c66:	bf00      	nop
 8004c68:	e000      	b.n	8004c6c <DMA_CheckFifoParam+0xe8>
    break;
 8004c6a:	bf00      	nop
    }
  }

  return status;
 8004c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3714      	adds	r7, #20
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop

08004c7c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a38      	ldr	r2, [pc, #224]	@ (8004d70 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d022      	beq.n	8004cda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a36      	ldr	r2, [pc, #216]	@ (8004d74 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d01d      	beq.n	8004cda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a35      	ldr	r2, [pc, #212]	@ (8004d78 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d018      	beq.n	8004cda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a33      	ldr	r2, [pc, #204]	@ (8004d7c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d013      	beq.n	8004cda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a32      	ldr	r2, [pc, #200]	@ (8004d80 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d00e      	beq.n	8004cda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a30      	ldr	r2, [pc, #192]	@ (8004d84 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d009      	beq.n	8004cda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a2f      	ldr	r2, [pc, #188]	@ (8004d88 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d004      	beq.n	8004cda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a2d      	ldr	r2, [pc, #180]	@ (8004d8c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d101      	bne.n	8004cde <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e000      	b.n	8004ce0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004cde:	2300      	movs	r3, #0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d01a      	beq.n	8004d1a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	3b08      	subs	r3, #8
 8004cec:	4a28      	ldr	r2, [pc, #160]	@ (8004d90 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004cee:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf2:	091b      	lsrs	r3, r3, #4
 8004cf4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	4b26      	ldr	r3, [pc, #152]	@ (8004d94 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004cfa:	4413      	add	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	461a      	mov	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a24      	ldr	r2, [pc, #144]	@ (8004d98 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004d08:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f003 031f 	and.w	r3, r3, #31
 8004d10:	2201      	movs	r2, #1
 8004d12:	409a      	lsls	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004d18:	e024      	b.n	8004d64 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	3b10      	subs	r3, #16
 8004d22:	4a1e      	ldr	r2, [pc, #120]	@ (8004d9c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004d24:	fba2 2303 	umull	r2, r3, r2, r3
 8004d28:	091b      	lsrs	r3, r3, #4
 8004d2a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	4a1c      	ldr	r2, [pc, #112]	@ (8004da0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d806      	bhi.n	8004d42 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	4a1b      	ldr	r2, [pc, #108]	@ (8004da4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d902      	bls.n	8004d42 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	3308      	adds	r3, #8
 8004d40:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	4b18      	ldr	r3, [pc, #96]	@ (8004da8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004d46:	4413      	add	r3, r2
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a16      	ldr	r2, [pc, #88]	@ (8004dac <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004d54:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f003 031f 	and.w	r3, r3, #31
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	409a      	lsls	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004d64:	bf00      	nop
 8004d66:	3714      	adds	r7, #20
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr
 8004d70:	58025408 	.word	0x58025408
 8004d74:	5802541c 	.word	0x5802541c
 8004d78:	58025430 	.word	0x58025430
 8004d7c:	58025444 	.word	0x58025444
 8004d80:	58025458 	.word	0x58025458
 8004d84:	5802546c 	.word	0x5802546c
 8004d88:	58025480 	.word	0x58025480
 8004d8c:	58025494 	.word	0x58025494
 8004d90:	cccccccd 	.word	0xcccccccd
 8004d94:	16009600 	.word	0x16009600
 8004d98:	58025880 	.word	0x58025880
 8004d9c:	aaaaaaab 	.word	0xaaaaaaab
 8004da0:	400204b8 	.word	0x400204b8
 8004da4:	4002040f 	.word	0x4002040f
 8004da8:	10008200 	.word	0x10008200
 8004dac:	40020880 	.word	0x40020880

08004db0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d04a      	beq.n	8004e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2b08      	cmp	r3, #8
 8004dca:	d847      	bhi.n	8004e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a25      	ldr	r2, [pc, #148]	@ (8004e68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d022      	beq.n	8004e1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a24      	ldr	r2, [pc, #144]	@ (8004e6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d01d      	beq.n	8004e1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a22      	ldr	r2, [pc, #136]	@ (8004e70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d018      	beq.n	8004e1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a21      	ldr	r2, [pc, #132]	@ (8004e74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d013      	beq.n	8004e1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a1f      	ldr	r2, [pc, #124]	@ (8004e78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d00e      	beq.n	8004e1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a1e      	ldr	r2, [pc, #120]	@ (8004e7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d009      	beq.n	8004e1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a1c      	ldr	r2, [pc, #112]	@ (8004e80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d004      	beq.n	8004e1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a1b      	ldr	r2, [pc, #108]	@ (8004e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d101      	bne.n	8004e20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e000      	b.n	8004e22 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004e20:	2300      	movs	r3, #0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d00a      	beq.n	8004e3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	4b17      	ldr	r3, [pc, #92]	@ (8004e88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004e2a:	4413      	add	r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	461a      	mov	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a15      	ldr	r2, [pc, #84]	@ (8004e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004e38:	671a      	str	r2, [r3, #112]	@ 0x70
 8004e3a:	e009      	b.n	8004e50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	4b14      	ldr	r3, [pc, #80]	@ (8004e90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004e40:	4413      	add	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	461a      	mov	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a11      	ldr	r2, [pc, #68]	@ (8004e94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004e4e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	3b01      	subs	r3, #1
 8004e54:	2201      	movs	r2, #1
 8004e56:	409a      	lsls	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004e5c:	bf00      	nop
 8004e5e:	3714      	adds	r7, #20
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr
 8004e68:	58025408 	.word	0x58025408
 8004e6c:	5802541c 	.word	0x5802541c
 8004e70:	58025430 	.word	0x58025430
 8004e74:	58025444 	.word	0x58025444
 8004e78:	58025458 	.word	0x58025458
 8004e7c:	5802546c 	.word	0x5802546c
 8004e80:	58025480 	.word	0x58025480
 8004e84:	58025494 	.word	0x58025494
 8004e88:	1600963f 	.word	0x1600963f
 8004e8c:	58025940 	.word	0x58025940
 8004e90:	1000823f 	.word	0x1000823f
 8004e94:	40020940 	.word	0x40020940

08004e98 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b086      	sub	sp, #24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
 8004ea4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	2b80      	cmp	r3, #128	@ 0x80
 8004eb0:	d105      	bne.n	8004ebe <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004eb8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e315      	b.n	80054ea <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d101      	bne.n	8004ecc <HAL_DMAEx_MultiBufferStart_IT+0x34>
 8004ec8:	2302      	movs	r3, #2
 8004eca:	e30e      	b.n	80054ea <HAL_DMAEx_MultiBufferStart_IT+0x652>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	f040 82fd 	bne.w	80054dc <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2202      	movs	r2, #2
 8004ee6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	655a      	str	r2, [r3, #84]	@ 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a82      	ldr	r2, [pc, #520]	@ (8005100 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d04a      	beq.n	8004f90 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a81      	ldr	r2, [pc, #516]	@ (8005104 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d045      	beq.n	8004f90 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a7f      	ldr	r2, [pc, #508]	@ (8005108 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d040      	beq.n	8004f90 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a7e      	ldr	r2, [pc, #504]	@ (800510c <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d03b      	beq.n	8004f90 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a7c      	ldr	r2, [pc, #496]	@ (8005110 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d036      	beq.n	8004f90 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a7b      	ldr	r2, [pc, #492]	@ (8005114 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d031      	beq.n	8004f90 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a79      	ldr	r2, [pc, #484]	@ (8005118 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d02c      	beq.n	8004f90 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a78      	ldr	r2, [pc, #480]	@ (800511c <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d027      	beq.n	8004f90 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a76      	ldr	r2, [pc, #472]	@ (8005120 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d022      	beq.n	8004f90 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a75      	ldr	r2, [pc, #468]	@ (8005124 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d01d      	beq.n	8004f90 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a73      	ldr	r2, [pc, #460]	@ (8005128 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d018      	beq.n	8004f90 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a72      	ldr	r2, [pc, #456]	@ (800512c <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d013      	beq.n	8004f90 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a70      	ldr	r2, [pc, #448]	@ (8005130 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d00e      	beq.n	8004f90 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a6f      	ldr	r2, [pc, #444]	@ (8005134 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d009      	beq.n	8004f90 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a6d      	ldr	r2, [pc, #436]	@ (8005138 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d004      	beq.n	8004f90 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a6c      	ldr	r2, [pc, #432]	@ (800513c <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d101      	bne.n	8004f94 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8004f90:	2301      	movs	r3, #1
 8004f92:	e000      	b.n	8004f96 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8004f94:	2300      	movs	r3, #0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d018      	beq.n	8004fcc <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004fa8:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	683a      	ldr	r2, [r7, #0]
 8004fb0:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fb6:	3308      	adds	r3, #8
 8004fb8:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fbe:	f003 031f 	and.w	r3, r3, #31
 8004fc2:	223f      	movs	r2, #63	@ 0x3f
 8004fc4:	409a      	lsls	r2, r3
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	601a      	str	r2, [r3, #0]
 8004fca:	e018      	b.n	8004ffe <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6819      	ldr	r1, [r3, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	f248 0320 	movw	r3, #32800	@ 0x8020
 8004fda:	430b      	orrs	r3, r1
 8004fdc:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fea:	3304      	adds	r3, #4
 8004fec:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ff2:	f003 031f 	and.w	r3, r3, #31
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	409a      	lsls	r2, r3
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ffe:	6a3b      	ldr	r3, [r7, #32]
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	68b9      	ldr	r1, [r7, #8]
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f000 fb41 	bl	800568c <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a3c      	ldr	r2, [pc, #240]	@ (8005100 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d072      	beq.n	80050fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a3a      	ldr	r2, [pc, #232]	@ (8005104 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d06d      	beq.n	80050fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a39      	ldr	r2, [pc, #228]	@ (8005108 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d068      	beq.n	80050fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a37      	ldr	r2, [pc, #220]	@ (800510c <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d063      	beq.n	80050fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a36      	ldr	r2, [pc, #216]	@ (8005110 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d05e      	beq.n	80050fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a34      	ldr	r2, [pc, #208]	@ (8005114 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d059      	beq.n	80050fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a33      	ldr	r2, [pc, #204]	@ (8005118 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d054      	beq.n	80050fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a31      	ldr	r2, [pc, #196]	@ (800511c <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d04f      	beq.n	80050fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a30      	ldr	r2, [pc, #192]	@ (8005120 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d04a      	beq.n	80050fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a2e      	ldr	r2, [pc, #184]	@ (8005124 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d045      	beq.n	80050fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a2d      	ldr	r2, [pc, #180]	@ (8005128 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d040      	beq.n	80050fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a2b      	ldr	r2, [pc, #172]	@ (800512c <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d03b      	beq.n	80050fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a2a      	ldr	r2, [pc, #168]	@ (8005130 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d036      	beq.n	80050fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a28      	ldr	r2, [pc, #160]	@ (8005134 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d031      	beq.n	80050fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a27      	ldr	r2, [pc, #156]	@ (8005138 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d02c      	beq.n	80050fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a25      	ldr	r2, [pc, #148]	@ (800513c <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d027      	beq.n	80050fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a24      	ldr	r2, [pc, #144]	@ (8005140 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d022      	beq.n	80050fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a22      	ldr	r2, [pc, #136]	@ (8005144 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d01d      	beq.n	80050fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a21      	ldr	r2, [pc, #132]	@ (8005148 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d018      	beq.n	80050fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a1f      	ldr	r2, [pc, #124]	@ (800514c <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d013      	beq.n	80050fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a1e      	ldr	r2, [pc, #120]	@ (8005150 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d00e      	beq.n	80050fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a1c      	ldr	r2, [pc, #112]	@ (8005154 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d009      	beq.n	80050fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a1b      	ldr	r2, [pc, #108]	@ (8005158 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d004      	beq.n	80050fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a19      	ldr	r2, [pc, #100]	@ (800515c <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d132      	bne.n	8005160 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 80050fa:	2301      	movs	r3, #1
 80050fc:	e031      	b.n	8005162 <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 80050fe:	bf00      	nop
 8005100:	40020010 	.word	0x40020010
 8005104:	40020028 	.word	0x40020028
 8005108:	40020040 	.word	0x40020040
 800510c:	40020058 	.word	0x40020058
 8005110:	40020070 	.word	0x40020070
 8005114:	40020088 	.word	0x40020088
 8005118:	400200a0 	.word	0x400200a0
 800511c:	400200b8 	.word	0x400200b8
 8005120:	40020410 	.word	0x40020410
 8005124:	40020428 	.word	0x40020428
 8005128:	40020440 	.word	0x40020440
 800512c:	40020458 	.word	0x40020458
 8005130:	40020470 	.word	0x40020470
 8005134:	40020488 	.word	0x40020488
 8005138:	400204a0 	.word	0x400204a0
 800513c:	400204b8 	.word	0x400204b8
 8005140:	58025408 	.word	0x58025408
 8005144:	5802541c 	.word	0x5802541c
 8005148:	58025430 	.word	0x58025430
 800514c:	58025444 	.word	0x58025444
 8005150:	58025458 	.word	0x58025458
 8005154:	5802546c 	.word	0x5802546c
 8005158:	58025480 	.word	0x58025480
 800515c:	58025494 	.word	0x58025494
 8005160:	2300      	movs	r3, #0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00d      	beq.n	8005182 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800516e:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005174:	2b00      	cmp	r3, #0
 8005176:	d004      	beq.n	8005182 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005180:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a3b      	ldr	r2, [pc, #236]	@ (8005274 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d04a      	beq.n	8005222 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a39      	ldr	r2, [pc, #228]	@ (8005278 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d045      	beq.n	8005222 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a38      	ldr	r2, [pc, #224]	@ (800527c <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d040      	beq.n	8005222 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a36      	ldr	r2, [pc, #216]	@ (8005280 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d03b      	beq.n	8005222 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a35      	ldr	r2, [pc, #212]	@ (8005284 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d036      	beq.n	8005222 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a33      	ldr	r2, [pc, #204]	@ (8005288 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d031      	beq.n	8005222 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a32      	ldr	r2, [pc, #200]	@ (800528c <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d02c      	beq.n	8005222 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a30      	ldr	r2, [pc, #192]	@ (8005290 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d027      	beq.n	8005222 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a2f      	ldr	r2, [pc, #188]	@ (8005294 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d022      	beq.n	8005222 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a2d      	ldr	r2, [pc, #180]	@ (8005298 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d01d      	beq.n	8005222 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a2c      	ldr	r2, [pc, #176]	@ (800529c <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d018      	beq.n	8005222 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a2a      	ldr	r2, [pc, #168]	@ (80052a0 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d013      	beq.n	8005222 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a29      	ldr	r2, [pc, #164]	@ (80052a4 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d00e      	beq.n	8005222 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a27      	ldr	r2, [pc, #156]	@ (80052a8 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d009      	beq.n	8005222 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a26      	ldr	r2, [pc, #152]	@ (80052ac <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d004      	beq.n	8005222 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a24      	ldr	r2, [pc, #144]	@ (80052b0 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d101      	bne.n	8005226 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8005222:	2301      	movs	r3, #1
 8005224:	e000      	b.n	8005228 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8005226:	2300      	movs	r3, #0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d043      	beq.n	80052b4 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f023 021e 	bic.w	r2, r3, #30
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f042 0216 	orr.w	r2, r2, #22
 800523e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	695a      	ldr	r2, [r3, #20]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800524e:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005254:	2b00      	cmp	r3, #0
 8005256:	d103      	bne.n	8005260 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800525c:	2b00      	cmp	r3, #0
 800525e:	d043      	beq.n	80052e8 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f042 0208 	orr.w	r2, r2, #8
 800526e:	601a      	str	r2, [r3, #0]
 8005270:	e03a      	b.n	80052e8 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 8005272:	bf00      	nop
 8005274:	40020010 	.word	0x40020010
 8005278:	40020028 	.word	0x40020028
 800527c:	40020040 	.word	0x40020040
 8005280:	40020058 	.word	0x40020058
 8005284:	40020070 	.word	0x40020070
 8005288:	40020088 	.word	0x40020088
 800528c:	400200a0 	.word	0x400200a0
 8005290:	400200b8 	.word	0x400200b8
 8005294:	40020410 	.word	0x40020410
 8005298:	40020428 	.word	0x40020428
 800529c:	40020440 	.word	0x40020440
 80052a0:	40020458 	.word	0x40020458
 80052a4:	40020470 	.word	0x40020470
 80052a8:	40020488 	.word	0x40020488
 80052ac:	400204a0 	.word	0x400204a0
 80052b0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f023 020e 	bic.w	r2, r3, #14
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f042 020a 	orr.w	r2, r2, #10
 80052c6:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d103      	bne.n	80052d8 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d007      	beq.n	80052e8 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f042 0204 	orr.w	r2, r2, #4
 80052e6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a81      	ldr	r2, [pc, #516]	@ (80054f4 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d072      	beq.n	80053d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a80      	ldr	r2, [pc, #512]	@ (80054f8 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d06d      	beq.n	80053d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a7e      	ldr	r2, [pc, #504]	@ (80054fc <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d068      	beq.n	80053d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a7d      	ldr	r2, [pc, #500]	@ (8005500 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d063      	beq.n	80053d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a7b      	ldr	r2, [pc, #492]	@ (8005504 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d05e      	beq.n	80053d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a7a      	ldr	r2, [pc, #488]	@ (8005508 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d059      	beq.n	80053d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a78      	ldr	r2, [pc, #480]	@ (800550c <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d054      	beq.n	80053d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a77      	ldr	r2, [pc, #476]	@ (8005510 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d04f      	beq.n	80053d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a75      	ldr	r2, [pc, #468]	@ (8005514 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d04a      	beq.n	80053d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a74      	ldr	r2, [pc, #464]	@ (8005518 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d045      	beq.n	80053d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a72      	ldr	r2, [pc, #456]	@ (800551c <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d040      	beq.n	80053d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a71      	ldr	r2, [pc, #452]	@ (8005520 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d03b      	beq.n	80053d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a6f      	ldr	r2, [pc, #444]	@ (8005524 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d036      	beq.n	80053d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a6e      	ldr	r2, [pc, #440]	@ (8005528 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d031      	beq.n	80053d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a6c      	ldr	r2, [pc, #432]	@ (800552c <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d02c      	beq.n	80053d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a6b      	ldr	r2, [pc, #428]	@ (8005530 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d027      	beq.n	80053d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a69      	ldr	r2, [pc, #420]	@ (8005534 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d022      	beq.n	80053d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a68      	ldr	r2, [pc, #416]	@ (8005538 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d01d      	beq.n	80053d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a66      	ldr	r2, [pc, #408]	@ (800553c <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d018      	beq.n	80053d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a65      	ldr	r2, [pc, #404]	@ (8005540 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d013      	beq.n	80053d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a63      	ldr	r2, [pc, #396]	@ (8005544 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d00e      	beq.n	80053d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a62      	ldr	r2, [pc, #392]	@ (8005548 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d009      	beq.n	80053d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a60      	ldr	r2, [pc, #384]	@ (800554c <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d004      	beq.n	80053d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a5f      	ldr	r2, [pc, #380]	@ (8005550 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d101      	bne.n	80053dc <HAL_DMAEx_MultiBufferStart_IT+0x544>
 80053d8:	2301      	movs	r3, #1
 80053da:	e000      	b.n	80053de <HAL_DMAEx_MultiBufferStart_IT+0x546>
 80053dc:	2300      	movs	r3, #0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d01a      	beq.n	8005418 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d007      	beq.n	8005400 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80053fe:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005404:	2b00      	cmp	r3, #0
 8005406:	d007      	beq.n	8005418 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005412:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005416:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a35      	ldr	r2, [pc, #212]	@ (80054f4 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d04a      	beq.n	80054b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a34      	ldr	r2, [pc, #208]	@ (80054f8 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d045      	beq.n	80054b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a32      	ldr	r2, [pc, #200]	@ (80054fc <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d040      	beq.n	80054b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a31      	ldr	r2, [pc, #196]	@ (8005500 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d03b      	beq.n	80054b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a2f      	ldr	r2, [pc, #188]	@ (8005504 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d036      	beq.n	80054b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a2e      	ldr	r2, [pc, #184]	@ (8005508 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d031      	beq.n	80054b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a2c      	ldr	r2, [pc, #176]	@ (800550c <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d02c      	beq.n	80054b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a2b      	ldr	r2, [pc, #172]	@ (8005510 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d027      	beq.n	80054b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a29      	ldr	r2, [pc, #164]	@ (8005514 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d022      	beq.n	80054b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a28      	ldr	r2, [pc, #160]	@ (8005518 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d01d      	beq.n	80054b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a26      	ldr	r2, [pc, #152]	@ (800551c <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d018      	beq.n	80054b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a25      	ldr	r2, [pc, #148]	@ (8005520 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d013      	beq.n	80054b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a23      	ldr	r2, [pc, #140]	@ (8005524 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d00e      	beq.n	80054b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a22      	ldr	r2, [pc, #136]	@ (8005528 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d009      	beq.n	80054b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a20      	ldr	r2, [pc, #128]	@ (800552c <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d004      	beq.n	80054b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a1f      	ldr	r2, [pc, #124]	@ (8005530 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d108      	bne.n	80054ca <HAL_DMAEx_MultiBufferStart_IT+0x632>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f042 0201 	orr.w	r2, r2, #1
 80054c6:	601a      	str	r2, [r3, #0]
 80054c8:	e00e      	b.n	80054e8 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f042 0201 	orr.w	r2, r2, #1
 80054d8:	601a      	str	r2, [r3, #0]
 80054da:	e005      	b.n	80054e8 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80054e2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    status = HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80054e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3718      	adds	r7, #24
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	40020010 	.word	0x40020010
 80054f8:	40020028 	.word	0x40020028
 80054fc:	40020040 	.word	0x40020040
 8005500:	40020058 	.word	0x40020058
 8005504:	40020070 	.word	0x40020070
 8005508:	40020088 	.word	0x40020088
 800550c:	400200a0 	.word	0x400200a0
 8005510:	400200b8 	.word	0x400200b8
 8005514:	40020410 	.word	0x40020410
 8005518:	40020428 	.word	0x40020428
 800551c:	40020440 	.word	0x40020440
 8005520:	40020458 	.word	0x40020458
 8005524:	40020470 	.word	0x40020470
 8005528:	40020488 	.word	0x40020488
 800552c:	400204a0 	.word	0x400204a0
 8005530:	400204b8 	.word	0x400204b8
 8005534:	58025408 	.word	0x58025408
 8005538:	5802541c 	.word	0x5802541c
 800553c:	58025430 	.word	0x58025430
 8005540:	58025444 	.word	0x58025444
 8005544:	58025458 	.word	0x58025458
 8005548:	5802546c 	.word	0x5802546c
 800554c:	58025480 	.word	0x58025480
 8005550:	58025494 	.word	0x58025494

08005554 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8005554:	b480      	push	{r7}
 8005556:	b085      	sub	sp, #20
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	4613      	mov	r3, r2
 8005560:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a39      	ldr	r2, [pc, #228]	@ (800564c <HAL_DMAEx_ChangeMemory+0xf8>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d04a      	beq.n	8005602 <HAL_DMAEx_ChangeMemory+0xae>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a37      	ldr	r2, [pc, #220]	@ (8005650 <HAL_DMAEx_ChangeMemory+0xfc>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d045      	beq.n	8005602 <HAL_DMAEx_ChangeMemory+0xae>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a36      	ldr	r2, [pc, #216]	@ (8005654 <HAL_DMAEx_ChangeMemory+0x100>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d040      	beq.n	8005602 <HAL_DMAEx_ChangeMemory+0xae>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a34      	ldr	r2, [pc, #208]	@ (8005658 <HAL_DMAEx_ChangeMemory+0x104>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d03b      	beq.n	8005602 <HAL_DMAEx_ChangeMemory+0xae>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a33      	ldr	r2, [pc, #204]	@ (800565c <HAL_DMAEx_ChangeMemory+0x108>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d036      	beq.n	8005602 <HAL_DMAEx_ChangeMemory+0xae>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a31      	ldr	r2, [pc, #196]	@ (8005660 <HAL_DMAEx_ChangeMemory+0x10c>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d031      	beq.n	8005602 <HAL_DMAEx_ChangeMemory+0xae>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a30      	ldr	r2, [pc, #192]	@ (8005664 <HAL_DMAEx_ChangeMemory+0x110>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d02c      	beq.n	8005602 <HAL_DMAEx_ChangeMemory+0xae>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a2e      	ldr	r2, [pc, #184]	@ (8005668 <HAL_DMAEx_ChangeMemory+0x114>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d027      	beq.n	8005602 <HAL_DMAEx_ChangeMemory+0xae>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a2d      	ldr	r2, [pc, #180]	@ (800566c <HAL_DMAEx_ChangeMemory+0x118>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d022      	beq.n	8005602 <HAL_DMAEx_ChangeMemory+0xae>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a2b      	ldr	r2, [pc, #172]	@ (8005670 <HAL_DMAEx_ChangeMemory+0x11c>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d01d      	beq.n	8005602 <HAL_DMAEx_ChangeMemory+0xae>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a2a      	ldr	r2, [pc, #168]	@ (8005674 <HAL_DMAEx_ChangeMemory+0x120>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d018      	beq.n	8005602 <HAL_DMAEx_ChangeMemory+0xae>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a28      	ldr	r2, [pc, #160]	@ (8005678 <HAL_DMAEx_ChangeMemory+0x124>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d013      	beq.n	8005602 <HAL_DMAEx_ChangeMemory+0xae>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a27      	ldr	r2, [pc, #156]	@ (800567c <HAL_DMAEx_ChangeMemory+0x128>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d00e      	beq.n	8005602 <HAL_DMAEx_ChangeMemory+0xae>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a25      	ldr	r2, [pc, #148]	@ (8005680 <HAL_DMAEx_ChangeMemory+0x12c>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d009      	beq.n	8005602 <HAL_DMAEx_ChangeMemory+0xae>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a24      	ldr	r2, [pc, #144]	@ (8005684 <HAL_DMAEx_ChangeMemory+0x130>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d004      	beq.n	8005602 <HAL_DMAEx_ChangeMemory+0xae>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a22      	ldr	r2, [pc, #136]	@ (8005688 <HAL_DMAEx_ChangeMemory+0x134>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d101      	bne.n	8005606 <HAL_DMAEx_ChangeMemory+0xb2>
 8005602:	2301      	movs	r3, #1
 8005604:	e000      	b.n	8005608 <HAL_DMAEx_ChangeMemory+0xb4>
 8005606:	2300      	movs	r3, #0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d00c      	beq.n	8005626 <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 800560c:	79fb      	ldrb	r3, [r7, #7]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d104      	bne.n	800561c <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	60da      	str	r2, [r3, #12]
 800561a:	e010      	b.n	800563e <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68ba      	ldr	r2, [r7, #8]
 8005622:	611a      	str	r2, [r3, #16]
 8005624:	e00b      	b.n	800563e <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 8005626:	79fb      	ldrb	r3, [r7, #7]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d104      	bne.n	8005636 <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68ba      	ldr	r2, [r7, #8]
 8005632:	60da      	str	r2, [r3, #12]
 8005634:	e003      	b.n	800563e <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3714      	adds	r7, #20
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr
 800564c:	40020010 	.word	0x40020010
 8005650:	40020028 	.word	0x40020028
 8005654:	40020040 	.word	0x40020040
 8005658:	40020058 	.word	0x40020058
 800565c:	40020070 	.word	0x40020070
 8005660:	40020088 	.word	0x40020088
 8005664:	400200a0 	.word	0x400200a0
 8005668:	400200b8 	.word	0x400200b8
 800566c:	40020410 	.word	0x40020410
 8005670:	40020428 	.word	0x40020428
 8005674:	40020440 	.word	0x40020440
 8005678:	40020458 	.word	0x40020458
 800567c:	40020470 	.word	0x40020470
 8005680:	40020488 	.word	0x40020488
 8005684:	400204a0 	.word	0x400204a0
 8005688:	400204b8 	.word	0x400204b8

0800568c <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]
 8005698:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a46      	ldr	r2, [pc, #280]	@ (80057b8 <DMA_MultiBufferSetConfig+0x12c>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d04a      	beq.n	800573a <DMA_MultiBufferSetConfig+0xae>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a44      	ldr	r2, [pc, #272]	@ (80057bc <DMA_MultiBufferSetConfig+0x130>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d045      	beq.n	800573a <DMA_MultiBufferSetConfig+0xae>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a43      	ldr	r2, [pc, #268]	@ (80057c0 <DMA_MultiBufferSetConfig+0x134>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d040      	beq.n	800573a <DMA_MultiBufferSetConfig+0xae>
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a41      	ldr	r2, [pc, #260]	@ (80057c4 <DMA_MultiBufferSetConfig+0x138>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d03b      	beq.n	800573a <DMA_MultiBufferSetConfig+0xae>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a40      	ldr	r2, [pc, #256]	@ (80057c8 <DMA_MultiBufferSetConfig+0x13c>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d036      	beq.n	800573a <DMA_MultiBufferSetConfig+0xae>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a3e      	ldr	r2, [pc, #248]	@ (80057cc <DMA_MultiBufferSetConfig+0x140>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d031      	beq.n	800573a <DMA_MultiBufferSetConfig+0xae>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a3d      	ldr	r2, [pc, #244]	@ (80057d0 <DMA_MultiBufferSetConfig+0x144>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d02c      	beq.n	800573a <DMA_MultiBufferSetConfig+0xae>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a3b      	ldr	r2, [pc, #236]	@ (80057d4 <DMA_MultiBufferSetConfig+0x148>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d027      	beq.n	800573a <DMA_MultiBufferSetConfig+0xae>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a3a      	ldr	r2, [pc, #232]	@ (80057d8 <DMA_MultiBufferSetConfig+0x14c>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d022      	beq.n	800573a <DMA_MultiBufferSetConfig+0xae>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a38      	ldr	r2, [pc, #224]	@ (80057dc <DMA_MultiBufferSetConfig+0x150>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d01d      	beq.n	800573a <DMA_MultiBufferSetConfig+0xae>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a37      	ldr	r2, [pc, #220]	@ (80057e0 <DMA_MultiBufferSetConfig+0x154>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d018      	beq.n	800573a <DMA_MultiBufferSetConfig+0xae>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a35      	ldr	r2, [pc, #212]	@ (80057e4 <DMA_MultiBufferSetConfig+0x158>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d013      	beq.n	800573a <DMA_MultiBufferSetConfig+0xae>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a34      	ldr	r2, [pc, #208]	@ (80057e8 <DMA_MultiBufferSetConfig+0x15c>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d00e      	beq.n	800573a <DMA_MultiBufferSetConfig+0xae>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a32      	ldr	r2, [pc, #200]	@ (80057ec <DMA_MultiBufferSetConfig+0x160>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d009      	beq.n	800573a <DMA_MultiBufferSetConfig+0xae>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a31      	ldr	r2, [pc, #196]	@ (80057f0 <DMA_MultiBufferSetConfig+0x164>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d004      	beq.n	800573a <DMA_MultiBufferSetConfig+0xae>
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a2f      	ldr	r2, [pc, #188]	@ (80057f4 <DMA_MultiBufferSetConfig+0x168>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d101      	bne.n	800573e <DMA_MultiBufferSetConfig+0xb2>
 800573a:	2301      	movs	r3, #1
 800573c:	e000      	b.n	8005740 <DMA_MultiBufferSetConfig+0xb4>
 800573e:	2300      	movs	r3, #0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d019      	beq.n	8005778 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	683a      	ldr	r2, [r7, #0]
 800574a:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	2b40      	cmp	r3, #64	@ 0x40
 8005752:	d108      	bne.n	8005766 <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68ba      	ldr	r2, [r7, #8]
 8005762:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8005764:	e021      	b.n	80057aa <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68ba      	ldr	r2, [r7, #8]
 800576c:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	60da      	str	r2, [r3, #12]
}
 8005776:	e018      	b.n	80057aa <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	683a      	ldr	r2, [r7, #0]
 800577e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	2b40      	cmp	r3, #64	@ 0x40
 8005786:	d108      	bne.n	800579a <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68ba      	ldr	r2, [r7, #8]
 8005796:	60da      	str	r2, [r3, #12]
}
 8005798:	e007      	b.n	80057aa <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	68ba      	ldr	r2, [r7, #8]
 80057a0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	60da      	str	r2, [r3, #12]
}
 80057aa:	bf00      	nop
 80057ac:	3714      	adds	r7, #20
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	40020010 	.word	0x40020010
 80057bc:	40020028 	.word	0x40020028
 80057c0:	40020040 	.word	0x40020040
 80057c4:	40020058 	.word	0x40020058
 80057c8:	40020070 	.word	0x40020070
 80057cc:	40020088 	.word	0x40020088
 80057d0:	400200a0 	.word	0x400200a0
 80057d4:	400200b8 	.word	0x400200b8
 80057d8:	40020410 	.word	0x40020410
 80057dc:	40020428 	.word	0x40020428
 80057e0:	40020440 	.word	0x40020440
 80057e4:	40020458 	.word	0x40020458
 80057e8:	40020470 	.word	0x40020470
 80057ec:	40020488 	.word	0x40020488
 80057f0:	400204a0 	.word	0x400204a0
 80057f4:	400204b8 	.word	0x400204b8

080057f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b089      	sub	sp, #36	@ 0x24
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005802:	2300      	movs	r3, #0
 8005804:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005806:	4b89      	ldr	r3, [pc, #548]	@ (8005a2c <HAL_GPIO_Init+0x234>)
 8005808:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800580a:	e194      	b.n	8005b36 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	2101      	movs	r1, #1
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	fa01 f303 	lsl.w	r3, r1, r3
 8005818:	4013      	ands	r3, r2
 800581a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	2b00      	cmp	r3, #0
 8005820:	f000 8186 	beq.w	8005b30 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	f003 0303 	and.w	r3, r3, #3
 800582c:	2b01      	cmp	r3, #1
 800582e:	d005      	beq.n	800583c <HAL_GPIO_Init+0x44>
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f003 0303 	and.w	r3, r3, #3
 8005838:	2b02      	cmp	r3, #2
 800583a:	d130      	bne.n	800589e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	005b      	lsls	r3, r3, #1
 8005846:	2203      	movs	r2, #3
 8005848:	fa02 f303 	lsl.w	r3, r2, r3
 800584c:	43db      	mvns	r3, r3
 800584e:	69ba      	ldr	r2, [r7, #24]
 8005850:	4013      	ands	r3, r2
 8005852:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	68da      	ldr	r2, [r3, #12]
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	005b      	lsls	r3, r3, #1
 800585c:	fa02 f303 	lsl.w	r3, r2, r3
 8005860:	69ba      	ldr	r2, [r7, #24]
 8005862:	4313      	orrs	r3, r2
 8005864:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	69ba      	ldr	r2, [r7, #24]
 800586a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005872:	2201      	movs	r2, #1
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	fa02 f303 	lsl.w	r3, r2, r3
 800587a:	43db      	mvns	r3, r3
 800587c:	69ba      	ldr	r2, [r7, #24]
 800587e:	4013      	ands	r3, r2
 8005880:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	091b      	lsrs	r3, r3, #4
 8005888:	f003 0201 	and.w	r2, r3, #1
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	fa02 f303 	lsl.w	r3, r2, r3
 8005892:	69ba      	ldr	r2, [r7, #24]
 8005894:	4313      	orrs	r3, r2
 8005896:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	69ba      	ldr	r2, [r7, #24]
 800589c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f003 0303 	and.w	r3, r3, #3
 80058a6:	2b03      	cmp	r3, #3
 80058a8:	d017      	beq.n	80058da <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	005b      	lsls	r3, r3, #1
 80058b4:	2203      	movs	r2, #3
 80058b6:	fa02 f303 	lsl.w	r3, r2, r3
 80058ba:	43db      	mvns	r3, r3
 80058bc:	69ba      	ldr	r2, [r7, #24]
 80058be:	4013      	ands	r3, r2
 80058c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	689a      	ldr	r2, [r3, #8]
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	005b      	lsls	r3, r3, #1
 80058ca:	fa02 f303 	lsl.w	r3, r2, r3
 80058ce:	69ba      	ldr	r2, [r7, #24]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	69ba      	ldr	r2, [r7, #24]
 80058d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	f003 0303 	and.w	r3, r3, #3
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d123      	bne.n	800592e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	08da      	lsrs	r2, r3, #3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	3208      	adds	r2, #8
 80058ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	f003 0307 	and.w	r3, r3, #7
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	220f      	movs	r2, #15
 80058fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005902:	43db      	mvns	r3, r3
 8005904:	69ba      	ldr	r2, [r7, #24]
 8005906:	4013      	ands	r3, r2
 8005908:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	691a      	ldr	r2, [r3, #16]
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	f003 0307 	and.w	r3, r3, #7
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	fa02 f303 	lsl.w	r3, r2, r3
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	4313      	orrs	r3, r2
 800591e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	08da      	lsrs	r2, r3, #3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	3208      	adds	r2, #8
 8005928:	69b9      	ldr	r1, [r7, #24]
 800592a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	005b      	lsls	r3, r3, #1
 8005938:	2203      	movs	r2, #3
 800593a:	fa02 f303 	lsl.w	r3, r2, r3
 800593e:	43db      	mvns	r3, r3
 8005940:	69ba      	ldr	r2, [r7, #24]
 8005942:	4013      	ands	r3, r2
 8005944:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f003 0203 	and.w	r2, r3, #3
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	005b      	lsls	r3, r3, #1
 8005952:	fa02 f303 	lsl.w	r3, r2, r3
 8005956:	69ba      	ldr	r2, [r7, #24]
 8005958:	4313      	orrs	r3, r2
 800595a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	69ba      	ldr	r2, [r7, #24]
 8005960:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800596a:	2b00      	cmp	r3, #0
 800596c:	f000 80e0 	beq.w	8005b30 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005970:	4b2f      	ldr	r3, [pc, #188]	@ (8005a30 <HAL_GPIO_Init+0x238>)
 8005972:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005976:	4a2e      	ldr	r2, [pc, #184]	@ (8005a30 <HAL_GPIO_Init+0x238>)
 8005978:	f043 0302 	orr.w	r3, r3, #2
 800597c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005980:	4b2b      	ldr	r3, [pc, #172]	@ (8005a30 <HAL_GPIO_Init+0x238>)
 8005982:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005986:	f003 0302 	and.w	r3, r3, #2
 800598a:	60fb      	str	r3, [r7, #12]
 800598c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800598e:	4a29      	ldr	r2, [pc, #164]	@ (8005a34 <HAL_GPIO_Init+0x23c>)
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	089b      	lsrs	r3, r3, #2
 8005994:	3302      	adds	r3, #2
 8005996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800599a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	f003 0303 	and.w	r3, r3, #3
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	220f      	movs	r2, #15
 80059a6:	fa02 f303 	lsl.w	r3, r2, r3
 80059aa:	43db      	mvns	r3, r3
 80059ac:	69ba      	ldr	r2, [r7, #24]
 80059ae:	4013      	ands	r3, r2
 80059b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a20      	ldr	r2, [pc, #128]	@ (8005a38 <HAL_GPIO_Init+0x240>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d052      	beq.n	8005a60 <HAL_GPIO_Init+0x268>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a1f      	ldr	r2, [pc, #124]	@ (8005a3c <HAL_GPIO_Init+0x244>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d031      	beq.n	8005a26 <HAL_GPIO_Init+0x22e>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a1e      	ldr	r2, [pc, #120]	@ (8005a40 <HAL_GPIO_Init+0x248>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d02b      	beq.n	8005a22 <HAL_GPIO_Init+0x22a>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a1d      	ldr	r2, [pc, #116]	@ (8005a44 <HAL_GPIO_Init+0x24c>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d025      	beq.n	8005a1e <HAL_GPIO_Init+0x226>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a1c      	ldr	r2, [pc, #112]	@ (8005a48 <HAL_GPIO_Init+0x250>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d01f      	beq.n	8005a1a <HAL_GPIO_Init+0x222>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a1b      	ldr	r2, [pc, #108]	@ (8005a4c <HAL_GPIO_Init+0x254>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d019      	beq.n	8005a16 <HAL_GPIO_Init+0x21e>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a1a      	ldr	r2, [pc, #104]	@ (8005a50 <HAL_GPIO_Init+0x258>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d013      	beq.n	8005a12 <HAL_GPIO_Init+0x21a>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a19      	ldr	r2, [pc, #100]	@ (8005a54 <HAL_GPIO_Init+0x25c>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d00d      	beq.n	8005a0e <HAL_GPIO_Init+0x216>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a18      	ldr	r2, [pc, #96]	@ (8005a58 <HAL_GPIO_Init+0x260>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d007      	beq.n	8005a0a <HAL_GPIO_Init+0x212>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a17      	ldr	r2, [pc, #92]	@ (8005a5c <HAL_GPIO_Init+0x264>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d101      	bne.n	8005a06 <HAL_GPIO_Init+0x20e>
 8005a02:	2309      	movs	r3, #9
 8005a04:	e02d      	b.n	8005a62 <HAL_GPIO_Init+0x26a>
 8005a06:	230a      	movs	r3, #10
 8005a08:	e02b      	b.n	8005a62 <HAL_GPIO_Init+0x26a>
 8005a0a:	2308      	movs	r3, #8
 8005a0c:	e029      	b.n	8005a62 <HAL_GPIO_Init+0x26a>
 8005a0e:	2307      	movs	r3, #7
 8005a10:	e027      	b.n	8005a62 <HAL_GPIO_Init+0x26a>
 8005a12:	2306      	movs	r3, #6
 8005a14:	e025      	b.n	8005a62 <HAL_GPIO_Init+0x26a>
 8005a16:	2305      	movs	r3, #5
 8005a18:	e023      	b.n	8005a62 <HAL_GPIO_Init+0x26a>
 8005a1a:	2304      	movs	r3, #4
 8005a1c:	e021      	b.n	8005a62 <HAL_GPIO_Init+0x26a>
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e01f      	b.n	8005a62 <HAL_GPIO_Init+0x26a>
 8005a22:	2302      	movs	r3, #2
 8005a24:	e01d      	b.n	8005a62 <HAL_GPIO_Init+0x26a>
 8005a26:	2301      	movs	r3, #1
 8005a28:	e01b      	b.n	8005a62 <HAL_GPIO_Init+0x26a>
 8005a2a:	bf00      	nop
 8005a2c:	58000080 	.word	0x58000080
 8005a30:	58024400 	.word	0x58024400
 8005a34:	58000400 	.word	0x58000400
 8005a38:	58020000 	.word	0x58020000
 8005a3c:	58020400 	.word	0x58020400
 8005a40:	58020800 	.word	0x58020800
 8005a44:	58020c00 	.word	0x58020c00
 8005a48:	58021000 	.word	0x58021000
 8005a4c:	58021400 	.word	0x58021400
 8005a50:	58021800 	.word	0x58021800
 8005a54:	58021c00 	.word	0x58021c00
 8005a58:	58022000 	.word	0x58022000
 8005a5c:	58022400 	.word	0x58022400
 8005a60:	2300      	movs	r3, #0
 8005a62:	69fa      	ldr	r2, [r7, #28]
 8005a64:	f002 0203 	and.w	r2, r2, #3
 8005a68:	0092      	lsls	r2, r2, #2
 8005a6a:	4093      	lsls	r3, r2
 8005a6c:	69ba      	ldr	r2, [r7, #24]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a72:	4938      	ldr	r1, [pc, #224]	@ (8005b54 <HAL_GPIO_Init+0x35c>)
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	089b      	lsrs	r3, r3, #2
 8005a78:	3302      	adds	r3, #2
 8005a7a:	69ba      	ldr	r2, [r7, #24]
 8005a7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005a80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	43db      	mvns	r3, r3
 8005a8c:	69ba      	ldr	r2, [r7, #24]
 8005a8e:	4013      	ands	r3, r2
 8005a90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d003      	beq.n	8005aa6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005a9e:	69ba      	ldr	r2, [r7, #24]
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005aa6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005aae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	43db      	mvns	r3, r3
 8005aba:	69ba      	ldr	r2, [r7, #24]
 8005abc:	4013      	ands	r3, r2
 8005abe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d003      	beq.n	8005ad4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005acc:	69ba      	ldr	r2, [r7, #24]
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005ad4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	43db      	mvns	r3, r3
 8005ae6:	69ba      	ldr	r2, [r7, #24]
 8005ae8:	4013      	ands	r3, r2
 8005aea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d003      	beq.n	8005b00 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005af8:	69ba      	ldr	r2, [r7, #24]
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	69ba      	ldr	r2, [r7, #24]
 8005b04:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	43db      	mvns	r3, r3
 8005b10:	69ba      	ldr	r2, [r7, #24]
 8005b12:	4013      	ands	r3, r2
 8005b14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d003      	beq.n	8005b2a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005b22:	69ba      	ldr	r2, [r7, #24]
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	69ba      	ldr	r2, [r7, #24]
 8005b2e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	3301      	adds	r3, #1
 8005b34:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f47f ae63 	bne.w	800580c <HAL_GPIO_Init+0x14>
  }
}
 8005b46:	bf00      	nop
 8005b48:	bf00      	nop
 8005b4a:	3724      	adds	r7, #36	@ 0x24
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr
 8005b54:	58000400 	.word	0x58000400

08005b58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	460b      	mov	r3, r1
 8005b62:	807b      	strh	r3, [r7, #2]
 8005b64:	4613      	mov	r3, r2
 8005b66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005b68:	787b      	ldrb	r3, [r7, #1]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d003      	beq.n	8005b76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b6e:	887a      	ldrh	r2, [r7, #2]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005b74:	e003      	b.n	8005b7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005b76:	887b      	ldrh	r3, [r7, #2]
 8005b78:	041a      	lsls	r2, r3, #16
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	619a      	str	r2, [r3, #24]
}
 8005b7e:	bf00      	nop
 8005b80:	370c      	adds	r7, #12
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr
	...

08005b8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d101      	bne.n	8005b9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e08b      	b.n	8005cb6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d106      	bne.n	8005bb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f7fb fc2a 	bl	800140c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2224      	movs	r2, #36	@ 0x24
 8005bbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f022 0201 	bic.w	r2, r2, #1
 8005bce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685a      	ldr	r2, [r3, #4]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005bdc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	689a      	ldr	r2, [r3, #8]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005bec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d107      	bne.n	8005c06 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	689a      	ldr	r2, [r3, #8]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c02:	609a      	str	r2, [r3, #8]
 8005c04:	e006      	b.n	8005c14 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	689a      	ldr	r2, [r3, #8]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005c12:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d108      	bne.n	8005c2e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	685a      	ldr	r2, [r3, #4]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c2a:	605a      	str	r2, [r3, #4]
 8005c2c:	e007      	b.n	8005c3e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	685a      	ldr	r2, [r3, #4]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c3c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	6859      	ldr	r1, [r3, #4]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	4b1d      	ldr	r3, [pc, #116]	@ (8005cc0 <HAL_I2C_Init+0x134>)
 8005c4a:	430b      	orrs	r3, r1
 8005c4c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68da      	ldr	r2, [r3, #12]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005c5c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	691a      	ldr	r2, [r3, #16]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	430a      	orrs	r2, r1
 8005c76:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	69d9      	ldr	r1, [r3, #28]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a1a      	ldr	r2, [r3, #32]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	430a      	orrs	r2, r1
 8005c86:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f042 0201 	orr.w	r2, r2, #1
 8005c96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2220      	movs	r2, #32
 8005ca2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3708      	adds	r7, #8
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	02008000 	.word	0x02008000

08005cc4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b088      	sub	sp, #32
 8005cc8:	af02      	add	r7, sp, #8
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	607a      	str	r2, [r7, #4]
 8005cce:	461a      	mov	r2, r3
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	817b      	strh	r3, [r7, #10]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	2b20      	cmp	r3, #32
 8005ce2:	f040 80fd 	bne.w	8005ee0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d101      	bne.n	8005cf4 <HAL_I2C_Master_Transmit+0x30>
 8005cf0:	2302      	movs	r3, #2
 8005cf2:	e0f6      	b.n	8005ee2 <HAL_I2C_Master_Transmit+0x21e>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005cfc:	f7fb fe58 	bl	80019b0 <HAL_GetTick>
 8005d00:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	9300      	str	r3, [sp, #0]
 8005d06:	2319      	movs	r3, #25
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005d0e:	68f8      	ldr	r0, [r7, #12]
 8005d10:	f000 fa0a 	bl	8006128 <I2C_WaitOnFlagUntilTimeout>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d001      	beq.n	8005d1e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e0e1      	b.n	8005ee2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2221      	movs	r2, #33	@ 0x21
 8005d22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2210      	movs	r2, #16
 8005d2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	893a      	ldrh	r2, [r7, #8]
 8005d3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2200      	movs	r2, #0
 8005d44:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	2bff      	cmp	r3, #255	@ 0xff
 8005d4e:	d906      	bls.n	8005d5e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	22ff      	movs	r2, #255	@ 0xff
 8005d54:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005d56:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005d5a:	617b      	str	r3, [r7, #20]
 8005d5c:	e007      	b.n	8005d6e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005d68:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005d6c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d024      	beq.n	8005dc0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d7a:	781a      	ldrb	r2, [r3, #0]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d86:	1c5a      	adds	r2, r3, #1
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	3b01      	subs	r3, #1
 8005d94:	b29a      	uxth	r2, r3
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	b29a      	uxth	r2, r3
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	3301      	adds	r3, #1
 8005dae:	b2da      	uxtb	r2, r3
 8005db0:	8979      	ldrh	r1, [r7, #10]
 8005db2:	4b4e      	ldr	r3, [pc, #312]	@ (8005eec <HAL_I2C_Master_Transmit+0x228>)
 8005db4:	9300      	str	r3, [sp, #0]
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	68f8      	ldr	r0, [r7, #12]
 8005dba:	f000 fc05 	bl	80065c8 <I2C_TransferConfig>
 8005dbe:	e066      	b.n	8005e8e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dc4:	b2da      	uxtb	r2, r3
 8005dc6:	8979      	ldrh	r1, [r7, #10]
 8005dc8:	4b48      	ldr	r3, [pc, #288]	@ (8005eec <HAL_I2C_Master_Transmit+0x228>)
 8005dca:	9300      	str	r3, [sp, #0]
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f000 fbfa 	bl	80065c8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005dd4:	e05b      	b.n	8005e8e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dd6:	693a      	ldr	r2, [r7, #16]
 8005dd8:	6a39      	ldr	r1, [r7, #32]
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	f000 f9fd 	bl	80061da <I2C_WaitOnTXISFlagUntilTimeout>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d001      	beq.n	8005dea <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e07b      	b.n	8005ee2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dee:	781a      	ldrb	r2, [r3, #0]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dfa:	1c5a      	adds	r2, r3, #1
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	3b01      	subs	r3, #1
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e12:	3b01      	subs	r3, #1
 8005e14:	b29a      	uxth	r2, r3
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d034      	beq.n	8005e8e <HAL_I2C_Master_Transmit+0x1ca>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d130      	bne.n	8005e8e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	9300      	str	r3, [sp, #0]
 8005e30:	6a3b      	ldr	r3, [r7, #32]
 8005e32:	2200      	movs	r2, #0
 8005e34:	2180      	movs	r1, #128	@ 0x80
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	f000 f976 	bl	8006128 <I2C_WaitOnFlagUntilTimeout>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d001      	beq.n	8005e46 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e04d      	b.n	8005ee2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	2bff      	cmp	r3, #255	@ 0xff
 8005e4e:	d90e      	bls.n	8005e6e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	22ff      	movs	r2, #255	@ 0xff
 8005e54:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e5a:	b2da      	uxtb	r2, r3
 8005e5c:	8979      	ldrh	r1, [r7, #10]
 8005e5e:	2300      	movs	r3, #0
 8005e60:	9300      	str	r3, [sp, #0]
 8005e62:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f000 fbae 	bl	80065c8 <I2C_TransferConfig>
 8005e6c:	e00f      	b.n	8005e8e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e7c:	b2da      	uxtb	r2, r3
 8005e7e:	8979      	ldrh	r1, [r7, #10]
 8005e80:	2300      	movs	r3, #0
 8005e82:	9300      	str	r3, [sp, #0]
 8005e84:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f000 fb9d 	bl	80065c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d19e      	bne.n	8005dd6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e98:	693a      	ldr	r2, [r7, #16]
 8005e9a:	6a39      	ldr	r1, [r7, #32]
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f000 f9e3 	bl	8006268 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d001      	beq.n	8005eac <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e01a      	b.n	8005ee2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2220      	movs	r2, #32
 8005eb2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	6859      	ldr	r1, [r3, #4]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	4b0c      	ldr	r3, [pc, #48]	@ (8005ef0 <HAL_I2C_Master_Transmit+0x22c>)
 8005ec0:	400b      	ands	r3, r1
 8005ec2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2220      	movs	r2, #32
 8005ec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005edc:	2300      	movs	r3, #0
 8005ede:	e000      	b.n	8005ee2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005ee0:	2302      	movs	r3, #2
  }
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3718      	adds	r7, #24
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	80002000 	.word	0x80002000
 8005ef0:	fe00e800 	.word	0xfe00e800

08005ef4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b088      	sub	sp, #32
 8005ef8:	af02      	add	r7, sp, #8
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	607a      	str	r2, [r7, #4]
 8005efe:	461a      	mov	r2, r3
 8005f00:	460b      	mov	r3, r1
 8005f02:	817b      	strh	r3, [r7, #10]
 8005f04:	4613      	mov	r3, r2
 8005f06:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	2b20      	cmp	r3, #32
 8005f12:	f040 80db 	bne.w	80060cc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d101      	bne.n	8005f24 <HAL_I2C_Master_Receive+0x30>
 8005f20:	2302      	movs	r3, #2
 8005f22:	e0d4      	b.n	80060ce <HAL_I2C_Master_Receive+0x1da>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005f2c:	f7fb fd40 	bl	80019b0 <HAL_GetTick>
 8005f30:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	9300      	str	r3, [sp, #0]
 8005f36:	2319      	movs	r3, #25
 8005f38:	2201      	movs	r2, #1
 8005f3a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005f3e:	68f8      	ldr	r0, [r7, #12]
 8005f40:	f000 f8f2 	bl	8006128 <I2C_WaitOnFlagUntilTimeout>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d001      	beq.n	8005f4e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e0bf      	b.n	80060ce <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2222      	movs	r2, #34	@ 0x22
 8005f52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2210      	movs	r2, #16
 8005f5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2200      	movs	r2, #0
 8005f62:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	893a      	ldrh	r2, [r7, #8]
 8005f6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2200      	movs	r2, #0
 8005f74:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	2bff      	cmp	r3, #255	@ 0xff
 8005f7e:	d90e      	bls.n	8005f9e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	22ff      	movs	r2, #255	@ 0xff
 8005f84:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f8a:	b2da      	uxtb	r2, r3
 8005f8c:	8979      	ldrh	r1, [r7, #10]
 8005f8e:	4b52      	ldr	r3, [pc, #328]	@ (80060d8 <HAL_I2C_Master_Receive+0x1e4>)
 8005f90:	9300      	str	r3, [sp, #0]
 8005f92:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f000 fb16 	bl	80065c8 <I2C_TransferConfig>
 8005f9c:	e06d      	b.n	800607a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fa2:	b29a      	uxth	r2, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fac:	b2da      	uxtb	r2, r3
 8005fae:	8979      	ldrh	r1, [r7, #10]
 8005fb0:	4b49      	ldr	r3, [pc, #292]	@ (80060d8 <HAL_I2C_Master_Receive+0x1e4>)
 8005fb2:	9300      	str	r3, [sp, #0]
 8005fb4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f000 fb05 	bl	80065c8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005fbe:	e05c      	b.n	800607a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fc0:	697a      	ldr	r2, [r7, #20]
 8005fc2:	6a39      	ldr	r1, [r7, #32]
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f000 f993 	bl	80062f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d001      	beq.n	8005fd4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e07c      	b.n	80060ce <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fde:	b2d2      	uxtb	r2, r2
 8005fe0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe6:	1c5a      	adds	r2, r3, #1
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	3b01      	subs	r3, #1
 8006000:	b29a      	uxth	r2, r3
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800600a:	b29b      	uxth	r3, r3
 800600c:	2b00      	cmp	r3, #0
 800600e:	d034      	beq.n	800607a <HAL_I2C_Master_Receive+0x186>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006014:	2b00      	cmp	r3, #0
 8006016:	d130      	bne.n	800607a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	9300      	str	r3, [sp, #0]
 800601c:	6a3b      	ldr	r3, [r7, #32]
 800601e:	2200      	movs	r2, #0
 8006020:	2180      	movs	r1, #128	@ 0x80
 8006022:	68f8      	ldr	r0, [r7, #12]
 8006024:	f000 f880 	bl	8006128 <I2C_WaitOnFlagUntilTimeout>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d001      	beq.n	8006032 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e04d      	b.n	80060ce <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006036:	b29b      	uxth	r3, r3
 8006038:	2bff      	cmp	r3, #255	@ 0xff
 800603a:	d90e      	bls.n	800605a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	22ff      	movs	r2, #255	@ 0xff
 8006040:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006046:	b2da      	uxtb	r2, r3
 8006048:	8979      	ldrh	r1, [r7, #10]
 800604a:	2300      	movs	r3, #0
 800604c:	9300      	str	r3, [sp, #0]
 800604e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f000 fab8 	bl	80065c8 <I2C_TransferConfig>
 8006058:	e00f      	b.n	800607a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800605e:	b29a      	uxth	r2, r3
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006068:	b2da      	uxtb	r2, r3
 800606a:	8979      	ldrh	r1, [r7, #10]
 800606c:	2300      	movs	r3, #0
 800606e:	9300      	str	r3, [sp, #0]
 8006070:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	f000 faa7 	bl	80065c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800607e:	b29b      	uxth	r3, r3
 8006080:	2b00      	cmp	r3, #0
 8006082:	d19d      	bne.n	8005fc0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006084:	697a      	ldr	r2, [r7, #20]
 8006086:	6a39      	ldr	r1, [r7, #32]
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f000 f8ed 	bl	8006268 <I2C_WaitOnSTOPFlagUntilTimeout>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d001      	beq.n	8006098 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e01a      	b.n	80060ce <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2220      	movs	r2, #32
 800609e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	6859      	ldr	r1, [r3, #4]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	4b0c      	ldr	r3, [pc, #48]	@ (80060dc <HAL_I2C_Master_Receive+0x1e8>)
 80060ac:	400b      	ands	r3, r1
 80060ae:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2220      	movs	r2, #32
 80060b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80060c8:	2300      	movs	r3, #0
 80060ca:	e000      	b.n	80060ce <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80060cc:	2302      	movs	r3, #2
  }
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3718      	adds	r7, #24
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	80002400 	.word	0x80002400
 80060dc:	fe00e800 	.word	0xfe00e800

080060e0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	f003 0302 	and.w	r3, r3, #2
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d103      	bne.n	80060fe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2200      	movs	r2, #0
 80060fc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	f003 0301 	and.w	r3, r3, #1
 8006108:	2b01      	cmp	r3, #1
 800610a:	d007      	beq.n	800611c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	699a      	ldr	r2, [r3, #24]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f042 0201 	orr.w	r2, r2, #1
 800611a:	619a      	str	r2, [r3, #24]
  }
}
 800611c:	bf00      	nop
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	603b      	str	r3, [r7, #0]
 8006134:	4613      	mov	r3, r2
 8006136:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006138:	e03b      	b.n	80061b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800613a:	69ba      	ldr	r2, [r7, #24]
 800613c:	6839      	ldr	r1, [r7, #0]
 800613e:	68f8      	ldr	r0, [r7, #12]
 8006140:	f000 f962 	bl	8006408 <I2C_IsErrorOccurred>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d001      	beq.n	800614e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e041      	b.n	80061d2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006154:	d02d      	beq.n	80061b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006156:	f7fb fc2b 	bl	80019b0 <HAL_GetTick>
 800615a:	4602      	mov	r2, r0
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	683a      	ldr	r2, [r7, #0]
 8006162:	429a      	cmp	r2, r3
 8006164:	d302      	bcc.n	800616c <I2C_WaitOnFlagUntilTimeout+0x44>
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d122      	bne.n	80061b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	699a      	ldr	r2, [r3, #24]
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	4013      	ands	r3, r2
 8006176:	68ba      	ldr	r2, [r7, #8]
 8006178:	429a      	cmp	r2, r3
 800617a:	bf0c      	ite	eq
 800617c:	2301      	moveq	r3, #1
 800617e:	2300      	movne	r3, #0
 8006180:	b2db      	uxtb	r3, r3
 8006182:	461a      	mov	r2, r3
 8006184:	79fb      	ldrb	r3, [r7, #7]
 8006186:	429a      	cmp	r2, r3
 8006188:	d113      	bne.n	80061b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800618e:	f043 0220 	orr.w	r2, r3, #32
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2220      	movs	r2, #32
 800619a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e00f      	b.n	80061d2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	699a      	ldr	r2, [r3, #24]
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	4013      	ands	r3, r2
 80061bc:	68ba      	ldr	r2, [r7, #8]
 80061be:	429a      	cmp	r2, r3
 80061c0:	bf0c      	ite	eq
 80061c2:	2301      	moveq	r3, #1
 80061c4:	2300      	movne	r3, #0
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	461a      	mov	r2, r3
 80061ca:	79fb      	ldrb	r3, [r7, #7]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d0b4      	beq.n	800613a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3710      	adds	r7, #16
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80061da:	b580      	push	{r7, lr}
 80061dc:	b084      	sub	sp, #16
 80061de:	af00      	add	r7, sp, #0
 80061e0:	60f8      	str	r0, [r7, #12]
 80061e2:	60b9      	str	r1, [r7, #8]
 80061e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80061e6:	e033      	b.n	8006250 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	68b9      	ldr	r1, [r7, #8]
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f000 f90b 	bl	8006408 <I2C_IsErrorOccurred>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d001      	beq.n	80061fc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e031      	b.n	8006260 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006202:	d025      	beq.n	8006250 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006204:	f7fb fbd4 	bl	80019b0 <HAL_GetTick>
 8006208:	4602      	mov	r2, r0
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	68ba      	ldr	r2, [r7, #8]
 8006210:	429a      	cmp	r2, r3
 8006212:	d302      	bcc.n	800621a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d11a      	bne.n	8006250 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	699b      	ldr	r3, [r3, #24]
 8006220:	f003 0302 	and.w	r3, r3, #2
 8006224:	2b02      	cmp	r3, #2
 8006226:	d013      	beq.n	8006250 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800622c:	f043 0220 	orr.w	r2, r3, #32
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2220      	movs	r2, #32
 8006238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2200      	movs	r2, #0
 8006240:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e007      	b.n	8006260 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	f003 0302 	and.w	r3, r3, #2
 800625a:	2b02      	cmp	r3, #2
 800625c:	d1c4      	bne.n	80061e8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	3710      	adds	r7, #16
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006274:	e02f      	b.n	80062d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	68b9      	ldr	r1, [r7, #8]
 800627a:	68f8      	ldr	r0, [r7, #12]
 800627c:	f000 f8c4 	bl	8006408 <I2C_IsErrorOccurred>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d001      	beq.n	800628a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e02d      	b.n	80062e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800628a:	f7fb fb91 	bl	80019b0 <HAL_GetTick>
 800628e:	4602      	mov	r2, r0
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	68ba      	ldr	r2, [r7, #8]
 8006296:	429a      	cmp	r2, r3
 8006298:	d302      	bcc.n	80062a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d11a      	bne.n	80062d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	f003 0320 	and.w	r3, r3, #32
 80062aa:	2b20      	cmp	r3, #32
 80062ac:	d013      	beq.n	80062d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062b2:	f043 0220 	orr.w	r2, r3, #32
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2220      	movs	r2, #32
 80062be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e007      	b.n	80062e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	699b      	ldr	r3, [r3, #24]
 80062dc:	f003 0320 	and.w	r3, r3, #32
 80062e0:	2b20      	cmp	r3, #32
 80062e2:	d1c8      	bne.n	8006276 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3710      	adds	r7, #16
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
	...

080062f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b086      	sub	sp, #24
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062fc:	2300      	movs	r3, #0
 80062fe:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006300:	e071      	b.n	80063e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	68b9      	ldr	r1, [r7, #8]
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	f000 f87e 	bl	8006408 <I2C_IsErrorOccurred>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d001      	beq.n	8006316 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	699b      	ldr	r3, [r3, #24]
 800631c:	f003 0320 	and.w	r3, r3, #32
 8006320:	2b20      	cmp	r3, #32
 8006322:	d13b      	bne.n	800639c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8006324:	7dfb      	ldrb	r3, [r7, #23]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d138      	bne.n	800639c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	699b      	ldr	r3, [r3, #24]
 8006330:	f003 0304 	and.w	r3, r3, #4
 8006334:	2b04      	cmp	r3, #4
 8006336:	d105      	bne.n	8006344 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800633c:	2b00      	cmp	r3, #0
 800633e:	d001      	beq.n	8006344 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8006340:	2300      	movs	r3, #0
 8006342:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	f003 0310 	and.w	r3, r3, #16
 800634e:	2b10      	cmp	r3, #16
 8006350:	d121      	bne.n	8006396 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2210      	movs	r2, #16
 8006358:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2204      	movs	r2, #4
 800635e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2220      	movs	r2, #32
 8006366:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	6859      	ldr	r1, [r3, #4]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	4b24      	ldr	r3, [pc, #144]	@ (8006404 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8006374:	400b      	ands	r3, r1
 8006376:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2220      	movs	r2, #32
 800637c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	75fb      	strb	r3, [r7, #23]
 8006394:	e002      	b.n	800639c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800639c:	f7fb fb08 	bl	80019b0 <HAL_GetTick>
 80063a0:	4602      	mov	r2, r0
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	68ba      	ldr	r2, [r7, #8]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d302      	bcc.n	80063b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d119      	bne.n	80063e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80063b2:	7dfb      	ldrb	r3, [r7, #23]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d116      	bne.n	80063e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	699b      	ldr	r3, [r3, #24]
 80063be:	f003 0304 	and.w	r3, r3, #4
 80063c2:	2b04      	cmp	r3, #4
 80063c4:	d00f      	beq.n	80063e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ca:	f043 0220 	orr.w	r2, r3, #32
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2220      	movs	r2, #32
 80063d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	699b      	ldr	r3, [r3, #24]
 80063ec:	f003 0304 	and.w	r3, r3, #4
 80063f0:	2b04      	cmp	r3, #4
 80063f2:	d002      	beq.n	80063fa <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80063f4:	7dfb      	ldrb	r3, [r7, #23]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d083      	beq.n	8006302 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80063fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3718      	adds	r7, #24
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}
 8006404:	fe00e800 	.word	0xfe00e800

08006408 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b08a      	sub	sp, #40	@ 0x28
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006414:	2300      	movs	r3, #0
 8006416:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006422:	2300      	movs	r3, #0
 8006424:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	f003 0310 	and.w	r3, r3, #16
 8006430:	2b00      	cmp	r3, #0
 8006432:	d068      	beq.n	8006506 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2210      	movs	r2, #16
 800643a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800643c:	e049      	b.n	80064d2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006444:	d045      	beq.n	80064d2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006446:	f7fb fab3 	bl	80019b0 <HAL_GetTick>
 800644a:	4602      	mov	r2, r0
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	1ad3      	subs	r3, r2, r3
 8006450:	68ba      	ldr	r2, [r7, #8]
 8006452:	429a      	cmp	r2, r3
 8006454:	d302      	bcc.n	800645c <I2C_IsErrorOccurred+0x54>
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d13a      	bne.n	80064d2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006466:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800646e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	699b      	ldr	r3, [r3, #24]
 8006476:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800647a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800647e:	d121      	bne.n	80064c4 <I2C_IsErrorOccurred+0xbc>
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006486:	d01d      	beq.n	80064c4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006488:	7cfb      	ldrb	r3, [r7, #19]
 800648a:	2b20      	cmp	r3, #32
 800648c:	d01a      	beq.n	80064c4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	685a      	ldr	r2, [r3, #4]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800649c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800649e:	f7fb fa87 	bl	80019b0 <HAL_GetTick>
 80064a2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80064a4:	e00e      	b.n	80064c4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80064a6:	f7fb fa83 	bl	80019b0 <HAL_GetTick>
 80064aa:	4602      	mov	r2, r0
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	2b19      	cmp	r3, #25
 80064b2:	d907      	bls.n	80064c4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80064b4:	6a3b      	ldr	r3, [r7, #32]
 80064b6:	f043 0320 	orr.w	r3, r3, #32
 80064ba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80064c2:	e006      	b.n	80064d2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	f003 0320 	and.w	r3, r3, #32
 80064ce:	2b20      	cmp	r3, #32
 80064d0:	d1e9      	bne.n	80064a6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	699b      	ldr	r3, [r3, #24]
 80064d8:	f003 0320 	and.w	r3, r3, #32
 80064dc:	2b20      	cmp	r3, #32
 80064de:	d003      	beq.n	80064e8 <I2C_IsErrorOccurred+0xe0>
 80064e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d0aa      	beq.n	800643e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80064e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d103      	bne.n	80064f8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2220      	movs	r2, #32
 80064f6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80064f8:	6a3b      	ldr	r3, [r7, #32]
 80064fa:	f043 0304 	orr.w	r3, r3, #4
 80064fe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	699b      	ldr	r3, [r3, #24]
 800650c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00b      	beq.n	8006530 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006518:	6a3b      	ldr	r3, [r7, #32]
 800651a:	f043 0301 	orr.w	r3, r3, #1
 800651e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006528:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00b      	beq.n	8006552 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800653a:	6a3b      	ldr	r3, [r7, #32]
 800653c:	f043 0308 	orr.w	r3, r3, #8
 8006540:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800654a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00b      	beq.n	8006574 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800655c:	6a3b      	ldr	r3, [r7, #32]
 800655e:	f043 0302 	orr.w	r3, r3, #2
 8006562:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800656c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006574:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006578:	2b00      	cmp	r3, #0
 800657a:	d01c      	beq.n	80065b6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f7ff fdaf 	bl	80060e0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	6859      	ldr	r1, [r3, #4]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	4b0d      	ldr	r3, [pc, #52]	@ (80065c4 <I2C_IsErrorOccurred+0x1bc>)
 800658e:	400b      	ands	r3, r1
 8006590:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006596:	6a3b      	ldr	r3, [r7, #32]
 8006598:	431a      	orrs	r2, r3
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2220      	movs	r2, #32
 80065a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80065b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3728      	adds	r7, #40	@ 0x28
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	fe00e800 	.word	0xfe00e800

080065c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b087      	sub	sp, #28
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	607b      	str	r3, [r7, #4]
 80065d2:	460b      	mov	r3, r1
 80065d4:	817b      	strh	r3, [r7, #10]
 80065d6:	4613      	mov	r3, r2
 80065d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80065da:	897b      	ldrh	r3, [r7, #10]
 80065dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80065e0:	7a7b      	ldrb	r3, [r7, #9]
 80065e2:	041b      	lsls	r3, r3, #16
 80065e4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80065e8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80065ee:	6a3b      	ldr	r3, [r7, #32]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80065f6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	685a      	ldr	r2, [r3, #4]
 80065fe:	6a3b      	ldr	r3, [r7, #32]
 8006600:	0d5b      	lsrs	r3, r3, #21
 8006602:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006606:	4b08      	ldr	r3, [pc, #32]	@ (8006628 <I2C_TransferConfig+0x60>)
 8006608:	430b      	orrs	r3, r1
 800660a:	43db      	mvns	r3, r3
 800660c:	ea02 0103 	and.w	r1, r2, r3
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	697a      	ldr	r2, [r7, #20]
 8006616:	430a      	orrs	r2, r1
 8006618:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800661a:	bf00      	nop
 800661c:	371c      	adds	r7, #28
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	03ff63ff 	.word	0x03ff63ff

0800662c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800663c:	b2db      	uxtb	r3, r3
 800663e:	2b20      	cmp	r3, #32
 8006640:	d138      	bne.n	80066b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006648:	2b01      	cmp	r3, #1
 800664a:	d101      	bne.n	8006650 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800664c:	2302      	movs	r3, #2
 800664e:	e032      	b.n	80066b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2224      	movs	r2, #36	@ 0x24
 800665c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f022 0201 	bic.w	r2, r2, #1
 800666e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800667e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	6819      	ldr	r1, [r3, #0]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	683a      	ldr	r2, [r7, #0]
 800668c:	430a      	orrs	r2, r1
 800668e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f042 0201 	orr.w	r2, r2, #1
 800669e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2220      	movs	r2, #32
 80066a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80066b0:	2300      	movs	r3, #0
 80066b2:	e000      	b.n	80066b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80066b4:	2302      	movs	r3, #2
  }
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	370c      	adds	r7, #12
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr

080066c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80066c2:	b480      	push	{r7}
 80066c4:	b085      	sub	sp, #20
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
 80066ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	2b20      	cmp	r3, #32
 80066d6:	d139      	bne.n	800674c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d101      	bne.n	80066e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80066e2:	2302      	movs	r3, #2
 80066e4:	e033      	b.n	800674e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2201      	movs	r2, #1
 80066ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2224      	movs	r2, #36	@ 0x24
 80066f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f022 0201 	bic.w	r2, r2, #1
 8006704:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006714:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	021b      	lsls	r3, r3, #8
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	4313      	orrs	r3, r2
 800671e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f042 0201 	orr.w	r2, r2, #1
 8006736:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2220      	movs	r2, #32
 800673c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006748:	2300      	movs	r3, #0
 800674a:	e000      	b.n	800674e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800674c:	2302      	movs	r3, #2
  }
}
 800674e:	4618      	mov	r0, r3
 8006750:	3714      	adds	r7, #20
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr
	...

0800675c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006764:	4b19      	ldr	r3, [pc, #100]	@ (80067cc <HAL_PWREx_ConfigSupply+0x70>)
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	f003 0304 	and.w	r3, r3, #4
 800676c:	2b04      	cmp	r3, #4
 800676e:	d00a      	beq.n	8006786 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006770:	4b16      	ldr	r3, [pc, #88]	@ (80067cc <HAL_PWREx_ConfigSupply+0x70>)
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	f003 0307 	and.w	r3, r3, #7
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	429a      	cmp	r2, r3
 800677c:	d001      	beq.n	8006782 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e01f      	b.n	80067c2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006782:	2300      	movs	r3, #0
 8006784:	e01d      	b.n	80067c2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006786:	4b11      	ldr	r3, [pc, #68]	@ (80067cc <HAL_PWREx_ConfigSupply+0x70>)
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	f023 0207 	bic.w	r2, r3, #7
 800678e:	490f      	ldr	r1, [pc, #60]	@ (80067cc <HAL_PWREx_ConfigSupply+0x70>)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4313      	orrs	r3, r2
 8006794:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006796:	f7fb f90b 	bl	80019b0 <HAL_GetTick>
 800679a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800679c:	e009      	b.n	80067b2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800679e:	f7fb f907 	bl	80019b0 <HAL_GetTick>
 80067a2:	4602      	mov	r2, r0
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80067ac:	d901      	bls.n	80067b2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e007      	b.n	80067c2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80067b2:	4b06      	ldr	r3, [pc, #24]	@ (80067cc <HAL_PWREx_ConfigSupply+0x70>)
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80067ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067be:	d1ee      	bne.n	800679e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	58024800 	.word	0x58024800

080067d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b08c      	sub	sp, #48	@ 0x30
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d102      	bne.n	80067e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	f000 bc48 	b.w	8007074 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 0301 	and.w	r3, r3, #1
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f000 8088 	beq.w	8006902 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067f2:	4b99      	ldr	r3, [pc, #612]	@ (8006a58 <HAL_RCC_OscConfig+0x288>)
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80067fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80067fc:	4b96      	ldr	r3, [pc, #600]	@ (8006a58 <HAL_RCC_OscConfig+0x288>)
 80067fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006800:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006804:	2b10      	cmp	r3, #16
 8006806:	d007      	beq.n	8006818 <HAL_RCC_OscConfig+0x48>
 8006808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800680a:	2b18      	cmp	r3, #24
 800680c:	d111      	bne.n	8006832 <HAL_RCC_OscConfig+0x62>
 800680e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006810:	f003 0303 	and.w	r3, r3, #3
 8006814:	2b02      	cmp	r3, #2
 8006816:	d10c      	bne.n	8006832 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006818:	4b8f      	ldr	r3, [pc, #572]	@ (8006a58 <HAL_RCC_OscConfig+0x288>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006820:	2b00      	cmp	r3, #0
 8006822:	d06d      	beq.n	8006900 <HAL_RCC_OscConfig+0x130>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d169      	bne.n	8006900 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	f000 bc21 	b.w	8007074 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800683a:	d106      	bne.n	800684a <HAL_RCC_OscConfig+0x7a>
 800683c:	4b86      	ldr	r3, [pc, #536]	@ (8006a58 <HAL_RCC_OscConfig+0x288>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a85      	ldr	r2, [pc, #532]	@ (8006a58 <HAL_RCC_OscConfig+0x288>)
 8006842:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006846:	6013      	str	r3, [r2, #0]
 8006848:	e02e      	b.n	80068a8 <HAL_RCC_OscConfig+0xd8>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d10c      	bne.n	800686c <HAL_RCC_OscConfig+0x9c>
 8006852:	4b81      	ldr	r3, [pc, #516]	@ (8006a58 <HAL_RCC_OscConfig+0x288>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a80      	ldr	r2, [pc, #512]	@ (8006a58 <HAL_RCC_OscConfig+0x288>)
 8006858:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800685c:	6013      	str	r3, [r2, #0]
 800685e:	4b7e      	ldr	r3, [pc, #504]	@ (8006a58 <HAL_RCC_OscConfig+0x288>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a7d      	ldr	r2, [pc, #500]	@ (8006a58 <HAL_RCC_OscConfig+0x288>)
 8006864:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006868:	6013      	str	r3, [r2, #0]
 800686a:	e01d      	b.n	80068a8 <HAL_RCC_OscConfig+0xd8>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006874:	d10c      	bne.n	8006890 <HAL_RCC_OscConfig+0xc0>
 8006876:	4b78      	ldr	r3, [pc, #480]	@ (8006a58 <HAL_RCC_OscConfig+0x288>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a77      	ldr	r2, [pc, #476]	@ (8006a58 <HAL_RCC_OscConfig+0x288>)
 800687c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006880:	6013      	str	r3, [r2, #0]
 8006882:	4b75      	ldr	r3, [pc, #468]	@ (8006a58 <HAL_RCC_OscConfig+0x288>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a74      	ldr	r2, [pc, #464]	@ (8006a58 <HAL_RCC_OscConfig+0x288>)
 8006888:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800688c:	6013      	str	r3, [r2, #0]
 800688e:	e00b      	b.n	80068a8 <HAL_RCC_OscConfig+0xd8>
 8006890:	4b71      	ldr	r3, [pc, #452]	@ (8006a58 <HAL_RCC_OscConfig+0x288>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a70      	ldr	r2, [pc, #448]	@ (8006a58 <HAL_RCC_OscConfig+0x288>)
 8006896:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800689a:	6013      	str	r3, [r2, #0]
 800689c:	4b6e      	ldr	r3, [pc, #440]	@ (8006a58 <HAL_RCC_OscConfig+0x288>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a6d      	ldr	r2, [pc, #436]	@ (8006a58 <HAL_RCC_OscConfig+0x288>)
 80068a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80068a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d013      	beq.n	80068d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068b0:	f7fb f87e 	bl	80019b0 <HAL_GetTick>
 80068b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80068b6:	e008      	b.n	80068ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068b8:	f7fb f87a 	bl	80019b0 <HAL_GetTick>
 80068bc:	4602      	mov	r2, r0
 80068be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c0:	1ad3      	subs	r3, r2, r3
 80068c2:	2b64      	cmp	r3, #100	@ 0x64
 80068c4:	d901      	bls.n	80068ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80068c6:	2303      	movs	r3, #3
 80068c8:	e3d4      	b.n	8007074 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80068ca:	4b63      	ldr	r3, [pc, #396]	@ (8006a58 <HAL_RCC_OscConfig+0x288>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d0f0      	beq.n	80068b8 <HAL_RCC_OscConfig+0xe8>
 80068d6:	e014      	b.n	8006902 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068d8:	f7fb f86a 	bl	80019b0 <HAL_GetTick>
 80068dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80068de:	e008      	b.n	80068f2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068e0:	f7fb f866 	bl	80019b0 <HAL_GetTick>
 80068e4:	4602      	mov	r2, r0
 80068e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	2b64      	cmp	r3, #100	@ 0x64
 80068ec:	d901      	bls.n	80068f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e3c0      	b.n	8007074 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80068f2:	4b59      	ldr	r3, [pc, #356]	@ (8006a58 <HAL_RCC_OscConfig+0x288>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1f0      	bne.n	80068e0 <HAL_RCC_OscConfig+0x110>
 80068fe:	e000      	b.n	8006902 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006900:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 0302 	and.w	r3, r3, #2
 800690a:	2b00      	cmp	r3, #0
 800690c:	f000 80ca 	beq.w	8006aa4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006910:	4b51      	ldr	r3, [pc, #324]	@ (8006a58 <HAL_RCC_OscConfig+0x288>)
 8006912:	691b      	ldr	r3, [r3, #16]
 8006914:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006918:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800691a:	4b4f      	ldr	r3, [pc, #316]	@ (8006a58 <HAL_RCC_OscConfig+0x288>)
 800691c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800691e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006920:	6a3b      	ldr	r3, [r7, #32]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d007      	beq.n	8006936 <HAL_RCC_OscConfig+0x166>
 8006926:	6a3b      	ldr	r3, [r7, #32]
 8006928:	2b18      	cmp	r3, #24
 800692a:	d156      	bne.n	80069da <HAL_RCC_OscConfig+0x20a>
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	f003 0303 	and.w	r3, r3, #3
 8006932:	2b00      	cmp	r3, #0
 8006934:	d151      	bne.n	80069da <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006936:	4b48      	ldr	r3, [pc, #288]	@ (8006a58 <HAL_RCC_OscConfig+0x288>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 0304 	and.w	r3, r3, #4
 800693e:	2b00      	cmp	r3, #0
 8006940:	d005      	beq.n	800694e <HAL_RCC_OscConfig+0x17e>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d101      	bne.n	800694e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	e392      	b.n	8007074 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800694e:	4b42      	ldr	r3, [pc, #264]	@ (8006a58 <HAL_RCC_OscConfig+0x288>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f023 0219 	bic.w	r2, r3, #25
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	493f      	ldr	r1, [pc, #252]	@ (8006a58 <HAL_RCC_OscConfig+0x288>)
 800695c:	4313      	orrs	r3, r2
 800695e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006960:	f7fb f826 	bl	80019b0 <HAL_GetTick>
 8006964:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006966:	e008      	b.n	800697a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006968:	f7fb f822 	bl	80019b0 <HAL_GetTick>
 800696c:	4602      	mov	r2, r0
 800696e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	2b02      	cmp	r3, #2
 8006974:	d901      	bls.n	800697a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006976:	2303      	movs	r3, #3
 8006978:	e37c      	b.n	8007074 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800697a:	4b37      	ldr	r3, [pc, #220]	@ (8006a58 <HAL_RCC_OscConfig+0x288>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 0304 	and.w	r3, r3, #4
 8006982:	2b00      	cmp	r3, #0
 8006984:	d0f0      	beq.n	8006968 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006986:	f7fb f843 	bl	8001a10 <HAL_GetREVID>
 800698a:	4603      	mov	r3, r0
 800698c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006990:	4293      	cmp	r3, r2
 8006992:	d817      	bhi.n	80069c4 <HAL_RCC_OscConfig+0x1f4>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	691b      	ldr	r3, [r3, #16]
 8006998:	2b40      	cmp	r3, #64	@ 0x40
 800699a:	d108      	bne.n	80069ae <HAL_RCC_OscConfig+0x1de>
 800699c:	4b2e      	ldr	r3, [pc, #184]	@ (8006a58 <HAL_RCC_OscConfig+0x288>)
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80069a4:	4a2c      	ldr	r2, [pc, #176]	@ (8006a58 <HAL_RCC_OscConfig+0x288>)
 80069a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069aa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069ac:	e07a      	b.n	8006aa4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069ae:	4b2a      	ldr	r3, [pc, #168]	@ (8006a58 <HAL_RCC_OscConfig+0x288>)
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	031b      	lsls	r3, r3, #12
 80069bc:	4926      	ldr	r1, [pc, #152]	@ (8006a58 <HAL_RCC_OscConfig+0x288>)
 80069be:	4313      	orrs	r3, r2
 80069c0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069c2:	e06f      	b.n	8006aa4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069c4:	4b24      	ldr	r3, [pc, #144]	@ (8006a58 <HAL_RCC_OscConfig+0x288>)
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	061b      	lsls	r3, r3, #24
 80069d2:	4921      	ldr	r1, [pc, #132]	@ (8006a58 <HAL_RCC_OscConfig+0x288>)
 80069d4:	4313      	orrs	r3, r2
 80069d6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069d8:	e064      	b.n	8006aa4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d047      	beq.n	8006a72 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80069e2:	4b1d      	ldr	r3, [pc, #116]	@ (8006a58 <HAL_RCC_OscConfig+0x288>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f023 0219 	bic.w	r2, r3, #25
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	491a      	ldr	r1, [pc, #104]	@ (8006a58 <HAL_RCC_OscConfig+0x288>)
 80069f0:	4313      	orrs	r3, r2
 80069f2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069f4:	f7fa ffdc 	bl	80019b0 <HAL_GetTick>
 80069f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80069fa:	e008      	b.n	8006a0e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069fc:	f7fa ffd8 	bl	80019b0 <HAL_GetTick>
 8006a00:	4602      	mov	r2, r0
 8006a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d901      	bls.n	8006a0e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006a0a:	2303      	movs	r3, #3
 8006a0c:	e332      	b.n	8007074 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a0e:	4b12      	ldr	r3, [pc, #72]	@ (8006a58 <HAL_RCC_OscConfig+0x288>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 0304 	and.w	r3, r3, #4
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d0f0      	beq.n	80069fc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a1a:	f7fa fff9 	bl	8001a10 <HAL_GetREVID>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d819      	bhi.n	8006a5c <HAL_RCC_OscConfig+0x28c>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	2b40      	cmp	r3, #64	@ 0x40
 8006a2e:	d108      	bne.n	8006a42 <HAL_RCC_OscConfig+0x272>
 8006a30:	4b09      	ldr	r3, [pc, #36]	@ (8006a58 <HAL_RCC_OscConfig+0x288>)
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006a38:	4a07      	ldr	r2, [pc, #28]	@ (8006a58 <HAL_RCC_OscConfig+0x288>)
 8006a3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a3e:	6053      	str	r3, [r2, #4]
 8006a40:	e030      	b.n	8006aa4 <HAL_RCC_OscConfig+0x2d4>
 8006a42:	4b05      	ldr	r3, [pc, #20]	@ (8006a58 <HAL_RCC_OscConfig+0x288>)
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	031b      	lsls	r3, r3, #12
 8006a50:	4901      	ldr	r1, [pc, #4]	@ (8006a58 <HAL_RCC_OscConfig+0x288>)
 8006a52:	4313      	orrs	r3, r2
 8006a54:	604b      	str	r3, [r1, #4]
 8006a56:	e025      	b.n	8006aa4 <HAL_RCC_OscConfig+0x2d4>
 8006a58:	58024400 	.word	0x58024400
 8006a5c:	4b9a      	ldr	r3, [pc, #616]	@ (8006cc8 <HAL_RCC_OscConfig+0x4f8>)
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	061b      	lsls	r3, r3, #24
 8006a6a:	4997      	ldr	r1, [pc, #604]	@ (8006cc8 <HAL_RCC_OscConfig+0x4f8>)
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	604b      	str	r3, [r1, #4]
 8006a70:	e018      	b.n	8006aa4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a72:	4b95      	ldr	r3, [pc, #596]	@ (8006cc8 <HAL_RCC_OscConfig+0x4f8>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a94      	ldr	r2, [pc, #592]	@ (8006cc8 <HAL_RCC_OscConfig+0x4f8>)
 8006a78:	f023 0301 	bic.w	r3, r3, #1
 8006a7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a7e:	f7fa ff97 	bl	80019b0 <HAL_GetTick>
 8006a82:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006a84:	e008      	b.n	8006a98 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a86:	f7fa ff93 	bl	80019b0 <HAL_GetTick>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a8e:	1ad3      	subs	r3, r2, r3
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	d901      	bls.n	8006a98 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006a94:	2303      	movs	r3, #3
 8006a96:	e2ed      	b.n	8007074 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006a98:	4b8b      	ldr	r3, [pc, #556]	@ (8006cc8 <HAL_RCC_OscConfig+0x4f8>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 0304 	and.w	r3, r3, #4
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d1f0      	bne.n	8006a86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 0310 	and.w	r3, r3, #16
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	f000 80a9 	beq.w	8006c04 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ab2:	4b85      	ldr	r3, [pc, #532]	@ (8006cc8 <HAL_RCC_OscConfig+0x4f8>)
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006aba:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006abc:	4b82      	ldr	r3, [pc, #520]	@ (8006cc8 <HAL_RCC_OscConfig+0x4f8>)
 8006abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ac0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	2b08      	cmp	r3, #8
 8006ac6:	d007      	beq.n	8006ad8 <HAL_RCC_OscConfig+0x308>
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	2b18      	cmp	r3, #24
 8006acc:	d13a      	bne.n	8006b44 <HAL_RCC_OscConfig+0x374>
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	f003 0303 	and.w	r3, r3, #3
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d135      	bne.n	8006b44 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006ad8:	4b7b      	ldr	r3, [pc, #492]	@ (8006cc8 <HAL_RCC_OscConfig+0x4f8>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d005      	beq.n	8006af0 <HAL_RCC_OscConfig+0x320>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	69db      	ldr	r3, [r3, #28]
 8006ae8:	2b80      	cmp	r3, #128	@ 0x80
 8006aea:	d001      	beq.n	8006af0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	e2c1      	b.n	8007074 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006af0:	f7fa ff8e 	bl	8001a10 <HAL_GetREVID>
 8006af4:	4603      	mov	r3, r0
 8006af6:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d817      	bhi.n	8006b2e <HAL_RCC_OscConfig+0x35e>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a1b      	ldr	r3, [r3, #32]
 8006b02:	2b20      	cmp	r3, #32
 8006b04:	d108      	bne.n	8006b18 <HAL_RCC_OscConfig+0x348>
 8006b06:	4b70      	ldr	r3, [pc, #448]	@ (8006cc8 <HAL_RCC_OscConfig+0x4f8>)
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006b0e:	4a6e      	ldr	r2, [pc, #440]	@ (8006cc8 <HAL_RCC_OscConfig+0x4f8>)
 8006b10:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b14:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b16:	e075      	b.n	8006c04 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006b18:	4b6b      	ldr	r3, [pc, #428]	@ (8006cc8 <HAL_RCC_OscConfig+0x4f8>)
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6a1b      	ldr	r3, [r3, #32]
 8006b24:	069b      	lsls	r3, r3, #26
 8006b26:	4968      	ldr	r1, [pc, #416]	@ (8006cc8 <HAL_RCC_OscConfig+0x4f8>)
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b2c:	e06a      	b.n	8006c04 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006b2e:	4b66      	ldr	r3, [pc, #408]	@ (8006cc8 <HAL_RCC_OscConfig+0x4f8>)
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a1b      	ldr	r3, [r3, #32]
 8006b3a:	061b      	lsls	r3, r3, #24
 8006b3c:	4962      	ldr	r1, [pc, #392]	@ (8006cc8 <HAL_RCC_OscConfig+0x4f8>)
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b42:	e05f      	b.n	8006c04 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	69db      	ldr	r3, [r3, #28]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d042      	beq.n	8006bd2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006b4c:	4b5e      	ldr	r3, [pc, #376]	@ (8006cc8 <HAL_RCC_OscConfig+0x4f8>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a5d      	ldr	r2, [pc, #372]	@ (8006cc8 <HAL_RCC_OscConfig+0x4f8>)
 8006b52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b58:	f7fa ff2a 	bl	80019b0 <HAL_GetTick>
 8006b5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006b5e:	e008      	b.n	8006b72 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006b60:	f7fa ff26 	bl	80019b0 <HAL_GetTick>
 8006b64:	4602      	mov	r2, r0
 8006b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d901      	bls.n	8006b72 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e280      	b.n	8007074 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006b72:	4b55      	ldr	r3, [pc, #340]	@ (8006cc8 <HAL_RCC_OscConfig+0x4f8>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d0f0      	beq.n	8006b60 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006b7e:	f7fa ff47 	bl	8001a10 <HAL_GetREVID>
 8006b82:	4603      	mov	r3, r0
 8006b84:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d817      	bhi.n	8006bbc <HAL_RCC_OscConfig+0x3ec>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6a1b      	ldr	r3, [r3, #32]
 8006b90:	2b20      	cmp	r3, #32
 8006b92:	d108      	bne.n	8006ba6 <HAL_RCC_OscConfig+0x3d6>
 8006b94:	4b4c      	ldr	r3, [pc, #304]	@ (8006cc8 <HAL_RCC_OscConfig+0x4f8>)
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006b9c:	4a4a      	ldr	r2, [pc, #296]	@ (8006cc8 <HAL_RCC_OscConfig+0x4f8>)
 8006b9e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006ba2:	6053      	str	r3, [r2, #4]
 8006ba4:	e02e      	b.n	8006c04 <HAL_RCC_OscConfig+0x434>
 8006ba6:	4b48      	ldr	r3, [pc, #288]	@ (8006cc8 <HAL_RCC_OscConfig+0x4f8>)
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a1b      	ldr	r3, [r3, #32]
 8006bb2:	069b      	lsls	r3, r3, #26
 8006bb4:	4944      	ldr	r1, [pc, #272]	@ (8006cc8 <HAL_RCC_OscConfig+0x4f8>)
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	604b      	str	r3, [r1, #4]
 8006bba:	e023      	b.n	8006c04 <HAL_RCC_OscConfig+0x434>
 8006bbc:	4b42      	ldr	r3, [pc, #264]	@ (8006cc8 <HAL_RCC_OscConfig+0x4f8>)
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6a1b      	ldr	r3, [r3, #32]
 8006bc8:	061b      	lsls	r3, r3, #24
 8006bca:	493f      	ldr	r1, [pc, #252]	@ (8006cc8 <HAL_RCC_OscConfig+0x4f8>)
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	60cb      	str	r3, [r1, #12]
 8006bd0:	e018      	b.n	8006c04 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006bd2:	4b3d      	ldr	r3, [pc, #244]	@ (8006cc8 <HAL_RCC_OscConfig+0x4f8>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a3c      	ldr	r2, [pc, #240]	@ (8006cc8 <HAL_RCC_OscConfig+0x4f8>)
 8006bd8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006bdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bde:	f7fa fee7 	bl	80019b0 <HAL_GetTick>
 8006be2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006be4:	e008      	b.n	8006bf8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006be6:	f7fa fee3 	bl	80019b0 <HAL_GetTick>
 8006bea:	4602      	mov	r2, r0
 8006bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d901      	bls.n	8006bf8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	e23d      	b.n	8007074 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006bf8:	4b33      	ldr	r3, [pc, #204]	@ (8006cc8 <HAL_RCC_OscConfig+0x4f8>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d1f0      	bne.n	8006be6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 0308 	and.w	r3, r3, #8
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d036      	beq.n	8006c7e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	695b      	ldr	r3, [r3, #20]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d019      	beq.n	8006c4c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c18:	4b2b      	ldr	r3, [pc, #172]	@ (8006cc8 <HAL_RCC_OscConfig+0x4f8>)
 8006c1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c1c:	4a2a      	ldr	r2, [pc, #168]	@ (8006cc8 <HAL_RCC_OscConfig+0x4f8>)
 8006c1e:	f043 0301 	orr.w	r3, r3, #1
 8006c22:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c24:	f7fa fec4 	bl	80019b0 <HAL_GetTick>
 8006c28:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006c2a:	e008      	b.n	8006c3e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c2c:	f7fa fec0 	bl	80019b0 <HAL_GetTick>
 8006c30:	4602      	mov	r2, r0
 8006c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	d901      	bls.n	8006c3e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	e21a      	b.n	8007074 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006c3e:	4b22      	ldr	r3, [pc, #136]	@ (8006cc8 <HAL_RCC_OscConfig+0x4f8>)
 8006c40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c42:	f003 0302 	and.w	r3, r3, #2
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d0f0      	beq.n	8006c2c <HAL_RCC_OscConfig+0x45c>
 8006c4a:	e018      	b.n	8006c7e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c4c:	4b1e      	ldr	r3, [pc, #120]	@ (8006cc8 <HAL_RCC_OscConfig+0x4f8>)
 8006c4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c50:	4a1d      	ldr	r2, [pc, #116]	@ (8006cc8 <HAL_RCC_OscConfig+0x4f8>)
 8006c52:	f023 0301 	bic.w	r3, r3, #1
 8006c56:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c58:	f7fa feaa 	bl	80019b0 <HAL_GetTick>
 8006c5c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006c5e:	e008      	b.n	8006c72 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c60:	f7fa fea6 	bl	80019b0 <HAL_GetTick>
 8006c64:	4602      	mov	r2, r0
 8006c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	d901      	bls.n	8006c72 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e200      	b.n	8007074 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006c72:	4b15      	ldr	r3, [pc, #84]	@ (8006cc8 <HAL_RCC_OscConfig+0x4f8>)
 8006c74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c76:	f003 0302 	and.w	r3, r3, #2
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1f0      	bne.n	8006c60 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 0320 	and.w	r3, r3, #32
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d039      	beq.n	8006cfe <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	699b      	ldr	r3, [r3, #24]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d01c      	beq.n	8006ccc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006c92:	4b0d      	ldr	r3, [pc, #52]	@ (8006cc8 <HAL_RCC_OscConfig+0x4f8>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a0c      	ldr	r2, [pc, #48]	@ (8006cc8 <HAL_RCC_OscConfig+0x4f8>)
 8006c98:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006c9c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006c9e:	f7fa fe87 	bl	80019b0 <HAL_GetTick>
 8006ca2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006ca4:	e008      	b.n	8006cb8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006ca6:	f7fa fe83 	bl	80019b0 <HAL_GetTick>
 8006caa:	4602      	mov	r2, r0
 8006cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	2b02      	cmp	r3, #2
 8006cb2:	d901      	bls.n	8006cb8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006cb4:	2303      	movs	r3, #3
 8006cb6:	e1dd      	b.n	8007074 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006cb8:	4b03      	ldr	r3, [pc, #12]	@ (8006cc8 <HAL_RCC_OscConfig+0x4f8>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d0f0      	beq.n	8006ca6 <HAL_RCC_OscConfig+0x4d6>
 8006cc4:	e01b      	b.n	8006cfe <HAL_RCC_OscConfig+0x52e>
 8006cc6:	bf00      	nop
 8006cc8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006ccc:	4b9b      	ldr	r3, [pc, #620]	@ (8006f3c <HAL_RCC_OscConfig+0x76c>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a9a      	ldr	r2, [pc, #616]	@ (8006f3c <HAL_RCC_OscConfig+0x76c>)
 8006cd2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006cd6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006cd8:	f7fa fe6a 	bl	80019b0 <HAL_GetTick>
 8006cdc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006cde:	e008      	b.n	8006cf2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006ce0:	f7fa fe66 	bl	80019b0 <HAL_GetTick>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce8:	1ad3      	subs	r3, r2, r3
 8006cea:	2b02      	cmp	r3, #2
 8006cec:	d901      	bls.n	8006cf2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006cee:	2303      	movs	r3, #3
 8006cf0:	e1c0      	b.n	8007074 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006cf2:	4b92      	ldr	r3, [pc, #584]	@ (8006f3c <HAL_RCC_OscConfig+0x76c>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d1f0      	bne.n	8006ce0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f003 0304 	and.w	r3, r3, #4
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	f000 8081 	beq.w	8006e0e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006d0c:	4b8c      	ldr	r3, [pc, #560]	@ (8006f40 <HAL_RCC_OscConfig+0x770>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a8b      	ldr	r2, [pc, #556]	@ (8006f40 <HAL_RCC_OscConfig+0x770>)
 8006d12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d18:	f7fa fe4a 	bl	80019b0 <HAL_GetTick>
 8006d1c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d1e:	e008      	b.n	8006d32 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d20:	f7fa fe46 	bl	80019b0 <HAL_GetTick>
 8006d24:	4602      	mov	r2, r0
 8006d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d28:	1ad3      	subs	r3, r2, r3
 8006d2a:	2b64      	cmp	r3, #100	@ 0x64
 8006d2c:	d901      	bls.n	8006d32 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	e1a0      	b.n	8007074 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d32:	4b83      	ldr	r3, [pc, #524]	@ (8006f40 <HAL_RCC_OscConfig+0x770>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d0f0      	beq.n	8006d20 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d106      	bne.n	8006d54 <HAL_RCC_OscConfig+0x584>
 8006d46:	4b7d      	ldr	r3, [pc, #500]	@ (8006f3c <HAL_RCC_OscConfig+0x76c>)
 8006d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d4a:	4a7c      	ldr	r2, [pc, #496]	@ (8006f3c <HAL_RCC_OscConfig+0x76c>)
 8006d4c:	f043 0301 	orr.w	r3, r3, #1
 8006d50:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d52:	e02d      	b.n	8006db0 <HAL_RCC_OscConfig+0x5e0>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d10c      	bne.n	8006d76 <HAL_RCC_OscConfig+0x5a6>
 8006d5c:	4b77      	ldr	r3, [pc, #476]	@ (8006f3c <HAL_RCC_OscConfig+0x76c>)
 8006d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d60:	4a76      	ldr	r2, [pc, #472]	@ (8006f3c <HAL_RCC_OscConfig+0x76c>)
 8006d62:	f023 0301 	bic.w	r3, r3, #1
 8006d66:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d68:	4b74      	ldr	r3, [pc, #464]	@ (8006f3c <HAL_RCC_OscConfig+0x76c>)
 8006d6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d6c:	4a73      	ldr	r2, [pc, #460]	@ (8006f3c <HAL_RCC_OscConfig+0x76c>)
 8006d6e:	f023 0304 	bic.w	r3, r3, #4
 8006d72:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d74:	e01c      	b.n	8006db0 <HAL_RCC_OscConfig+0x5e0>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	2b05      	cmp	r3, #5
 8006d7c:	d10c      	bne.n	8006d98 <HAL_RCC_OscConfig+0x5c8>
 8006d7e:	4b6f      	ldr	r3, [pc, #444]	@ (8006f3c <HAL_RCC_OscConfig+0x76c>)
 8006d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d82:	4a6e      	ldr	r2, [pc, #440]	@ (8006f3c <HAL_RCC_OscConfig+0x76c>)
 8006d84:	f043 0304 	orr.w	r3, r3, #4
 8006d88:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d8a:	4b6c      	ldr	r3, [pc, #432]	@ (8006f3c <HAL_RCC_OscConfig+0x76c>)
 8006d8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d8e:	4a6b      	ldr	r2, [pc, #428]	@ (8006f3c <HAL_RCC_OscConfig+0x76c>)
 8006d90:	f043 0301 	orr.w	r3, r3, #1
 8006d94:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d96:	e00b      	b.n	8006db0 <HAL_RCC_OscConfig+0x5e0>
 8006d98:	4b68      	ldr	r3, [pc, #416]	@ (8006f3c <HAL_RCC_OscConfig+0x76c>)
 8006d9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d9c:	4a67      	ldr	r2, [pc, #412]	@ (8006f3c <HAL_RCC_OscConfig+0x76c>)
 8006d9e:	f023 0301 	bic.w	r3, r3, #1
 8006da2:	6713      	str	r3, [r2, #112]	@ 0x70
 8006da4:	4b65      	ldr	r3, [pc, #404]	@ (8006f3c <HAL_RCC_OscConfig+0x76c>)
 8006da6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006da8:	4a64      	ldr	r2, [pc, #400]	@ (8006f3c <HAL_RCC_OscConfig+0x76c>)
 8006daa:	f023 0304 	bic.w	r3, r3, #4
 8006dae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d015      	beq.n	8006de4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006db8:	f7fa fdfa 	bl	80019b0 <HAL_GetTick>
 8006dbc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006dbe:	e00a      	b.n	8006dd6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dc0:	f7fa fdf6 	bl	80019b0 <HAL_GetTick>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc8:	1ad3      	subs	r3, r2, r3
 8006dca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d901      	bls.n	8006dd6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006dd2:	2303      	movs	r3, #3
 8006dd4:	e14e      	b.n	8007074 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006dd6:	4b59      	ldr	r3, [pc, #356]	@ (8006f3c <HAL_RCC_OscConfig+0x76c>)
 8006dd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dda:	f003 0302 	and.w	r3, r3, #2
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d0ee      	beq.n	8006dc0 <HAL_RCC_OscConfig+0x5f0>
 8006de2:	e014      	b.n	8006e0e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006de4:	f7fa fde4 	bl	80019b0 <HAL_GetTick>
 8006de8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006dea:	e00a      	b.n	8006e02 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dec:	f7fa fde0 	bl	80019b0 <HAL_GetTick>
 8006df0:	4602      	mov	r2, r0
 8006df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d901      	bls.n	8006e02 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	e138      	b.n	8007074 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006e02:	4b4e      	ldr	r3, [pc, #312]	@ (8006f3c <HAL_RCC_OscConfig+0x76c>)
 8006e04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e06:	f003 0302 	and.w	r3, r3, #2
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1ee      	bne.n	8006dec <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	f000 812d 	beq.w	8007072 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006e18:	4b48      	ldr	r3, [pc, #288]	@ (8006f3c <HAL_RCC_OscConfig+0x76c>)
 8006e1a:	691b      	ldr	r3, [r3, #16]
 8006e1c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e20:	2b18      	cmp	r3, #24
 8006e22:	f000 80bd 	beq.w	8006fa0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e2a:	2b02      	cmp	r3, #2
 8006e2c:	f040 809e 	bne.w	8006f6c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e30:	4b42      	ldr	r3, [pc, #264]	@ (8006f3c <HAL_RCC_OscConfig+0x76c>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a41      	ldr	r2, [pc, #260]	@ (8006f3c <HAL_RCC_OscConfig+0x76c>)
 8006e36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e3c:	f7fa fdb8 	bl	80019b0 <HAL_GetTick>
 8006e40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e42:	e008      	b.n	8006e56 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e44:	f7fa fdb4 	bl	80019b0 <HAL_GetTick>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e4c:	1ad3      	subs	r3, r2, r3
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d901      	bls.n	8006e56 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006e52:	2303      	movs	r3, #3
 8006e54:	e10e      	b.n	8007074 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e56:	4b39      	ldr	r3, [pc, #228]	@ (8006f3c <HAL_RCC_OscConfig+0x76c>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1f0      	bne.n	8006e44 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e62:	4b36      	ldr	r3, [pc, #216]	@ (8006f3c <HAL_RCC_OscConfig+0x76c>)
 8006e64:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006e66:	4b37      	ldr	r3, [pc, #220]	@ (8006f44 <HAL_RCC_OscConfig+0x774>)
 8006e68:	4013      	ands	r3, r2
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006e72:	0112      	lsls	r2, r2, #4
 8006e74:	430a      	orrs	r2, r1
 8006e76:	4931      	ldr	r1, [pc, #196]	@ (8006f3c <HAL_RCC_OscConfig+0x76c>)
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	628b      	str	r3, [r1, #40]	@ 0x28
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e80:	3b01      	subs	r3, #1
 8006e82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	025b      	lsls	r3, r3, #9
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	431a      	orrs	r2, r3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e96:	3b01      	subs	r3, #1
 8006e98:	041b      	lsls	r3, r3, #16
 8006e9a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006e9e:	431a      	orrs	r2, r3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ea4:	3b01      	subs	r3, #1
 8006ea6:	061b      	lsls	r3, r3, #24
 8006ea8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006eac:	4923      	ldr	r1, [pc, #140]	@ (8006f3c <HAL_RCC_OscConfig+0x76c>)
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006eb2:	4b22      	ldr	r3, [pc, #136]	@ (8006f3c <HAL_RCC_OscConfig+0x76c>)
 8006eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eb6:	4a21      	ldr	r2, [pc, #132]	@ (8006f3c <HAL_RCC_OscConfig+0x76c>)
 8006eb8:	f023 0301 	bic.w	r3, r3, #1
 8006ebc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006ebe:	4b1f      	ldr	r3, [pc, #124]	@ (8006f3c <HAL_RCC_OscConfig+0x76c>)
 8006ec0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ec2:	4b21      	ldr	r3, [pc, #132]	@ (8006f48 <HAL_RCC_OscConfig+0x778>)
 8006ec4:	4013      	ands	r3, r2
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006eca:	00d2      	lsls	r2, r2, #3
 8006ecc:	491b      	ldr	r1, [pc, #108]	@ (8006f3c <HAL_RCC_OscConfig+0x76c>)
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006ed2:	4b1a      	ldr	r3, [pc, #104]	@ (8006f3c <HAL_RCC_OscConfig+0x76c>)
 8006ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ed6:	f023 020c 	bic.w	r2, r3, #12
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ede:	4917      	ldr	r1, [pc, #92]	@ (8006f3c <HAL_RCC_OscConfig+0x76c>)
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006ee4:	4b15      	ldr	r3, [pc, #84]	@ (8006f3c <HAL_RCC_OscConfig+0x76c>)
 8006ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ee8:	f023 0202 	bic.w	r2, r3, #2
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ef0:	4912      	ldr	r1, [pc, #72]	@ (8006f3c <HAL_RCC_OscConfig+0x76c>)
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006ef6:	4b11      	ldr	r3, [pc, #68]	@ (8006f3c <HAL_RCC_OscConfig+0x76c>)
 8006ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006efa:	4a10      	ldr	r2, [pc, #64]	@ (8006f3c <HAL_RCC_OscConfig+0x76c>)
 8006efc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f02:	4b0e      	ldr	r3, [pc, #56]	@ (8006f3c <HAL_RCC_OscConfig+0x76c>)
 8006f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f06:	4a0d      	ldr	r2, [pc, #52]	@ (8006f3c <HAL_RCC_OscConfig+0x76c>)
 8006f08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8006f3c <HAL_RCC_OscConfig+0x76c>)
 8006f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f12:	4a0a      	ldr	r2, [pc, #40]	@ (8006f3c <HAL_RCC_OscConfig+0x76c>)
 8006f14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006f18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006f1a:	4b08      	ldr	r3, [pc, #32]	@ (8006f3c <HAL_RCC_OscConfig+0x76c>)
 8006f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f1e:	4a07      	ldr	r2, [pc, #28]	@ (8006f3c <HAL_RCC_OscConfig+0x76c>)
 8006f20:	f043 0301 	orr.w	r3, r3, #1
 8006f24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f26:	4b05      	ldr	r3, [pc, #20]	@ (8006f3c <HAL_RCC_OscConfig+0x76c>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a04      	ldr	r2, [pc, #16]	@ (8006f3c <HAL_RCC_OscConfig+0x76c>)
 8006f2c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f32:	f7fa fd3d 	bl	80019b0 <HAL_GetTick>
 8006f36:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006f38:	e011      	b.n	8006f5e <HAL_RCC_OscConfig+0x78e>
 8006f3a:	bf00      	nop
 8006f3c:	58024400 	.word	0x58024400
 8006f40:	58024800 	.word	0x58024800
 8006f44:	fffffc0c 	.word	0xfffffc0c
 8006f48:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f4c:	f7fa fd30 	bl	80019b0 <HAL_GetTick>
 8006f50:	4602      	mov	r2, r0
 8006f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d901      	bls.n	8006f5e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006f5a:	2303      	movs	r3, #3
 8006f5c:	e08a      	b.n	8007074 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006f5e:	4b47      	ldr	r3, [pc, #284]	@ (800707c <HAL_RCC_OscConfig+0x8ac>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d0f0      	beq.n	8006f4c <HAL_RCC_OscConfig+0x77c>
 8006f6a:	e082      	b.n	8007072 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f6c:	4b43      	ldr	r3, [pc, #268]	@ (800707c <HAL_RCC_OscConfig+0x8ac>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a42      	ldr	r2, [pc, #264]	@ (800707c <HAL_RCC_OscConfig+0x8ac>)
 8006f72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f78:	f7fa fd1a 	bl	80019b0 <HAL_GetTick>
 8006f7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f7e:	e008      	b.n	8006f92 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f80:	f7fa fd16 	bl	80019b0 <HAL_GetTick>
 8006f84:	4602      	mov	r2, r0
 8006f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f88:	1ad3      	subs	r3, r2, r3
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	d901      	bls.n	8006f92 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006f8e:	2303      	movs	r3, #3
 8006f90:	e070      	b.n	8007074 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f92:	4b3a      	ldr	r3, [pc, #232]	@ (800707c <HAL_RCC_OscConfig+0x8ac>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d1f0      	bne.n	8006f80 <HAL_RCC_OscConfig+0x7b0>
 8006f9e:	e068      	b.n	8007072 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006fa0:	4b36      	ldr	r3, [pc, #216]	@ (800707c <HAL_RCC_OscConfig+0x8ac>)
 8006fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fa4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006fa6:	4b35      	ldr	r3, [pc, #212]	@ (800707c <HAL_RCC_OscConfig+0x8ac>)
 8006fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006faa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d031      	beq.n	8007018 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	f003 0203 	and.w	r2, r3, #3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d12a      	bne.n	8007018 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	091b      	lsrs	r3, r3, #4
 8006fc6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d122      	bne.n	8007018 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fdc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d11a      	bne.n	8007018 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	0a5b      	lsrs	r3, r3, #9
 8006fe6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fee:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d111      	bne.n	8007018 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	0c1b      	lsrs	r3, r3, #16
 8006ff8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007000:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007002:	429a      	cmp	r2, r3
 8007004:	d108      	bne.n	8007018 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	0e1b      	lsrs	r3, r3, #24
 800700a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007012:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007014:	429a      	cmp	r2, r3
 8007016:	d001      	beq.n	800701c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e02b      	b.n	8007074 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800701c:	4b17      	ldr	r3, [pc, #92]	@ (800707c <HAL_RCC_OscConfig+0x8ac>)
 800701e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007020:	08db      	lsrs	r3, r3, #3
 8007022:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007026:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800702c:	693a      	ldr	r2, [r7, #16]
 800702e:	429a      	cmp	r2, r3
 8007030:	d01f      	beq.n	8007072 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007032:	4b12      	ldr	r3, [pc, #72]	@ (800707c <HAL_RCC_OscConfig+0x8ac>)
 8007034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007036:	4a11      	ldr	r2, [pc, #68]	@ (800707c <HAL_RCC_OscConfig+0x8ac>)
 8007038:	f023 0301 	bic.w	r3, r3, #1
 800703c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800703e:	f7fa fcb7 	bl	80019b0 <HAL_GetTick>
 8007042:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007044:	bf00      	nop
 8007046:	f7fa fcb3 	bl	80019b0 <HAL_GetTick>
 800704a:	4602      	mov	r2, r0
 800704c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800704e:	4293      	cmp	r3, r2
 8007050:	d0f9      	beq.n	8007046 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007052:	4b0a      	ldr	r3, [pc, #40]	@ (800707c <HAL_RCC_OscConfig+0x8ac>)
 8007054:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007056:	4b0a      	ldr	r3, [pc, #40]	@ (8007080 <HAL_RCC_OscConfig+0x8b0>)
 8007058:	4013      	ands	r3, r2
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800705e:	00d2      	lsls	r2, r2, #3
 8007060:	4906      	ldr	r1, [pc, #24]	@ (800707c <HAL_RCC_OscConfig+0x8ac>)
 8007062:	4313      	orrs	r3, r2
 8007064:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007066:	4b05      	ldr	r3, [pc, #20]	@ (800707c <HAL_RCC_OscConfig+0x8ac>)
 8007068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800706a:	4a04      	ldr	r2, [pc, #16]	@ (800707c <HAL_RCC_OscConfig+0x8ac>)
 800706c:	f043 0301 	orr.w	r3, r3, #1
 8007070:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	3730      	adds	r7, #48	@ 0x30
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	58024400 	.word	0x58024400
 8007080:	ffff0007 	.word	0xffff0007

08007084 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b086      	sub	sp, #24
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d101      	bne.n	8007098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	e19c      	b.n	80073d2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007098:	4b8a      	ldr	r3, [pc, #552]	@ (80072c4 <HAL_RCC_ClockConfig+0x240>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f003 030f 	and.w	r3, r3, #15
 80070a0:	683a      	ldr	r2, [r7, #0]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d910      	bls.n	80070c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070a6:	4b87      	ldr	r3, [pc, #540]	@ (80072c4 <HAL_RCC_ClockConfig+0x240>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f023 020f 	bic.w	r2, r3, #15
 80070ae:	4985      	ldr	r1, [pc, #532]	@ (80072c4 <HAL_RCC_ClockConfig+0x240>)
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070b6:	4b83      	ldr	r3, [pc, #524]	@ (80072c4 <HAL_RCC_ClockConfig+0x240>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f003 030f 	and.w	r3, r3, #15
 80070be:	683a      	ldr	r2, [r7, #0]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d001      	beq.n	80070c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	e184      	b.n	80073d2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 0304 	and.w	r3, r3, #4
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d010      	beq.n	80070f6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	691a      	ldr	r2, [r3, #16]
 80070d8:	4b7b      	ldr	r3, [pc, #492]	@ (80072c8 <HAL_RCC_ClockConfig+0x244>)
 80070da:	699b      	ldr	r3, [r3, #24]
 80070dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d908      	bls.n	80070f6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80070e4:	4b78      	ldr	r3, [pc, #480]	@ (80072c8 <HAL_RCC_ClockConfig+0x244>)
 80070e6:	699b      	ldr	r3, [r3, #24]
 80070e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	691b      	ldr	r3, [r3, #16]
 80070f0:	4975      	ldr	r1, [pc, #468]	@ (80072c8 <HAL_RCC_ClockConfig+0x244>)
 80070f2:	4313      	orrs	r3, r2
 80070f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 0308 	and.w	r3, r3, #8
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d010      	beq.n	8007124 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	695a      	ldr	r2, [r3, #20]
 8007106:	4b70      	ldr	r3, [pc, #448]	@ (80072c8 <HAL_RCC_ClockConfig+0x244>)
 8007108:	69db      	ldr	r3, [r3, #28]
 800710a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800710e:	429a      	cmp	r2, r3
 8007110:	d908      	bls.n	8007124 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007112:	4b6d      	ldr	r3, [pc, #436]	@ (80072c8 <HAL_RCC_ClockConfig+0x244>)
 8007114:	69db      	ldr	r3, [r3, #28]
 8007116:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	695b      	ldr	r3, [r3, #20]
 800711e:	496a      	ldr	r1, [pc, #424]	@ (80072c8 <HAL_RCC_ClockConfig+0x244>)
 8007120:	4313      	orrs	r3, r2
 8007122:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 0310 	and.w	r3, r3, #16
 800712c:	2b00      	cmp	r3, #0
 800712e:	d010      	beq.n	8007152 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	699a      	ldr	r2, [r3, #24]
 8007134:	4b64      	ldr	r3, [pc, #400]	@ (80072c8 <HAL_RCC_ClockConfig+0x244>)
 8007136:	69db      	ldr	r3, [r3, #28]
 8007138:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800713c:	429a      	cmp	r2, r3
 800713e:	d908      	bls.n	8007152 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007140:	4b61      	ldr	r3, [pc, #388]	@ (80072c8 <HAL_RCC_ClockConfig+0x244>)
 8007142:	69db      	ldr	r3, [r3, #28]
 8007144:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	699b      	ldr	r3, [r3, #24]
 800714c:	495e      	ldr	r1, [pc, #376]	@ (80072c8 <HAL_RCC_ClockConfig+0x244>)
 800714e:	4313      	orrs	r3, r2
 8007150:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f003 0320 	and.w	r3, r3, #32
 800715a:	2b00      	cmp	r3, #0
 800715c:	d010      	beq.n	8007180 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	69da      	ldr	r2, [r3, #28]
 8007162:	4b59      	ldr	r3, [pc, #356]	@ (80072c8 <HAL_RCC_ClockConfig+0x244>)
 8007164:	6a1b      	ldr	r3, [r3, #32]
 8007166:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800716a:	429a      	cmp	r2, r3
 800716c:	d908      	bls.n	8007180 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800716e:	4b56      	ldr	r3, [pc, #344]	@ (80072c8 <HAL_RCC_ClockConfig+0x244>)
 8007170:	6a1b      	ldr	r3, [r3, #32]
 8007172:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	69db      	ldr	r3, [r3, #28]
 800717a:	4953      	ldr	r1, [pc, #332]	@ (80072c8 <HAL_RCC_ClockConfig+0x244>)
 800717c:	4313      	orrs	r3, r2
 800717e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f003 0302 	and.w	r3, r3, #2
 8007188:	2b00      	cmp	r3, #0
 800718a:	d010      	beq.n	80071ae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	68da      	ldr	r2, [r3, #12]
 8007190:	4b4d      	ldr	r3, [pc, #308]	@ (80072c8 <HAL_RCC_ClockConfig+0x244>)
 8007192:	699b      	ldr	r3, [r3, #24]
 8007194:	f003 030f 	and.w	r3, r3, #15
 8007198:	429a      	cmp	r2, r3
 800719a:	d908      	bls.n	80071ae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800719c:	4b4a      	ldr	r3, [pc, #296]	@ (80072c8 <HAL_RCC_ClockConfig+0x244>)
 800719e:	699b      	ldr	r3, [r3, #24]
 80071a0:	f023 020f 	bic.w	r2, r3, #15
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	4947      	ldr	r1, [pc, #284]	@ (80072c8 <HAL_RCC_ClockConfig+0x244>)
 80071aa:	4313      	orrs	r3, r2
 80071ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f003 0301 	and.w	r3, r3, #1
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d055      	beq.n	8007266 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80071ba:	4b43      	ldr	r3, [pc, #268]	@ (80072c8 <HAL_RCC_ClockConfig+0x244>)
 80071bc:	699b      	ldr	r3, [r3, #24]
 80071be:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	4940      	ldr	r1, [pc, #256]	@ (80072c8 <HAL_RCC_ClockConfig+0x244>)
 80071c8:	4313      	orrs	r3, r2
 80071ca:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	d107      	bne.n	80071e4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80071d4:	4b3c      	ldr	r3, [pc, #240]	@ (80072c8 <HAL_RCC_ClockConfig+0x244>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d121      	bne.n	8007224 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80071e0:	2301      	movs	r3, #1
 80071e2:	e0f6      	b.n	80073d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	2b03      	cmp	r3, #3
 80071ea:	d107      	bne.n	80071fc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80071ec:	4b36      	ldr	r3, [pc, #216]	@ (80072c8 <HAL_RCC_ClockConfig+0x244>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d115      	bne.n	8007224 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	e0ea      	b.n	80073d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	2b01      	cmp	r3, #1
 8007202:	d107      	bne.n	8007214 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007204:	4b30      	ldr	r3, [pc, #192]	@ (80072c8 <HAL_RCC_ClockConfig+0x244>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800720c:	2b00      	cmp	r3, #0
 800720e:	d109      	bne.n	8007224 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	e0de      	b.n	80073d2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007214:	4b2c      	ldr	r3, [pc, #176]	@ (80072c8 <HAL_RCC_ClockConfig+0x244>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f003 0304 	and.w	r3, r3, #4
 800721c:	2b00      	cmp	r3, #0
 800721e:	d101      	bne.n	8007224 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	e0d6      	b.n	80073d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007224:	4b28      	ldr	r3, [pc, #160]	@ (80072c8 <HAL_RCC_ClockConfig+0x244>)
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	f023 0207 	bic.w	r2, r3, #7
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	4925      	ldr	r1, [pc, #148]	@ (80072c8 <HAL_RCC_ClockConfig+0x244>)
 8007232:	4313      	orrs	r3, r2
 8007234:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007236:	f7fa fbbb 	bl	80019b0 <HAL_GetTick>
 800723a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800723c:	e00a      	b.n	8007254 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800723e:	f7fa fbb7 	bl	80019b0 <HAL_GetTick>
 8007242:	4602      	mov	r2, r0
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	1ad3      	subs	r3, r2, r3
 8007248:	f241 3288 	movw	r2, #5000	@ 0x1388
 800724c:	4293      	cmp	r3, r2
 800724e:	d901      	bls.n	8007254 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007250:	2303      	movs	r3, #3
 8007252:	e0be      	b.n	80073d2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007254:	4b1c      	ldr	r3, [pc, #112]	@ (80072c8 <HAL_RCC_ClockConfig+0x244>)
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	00db      	lsls	r3, r3, #3
 8007262:	429a      	cmp	r2, r3
 8007264:	d1eb      	bne.n	800723e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f003 0302 	and.w	r3, r3, #2
 800726e:	2b00      	cmp	r3, #0
 8007270:	d010      	beq.n	8007294 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	68da      	ldr	r2, [r3, #12]
 8007276:	4b14      	ldr	r3, [pc, #80]	@ (80072c8 <HAL_RCC_ClockConfig+0x244>)
 8007278:	699b      	ldr	r3, [r3, #24]
 800727a:	f003 030f 	and.w	r3, r3, #15
 800727e:	429a      	cmp	r2, r3
 8007280:	d208      	bcs.n	8007294 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007282:	4b11      	ldr	r3, [pc, #68]	@ (80072c8 <HAL_RCC_ClockConfig+0x244>)
 8007284:	699b      	ldr	r3, [r3, #24]
 8007286:	f023 020f 	bic.w	r2, r3, #15
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	490e      	ldr	r1, [pc, #56]	@ (80072c8 <HAL_RCC_ClockConfig+0x244>)
 8007290:	4313      	orrs	r3, r2
 8007292:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007294:	4b0b      	ldr	r3, [pc, #44]	@ (80072c4 <HAL_RCC_ClockConfig+0x240>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f003 030f 	and.w	r3, r3, #15
 800729c:	683a      	ldr	r2, [r7, #0]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d214      	bcs.n	80072cc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072a2:	4b08      	ldr	r3, [pc, #32]	@ (80072c4 <HAL_RCC_ClockConfig+0x240>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f023 020f 	bic.w	r2, r3, #15
 80072aa:	4906      	ldr	r1, [pc, #24]	@ (80072c4 <HAL_RCC_ClockConfig+0x240>)
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072b2:	4b04      	ldr	r3, [pc, #16]	@ (80072c4 <HAL_RCC_ClockConfig+0x240>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f003 030f 	and.w	r3, r3, #15
 80072ba:	683a      	ldr	r2, [r7, #0]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d005      	beq.n	80072cc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	e086      	b.n	80073d2 <HAL_RCC_ClockConfig+0x34e>
 80072c4:	52002000 	.word	0x52002000
 80072c8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f003 0304 	and.w	r3, r3, #4
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d010      	beq.n	80072fa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	691a      	ldr	r2, [r3, #16]
 80072dc:	4b3f      	ldr	r3, [pc, #252]	@ (80073dc <HAL_RCC_ClockConfig+0x358>)
 80072de:	699b      	ldr	r3, [r3, #24]
 80072e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d208      	bcs.n	80072fa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80072e8:	4b3c      	ldr	r3, [pc, #240]	@ (80073dc <HAL_RCC_ClockConfig+0x358>)
 80072ea:	699b      	ldr	r3, [r3, #24]
 80072ec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	691b      	ldr	r3, [r3, #16]
 80072f4:	4939      	ldr	r1, [pc, #228]	@ (80073dc <HAL_RCC_ClockConfig+0x358>)
 80072f6:	4313      	orrs	r3, r2
 80072f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f003 0308 	and.w	r3, r3, #8
 8007302:	2b00      	cmp	r3, #0
 8007304:	d010      	beq.n	8007328 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	695a      	ldr	r2, [r3, #20]
 800730a:	4b34      	ldr	r3, [pc, #208]	@ (80073dc <HAL_RCC_ClockConfig+0x358>)
 800730c:	69db      	ldr	r3, [r3, #28]
 800730e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007312:	429a      	cmp	r2, r3
 8007314:	d208      	bcs.n	8007328 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007316:	4b31      	ldr	r3, [pc, #196]	@ (80073dc <HAL_RCC_ClockConfig+0x358>)
 8007318:	69db      	ldr	r3, [r3, #28]
 800731a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	695b      	ldr	r3, [r3, #20]
 8007322:	492e      	ldr	r1, [pc, #184]	@ (80073dc <HAL_RCC_ClockConfig+0x358>)
 8007324:	4313      	orrs	r3, r2
 8007326:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 0310 	and.w	r3, r3, #16
 8007330:	2b00      	cmp	r3, #0
 8007332:	d010      	beq.n	8007356 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	699a      	ldr	r2, [r3, #24]
 8007338:	4b28      	ldr	r3, [pc, #160]	@ (80073dc <HAL_RCC_ClockConfig+0x358>)
 800733a:	69db      	ldr	r3, [r3, #28]
 800733c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007340:	429a      	cmp	r2, r3
 8007342:	d208      	bcs.n	8007356 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007344:	4b25      	ldr	r3, [pc, #148]	@ (80073dc <HAL_RCC_ClockConfig+0x358>)
 8007346:	69db      	ldr	r3, [r3, #28]
 8007348:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	699b      	ldr	r3, [r3, #24]
 8007350:	4922      	ldr	r1, [pc, #136]	@ (80073dc <HAL_RCC_ClockConfig+0x358>)
 8007352:	4313      	orrs	r3, r2
 8007354:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f003 0320 	and.w	r3, r3, #32
 800735e:	2b00      	cmp	r3, #0
 8007360:	d010      	beq.n	8007384 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	69da      	ldr	r2, [r3, #28]
 8007366:	4b1d      	ldr	r3, [pc, #116]	@ (80073dc <HAL_RCC_ClockConfig+0x358>)
 8007368:	6a1b      	ldr	r3, [r3, #32]
 800736a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800736e:	429a      	cmp	r2, r3
 8007370:	d208      	bcs.n	8007384 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007372:	4b1a      	ldr	r3, [pc, #104]	@ (80073dc <HAL_RCC_ClockConfig+0x358>)
 8007374:	6a1b      	ldr	r3, [r3, #32]
 8007376:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	69db      	ldr	r3, [r3, #28]
 800737e:	4917      	ldr	r1, [pc, #92]	@ (80073dc <HAL_RCC_ClockConfig+0x358>)
 8007380:	4313      	orrs	r3, r2
 8007382:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007384:	f000 f89e 	bl	80074c4 <HAL_RCC_GetSysClockFreq>
 8007388:	4602      	mov	r2, r0
 800738a:	4b14      	ldr	r3, [pc, #80]	@ (80073dc <HAL_RCC_ClockConfig+0x358>)
 800738c:	699b      	ldr	r3, [r3, #24]
 800738e:	0a1b      	lsrs	r3, r3, #8
 8007390:	f003 030f 	and.w	r3, r3, #15
 8007394:	4912      	ldr	r1, [pc, #72]	@ (80073e0 <HAL_RCC_ClockConfig+0x35c>)
 8007396:	5ccb      	ldrb	r3, [r1, r3]
 8007398:	f003 031f 	and.w	r3, r3, #31
 800739c:	fa22 f303 	lsr.w	r3, r2, r3
 80073a0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80073a2:	4b0e      	ldr	r3, [pc, #56]	@ (80073dc <HAL_RCC_ClockConfig+0x358>)
 80073a4:	699b      	ldr	r3, [r3, #24]
 80073a6:	f003 030f 	and.w	r3, r3, #15
 80073aa:	4a0d      	ldr	r2, [pc, #52]	@ (80073e0 <HAL_RCC_ClockConfig+0x35c>)
 80073ac:	5cd3      	ldrb	r3, [r2, r3]
 80073ae:	f003 031f 	and.w	r3, r3, #31
 80073b2:	693a      	ldr	r2, [r7, #16]
 80073b4:	fa22 f303 	lsr.w	r3, r2, r3
 80073b8:	4a0a      	ldr	r2, [pc, #40]	@ (80073e4 <HAL_RCC_ClockConfig+0x360>)
 80073ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80073bc:	4a0a      	ldr	r2, [pc, #40]	@ (80073e8 <HAL_RCC_ClockConfig+0x364>)
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80073c2:	4b0a      	ldr	r3, [pc, #40]	@ (80073ec <HAL_RCC_ClockConfig+0x368>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7fa faa8 	bl	800191c <HAL_InitTick>
 80073cc:	4603      	mov	r3, r0
 80073ce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80073d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3718      	adds	r7, #24
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	58024400 	.word	0x58024400
 80073e0:	0800b1f4 	.word	0x0800b1f4
 80073e4:	2400000c 	.word	0x2400000c
 80073e8:	24000008 	.word	0x24000008
 80073ec:	24000010 	.word	0x24000010

080073f0 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b08c      	sub	sp, #48	@ 0x30
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d12a      	bne.n	8007458 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8007402:	4b2d      	ldr	r3, [pc, #180]	@ (80074b8 <HAL_RCC_MCOConfig+0xc8>)
 8007404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007408:	4a2b      	ldr	r2, [pc, #172]	@ (80074b8 <HAL_RCC_MCOConfig+0xc8>)
 800740a:	f043 0301 	orr.w	r3, r3, #1
 800740e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007412:	4b29      	ldr	r3, [pc, #164]	@ (80074b8 <HAL_RCC_MCOConfig+0xc8>)
 8007414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007418:	f003 0301 	and.w	r3, r3, #1
 800741c:	61bb      	str	r3, [r7, #24]
 800741e:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8007420:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007426:	2302      	movs	r3, #2
 8007428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800742a:	2303      	movs	r3, #3
 800742c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800742e:	2300      	movs	r3, #0
 8007430:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007432:	2300      	movs	r3, #0
 8007434:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8007436:	f107 031c 	add.w	r3, r7, #28
 800743a:	4619      	mov	r1, r3
 800743c:	481f      	ldr	r0, [pc, #124]	@ (80074bc <HAL_RCC_MCOConfig+0xcc>)
 800743e:	f7fe f9db 	bl	80057f8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8007442:	4b1d      	ldr	r3, [pc, #116]	@ (80074b8 <HAL_RCC_MCOConfig+0xc8>)
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 800744a:	68b9      	ldr	r1, [r7, #8]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	430b      	orrs	r3, r1
 8007450:	4919      	ldr	r1, [pc, #100]	@ (80074b8 <HAL_RCC_MCOConfig+0xc8>)
 8007452:	4313      	orrs	r3, r2
 8007454:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8007456:	e02a      	b.n	80074ae <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8007458:	4b17      	ldr	r3, [pc, #92]	@ (80074b8 <HAL_RCC_MCOConfig+0xc8>)
 800745a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800745e:	4a16      	ldr	r2, [pc, #88]	@ (80074b8 <HAL_RCC_MCOConfig+0xc8>)
 8007460:	f043 0304 	orr.w	r3, r3, #4
 8007464:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007468:	4b13      	ldr	r3, [pc, #76]	@ (80074b8 <HAL_RCC_MCOConfig+0xc8>)
 800746a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800746e:	f003 0304 	and.w	r3, r3, #4
 8007472:	617b      	str	r3, [r7, #20]
 8007474:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8007476:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800747a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800747c:	2302      	movs	r3, #2
 800747e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007480:	2303      	movs	r3, #3
 8007482:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007484:	2300      	movs	r3, #0
 8007486:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007488:	2300      	movs	r3, #0
 800748a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800748c:	f107 031c 	add.w	r3, r7, #28
 8007490:	4619      	mov	r1, r3
 8007492:	480b      	ldr	r0, [pc, #44]	@ (80074c0 <HAL_RCC_MCOConfig+0xd0>)
 8007494:	f7fe f9b0 	bl	80057f8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8007498:	4b07      	ldr	r3, [pc, #28]	@ (80074b8 <HAL_RCC_MCOConfig+0xc8>)
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	01d9      	lsls	r1, r3, #7
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	430b      	orrs	r3, r1
 80074a8:	4903      	ldr	r1, [pc, #12]	@ (80074b8 <HAL_RCC_MCOConfig+0xc8>)
 80074aa:	4313      	orrs	r3, r2
 80074ac:	610b      	str	r3, [r1, #16]
}
 80074ae:	bf00      	nop
 80074b0:	3730      	adds	r7, #48	@ 0x30
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	58024400 	.word	0x58024400
 80074bc:	58020000 	.word	0x58020000
 80074c0:	58020800 	.word	0x58020800

080074c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b089      	sub	sp, #36	@ 0x24
 80074c8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80074ca:	4bb3      	ldr	r3, [pc, #716]	@ (8007798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80074d2:	2b18      	cmp	r3, #24
 80074d4:	f200 8155 	bhi.w	8007782 <HAL_RCC_GetSysClockFreq+0x2be>
 80074d8:	a201      	add	r2, pc, #4	@ (adr r2, 80074e0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80074da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074de:	bf00      	nop
 80074e0:	08007545 	.word	0x08007545
 80074e4:	08007783 	.word	0x08007783
 80074e8:	08007783 	.word	0x08007783
 80074ec:	08007783 	.word	0x08007783
 80074f0:	08007783 	.word	0x08007783
 80074f4:	08007783 	.word	0x08007783
 80074f8:	08007783 	.word	0x08007783
 80074fc:	08007783 	.word	0x08007783
 8007500:	0800756b 	.word	0x0800756b
 8007504:	08007783 	.word	0x08007783
 8007508:	08007783 	.word	0x08007783
 800750c:	08007783 	.word	0x08007783
 8007510:	08007783 	.word	0x08007783
 8007514:	08007783 	.word	0x08007783
 8007518:	08007783 	.word	0x08007783
 800751c:	08007783 	.word	0x08007783
 8007520:	08007571 	.word	0x08007571
 8007524:	08007783 	.word	0x08007783
 8007528:	08007783 	.word	0x08007783
 800752c:	08007783 	.word	0x08007783
 8007530:	08007783 	.word	0x08007783
 8007534:	08007783 	.word	0x08007783
 8007538:	08007783 	.word	0x08007783
 800753c:	08007783 	.word	0x08007783
 8007540:	08007577 	.word	0x08007577
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007544:	4b94      	ldr	r3, [pc, #592]	@ (8007798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f003 0320 	and.w	r3, r3, #32
 800754c:	2b00      	cmp	r3, #0
 800754e:	d009      	beq.n	8007564 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007550:	4b91      	ldr	r3, [pc, #580]	@ (8007798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	08db      	lsrs	r3, r3, #3
 8007556:	f003 0303 	and.w	r3, r3, #3
 800755a:	4a90      	ldr	r2, [pc, #576]	@ (800779c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800755c:	fa22 f303 	lsr.w	r3, r2, r3
 8007560:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007562:	e111      	b.n	8007788 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007564:	4b8d      	ldr	r3, [pc, #564]	@ (800779c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007566:	61bb      	str	r3, [r7, #24]
      break;
 8007568:	e10e      	b.n	8007788 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800756a:	4b8d      	ldr	r3, [pc, #564]	@ (80077a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800756c:	61bb      	str	r3, [r7, #24]
      break;
 800756e:	e10b      	b.n	8007788 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007570:	4b8c      	ldr	r3, [pc, #560]	@ (80077a4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007572:	61bb      	str	r3, [r7, #24]
      break;
 8007574:	e108      	b.n	8007788 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007576:	4b88      	ldr	r3, [pc, #544]	@ (8007798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800757a:	f003 0303 	and.w	r3, r3, #3
 800757e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007580:	4b85      	ldr	r3, [pc, #532]	@ (8007798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007584:	091b      	lsrs	r3, r3, #4
 8007586:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800758a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800758c:	4b82      	ldr	r3, [pc, #520]	@ (8007798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800758e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007590:	f003 0301 	and.w	r3, r3, #1
 8007594:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007596:	4b80      	ldr	r3, [pc, #512]	@ (8007798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800759a:	08db      	lsrs	r3, r3, #3
 800759c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80075a0:	68fa      	ldr	r2, [r7, #12]
 80075a2:	fb02 f303 	mul.w	r3, r2, r3
 80075a6:	ee07 3a90 	vmov	s15, r3
 80075aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ae:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	f000 80e1 	beq.w	800777c <HAL_RCC_GetSysClockFreq+0x2b8>
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	2b02      	cmp	r3, #2
 80075be:	f000 8083 	beq.w	80076c8 <HAL_RCC_GetSysClockFreq+0x204>
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	f200 80a1 	bhi.w	800770c <HAL_RCC_GetSysClockFreq+0x248>
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d003      	beq.n	80075d8 <HAL_RCC_GetSysClockFreq+0x114>
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d056      	beq.n	8007684 <HAL_RCC_GetSysClockFreq+0x1c0>
 80075d6:	e099      	b.n	800770c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075d8:	4b6f      	ldr	r3, [pc, #444]	@ (8007798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 0320 	and.w	r3, r3, #32
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d02d      	beq.n	8007640 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80075e4:	4b6c      	ldr	r3, [pc, #432]	@ (8007798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	08db      	lsrs	r3, r3, #3
 80075ea:	f003 0303 	and.w	r3, r3, #3
 80075ee:	4a6b      	ldr	r2, [pc, #428]	@ (800779c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80075f0:	fa22 f303 	lsr.w	r3, r2, r3
 80075f4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	ee07 3a90 	vmov	s15, r3
 80075fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	ee07 3a90 	vmov	s15, r3
 8007606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800760a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800760e:	4b62      	ldr	r3, [pc, #392]	@ (8007798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007616:	ee07 3a90 	vmov	s15, r3
 800761a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800761e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007622:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80077a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800762a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800762e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800763a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800763e:	e087      	b.n	8007750 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	ee07 3a90 	vmov	s15, r3
 8007646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800764a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80077ac <HAL_RCC_GetSysClockFreq+0x2e8>
 800764e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007652:	4b51      	ldr	r3, [pc, #324]	@ (8007798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800765a:	ee07 3a90 	vmov	s15, r3
 800765e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007662:	ed97 6a02 	vldr	s12, [r7, #8]
 8007666:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80077a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800766a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800766e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007672:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800767a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800767e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007682:	e065      	b.n	8007750 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	ee07 3a90 	vmov	s15, r3
 800768a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800768e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80077b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007696:	4b40      	ldr	r3, [pc, #256]	@ (8007798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800769a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800769e:	ee07 3a90 	vmov	s15, r3
 80076a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80076aa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80077a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80076ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80076c6:	e043      	b.n	8007750 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	ee07 3a90 	vmov	s15, r3
 80076ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076d2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80077b4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80076d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076da:	4b2f      	ldr	r3, [pc, #188]	@ (8007798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076e2:	ee07 3a90 	vmov	s15, r3
 80076e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80076ee:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80077a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80076f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007706:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800770a:	e021      	b.n	8007750 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	ee07 3a90 	vmov	s15, r3
 8007712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007716:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80077b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800771a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800771e:	4b1e      	ldr	r3, [pc, #120]	@ (8007798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007726:	ee07 3a90 	vmov	s15, r3
 800772a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800772e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007732:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80077a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800773a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800773e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800774a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800774e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007750:	4b11      	ldr	r3, [pc, #68]	@ (8007798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007754:	0a5b      	lsrs	r3, r3, #9
 8007756:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800775a:	3301      	adds	r3, #1
 800775c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	ee07 3a90 	vmov	s15, r3
 8007764:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007768:	edd7 6a07 	vldr	s13, [r7, #28]
 800776c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007770:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007774:	ee17 3a90 	vmov	r3, s15
 8007778:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800777a:	e005      	b.n	8007788 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800777c:	2300      	movs	r3, #0
 800777e:	61bb      	str	r3, [r7, #24]
      break;
 8007780:	e002      	b.n	8007788 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007782:	4b07      	ldr	r3, [pc, #28]	@ (80077a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007784:	61bb      	str	r3, [r7, #24]
      break;
 8007786:	bf00      	nop
  }

  return sysclockfreq;
 8007788:	69bb      	ldr	r3, [r7, #24]
}
 800778a:	4618      	mov	r0, r3
 800778c:	3724      	adds	r7, #36	@ 0x24
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr
 8007796:	bf00      	nop
 8007798:	58024400 	.word	0x58024400
 800779c:	03d09000 	.word	0x03d09000
 80077a0:	003d0900 	.word	0x003d0900
 80077a4:	017d7840 	.word	0x017d7840
 80077a8:	46000000 	.word	0x46000000
 80077ac:	4c742400 	.word	0x4c742400
 80077b0:	4a742400 	.word	0x4a742400
 80077b4:	4bbebc20 	.word	0x4bbebc20

080077b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80077be:	f7ff fe81 	bl	80074c4 <HAL_RCC_GetSysClockFreq>
 80077c2:	4602      	mov	r2, r0
 80077c4:	4b10      	ldr	r3, [pc, #64]	@ (8007808 <HAL_RCC_GetHCLKFreq+0x50>)
 80077c6:	699b      	ldr	r3, [r3, #24]
 80077c8:	0a1b      	lsrs	r3, r3, #8
 80077ca:	f003 030f 	and.w	r3, r3, #15
 80077ce:	490f      	ldr	r1, [pc, #60]	@ (800780c <HAL_RCC_GetHCLKFreq+0x54>)
 80077d0:	5ccb      	ldrb	r3, [r1, r3]
 80077d2:	f003 031f 	and.w	r3, r3, #31
 80077d6:	fa22 f303 	lsr.w	r3, r2, r3
 80077da:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80077dc:	4b0a      	ldr	r3, [pc, #40]	@ (8007808 <HAL_RCC_GetHCLKFreq+0x50>)
 80077de:	699b      	ldr	r3, [r3, #24]
 80077e0:	f003 030f 	and.w	r3, r3, #15
 80077e4:	4a09      	ldr	r2, [pc, #36]	@ (800780c <HAL_RCC_GetHCLKFreq+0x54>)
 80077e6:	5cd3      	ldrb	r3, [r2, r3]
 80077e8:	f003 031f 	and.w	r3, r3, #31
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	fa22 f303 	lsr.w	r3, r2, r3
 80077f2:	4a07      	ldr	r2, [pc, #28]	@ (8007810 <HAL_RCC_GetHCLKFreq+0x58>)
 80077f4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80077f6:	4a07      	ldr	r2, [pc, #28]	@ (8007814 <HAL_RCC_GetHCLKFreq+0x5c>)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80077fc:	4b04      	ldr	r3, [pc, #16]	@ (8007810 <HAL_RCC_GetHCLKFreq+0x58>)
 80077fe:	681b      	ldr	r3, [r3, #0]
}
 8007800:	4618      	mov	r0, r3
 8007802:	3708      	adds	r7, #8
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}
 8007808:	58024400 	.word	0x58024400
 800780c:	0800b1f4 	.word	0x0800b1f4
 8007810:	2400000c 	.word	0x2400000c
 8007814:	24000008 	.word	0x24000008

08007818 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800781c:	f7ff ffcc 	bl	80077b8 <HAL_RCC_GetHCLKFreq>
 8007820:	4602      	mov	r2, r0
 8007822:	4b06      	ldr	r3, [pc, #24]	@ (800783c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007824:	69db      	ldr	r3, [r3, #28]
 8007826:	091b      	lsrs	r3, r3, #4
 8007828:	f003 0307 	and.w	r3, r3, #7
 800782c:	4904      	ldr	r1, [pc, #16]	@ (8007840 <HAL_RCC_GetPCLK1Freq+0x28>)
 800782e:	5ccb      	ldrb	r3, [r1, r3]
 8007830:	f003 031f 	and.w	r3, r3, #31
 8007834:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007838:	4618      	mov	r0, r3
 800783a:	bd80      	pop	{r7, pc}
 800783c:	58024400 	.word	0x58024400
 8007840:	0800b1f4 	.word	0x0800b1f4

08007844 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007848:	f7ff ffb6 	bl	80077b8 <HAL_RCC_GetHCLKFreq>
 800784c:	4602      	mov	r2, r0
 800784e:	4b06      	ldr	r3, [pc, #24]	@ (8007868 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007850:	69db      	ldr	r3, [r3, #28]
 8007852:	0a1b      	lsrs	r3, r3, #8
 8007854:	f003 0307 	and.w	r3, r3, #7
 8007858:	4904      	ldr	r1, [pc, #16]	@ (800786c <HAL_RCC_GetPCLK2Freq+0x28>)
 800785a:	5ccb      	ldrb	r3, [r1, r3]
 800785c:	f003 031f 	and.w	r3, r3, #31
 8007860:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007864:	4618      	mov	r0, r3
 8007866:	bd80      	pop	{r7, pc}
 8007868:	58024400 	.word	0x58024400
 800786c:	0800b1f4 	.word	0x0800b1f4

08007870 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007870:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007874:	b0ca      	sub	sp, #296	@ 0x128
 8007876:	af00      	add	r7, sp, #0
 8007878:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800787c:	2300      	movs	r3, #0
 800787e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007882:	2300      	movs	r3, #0
 8007884:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800788c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007890:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007894:	2500      	movs	r5, #0
 8007896:	ea54 0305 	orrs.w	r3, r4, r5
 800789a:	d049      	beq.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800789c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80078a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80078a6:	d02f      	beq.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80078a8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80078ac:	d828      	bhi.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80078ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80078b2:	d01a      	beq.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80078b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80078b8:	d822      	bhi.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d003      	beq.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80078be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078c2:	d007      	beq.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80078c4:	e01c      	b.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078c6:	4bb8      	ldr	r3, [pc, #736]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078ca:	4ab7      	ldr	r2, [pc, #732]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80078d2:	e01a      	b.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80078d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078d8:	3308      	adds	r3, #8
 80078da:	2102      	movs	r1, #2
 80078dc:	4618      	mov	r0, r3
 80078de:	f001 fc8f 	bl	8009200 <RCCEx_PLL2_Config>
 80078e2:	4603      	mov	r3, r0
 80078e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80078e8:	e00f      	b.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80078ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078ee:	3328      	adds	r3, #40	@ 0x28
 80078f0:	2102      	movs	r1, #2
 80078f2:	4618      	mov	r0, r3
 80078f4:	f001 fd36 	bl	8009364 <RCCEx_PLL3_Config>
 80078f8:	4603      	mov	r3, r0
 80078fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80078fe:	e004      	b.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007900:	2301      	movs	r3, #1
 8007902:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007906:	e000      	b.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007908:	bf00      	nop
    }

    if (ret == HAL_OK)
 800790a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800790e:	2b00      	cmp	r3, #0
 8007910:	d10a      	bne.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007912:	4ba5      	ldr	r3, [pc, #660]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007914:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007916:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800791a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800791e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007920:	4aa1      	ldr	r2, [pc, #644]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007922:	430b      	orrs	r3, r1
 8007924:	6513      	str	r3, [r2, #80]	@ 0x50
 8007926:	e003      	b.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007928:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800792c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007938:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800793c:	f04f 0900 	mov.w	r9, #0
 8007940:	ea58 0309 	orrs.w	r3, r8, r9
 8007944:	d047      	beq.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800794a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800794c:	2b04      	cmp	r3, #4
 800794e:	d82a      	bhi.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007950:	a201      	add	r2, pc, #4	@ (adr r2, 8007958 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007956:	bf00      	nop
 8007958:	0800796d 	.word	0x0800796d
 800795c:	0800797b 	.word	0x0800797b
 8007960:	08007991 	.word	0x08007991
 8007964:	080079af 	.word	0x080079af
 8007968:	080079af 	.word	0x080079af
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800796c:	4b8e      	ldr	r3, [pc, #568]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800796e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007970:	4a8d      	ldr	r2, [pc, #564]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007972:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007976:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007978:	e01a      	b.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800797a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800797e:	3308      	adds	r3, #8
 8007980:	2100      	movs	r1, #0
 8007982:	4618      	mov	r0, r3
 8007984:	f001 fc3c 	bl	8009200 <RCCEx_PLL2_Config>
 8007988:	4603      	mov	r3, r0
 800798a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800798e:	e00f      	b.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007994:	3328      	adds	r3, #40	@ 0x28
 8007996:	2100      	movs	r1, #0
 8007998:	4618      	mov	r0, r3
 800799a:	f001 fce3 	bl	8009364 <RCCEx_PLL3_Config>
 800799e:	4603      	mov	r3, r0
 80079a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80079a4:	e004      	b.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079a6:	2301      	movs	r3, #1
 80079a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80079ac:	e000      	b.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80079ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d10a      	bne.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80079b8:	4b7b      	ldr	r3, [pc, #492]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079bc:	f023 0107 	bic.w	r1, r3, #7
 80079c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079c6:	4a78      	ldr	r2, [pc, #480]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079c8:	430b      	orrs	r3, r1
 80079ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80079cc:	e003      	b.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80079d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079de:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80079e2:	f04f 0b00 	mov.w	fp, #0
 80079e6:	ea5a 030b 	orrs.w	r3, sl, fp
 80079ea:	d04c      	beq.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80079ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079f6:	d030      	beq.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80079f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079fc:	d829      	bhi.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80079fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8007a00:	d02d      	beq.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007a02:	2bc0      	cmp	r3, #192	@ 0xc0
 8007a04:	d825      	bhi.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007a06:	2b80      	cmp	r3, #128	@ 0x80
 8007a08:	d018      	beq.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007a0a:	2b80      	cmp	r3, #128	@ 0x80
 8007a0c:	d821      	bhi.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d002      	beq.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007a12:	2b40      	cmp	r3, #64	@ 0x40
 8007a14:	d007      	beq.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007a16:	e01c      	b.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a18:	4b63      	ldr	r3, [pc, #396]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a1c:	4a62      	ldr	r2, [pc, #392]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007a24:	e01c      	b.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a2a:	3308      	adds	r3, #8
 8007a2c:	2100      	movs	r1, #0
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f001 fbe6 	bl	8009200 <RCCEx_PLL2_Config>
 8007a34:	4603      	mov	r3, r0
 8007a36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007a3a:	e011      	b.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a40:	3328      	adds	r3, #40	@ 0x28
 8007a42:	2100      	movs	r1, #0
 8007a44:	4618      	mov	r0, r3
 8007a46:	f001 fc8d 	bl	8009364 <RCCEx_PLL3_Config>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007a50:	e006      	b.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a52:	2301      	movs	r3, #1
 8007a54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a58:	e002      	b.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007a5a:	bf00      	nop
 8007a5c:	e000      	b.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007a5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d10a      	bne.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007a68:	4b4f      	ldr	r3, [pc, #316]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a6c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a76:	4a4c      	ldr	r2, [pc, #304]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a78:	430b      	orrs	r3, r1
 8007a7a:	6513      	str	r3, [r2, #80]	@ 0x50
 8007a7c:	e003      	b.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007a92:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007a96:	2300      	movs	r3, #0
 8007a98:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007a9c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	d053      	beq.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aaa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007aae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007ab2:	d035      	beq.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007ab4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007ab8:	d82e      	bhi.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007aba:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007abe:	d031      	beq.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007ac0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007ac4:	d828      	bhi.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007ac6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007aca:	d01a      	beq.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007acc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ad0:	d822      	bhi.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d003      	beq.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007ad6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ada:	d007      	beq.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007adc:	e01c      	b.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ade:	4b32      	ldr	r3, [pc, #200]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ae2:	4a31      	ldr	r2, [pc, #196]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ae4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ae8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007aea:	e01c      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007af0:	3308      	adds	r3, #8
 8007af2:	2100      	movs	r1, #0
 8007af4:	4618      	mov	r0, r3
 8007af6:	f001 fb83 	bl	8009200 <RCCEx_PLL2_Config>
 8007afa:	4603      	mov	r3, r0
 8007afc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007b00:	e011      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b06:	3328      	adds	r3, #40	@ 0x28
 8007b08:	2100      	movs	r1, #0
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f001 fc2a 	bl	8009364 <RCCEx_PLL3_Config>
 8007b10:	4603      	mov	r3, r0
 8007b12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b16:	e006      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b1e:	e002      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007b20:	bf00      	nop
 8007b22:	e000      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007b24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d10b      	bne.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b32:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b3a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007b3e:	4a1a      	ldr	r2, [pc, #104]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b40:	430b      	orrs	r3, r1
 8007b42:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b44:	e003      	b.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b56:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007b5a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007b5e:	2300      	movs	r3, #0
 8007b60:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007b64:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007b68:	460b      	mov	r3, r1
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	d056      	beq.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b72:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007b76:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007b7a:	d038      	beq.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007b7c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007b80:	d831      	bhi.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007b82:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007b86:	d034      	beq.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007b88:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007b8c:	d82b      	bhi.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007b8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b92:	d01d      	beq.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007b94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b98:	d825      	bhi.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d006      	beq.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007b9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007ba2:	d00a      	beq.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007ba4:	e01f      	b.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007ba6:	bf00      	nop
 8007ba8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bac:	4ba2      	ldr	r3, [pc, #648]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bb0:	4aa1      	ldr	r2, [pc, #644]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007bb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007bb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007bb8:	e01c      	b.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bbe:	3308      	adds	r3, #8
 8007bc0:	2100      	movs	r1, #0
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f001 fb1c 	bl	8009200 <RCCEx_PLL2_Config>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007bce:	e011      	b.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bd4:	3328      	adds	r3, #40	@ 0x28
 8007bd6:	2100      	movs	r1, #0
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f001 fbc3 	bl	8009364 <RCCEx_PLL3_Config>
 8007bde:	4603      	mov	r3, r0
 8007be0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007be4:	e006      	b.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007bec:	e002      	b.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007bee:	bf00      	nop
 8007bf0:	e000      	b.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007bf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bf4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d10b      	bne.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007bfc:	4b8e      	ldr	r3, [pc, #568]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c00:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c08:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007c0c:	4a8a      	ldr	r2, [pc, #552]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c0e:	430b      	orrs	r3, r1
 8007c10:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c12:	e003      	b.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c24:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007c28:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007c32:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007c36:	460b      	mov	r3, r1
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	d03a      	beq.n	8007cb2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c42:	2b30      	cmp	r3, #48	@ 0x30
 8007c44:	d01f      	beq.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007c46:	2b30      	cmp	r3, #48	@ 0x30
 8007c48:	d819      	bhi.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007c4a:	2b20      	cmp	r3, #32
 8007c4c:	d00c      	beq.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007c4e:	2b20      	cmp	r3, #32
 8007c50:	d815      	bhi.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d019      	beq.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007c56:	2b10      	cmp	r3, #16
 8007c58:	d111      	bne.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c5a:	4b77      	ldr	r3, [pc, #476]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c5e:	4a76      	ldr	r2, [pc, #472]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007c66:	e011      	b.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c6c:	3308      	adds	r3, #8
 8007c6e:	2102      	movs	r1, #2
 8007c70:	4618      	mov	r0, r3
 8007c72:	f001 fac5 	bl	8009200 <RCCEx_PLL2_Config>
 8007c76:	4603      	mov	r3, r0
 8007c78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007c7c:	e006      	b.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c84:	e002      	b.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007c86:	bf00      	nop
 8007c88:	e000      	b.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007c8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d10a      	bne.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007c94:	4b68      	ldr	r3, [pc, #416]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c98:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ca2:	4a65      	ldr	r2, [pc, #404]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ca4:	430b      	orrs	r3, r1
 8007ca6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007ca8:	e003      	b.n	8007cb2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007caa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cba:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007cbe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007cc8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007ccc:	460b      	mov	r3, r1
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	d051      	beq.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007cdc:	d035      	beq.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007cde:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ce2:	d82e      	bhi.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007ce4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007ce8:	d031      	beq.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007cea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007cee:	d828      	bhi.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007cf0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007cf4:	d01a      	beq.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007cf6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007cfa:	d822      	bhi.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d003      	beq.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007d00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d04:	d007      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007d06:	e01c      	b.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d08:	4b4b      	ldr	r3, [pc, #300]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d0c:	4a4a      	ldr	r2, [pc, #296]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007d14:	e01c      	b.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d1a:	3308      	adds	r3, #8
 8007d1c:	2100      	movs	r1, #0
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f001 fa6e 	bl	8009200 <RCCEx_PLL2_Config>
 8007d24:	4603      	mov	r3, r0
 8007d26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007d2a:	e011      	b.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d30:	3328      	adds	r3, #40	@ 0x28
 8007d32:	2100      	movs	r1, #0
 8007d34:	4618      	mov	r0, r3
 8007d36:	f001 fb15 	bl	8009364 <RCCEx_PLL3_Config>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007d40:	e006      	b.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d48:	e002      	b.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007d4a:	bf00      	nop
 8007d4c:	e000      	b.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007d4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d10a      	bne.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007d58:	4b37      	ldr	r3, [pc, #220]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d5c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d66:	4a34      	ldr	r2, [pc, #208]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d68:	430b      	orrs	r3, r1
 8007d6a:	6513      	str	r3, [r2, #80]	@ 0x50
 8007d6c:	e003      	b.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d7e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007d82:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007d86:	2300      	movs	r3, #0
 8007d88:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007d8c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007d90:	460b      	mov	r3, r1
 8007d92:	4313      	orrs	r3, r2
 8007d94:	d056      	beq.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007da0:	d033      	beq.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007da2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007da6:	d82c      	bhi.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007da8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007dac:	d02f      	beq.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007dae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007db2:	d826      	bhi.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007db4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007db8:	d02b      	beq.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007dba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007dbe:	d820      	bhi.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007dc0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007dc4:	d012      	beq.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007dc6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007dca:	d81a      	bhi.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d022      	beq.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007dd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007dd4:	d115      	bne.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dda:	3308      	adds	r3, #8
 8007ddc:	2101      	movs	r1, #1
 8007dde:	4618      	mov	r0, r3
 8007de0:	f001 fa0e 	bl	8009200 <RCCEx_PLL2_Config>
 8007de4:	4603      	mov	r3, r0
 8007de6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007dea:	e015      	b.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007df0:	3328      	adds	r3, #40	@ 0x28
 8007df2:	2101      	movs	r1, #1
 8007df4:	4618      	mov	r0, r3
 8007df6:	f001 fab5 	bl	8009364 <RCCEx_PLL3_Config>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007e00:	e00a      	b.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e08:	e006      	b.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007e0a:	bf00      	nop
 8007e0c:	e004      	b.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007e0e:	bf00      	nop
 8007e10:	e002      	b.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007e12:	bf00      	nop
 8007e14:	e000      	b.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007e16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d10d      	bne.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007e20:	4b05      	ldr	r3, [pc, #20]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e24:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e2e:	4a02      	ldr	r2, [pc, #8]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e30:	430b      	orrs	r3, r1
 8007e32:	6513      	str	r3, [r2, #80]	@ 0x50
 8007e34:	e006      	b.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007e36:	bf00      	nop
 8007e38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007e50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007e54:	2300      	movs	r3, #0
 8007e56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007e5a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007e5e:	460b      	mov	r3, r1
 8007e60:	4313      	orrs	r3, r2
 8007e62:	d055      	beq.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007e6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e70:	d033      	beq.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007e72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e76:	d82c      	bhi.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007e78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e7c:	d02f      	beq.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e82:	d826      	bhi.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007e84:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007e88:	d02b      	beq.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007e8a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007e8e:	d820      	bhi.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007e90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e94:	d012      	beq.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007e96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e9a:	d81a      	bhi.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d022      	beq.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007ea0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ea4:	d115      	bne.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eaa:	3308      	adds	r3, #8
 8007eac:	2101      	movs	r1, #1
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f001 f9a6 	bl	8009200 <RCCEx_PLL2_Config>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007eba:	e015      	b.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ec0:	3328      	adds	r3, #40	@ 0x28
 8007ec2:	2101      	movs	r1, #1
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f001 fa4d 	bl	8009364 <RCCEx_PLL3_Config>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007ed0:	e00a      	b.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ed8:	e006      	b.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007eda:	bf00      	nop
 8007edc:	e004      	b.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007ede:	bf00      	nop
 8007ee0:	e002      	b.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007ee2:	bf00      	nop
 8007ee4:	e000      	b.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007ee6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ee8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d10b      	bne.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007ef0:	4ba3      	ldr	r3, [pc, #652]	@ (8008180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ef4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007efc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007f00:	4a9f      	ldr	r2, [pc, #636]	@ (8008180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f02:	430b      	orrs	r3, r1
 8007f04:	6593      	str	r3, [r2, #88]	@ 0x58
 8007f06:	e003      	b.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f18:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007f1c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007f20:	2300      	movs	r3, #0
 8007f22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007f26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	d037      	beq.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f3a:	d00e      	beq.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007f3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f40:	d816      	bhi.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d018      	beq.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007f46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f4a:	d111      	bne.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f4c:	4b8c      	ldr	r3, [pc, #560]	@ (8008180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f50:	4a8b      	ldr	r2, [pc, #556]	@ (8008180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007f58:	e00f      	b.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f5e:	3308      	adds	r3, #8
 8007f60:	2101      	movs	r1, #1
 8007f62:	4618      	mov	r0, r3
 8007f64:	f001 f94c 	bl	8009200 <RCCEx_PLL2_Config>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007f6e:	e004      	b.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f76:	e000      	b.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007f78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d10a      	bne.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007f82:	4b7f      	ldr	r3, [pc, #508]	@ (8008180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f86:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f90:	4a7b      	ldr	r2, [pc, #492]	@ (8008180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f92:	430b      	orrs	r3, r1
 8007f94:	6513      	str	r3, [r2, #80]	@ 0x50
 8007f96:	e003      	b.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007fac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007fb6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007fba:	460b      	mov	r3, r1
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	d039      	beq.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fc6:	2b03      	cmp	r3, #3
 8007fc8:	d81c      	bhi.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007fca:	a201      	add	r2, pc, #4	@ (adr r2, 8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd0:	0800800d 	.word	0x0800800d
 8007fd4:	08007fe1 	.word	0x08007fe1
 8007fd8:	08007fef 	.word	0x08007fef
 8007fdc:	0800800d 	.word	0x0800800d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fe0:	4b67      	ldr	r3, [pc, #412]	@ (8008180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fe4:	4a66      	ldr	r2, [pc, #408]	@ (8008180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fe6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007fea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007fec:	e00f      	b.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ff2:	3308      	adds	r3, #8
 8007ff4:	2102      	movs	r1, #2
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f001 f902 	bl	8009200 <RCCEx_PLL2_Config>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008002:	e004      	b.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800800a:	e000      	b.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800800c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800800e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008012:	2b00      	cmp	r3, #0
 8008014:	d10a      	bne.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008016:	4b5a      	ldr	r3, [pc, #360]	@ (8008180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800801a:	f023 0103 	bic.w	r1, r3, #3
 800801e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008022:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008024:	4a56      	ldr	r2, [pc, #344]	@ (8008180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008026:	430b      	orrs	r3, r1
 8008028:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800802a:	e003      	b.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800802c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008030:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008040:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008044:	2300      	movs	r3, #0
 8008046:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800804a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800804e:	460b      	mov	r3, r1
 8008050:	4313      	orrs	r3, r2
 8008052:	f000 809f 	beq.w	8008194 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008056:	4b4b      	ldr	r3, [pc, #300]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a4a      	ldr	r2, [pc, #296]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800805c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008060:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008062:	f7f9 fca5 	bl	80019b0 <HAL_GetTick>
 8008066:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800806a:	e00b      	b.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800806c:	f7f9 fca0 	bl	80019b0 <HAL_GetTick>
 8008070:	4602      	mov	r2, r0
 8008072:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008076:	1ad3      	subs	r3, r2, r3
 8008078:	2b64      	cmp	r3, #100	@ 0x64
 800807a:	d903      	bls.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800807c:	2303      	movs	r3, #3
 800807e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008082:	e005      	b.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008084:	4b3f      	ldr	r3, [pc, #252]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800808c:	2b00      	cmp	r3, #0
 800808e:	d0ed      	beq.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008090:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008094:	2b00      	cmp	r3, #0
 8008096:	d179      	bne.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008098:	4b39      	ldr	r3, [pc, #228]	@ (8008180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800809a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800809c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80080a4:	4053      	eors	r3, r2
 80080a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d015      	beq.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80080ae:	4b34      	ldr	r3, [pc, #208]	@ (8008180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080b6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80080ba:	4b31      	ldr	r3, [pc, #196]	@ (8008180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080be:	4a30      	ldr	r2, [pc, #192]	@ (8008180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80080c4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80080c6:	4b2e      	ldr	r3, [pc, #184]	@ (8008180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080ca:	4a2d      	ldr	r2, [pc, #180]	@ (8008180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80080d0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80080d2:	4a2b      	ldr	r2, [pc, #172]	@ (8008180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80080d8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80080da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80080e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080e6:	d118      	bne.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080e8:	f7f9 fc62 	bl	80019b0 <HAL_GetTick>
 80080ec:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80080f0:	e00d      	b.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080f2:	f7f9 fc5d 	bl	80019b0 <HAL_GetTick>
 80080f6:	4602      	mov	r2, r0
 80080f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80080fc:	1ad2      	subs	r2, r2, r3
 80080fe:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008102:	429a      	cmp	r2, r3
 8008104:	d903      	bls.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8008106:	2303      	movs	r3, #3
 8008108:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800810c:	e005      	b.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800810e:	4b1c      	ldr	r3, [pc, #112]	@ (8008180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008112:	f003 0302 	and.w	r3, r3, #2
 8008116:	2b00      	cmp	r3, #0
 8008118:	d0eb      	beq.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800811a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800811e:	2b00      	cmp	r3, #0
 8008120:	d129      	bne.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008126:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800812a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800812e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008132:	d10e      	bne.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008134:	4b12      	ldr	r3, [pc, #72]	@ (8008180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008136:	691b      	ldr	r3, [r3, #16]
 8008138:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800813c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008140:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008144:	091a      	lsrs	r2, r3, #4
 8008146:	4b10      	ldr	r3, [pc, #64]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008148:	4013      	ands	r3, r2
 800814a:	4a0d      	ldr	r2, [pc, #52]	@ (8008180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800814c:	430b      	orrs	r3, r1
 800814e:	6113      	str	r3, [r2, #16]
 8008150:	e005      	b.n	800815e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008152:	4b0b      	ldr	r3, [pc, #44]	@ (8008180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008154:	691b      	ldr	r3, [r3, #16]
 8008156:	4a0a      	ldr	r2, [pc, #40]	@ (8008180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008158:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800815c:	6113      	str	r3, [r2, #16]
 800815e:	4b08      	ldr	r3, [pc, #32]	@ (8008180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008160:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008166:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800816a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800816e:	4a04      	ldr	r2, [pc, #16]	@ (8008180 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008170:	430b      	orrs	r3, r1
 8008172:	6713      	str	r3, [r2, #112]	@ 0x70
 8008174:	e00e      	b.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008176:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800817a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800817e:	e009      	b.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008180:	58024400 	.word	0x58024400
 8008184:	58024800 	.word	0x58024800
 8008188:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800818c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008190:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800819c:	f002 0301 	and.w	r3, r2, #1
 80081a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80081a4:	2300      	movs	r3, #0
 80081a6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80081aa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80081ae:	460b      	mov	r3, r1
 80081b0:	4313      	orrs	r3, r2
 80081b2:	f000 8089 	beq.w	80082c8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80081b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80081bc:	2b28      	cmp	r3, #40	@ 0x28
 80081be:	d86b      	bhi.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80081c0:	a201      	add	r2, pc, #4	@ (adr r2, 80081c8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80081c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c6:	bf00      	nop
 80081c8:	080082a1 	.word	0x080082a1
 80081cc:	08008299 	.word	0x08008299
 80081d0:	08008299 	.word	0x08008299
 80081d4:	08008299 	.word	0x08008299
 80081d8:	08008299 	.word	0x08008299
 80081dc:	08008299 	.word	0x08008299
 80081e0:	08008299 	.word	0x08008299
 80081e4:	08008299 	.word	0x08008299
 80081e8:	0800826d 	.word	0x0800826d
 80081ec:	08008299 	.word	0x08008299
 80081f0:	08008299 	.word	0x08008299
 80081f4:	08008299 	.word	0x08008299
 80081f8:	08008299 	.word	0x08008299
 80081fc:	08008299 	.word	0x08008299
 8008200:	08008299 	.word	0x08008299
 8008204:	08008299 	.word	0x08008299
 8008208:	08008283 	.word	0x08008283
 800820c:	08008299 	.word	0x08008299
 8008210:	08008299 	.word	0x08008299
 8008214:	08008299 	.word	0x08008299
 8008218:	08008299 	.word	0x08008299
 800821c:	08008299 	.word	0x08008299
 8008220:	08008299 	.word	0x08008299
 8008224:	08008299 	.word	0x08008299
 8008228:	080082a1 	.word	0x080082a1
 800822c:	08008299 	.word	0x08008299
 8008230:	08008299 	.word	0x08008299
 8008234:	08008299 	.word	0x08008299
 8008238:	08008299 	.word	0x08008299
 800823c:	08008299 	.word	0x08008299
 8008240:	08008299 	.word	0x08008299
 8008244:	08008299 	.word	0x08008299
 8008248:	080082a1 	.word	0x080082a1
 800824c:	08008299 	.word	0x08008299
 8008250:	08008299 	.word	0x08008299
 8008254:	08008299 	.word	0x08008299
 8008258:	08008299 	.word	0x08008299
 800825c:	08008299 	.word	0x08008299
 8008260:	08008299 	.word	0x08008299
 8008264:	08008299 	.word	0x08008299
 8008268:	080082a1 	.word	0x080082a1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800826c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008270:	3308      	adds	r3, #8
 8008272:	2101      	movs	r1, #1
 8008274:	4618      	mov	r0, r3
 8008276:	f000 ffc3 	bl	8009200 <RCCEx_PLL2_Config>
 800827a:	4603      	mov	r3, r0
 800827c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008280:	e00f      	b.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008286:	3328      	adds	r3, #40	@ 0x28
 8008288:	2101      	movs	r1, #1
 800828a:	4618      	mov	r0, r3
 800828c:	f001 f86a 	bl	8009364 <RCCEx_PLL3_Config>
 8008290:	4603      	mov	r3, r0
 8008292:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008296:	e004      	b.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008298:	2301      	movs	r3, #1
 800829a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800829e:	e000      	b.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80082a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d10a      	bne.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80082aa:	4bbf      	ldr	r3, [pc, #764]	@ (80085a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80082ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082ae:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80082b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80082b8:	4abb      	ldr	r2, [pc, #748]	@ (80085a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80082ba:	430b      	orrs	r3, r1
 80082bc:	6553      	str	r3, [r2, #84]	@ 0x54
 80082be:	e003      	b.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80082c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d0:	f002 0302 	and.w	r3, r2, #2
 80082d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80082d8:	2300      	movs	r3, #0
 80082da:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80082de:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80082e2:	460b      	mov	r3, r1
 80082e4:	4313      	orrs	r3, r2
 80082e6:	d041      	beq.n	800836c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80082e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80082ee:	2b05      	cmp	r3, #5
 80082f0:	d824      	bhi.n	800833c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80082f2:	a201      	add	r2, pc, #4	@ (adr r2, 80082f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80082f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f8:	08008345 	.word	0x08008345
 80082fc:	08008311 	.word	0x08008311
 8008300:	08008327 	.word	0x08008327
 8008304:	08008345 	.word	0x08008345
 8008308:	08008345 	.word	0x08008345
 800830c:	08008345 	.word	0x08008345
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008314:	3308      	adds	r3, #8
 8008316:	2101      	movs	r1, #1
 8008318:	4618      	mov	r0, r3
 800831a:	f000 ff71 	bl	8009200 <RCCEx_PLL2_Config>
 800831e:	4603      	mov	r3, r0
 8008320:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008324:	e00f      	b.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800832a:	3328      	adds	r3, #40	@ 0x28
 800832c:	2101      	movs	r1, #1
 800832e:	4618      	mov	r0, r3
 8008330:	f001 f818 	bl	8009364 <RCCEx_PLL3_Config>
 8008334:	4603      	mov	r3, r0
 8008336:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800833a:	e004      	b.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800833c:	2301      	movs	r3, #1
 800833e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008342:	e000      	b.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008344:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008346:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800834a:	2b00      	cmp	r3, #0
 800834c:	d10a      	bne.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800834e:	4b96      	ldr	r3, [pc, #600]	@ (80085a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008350:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008352:	f023 0107 	bic.w	r1, r3, #7
 8008356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800835a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800835c:	4a92      	ldr	r2, [pc, #584]	@ (80085a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800835e:	430b      	orrs	r3, r1
 8008360:	6553      	str	r3, [r2, #84]	@ 0x54
 8008362:	e003      	b.n	800836c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008364:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008368:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800836c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008374:	f002 0304 	and.w	r3, r2, #4
 8008378:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800837c:	2300      	movs	r3, #0
 800837e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008382:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008386:	460b      	mov	r3, r1
 8008388:	4313      	orrs	r3, r2
 800838a:	d044      	beq.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800838c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008390:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008394:	2b05      	cmp	r3, #5
 8008396:	d825      	bhi.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008398:	a201      	add	r2, pc, #4	@ (adr r2, 80083a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800839a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800839e:	bf00      	nop
 80083a0:	080083ed 	.word	0x080083ed
 80083a4:	080083b9 	.word	0x080083b9
 80083a8:	080083cf 	.word	0x080083cf
 80083ac:	080083ed 	.word	0x080083ed
 80083b0:	080083ed 	.word	0x080083ed
 80083b4:	080083ed 	.word	0x080083ed
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80083b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083bc:	3308      	adds	r3, #8
 80083be:	2101      	movs	r1, #1
 80083c0:	4618      	mov	r0, r3
 80083c2:	f000 ff1d 	bl	8009200 <RCCEx_PLL2_Config>
 80083c6:	4603      	mov	r3, r0
 80083c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80083cc:	e00f      	b.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80083ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083d2:	3328      	adds	r3, #40	@ 0x28
 80083d4:	2101      	movs	r1, #1
 80083d6:	4618      	mov	r0, r3
 80083d8:	f000 ffc4 	bl	8009364 <RCCEx_PLL3_Config>
 80083dc:	4603      	mov	r3, r0
 80083de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80083e2:	e004      	b.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80083ea:	e000      	b.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80083ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d10b      	bne.n	800840e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80083f6:	4b6c      	ldr	r3, [pc, #432]	@ (80085a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80083f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083fa:	f023 0107 	bic.w	r1, r3, #7
 80083fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008402:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008406:	4a68      	ldr	r2, [pc, #416]	@ (80085a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008408:	430b      	orrs	r3, r1
 800840a:	6593      	str	r3, [r2, #88]	@ 0x58
 800840c:	e003      	b.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800840e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008412:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800841a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841e:	f002 0320 	and.w	r3, r2, #32
 8008422:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008426:	2300      	movs	r3, #0
 8008428:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800842c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008430:	460b      	mov	r3, r1
 8008432:	4313      	orrs	r3, r2
 8008434:	d055      	beq.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800843a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800843e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008442:	d033      	beq.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008444:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008448:	d82c      	bhi.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800844a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800844e:	d02f      	beq.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008450:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008454:	d826      	bhi.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008456:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800845a:	d02b      	beq.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800845c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008460:	d820      	bhi.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008462:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008466:	d012      	beq.n	800848e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008468:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800846c:	d81a      	bhi.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800846e:	2b00      	cmp	r3, #0
 8008470:	d022      	beq.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008472:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008476:	d115      	bne.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800847c:	3308      	adds	r3, #8
 800847e:	2100      	movs	r1, #0
 8008480:	4618      	mov	r0, r3
 8008482:	f000 febd 	bl	8009200 <RCCEx_PLL2_Config>
 8008486:	4603      	mov	r3, r0
 8008488:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800848c:	e015      	b.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800848e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008492:	3328      	adds	r3, #40	@ 0x28
 8008494:	2102      	movs	r1, #2
 8008496:	4618      	mov	r0, r3
 8008498:	f000 ff64 	bl	8009364 <RCCEx_PLL3_Config>
 800849c:	4603      	mov	r3, r0
 800849e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80084a2:	e00a      	b.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084a4:	2301      	movs	r3, #1
 80084a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80084aa:	e006      	b.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80084ac:	bf00      	nop
 80084ae:	e004      	b.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80084b0:	bf00      	nop
 80084b2:	e002      	b.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80084b4:	bf00      	nop
 80084b6:	e000      	b.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80084b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d10b      	bne.n	80084da <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80084c2:	4b39      	ldr	r3, [pc, #228]	@ (80085a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80084c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084c6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80084ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084d2:	4a35      	ldr	r2, [pc, #212]	@ (80085a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80084d4:	430b      	orrs	r3, r1
 80084d6:	6553      	str	r3, [r2, #84]	@ 0x54
 80084d8:	e003      	b.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80084e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ea:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80084ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80084f2:	2300      	movs	r3, #0
 80084f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80084f8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80084fc:	460b      	mov	r3, r1
 80084fe:	4313      	orrs	r3, r2
 8008500:	d058      	beq.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008506:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800850a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800850e:	d033      	beq.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008510:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008514:	d82c      	bhi.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008516:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800851a:	d02f      	beq.n	800857c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800851c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008520:	d826      	bhi.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008522:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008526:	d02b      	beq.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008528:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800852c:	d820      	bhi.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800852e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008532:	d012      	beq.n	800855a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008534:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008538:	d81a      	bhi.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800853a:	2b00      	cmp	r3, #0
 800853c:	d022      	beq.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800853e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008542:	d115      	bne.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008548:	3308      	adds	r3, #8
 800854a:	2100      	movs	r1, #0
 800854c:	4618      	mov	r0, r3
 800854e:	f000 fe57 	bl	8009200 <RCCEx_PLL2_Config>
 8008552:	4603      	mov	r3, r0
 8008554:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008558:	e015      	b.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800855a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800855e:	3328      	adds	r3, #40	@ 0x28
 8008560:	2102      	movs	r1, #2
 8008562:	4618      	mov	r0, r3
 8008564:	f000 fefe 	bl	8009364 <RCCEx_PLL3_Config>
 8008568:	4603      	mov	r3, r0
 800856a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800856e:	e00a      	b.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008570:	2301      	movs	r3, #1
 8008572:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008576:	e006      	b.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008578:	bf00      	nop
 800857a:	e004      	b.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800857c:	bf00      	nop
 800857e:	e002      	b.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008580:	bf00      	nop
 8008582:	e000      	b.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008584:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008586:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800858a:	2b00      	cmp	r3, #0
 800858c:	d10e      	bne.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800858e:	4b06      	ldr	r3, [pc, #24]	@ (80085a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008592:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800859a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800859e:	4a02      	ldr	r2, [pc, #8]	@ (80085a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80085a0:	430b      	orrs	r3, r1
 80085a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80085a4:	e006      	b.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80085a6:	bf00      	nop
 80085a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80085b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085bc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80085c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80085c4:	2300      	movs	r3, #0
 80085c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80085ca:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80085ce:	460b      	mov	r3, r1
 80085d0:	4313      	orrs	r3, r2
 80085d2:	d055      	beq.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80085d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80085dc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80085e0:	d033      	beq.n	800864a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80085e2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80085e6:	d82c      	bhi.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80085e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085ec:	d02f      	beq.n	800864e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80085ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085f2:	d826      	bhi.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80085f4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80085f8:	d02b      	beq.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80085fa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80085fe:	d820      	bhi.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008600:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008604:	d012      	beq.n	800862c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8008606:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800860a:	d81a      	bhi.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800860c:	2b00      	cmp	r3, #0
 800860e:	d022      	beq.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008610:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008614:	d115      	bne.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008616:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800861a:	3308      	adds	r3, #8
 800861c:	2100      	movs	r1, #0
 800861e:	4618      	mov	r0, r3
 8008620:	f000 fdee 	bl	8009200 <RCCEx_PLL2_Config>
 8008624:	4603      	mov	r3, r0
 8008626:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800862a:	e015      	b.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800862c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008630:	3328      	adds	r3, #40	@ 0x28
 8008632:	2102      	movs	r1, #2
 8008634:	4618      	mov	r0, r3
 8008636:	f000 fe95 	bl	8009364 <RCCEx_PLL3_Config>
 800863a:	4603      	mov	r3, r0
 800863c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008640:	e00a      	b.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008642:	2301      	movs	r3, #1
 8008644:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008648:	e006      	b.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800864a:	bf00      	nop
 800864c:	e004      	b.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800864e:	bf00      	nop
 8008650:	e002      	b.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008652:	bf00      	nop
 8008654:	e000      	b.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008656:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008658:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800865c:	2b00      	cmp	r3, #0
 800865e:	d10b      	bne.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008660:	4ba1      	ldr	r3, [pc, #644]	@ (80088e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008664:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800866c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008670:	4a9d      	ldr	r2, [pc, #628]	@ (80088e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008672:	430b      	orrs	r3, r1
 8008674:	6593      	str	r3, [r2, #88]	@ 0x58
 8008676:	e003      	b.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008678:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800867c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008688:	f002 0308 	and.w	r3, r2, #8
 800868c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008690:	2300      	movs	r3, #0
 8008692:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008696:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800869a:	460b      	mov	r3, r1
 800869c:	4313      	orrs	r3, r2
 800869e:	d01e      	beq.n	80086de <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80086a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086ac:	d10c      	bne.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80086ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086b2:	3328      	adds	r3, #40	@ 0x28
 80086b4:	2102      	movs	r1, #2
 80086b6:	4618      	mov	r0, r3
 80086b8:	f000 fe54 	bl	8009364 <RCCEx_PLL3_Config>
 80086bc:	4603      	mov	r3, r0
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d002      	beq.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80086c2:	2301      	movs	r3, #1
 80086c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80086c8:	4b87      	ldr	r3, [pc, #540]	@ (80088e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086cc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80086d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086d8:	4a83      	ldr	r2, [pc, #524]	@ (80088e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086da:	430b      	orrs	r3, r1
 80086dc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80086de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e6:	f002 0310 	and.w	r3, r2, #16
 80086ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80086ee:	2300      	movs	r3, #0
 80086f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80086f4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80086f8:	460b      	mov	r3, r1
 80086fa:	4313      	orrs	r3, r2
 80086fc:	d01e      	beq.n	800873c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80086fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008702:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008706:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800870a:	d10c      	bne.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800870c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008710:	3328      	adds	r3, #40	@ 0x28
 8008712:	2102      	movs	r1, #2
 8008714:	4618      	mov	r0, r3
 8008716:	f000 fe25 	bl	8009364 <RCCEx_PLL3_Config>
 800871a:	4603      	mov	r3, r0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d002      	beq.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008720:	2301      	movs	r3, #1
 8008722:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008726:	4b70      	ldr	r3, [pc, #448]	@ (80088e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800872a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800872e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008732:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008736:	4a6c      	ldr	r2, [pc, #432]	@ (80088e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008738:	430b      	orrs	r3, r1
 800873a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800873c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008744:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008748:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800874c:	2300      	movs	r3, #0
 800874e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008752:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008756:	460b      	mov	r3, r1
 8008758:	4313      	orrs	r3, r2
 800875a:	d03e      	beq.n	80087da <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800875c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008760:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008764:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008768:	d022      	beq.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800876a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800876e:	d81b      	bhi.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008770:	2b00      	cmp	r3, #0
 8008772:	d003      	beq.n	800877c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008774:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008778:	d00b      	beq.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800877a:	e015      	b.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800877c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008780:	3308      	adds	r3, #8
 8008782:	2100      	movs	r1, #0
 8008784:	4618      	mov	r0, r3
 8008786:	f000 fd3b 	bl	8009200 <RCCEx_PLL2_Config>
 800878a:	4603      	mov	r3, r0
 800878c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008790:	e00f      	b.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008796:	3328      	adds	r3, #40	@ 0x28
 8008798:	2102      	movs	r1, #2
 800879a:	4618      	mov	r0, r3
 800879c:	f000 fde2 	bl	8009364 <RCCEx_PLL3_Config>
 80087a0:	4603      	mov	r3, r0
 80087a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80087a6:	e004      	b.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087a8:	2301      	movs	r3, #1
 80087aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80087ae:	e000      	b.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80087b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d10b      	bne.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80087ba:	4b4b      	ldr	r3, [pc, #300]	@ (80088e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087be:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80087c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80087ca:	4a47      	ldr	r2, [pc, #284]	@ (80088e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087cc:	430b      	orrs	r3, r1
 80087ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80087d0:	e003      	b.n	80087da <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80087da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80087e6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80087e8:	2300      	movs	r3, #0
 80087ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80087ec:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80087f0:	460b      	mov	r3, r1
 80087f2:	4313      	orrs	r3, r2
 80087f4:	d03b      	beq.n	800886e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80087f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087fe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008802:	d01f      	beq.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008804:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008808:	d818      	bhi.n	800883c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800880a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800880e:	d003      	beq.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008810:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008814:	d007      	beq.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008816:	e011      	b.n	800883c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008818:	4b33      	ldr	r3, [pc, #204]	@ (80088e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800881a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800881c:	4a32      	ldr	r2, [pc, #200]	@ (80088e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800881e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008822:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008824:	e00f      	b.n	8008846 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800882a:	3328      	adds	r3, #40	@ 0x28
 800882c:	2101      	movs	r1, #1
 800882e:	4618      	mov	r0, r3
 8008830:	f000 fd98 	bl	8009364 <RCCEx_PLL3_Config>
 8008834:	4603      	mov	r3, r0
 8008836:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800883a:	e004      	b.n	8008846 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800883c:	2301      	movs	r3, #1
 800883e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008842:	e000      	b.n	8008846 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008844:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008846:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800884a:	2b00      	cmp	r3, #0
 800884c:	d10b      	bne.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800884e:	4b26      	ldr	r3, [pc, #152]	@ (80088e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008852:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800885a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800885e:	4a22      	ldr	r2, [pc, #136]	@ (80088e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008860:	430b      	orrs	r3, r1
 8008862:	6553      	str	r3, [r2, #84]	@ 0x54
 8008864:	e003      	b.n	800886e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008866:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800886a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800886e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008876:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800887a:	673b      	str	r3, [r7, #112]	@ 0x70
 800887c:	2300      	movs	r3, #0
 800887e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008880:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008884:	460b      	mov	r3, r1
 8008886:	4313      	orrs	r3, r2
 8008888:	d034      	beq.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800888a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800888e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008890:	2b00      	cmp	r3, #0
 8008892:	d003      	beq.n	800889c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008894:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008898:	d007      	beq.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800889a:	e011      	b.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800889c:	4b12      	ldr	r3, [pc, #72]	@ (80088e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800889e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088a0:	4a11      	ldr	r2, [pc, #68]	@ (80088e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80088a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80088a8:	e00e      	b.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80088aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088ae:	3308      	adds	r3, #8
 80088b0:	2102      	movs	r1, #2
 80088b2:	4618      	mov	r0, r3
 80088b4:	f000 fca4 	bl	8009200 <RCCEx_PLL2_Config>
 80088b8:	4603      	mov	r3, r0
 80088ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80088be:	e003      	b.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80088c0:	2301      	movs	r3, #1
 80088c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80088c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d10d      	bne.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80088d0:	4b05      	ldr	r3, [pc, #20]	@ (80088e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088d4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80088d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088de:	4a02      	ldr	r2, [pc, #8]	@ (80088e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088e0:	430b      	orrs	r3, r1
 80088e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80088e4:	e006      	b.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80088e6:	bf00      	nop
 80088e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80088f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088fc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008900:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008902:	2300      	movs	r3, #0
 8008904:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008906:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800890a:	460b      	mov	r3, r1
 800890c:	4313      	orrs	r3, r2
 800890e:	d00c      	beq.n	800892a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008914:	3328      	adds	r3, #40	@ 0x28
 8008916:	2102      	movs	r1, #2
 8008918:	4618      	mov	r0, r3
 800891a:	f000 fd23 	bl	8009364 <RCCEx_PLL3_Config>
 800891e:	4603      	mov	r3, r0
 8008920:	2b00      	cmp	r3, #0
 8008922:	d002      	beq.n	800892a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008924:	2301      	movs	r3, #1
 8008926:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800892a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800892e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008932:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008936:	663b      	str	r3, [r7, #96]	@ 0x60
 8008938:	2300      	movs	r3, #0
 800893a:	667b      	str	r3, [r7, #100]	@ 0x64
 800893c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008940:	460b      	mov	r3, r1
 8008942:	4313      	orrs	r3, r2
 8008944:	d038      	beq.n	80089b8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800894a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800894e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008952:	d018      	beq.n	8008986 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008954:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008958:	d811      	bhi.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800895a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800895e:	d014      	beq.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008960:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008964:	d80b      	bhi.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008966:	2b00      	cmp	r3, #0
 8008968:	d011      	beq.n	800898e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800896a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800896e:	d106      	bne.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008970:	4bc3      	ldr	r3, [pc, #780]	@ (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008974:	4ac2      	ldr	r2, [pc, #776]	@ (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008976:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800897a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800897c:	e008      	b.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800897e:	2301      	movs	r3, #1
 8008980:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008984:	e004      	b.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008986:	bf00      	nop
 8008988:	e002      	b.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800898a:	bf00      	nop
 800898c:	e000      	b.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800898e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008990:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008994:	2b00      	cmp	r3, #0
 8008996:	d10b      	bne.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008998:	4bb9      	ldr	r3, [pc, #740]	@ (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800899a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800899c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80089a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089a8:	4ab5      	ldr	r2, [pc, #724]	@ (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089aa:	430b      	orrs	r3, r1
 80089ac:	6553      	str	r3, [r2, #84]	@ 0x54
 80089ae:	e003      	b.n	80089b8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80089b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80089c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80089c6:	2300      	movs	r3, #0
 80089c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80089ca:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80089ce:	460b      	mov	r3, r1
 80089d0:	4313      	orrs	r3, r2
 80089d2:	d009      	beq.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80089d4:	4baa      	ldr	r3, [pc, #680]	@ (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089d8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80089dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80089e2:	4aa7      	ldr	r2, [pc, #668]	@ (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089e4:	430b      	orrs	r3, r1
 80089e6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80089e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80089f4:	653b      	str	r3, [r7, #80]	@ 0x50
 80089f6:	2300      	movs	r3, #0
 80089f8:	657b      	str	r3, [r7, #84]	@ 0x54
 80089fa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80089fe:	460b      	mov	r3, r1
 8008a00:	4313      	orrs	r3, r2
 8008a02:	d00a      	beq.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008a04:	4b9e      	ldr	r3, [pc, #632]	@ (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a06:	691b      	ldr	r3, [r3, #16]
 8008a08:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a10:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008a14:	4a9a      	ldr	r2, [pc, #616]	@ (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a16:	430b      	orrs	r3, r1
 8008a18:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a22:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008a26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a28:	2300      	movs	r3, #0
 8008a2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a2c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008a30:	460b      	mov	r3, r1
 8008a32:	4313      	orrs	r3, r2
 8008a34:	d009      	beq.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008a36:	4b92      	ldr	r3, [pc, #584]	@ (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a3a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a44:	4a8e      	ldr	r2, [pc, #568]	@ (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a46:	430b      	orrs	r3, r1
 8008a48:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a52:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008a56:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a58:	2300      	movs	r3, #0
 8008a5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a5c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008a60:	460b      	mov	r3, r1
 8008a62:	4313      	orrs	r3, r2
 8008a64:	d00e      	beq.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008a66:	4b86      	ldr	r3, [pc, #536]	@ (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a68:	691b      	ldr	r3, [r3, #16]
 8008a6a:	4a85      	ldr	r2, [pc, #532]	@ (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a6c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008a70:	6113      	str	r3, [r2, #16]
 8008a72:	4b83      	ldr	r3, [pc, #524]	@ (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a74:	6919      	ldr	r1, [r3, #16]
 8008a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a7a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008a7e:	4a80      	ldr	r2, [pc, #512]	@ (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a80:	430b      	orrs	r3, r1
 8008a82:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a8c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008a90:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008a92:	2300      	movs	r3, #0
 8008a94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a96:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008a9a:	460b      	mov	r3, r1
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	d009      	beq.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008aa0:	4b77      	ldr	r3, [pc, #476]	@ (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008aa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008aa4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008aae:	4a74      	ldr	r2, [pc, #464]	@ (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ab0:	430b      	orrs	r3, r1
 8008ab2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008abc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008ac0:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ac6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008aca:	460b      	mov	r3, r1
 8008acc:	4313      	orrs	r3, r2
 8008ace:	d00a      	beq.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008ad0:	4b6b      	ldr	r3, [pc, #428]	@ (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ad2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ad4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008adc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ae0:	4a67      	ldr	r2, [pc, #412]	@ (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ae2:	430b      	orrs	r3, r1
 8008ae4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aee:	2100      	movs	r1, #0
 8008af0:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008af2:	f003 0301 	and.w	r3, r3, #1
 8008af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008af8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008afc:	460b      	mov	r3, r1
 8008afe:	4313      	orrs	r3, r2
 8008b00:	d011      	beq.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b06:	3308      	adds	r3, #8
 8008b08:	2100      	movs	r1, #0
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f000 fb78 	bl	8009200 <RCCEx_PLL2_Config>
 8008b10:	4603      	mov	r3, r0
 8008b12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008b16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d003      	beq.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2e:	2100      	movs	r1, #0
 8008b30:	6239      	str	r1, [r7, #32]
 8008b32:	f003 0302 	and.w	r3, r3, #2
 8008b36:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b38:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	d011      	beq.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b46:	3308      	adds	r3, #8
 8008b48:	2101      	movs	r1, #1
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f000 fb58 	bl	8009200 <RCCEx_PLL2_Config>
 8008b50:	4603      	mov	r3, r0
 8008b52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008b56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d003      	beq.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b6e:	2100      	movs	r1, #0
 8008b70:	61b9      	str	r1, [r7, #24]
 8008b72:	f003 0304 	and.w	r3, r3, #4
 8008b76:	61fb      	str	r3, [r7, #28]
 8008b78:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008b7c:	460b      	mov	r3, r1
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	d011      	beq.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b86:	3308      	adds	r3, #8
 8008b88:	2102      	movs	r1, #2
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f000 fb38 	bl	8009200 <RCCEx_PLL2_Config>
 8008b90:	4603      	mov	r3, r0
 8008b92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008b96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d003      	beq.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ba2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bae:	2100      	movs	r1, #0
 8008bb0:	6139      	str	r1, [r7, #16]
 8008bb2:	f003 0308 	and.w	r3, r3, #8
 8008bb6:	617b      	str	r3, [r7, #20]
 8008bb8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008bbc:	460b      	mov	r3, r1
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	d011      	beq.n	8008be6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bc6:	3328      	adds	r3, #40	@ 0x28
 8008bc8:	2100      	movs	r1, #0
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f000 fbca 	bl	8009364 <RCCEx_PLL3_Config>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008bd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d003      	beq.n	8008be6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008be2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bee:	2100      	movs	r1, #0
 8008bf0:	60b9      	str	r1, [r7, #8]
 8008bf2:	f003 0310 	and.w	r3, r3, #16
 8008bf6:	60fb      	str	r3, [r7, #12]
 8008bf8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	d011      	beq.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c06:	3328      	adds	r3, #40	@ 0x28
 8008c08:	2101      	movs	r1, #1
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f000 fbaa 	bl	8009364 <RCCEx_PLL3_Config>
 8008c10:	4603      	mov	r3, r0
 8008c12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008c16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d003      	beq.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c2e:	2100      	movs	r1, #0
 8008c30:	6039      	str	r1, [r7, #0]
 8008c32:	f003 0320 	and.w	r3, r3, #32
 8008c36:	607b      	str	r3, [r7, #4]
 8008c38:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	d011      	beq.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c46:	3328      	adds	r3, #40	@ 0x28
 8008c48:	2102      	movs	r1, #2
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f000 fb8a 	bl	8009364 <RCCEx_PLL3_Config>
 8008c50:	4603      	mov	r3, r0
 8008c52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008c56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d003      	beq.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8008c66:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d101      	bne.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	e000      	b.n	8008c74 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008c72:	2301      	movs	r3, #1
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c80:	58024400 	.word	0x58024400

08008c84 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008c88:	f7fe fd96 	bl	80077b8 <HAL_RCC_GetHCLKFreq>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	4b06      	ldr	r3, [pc, #24]	@ (8008ca8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008c90:	6a1b      	ldr	r3, [r3, #32]
 8008c92:	091b      	lsrs	r3, r3, #4
 8008c94:	f003 0307 	and.w	r3, r3, #7
 8008c98:	4904      	ldr	r1, [pc, #16]	@ (8008cac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008c9a:	5ccb      	ldrb	r3, [r1, r3]
 8008c9c:	f003 031f 	and.w	r3, r3, #31
 8008ca0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	bd80      	pop	{r7, pc}
 8008ca8:	58024400 	.word	0x58024400
 8008cac:	0800b1f4 	.word	0x0800b1f4

08008cb0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b089      	sub	sp, #36	@ 0x24
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008cb8:	4ba1      	ldr	r3, [pc, #644]	@ (8008f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cbc:	f003 0303 	and.w	r3, r3, #3
 8008cc0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008cc2:	4b9f      	ldr	r3, [pc, #636]	@ (8008f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cc6:	0b1b      	lsrs	r3, r3, #12
 8008cc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ccc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008cce:	4b9c      	ldr	r3, [pc, #624]	@ (8008f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cd2:	091b      	lsrs	r3, r3, #4
 8008cd4:	f003 0301 	and.w	r3, r3, #1
 8008cd8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008cda:	4b99      	ldr	r3, [pc, #612]	@ (8008f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cde:	08db      	lsrs	r3, r3, #3
 8008ce0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ce4:	693a      	ldr	r2, [r7, #16]
 8008ce6:	fb02 f303 	mul.w	r3, r2, r3
 8008cea:	ee07 3a90 	vmov	s15, r3
 8008cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cf2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	f000 8111 	beq.w	8008f20 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008cfe:	69bb      	ldr	r3, [r7, #24]
 8008d00:	2b02      	cmp	r3, #2
 8008d02:	f000 8083 	beq.w	8008e0c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008d06:	69bb      	ldr	r3, [r7, #24]
 8008d08:	2b02      	cmp	r3, #2
 8008d0a:	f200 80a1 	bhi.w	8008e50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008d0e:	69bb      	ldr	r3, [r7, #24]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d003      	beq.n	8008d1c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008d14:	69bb      	ldr	r3, [r7, #24]
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d056      	beq.n	8008dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008d1a:	e099      	b.n	8008e50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d1c:	4b88      	ldr	r3, [pc, #544]	@ (8008f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f003 0320 	and.w	r3, r3, #32
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d02d      	beq.n	8008d84 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d28:	4b85      	ldr	r3, [pc, #532]	@ (8008f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	08db      	lsrs	r3, r3, #3
 8008d2e:	f003 0303 	and.w	r3, r3, #3
 8008d32:	4a84      	ldr	r2, [pc, #528]	@ (8008f44 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008d34:	fa22 f303 	lsr.w	r3, r2, r3
 8008d38:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	ee07 3a90 	vmov	s15, r3
 8008d40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	ee07 3a90 	vmov	s15, r3
 8008d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d52:	4b7b      	ldr	r3, [pc, #492]	@ (8008f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d5a:	ee07 3a90 	vmov	s15, r3
 8008d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d62:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d66:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008f48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d7e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008d82:	e087      	b.n	8008e94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	ee07 3a90 	vmov	s15, r3
 8008d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d8e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008f4c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d96:	4b6a      	ldr	r3, [pc, #424]	@ (8008f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d9e:	ee07 3a90 	vmov	s15, r3
 8008da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008da6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008daa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008f48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008db6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008dc6:	e065      	b.n	8008e94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	ee07 3a90 	vmov	s15, r3
 8008dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dd2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008f50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dda:	4b59      	ldr	r3, [pc, #356]	@ (8008f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008de2:	ee07 3a90 	vmov	s15, r3
 8008de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dea:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dee:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008f48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e0a:	e043      	b.n	8008e94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	ee07 3a90 	vmov	s15, r3
 8008e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e16:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008f54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e1e:	4b48      	ldr	r3, [pc, #288]	@ (8008f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e26:	ee07 3a90 	vmov	s15, r3
 8008e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e32:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008f48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e4e:	e021      	b.n	8008e94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	ee07 3a90 	vmov	s15, r3
 8008e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e5a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008f50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e62:	4b37      	ldr	r3, [pc, #220]	@ (8008f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e6a:	ee07 3a90 	vmov	s15, r3
 8008e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e72:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e76:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008f48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e92:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008e94:	4b2a      	ldr	r3, [pc, #168]	@ (8008f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e98:	0a5b      	lsrs	r3, r3, #9
 8008e9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e9e:	ee07 3a90 	vmov	s15, r3
 8008ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ea6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008eaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008eae:	edd7 6a07 	vldr	s13, [r7, #28]
 8008eb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008eb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008eba:	ee17 2a90 	vmov	r2, s15
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008ec2:	4b1f      	ldr	r3, [pc, #124]	@ (8008f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ec6:	0c1b      	lsrs	r3, r3, #16
 8008ec8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ecc:	ee07 3a90 	vmov	s15, r3
 8008ed0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ed4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008ed8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008edc:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ee0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ee4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ee8:	ee17 2a90 	vmov	r2, s15
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008ef0:	4b13      	ldr	r3, [pc, #76]	@ (8008f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ef4:	0e1b      	lsrs	r3, r3, #24
 8008ef6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008efa:	ee07 3a90 	vmov	s15, r3
 8008efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f16:	ee17 2a90 	vmov	r2, s15
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008f1e:	e008      	b.n	8008f32 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	609a      	str	r2, [r3, #8]
}
 8008f32:	bf00      	nop
 8008f34:	3724      	adds	r7, #36	@ 0x24
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr
 8008f3e:	bf00      	nop
 8008f40:	58024400 	.word	0x58024400
 8008f44:	03d09000 	.word	0x03d09000
 8008f48:	46000000 	.word	0x46000000
 8008f4c:	4c742400 	.word	0x4c742400
 8008f50:	4a742400 	.word	0x4a742400
 8008f54:	4bbebc20 	.word	0x4bbebc20

08008f58 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b089      	sub	sp, #36	@ 0x24
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008f60:	4ba1      	ldr	r3, [pc, #644]	@ (80091e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f64:	f003 0303 	and.w	r3, r3, #3
 8008f68:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008f6a:	4b9f      	ldr	r3, [pc, #636]	@ (80091e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f6e:	0d1b      	lsrs	r3, r3, #20
 8008f70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008f74:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008f76:	4b9c      	ldr	r3, [pc, #624]	@ (80091e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f7a:	0a1b      	lsrs	r3, r3, #8
 8008f7c:	f003 0301 	and.w	r3, r3, #1
 8008f80:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008f82:	4b99      	ldr	r3, [pc, #612]	@ (80091e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f86:	08db      	lsrs	r3, r3, #3
 8008f88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008f8c:	693a      	ldr	r2, [r7, #16]
 8008f8e:	fb02 f303 	mul.w	r3, r2, r3
 8008f92:	ee07 3a90 	vmov	s15, r3
 8008f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	f000 8111 	beq.w	80091c8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008fa6:	69bb      	ldr	r3, [r7, #24]
 8008fa8:	2b02      	cmp	r3, #2
 8008faa:	f000 8083 	beq.w	80090b4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008fae:	69bb      	ldr	r3, [r7, #24]
 8008fb0:	2b02      	cmp	r3, #2
 8008fb2:	f200 80a1 	bhi.w	80090f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008fb6:	69bb      	ldr	r3, [r7, #24]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d003      	beq.n	8008fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008fbc:	69bb      	ldr	r3, [r7, #24]
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	d056      	beq.n	8009070 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008fc2:	e099      	b.n	80090f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008fc4:	4b88      	ldr	r3, [pc, #544]	@ (80091e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f003 0320 	and.w	r3, r3, #32
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d02d      	beq.n	800902c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008fd0:	4b85      	ldr	r3, [pc, #532]	@ (80091e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	08db      	lsrs	r3, r3, #3
 8008fd6:	f003 0303 	and.w	r3, r3, #3
 8008fda:	4a84      	ldr	r2, [pc, #528]	@ (80091ec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8008fe0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	ee07 3a90 	vmov	s15, r3
 8008fe8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	ee07 3a90 	vmov	s15, r3
 8008ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ffa:	4b7b      	ldr	r3, [pc, #492]	@ (80091e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009002:	ee07 3a90 	vmov	s15, r3
 8009006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800900a:	ed97 6a03 	vldr	s12, [r7, #12]
 800900e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80091f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800901a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800901e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009026:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800902a:	e087      	b.n	800913c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	ee07 3a90 	vmov	s15, r3
 8009032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009036:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80091f4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800903a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800903e:	4b6a      	ldr	r3, [pc, #424]	@ (80091e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009046:	ee07 3a90 	vmov	s15, r3
 800904a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800904e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009052:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80091f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800905a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800905e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800906a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800906e:	e065      	b.n	800913c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	ee07 3a90 	vmov	s15, r3
 8009076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800907a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80091f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800907e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009082:	4b59      	ldr	r3, [pc, #356]	@ (80091e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800908a:	ee07 3a90 	vmov	s15, r3
 800908e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009092:	ed97 6a03 	vldr	s12, [r7, #12]
 8009096:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80091f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800909a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800909e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090b2:	e043      	b.n	800913c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	ee07 3a90 	vmov	s15, r3
 80090ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090be:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80091fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80090c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090c6:	4b48      	ldr	r3, [pc, #288]	@ (80091e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090ce:	ee07 3a90 	vmov	s15, r3
 80090d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80090da:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80091f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80090de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090f6:	e021      	b.n	800913c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	ee07 3a90 	vmov	s15, r3
 80090fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009102:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80091f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800910a:	4b37      	ldr	r3, [pc, #220]	@ (80091e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800910c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800910e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009112:	ee07 3a90 	vmov	s15, r3
 8009116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800911a:	ed97 6a03 	vldr	s12, [r7, #12]
 800911e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80091f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800912a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800912e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009136:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800913a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800913c:	4b2a      	ldr	r3, [pc, #168]	@ (80091e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800913e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009140:	0a5b      	lsrs	r3, r3, #9
 8009142:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009146:	ee07 3a90 	vmov	s15, r3
 800914a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800914e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009152:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009156:	edd7 6a07 	vldr	s13, [r7, #28]
 800915a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800915e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009162:	ee17 2a90 	vmov	r2, s15
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800916a:	4b1f      	ldr	r3, [pc, #124]	@ (80091e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800916c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800916e:	0c1b      	lsrs	r3, r3, #16
 8009170:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009174:	ee07 3a90 	vmov	s15, r3
 8009178:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800917c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009180:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009184:	edd7 6a07 	vldr	s13, [r7, #28]
 8009188:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800918c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009190:	ee17 2a90 	vmov	r2, s15
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009198:	4b13      	ldr	r3, [pc, #76]	@ (80091e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800919a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800919c:	0e1b      	lsrs	r3, r3, #24
 800919e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091a2:	ee07 3a90 	vmov	s15, r3
 80091a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80091ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80091b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091be:	ee17 2a90 	vmov	r2, s15
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80091c6:	e008      	b.n	80091da <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2200      	movs	r2, #0
 80091cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2200      	movs	r2, #0
 80091d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	609a      	str	r2, [r3, #8]
}
 80091da:	bf00      	nop
 80091dc:	3724      	adds	r7, #36	@ 0x24
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr
 80091e6:	bf00      	nop
 80091e8:	58024400 	.word	0x58024400
 80091ec:	03d09000 	.word	0x03d09000
 80091f0:	46000000 	.word	0x46000000
 80091f4:	4c742400 	.word	0x4c742400
 80091f8:	4a742400 	.word	0x4a742400
 80091fc:	4bbebc20 	.word	0x4bbebc20

08009200 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800920a:	2300      	movs	r3, #0
 800920c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800920e:	4b53      	ldr	r3, [pc, #332]	@ (800935c <RCCEx_PLL2_Config+0x15c>)
 8009210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009212:	f003 0303 	and.w	r3, r3, #3
 8009216:	2b03      	cmp	r3, #3
 8009218:	d101      	bne.n	800921e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800921a:	2301      	movs	r3, #1
 800921c:	e099      	b.n	8009352 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800921e:	4b4f      	ldr	r3, [pc, #316]	@ (800935c <RCCEx_PLL2_Config+0x15c>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4a4e      	ldr	r2, [pc, #312]	@ (800935c <RCCEx_PLL2_Config+0x15c>)
 8009224:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009228:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800922a:	f7f8 fbc1 	bl	80019b0 <HAL_GetTick>
 800922e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009230:	e008      	b.n	8009244 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009232:	f7f8 fbbd 	bl	80019b0 <HAL_GetTick>
 8009236:	4602      	mov	r2, r0
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	1ad3      	subs	r3, r2, r3
 800923c:	2b02      	cmp	r3, #2
 800923e:	d901      	bls.n	8009244 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009240:	2303      	movs	r3, #3
 8009242:	e086      	b.n	8009352 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009244:	4b45      	ldr	r3, [pc, #276]	@ (800935c <RCCEx_PLL2_Config+0x15c>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800924c:	2b00      	cmp	r3, #0
 800924e:	d1f0      	bne.n	8009232 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009250:	4b42      	ldr	r3, [pc, #264]	@ (800935c <RCCEx_PLL2_Config+0x15c>)
 8009252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009254:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	031b      	lsls	r3, r3, #12
 800925e:	493f      	ldr	r1, [pc, #252]	@ (800935c <RCCEx_PLL2_Config+0x15c>)
 8009260:	4313      	orrs	r3, r2
 8009262:	628b      	str	r3, [r1, #40]	@ 0x28
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	3b01      	subs	r3, #1
 800926a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	689b      	ldr	r3, [r3, #8]
 8009272:	3b01      	subs	r3, #1
 8009274:	025b      	lsls	r3, r3, #9
 8009276:	b29b      	uxth	r3, r3
 8009278:	431a      	orrs	r2, r3
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	68db      	ldr	r3, [r3, #12]
 800927e:	3b01      	subs	r3, #1
 8009280:	041b      	lsls	r3, r3, #16
 8009282:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009286:	431a      	orrs	r2, r3
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	691b      	ldr	r3, [r3, #16]
 800928c:	3b01      	subs	r3, #1
 800928e:	061b      	lsls	r3, r3, #24
 8009290:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009294:	4931      	ldr	r1, [pc, #196]	@ (800935c <RCCEx_PLL2_Config+0x15c>)
 8009296:	4313      	orrs	r3, r2
 8009298:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800929a:	4b30      	ldr	r3, [pc, #192]	@ (800935c <RCCEx_PLL2_Config+0x15c>)
 800929c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800929e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	695b      	ldr	r3, [r3, #20]
 80092a6:	492d      	ldr	r1, [pc, #180]	@ (800935c <RCCEx_PLL2_Config+0x15c>)
 80092a8:	4313      	orrs	r3, r2
 80092aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80092ac:	4b2b      	ldr	r3, [pc, #172]	@ (800935c <RCCEx_PLL2_Config+0x15c>)
 80092ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092b0:	f023 0220 	bic.w	r2, r3, #32
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	699b      	ldr	r3, [r3, #24]
 80092b8:	4928      	ldr	r1, [pc, #160]	@ (800935c <RCCEx_PLL2_Config+0x15c>)
 80092ba:	4313      	orrs	r3, r2
 80092bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80092be:	4b27      	ldr	r3, [pc, #156]	@ (800935c <RCCEx_PLL2_Config+0x15c>)
 80092c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092c2:	4a26      	ldr	r2, [pc, #152]	@ (800935c <RCCEx_PLL2_Config+0x15c>)
 80092c4:	f023 0310 	bic.w	r3, r3, #16
 80092c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80092ca:	4b24      	ldr	r3, [pc, #144]	@ (800935c <RCCEx_PLL2_Config+0x15c>)
 80092cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80092ce:	4b24      	ldr	r3, [pc, #144]	@ (8009360 <RCCEx_PLL2_Config+0x160>)
 80092d0:	4013      	ands	r3, r2
 80092d2:	687a      	ldr	r2, [r7, #4]
 80092d4:	69d2      	ldr	r2, [r2, #28]
 80092d6:	00d2      	lsls	r2, r2, #3
 80092d8:	4920      	ldr	r1, [pc, #128]	@ (800935c <RCCEx_PLL2_Config+0x15c>)
 80092da:	4313      	orrs	r3, r2
 80092dc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80092de:	4b1f      	ldr	r3, [pc, #124]	@ (800935c <RCCEx_PLL2_Config+0x15c>)
 80092e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092e2:	4a1e      	ldr	r2, [pc, #120]	@ (800935c <RCCEx_PLL2_Config+0x15c>)
 80092e4:	f043 0310 	orr.w	r3, r3, #16
 80092e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d106      	bne.n	80092fe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80092f0:	4b1a      	ldr	r3, [pc, #104]	@ (800935c <RCCEx_PLL2_Config+0x15c>)
 80092f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092f4:	4a19      	ldr	r2, [pc, #100]	@ (800935c <RCCEx_PLL2_Config+0x15c>)
 80092f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80092fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80092fc:	e00f      	b.n	800931e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	2b01      	cmp	r3, #1
 8009302:	d106      	bne.n	8009312 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009304:	4b15      	ldr	r3, [pc, #84]	@ (800935c <RCCEx_PLL2_Config+0x15c>)
 8009306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009308:	4a14      	ldr	r2, [pc, #80]	@ (800935c <RCCEx_PLL2_Config+0x15c>)
 800930a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800930e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009310:	e005      	b.n	800931e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009312:	4b12      	ldr	r3, [pc, #72]	@ (800935c <RCCEx_PLL2_Config+0x15c>)
 8009314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009316:	4a11      	ldr	r2, [pc, #68]	@ (800935c <RCCEx_PLL2_Config+0x15c>)
 8009318:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800931c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800931e:	4b0f      	ldr	r3, [pc, #60]	@ (800935c <RCCEx_PLL2_Config+0x15c>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4a0e      	ldr	r2, [pc, #56]	@ (800935c <RCCEx_PLL2_Config+0x15c>)
 8009324:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009328:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800932a:	f7f8 fb41 	bl	80019b0 <HAL_GetTick>
 800932e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009330:	e008      	b.n	8009344 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009332:	f7f8 fb3d 	bl	80019b0 <HAL_GetTick>
 8009336:	4602      	mov	r2, r0
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	1ad3      	subs	r3, r2, r3
 800933c:	2b02      	cmp	r3, #2
 800933e:	d901      	bls.n	8009344 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009340:	2303      	movs	r3, #3
 8009342:	e006      	b.n	8009352 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009344:	4b05      	ldr	r3, [pc, #20]	@ (800935c <RCCEx_PLL2_Config+0x15c>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800934c:	2b00      	cmp	r3, #0
 800934e:	d0f0      	beq.n	8009332 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009350:	7bfb      	ldrb	r3, [r7, #15]
}
 8009352:	4618      	mov	r0, r3
 8009354:	3710      	adds	r7, #16
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}
 800935a:	bf00      	nop
 800935c:	58024400 	.word	0x58024400
 8009360:	ffff0007 	.word	0xffff0007

08009364 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b084      	sub	sp, #16
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800936e:	2300      	movs	r3, #0
 8009370:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009372:	4b53      	ldr	r3, [pc, #332]	@ (80094c0 <RCCEx_PLL3_Config+0x15c>)
 8009374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009376:	f003 0303 	and.w	r3, r3, #3
 800937a:	2b03      	cmp	r3, #3
 800937c:	d101      	bne.n	8009382 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800937e:	2301      	movs	r3, #1
 8009380:	e099      	b.n	80094b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009382:	4b4f      	ldr	r3, [pc, #316]	@ (80094c0 <RCCEx_PLL3_Config+0x15c>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a4e      	ldr	r2, [pc, #312]	@ (80094c0 <RCCEx_PLL3_Config+0x15c>)
 8009388:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800938c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800938e:	f7f8 fb0f 	bl	80019b0 <HAL_GetTick>
 8009392:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009394:	e008      	b.n	80093a8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009396:	f7f8 fb0b 	bl	80019b0 <HAL_GetTick>
 800939a:	4602      	mov	r2, r0
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	1ad3      	subs	r3, r2, r3
 80093a0:	2b02      	cmp	r3, #2
 80093a2:	d901      	bls.n	80093a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80093a4:	2303      	movs	r3, #3
 80093a6:	e086      	b.n	80094b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80093a8:	4b45      	ldr	r3, [pc, #276]	@ (80094c0 <RCCEx_PLL3_Config+0x15c>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d1f0      	bne.n	8009396 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80093b4:	4b42      	ldr	r3, [pc, #264]	@ (80094c0 <RCCEx_PLL3_Config+0x15c>)
 80093b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093b8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	051b      	lsls	r3, r3, #20
 80093c2:	493f      	ldr	r1, [pc, #252]	@ (80094c0 <RCCEx_PLL3_Config+0x15c>)
 80093c4:	4313      	orrs	r3, r2
 80093c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	3b01      	subs	r3, #1
 80093ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	3b01      	subs	r3, #1
 80093d8:	025b      	lsls	r3, r3, #9
 80093da:	b29b      	uxth	r3, r3
 80093dc:	431a      	orrs	r2, r3
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	68db      	ldr	r3, [r3, #12]
 80093e2:	3b01      	subs	r3, #1
 80093e4:	041b      	lsls	r3, r3, #16
 80093e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80093ea:	431a      	orrs	r2, r3
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	691b      	ldr	r3, [r3, #16]
 80093f0:	3b01      	subs	r3, #1
 80093f2:	061b      	lsls	r3, r3, #24
 80093f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80093f8:	4931      	ldr	r1, [pc, #196]	@ (80094c0 <RCCEx_PLL3_Config+0x15c>)
 80093fa:	4313      	orrs	r3, r2
 80093fc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80093fe:	4b30      	ldr	r3, [pc, #192]	@ (80094c0 <RCCEx_PLL3_Config+0x15c>)
 8009400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009402:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	695b      	ldr	r3, [r3, #20]
 800940a:	492d      	ldr	r1, [pc, #180]	@ (80094c0 <RCCEx_PLL3_Config+0x15c>)
 800940c:	4313      	orrs	r3, r2
 800940e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009410:	4b2b      	ldr	r3, [pc, #172]	@ (80094c0 <RCCEx_PLL3_Config+0x15c>)
 8009412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009414:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	699b      	ldr	r3, [r3, #24]
 800941c:	4928      	ldr	r1, [pc, #160]	@ (80094c0 <RCCEx_PLL3_Config+0x15c>)
 800941e:	4313      	orrs	r3, r2
 8009420:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009422:	4b27      	ldr	r3, [pc, #156]	@ (80094c0 <RCCEx_PLL3_Config+0x15c>)
 8009424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009426:	4a26      	ldr	r2, [pc, #152]	@ (80094c0 <RCCEx_PLL3_Config+0x15c>)
 8009428:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800942c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800942e:	4b24      	ldr	r3, [pc, #144]	@ (80094c0 <RCCEx_PLL3_Config+0x15c>)
 8009430:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009432:	4b24      	ldr	r3, [pc, #144]	@ (80094c4 <RCCEx_PLL3_Config+0x160>)
 8009434:	4013      	ands	r3, r2
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	69d2      	ldr	r2, [r2, #28]
 800943a:	00d2      	lsls	r2, r2, #3
 800943c:	4920      	ldr	r1, [pc, #128]	@ (80094c0 <RCCEx_PLL3_Config+0x15c>)
 800943e:	4313      	orrs	r3, r2
 8009440:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009442:	4b1f      	ldr	r3, [pc, #124]	@ (80094c0 <RCCEx_PLL3_Config+0x15c>)
 8009444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009446:	4a1e      	ldr	r2, [pc, #120]	@ (80094c0 <RCCEx_PLL3_Config+0x15c>)
 8009448:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800944c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d106      	bne.n	8009462 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009454:	4b1a      	ldr	r3, [pc, #104]	@ (80094c0 <RCCEx_PLL3_Config+0x15c>)
 8009456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009458:	4a19      	ldr	r2, [pc, #100]	@ (80094c0 <RCCEx_PLL3_Config+0x15c>)
 800945a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800945e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009460:	e00f      	b.n	8009482 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	2b01      	cmp	r3, #1
 8009466:	d106      	bne.n	8009476 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009468:	4b15      	ldr	r3, [pc, #84]	@ (80094c0 <RCCEx_PLL3_Config+0x15c>)
 800946a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800946c:	4a14      	ldr	r2, [pc, #80]	@ (80094c0 <RCCEx_PLL3_Config+0x15c>)
 800946e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009472:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009474:	e005      	b.n	8009482 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009476:	4b12      	ldr	r3, [pc, #72]	@ (80094c0 <RCCEx_PLL3_Config+0x15c>)
 8009478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800947a:	4a11      	ldr	r2, [pc, #68]	@ (80094c0 <RCCEx_PLL3_Config+0x15c>)
 800947c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009480:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009482:	4b0f      	ldr	r3, [pc, #60]	@ (80094c0 <RCCEx_PLL3_Config+0x15c>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a0e      	ldr	r2, [pc, #56]	@ (80094c0 <RCCEx_PLL3_Config+0x15c>)
 8009488:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800948c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800948e:	f7f8 fa8f 	bl	80019b0 <HAL_GetTick>
 8009492:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009494:	e008      	b.n	80094a8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009496:	f7f8 fa8b 	bl	80019b0 <HAL_GetTick>
 800949a:	4602      	mov	r2, r0
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	1ad3      	subs	r3, r2, r3
 80094a0:	2b02      	cmp	r3, #2
 80094a2:	d901      	bls.n	80094a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80094a4:	2303      	movs	r3, #3
 80094a6:	e006      	b.n	80094b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80094a8:	4b05      	ldr	r3, [pc, #20]	@ (80094c0 <RCCEx_PLL3_Config+0x15c>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d0f0      	beq.n	8009496 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80094b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3710      	adds	r7, #16
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	bf00      	nop
 80094c0:	58024400 	.word	0x58024400
 80094c4:	ffff0007 	.word	0xffff0007

080094c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b082      	sub	sp, #8
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d101      	bne.n	80094da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80094d6:	2301      	movs	r3, #1
 80094d8:	e042      	b.n	8009560 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d106      	bne.n	80094f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2200      	movs	r2, #0
 80094e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f7f8 f845 	bl	800157c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2224      	movs	r2, #36	@ 0x24
 80094f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	681a      	ldr	r2, [r3, #0]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f022 0201 	bic.w	r2, r2, #1
 8009508:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800950e:	2b00      	cmp	r3, #0
 8009510:	d002      	beq.n	8009518 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 fe1e 	bl	800a154 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 f8b3 	bl	8009684 <UART_SetConfig>
 800951e:	4603      	mov	r3, r0
 8009520:	2b01      	cmp	r3, #1
 8009522:	d101      	bne.n	8009528 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009524:	2301      	movs	r3, #1
 8009526:	e01b      	b.n	8009560 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	685a      	ldr	r2, [r3, #4]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009536:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	689a      	ldr	r2, [r3, #8]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009546:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f042 0201 	orr.w	r2, r2, #1
 8009556:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 fe9d 	bl	800a298 <UART_CheckIdleState>
 800955e:	4603      	mov	r3, r0
}
 8009560:	4618      	mov	r0, r3
 8009562:	3708      	adds	r7, #8
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b08a      	sub	sp, #40	@ 0x28
 800956c:	af02      	add	r7, sp, #8
 800956e:	60f8      	str	r0, [r7, #12]
 8009570:	60b9      	str	r1, [r7, #8]
 8009572:	603b      	str	r3, [r7, #0]
 8009574:	4613      	mov	r3, r2
 8009576:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800957e:	2b20      	cmp	r3, #32
 8009580:	d17b      	bne.n	800967a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d002      	beq.n	800958e <HAL_UART_Transmit+0x26>
 8009588:	88fb      	ldrh	r3, [r7, #6]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d101      	bne.n	8009592 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800958e:	2301      	movs	r3, #1
 8009590:	e074      	b.n	800967c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2200      	movs	r2, #0
 8009596:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2221      	movs	r2, #33	@ 0x21
 800959e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80095a2:	f7f8 fa05 	bl	80019b0 <HAL_GetTick>
 80095a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	88fa      	ldrh	r2, [r7, #6]
 80095ac:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	88fa      	ldrh	r2, [r7, #6]
 80095b4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	689b      	ldr	r3, [r3, #8]
 80095bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095c0:	d108      	bne.n	80095d4 <HAL_UART_Transmit+0x6c>
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	691b      	ldr	r3, [r3, #16]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d104      	bne.n	80095d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80095ca:	2300      	movs	r3, #0
 80095cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	61bb      	str	r3, [r7, #24]
 80095d2:	e003      	b.n	80095dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80095d8:	2300      	movs	r3, #0
 80095da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80095dc:	e030      	b.n	8009640 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	9300      	str	r3, [sp, #0]
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	2200      	movs	r2, #0
 80095e6:	2180      	movs	r1, #128	@ 0x80
 80095e8:	68f8      	ldr	r0, [r7, #12]
 80095ea:	f000 feff 	bl	800a3ec <UART_WaitOnFlagUntilTimeout>
 80095ee:	4603      	mov	r3, r0
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d005      	beq.n	8009600 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2220      	movs	r2, #32
 80095f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80095fc:	2303      	movs	r3, #3
 80095fe:	e03d      	b.n	800967c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009600:	69fb      	ldr	r3, [r7, #28]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d10b      	bne.n	800961e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009606:	69bb      	ldr	r3, [r7, #24]
 8009608:	881b      	ldrh	r3, [r3, #0]
 800960a:	461a      	mov	r2, r3
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009614:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009616:	69bb      	ldr	r3, [r7, #24]
 8009618:	3302      	adds	r3, #2
 800961a:	61bb      	str	r3, [r7, #24]
 800961c:	e007      	b.n	800962e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800961e:	69fb      	ldr	r3, [r7, #28]
 8009620:	781a      	ldrb	r2, [r3, #0]
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009628:	69fb      	ldr	r3, [r7, #28]
 800962a:	3301      	adds	r3, #1
 800962c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009634:	b29b      	uxth	r3, r3
 8009636:	3b01      	subs	r3, #1
 8009638:	b29a      	uxth	r2, r3
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009646:	b29b      	uxth	r3, r3
 8009648:	2b00      	cmp	r3, #0
 800964a:	d1c8      	bne.n	80095de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	9300      	str	r3, [sp, #0]
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	2200      	movs	r2, #0
 8009654:	2140      	movs	r1, #64	@ 0x40
 8009656:	68f8      	ldr	r0, [r7, #12]
 8009658:	f000 fec8 	bl	800a3ec <UART_WaitOnFlagUntilTimeout>
 800965c:	4603      	mov	r3, r0
 800965e:	2b00      	cmp	r3, #0
 8009660:	d005      	beq.n	800966e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2220      	movs	r2, #32
 8009666:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800966a:	2303      	movs	r3, #3
 800966c:	e006      	b.n	800967c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2220      	movs	r2, #32
 8009672:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009676:	2300      	movs	r3, #0
 8009678:	e000      	b.n	800967c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800967a:	2302      	movs	r3, #2
  }
}
 800967c:	4618      	mov	r0, r3
 800967e:	3720      	adds	r7, #32
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009688:	b092      	sub	sp, #72	@ 0x48
 800968a:	af00      	add	r7, sp, #0
 800968c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800968e:	2300      	movs	r3, #0
 8009690:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	689a      	ldr	r2, [r3, #8]
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	691b      	ldr	r3, [r3, #16]
 800969c:	431a      	orrs	r2, r3
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	695b      	ldr	r3, [r3, #20]
 80096a2:	431a      	orrs	r2, r3
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	69db      	ldr	r3, [r3, #28]
 80096a8:	4313      	orrs	r3, r2
 80096aa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	681a      	ldr	r2, [r3, #0]
 80096b2:	4bbe      	ldr	r3, [pc, #760]	@ (80099ac <UART_SetConfig+0x328>)
 80096b4:	4013      	ands	r3, r2
 80096b6:	697a      	ldr	r2, [r7, #20]
 80096b8:	6812      	ldr	r2, [r2, #0]
 80096ba:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80096bc:	430b      	orrs	r3, r1
 80096be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	685b      	ldr	r3, [r3, #4]
 80096c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	68da      	ldr	r2, [r3, #12]
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	430a      	orrs	r2, r1
 80096d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	699b      	ldr	r3, [r3, #24]
 80096da:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4ab3      	ldr	r2, [pc, #716]	@ (80099b0 <UART_SetConfig+0x32c>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d004      	beq.n	80096f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	6a1b      	ldr	r3, [r3, #32]
 80096ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80096ec:	4313      	orrs	r3, r2
 80096ee:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	689a      	ldr	r2, [r3, #8]
 80096f6:	4baf      	ldr	r3, [pc, #700]	@ (80099b4 <UART_SetConfig+0x330>)
 80096f8:	4013      	ands	r3, r2
 80096fa:	697a      	ldr	r2, [r7, #20]
 80096fc:	6812      	ldr	r2, [r2, #0]
 80096fe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009700:	430b      	orrs	r3, r1
 8009702:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800970a:	f023 010f 	bic.w	r1, r3, #15
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	430a      	orrs	r2, r1
 8009718:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4aa6      	ldr	r2, [pc, #664]	@ (80099b8 <UART_SetConfig+0x334>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d177      	bne.n	8009814 <UART_SetConfig+0x190>
 8009724:	4ba5      	ldr	r3, [pc, #660]	@ (80099bc <UART_SetConfig+0x338>)
 8009726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009728:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800972c:	2b28      	cmp	r3, #40	@ 0x28
 800972e:	d86d      	bhi.n	800980c <UART_SetConfig+0x188>
 8009730:	a201      	add	r2, pc, #4	@ (adr r2, 8009738 <UART_SetConfig+0xb4>)
 8009732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009736:	bf00      	nop
 8009738:	080097dd 	.word	0x080097dd
 800973c:	0800980d 	.word	0x0800980d
 8009740:	0800980d 	.word	0x0800980d
 8009744:	0800980d 	.word	0x0800980d
 8009748:	0800980d 	.word	0x0800980d
 800974c:	0800980d 	.word	0x0800980d
 8009750:	0800980d 	.word	0x0800980d
 8009754:	0800980d 	.word	0x0800980d
 8009758:	080097e5 	.word	0x080097e5
 800975c:	0800980d 	.word	0x0800980d
 8009760:	0800980d 	.word	0x0800980d
 8009764:	0800980d 	.word	0x0800980d
 8009768:	0800980d 	.word	0x0800980d
 800976c:	0800980d 	.word	0x0800980d
 8009770:	0800980d 	.word	0x0800980d
 8009774:	0800980d 	.word	0x0800980d
 8009778:	080097ed 	.word	0x080097ed
 800977c:	0800980d 	.word	0x0800980d
 8009780:	0800980d 	.word	0x0800980d
 8009784:	0800980d 	.word	0x0800980d
 8009788:	0800980d 	.word	0x0800980d
 800978c:	0800980d 	.word	0x0800980d
 8009790:	0800980d 	.word	0x0800980d
 8009794:	0800980d 	.word	0x0800980d
 8009798:	080097f5 	.word	0x080097f5
 800979c:	0800980d 	.word	0x0800980d
 80097a0:	0800980d 	.word	0x0800980d
 80097a4:	0800980d 	.word	0x0800980d
 80097a8:	0800980d 	.word	0x0800980d
 80097ac:	0800980d 	.word	0x0800980d
 80097b0:	0800980d 	.word	0x0800980d
 80097b4:	0800980d 	.word	0x0800980d
 80097b8:	080097fd 	.word	0x080097fd
 80097bc:	0800980d 	.word	0x0800980d
 80097c0:	0800980d 	.word	0x0800980d
 80097c4:	0800980d 	.word	0x0800980d
 80097c8:	0800980d 	.word	0x0800980d
 80097cc:	0800980d 	.word	0x0800980d
 80097d0:	0800980d 	.word	0x0800980d
 80097d4:	0800980d 	.word	0x0800980d
 80097d8:	08009805 	.word	0x08009805
 80097dc:	2301      	movs	r3, #1
 80097de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097e2:	e222      	b.n	8009c2a <UART_SetConfig+0x5a6>
 80097e4:	2304      	movs	r3, #4
 80097e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ea:	e21e      	b.n	8009c2a <UART_SetConfig+0x5a6>
 80097ec:	2308      	movs	r3, #8
 80097ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097f2:	e21a      	b.n	8009c2a <UART_SetConfig+0x5a6>
 80097f4:	2310      	movs	r3, #16
 80097f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097fa:	e216      	b.n	8009c2a <UART_SetConfig+0x5a6>
 80097fc:	2320      	movs	r3, #32
 80097fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009802:	e212      	b.n	8009c2a <UART_SetConfig+0x5a6>
 8009804:	2340      	movs	r3, #64	@ 0x40
 8009806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800980a:	e20e      	b.n	8009c2a <UART_SetConfig+0x5a6>
 800980c:	2380      	movs	r3, #128	@ 0x80
 800980e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009812:	e20a      	b.n	8009c2a <UART_SetConfig+0x5a6>
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4a69      	ldr	r2, [pc, #420]	@ (80099c0 <UART_SetConfig+0x33c>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d130      	bne.n	8009880 <UART_SetConfig+0x1fc>
 800981e:	4b67      	ldr	r3, [pc, #412]	@ (80099bc <UART_SetConfig+0x338>)
 8009820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009822:	f003 0307 	and.w	r3, r3, #7
 8009826:	2b05      	cmp	r3, #5
 8009828:	d826      	bhi.n	8009878 <UART_SetConfig+0x1f4>
 800982a:	a201      	add	r2, pc, #4	@ (adr r2, 8009830 <UART_SetConfig+0x1ac>)
 800982c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009830:	08009849 	.word	0x08009849
 8009834:	08009851 	.word	0x08009851
 8009838:	08009859 	.word	0x08009859
 800983c:	08009861 	.word	0x08009861
 8009840:	08009869 	.word	0x08009869
 8009844:	08009871 	.word	0x08009871
 8009848:	2300      	movs	r3, #0
 800984a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800984e:	e1ec      	b.n	8009c2a <UART_SetConfig+0x5a6>
 8009850:	2304      	movs	r3, #4
 8009852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009856:	e1e8      	b.n	8009c2a <UART_SetConfig+0x5a6>
 8009858:	2308      	movs	r3, #8
 800985a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800985e:	e1e4      	b.n	8009c2a <UART_SetConfig+0x5a6>
 8009860:	2310      	movs	r3, #16
 8009862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009866:	e1e0      	b.n	8009c2a <UART_SetConfig+0x5a6>
 8009868:	2320      	movs	r3, #32
 800986a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800986e:	e1dc      	b.n	8009c2a <UART_SetConfig+0x5a6>
 8009870:	2340      	movs	r3, #64	@ 0x40
 8009872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009876:	e1d8      	b.n	8009c2a <UART_SetConfig+0x5a6>
 8009878:	2380      	movs	r3, #128	@ 0x80
 800987a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800987e:	e1d4      	b.n	8009c2a <UART_SetConfig+0x5a6>
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4a4f      	ldr	r2, [pc, #316]	@ (80099c4 <UART_SetConfig+0x340>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d130      	bne.n	80098ec <UART_SetConfig+0x268>
 800988a:	4b4c      	ldr	r3, [pc, #304]	@ (80099bc <UART_SetConfig+0x338>)
 800988c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800988e:	f003 0307 	and.w	r3, r3, #7
 8009892:	2b05      	cmp	r3, #5
 8009894:	d826      	bhi.n	80098e4 <UART_SetConfig+0x260>
 8009896:	a201      	add	r2, pc, #4	@ (adr r2, 800989c <UART_SetConfig+0x218>)
 8009898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800989c:	080098b5 	.word	0x080098b5
 80098a0:	080098bd 	.word	0x080098bd
 80098a4:	080098c5 	.word	0x080098c5
 80098a8:	080098cd 	.word	0x080098cd
 80098ac:	080098d5 	.word	0x080098d5
 80098b0:	080098dd 	.word	0x080098dd
 80098b4:	2300      	movs	r3, #0
 80098b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ba:	e1b6      	b.n	8009c2a <UART_SetConfig+0x5a6>
 80098bc:	2304      	movs	r3, #4
 80098be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098c2:	e1b2      	b.n	8009c2a <UART_SetConfig+0x5a6>
 80098c4:	2308      	movs	r3, #8
 80098c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ca:	e1ae      	b.n	8009c2a <UART_SetConfig+0x5a6>
 80098cc:	2310      	movs	r3, #16
 80098ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098d2:	e1aa      	b.n	8009c2a <UART_SetConfig+0x5a6>
 80098d4:	2320      	movs	r3, #32
 80098d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098da:	e1a6      	b.n	8009c2a <UART_SetConfig+0x5a6>
 80098dc:	2340      	movs	r3, #64	@ 0x40
 80098de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098e2:	e1a2      	b.n	8009c2a <UART_SetConfig+0x5a6>
 80098e4:	2380      	movs	r3, #128	@ 0x80
 80098e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ea:	e19e      	b.n	8009c2a <UART_SetConfig+0x5a6>
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	4a35      	ldr	r2, [pc, #212]	@ (80099c8 <UART_SetConfig+0x344>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d130      	bne.n	8009958 <UART_SetConfig+0x2d4>
 80098f6:	4b31      	ldr	r3, [pc, #196]	@ (80099bc <UART_SetConfig+0x338>)
 80098f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098fa:	f003 0307 	and.w	r3, r3, #7
 80098fe:	2b05      	cmp	r3, #5
 8009900:	d826      	bhi.n	8009950 <UART_SetConfig+0x2cc>
 8009902:	a201      	add	r2, pc, #4	@ (adr r2, 8009908 <UART_SetConfig+0x284>)
 8009904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009908:	08009921 	.word	0x08009921
 800990c:	08009929 	.word	0x08009929
 8009910:	08009931 	.word	0x08009931
 8009914:	08009939 	.word	0x08009939
 8009918:	08009941 	.word	0x08009941
 800991c:	08009949 	.word	0x08009949
 8009920:	2300      	movs	r3, #0
 8009922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009926:	e180      	b.n	8009c2a <UART_SetConfig+0x5a6>
 8009928:	2304      	movs	r3, #4
 800992a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800992e:	e17c      	b.n	8009c2a <UART_SetConfig+0x5a6>
 8009930:	2308      	movs	r3, #8
 8009932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009936:	e178      	b.n	8009c2a <UART_SetConfig+0x5a6>
 8009938:	2310      	movs	r3, #16
 800993a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800993e:	e174      	b.n	8009c2a <UART_SetConfig+0x5a6>
 8009940:	2320      	movs	r3, #32
 8009942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009946:	e170      	b.n	8009c2a <UART_SetConfig+0x5a6>
 8009948:	2340      	movs	r3, #64	@ 0x40
 800994a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800994e:	e16c      	b.n	8009c2a <UART_SetConfig+0x5a6>
 8009950:	2380      	movs	r3, #128	@ 0x80
 8009952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009956:	e168      	b.n	8009c2a <UART_SetConfig+0x5a6>
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4a1b      	ldr	r2, [pc, #108]	@ (80099cc <UART_SetConfig+0x348>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d142      	bne.n	80099e8 <UART_SetConfig+0x364>
 8009962:	4b16      	ldr	r3, [pc, #88]	@ (80099bc <UART_SetConfig+0x338>)
 8009964:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009966:	f003 0307 	and.w	r3, r3, #7
 800996a:	2b05      	cmp	r3, #5
 800996c:	d838      	bhi.n	80099e0 <UART_SetConfig+0x35c>
 800996e:	a201      	add	r2, pc, #4	@ (adr r2, 8009974 <UART_SetConfig+0x2f0>)
 8009970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009974:	0800998d 	.word	0x0800998d
 8009978:	08009995 	.word	0x08009995
 800997c:	0800999d 	.word	0x0800999d
 8009980:	080099a5 	.word	0x080099a5
 8009984:	080099d1 	.word	0x080099d1
 8009988:	080099d9 	.word	0x080099d9
 800998c:	2300      	movs	r3, #0
 800998e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009992:	e14a      	b.n	8009c2a <UART_SetConfig+0x5a6>
 8009994:	2304      	movs	r3, #4
 8009996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800999a:	e146      	b.n	8009c2a <UART_SetConfig+0x5a6>
 800999c:	2308      	movs	r3, #8
 800999e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099a2:	e142      	b.n	8009c2a <UART_SetConfig+0x5a6>
 80099a4:	2310      	movs	r3, #16
 80099a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099aa:	e13e      	b.n	8009c2a <UART_SetConfig+0x5a6>
 80099ac:	cfff69f3 	.word	0xcfff69f3
 80099b0:	58000c00 	.word	0x58000c00
 80099b4:	11fff4ff 	.word	0x11fff4ff
 80099b8:	40011000 	.word	0x40011000
 80099bc:	58024400 	.word	0x58024400
 80099c0:	40004400 	.word	0x40004400
 80099c4:	40004800 	.word	0x40004800
 80099c8:	40004c00 	.word	0x40004c00
 80099cc:	40005000 	.word	0x40005000
 80099d0:	2320      	movs	r3, #32
 80099d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099d6:	e128      	b.n	8009c2a <UART_SetConfig+0x5a6>
 80099d8:	2340      	movs	r3, #64	@ 0x40
 80099da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099de:	e124      	b.n	8009c2a <UART_SetConfig+0x5a6>
 80099e0:	2380      	movs	r3, #128	@ 0x80
 80099e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099e6:	e120      	b.n	8009c2a <UART_SetConfig+0x5a6>
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4acb      	ldr	r2, [pc, #812]	@ (8009d1c <UART_SetConfig+0x698>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d176      	bne.n	8009ae0 <UART_SetConfig+0x45c>
 80099f2:	4bcb      	ldr	r3, [pc, #812]	@ (8009d20 <UART_SetConfig+0x69c>)
 80099f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80099fa:	2b28      	cmp	r3, #40	@ 0x28
 80099fc:	d86c      	bhi.n	8009ad8 <UART_SetConfig+0x454>
 80099fe:	a201      	add	r2, pc, #4	@ (adr r2, 8009a04 <UART_SetConfig+0x380>)
 8009a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a04:	08009aa9 	.word	0x08009aa9
 8009a08:	08009ad9 	.word	0x08009ad9
 8009a0c:	08009ad9 	.word	0x08009ad9
 8009a10:	08009ad9 	.word	0x08009ad9
 8009a14:	08009ad9 	.word	0x08009ad9
 8009a18:	08009ad9 	.word	0x08009ad9
 8009a1c:	08009ad9 	.word	0x08009ad9
 8009a20:	08009ad9 	.word	0x08009ad9
 8009a24:	08009ab1 	.word	0x08009ab1
 8009a28:	08009ad9 	.word	0x08009ad9
 8009a2c:	08009ad9 	.word	0x08009ad9
 8009a30:	08009ad9 	.word	0x08009ad9
 8009a34:	08009ad9 	.word	0x08009ad9
 8009a38:	08009ad9 	.word	0x08009ad9
 8009a3c:	08009ad9 	.word	0x08009ad9
 8009a40:	08009ad9 	.word	0x08009ad9
 8009a44:	08009ab9 	.word	0x08009ab9
 8009a48:	08009ad9 	.word	0x08009ad9
 8009a4c:	08009ad9 	.word	0x08009ad9
 8009a50:	08009ad9 	.word	0x08009ad9
 8009a54:	08009ad9 	.word	0x08009ad9
 8009a58:	08009ad9 	.word	0x08009ad9
 8009a5c:	08009ad9 	.word	0x08009ad9
 8009a60:	08009ad9 	.word	0x08009ad9
 8009a64:	08009ac1 	.word	0x08009ac1
 8009a68:	08009ad9 	.word	0x08009ad9
 8009a6c:	08009ad9 	.word	0x08009ad9
 8009a70:	08009ad9 	.word	0x08009ad9
 8009a74:	08009ad9 	.word	0x08009ad9
 8009a78:	08009ad9 	.word	0x08009ad9
 8009a7c:	08009ad9 	.word	0x08009ad9
 8009a80:	08009ad9 	.word	0x08009ad9
 8009a84:	08009ac9 	.word	0x08009ac9
 8009a88:	08009ad9 	.word	0x08009ad9
 8009a8c:	08009ad9 	.word	0x08009ad9
 8009a90:	08009ad9 	.word	0x08009ad9
 8009a94:	08009ad9 	.word	0x08009ad9
 8009a98:	08009ad9 	.word	0x08009ad9
 8009a9c:	08009ad9 	.word	0x08009ad9
 8009aa0:	08009ad9 	.word	0x08009ad9
 8009aa4:	08009ad1 	.word	0x08009ad1
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aae:	e0bc      	b.n	8009c2a <UART_SetConfig+0x5a6>
 8009ab0:	2304      	movs	r3, #4
 8009ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ab6:	e0b8      	b.n	8009c2a <UART_SetConfig+0x5a6>
 8009ab8:	2308      	movs	r3, #8
 8009aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009abe:	e0b4      	b.n	8009c2a <UART_SetConfig+0x5a6>
 8009ac0:	2310      	movs	r3, #16
 8009ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ac6:	e0b0      	b.n	8009c2a <UART_SetConfig+0x5a6>
 8009ac8:	2320      	movs	r3, #32
 8009aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ace:	e0ac      	b.n	8009c2a <UART_SetConfig+0x5a6>
 8009ad0:	2340      	movs	r3, #64	@ 0x40
 8009ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ad6:	e0a8      	b.n	8009c2a <UART_SetConfig+0x5a6>
 8009ad8:	2380      	movs	r3, #128	@ 0x80
 8009ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ade:	e0a4      	b.n	8009c2a <UART_SetConfig+0x5a6>
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4a8f      	ldr	r2, [pc, #572]	@ (8009d24 <UART_SetConfig+0x6a0>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d130      	bne.n	8009b4c <UART_SetConfig+0x4c8>
 8009aea:	4b8d      	ldr	r3, [pc, #564]	@ (8009d20 <UART_SetConfig+0x69c>)
 8009aec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009aee:	f003 0307 	and.w	r3, r3, #7
 8009af2:	2b05      	cmp	r3, #5
 8009af4:	d826      	bhi.n	8009b44 <UART_SetConfig+0x4c0>
 8009af6:	a201      	add	r2, pc, #4	@ (adr r2, 8009afc <UART_SetConfig+0x478>)
 8009af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009afc:	08009b15 	.word	0x08009b15
 8009b00:	08009b1d 	.word	0x08009b1d
 8009b04:	08009b25 	.word	0x08009b25
 8009b08:	08009b2d 	.word	0x08009b2d
 8009b0c:	08009b35 	.word	0x08009b35
 8009b10:	08009b3d 	.word	0x08009b3d
 8009b14:	2300      	movs	r3, #0
 8009b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b1a:	e086      	b.n	8009c2a <UART_SetConfig+0x5a6>
 8009b1c:	2304      	movs	r3, #4
 8009b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b22:	e082      	b.n	8009c2a <UART_SetConfig+0x5a6>
 8009b24:	2308      	movs	r3, #8
 8009b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b2a:	e07e      	b.n	8009c2a <UART_SetConfig+0x5a6>
 8009b2c:	2310      	movs	r3, #16
 8009b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b32:	e07a      	b.n	8009c2a <UART_SetConfig+0x5a6>
 8009b34:	2320      	movs	r3, #32
 8009b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b3a:	e076      	b.n	8009c2a <UART_SetConfig+0x5a6>
 8009b3c:	2340      	movs	r3, #64	@ 0x40
 8009b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b42:	e072      	b.n	8009c2a <UART_SetConfig+0x5a6>
 8009b44:	2380      	movs	r3, #128	@ 0x80
 8009b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b4a:	e06e      	b.n	8009c2a <UART_SetConfig+0x5a6>
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4a75      	ldr	r2, [pc, #468]	@ (8009d28 <UART_SetConfig+0x6a4>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d130      	bne.n	8009bb8 <UART_SetConfig+0x534>
 8009b56:	4b72      	ldr	r3, [pc, #456]	@ (8009d20 <UART_SetConfig+0x69c>)
 8009b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b5a:	f003 0307 	and.w	r3, r3, #7
 8009b5e:	2b05      	cmp	r3, #5
 8009b60:	d826      	bhi.n	8009bb0 <UART_SetConfig+0x52c>
 8009b62:	a201      	add	r2, pc, #4	@ (adr r2, 8009b68 <UART_SetConfig+0x4e4>)
 8009b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b68:	08009b81 	.word	0x08009b81
 8009b6c:	08009b89 	.word	0x08009b89
 8009b70:	08009b91 	.word	0x08009b91
 8009b74:	08009b99 	.word	0x08009b99
 8009b78:	08009ba1 	.word	0x08009ba1
 8009b7c:	08009ba9 	.word	0x08009ba9
 8009b80:	2300      	movs	r3, #0
 8009b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b86:	e050      	b.n	8009c2a <UART_SetConfig+0x5a6>
 8009b88:	2304      	movs	r3, #4
 8009b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b8e:	e04c      	b.n	8009c2a <UART_SetConfig+0x5a6>
 8009b90:	2308      	movs	r3, #8
 8009b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b96:	e048      	b.n	8009c2a <UART_SetConfig+0x5a6>
 8009b98:	2310      	movs	r3, #16
 8009b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b9e:	e044      	b.n	8009c2a <UART_SetConfig+0x5a6>
 8009ba0:	2320      	movs	r3, #32
 8009ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ba6:	e040      	b.n	8009c2a <UART_SetConfig+0x5a6>
 8009ba8:	2340      	movs	r3, #64	@ 0x40
 8009baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bae:	e03c      	b.n	8009c2a <UART_SetConfig+0x5a6>
 8009bb0:	2380      	movs	r3, #128	@ 0x80
 8009bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bb6:	e038      	b.n	8009c2a <UART_SetConfig+0x5a6>
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a5b      	ldr	r2, [pc, #364]	@ (8009d2c <UART_SetConfig+0x6a8>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d130      	bne.n	8009c24 <UART_SetConfig+0x5a0>
 8009bc2:	4b57      	ldr	r3, [pc, #348]	@ (8009d20 <UART_SetConfig+0x69c>)
 8009bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bc6:	f003 0307 	and.w	r3, r3, #7
 8009bca:	2b05      	cmp	r3, #5
 8009bcc:	d826      	bhi.n	8009c1c <UART_SetConfig+0x598>
 8009bce:	a201      	add	r2, pc, #4	@ (adr r2, 8009bd4 <UART_SetConfig+0x550>)
 8009bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bd4:	08009bed 	.word	0x08009bed
 8009bd8:	08009bf5 	.word	0x08009bf5
 8009bdc:	08009bfd 	.word	0x08009bfd
 8009be0:	08009c05 	.word	0x08009c05
 8009be4:	08009c0d 	.word	0x08009c0d
 8009be8:	08009c15 	.word	0x08009c15
 8009bec:	2302      	movs	r3, #2
 8009bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bf2:	e01a      	b.n	8009c2a <UART_SetConfig+0x5a6>
 8009bf4:	2304      	movs	r3, #4
 8009bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bfa:	e016      	b.n	8009c2a <UART_SetConfig+0x5a6>
 8009bfc:	2308      	movs	r3, #8
 8009bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c02:	e012      	b.n	8009c2a <UART_SetConfig+0x5a6>
 8009c04:	2310      	movs	r3, #16
 8009c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c0a:	e00e      	b.n	8009c2a <UART_SetConfig+0x5a6>
 8009c0c:	2320      	movs	r3, #32
 8009c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c12:	e00a      	b.n	8009c2a <UART_SetConfig+0x5a6>
 8009c14:	2340      	movs	r3, #64	@ 0x40
 8009c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c1a:	e006      	b.n	8009c2a <UART_SetConfig+0x5a6>
 8009c1c:	2380      	movs	r3, #128	@ 0x80
 8009c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c22:	e002      	b.n	8009c2a <UART_SetConfig+0x5a6>
 8009c24:	2380      	movs	r3, #128	@ 0x80
 8009c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4a3f      	ldr	r2, [pc, #252]	@ (8009d2c <UART_SetConfig+0x6a8>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	f040 80f8 	bne.w	8009e26 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009c36:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009c3a:	2b20      	cmp	r3, #32
 8009c3c:	dc46      	bgt.n	8009ccc <UART_SetConfig+0x648>
 8009c3e:	2b02      	cmp	r3, #2
 8009c40:	f2c0 8082 	blt.w	8009d48 <UART_SetConfig+0x6c4>
 8009c44:	3b02      	subs	r3, #2
 8009c46:	2b1e      	cmp	r3, #30
 8009c48:	d87e      	bhi.n	8009d48 <UART_SetConfig+0x6c4>
 8009c4a:	a201      	add	r2, pc, #4	@ (adr r2, 8009c50 <UART_SetConfig+0x5cc>)
 8009c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c50:	08009cd3 	.word	0x08009cd3
 8009c54:	08009d49 	.word	0x08009d49
 8009c58:	08009cdb 	.word	0x08009cdb
 8009c5c:	08009d49 	.word	0x08009d49
 8009c60:	08009d49 	.word	0x08009d49
 8009c64:	08009d49 	.word	0x08009d49
 8009c68:	08009ceb 	.word	0x08009ceb
 8009c6c:	08009d49 	.word	0x08009d49
 8009c70:	08009d49 	.word	0x08009d49
 8009c74:	08009d49 	.word	0x08009d49
 8009c78:	08009d49 	.word	0x08009d49
 8009c7c:	08009d49 	.word	0x08009d49
 8009c80:	08009d49 	.word	0x08009d49
 8009c84:	08009d49 	.word	0x08009d49
 8009c88:	08009cfb 	.word	0x08009cfb
 8009c8c:	08009d49 	.word	0x08009d49
 8009c90:	08009d49 	.word	0x08009d49
 8009c94:	08009d49 	.word	0x08009d49
 8009c98:	08009d49 	.word	0x08009d49
 8009c9c:	08009d49 	.word	0x08009d49
 8009ca0:	08009d49 	.word	0x08009d49
 8009ca4:	08009d49 	.word	0x08009d49
 8009ca8:	08009d49 	.word	0x08009d49
 8009cac:	08009d49 	.word	0x08009d49
 8009cb0:	08009d49 	.word	0x08009d49
 8009cb4:	08009d49 	.word	0x08009d49
 8009cb8:	08009d49 	.word	0x08009d49
 8009cbc:	08009d49 	.word	0x08009d49
 8009cc0:	08009d49 	.word	0x08009d49
 8009cc4:	08009d49 	.word	0x08009d49
 8009cc8:	08009d3b 	.word	0x08009d3b
 8009ccc:	2b40      	cmp	r3, #64	@ 0x40
 8009cce:	d037      	beq.n	8009d40 <UART_SetConfig+0x6bc>
 8009cd0:	e03a      	b.n	8009d48 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009cd2:	f7fe ffd7 	bl	8008c84 <HAL_RCCEx_GetD3PCLK1Freq>
 8009cd6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009cd8:	e03c      	b.n	8009d54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f7fe ffe6 	bl	8008cb0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ce8:	e034      	b.n	8009d54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009cea:	f107 0318 	add.w	r3, r7, #24
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f7ff f932 	bl	8008f58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009cf4:	69fb      	ldr	r3, [r7, #28]
 8009cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cf8:	e02c      	b.n	8009d54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009cfa:	4b09      	ldr	r3, [pc, #36]	@ (8009d20 <UART_SetConfig+0x69c>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f003 0320 	and.w	r3, r3, #32
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d016      	beq.n	8009d34 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009d06:	4b06      	ldr	r3, [pc, #24]	@ (8009d20 <UART_SetConfig+0x69c>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	08db      	lsrs	r3, r3, #3
 8009d0c:	f003 0303 	and.w	r3, r3, #3
 8009d10:	4a07      	ldr	r2, [pc, #28]	@ (8009d30 <UART_SetConfig+0x6ac>)
 8009d12:	fa22 f303 	lsr.w	r3, r2, r3
 8009d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009d18:	e01c      	b.n	8009d54 <UART_SetConfig+0x6d0>
 8009d1a:	bf00      	nop
 8009d1c:	40011400 	.word	0x40011400
 8009d20:	58024400 	.word	0x58024400
 8009d24:	40007800 	.word	0x40007800
 8009d28:	40007c00 	.word	0x40007c00
 8009d2c:	58000c00 	.word	0x58000c00
 8009d30:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009d34:	4b9d      	ldr	r3, [pc, #628]	@ (8009fac <UART_SetConfig+0x928>)
 8009d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d38:	e00c      	b.n	8009d54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009d3a:	4b9d      	ldr	r3, [pc, #628]	@ (8009fb0 <UART_SetConfig+0x92c>)
 8009d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d3e:	e009      	b.n	8009d54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d40:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d46:	e005      	b.n	8009d54 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009d52:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009d54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	f000 81de 	beq.w	800a118 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d60:	4a94      	ldr	r2, [pc, #592]	@ (8009fb4 <UART_SetConfig+0x930>)
 8009d62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d66:	461a      	mov	r2, r3
 8009d68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d6e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	685a      	ldr	r2, [r3, #4]
 8009d74:	4613      	mov	r3, r2
 8009d76:	005b      	lsls	r3, r3, #1
 8009d78:	4413      	add	r3, r2
 8009d7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d305      	bcc.n	8009d8c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009d86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d903      	bls.n	8009d94 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009d92:	e1c1      	b.n	800a118 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d96:	2200      	movs	r2, #0
 8009d98:	60bb      	str	r3, [r7, #8]
 8009d9a:	60fa      	str	r2, [r7, #12]
 8009d9c:	697b      	ldr	r3, [r7, #20]
 8009d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009da0:	4a84      	ldr	r2, [pc, #528]	@ (8009fb4 <UART_SetConfig+0x930>)
 8009da2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009da6:	b29b      	uxth	r3, r3
 8009da8:	2200      	movs	r2, #0
 8009daa:	603b      	str	r3, [r7, #0]
 8009dac:	607a      	str	r2, [r7, #4]
 8009dae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009db2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009db6:	f7f6 faeb 	bl	8000390 <__aeabi_uldivmod>
 8009dba:	4602      	mov	r2, r0
 8009dbc:	460b      	mov	r3, r1
 8009dbe:	4610      	mov	r0, r2
 8009dc0:	4619      	mov	r1, r3
 8009dc2:	f04f 0200 	mov.w	r2, #0
 8009dc6:	f04f 0300 	mov.w	r3, #0
 8009dca:	020b      	lsls	r3, r1, #8
 8009dcc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009dd0:	0202      	lsls	r2, r0, #8
 8009dd2:	6979      	ldr	r1, [r7, #20]
 8009dd4:	6849      	ldr	r1, [r1, #4]
 8009dd6:	0849      	lsrs	r1, r1, #1
 8009dd8:	2000      	movs	r0, #0
 8009dda:	460c      	mov	r4, r1
 8009ddc:	4605      	mov	r5, r0
 8009dde:	eb12 0804 	adds.w	r8, r2, r4
 8009de2:	eb43 0905 	adc.w	r9, r3, r5
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	685b      	ldr	r3, [r3, #4]
 8009dea:	2200      	movs	r2, #0
 8009dec:	469a      	mov	sl, r3
 8009dee:	4693      	mov	fp, r2
 8009df0:	4652      	mov	r2, sl
 8009df2:	465b      	mov	r3, fp
 8009df4:	4640      	mov	r0, r8
 8009df6:	4649      	mov	r1, r9
 8009df8:	f7f6 faca 	bl	8000390 <__aeabi_uldivmod>
 8009dfc:	4602      	mov	r2, r0
 8009dfe:	460b      	mov	r3, r1
 8009e00:	4613      	mov	r3, r2
 8009e02:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009e0a:	d308      	bcc.n	8009e1e <UART_SetConfig+0x79a>
 8009e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e12:	d204      	bcs.n	8009e1e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009e1a:	60da      	str	r2, [r3, #12]
 8009e1c:	e17c      	b.n	800a118 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009e1e:	2301      	movs	r3, #1
 8009e20:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009e24:	e178      	b.n	800a118 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	69db      	ldr	r3, [r3, #28]
 8009e2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e2e:	f040 80c5 	bne.w	8009fbc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009e32:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009e36:	2b20      	cmp	r3, #32
 8009e38:	dc48      	bgt.n	8009ecc <UART_SetConfig+0x848>
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	db7b      	blt.n	8009f36 <UART_SetConfig+0x8b2>
 8009e3e:	2b20      	cmp	r3, #32
 8009e40:	d879      	bhi.n	8009f36 <UART_SetConfig+0x8b2>
 8009e42:	a201      	add	r2, pc, #4	@ (adr r2, 8009e48 <UART_SetConfig+0x7c4>)
 8009e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e48:	08009ed3 	.word	0x08009ed3
 8009e4c:	08009edb 	.word	0x08009edb
 8009e50:	08009f37 	.word	0x08009f37
 8009e54:	08009f37 	.word	0x08009f37
 8009e58:	08009ee3 	.word	0x08009ee3
 8009e5c:	08009f37 	.word	0x08009f37
 8009e60:	08009f37 	.word	0x08009f37
 8009e64:	08009f37 	.word	0x08009f37
 8009e68:	08009ef3 	.word	0x08009ef3
 8009e6c:	08009f37 	.word	0x08009f37
 8009e70:	08009f37 	.word	0x08009f37
 8009e74:	08009f37 	.word	0x08009f37
 8009e78:	08009f37 	.word	0x08009f37
 8009e7c:	08009f37 	.word	0x08009f37
 8009e80:	08009f37 	.word	0x08009f37
 8009e84:	08009f37 	.word	0x08009f37
 8009e88:	08009f03 	.word	0x08009f03
 8009e8c:	08009f37 	.word	0x08009f37
 8009e90:	08009f37 	.word	0x08009f37
 8009e94:	08009f37 	.word	0x08009f37
 8009e98:	08009f37 	.word	0x08009f37
 8009e9c:	08009f37 	.word	0x08009f37
 8009ea0:	08009f37 	.word	0x08009f37
 8009ea4:	08009f37 	.word	0x08009f37
 8009ea8:	08009f37 	.word	0x08009f37
 8009eac:	08009f37 	.word	0x08009f37
 8009eb0:	08009f37 	.word	0x08009f37
 8009eb4:	08009f37 	.word	0x08009f37
 8009eb8:	08009f37 	.word	0x08009f37
 8009ebc:	08009f37 	.word	0x08009f37
 8009ec0:	08009f37 	.word	0x08009f37
 8009ec4:	08009f37 	.word	0x08009f37
 8009ec8:	08009f29 	.word	0x08009f29
 8009ecc:	2b40      	cmp	r3, #64	@ 0x40
 8009ece:	d02e      	beq.n	8009f2e <UART_SetConfig+0x8aa>
 8009ed0:	e031      	b.n	8009f36 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ed2:	f7fd fca1 	bl	8007818 <HAL_RCC_GetPCLK1Freq>
 8009ed6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009ed8:	e033      	b.n	8009f42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009eda:	f7fd fcb3 	bl	8007844 <HAL_RCC_GetPCLK2Freq>
 8009ede:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009ee0:	e02f      	b.n	8009f42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ee2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f7fe fee2 	bl	8008cb0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ef0:	e027      	b.n	8009f42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ef2:	f107 0318 	add.w	r3, r7, #24
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f7ff f82e 	bl	8008f58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009efc:	69fb      	ldr	r3, [r7, #28]
 8009efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f00:	e01f      	b.n	8009f42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f02:	4b2d      	ldr	r3, [pc, #180]	@ (8009fb8 <UART_SetConfig+0x934>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f003 0320 	and.w	r3, r3, #32
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d009      	beq.n	8009f22 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f0e:	4b2a      	ldr	r3, [pc, #168]	@ (8009fb8 <UART_SetConfig+0x934>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	08db      	lsrs	r3, r3, #3
 8009f14:	f003 0303 	and.w	r3, r3, #3
 8009f18:	4a24      	ldr	r2, [pc, #144]	@ (8009fac <UART_SetConfig+0x928>)
 8009f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8009f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f20:	e00f      	b.n	8009f42 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009f22:	4b22      	ldr	r3, [pc, #136]	@ (8009fac <UART_SetConfig+0x928>)
 8009f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f26:	e00c      	b.n	8009f42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009f28:	4b21      	ldr	r3, [pc, #132]	@ (8009fb0 <UART_SetConfig+0x92c>)
 8009f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f2c:	e009      	b.n	8009f42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f34:	e005      	b.n	8009f42 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009f36:	2300      	movs	r3, #0
 8009f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009f40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009f42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	f000 80e7 	beq.w	800a118 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f4e:	4a19      	ldr	r2, [pc, #100]	@ (8009fb4 <UART_SetConfig+0x930>)
 8009f50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f54:	461a      	mov	r2, r3
 8009f56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f58:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f5c:	005a      	lsls	r2, r3, #1
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	085b      	lsrs	r3, r3, #1
 8009f64:	441a      	add	r2, r3
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	685b      	ldr	r3, [r3, #4]
 8009f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f6e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f72:	2b0f      	cmp	r3, #15
 8009f74:	d916      	bls.n	8009fa4 <UART_SetConfig+0x920>
 8009f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f7c:	d212      	bcs.n	8009fa4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f80:	b29b      	uxth	r3, r3
 8009f82:	f023 030f 	bic.w	r3, r3, #15
 8009f86:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f8a:	085b      	lsrs	r3, r3, #1
 8009f8c:	b29b      	uxth	r3, r3
 8009f8e:	f003 0307 	and.w	r3, r3, #7
 8009f92:	b29a      	uxth	r2, r3
 8009f94:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009f96:	4313      	orrs	r3, r2
 8009f98:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009fa0:	60da      	str	r2, [r3, #12]
 8009fa2:	e0b9      	b.n	800a118 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009faa:	e0b5      	b.n	800a118 <UART_SetConfig+0xa94>
 8009fac:	03d09000 	.word	0x03d09000
 8009fb0:	003d0900 	.word	0x003d0900
 8009fb4:	0800b20c 	.word	0x0800b20c
 8009fb8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009fbc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009fc0:	2b20      	cmp	r3, #32
 8009fc2:	dc49      	bgt.n	800a058 <UART_SetConfig+0x9d4>
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	db7c      	blt.n	800a0c2 <UART_SetConfig+0xa3e>
 8009fc8:	2b20      	cmp	r3, #32
 8009fca:	d87a      	bhi.n	800a0c2 <UART_SetConfig+0xa3e>
 8009fcc:	a201      	add	r2, pc, #4	@ (adr r2, 8009fd4 <UART_SetConfig+0x950>)
 8009fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fd2:	bf00      	nop
 8009fd4:	0800a05f 	.word	0x0800a05f
 8009fd8:	0800a067 	.word	0x0800a067
 8009fdc:	0800a0c3 	.word	0x0800a0c3
 8009fe0:	0800a0c3 	.word	0x0800a0c3
 8009fe4:	0800a06f 	.word	0x0800a06f
 8009fe8:	0800a0c3 	.word	0x0800a0c3
 8009fec:	0800a0c3 	.word	0x0800a0c3
 8009ff0:	0800a0c3 	.word	0x0800a0c3
 8009ff4:	0800a07f 	.word	0x0800a07f
 8009ff8:	0800a0c3 	.word	0x0800a0c3
 8009ffc:	0800a0c3 	.word	0x0800a0c3
 800a000:	0800a0c3 	.word	0x0800a0c3
 800a004:	0800a0c3 	.word	0x0800a0c3
 800a008:	0800a0c3 	.word	0x0800a0c3
 800a00c:	0800a0c3 	.word	0x0800a0c3
 800a010:	0800a0c3 	.word	0x0800a0c3
 800a014:	0800a08f 	.word	0x0800a08f
 800a018:	0800a0c3 	.word	0x0800a0c3
 800a01c:	0800a0c3 	.word	0x0800a0c3
 800a020:	0800a0c3 	.word	0x0800a0c3
 800a024:	0800a0c3 	.word	0x0800a0c3
 800a028:	0800a0c3 	.word	0x0800a0c3
 800a02c:	0800a0c3 	.word	0x0800a0c3
 800a030:	0800a0c3 	.word	0x0800a0c3
 800a034:	0800a0c3 	.word	0x0800a0c3
 800a038:	0800a0c3 	.word	0x0800a0c3
 800a03c:	0800a0c3 	.word	0x0800a0c3
 800a040:	0800a0c3 	.word	0x0800a0c3
 800a044:	0800a0c3 	.word	0x0800a0c3
 800a048:	0800a0c3 	.word	0x0800a0c3
 800a04c:	0800a0c3 	.word	0x0800a0c3
 800a050:	0800a0c3 	.word	0x0800a0c3
 800a054:	0800a0b5 	.word	0x0800a0b5
 800a058:	2b40      	cmp	r3, #64	@ 0x40
 800a05a:	d02e      	beq.n	800a0ba <UART_SetConfig+0xa36>
 800a05c:	e031      	b.n	800a0c2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a05e:	f7fd fbdb 	bl	8007818 <HAL_RCC_GetPCLK1Freq>
 800a062:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a064:	e033      	b.n	800a0ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a066:	f7fd fbed 	bl	8007844 <HAL_RCC_GetPCLK2Freq>
 800a06a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a06c:	e02f      	b.n	800a0ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a06e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a072:	4618      	mov	r0, r3
 800a074:	f7fe fe1c 	bl	8008cb0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a07a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a07c:	e027      	b.n	800a0ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a07e:	f107 0318 	add.w	r3, r7, #24
 800a082:	4618      	mov	r0, r3
 800a084:	f7fe ff68 	bl	8008f58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a088:	69fb      	ldr	r3, [r7, #28]
 800a08a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a08c:	e01f      	b.n	800a0ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a08e:	4b2d      	ldr	r3, [pc, #180]	@ (800a144 <UART_SetConfig+0xac0>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f003 0320 	and.w	r3, r3, #32
 800a096:	2b00      	cmp	r3, #0
 800a098:	d009      	beq.n	800a0ae <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a09a:	4b2a      	ldr	r3, [pc, #168]	@ (800a144 <UART_SetConfig+0xac0>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	08db      	lsrs	r3, r3, #3
 800a0a0:	f003 0303 	and.w	r3, r3, #3
 800a0a4:	4a28      	ldr	r2, [pc, #160]	@ (800a148 <UART_SetConfig+0xac4>)
 800a0a6:	fa22 f303 	lsr.w	r3, r2, r3
 800a0aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a0ac:	e00f      	b.n	800a0ce <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a0ae:	4b26      	ldr	r3, [pc, #152]	@ (800a148 <UART_SetConfig+0xac4>)
 800a0b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0b2:	e00c      	b.n	800a0ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a0b4:	4b25      	ldr	r3, [pc, #148]	@ (800a14c <UART_SetConfig+0xac8>)
 800a0b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0b8:	e009      	b.n	800a0ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a0be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0c0:	e005      	b.n	800a0ce <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a0cc:	bf00      	nop
    }

    if (pclk != 0U)
 800a0ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d021      	beq.n	800a118 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0d8:	4a1d      	ldr	r2, [pc, #116]	@ (800a150 <UART_SetConfig+0xacc>)
 800a0da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0de:	461a      	mov	r2, r3
 800a0e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0e2:	fbb3 f2f2 	udiv	r2, r3, r2
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	085b      	lsrs	r3, r3, #1
 800a0ec:	441a      	add	r2, r3
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	685b      	ldr	r3, [r3, #4]
 800a0f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0f6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a0f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0fa:	2b0f      	cmp	r3, #15
 800a0fc:	d909      	bls.n	800a112 <UART_SetConfig+0xa8e>
 800a0fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a100:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a104:	d205      	bcs.n	800a112 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a108:	b29a      	uxth	r2, r3
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	60da      	str	r2, [r3, #12]
 800a110:	e002      	b.n	800a118 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a112:	2301      	movs	r3, #1
 800a114:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	2201      	movs	r2, #1
 800a11c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	2201      	movs	r2, #1
 800a124:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	2200      	movs	r2, #0
 800a12c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	2200      	movs	r2, #0
 800a132:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a134:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3748      	adds	r7, #72	@ 0x48
 800a13c:	46bd      	mov	sp, r7
 800a13e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a142:	bf00      	nop
 800a144:	58024400 	.word	0x58024400
 800a148:	03d09000 	.word	0x03d09000
 800a14c:	003d0900 	.word	0x003d0900
 800a150:	0800b20c 	.word	0x0800b20c

0800a154 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a154:	b480      	push	{r7}
 800a156:	b083      	sub	sp, #12
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a160:	f003 0308 	and.w	r3, r3, #8
 800a164:	2b00      	cmp	r3, #0
 800a166:	d00a      	beq.n	800a17e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	685b      	ldr	r3, [r3, #4]
 800a16e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	430a      	orrs	r2, r1
 800a17c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a182:	f003 0301 	and.w	r3, r3, #1
 800a186:	2b00      	cmp	r3, #0
 800a188:	d00a      	beq.n	800a1a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	685b      	ldr	r3, [r3, #4]
 800a190:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	430a      	orrs	r2, r1
 800a19e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1a4:	f003 0302 	and.w	r3, r3, #2
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d00a      	beq.n	800a1c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	685b      	ldr	r3, [r3, #4]
 800a1b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	430a      	orrs	r2, r1
 800a1c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1c6:	f003 0304 	and.w	r3, r3, #4
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d00a      	beq.n	800a1e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	430a      	orrs	r2, r1
 800a1e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1e8:	f003 0310 	and.w	r3, r3, #16
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d00a      	beq.n	800a206 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	689b      	ldr	r3, [r3, #8]
 800a1f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	430a      	orrs	r2, r1
 800a204:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a20a:	f003 0320 	and.w	r3, r3, #32
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d00a      	beq.n	800a228 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	689b      	ldr	r3, [r3, #8]
 800a218:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	430a      	orrs	r2, r1
 800a226:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a22c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a230:	2b00      	cmp	r3, #0
 800a232:	d01a      	beq.n	800a26a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	430a      	orrs	r2, r1
 800a248:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a24e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a252:	d10a      	bne.n	800a26a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	685b      	ldr	r3, [r3, #4]
 800a25a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	430a      	orrs	r2, r1
 800a268:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a26e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a272:	2b00      	cmp	r3, #0
 800a274:	d00a      	beq.n	800a28c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	685b      	ldr	r3, [r3, #4]
 800a27c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	430a      	orrs	r2, r1
 800a28a:	605a      	str	r2, [r3, #4]
  }
}
 800a28c:	bf00      	nop
 800a28e:	370c      	adds	r7, #12
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr

0800a298 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b098      	sub	sp, #96	@ 0x60
 800a29c:	af02      	add	r7, sp, #8
 800a29e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a2a8:	f7f7 fb82 	bl	80019b0 <HAL_GetTick>
 800a2ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f003 0308 	and.w	r3, r3, #8
 800a2b8:	2b08      	cmp	r3, #8
 800a2ba:	d12f      	bne.n	800a31c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a2bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a2c0:	9300      	str	r3, [sp, #0]
 800a2c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f000 f88e 	bl	800a3ec <UART_WaitOnFlagUntilTimeout>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d022      	beq.n	800a31c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2de:	e853 3f00 	ldrex	r3, [r3]
 800a2e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a2e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a2ea:	653b      	str	r3, [r7, #80]	@ 0x50
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	461a      	mov	r2, r3
 800a2f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a2f4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a2f6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a2fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a2fc:	e841 2300 	strex	r3, r2, [r1]
 800a300:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a304:	2b00      	cmp	r3, #0
 800a306:	d1e6      	bne.n	800a2d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2220      	movs	r2, #32
 800a30c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2200      	movs	r2, #0
 800a314:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a318:	2303      	movs	r3, #3
 800a31a:	e063      	b.n	800a3e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f003 0304 	and.w	r3, r3, #4
 800a326:	2b04      	cmp	r3, #4
 800a328:	d149      	bne.n	800a3be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a32a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a32e:	9300      	str	r3, [sp, #0]
 800a330:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a332:	2200      	movs	r2, #0
 800a334:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f000 f857 	bl	800a3ec <UART_WaitOnFlagUntilTimeout>
 800a33e:	4603      	mov	r3, r0
 800a340:	2b00      	cmp	r3, #0
 800a342:	d03c      	beq.n	800a3be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a34a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a34c:	e853 3f00 	ldrex	r3, [r3]
 800a350:	623b      	str	r3, [r7, #32]
   return(result);
 800a352:	6a3b      	ldr	r3, [r7, #32]
 800a354:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a358:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	461a      	mov	r2, r3
 800a360:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a362:	633b      	str	r3, [r7, #48]	@ 0x30
 800a364:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a366:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a368:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a36a:	e841 2300 	strex	r3, r2, [r1]
 800a36e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a372:	2b00      	cmp	r3, #0
 800a374:	d1e6      	bne.n	800a344 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	3308      	adds	r3, #8
 800a37c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	e853 3f00 	ldrex	r3, [r3]
 800a384:	60fb      	str	r3, [r7, #12]
   return(result);
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	f023 0301 	bic.w	r3, r3, #1
 800a38c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	3308      	adds	r3, #8
 800a394:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a396:	61fa      	str	r2, [r7, #28]
 800a398:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a39a:	69b9      	ldr	r1, [r7, #24]
 800a39c:	69fa      	ldr	r2, [r7, #28]
 800a39e:	e841 2300 	strex	r3, r2, [r1]
 800a3a2:	617b      	str	r3, [r7, #20]
   return(result);
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d1e5      	bne.n	800a376 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2220      	movs	r2, #32
 800a3ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a3ba:	2303      	movs	r3, #3
 800a3bc:	e012      	b.n	800a3e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2220      	movs	r2, #32
 800a3c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2220      	movs	r2, #32
 800a3ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a3e2:	2300      	movs	r3, #0
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	3758      	adds	r7, #88	@ 0x58
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}

0800a3ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b084      	sub	sp, #16
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	60f8      	str	r0, [r7, #12]
 800a3f4:	60b9      	str	r1, [r7, #8]
 800a3f6:	603b      	str	r3, [r7, #0]
 800a3f8:	4613      	mov	r3, r2
 800a3fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3fc:	e04f      	b.n	800a49e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3fe:	69bb      	ldr	r3, [r7, #24]
 800a400:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a404:	d04b      	beq.n	800a49e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a406:	f7f7 fad3 	bl	80019b0 <HAL_GetTick>
 800a40a:	4602      	mov	r2, r0
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	1ad3      	subs	r3, r2, r3
 800a410:	69ba      	ldr	r2, [r7, #24]
 800a412:	429a      	cmp	r2, r3
 800a414:	d302      	bcc.n	800a41c <UART_WaitOnFlagUntilTimeout+0x30>
 800a416:	69bb      	ldr	r3, [r7, #24]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d101      	bne.n	800a420 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a41c:	2303      	movs	r3, #3
 800a41e:	e04e      	b.n	800a4be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f003 0304 	and.w	r3, r3, #4
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d037      	beq.n	800a49e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	2b80      	cmp	r3, #128	@ 0x80
 800a432:	d034      	beq.n	800a49e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	2b40      	cmp	r3, #64	@ 0x40
 800a438:	d031      	beq.n	800a49e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	69db      	ldr	r3, [r3, #28]
 800a440:	f003 0308 	and.w	r3, r3, #8
 800a444:	2b08      	cmp	r3, #8
 800a446:	d110      	bne.n	800a46a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	2208      	movs	r2, #8
 800a44e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a450:	68f8      	ldr	r0, [r7, #12]
 800a452:	f000 f839 	bl	800a4c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2208      	movs	r2, #8
 800a45a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2200      	movs	r2, #0
 800a462:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a466:	2301      	movs	r3, #1
 800a468:	e029      	b.n	800a4be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	69db      	ldr	r3, [r3, #28]
 800a470:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a474:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a478:	d111      	bne.n	800a49e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a482:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a484:	68f8      	ldr	r0, [r7, #12]
 800a486:	f000 f81f 	bl	800a4c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2220      	movs	r2, #32
 800a48e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2200      	movs	r2, #0
 800a496:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a49a:	2303      	movs	r3, #3
 800a49c:	e00f      	b.n	800a4be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	69da      	ldr	r2, [r3, #28]
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	4013      	ands	r3, r2
 800a4a8:	68ba      	ldr	r2, [r7, #8]
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	bf0c      	ite	eq
 800a4ae:	2301      	moveq	r3, #1
 800a4b0:	2300      	movne	r3, #0
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	461a      	mov	r2, r3
 800a4b6:	79fb      	ldrb	r3, [r7, #7]
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	d0a0      	beq.n	800a3fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a4bc:	2300      	movs	r3, #0
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3710      	adds	r7, #16
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}
	...

0800a4c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b095      	sub	sp, #84	@ 0x54
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4d8:	e853 3f00 	ldrex	r3, [r3]
 800a4dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a4de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a4e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	461a      	mov	r2, r3
 800a4ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4ee:	643b      	str	r3, [r7, #64]	@ 0x40
 800a4f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a4f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a4f6:	e841 2300 	strex	r3, r2, [r1]
 800a4fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a4fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d1e6      	bne.n	800a4d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	3308      	adds	r3, #8
 800a508:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a50a:	6a3b      	ldr	r3, [r7, #32]
 800a50c:	e853 3f00 	ldrex	r3, [r3]
 800a510:	61fb      	str	r3, [r7, #28]
   return(result);
 800a512:	69fa      	ldr	r2, [r7, #28]
 800a514:	4b1e      	ldr	r3, [pc, #120]	@ (800a590 <UART_EndRxTransfer+0xc8>)
 800a516:	4013      	ands	r3, r2
 800a518:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	3308      	adds	r3, #8
 800a520:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a522:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a524:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a526:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a528:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a52a:	e841 2300 	strex	r3, r2, [r1]
 800a52e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a532:	2b00      	cmp	r3, #0
 800a534:	d1e5      	bne.n	800a502 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a53a:	2b01      	cmp	r3, #1
 800a53c:	d118      	bne.n	800a570 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	e853 3f00 	ldrex	r3, [r3]
 800a54a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	f023 0310 	bic.w	r3, r3, #16
 800a552:	647b      	str	r3, [r7, #68]	@ 0x44
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	461a      	mov	r2, r3
 800a55a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a55c:	61bb      	str	r3, [r7, #24]
 800a55e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a560:	6979      	ldr	r1, [r7, #20]
 800a562:	69ba      	ldr	r2, [r7, #24]
 800a564:	e841 2300 	strex	r3, r2, [r1]
 800a568:	613b      	str	r3, [r7, #16]
   return(result);
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d1e6      	bne.n	800a53e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2220      	movs	r2, #32
 800a574:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2200      	movs	r2, #0
 800a57c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2200      	movs	r2, #0
 800a582:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a584:	bf00      	nop
 800a586:	3754      	adds	r7, #84	@ 0x54
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr
 800a590:	effffffe 	.word	0xeffffffe

0800a594 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a594:	b480      	push	{r7}
 800a596:	b085      	sub	sp, #20
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a5a2:	2b01      	cmp	r3, #1
 800a5a4:	d101      	bne.n	800a5aa <HAL_UARTEx_DisableFifoMode+0x16>
 800a5a6:	2302      	movs	r3, #2
 800a5a8:	e027      	b.n	800a5fa <HAL_UARTEx_DisableFifoMode+0x66>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2224      	movs	r2, #36	@ 0x24
 800a5b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	681a      	ldr	r2, [r3, #0]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f022 0201 	bic.w	r2, r2, #1
 800a5d0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a5d8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	68fa      	ldr	r2, [r7, #12]
 800a5e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2220      	movs	r2, #32
 800a5ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a5f8:	2300      	movs	r3, #0
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3714      	adds	r7, #20
 800a5fe:	46bd      	mov	sp, r7
 800a600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a604:	4770      	bx	lr

0800a606 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a606:	b580      	push	{r7, lr}
 800a608:	b084      	sub	sp, #16
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	6078      	str	r0, [r7, #4]
 800a60e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a616:	2b01      	cmp	r3, #1
 800a618:	d101      	bne.n	800a61e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a61a:	2302      	movs	r3, #2
 800a61c:	e02d      	b.n	800a67a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2201      	movs	r2, #1
 800a622:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2224      	movs	r2, #36	@ 0x24
 800a62a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	681a      	ldr	r2, [r3, #0]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f022 0201 	bic.w	r2, r2, #1
 800a644:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	689b      	ldr	r3, [r3, #8]
 800a64c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	683a      	ldr	r2, [r7, #0]
 800a656:	430a      	orrs	r2, r1
 800a658:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f000 f850 	bl	800a700 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	68fa      	ldr	r2, [r7, #12]
 800a666:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2220      	movs	r2, #32
 800a66c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2200      	movs	r2, #0
 800a674:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a678:	2300      	movs	r3, #0
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3710      	adds	r7, #16
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}

0800a682 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a682:	b580      	push	{r7, lr}
 800a684:	b084      	sub	sp, #16
 800a686:	af00      	add	r7, sp, #0
 800a688:	6078      	str	r0, [r7, #4]
 800a68a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a692:	2b01      	cmp	r3, #1
 800a694:	d101      	bne.n	800a69a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a696:	2302      	movs	r3, #2
 800a698:	e02d      	b.n	800a6f6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2201      	movs	r2, #1
 800a69e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2224      	movs	r2, #36	@ 0x24
 800a6a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	681a      	ldr	r2, [r3, #0]
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f022 0201 	bic.w	r2, r2, #1
 800a6c0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	689b      	ldr	r3, [r3, #8]
 800a6c8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	683a      	ldr	r2, [r7, #0]
 800a6d2:	430a      	orrs	r2, r1
 800a6d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f000 f812 	bl	800a700 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	68fa      	ldr	r2, [r7, #12]
 800a6e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2220      	movs	r2, #32
 800a6e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a6f4:	2300      	movs	r3, #0
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3710      	adds	r7, #16
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}
	...

0800a700 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a700:	b480      	push	{r7}
 800a702:	b085      	sub	sp, #20
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d108      	bne.n	800a722 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2201      	movs	r2, #1
 800a714:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2201      	movs	r2, #1
 800a71c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a720:	e031      	b.n	800a786 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a722:	2310      	movs	r3, #16
 800a724:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a726:	2310      	movs	r3, #16
 800a728:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	689b      	ldr	r3, [r3, #8]
 800a730:	0e5b      	lsrs	r3, r3, #25
 800a732:	b2db      	uxtb	r3, r3
 800a734:	f003 0307 	and.w	r3, r3, #7
 800a738:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	689b      	ldr	r3, [r3, #8]
 800a740:	0f5b      	lsrs	r3, r3, #29
 800a742:	b2db      	uxtb	r3, r3
 800a744:	f003 0307 	and.w	r3, r3, #7
 800a748:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a74a:	7bbb      	ldrb	r3, [r7, #14]
 800a74c:	7b3a      	ldrb	r2, [r7, #12]
 800a74e:	4911      	ldr	r1, [pc, #68]	@ (800a794 <UARTEx_SetNbDataToProcess+0x94>)
 800a750:	5c8a      	ldrb	r2, [r1, r2]
 800a752:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a756:	7b3a      	ldrb	r2, [r7, #12]
 800a758:	490f      	ldr	r1, [pc, #60]	@ (800a798 <UARTEx_SetNbDataToProcess+0x98>)
 800a75a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a75c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a760:	b29a      	uxth	r2, r3
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a768:	7bfb      	ldrb	r3, [r7, #15]
 800a76a:	7b7a      	ldrb	r2, [r7, #13]
 800a76c:	4909      	ldr	r1, [pc, #36]	@ (800a794 <UARTEx_SetNbDataToProcess+0x94>)
 800a76e:	5c8a      	ldrb	r2, [r1, r2]
 800a770:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a774:	7b7a      	ldrb	r2, [r7, #13]
 800a776:	4908      	ldr	r1, [pc, #32]	@ (800a798 <UARTEx_SetNbDataToProcess+0x98>)
 800a778:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a77a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a77e:	b29a      	uxth	r2, r3
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a786:	bf00      	nop
 800a788:	3714      	adds	r7, #20
 800a78a:	46bd      	mov	sp, r7
 800a78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a790:	4770      	bx	lr
 800a792:	bf00      	nop
 800a794:	0800b224 	.word	0x0800b224
 800a798:	0800b22c 	.word	0x0800b22c

0800a79c <siprintf>:
 800a79c:	b40e      	push	{r1, r2, r3}
 800a79e:	b500      	push	{lr}
 800a7a0:	b09c      	sub	sp, #112	@ 0x70
 800a7a2:	ab1d      	add	r3, sp, #116	@ 0x74
 800a7a4:	9002      	str	r0, [sp, #8]
 800a7a6:	9006      	str	r0, [sp, #24]
 800a7a8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a7ac:	4809      	ldr	r0, [pc, #36]	@ (800a7d4 <siprintf+0x38>)
 800a7ae:	9107      	str	r1, [sp, #28]
 800a7b0:	9104      	str	r1, [sp, #16]
 800a7b2:	4909      	ldr	r1, [pc, #36]	@ (800a7d8 <siprintf+0x3c>)
 800a7b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7b8:	9105      	str	r1, [sp, #20]
 800a7ba:	6800      	ldr	r0, [r0, #0]
 800a7bc:	9301      	str	r3, [sp, #4]
 800a7be:	a902      	add	r1, sp, #8
 800a7c0:	f000 f994 	bl	800aaec <_svfiprintf_r>
 800a7c4:	9b02      	ldr	r3, [sp, #8]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	701a      	strb	r2, [r3, #0]
 800a7ca:	b01c      	add	sp, #112	@ 0x70
 800a7cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7d0:	b003      	add	sp, #12
 800a7d2:	4770      	bx	lr
 800a7d4:	24000018 	.word	0x24000018
 800a7d8:	ffff0208 	.word	0xffff0208

0800a7dc <memset>:
 800a7dc:	4402      	add	r2, r0
 800a7de:	4603      	mov	r3, r0
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d100      	bne.n	800a7e6 <memset+0xa>
 800a7e4:	4770      	bx	lr
 800a7e6:	f803 1b01 	strb.w	r1, [r3], #1
 800a7ea:	e7f9      	b.n	800a7e0 <memset+0x4>

0800a7ec <__errno>:
 800a7ec:	4b01      	ldr	r3, [pc, #4]	@ (800a7f4 <__errno+0x8>)
 800a7ee:	6818      	ldr	r0, [r3, #0]
 800a7f0:	4770      	bx	lr
 800a7f2:	bf00      	nop
 800a7f4:	24000018 	.word	0x24000018

0800a7f8 <__libc_init_array>:
 800a7f8:	b570      	push	{r4, r5, r6, lr}
 800a7fa:	4d0d      	ldr	r5, [pc, #52]	@ (800a830 <__libc_init_array+0x38>)
 800a7fc:	4c0d      	ldr	r4, [pc, #52]	@ (800a834 <__libc_init_array+0x3c>)
 800a7fe:	1b64      	subs	r4, r4, r5
 800a800:	10a4      	asrs	r4, r4, #2
 800a802:	2600      	movs	r6, #0
 800a804:	42a6      	cmp	r6, r4
 800a806:	d109      	bne.n	800a81c <__libc_init_array+0x24>
 800a808:	4d0b      	ldr	r5, [pc, #44]	@ (800a838 <__libc_init_array+0x40>)
 800a80a:	4c0c      	ldr	r4, [pc, #48]	@ (800a83c <__libc_init_array+0x44>)
 800a80c:	f000 fc66 	bl	800b0dc <_init>
 800a810:	1b64      	subs	r4, r4, r5
 800a812:	10a4      	asrs	r4, r4, #2
 800a814:	2600      	movs	r6, #0
 800a816:	42a6      	cmp	r6, r4
 800a818:	d105      	bne.n	800a826 <__libc_init_array+0x2e>
 800a81a:	bd70      	pop	{r4, r5, r6, pc}
 800a81c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a820:	4798      	blx	r3
 800a822:	3601      	adds	r6, #1
 800a824:	e7ee      	b.n	800a804 <__libc_init_array+0xc>
 800a826:	f855 3b04 	ldr.w	r3, [r5], #4
 800a82a:	4798      	blx	r3
 800a82c:	3601      	adds	r6, #1
 800a82e:	e7f2      	b.n	800a816 <__libc_init_array+0x1e>
 800a830:	0800b270 	.word	0x0800b270
 800a834:	0800b270 	.word	0x0800b270
 800a838:	0800b270 	.word	0x0800b270
 800a83c:	0800b274 	.word	0x0800b274

0800a840 <__retarget_lock_acquire_recursive>:
 800a840:	4770      	bx	lr

0800a842 <__retarget_lock_release_recursive>:
 800a842:	4770      	bx	lr

0800a844 <_free_r>:
 800a844:	b538      	push	{r3, r4, r5, lr}
 800a846:	4605      	mov	r5, r0
 800a848:	2900      	cmp	r1, #0
 800a84a:	d041      	beq.n	800a8d0 <_free_r+0x8c>
 800a84c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a850:	1f0c      	subs	r4, r1, #4
 800a852:	2b00      	cmp	r3, #0
 800a854:	bfb8      	it	lt
 800a856:	18e4      	addlt	r4, r4, r3
 800a858:	f000 f8e0 	bl	800aa1c <__malloc_lock>
 800a85c:	4a1d      	ldr	r2, [pc, #116]	@ (800a8d4 <_free_r+0x90>)
 800a85e:	6813      	ldr	r3, [r2, #0]
 800a860:	b933      	cbnz	r3, 800a870 <_free_r+0x2c>
 800a862:	6063      	str	r3, [r4, #4]
 800a864:	6014      	str	r4, [r2, #0]
 800a866:	4628      	mov	r0, r5
 800a868:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a86c:	f000 b8dc 	b.w	800aa28 <__malloc_unlock>
 800a870:	42a3      	cmp	r3, r4
 800a872:	d908      	bls.n	800a886 <_free_r+0x42>
 800a874:	6820      	ldr	r0, [r4, #0]
 800a876:	1821      	adds	r1, r4, r0
 800a878:	428b      	cmp	r3, r1
 800a87a:	bf01      	itttt	eq
 800a87c:	6819      	ldreq	r1, [r3, #0]
 800a87e:	685b      	ldreq	r3, [r3, #4]
 800a880:	1809      	addeq	r1, r1, r0
 800a882:	6021      	streq	r1, [r4, #0]
 800a884:	e7ed      	b.n	800a862 <_free_r+0x1e>
 800a886:	461a      	mov	r2, r3
 800a888:	685b      	ldr	r3, [r3, #4]
 800a88a:	b10b      	cbz	r3, 800a890 <_free_r+0x4c>
 800a88c:	42a3      	cmp	r3, r4
 800a88e:	d9fa      	bls.n	800a886 <_free_r+0x42>
 800a890:	6811      	ldr	r1, [r2, #0]
 800a892:	1850      	adds	r0, r2, r1
 800a894:	42a0      	cmp	r0, r4
 800a896:	d10b      	bne.n	800a8b0 <_free_r+0x6c>
 800a898:	6820      	ldr	r0, [r4, #0]
 800a89a:	4401      	add	r1, r0
 800a89c:	1850      	adds	r0, r2, r1
 800a89e:	4283      	cmp	r3, r0
 800a8a0:	6011      	str	r1, [r2, #0]
 800a8a2:	d1e0      	bne.n	800a866 <_free_r+0x22>
 800a8a4:	6818      	ldr	r0, [r3, #0]
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	6053      	str	r3, [r2, #4]
 800a8aa:	4408      	add	r0, r1
 800a8ac:	6010      	str	r0, [r2, #0]
 800a8ae:	e7da      	b.n	800a866 <_free_r+0x22>
 800a8b0:	d902      	bls.n	800a8b8 <_free_r+0x74>
 800a8b2:	230c      	movs	r3, #12
 800a8b4:	602b      	str	r3, [r5, #0]
 800a8b6:	e7d6      	b.n	800a866 <_free_r+0x22>
 800a8b8:	6820      	ldr	r0, [r4, #0]
 800a8ba:	1821      	adds	r1, r4, r0
 800a8bc:	428b      	cmp	r3, r1
 800a8be:	bf04      	itt	eq
 800a8c0:	6819      	ldreq	r1, [r3, #0]
 800a8c2:	685b      	ldreq	r3, [r3, #4]
 800a8c4:	6063      	str	r3, [r4, #4]
 800a8c6:	bf04      	itt	eq
 800a8c8:	1809      	addeq	r1, r1, r0
 800a8ca:	6021      	streq	r1, [r4, #0]
 800a8cc:	6054      	str	r4, [r2, #4]
 800a8ce:	e7ca      	b.n	800a866 <_free_r+0x22>
 800a8d0:	bd38      	pop	{r3, r4, r5, pc}
 800a8d2:	bf00      	nop
 800a8d4:	240003e0 	.word	0x240003e0

0800a8d8 <sbrk_aligned>:
 800a8d8:	b570      	push	{r4, r5, r6, lr}
 800a8da:	4e0f      	ldr	r6, [pc, #60]	@ (800a918 <sbrk_aligned+0x40>)
 800a8dc:	460c      	mov	r4, r1
 800a8de:	6831      	ldr	r1, [r6, #0]
 800a8e0:	4605      	mov	r5, r0
 800a8e2:	b911      	cbnz	r1, 800a8ea <sbrk_aligned+0x12>
 800a8e4:	f000 fba6 	bl	800b034 <_sbrk_r>
 800a8e8:	6030      	str	r0, [r6, #0]
 800a8ea:	4621      	mov	r1, r4
 800a8ec:	4628      	mov	r0, r5
 800a8ee:	f000 fba1 	bl	800b034 <_sbrk_r>
 800a8f2:	1c43      	adds	r3, r0, #1
 800a8f4:	d103      	bne.n	800a8fe <sbrk_aligned+0x26>
 800a8f6:	f04f 34ff 	mov.w	r4, #4294967295
 800a8fa:	4620      	mov	r0, r4
 800a8fc:	bd70      	pop	{r4, r5, r6, pc}
 800a8fe:	1cc4      	adds	r4, r0, #3
 800a900:	f024 0403 	bic.w	r4, r4, #3
 800a904:	42a0      	cmp	r0, r4
 800a906:	d0f8      	beq.n	800a8fa <sbrk_aligned+0x22>
 800a908:	1a21      	subs	r1, r4, r0
 800a90a:	4628      	mov	r0, r5
 800a90c:	f000 fb92 	bl	800b034 <_sbrk_r>
 800a910:	3001      	adds	r0, #1
 800a912:	d1f2      	bne.n	800a8fa <sbrk_aligned+0x22>
 800a914:	e7ef      	b.n	800a8f6 <sbrk_aligned+0x1e>
 800a916:	bf00      	nop
 800a918:	240003dc 	.word	0x240003dc

0800a91c <_malloc_r>:
 800a91c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a920:	1ccd      	adds	r5, r1, #3
 800a922:	f025 0503 	bic.w	r5, r5, #3
 800a926:	3508      	adds	r5, #8
 800a928:	2d0c      	cmp	r5, #12
 800a92a:	bf38      	it	cc
 800a92c:	250c      	movcc	r5, #12
 800a92e:	2d00      	cmp	r5, #0
 800a930:	4606      	mov	r6, r0
 800a932:	db01      	blt.n	800a938 <_malloc_r+0x1c>
 800a934:	42a9      	cmp	r1, r5
 800a936:	d904      	bls.n	800a942 <_malloc_r+0x26>
 800a938:	230c      	movs	r3, #12
 800a93a:	6033      	str	r3, [r6, #0]
 800a93c:	2000      	movs	r0, #0
 800a93e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a942:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aa18 <_malloc_r+0xfc>
 800a946:	f000 f869 	bl	800aa1c <__malloc_lock>
 800a94a:	f8d8 3000 	ldr.w	r3, [r8]
 800a94e:	461c      	mov	r4, r3
 800a950:	bb44      	cbnz	r4, 800a9a4 <_malloc_r+0x88>
 800a952:	4629      	mov	r1, r5
 800a954:	4630      	mov	r0, r6
 800a956:	f7ff ffbf 	bl	800a8d8 <sbrk_aligned>
 800a95a:	1c43      	adds	r3, r0, #1
 800a95c:	4604      	mov	r4, r0
 800a95e:	d158      	bne.n	800aa12 <_malloc_r+0xf6>
 800a960:	f8d8 4000 	ldr.w	r4, [r8]
 800a964:	4627      	mov	r7, r4
 800a966:	2f00      	cmp	r7, #0
 800a968:	d143      	bne.n	800a9f2 <_malloc_r+0xd6>
 800a96a:	2c00      	cmp	r4, #0
 800a96c:	d04b      	beq.n	800aa06 <_malloc_r+0xea>
 800a96e:	6823      	ldr	r3, [r4, #0]
 800a970:	4639      	mov	r1, r7
 800a972:	4630      	mov	r0, r6
 800a974:	eb04 0903 	add.w	r9, r4, r3
 800a978:	f000 fb5c 	bl	800b034 <_sbrk_r>
 800a97c:	4581      	cmp	r9, r0
 800a97e:	d142      	bne.n	800aa06 <_malloc_r+0xea>
 800a980:	6821      	ldr	r1, [r4, #0]
 800a982:	1a6d      	subs	r5, r5, r1
 800a984:	4629      	mov	r1, r5
 800a986:	4630      	mov	r0, r6
 800a988:	f7ff ffa6 	bl	800a8d8 <sbrk_aligned>
 800a98c:	3001      	adds	r0, #1
 800a98e:	d03a      	beq.n	800aa06 <_malloc_r+0xea>
 800a990:	6823      	ldr	r3, [r4, #0]
 800a992:	442b      	add	r3, r5
 800a994:	6023      	str	r3, [r4, #0]
 800a996:	f8d8 3000 	ldr.w	r3, [r8]
 800a99a:	685a      	ldr	r2, [r3, #4]
 800a99c:	bb62      	cbnz	r2, 800a9f8 <_malloc_r+0xdc>
 800a99e:	f8c8 7000 	str.w	r7, [r8]
 800a9a2:	e00f      	b.n	800a9c4 <_malloc_r+0xa8>
 800a9a4:	6822      	ldr	r2, [r4, #0]
 800a9a6:	1b52      	subs	r2, r2, r5
 800a9a8:	d420      	bmi.n	800a9ec <_malloc_r+0xd0>
 800a9aa:	2a0b      	cmp	r2, #11
 800a9ac:	d917      	bls.n	800a9de <_malloc_r+0xc2>
 800a9ae:	1961      	adds	r1, r4, r5
 800a9b0:	42a3      	cmp	r3, r4
 800a9b2:	6025      	str	r5, [r4, #0]
 800a9b4:	bf18      	it	ne
 800a9b6:	6059      	strne	r1, [r3, #4]
 800a9b8:	6863      	ldr	r3, [r4, #4]
 800a9ba:	bf08      	it	eq
 800a9bc:	f8c8 1000 	streq.w	r1, [r8]
 800a9c0:	5162      	str	r2, [r4, r5]
 800a9c2:	604b      	str	r3, [r1, #4]
 800a9c4:	4630      	mov	r0, r6
 800a9c6:	f000 f82f 	bl	800aa28 <__malloc_unlock>
 800a9ca:	f104 000b 	add.w	r0, r4, #11
 800a9ce:	1d23      	adds	r3, r4, #4
 800a9d0:	f020 0007 	bic.w	r0, r0, #7
 800a9d4:	1ac2      	subs	r2, r0, r3
 800a9d6:	bf1c      	itt	ne
 800a9d8:	1a1b      	subne	r3, r3, r0
 800a9da:	50a3      	strne	r3, [r4, r2]
 800a9dc:	e7af      	b.n	800a93e <_malloc_r+0x22>
 800a9de:	6862      	ldr	r2, [r4, #4]
 800a9e0:	42a3      	cmp	r3, r4
 800a9e2:	bf0c      	ite	eq
 800a9e4:	f8c8 2000 	streq.w	r2, [r8]
 800a9e8:	605a      	strne	r2, [r3, #4]
 800a9ea:	e7eb      	b.n	800a9c4 <_malloc_r+0xa8>
 800a9ec:	4623      	mov	r3, r4
 800a9ee:	6864      	ldr	r4, [r4, #4]
 800a9f0:	e7ae      	b.n	800a950 <_malloc_r+0x34>
 800a9f2:	463c      	mov	r4, r7
 800a9f4:	687f      	ldr	r7, [r7, #4]
 800a9f6:	e7b6      	b.n	800a966 <_malloc_r+0x4a>
 800a9f8:	461a      	mov	r2, r3
 800a9fa:	685b      	ldr	r3, [r3, #4]
 800a9fc:	42a3      	cmp	r3, r4
 800a9fe:	d1fb      	bne.n	800a9f8 <_malloc_r+0xdc>
 800aa00:	2300      	movs	r3, #0
 800aa02:	6053      	str	r3, [r2, #4]
 800aa04:	e7de      	b.n	800a9c4 <_malloc_r+0xa8>
 800aa06:	230c      	movs	r3, #12
 800aa08:	6033      	str	r3, [r6, #0]
 800aa0a:	4630      	mov	r0, r6
 800aa0c:	f000 f80c 	bl	800aa28 <__malloc_unlock>
 800aa10:	e794      	b.n	800a93c <_malloc_r+0x20>
 800aa12:	6005      	str	r5, [r0, #0]
 800aa14:	e7d6      	b.n	800a9c4 <_malloc_r+0xa8>
 800aa16:	bf00      	nop
 800aa18:	240003e0 	.word	0x240003e0

0800aa1c <__malloc_lock>:
 800aa1c:	4801      	ldr	r0, [pc, #4]	@ (800aa24 <__malloc_lock+0x8>)
 800aa1e:	f7ff bf0f 	b.w	800a840 <__retarget_lock_acquire_recursive>
 800aa22:	bf00      	nop
 800aa24:	240003d8 	.word	0x240003d8

0800aa28 <__malloc_unlock>:
 800aa28:	4801      	ldr	r0, [pc, #4]	@ (800aa30 <__malloc_unlock+0x8>)
 800aa2a:	f7ff bf0a 	b.w	800a842 <__retarget_lock_release_recursive>
 800aa2e:	bf00      	nop
 800aa30:	240003d8 	.word	0x240003d8

0800aa34 <__ssputs_r>:
 800aa34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa38:	688e      	ldr	r6, [r1, #8]
 800aa3a:	461f      	mov	r7, r3
 800aa3c:	42be      	cmp	r6, r7
 800aa3e:	680b      	ldr	r3, [r1, #0]
 800aa40:	4682      	mov	sl, r0
 800aa42:	460c      	mov	r4, r1
 800aa44:	4690      	mov	r8, r2
 800aa46:	d82d      	bhi.n	800aaa4 <__ssputs_r+0x70>
 800aa48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aa4c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aa50:	d026      	beq.n	800aaa0 <__ssputs_r+0x6c>
 800aa52:	6965      	ldr	r5, [r4, #20]
 800aa54:	6909      	ldr	r1, [r1, #16]
 800aa56:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa5a:	eba3 0901 	sub.w	r9, r3, r1
 800aa5e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aa62:	1c7b      	adds	r3, r7, #1
 800aa64:	444b      	add	r3, r9
 800aa66:	106d      	asrs	r5, r5, #1
 800aa68:	429d      	cmp	r5, r3
 800aa6a:	bf38      	it	cc
 800aa6c:	461d      	movcc	r5, r3
 800aa6e:	0553      	lsls	r3, r2, #21
 800aa70:	d527      	bpl.n	800aac2 <__ssputs_r+0x8e>
 800aa72:	4629      	mov	r1, r5
 800aa74:	f7ff ff52 	bl	800a91c <_malloc_r>
 800aa78:	4606      	mov	r6, r0
 800aa7a:	b360      	cbz	r0, 800aad6 <__ssputs_r+0xa2>
 800aa7c:	6921      	ldr	r1, [r4, #16]
 800aa7e:	464a      	mov	r2, r9
 800aa80:	f000 fae8 	bl	800b054 <memcpy>
 800aa84:	89a3      	ldrh	r3, [r4, #12]
 800aa86:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aa8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa8e:	81a3      	strh	r3, [r4, #12]
 800aa90:	6126      	str	r6, [r4, #16]
 800aa92:	6165      	str	r5, [r4, #20]
 800aa94:	444e      	add	r6, r9
 800aa96:	eba5 0509 	sub.w	r5, r5, r9
 800aa9a:	6026      	str	r6, [r4, #0]
 800aa9c:	60a5      	str	r5, [r4, #8]
 800aa9e:	463e      	mov	r6, r7
 800aaa0:	42be      	cmp	r6, r7
 800aaa2:	d900      	bls.n	800aaa6 <__ssputs_r+0x72>
 800aaa4:	463e      	mov	r6, r7
 800aaa6:	6820      	ldr	r0, [r4, #0]
 800aaa8:	4632      	mov	r2, r6
 800aaaa:	4641      	mov	r1, r8
 800aaac:	f000 faa8 	bl	800b000 <memmove>
 800aab0:	68a3      	ldr	r3, [r4, #8]
 800aab2:	1b9b      	subs	r3, r3, r6
 800aab4:	60a3      	str	r3, [r4, #8]
 800aab6:	6823      	ldr	r3, [r4, #0]
 800aab8:	4433      	add	r3, r6
 800aaba:	6023      	str	r3, [r4, #0]
 800aabc:	2000      	movs	r0, #0
 800aabe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aac2:	462a      	mov	r2, r5
 800aac4:	f000 fad4 	bl	800b070 <_realloc_r>
 800aac8:	4606      	mov	r6, r0
 800aaca:	2800      	cmp	r0, #0
 800aacc:	d1e0      	bne.n	800aa90 <__ssputs_r+0x5c>
 800aace:	6921      	ldr	r1, [r4, #16]
 800aad0:	4650      	mov	r0, sl
 800aad2:	f7ff feb7 	bl	800a844 <_free_r>
 800aad6:	230c      	movs	r3, #12
 800aad8:	f8ca 3000 	str.w	r3, [sl]
 800aadc:	89a3      	ldrh	r3, [r4, #12]
 800aade:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aae2:	81a3      	strh	r3, [r4, #12]
 800aae4:	f04f 30ff 	mov.w	r0, #4294967295
 800aae8:	e7e9      	b.n	800aabe <__ssputs_r+0x8a>
	...

0800aaec <_svfiprintf_r>:
 800aaec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaf0:	4698      	mov	r8, r3
 800aaf2:	898b      	ldrh	r3, [r1, #12]
 800aaf4:	061b      	lsls	r3, r3, #24
 800aaf6:	b09d      	sub	sp, #116	@ 0x74
 800aaf8:	4607      	mov	r7, r0
 800aafa:	460d      	mov	r5, r1
 800aafc:	4614      	mov	r4, r2
 800aafe:	d510      	bpl.n	800ab22 <_svfiprintf_r+0x36>
 800ab00:	690b      	ldr	r3, [r1, #16]
 800ab02:	b973      	cbnz	r3, 800ab22 <_svfiprintf_r+0x36>
 800ab04:	2140      	movs	r1, #64	@ 0x40
 800ab06:	f7ff ff09 	bl	800a91c <_malloc_r>
 800ab0a:	6028      	str	r0, [r5, #0]
 800ab0c:	6128      	str	r0, [r5, #16]
 800ab0e:	b930      	cbnz	r0, 800ab1e <_svfiprintf_r+0x32>
 800ab10:	230c      	movs	r3, #12
 800ab12:	603b      	str	r3, [r7, #0]
 800ab14:	f04f 30ff 	mov.w	r0, #4294967295
 800ab18:	b01d      	add	sp, #116	@ 0x74
 800ab1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab1e:	2340      	movs	r3, #64	@ 0x40
 800ab20:	616b      	str	r3, [r5, #20]
 800ab22:	2300      	movs	r3, #0
 800ab24:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab26:	2320      	movs	r3, #32
 800ab28:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ab2c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab30:	2330      	movs	r3, #48	@ 0x30
 800ab32:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800acd0 <_svfiprintf_r+0x1e4>
 800ab36:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ab3a:	f04f 0901 	mov.w	r9, #1
 800ab3e:	4623      	mov	r3, r4
 800ab40:	469a      	mov	sl, r3
 800ab42:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab46:	b10a      	cbz	r2, 800ab4c <_svfiprintf_r+0x60>
 800ab48:	2a25      	cmp	r2, #37	@ 0x25
 800ab4a:	d1f9      	bne.n	800ab40 <_svfiprintf_r+0x54>
 800ab4c:	ebba 0b04 	subs.w	fp, sl, r4
 800ab50:	d00b      	beq.n	800ab6a <_svfiprintf_r+0x7e>
 800ab52:	465b      	mov	r3, fp
 800ab54:	4622      	mov	r2, r4
 800ab56:	4629      	mov	r1, r5
 800ab58:	4638      	mov	r0, r7
 800ab5a:	f7ff ff6b 	bl	800aa34 <__ssputs_r>
 800ab5e:	3001      	adds	r0, #1
 800ab60:	f000 80a7 	beq.w	800acb2 <_svfiprintf_r+0x1c6>
 800ab64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab66:	445a      	add	r2, fp
 800ab68:	9209      	str	r2, [sp, #36]	@ 0x24
 800ab6a:	f89a 3000 	ldrb.w	r3, [sl]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	f000 809f 	beq.w	800acb2 <_svfiprintf_r+0x1c6>
 800ab74:	2300      	movs	r3, #0
 800ab76:	f04f 32ff 	mov.w	r2, #4294967295
 800ab7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab7e:	f10a 0a01 	add.w	sl, sl, #1
 800ab82:	9304      	str	r3, [sp, #16]
 800ab84:	9307      	str	r3, [sp, #28]
 800ab86:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ab8a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ab8c:	4654      	mov	r4, sl
 800ab8e:	2205      	movs	r2, #5
 800ab90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab94:	484e      	ldr	r0, [pc, #312]	@ (800acd0 <_svfiprintf_r+0x1e4>)
 800ab96:	f7f5 fbab 	bl	80002f0 <memchr>
 800ab9a:	9a04      	ldr	r2, [sp, #16]
 800ab9c:	b9d8      	cbnz	r0, 800abd6 <_svfiprintf_r+0xea>
 800ab9e:	06d0      	lsls	r0, r2, #27
 800aba0:	bf44      	itt	mi
 800aba2:	2320      	movmi	r3, #32
 800aba4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aba8:	0711      	lsls	r1, r2, #28
 800abaa:	bf44      	itt	mi
 800abac:	232b      	movmi	r3, #43	@ 0x2b
 800abae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800abb2:	f89a 3000 	ldrb.w	r3, [sl]
 800abb6:	2b2a      	cmp	r3, #42	@ 0x2a
 800abb8:	d015      	beq.n	800abe6 <_svfiprintf_r+0xfa>
 800abba:	9a07      	ldr	r2, [sp, #28]
 800abbc:	4654      	mov	r4, sl
 800abbe:	2000      	movs	r0, #0
 800abc0:	f04f 0c0a 	mov.w	ip, #10
 800abc4:	4621      	mov	r1, r4
 800abc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abca:	3b30      	subs	r3, #48	@ 0x30
 800abcc:	2b09      	cmp	r3, #9
 800abce:	d94b      	bls.n	800ac68 <_svfiprintf_r+0x17c>
 800abd0:	b1b0      	cbz	r0, 800ac00 <_svfiprintf_r+0x114>
 800abd2:	9207      	str	r2, [sp, #28]
 800abd4:	e014      	b.n	800ac00 <_svfiprintf_r+0x114>
 800abd6:	eba0 0308 	sub.w	r3, r0, r8
 800abda:	fa09 f303 	lsl.w	r3, r9, r3
 800abde:	4313      	orrs	r3, r2
 800abe0:	9304      	str	r3, [sp, #16]
 800abe2:	46a2      	mov	sl, r4
 800abe4:	e7d2      	b.n	800ab8c <_svfiprintf_r+0xa0>
 800abe6:	9b03      	ldr	r3, [sp, #12]
 800abe8:	1d19      	adds	r1, r3, #4
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	9103      	str	r1, [sp, #12]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	bfbb      	ittet	lt
 800abf2:	425b      	neglt	r3, r3
 800abf4:	f042 0202 	orrlt.w	r2, r2, #2
 800abf8:	9307      	strge	r3, [sp, #28]
 800abfa:	9307      	strlt	r3, [sp, #28]
 800abfc:	bfb8      	it	lt
 800abfe:	9204      	strlt	r2, [sp, #16]
 800ac00:	7823      	ldrb	r3, [r4, #0]
 800ac02:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac04:	d10a      	bne.n	800ac1c <_svfiprintf_r+0x130>
 800ac06:	7863      	ldrb	r3, [r4, #1]
 800ac08:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac0a:	d132      	bne.n	800ac72 <_svfiprintf_r+0x186>
 800ac0c:	9b03      	ldr	r3, [sp, #12]
 800ac0e:	1d1a      	adds	r2, r3, #4
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	9203      	str	r2, [sp, #12]
 800ac14:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ac18:	3402      	adds	r4, #2
 800ac1a:	9305      	str	r3, [sp, #20]
 800ac1c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ace0 <_svfiprintf_r+0x1f4>
 800ac20:	7821      	ldrb	r1, [r4, #0]
 800ac22:	2203      	movs	r2, #3
 800ac24:	4650      	mov	r0, sl
 800ac26:	f7f5 fb63 	bl	80002f0 <memchr>
 800ac2a:	b138      	cbz	r0, 800ac3c <_svfiprintf_r+0x150>
 800ac2c:	9b04      	ldr	r3, [sp, #16]
 800ac2e:	eba0 000a 	sub.w	r0, r0, sl
 800ac32:	2240      	movs	r2, #64	@ 0x40
 800ac34:	4082      	lsls	r2, r0
 800ac36:	4313      	orrs	r3, r2
 800ac38:	3401      	adds	r4, #1
 800ac3a:	9304      	str	r3, [sp, #16]
 800ac3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac40:	4824      	ldr	r0, [pc, #144]	@ (800acd4 <_svfiprintf_r+0x1e8>)
 800ac42:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ac46:	2206      	movs	r2, #6
 800ac48:	f7f5 fb52 	bl	80002f0 <memchr>
 800ac4c:	2800      	cmp	r0, #0
 800ac4e:	d036      	beq.n	800acbe <_svfiprintf_r+0x1d2>
 800ac50:	4b21      	ldr	r3, [pc, #132]	@ (800acd8 <_svfiprintf_r+0x1ec>)
 800ac52:	bb1b      	cbnz	r3, 800ac9c <_svfiprintf_r+0x1b0>
 800ac54:	9b03      	ldr	r3, [sp, #12]
 800ac56:	3307      	adds	r3, #7
 800ac58:	f023 0307 	bic.w	r3, r3, #7
 800ac5c:	3308      	adds	r3, #8
 800ac5e:	9303      	str	r3, [sp, #12]
 800ac60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac62:	4433      	add	r3, r6
 800ac64:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac66:	e76a      	b.n	800ab3e <_svfiprintf_r+0x52>
 800ac68:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac6c:	460c      	mov	r4, r1
 800ac6e:	2001      	movs	r0, #1
 800ac70:	e7a8      	b.n	800abc4 <_svfiprintf_r+0xd8>
 800ac72:	2300      	movs	r3, #0
 800ac74:	3401      	adds	r4, #1
 800ac76:	9305      	str	r3, [sp, #20]
 800ac78:	4619      	mov	r1, r3
 800ac7a:	f04f 0c0a 	mov.w	ip, #10
 800ac7e:	4620      	mov	r0, r4
 800ac80:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac84:	3a30      	subs	r2, #48	@ 0x30
 800ac86:	2a09      	cmp	r2, #9
 800ac88:	d903      	bls.n	800ac92 <_svfiprintf_r+0x1a6>
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d0c6      	beq.n	800ac1c <_svfiprintf_r+0x130>
 800ac8e:	9105      	str	r1, [sp, #20]
 800ac90:	e7c4      	b.n	800ac1c <_svfiprintf_r+0x130>
 800ac92:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac96:	4604      	mov	r4, r0
 800ac98:	2301      	movs	r3, #1
 800ac9a:	e7f0      	b.n	800ac7e <_svfiprintf_r+0x192>
 800ac9c:	ab03      	add	r3, sp, #12
 800ac9e:	9300      	str	r3, [sp, #0]
 800aca0:	462a      	mov	r2, r5
 800aca2:	4b0e      	ldr	r3, [pc, #56]	@ (800acdc <_svfiprintf_r+0x1f0>)
 800aca4:	a904      	add	r1, sp, #16
 800aca6:	4638      	mov	r0, r7
 800aca8:	f3af 8000 	nop.w
 800acac:	1c42      	adds	r2, r0, #1
 800acae:	4606      	mov	r6, r0
 800acb0:	d1d6      	bne.n	800ac60 <_svfiprintf_r+0x174>
 800acb2:	89ab      	ldrh	r3, [r5, #12]
 800acb4:	065b      	lsls	r3, r3, #25
 800acb6:	f53f af2d 	bmi.w	800ab14 <_svfiprintf_r+0x28>
 800acba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800acbc:	e72c      	b.n	800ab18 <_svfiprintf_r+0x2c>
 800acbe:	ab03      	add	r3, sp, #12
 800acc0:	9300      	str	r3, [sp, #0]
 800acc2:	462a      	mov	r2, r5
 800acc4:	4b05      	ldr	r3, [pc, #20]	@ (800acdc <_svfiprintf_r+0x1f0>)
 800acc6:	a904      	add	r1, sp, #16
 800acc8:	4638      	mov	r0, r7
 800acca:	f000 f879 	bl	800adc0 <_printf_i>
 800acce:	e7ed      	b.n	800acac <_svfiprintf_r+0x1c0>
 800acd0:	0800b234 	.word	0x0800b234
 800acd4:	0800b23e 	.word	0x0800b23e
 800acd8:	00000000 	.word	0x00000000
 800acdc:	0800aa35 	.word	0x0800aa35
 800ace0:	0800b23a 	.word	0x0800b23a

0800ace4 <_printf_common>:
 800ace4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ace8:	4616      	mov	r6, r2
 800acea:	4698      	mov	r8, r3
 800acec:	688a      	ldr	r2, [r1, #8]
 800acee:	690b      	ldr	r3, [r1, #16]
 800acf0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800acf4:	4293      	cmp	r3, r2
 800acf6:	bfb8      	it	lt
 800acf8:	4613      	movlt	r3, r2
 800acfa:	6033      	str	r3, [r6, #0]
 800acfc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ad00:	4607      	mov	r7, r0
 800ad02:	460c      	mov	r4, r1
 800ad04:	b10a      	cbz	r2, 800ad0a <_printf_common+0x26>
 800ad06:	3301      	adds	r3, #1
 800ad08:	6033      	str	r3, [r6, #0]
 800ad0a:	6823      	ldr	r3, [r4, #0]
 800ad0c:	0699      	lsls	r1, r3, #26
 800ad0e:	bf42      	ittt	mi
 800ad10:	6833      	ldrmi	r3, [r6, #0]
 800ad12:	3302      	addmi	r3, #2
 800ad14:	6033      	strmi	r3, [r6, #0]
 800ad16:	6825      	ldr	r5, [r4, #0]
 800ad18:	f015 0506 	ands.w	r5, r5, #6
 800ad1c:	d106      	bne.n	800ad2c <_printf_common+0x48>
 800ad1e:	f104 0a19 	add.w	sl, r4, #25
 800ad22:	68e3      	ldr	r3, [r4, #12]
 800ad24:	6832      	ldr	r2, [r6, #0]
 800ad26:	1a9b      	subs	r3, r3, r2
 800ad28:	42ab      	cmp	r3, r5
 800ad2a:	dc26      	bgt.n	800ad7a <_printf_common+0x96>
 800ad2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ad30:	6822      	ldr	r2, [r4, #0]
 800ad32:	3b00      	subs	r3, #0
 800ad34:	bf18      	it	ne
 800ad36:	2301      	movne	r3, #1
 800ad38:	0692      	lsls	r2, r2, #26
 800ad3a:	d42b      	bmi.n	800ad94 <_printf_common+0xb0>
 800ad3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ad40:	4641      	mov	r1, r8
 800ad42:	4638      	mov	r0, r7
 800ad44:	47c8      	blx	r9
 800ad46:	3001      	adds	r0, #1
 800ad48:	d01e      	beq.n	800ad88 <_printf_common+0xa4>
 800ad4a:	6823      	ldr	r3, [r4, #0]
 800ad4c:	6922      	ldr	r2, [r4, #16]
 800ad4e:	f003 0306 	and.w	r3, r3, #6
 800ad52:	2b04      	cmp	r3, #4
 800ad54:	bf02      	ittt	eq
 800ad56:	68e5      	ldreq	r5, [r4, #12]
 800ad58:	6833      	ldreq	r3, [r6, #0]
 800ad5a:	1aed      	subeq	r5, r5, r3
 800ad5c:	68a3      	ldr	r3, [r4, #8]
 800ad5e:	bf0c      	ite	eq
 800ad60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad64:	2500      	movne	r5, #0
 800ad66:	4293      	cmp	r3, r2
 800ad68:	bfc4      	itt	gt
 800ad6a:	1a9b      	subgt	r3, r3, r2
 800ad6c:	18ed      	addgt	r5, r5, r3
 800ad6e:	2600      	movs	r6, #0
 800ad70:	341a      	adds	r4, #26
 800ad72:	42b5      	cmp	r5, r6
 800ad74:	d11a      	bne.n	800adac <_printf_common+0xc8>
 800ad76:	2000      	movs	r0, #0
 800ad78:	e008      	b.n	800ad8c <_printf_common+0xa8>
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	4652      	mov	r2, sl
 800ad7e:	4641      	mov	r1, r8
 800ad80:	4638      	mov	r0, r7
 800ad82:	47c8      	blx	r9
 800ad84:	3001      	adds	r0, #1
 800ad86:	d103      	bne.n	800ad90 <_printf_common+0xac>
 800ad88:	f04f 30ff 	mov.w	r0, #4294967295
 800ad8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad90:	3501      	adds	r5, #1
 800ad92:	e7c6      	b.n	800ad22 <_printf_common+0x3e>
 800ad94:	18e1      	adds	r1, r4, r3
 800ad96:	1c5a      	adds	r2, r3, #1
 800ad98:	2030      	movs	r0, #48	@ 0x30
 800ad9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ad9e:	4422      	add	r2, r4
 800ada0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ada4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ada8:	3302      	adds	r3, #2
 800adaa:	e7c7      	b.n	800ad3c <_printf_common+0x58>
 800adac:	2301      	movs	r3, #1
 800adae:	4622      	mov	r2, r4
 800adb0:	4641      	mov	r1, r8
 800adb2:	4638      	mov	r0, r7
 800adb4:	47c8      	blx	r9
 800adb6:	3001      	adds	r0, #1
 800adb8:	d0e6      	beq.n	800ad88 <_printf_common+0xa4>
 800adba:	3601      	adds	r6, #1
 800adbc:	e7d9      	b.n	800ad72 <_printf_common+0x8e>
	...

0800adc0 <_printf_i>:
 800adc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800adc4:	7e0f      	ldrb	r7, [r1, #24]
 800adc6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800adc8:	2f78      	cmp	r7, #120	@ 0x78
 800adca:	4691      	mov	r9, r2
 800adcc:	4680      	mov	r8, r0
 800adce:	460c      	mov	r4, r1
 800add0:	469a      	mov	sl, r3
 800add2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800add6:	d807      	bhi.n	800ade8 <_printf_i+0x28>
 800add8:	2f62      	cmp	r7, #98	@ 0x62
 800adda:	d80a      	bhi.n	800adf2 <_printf_i+0x32>
 800addc:	2f00      	cmp	r7, #0
 800adde:	f000 80d2 	beq.w	800af86 <_printf_i+0x1c6>
 800ade2:	2f58      	cmp	r7, #88	@ 0x58
 800ade4:	f000 80b9 	beq.w	800af5a <_printf_i+0x19a>
 800ade8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800adec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800adf0:	e03a      	b.n	800ae68 <_printf_i+0xa8>
 800adf2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800adf6:	2b15      	cmp	r3, #21
 800adf8:	d8f6      	bhi.n	800ade8 <_printf_i+0x28>
 800adfa:	a101      	add	r1, pc, #4	@ (adr r1, 800ae00 <_printf_i+0x40>)
 800adfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ae00:	0800ae59 	.word	0x0800ae59
 800ae04:	0800ae6d 	.word	0x0800ae6d
 800ae08:	0800ade9 	.word	0x0800ade9
 800ae0c:	0800ade9 	.word	0x0800ade9
 800ae10:	0800ade9 	.word	0x0800ade9
 800ae14:	0800ade9 	.word	0x0800ade9
 800ae18:	0800ae6d 	.word	0x0800ae6d
 800ae1c:	0800ade9 	.word	0x0800ade9
 800ae20:	0800ade9 	.word	0x0800ade9
 800ae24:	0800ade9 	.word	0x0800ade9
 800ae28:	0800ade9 	.word	0x0800ade9
 800ae2c:	0800af6d 	.word	0x0800af6d
 800ae30:	0800ae97 	.word	0x0800ae97
 800ae34:	0800af27 	.word	0x0800af27
 800ae38:	0800ade9 	.word	0x0800ade9
 800ae3c:	0800ade9 	.word	0x0800ade9
 800ae40:	0800af8f 	.word	0x0800af8f
 800ae44:	0800ade9 	.word	0x0800ade9
 800ae48:	0800ae97 	.word	0x0800ae97
 800ae4c:	0800ade9 	.word	0x0800ade9
 800ae50:	0800ade9 	.word	0x0800ade9
 800ae54:	0800af2f 	.word	0x0800af2f
 800ae58:	6833      	ldr	r3, [r6, #0]
 800ae5a:	1d1a      	adds	r2, r3, #4
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	6032      	str	r2, [r6, #0]
 800ae60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ae64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ae68:	2301      	movs	r3, #1
 800ae6a:	e09d      	b.n	800afa8 <_printf_i+0x1e8>
 800ae6c:	6833      	ldr	r3, [r6, #0]
 800ae6e:	6820      	ldr	r0, [r4, #0]
 800ae70:	1d19      	adds	r1, r3, #4
 800ae72:	6031      	str	r1, [r6, #0]
 800ae74:	0606      	lsls	r6, r0, #24
 800ae76:	d501      	bpl.n	800ae7c <_printf_i+0xbc>
 800ae78:	681d      	ldr	r5, [r3, #0]
 800ae7a:	e003      	b.n	800ae84 <_printf_i+0xc4>
 800ae7c:	0645      	lsls	r5, r0, #25
 800ae7e:	d5fb      	bpl.n	800ae78 <_printf_i+0xb8>
 800ae80:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ae84:	2d00      	cmp	r5, #0
 800ae86:	da03      	bge.n	800ae90 <_printf_i+0xd0>
 800ae88:	232d      	movs	r3, #45	@ 0x2d
 800ae8a:	426d      	negs	r5, r5
 800ae8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae90:	4859      	ldr	r0, [pc, #356]	@ (800aff8 <_printf_i+0x238>)
 800ae92:	230a      	movs	r3, #10
 800ae94:	e011      	b.n	800aeba <_printf_i+0xfa>
 800ae96:	6821      	ldr	r1, [r4, #0]
 800ae98:	6833      	ldr	r3, [r6, #0]
 800ae9a:	0608      	lsls	r0, r1, #24
 800ae9c:	f853 5b04 	ldr.w	r5, [r3], #4
 800aea0:	d402      	bmi.n	800aea8 <_printf_i+0xe8>
 800aea2:	0649      	lsls	r1, r1, #25
 800aea4:	bf48      	it	mi
 800aea6:	b2ad      	uxthmi	r5, r5
 800aea8:	2f6f      	cmp	r7, #111	@ 0x6f
 800aeaa:	4853      	ldr	r0, [pc, #332]	@ (800aff8 <_printf_i+0x238>)
 800aeac:	6033      	str	r3, [r6, #0]
 800aeae:	bf14      	ite	ne
 800aeb0:	230a      	movne	r3, #10
 800aeb2:	2308      	moveq	r3, #8
 800aeb4:	2100      	movs	r1, #0
 800aeb6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800aeba:	6866      	ldr	r6, [r4, #4]
 800aebc:	60a6      	str	r6, [r4, #8]
 800aebe:	2e00      	cmp	r6, #0
 800aec0:	bfa2      	ittt	ge
 800aec2:	6821      	ldrge	r1, [r4, #0]
 800aec4:	f021 0104 	bicge.w	r1, r1, #4
 800aec8:	6021      	strge	r1, [r4, #0]
 800aeca:	b90d      	cbnz	r5, 800aed0 <_printf_i+0x110>
 800aecc:	2e00      	cmp	r6, #0
 800aece:	d04b      	beq.n	800af68 <_printf_i+0x1a8>
 800aed0:	4616      	mov	r6, r2
 800aed2:	fbb5 f1f3 	udiv	r1, r5, r3
 800aed6:	fb03 5711 	mls	r7, r3, r1, r5
 800aeda:	5dc7      	ldrb	r7, [r0, r7]
 800aedc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aee0:	462f      	mov	r7, r5
 800aee2:	42bb      	cmp	r3, r7
 800aee4:	460d      	mov	r5, r1
 800aee6:	d9f4      	bls.n	800aed2 <_printf_i+0x112>
 800aee8:	2b08      	cmp	r3, #8
 800aeea:	d10b      	bne.n	800af04 <_printf_i+0x144>
 800aeec:	6823      	ldr	r3, [r4, #0]
 800aeee:	07df      	lsls	r7, r3, #31
 800aef0:	d508      	bpl.n	800af04 <_printf_i+0x144>
 800aef2:	6923      	ldr	r3, [r4, #16]
 800aef4:	6861      	ldr	r1, [r4, #4]
 800aef6:	4299      	cmp	r1, r3
 800aef8:	bfde      	ittt	le
 800aefa:	2330      	movle	r3, #48	@ 0x30
 800aefc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800af00:	f106 36ff 	addle.w	r6, r6, #4294967295
 800af04:	1b92      	subs	r2, r2, r6
 800af06:	6122      	str	r2, [r4, #16]
 800af08:	f8cd a000 	str.w	sl, [sp]
 800af0c:	464b      	mov	r3, r9
 800af0e:	aa03      	add	r2, sp, #12
 800af10:	4621      	mov	r1, r4
 800af12:	4640      	mov	r0, r8
 800af14:	f7ff fee6 	bl	800ace4 <_printf_common>
 800af18:	3001      	adds	r0, #1
 800af1a:	d14a      	bne.n	800afb2 <_printf_i+0x1f2>
 800af1c:	f04f 30ff 	mov.w	r0, #4294967295
 800af20:	b004      	add	sp, #16
 800af22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af26:	6823      	ldr	r3, [r4, #0]
 800af28:	f043 0320 	orr.w	r3, r3, #32
 800af2c:	6023      	str	r3, [r4, #0]
 800af2e:	4833      	ldr	r0, [pc, #204]	@ (800affc <_printf_i+0x23c>)
 800af30:	2778      	movs	r7, #120	@ 0x78
 800af32:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800af36:	6823      	ldr	r3, [r4, #0]
 800af38:	6831      	ldr	r1, [r6, #0]
 800af3a:	061f      	lsls	r7, r3, #24
 800af3c:	f851 5b04 	ldr.w	r5, [r1], #4
 800af40:	d402      	bmi.n	800af48 <_printf_i+0x188>
 800af42:	065f      	lsls	r7, r3, #25
 800af44:	bf48      	it	mi
 800af46:	b2ad      	uxthmi	r5, r5
 800af48:	6031      	str	r1, [r6, #0]
 800af4a:	07d9      	lsls	r1, r3, #31
 800af4c:	bf44      	itt	mi
 800af4e:	f043 0320 	orrmi.w	r3, r3, #32
 800af52:	6023      	strmi	r3, [r4, #0]
 800af54:	b11d      	cbz	r5, 800af5e <_printf_i+0x19e>
 800af56:	2310      	movs	r3, #16
 800af58:	e7ac      	b.n	800aeb4 <_printf_i+0xf4>
 800af5a:	4827      	ldr	r0, [pc, #156]	@ (800aff8 <_printf_i+0x238>)
 800af5c:	e7e9      	b.n	800af32 <_printf_i+0x172>
 800af5e:	6823      	ldr	r3, [r4, #0]
 800af60:	f023 0320 	bic.w	r3, r3, #32
 800af64:	6023      	str	r3, [r4, #0]
 800af66:	e7f6      	b.n	800af56 <_printf_i+0x196>
 800af68:	4616      	mov	r6, r2
 800af6a:	e7bd      	b.n	800aee8 <_printf_i+0x128>
 800af6c:	6833      	ldr	r3, [r6, #0]
 800af6e:	6825      	ldr	r5, [r4, #0]
 800af70:	6961      	ldr	r1, [r4, #20]
 800af72:	1d18      	adds	r0, r3, #4
 800af74:	6030      	str	r0, [r6, #0]
 800af76:	062e      	lsls	r6, r5, #24
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	d501      	bpl.n	800af80 <_printf_i+0x1c0>
 800af7c:	6019      	str	r1, [r3, #0]
 800af7e:	e002      	b.n	800af86 <_printf_i+0x1c6>
 800af80:	0668      	lsls	r0, r5, #25
 800af82:	d5fb      	bpl.n	800af7c <_printf_i+0x1bc>
 800af84:	8019      	strh	r1, [r3, #0]
 800af86:	2300      	movs	r3, #0
 800af88:	6123      	str	r3, [r4, #16]
 800af8a:	4616      	mov	r6, r2
 800af8c:	e7bc      	b.n	800af08 <_printf_i+0x148>
 800af8e:	6833      	ldr	r3, [r6, #0]
 800af90:	1d1a      	adds	r2, r3, #4
 800af92:	6032      	str	r2, [r6, #0]
 800af94:	681e      	ldr	r6, [r3, #0]
 800af96:	6862      	ldr	r2, [r4, #4]
 800af98:	2100      	movs	r1, #0
 800af9a:	4630      	mov	r0, r6
 800af9c:	f7f5 f9a8 	bl	80002f0 <memchr>
 800afa0:	b108      	cbz	r0, 800afa6 <_printf_i+0x1e6>
 800afa2:	1b80      	subs	r0, r0, r6
 800afa4:	6060      	str	r0, [r4, #4]
 800afa6:	6863      	ldr	r3, [r4, #4]
 800afa8:	6123      	str	r3, [r4, #16]
 800afaa:	2300      	movs	r3, #0
 800afac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800afb0:	e7aa      	b.n	800af08 <_printf_i+0x148>
 800afb2:	6923      	ldr	r3, [r4, #16]
 800afb4:	4632      	mov	r2, r6
 800afb6:	4649      	mov	r1, r9
 800afb8:	4640      	mov	r0, r8
 800afba:	47d0      	blx	sl
 800afbc:	3001      	adds	r0, #1
 800afbe:	d0ad      	beq.n	800af1c <_printf_i+0x15c>
 800afc0:	6823      	ldr	r3, [r4, #0]
 800afc2:	079b      	lsls	r3, r3, #30
 800afc4:	d413      	bmi.n	800afee <_printf_i+0x22e>
 800afc6:	68e0      	ldr	r0, [r4, #12]
 800afc8:	9b03      	ldr	r3, [sp, #12]
 800afca:	4298      	cmp	r0, r3
 800afcc:	bfb8      	it	lt
 800afce:	4618      	movlt	r0, r3
 800afd0:	e7a6      	b.n	800af20 <_printf_i+0x160>
 800afd2:	2301      	movs	r3, #1
 800afd4:	4632      	mov	r2, r6
 800afd6:	4649      	mov	r1, r9
 800afd8:	4640      	mov	r0, r8
 800afda:	47d0      	blx	sl
 800afdc:	3001      	adds	r0, #1
 800afde:	d09d      	beq.n	800af1c <_printf_i+0x15c>
 800afe0:	3501      	adds	r5, #1
 800afe2:	68e3      	ldr	r3, [r4, #12]
 800afe4:	9903      	ldr	r1, [sp, #12]
 800afe6:	1a5b      	subs	r3, r3, r1
 800afe8:	42ab      	cmp	r3, r5
 800afea:	dcf2      	bgt.n	800afd2 <_printf_i+0x212>
 800afec:	e7eb      	b.n	800afc6 <_printf_i+0x206>
 800afee:	2500      	movs	r5, #0
 800aff0:	f104 0619 	add.w	r6, r4, #25
 800aff4:	e7f5      	b.n	800afe2 <_printf_i+0x222>
 800aff6:	bf00      	nop
 800aff8:	0800b245 	.word	0x0800b245
 800affc:	0800b256 	.word	0x0800b256

0800b000 <memmove>:
 800b000:	4288      	cmp	r0, r1
 800b002:	b510      	push	{r4, lr}
 800b004:	eb01 0402 	add.w	r4, r1, r2
 800b008:	d902      	bls.n	800b010 <memmove+0x10>
 800b00a:	4284      	cmp	r4, r0
 800b00c:	4623      	mov	r3, r4
 800b00e:	d807      	bhi.n	800b020 <memmove+0x20>
 800b010:	1e43      	subs	r3, r0, #1
 800b012:	42a1      	cmp	r1, r4
 800b014:	d008      	beq.n	800b028 <memmove+0x28>
 800b016:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b01a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b01e:	e7f8      	b.n	800b012 <memmove+0x12>
 800b020:	4402      	add	r2, r0
 800b022:	4601      	mov	r1, r0
 800b024:	428a      	cmp	r2, r1
 800b026:	d100      	bne.n	800b02a <memmove+0x2a>
 800b028:	bd10      	pop	{r4, pc}
 800b02a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b02e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b032:	e7f7      	b.n	800b024 <memmove+0x24>

0800b034 <_sbrk_r>:
 800b034:	b538      	push	{r3, r4, r5, lr}
 800b036:	4d06      	ldr	r5, [pc, #24]	@ (800b050 <_sbrk_r+0x1c>)
 800b038:	2300      	movs	r3, #0
 800b03a:	4604      	mov	r4, r0
 800b03c:	4608      	mov	r0, r1
 800b03e:	602b      	str	r3, [r5, #0]
 800b040:	f7f6 fb48 	bl	80016d4 <_sbrk>
 800b044:	1c43      	adds	r3, r0, #1
 800b046:	d102      	bne.n	800b04e <_sbrk_r+0x1a>
 800b048:	682b      	ldr	r3, [r5, #0]
 800b04a:	b103      	cbz	r3, 800b04e <_sbrk_r+0x1a>
 800b04c:	6023      	str	r3, [r4, #0]
 800b04e:	bd38      	pop	{r3, r4, r5, pc}
 800b050:	240003d4 	.word	0x240003d4

0800b054 <memcpy>:
 800b054:	440a      	add	r2, r1
 800b056:	4291      	cmp	r1, r2
 800b058:	f100 33ff 	add.w	r3, r0, #4294967295
 800b05c:	d100      	bne.n	800b060 <memcpy+0xc>
 800b05e:	4770      	bx	lr
 800b060:	b510      	push	{r4, lr}
 800b062:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b066:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b06a:	4291      	cmp	r1, r2
 800b06c:	d1f9      	bne.n	800b062 <memcpy+0xe>
 800b06e:	bd10      	pop	{r4, pc}

0800b070 <_realloc_r>:
 800b070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b074:	4680      	mov	r8, r0
 800b076:	4615      	mov	r5, r2
 800b078:	460c      	mov	r4, r1
 800b07a:	b921      	cbnz	r1, 800b086 <_realloc_r+0x16>
 800b07c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b080:	4611      	mov	r1, r2
 800b082:	f7ff bc4b 	b.w	800a91c <_malloc_r>
 800b086:	b92a      	cbnz	r2, 800b094 <_realloc_r+0x24>
 800b088:	f7ff fbdc 	bl	800a844 <_free_r>
 800b08c:	2400      	movs	r4, #0
 800b08e:	4620      	mov	r0, r4
 800b090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b094:	f000 f81a 	bl	800b0cc <_malloc_usable_size_r>
 800b098:	4285      	cmp	r5, r0
 800b09a:	4606      	mov	r6, r0
 800b09c:	d802      	bhi.n	800b0a4 <_realloc_r+0x34>
 800b09e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b0a2:	d8f4      	bhi.n	800b08e <_realloc_r+0x1e>
 800b0a4:	4629      	mov	r1, r5
 800b0a6:	4640      	mov	r0, r8
 800b0a8:	f7ff fc38 	bl	800a91c <_malloc_r>
 800b0ac:	4607      	mov	r7, r0
 800b0ae:	2800      	cmp	r0, #0
 800b0b0:	d0ec      	beq.n	800b08c <_realloc_r+0x1c>
 800b0b2:	42b5      	cmp	r5, r6
 800b0b4:	462a      	mov	r2, r5
 800b0b6:	4621      	mov	r1, r4
 800b0b8:	bf28      	it	cs
 800b0ba:	4632      	movcs	r2, r6
 800b0bc:	f7ff ffca 	bl	800b054 <memcpy>
 800b0c0:	4621      	mov	r1, r4
 800b0c2:	4640      	mov	r0, r8
 800b0c4:	f7ff fbbe 	bl	800a844 <_free_r>
 800b0c8:	463c      	mov	r4, r7
 800b0ca:	e7e0      	b.n	800b08e <_realloc_r+0x1e>

0800b0cc <_malloc_usable_size_r>:
 800b0cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0d0:	1f18      	subs	r0, r3, #4
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	bfbc      	itt	lt
 800b0d6:	580b      	ldrlt	r3, [r1, r0]
 800b0d8:	18c0      	addlt	r0, r0, r3
 800b0da:	4770      	bx	lr

0800b0dc <_init>:
 800b0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0de:	bf00      	nop
 800b0e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0e2:	bc08      	pop	{r3}
 800b0e4:	469e      	mov	lr, r3
 800b0e6:	4770      	bx	lr

0800b0e8 <_fini>:
 800b0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ea:	bf00      	nop
 800b0ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0ee:	bc08      	pop	{r3}
 800b0f0:	469e      	mov	lr, r3
 800b0f2:	4770      	bx	lr
