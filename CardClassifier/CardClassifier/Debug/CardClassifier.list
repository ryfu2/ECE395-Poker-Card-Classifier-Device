
CardClassifier.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e8e8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0005ecc8  0800eba0  0800eba0  0000fba0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0806d868  0806d868  0006e868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0806d870  0806d870  0006e870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0806d874  0806d874  0006e874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000d18  24000000  0806d878  0006f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000685d0  24000d20  0806e590  0006fd20  2**5
                  ALLOC
  8 ._user_heap_stack 00001000  20000000  20000000  00070000  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0006fd18  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002299e  00000000  00000000  0006fd46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000046af  00000000  00000000  000926e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 0000abdf  00000000  00000000  00096d93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001090  00000000  00000000  000a1978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000f69  00000000  00000000  000a2a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00039dab  00000000  00000000  000a3971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00023879  00000000  00000000  000dd71c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016668f  00000000  00000000  00100f95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000093  00000000  00000000  00267624  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003de0  00000000  00000000  002676b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000073  00000000  00000000  0026b498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000d20 	.word	0x24000d20
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800eb70 	.word	0x0800eb70

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000d24 	.word	0x24000d24
 80002dc:	0800eb70 	.word	0x0800eb70

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b99e 	b.w	80006e4 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f83a 	bl	8000428 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__aeabi_f2lz>:
 80003c0:	ee07 0a90 	vmov	s15, r0
 80003c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80003c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003cc:	d401      	bmi.n	80003d2 <__aeabi_f2lz+0x12>
 80003ce:	f000 b80b 	b.w	80003e8 <__aeabi_f2ulz>
 80003d2:	eef1 7a67 	vneg.f32	s15, s15
 80003d6:	b508      	push	{r3, lr}
 80003d8:	ee17 0a90 	vmov	r0, s15
 80003dc:	f000 f804 	bl	80003e8 <__aeabi_f2ulz>
 80003e0:	4240      	negs	r0, r0
 80003e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003e6:	bd08      	pop	{r3, pc}

080003e8 <__aeabi_f2ulz>:
 80003e8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000418 <__aeabi_f2ulz+0x30>
 80003ec:	ee07 0a10 	vmov	s14, r0
 80003f0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000420 <__aeabi_f2ulz+0x38>
 80003f4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80003f8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80003fc:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 8000400:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000404:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000408:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800040c:	ee16 1a10 	vmov	r1, s12
 8000410:	ee17 0a90 	vmov	r0, s15
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	00000000 	.word	0x00000000
 800041c:	3df00000 	.word	0x3df00000
 8000420:	00000000 	.word	0x00000000
 8000424:	41f00000 	.word	0x41f00000

08000428 <__udivmoddi4>:
 8000428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800042c:	9d08      	ldr	r5, [sp, #32]
 800042e:	460c      	mov	r4, r1
 8000430:	2b00      	cmp	r3, #0
 8000432:	d14e      	bne.n	80004d2 <__udivmoddi4+0xaa>
 8000434:	4694      	mov	ip, r2
 8000436:	458c      	cmp	ip, r1
 8000438:	4686      	mov	lr, r0
 800043a:	fab2 f282 	clz	r2, r2
 800043e:	d962      	bls.n	8000506 <__udivmoddi4+0xde>
 8000440:	b14a      	cbz	r2, 8000456 <__udivmoddi4+0x2e>
 8000442:	f1c2 0320 	rsb	r3, r2, #32
 8000446:	4091      	lsls	r1, r2
 8000448:	fa20 f303 	lsr.w	r3, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	4319      	orrs	r1, r3
 8000452:	fa00 fe02 	lsl.w	lr, r0, r2
 8000456:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045a:	fa1f f68c 	uxth.w	r6, ip
 800045e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000462:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000466:	fb07 1114 	mls	r1, r7, r4, r1
 800046a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046e:	fb04 f106 	mul.w	r1, r4, r6
 8000472:	4299      	cmp	r1, r3
 8000474:	d90a      	bls.n	800048c <__udivmoddi4+0x64>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f104 30ff 	add.w	r0, r4, #4294967295
 800047e:	f080 8112 	bcs.w	80006a6 <__udivmoddi4+0x27e>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 810f 	bls.w	80006a6 <__udivmoddi4+0x27e>
 8000488:	3c02      	subs	r4, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a59      	subs	r1, r3, r1
 800048e:	fa1f f38e 	uxth.w	r3, lr
 8000492:	fbb1 f0f7 	udiv	r0, r1, r7
 8000496:	fb07 1110 	mls	r1, r7, r0, r1
 800049a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049e:	fb00 f606 	mul.w	r6, r0, r6
 80004a2:	429e      	cmp	r6, r3
 80004a4:	d90a      	bls.n	80004bc <__udivmoddi4+0x94>
 80004a6:	eb1c 0303 	adds.w	r3, ip, r3
 80004aa:	f100 31ff 	add.w	r1, r0, #4294967295
 80004ae:	f080 80fc 	bcs.w	80006aa <__udivmoddi4+0x282>
 80004b2:	429e      	cmp	r6, r3
 80004b4:	f240 80f9 	bls.w	80006aa <__udivmoddi4+0x282>
 80004b8:	4463      	add	r3, ip
 80004ba:	3802      	subs	r0, #2
 80004bc:	1b9b      	subs	r3, r3, r6
 80004be:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80004c2:	2100      	movs	r1, #0
 80004c4:	b11d      	cbz	r5, 80004ce <__udivmoddi4+0xa6>
 80004c6:	40d3      	lsrs	r3, r2
 80004c8:	2200      	movs	r2, #0
 80004ca:	e9c5 3200 	strd	r3, r2, [r5]
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d905      	bls.n	80004e2 <__udivmoddi4+0xba>
 80004d6:	b10d      	cbz	r5, 80004dc <__udivmoddi4+0xb4>
 80004d8:	e9c5 0100 	strd	r0, r1, [r5]
 80004dc:	2100      	movs	r1, #0
 80004de:	4608      	mov	r0, r1
 80004e0:	e7f5      	b.n	80004ce <__udivmoddi4+0xa6>
 80004e2:	fab3 f183 	clz	r1, r3
 80004e6:	2900      	cmp	r1, #0
 80004e8:	d146      	bne.n	8000578 <__udivmoddi4+0x150>
 80004ea:	42a3      	cmp	r3, r4
 80004ec:	d302      	bcc.n	80004f4 <__udivmoddi4+0xcc>
 80004ee:	4290      	cmp	r0, r2
 80004f0:	f0c0 80f0 	bcc.w	80006d4 <__udivmoddi4+0x2ac>
 80004f4:	1a86      	subs	r6, r0, r2
 80004f6:	eb64 0303 	sbc.w	r3, r4, r3
 80004fa:	2001      	movs	r0, #1
 80004fc:	2d00      	cmp	r5, #0
 80004fe:	d0e6      	beq.n	80004ce <__udivmoddi4+0xa6>
 8000500:	e9c5 6300 	strd	r6, r3, [r5]
 8000504:	e7e3      	b.n	80004ce <__udivmoddi4+0xa6>
 8000506:	2a00      	cmp	r2, #0
 8000508:	f040 8090 	bne.w	800062c <__udivmoddi4+0x204>
 800050c:	eba1 040c 	sub.w	r4, r1, ip
 8000510:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000514:	fa1f f78c 	uxth.w	r7, ip
 8000518:	2101      	movs	r1, #1
 800051a:	fbb4 f6f8 	udiv	r6, r4, r8
 800051e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000522:	fb08 4416 	mls	r4, r8, r6, r4
 8000526:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800052a:	fb07 f006 	mul.w	r0, r7, r6
 800052e:	4298      	cmp	r0, r3
 8000530:	d908      	bls.n	8000544 <__udivmoddi4+0x11c>
 8000532:	eb1c 0303 	adds.w	r3, ip, r3
 8000536:	f106 34ff 	add.w	r4, r6, #4294967295
 800053a:	d202      	bcs.n	8000542 <__udivmoddi4+0x11a>
 800053c:	4298      	cmp	r0, r3
 800053e:	f200 80cd 	bhi.w	80006dc <__udivmoddi4+0x2b4>
 8000542:	4626      	mov	r6, r4
 8000544:	1a1c      	subs	r4, r3, r0
 8000546:	fa1f f38e 	uxth.w	r3, lr
 800054a:	fbb4 f0f8 	udiv	r0, r4, r8
 800054e:	fb08 4410 	mls	r4, r8, r0, r4
 8000552:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000556:	fb00 f707 	mul.w	r7, r0, r7
 800055a:	429f      	cmp	r7, r3
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x148>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 34ff 	add.w	r4, r0, #4294967295
 8000566:	d202      	bcs.n	800056e <__udivmoddi4+0x146>
 8000568:	429f      	cmp	r7, r3
 800056a:	f200 80b0 	bhi.w	80006ce <__udivmoddi4+0x2a6>
 800056e:	4620      	mov	r0, r4
 8000570:	1bdb      	subs	r3, r3, r7
 8000572:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000576:	e7a5      	b.n	80004c4 <__udivmoddi4+0x9c>
 8000578:	f1c1 0620 	rsb	r6, r1, #32
 800057c:	408b      	lsls	r3, r1
 800057e:	fa22 f706 	lsr.w	r7, r2, r6
 8000582:	431f      	orrs	r7, r3
 8000584:	fa20 fc06 	lsr.w	ip, r0, r6
 8000588:	fa04 f301 	lsl.w	r3, r4, r1
 800058c:	ea43 030c 	orr.w	r3, r3, ip
 8000590:	40f4      	lsrs	r4, r6
 8000592:	fa00 f801 	lsl.w	r8, r0, r1
 8000596:	0c38      	lsrs	r0, r7, #16
 8000598:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800059c:	fbb4 fef0 	udiv	lr, r4, r0
 80005a0:	fa1f fc87 	uxth.w	ip, r7
 80005a4:	fb00 441e 	mls	r4, r0, lr, r4
 80005a8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005ac:	fb0e f90c 	mul.w	r9, lr, ip
 80005b0:	45a1      	cmp	r9, r4
 80005b2:	fa02 f201 	lsl.w	r2, r2, r1
 80005b6:	d90a      	bls.n	80005ce <__udivmoddi4+0x1a6>
 80005b8:	193c      	adds	r4, r7, r4
 80005ba:	f10e 3aff 	add.w	sl, lr, #4294967295
 80005be:	f080 8084 	bcs.w	80006ca <__udivmoddi4+0x2a2>
 80005c2:	45a1      	cmp	r9, r4
 80005c4:	f240 8081 	bls.w	80006ca <__udivmoddi4+0x2a2>
 80005c8:	f1ae 0e02 	sub.w	lr, lr, #2
 80005cc:	443c      	add	r4, r7
 80005ce:	eba4 0409 	sub.w	r4, r4, r9
 80005d2:	fa1f f983 	uxth.w	r9, r3
 80005d6:	fbb4 f3f0 	udiv	r3, r4, r0
 80005da:	fb00 4413 	mls	r4, r0, r3, r4
 80005de:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005e2:	fb03 fc0c 	mul.w	ip, r3, ip
 80005e6:	45a4      	cmp	ip, r4
 80005e8:	d907      	bls.n	80005fa <__udivmoddi4+0x1d2>
 80005ea:	193c      	adds	r4, r7, r4
 80005ec:	f103 30ff 	add.w	r0, r3, #4294967295
 80005f0:	d267      	bcs.n	80006c2 <__udivmoddi4+0x29a>
 80005f2:	45a4      	cmp	ip, r4
 80005f4:	d965      	bls.n	80006c2 <__udivmoddi4+0x29a>
 80005f6:	3b02      	subs	r3, #2
 80005f8:	443c      	add	r4, r7
 80005fa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005fe:	fba0 9302 	umull	r9, r3, r0, r2
 8000602:	eba4 040c 	sub.w	r4, r4, ip
 8000606:	429c      	cmp	r4, r3
 8000608:	46ce      	mov	lr, r9
 800060a:	469c      	mov	ip, r3
 800060c:	d351      	bcc.n	80006b2 <__udivmoddi4+0x28a>
 800060e:	d04e      	beq.n	80006ae <__udivmoddi4+0x286>
 8000610:	b155      	cbz	r5, 8000628 <__udivmoddi4+0x200>
 8000612:	ebb8 030e 	subs.w	r3, r8, lr
 8000616:	eb64 040c 	sbc.w	r4, r4, ip
 800061a:	fa04 f606 	lsl.w	r6, r4, r6
 800061e:	40cb      	lsrs	r3, r1
 8000620:	431e      	orrs	r6, r3
 8000622:	40cc      	lsrs	r4, r1
 8000624:	e9c5 6400 	strd	r6, r4, [r5]
 8000628:	2100      	movs	r1, #0
 800062a:	e750      	b.n	80004ce <__udivmoddi4+0xa6>
 800062c:	f1c2 0320 	rsb	r3, r2, #32
 8000630:	fa20 f103 	lsr.w	r1, r0, r3
 8000634:	fa0c fc02 	lsl.w	ip, ip, r2
 8000638:	fa24 f303 	lsr.w	r3, r4, r3
 800063c:	4094      	lsls	r4, r2
 800063e:	430c      	orrs	r4, r1
 8000640:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000644:	fa00 fe02 	lsl.w	lr, r0, r2
 8000648:	fa1f f78c 	uxth.w	r7, ip
 800064c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000650:	fb08 3110 	mls	r1, r8, r0, r3
 8000654:	0c23      	lsrs	r3, r4, #16
 8000656:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800065a:	fb00 f107 	mul.w	r1, r0, r7
 800065e:	4299      	cmp	r1, r3
 8000660:	d908      	bls.n	8000674 <__udivmoddi4+0x24c>
 8000662:	eb1c 0303 	adds.w	r3, ip, r3
 8000666:	f100 36ff 	add.w	r6, r0, #4294967295
 800066a:	d22c      	bcs.n	80006c6 <__udivmoddi4+0x29e>
 800066c:	4299      	cmp	r1, r3
 800066e:	d92a      	bls.n	80006c6 <__udivmoddi4+0x29e>
 8000670:	3802      	subs	r0, #2
 8000672:	4463      	add	r3, ip
 8000674:	1a5b      	subs	r3, r3, r1
 8000676:	b2a4      	uxth	r4, r4
 8000678:	fbb3 f1f8 	udiv	r1, r3, r8
 800067c:	fb08 3311 	mls	r3, r8, r1, r3
 8000680:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000684:	fb01 f307 	mul.w	r3, r1, r7
 8000688:	42a3      	cmp	r3, r4
 800068a:	d908      	bls.n	800069e <__udivmoddi4+0x276>
 800068c:	eb1c 0404 	adds.w	r4, ip, r4
 8000690:	f101 36ff 	add.w	r6, r1, #4294967295
 8000694:	d213      	bcs.n	80006be <__udivmoddi4+0x296>
 8000696:	42a3      	cmp	r3, r4
 8000698:	d911      	bls.n	80006be <__udivmoddi4+0x296>
 800069a:	3902      	subs	r1, #2
 800069c:	4464      	add	r4, ip
 800069e:	1ae4      	subs	r4, r4, r3
 80006a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80006a4:	e739      	b.n	800051a <__udivmoddi4+0xf2>
 80006a6:	4604      	mov	r4, r0
 80006a8:	e6f0      	b.n	800048c <__udivmoddi4+0x64>
 80006aa:	4608      	mov	r0, r1
 80006ac:	e706      	b.n	80004bc <__udivmoddi4+0x94>
 80006ae:	45c8      	cmp	r8, r9
 80006b0:	d2ae      	bcs.n	8000610 <__udivmoddi4+0x1e8>
 80006b2:	ebb9 0e02 	subs.w	lr, r9, r2
 80006b6:	eb63 0c07 	sbc.w	ip, r3, r7
 80006ba:	3801      	subs	r0, #1
 80006bc:	e7a8      	b.n	8000610 <__udivmoddi4+0x1e8>
 80006be:	4631      	mov	r1, r6
 80006c0:	e7ed      	b.n	800069e <__udivmoddi4+0x276>
 80006c2:	4603      	mov	r3, r0
 80006c4:	e799      	b.n	80005fa <__udivmoddi4+0x1d2>
 80006c6:	4630      	mov	r0, r6
 80006c8:	e7d4      	b.n	8000674 <__udivmoddi4+0x24c>
 80006ca:	46d6      	mov	lr, sl
 80006cc:	e77f      	b.n	80005ce <__udivmoddi4+0x1a6>
 80006ce:	4463      	add	r3, ip
 80006d0:	3802      	subs	r0, #2
 80006d2:	e74d      	b.n	8000570 <__udivmoddi4+0x148>
 80006d4:	4606      	mov	r6, r0
 80006d6:	4623      	mov	r3, r4
 80006d8:	4608      	mov	r0, r1
 80006da:	e70f      	b.n	80004fc <__udivmoddi4+0xd4>
 80006dc:	3e02      	subs	r6, #2
 80006de:	4463      	add	r3, ip
 80006e0:	e730      	b.n	8000544 <__udivmoddi4+0x11c>
 80006e2:	bf00      	nop

080006e4 <__aeabi_idiv0>:
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop

080006e8 <ov7670_write>:
//DCMI_HandleTypeDef *sp_hdcmi;
//DMA_HandleTypeDef  *sp_hdma_dcmi;
I2C_HandleTypeDef  *sp_hi2c;
uint32_t    s_destAddressForContiuousMode;
uint32_t ov7670_write(uint8_t regAddr, uint8_t data)
{
 80006e8:	b530      	push	{r4, r5, lr}
 80006ea:	b09d      	sub	sp, #116	@ 0x74
  uint16_t SLAVE_ADDR = 0x42;
  HAL_StatusTypeDef ret;
  uint8_t buffer[2] = {regAddr, data};
  ret = HAL_I2C_Master_Transmit(sp_hi2c, 0x42, &buffer, 2, HAL_MAX_DELAY);
 80006ec:	f04f 33ff 	mov.w	r3, #4294967295
  char temp[100];
  sprintf(temp, "Write Status: %d\r\n", ret);
  HAL_UART_Transmit(&huart4,temp,strlen(temp),10);
 80006f0:	4d13      	ldr	r5, [pc, #76]	@ (8000740 <ov7670_write+0x58>)
  uint8_t buffer[2] = {regAddr, data};
 80006f2:	f88d 0008 	strb.w	r0, [sp, #8]
  ret = HAL_I2C_Master_Transmit(sp_hi2c, 0x42, &buffer, 2, HAL_MAX_DELAY);
 80006f6:	aa02      	add	r2, sp, #8
 80006f8:	4812      	ldr	r0, [pc, #72]	@ (8000744 <ov7670_write+0x5c>)
 80006fa:	9300      	str	r3, [sp, #0]
 80006fc:	2302      	movs	r3, #2
  uint8_t buffer[2] = {regAddr, data};
 80006fe:	f88d 1009 	strb.w	r1, [sp, #9]
  ret = HAL_I2C_Master_Transmit(sp_hi2c, 0x42, &buffer, 2, HAL_MAX_DELAY);
 8000702:	2142      	movs	r1, #66	@ 0x42
 8000704:	6800      	ldr	r0, [r0, #0]
 8000706:	f002 ff9f 	bl	8003648 <HAL_I2C_Master_Transmit>
  sprintf(temp, "Write Status: %d\r\n", ret);
 800070a:	490f      	ldr	r1, [pc, #60]	@ (8000748 <ov7670_write+0x60>)
 800070c:	4602      	mov	r2, r0
  ret = HAL_I2C_Master_Transmit(sp_hi2c, 0x42, &buffer, 2, HAL_MAX_DELAY);
 800070e:	4604      	mov	r4, r0
  sprintf(temp, "Write Status: %d\r\n", ret);
 8000710:	a803      	add	r0, sp, #12
 8000712:	f00c f833 	bl	800c77c <siprintf>
  HAL_UART_Transmit(&huart4,temp,strlen(temp),10);
 8000716:	a803      	add	r0, sp, #12
 8000718:	f7ff fe32 	bl	8000380 <strlen>
 800071c:	a903      	add	r1, sp, #12
 800071e:	b282      	uxth	r2, r0
 8000720:	230a      	movs	r3, #10
 8000722:	4628      	mov	r0, r5
 8000724:	f004 ffe9 	bl	80056fa <HAL_UART_Transmit>
//  sprintf(temp, "Data: %x is now written into address: %x\r\n",data, regAddr);
  HAL_UART_Transmit(&huart4,temp,strlen(temp),10);
 8000728:	a803      	add	r0, sp, #12
 800072a:	f7ff fe29 	bl	8000380 <strlen>
 800072e:	230a      	movs	r3, #10
 8000730:	b282      	uxth	r2, r0
 8000732:	a903      	add	r1, sp, #12
 8000734:	4628      	mov	r0, r5
 8000736:	f004 ffe0 	bl	80056fa <HAL_UART_Transmit>
  return ret;
}
 800073a:	4620      	mov	r0, r4
 800073c:	b01d      	add	sp, #116	@ 0x74
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	24008d48 	.word	0x24008d48
 8000744:	24000d40 	.word	0x24000d40
 8000748:	0800ebb0 	.word	0x0800ebb0

0800074c <ov7670_read>:

uint32_t ov7670_read(uint8_t regAddr, uint8_t *data)
{
 800074c:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret;
  uint16_t SLAVE_ADDR = 0x42;
  ret = HAL_I2C_Master_Transmit(sp_hi2c, 0x43, &regAddr, 1, HAL_MAX_DELAY);
 800074e:	4c23      	ldr	r4, [pc, #140]	@ (80007dc <ov7670_read+0x90>)
{
 8000750:	b09f      	sub	sp, #124	@ 0x7c
  ret = HAL_I2C_Master_Transmit(sp_hi2c, 0x43, &regAddr, 1, HAL_MAX_DELAY);
 8000752:	f04f 37ff 	mov.w	r7, #4294967295
{
 8000756:	460d      	mov	r5, r1
  ret = HAL_I2C_Master_Transmit(sp_hi2c, 0x43, &regAddr, 1, HAL_MAX_DELAY);
 8000758:	2301      	movs	r3, #1
 800075a:	f10d 020f 	add.w	r2, sp, #15
{
 800075e:	f88d 000f 	strb.w	r0, [sp, #15]
  ret = HAL_I2C_Master_Transmit(sp_hi2c, 0x43, &regAddr, 1, HAL_MAX_DELAY);
 8000762:	2143      	movs	r1, #67	@ 0x43
 8000764:	9700      	str	r7, [sp, #0]
 8000766:	6820      	ldr	r0, [r4, #0]
 8000768:	f002 ff6e 	bl	8003648 <HAL_I2C_Master_Transmit>
  char buffer [100];
  sprintf(buffer, "Read_Transmit Status: %d\r\n", ret);
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 800076c:	4e1c      	ldr	r6, [pc, #112]	@ (80007e0 <ov7670_read+0x94>)
  ret = HAL_I2C_Master_Transmit(sp_hi2c, 0x43, &regAddr, 1, HAL_MAX_DELAY);
 800076e:	4602      	mov	r2, r0
  sprintf(buffer, "Read_Transmit Status: %d\r\n", ret);
 8000770:	491c      	ldr	r1, [pc, #112]	@ (80007e4 <ov7670_read+0x98>)
 8000772:	a805      	add	r0, sp, #20
 8000774:	f00c f802 	bl	800c77c <siprintf>
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8000778:	a805      	add	r0, sp, #20
 800077a:	f7ff fe01 	bl	8000380 <strlen>
 800077e:	a905      	add	r1, sp, #20
 8000780:	b282      	uxth	r2, r0
 8000782:	230a      	movs	r3, #10
 8000784:	4630      	mov	r0, r6
 8000786:	f004 ffb8 	bl	80056fa <HAL_UART_Transmit>
  ret = HAL_I2C_Master_Receive(sp_hi2c, 0x43, data, 1, HAL_MAX_DELAY);
 800078a:	2301      	movs	r3, #1
 800078c:	462a      	mov	r2, r5
 800078e:	9700      	str	r7, [sp, #0]
 8000790:	2143      	movs	r1, #67	@ 0x43
 8000792:	6820      	ldr	r0, [r4, #0]
 8000794:	f003 f804 	bl	80037a0 <HAL_I2C_Master_Receive>
  sprintf(buffer, "Read_Receive Status: %d\r\n", ret);
 8000798:	4913      	ldr	r1, [pc, #76]	@ (80007e8 <ov7670_read+0x9c>)
 800079a:	4602      	mov	r2, r0
  ret = HAL_I2C_Master_Receive(sp_hi2c, 0x43, data, 1, HAL_MAX_DELAY);
 800079c:	4604      	mov	r4, r0
  sprintf(buffer, "Read_Receive Status: %d\r\n", ret);
 800079e:	a805      	add	r0, sp, #20
 80007a0:	f00b ffec 	bl	800c77c <siprintf>
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 80007a4:	a805      	add	r0, sp, #20
 80007a6:	f7ff fdeb 	bl	8000380 <strlen>
 80007aa:	a905      	add	r1, sp, #20
 80007ac:	b282      	uxth	r2, r0
 80007ae:	230a      	movs	r3, #10
 80007b0:	4630      	mov	r0, r6
 80007b2:	f004 ffa2 	bl	80056fa <HAL_UART_Transmit>
  sprintf(buffer, "Address: %x; Data: %x\r\n", regAddr, *data);
 80007b6:	782b      	ldrb	r3, [r5, #0]
 80007b8:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80007bc:	a805      	add	r0, sp, #20
 80007be:	490b      	ldr	r1, [pc, #44]	@ (80007ec <ov7670_read+0xa0>)
 80007c0:	f00b ffdc 	bl	800c77c <siprintf>
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 80007c4:	a805      	add	r0, sp, #20
 80007c6:	f7ff fddb 	bl	8000380 <strlen>
 80007ca:	230a      	movs	r3, #10
 80007cc:	b282      	uxth	r2, r0
 80007ce:	a905      	add	r1, sp, #20
 80007d0:	4630      	mov	r0, r6
 80007d2:	f004 ff92 	bl	80056fa <HAL_UART_Transmit>
  return ret;
}
 80007d6:	4620      	mov	r0, r4
 80007d8:	b01f      	add	sp, #124	@ 0x7c
 80007da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007dc:	24000d40 	.word	0x24000d40
 80007e0:	24008d48 	.word	0x24008d48
 80007e4:	0800ebc3 	.word	0x0800ebc3
 80007e8:	0800ebde 	.word	0x0800ebde
 80007ec:	0800ebf8 	.word	0x0800ebf8

080007f0 <ov7670_init>:

uint32_t ov7670_init(I2C_HandleTypeDef *p_hi2c)
{
 80007f0:	b510      	push	{r4, lr}
//  sp_hdcmi     = p_hdcmi;
//  sp_hdma_dcmi = p_hdma_dcmi;
  sp_hi2c      = p_hi2c;
 80007f2:	4b1a      	ldr	r3, [pc, #104]	@ (800085c <ov7670_init+0x6c>)
{
 80007f4:	b09a      	sub	sp, #104	@ 0x68
 // s_destAddressForContiuousMode = 0;

  HAL_GPIO_WritePin(CAM_RST_GPIO_Port, CAM_RST_Pin, GPIO_PIN_RESET);
 80007f6:	4c1a      	ldr	r4, [pc, #104]	@ (8000860 <ov7670_init+0x70>)
 80007f8:	2200      	movs	r2, #0
  sp_hi2c      = p_hi2c;
 80007fa:	6018      	str	r0, [r3, #0]
  HAL_GPIO_WritePin(CAM_RST_GPIO_Port, CAM_RST_Pin, GPIO_PIN_RESET);
 80007fc:	2120      	movs	r1, #32
 80007fe:	4620      	mov	r0, r4
 8000800:	f002 fd40 	bl	8003284 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000804:	2064      	movs	r0, #100	@ 0x64
 8000806:	f000 fe67 	bl	80014d8 <HAL_Delay>
  HAL_GPIO_WritePin(CAM_RST_GPIO_Port, CAM_RST_Pin, GPIO_PIN_SET);
 800080a:	2201      	movs	r2, #1
 800080c:	2120      	movs	r1, #32
 800080e:	4620      	mov	r0, r4
 8000810:	f002 fd38 	bl	8003284 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000814:	2064      	movs	r0, #100	@ 0x64
 8000816:	f000 fe5f 	bl	80014d8 <HAL_Delay>
  char temp[100];
  sprintf(temp, "Initializing OV7670...\r\n");
 800081a:	4912      	ldr	r1, [pc, #72]	@ (8000864 <ov7670_init+0x74>)
 800081c:	a801      	add	r0, sp, #4
 800081e:	f00c f8c8 	bl	800c9b2 <strcpy>
  ov7670_write(0x12, 0x80);  // RESET
 8000822:	2180      	movs	r1, #128	@ 0x80
 8000824:	2012      	movs	r0, #18
 8000826:	f7ff ff5f 	bl	80006e8 <ov7670_write>
  HAL_Delay(100);
 800082a:	2064      	movs	r0, #100	@ 0x64
 800082c:	f000 fe54 	bl	80014d8 <HAL_Delay>
  HAL_UART_Transmit(&huart4,temp,strlen(temp),10);
 8000830:	a801      	add	r0, sp, #4
 8000832:	f7ff fda5 	bl	8000380 <strlen>
 8000836:	230a      	movs	r3, #10
 8000838:	b282      	uxth	r2, r0
 800083a:	a901      	add	r1, sp, #4
 800083c:	480a      	ldr	r0, [pc, #40]	@ (8000868 <ov7670_init+0x78>)
 800083e:	f004 ff5c 	bl	80056fa <HAL_UART_Transmit>
  HAL_Delay(100);
 8000842:	2064      	movs	r0, #100	@ 0x64
 8000844:	f000 fe48 	bl	80014d8 <HAL_Delay>
  uint8_t buffer[4];
  ov7670_read(0x0F, buffer);
 8000848:	4669      	mov	r1, sp
 800084a:	200f      	movs	r0, #15
 800084c:	f7ff ff7e 	bl	800074c <ov7670_read>
  HAL_Delay(100);
 8000850:	2064      	movs	r0, #100	@ 0x64
 8000852:	f000 fe41 	bl	80014d8 <HAL_Delay>


  return 1;
}
 8000856:	2001      	movs	r0, #1
 8000858:	b01a      	add	sp, #104	@ 0x68
 800085a:	bd10      	pop	{r4, pc}
 800085c:	24000d40 	.word	0x24000d40
 8000860:	58020800 	.word	0x58020800
 8000864:	0800ec10 	.word	0x0800ec10
 8000868:	24008d48 	.word	0x24008d48

0800086c <ov7670_stopCap>:

//DCMI Data Transfer
static uint32_t s_dstAddress;

uint32_t ov7670_stopCap()
{
 800086c:	b508      	push	{r3, lr}
  char buffer [100];
  HAL_StatusTypeDef ret;
  ret = HAL_DCMI_Stop(sp_hdcmi);
 800086e:	4b04      	ldr	r3, [pc, #16]	@ (8000880 <ov7670_stopCap+0x14>)
 8000870:	6818      	ldr	r0, [r3, #0]
 8000872:	f001 f803 	bl	800187c <HAL_DCMI_Stop>
  s_dstAddress = 0;
 8000876:	2000      	movs	r0, #0
 8000878:	4b02      	ldr	r3, [pc, #8]	@ (8000884 <ov7670_stopCap+0x18>)
 800087a:	6018      	str	r0, [r3, #0]
  return 0;
}
 800087c:	bd08      	pop	{r3, pc}
 800087e:	bf00      	nop
 8000880:	24000000 	.word	0x24000000
 8000884:	24000d3c 	.word	0x24000d3c

08000888 <ov7670_startCap>:

uint32_t ov7670_startCap(uint32_t destAddress)
{
 8000888:	b510      	push	{r4, lr}
 800088a:	b09a      	sub	sp, #104	@ 0x68
 800088c:	4604      	mov	r4, r0
  HAL_StatusTypeDef ret;
  ov7670_stopCap();
 800088e:	f7ff ffed 	bl	800086c <ov7670_stopCap>
  /* note: continuous mode automatically invokes DCMI, but DMA needs to be invoked manually */
  s_dstAddress = destAddress;
 8000892:	4b0f      	ldr	r3, [pc, #60]	@ (80008d0 <ov7670_startCap+0x48>)
  ret = HAL_DCMI_Start_DMA(sp_hdcmi,1, destAddress, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT / 2); //mode 1 for single frame
 8000894:	480f      	ldr	r0, [pc, #60]	@ (80008d4 <ov7670_startCap+0x4c>)
 8000896:	4622      	mov	r2, r4
 8000898:	2101      	movs	r1, #1
  s_dstAddress = destAddress;
 800089a:	601c      	str	r4, [r3, #0]
  ret = HAL_DCMI_Start_DMA(sp_hdcmi,1, destAddress, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT / 2); //mode 1 for single frame
 800089c:	6800      	ldr	r0, [r0, #0]
 800089e:	f44f 5346 	mov.w	r3, #12672	@ 0x3180
 80008a2:	f000 ff7f 	bl	80017a4 <HAL_DCMI_Start_DMA>
 80008a6:	4604      	mov	r4, r0
  ov7670_stopCap();
 80008a8:	f7ff ffe0 	bl	800086c <ov7670_stopCap>
  char buffer [100];
  sprintf(buffer, "Return code: %d\r\n", ret);
 80008ac:	490a      	ldr	r1, [pc, #40]	@ (80008d8 <ov7670_startCap+0x50>)
 80008ae:	4622      	mov	r2, r4
 80008b0:	a801      	add	r0, sp, #4
 80008b2:	f00b ff63 	bl	800c77c <siprintf>
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 80008b6:	a801      	add	r0, sp, #4
 80008b8:	f7ff fd62 	bl	8000380 <strlen>
 80008bc:	230a      	movs	r3, #10
 80008be:	b282      	uxth	r2, r0
 80008c0:	a901      	add	r1, sp, #4
 80008c2:	4806      	ldr	r0, [pc, #24]	@ (80008dc <ov7670_startCap+0x54>)
 80008c4:	f004 ff19 	bl	80056fa <HAL_UART_Transmit>
  return 0;
}
 80008c8:	2000      	movs	r0, #0
 80008ca:	b01a      	add	sp, #104	@ 0x68
 80008cc:	bd10      	pop	{r4, pc}
 80008ce:	bf00      	nop
 80008d0:	24000d3c 	.word	0x24000d3c
 80008d4:	24000000 	.word	0x24000000
 80008d8:	0800ec29 	.word	0x0800ec29
 80008dc:	24008d48 	.word	0x24008d48

080008e0 <Resize_to_128>:

void Resize_to_128(uint32_t* inputImg, uint32_t* outputImg) {
 80008e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    float factor_y = 148.0 / 128.0;

    for (int i = 0; i < 128; i++) {
        for (int j = 0; j < 128; j+=2) { // Increment by 2 since each inputImg element handles 2 pixels
            int col = (int)(j * factor_x); // Calculate the column in the input image
            int row = (int)(i * factor_y); // Calculate the row in the input image
 80008e2:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000940 <Resize_to_128+0x60>
    for (int i = 0; i < 128; i++) {
 80008e6:	2500      	movs	r5, #0

            // Calculate the position in the input image
            // Considering that each uint32_t has two RGB565 pixels packed
            int inputIndex = (row * 172 + col) / 2;
 80008e8:	27ac      	movs	r7, #172	@ 0xac
            int col = (int)(j * factor_x); // Calculate the column in the input image
 80008ea:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8000944 <Resize_to_128+0x64>
            int row = (int)(i * factor_y); // Calculate the row in the input image
 80008ee:	ee07 5a90 	vmov	s15, r5
 80008f2:	01ee      	lsls	r6, r5, #7
        for (int j = 0; j < 128; j+=2) { // Increment by 2 since each inputImg element handles 2 pixels
 80008f4:	2400      	movs	r4, #0
            int row = (int)(i * factor_y); // Calculate the row in the input image
 80008f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000902:	ee17 2a90 	vmov	r2, s15
            int inputIndex = (row * 172 + col) / 2;
 8000906:	437a      	muls	r2, r7
            int col = (int)(j * factor_x); // Calculate the column in the input image
 8000908:	ee07 4a90 	vmov	s15, r4
 800090c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000910:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000914:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000918:	ee17 3a90 	vmov	r3, s15
            int inputIndex = (row * 172 + col) / 2;
 800091c:	4413      	add	r3, r2
 800091e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8000922:	105b      	asrs	r3, r3, #1

            uint32_t Pixel = inputImg[inputIndex];
 8000924:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
            // Place the processed pixels in the output image
            outputImg[(i * 128 + j) / 2] = Pixel;
 8000928:	19a3      	adds	r3, r4, r6
        for (int j = 0; j < 128; j+=2) { // Increment by 2 since each inputImg element handles 2 pixels
 800092a:	3402      	adds	r4, #2
            outputImg[(i * 128 + j) / 2] = Pixel;
 800092c:	105b      	asrs	r3, r3, #1
        for (int j = 0; j < 128; j+=2) { // Increment by 2 since each inputImg element handles 2 pixels
 800092e:	2c80      	cmp	r4, #128	@ 0x80
            outputImg[(i * 128 + j) / 2] = Pixel;
 8000930:	f841 c023 	str.w	ip, [r1, r3, lsl #2]
        for (int j = 0; j < 128; j+=2) { // Increment by 2 since each inputImg element handles 2 pixels
 8000934:	d1e8      	bne.n	8000908 <Resize_to_128+0x28>
    for (int i = 0; i < 128; i++) {
 8000936:	3501      	adds	r5, #1
 8000938:	2d80      	cmp	r5, #128	@ 0x80
 800093a:	d1d8      	bne.n	80008ee <Resize_to_128+0xe>
        }
    }
}
 800093c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800093e:	bf00      	nop
 8000940:	3f940000 	.word	0x3f940000
 8000944:	3fac0000 	.word	0x3fac0000

08000948 <HAL_DCMI_FrameEventCallback>:


void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
  if(s_dstAddress != 0) {
 8000948:	4b05      	ldr	r3, [pc, #20]	@ (8000960 <HAL_DCMI_FrameEventCallback+0x18>)
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	b132      	cbz	r2, 800095c <HAL_DCMI_FrameEventCallback+0x14>
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, s_dstAddress, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT / 2);
 800094e:	6801      	ldr	r1, [r0, #0]
 8000950:	f44f 5346 	mov.w	r3, #12672	@ 0x3180
 8000954:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8000956:	3128      	adds	r1, #40	@ 0x28
 8000958:	f001 bb7c 	b.w	8002054 <HAL_DMA_Start_IT>
  }
}
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	24000d3c 	.word	0x24000d3c

08000964 <lcd_send_cmd>:
#include "lcd.h"
#include "main.h"
I2C_HandleTypeDef  *lcd_sp_hi2c;
uint16_t SLAVE_ADDRESS_LCD = 0x4E;
void lcd_send_cmd (char cmd)
{
 8000964:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000966:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
	data_l = ((cmd<<4)&0xf0);
 800096a:	0100      	lsls	r0, r0, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
	data_t[1] = data_u|0x08;  //en=0, rs=0
	data_t[2] = data_l|0x0C;  //en=1, rs=0
	data_t[3] = data_l|0x08;  //en=0, rs=0
	uint16_t ret = HAL_I2C_Master_Transmit (lcd_sp_hi2c, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800096c:	490e      	ldr	r1, [pc, #56]	@ (80009a8 <lcd_send_cmd+0x44>)
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800096e:	f043 020c 	orr.w	r2, r3, #12
	data_l = ((cmd<<4)&0xf0);
 8000972:	b2c0      	uxtb	r0, r0
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000974:	f043 0308 	orr.w	r3, r3, #8
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000978:	f88d 200c 	strb.w	r2, [sp, #12]
	uint16_t ret = HAL_I2C_Master_Transmit (lcd_sp_hi2c, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800097c:	aa03      	add	r2, sp, #12
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800097e:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000982:	f040 030c 	orr.w	r3, r0, #12
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000986:	f040 0008 	orr.w	r0, r0, #8
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800098a:	f88d 300e 	strb.w	r3, [sp, #14]
	uint16_t ret = HAL_I2C_Master_Transmit (lcd_sp_hi2c, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800098e:	2364      	movs	r3, #100	@ 0x64
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000990:	f88d 000f 	strb.w	r0, [sp, #15]
	uint16_t ret = HAL_I2C_Master_Transmit (lcd_sp_hi2c, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000994:	4805      	ldr	r0, [pc, #20]	@ (80009ac <lcd_send_cmd+0x48>)
 8000996:	9300      	str	r3, [sp, #0]
 8000998:	2304      	movs	r3, #4
 800099a:	8809      	ldrh	r1, [r1, #0]
 800099c:	6800      	ldr	r0, [r0, #0]
 800099e:	f002 fe53 	bl	8003648 <HAL_I2C_Master_Transmit>
}
 80009a2:	b005      	add	sp, #20
 80009a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80009a8:	24000004 	.word	0x24000004
 80009ac:	24000d44 	.word	0x24000d44

080009b0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80009b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80009b2:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
	data_l = ((data<<4)&0xf0);
 80009b6:	0100      	lsls	r0, r0, #4
	data_t[0] = data_u|0x0D;  //en=1, rs=1
	data_t[1] = data_u|0x09;  //en=0, rs=1
	data_t[2] = data_l|0x0D;  //en=1, rs=1
	data_t[3] = data_l|0x09;  //en=0, rs=1
	HAL_I2C_Master_Transmit (lcd_sp_hi2c, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80009b8:	490e      	ldr	r1, [pc, #56]	@ (80009f4 <lcd_send_data+0x44>)
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 80009ba:	f043 020d 	orr.w	r2, r3, #13
	data_l = ((data<<4)&0xf0);
 80009be:	b2c0      	uxtb	r0, r0
	data_t[1] = data_u|0x09;  //en=0, rs=1
 80009c0:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 80009c4:	f88d 200c 	strb.w	r2, [sp, #12]
	HAL_I2C_Master_Transmit (lcd_sp_hi2c, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80009c8:	aa03      	add	r2, sp, #12
	data_t[1] = data_u|0x09;  //en=0, rs=1
 80009ca:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 80009ce:	f040 030d 	orr.w	r3, r0, #13
	data_t[3] = data_l|0x09;  //en=0, rs=1
 80009d2:	f040 0009 	orr.w	r0, r0, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 80009d6:	f88d 300e 	strb.w	r3, [sp, #14]
	HAL_I2C_Master_Transmit (lcd_sp_hi2c, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80009da:	2364      	movs	r3, #100	@ 0x64
	data_t[3] = data_l|0x09;  //en=0, rs=1
 80009dc:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (lcd_sp_hi2c, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80009e0:	4805      	ldr	r0, [pc, #20]	@ (80009f8 <lcd_send_data+0x48>)
 80009e2:	9300      	str	r3, [sp, #0]
 80009e4:	2304      	movs	r3, #4
 80009e6:	8809      	ldrh	r1, [r1, #0]
 80009e8:	6800      	ldr	r0, [r0, #0]
 80009ea:	f002 fe2d 	bl	8003648 <HAL_I2C_Master_Transmit>
}
 80009ee:	b005      	add	sp, #20
 80009f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80009f4:	24000004 	.word	0x24000004
 80009f8:	24000d44 	.word	0x24000d44

080009fc <lcd_send_string>:
void lcd_send_string (char *str)
{
 80009fc:	b510      	push	{r4, lr}
 80009fe:	1e44      	subs	r4, r0, #1
	while (*str) {
 8000a00:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8000a04:	b903      	cbnz	r3, 8000a08 <lcd_send_string+0xc>
		HAL_Delay(10);
		lcd_send_data (*str++);
	}
}
 8000a06:	bd10      	pop	{r4, pc}
		HAL_Delay(10);
 8000a08:	200a      	movs	r0, #10
 8000a0a:	f000 fd65 	bl	80014d8 <HAL_Delay>
		lcd_send_data (*str++);
 8000a0e:	7820      	ldrb	r0, [r4, #0]
 8000a10:	f7ff ffce 	bl	80009b0 <lcd_send_data>
 8000a14:	e7f4      	b.n	8000a00 <lcd_send_string+0x4>
	...

08000a18 <lcd_init>:

void lcd_init (I2C_HandleTypeDef* p_hi2c)
{
 8000a18:	b508      	push	{r3, lr}
	lcd_sp_hi2c = p_hi2c;
 8000a1a:	4b20      	ldr	r3, [pc, #128]	@ (8000a9c <lcd_init+0x84>)
 8000a1c:	6018      	str	r0, [r3, #0]
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000a1e:	2032      	movs	r0, #50	@ 0x32
 8000a20:	f000 fd5a 	bl	80014d8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000a24:	2030      	movs	r0, #48	@ 0x30
 8000a26:	f7ff ff9d 	bl	8000964 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000a2a:	2005      	movs	r0, #5
 8000a2c:	f000 fd54 	bl	80014d8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000a30:	2030      	movs	r0, #48	@ 0x30
 8000a32:	f7ff ff97 	bl	8000964 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000a36:	2001      	movs	r0, #1
 8000a38:	f000 fd4e 	bl	80014d8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000a3c:	2030      	movs	r0, #48	@ 0x30
 8000a3e:	f7ff ff91 	bl	8000964 <lcd_send_cmd>
	HAL_Delay(10);
 8000a42:	200a      	movs	r0, #10
 8000a44:	f000 fd48 	bl	80014d8 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000a48:	2020      	movs	r0, #32
 8000a4a:	f7ff ff8b 	bl	8000964 <lcd_send_cmd>
	HAL_Delay(10);
 8000a4e:	200a      	movs	r0, #10
 8000a50:	f000 fd42 	bl	80014d8 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000a54:	2028      	movs	r0, #40	@ 0x28
 8000a56:	f7ff ff85 	bl	8000964 <lcd_send_cmd>
	HAL_Delay(1);
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	f000 fd3c 	bl	80014d8 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000a60:	2008      	movs	r0, #8
 8000a62:	f7ff ff7f 	bl	8000964 <lcd_send_cmd>
	HAL_Delay(1);
 8000a66:	2001      	movs	r0, #1
 8000a68:	f000 fd36 	bl	80014d8 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	f7ff ff79 	bl	8000964 <lcd_send_cmd>
	HAL_Delay(1);
 8000a72:	2001      	movs	r0, #1
 8000a74:	f000 fd30 	bl	80014d8 <HAL_Delay>
	HAL_Delay(1);
 8000a78:	2001      	movs	r0, #1
 8000a7a:	f000 fd2d 	bl	80014d8 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000a7e:	2006      	movs	r0, #6
 8000a80:	f7ff ff70 	bl	8000964 <lcd_send_cmd>
	HAL_Delay(1);
 8000a84:	2001      	movs	r0, #1
 8000a86:	f000 fd27 	bl	80014d8 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000a8a:	200c      	movs	r0, #12
 8000a8c:	f7ff ff6a 	bl	8000964 <lcd_send_cmd>
	lcd_send_string("");
 8000a90:	4803      	ldr	r0, [pc, #12]	@ (8000aa0 <lcd_init+0x88>)
}
 8000a92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lcd_send_string("");
 8000a96:	f7ff bfb1 	b.w	80009fc <lcd_send_string>
 8000a9a:	bf00      	nop
 8000a9c:	24000d44 	.word	0x24000d44
 8000aa0:	0800ecf3 	.word	0x0800ecf3

08000aa4 <lcd_clear>:

void lcd_clear() {
 8000aa4:	b508      	push	{r3, lr}
	HAL_Delay(500);
 8000aa6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000aaa:	f000 fd15 	bl	80014d8 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000aae:	2001      	movs	r0, #1
 8000ab0:	f7ff ff58 	bl	8000964 <lcd_send_cmd>
	HAL_Delay(1);
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	f000 fd0f 	bl	80014d8 <HAL_Delay>
	lcd_send_string("");
 8000aba:	4804      	ldr	r0, [pc, #16]	@ (8000acc <lcd_clear+0x28>)
 8000abc:	f7ff ff9e 	bl	80009fc <lcd_send_string>
	HAL_Delay(500);
 8000ac0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
}
 8000ac4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(500);
 8000ac8:	f000 bd06 	b.w	80014d8 <HAL_Delay>
 8000acc:	0800ecf3 	.word	0x0800ecf3

08000ad0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad0:	b530      	push	{r4, r5, lr}
 8000ad2:	b09d      	sub	sp, #116	@ 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ad4:	224c      	movs	r2, #76	@ 0x4c
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	a809      	add	r0, sp, #36	@ 0x24
 8000ada:	f00b fecc 	bl	800c876 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ade:	2220      	movs	r2, #32
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	a801      	add	r0, sp, #4
 8000ae4:	f00b fec7 	bl	800c876 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ae8:	2002      	movs	r0, #2
 8000aea:	f002 ff3d 	bl	8003968 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000aee:	2300      	movs	r3, #0
 8000af0:	9300      	str	r3, [sp, #0]
 8000af2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b6c <SystemClock_Config+0x9c>)
 8000af4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000af6:	f022 0201 	bic.w	r2, r2, #1
 8000afa:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000afe:	4a1c      	ldr	r2, [pc, #112]	@ (8000b70 <SystemClock_Config+0xa0>)
 8000b00:	f003 0301 	and.w	r3, r3, #1
 8000b04:	9300      	str	r3, [sp, #0]
 8000b06:	6993      	ldr	r3, [r2, #24]
 8000b08:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b10:	6193      	str	r3, [r2, #24]
 8000b12:	6993      	ldr	r3, [r2, #24]
 8000b14:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b18:	9300      	str	r3, [sp, #0]
 8000b1a:	9b00      	ldr	r3, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b1c:	6993      	ldr	r3, [r2, #24]
 8000b1e:	049b      	lsls	r3, r3, #18
 8000b20:	d5fc      	bpl.n	8000b1c <SystemClock_Config+0x4c>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b22:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b24:	2401      	movs	r4, #1
 8000b26:	2540      	movs	r5, #64	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b28:	a809      	add	r0, sp, #36	@ 0x24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b2a:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b2c:	2300      	movs	r3, #0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b2e:	e9cd 450c 	strd	r4, r5, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b32:	9312      	str	r3, [sp, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b34:	f002 ff3c 	bl	80039b0 <HAL_RCC_OscConfig>
 8000b38:	b108      	cbz	r0, 8000b3e <SystemClock_Config+0x6e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b3a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <SystemClock_Config+0x6c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b3e:	233f      	movs	r3, #63	@ 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b40:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b42:	e9cd 3001 	strd	r3, r0, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b46:	e9cd 0003 	strd	r0, r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b4a:	e9cd 0505 	strd	r0, r5, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b4e:	e9cd 0007 	strd	r0, r0, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b52:	a801      	add	r0, sp, #4
 8000b54:	f003 fac8 	bl	80040e8 <HAL_RCC_ClockConfig>
 8000b58:	4601      	mov	r1, r0
 8000b5a:	b108      	cbz	r0, 8000b60 <SystemClock_Config+0x90>
 8000b5c:	b672      	cpsid	i
  while (1)
 8000b5e:	e7fe      	b.n	8000b5e <SystemClock_Config+0x8e>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_3);
 8000b60:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000b64:	f003 f9d0 	bl	8003f08 <HAL_RCC_MCOConfig>
}
 8000b68:	b01d      	add	sp, #116	@ 0x74
 8000b6a:	bd30      	pop	{r4, r5, pc}
 8000b6c:	58000400 	.word	0x58000400
 8000b70:	58024800 	.word	0x58024800

08000b74 <main>:
{
 8000b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b76:	f5ad 4d46 	sub.w	sp, sp, #50688	@ 0xc600
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b7a:	4d9f      	ldr	r5, [pc, #636]	@ (8000df8 <main+0x284>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7e:	2601      	movs	r6, #1
{
 8000b80:	b0bb      	sub	sp, #236	@ 0xec
  GPIO_InitStruct.Pin = CAM_RST_Pin;
 8000b82:	2720      	movs	r7, #32
  HAL_Init();
 8000b84:	f000 fc68 	bl	8001458 <HAL_Init>
  SystemClock_Config();
 8000b88:	f7ff ffa2 	bl	8000ad0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	2214      	movs	r2, #20
 8000b8e:	2100      	movs	r1, #0
 8000b90:	a83a      	add	r0, sp, #232	@ 0xe8
 8000b92:	f00b fe70 	bl	800c876 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b96:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000b9a:	aa02      	add	r2, sp, #8
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8000b9c:	2104      	movs	r1, #4
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b9e:	f043 0310 	orr.w	r3, r3, #16
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8000ba2:	4896      	ldr	r0, [pc, #600]	@ (8000dfc <main+0x288>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ba4:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000ba8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000bac:	f003 0310 	and.w	r3, r3, #16
 8000bb0:	6013      	str	r3, [r2, #0]
 8000bb2:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bb4:	aa03      	add	r2, sp, #12
 8000bb6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000bba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bbe:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000bc2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bca:	6013      	str	r3, [r2, #0]
 8000bcc:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	aa04      	add	r2, sp, #16
 8000bd0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000bdc:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000be0:	f003 0301 	and.w	r3, r3, #1
 8000be4:	6013      	str	r3, [r2, #0]
 8000be6:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be8:	aa05      	add	r2, sp, #20
 8000bea:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000bee:	f043 0304 	orr.w	r3, r3, #4
 8000bf2:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000bf6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000bfa:	f003 0304 	and.w	r3, r3, #4
 8000bfe:	6013      	str	r3, [r2, #0]
 8000c00:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	aa06      	add	r2, sp, #24
 8000c04:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000c08:	f043 0302 	orr.w	r3, r3, #2
 8000c0c:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000c10:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000c14:	f003 0302 	and.w	r3, r3, #2
 8000c18:	6013      	str	r3, [r2, #0]
 8000c1a:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c1c:	aa07      	add	r2, sp, #28
 8000c1e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000c22:	f043 0308 	orr.w	r3, r3, #8
 8000c26:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000c2a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000c2e:	f003 0308 	and.w	r3, r3, #8
 8000c32:	6013      	str	r3, [r2, #0]
 8000c34:	6813      	ldr	r3, [r2, #0]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	f002 fb24 	bl	8003284 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CAM_RST_GPIO_Port, CAM_RST_Pin, GPIO_PIN_RESET);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2120      	movs	r1, #32
 8000c40:	486f      	ldr	r0, [pc, #444]	@ (8000e00 <main+0x28c>)
 8000c42:	f002 fb1f 	bl	8003284 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PWDN_GPIO_Port, PWDN_Pin, GPIO_PIN_SET);
 8000c46:	2201      	movs	r2, #1
 8000c48:	486e      	ldr	r0, [pc, #440]	@ (8000e04 <main+0x290>)
 8000c4a:	4611      	mov	r1, r2
 8000c4c:	f002 fb1a 	bl	8003284 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, CAPTURE_Pin|LED_Pin, GPIO_PIN_RESET);
 8000c50:	2200      	movs	r2, #0
 8000c52:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8000c56:	486c      	ldr	r0, [pc, #432]	@ (8000e08 <main+0x294>)
 8000c58:	f002 fb14 	bl	8003284 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5c:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c5e:	a93a      	add	r1, sp, #232	@ 0xe8
 8000c60:	4866      	ldr	r0, [pc, #408]	@ (8000dfc <main+0x288>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c62:	e9cd 363a 	strd	r3, r6, [sp, #232]	@ 0xe8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c66:	e9cd 443c 	strd	r4, r4, [sp, #240]	@ 0xf0
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c6a:	f002 fa23 	bl	80030b4 <HAL_GPIO_Init>
  HAL_GPIO_Init(CAM_RST_GPIO_Port, &GPIO_InitStruct);
 8000c6e:	a93a      	add	r1, sp, #232	@ 0xe8
 8000c70:	4863      	ldr	r0, [pc, #396]	@ (8000e00 <main+0x28c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c72:	e9cd 763a 	strd	r7, r6, [sp, #232]	@ 0xe8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c76:	e9cd 443c 	strd	r4, r4, [sp, #240]	@ 0xf0
  HAL_GPIO_Init(CAM_RST_GPIO_Port, &GPIO_InitStruct);
 8000c7a:	f002 fa1b 	bl	80030b4 <HAL_GPIO_Init>
  HAL_GPIO_Init(PWDN_GPIO_Port, &GPIO_InitStruct);
 8000c7e:	a93a      	add	r1, sp, #232	@ 0xe8
 8000c80:	4860      	ldr	r0, [pc, #384]	@ (8000e04 <main+0x290>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c82:	e9cd 663a 	strd	r6, r6, [sp, #232]	@ 0xe8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	e9cd 443c 	strd	r4, r4, [sp, #240]	@ 0xf0
  HAL_GPIO_Init(PWDN_GPIO_Port, &GPIO_InitStruct);
 8000c8a:	f002 fa13 	bl	80030b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CAPTURE_Pin|LED_Pin;
 8000c8e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c92:	a93a      	add	r1, sp, #232	@ 0xe8
 8000c94:	485c      	ldr	r0, [pc, #368]	@ (8000e08 <main+0x294>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c96:	e9cd 363a 	strd	r3, r6, [sp, #232]	@ 0xe8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	e9cd 443c 	strd	r4, r4, [sp, #240]	@ 0xf0
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c9e:	f002 fa09 	bl	80030b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	f44f 7180 	mov.w	r1, #256	@ 0x100
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca8:	4858      	ldr	r0, [pc, #352]	@ (8000e0c <main+0x298>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000caa:	943e      	str	r4, [sp, #248]	@ 0xf8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	e9cd 133a 	strd	r1, r3, [sp, #232]	@ 0xe8
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb0:	a93a      	add	r1, sp, #232	@ 0xe8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb2:	e9cd 443c 	strd	r4, r4, [sp, #240]	@ 0xf0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb6:	f002 f9fd 	bl	80030b4 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cba:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
 8000cbe:	aa01      	add	r2, sp, #4
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000cc0:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cc2:	4333      	orrs	r3, r6
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000cc4:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cc6:	f8c5 30d8 	str.w	r3, [r5, #216]	@ 0xd8
 8000cca:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
 8000cce:	4033      	ands	r3, r6
 8000cd0:	6013      	str	r3, [r2, #0]
 8000cd2:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000cd4:	4622      	mov	r2, r4
 8000cd6:	f000 fc29 	bl	800152c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000cda:	200b      	movs	r0, #11
 8000cdc:	f000 fc58 	bl	8001590 <HAL_NVIC_EnableIRQ>
  hdcmi.Instance = DCMI;
 8000ce0:	484b      	ldr	r0, [pc, #300]	@ (8000e10 <main+0x29c>)
 8000ce2:	4b4c      	ldr	r3, [pc, #304]	@ (8000e14 <main+0x2a0>)
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000ce4:	6087      	str	r7, [r0, #8]
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000ce6:	6304      	str	r4, [r0, #48]	@ 0x30
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000ce8:	e9c0 3400 	strd	r3, r4, [r0]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000cec:	2380      	movs	r3, #128	@ 0x80
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000cee:	e9c0 4405 	strd	r4, r4, [r0, #20]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000cf2:	e9c0 3403 	strd	r3, r4, [r0, #12]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000cf6:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000cfa:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000cfe:	f000 fd09 	bl	8001714 <HAL_DCMI_Init>
 8000d02:	b108      	cbz	r0, 8000d08 <main+0x194>
 8000d04:	b672      	cpsid	i
  while (1)
 8000d06:	e7fe      	b.n	8000d06 <main+0x192>
  hi2c1.Instance = I2C1;
 8000d08:	4c43      	ldr	r4, [pc, #268]	@ (8000e18 <main+0x2a4>)
  hi2c1.Init.Timing = 0x00707CBB;
 8000d0a:	4b44      	ldr	r3, [pc, #272]	@ (8000e1c <main+0x2a8>)
 8000d0c:	4d44      	ldr	r5, [pc, #272]	@ (8000e20 <main+0x2ac>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d0e:	6220      	str	r0, [r4, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d10:	e9c4 0602 	strd	r0, r6, [r4, #8]
  hi2c1.Init.OwnAddress2 = 0;
 8000d14:	e9c4 0004 	strd	r0, r0, [r4, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d18:	e9c4 0006 	strd	r0, r0, [r4, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d1c:	4620      	mov	r0, r4
  hi2c1.Init.Timing = 0x00707CBB;
 8000d1e:	e9c4 3500 	strd	r3, r5, [r4]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d22:	f002 fc3b 	bl	800359c <HAL_I2C_Init>
 8000d26:	4601      	mov	r1, r0
 8000d28:	b108      	cbz	r0, 8000d2e <main+0x1ba>
 8000d2a:	b672      	cpsid	i
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <main+0x1b8>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d2e:	4620      	mov	r0, r4
 8000d30:	f002 fdce 	bl	80038d0 <HAL_I2CEx_ConfigAnalogFilter>
 8000d34:	4601      	mov	r1, r0
 8000d36:	b108      	cbz	r0, 8000d3c <main+0x1c8>
 8000d38:	b672      	cpsid	i
  while (1)
 8000d3a:	e7fe      	b.n	8000d3a <main+0x1c6>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d3c:	4620      	mov	r0, r4
 8000d3e:	f002 fded 	bl	800391c <HAL_I2CEx_ConfigDigitalFilter>
 8000d42:	b108      	cbz	r0, 8000d48 <main+0x1d4>
 8000d44:	b672      	cpsid	i
  while (1)
 8000d46:	e7fe      	b.n	8000d46 <main+0x1d2>
  hi2c2.Instance = I2C2;
 8000d48:	4c36      	ldr	r4, [pc, #216]	@ (8000e24 <main+0x2b0>)
 8000d4a:	4b37      	ldr	r3, [pc, #220]	@ (8000e28 <main+0x2b4>)
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d4c:	6220      	str	r0, [r4, #32]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d4e:	e9c4 0602 	strd	r0, r6, [r4, #8]
  hi2c2.Init.OwnAddress2 = 0;
 8000d52:	e9c4 0004 	strd	r0, r0, [r4, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d56:	e9c4 0006 	strd	r0, r0, [r4, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d5a:	4620      	mov	r0, r4
  hi2c2.Init.Timing = 0x00707CBB;
 8000d5c:	e9c4 3500 	strd	r3, r5, [r4]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d60:	f002 fc1c 	bl	800359c <HAL_I2C_Init>
 8000d64:	4601      	mov	r1, r0
 8000d66:	b108      	cbz	r0, 8000d6c <main+0x1f8>
 8000d68:	b672      	cpsid	i
  while (1)
 8000d6a:	e7fe      	b.n	8000d6a <main+0x1f6>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d6c:	4620      	mov	r0, r4
 8000d6e:	f002 fdaf 	bl	80038d0 <HAL_I2CEx_ConfigAnalogFilter>
 8000d72:	4601      	mov	r1, r0
 8000d74:	b108      	cbz	r0, 8000d7a <main+0x206>
 8000d76:	b672      	cpsid	i
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <main+0x204>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000d7a:	4620      	mov	r0, r4
 8000d7c:	f002 fdce 	bl	800391c <HAL_I2CEx_ConfigDigitalFilter>
 8000d80:	b108      	cbz	r0, 8000d86 <main+0x212>
 8000d82:	b672      	cpsid	i
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <main+0x210>
  huart4.Instance = UART4;
 8000d86:	4c29      	ldr	r4, [pc, #164]	@ (8000e2c <main+0x2b8>)
  huart4.Init.BaudRate = 115200;
 8000d88:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000d8c:	4a28      	ldr	r2, [pc, #160]	@ (8000e30 <main+0x2bc>)
  huart4.Init.Parity = UART_PARITY_NONE;
 8000d8e:	6120      	str	r0, [r4, #16]
  huart4.Init.BaudRate = 115200;
 8000d90:	e9c4 2300 	strd	r2, r3, [r4]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000d94:	230c      	movs	r3, #12
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000d96:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d9a:	e9c4 3005 	strd	r3, r0, [r4, #20]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d9e:	e9c4 0007 	strd	r0, r0, [r4, #28]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000da2:	e9c4 0009 	strd	r0, r0, [r4, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000da6:	4620      	mov	r0, r4
 8000da8:	f004 fd57 	bl	800585a <HAL_UART_Init>
 8000dac:	4601      	mov	r1, r0
 8000dae:	b108      	cbz	r0, 8000db4 <main+0x240>
 8000db0:	b672      	cpsid	i
  while (1)
 8000db2:	e7fe      	b.n	8000db2 <main+0x23e>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000db4:	4620      	mov	r0, r4
 8000db6:	f004 fdbe 	bl	8005936 <HAL_UARTEx_SetTxFifoThreshold>
 8000dba:	4601      	mov	r1, r0
 8000dbc:	b108      	cbz	r0, 8000dc2 <main+0x24e>
 8000dbe:	b672      	cpsid	i
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <main+0x24c>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dc2:	4620      	mov	r0, r4
 8000dc4:	f004 fdd7 	bl	8005976 <HAL_UARTEx_SetRxFifoThreshold>
 8000dc8:	b108      	cbz	r0, 8000dce <main+0x25a>
 8000dca:	b672      	cpsid	i
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <main+0x258>
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000dce:	4817      	ldr	r0, [pc, #92]	@ (8000e2c <main+0x2b8>)
 8000dd0:	f004 fd96 	bl	8005900 <HAL_UARTEx_DisableFifoMode>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	b108      	cbz	r0, 8000ddc <main+0x268>
 8000dd8:	b672      	cpsid	i
  while (1)
 8000dda:	e7fe      	b.n	8000dda <main+0x266>
  hcrc.Instance = CRC;
 8000ddc:	4815      	ldr	r0, [pc, #84]	@ (8000e34 <main+0x2c0>)
 8000dde:	4a16      	ldr	r2, [pc, #88]	@ (8000e38 <main+0x2c4>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000de0:	8083      	strh	r3, [r0, #4]
  hcrc.Instance = CRC;
 8000de2:	6002      	str	r2, [r0, #0]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000de4:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000de8:	2301      	movs	r3, #1
 8000dea:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000dec:	f000 fbf2 	bl	80015d4 <HAL_CRC_Init>
 8000df0:	4604      	mov	r4, r0
 8000df2:	b318      	cbz	r0, 8000e3c <main+0x2c8>
 8000df4:	b672      	cpsid	i
  while (1)
 8000df6:	e7fe      	b.n	8000df6 <main+0x282>
 8000df8:	58024400 	.word	0x58024400
 8000dfc:	58021000 	.word	0x58021000
 8000e00:	58020800 	.word	0x58020800
 8000e04:	58020400 	.word	0x58020400
 8000e08:	58020c00 	.word	0x58020c00
 8000e0c:	58020000 	.word	0x58020000
 8000e10:	24008efc 	.word	0x24008efc
 8000e14:	48020000 	.word	0x48020000
 8000e18:	24008e30 	.word	0x24008e30
 8000e1c:	40005400 	.word	0x40005400
 8000e20:	00707cbb 	.word	0x00707cbb
 8000e24:	24008ddc 	.word	0x24008ddc
 8000e28:	40005800 	.word	0x40005800
 8000e2c:	24008d48 	.word	0x24008d48
 8000e30:	40004c00 	.word	0x40004c00
 8000e34:	24008f4c 	.word	0x24008f4c
 8000e38:	58024c00 	.word	0x58024c00
  MX_X_CUBE_AI_Init();
 8000e3c:	f004 ff82 	bl	8005d44 <MX_X_CUBE_AI_Init>
  lcd_init(&hi2c2);
 8000e40:	482a      	ldr	r0, [pc, #168]	@ (8000eec <main+0x378>)
 8000e42:	f7ff fde9 	bl	8000a18 <lcd_init>
  lcd_clear();
 8000e46:	f7ff fe2d 	bl	8000aa4 <lcd_clear>
  lcd_send_string("Initializing...");
 8000e4a:	4829      	ldr	r0, [pc, #164]	@ (8000ef0 <main+0x37c>)
 8000e4c:	f7ff fdd6 	bl	80009fc <lcd_send_string>
  lcd_clear();
 8000e50:	f7ff fe28 	bl	8000aa4 <lcd_clear>
  lcd_send_string("81 loaded to x15");
 8000e54:	4827      	ldr	r0, [pc, #156]	@ (8000ef4 <main+0x380>)
 8000e56:	f7ff fdd1 	bl	80009fc <lcd_send_string>
  ov7670_init(&hi2c1);
 8000e5a:	4827      	ldr	r0, [pc, #156]	@ (8000ef8 <main+0x384>)
 8000e5c:	f7ff fcc8 	bl	80007f0 <ov7670_init>
  HAL_Delay(100);
 8000e60:	2064      	movs	r0, #100	@ 0x64
 8000e62:	f000 fb39 	bl	80014d8 <HAL_Delay>
  ov7670_write(0x15,0x81);
 8000e66:	2181      	movs	r1, #129	@ 0x81
 8000e68:	2015      	movs	r0, #21
 8000e6a:	f7ff fc3d 	bl	80006e8 <ov7670_write>
  ov7670_read(0x15,data);
 8000e6e:	a908      	add	r1, sp, #32
 8000e70:	2015      	movs	r0, #21
 8000e72:	f7ff fc6b 	bl	800074c <ov7670_read>
  sprintf(buffer, "Addr:0x15; D:%x;", *data);
 8000e76:	4921      	ldr	r1, [pc, #132]	@ (8000efc <main+0x388>)
 8000e78:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8000e7c:	a821      	add	r0, sp, #132	@ 0x84
 8000e7e:	ab08      	add	r3, sp, #32
 8000e80:	f00b fc7c 	bl	800c77c <siprintf>
  ov7670_init(&hi2c1);
 8000e84:	481c      	ldr	r0, [pc, #112]	@ (8000ef8 <main+0x384>)
 8000e86:	f7ff fcb3 	bl	80007f0 <ov7670_init>
  ov7670_write(0x12,0x0C);
 8000e8a:	210c      	movs	r1, #12
 8000e8c:	2012      	movs	r0, #18
 8000e8e:	f7ff fc2b 	bl	80006e8 <ov7670_write>
  ov7670_write(0x40,0xD0); //Enable RGB
 8000e92:	21d0      	movs	r1, #208	@ 0xd0
 8000e94:	2040      	movs	r0, #64	@ 0x40
 8000e96:	f7ff fc27 	bl	80006e8 <ov7670_write>
  ov7670_write(0x13,0x20);// Enable banding filter
 8000e9a:	2120      	movs	r1, #32
 8000e9c:	2013      	movs	r0, #19
 8000e9e:	f7ff fc23 	bl	80006e8 <ov7670_write>
  ov7670_write(0x3B,0x12);// Banding filter settings
 8000ea2:	2112      	movs	r1, #18
 8000ea4:	203b      	movs	r0, #59	@ 0x3b
 8000ea6:	f7ff fc1f 	bl	80006e8 <ov7670_write>
    imagedata[i] = 0;
 8000eaa:	f44f 4246 	mov.w	r2, #50688	@ 0xc600
 8000eae:	4621      	mov	r1, r4
 8000eb0:	a83a      	add	r0, sp, #232	@ 0xe8
 8000eb2:	f00b fce0 	bl	800c876 <memset>
  sprintf(buffer, "imagedata address: %x\r\n", imagedata); //24073924
 8000eb6:	aa3a      	add	r2, sp, #232	@ 0xe8
 8000eb8:	4911      	ldr	r1, [pc, #68]	@ (8000f00 <main+0x38c>)
 8000eba:	a821      	add	r0, sp, #132	@ 0x84
 8000ebc:	f00b fc5e 	bl	800c77c <siprintf>
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8000ec0:	a821      	add	r0, sp, #132	@ 0x84
 8000ec2:	f7ff fa5d 	bl	8000380 <strlen>
 8000ec6:	a921      	add	r1, sp, #132	@ 0x84
 8000ec8:	b282      	uxth	r2, r0
 8000eca:	230a      	movs	r3, #10
 8000ecc:	480d      	ldr	r0, [pc, #52]	@ (8000f04 <main+0x390>)
 8000ece:	f004 fc14 	bl	80056fa <HAL_UART_Transmit>
  imagedata[0] = 0xFF; // Check if index 0 properly overwritten
 8000ed2:	23ff      	movs	r3, #255	@ 0xff
  ov7670_startCap(imagedata);
 8000ed4:	a83a      	add	r0, sp, #232	@ 0xe8
  imagedata[0] = 0xFF; // Check if index 0 properly overwritten
 8000ed6:	933a      	str	r3, [sp, #232]	@ 0xe8
  ov7670_startCap(imagedata);
 8000ed8:	f7ff fcd6 	bl	8000888 <ov7670_startCap>
  Resize_to_128(imagedata, imagedata128);
 8000edc:	490a      	ldr	r1, [pc, #40]	@ (8000f08 <main+0x394>)
 8000ede:	a83a      	add	r0, sp, #232	@ 0xe8
 8000ee0:	f7ff fcfe 	bl	80008e0 <Resize_to_128>
   MX_X_CUBE_AI_Process();
 8000ee4:	f004 ff76 	bl	8005dd4 <MX_X_CUBE_AI_Process>
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <main+0x374>
 8000eea:	bf00      	nop
 8000eec:	24008ddc 	.word	0x24008ddc
 8000ef0:	0800ec3b 	.word	0x0800ec3b
 8000ef4:	0800ec4b 	.word	0x0800ec4b
 8000ef8:	24008e30 	.word	0x24008e30
 8000efc:	0800ec5c 	.word	0x0800ec5c
 8000f00:	0800ec6d 	.word	0x0800ec6d
 8000f04:	24008d48 	.word	0x24008d48
 8000f08:	24000d48 	.word	0x24000d48

08000f0c <Error_Handler>:
 8000f0c:	b672      	cpsid	i
  while (1)
 8000f0e:	e7fe      	b.n	8000f0e <Error_Handler+0x2>

08000f10 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f10:	4b07      	ldr	r3, [pc, #28]	@ (8000f30 <HAL_MspInit+0x20>)
{
 8000f12:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f14:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8000f18:	f042 0202 	orr.w	r2, r2, #2
 8000f1c:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8000f20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f24:	f003 0302 	and.w	r3, r3, #2
 8000f28:	9301      	str	r3, [sp, #4]
 8000f2a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f2c:	b002      	add	sp, #8
 8000f2e:	4770      	bx	lr
 8000f30:	58024400 	.word	0x58024400

08000f34 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8000f34:	6802      	ldr	r2, [r0, #0]
{
 8000f36:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8000f38:	4b09      	ldr	r3, [pc, #36]	@ (8000f60 <HAL_CRC_MspInit+0x2c>)
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	d10d      	bne.n	8000f5a <HAL_CRC_MspInit+0x26>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f3e:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000f42:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000f46:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8000f4a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000f4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f52:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000f56:	9301      	str	r3, [sp, #4]
 8000f58:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000f5a:	b002      	add	sp, #8
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	58024c00 	.word	0x58024c00

08000f64 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8000f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f66:	b08d      	sub	sp, #52	@ 0x34
 8000f68:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6a:	2214      	movs	r2, #20
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	a807      	add	r0, sp, #28
 8000f70:	f00b fc81 	bl	800c876 <memset>
  if(hdcmi->Instance==DCMI)
 8000f74:	682a      	ldr	r2, [r5, #0]
 8000f76:	4b55      	ldr	r3, [pc, #340]	@ (80010cc <HAL_DCMI_MspInit+0x168>)
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	f040 80a5 	bne.w	80010c8 <HAL_DCMI_MspInit+0x164>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000f7e:	4b54      	ldr	r3, [pc, #336]	@ (80010d0 <HAL_DCMI_MspInit+0x16c>)
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f80:	2402      	movs	r4, #2
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000f82:	2703      	movs	r7, #3
 8000f84:	260d      	movs	r6, #13
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000f86:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f8a:	a907      	add	r1, sp, #28
 8000f8c:	4851      	ldr	r0, [pc, #324]	@ (80010d4 <HAL_DCMI_MspInit+0x170>)
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000f8e:	f042 0201 	orr.w	r2, r2, #1
 8000f92:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
 8000f96:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 8000f9a:	f002 0201 	and.w	r2, r2, #1
 8000f9e:	9201      	str	r2, [sp, #4]
 8000fa0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fa2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000fa6:	f042 0210 	orr.w	r2, r2, #16
 8000faa:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000fae:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000fb2:	f002 0210 	and.w	r2, r2, #16
 8000fb6:	9202      	str	r2, [sp, #8]
 8000fb8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000fbe:	f042 0201 	orr.w	r2, r2, #1
 8000fc2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000fc6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000fca:	f002 0201 	and.w	r2, r2, #1
 8000fce:	9203      	str	r2, [sp, #12]
 8000fd0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000fd6:	f042 0204 	orr.w	r2, r2, #4
 8000fda:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000fde:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000fe2:	f002 0204 	and.w	r2, r2, #4
 8000fe6:	9204      	str	r2, [sp, #16]
 8000fe8:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000fee:	f042 0208 	orr.w	r2, r2, #8
 8000ff2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000ff6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000ffa:	f002 0208 	and.w	r2, r2, #8
 8000ffe:	9205      	str	r2, [sp, #20]
 8001000:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001002:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001006:	f042 0202 	orr.w	r2, r2, #2
 800100a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800100e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	9306      	str	r3, [sp, #24]
 8001018:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101a:	2370      	movs	r3, #112	@ 0x70
 800101c:	e9cd 3407 	strd	r3, r4, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001020:	9409      	str	r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001022:	e9cd 760a 	strd	r7, r6, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001026:	f002 f845 	bl	80030b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800102a:	2350      	movs	r3, #80	@ 0x50
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102c:	a907      	add	r1, sp, #28
 800102e:	482a      	ldr	r0, [pc, #168]	@ (80010d8 <HAL_DCMI_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001030:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001032:	e9cd 3407 	strd	r3, r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001036:	e9cd 4709 	strd	r4, r7, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103a:	f002 f83b 	bl	80030b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800103e:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001042:	a907      	add	r1, sp, #28
 8001044:	4825      	ldr	r0, [pc, #148]	@ (80010dc <HAL_DCMI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001046:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001048:	e9cd 3407 	strd	r3, r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104c:	e9cd 4709 	strd	r4, r7, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001050:	f002 f830 	bl	80030b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001054:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001056:	a907      	add	r1, sp, #28
 8001058:	4821      	ldr	r0, [pc, #132]	@ (80010e0 <HAL_DCMI_MspInit+0x17c>)
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800105a:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105c:	e9cd 3407 	strd	r3, r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001060:	e9cd 4709 	strd	r4, r7, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001064:	f002 f826 	bl	80030b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001068:	2380      	movs	r3, #128	@ 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106a:	a907      	add	r1, sp, #28
 800106c:	481d      	ldr	r0, [pc, #116]	@ (80010e4 <HAL_DCMI_MspInit+0x180>)
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800106e:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001070:	e9cd 3407 	strd	r3, r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001074:	e9cd 4709 	strd	r4, r7, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001078:	f002 f81c 	bl	80030b4 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 800107c:	4c1a      	ldr	r4, [pc, #104]	@ (80010e8 <HAL_DCMI_MspInit+0x184>)
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 800107e:	4a1b      	ldr	r2, [pc, #108]	@ (80010ec <HAL_DCMI_MspInit+0x188>)
 8001080:	234b      	movs	r3, #75	@ 0x4b
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001082:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_dcmi.Init.Mode = DMA_NORMAL;
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8001086:	4620      	mov	r0, r4
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 8001088:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800108c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001090:	2300      	movs	r3, #0
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001092:	e9c4 1204 	strd	r1, r2, [r4, #16]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001096:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 800109a:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800109e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80010a2:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010a6:	e9c4 2308 	strd	r2, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80010aa:	f000 fe13 	bl	8001cd4 <HAL_DMA_Init>
 80010ae:	b108      	cbz	r0, 80010b4 <HAL_DCMI_MspInit+0x150>
    {
      Error_Handler();
 80010b0:	f7ff ff2c 	bl	8000f0c <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 80010b4:	2200      	movs	r2, #0
 80010b6:	204e      	movs	r0, #78	@ 0x4e
    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 80010b8:	64ac      	str	r4, [r5, #72]	@ 0x48
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 80010ba:	4611      	mov	r1, r2
    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 80010bc:	63a5      	str	r5, [r4, #56]	@ 0x38
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 80010be:	f000 fa35 	bl	800152c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80010c2:	204e      	movs	r0, #78	@ 0x4e
 80010c4:	f000 fa64 	bl	8001590 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80010c8:	b00d      	add	sp, #52	@ 0x34
 80010ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010cc:	48020000 	.word	0x48020000
 80010d0:	58024400 	.word	0x58024400
 80010d4:	58021000 	.word	0x58021000
 80010d8:	58020000 	.word	0x58020000
 80010dc:	58020800 	.word	0x58020800
 80010e0:	58020c00 	.word	0x58020c00
 80010e4:	58020400 	.word	0x58020400
 80010e8:	24008e84 	.word	0x24008e84
 80010ec:	40020010 	.word	0x40020010

080010f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010f0:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f2:	2214      	movs	r2, #20
{
 80010f4:	b0ba      	sub	sp, #232	@ 0xe8
 80010f6:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	2100      	movs	r1, #0
 80010fa:	eb0d 0002 	add.w	r0, sp, r2
 80010fe:	f00b fbba 	bl	800c876 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001102:	22c0      	movs	r2, #192	@ 0xc0
 8001104:	2100      	movs	r1, #0
 8001106:	a80a      	add	r0, sp, #40	@ 0x28
 8001108:	f00b fbb5 	bl	800c876 <memset>
  if(hi2c->Instance==I2C1)
 800110c:	6823      	ldr	r3, [r4, #0]
 800110e:	4a36      	ldr	r2, [pc, #216]	@ (80011e8 <HAL_I2C_MspInit+0xf8>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d133      	bne.n	800117c <HAL_I2C_MspInit+0x8c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001114:	2208      	movs	r2, #8
 8001116:	2300      	movs	r3, #0
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001118:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800111a:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800111e:	f003 fa3f 	bl	80045a0 <HAL_RCCEx_PeriphCLKConfig>
 8001122:	b108      	cbz	r0, 8001128 <HAL_I2C_MspInit+0x38>
    {
      Error_Handler();
 8001124:	f7ff fef2 	bl	8000f0c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001128:	4c30      	ldr	r4, [pc, #192]	@ (80011ec <HAL_I2C_MspInit+0xfc>)
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800112a:	f44f 7140 	mov.w	r1, #768	@ 0x300
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112e:	2001      	movs	r0, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001130:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001134:	f043 0302 	orr.w	r3, r3, #2
 8001138:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800113c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	9301      	str	r3, [sp, #4]
 8001146:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001148:	2312      	movs	r3, #18
 800114a:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2300      	movs	r3, #0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001150:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001152:	e9cd 0307 	strd	r0, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001156:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001158:	4825      	ldr	r0, [pc, #148]	@ (80011f0 <HAL_I2C_MspInit+0x100>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800115a:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115c:	f001 ffaa 	bl	80030b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001160:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
 8001164:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001168:	f8c4 30e8 	str.w	r3, [r4, #232]	@ 0xe8
 800116c:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
 8001170:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001174:	9302      	str	r3, [sp, #8]
 8001176:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001178:	b03a      	add	sp, #232	@ 0xe8
 800117a:	bd10      	pop	{r4, pc}
  else if(hi2c->Instance==I2C2)
 800117c:	4a1d      	ldr	r2, [pc, #116]	@ (80011f4 <HAL_I2C_MspInit+0x104>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d1fa      	bne.n	8001178 <HAL_I2C_MspInit+0x88>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001182:	2208      	movs	r2, #8
 8001184:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001186:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001188:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800118c:	f003 fa08 	bl	80045a0 <HAL_RCCEx_PeriphCLKConfig>
 8001190:	b108      	cbz	r0, 8001196 <HAL_I2C_MspInit+0xa6>
      Error_Handler();
 8001192:	f7ff febb 	bl	8000f0c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001196:	4c15      	ldr	r4, [pc, #84]	@ (80011ec <HAL_I2C_MspInit+0xfc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001198:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119c:	a905      	add	r1, sp, #20
 800119e:	4814      	ldr	r0, [pc, #80]	@ (80011f0 <HAL_I2C_MspInit+0x100>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80011a4:	f043 0302 	orr.w	r3, r3, #2
 80011a8:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80011ac:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80011b0:	f003 0302 	and.w	r3, r3, #2
 80011b4:	9303      	str	r3, [sp, #12]
 80011b6:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011b8:	2312      	movs	r3, #18
 80011ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c0:	e9cd 3307 	strd	r3, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011c4:	2304      	movs	r3, #4
 80011c6:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c8:	f001 ff74 	bl	80030b4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011cc:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
 80011d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011d4:	f8c4 30e8 	str.w	r3, [r4, #232]	@ 0xe8
 80011d8:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
 80011dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011e0:	9304      	str	r3, [sp, #16]
 80011e2:	9b04      	ldr	r3, [sp, #16]
}
 80011e4:	e7c8      	b.n	8001178 <HAL_I2C_MspInit+0x88>
 80011e6:	bf00      	nop
 80011e8:	40005400 	.word	0x40005400
 80011ec:	58024400 	.word	0x58024400
 80011f0:	58020400 	.word	0x58020400
 80011f4:	40005800 	.word	0x40005800

080011f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011f8:	b510      	push	{r4, lr}
 80011fa:	b0b8      	sub	sp, #224	@ 0xe0
 80011fc:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fe:	2214      	movs	r2, #20
 8001200:	2100      	movs	r1, #0
 8001202:	a803      	add	r0, sp, #12
 8001204:	f00b fb37 	bl	800c876 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001208:	22c0      	movs	r2, #192	@ 0xc0
 800120a:	2100      	movs	r1, #0
 800120c:	a808      	add	r0, sp, #32
 800120e:	f00b fb32 	bl	800c876 <memset>
  if(huart->Instance==UART4)
 8001212:	6822      	ldr	r2, [r4, #0]
 8001214:	4b1a      	ldr	r3, [pc, #104]	@ (8001280 <HAL_UART_MspInit+0x88>)
 8001216:	429a      	cmp	r2, r3
 8001218:	d12f      	bne.n	800127a <HAL_UART_MspInit+0x82>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800121a:	2202      	movs	r2, #2
 800121c:	2300      	movs	r3, #0
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800121e:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001220:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001224:	f003 f9bc 	bl	80045a0 <HAL_RCCEx_PeriphCLKConfig>
 8001228:	b108      	cbz	r0, 800122e <HAL_UART_MspInit+0x36>
    {
      Error_Handler();
 800122a:	f7ff fe6f 	bl	8000f0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800122e:	4b15      	ldr	r3, [pc, #84]	@ (8001284 <HAL_UART_MspInit+0x8c>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001230:	a903      	add	r1, sp, #12
 8001232:	4815      	ldr	r0, [pc, #84]	@ (8001288 <HAL_UART_MspInit+0x90>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8001234:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001238:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800123c:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8001240:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001244:	f402 2200 	and.w	r2, r2, #524288	@ 0x80000
 8001248:	9201      	str	r2, [sp, #4]
 800124a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001250:	f042 0201 	orr.w	r2, r2, #1
 8001254:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001258:	2203      	movs	r2, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	9302      	str	r3, [sp, #8]
 8001264:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001266:	2302      	movs	r3, #2
 8001268:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126e:	e9cd 3305 	strd	r3, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001272:	2308      	movs	r3, #8
 8001274:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001276:	f001 ff1d 	bl	80030b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800127a:	b038      	add	sp, #224	@ 0xe0
 800127c:	bd10      	pop	{r4, pc}
 800127e:	bf00      	nop
 8001280:	40004c00 	.word	0x40004c00
 8001284:	58024400 	.word	0x58024400
 8001288:	58020000 	.word	0x58020000

0800128c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800128c:	e7fe      	b.n	800128c <NMI_Handler>

0800128e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800128e:	e7fe      	b.n	800128e <HardFault_Handler>

08001290 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001290:	e7fe      	b.n	8001290 <MemManage_Handler>

08001292 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001292:	e7fe      	b.n	8001292 <BusFault_Handler>

08001294 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001294:	e7fe      	b.n	8001294 <UsageFault_Handler>

08001296 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001296:	4770      	bx	lr

08001298 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8001298:	4770      	bx	lr

0800129a <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 800129a:	4770      	bx	lr

0800129c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800129c:	f000 b90a 	b.w	80014b4 <HAL_IncTick>

080012a0 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 80012a0:	4801      	ldr	r0, [pc, #4]	@ (80012a8 <DMA1_Stream0_IRQHandler+0x8>)
 80012a2:	f001 ba27 	b.w	80026f4 <HAL_DMA_IRQHandler>
 80012a6:	bf00      	nop
 80012a8:	24008e84 	.word	0x24008e84

080012ac <DCMI_IRQHandler>:
void DCMI_IRQHandler(void)
{
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80012ac:	4801      	ldr	r0, [pc, #4]	@ (80012b4 <DCMI_IRQHandler+0x8>)
 80012ae:	f000 bb33 	b.w	8001918 <HAL_DCMI_IRQHandler>
 80012b2:	bf00      	nop
 80012b4:	24008efc 	.word	0x24008efc

080012b8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012b8:	4a0b      	ldr	r2, [pc, #44]	@ (80012e8 <_sbrk+0x30>)
{
 80012ba:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80012bc:	6811      	ldr	r1, [r2, #0]
{
 80012be:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80012c0:	b909      	cbnz	r1, 80012c6 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80012c2:	490a      	ldr	r1, [pc, #40]	@ (80012ec <_sbrk+0x34>)
 80012c4:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012c6:	6810      	ldr	r0, [r2, #0]
 80012c8:	4909      	ldr	r1, [pc, #36]	@ (80012f0 <_sbrk+0x38>)
 80012ca:	4c0a      	ldr	r4, [pc, #40]	@ (80012f4 <_sbrk+0x3c>)
 80012cc:	4403      	add	r3, r0
 80012ce:	1b09      	subs	r1, r1, r4
 80012d0:	428b      	cmp	r3, r1
 80012d2:	d906      	bls.n	80012e2 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80012d4:	f00b fb40 	bl	800c958 <__errno>
 80012d8:	230c      	movs	r3, #12
 80012da:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80012dc:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80012e0:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80012e2:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80012e4:	e7fc      	b.n	80012e0 <_sbrk+0x28>
 80012e6:	bf00      	nop
 80012e8:	24008f70 	.word	0x24008f70
 80012ec:	20000000 	.word	0x20000000
 80012f0:	24080000 	.word	0x24080000
 80012f4:	00000800 	.word	0x00000800

080012f8 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012f8:	4a25      	ldr	r2, [pc, #148]	@ (8001390 <SystemInit+0x98>)
 80012fa:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80012fe:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001302:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001306:	4a23      	ldr	r2, [pc, #140]	@ (8001394 <SystemInit+0x9c>)
 8001308:	6813      	ldr	r3, [r2, #0]
 800130a:	f003 030f 	and.w	r3, r3, #15
 800130e:	2b06      	cmp	r3, #6
 8001310:	d805      	bhi.n	800131e <SystemInit+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001312:	6813      	ldr	r3, [r2, #0]
 8001314:	f023 030f 	bic.w	r3, r3, #15
 8001318:	f043 0307 	orr.w	r3, r3, #7
 800131c:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800131e:	4b1e      	ldr	r3, [pc, #120]	@ (8001398 <SystemInit+0xa0>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	f042 0201 	orr.w	r2, r2, #1
 8001326:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001328:	2200      	movs	r2, #0
 800132a:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800132c:	4a1b      	ldr	r2, [pc, #108]	@ (800139c <SystemInit+0xa4>)
 800132e:	6819      	ldr	r1, [r3, #0]
 8001330:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001332:	4918      	ldr	r1, [pc, #96]	@ (8001394 <SystemInit+0x9c>)
  RCC->CR &= 0xEAF6ED7FU;
 8001334:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001336:	680a      	ldr	r2, [r1, #0]
 8001338:	0712      	lsls	r2, r2, #28
 800133a:	d505      	bpl.n	8001348 <SystemInit+0x50>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800133c:	680a      	ldr	r2, [r1, #0]
 800133e:	f022 020f 	bic.w	r2, r2, #15
 8001342:	f042 0207 	orr.w	r2, r2, #7
 8001346:	600a      	str	r2, [r1, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001348:	2200      	movs	r2, #0

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800134a:	4915      	ldr	r1, [pc, #84]	@ (80013a0 <SystemInit+0xa8>)
  RCC->D1CFGR = 0x00000000;
 800134c:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800134e:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8001350:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8001352:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001354:	4913      	ldr	r1, [pc, #76]	@ (80013a4 <SystemInit+0xac>)
 8001356:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001358:	4913      	ldr	r1, [pc, #76]	@ (80013a8 <SystemInit+0xb0>)
 800135a:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800135c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800135e:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001360:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001362:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001364:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001366:	6819      	ldr	r1, [r3, #0]
 8001368:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 800136c:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800136e:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001370:	4b0e      	ldr	r3, [pc, #56]	@ (80013ac <SystemInit+0xb4>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	0c1b      	lsrs	r3, r3, #16
 8001376:	041b      	lsls	r3, r3, #16
 8001378:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800137c:	d203      	bcs.n	8001386 <SystemInit+0x8e>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800137e:	4b0c      	ldr	r3, [pc, #48]	@ (80013b0 <SystemInit+0xb8>)
 8001380:	2201      	movs	r2, #1
 8001382:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001386:	4b0b      	ldr	r3, [pc, #44]	@ (80013b4 <SystemInit+0xbc>)
 8001388:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800138c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800138e:	4770      	bx	lr
 8001390:	e000ed00 	.word	0xe000ed00
 8001394:	52002000 	.word	0x52002000
 8001398:	58024400 	.word	0x58024400
 800139c:	eaf6ed7f 	.word	0xeaf6ed7f
 80013a0:	02020200 	.word	0x02020200
 80013a4:	01ff0000 	.word	0x01ff0000
 80013a8:	01010280 	.word	0x01010280
 80013ac:	5c001000 	.word	0x5c001000
 80013b0:	51008000 	.word	0x51008000
 80013b4:	52004000 	.word	0x52004000

080013b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80013b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013bc:	f7ff ff9c 	bl	80012f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013c0:	480c      	ldr	r0, [pc, #48]	@ (80013f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013c2:	490d      	ldr	r1, [pc, #52]	@ (80013f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013c4:	4a0d      	ldr	r2, [pc, #52]	@ (80013fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c8:	e002      	b.n	80013d0 <LoopCopyDataInit>

080013ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ce:	3304      	adds	r3, #4

080013d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d4:	d3f9      	bcc.n	80013ca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001400 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001404 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013dc:	e001      	b.n	80013e2 <LoopFillZerobss>

080013de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e0:	3204      	adds	r2, #4

080013e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e4:	d3fb      	bcc.n	80013de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013e6:	f00b fabd 	bl	800c964 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ea:	f7ff fbc3 	bl	8000b74 <main>
  bx  lr
 80013ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013f0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80013f4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80013f8:	24000d18 	.word	0x24000d18
  ldr r2, =_sidata
 80013fc:	0806d878 	.word	0x0806d878
  ldr r2, =_sbss
 8001400:	24000d20 	.word	0x24000d20
  ldr r4, =_ebss
 8001404:	240692f0 	.word	0x240692f0

08001408 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001408:	e7fe      	b.n	8001408 <ADC3_IRQHandler>
	...

0800140c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800140c:	b538      	push	{r3, r4, r5, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800140e:	4b0f      	ldr	r3, [pc, #60]	@ (800144c <HAL_InitTick+0x40>)
{
 8001410:	4605      	mov	r5, r0
  if((uint32_t)uwTickFreq == 0UL)
 8001412:	781a      	ldrb	r2, [r3, #0]
 8001414:	b90a      	cbnz	r2, 800141a <HAL_InitTick+0xe>
  {
    return HAL_ERROR;
 8001416:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001418:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800141a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800141e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001422:	4a0b      	ldr	r2, [pc, #44]	@ (8001450 <HAL_InitTick+0x44>)
 8001424:	6810      	ldr	r0, [r2, #0]
 8001426:	fbb0 f0f3 	udiv	r0, r0, r3
 800142a:	f000 f8bf 	bl	80015ac <HAL_SYSTICK_Config>
 800142e:	4604      	mov	r4, r0
 8001430:	2800      	cmp	r0, #0
 8001432:	d1f0      	bne.n	8001416 <HAL_InitTick+0xa>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001434:	2d0f      	cmp	r5, #15
 8001436:	d8ee      	bhi.n	8001416 <HAL_InitTick+0xa>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001438:	4602      	mov	r2, r0
 800143a:	4629      	mov	r1, r5
 800143c:	f04f 30ff 	mov.w	r0, #4294967295
 8001440:	f000 f874 	bl	800152c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001444:	4b03      	ldr	r3, [pc, #12]	@ (8001454 <HAL_InitTick+0x48>)
 8001446:	4620      	mov	r0, r4
 8001448:	601d      	str	r5, [r3, #0]
  return HAL_OK;
 800144a:	e7e5      	b.n	8001418 <HAL_InitTick+0xc>
 800144c:	24000010 	.word	0x24000010
 8001450:	2400000c 	.word	0x2400000c
 8001454:	24000014 	.word	0x24000014

08001458 <HAL_Init>:
{
 8001458:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800145a:	2003      	movs	r0, #3
 800145c:	f000 f854 	bl	8001508 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001460:	f002 fda0 	bl	8003fa4 <HAL_RCC_GetSysClockFreq>
 8001464:	490f      	ldr	r1, [pc, #60]	@ (80014a4 <HAL_Init+0x4c>)
 8001466:	4a10      	ldr	r2, [pc, #64]	@ (80014a8 <HAL_Init+0x50>)
 8001468:	698b      	ldr	r3, [r1, #24]
 800146a:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800146e:	5cd3      	ldrb	r3, [r2, r3]
 8001470:	f003 031f 	and.w	r3, r3, #31
 8001474:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001476:	698b      	ldr	r3, [r1, #24]
 8001478:	f003 030f 	and.w	r3, r3, #15
 800147c:	5cd3      	ldrb	r3, [r2, r3]
 800147e:	4a0b      	ldr	r2, [pc, #44]	@ (80014ac <HAL_Init+0x54>)
 8001480:	f003 031f 	and.w	r3, r3, #31
 8001484:	fa20 f303 	lsr.w	r3, r0, r3
 8001488:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800148a:	4b09      	ldr	r3, [pc, #36]	@ (80014b0 <HAL_Init+0x58>)
 800148c:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800148e:	200f      	movs	r0, #15
 8001490:	f7ff ffbc 	bl	800140c <HAL_InitTick>
 8001494:	4604      	mov	r4, r0
 8001496:	b918      	cbnz	r0, 80014a0 <HAL_Init+0x48>
  HAL_MspInit();
 8001498:	f7ff fd3a 	bl	8000f10 <HAL_MspInit>
}
 800149c:	4620      	mov	r0, r4
 800149e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80014a0:	2401      	movs	r4, #1
 80014a2:	e7fb      	b.n	800149c <HAL_Init+0x44>
 80014a4:	58024400 	.word	0x58024400
 80014a8:	0800ec85 	.word	0x0800ec85
 80014ac:	24000008 	.word	0x24000008
 80014b0:	2400000c 	.word	0x2400000c

080014b4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80014b4:	4a03      	ldr	r2, [pc, #12]	@ (80014c4 <HAL_IncTick+0x10>)
 80014b6:	4b04      	ldr	r3, [pc, #16]	@ (80014c8 <HAL_IncTick+0x14>)
 80014b8:	6811      	ldr	r1, [r2, #0]
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	440b      	add	r3, r1
 80014be:	6013      	str	r3, [r2, #0]
}
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	24008f74 	.word	0x24008f74
 80014c8:	24000010 	.word	0x24000010

080014cc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80014cc:	4b01      	ldr	r3, [pc, #4]	@ (80014d4 <HAL_GetTick+0x8>)
 80014ce:	6818      	ldr	r0, [r3, #0]
}
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	24008f74 	.word	0x24008f74

080014d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014d8:	b538      	push	{r3, r4, r5, lr}
 80014da:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80014dc:	f7ff fff6 	bl	80014cc <HAL_GetTick>
 80014e0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014e2:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80014e4:	bf1e      	ittt	ne
 80014e6:	4b04      	ldrne	r3, [pc, #16]	@ (80014f8 <HAL_Delay+0x20>)
 80014e8:	781b      	ldrbne	r3, [r3, #0]
 80014ea:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014ec:	f7ff ffee 	bl	80014cc <HAL_GetTick>
 80014f0:	1b43      	subs	r3, r0, r5
 80014f2:	42a3      	cmp	r3, r4
 80014f4:	d3fa      	bcc.n	80014ec <HAL_Delay+0x14>
  {
  }
}
 80014f6:	bd38      	pop	{r3, r4, r5, pc}
 80014f8:	24000010 	.word	0x24000010

080014fc <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80014fc:	4b01      	ldr	r3, [pc, #4]	@ (8001504 <HAL_GetREVID+0x8>)
 80014fe:	6818      	ldr	r0, [r3, #0]
}
 8001500:	0c00      	lsrs	r0, r0, #16
 8001502:	4770      	bx	lr
 8001504:	5c001000 	.word	0x5c001000

08001508 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001508:	4907      	ldr	r1, [pc, #28]	@ (8001528 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800150a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800150c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800150e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001512:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001516:	0412      	lsls	r2, r2, #16
 8001518:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800151a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800151c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001520:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001524:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001526:	4770      	bx	lr
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800152c:	4b16      	ldr	r3, [pc, #88]	@ (8001588 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800152e:	b530      	push	{r4, r5, lr}
 8001530:	68dc      	ldr	r4, [r3, #12]
 8001532:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001536:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800153a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800153c:	2b04      	cmp	r3, #4
 800153e:	bf28      	it	cs
 8001540:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001542:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001544:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001548:	bf8c      	ite	hi
 800154a:	3c03      	subhi	r4, #3
 800154c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800154e:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 8001552:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001554:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001558:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800155c:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001560:	fa03 f304 	lsl.w	r3, r3, r4
 8001564:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001568:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800156c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800156e:	db06      	blt.n	800157e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001570:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001574:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001578:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800157c:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157e:	f000 000f 	and.w	r0, r0, #15
 8001582:	4a02      	ldr	r2, [pc, #8]	@ (800158c <HAL_NVIC_SetPriority+0x60>)
 8001584:	5413      	strb	r3, [r2, r0]
 8001586:	e7f9      	b.n	800157c <HAL_NVIC_SetPriority+0x50>
 8001588:	e000ed00 	.word	0xe000ed00
 800158c:	e000ed14 	.word	0xe000ed14

08001590 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001590:	2800      	cmp	r0, #0
 8001592:	db07      	blt.n	80015a4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001594:	2301      	movs	r3, #1
 8001596:	0941      	lsrs	r1, r0, #5
 8001598:	f000 001f 	and.w	r0, r0, #31
 800159c:	4a02      	ldr	r2, [pc, #8]	@ (80015a8 <HAL_NVIC_EnableIRQ+0x18>)
 800159e:	4083      	lsls	r3, r0
 80015a0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	e000e100 	.word	0xe000e100

080015ac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015ac:	3801      	subs	r0, #1
 80015ae:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80015b2:	d20b      	bcs.n	80015cc <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015b4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b8:	4a05      	ldr	r2, [pc, #20]	@ (80015d0 <HAL_SYSTICK_Config+0x24>)
 80015ba:	21f0      	movs	r1, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015bc:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015be:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c0:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015c4:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015c6:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015c8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015ca:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80015cc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80015ce:	4770      	bx	lr
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80015d4:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80015d6:	4604      	mov	r4, r0
 80015d8:	b908      	cbnz	r0, 80015de <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 80015da:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80015dc:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 80015de:	7f43      	ldrb	r3, [r0, #29]
 80015e0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80015e4:	b913      	cbnz	r3, 80015ec <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 80015e6:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 80015e8:	f7ff fca4 	bl	8000f34 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 80015ec:	2302      	movs	r3, #2
 80015ee:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80015f0:	7923      	ldrb	r3, [r4, #4]
 80015f2:	b9e3      	cbnz	r3, 800162e <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80015f4:	6823      	ldr	r3, [r4, #0]
 80015f6:	4a13      	ldr	r2, [pc, #76]	@ (8001644 <HAL_CRC_Init+0x70>)
 80015f8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	f022 0218 	bic.w	r2, r2, #24
 8001600:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001602:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001604:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001606:	b9d2      	cbnz	r2, 800163e <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001608:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800160c:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 800160e:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	6961      	ldr	r1, [r4, #20]
 8001614:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001618:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800161a:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800161c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001624:	430a      	orrs	r2, r1
 8001626:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8001628:	2301      	movs	r3, #1
 800162a:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 800162c:	e7d6      	b.n	80015dc <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800162e:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8001632:	4620      	mov	r0, r4
 8001634:	f000 f808 	bl	8001648 <HAL_CRCEx_Polynomial_Set>
 8001638:	2800      	cmp	r0, #0
 800163a:	d0e2      	beq.n	8001602 <HAL_CRC_Init+0x2e>
 800163c:	e7cd      	b.n	80015da <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800163e:	6922      	ldr	r2, [r4, #16]
 8001640:	e7e4      	b.n	800160c <HAL_CRC_Init+0x38>
 8001642:	bf00      	nop
 8001644:	04c11db7 	.word	0x04c11db7

08001648 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8001648:	07cb      	lsls	r3, r1, #31
{
 800164a:	b510      	push	{r4, lr}
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800164c:	d50d      	bpl.n	800166a <HAL_CRCEx_Polynomial_Set+0x22>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800164e:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001650:	3b01      	subs	r3, #1
 8001652:	d31d      	bcc.n	8001690 <HAL_CRCEx_Polynomial_Set+0x48>
 8001654:	fa21 f403 	lsr.w	r4, r1, r3
 8001658:	07e4      	lsls	r4, r4, #31
 800165a:	d5f9      	bpl.n	8001650 <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 800165c:	2a10      	cmp	r2, #16
 800165e:	d013      	beq.n	8001688 <HAL_CRCEx_Polynomial_Set+0x40>
 8001660:	2a10      	cmp	r2, #16
 8001662:	d804      	bhi.n	800166e <HAL_CRCEx_Polynomial_Set+0x26>
 8001664:	b13a      	cbz	r2, 8001676 <HAL_CRCEx_Polynomial_Set+0x2e>
 8001666:	2a08      	cmp	r2, #8
 8001668:	d010      	beq.n	800168c <HAL_CRCEx_Polynomial_Set+0x44>
 800166a:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 800166c:	e00b      	b.n	8001686 <HAL_CRCEx_Polynomial_Set+0x3e>
    switch (PolyLength)
 800166e:	2a18      	cmp	r2, #24
 8001670:	d1fb      	bne.n	800166a <HAL_CRCEx_Polynomial_Set+0x22>
        if (msb >= HAL_CRC_LENGTH_7B)
 8001672:	2b06      	cmp	r3, #6
        if (msb >= HAL_CRC_LENGTH_16B)
 8001674:	d8f9      	bhi.n	800166a <HAL_CRCEx_Polynomial_Set+0x22>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001676:	6800      	ldr	r0, [r0, #0]
 8001678:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800167a:	6883      	ldr	r3, [r0, #8]
 800167c:	f023 0318 	bic.w	r3, r3, #24
 8001680:	4313      	orrs	r3, r2
 8001682:	6083      	str	r3, [r0, #8]
 8001684:	2000      	movs	r0, #0
}
 8001686:	bd10      	pop	{r4, pc}
        if (msb >= HAL_CRC_LENGTH_8B)
 8001688:	2b07      	cmp	r3, #7
 800168a:	e7f3      	b.n	8001674 <HAL_CRCEx_Polynomial_Set+0x2c>
        if (msb >= HAL_CRC_LENGTH_16B)
 800168c:	2b0f      	cmp	r3, #15
 800168e:	e7f1      	b.n	8001674 <HAL_CRCEx_Polynomial_Set+0x2c>
    switch (PolyLength)
 8001690:	2a10      	cmp	r2, #16
 8001692:	d1e5      	bne.n	8001660 <HAL_CRCEx_Polynomial_Set+0x18>
 8001694:	e7e9      	b.n	800166a <HAL_CRCEx_Polynomial_Set+0x22>

08001696 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8001696:	b510      	push	{r4, lr}
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001698:	6b84      	ldr	r4, [r0, #56]	@ 0x38

  if (hdcmi->XferCount != 0U)
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 800169a:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
  if (hdcmi->XferCount != 0U)
 800169c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 800169e:	6803      	ldr	r3, [r0, #0]
  if (hdcmi->XferCount != 0U)
 80016a0:	b332      	cbz	r2, 80016f0 <DCMI_DMAXferCplt+0x5a>
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 80016a2:	6819      	ldr	r1, [r3, #0]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 80016a4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80016a6:	f012 0201 	ands.w	r2, r2, #1
 80016aa:	d11a      	bne.n	80016e2 <DCMI_DMAXferCplt+0x4c>
 80016ac:	0309      	lsls	r1, r1, #12
 80016ae:	d518      	bpl.n	80016e2 <DCMI_DMAXferCplt+0x4c>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 80016b0:	68db      	ldr	r3, [r3, #12]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 80016b2:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 80016b4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80016b8:	f001 fcd0 	bl	800305c <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80016bc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80016be:	3b01      	subs	r3, #1
 80016c0:	63a3      	str	r3, [r4, #56]	@ 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 80016c2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80016c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d10a      	bne.n	80016e0 <DCMI_DMAXferCplt+0x4a>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80016ca:	6823      	ldr	r3, [r4, #0]
 80016cc:	68da      	ldr	r2, [r3, #12]
 80016ce:	f042 0201 	orr.w	r2, r2, #1
 80016d2:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	079b      	lsls	r3, r3, #30
 80016d8:	d502      	bpl.n	80016e0 <DCMI_DMAXferCplt+0x4a>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 80016da:	2301      	movs	r3, #1
 80016dc:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    }
  }
}
 80016e0:	bd10      	pop	{r4, pc}
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	0312      	lsls	r2, r2, #12
 80016e6:	d4ec      	bmi.n	80016c2 <DCMI_DMAXferCplt+0x2c>
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 80016e8:	691b      	ldr	r3, [r3, #16]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 80016ea:	2201      	movs	r2, #1
 80016ec:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80016ee:	e7e1      	b.n	80016b4 <DCMI_DMAXferCplt+0x1e>
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 80016f0:	681a      	ldr	r2, [r3, #0]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 80016f2:	6c21      	ldr	r1, [r4, #64]	@ 0x40
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 80016f4:	0310      	lsls	r0, r2, #12
 80016f6:	d502      	bpl.n	80016fe <DCMI_DMAXferCplt+0x68>
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 80016f8:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80016fa:	60da      	str	r2, [r3, #12]
 80016fc:	e7e1      	b.n	80016c2 <DCMI_DMAXferCplt+0x2c>
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	0312      	lsls	r2, r2, #12
 8001702:	d4de      	bmi.n	80016c2 <DCMI_DMAXferCplt+0x2c>
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 8001704:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8001706:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8001708:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800170c:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 800170e:	63a1      	str	r1, [r4, #56]	@ 0x38
 8001710:	e7d7      	b.n	80016c2 <DCMI_DMAXferCplt+0x2c>
	...

08001714 <HAL_DCMI_Init>:
{
 8001714:	b538      	push	{r3, r4, r5, lr}
  if (hdcmi == NULL)
 8001716:	4604      	mov	r4, r0
 8001718:	2800      	cmp	r0, #0
 800171a:	d03f      	beq.n	800179c <HAL_DCMI_Init+0x88>
  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800171c:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8001720:	b90b      	cbnz	r3, 8001726 <HAL_DCMI_Init+0x12>
    HAL_DCMI_MspInit(hdcmi);
 8001722:	f7ff fc1f 	bl	8000f64 <HAL_DCMI_MspInit>
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001726:	2302      	movs	r3, #2
 8001728:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800172c:	69a3      	ldr	r3, [r4, #24]
 800172e:	b10b      	cbz	r3, 8001734 <HAL_DCMI_Init+0x20>
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8001730:	2200      	movs	r2, #0
 8001732:	6262      	str	r2, [r4, #36]	@ 0x24
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8001734:	6822      	ldr	r2, [r4, #0]
 8001736:	491a      	ldr	r1, [pc, #104]	@ (80017a0 <HAL_DCMI_Init+0x8c>)
 8001738:	6810      	ldr	r0, [r2, #0]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800173a:	6965      	ldr	r5, [r4, #20]
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800173c:	4001      	ands	r1, r0
 800173e:	6011      	str	r1, [r2, #0]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001740:	6861      	ldr	r1, [r4, #4]
 8001742:	6810      	ldr	r0, [r2, #0]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001744:	430b      	orrs	r3, r1
  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001746:	2910      	cmp	r1, #16
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001748:	ea43 0305 	orr.w	r3, r3, r5
 800174c:	68e5      	ldr	r5, [r4, #12]
 800174e:	ea43 0305 	orr.w	r3, r3, r5
 8001752:	6925      	ldr	r5, [r4, #16]
 8001754:	ea43 0305 	orr.w	r3, r3, r5
 8001758:	68a5      	ldr	r5, [r4, #8]
 800175a:	ea43 0305 	orr.w	r3, r3, r5
 800175e:	6a25      	ldr	r5, [r4, #32]
 8001760:	ea43 0305 	orr.w	r3, r3, r5
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001764:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8001766:	ea43 0305 	orr.w	r3, r3, r5
 800176a:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 800176c:	ea43 0305 	orr.w	r3, r3, r5
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001770:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8001772:	ea43 0305 	orr.w	r3, r3, r5
 8001776:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8001778:	ea43 0305 	orr.w	r3, r3, r5
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800177c:	ea43 0300 	orr.w	r3, r3, r0
 8001780:	6013      	str	r3, [r2, #0]
  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001782:	d101      	bne.n	8001788 <HAL_DCMI_Init+0x74>
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8001784:	69e3      	ldr	r3, [r4, #28]
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001786:	6193      	str	r3, [r2, #24]
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001788:	68d3      	ldr	r3, [r2, #12]
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800178a:	2000      	movs	r0, #0
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800178c:	f043 031e 	orr.w	r3, r3, #30
 8001790:	60d3      	str	r3, [r2, #12]
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001792:	2301      	movs	r3, #1
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001794:	64e0      	str	r0, [r4, #76]	@ 0x4c
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001796:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
}
 800179a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800179c:	2001      	movs	r0, #1
 800179e:	e7fc      	b.n	800179a <HAL_DCMI_Init+0x86>
 80017a0:	ffe0f007 	.word	0xffe0f007

080017a4 <HAL_DCMI_Start_DMA>:
{
 80017a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80017a6:	4604      	mov	r4, r0
  __HAL_LOCK(hdcmi);
 80017a8:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
{
 80017ac:	4615      	mov	r5, r2
  __HAL_LOCK(hdcmi);
 80017ae:	2801      	cmp	r0, #1
 80017b0:	f04f 0002 	mov.w	r0, #2
 80017b4:	d02f      	beq.n	8001816 <HAL_DCMI_Start_DMA+0x72>
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80017b6:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
  __HAL_LOCK(hdcmi);
 80017ba:	2701      	movs	r7, #1
  __HAL_DCMI_ENABLE(hdcmi);
 80017bc:	6820      	ldr	r0, [r4, #0]
  if (Length <= 0xFFFFU)
 80017be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
  __HAL_LOCK(hdcmi);
 80017c2:	f884 7034 	strb.w	r7, [r4, #52]	@ 0x34
  __HAL_DCMI_ENABLE(hdcmi);
 80017c6:	6806      	ldr	r6, [r0, #0]
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80017c8:	f8df e0ac 	ldr.w	lr, [pc, #172]	@ 8001878 <HAL_DCMI_Start_DMA+0xd4>
  __HAL_DCMI_ENABLE(hdcmi);
 80017cc:	f446 4680 	orr.w	r6, r6, #16384	@ 0x4000
 80017d0:	6006      	str	r6, [r0, #0]
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 80017d2:	6806      	ldr	r6, [r0, #0]
 80017d4:	f026 0602 	bic.w	r6, r6, #2
 80017d8:	6006      	str	r6, [r0, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 80017da:	6806      	ldr	r6, [r0, #0]
 80017dc:	ea46 0601 	orr.w	r6, r6, r1
 80017e0:	4601      	mov	r1, r0
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80017e2:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 80017e4:	f841 6b28 	str.w	r6, [r1], #40
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80017e8:	4e22      	ldr	r6, [pc, #136]	@ (8001874 <HAL_DCMI_Start_DMA+0xd0>)
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80017ea:	f8c0 e03c 	str.w	lr, [r0, #60]	@ 0x3c
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80017ee:	64c6      	str	r6, [r0, #76]	@ 0x4c
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 80017f0:	f04f 0600 	mov.w	r6, #0
 80017f4:	6506      	str	r6, [r0, #80]	@ 0x50
  hdcmi->XferCount = 0;
 80017f6:	63a6      	str	r6, [r4, #56]	@ 0x38
  hdcmi->XferTransferNumber = 0;
 80017f8:	6426      	str	r6, [r4, #64]	@ 0x40
  hdcmi->XferSize = 0;
 80017fa:	63e6      	str	r6, [r4, #60]	@ 0x3c
  hdcmi->pBuffPtr = 0;
 80017fc:	6466      	str	r6, [r4, #68]	@ 0x44
  if (Length <= 0xFFFFU)
 80017fe:	d20c      	bcs.n	800181a <HAL_DCMI_Start_DMA+0x76>
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8001800:	f000 fc28 	bl	8002054 <HAL_DMA_Start_IT>
 8001804:	b368      	cbz	r0, 8001862 <HAL_DCMI_Start_DMA+0xbe>
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8001806:	2340      	movs	r3, #64	@ 0x40
 8001808:	64e3      	str	r3, [r4, #76]	@ 0x4c
      hdcmi->State = HAL_DCMI_STATE_READY;
 800180a:	f884 7035 	strb.w	r7, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdcmi);
 800180e:	2300      	movs	r3, #0
      return HAL_ERROR;
 8001810:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdcmi);
 8001812:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8001816:	b003      	add	sp, #12
 8001818:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 800181a:	f8c0 e044 	str.w	lr, [r0, #68]	@ 0x44
    hdcmi->XferCount = 1;
 800181e:	63a7      	str	r7, [r4, #56]	@ 0x38
    hdcmi->pBuffPtr = pData;
 8001820:	6462      	str	r2, [r4, #68]	@ 0x44
    hdcmi->XferSize = Length;
 8001822:	63e3      	str	r3, [r4, #60]	@ 0x3c
    while (hdcmi->XferSize > 0xFFFFU)
 8001824:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001826:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800182a:	d213      	bcs.n	8001854 <HAL_DCMI_Start_DMA+0xb0>
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 800182c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800182e:	3b02      	subs	r3, #2
 8001830:	63a3      	str	r3, [r4, #56]	@ 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8001832:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001834:	6423      	str	r3, [r4, #64]	@ 0x40
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8001836:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8001838:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800183a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800183e:	9200      	str	r2, [sp, #0]
 8001840:	462a      	mov	r2, r5
 8001842:	f001 fa2b 	bl	8002c9c <HAL_DMAEx_MultiBufferStart_IT>
 8001846:	b160      	cbz	r0, 8001862 <HAL_DCMI_Start_DMA+0xbe>
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8001848:	2340      	movs	r3, #64	@ 0x40
 800184a:	64e3      	str	r3, [r4, #76]	@ 0x4c
      hdcmi->State = HAL_DCMI_STATE_READY;
 800184c:	2301      	movs	r3, #1
 800184e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      return HAL_ERROR;
 8001852:	e7dc      	b.n	800180e <HAL_DCMI_Start_DMA+0x6a>
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8001854:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001856:	085b      	lsrs	r3, r3, #1
 8001858:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 800185a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	63a3      	str	r3, [r4, #56]	@ 0x38
 8001860:	e7e0      	b.n	8001824 <HAL_DCMI_Start_DMA+0x80>
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001862:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdcmi);
 8001864:	2000      	movs	r0, #0
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001866:	6813      	ldr	r3, [r2, #0]
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hdcmi);
 800186e:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  return HAL_OK;
 8001872:	e7d0      	b.n	8001816 <HAL_DCMI_Start_DMA+0x72>
 8001874:	080018f3 	.word	0x080018f3
 8001878:	08001697 	.word	0x08001697

0800187c <HAL_DCMI_Stop>:
{
 800187c:	b538      	push	{r3, r4, r5, lr}
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800187e:	4b1b      	ldr	r3, [pc, #108]	@ (80018ec <HAL_DCMI_Stop+0x70>)
 8001880:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
{
 8001884:	4604      	mov	r4, r0
 8001886:	2502      	movs	r5, #2
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	fbb3 f3f2 	udiv	r3, r3, r2
 800188e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001892:	4353      	muls	r3, r2
  __HAL_LOCK(hdcmi);
 8001894:	f890 2034 	ldrb.w	r2, [r0, #52]	@ 0x34
 8001898:	2a01      	cmp	r2, #1
 800189a:	d01f      	beq.n	80018dc <HAL_DCMI_Stop+0x60>
 800189c:	2201      	movs	r2, #1
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800189e:	f880 5035 	strb.w	r5, [r0, #53]	@ 0x35
  __HAL_LOCK(hdcmi);
 80018a2:	f880 2034 	strb.w	r2, [r0, #52]	@ 0x34
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 80018a6:	6802      	ldr	r2, [r0, #0]
 80018a8:	6811      	ldr	r1, [r2, #0]
 80018aa:	f021 0101 	bic.w	r1, r1, #1
 80018ae:	6011      	str	r1, [r2, #0]
    if (count == 0U)
 80018b0:	3b01      	subs	r3, #1
 80018b2:	d115      	bne.n	80018e0 <HAL_DCMI_Stop+0x64>
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 80018b4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
      status = HAL_TIMEOUT;
 80018b6:	2503      	movs	r5, #3
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 80018b8:	f043 0320 	orr.w	r3, r3, #32
 80018bc:	64e3      	str	r3, [r4, #76]	@ 0x4c
  __HAL_DCMI_DISABLE(hdcmi);
 80018be:	6813      	ldr	r3, [r2, #0]
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 80018c0:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
  __HAL_DCMI_DISABLE(hdcmi);
 80018c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80018c6:	6013      	str	r3, [r2, #0]
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 80018c8:	f000 fcde 	bl	8002288 <HAL_DMA_Abort>
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 80018cc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80018ce:	64e3      	str	r3, [r4, #76]	@ 0x4c
  hdcmi->State = HAL_DCMI_STATE_READY;
 80018d0:	2301      	movs	r3, #1
 80018d2:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdcmi);
 80018d6:	2300      	movs	r3, #0
 80018d8:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 80018dc:	4628      	mov	r0, r5
 80018de:	bd38      	pop	{r3, r4, r5, pc}
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 80018e0:	6815      	ldr	r5, [r2, #0]
 80018e2:	f015 0501 	ands.w	r5, r5, #1
 80018e6:	d1e3      	bne.n	80018b0 <HAL_DCMI_Stop+0x34>
 80018e8:	e7e9      	b.n	80018be <HAL_DCMI_Stop+0x42>
 80018ea:	bf00      	nop
 80018ec:	2400000c 	.word	0x2400000c

080018f0 <HAL_DCMI_ErrorCallback>:
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
 80018f0:	4770      	bx	lr

080018f2 <DCMI_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018f2:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 80018f4:	b508      	push	{r3, lr}

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 80018f6:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 80018f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d006      	beq.n	800190c <DCMI_DMAError+0x1a>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 80018fe:	2301      	movs	r3, #1
 8001900:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8001904:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8001906:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800190a:	64c3      	str	r3, [r0, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 800190c:	f7ff fff0 	bl	80018f0 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8001910:	bd08      	pop	{r3, pc}

08001912 <HAL_DCMI_LineEventCallback>:
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
 8001912:	4770      	bx	lr

08001914 <HAL_DCMI_VsyncEventCallback>:
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
 8001914:	4770      	bx	lr
	...

08001918 <HAL_DCMI_IRQHandler>:
{
 8001918:	b538      	push	{r3, r4, r5, lr}
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 800191a:	6803      	ldr	r3, [r0, #0]
{
 800191c:	4604      	mov	r4, r0
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 800191e:	691d      	ldr	r5, [r3, #16]
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8001920:	0769      	lsls	r1, r5, #29
 8001922:	d50c      	bpl.n	800193e <HAL_DCMI_IRQHandler+0x26>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8001924:	2204      	movs	r2, #4
 8001926:	615a      	str	r2, [r3, #20]
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8001928:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800192a:	f043 0302 	orr.w	r3, r3, #2
 800192e:	64c3      	str	r3, [r0, #76]	@ 0x4c
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001930:	4b1d      	ldr	r3, [pc, #116]	@ (80019a8 <HAL_DCMI_IRQHandler+0x90>)
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001932:	f880 2035 	strb.w	r2, [r0, #53]	@ 0x35
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001936:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8001938:	6503      	str	r3, [r0, #80]	@ 0x50
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800193a:	f000 fe4b 	bl	80025d4 <HAL_DMA_Abort_IT>
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 800193e:	07aa      	lsls	r2, r5, #30
 8001940:	d50e      	bpl.n	8001960 <HAL_DCMI_IRQHandler+0x48>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8001942:	6823      	ldr	r3, [r4, #0]
 8001944:	2202      	movs	r2, #2
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001946:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8001948:	615a      	str	r2, [r3, #20]
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 800194a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	64e3      	str	r3, [r4, #76]	@ 0x4c
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001952:	2304      	movs	r3, #4
 8001954:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001958:	4b13      	ldr	r3, [pc, #76]	@ (80019a8 <HAL_DCMI_IRQHandler+0x90>)
 800195a:	6503      	str	r3, [r0, #80]	@ 0x50
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800195c:	f000 fe3a 	bl	80025d4 <HAL_DMA_Abort_IT>
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8001960:	06eb      	lsls	r3, r5, #27
 8001962:	d505      	bpl.n	8001970 <HAL_DCMI_IRQHandler+0x58>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8001964:	6823      	ldr	r3, [r4, #0]
 8001966:	2210      	movs	r2, #16
    HAL_DCMI_LineEventCallback(hdcmi);
 8001968:	4620      	mov	r0, r4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800196a:	615a      	str	r2, [r3, #20]
    HAL_DCMI_LineEventCallback(hdcmi);
 800196c:	f7ff ffd1 	bl	8001912 <HAL_DCMI_LineEventCallback>
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8001970:	0728      	lsls	r0, r5, #28
 8001972:	d505      	bpl.n	8001980 <HAL_DCMI_IRQHandler+0x68>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8001974:	6823      	ldr	r3, [r4, #0]
 8001976:	2208      	movs	r2, #8
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8001978:	4620      	mov	r0, r4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800197a:	615a      	str	r2, [r3, #20]
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800197c:	f7ff ffca 	bl	8001914 <HAL_DCMI_VsyncEventCallback>
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8001980:	07e9      	lsls	r1, r5, #31
 8001982:	d510      	bpl.n	80019a6 <HAL_DCMI_IRQHandler+0x8e>
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001984:	6823      	ldr	r3, [r4, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	0792      	lsls	r2, r2, #30
 800198a:	d503      	bpl.n	8001994 <HAL_DCMI_IRQHandler+0x7c>
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800198c:	68da      	ldr	r2, [r3, #12]
 800198e:	f022 021e 	bic.w	r2, r2, #30
 8001992:	60da      	str	r2, [r3, #12]
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001994:	68da      	ldr	r2, [r3, #12]
    HAL_DCMI_FrameEventCallback(hdcmi);
 8001996:	4620      	mov	r0, r4
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001998:	f022 0201 	bic.w	r2, r2, #1
 800199c:	60da      	str	r2, [r3, #12]
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 800199e:	2201      	movs	r2, #1
 80019a0:	615a      	str	r2, [r3, #20]
    HAL_DCMI_FrameEventCallback(hdcmi);
 80019a2:	f7fe ffd1 	bl	8000948 <HAL_DCMI_FrameEventCallback>
}
 80019a6:	bd38      	pop	{r3, r4, r5, pc}
 80019a8:	080018f3 	.word	0x080018f3

080019ac <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80019ae:	f8df c17c 	ldr.w	ip, [pc, #380]	@ 8001b2c <DMA_SetConfig+0x180>
 80019b2:	6804      	ldr	r4, [r0, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019b4:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80019b6:	4564      	cmp	r4, ip
 80019b8:	d045      	beq.n	8001a46 <DMA_SetConfig+0x9a>
 80019ba:	4d59      	ldr	r5, [pc, #356]	@ (8001b20 <DMA_SetConfig+0x174>)
 80019bc:	42ac      	cmp	r4, r5
 80019be:	d042      	beq.n	8001a46 <DMA_SetConfig+0x9a>
 80019c0:	3518      	adds	r5, #24
 80019c2:	42ac      	cmp	r4, r5
 80019c4:	d03f      	beq.n	8001a46 <DMA_SetConfig+0x9a>
 80019c6:	3518      	adds	r5, #24
 80019c8:	42ac      	cmp	r4, r5
 80019ca:	d03c      	beq.n	8001a46 <DMA_SetConfig+0x9a>
 80019cc:	3518      	adds	r5, #24
 80019ce:	42ac      	cmp	r4, r5
 80019d0:	d039      	beq.n	8001a46 <DMA_SetConfig+0x9a>
 80019d2:	3518      	adds	r5, #24
 80019d4:	42ac      	cmp	r4, r5
 80019d6:	d036      	beq.n	8001a46 <DMA_SetConfig+0x9a>
 80019d8:	3518      	adds	r5, #24
 80019da:	42ac      	cmp	r4, r5
 80019dc:	d033      	beq.n	8001a46 <DMA_SetConfig+0x9a>
 80019de:	3518      	adds	r5, #24
 80019e0:	42ac      	cmp	r4, r5
 80019e2:	d030      	beq.n	8001a46 <DMA_SetConfig+0x9a>
 80019e4:	f505 7556 	add.w	r5, r5, #856	@ 0x358
 80019e8:	42ac      	cmp	r4, r5
 80019ea:	d02c      	beq.n	8001a46 <DMA_SetConfig+0x9a>
 80019ec:	3518      	adds	r5, #24
 80019ee:	42ac      	cmp	r4, r5
 80019f0:	d029      	beq.n	8001a46 <DMA_SetConfig+0x9a>
 80019f2:	3518      	adds	r5, #24
 80019f4:	42ac      	cmp	r4, r5
 80019f6:	d026      	beq.n	8001a46 <DMA_SetConfig+0x9a>
 80019f8:	3518      	adds	r5, #24
 80019fa:	42ac      	cmp	r4, r5
 80019fc:	d023      	beq.n	8001a46 <DMA_SetConfig+0x9a>
 80019fe:	3518      	adds	r5, #24
 8001a00:	42ac      	cmp	r4, r5
 8001a02:	d020      	beq.n	8001a46 <DMA_SetConfig+0x9a>
 8001a04:	3518      	adds	r5, #24
 8001a06:	42ac      	cmp	r4, r5
 8001a08:	d01d      	beq.n	8001a46 <DMA_SetConfig+0x9a>
 8001a0a:	3518      	adds	r5, #24
 8001a0c:	42ac      	cmp	r4, r5
 8001a0e:	d01a      	beq.n	8001a46 <DMA_SetConfig+0x9a>
 8001a10:	3518      	adds	r5, #24
 8001a12:	42ac      	cmp	r4, r5
 8001a14:	d017      	beq.n	8001a46 <DMA_SetConfig+0x9a>
 8001a16:	4d43      	ldr	r5, [pc, #268]	@ (8001b24 <DMA_SetConfig+0x178>)
 8001a18:	42ac      	cmp	r4, r5
 8001a1a:	d014      	beq.n	8001a46 <DMA_SetConfig+0x9a>
 8001a1c:	3514      	adds	r5, #20
 8001a1e:	42ac      	cmp	r4, r5
 8001a20:	d011      	beq.n	8001a46 <DMA_SetConfig+0x9a>
 8001a22:	3514      	adds	r5, #20
 8001a24:	42ac      	cmp	r4, r5
 8001a26:	d00e      	beq.n	8001a46 <DMA_SetConfig+0x9a>
 8001a28:	3514      	adds	r5, #20
 8001a2a:	42ac      	cmp	r4, r5
 8001a2c:	d00b      	beq.n	8001a46 <DMA_SetConfig+0x9a>
 8001a2e:	3514      	adds	r5, #20
 8001a30:	42ac      	cmp	r4, r5
 8001a32:	d008      	beq.n	8001a46 <DMA_SetConfig+0x9a>
 8001a34:	3514      	adds	r5, #20
 8001a36:	42ac      	cmp	r4, r5
 8001a38:	d005      	beq.n	8001a46 <DMA_SetConfig+0x9a>
 8001a3a:	3514      	adds	r5, #20
 8001a3c:	42ac      	cmp	r4, r5
 8001a3e:	d002      	beq.n	8001a46 <DMA_SetConfig+0x9a>
 8001a40:	3514      	adds	r5, #20
 8001a42:	42ac      	cmp	r4, r5
 8001a44:	d167      	bne.n	8001b16 <DMA_SetConfig+0x16a>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a46:	e9d0 5619 	ldrd	r5, r6, [r0, #100]	@ 0x64
 8001a4a:	606e      	str	r6, [r5, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001a4c:	6ec5      	ldr	r5, [r0, #108]	@ 0x6c
 8001a4e:	b115      	cbz	r5, 8001a56 <DMA_SetConfig+0xaa>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a50:	e9d0 561c 	ldrd	r5, r6, [r0, #112]	@ 0x70
 8001a54:	606e      	str	r6, [r5, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a56:	4564      	cmp	r4, ip
 8001a58:	d037      	beq.n	8001aca <DMA_SetConfig+0x11e>
 8001a5a:	4d31      	ldr	r5, [pc, #196]	@ (8001b20 <DMA_SetConfig+0x174>)
 8001a5c:	42ac      	cmp	r4, r5
 8001a5e:	d034      	beq.n	8001aca <DMA_SetConfig+0x11e>
 8001a60:	3518      	adds	r5, #24
 8001a62:	42ac      	cmp	r4, r5
 8001a64:	d031      	beq.n	8001aca <DMA_SetConfig+0x11e>
 8001a66:	3518      	adds	r5, #24
 8001a68:	42ac      	cmp	r4, r5
 8001a6a:	d02e      	beq.n	8001aca <DMA_SetConfig+0x11e>
 8001a6c:	3518      	adds	r5, #24
 8001a6e:	42ac      	cmp	r4, r5
 8001a70:	d02b      	beq.n	8001aca <DMA_SetConfig+0x11e>
 8001a72:	3518      	adds	r5, #24
 8001a74:	42ac      	cmp	r4, r5
 8001a76:	d028      	beq.n	8001aca <DMA_SetConfig+0x11e>
 8001a78:	3518      	adds	r5, #24
 8001a7a:	42ac      	cmp	r4, r5
 8001a7c:	d025      	beq.n	8001aca <DMA_SetConfig+0x11e>
 8001a7e:	3518      	adds	r5, #24
 8001a80:	42ac      	cmp	r4, r5
 8001a82:	d022      	beq.n	8001aca <DMA_SetConfig+0x11e>
 8001a84:	f505 7556 	add.w	r5, r5, #856	@ 0x358
 8001a88:	42ac      	cmp	r4, r5
 8001a8a:	d01e      	beq.n	8001aca <DMA_SetConfig+0x11e>
 8001a8c:	3518      	adds	r5, #24
 8001a8e:	42ac      	cmp	r4, r5
 8001a90:	d01b      	beq.n	8001aca <DMA_SetConfig+0x11e>
 8001a92:	3518      	adds	r5, #24
 8001a94:	42ac      	cmp	r4, r5
 8001a96:	d018      	beq.n	8001aca <DMA_SetConfig+0x11e>
 8001a98:	3518      	adds	r5, #24
 8001a9a:	42ac      	cmp	r4, r5
 8001a9c:	d015      	beq.n	8001aca <DMA_SetConfig+0x11e>
 8001a9e:	3518      	adds	r5, #24
 8001aa0:	42ac      	cmp	r4, r5
 8001aa2:	d012      	beq.n	8001aca <DMA_SetConfig+0x11e>
 8001aa4:	3518      	adds	r5, #24
 8001aa6:	42ac      	cmp	r4, r5
 8001aa8:	d00f      	beq.n	8001aca <DMA_SetConfig+0x11e>
 8001aaa:	3518      	adds	r5, #24
 8001aac:	42ac      	cmp	r4, r5
 8001aae:	d00c      	beq.n	8001aca <DMA_SetConfig+0x11e>
 8001ab0:	3518      	adds	r5, #24
 8001ab2:	42ac      	cmp	r4, r5
 8001ab4:	d009      	beq.n	8001aca <DMA_SetConfig+0x11e>

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001ab6:	4d1b      	ldr	r5, [pc, #108]	@ (8001b24 <DMA_SetConfig+0x178>)
 8001ab8:	42ac      	cmp	r4, r5
 8001aba:	d117      	bne.n	8001aec <DMA_SetConfig+0x140>
  {
    /* Clear all flags */
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8001abc:	6dc5      	ldr	r5, [r0, #92]	@ 0x5c
 8001abe:	f005 061f 	and.w	r6, r5, #31
 8001ac2:	2501      	movs	r5, #1
 8001ac4:	40b5      	lsls	r5, r6
 8001ac6:	607d      	str	r5, [r7, #4]
 8001ac8:	e009      	b.n	8001ade <DMA_SetConfig+0x132>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001aca:	6dc5      	ldr	r5, [r0, #92]	@ 0x5c
 8001acc:	f005 061f 	and.w	r6, r5, #31
 8001ad0:	253f      	movs	r5, #63	@ 0x3f
 8001ad2:	40b5      	lsls	r5, r6
 8001ad4:	60bd      	str	r5, [r7, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001ad6:	6825      	ldr	r5, [r4, #0]
 8001ad8:	f425 2580 	bic.w	r5, r5, #262144	@ 0x40000
 8001adc:	6025      	str	r5, [r4, #0]

    /* Configure DMA Channel data length */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8001ade:	6063      	str	r3, [r4, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ae0:	6883      	ldr	r3, [r0, #8]
 8001ae2:	2b40      	cmp	r3, #64	@ 0x40
 8001ae4:	d118      	bne.n	8001b18 <DMA_SetConfig+0x16c>
    {
      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8001ae6:	60a2      	str	r2, [r4, #8]

      /* Configure DMA Channel source address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8001ae8:	60e1      	str	r1, [r4, #12]
 8001aea:	e014      	b.n	8001b16 <DMA_SetConfig+0x16a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001aec:	4d0e      	ldr	r5, [pc, #56]	@ (8001b28 <DMA_SetConfig+0x17c>)
 8001aee:	42ac      	cmp	r4, r5
 8001af0:	d0e4      	beq.n	8001abc <DMA_SetConfig+0x110>
 8001af2:	3514      	adds	r5, #20
 8001af4:	42ac      	cmp	r4, r5
 8001af6:	d0e1      	beq.n	8001abc <DMA_SetConfig+0x110>
 8001af8:	3514      	adds	r5, #20
 8001afa:	42ac      	cmp	r4, r5
 8001afc:	d0de      	beq.n	8001abc <DMA_SetConfig+0x110>
 8001afe:	3514      	adds	r5, #20
 8001b00:	42ac      	cmp	r4, r5
 8001b02:	d0db      	beq.n	8001abc <DMA_SetConfig+0x110>
 8001b04:	3514      	adds	r5, #20
 8001b06:	42ac      	cmp	r4, r5
 8001b08:	d0d8      	beq.n	8001abc <DMA_SetConfig+0x110>
 8001b0a:	3514      	adds	r5, #20
 8001b0c:	42ac      	cmp	r4, r5
 8001b0e:	d0d5      	beq.n	8001abc <DMA_SetConfig+0x110>
 8001b10:	3514      	adds	r5, #20
 8001b12:	42ac      	cmp	r4, r5
 8001b14:	d0d2      	beq.n	8001abc <DMA_SetConfig+0x110>
  }
  else
  {
    /* Nothing To Do */
  }
}
 8001b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8001b18:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8001b1a:	60e2      	str	r2, [r4, #12]
}
 8001b1c:	e7fb      	b.n	8001b16 <DMA_SetConfig+0x16a>
 8001b1e:	bf00      	nop
 8001b20:	40020028 	.word	0x40020028
 8001b24:	58025408 	.word	0x58025408
 8001b28:	5802541c 	.word	0x5802541c
 8001b2c:	40020010 	.word	0x40020010

08001b30 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b30:	6803      	ldr	r3, [r0, #0]
{
 8001b32:	4602      	mov	r2, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b34:	4923      	ldr	r1, [pc, #140]	@ (8001bc4 <DMA_CalcBaseAndBitshift+0x94>)
 8001b36:	428b      	cmp	r3, r1
{
 8001b38:	b510      	push	{r4, lr}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b3a:	d031      	beq.n	8001ba0 <DMA_CalcBaseAndBitshift+0x70>
 8001b3c:	3118      	adds	r1, #24
 8001b3e:	428b      	cmp	r3, r1
 8001b40:	d02e      	beq.n	8001ba0 <DMA_CalcBaseAndBitshift+0x70>
 8001b42:	3118      	adds	r1, #24
 8001b44:	428b      	cmp	r3, r1
 8001b46:	d02b      	beq.n	8001ba0 <DMA_CalcBaseAndBitshift+0x70>
 8001b48:	3118      	adds	r1, #24
 8001b4a:	428b      	cmp	r3, r1
 8001b4c:	d028      	beq.n	8001ba0 <DMA_CalcBaseAndBitshift+0x70>
 8001b4e:	3118      	adds	r1, #24
 8001b50:	428b      	cmp	r3, r1
 8001b52:	d025      	beq.n	8001ba0 <DMA_CalcBaseAndBitshift+0x70>
 8001b54:	3118      	adds	r1, #24
 8001b56:	428b      	cmp	r3, r1
 8001b58:	d022      	beq.n	8001ba0 <DMA_CalcBaseAndBitshift+0x70>
 8001b5a:	3118      	adds	r1, #24
 8001b5c:	428b      	cmp	r3, r1
 8001b5e:	d01f      	beq.n	8001ba0 <DMA_CalcBaseAndBitshift+0x70>
 8001b60:	3118      	adds	r1, #24
 8001b62:	428b      	cmp	r3, r1
 8001b64:	d01c      	beq.n	8001ba0 <DMA_CalcBaseAndBitshift+0x70>
 8001b66:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8001b6a:	428b      	cmp	r3, r1
 8001b6c:	d018      	beq.n	8001ba0 <DMA_CalcBaseAndBitshift+0x70>
 8001b6e:	3118      	adds	r1, #24
 8001b70:	428b      	cmp	r3, r1
 8001b72:	d015      	beq.n	8001ba0 <DMA_CalcBaseAndBitshift+0x70>
 8001b74:	3118      	adds	r1, #24
 8001b76:	428b      	cmp	r3, r1
 8001b78:	d012      	beq.n	8001ba0 <DMA_CalcBaseAndBitshift+0x70>
 8001b7a:	3118      	adds	r1, #24
 8001b7c:	428b      	cmp	r3, r1
 8001b7e:	d00f      	beq.n	8001ba0 <DMA_CalcBaseAndBitshift+0x70>
 8001b80:	3118      	adds	r1, #24
 8001b82:	428b      	cmp	r3, r1
 8001b84:	d00c      	beq.n	8001ba0 <DMA_CalcBaseAndBitshift+0x70>
 8001b86:	3118      	adds	r1, #24
 8001b88:	428b      	cmp	r3, r1
 8001b8a:	d009      	beq.n	8001ba0 <DMA_CalcBaseAndBitshift+0x70>
 8001b8c:	3118      	adds	r1, #24
 8001b8e:	428b      	cmp	r3, r1
 8001b90:	d006      	beq.n	8001ba0 <DMA_CalcBaseAndBitshift+0x70>
 8001b92:	3118      	adds	r1, #24
 8001b94:	428b      	cmp	r3, r1
 8001b96:	d003      	beq.n	8001ba0 <DMA_CalcBaseAndBitshift+0x70>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8001b98:	f023 00ff 	bic.w	r0, r3, #255	@ 0xff
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8001b9c:	6590      	str	r0, [r2, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
}
 8001b9e:	bd10      	pop	{r4, pc}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001ba0:	b2dc      	uxtb	r4, r3
 8001ba2:	2118      	movs	r1, #24
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8001ba4:	4808      	ldr	r0, [pc, #32]	@ (8001bc8 <DMA_CalcBaseAndBitshift+0x98>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001ba6:	3c10      	subs	r4, #16
 8001ba8:	fbb4 f1f1 	udiv	r1, r4, r1
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8001bac:	f001 0107 	and.w	r1, r1, #7
    if (stream_number > 3U)
 8001bb0:	2c5f      	cmp	r4, #95	@ 0x5f
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8001bb2:	5c41      	ldrb	r1, [r0, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8001bb4:	f423 707f 	bic.w	r0, r3, #1020	@ 0x3fc
 8001bb8:	f020 0003 	bic.w	r0, r0, #3
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8001bbc:	65d1      	str	r1, [r2, #92]	@ 0x5c
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8001bbe:	bf88      	it	hi
 8001bc0:	3004      	addhi	r0, #4
 8001bc2:	e7eb      	b.n	8001b9c <DMA_CalcBaseAndBitshift+0x6c>
 8001bc4:	40020010 	.word	0x40020010
 8001bc8:	0800ec95 	.word	0x0800ec95

08001bcc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8001bcc:	6802      	ldr	r2, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001bce:	4921      	ldr	r1, [pc, #132]	@ (8001c54 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001bd0:	b2d3      	uxtb	r3, r2
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001bd2:	428a      	cmp	r2, r1
 8001bd4:	d028      	beq.n	8001c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 8001bd6:	3114      	adds	r1, #20
 8001bd8:	428a      	cmp	r2, r1
 8001bda:	d025      	beq.n	8001c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 8001bdc:	3114      	adds	r1, #20
 8001bde:	428a      	cmp	r2, r1
 8001be0:	d022      	beq.n	8001c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 8001be2:	3114      	adds	r1, #20
 8001be4:	428a      	cmp	r2, r1
 8001be6:	d01f      	beq.n	8001c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 8001be8:	3114      	adds	r1, #20
 8001bea:	428a      	cmp	r2, r1
 8001bec:	d01c      	beq.n	8001c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 8001bee:	3114      	adds	r1, #20
 8001bf0:	428a      	cmp	r2, r1
 8001bf2:	d019      	beq.n	8001c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 8001bf4:	3114      	adds	r1, #20
 8001bf6:	428a      	cmp	r2, r1
 8001bf8:	d016      	beq.n	8001c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 8001bfa:	3114      	adds	r1, #20
 8001bfc:	428a      	cmp	r2, r1
 8001bfe:	d013      	beq.n	8001c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001c00:	2118      	movs	r1, #24
 8001c02:	3b10      	subs	r3, #16
 8001c04:	fbb3 f3f1 	udiv	r3, r3, r1

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8001c08:	4913      	ldr	r1, [pc, #76]	@ (8001c58 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8001c0a:	4411      	add	r1, r2
 8001c0c:	29a8      	cmp	r1, #168	@ 0xa8
 8001c0e:	d91e      	bls.n	8001c4e <DMA_CalcDMAMUXChannelBaseAndMask+0x82>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8001c10:	f103 5280 	add.w	r2, r3, #268435456	@ 0x10000000
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001c14:	2101      	movs	r1, #1
 8001c16:	f003 031f 	and.w	r3, r3, #31
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8001c1a:	f502 4202 	add.w	r2, r2, #33280	@ 0x8200
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c22:	490e      	ldr	r1, [pc, #56]	@ (8001c5c <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8001c24:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001c26:	e00e      	b.n	8001c46 <DMA_CalcDMAMUXChannelBaseAndMask+0x7a>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8001c28:	2214      	movs	r2, #20
 8001c2a:	3b08      	subs	r3, #8
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001c2c:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8001c2e:	fbb3 f3f2 	udiv	r3, r3, r2
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001c32:	f103 52b0 	add.w	r2, r3, #369098752	@ 0x16000000
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001c36:	f003 031f 	and.w	r3, r3, #31
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001c3a:	f502 4216 	add.w	r2, r2, #38400	@ 0x9600
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c42:	4907      	ldr	r1, [pc, #28]	@ (8001c60 <DMA_CalcDMAMUXChannelBaseAndMask+0x94>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001c44:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001c46:	6683      	str	r3, [r0, #104]	@ 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8001c48:	e9c0 2118 	strd	r2, r1, [r0, #96]	@ 0x60
  }
}
 8001c4c:	4770      	bx	lr
      stream_number += 8U;
 8001c4e:	3308      	adds	r3, #8
 8001c50:	e7de      	b.n	8001c10 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>
 8001c52:	bf00      	nop
 8001c54:	58025408 	.word	0x58025408
 8001c58:	bffdfbf0 	.word	0xbffdfbf0
 8001c5c:	40020880 	.word	0x40020880
 8001c60:	58025880 	.word	0x58025880

08001c64 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001c64:	7902      	ldrb	r2, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8001c66:	1e51      	subs	r1, r2, #1
 8001c68:	2907      	cmp	r1, #7
{
 8001c6a:	b510      	push	{r4, lr}
  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8001c6c:	d821      	bhi.n	8001cb2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4e>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001c6e:	6803      	ldr	r3, [r0, #0]
 8001c70:	4c13      	ldr	r4, [pc, #76]	@ (8001cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x5c>)
 8001c72:	42a3      	cmp	r3, r4
 8001c74:	d01e      	beq.n	8001cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8001c76:	3414      	adds	r4, #20
 8001c78:	42a3      	cmp	r3, r4
 8001c7a:	d01b      	beq.n	8001cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8001c7c:	3414      	adds	r4, #20
 8001c7e:	42a3      	cmp	r3, r4
 8001c80:	d018      	beq.n	8001cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8001c82:	3414      	adds	r4, #20
 8001c84:	42a3      	cmp	r3, r4
 8001c86:	d015      	beq.n	8001cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8001c88:	3414      	adds	r4, #20
 8001c8a:	42a3      	cmp	r3, r4
 8001c8c:	d012      	beq.n	8001cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8001c8e:	3414      	adds	r4, #20
 8001c90:	42a3      	cmp	r3, r4
 8001c92:	d00f      	beq.n	8001cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8001c94:	3414      	adds	r4, #20
 8001c96:	42a3      	cmp	r3, r4
 8001c98:	d00c      	beq.n	8001cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8001c9a:	3414      	adds	r4, #20
 8001c9c:	42a3      	cmp	r3, r4
 8001c9e:	d009      	beq.n	8001cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001ca0:	4b08      	ldr	r3, [pc, #32]	@ (8001cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x60>)
 8001ca2:	4413      	add	r3, r2
 8001ca4:	4a08      	ldr	r2, [pc, #32]	@ (8001cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x64>)
 8001ca6:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8001ca8:	e9c0 321b 	strd	r3, r2, [r0, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8001cac:	2301      	movs	r3, #1
 8001cae:	408b      	lsls	r3, r1
 8001cb0:	6743      	str	r3, [r0, #116]	@ 0x74
  }
}
 8001cb2:	bd10      	pop	{r4, pc}
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8001cb4:	4b05      	ldr	r3, [pc, #20]	@ (8001ccc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>)
 8001cb6:	4413      	add	r3, r2
 8001cb8:	4a05      	ldr	r2, [pc, #20]	@ (8001cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>)
 8001cba:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8001cbc:	e7f4      	b.n	8001ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>
 8001cbe:	bf00      	nop
 8001cc0:	58025408 	.word	0x58025408
 8001cc4:	1000823f 	.word	0x1000823f
 8001cc8:	40020940 	.word	0x40020940
 8001ccc:	1600963f 	.word	0x1600963f
 8001cd0:	58025940 	.word	0x58025940

08001cd4 <HAL_DMA_Init>:
{
 8001cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cd6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001cd8:	f7ff fbf8 	bl	80014cc <HAL_GetTick>
 8001cdc:	4606      	mov	r6, r0
  if(hdma == NULL)
 8001cde:	2c00      	cmp	r4, #0
 8001ce0:	f000 80ee 	beq.w	8001ec0 <HAL_DMA_Init+0x1ec>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ce4:	6823      	ldr	r3, [r4, #0]
 8001ce6:	4d83      	ldr	r5, [pc, #524]	@ (8001ef4 <HAL_DMA_Init+0x220>)
 8001ce8:	42ab      	cmp	r3, r5
 8001cea:	d06a      	beq.n	8001dc2 <HAL_DMA_Init+0xee>
 8001cec:	4a82      	ldr	r2, [pc, #520]	@ (8001ef8 <HAL_DMA_Init+0x224>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d067      	beq.n	8001dc2 <HAL_DMA_Init+0xee>
 8001cf2:	3218      	adds	r2, #24
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d064      	beq.n	8001dc2 <HAL_DMA_Init+0xee>
 8001cf8:	3218      	adds	r2, #24
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d061      	beq.n	8001dc2 <HAL_DMA_Init+0xee>
 8001cfe:	3218      	adds	r2, #24
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d05e      	beq.n	8001dc2 <HAL_DMA_Init+0xee>
 8001d04:	3218      	adds	r2, #24
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d05b      	beq.n	8001dc2 <HAL_DMA_Init+0xee>
 8001d0a:	3218      	adds	r2, #24
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d058      	beq.n	8001dc2 <HAL_DMA_Init+0xee>
 8001d10:	3218      	adds	r2, #24
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d055      	beq.n	8001dc2 <HAL_DMA_Init+0xee>
 8001d16:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d051      	beq.n	8001dc2 <HAL_DMA_Init+0xee>
 8001d1e:	3218      	adds	r2, #24
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d04e      	beq.n	8001dc2 <HAL_DMA_Init+0xee>
 8001d24:	3218      	adds	r2, #24
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d04b      	beq.n	8001dc2 <HAL_DMA_Init+0xee>
 8001d2a:	3218      	adds	r2, #24
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d048      	beq.n	8001dc2 <HAL_DMA_Init+0xee>
 8001d30:	3218      	adds	r2, #24
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d045      	beq.n	8001dc2 <HAL_DMA_Init+0xee>
 8001d36:	3218      	adds	r2, #24
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d042      	beq.n	8001dc2 <HAL_DMA_Init+0xee>
 8001d3c:	3218      	adds	r2, #24
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d03f      	beq.n	8001dc2 <HAL_DMA_Init+0xee>
 8001d42:	3218      	adds	r2, #24
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d03c      	beq.n	8001dc2 <HAL_DMA_Init+0xee>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001d48:	4a6c      	ldr	r2, [pc, #432]	@ (8001efc <HAL_DMA_Init+0x228>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	f040 8157 	bne.w	8001ffe <HAL_DMA_Init+0x32a>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d50:	2202      	movs	r2, #2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d52:	68a1      	ldr	r1, [r4, #8]
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d54:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8001d58:	2200      	movs	r2, #0
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d5a:	2940      	cmp	r1, #64	@ 0x40
    __HAL_UNLOCK(hdma);
 8001d5c:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001d60:	6818      	ldr	r0, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001d62:	f420 30ff 	bic.w	r0, r0, #130560	@ 0x1fe00
 8001d66:	f420 70f8 	bic.w	r0, r0, #496	@ 0x1f0
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d6a:	f000 8166 	beq.w	800203a <HAL_DMA_Init+0x366>
 8001d6e:	f1a1 0280 	sub.w	r2, r1, #128	@ 0x80
 8001d72:	4251      	negs	r1, r2
 8001d74:	4151      	adcs	r1, r2
 8001d76:	0389      	lsls	r1, r1, #14
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001d78:	e9d4 6203 	ldrd	r6, r2, [r4, #12]
 8001d7c:	08d2      	lsrs	r2, r2, #3
 8001d7e:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001d82:	6966      	ldr	r6, [r4, #20]
 8001d84:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001d88:	69a6      	ldr	r6, [r4, #24]
 8001d8a:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001d8e:	69e6      	ldr	r6, [r4, #28]
 8001d90:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001d94:	6a26      	ldr	r6, [r4, #32]
 8001d96:	ea42 1216 	orr.w	r2, r2, r6, lsr #4
 8001d9a:	4302      	orrs	r2, r0
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d9c:	4620      	mov	r0, r4
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d9e:	4311      	orrs	r1, r2
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001da0:	4a57      	ldr	r2, [pc, #348]	@ (8001f00 <HAL_DMA_Init+0x22c>)
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001da2:	6019      	str	r1, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001da4:	441a      	add	r2, r3
 8001da6:	2314      	movs	r3, #20
 8001da8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dac:	0092      	lsls	r2, r2, #2
 8001dae:	65e2      	str	r2, [r4, #92]	@ 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001db0:	f7ff febe 	bl	8001b30 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001db4:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001db6:	f003 021f 	and.w	r2, r3, #31
 8001dba:	2301      	movs	r3, #1
 8001dbc:	4093      	lsls	r3, r2
 8001dbe:	6043      	str	r3, [r0, #4]
 8001dc0:	e0b4      	b.n	8001f2c <HAL_DMA_Init+0x258>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dc2:	2202      	movs	r2, #2
    __HAL_DMA_DISABLE(hdma);
 8001dc4:	42ab      	cmp	r3, r5
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dc6:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8001dca:	f04f 0200 	mov.w	r2, #0
 8001dce:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
    __HAL_DMA_DISABLE(hdma);
 8001dd2:	d01e      	beq.n	8001e12 <HAL_DMA_Init+0x13e>
 8001dd4:	4a48      	ldr	r2, [pc, #288]	@ (8001ef8 <HAL_DMA_Init+0x224>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d01b      	beq.n	8001e12 <HAL_DMA_Init+0x13e>
 8001dda:	3218      	adds	r2, #24
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d018      	beq.n	8001e12 <HAL_DMA_Init+0x13e>
 8001de0:	3218      	adds	r2, #24
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d015      	beq.n	8001e12 <HAL_DMA_Init+0x13e>
 8001de6:	3218      	adds	r2, #24
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d012      	beq.n	8001e12 <HAL_DMA_Init+0x13e>
 8001dec:	3218      	adds	r2, #24
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d00f      	beq.n	8001e12 <HAL_DMA_Init+0x13e>
 8001df2:	3218      	adds	r2, #24
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d00c      	beq.n	8001e12 <HAL_DMA_Init+0x13e>
 8001df8:	3218      	adds	r2, #24
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d009      	beq.n	8001e12 <HAL_DMA_Init+0x13e>
 8001dfe:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d005      	beq.n	8001e12 <HAL_DMA_Init+0x13e>
 8001e06:	3218      	adds	r2, #24
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d002      	beq.n	8001e12 <HAL_DMA_Init+0x13e>
 8001e0c:	3218      	adds	r2, #24
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d0ff      	beq.n	8001e12 <HAL_DMA_Init+0x13e>
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	f022 0201 	bic.w	r2, r2, #1
 8001e18:	601a      	str	r2, [r3, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001e1a:	6822      	ldr	r2, [r4, #0]
 8001e1c:	6813      	ldr	r3, [r2, #0]
 8001e1e:	07df      	lsls	r7, r3, #31
 8001e20:	d444      	bmi.n	8001eac <HAL_DMA_Init+0x1d8>
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001e22:	6813      	ldr	r3, [r2, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e24:	4837      	ldr	r0, [pc, #220]	@ (8001f04 <HAL_DMA_Init+0x230>)
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e26:	69a1      	ldr	r1, [r4, #24]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e28:	4018      	ands	r0, r3
    registerValue |=  hdma->Init.Direction           |
 8001e2a:	e9d4 3602 	ldrd	r3, r6, [r4, #8]
 8001e2e:	4333      	orrs	r3, r6
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e30:	6926      	ldr	r6, [r4, #16]
 8001e32:	4333      	orrs	r3, r6
 8001e34:	6966      	ldr	r6, [r4, #20]
 8001e36:	4333      	orrs	r3, r6
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e38:	69e6      	ldr	r6, [r4, #28]
 8001e3a:	430b      	orrs	r3, r1
 8001e3c:	4333      	orrs	r3, r6
            hdma->Init.Mode                | hdma->Init.Priority;
 8001e3e:	6a26      	ldr	r6, [r4, #32]
 8001e40:	4333      	orrs	r3, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e42:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8001e44:	2e04      	cmp	r6, #4
    registerValue |=  hdma->Init.Direction           |
 8001e46:	ea43 0300 	orr.w	r3, r3, r0
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e4a:	bf02      	ittt	eq
 8001e4c:	e9d4 070b 	ldrdeq	r0, r7, [r4, #44]	@ 0x2c
 8001e50:	4338      	orreq	r0, r7
 8001e52:	4303      	orreq	r3, r0
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001e54:	482c      	ldr	r0, [pc, #176]	@ (8001f08 <HAL_DMA_Init+0x234>)
 8001e56:	6800      	ldr	r0, [r0, #0]
 8001e58:	0c00      	lsrs	r0, r0, #16
 8001e5a:	0400      	lsls	r0, r0, #16
 8001e5c:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 8001e60:	d30e      	bcc.n	8001e80 <HAL_DMA_Init+0x1ac>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001e62:	6860      	ldr	r0, [r4, #4]
 8001e64:	f1a0 0729 	sub.w	r7, r0, #41	@ 0x29
 8001e68:	2f05      	cmp	r7, #5
 8001e6a:	d907      	bls.n	8001e7c <HAL_DMA_Init+0x1a8>
 8001e6c:	383f      	subs	r0, #63	@ 0x3f
 8001e6e:	2813      	cmp	r0, #19
 8001e70:	d806      	bhi.n	8001e80 <HAL_DMA_Init+0x1ac>
 8001e72:	4f26      	ldr	r7, [pc, #152]	@ (8001f0c <HAL_DMA_Init+0x238>)
 8001e74:	fa27 f000 	lsr.w	r0, r7, r0
 8001e78:	07c0      	lsls	r0, r0, #31
 8001e7a:	d501      	bpl.n	8001e80 <HAL_DMA_Init+0x1ac>
        registerValue |= DMA_SxCR_TRBUFF;
 8001e7c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001e80:	6013      	str	r3, [r2, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e82:	2e04      	cmp	r6, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001e84:	6953      	ldr	r3, [r2, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e86:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8001e8a:	ea43 0306 	orr.w	r3, r3, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e8e:	d143      	bne.n	8001f18 <HAL_DMA_Init+0x244>
      registerValue |= hdma->Init.FIFOThreshold;
 8001e90:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 8001e94:	4303      	orrs	r3, r0
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e96:	2e00      	cmp	r6, #0
 8001e98:	d03e      	beq.n	8001f18 <HAL_DMA_Init+0x244>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e9a:	b999      	cbnz	r1, 8001ec4 <HAL_DMA_Init+0x1f0>
    switch (hdma->Init.FIFOThreshold)
 8001e9c:	2801      	cmp	r0, #1
 8001e9e:	d021      	beq.n	8001ee4 <HAL_DMA_Init+0x210>
 8001ea0:	f030 0102 	bics.w	r1, r0, #2
 8001ea4:	d138      	bne.n	8001f18 <HAL_DMA_Init+0x244>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ea6:	01f1      	lsls	r1, r6, #7
 8001ea8:	d536      	bpl.n	8001f18 <HAL_DMA_Init+0x244>
 8001eaa:	e01e      	b.n	8001eea <HAL_DMA_Init+0x216>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001eac:	f7ff fb0e 	bl	80014cc <HAL_GetTick>
 8001eb0:	1b80      	subs	r0, r0, r6
 8001eb2:	2805      	cmp	r0, #5
 8001eb4:	d9b1      	bls.n	8001e1a <HAL_DMA_Init+0x146>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001eb6:	2320      	movs	r3, #32
 8001eb8:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 8001ec0:	2001      	movs	r0, #1
}
 8001ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ec4:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8001ec8:	d122      	bne.n	8001f10 <HAL_DMA_Init+0x23c>
    switch (hdma->Init.FIFOThreshold)
 8001eca:	2803      	cmp	r0, #3
 8001ecc:	d824      	bhi.n	8001f18 <HAL_DMA_Init+0x244>
 8001ece:	a101      	add	r1, pc, #4	@ (adr r1, 8001ed4 <HAL_DMA_Init+0x200>)
 8001ed0:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 8001ed4:	08001eeb 	.word	0x08001eeb
 8001ed8:	08001ea7 	.word	0x08001ea7
 8001edc:	08001eeb 	.word	0x08001eeb
 8001ee0:	08001ee5 	.word	0x08001ee5
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ee4:	f1b6 7fc0 	cmp.w	r6, #25165824	@ 0x1800000
 8001ee8:	d116      	bne.n	8001f18 <HAL_DMA_Init+0x244>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001eea:	2340      	movs	r3, #64	@ 0x40
 8001eec:	6563      	str	r3, [r4, #84]	@ 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e7e4      	b.n	8001ebc <HAL_DMA_Init+0x1e8>
 8001ef2:	bf00      	nop
 8001ef4:	40020010 	.word	0x40020010
 8001ef8:	40020028 	.word	0x40020028
 8001efc:	58025408 	.word	0x58025408
 8001f00:	a7fdabf8 	.word	0xa7fdabf8
 8001f04:	fe10803f 	.word	0xfe10803f
 8001f08:	5c001000 	.word	0x5c001000
 8001f0c:	000f030f 	.word	0x000f030f
    switch (hdma->Init.FIFOThreshold)
 8001f10:	2802      	cmp	r0, #2
 8001f12:	d9ea      	bls.n	8001eea <HAL_DMA_Init+0x216>
 8001f14:	2803      	cmp	r0, #3
 8001f16:	d0c6      	beq.n	8001ea6 <HAL_DMA_Init+0x1d2>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001f18:	6153      	str	r3, [r2, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f1a:	4620      	mov	r0, r4
 8001f1c:	f7ff fe08 	bl	8001b30 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001f20:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001f22:	f003 021f 	and.w	r2, r3, #31
 8001f26:	233f      	movs	r3, #63	@ 0x3f
 8001f28:	4093      	lsls	r3, r2
 8001f2a:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f2c:	6823      	ldr	r3, [r4, #0]
 8001f2e:	42ab      	cmp	r3, r5
 8001f30:	d045      	beq.n	8001fbe <HAL_DMA_Init+0x2ea>
 8001f32:	4a45      	ldr	r2, [pc, #276]	@ (8002048 <HAL_DMA_Init+0x374>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d042      	beq.n	8001fbe <HAL_DMA_Init+0x2ea>
 8001f38:	3218      	adds	r2, #24
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d03f      	beq.n	8001fbe <HAL_DMA_Init+0x2ea>
 8001f3e:	3218      	adds	r2, #24
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d03c      	beq.n	8001fbe <HAL_DMA_Init+0x2ea>
 8001f44:	3218      	adds	r2, #24
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d039      	beq.n	8001fbe <HAL_DMA_Init+0x2ea>
 8001f4a:	3218      	adds	r2, #24
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d036      	beq.n	8001fbe <HAL_DMA_Init+0x2ea>
 8001f50:	3218      	adds	r2, #24
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d033      	beq.n	8001fbe <HAL_DMA_Init+0x2ea>
 8001f56:	3218      	adds	r2, #24
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d030      	beq.n	8001fbe <HAL_DMA_Init+0x2ea>
 8001f5c:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d02c      	beq.n	8001fbe <HAL_DMA_Init+0x2ea>
 8001f64:	3218      	adds	r2, #24
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d029      	beq.n	8001fbe <HAL_DMA_Init+0x2ea>
 8001f6a:	3218      	adds	r2, #24
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d026      	beq.n	8001fbe <HAL_DMA_Init+0x2ea>
 8001f70:	3218      	adds	r2, #24
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d023      	beq.n	8001fbe <HAL_DMA_Init+0x2ea>
 8001f76:	3218      	adds	r2, #24
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d020      	beq.n	8001fbe <HAL_DMA_Init+0x2ea>
 8001f7c:	3218      	adds	r2, #24
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d01d      	beq.n	8001fbe <HAL_DMA_Init+0x2ea>
 8001f82:	3218      	adds	r2, #24
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d01a      	beq.n	8001fbe <HAL_DMA_Init+0x2ea>
 8001f88:	3218      	adds	r2, #24
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d017      	beq.n	8001fbe <HAL_DMA_Init+0x2ea>
 8001f8e:	4a2f      	ldr	r2, [pc, #188]	@ (800204c <HAL_DMA_Init+0x378>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d014      	beq.n	8001fbe <HAL_DMA_Init+0x2ea>
 8001f94:	3214      	adds	r2, #20
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d011      	beq.n	8001fbe <HAL_DMA_Init+0x2ea>
 8001f9a:	3214      	adds	r2, #20
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d00e      	beq.n	8001fbe <HAL_DMA_Init+0x2ea>
 8001fa0:	3214      	adds	r2, #20
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d00b      	beq.n	8001fbe <HAL_DMA_Init+0x2ea>
 8001fa6:	3214      	adds	r2, #20
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d008      	beq.n	8001fbe <HAL_DMA_Init+0x2ea>
 8001fac:	3214      	adds	r2, #20
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d005      	beq.n	8001fbe <HAL_DMA_Init+0x2ea>
 8001fb2:	3214      	adds	r2, #20
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d002      	beq.n	8001fbe <HAL_DMA_Init+0x2ea>
 8001fb8:	3214      	adds	r2, #20
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d119      	bne.n	8001ff2 <HAL_DMA_Init+0x31e>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001fbe:	4620      	mov	r0, r4
 8001fc0:	2500      	movs	r5, #0
 8001fc2:	f7ff fe03 	bl	8001bcc <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001fc6:	68a3      	ldr	r3, [r4, #8]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001fc8:	6e22      	ldr	r2, [r4, #96]	@ 0x60
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001fca:	2b80      	cmp	r3, #128	@ 0x80
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001fcc:	bf04      	itt	eq
 8001fce:	2300      	moveq	r3, #0
 8001fd0:	6063      	streq	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001fd2:	6863      	ldr	r3, [r4, #4]
 8001fd4:	b2d9      	uxtb	r1, r3
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001fd6:	3b01      	subs	r3, #1
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001fd8:	6011      	str	r1, [r2, #0]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001fda:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fdc:	e9d4 2119 	ldrd	r2, r1, [r4, #100]	@ 0x64
 8001fe0:	6051      	str	r1, [r2, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001fe2:	d82c      	bhi.n	800203e <HAL_DMA_Init+0x36a>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001fe4:	f7ff fe3e 	bl	8001c64 <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001fe8:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8001fea:	601d      	str	r5, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001fec:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	@ 0x70
 8001ff0:	605a      	str	r2, [r3, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ff2:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001ff4:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ff6:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001ff8:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8001ffc:	e761      	b.n	8001ec2 <HAL_DMA_Init+0x1ee>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001ffe:	4a14      	ldr	r2, [pc, #80]	@ (8002050 <HAL_DMA_Init+0x37c>)
 8002000:	4293      	cmp	r3, r2
 8002002:	f43f aea5 	beq.w	8001d50 <HAL_DMA_Init+0x7c>
 8002006:	3214      	adds	r2, #20
 8002008:	4293      	cmp	r3, r2
 800200a:	f43f aea1 	beq.w	8001d50 <HAL_DMA_Init+0x7c>
 800200e:	3214      	adds	r2, #20
 8002010:	4293      	cmp	r3, r2
 8002012:	f43f ae9d 	beq.w	8001d50 <HAL_DMA_Init+0x7c>
 8002016:	3214      	adds	r2, #20
 8002018:	4293      	cmp	r3, r2
 800201a:	f43f ae99 	beq.w	8001d50 <HAL_DMA_Init+0x7c>
 800201e:	3214      	adds	r2, #20
 8002020:	4293      	cmp	r3, r2
 8002022:	f43f ae95 	beq.w	8001d50 <HAL_DMA_Init+0x7c>
 8002026:	3214      	adds	r2, #20
 8002028:	4293      	cmp	r3, r2
 800202a:	f43f ae91 	beq.w	8001d50 <HAL_DMA_Init+0x7c>
 800202e:	3214      	adds	r2, #20
 8002030:	4293      	cmp	r3, r2
 8002032:	f43f ae8d 	beq.w	8001d50 <HAL_DMA_Init+0x7c>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002036:	2340      	movs	r3, #64	@ 0x40
 8002038:	e73e      	b.n	8001eb8 <HAL_DMA_Init+0x1e4>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800203a:	2110      	movs	r1, #16
 800203c:	e69c      	b.n	8001d78 <HAL_DMA_Init+0xa4>
      hdma->DMAmuxRequestGenStatus = 0U;
 800203e:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002042:	6765      	str	r5, [r4, #116]	@ 0x74
 8002044:	e7d5      	b.n	8001ff2 <HAL_DMA_Init+0x31e>
 8002046:	bf00      	nop
 8002048:	40020028 	.word	0x40020028
 800204c:	58025408 	.word	0x58025408
 8002050:	5802541c 	.word	0x5802541c

08002054 <HAL_DMA_Start_IT>:
{
 8002054:	b570      	push	{r4, r5, r6, lr}
  if(hdma == NULL)
 8002056:	2800      	cmp	r0, #0
 8002058:	f000 810a 	beq.w	8002270 <HAL_DMA_Start_IT+0x21c>
  __HAL_LOCK(hdma);
 800205c:	f890 4034 	ldrb.w	r4, [r0, #52]	@ 0x34
 8002060:	2c01      	cmp	r4, #1
 8002062:	f000 8107 	beq.w	8002274 <HAL_DMA_Start_IT+0x220>
 8002066:	2401      	movs	r4, #1
 8002068:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800206c:	f890 4035 	ldrb.w	r4, [r0, #53]	@ 0x35
 8002070:	2c01      	cmp	r4, #1
 8002072:	f04f 0400 	mov.w	r4, #0
 8002076:	f040 80f6 	bne.w	8002266 <HAL_DMA_Start_IT+0x212>
    hdma->State = HAL_DMA_STATE_BUSY;
 800207a:	2502      	movs	r5, #2
 800207c:	f880 5035 	strb.w	r5, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 8002080:	4d7d      	ldr	r5, [pc, #500]	@ (8002278 <HAL_DMA_Start_IT+0x224>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002082:	6544      	str	r4, [r0, #84]	@ 0x54
    __HAL_DMA_DISABLE(hdma);
 8002084:	6804      	ldr	r4, [r0, #0]
 8002086:	42ac      	cmp	r4, r5
 8002088:	d01e      	beq.n	80020c8 <HAL_DMA_Start_IT+0x74>
 800208a:	4e7c      	ldr	r6, [pc, #496]	@ (800227c <HAL_DMA_Start_IT+0x228>)
 800208c:	42b4      	cmp	r4, r6
 800208e:	d01b      	beq.n	80020c8 <HAL_DMA_Start_IT+0x74>
 8002090:	3618      	adds	r6, #24
 8002092:	42b4      	cmp	r4, r6
 8002094:	d018      	beq.n	80020c8 <HAL_DMA_Start_IT+0x74>
 8002096:	3618      	adds	r6, #24
 8002098:	42b4      	cmp	r4, r6
 800209a:	d015      	beq.n	80020c8 <HAL_DMA_Start_IT+0x74>
 800209c:	3618      	adds	r6, #24
 800209e:	42b4      	cmp	r4, r6
 80020a0:	d012      	beq.n	80020c8 <HAL_DMA_Start_IT+0x74>
 80020a2:	3618      	adds	r6, #24
 80020a4:	42b4      	cmp	r4, r6
 80020a6:	d00f      	beq.n	80020c8 <HAL_DMA_Start_IT+0x74>
 80020a8:	3618      	adds	r6, #24
 80020aa:	42b4      	cmp	r4, r6
 80020ac:	d00c      	beq.n	80020c8 <HAL_DMA_Start_IT+0x74>
 80020ae:	3618      	adds	r6, #24
 80020b0:	42b4      	cmp	r4, r6
 80020b2:	d009      	beq.n	80020c8 <HAL_DMA_Start_IT+0x74>
 80020b4:	f506 7656 	add.w	r6, r6, #856	@ 0x358
 80020b8:	42b4      	cmp	r4, r6
 80020ba:	d005      	beq.n	80020c8 <HAL_DMA_Start_IT+0x74>
 80020bc:	3618      	adds	r6, #24
 80020be:	42b4      	cmp	r4, r6
 80020c0:	d002      	beq.n	80020c8 <HAL_DMA_Start_IT+0x74>
 80020c2:	3618      	adds	r6, #24
 80020c4:	42b4      	cmp	r4, r6
 80020c6:	d0ff      	beq.n	80020c8 <HAL_DMA_Start_IT+0x74>
 80020c8:	6826      	ldr	r6, [r4, #0]
 80020ca:	f026 0601 	bic.w	r6, r6, #1
 80020ce:	6026      	str	r6, [r4, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020d0:	f7ff fc6c 	bl	80019ac <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80020d4:	42ac      	cmp	r4, r5
 80020d6:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80020d8:	d053      	beq.n	8002182 <HAL_DMA_Start_IT+0x12e>
 80020da:	4b68      	ldr	r3, [pc, #416]	@ (800227c <HAL_DMA_Start_IT+0x228>)
 80020dc:	429c      	cmp	r4, r3
 80020de:	d050      	beq.n	8002182 <HAL_DMA_Start_IT+0x12e>
 80020e0:	3318      	adds	r3, #24
 80020e2:	429c      	cmp	r4, r3
 80020e4:	d04d      	beq.n	8002182 <HAL_DMA_Start_IT+0x12e>
 80020e6:	3318      	adds	r3, #24
 80020e8:	429c      	cmp	r4, r3
 80020ea:	d04a      	beq.n	8002182 <HAL_DMA_Start_IT+0x12e>
 80020ec:	3318      	adds	r3, #24
 80020ee:	429c      	cmp	r4, r3
 80020f0:	d047      	beq.n	8002182 <HAL_DMA_Start_IT+0x12e>
 80020f2:	3318      	adds	r3, #24
 80020f4:	429c      	cmp	r4, r3
 80020f6:	d044      	beq.n	8002182 <HAL_DMA_Start_IT+0x12e>
 80020f8:	3318      	adds	r3, #24
 80020fa:	429c      	cmp	r4, r3
 80020fc:	d041      	beq.n	8002182 <HAL_DMA_Start_IT+0x12e>
 80020fe:	3318      	adds	r3, #24
 8002100:	429c      	cmp	r4, r3
 8002102:	d03e      	beq.n	8002182 <HAL_DMA_Start_IT+0x12e>
 8002104:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8002108:	429c      	cmp	r4, r3
 800210a:	d03a      	beq.n	8002182 <HAL_DMA_Start_IT+0x12e>
 800210c:	3318      	adds	r3, #24
 800210e:	429c      	cmp	r4, r3
 8002110:	d037      	beq.n	8002182 <HAL_DMA_Start_IT+0x12e>
 8002112:	3318      	adds	r3, #24
 8002114:	429c      	cmp	r4, r3
 8002116:	d034      	beq.n	8002182 <HAL_DMA_Start_IT+0x12e>
 8002118:	3318      	adds	r3, #24
 800211a:	429c      	cmp	r4, r3
 800211c:	d031      	beq.n	8002182 <HAL_DMA_Start_IT+0x12e>
 800211e:	3318      	adds	r3, #24
 8002120:	429c      	cmp	r4, r3
 8002122:	d02e      	beq.n	8002182 <HAL_DMA_Start_IT+0x12e>
 8002124:	3318      	adds	r3, #24
 8002126:	429c      	cmp	r4, r3
 8002128:	d02b      	beq.n	8002182 <HAL_DMA_Start_IT+0x12e>
 800212a:	3318      	adds	r3, #24
 800212c:	429c      	cmp	r4, r3
 800212e:	d028      	beq.n	8002182 <HAL_DMA_Start_IT+0x12e>
 8002130:	3318      	adds	r3, #24
 8002132:	429c      	cmp	r4, r3
 8002134:	d025      	beq.n	8002182 <HAL_DMA_Start_IT+0x12e>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002136:	6823      	ldr	r3, [r4, #0]
 8002138:	f023 030e 	bic.w	r3, r3, #14
 800213c:	f043 030a 	orr.w	r3, r3, #10
 8002140:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8002142:	2a00      	cmp	r2, #0
 8002144:	d156      	bne.n	80021f4 <HAL_DMA_Start_IT+0x1a0>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002146:	4b4e      	ldr	r3, [pc, #312]	@ (8002280 <HAL_DMA_Start_IT+0x22c>)
 8002148:	429c      	cmp	r4, r3
 800214a:	d027      	beq.n	800219c <HAL_DMA_Start_IT+0x148>
 800214c:	4b4d      	ldr	r3, [pc, #308]	@ (8002284 <HAL_DMA_Start_IT+0x230>)
 800214e:	429c      	cmp	r4, r3
 8002150:	d024      	beq.n	800219c <HAL_DMA_Start_IT+0x148>
 8002152:	3314      	adds	r3, #20
 8002154:	429c      	cmp	r4, r3
 8002156:	d021      	beq.n	800219c <HAL_DMA_Start_IT+0x148>
 8002158:	3314      	adds	r3, #20
 800215a:	429c      	cmp	r4, r3
 800215c:	d01e      	beq.n	800219c <HAL_DMA_Start_IT+0x148>
 800215e:	3314      	adds	r3, #20
 8002160:	429c      	cmp	r4, r3
 8002162:	d01b      	beq.n	800219c <HAL_DMA_Start_IT+0x148>
 8002164:	3314      	adds	r3, #20
 8002166:	429c      	cmp	r4, r3
 8002168:	d018      	beq.n	800219c <HAL_DMA_Start_IT+0x148>
 800216a:	3314      	adds	r3, #20
 800216c:	429c      	cmp	r4, r3
 800216e:	d015      	beq.n	800219c <HAL_DMA_Start_IT+0x148>
 8002170:	3314      	adds	r3, #20
 8002172:	429c      	cmp	r4, r3
 8002174:	d012      	beq.n	800219c <HAL_DMA_Start_IT+0x148>
    __HAL_DMA_ENABLE(hdma);
 8002176:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002178:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800217a:	f043 0301 	orr.w	r3, r3, #1
 800217e:	6023      	str	r3, [r4, #0]
}
 8002180:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002182:	6823      	ldr	r3, [r4, #0]
 8002184:	f023 031e 	bic.w	r3, r3, #30
 8002188:	f043 0316 	orr.w	r3, r3, #22
 800218c:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800218e:	b11a      	cbz	r2, 8002198 <HAL_DMA_Start_IT+0x144>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002190:	6823      	ldr	r3, [r4, #0]
 8002192:	f043 0308 	orr.w	r3, r3, #8
 8002196:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002198:	42ac      	cmp	r4, r5
 800219a:	d130      	bne.n	80021fe <HAL_DMA_Start_IT+0x1aa>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800219c:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	03d2      	lsls	r2, r2, #15
 80021a2:	d45b      	bmi.n	800225c <HAL_DMA_Start_IT+0x208>
      if(hdma->DMAmuxRequestGen != 0U)
 80021a4:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80021a6:	b11b      	cbz	r3, 80021b0 <HAL_DMA_Start_IT+0x15c>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021ae:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80021b0:	42ac      	cmp	r4, r5
 80021b2:	d0e0      	beq.n	8002176 <HAL_DMA_Start_IT+0x122>
 80021b4:	4b31      	ldr	r3, [pc, #196]	@ (800227c <HAL_DMA_Start_IT+0x228>)
 80021b6:	429c      	cmp	r4, r3
 80021b8:	d0dd      	beq.n	8002176 <HAL_DMA_Start_IT+0x122>
 80021ba:	3318      	adds	r3, #24
 80021bc:	429c      	cmp	r4, r3
 80021be:	d0da      	beq.n	8002176 <HAL_DMA_Start_IT+0x122>
 80021c0:	3318      	adds	r3, #24
 80021c2:	429c      	cmp	r4, r3
 80021c4:	d0d7      	beq.n	8002176 <HAL_DMA_Start_IT+0x122>
 80021c6:	3318      	adds	r3, #24
 80021c8:	429c      	cmp	r4, r3
 80021ca:	d0d4      	beq.n	8002176 <HAL_DMA_Start_IT+0x122>
 80021cc:	3318      	adds	r3, #24
 80021ce:	429c      	cmp	r4, r3
 80021d0:	d0d1      	beq.n	8002176 <HAL_DMA_Start_IT+0x122>
 80021d2:	3318      	adds	r3, #24
 80021d4:	429c      	cmp	r4, r3
 80021d6:	d0ce      	beq.n	8002176 <HAL_DMA_Start_IT+0x122>
 80021d8:	3318      	adds	r3, #24
 80021da:	429c      	cmp	r4, r3
 80021dc:	d0cb      	beq.n	8002176 <HAL_DMA_Start_IT+0x122>
 80021de:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80021e2:	429c      	cmp	r4, r3
 80021e4:	d0c7      	beq.n	8002176 <HAL_DMA_Start_IT+0x122>
 80021e6:	3318      	adds	r3, #24
 80021e8:	429c      	cmp	r4, r3
 80021ea:	d0c4      	beq.n	8002176 <HAL_DMA_Start_IT+0x122>
 80021ec:	3318      	adds	r3, #24
 80021ee:	429c      	cmp	r4, r3
 80021f0:	d0c1      	beq.n	8002176 <HAL_DMA_Start_IT+0x122>
 80021f2:	e7c0      	b.n	8002176 <HAL_DMA_Start_IT+0x122>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80021f4:	6823      	ldr	r3, [r4, #0]
 80021f6:	f043 0304 	orr.w	r3, r3, #4
 80021fa:	6023      	str	r3, [r4, #0]
 80021fc:	e7a3      	b.n	8002146 <HAL_DMA_Start_IT+0xf2>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021fe:	4b1f      	ldr	r3, [pc, #124]	@ (800227c <HAL_DMA_Start_IT+0x228>)
 8002200:	429c      	cmp	r4, r3
 8002202:	d0cb      	beq.n	800219c <HAL_DMA_Start_IT+0x148>
 8002204:	3318      	adds	r3, #24
 8002206:	429c      	cmp	r4, r3
 8002208:	d0c8      	beq.n	800219c <HAL_DMA_Start_IT+0x148>
 800220a:	3318      	adds	r3, #24
 800220c:	429c      	cmp	r4, r3
 800220e:	d0c5      	beq.n	800219c <HAL_DMA_Start_IT+0x148>
 8002210:	3318      	adds	r3, #24
 8002212:	429c      	cmp	r4, r3
 8002214:	d0c2      	beq.n	800219c <HAL_DMA_Start_IT+0x148>
 8002216:	3318      	adds	r3, #24
 8002218:	429c      	cmp	r4, r3
 800221a:	d0bf      	beq.n	800219c <HAL_DMA_Start_IT+0x148>
 800221c:	3318      	adds	r3, #24
 800221e:	429c      	cmp	r4, r3
 8002220:	d0bc      	beq.n	800219c <HAL_DMA_Start_IT+0x148>
 8002222:	3318      	adds	r3, #24
 8002224:	429c      	cmp	r4, r3
 8002226:	d0b9      	beq.n	800219c <HAL_DMA_Start_IT+0x148>
 8002228:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800222c:	429c      	cmp	r4, r3
 800222e:	d0b5      	beq.n	800219c <HAL_DMA_Start_IT+0x148>
 8002230:	3318      	adds	r3, #24
 8002232:	429c      	cmp	r4, r3
 8002234:	d0b2      	beq.n	800219c <HAL_DMA_Start_IT+0x148>
 8002236:	3318      	adds	r3, #24
 8002238:	429c      	cmp	r4, r3
 800223a:	d0af      	beq.n	800219c <HAL_DMA_Start_IT+0x148>
 800223c:	3318      	adds	r3, #24
 800223e:	429c      	cmp	r4, r3
 8002240:	d0ac      	beq.n	800219c <HAL_DMA_Start_IT+0x148>
 8002242:	3318      	adds	r3, #24
 8002244:	429c      	cmp	r4, r3
 8002246:	d0a9      	beq.n	800219c <HAL_DMA_Start_IT+0x148>
 8002248:	3318      	adds	r3, #24
 800224a:	429c      	cmp	r4, r3
 800224c:	d0a6      	beq.n	800219c <HAL_DMA_Start_IT+0x148>
 800224e:	3318      	adds	r3, #24
 8002250:	429c      	cmp	r4, r3
 8002252:	d0a3      	beq.n	800219c <HAL_DMA_Start_IT+0x148>
 8002254:	3318      	adds	r3, #24
 8002256:	429c      	cmp	r4, r3
 8002258:	d0a0      	beq.n	800219c <HAL_DMA_Start_IT+0x148>
 800225a:	e774      	b.n	8002146 <HAL_DMA_Start_IT+0xf2>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	e79e      	b.n	80021a4 <HAL_DMA_Start_IT+0x150>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002266:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    __HAL_UNLOCK(hdma);
 800226a:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800226e:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8002270:	2001      	movs	r0, #1
 8002272:	e785      	b.n	8002180 <HAL_DMA_Start_IT+0x12c>
  __HAL_LOCK(hdma);
 8002274:	2002      	movs	r0, #2
 8002276:	e783      	b.n	8002180 <HAL_DMA_Start_IT+0x12c>
 8002278:	40020010 	.word	0x40020010
 800227c:	40020028 	.word	0x40020028
 8002280:	58025408 	.word	0x58025408
 8002284:	5802541c 	.word	0x5802541c

08002288 <HAL_DMA_Abort>:
{
 8002288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800228a:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 800228c:	f7ff f91e 	bl	80014cc <HAL_GetTick>
 8002290:	4607      	mov	r7, r0
  if(hdma == NULL)
 8002292:	b145      	cbz	r5, 80022a6 <HAL_DMA_Abort+0x1e>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002294:	f895 3035 	ldrb.w	r3, [r5, #53]	@ 0x35
 8002298:	2b02      	cmp	r3, #2
 800229a:	d006      	beq.n	80022aa <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800229c:	2380      	movs	r3, #128	@ 0x80
 800229e:	656b      	str	r3, [r5, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 80022a0:	2300      	movs	r3, #0
 80022a2:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    return HAL_ERROR;
 80022a6:	2001      	movs	r0, #1
}
 80022a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022aa:	682c      	ldr	r4, [r5, #0]
 80022ac:	4ea9      	ldr	r6, [pc, #676]	@ (8002554 <HAL_DMA_Abort+0x2cc>)
 80022ae:	42b4      	cmp	r4, r6
 80022b0:	d04a      	beq.n	8002348 <HAL_DMA_Abort+0xc0>
 80022b2:	4ba9      	ldr	r3, [pc, #676]	@ (8002558 <HAL_DMA_Abort+0x2d0>)
 80022b4:	429c      	cmp	r4, r3
 80022b6:	d047      	beq.n	8002348 <HAL_DMA_Abort+0xc0>
 80022b8:	3318      	adds	r3, #24
 80022ba:	429c      	cmp	r4, r3
 80022bc:	d044      	beq.n	8002348 <HAL_DMA_Abort+0xc0>
 80022be:	3318      	adds	r3, #24
 80022c0:	429c      	cmp	r4, r3
 80022c2:	d041      	beq.n	8002348 <HAL_DMA_Abort+0xc0>
 80022c4:	3318      	adds	r3, #24
 80022c6:	429c      	cmp	r4, r3
 80022c8:	d03e      	beq.n	8002348 <HAL_DMA_Abort+0xc0>
 80022ca:	3318      	adds	r3, #24
 80022cc:	429c      	cmp	r4, r3
 80022ce:	d03b      	beq.n	8002348 <HAL_DMA_Abort+0xc0>
 80022d0:	3318      	adds	r3, #24
 80022d2:	429c      	cmp	r4, r3
 80022d4:	d038      	beq.n	8002348 <HAL_DMA_Abort+0xc0>
 80022d6:	3318      	adds	r3, #24
 80022d8:	429c      	cmp	r4, r3
 80022da:	d035      	beq.n	8002348 <HAL_DMA_Abort+0xc0>
 80022dc:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80022e0:	429c      	cmp	r4, r3
 80022e2:	d031      	beq.n	8002348 <HAL_DMA_Abort+0xc0>
 80022e4:	3318      	adds	r3, #24
 80022e6:	429c      	cmp	r4, r3
 80022e8:	d02e      	beq.n	8002348 <HAL_DMA_Abort+0xc0>
 80022ea:	3318      	adds	r3, #24
 80022ec:	429c      	cmp	r4, r3
 80022ee:	d02b      	beq.n	8002348 <HAL_DMA_Abort+0xc0>
 80022f0:	3318      	adds	r3, #24
 80022f2:	429c      	cmp	r4, r3
 80022f4:	d028      	beq.n	8002348 <HAL_DMA_Abort+0xc0>
 80022f6:	3318      	adds	r3, #24
 80022f8:	429c      	cmp	r4, r3
 80022fa:	d025      	beq.n	8002348 <HAL_DMA_Abort+0xc0>
 80022fc:	3318      	adds	r3, #24
 80022fe:	429c      	cmp	r4, r3
 8002300:	d022      	beq.n	8002348 <HAL_DMA_Abort+0xc0>
 8002302:	3318      	adds	r3, #24
 8002304:	429c      	cmp	r4, r3
 8002306:	d01f      	beq.n	8002348 <HAL_DMA_Abort+0xc0>
 8002308:	3318      	adds	r3, #24
 800230a:	429c      	cmp	r4, r3
 800230c:	d01c      	beq.n	8002348 <HAL_DMA_Abort+0xc0>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800230e:	6823      	ldr	r3, [r4, #0]
 8002310:	f023 030e 	bic.w	r3, r3, #14
 8002314:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002316:	4b91      	ldr	r3, [pc, #580]	@ (800255c <HAL_DMA_Abort+0x2d4>)
 8002318:	429c      	cmp	r4, r3
 800231a:	d01f      	beq.n	800235c <HAL_DMA_Abort+0xd4>
 800231c:	3314      	adds	r3, #20
 800231e:	429c      	cmp	r4, r3
 8002320:	d01c      	beq.n	800235c <HAL_DMA_Abort+0xd4>
 8002322:	3314      	adds	r3, #20
 8002324:	429c      	cmp	r4, r3
 8002326:	d019      	beq.n	800235c <HAL_DMA_Abort+0xd4>
 8002328:	3314      	adds	r3, #20
 800232a:	429c      	cmp	r4, r3
 800232c:	d016      	beq.n	800235c <HAL_DMA_Abort+0xd4>
 800232e:	3314      	adds	r3, #20
 8002330:	429c      	cmp	r4, r3
 8002332:	d013      	beq.n	800235c <HAL_DMA_Abort+0xd4>
 8002334:	3314      	adds	r3, #20
 8002336:	429c      	cmp	r4, r3
 8002338:	d010      	beq.n	800235c <HAL_DMA_Abort+0xd4>
 800233a:	3314      	adds	r3, #20
 800233c:	429c      	cmp	r4, r3
 800233e:	d00d      	beq.n	800235c <HAL_DMA_Abort+0xd4>
 8002340:	3314      	adds	r3, #20
 8002342:	429c      	cmp	r4, r3
 8002344:	d112      	bne.n	800236c <HAL_DMA_Abort+0xe4>
 8002346:	e009      	b.n	800235c <HAL_DMA_Abort+0xd4>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002348:	6823      	ldr	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800234a:	42b4      	cmp	r4, r6
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800234c:	f023 031e 	bic.w	r3, r3, #30
 8002350:	6023      	str	r3, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002352:	6963      	ldr	r3, [r4, #20]
 8002354:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002358:	6163      	str	r3, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800235a:	d176      	bne.n	800244a <HAL_DMA_Abort+0x1c2>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800235c:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
    __HAL_DMA_DISABLE(hdma);
 800235e:	42b4      	cmp	r4, r6
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002360:	6813      	ldr	r3, [r2, #0]
 8002362:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002366:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002368:	f040 80ab 	bne.w	80024c2 <HAL_DMA_Abort+0x23a>
 800236c:	6823      	ldr	r3, [r4, #0]
 800236e:	f023 0301 	bic.w	r3, r3, #1
 8002372:	6023      	str	r3, [r4, #0]
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002374:	6823      	ldr	r3, [r4, #0]
 8002376:	07db      	lsls	r3, r3, #31
 8002378:	f100 80cd 	bmi.w	8002516 <HAL_DMA_Abort+0x28e>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800237c:	682b      	ldr	r3, [r5, #0]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800237e:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002380:	42b3      	cmp	r3, r6
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002382:	6da8      	ldr	r0, [r5, #88]	@ 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002384:	f002 021f 	and.w	r2, r2, #31
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002388:	f000 80d1 	beq.w	800252e <HAL_DMA_Abort+0x2a6>
 800238c:	4972      	ldr	r1, [pc, #456]	@ (8002558 <HAL_DMA_Abort+0x2d0>)
 800238e:	428b      	cmp	r3, r1
 8002390:	f000 80cd 	beq.w	800252e <HAL_DMA_Abort+0x2a6>
 8002394:	3118      	adds	r1, #24
 8002396:	428b      	cmp	r3, r1
 8002398:	f000 80c9 	beq.w	800252e <HAL_DMA_Abort+0x2a6>
 800239c:	3118      	adds	r1, #24
 800239e:	428b      	cmp	r3, r1
 80023a0:	f000 80c5 	beq.w	800252e <HAL_DMA_Abort+0x2a6>
 80023a4:	3118      	adds	r1, #24
 80023a6:	428b      	cmp	r3, r1
 80023a8:	f000 80c1 	beq.w	800252e <HAL_DMA_Abort+0x2a6>
 80023ac:	3118      	adds	r1, #24
 80023ae:	428b      	cmp	r3, r1
 80023b0:	f000 80bd 	beq.w	800252e <HAL_DMA_Abort+0x2a6>
 80023b4:	3118      	adds	r1, #24
 80023b6:	428b      	cmp	r3, r1
 80023b8:	f000 80b9 	beq.w	800252e <HAL_DMA_Abort+0x2a6>
 80023bc:	3118      	adds	r1, #24
 80023be:	428b      	cmp	r3, r1
 80023c0:	f000 80b5 	beq.w	800252e <HAL_DMA_Abort+0x2a6>
 80023c4:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 80023c8:	428b      	cmp	r3, r1
 80023ca:	f000 80b0 	beq.w	800252e <HAL_DMA_Abort+0x2a6>
 80023ce:	3118      	adds	r1, #24
 80023d0:	428b      	cmp	r3, r1
 80023d2:	f000 80ac 	beq.w	800252e <HAL_DMA_Abort+0x2a6>
 80023d6:	3118      	adds	r1, #24
 80023d8:	428b      	cmp	r3, r1
 80023da:	f000 80a8 	beq.w	800252e <HAL_DMA_Abort+0x2a6>
 80023de:	3118      	adds	r1, #24
 80023e0:	428b      	cmp	r3, r1
 80023e2:	f000 80a4 	beq.w	800252e <HAL_DMA_Abort+0x2a6>
 80023e6:	3118      	adds	r1, #24
 80023e8:	428b      	cmp	r3, r1
 80023ea:	f000 80a0 	beq.w	800252e <HAL_DMA_Abort+0x2a6>
 80023ee:	3118      	adds	r1, #24
 80023f0:	428b      	cmp	r3, r1
 80023f2:	f000 809c 	beq.w	800252e <HAL_DMA_Abort+0x2a6>
 80023f6:	3118      	adds	r1, #24
 80023f8:	428b      	cmp	r3, r1
 80023fa:	f000 8098 	beq.w	800252e <HAL_DMA_Abort+0x2a6>
 80023fe:	3118      	adds	r1, #24
 8002400:	428b      	cmp	r3, r1
 8002402:	f000 8094 	beq.w	800252e <HAL_DMA_Abort+0x2a6>
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002406:	2101      	movs	r1, #1
 8002408:	fa01 f202 	lsl.w	r2, r1, r2
 800240c:	6042      	str	r2, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800240e:	4a53      	ldr	r2, [pc, #332]	@ (800255c <HAL_DMA_Abort+0x2d4>)
 8002410:	4293      	cmp	r3, r2
 8002412:	f000 8092 	beq.w	800253a <HAL_DMA_Abort+0x2b2>
 8002416:	3214      	adds	r2, #20
 8002418:	4293      	cmp	r3, r2
 800241a:	f000 808e 	beq.w	800253a <HAL_DMA_Abort+0x2b2>
 800241e:	3214      	adds	r2, #20
 8002420:	4293      	cmp	r3, r2
 8002422:	f000 808a 	beq.w	800253a <HAL_DMA_Abort+0x2b2>
 8002426:	3214      	adds	r2, #20
 8002428:	4293      	cmp	r3, r2
 800242a:	f000 8086 	beq.w	800253a <HAL_DMA_Abort+0x2b2>
 800242e:	3214      	adds	r2, #20
 8002430:	4293      	cmp	r3, r2
 8002432:	f000 8082 	beq.w	800253a <HAL_DMA_Abort+0x2b2>
 8002436:	3214      	adds	r2, #20
 8002438:	4293      	cmp	r3, r2
 800243a:	d07e      	beq.n	800253a <HAL_DMA_Abort+0x2b2>
 800243c:	3214      	adds	r2, #20
 800243e:	4293      	cmp	r3, r2
 8002440:	d07b      	beq.n	800253a <HAL_DMA_Abort+0x2b2>
 8002442:	3214      	adds	r2, #20
 8002444:	4293      	cmp	r3, r2
 8002446:	d17e      	bne.n	8002546 <HAL_DMA_Abort+0x2be>
 8002448:	e077      	b.n	800253a <HAL_DMA_Abort+0x2b2>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800244a:	4b43      	ldr	r3, [pc, #268]	@ (8002558 <HAL_DMA_Abort+0x2d0>)
 800244c:	429c      	cmp	r4, r3
 800244e:	d085      	beq.n	800235c <HAL_DMA_Abort+0xd4>
 8002450:	3318      	adds	r3, #24
 8002452:	429c      	cmp	r4, r3
 8002454:	d082      	beq.n	800235c <HAL_DMA_Abort+0xd4>
 8002456:	3318      	adds	r3, #24
 8002458:	429c      	cmp	r4, r3
 800245a:	f43f af7f 	beq.w	800235c <HAL_DMA_Abort+0xd4>
 800245e:	3318      	adds	r3, #24
 8002460:	429c      	cmp	r4, r3
 8002462:	f43f af7b 	beq.w	800235c <HAL_DMA_Abort+0xd4>
 8002466:	3318      	adds	r3, #24
 8002468:	429c      	cmp	r4, r3
 800246a:	f43f af77 	beq.w	800235c <HAL_DMA_Abort+0xd4>
 800246e:	3318      	adds	r3, #24
 8002470:	429c      	cmp	r4, r3
 8002472:	f43f af73 	beq.w	800235c <HAL_DMA_Abort+0xd4>
 8002476:	3318      	adds	r3, #24
 8002478:	429c      	cmp	r4, r3
 800247a:	f43f af6f 	beq.w	800235c <HAL_DMA_Abort+0xd4>
 800247e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8002482:	429c      	cmp	r4, r3
 8002484:	f43f af6a 	beq.w	800235c <HAL_DMA_Abort+0xd4>
 8002488:	3318      	adds	r3, #24
 800248a:	429c      	cmp	r4, r3
 800248c:	f43f af66 	beq.w	800235c <HAL_DMA_Abort+0xd4>
 8002490:	3318      	adds	r3, #24
 8002492:	429c      	cmp	r4, r3
 8002494:	f43f af62 	beq.w	800235c <HAL_DMA_Abort+0xd4>
 8002498:	3318      	adds	r3, #24
 800249a:	429c      	cmp	r4, r3
 800249c:	f43f af5e 	beq.w	800235c <HAL_DMA_Abort+0xd4>
 80024a0:	3318      	adds	r3, #24
 80024a2:	429c      	cmp	r4, r3
 80024a4:	f43f af5a 	beq.w	800235c <HAL_DMA_Abort+0xd4>
 80024a8:	3318      	adds	r3, #24
 80024aa:	429c      	cmp	r4, r3
 80024ac:	f43f af56 	beq.w	800235c <HAL_DMA_Abort+0xd4>
 80024b0:	3318      	adds	r3, #24
 80024b2:	429c      	cmp	r4, r3
 80024b4:	f43f af52 	beq.w	800235c <HAL_DMA_Abort+0xd4>
 80024b8:	3318      	adds	r3, #24
 80024ba:	429c      	cmp	r4, r3
 80024bc:	f43f af4e 	beq.w	800235c <HAL_DMA_Abort+0xd4>
 80024c0:	e729      	b.n	8002316 <HAL_DMA_Abort+0x8e>
    __HAL_DMA_DISABLE(hdma);
 80024c2:	4b25      	ldr	r3, [pc, #148]	@ (8002558 <HAL_DMA_Abort+0x2d0>)
 80024c4:	429c      	cmp	r4, r3
 80024c6:	f43f af51 	beq.w	800236c <HAL_DMA_Abort+0xe4>
 80024ca:	3318      	adds	r3, #24
 80024cc:	429c      	cmp	r4, r3
 80024ce:	f43f af4d 	beq.w	800236c <HAL_DMA_Abort+0xe4>
 80024d2:	3318      	adds	r3, #24
 80024d4:	429c      	cmp	r4, r3
 80024d6:	f43f af49 	beq.w	800236c <HAL_DMA_Abort+0xe4>
 80024da:	3318      	adds	r3, #24
 80024dc:	429c      	cmp	r4, r3
 80024de:	f43f af45 	beq.w	800236c <HAL_DMA_Abort+0xe4>
 80024e2:	3318      	adds	r3, #24
 80024e4:	429c      	cmp	r4, r3
 80024e6:	f43f af41 	beq.w	800236c <HAL_DMA_Abort+0xe4>
 80024ea:	3318      	adds	r3, #24
 80024ec:	429c      	cmp	r4, r3
 80024ee:	f43f af3d 	beq.w	800236c <HAL_DMA_Abort+0xe4>
 80024f2:	3318      	adds	r3, #24
 80024f4:	429c      	cmp	r4, r3
 80024f6:	f43f af39 	beq.w	800236c <HAL_DMA_Abort+0xe4>
 80024fa:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80024fe:	429c      	cmp	r4, r3
 8002500:	f43f af34 	beq.w	800236c <HAL_DMA_Abort+0xe4>
 8002504:	3318      	adds	r3, #24
 8002506:	429c      	cmp	r4, r3
 8002508:	f43f af30 	beq.w	800236c <HAL_DMA_Abort+0xe4>
 800250c:	3318      	adds	r3, #24
 800250e:	429c      	cmp	r4, r3
 8002510:	f43f af2c 	beq.w	800236c <HAL_DMA_Abort+0xe4>
 8002514:	e72a      	b.n	800236c <HAL_DMA_Abort+0xe4>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002516:	f7fe ffd9 	bl	80014cc <HAL_GetTick>
 800251a:	1bc0      	subs	r0, r0, r7
 800251c:	2805      	cmp	r0, #5
 800251e:	f67f af29 	bls.w	8002374 <HAL_DMA_Abort+0xec>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002522:	2320      	movs	r3, #32
 8002524:	656b      	str	r3, [r5, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8002526:	2303      	movs	r3, #3
 8002528:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 800252c:	e6b8      	b.n	80022a0 <HAL_DMA_Abort+0x18>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800252e:	213f      	movs	r1, #63	@ 0x3f
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002530:	42b3      	cmp	r3, r6
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002532:	fa01 f202 	lsl.w	r2, r1, r2
 8002536:	6082      	str	r2, [r0, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002538:	d112      	bne.n	8002560 <HAL_DMA_Abort+0x2d8>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800253a:	e9d5 3219 	ldrd	r3, r2, [r5, #100]	@ 0x64
 800253e:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8002540:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 8002542:	2b00      	cmp	r3, #0
 8002544:	d13b      	bne.n	80025be <HAL_DMA_Abort+0x336>
    hdma->State = HAL_DMA_STATE_READY;
 8002546:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8002548:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 800254a:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 800254e:	f885 0034 	strb.w	r0, [r5, #52]	@ 0x34
  return HAL_OK;
 8002552:	e6a9      	b.n	80022a8 <HAL_DMA_Abort+0x20>
 8002554:	40020010 	.word	0x40020010
 8002558:	40020028 	.word	0x40020028
 800255c:	58025408 	.word	0x58025408
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002560:	4a1b      	ldr	r2, [pc, #108]	@ (80025d0 <HAL_DMA_Abort+0x348>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d0e9      	beq.n	800253a <HAL_DMA_Abort+0x2b2>
 8002566:	3218      	adds	r2, #24
 8002568:	4293      	cmp	r3, r2
 800256a:	d0e6      	beq.n	800253a <HAL_DMA_Abort+0x2b2>
 800256c:	3218      	adds	r2, #24
 800256e:	4293      	cmp	r3, r2
 8002570:	d0e3      	beq.n	800253a <HAL_DMA_Abort+0x2b2>
 8002572:	3218      	adds	r2, #24
 8002574:	4293      	cmp	r3, r2
 8002576:	d0e0      	beq.n	800253a <HAL_DMA_Abort+0x2b2>
 8002578:	3218      	adds	r2, #24
 800257a:	4293      	cmp	r3, r2
 800257c:	d0dd      	beq.n	800253a <HAL_DMA_Abort+0x2b2>
 800257e:	3218      	adds	r2, #24
 8002580:	4293      	cmp	r3, r2
 8002582:	d0da      	beq.n	800253a <HAL_DMA_Abort+0x2b2>
 8002584:	3218      	adds	r2, #24
 8002586:	4293      	cmp	r3, r2
 8002588:	d0d7      	beq.n	800253a <HAL_DMA_Abort+0x2b2>
 800258a:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 800258e:	4293      	cmp	r3, r2
 8002590:	d0d3      	beq.n	800253a <HAL_DMA_Abort+0x2b2>
 8002592:	3218      	adds	r2, #24
 8002594:	4293      	cmp	r3, r2
 8002596:	d0d0      	beq.n	800253a <HAL_DMA_Abort+0x2b2>
 8002598:	3218      	adds	r2, #24
 800259a:	4293      	cmp	r3, r2
 800259c:	d0cd      	beq.n	800253a <HAL_DMA_Abort+0x2b2>
 800259e:	3218      	adds	r2, #24
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d0ca      	beq.n	800253a <HAL_DMA_Abort+0x2b2>
 80025a4:	3218      	adds	r2, #24
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d0c7      	beq.n	800253a <HAL_DMA_Abort+0x2b2>
 80025aa:	3218      	adds	r2, #24
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d0c4      	beq.n	800253a <HAL_DMA_Abort+0x2b2>
 80025b0:	3218      	adds	r2, #24
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d0c1      	beq.n	800253a <HAL_DMA_Abort+0x2b2>
 80025b6:	3218      	adds	r2, #24
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d0be      	beq.n	800253a <HAL_DMA_Abort+0x2b2>
 80025bc:	e727      	b.n	800240e <HAL_DMA_Abort+0x186>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80025c4:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025c6:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	@ 0x70
 80025ca:	605a      	str	r2, [r3, #4]
 80025cc:	e7bb      	b.n	8002546 <HAL_DMA_Abort+0x2be>
 80025ce:	bf00      	nop
 80025d0:	40020028 	.word	0x40020028

080025d4 <HAL_DMA_Abort_IT>:
{
 80025d4:	b508      	push	{r3, lr}
  if(hdma == NULL)
 80025d6:	b128      	cbz	r0, 80025e4 <HAL_DMA_Abort_IT+0x10>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025d8:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d003      	beq.n	80025e8 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025e0:	2380      	movs	r3, #128	@ 0x80
 80025e2:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 80025e4:	2001      	movs	r0, #1
 80025e6:	e05d      	b.n	80026a4 <HAL_DMA_Abort_IT+0xd0>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80025e8:	6803      	ldr	r3, [r0, #0]
 80025ea:	4a3f      	ldr	r2, [pc, #252]	@ (80026e8 <HAL_DMA_Abort_IT+0x114>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d051      	beq.n	8002694 <HAL_DMA_Abort_IT+0xc0>
 80025f0:	3218      	adds	r2, #24
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d04e      	beq.n	8002694 <HAL_DMA_Abort_IT+0xc0>
 80025f6:	3218      	adds	r2, #24
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d04b      	beq.n	8002694 <HAL_DMA_Abort_IT+0xc0>
 80025fc:	3218      	adds	r2, #24
 80025fe:	4293      	cmp	r3, r2
 8002600:	d048      	beq.n	8002694 <HAL_DMA_Abort_IT+0xc0>
 8002602:	3218      	adds	r2, #24
 8002604:	4293      	cmp	r3, r2
 8002606:	d045      	beq.n	8002694 <HAL_DMA_Abort_IT+0xc0>
 8002608:	3218      	adds	r2, #24
 800260a:	4293      	cmp	r3, r2
 800260c:	d042      	beq.n	8002694 <HAL_DMA_Abort_IT+0xc0>
 800260e:	3218      	adds	r2, #24
 8002610:	4293      	cmp	r3, r2
 8002612:	d03f      	beq.n	8002694 <HAL_DMA_Abort_IT+0xc0>
 8002614:	3218      	adds	r2, #24
 8002616:	4293      	cmp	r3, r2
 8002618:	d03c      	beq.n	8002694 <HAL_DMA_Abort_IT+0xc0>
 800261a:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 800261e:	4293      	cmp	r3, r2
 8002620:	d038      	beq.n	8002694 <HAL_DMA_Abort_IT+0xc0>
 8002622:	3218      	adds	r2, #24
 8002624:	4293      	cmp	r3, r2
 8002626:	d035      	beq.n	8002694 <HAL_DMA_Abort_IT+0xc0>
 8002628:	3218      	adds	r2, #24
 800262a:	4293      	cmp	r3, r2
 800262c:	d032      	beq.n	8002694 <HAL_DMA_Abort_IT+0xc0>
 800262e:	3218      	adds	r2, #24
 8002630:	4293      	cmp	r3, r2
 8002632:	d02f      	beq.n	8002694 <HAL_DMA_Abort_IT+0xc0>
 8002634:	3218      	adds	r2, #24
 8002636:	4293      	cmp	r3, r2
 8002638:	d02c      	beq.n	8002694 <HAL_DMA_Abort_IT+0xc0>
 800263a:	3218      	adds	r2, #24
 800263c:	4293      	cmp	r3, r2
 800263e:	d029      	beq.n	8002694 <HAL_DMA_Abort_IT+0xc0>
 8002640:	3218      	adds	r2, #24
 8002642:	4293      	cmp	r3, r2
 8002644:	d026      	beq.n	8002694 <HAL_DMA_Abort_IT+0xc0>
 8002646:	3218      	adds	r2, #24
 8002648:	4293      	cmp	r3, r2
 800264a:	d023      	beq.n	8002694 <HAL_DMA_Abort_IT+0xc0>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	f022 020e 	bic.w	r2, r2, #14
 8002652:	601a      	str	r2, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	f022 0201 	bic.w	r2, r2, #1
 800265a:	601a      	str	r2, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800265c:	4a23      	ldr	r2, [pc, #140]	@ (80026ec <HAL_DMA_Abort_IT+0x118>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d121      	bne.n	80026a6 <HAL_DMA_Abort_IT+0xd2>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002662:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8002664:	6813      	ldr	r3, [r2, #0]
 8002666:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800266a:	6013      	str	r3, [r2, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800266c:	e9d0 1316 	ldrd	r1, r3, [r0, #88]	@ 0x58
 8002670:	f003 021f 	and.w	r2, r3, #31
 8002674:	2301      	movs	r3, #1
 8002676:	4093      	lsls	r3, r2
 8002678:	604b      	str	r3, [r1, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800267a:	e9d0 3219 	ldrd	r3, r2, [r0, #100]	@ 0x64
 800267e:	605a      	str	r2, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8002680:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8002682:	b32b      	cbz	r3, 80026d0 <HAL_DMA_Abort_IT+0xfc>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800268a:	601a      	str	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800268c:	e9d0 321c 	ldrd	r3, r2, [r0, #112]	@ 0x70
 8002690:	605a      	str	r2, [r3, #4]
 8002692:	e01d      	b.n	80026d0 <HAL_DMA_Abort_IT+0xfc>
      hdma->State = HAL_DMA_STATE_ABORT;
 8002694:	2204      	movs	r2, #4
 8002696:	f880 2035 	strb.w	r2, [r0, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	f022 0201 	bic.w	r2, r2, #1
 80026a0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80026a2:	2000      	movs	r0, #0
}
 80026a4:	bd08      	pop	{r3, pc}
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80026a6:	4a12      	ldr	r2, [pc, #72]	@ (80026f0 <HAL_DMA_Abort_IT+0x11c>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d0da      	beq.n	8002662 <HAL_DMA_Abort_IT+0x8e>
 80026ac:	3214      	adds	r2, #20
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d0d7      	beq.n	8002662 <HAL_DMA_Abort_IT+0x8e>
 80026b2:	3214      	adds	r2, #20
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d0d4      	beq.n	8002662 <HAL_DMA_Abort_IT+0x8e>
 80026b8:	3214      	adds	r2, #20
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d0d1      	beq.n	8002662 <HAL_DMA_Abort_IT+0x8e>
 80026be:	3214      	adds	r2, #20
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d0ce      	beq.n	8002662 <HAL_DMA_Abort_IT+0x8e>
 80026c4:	3214      	adds	r2, #20
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d0cb      	beq.n	8002662 <HAL_DMA_Abort_IT+0x8e>
 80026ca:	3214      	adds	r2, #20
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d0c8      	beq.n	8002662 <HAL_DMA_Abort_IT+0x8e>
      hdma->State = HAL_DMA_STATE_READY;
 80026d0:	2301      	movs	r3, #1
 80026d2:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 80026d6:	2300      	movs	r3, #0
 80026d8:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
      if(hdma->XferAbortCallback != NULL)
 80026dc:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d0df      	beq.n	80026a2 <HAL_DMA_Abort_IT+0xce>
        hdma->XferAbortCallback(hdma);
 80026e2:	4798      	blx	r3
 80026e4:	e7dd      	b.n	80026a2 <HAL_DMA_Abort_IT+0xce>
 80026e6:	bf00      	nop
 80026e8:	40020010 	.word	0x40020010
 80026ec:	58025408 	.word	0x58025408
 80026f0:	5802541c 	.word	0x5802541c

080026f4 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0U;
 80026f4:	2300      	movs	r3, #0
{
 80026f6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0U;
 80026fa:	9301      	str	r3, [sp, #4]
{
 80026fc:	4604      	mov	r4, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 80026fe:	4b29      	ldr	r3, [pc, #164]	@ (80027a4 <HAL_DMA_IRQHandler+0xb0>)
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002700:	4e29      	ldr	r6, [pc, #164]	@ (80027a8 <HAL_DMA_IRQHandler+0xb4>)
  uint32_t timeout = SystemCoreClock / 9600U;
 8002702:	681f      	ldr	r7, [r3, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002704:	6803      	ldr	r3, [r0, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002706:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002708:	42b3      	cmp	r3, r6
  tmpisr_dma  = regs_dma->ISR;
 800270a:	f8d5 8000 	ldr.w	r8, [r5]
  tmpisr_bdma = regs_bdma->ISR;
 800270e:	f8d5 c000 	ldr.w	ip, [r5]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002712:	d04f      	beq.n	80027b4 <HAL_DMA_IRQHandler+0xc0>
 8002714:	4a25      	ldr	r2, [pc, #148]	@ (80027ac <HAL_DMA_IRQHandler+0xb8>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d04c      	beq.n	80027b4 <HAL_DMA_IRQHandler+0xc0>
 800271a:	3218      	adds	r2, #24
 800271c:	4293      	cmp	r3, r2
 800271e:	d049      	beq.n	80027b4 <HAL_DMA_IRQHandler+0xc0>
 8002720:	3218      	adds	r2, #24
 8002722:	4293      	cmp	r3, r2
 8002724:	d046      	beq.n	80027b4 <HAL_DMA_IRQHandler+0xc0>
 8002726:	3218      	adds	r2, #24
 8002728:	4293      	cmp	r3, r2
 800272a:	d043      	beq.n	80027b4 <HAL_DMA_IRQHandler+0xc0>
 800272c:	3218      	adds	r2, #24
 800272e:	4293      	cmp	r3, r2
 8002730:	d040      	beq.n	80027b4 <HAL_DMA_IRQHandler+0xc0>
 8002732:	3218      	adds	r2, #24
 8002734:	4293      	cmp	r3, r2
 8002736:	d03d      	beq.n	80027b4 <HAL_DMA_IRQHandler+0xc0>
 8002738:	3218      	adds	r2, #24
 800273a:	4293      	cmp	r3, r2
 800273c:	d03a      	beq.n	80027b4 <HAL_DMA_IRQHandler+0xc0>
 800273e:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8002742:	4293      	cmp	r3, r2
 8002744:	d036      	beq.n	80027b4 <HAL_DMA_IRQHandler+0xc0>
 8002746:	3218      	adds	r2, #24
 8002748:	4293      	cmp	r3, r2
 800274a:	d033      	beq.n	80027b4 <HAL_DMA_IRQHandler+0xc0>
 800274c:	3218      	adds	r2, #24
 800274e:	4293      	cmp	r3, r2
 8002750:	d030      	beq.n	80027b4 <HAL_DMA_IRQHandler+0xc0>
 8002752:	3218      	adds	r2, #24
 8002754:	4293      	cmp	r3, r2
 8002756:	d02d      	beq.n	80027b4 <HAL_DMA_IRQHandler+0xc0>
 8002758:	3218      	adds	r2, #24
 800275a:	4293      	cmp	r3, r2
 800275c:	d02a      	beq.n	80027b4 <HAL_DMA_IRQHandler+0xc0>
 800275e:	3218      	adds	r2, #24
 8002760:	4293      	cmp	r3, r2
 8002762:	d027      	beq.n	80027b4 <HAL_DMA_IRQHandler+0xc0>
 8002764:	3218      	adds	r2, #24
 8002766:	4293      	cmp	r3, r2
 8002768:	d024      	beq.n	80027b4 <HAL_DMA_IRQHandler+0xc0>
 800276a:	3218      	adds	r2, #24
 800276c:	4293      	cmp	r3, r2
 800276e:	d021      	beq.n	80027b4 <HAL_DMA_IRQHandler+0xc0>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002770:	4a0f      	ldr	r2, [pc, #60]	@ (80027b0 <HAL_DMA_IRQHandler+0xbc>)
 8002772:	4293      	cmp	r3, r2
 8002774:	f040 8209 	bne.w	8002b8a <HAL_DMA_IRQHandler+0x496>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002778:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 800277a:	2004      	movs	r0, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800277c:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800277e:	f001 011f 	and.w	r1, r1, #31
 8002782:	4088      	lsls	r0, r1
 8002784:	ea10 0f0c 	tst.w	r0, ip
 8002788:	f000 8226 	beq.w	8002bd8 <HAL_DMA_IRQHandler+0x4e4>
 800278c:	0756      	lsls	r6, r2, #29
 800278e:	f140 8223 	bpl.w	8002bd8 <HAL_DMA_IRQHandler+0x4e4>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002792:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002794:	6068      	str	r0, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002796:	f140 8217 	bpl.w	8002bc8 <HAL_DMA_IRQHandler+0x4d4>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800279a:	03d3      	lsls	r3, r2, #15
 800279c:	f100 821a 	bmi.w	8002bd4 <HAL_DMA_IRQHandler+0x4e0>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027a0:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80027a2:	e17e      	b.n	8002aa2 <HAL_DMA_IRQHandler+0x3ae>
 80027a4:	2400000c 	.word	0x2400000c
 80027a8:	40020010 	.word	0x40020010
 80027ac:	40020028 	.word	0x40020028
 80027b0:	58025408 	.word	0x58025408
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80027b4:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80027b6:	2008      	movs	r0, #8
 80027b8:	f002 021f 	and.w	r2, r2, #31
 80027bc:	4090      	lsls	r0, r2
 80027be:	ea10 0f08 	tst.w	r0, r8
 80027c2:	d03d      	beq.n	8002840 <HAL_DMA_IRQHandler+0x14c>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80027c4:	42b3      	cmp	r3, r6
 80027c6:	d02e      	beq.n	8002826 <HAL_DMA_IRQHandler+0x132>
 80027c8:	4984      	ldr	r1, [pc, #528]	@ (80029dc <HAL_DMA_IRQHandler+0x2e8>)
 80027ca:	428b      	cmp	r3, r1
 80027cc:	d02b      	beq.n	8002826 <HAL_DMA_IRQHandler+0x132>
 80027ce:	3118      	adds	r1, #24
 80027d0:	428b      	cmp	r3, r1
 80027d2:	d028      	beq.n	8002826 <HAL_DMA_IRQHandler+0x132>
 80027d4:	3118      	adds	r1, #24
 80027d6:	428b      	cmp	r3, r1
 80027d8:	d025      	beq.n	8002826 <HAL_DMA_IRQHandler+0x132>
 80027da:	3118      	adds	r1, #24
 80027dc:	428b      	cmp	r3, r1
 80027de:	d022      	beq.n	8002826 <HAL_DMA_IRQHandler+0x132>
 80027e0:	3118      	adds	r1, #24
 80027e2:	428b      	cmp	r3, r1
 80027e4:	d01f      	beq.n	8002826 <HAL_DMA_IRQHandler+0x132>
 80027e6:	3118      	adds	r1, #24
 80027e8:	428b      	cmp	r3, r1
 80027ea:	d01c      	beq.n	8002826 <HAL_DMA_IRQHandler+0x132>
 80027ec:	3118      	adds	r1, #24
 80027ee:	428b      	cmp	r3, r1
 80027f0:	d019      	beq.n	8002826 <HAL_DMA_IRQHandler+0x132>
 80027f2:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 80027f6:	428b      	cmp	r3, r1
 80027f8:	d015      	beq.n	8002826 <HAL_DMA_IRQHandler+0x132>
 80027fa:	3118      	adds	r1, #24
 80027fc:	428b      	cmp	r3, r1
 80027fe:	d012      	beq.n	8002826 <HAL_DMA_IRQHandler+0x132>
 8002800:	3118      	adds	r1, #24
 8002802:	428b      	cmp	r3, r1
 8002804:	d00f      	beq.n	8002826 <HAL_DMA_IRQHandler+0x132>
 8002806:	3118      	adds	r1, #24
 8002808:	428b      	cmp	r3, r1
 800280a:	d00c      	beq.n	8002826 <HAL_DMA_IRQHandler+0x132>
 800280c:	3118      	adds	r1, #24
 800280e:	428b      	cmp	r3, r1
 8002810:	d009      	beq.n	8002826 <HAL_DMA_IRQHandler+0x132>
 8002812:	3118      	adds	r1, #24
 8002814:	428b      	cmp	r3, r1
 8002816:	d006      	beq.n	8002826 <HAL_DMA_IRQHandler+0x132>
 8002818:	3118      	adds	r1, #24
 800281a:	428b      	cmp	r3, r1
 800281c:	d003      	beq.n	8002826 <HAL_DMA_IRQHandler+0x132>
 800281e:	3118      	adds	r1, #24
 8002820:	428b      	cmp	r3, r1
 8002822:	f040 80c1 	bne.w	80029a8 <HAL_DMA_IRQHandler+0x2b4>
 8002826:	6819      	ldr	r1, [r3, #0]
 8002828:	f3c1 0180 	ubfx	r1, r1, #2, #1
 800282c:	b141      	cbz	r1, 8002840 <HAL_DMA_IRQHandler+0x14c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800282e:	6819      	ldr	r1, [r3, #0]
 8002830:	f021 0104 	bic.w	r1, r1, #4
 8002834:	6019      	str	r1, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002836:	60a8      	str	r0, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002838:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800283a:	f041 0101 	orr.w	r1, r1, #1
 800283e:	6561      	str	r1, [r4, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002840:	fa28 f102 	lsr.w	r1, r8, r2
 8002844:	07c8      	lsls	r0, r1, #31
 8002846:	d534      	bpl.n	80028b2 <HAL_DMA_IRQHandler+0x1be>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002848:	42b3      	cmp	r3, r6
 800284a:	d02e      	beq.n	80028aa <HAL_DMA_IRQHandler+0x1b6>
 800284c:	4963      	ldr	r1, [pc, #396]	@ (80029dc <HAL_DMA_IRQHandler+0x2e8>)
 800284e:	428b      	cmp	r3, r1
 8002850:	d02b      	beq.n	80028aa <HAL_DMA_IRQHandler+0x1b6>
 8002852:	3118      	adds	r1, #24
 8002854:	428b      	cmp	r3, r1
 8002856:	d028      	beq.n	80028aa <HAL_DMA_IRQHandler+0x1b6>
 8002858:	3118      	adds	r1, #24
 800285a:	428b      	cmp	r3, r1
 800285c:	d025      	beq.n	80028aa <HAL_DMA_IRQHandler+0x1b6>
 800285e:	3118      	adds	r1, #24
 8002860:	428b      	cmp	r3, r1
 8002862:	d022      	beq.n	80028aa <HAL_DMA_IRQHandler+0x1b6>
 8002864:	3118      	adds	r1, #24
 8002866:	428b      	cmp	r3, r1
 8002868:	d01f      	beq.n	80028aa <HAL_DMA_IRQHandler+0x1b6>
 800286a:	3118      	adds	r1, #24
 800286c:	428b      	cmp	r3, r1
 800286e:	d01c      	beq.n	80028aa <HAL_DMA_IRQHandler+0x1b6>
 8002870:	3118      	adds	r1, #24
 8002872:	428b      	cmp	r3, r1
 8002874:	d019      	beq.n	80028aa <HAL_DMA_IRQHandler+0x1b6>
 8002876:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 800287a:	428b      	cmp	r3, r1
 800287c:	d015      	beq.n	80028aa <HAL_DMA_IRQHandler+0x1b6>
 800287e:	3118      	adds	r1, #24
 8002880:	428b      	cmp	r3, r1
 8002882:	d012      	beq.n	80028aa <HAL_DMA_IRQHandler+0x1b6>
 8002884:	3118      	adds	r1, #24
 8002886:	428b      	cmp	r3, r1
 8002888:	d00f      	beq.n	80028aa <HAL_DMA_IRQHandler+0x1b6>
 800288a:	3118      	adds	r1, #24
 800288c:	428b      	cmp	r3, r1
 800288e:	d00c      	beq.n	80028aa <HAL_DMA_IRQHandler+0x1b6>
 8002890:	3118      	adds	r1, #24
 8002892:	428b      	cmp	r3, r1
 8002894:	d009      	beq.n	80028aa <HAL_DMA_IRQHandler+0x1b6>
 8002896:	3118      	adds	r1, #24
 8002898:	428b      	cmp	r3, r1
 800289a:	d006      	beq.n	80028aa <HAL_DMA_IRQHandler+0x1b6>
 800289c:	3118      	adds	r1, #24
 800289e:	428b      	cmp	r3, r1
 80028a0:	d003      	beq.n	80028aa <HAL_DMA_IRQHandler+0x1b6>
 80028a2:	3118      	adds	r1, #24
 80028a4:	428b      	cmp	r3, r1
 80028a6:	f040 8083 	bne.w	80029b0 <HAL_DMA_IRQHandler+0x2bc>
 80028aa:	6959      	ldr	r1, [r3, #20]
 80028ac:	0609      	lsls	r1, r1, #24
 80028ae:	f100 8081 	bmi.w	80029b4 <HAL_DMA_IRQHandler+0x2c0>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80028b2:	2104      	movs	r1, #4
 80028b4:	4091      	lsls	r1, r2
 80028b6:	ea11 0f08 	tst.w	r1, r8
 80028ba:	d032      	beq.n	8002922 <HAL_DMA_IRQHandler+0x22e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80028bc:	42b3      	cmp	r3, r6
 80028be:	d02d      	beq.n	800291c <HAL_DMA_IRQHandler+0x228>
 80028c0:	4846      	ldr	r0, [pc, #280]	@ (80029dc <HAL_DMA_IRQHandler+0x2e8>)
 80028c2:	4283      	cmp	r3, r0
 80028c4:	d02a      	beq.n	800291c <HAL_DMA_IRQHandler+0x228>
 80028c6:	3018      	adds	r0, #24
 80028c8:	4283      	cmp	r3, r0
 80028ca:	d027      	beq.n	800291c <HAL_DMA_IRQHandler+0x228>
 80028cc:	3018      	adds	r0, #24
 80028ce:	4283      	cmp	r3, r0
 80028d0:	d024      	beq.n	800291c <HAL_DMA_IRQHandler+0x228>
 80028d2:	3018      	adds	r0, #24
 80028d4:	4283      	cmp	r3, r0
 80028d6:	d021      	beq.n	800291c <HAL_DMA_IRQHandler+0x228>
 80028d8:	3018      	adds	r0, #24
 80028da:	4283      	cmp	r3, r0
 80028dc:	d01e      	beq.n	800291c <HAL_DMA_IRQHandler+0x228>
 80028de:	3018      	adds	r0, #24
 80028e0:	4283      	cmp	r3, r0
 80028e2:	d01b      	beq.n	800291c <HAL_DMA_IRQHandler+0x228>
 80028e4:	3018      	adds	r0, #24
 80028e6:	4283      	cmp	r3, r0
 80028e8:	d018      	beq.n	800291c <HAL_DMA_IRQHandler+0x228>
 80028ea:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 80028ee:	4283      	cmp	r3, r0
 80028f0:	d014      	beq.n	800291c <HAL_DMA_IRQHandler+0x228>
 80028f2:	3018      	adds	r0, #24
 80028f4:	4283      	cmp	r3, r0
 80028f6:	d011      	beq.n	800291c <HAL_DMA_IRQHandler+0x228>
 80028f8:	3018      	adds	r0, #24
 80028fa:	4283      	cmp	r3, r0
 80028fc:	d00e      	beq.n	800291c <HAL_DMA_IRQHandler+0x228>
 80028fe:	3018      	adds	r0, #24
 8002900:	4283      	cmp	r3, r0
 8002902:	d00b      	beq.n	800291c <HAL_DMA_IRQHandler+0x228>
 8002904:	3018      	adds	r0, #24
 8002906:	4283      	cmp	r3, r0
 8002908:	d008      	beq.n	800291c <HAL_DMA_IRQHandler+0x228>
 800290a:	3018      	adds	r0, #24
 800290c:	4283      	cmp	r3, r0
 800290e:	d005      	beq.n	800291c <HAL_DMA_IRQHandler+0x228>
 8002910:	3018      	adds	r0, #24
 8002912:	4283      	cmp	r3, r0
 8002914:	d002      	beq.n	800291c <HAL_DMA_IRQHandler+0x228>
 8002916:	3018      	adds	r0, #24
 8002918:	4283      	cmp	r3, r0
 800291a:	d153      	bne.n	80029c4 <HAL_DMA_IRQHandler+0x2d0>
 800291c:	6818      	ldr	r0, [r3, #0]
 800291e:	0780      	lsls	r0, r0, #30
 8002920:	d452      	bmi.n	80029c8 <HAL_DMA_IRQHandler+0x2d4>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002922:	2110      	movs	r1, #16
 8002924:	4091      	lsls	r1, r2
 8002926:	ea11 0f08 	tst.w	r1, r8
 800292a:	d05d      	beq.n	80029e8 <HAL_DMA_IRQHandler+0x2f4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800292c:	42b3      	cmp	r3, r6
 800292e:	d02d      	beq.n	800298c <HAL_DMA_IRQHandler+0x298>
 8002930:	4a2a      	ldr	r2, [pc, #168]	@ (80029dc <HAL_DMA_IRQHandler+0x2e8>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d02a      	beq.n	800298c <HAL_DMA_IRQHandler+0x298>
 8002936:	3218      	adds	r2, #24
 8002938:	4293      	cmp	r3, r2
 800293a:	d027      	beq.n	800298c <HAL_DMA_IRQHandler+0x298>
 800293c:	3218      	adds	r2, #24
 800293e:	4293      	cmp	r3, r2
 8002940:	d024      	beq.n	800298c <HAL_DMA_IRQHandler+0x298>
 8002942:	3218      	adds	r2, #24
 8002944:	4293      	cmp	r3, r2
 8002946:	d021      	beq.n	800298c <HAL_DMA_IRQHandler+0x298>
 8002948:	3218      	adds	r2, #24
 800294a:	4293      	cmp	r3, r2
 800294c:	d01e      	beq.n	800298c <HAL_DMA_IRQHandler+0x298>
 800294e:	3218      	adds	r2, #24
 8002950:	4293      	cmp	r3, r2
 8002952:	d01b      	beq.n	800298c <HAL_DMA_IRQHandler+0x298>
 8002954:	3218      	adds	r2, #24
 8002956:	4293      	cmp	r3, r2
 8002958:	d018      	beq.n	800298c <HAL_DMA_IRQHandler+0x298>
 800295a:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 800295e:	4293      	cmp	r3, r2
 8002960:	d014      	beq.n	800298c <HAL_DMA_IRQHandler+0x298>
 8002962:	3218      	adds	r2, #24
 8002964:	4293      	cmp	r3, r2
 8002966:	d011      	beq.n	800298c <HAL_DMA_IRQHandler+0x298>
 8002968:	3218      	adds	r2, #24
 800296a:	4293      	cmp	r3, r2
 800296c:	d00e      	beq.n	800298c <HAL_DMA_IRQHandler+0x298>
 800296e:	3218      	adds	r2, #24
 8002970:	4293      	cmp	r3, r2
 8002972:	d00b      	beq.n	800298c <HAL_DMA_IRQHandler+0x298>
 8002974:	3218      	adds	r2, #24
 8002976:	4293      	cmp	r3, r2
 8002978:	d008      	beq.n	800298c <HAL_DMA_IRQHandler+0x298>
 800297a:	3218      	adds	r2, #24
 800297c:	4293      	cmp	r3, r2
 800297e:	d005      	beq.n	800298c <HAL_DMA_IRQHandler+0x298>
 8002980:	3218      	adds	r2, #24
 8002982:	4293      	cmp	r3, r2
 8002984:	d002      	beq.n	800298c <HAL_DMA_IRQHandler+0x298>
 8002986:	3218      	adds	r2, #24
 8002988:	4293      	cmp	r3, r2
 800298a:	d123      	bne.n	80029d4 <HAL_DMA_IRQHandler+0x2e0>
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8002992:	b34a      	cbz	r2, 80029e8 <HAL_DMA_IRQHandler+0x2f4>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002994:	60a9      	str	r1, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	0350      	lsls	r0, r2, #13
 800299a:	f140 808a 	bpl.w	8002ab2 <HAL_DMA_IRQHandler+0x3be>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	0319      	lsls	r1, r3, #12
 80029a2:	d41d      	bmi.n	80029e0 <HAL_DMA_IRQHandler+0x2ec>
          if(hdma->XferHalfCpltCallback != NULL)
 80029a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80029a6:	e01c      	b.n	80029e2 <HAL_DMA_IRQHandler+0x2ee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80029a8:	6819      	ldr	r1, [r3, #0]
 80029aa:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 80029ae:	e73d      	b.n	800282c <HAL_DMA_IRQHandler+0x138>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80029b0:	6819      	ldr	r1, [r3, #0]
 80029b2:	e77e      	b.n	80028b2 <HAL_DMA_IRQHandler+0x1be>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80029b4:	2101      	movs	r1, #1
 80029b6:	4091      	lsls	r1, r2
 80029b8:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029ba:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80029bc:	f041 0102 	orr.w	r1, r1, #2
 80029c0:	6561      	str	r1, [r4, #84]	@ 0x54
 80029c2:	e776      	b.n	80028b2 <HAL_DMA_IRQHandler+0x1be>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80029c4:	6819      	ldr	r1, [r3, #0]
 80029c6:	e7ac      	b.n	8002922 <HAL_DMA_IRQHandler+0x22e>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80029c8:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029ca:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80029cc:	f041 0104 	orr.w	r1, r1, #4
 80029d0:	6561      	str	r1, [r4, #84]	@ 0x54
 80029d2:	e7a6      	b.n	8002922 <HAL_DMA_IRQHandler+0x22e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	f3c2 0280 	ubfx	r2, r2, #2, #1
 80029da:	e7da      	b.n	8002992 <HAL_DMA_IRQHandler+0x29e>
 80029dc:	40020028 	.word	0x40020028
            if(hdma->XferM1HalfCpltCallback != NULL)
 80029e0:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
          if(hdma->XferHalfCpltCallback != NULL)
 80029e2:	b10b      	cbz	r3, 80029e8 <HAL_DMA_IRQHandler+0x2f4>
            hdma->XferHalfCpltCallback(hdma);
 80029e4:	4620      	mov	r0, r4
 80029e6:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80029e8:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 80029ea:	2020      	movs	r0, #32
 80029ec:	f001 011f 	and.w	r1, r1, #31
 80029f0:	4088      	lsls	r0, r1
 80029f2:	ea10 0f08 	tst.w	r0, r8
 80029f6:	d072      	beq.n	8002ade <HAL_DMA_IRQHandler+0x3ea>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80029f8:	6823      	ldr	r3, [r4, #0]
 80029fa:	42b3      	cmp	r3, r6
 80029fc:	d02d      	beq.n	8002a5a <HAL_DMA_IRQHandler+0x366>
 80029fe:	4a8d      	ldr	r2, [pc, #564]	@ (8002c34 <HAL_DMA_IRQHandler+0x540>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d02a      	beq.n	8002a5a <HAL_DMA_IRQHandler+0x366>
 8002a04:	3218      	adds	r2, #24
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d027      	beq.n	8002a5a <HAL_DMA_IRQHandler+0x366>
 8002a0a:	3218      	adds	r2, #24
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d024      	beq.n	8002a5a <HAL_DMA_IRQHandler+0x366>
 8002a10:	3218      	adds	r2, #24
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d021      	beq.n	8002a5a <HAL_DMA_IRQHandler+0x366>
 8002a16:	3218      	adds	r2, #24
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d01e      	beq.n	8002a5a <HAL_DMA_IRQHandler+0x366>
 8002a1c:	3218      	adds	r2, #24
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d01b      	beq.n	8002a5a <HAL_DMA_IRQHandler+0x366>
 8002a22:	3218      	adds	r2, #24
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d018      	beq.n	8002a5a <HAL_DMA_IRQHandler+0x366>
 8002a28:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d014      	beq.n	8002a5a <HAL_DMA_IRQHandler+0x366>
 8002a30:	3218      	adds	r2, #24
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d011      	beq.n	8002a5a <HAL_DMA_IRQHandler+0x366>
 8002a36:	3218      	adds	r2, #24
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d00e      	beq.n	8002a5a <HAL_DMA_IRQHandler+0x366>
 8002a3c:	3218      	adds	r2, #24
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d00b      	beq.n	8002a5a <HAL_DMA_IRQHandler+0x366>
 8002a42:	3218      	adds	r2, #24
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d008      	beq.n	8002a5a <HAL_DMA_IRQHandler+0x366>
 8002a48:	3218      	adds	r2, #24
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d005      	beq.n	8002a5a <HAL_DMA_IRQHandler+0x366>
 8002a4e:	3218      	adds	r2, #24
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d002      	beq.n	8002a5a <HAL_DMA_IRQHandler+0x366>
 8002a54:	3218      	adds	r2, #24
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d134      	bne.n	8002ac4 <HAL_DMA_IRQHandler+0x3d0>
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8002a60:	2a00      	cmp	r2, #0
 8002a62:	d03c      	beq.n	8002ade <HAL_DMA_IRQHandler+0x3ea>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002a64:	60a8      	str	r0, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a66:	f894 2035 	ldrb.w	r2, [r4, #53]	@ 0x35
 8002a6a:	2a04      	cmp	r2, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a6c:	681a      	ldr	r2, [r3, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a6e:	d12d      	bne.n	8002acc <HAL_DMA_IRQHandler+0x3d8>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a70:	f022 0216 	bic.w	r2, r2, #22
 8002a74:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002a76:	695a      	ldr	r2, [r3, #20]
 8002a78:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a7c:	615a      	str	r2, [r3, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a7e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002a80:	b90a      	cbnz	r2, 8002a86 <HAL_DMA_IRQHandler+0x392>
 8002a82:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8002a84:	b11a      	cbz	r2, 8002a8e <HAL_DMA_IRQHandler+0x39a>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	f022 0208 	bic.w	r2, r2, #8
 8002a8c:	601a      	str	r2, [r3, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002a8e:	233f      	movs	r3, #63	@ 0x3f
 8002a90:	408b      	lsls	r3, r1
 8002a92:	60ab      	str	r3, [r5, #8]
          hdma->State = HAL_DMA_STATE_READY;
 8002a94:	2301      	movs	r3, #1
 8002a96:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
          if(hdma->XferAbortCallback != NULL)
 8002aa0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
      if (hdma->XferErrorCallback != NULL)
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f000 808d 	beq.w	8002bc2 <HAL_DMA_IRQHandler+0x4ce>
        hdma->XferErrorCallback(hdma);
 8002aa8:	4620      	mov	r0, r4
}
 8002aaa:	b002      	add	sp, #8
 8002aac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
 8002ab0:	4718      	bx	r3
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	05d2      	lsls	r2, r2, #23
 8002ab6:	f53f af75 	bmi.w	80029a4 <HAL_DMA_IRQHandler+0x2b0>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	f022 0208 	bic.w	r2, r2, #8
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	e76f      	b.n	80029a4 <HAL_DMA_IRQHandler+0x2b0>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8002aca:	e7c9      	b.n	8002a60 <HAL_DMA_IRQHandler+0x36c>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002acc:	0355      	lsls	r5, r2, #13
 8002ace:	d54d      	bpl.n	8002b6c <HAL_DMA_IRQHandler+0x478>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	0318      	lsls	r0, r3, #12
 8002ad4:	d457      	bmi.n	8002b86 <HAL_DMA_IRQHandler+0x492>
            if(hdma->XferM1CpltCallback != NULL)
 8002ad6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
          if(hdma->XferCpltCallback != NULL)
 8002ad8:	b10b      	cbz	r3, 8002ade <HAL_DMA_IRQHandler+0x3ea>
            hdma->XferCpltCallback(hdma);
 8002ada:	4620      	mov	r0, r4
 8002adc:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ade:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d06e      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0x4ce>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002ae4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002ae6:	07d9      	lsls	r1, r3, #31
 8002ae8:	d53e      	bpl.n	8002b68 <HAL_DMA_IRQHandler+0x474>
        hdma->State = HAL_DMA_STATE_ABORT;
 8002aea:	2304      	movs	r3, #4
 8002aec:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_DMA_DISABLE(hdma);
 8002af0:	6823      	ldr	r3, [r4, #0]
 8002af2:	42b3      	cmp	r3, r6
 8002af4:	d01e      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x440>
 8002af6:	4a4f      	ldr	r2, [pc, #316]	@ (8002c34 <HAL_DMA_IRQHandler+0x540>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d01b      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x440>
 8002afc:	3218      	adds	r2, #24
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d018      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x440>
 8002b02:	3218      	adds	r2, #24
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d015      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x440>
 8002b08:	3218      	adds	r2, #24
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d012      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x440>
 8002b0e:	3218      	adds	r2, #24
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d00f      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x440>
 8002b14:	3218      	adds	r2, #24
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d00c      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x440>
 8002b1a:	3218      	adds	r2, #24
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d009      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x440>
 8002b20:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d005      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x440>
 8002b28:	3218      	adds	r2, #24
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d002      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x440>
 8002b2e:	3218      	adds	r2, #24
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d0ff      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x440>
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b34:	f44f 5116 	mov.w	r1, #9600	@ 0x2580
        __HAL_DMA_DISABLE(hdma);
 8002b38:	681a      	ldr	r2, [r3, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b3a:	fbb7 f1f1 	udiv	r1, r7, r1
        __HAL_DMA_DISABLE(hdma);
 8002b3e:	f022 0201 	bic.w	r2, r2, #1
 8002b42:	601a      	str	r2, [r3, #0]
          if (++count > timeout)
 8002b44:	9a01      	ldr	r2, [sp, #4]
 8002b46:	3201      	adds	r2, #1
 8002b48:	428a      	cmp	r2, r1
 8002b4a:	9201      	str	r2, [sp, #4]
 8002b4c:	d802      	bhi.n	8002b54 <HAL_DMA_IRQHandler+0x460>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	07d2      	lsls	r2, r2, #31
 8002b52:	d4f7      	bmi.n	8002b44 <HAL_DMA_IRQHandler+0x450>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	07df      	lsls	r7, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8002b58:	bf4c      	ite	mi
 8002b5a:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8002b5c:	2301      	movpl	r3, #1
      hdma->State = HAL_DMA_STATE_READY;
 8002b5e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8002b62:	2300      	movs	r3, #0
 8002b64:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      if (hdma->XferErrorCallback != NULL)
 8002b68:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8002b6a:	e79a      	b.n	8002aa2 <HAL_DMA_IRQHandler+0x3ae>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	f412 7280 	ands.w	r2, r2, #256	@ 0x100
 8002b72:	d108      	bne.n	8002b86 <HAL_DMA_IRQHandler+0x492>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002b74:	6819      	ldr	r1, [r3, #0]
 8002b76:	f021 0110 	bic.w	r1, r1, #16
 8002b7a:	6019      	str	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8002b7c:	2301      	movs	r3, #1
            __HAL_UNLOCK(hdma);
 8002b7e:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8002b82:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          if(hdma->XferCpltCallback != NULL)
 8002b86:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002b88:	e7a6      	b.n	8002ad8 <HAL_DMA_IRQHandler+0x3e4>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002b8a:	4a2b      	ldr	r2, [pc, #172]	@ (8002c38 <HAL_DMA_IRQHandler+0x544>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	f43f adf3 	beq.w	8002778 <HAL_DMA_IRQHandler+0x84>
 8002b92:	3214      	adds	r2, #20
 8002b94:	4293      	cmp	r3, r2
 8002b96:	f43f adef 	beq.w	8002778 <HAL_DMA_IRQHandler+0x84>
 8002b9a:	3214      	adds	r2, #20
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	f43f adeb 	beq.w	8002778 <HAL_DMA_IRQHandler+0x84>
 8002ba2:	3214      	adds	r2, #20
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	f43f ade7 	beq.w	8002778 <HAL_DMA_IRQHandler+0x84>
 8002baa:	3214      	adds	r2, #20
 8002bac:	4293      	cmp	r3, r2
 8002bae:	f43f ade3 	beq.w	8002778 <HAL_DMA_IRQHandler+0x84>
 8002bb2:	3214      	adds	r2, #20
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	f43f addf 	beq.w	8002778 <HAL_DMA_IRQHandler+0x84>
 8002bba:	3214      	adds	r2, #20
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	f43f addb 	beq.w	8002778 <HAL_DMA_IRQHandler+0x84>
}
 8002bc2:	b002      	add	sp, #8
 8002bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002bc8:	0697      	lsls	r7, r2, #26
 8002bca:	d403      	bmi.n	8002bd4 <HAL_DMA_IRQHandler+0x4e0>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	f022 0204 	bic.w	r2, r2, #4
 8002bd2:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8002bd4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002bd6:	e764      	b.n	8002aa2 <HAL_DMA_IRQHandler+0x3ae>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002bd8:	2002      	movs	r0, #2
 8002bda:	4088      	lsls	r0, r1
 8002bdc:	ea10 0f0c 	tst.w	r0, ip
 8002be0:	d016      	beq.n	8002c10 <HAL_DMA_IRQHandler+0x51c>
 8002be2:	0796      	lsls	r6, r2, #30
 8002be4:	d514      	bpl.n	8002c10 <HAL_DMA_IRQHandler+0x51c>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002be6:	6068      	str	r0, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002be8:	0410      	lsls	r0, r2, #16
 8002bea:	d503      	bpl.n	8002bf4 <HAL_DMA_IRQHandler+0x500>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002bec:	03d1      	lsls	r1, r2, #15
 8002bee:	d40d      	bmi.n	8002c0c <HAL_DMA_IRQHandler+0x518>
          if(hdma->XferM1CpltCallback != NULL)
 8002bf0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002bf2:	e756      	b.n	8002aa2 <HAL_DMA_IRQHandler+0x3ae>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002bf4:	f012 0220 	ands.w	r2, r2, #32
 8002bf8:	d108      	bne.n	8002c0c <HAL_DMA_IRQHandler+0x518>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002bfa:	6819      	ldr	r1, [r3, #0]
 8002bfc:	f021 010a 	bic.w	r1, r1, #10
 8002c00:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002c02:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8002c04:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8002c08:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        if(hdma->XferCpltCallback != NULL)
 8002c0c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002c0e:	e748      	b.n	8002aa2 <HAL_DMA_IRQHandler+0x3ae>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002c10:	2008      	movs	r0, #8
 8002c12:	4088      	lsls	r0, r1
 8002c14:	ea10 0f0c 	tst.w	r0, ip
 8002c18:	d0d3      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0x4ce>
 8002c1a:	0712      	lsls	r2, r2, #28
 8002c1c:	d5d1      	bpl.n	8002bc2 <HAL_DMA_IRQHandler+0x4ce>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	f022 020e 	bic.w	r2, r2, #14
 8002c24:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002c26:	2301      	movs	r3, #1
 8002c28:	fa03 f101 	lsl.w	r1, r3, r1
 8002c2c:	6069      	str	r1, [r5, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c2e:	6563      	str	r3, [r4, #84]	@ 0x54
 8002c30:	e795      	b.n	8002b5e <HAL_DMA_IRQHandler+0x46a>
 8002c32:	bf00      	nop
 8002c34:	40020028 	.word	0x40020028
 8002c38:	5802541c 	.word	0x5802541c

08002c3c <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c3c:	b530      	push	{r4, r5, lr}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c3e:	6804      	ldr	r4, [r0, #0]
 8002c40:	4d15      	ldr	r5, [pc, #84]	@ (8002c98 <DMA_MultiBufferSetConfig+0x5c>)
  {
    /* Configure DMA Stream data length */
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c42:	6880      	ldr	r0, [r0, #8]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c44:	42ac      	cmp	r4, r5
 8002c46:	d01e      	beq.n	8002c86 <DMA_MultiBufferSetConfig+0x4a>
 8002c48:	3518      	adds	r5, #24
 8002c4a:	42ac      	cmp	r4, r5
 8002c4c:	d01b      	beq.n	8002c86 <DMA_MultiBufferSetConfig+0x4a>
 8002c4e:	3518      	adds	r5, #24
 8002c50:	42ac      	cmp	r4, r5
 8002c52:	d018      	beq.n	8002c86 <DMA_MultiBufferSetConfig+0x4a>
 8002c54:	3518      	adds	r5, #24
 8002c56:	42ac      	cmp	r4, r5
 8002c58:	d015      	beq.n	8002c86 <DMA_MultiBufferSetConfig+0x4a>
 8002c5a:	3518      	adds	r5, #24
 8002c5c:	42ac      	cmp	r4, r5
 8002c5e:	d012      	beq.n	8002c86 <DMA_MultiBufferSetConfig+0x4a>
 8002c60:	3518      	adds	r5, #24
 8002c62:	42ac      	cmp	r4, r5
 8002c64:	d00f      	beq.n	8002c86 <DMA_MultiBufferSetConfig+0x4a>
 8002c66:	3518      	adds	r5, #24
 8002c68:	42ac      	cmp	r4, r5
 8002c6a:	d00c      	beq.n	8002c86 <DMA_MultiBufferSetConfig+0x4a>
 8002c6c:	3518      	adds	r5, #24
 8002c6e:	42ac      	cmp	r4, r5
 8002c70:	d009      	beq.n	8002c86 <DMA_MultiBufferSetConfig+0x4a>
 8002c72:	f505 7556 	add.w	r5, r5, #856	@ 0x358
 8002c76:	42ac      	cmp	r4, r5
 8002c78:	d005      	beq.n	8002c86 <DMA_MultiBufferSetConfig+0x4a>
 8002c7a:	3518      	adds	r5, #24
 8002c7c:	42ac      	cmp	r4, r5
 8002c7e:	d002      	beq.n	8002c86 <DMA_MultiBufferSetConfig+0x4a>
 8002c80:	3518      	adds	r5, #24
 8002c82:	42ac      	cmp	r4, r5
 8002c84:	d0ff      	beq.n	8002c86 <DMA_MultiBufferSetConfig+0x4a>
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c86:	2840      	cmp	r0, #64	@ 0x40
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8002c88:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c8a:	d102      	bne.n	8002c92 <DMA_MultiBufferSetConfig+0x56>
    {
      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8002c8c:	60a2      	str	r2, [r4, #8]

      /* Configure DMA Stream source address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8002c8e:	60e1      	str	r1, [r4, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8002c90:	bd30      	pop	{r4, r5, pc}
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 8002c92:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 8002c94:	60e2      	str	r2, [r4, #12]
}
 8002c96:	e7fb      	b.n	8002c90 <DMA_MultiBufferSetConfig+0x54>
 8002c98:	40020010 	.word	0x40020010

08002c9c <HAL_DMAEx_MultiBufferStart_IT>:
{
 8002c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c9e:	4605      	mov	r5, r0
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002ca0:	6880      	ldr	r0, [r0, #8]
 8002ca2:	2880      	cmp	r0, #128	@ 0x80
 8002ca4:	d104      	bne.n	8002cb0 <HAL_DMAEx_MultiBufferStart_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002ca6:	f44f 7380 	mov.w	r3, #256	@ 0x100
    return HAL_ERROR;
 8002caa:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002cac:	656b      	str	r3, [r5, #84]	@ 0x54
    status = HAL_ERROR;
 8002cae:	e1c5      	b.n	800303c <HAL_DMAEx_MultiBufferStart_IT+0x3a0>
  __HAL_LOCK(hdma);
 8002cb0:	f895 0034 	ldrb.w	r0, [r5, #52]	@ 0x34
 8002cb4:	2801      	cmp	r0, #1
 8002cb6:	f000 81ca 	beq.w	800304e <HAL_DMAEx_MultiBufferStart_IT+0x3b2>
 8002cba:	2001      	movs	r0, #1
 8002cbc:	f885 0034 	strb.w	r0, [r5, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002cc0:	f895 0035 	ldrb.w	r0, [r5, #53]	@ 0x35
 8002cc4:	2801      	cmp	r0, #1
 8002cc6:	f040 81bf 	bne.w	8003048 <HAL_DMAEx_MultiBufferStart_IT+0x3ac>
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cca:	2002      	movs	r0, #2
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ccc:	682c      	ldr	r4, [r5, #0]
 8002cce:	4e7f      	ldr	r6, [pc, #508]	@ (8002ecc <HAL_DMAEx_MultiBufferStart_IT+0x230>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cd0:	f885 0035 	strb.w	r0, [r5, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cd4:	2000      	movs	r0, #0
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002cd6:	42b4      	cmp	r4, r6
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cd8:	6568      	str	r0, [r5, #84]	@ 0x54
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002cda:	e9d5 c716 	ldrd	ip, r7, [r5, #88]	@ 0x58
 8002cde:	f007 071f 	and.w	r7, r7, #31
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ce2:	f000 80e9 	beq.w	8002eb8 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002ce6:	487a      	ldr	r0, [pc, #488]	@ (8002ed0 <HAL_DMAEx_MultiBufferStart_IT+0x234>)
 8002ce8:	4284      	cmp	r4, r0
 8002cea:	f000 80e5 	beq.w	8002eb8 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002cee:	3018      	adds	r0, #24
 8002cf0:	4284      	cmp	r4, r0
 8002cf2:	f000 80e1 	beq.w	8002eb8 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002cf6:	3018      	adds	r0, #24
 8002cf8:	4284      	cmp	r4, r0
 8002cfa:	f000 80dd 	beq.w	8002eb8 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002cfe:	3018      	adds	r0, #24
 8002d00:	4284      	cmp	r4, r0
 8002d02:	f000 80d9 	beq.w	8002eb8 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002d06:	3018      	adds	r0, #24
 8002d08:	4284      	cmp	r4, r0
 8002d0a:	f000 80d5 	beq.w	8002eb8 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002d0e:	3018      	adds	r0, #24
 8002d10:	4284      	cmp	r4, r0
 8002d12:	f000 80d1 	beq.w	8002eb8 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002d16:	3018      	adds	r0, #24
 8002d18:	4284      	cmp	r4, r0
 8002d1a:	f000 80cd 	beq.w	8002eb8 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002d1e:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 8002d22:	4284      	cmp	r4, r0
 8002d24:	f000 80c8 	beq.w	8002eb8 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002d28:	3018      	adds	r0, #24
 8002d2a:	4284      	cmp	r4, r0
 8002d2c:	f000 80c4 	beq.w	8002eb8 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002d30:	3018      	adds	r0, #24
 8002d32:	4284      	cmp	r4, r0
 8002d34:	f000 80c0 	beq.w	8002eb8 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002d38:	3018      	adds	r0, #24
 8002d3a:	4284      	cmp	r4, r0
 8002d3c:	f000 80bc 	beq.w	8002eb8 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002d40:	3018      	adds	r0, #24
 8002d42:	4284      	cmp	r4, r0
 8002d44:	f000 80b8 	beq.w	8002eb8 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002d48:	3018      	adds	r0, #24
 8002d4a:	4284      	cmp	r4, r0
 8002d4c:	f000 80b4 	beq.w	8002eb8 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002d50:	3018      	adds	r0, #24
 8002d52:	4284      	cmp	r4, r0
 8002d54:	f000 80b0 	beq.w	8002eb8 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002d58:	3018      	adds	r0, #24
 8002d5a:	4284      	cmp	r4, r0
 8002d5c:	f000 80ac 	beq.w	8002eb8 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8002d60:	6820      	ldr	r0, [r4, #0]
 8002d62:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 8002d66:	f040 0020 	orr.w	r0, r0, #32
 8002d6a:	6020      	str	r0, [r4, #0]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 8002d6c:	6123      	str	r3, [r4, #16]
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002d6e:	2301      	movs	r3, #1
 8002d70:	40bb      	lsls	r3, r7
 8002d72:	f8cc 3004 	str.w	r3, [ip, #4]
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d76:	9b06      	ldr	r3, [sp, #24]
 8002d78:	4628      	mov	r0, r5
 8002d7a:	f7ff ff5f 	bl	8002c3c <DMA_MultiBufferSetConfig>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d7e:	42b4      	cmp	r4, r6
 8002d80:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8002d82:	f000 80a9 	beq.w	8002ed8 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002d86:	4b52      	ldr	r3, [pc, #328]	@ (8002ed0 <HAL_DMAEx_MultiBufferStart_IT+0x234>)
 8002d88:	429c      	cmp	r4, r3
 8002d8a:	f000 80a5 	beq.w	8002ed8 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002d8e:	3318      	adds	r3, #24
 8002d90:	429c      	cmp	r4, r3
 8002d92:	f000 80a1 	beq.w	8002ed8 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002d96:	3318      	adds	r3, #24
 8002d98:	429c      	cmp	r4, r3
 8002d9a:	f000 809d 	beq.w	8002ed8 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002d9e:	3318      	adds	r3, #24
 8002da0:	429c      	cmp	r4, r3
 8002da2:	f000 8099 	beq.w	8002ed8 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002da6:	3318      	adds	r3, #24
 8002da8:	429c      	cmp	r4, r3
 8002daa:	f000 8095 	beq.w	8002ed8 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002dae:	3318      	adds	r3, #24
 8002db0:	429c      	cmp	r4, r3
 8002db2:	f000 8091 	beq.w	8002ed8 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002db6:	3318      	adds	r3, #24
 8002db8:	429c      	cmp	r4, r3
 8002dba:	f000 808d 	beq.w	8002ed8 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002dbe:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8002dc2:	429c      	cmp	r4, r3
 8002dc4:	f000 8088 	beq.w	8002ed8 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002dc8:	3318      	adds	r3, #24
 8002dca:	429c      	cmp	r4, r3
 8002dcc:	f000 8084 	beq.w	8002ed8 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002dd0:	3318      	adds	r3, #24
 8002dd2:	429c      	cmp	r4, r3
 8002dd4:	f000 8080 	beq.w	8002ed8 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002dd8:	3318      	adds	r3, #24
 8002dda:	429c      	cmp	r4, r3
 8002ddc:	d07c      	beq.n	8002ed8 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002dde:	3318      	adds	r3, #24
 8002de0:	429c      	cmp	r4, r3
 8002de2:	d079      	beq.n	8002ed8 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002de4:	3318      	adds	r3, #24
 8002de6:	429c      	cmp	r4, r3
 8002de8:	d076      	beq.n	8002ed8 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002dea:	3318      	adds	r3, #24
 8002dec:	429c      	cmp	r4, r3
 8002dee:	d073      	beq.n	8002ed8 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002df0:	3318      	adds	r3, #24
 8002df2:	429c      	cmp	r4, r3
 8002df4:	d070      	beq.n	8002ed8 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002df6:	4b37      	ldr	r3, [pc, #220]	@ (8002ed4 <HAL_DMAEx_MultiBufferStart_IT+0x238>)
 8002df8:	429c      	cmp	r4, r3
 8002dfa:	d06d      	beq.n	8002ed8 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002dfc:	3314      	adds	r3, #20
 8002dfe:	429c      	cmp	r4, r3
 8002e00:	d06a      	beq.n	8002ed8 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e02:	3314      	adds	r3, #20
 8002e04:	429c      	cmp	r4, r3
 8002e06:	d067      	beq.n	8002ed8 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e08:	3314      	adds	r3, #20
 8002e0a:	429c      	cmp	r4, r3
 8002e0c:	d064      	beq.n	8002ed8 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e0e:	3314      	adds	r3, #20
 8002e10:	429c      	cmp	r4, r3
 8002e12:	d061      	beq.n	8002ed8 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e14:	3314      	adds	r3, #20
 8002e16:	429c      	cmp	r4, r3
 8002e18:	d05e      	beq.n	8002ed8 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e1a:	3314      	adds	r3, #20
 8002e1c:	429c      	cmp	r4, r3
 8002e1e:	d05b      	beq.n	8002ed8 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e20:	3314      	adds	r3, #20
 8002e22:	429c      	cmp	r4, r3
 8002e24:	d058      	beq.n	8002ed8 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002e26:	6823      	ldr	r3, [r4, #0]
 8002e28:	f023 030e 	bic.w	r3, r3, #14
 8002e2c:	f043 030a 	orr.w	r3, r3, #10
 8002e30:	6023      	str	r3, [r4, #0]
      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e32:	2a00      	cmp	r2, #0
 8002e34:	f040 80d9 	bne.w	8002fea <HAL_DMAEx_MultiBufferStart_IT+0x34e>
 8002e38:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f040 80d5 	bne.w	8002fea <HAL_DMAEx_MultiBufferStart_IT+0x34e>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e40:	4b24      	ldr	r3, [pc, #144]	@ (8002ed4 <HAL_DMAEx_MultiBufferStart_IT+0x238>)
 8002e42:	429c      	cmp	r4, r3
 8002e44:	f040 80d9 	bne.w	8002ffa <HAL_DMAEx_MultiBufferStart_IT+0x35e>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002e48:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	03d2      	lsls	r2, r2, #15
 8002e4e:	f100 80f6 	bmi.w	800303e <HAL_DMAEx_MultiBufferStart_IT+0x3a2>
      if(hdma->DMAmuxRequestGen != 0U)
 8002e52:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 8002e54:	b11b      	cbz	r3, 8002e5e <HAL_DMAEx_MultiBufferStart_IT+0x1c2>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e5c:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8002e5e:	42b4      	cmp	r4, r6
 8002e60:	f000 80e7 	beq.w	8003032 <HAL_DMAEx_MultiBufferStart_IT+0x396>
 8002e64:	4b1a      	ldr	r3, [pc, #104]	@ (8002ed0 <HAL_DMAEx_MultiBufferStart_IT+0x234>)
 8002e66:	429c      	cmp	r4, r3
 8002e68:	f000 80e3 	beq.w	8003032 <HAL_DMAEx_MultiBufferStart_IT+0x396>
 8002e6c:	3318      	adds	r3, #24
 8002e6e:	429c      	cmp	r4, r3
 8002e70:	f000 80df 	beq.w	8003032 <HAL_DMAEx_MultiBufferStart_IT+0x396>
 8002e74:	3318      	adds	r3, #24
 8002e76:	429c      	cmp	r4, r3
 8002e78:	f000 80db 	beq.w	8003032 <HAL_DMAEx_MultiBufferStart_IT+0x396>
 8002e7c:	3318      	adds	r3, #24
 8002e7e:	429c      	cmp	r4, r3
 8002e80:	f000 80d7 	beq.w	8003032 <HAL_DMAEx_MultiBufferStart_IT+0x396>
 8002e84:	3318      	adds	r3, #24
 8002e86:	429c      	cmp	r4, r3
 8002e88:	f000 80d3 	beq.w	8003032 <HAL_DMAEx_MultiBufferStart_IT+0x396>
 8002e8c:	3318      	adds	r3, #24
 8002e8e:	429c      	cmp	r4, r3
 8002e90:	f000 80cf 	beq.w	8003032 <HAL_DMAEx_MultiBufferStart_IT+0x396>
 8002e94:	3318      	adds	r3, #24
 8002e96:	429c      	cmp	r4, r3
 8002e98:	f000 80cb 	beq.w	8003032 <HAL_DMAEx_MultiBufferStart_IT+0x396>
 8002e9c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8002ea0:	429c      	cmp	r4, r3
 8002ea2:	f000 80c6 	beq.w	8003032 <HAL_DMAEx_MultiBufferStart_IT+0x396>
 8002ea6:	3318      	adds	r3, #24
 8002ea8:	429c      	cmp	r4, r3
 8002eaa:	f000 80c2 	beq.w	8003032 <HAL_DMAEx_MultiBufferStart_IT+0x396>
 8002eae:	3318      	adds	r3, #24
 8002eb0:	429c      	cmp	r4, r3
 8002eb2:	f000 80be 	beq.w	8003032 <HAL_DMAEx_MultiBufferStart_IT+0x396>
 8002eb6:	e0bc      	b.n	8003032 <HAL_DMAEx_MultiBufferStart_IT+0x396>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8002eb8:	6820      	ldr	r0, [r4, #0]
 8002eba:	f440 2080 	orr.w	r0, r0, #262144	@ 0x40000
 8002ebe:	6020      	str	r0, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8002ec0:	6123      	str	r3, [r4, #16]
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002ec2:	233f      	movs	r3, #63	@ 0x3f
 8002ec4:	40bb      	lsls	r3, r7
 8002ec6:	f8cc 3008 	str.w	r3, [ip, #8]
 8002eca:	e754      	b.n	8002d76 <HAL_DMAEx_MultiBufferStart_IT+0xda>
 8002ecc:	40020010 	.word	0x40020010
 8002ed0:	40020028 	.word	0x40020028
 8002ed4:	58025408 	.word	0x58025408
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ed8:	e9d5 3119 	ldrd	r3, r1, [r5, #100]	@ 0x64
 8002edc:	6059      	str	r1, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8002ede:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 8002ee0:	b113      	cbz	r3, 8002ee8 <HAL_DMAEx_MultiBufferStart_IT+0x24c>
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ee2:	e9d5 311c 	ldrd	r3, r1, [r5, #112]	@ 0x70
 8002ee6:	6059      	str	r1, [r3, #4]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ee8:	42b4      	cmp	r4, r6
 8002eea:	d02e      	beq.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002eec:	4b59      	ldr	r3, [pc, #356]	@ (8003054 <HAL_DMAEx_MultiBufferStart_IT+0x3b8>)
 8002eee:	429c      	cmp	r4, r3
 8002ef0:	d02b      	beq.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002ef2:	3318      	adds	r3, #24
 8002ef4:	429c      	cmp	r4, r3
 8002ef6:	d028      	beq.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002ef8:	3318      	adds	r3, #24
 8002efa:	429c      	cmp	r4, r3
 8002efc:	d025      	beq.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002efe:	3318      	adds	r3, #24
 8002f00:	429c      	cmp	r4, r3
 8002f02:	d022      	beq.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002f04:	3318      	adds	r3, #24
 8002f06:	429c      	cmp	r4, r3
 8002f08:	d01f      	beq.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002f0a:	3318      	adds	r3, #24
 8002f0c:	429c      	cmp	r4, r3
 8002f0e:	d01c      	beq.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002f10:	3318      	adds	r3, #24
 8002f12:	429c      	cmp	r4, r3
 8002f14:	d019      	beq.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002f16:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8002f1a:	429c      	cmp	r4, r3
 8002f1c:	d015      	beq.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002f1e:	3318      	adds	r3, #24
 8002f20:	429c      	cmp	r4, r3
 8002f22:	d012      	beq.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002f24:	3318      	adds	r3, #24
 8002f26:	429c      	cmp	r4, r3
 8002f28:	d00f      	beq.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002f2a:	3318      	adds	r3, #24
 8002f2c:	429c      	cmp	r4, r3
 8002f2e:	d00c      	beq.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002f30:	3318      	adds	r3, #24
 8002f32:	429c      	cmp	r4, r3
 8002f34:	d009      	beq.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002f36:	3318      	adds	r3, #24
 8002f38:	429c      	cmp	r4, r3
 8002f3a:	d006      	beq.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002f3c:	3318      	adds	r3, #24
 8002f3e:	429c      	cmp	r4, r3
 8002f40:	d003      	beq.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002f42:	3318      	adds	r3, #24
 8002f44:	429c      	cmp	r4, r3
 8002f46:	f47f af6e 	bne.w	8002e26 <HAL_DMAEx_MultiBufferStart_IT+0x18a>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002f4a:	6823      	ldr	r3, [r4, #0]
 8002f4c:	f023 031e 	bic.w	r3, r3, #30
 8002f50:	f043 0316 	orr.w	r3, r3, #22
 8002f54:	6023      	str	r3, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8002f56:	6963      	ldr	r3, [r4, #20]
 8002f58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f5c:	6163      	str	r3, [r4, #20]
      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f5e:	b90a      	cbnz	r2, 8002f64 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 8002f60:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8002f62:	b11b      	cbz	r3, 8002f6c <HAL_DMAEx_MultiBufferStart_IT+0x2d0>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002f64:	6823      	ldr	r3, [r4, #0]
 8002f66:	f043 0308 	orr.w	r3, r3, #8
 8002f6a:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f6c:	42b4      	cmp	r4, r6
 8002f6e:	f43f af6b 	beq.w	8002e48 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8002f72:	4b38      	ldr	r3, [pc, #224]	@ (8003054 <HAL_DMAEx_MultiBufferStart_IT+0x3b8>)
 8002f74:	429c      	cmp	r4, r3
 8002f76:	f43f af67 	beq.w	8002e48 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8002f7a:	3318      	adds	r3, #24
 8002f7c:	429c      	cmp	r4, r3
 8002f7e:	f43f af63 	beq.w	8002e48 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8002f82:	3318      	adds	r3, #24
 8002f84:	429c      	cmp	r4, r3
 8002f86:	f43f af5f 	beq.w	8002e48 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8002f8a:	3318      	adds	r3, #24
 8002f8c:	429c      	cmp	r4, r3
 8002f8e:	f43f af5b 	beq.w	8002e48 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8002f92:	3318      	adds	r3, #24
 8002f94:	429c      	cmp	r4, r3
 8002f96:	f43f af57 	beq.w	8002e48 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8002f9a:	3318      	adds	r3, #24
 8002f9c:	429c      	cmp	r4, r3
 8002f9e:	f43f af53 	beq.w	8002e48 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8002fa2:	3318      	adds	r3, #24
 8002fa4:	429c      	cmp	r4, r3
 8002fa6:	f43f af4f 	beq.w	8002e48 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8002faa:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8002fae:	429c      	cmp	r4, r3
 8002fb0:	f43f af4a 	beq.w	8002e48 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8002fb4:	3318      	adds	r3, #24
 8002fb6:	429c      	cmp	r4, r3
 8002fb8:	f43f af46 	beq.w	8002e48 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8002fbc:	3318      	adds	r3, #24
 8002fbe:	429c      	cmp	r4, r3
 8002fc0:	f43f af42 	beq.w	8002e48 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8002fc4:	3318      	adds	r3, #24
 8002fc6:	429c      	cmp	r4, r3
 8002fc8:	f43f af3e 	beq.w	8002e48 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8002fcc:	3318      	adds	r3, #24
 8002fce:	429c      	cmp	r4, r3
 8002fd0:	f43f af3a 	beq.w	8002e48 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8002fd4:	3318      	adds	r3, #24
 8002fd6:	429c      	cmp	r4, r3
 8002fd8:	f43f af36 	beq.w	8002e48 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8002fdc:	3318      	adds	r3, #24
 8002fde:	429c      	cmp	r4, r3
 8002fe0:	f43f af32 	beq.w	8002e48 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8002fe4:	3318      	adds	r3, #24
 8002fe6:	429c      	cmp	r4, r3
 8002fe8:	e004      	b.n	8002ff4 <HAL_DMAEx_MultiBufferStart_IT+0x358>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002fea:	6823      	ldr	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002fec:	42b4      	cmp	r4, r6
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002fee:	f043 0304 	orr.w	r3, r3, #4
 8002ff2:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ff4:	f47f af24 	bne.w	8002e40 <HAL_DMAEx_MultiBufferStart_IT+0x1a4>
 8002ff8:	e726      	b.n	8002e48 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8002ffa:	4b17      	ldr	r3, [pc, #92]	@ (8003058 <HAL_DMAEx_MultiBufferStart_IT+0x3bc>)
 8002ffc:	429c      	cmp	r4, r3
 8002ffe:	f43f af23 	beq.w	8002e48 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8003002:	3314      	adds	r3, #20
 8003004:	429c      	cmp	r4, r3
 8003006:	f43f af1f 	beq.w	8002e48 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 800300a:	3314      	adds	r3, #20
 800300c:	429c      	cmp	r4, r3
 800300e:	f43f af1b 	beq.w	8002e48 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8003012:	3314      	adds	r3, #20
 8003014:	429c      	cmp	r4, r3
 8003016:	f43f af17 	beq.w	8002e48 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 800301a:	3314      	adds	r3, #20
 800301c:	429c      	cmp	r4, r3
 800301e:	f43f af13 	beq.w	8002e48 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8003022:	3314      	adds	r3, #20
 8003024:	429c      	cmp	r4, r3
 8003026:	f43f af0f 	beq.w	8002e48 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 800302a:	3314      	adds	r3, #20
 800302c:	429c      	cmp	r4, r3
 800302e:	f43f af0b 	beq.w	8002e48 <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
    __HAL_DMA_ENABLE(hdma);
 8003032:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003034:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8003036:	f043 0301 	orr.w	r3, r3, #1
 800303a:	6023      	str	r3, [r4, #0]
}
 800303c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	e704      	b.n	8002e52 <HAL_DMAEx_MultiBufferStart_IT+0x1b6>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003048:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800304c:	e62d      	b.n	8002caa <HAL_DMAEx_MultiBufferStart_IT+0xe>
  __HAL_LOCK(hdma);
 800304e:	2002      	movs	r0, #2
 8003050:	e7f4      	b.n	800303c <HAL_DMAEx_MultiBufferStart_IT+0x3a0>
 8003052:	bf00      	nop
 8003054:	40020028 	.word	0x40020028
 8003058:	5802541c 	.word	0x5802541c

0800305c <HAL_DMAEx_ChangeMemory>:
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800305c:	6803      	ldr	r3, [r0, #0]
 800305e:	4814      	ldr	r0, [pc, #80]	@ (80030b0 <HAL_DMAEx_ChangeMemory+0x54>)
 8003060:	4283      	cmp	r3, r0
 8003062:	d01e      	beq.n	80030a2 <HAL_DMAEx_ChangeMemory+0x46>
 8003064:	3018      	adds	r0, #24
 8003066:	4283      	cmp	r3, r0
 8003068:	d01b      	beq.n	80030a2 <HAL_DMAEx_ChangeMemory+0x46>
 800306a:	3018      	adds	r0, #24
 800306c:	4283      	cmp	r3, r0
 800306e:	d018      	beq.n	80030a2 <HAL_DMAEx_ChangeMemory+0x46>
 8003070:	3018      	adds	r0, #24
 8003072:	4283      	cmp	r3, r0
 8003074:	d015      	beq.n	80030a2 <HAL_DMAEx_ChangeMemory+0x46>
 8003076:	3018      	adds	r0, #24
 8003078:	4283      	cmp	r3, r0
 800307a:	d012      	beq.n	80030a2 <HAL_DMAEx_ChangeMemory+0x46>
 800307c:	3018      	adds	r0, #24
 800307e:	4283      	cmp	r3, r0
 8003080:	d00f      	beq.n	80030a2 <HAL_DMAEx_ChangeMemory+0x46>
 8003082:	3018      	adds	r0, #24
 8003084:	4283      	cmp	r3, r0
 8003086:	d00c      	beq.n	80030a2 <HAL_DMAEx_ChangeMemory+0x46>
 8003088:	3018      	adds	r0, #24
 800308a:	4283      	cmp	r3, r0
 800308c:	d009      	beq.n	80030a2 <HAL_DMAEx_ChangeMemory+0x46>
 800308e:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 8003092:	4283      	cmp	r3, r0
 8003094:	d005      	beq.n	80030a2 <HAL_DMAEx_ChangeMemory+0x46>
 8003096:	3018      	adds	r0, #24
 8003098:	4283      	cmp	r3, r0
 800309a:	d002      	beq.n	80030a2 <HAL_DMAEx_ChangeMemory+0x46>
 800309c:	3018      	adds	r0, #24
 800309e:	4283      	cmp	r3, r0
 80030a0:	d0ff      	beq.n	80030a2 <HAL_DMAEx_ChangeMemory+0x46>
    if(memory == MEMORY0)
 80030a2:	b912      	cbnz	r2, 80030aa <HAL_DMAEx_ChangeMemory+0x4e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 80030a4:	60d9      	str	r1, [r3, #12]
}
 80030a6:	2000      	movs	r0, #0
 80030a8:	4770      	bx	lr
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 80030aa:	6119      	str	r1, [r3, #16]
 80030ac:	e7fb      	b.n	80030a6 <HAL_DMAEx_ChangeMemory+0x4a>
 80030ae:	bf00      	nop
 80030b0:	40020010 	.word	0x40020010

080030b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 80030b8:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ba:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 8003280 <HAL_GPIO_Init+0x1cc>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030be:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80030c2:	680a      	ldr	r2, [r1, #0]
 80030c4:	fa32 f503 	lsrs.w	r5, r2, r3
 80030c8:	d102      	bne.n	80030d0 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 80030ca:	b003      	add	sp, #12
 80030cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80030d0:	2501      	movs	r5, #1
 80030d2:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00U)
 80030d6:	ea18 0202 	ands.w	r2, r8, r2
 80030da:	f000 80bb 	beq.w	8003254 <HAL_GPIO_Init+0x1a0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030de:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80030e0:	2703      	movs	r7, #3
 80030e2:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030e6:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80030ea:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030ee:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80030f0:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030f4:	2f01      	cmp	r7, #1
 80030f6:	d834      	bhi.n	8003162 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 80030f8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80030fa:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030fe:	68cf      	ldr	r7, [r1, #12]
 8003100:	fa07 f70e 	lsl.w	r7, r7, lr
 8003104:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8003108:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800310a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800310c:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003110:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8003114:	409f      	lsls	r7, r3
 8003116:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 800311a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800311c:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800311e:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003120:	ea07 080c 	and.w	r8, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003124:	688f      	ldr	r7, [r1, #8]
 8003126:	fa07 f70e 	lsl.w	r7, r7, lr
 800312a:	ea47 0708 	orr.w	r7, r7, r8
      GPIOx->PUPDR = temp;
 800312e:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003130:	d119      	bne.n	8003166 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 8003132:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003136:	f003 0a07 	and.w	sl, r3, #7
 800313a:	f04f 0b0f 	mov.w	fp, #15
 800313e:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8003142:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8003146:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800314a:	fa0b fb0a 	lsl.w	fp, fp, sl
 800314e:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003152:	690f      	ldr	r7, [r1, #16]
 8003154:	fa07 f70a 	lsl.w	r7, r7, sl
 8003158:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3U] = temp;
 800315c:	f8c8 7020 	str.w	r7, [r8, #32]
 8003160:	e001      	b.n	8003166 <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003162:	2d03      	cmp	r5, #3
 8003164:	d1da      	bne.n	800311c <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 8003166:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003168:	fa05 f50e 	lsl.w	r5, r5, lr
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800316c:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003170:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003174:	ea45 0507 	orr.w	r5, r5, r7
      GPIOx->MODER = temp;
 8003178:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800317a:	d06b      	beq.n	8003254 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800317c:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
 8003180:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003184:	f003 0c03 	and.w	ip, r3, #3
 8003188:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800318c:	f045 0502 	orr.w	r5, r5, #2
 8003190:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003194:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003198:	f8c9 50f4 	str.w	r5, [r9, #244]	@ 0xf4
 800319c:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 80031a0:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80031a4:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031a8:	f005 0502 	and.w	r5, r5, #2
 80031ac:	9501      	str	r5, [sp, #4]
 80031ae:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80031b0:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80031b2:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80031b6:	4d31      	ldr	r5, [pc, #196]	@ (800327c <HAL_GPIO_Init+0x1c8>)
 80031b8:	42a8      	cmp	r0, r5
 80031ba:	d04d      	beq.n	8003258 <HAL_GPIO_Init+0x1a4>
 80031bc:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80031c0:	42a8      	cmp	r0, r5
 80031c2:	d04b      	beq.n	800325c <HAL_GPIO_Init+0x1a8>
 80031c4:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80031c8:	42a8      	cmp	r0, r5
 80031ca:	d049      	beq.n	8003260 <HAL_GPIO_Init+0x1ac>
 80031cc:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80031d0:	42a8      	cmp	r0, r5
 80031d2:	d047      	beq.n	8003264 <HAL_GPIO_Init+0x1b0>
 80031d4:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80031d8:	42a8      	cmp	r0, r5
 80031da:	d045      	beq.n	8003268 <HAL_GPIO_Init+0x1b4>
 80031dc:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80031e0:	42a8      	cmp	r0, r5
 80031e2:	d043      	beq.n	800326c <HAL_GPIO_Init+0x1b8>
 80031e4:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80031e8:	42a8      	cmp	r0, r5
 80031ea:	d041      	beq.n	8003270 <HAL_GPIO_Init+0x1bc>
 80031ec:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80031f0:	42a8      	cmp	r0, r5
 80031f2:	d03f      	beq.n	8003274 <HAL_GPIO_Init+0x1c0>
 80031f4:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80031f8:	42a8      	cmp	r0, r5
 80031fa:	d03d      	beq.n	8003278 <HAL_GPIO_Init+0x1c4>
 80031fc:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003200:	42a8      	cmp	r0, r5
 8003202:	bf14      	ite	ne
 8003204:	250a      	movne	r5, #10
 8003206:	2509      	moveq	r5, #9
 8003208:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800320c:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003210:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003214:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 8003216:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 800321a:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800321c:	bf0c      	ite	eq
 800321e:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8003220:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003222:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        EXTI->RTSR1 = temp;
 8003226:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8003228:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 800322a:	bf0c      	ite	eq
 800322c:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800322e:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003230:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        EXTI->FTSR1 = temp;
 8003234:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8003236:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
        temp &= ~(iocurrent);
 800323a:	bf0c      	ite	eq
 800323c:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800323e:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003240:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8003242:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8003246:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
        temp &= ~(iocurrent);
 800324a:	bf54      	ite	pl
 800324c:	403d      	andpl	r5, r7
          temp |= iocurrent;
 800324e:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8003250:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
    position++;
 8003254:	3301      	adds	r3, #1
 8003256:	e734      	b.n	80030c2 <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003258:	2500      	movs	r5, #0
 800325a:	e7d5      	b.n	8003208 <HAL_GPIO_Init+0x154>
 800325c:	2501      	movs	r5, #1
 800325e:	e7d3      	b.n	8003208 <HAL_GPIO_Init+0x154>
 8003260:	2502      	movs	r5, #2
 8003262:	e7d1      	b.n	8003208 <HAL_GPIO_Init+0x154>
 8003264:	2503      	movs	r5, #3
 8003266:	e7cf      	b.n	8003208 <HAL_GPIO_Init+0x154>
 8003268:	2504      	movs	r5, #4
 800326a:	e7cd      	b.n	8003208 <HAL_GPIO_Init+0x154>
 800326c:	2505      	movs	r5, #5
 800326e:	e7cb      	b.n	8003208 <HAL_GPIO_Init+0x154>
 8003270:	2506      	movs	r5, #6
 8003272:	e7c9      	b.n	8003208 <HAL_GPIO_Init+0x154>
 8003274:	2507      	movs	r5, #7
 8003276:	e7c7      	b.n	8003208 <HAL_GPIO_Init+0x154>
 8003278:	2508      	movs	r5, #8
 800327a:	e7c5      	b.n	8003208 <HAL_GPIO_Init+0x154>
 800327c:	58020000 	.word	0x58020000
 8003280:	58024400 	.word	0x58024400

08003284 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003284:	b10a      	cbz	r2, 800328a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003286:	6181      	str	r1, [r0, #24]
  }
}
 8003288:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800328a:	0409      	lsls	r1, r1, #16
 800328c:	e7fb      	b.n	8003286 <HAL_GPIO_WritePin+0x2>

0800328e <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800328e:	6803      	ldr	r3, [r0, #0]
 8003290:	699a      	ldr	r2, [r3, #24]
 8003292:	0791      	lsls	r1, r2, #30
 8003294:	d501      	bpl.n	800329a <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003296:	2200      	movs	r2, #0
 8003298:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800329a:	699a      	ldr	r2, [r3, #24]
 800329c:	07d2      	lsls	r2, r2, #31
 800329e:	d403      	bmi.n	80032a8 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80032a0:	699a      	ldr	r2, [r3, #24]
 80032a2:	f042 0201 	orr.w	r2, r2, #1
 80032a6:	619a      	str	r2, [r3, #24]
  }
}
 80032a8:	4770      	bx	lr
	...

080032ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80032ac:	b530      	push	{r4, r5, lr}
 80032ae:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032b0:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80032b4:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032b6:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 80032b8:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 80032be:	4a05      	ldr	r2, [pc, #20]	@ (80032d4 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032c0:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 80032c2:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032c6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 80032ca:	ea20 0002 	bic.w	r0, r0, r2
 80032ce:	4303      	orrs	r3, r0
 80032d0:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80032d2:	bd30      	pop	{r4, r5, pc}
 80032d4:	03ff63ff 	.word	0x03ff63ff

080032d8 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 80032d8:	6803      	ldr	r3, [r0, #0]
{
 80032da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 80032de:	699c      	ldr	r4, [r3, #24]
{
 80032e0:	4605      	mov	r5, r0
 80032e2:	460f      	mov	r7, r1
 80032e4:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80032e6:	f014 0410 	ands.w	r4, r4, #16
 80032ea:	d06f      	beq.n	80033cc <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 80032ec:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032ee:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 80032f0:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032f2:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80032f4:	682b      	ldr	r3, [r5, #0]
 80032f6:	699a      	ldr	r2, [r3, #24]
 80032f8:	0690      	lsls	r0, r2, #26
 80032fa:	d461      	bmi.n	80033c0 <I2C_IsErrorOccurred+0xe8>
 80032fc:	f1b8 0f00 	cmp.w	r8, #0
 8003300:	d035      	beq.n	800336e <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 8003302:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 8003306:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 8003308:	682e      	ldr	r6, [r5, #0]
 800330a:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800330c:	05d9      	lsls	r1, r3, #23
 800330e:	d505      	bpl.n	800331c <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003310:	f44f 7280 	mov.w	r2, #256	@ 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8003314:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 8003318:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800331a:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800331c:	055a      	lsls	r2, r3, #21
 800331e:	d505      	bpl.n	800332c <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003320:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8003324:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 8003328:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800332a:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800332c:	059b      	lsls	r3, r3, #22
 800332e:	d54f      	bpl.n	80033d0 <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003330:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8003334:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003338:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 800333a:	4628      	mov	r0, r5
 800333c:	f7ff ffa7 	bl	800328e <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8003340:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 8003342:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8003344:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8003348:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 800334c:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8003350:	f023 0301 	bic.w	r3, r3, #1
 8003354:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 8003356:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8003358:	4323      	orrs	r3, r4
 800335a:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800335c:	2320      	movs	r3, #32
 800335e:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003362:	2300      	movs	r3, #0
 8003364:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8003368:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 800336c:	e032      	b.n	80033d4 <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 800336e:	1c7a      	adds	r2, r7, #1
 8003370:	d0c1      	beq.n	80032f6 <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003372:	f7fe f8ab 	bl	80014cc <HAL_GetTick>
 8003376:	1b80      	subs	r0, r0, r6
 8003378:	42b8      	cmp	r0, r7
 800337a:	d801      	bhi.n	8003380 <I2C_IsErrorOccurred+0xa8>
 800337c:	2f00      	cmp	r7, #0
 800337e:	d1b9      	bne.n	80032f4 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003380:	682b      	ldr	r3, [r5, #0]
 8003382:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8003384:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003388:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 800338a:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800338c:	0400      	lsls	r0, r0, #16
 800338e:	d50a      	bpl.n	80033a6 <I2C_IsErrorOccurred+0xce>
 8003390:	0449      	lsls	r1, r1, #17
 8003392:	d408      	bmi.n	80033a6 <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 8003394:	2a20      	cmp	r2, #32
 8003396:	d006      	beq.n	80033a6 <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800339e:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 80033a0:	f7fe f894 	bl	80014cc <HAL_GetTick>
 80033a4:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033a6:	682b      	ldr	r3, [r5, #0]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	069b      	lsls	r3, r3, #26
 80033ac:	d4a2      	bmi.n	80032f4 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80033ae:	f7fe f88d 	bl	80014cc <HAL_GetTick>
 80033b2:	1b80      	subs	r0, r0, r6
 80033b4:	2819      	cmp	r0, #25
 80033b6:	d9f6      	bls.n	80033a6 <I2C_IsErrorOccurred+0xce>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80033b8:	2420      	movs	r4, #32
              status = HAL_ERROR;
 80033ba:	f04f 0801 	mov.w	r8, #1
 80033be:	e799      	b.n	80032f4 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 80033c0:	f1b8 0f00 	cmp.w	r8, #0
 80033c4:	d19d      	bne.n	8003302 <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033c6:	2220      	movs	r2, #32
 80033c8:	61da      	str	r2, [r3, #28]
 80033ca:	e79a      	b.n	8003302 <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 80033cc:	4620      	mov	r0, r4
 80033ce:	e79b      	b.n	8003308 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 80033d0:	2800      	cmp	r0, #0
 80033d2:	d1b2      	bne.n	800333a <I2C_IsErrorOccurred+0x62>
}
 80033d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080033d8 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80033d8:	b570      	push	{r4, r5, r6, lr}
 80033da:	4604      	mov	r4, r0
 80033dc:	460d      	mov	r5, r1
 80033de:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033e0:	6823      	ldr	r3, [r4, #0]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	079b      	lsls	r3, r3, #30
 80033e6:	d501      	bpl.n	80033ec <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 80033e8:	2000      	movs	r0, #0
 80033ea:	e01f      	b.n	800342c <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ec:	4632      	mov	r2, r6
 80033ee:	4629      	mov	r1, r5
 80033f0:	4620      	mov	r0, r4
 80033f2:	f7ff ff71 	bl	80032d8 <I2C_IsErrorOccurred>
 80033f6:	b9c0      	cbnz	r0, 800342a <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 80033f8:	1c6a      	adds	r2, r5, #1
 80033fa:	d0f1      	beq.n	80033e0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033fc:	f7fe f866 	bl	80014cc <HAL_GetTick>
 8003400:	1b80      	subs	r0, r0, r6
 8003402:	42a8      	cmp	r0, r5
 8003404:	d801      	bhi.n	800340a <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8003406:	2d00      	cmp	r5, #0
 8003408:	d1ea      	bne.n	80033e0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800340a:	6823      	ldr	r3, [r4, #0]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	f013 0302 	ands.w	r3, r3, #2
 8003412:	d1e5      	bne.n	80033e0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003414:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 8003416:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800341a:	f042 0220 	orr.w	r2, r2, #32
 800341e:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003420:	2220      	movs	r2, #32
 8003422:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003426:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 800342a:	2001      	movs	r0, #1
}
 800342c:	bd70      	pop	{r4, r5, r6, pc}

0800342e <I2C_WaitOnFlagUntilTimeout>:
{
 800342e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003432:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8003436:	4604      	mov	r4, r0
 8003438:	460f      	mov	r7, r1
 800343a:	4616      	mov	r6, r2
 800343c:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800343e:	6823      	ldr	r3, [r4, #0]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	ea37 0303 	bics.w	r3, r7, r3
 8003446:	bf0c      	ite	eq
 8003448:	2301      	moveq	r3, #1
 800344a:	2300      	movne	r3, #0
 800344c:	42b3      	cmp	r3, r6
 800344e:	d001      	beq.n	8003454 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8003450:	2000      	movs	r0, #0
 8003452:	e025      	b.n	80034a0 <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003454:	4642      	mov	r2, r8
 8003456:	4629      	mov	r1, r5
 8003458:	4620      	mov	r0, r4
 800345a:	f7ff ff3d 	bl	80032d8 <I2C_IsErrorOccurred>
 800345e:	b9f0      	cbnz	r0, 800349e <I2C_WaitOnFlagUntilTimeout+0x70>
    if (Timeout != HAL_MAX_DELAY)
 8003460:	1c6b      	adds	r3, r5, #1
 8003462:	d0ec      	beq.n	800343e <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003464:	f7fe f832 	bl	80014cc <HAL_GetTick>
 8003468:	eba0 0008 	sub.w	r0, r0, r8
 800346c:	42a8      	cmp	r0, r5
 800346e:	d801      	bhi.n	8003474 <I2C_WaitOnFlagUntilTimeout+0x46>
 8003470:	2d00      	cmp	r5, #0
 8003472:	d1e4      	bne.n	800343e <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003474:	6823      	ldr	r3, [r4, #0]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	ea37 0303 	bics.w	r3, r7, r3
 800347c:	bf0c      	ite	eq
 800347e:	2301      	moveq	r3, #1
 8003480:	2300      	movne	r3, #0
 8003482:	42b3      	cmp	r3, r6
 8003484:	d1db      	bne.n	800343e <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003486:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003488:	f043 0320 	orr.w	r3, r3, #32
 800348c:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800348e:	2320      	movs	r3, #32
 8003490:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003494:	2300      	movs	r3, #0
 8003496:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 800349a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800349e:	2001      	movs	r0, #1
}
 80034a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080034a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80034a4:	b570      	push	{r4, r5, r6, lr}
 80034a6:	4604      	mov	r4, r0
 80034a8:	460d      	mov	r5, r1
 80034aa:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034ac:	6823      	ldr	r3, [r4, #0]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	069b      	lsls	r3, r3, #26
 80034b2:	d501      	bpl.n	80034b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 80034b4:	2000      	movs	r0, #0
 80034b6:	e01d      	b.n	80034f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034b8:	4632      	mov	r2, r6
 80034ba:	4629      	mov	r1, r5
 80034bc:	4620      	mov	r0, r4
 80034be:	f7ff ff0b 	bl	80032d8 <I2C_IsErrorOccurred>
 80034c2:	b9b0      	cbnz	r0, 80034f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034c4:	f7fe f802 	bl	80014cc <HAL_GetTick>
 80034c8:	1b80      	subs	r0, r0, r6
 80034ca:	42a8      	cmp	r0, r5
 80034cc:	d801      	bhi.n	80034d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 80034ce:	2d00      	cmp	r5, #0
 80034d0:	d1ec      	bne.n	80034ac <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80034d2:	6823      	ldr	r3, [r4, #0]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	f013 0320 	ands.w	r3, r3, #32
 80034da:	d1e7      	bne.n	80034ac <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034dc:	6c62      	ldr	r2, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80034de:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034e2:	f042 0220 	orr.w	r2, r2, #32
 80034e6:	6462      	str	r2, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034e8:	2220      	movs	r2, #32
 80034ea:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ee:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 80034f2:	2001      	movs	r0, #1
}
 80034f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080034f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80034f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034fc:	4605      	mov	r5, r0
 80034fe:	460e      	mov	r6, r1
 8003500:	4617      	mov	r7, r2
  HAL_StatusTypeDef status = HAL_OK;
 8003502:	2400      	movs	r4, #0
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003504:	f04f 0810 	mov.w	r8, #16
        I2C_RESET_CR2(hi2c);
 8003508:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8003598 <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800350c:	682b      	ldr	r3, [r5, #0]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	075b      	lsls	r3, r3, #29
 8003512:	d400      	bmi.n	8003516 <I2C_WaitOnRXNEFlagUntilTimeout+0x1e>
 8003514:	b114      	cbz	r4, 800351c <I2C_WaitOnRXNEFlagUntilTimeout+0x24>
}
 8003516:	4620      	mov	r0, r4
 8003518:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800351c:	463a      	mov	r2, r7
 800351e:	4631      	mov	r1, r6
 8003520:	4628      	mov	r0, r5
 8003522:	f7ff fed9 	bl	80032d8 <I2C_IsErrorOccurred>
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003526:	682b      	ldr	r3, [r5, #0]
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003528:	4604      	mov	r4, r0
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800352a:	699a      	ldr	r2, [r3, #24]
 800352c:	0690      	lsls	r0, r2, #26
 800352e:	d40c      	bmi.n	800354a <I2C_WaitOnRXNEFlagUntilTimeout+0x52>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003530:	3c00      	subs	r4, #0
 8003532:	bf18      	it	ne
 8003534:	2401      	movne	r4, #1
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003536:	f7fd ffc9 	bl	80014cc <HAL_GetTick>
 800353a:	1bc0      	subs	r0, r0, r7
 800353c:	42b0      	cmp	r0, r6
 800353e:	d801      	bhi.n	8003544 <I2C_WaitOnRXNEFlagUntilTimeout+0x4c>
 8003540:	2e00      	cmp	r6, #0
 8003542:	d1e3      	bne.n	800350c <I2C_WaitOnRXNEFlagUntilTimeout+0x14>
 8003544:	b1d4      	cbz	r4, 800357c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
{
 8003546:	2401      	movs	r4, #1
 8003548:	e7e0      	b.n	800350c <I2C_WaitOnRXNEFlagUntilTimeout+0x14>
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800354a:	b99c      	cbnz	r4, 8003574 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800354c:	699a      	ldr	r2, [r3, #24]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800354e:	699a      	ldr	r2, [r3, #24]
 8003550:	06d1      	lsls	r1, r2, #27
 8003552:	d511      	bpl.n	8003578 <I2C_WaitOnRXNEFlagUntilTimeout+0x80>
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003554:	2204      	movs	r2, #4
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003556:	2120      	movs	r1, #32
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003558:	f8c3 801c 	str.w	r8, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800355c:	646a      	str	r2, [r5, #68]	@ 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800355e:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8003560:	685a      	ldr	r2, [r3, #4]
 8003562:	ea02 0209 	and.w	r2, r2, r9
 8003566:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 8003568:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
        __HAL_UNLOCK(hi2c);
 800356c:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003570:	f885 4042 	strb.w	r4, [r5, #66]	@ 0x42
{
 8003574:	2401      	movs	r4, #1
 8003576:	e7de      	b.n	8003536 <I2C_WaitOnRXNEFlagUntilTimeout+0x3e>
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003578:	646c      	str	r4, [r5, #68]	@ 0x44
 800357a:	e7dc      	b.n	8003536 <I2C_WaitOnRXNEFlagUntilTimeout+0x3e>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800357c:	682b      	ldr	r3, [r5, #0]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	075a      	lsls	r2, r3, #29
 8003582:	d4c3      	bmi.n	800350c <I2C_WaitOnRXNEFlagUntilTimeout+0x14>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003584:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8003586:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800358a:	f043 0320 	orr.w	r3, r3, #32
 800358e:	646b      	str	r3, [r5, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003590:	2320      	movs	r3, #32
 8003592:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
        status = HAL_ERROR;
 8003596:	e7d6      	b.n	8003546 <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
 8003598:	fe00e800 	.word	0xfe00e800

0800359c <HAL_I2C_Init>:
{
 800359c:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800359e:	4604      	mov	r4, r0
 80035a0:	2800      	cmp	r0, #0
 80035a2:	d04e      	beq.n	8003642 <HAL_I2C_Init+0xa6>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035a4:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80035a8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80035ac:	b91b      	cbnz	r3, 80035b6 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80035ae:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 80035b2:	f7fd fd9d 	bl	80010f0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80035b6:	2324      	movs	r3, #36	@ 0x24
 80035b8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 80035bc:	6823      	ldr	r3, [r4, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	f022 0201 	bic.w	r2, r2, #1
 80035c4:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80035c6:	6862      	ldr	r2, [r4, #4]
 80035c8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80035cc:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80035d4:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80035d6:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035da:	2901      	cmp	r1, #1
 80035dc:	d106      	bne.n	80035ec <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80035de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035e2:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035ea:	e007      	b.n	80035fc <HAL_I2C_Init+0x60>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80035ec:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80035f0:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80035f2:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80035f4:	d1f6      	bne.n	80035e4 <HAL_I2C_Init+0x48>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80035fc:	605a      	str	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035fe:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8003606:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800360a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800360c:	68da      	ldr	r2, [r3, #12]
 800360e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003612:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003614:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8003618:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 800361a:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800361c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003620:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003622:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8003626:	430a      	orrs	r2, r1
 8003628:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	f042 0201 	orr.w	r2, r2, #1
 8003630:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8003632:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003634:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003636:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800363a:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800363c:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8003640:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003642:	2001      	movs	r0, #1
 8003644:	e7fc      	b.n	8003640 <HAL_I2C_Init+0xa4>
	...

08003648 <HAL_I2C_Master_Transmit>:
{
 8003648:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800364c:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800364e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8003652:	4604      	mov	r4, r0
 8003654:	460e      	mov	r6, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003656:	2b20      	cmp	r3, #32
{
 8003658:	4690      	mov	r8, r2
 800365a:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800365c:	f040 809b 	bne.w	8003796 <HAL_I2C_Master_Transmit+0x14e>
    __HAL_LOCK(hi2c);
 8003660:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8003664:	2b01      	cmp	r3, #1
 8003666:	f000 8096 	beq.w	8003796 <HAL_I2C_Master_Transmit+0x14e>
 800366a:	f04f 0a01 	mov.w	sl, #1
 800366e:	f880 a040 	strb.w	sl, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8003672:	f7fd ff2b 	bl	80014cc <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003676:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8003678:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800367a:	9000      	str	r0, [sp, #0]
 800367c:	4652      	mov	r2, sl
 800367e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003682:	4620      	mov	r0, r4
 8003684:	f7ff fed3 	bl	800342e <I2C_WaitOnFlagUntilTimeout>
 8003688:	b118      	cbz	r0, 8003692 <HAL_I2C_Master_Transmit+0x4a>
      return HAL_ERROR;
 800368a:	2001      	movs	r0, #1
}
 800368c:	b002      	add	sp, #8
 800368e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003692:	2321      	movs	r3, #33	@ 0x21
    hi2c->pBuffPtr  = pData;
 8003694:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
    hi2c->XferISR   = NULL;
 8003698:	6360      	str	r0, [r4, #52]	@ 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800369a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800369e:	2310      	movs	r3, #16
 80036a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036a4:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 80036a6:	f8a4 902a 	strh.w	r9, [r4, #42]	@ 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036aa:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	2bff      	cmp	r3, #255	@ 0xff
 80036b0:	d818      	bhi.n	80036e4 <HAL_I2C_Master_Transmit+0x9c>
      hi2c->XferSize = hi2c->XferCount;
 80036b2:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      xfermode = I2C_AUTOEND_MODE;
 80036b4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 80036b8:	b292      	uxth	r2, r2
      xfermode = I2C_AUTOEND_MODE;
 80036ba:	8522      	strh	r2, [r4, #40]	@ 0x28
    if (hi2c->XferSize > 0U)
 80036bc:	b1b2      	cbz	r2, 80036ec <HAL_I2C_Master_Transmit+0xa4>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80036be:	46c4      	mov	ip, r8
 80036c0:	6821      	ldr	r1, [r4, #0]
      hi2c->XferSize--;
 80036c2:	3a01      	subs	r2, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80036c4:	f81c 0b01 	ldrb.w	r0, [ip], #1
      hi2c->XferSize--;
 80036c8:	b292      	uxth	r2, r2
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80036ca:	6288      	str	r0, [r1, #40]	@ 0x28
      hi2c->XferCount--;
 80036cc:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80036ce:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80036d0:	3201      	adds	r2, #1
      hi2c->XferCount--;
 80036d2:	3901      	subs	r1, #1
      hi2c->pBuffPtr++;
 80036d4:	f8c4 c024 	str.w	ip, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80036d8:	b289      	uxth	r1, r1
 80036da:	8561      	strh	r1, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80036dc:	492f      	ldr	r1, [pc, #188]	@ (800379c <HAL_I2C_Master_Transmit+0x154>)
 80036de:	9100      	str	r1, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036e0:	b2d2      	uxtb	r2, r2
 80036e2:	e005      	b.n	80036f0 <HAL_I2C_Master_Transmit+0xa8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80036e4:	22ff      	movs	r2, #255	@ 0xff
      xfermode = I2C_RELOAD_MODE;
 80036e6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80036ea:	e7e6      	b.n	80036ba <HAL_I2C_Master_Transmit+0x72>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80036ec:	492b      	ldr	r1, [pc, #172]	@ (800379c <HAL_I2C_Master_Transmit+0x154>)
 80036ee:	9100      	str	r1, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036f0:	4631      	mov	r1, r6
 80036f2:	4620      	mov	r0, r4
 80036f4:	f7ff fdda 	bl	80032ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80036f8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036fa:	462a      	mov	r2, r5
 80036fc:	4639      	mov	r1, r7
 80036fe:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8003700:	b29b      	uxth	r3, r3
 8003702:	b9bb      	cbnz	r3, 8003734 <HAL_I2C_Master_Transmit+0xec>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003704:	f7ff fece 	bl	80034a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003708:	2800      	cmp	r0, #0
 800370a:	d1be      	bne.n	800368a <HAL_I2C_Master_Transmit+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800370c:	6823      	ldr	r3, [r4, #0]
 800370e:	2120      	movs	r1, #32
 8003710:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8003718:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 800371c:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8003720:	f022 0201 	bic.w	r2, r2, #1
 8003724:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003726:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800372a:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800372e:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8003732:	e7ab      	b.n	800368c <HAL_I2C_Master_Transmit+0x44>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003734:	f7ff fe50 	bl	80033d8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003738:	2800      	cmp	r0, #0
 800373a:	d1a6      	bne.n	800368a <HAL_I2C_Master_Transmit+0x42>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800373c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800373e:	6822      	ldr	r2, [r4, #0]
 8003740:	f813 1b01 	ldrb.w	r1, [r3], #1
 8003744:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8003746:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8003748:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800374a:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800374c:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800374e:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8003750:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8003752:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8003754:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003756:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8003758:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800375a:	b29b      	uxth	r3, r3
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0cb      	beq.n	80036f8 <HAL_I2C_Master_Transmit+0xb0>
 8003760:	2a00      	cmp	r2, #0
 8003762:	d1c9      	bne.n	80036f8 <HAL_I2C_Master_Transmit+0xb0>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003764:	463b      	mov	r3, r7
 8003766:	2180      	movs	r1, #128	@ 0x80
 8003768:	4620      	mov	r0, r4
 800376a:	9500      	str	r5, [sp, #0]
 800376c:	f7ff fe5f 	bl	800342e <I2C_WaitOnFlagUntilTimeout>
 8003770:	2800      	cmp	r0, #0
 8003772:	d18a      	bne.n	800368a <HAL_I2C_Master_Transmit+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003774:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003776:	b29b      	uxth	r3, r3
 8003778:	2bff      	cmp	r3, #255	@ 0xff
 800377a:	d905      	bls.n	8003788 <HAL_I2C_Master_Transmit+0x140>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800377c:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800377e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003782:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003784:	9000      	str	r0, [sp, #0]
 8003786:	e7b3      	b.n	80036f0 <HAL_I2C_Master_Transmit+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 8003788:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800378a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800378e:	b292      	uxth	r2, r2
 8003790:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003792:	9000      	str	r0, [sp, #0]
 8003794:	e7a4      	b.n	80036e0 <HAL_I2C_Master_Transmit+0x98>
    __HAL_LOCK(hi2c);
 8003796:	2002      	movs	r0, #2
 8003798:	e778      	b.n	800368c <HAL_I2C_Master_Transmit+0x44>
 800379a:	bf00      	nop
 800379c:	80002000 	.word	0x80002000

080037a0 <HAL_I2C_Master_Receive>:
{
 80037a0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80037a4:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80037a6:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 80037aa:	4604      	mov	r4, r0
 80037ac:	460e      	mov	r6, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 80037ae:	2b20      	cmp	r3, #32
{
 80037b0:	4691      	mov	r9, r2
 80037b2:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80037b4:	f040 8087 	bne.w	80038c6 <HAL_I2C_Master_Receive+0x126>
    __HAL_LOCK(hi2c);
 80037b8:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80037bc:	2b01      	cmp	r3, #1
 80037be:	f000 8082 	beq.w	80038c6 <HAL_I2C_Master_Receive+0x126>
 80037c2:	f04f 0a01 	mov.w	sl, #1
 80037c6:	f880 a040 	strb.w	sl, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 80037ca:	f7fd fe7f 	bl	80014cc <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037ce:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 80037d0:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037d2:	9000      	str	r0, [sp, #0]
 80037d4:	4652      	mov	r2, sl
 80037d6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80037da:	4620      	mov	r0, r4
 80037dc:	f7ff fe27 	bl	800342e <I2C_WaitOnFlagUntilTimeout>
 80037e0:	b118      	cbz	r0, 80037ea <HAL_I2C_Master_Receive+0x4a>
      return HAL_ERROR;
 80037e2:	2001      	movs	r0, #1
}
 80037e4:	b002      	add	sp, #8
 80037e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037ea:	2322      	movs	r3, #34	@ 0x22
    hi2c->pBuffPtr  = pData;
 80037ec:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    hi2c->XferISR   = NULL;
 80037f0:	6360      	str	r0, [r4, #52]	@ 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037f2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80037f6:	2310      	movs	r3, #16
 80037f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037fc:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 80037fe:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003802:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003804:	b29b      	uxth	r3, r3
 8003806:	2bff      	cmp	r3, #255	@ 0xff
 8003808:	4b30      	ldr	r3, [pc, #192]	@ (80038cc <HAL_I2C_Master_Receive+0x12c>)
 800380a:	d926      	bls.n	800385a <HAL_I2C_Master_Receive+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800380c:	22ff      	movs	r2, #255	@ 0xff
 800380e:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003810:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003812:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003816:	4631      	mov	r1, r6
 8003818:	4620      	mov	r0, r4
 800381a:	f7ff fd47 	bl	80032ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800381e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003820:	462a      	mov	r2, r5
 8003822:	4639      	mov	r1, r7
 8003824:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8003826:	b29b      	uxth	r3, r3
 8003828:	b9fb      	cbnz	r3, 800386a <HAL_I2C_Master_Receive+0xca>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800382a:	f7ff fe3b 	bl	80034a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800382e:	2800      	cmp	r0, #0
 8003830:	d1d7      	bne.n	80037e2 <HAL_I2C_Master_Receive+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003832:	6823      	ldr	r3, [r4, #0]
 8003834:	2120      	movs	r1, #32
 8003836:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 800383e:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8003842:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8003846:	f022 0201 	bic.w	r2, r2, #1
 800384a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800384c:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8003850:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003854:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8003858:	e7c4      	b.n	80037e4 <HAL_I2C_Master_Receive+0x44>
      hi2c->XferSize = hi2c->XferCount;
 800385a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800385c:	b292      	uxth	r2, r2
 800385e:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003860:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003862:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003866:	b2d2      	uxtb	r2, r2
 8003868:	e7d5      	b.n	8003816 <HAL_I2C_Master_Receive+0x76>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800386a:	f7ff fe45 	bl	80034f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800386e:	2800      	cmp	r0, #0
 8003870:	d1b7      	bne.n	80037e2 <HAL_I2C_Master_Receive+0x42>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003872:	6823      	ldr	r3, [r4, #0]
 8003874:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003876:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003878:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800387a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 800387c:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800387e:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8003880:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8003882:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8003884:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8003886:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8003888:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800388a:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800388c:	b29b      	uxth	r3, r3
 800388e:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003890:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003892:	b29b      	uxth	r3, r3
 8003894:	2b00      	cmp	r3, #0
 8003896:	d0c2      	beq.n	800381e <HAL_I2C_Master_Receive+0x7e>
 8003898:	2a00      	cmp	r2, #0
 800389a:	d1c0      	bne.n	800381e <HAL_I2C_Master_Receive+0x7e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800389c:	463b      	mov	r3, r7
 800389e:	2180      	movs	r1, #128	@ 0x80
 80038a0:	4620      	mov	r0, r4
 80038a2:	9500      	str	r5, [sp, #0]
 80038a4:	f7ff fdc3 	bl	800342e <I2C_WaitOnFlagUntilTimeout>
 80038a8:	2800      	cmp	r0, #0
 80038aa:	d19a      	bne.n	80037e2 <HAL_I2C_Master_Receive+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038ac:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	2bff      	cmp	r3, #255	@ 0xff
 80038b2:	d903      	bls.n	80038bc <HAL_I2C_Master_Receive+0x11c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038b4:	22ff      	movs	r2, #255	@ 0xff
 80038b6:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038b8:	9000      	str	r0, [sp, #0]
 80038ba:	e7aa      	b.n	8003812 <HAL_I2C_Master_Receive+0x72>
          hi2c->XferSize = hi2c->XferCount;
 80038bc:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80038be:	b292      	uxth	r2, r2
 80038c0:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038c2:	9000      	str	r0, [sp, #0]
 80038c4:	e7cd      	b.n	8003862 <HAL_I2C_Master_Receive+0xc2>
    __HAL_LOCK(hi2c);
 80038c6:	2002      	movs	r0, #2
 80038c8:	e78c      	b.n	80037e4 <HAL_I2C_Master_Receive+0x44>
 80038ca:	bf00      	nop
 80038cc:	80002400 	.word	0x80002400

080038d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038d0:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038d2:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 80038d6:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80038d8:	2a20      	cmp	r2, #32
 80038da:	b2d4      	uxtb	r4, r2
 80038dc:	d11c      	bne.n	8003918 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038de:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 80038e2:	2a01      	cmp	r2, #1
 80038e4:	d018      	beq.n	8003918 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038e6:	2224      	movs	r2, #36	@ 0x24
 80038e8:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038ec:	6802      	ldr	r2, [r0, #0]
 80038ee:	6810      	ldr	r0, [r2, #0]
 80038f0:	f020 0001 	bic.w	r0, r0, #1
 80038f4:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038f6:	6810      	ldr	r0, [r2, #0]
 80038f8:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 80038fc:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80038fe:	6810      	ldr	r0, [r2, #0]
 8003900:	4301      	orrs	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003902:	2000      	movs	r0, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 8003904:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003906:	6811      	ldr	r1, [r2, #0]
 8003908:	f041 0101 	orr.w	r1, r1, #1
 800390c:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800390e:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8003912:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003916:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 8003918:	2002      	movs	r0, #2
 800391a:	e7fc      	b.n	8003916 <HAL_I2CEx_ConfigAnalogFilter+0x46>

0800391c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800391c:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800391e:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 8003922:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003924:	2a20      	cmp	r2, #32
 8003926:	b2d4      	uxtb	r4, r2
 8003928:	d11b      	bne.n	8003962 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800392a:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800392e:	2a01      	cmp	r2, #1
 8003930:	d017      	beq.n	8003962 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003932:	2224      	movs	r2, #36	@ 0x24
 8003934:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003938:	6802      	ldr	r2, [r0, #0]
 800393a:	6810      	ldr	r0, [r2, #0]
 800393c:	f020 0001 	bic.w	r0, r0, #1
 8003940:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003942:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003944:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003948:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800394c:	2000      	movs	r0, #0
    hi2c->Instance->CR1 = tmpreg;
 800394e:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003950:	6811      	ldr	r1, [r2, #0]
 8003952:	f041 0101 	orr.w	r1, r1, #1
 8003956:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003958:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800395c:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003960:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 8003962:	2002      	movs	r0, #2
 8003964:	e7fc      	b.n	8003960 <HAL_I2CEx_ConfigDigitalFilter+0x44>
	...

08003968 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003968:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800396a:	4c10      	ldr	r4, [pc, #64]	@ (80039ac <HAL_PWREx_ConfigSupply+0x44>)
 800396c:	68e3      	ldr	r3, [r4, #12]
 800396e:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003972:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003974:	d105      	bne.n	8003982 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003976:	f003 0307 	and.w	r3, r3, #7
 800397a:	1a18      	subs	r0, r3, r0
 800397c:	bf18      	it	ne
 800397e:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8003980:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003982:	f023 0307 	bic.w	r3, r3, #7
 8003986:	4318      	orrs	r0, r3
 8003988:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 800398a:	f7fd fd9f 	bl	80014cc <HAL_GetTick>
 800398e:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003990:	6863      	ldr	r3, [r4, #4]
 8003992:	049b      	lsls	r3, r3, #18
 8003994:	d501      	bpl.n	800399a <HAL_PWREx_ConfigSupply+0x32>
      return HAL_OK;
 8003996:	2000      	movs	r0, #0
 8003998:	e7f2      	b.n	8003980 <HAL_PWREx_ConfigSupply+0x18>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800399a:	f7fd fd97 	bl	80014cc <HAL_GetTick>
 800399e:	1b40      	subs	r0, r0, r5
 80039a0:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80039a4:	d9f4      	bls.n	8003990 <HAL_PWREx_ConfigSupply+0x28>
      return HAL_ERROR;
 80039a6:	2001      	movs	r0, #1
 80039a8:	e7ea      	b.n	8003980 <HAL_PWREx_ConfigSupply+0x18>
 80039aa:	bf00      	nop
 80039ac:	58024800 	.word	0x58024800

080039b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039b2:	4604      	mov	r4, r0
 80039b4:	2800      	cmp	r0, #0
 80039b6:	d074      	beq.n	8003aa2 <HAL_RCC_OscConfig+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039b8:	6803      	ldr	r3, [r0, #0]
 80039ba:	07d8      	lsls	r0, r3, #31
 80039bc:	d45e      	bmi.n	8003a7c <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039be:	6823      	ldr	r3, [r4, #0]
 80039c0:	0799      	lsls	r1, r3, #30
 80039c2:	f100 80ad 	bmi.w	8003b20 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80039c6:	6823      	ldr	r3, [r4, #0]
 80039c8:	06da      	lsls	r2, r3, #27
 80039ca:	d527      	bpl.n	8003a1c <HAL_RCC_OscConfig+0x6c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039cc:	4a9c      	ldr	r2, [pc, #624]	@ (8003c40 <HAL_RCC_OscConfig+0x290>)
 80039ce:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80039d0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80039d6:	2b08      	cmp	r3, #8
 80039d8:	d007      	beq.n	80039ea <HAL_RCC_OscConfig+0x3a>
 80039da:	2b18      	cmp	r3, #24
 80039dc:	f040 8103 	bne.w	8003be6 <HAL_RCC_OscConfig+0x236>
 80039e0:	f001 0303 	and.w	r3, r1, #3
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	f040 80fe 	bne.w	8003be6 <HAL_RCC_OscConfig+0x236>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039ea:	6813      	ldr	r3, [r2, #0]
 80039ec:	05db      	lsls	r3, r3, #23
 80039ee:	d502      	bpl.n	80039f6 <HAL_RCC_OscConfig+0x46>
 80039f0:	69e3      	ldr	r3, [r4, #28]
 80039f2:	2b80      	cmp	r3, #128	@ 0x80
 80039f4:	d155      	bne.n	8003aa2 <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039f6:	f7fd fd81 	bl	80014fc <HAL_GetREVID>
 80039fa:	f241 0303 	movw	r3, #4099	@ 0x1003
 80039fe:	6a21      	ldr	r1, [r4, #32]
 8003a00:	4298      	cmp	r0, r3
 8003a02:	4b8f      	ldr	r3, [pc, #572]	@ (8003c40 <HAL_RCC_OscConfig+0x290>)
 8003a04:	f200 80e8 	bhi.w	8003bd8 <HAL_RCC_OscConfig+0x228>
 8003a08:	685a      	ldr	r2, [r3, #4]
 8003a0a:	2920      	cmp	r1, #32
 8003a0c:	f022 42f8 	bic.w	r2, r2, #2080374784	@ 0x7c000000
 8003a10:	bf0c      	ite	eq
 8003a12:	f042 4280 	orreq.w	r2, r2, #1073741824	@ 0x40000000
 8003a16:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 8003a1a:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a1c:	6823      	ldr	r3, [r4, #0]
 8003a1e:	0719      	lsls	r1, r3, #28
 8003a20:	f100 8123 	bmi.w	8003c6a <HAL_RCC_OscConfig+0x2ba>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a24:	6823      	ldr	r3, [r4, #0]
 8003a26:	069a      	lsls	r2, r3, #26
 8003a28:	f100 8144 	bmi.w	8003cb4 <HAL_RCC_OscConfig+0x304>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a2c:	6823      	ldr	r3, [r4, #0]
 8003a2e:	075d      	lsls	r5, r3, #29
 8003a30:	d51e      	bpl.n	8003a70 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003a32:	4d84      	ldr	r5, [pc, #528]	@ (8003c44 <HAL_RCC_OscConfig+0x294>)
 8003a34:	682b      	ldr	r3, [r5, #0]
 8003a36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a3a:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a3c:	f7fd fd46 	bl	80014cc <HAL_GetTick>
 8003a40:	4606      	mov	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a42:	682b      	ldr	r3, [r5, #0]
 8003a44:	05da      	lsls	r2, r3, #23
 8003a46:	f140 815a 	bpl.w	8003cfe <HAL_RCC_OscConfig+0x34e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a4a:	68a3      	ldr	r3, [r4, #8]
 8003a4c:	4d7c      	ldr	r5, [pc, #496]	@ (8003c40 <HAL_RCC_OscConfig+0x290>)
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	f040 815c 	bne.w	8003d0c <HAL_RCC_OscConfig+0x35c>
 8003a54:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003a56:	f043 0301 	orr.w	r3, r3, #1
 8003a5a:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a5c:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8003a60:	f7fd fd34 	bl	80014cc <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a64:	4e76      	ldr	r6, [pc, #472]	@ (8003c40 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 8003a66:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a68:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8003a6a:	079b      	lsls	r3, r3, #30
 8003a6c:	f140 8174 	bpl.w	8003d58 <HAL_RCC_OscConfig+0x3a8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a70:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003a72:	2900      	cmp	r1, #0
 8003a74:	f040 8177 	bne.w	8003d66 <HAL_RCC_OscConfig+0x3b6>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 8003a78:	2000      	movs	r0, #0
 8003a7a:	e02b      	b.n	8003ad4 <HAL_RCC_OscConfig+0x124>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a7c:	4a70      	ldr	r2, [pc, #448]	@ (8003c40 <HAL_RCC_OscConfig+0x290>)
 8003a7e:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a80:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003a86:	2b10      	cmp	r3, #16
 8003a88:	d005      	beq.n	8003a96 <HAL_RCC_OscConfig+0xe6>
 8003a8a:	2b18      	cmp	r3, #24
 8003a8c:	d10b      	bne.n	8003aa6 <HAL_RCC_OscConfig+0xf6>
 8003a8e:	f001 0303 	and.w	r3, r1, #3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d107      	bne.n	8003aa6 <HAL_RCC_OscConfig+0xf6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a96:	6813      	ldr	r3, [r2, #0]
 8003a98:	039a      	lsls	r2, r3, #14
 8003a9a:	d590      	bpl.n	80039be <HAL_RCC_OscConfig+0xe>
 8003a9c:	6863      	ldr	r3, [r4, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d18d      	bne.n	80039be <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8003aa2:	2001      	movs	r0, #1
 8003aa4:	e016      	b.n	8003ad4 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aa6:	6863      	ldr	r3, [r4, #4]
 8003aa8:	4d65      	ldr	r5, [pc, #404]	@ (8003c40 <HAL_RCC_OscConfig+0x290>)
 8003aaa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003aae:	d112      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x126>
 8003ab0:	682b      	ldr	r3, [r5, #0]
 8003ab2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ab6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003ab8:	f7fd fd08 	bl	80014cc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003abc:	4e60      	ldr	r6, [pc, #384]	@ (8003c40 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 8003abe:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ac0:	6833      	ldr	r3, [r6, #0]
 8003ac2:	039b      	lsls	r3, r3, #14
 8003ac4:	f53f af7b 	bmi.w	80039be <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ac8:	f7fd fd00 	bl	80014cc <HAL_GetTick>
 8003acc:	1b40      	subs	r0, r0, r5
 8003ace:	2864      	cmp	r0, #100	@ 0x64
 8003ad0:	d9f6      	bls.n	8003ac0 <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 8003ad2:	2003      	movs	r0, #3
}
 8003ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ad6:	b9a3      	cbnz	r3, 8003b02 <HAL_RCC_OscConfig+0x152>
 8003ad8:	682b      	ldr	r3, [r5, #0]
 8003ada:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ade:	602b      	str	r3, [r5, #0]
 8003ae0:	682b      	ldr	r3, [r5, #0]
 8003ae2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ae6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003ae8:	f7fd fcf0 	bl	80014cc <HAL_GetTick>
 8003aec:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003aee:	682b      	ldr	r3, [r5, #0]
 8003af0:	039f      	lsls	r7, r3, #14
 8003af2:	f57f af64 	bpl.w	80039be <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003af6:	f7fd fce9 	bl	80014cc <HAL_GetTick>
 8003afa:	1b80      	subs	r0, r0, r6
 8003afc:	2864      	cmp	r0, #100	@ 0x64
 8003afe:	d9f6      	bls.n	8003aee <HAL_RCC_OscConfig+0x13e>
 8003b00:	e7e7      	b.n	8003ad2 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b02:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b06:	682b      	ldr	r3, [r5, #0]
 8003b08:	d103      	bne.n	8003b12 <HAL_RCC_OscConfig+0x162>
 8003b0a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b0e:	602b      	str	r3, [r5, #0]
 8003b10:	e7ce      	b.n	8003ab0 <HAL_RCC_OscConfig+0x100>
 8003b12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b16:	602b      	str	r3, [r5, #0]
 8003b18:	682b      	ldr	r3, [r5, #0]
 8003b1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b1e:	e7ca      	b.n	8003ab6 <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b20:	4947      	ldr	r1, [pc, #284]	@ (8003c40 <HAL_RCC_OscConfig+0x290>)
 8003b22:	68e2      	ldr	r2, [r4, #12]
 8003b24:	690b      	ldr	r3, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b26:	6a88      	ldr	r0, [r1, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003b28:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 8003b2c:	d003      	beq.n	8003b36 <HAL_RCC_OscConfig+0x186>
 8003b2e:	2b18      	cmp	r3, #24
 8003b30:	d12a      	bne.n	8003b88 <HAL_RCC_OscConfig+0x1d8>
 8003b32:	0780      	lsls	r0, r0, #30
 8003b34:	d128      	bne.n	8003b88 <HAL_RCC_OscConfig+0x1d8>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b36:	680b      	ldr	r3, [r1, #0]
 8003b38:	075b      	lsls	r3, r3, #29
 8003b3a:	d501      	bpl.n	8003b40 <HAL_RCC_OscConfig+0x190>
 8003b3c:	2a00      	cmp	r2, #0
 8003b3e:	d0b0      	beq.n	8003aa2 <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b40:	4d3f      	ldr	r5, [pc, #252]	@ (8003c40 <HAL_RCC_OscConfig+0x290>)
 8003b42:	682b      	ldr	r3, [r5, #0]
 8003b44:	f023 0319 	bic.w	r3, r3, #25
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003b4c:	f7fd fcbe 	bl	80014cc <HAL_GetTick>
 8003b50:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b52:	682b      	ldr	r3, [r5, #0]
 8003b54:	075f      	lsls	r7, r3, #29
 8003b56:	d511      	bpl.n	8003b7c <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b58:	f7fd fcd0 	bl	80014fc <HAL_GetREVID>
 8003b5c:	f241 0303 	movw	r3, #4099	@ 0x1003
 8003b60:	6922      	ldr	r2, [r4, #16]
 8003b62:	4298      	cmp	r0, r3
 8003b64:	686b      	ldr	r3, [r5, #4]
 8003b66:	d822      	bhi.n	8003bae <HAL_RCC_OscConfig+0x1fe>
 8003b68:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003b6c:	2a40      	cmp	r2, #64	@ 0x40
 8003b6e:	bf0c      	ite	eq
 8003b70:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 8003b74:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8003b78:	606b      	str	r3, [r5, #4]
 8003b7a:	e724      	b.n	80039c6 <HAL_RCC_OscConfig+0x16>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b7c:	f7fd fca6 	bl	80014cc <HAL_GetTick>
 8003b80:	1b80      	subs	r0, r0, r6
 8003b82:	2802      	cmp	r0, #2
 8003b84:	d9e5      	bls.n	8003b52 <HAL_RCC_OscConfig+0x1a2>
 8003b86:	e7a4      	b.n	8003ad2 <HAL_RCC_OscConfig+0x122>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b88:	4d2d      	ldr	r5, [pc, #180]	@ (8003c40 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b8a:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b8c:	b1a2      	cbz	r2, 8003bb8 <HAL_RCC_OscConfig+0x208>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b8e:	f023 0319 	bic.w	r3, r3, #25
 8003b92:	4313      	orrs	r3, r2
 8003b94:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003b96:	f7fd fc99 	bl	80014cc <HAL_GetTick>
 8003b9a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b9c:	682b      	ldr	r3, [r5, #0]
 8003b9e:	0758      	lsls	r0, r3, #29
 8003ba0:	d4da      	bmi.n	8003b58 <HAL_RCC_OscConfig+0x1a8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ba2:	f7fd fc93 	bl	80014cc <HAL_GetTick>
 8003ba6:	1b80      	subs	r0, r0, r6
 8003ba8:	2802      	cmp	r0, #2
 8003baa:	d9f7      	bls.n	8003b9c <HAL_RCC_OscConfig+0x1ec>
 8003bac:	e791      	b.n	8003ad2 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bae:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003bb2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003bb6:	e7df      	b.n	8003b78 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_DISABLE();
 8003bb8:	f023 0301 	bic.w	r3, r3, #1
 8003bbc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003bbe:	f7fd fc85 	bl	80014cc <HAL_GetTick>
 8003bc2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003bc4:	682b      	ldr	r3, [r5, #0]
 8003bc6:	0759      	lsls	r1, r3, #29
 8003bc8:	f57f aefd 	bpl.w	80039c6 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bcc:	f7fd fc7e 	bl	80014cc <HAL_GetTick>
 8003bd0:	1b80      	subs	r0, r0, r6
 8003bd2:	2802      	cmp	r0, #2
 8003bd4:	d9f6      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x214>
 8003bd6:	e77c      	b.n	8003ad2 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003bd8:	68da      	ldr	r2, [r3, #12]
 8003bda:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
 8003bde:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003be2:	60da      	str	r2, [r3, #12]
 8003be4:	e71a      	b.n	8003a1c <HAL_RCC_OscConfig+0x6c>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003be6:	69e3      	ldr	r3, [r4, #28]
 8003be8:	4d15      	ldr	r5, [pc, #84]	@ (8003c40 <HAL_RCC_OscConfig+0x290>)
 8003bea:	b36b      	cbz	r3, 8003c48 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_CSI_ENABLE();
 8003bec:	682b      	ldr	r3, [r5, #0]
 8003bee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bf2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003bf4:	f7fd fc6a 	bl	80014cc <HAL_GetTick>
 8003bf8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003bfa:	682b      	ldr	r3, [r5, #0]
 8003bfc:	05df      	lsls	r7, r3, #23
 8003bfe:	d511      	bpl.n	8003c24 <HAL_RCC_OscConfig+0x274>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c00:	f7fd fc7c 	bl	80014fc <HAL_GetREVID>
 8003c04:	f241 0303 	movw	r3, #4099	@ 0x1003
 8003c08:	6a22      	ldr	r2, [r4, #32]
 8003c0a:	4298      	cmp	r0, r3
 8003c0c:	d810      	bhi.n	8003c30 <HAL_RCC_OscConfig+0x280>
 8003c0e:	686b      	ldr	r3, [r5, #4]
 8003c10:	2a20      	cmp	r2, #32
 8003c12:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003c16:	bf0c      	ite	eq
 8003c18:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 8003c1c:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8003c20:	606b      	str	r3, [r5, #4]
 8003c22:	e6fb      	b.n	8003a1c <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003c24:	f7fd fc52 	bl	80014cc <HAL_GetTick>
 8003c28:	1b80      	subs	r0, r0, r6
 8003c2a:	2802      	cmp	r0, #2
 8003c2c:	d9e5      	bls.n	8003bfa <HAL_RCC_OscConfig+0x24a>
 8003c2e:	e750      	b.n	8003ad2 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c30:	68eb      	ldr	r3, [r5, #12]
 8003c32:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8003c36:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003c3a:	60eb      	str	r3, [r5, #12]
 8003c3c:	e6ee      	b.n	8003a1c <HAL_RCC_OscConfig+0x6c>
 8003c3e:	bf00      	nop
 8003c40:	58024400 	.word	0x58024400
 8003c44:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 8003c48:	682b      	ldr	r3, [r5, #0]
 8003c4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c4e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003c50:	f7fd fc3c 	bl	80014cc <HAL_GetTick>
 8003c54:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c56:	682b      	ldr	r3, [r5, #0]
 8003c58:	05d8      	lsls	r0, r3, #23
 8003c5a:	f57f aedf 	bpl.w	8003a1c <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003c5e:	f7fd fc35 	bl	80014cc <HAL_GetTick>
 8003c62:	1b80      	subs	r0, r0, r6
 8003c64:	2802      	cmp	r0, #2
 8003c66:	d9f6      	bls.n	8003c56 <HAL_RCC_OscConfig+0x2a6>
 8003c68:	e733      	b.n	8003ad2 <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c6a:	6963      	ldr	r3, [r4, #20]
 8003c6c:	4da5      	ldr	r5, [pc, #660]	@ (8003f04 <HAL_RCC_OscConfig+0x554>)
 8003c6e:	b183      	cbz	r3, 8003c92 <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_LSI_ENABLE();
 8003c70:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8003c72:	f043 0301 	orr.w	r3, r3, #1
 8003c76:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8003c78:	f7fd fc28 	bl	80014cc <HAL_GetTick>
 8003c7c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c7e:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8003c80:	079b      	lsls	r3, r3, #30
 8003c82:	f53f aecf 	bmi.w	8003a24 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c86:	f7fd fc21 	bl	80014cc <HAL_GetTick>
 8003c8a:	1b80      	subs	r0, r0, r6
 8003c8c:	2802      	cmp	r0, #2
 8003c8e:	d9f6      	bls.n	8003c7e <HAL_RCC_OscConfig+0x2ce>
 8003c90:	e71f      	b.n	8003ad2 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 8003c92:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8003c94:	f023 0301 	bic.w	r3, r3, #1
 8003c98:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8003c9a:	f7fd fc17 	bl	80014cc <HAL_GetTick>
 8003c9e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003ca0:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8003ca2:	079f      	lsls	r7, r3, #30
 8003ca4:	f57f aebe 	bpl.w	8003a24 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ca8:	f7fd fc10 	bl	80014cc <HAL_GetTick>
 8003cac:	1b80      	subs	r0, r0, r6
 8003cae:	2802      	cmp	r0, #2
 8003cb0:	d9f6      	bls.n	8003ca0 <HAL_RCC_OscConfig+0x2f0>
 8003cb2:	e70e      	b.n	8003ad2 <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003cb4:	69a3      	ldr	r3, [r4, #24]
 8003cb6:	4d93      	ldr	r5, [pc, #588]	@ (8003f04 <HAL_RCC_OscConfig+0x554>)
 8003cb8:	b183      	cbz	r3, 8003cdc <HAL_RCC_OscConfig+0x32c>
      __HAL_RCC_HSI48_ENABLE();
 8003cba:	682b      	ldr	r3, [r5, #0]
 8003cbc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003cc0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003cc2:	f7fd fc03 	bl	80014cc <HAL_GetTick>
 8003cc6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003cc8:	682b      	ldr	r3, [r5, #0]
 8003cca:	0498      	lsls	r0, r3, #18
 8003ccc:	f53f aeae 	bmi.w	8003a2c <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cd0:	f7fd fbfc 	bl	80014cc <HAL_GetTick>
 8003cd4:	1b80      	subs	r0, r0, r6
 8003cd6:	2802      	cmp	r0, #2
 8003cd8:	d9f6      	bls.n	8003cc8 <HAL_RCC_OscConfig+0x318>
 8003cda:	e6fa      	b.n	8003ad2 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 8003cdc:	682b      	ldr	r3, [r5, #0]
 8003cde:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ce2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003ce4:	f7fd fbf2 	bl	80014cc <HAL_GetTick>
 8003ce8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003cea:	682b      	ldr	r3, [r5, #0]
 8003cec:	0499      	lsls	r1, r3, #18
 8003cee:	f57f ae9d 	bpl.w	8003a2c <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cf2:	f7fd fbeb 	bl	80014cc <HAL_GetTick>
 8003cf6:	1b80      	subs	r0, r0, r6
 8003cf8:	2802      	cmp	r0, #2
 8003cfa:	d9f6      	bls.n	8003cea <HAL_RCC_OscConfig+0x33a>
 8003cfc:	e6e9      	b.n	8003ad2 <HAL_RCC_OscConfig+0x122>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cfe:	f7fd fbe5 	bl	80014cc <HAL_GetTick>
 8003d02:	1b80      	subs	r0, r0, r6
 8003d04:	2864      	cmp	r0, #100	@ 0x64
 8003d06:	f67f ae9c 	bls.w	8003a42 <HAL_RCC_OscConfig+0x92>
 8003d0a:	e6e2      	b.n	8003ad2 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d0c:	b9b3      	cbnz	r3, 8003d3c <HAL_RCC_OscConfig+0x38c>
 8003d0e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d10:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d14:	f023 0301 	bic.w	r3, r3, #1
 8003d18:	672b      	str	r3, [r5, #112]	@ 0x70
 8003d1a:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003d1c:	f023 0304 	bic.w	r3, r3, #4
 8003d20:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8003d22:	f7fd fbd3 	bl	80014cc <HAL_GetTick>
 8003d26:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d28:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003d2a:	0798      	lsls	r0, r3, #30
 8003d2c:	f57f aea0 	bpl.w	8003a70 <HAL_RCC_OscConfig+0xc0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d30:	f7fd fbcc 	bl	80014cc <HAL_GetTick>
 8003d34:	1b80      	subs	r0, r0, r6
 8003d36:	42b8      	cmp	r0, r7
 8003d38:	d9f6      	bls.n	8003d28 <HAL_RCC_OscConfig+0x378>
 8003d3a:	e6ca      	b.n	8003ad2 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d3c:	2b05      	cmp	r3, #5
 8003d3e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003d40:	d103      	bne.n	8003d4a <HAL_RCC_OscConfig+0x39a>
 8003d42:	f043 0304 	orr.w	r3, r3, #4
 8003d46:	672b      	str	r3, [r5, #112]	@ 0x70
 8003d48:	e684      	b.n	8003a54 <HAL_RCC_OscConfig+0xa4>
 8003d4a:	f023 0301 	bic.w	r3, r3, #1
 8003d4e:	672b      	str	r3, [r5, #112]	@ 0x70
 8003d50:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003d52:	f023 0304 	bic.w	r3, r3, #4
 8003d56:	e680      	b.n	8003a5a <HAL_RCC_OscConfig+0xaa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d58:	f7fd fbb8 	bl	80014cc <HAL_GetTick>
 8003d5c:	1b40      	subs	r0, r0, r5
 8003d5e:	42b8      	cmp	r0, r7
 8003d60:	f67f ae82 	bls.w	8003a68 <HAL_RCC_OscConfig+0xb8>
 8003d64:	e6b5      	b.n	8003ad2 <HAL_RCC_OscConfig+0x122>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003d66:	4d67      	ldr	r5, [pc, #412]	@ (8003f04 <HAL_RCC_OscConfig+0x554>)
 8003d68:	692b      	ldr	r3, [r5, #16]
 8003d6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d6e:	2b18      	cmp	r3, #24
 8003d70:	d07a      	beq.n	8003e68 <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
 8003d72:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d74:	2902      	cmp	r1, #2
        __HAL_RCC_PLL_DISABLE();
 8003d76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d7a:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d7c:	d167      	bne.n	8003e4e <HAL_RCC_OscConfig+0x49e>
        tickstart = HAL_GetTick();
 8003d7e:	f7fd fba5 	bl	80014cc <HAL_GetTick>
 8003d82:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d84:	682b      	ldr	r3, [r5, #0]
 8003d86:	0199      	lsls	r1, r3, #6
 8003d88:	d45b      	bmi.n	8003e42 <HAL_RCC_OscConfig+0x492>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d8a:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8003d8c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003d8e:	f423 737c 	bic.w	r3, r3, #1008	@ 0x3f0
 8003d92:	f023 0303 	bic.w	r3, r3, #3
 8003d96:	4313      	orrs	r3, r2
 8003d98:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003d9a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003d9e:	62ab      	str	r3, [r5, #40]	@ 0x28
 8003da0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003da2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003da4:	3b01      	subs	r3, #1
 8003da6:	3a01      	subs	r2, #1
 8003da8:	025b      	lsls	r3, r3, #9
 8003daa:	0412      	lsls	r2, r2, #16
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8003db2:	4313      	orrs	r3, r2
 8003db4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003db6:	3a01      	subs	r2, #1
 8003db8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003dc0:	3a01      	subs	r2, #1
 8003dc2:	0612      	lsls	r2, r2, #24
 8003dc4:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8003dcc:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003dce:	f023 0301 	bic.w	r3, r3, #1
 8003dd2:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003dd4:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8003dd6:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8003dd8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ddc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003de0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003de4:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003de6:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003de8:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003dea:	f023 030c 	bic.w	r3, r3, #12
 8003dee:	4313      	orrs	r3, r2
 8003df0:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003df2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003df4:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003df6:	f023 0302 	bic.w	r3, r3, #2
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003dfe:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003e00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e04:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e06:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003e08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e0c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003e0e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003e10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e14:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8003e16:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003e18:	f043 0301 	orr.w	r3, r3, #1
 8003e1c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 8003e1e:	682b      	ldr	r3, [r5, #0]
 8003e20:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e24:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003e26:	f7fd fb51 	bl	80014cc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e2a:	4d36      	ldr	r5, [pc, #216]	@ (8003f04 <HAL_RCC_OscConfig+0x554>)
        tickstart = HAL_GetTick();
 8003e2c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e2e:	682b      	ldr	r3, [r5, #0]
 8003e30:	019a      	lsls	r2, r3, #6
 8003e32:	f53f ae21 	bmi.w	8003a78 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e36:	f7fd fb49 	bl	80014cc <HAL_GetTick>
 8003e3a:	1b00      	subs	r0, r0, r4
 8003e3c:	2802      	cmp	r0, #2
 8003e3e:	d9f6      	bls.n	8003e2e <HAL_RCC_OscConfig+0x47e>
 8003e40:	e647      	b.n	8003ad2 <HAL_RCC_OscConfig+0x122>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e42:	f7fd fb43 	bl	80014cc <HAL_GetTick>
 8003e46:	1b80      	subs	r0, r0, r6
 8003e48:	2802      	cmp	r0, #2
 8003e4a:	d99b      	bls.n	8003d84 <HAL_RCC_OscConfig+0x3d4>
 8003e4c:	e641      	b.n	8003ad2 <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 8003e4e:	f7fd fb3d 	bl	80014cc <HAL_GetTick>
 8003e52:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e54:	682b      	ldr	r3, [r5, #0]
 8003e56:	019b      	lsls	r3, r3, #6
 8003e58:	f57f ae0e 	bpl.w	8003a78 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e5c:	f7fd fb36 	bl	80014cc <HAL_GetTick>
 8003e60:	1b00      	subs	r0, r0, r4
 8003e62:	2802      	cmp	r0, #2
 8003e64:	d9f6      	bls.n	8003e54 <HAL_RCC_OscConfig+0x4a4>
 8003e66:	e634      	b.n	8003ad2 <HAL_RCC_OscConfig+0x122>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e68:	2901      	cmp	r1, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003e6a:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003e6c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e6e:	f43f ae18 	beq.w	8003aa2 <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e72:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e76:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003e78:	4281      	cmp	r1, r0
 8003e7a:	f47f ae12 	bne.w	8003aa2 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e7e:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e82:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003e84:	428a      	cmp	r2, r1
 8003e86:	f47f ae0c 	bne.w	8003aa2 <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e8a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003e8c:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8003e90:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e92:	4291      	cmp	r1, r2
 8003e94:	f47f ae05 	bne.w	8003aa2 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e98:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8003e9a:	f3c3 2146 	ubfx	r1, r3, #9, #7
 8003e9e:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ea0:	4291      	cmp	r1, r2
 8003ea2:	f47f adfe 	bne.w	8003aa2 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ea6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003ea8:	f3c3 4106 	ubfx	r1, r3, #16, #7
 8003eac:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003eae:	4291      	cmp	r1, r2
 8003eb0:	f47f adf7 	bne.w	8003aa2 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003eb4:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003eb6:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8003eba:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	f47f adf0 	bne.w	8003aa2 <HAL_RCC_OscConfig+0xf2>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003ec2:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003ec4:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003ec6:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	f43f add4 	beq.w	8003a78 <HAL_RCC_OscConfig+0xc8>
          __HAL_RCC_PLLFRACN_DISABLE();
 8003ed0:	4d0c      	ldr	r5, [pc, #48]	@ (8003f04 <HAL_RCC_OscConfig+0x554>)
 8003ed2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003ed4:	f023 0301 	bic.w	r3, r3, #1
 8003ed8:	62eb      	str	r3, [r5, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 8003eda:	f7fd faf7 	bl	80014cc <HAL_GetTick>
 8003ede:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003ee0:	f7fd faf4 	bl	80014cc <HAL_GetTick>
 8003ee4:	42b0      	cmp	r0, r6
 8003ee6:	d0fb      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003ee8:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8003eea:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8003eec:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ef0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003ef4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003ef8:	636b      	str	r3, [r5, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8003efa:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003efc:	f043 0301 	orr.w	r3, r3, #1
 8003f00:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8003f02:	e5b9      	b.n	8003a78 <HAL_RCC_OscConfig+0xc8>
 8003f04:	58024400 	.word	0x58024400

08003f08 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003f08:	b570      	push	{r4, r5, r6, lr}
 8003f0a:	4c23      	ldr	r4, [pc, #140]	@ (8003f98 <HAL_RCC_MCOConfig+0x90>)
 8003f0c:	b088      	sub	sp, #32
 8003f0e:	460e      	mov	r6, r1
 8003f10:	4615      	mov	r5, r2
  if (RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8003f12:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  if (RCC_MCOx == RCC_MCO1)
 8003f16:	b9f8      	cbnz	r0, 8003f58 <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 8003f18:	f043 0301 	orr.w	r3, r3, #1

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f1c:	f44f 7c80 	mov.w	ip, #256	@ 0x100
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8003f20:	a903      	add	r1, sp, #12
    MCO1_CLK_ENABLE();
 8003f22:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8003f26:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003f2a:	9007      	str	r0, [sp, #28]
    MCO1_CLK_ENABLE();
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	9301      	str	r3, [sp, #4]
 8003f32:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f34:	2302      	movs	r3, #2
 8003f36:	e9cd c303 	strd	ip, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f3a:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f3c:	e9cd 0305 	strd	r0, r3, [sp, #20]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8003f40:	4816      	ldr	r0, [pc, #88]	@ (8003f9c <HAL_RCC_MCOConfig+0x94>)
 8003f42:	f7ff f8b7 	bl	80030b4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8003f46:	6923      	ldr	r3, [r4, #16]
 8003f48:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 8003f4c:	ea43 0106 	orr.w	r1, r3, r6
 8003f50:	4329      	orrs	r1, r5
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8003f52:	6121      	str	r1, [r4, #16]
  }
}
 8003f54:	b008      	add	sp, #32
 8003f56:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 8003f58:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f60:	2103      	movs	r1, #3
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003f62:	480f      	ldr	r0, [pc, #60]	@ (8003fa0 <HAL_RCC_MCOConfig+0x98>)
    MCO2_CLK_ENABLE();
 8003f64:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8003f68:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8003f6c:	f003 0304 	and.w	r3, r3, #4
 8003f70:	9302      	str	r3, [sp, #8]
 8003f72:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f74:	2302      	movs	r3, #2
 8003f76:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	e9cd 3105 	strd	r3, r1, [sp, #20]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003f80:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003f82:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003f84:	f7ff f896 	bl	80030b4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8003f88:	6923      	ldr	r3, [r4, #16]
 8003f8a:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8003f8e:	ea43 0106 	orr.w	r1, r3, r6
 8003f92:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
 8003f96:	e7dc      	b.n	8003f52 <HAL_RCC_MCOConfig+0x4a>
 8003f98:	58024400 	.word	0x58024400
 8003f9c:	58020000 	.word	0x58020000
 8003fa0:	58020800 	.word	0x58020800

08003fa4 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fa4:	4b49      	ldr	r3, [pc, #292]	@ (80040cc <HAL_RCC_GetSysClockFreq+0x128>)
 8003fa6:	691a      	ldr	r2, [r3, #16]
 8003fa8:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8003fac:	2a10      	cmp	r2, #16
{
 8003fae:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fb0:	f000 8088 	beq.w	80040c4 <HAL_RCC_GetSysClockFreq+0x120>
 8003fb4:	2a18      	cmp	r2, #24
 8003fb6:	d00c      	beq.n	8003fd2 <HAL_RCC_GetSysClockFreq+0x2e>
 8003fb8:	2a00      	cmp	r2, #0
 8003fba:	f040 8085 	bne.w	80040c8 <HAL_RCC_GetSysClockFreq+0x124>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	4843      	ldr	r0, [pc, #268]	@ (80040d0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003fc2:	f012 0f20 	tst.w	r2, #32
 8003fc6:	d003      	beq.n	8003fd0 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003fce:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8003fd0:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003fd2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003fd4:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003fd6:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
      if (pllm != 0U)
 8003fd8:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003fdc:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003fe0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      if (pllm != 0U)
 8003fe2:	d0f5      	beq.n	8003fd0 <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003fe4:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003fe8:	f004 0401 	and.w	r4, r4, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003fec:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ff0:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003ff4:	4362      	muls	r2, r4
 8003ff6:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8003ffa:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ffc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004000:	ee06 2a90 	vmov	s13, r2
 8004004:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8004008:	d04e      	beq.n	80040a8 <HAL_RCC_GetSysClockFreq+0x104>
 800400a:	2902      	cmp	r1, #2
 800400c:	d03e      	beq.n	800408c <HAL_RCC_GetSysClockFreq+0xe8>
 800400e:	2900      	cmp	r1, #0
 8004010:	d14a      	bne.n	80040a8 <HAL_RCC_GetSysClockFreq+0x104>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	0692      	lsls	r2, r2, #26
 8004016:	d527      	bpl.n	8004068 <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004018:	6819      	ldr	r1, [r3, #0]
 800401a:	4a2d      	ldr	r2, [pc, #180]	@ (80040d0 <HAL_RCC_GetSysClockFreq+0x12c>)
 800401c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004022:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004028:	ee07 2a90 	vmov	s15, r2
 800402c:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8004030:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8004034:	ee07 3a10 	vmov	s14, r3
 8004038:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800403c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8004040:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004044:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004048:	4b20      	ldr	r3, [pc, #128]	@ (80040cc <HAL_RCC_GetSysClockFreq+0x128>)
 800404a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800404c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004050:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004052:	ee07 3a10 	vmov	s14, r3
 8004056:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800405a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800405e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8004062:	ee17 0a90 	vmov	r0, s15
 8004066:	e7b3      	b.n	8003fd0 <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800406a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800406e:	ee07 3a90 	vmov	s15, r3
 8004072:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800407a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800407e:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80040d4 <HAL_RCC_GetSysClockFreq+0x130>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004082:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004086:	ee67 7aa6 	vmul.f32	s15, s15, s13
            break;
 800408a:	e7dd      	b.n	8004048 <HAL_RCC_GetSysClockFreq+0xa4>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800408c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800408e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004092:	ee07 3a90 	vmov	s15, r3
 8004096:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800409a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800409e:	ee77 7a86 	vadd.f32	s15, s15, s12
 80040a2:	ed9f 6a0d 	vldr	s12, [pc, #52]	@ 80040d8 <HAL_RCC_GetSysClockFreq+0x134>
 80040a6:	e7ec      	b.n	8004082 <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80040a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040ae:	ee07 3a90 	vmov	s15, r3
 80040b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040ba:	ee77 7a86 	vadd.f32	s15, s15, s12
 80040be:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 80040dc <HAL_RCC_GetSysClockFreq+0x138>
 80040c2:	e7de      	b.n	8004082 <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040c4:	4806      	ldr	r0, [pc, #24]	@ (80040e0 <HAL_RCC_GetSysClockFreq+0x13c>)
 80040c6:	e783      	b.n	8003fd0 <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 80040c8:	4806      	ldr	r0, [pc, #24]	@ (80040e4 <HAL_RCC_GetSysClockFreq+0x140>)
 80040ca:	e781      	b.n	8003fd0 <HAL_RCC_GetSysClockFreq+0x2c>
 80040cc:	58024400 	.word	0x58024400
 80040d0:	03d09000 	.word	0x03d09000
 80040d4:	4c742400 	.word	0x4c742400
 80040d8:	4af42400 	.word	0x4af42400
 80040dc:	4a742400 	.word	0x4a742400
 80040e0:	007a1200 	.word	0x007a1200
 80040e4:	003d0900 	.word	0x003d0900

080040e8 <HAL_RCC_ClockConfig>:
{
 80040e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040ec:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80040ee:	4604      	mov	r4, r0
 80040f0:	b910      	cbnz	r0, 80040f8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80040f2:	2001      	movs	r0, #1
}
 80040f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040f8:	4a88      	ldr	r2, [pc, #544]	@ (800431c <HAL_RCC_ClockConfig+0x234>)
 80040fa:	6813      	ldr	r3, [r2, #0]
 80040fc:	f003 030f 	and.w	r3, r3, #15
 8004100:	428b      	cmp	r3, r1
 8004102:	f0c0 8093 	bcc.w	800422c <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004106:	6823      	ldr	r3, [r4, #0]
 8004108:	075f      	lsls	r7, r3, #29
 800410a:	f100 809b 	bmi.w	8004244 <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800410e:	071e      	lsls	r6, r3, #28
 8004110:	d50b      	bpl.n	800412a <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004112:	4983      	ldr	r1, [pc, #524]	@ (8004320 <HAL_RCC_ClockConfig+0x238>)
 8004114:	6960      	ldr	r0, [r4, #20]
 8004116:	69ca      	ldr	r2, [r1, #28]
 8004118:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800411c:	4290      	cmp	r0, r2
 800411e:	d904      	bls.n	800412a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004120:	69ca      	ldr	r2, [r1, #28]
 8004122:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004126:	4302      	orrs	r2, r0
 8004128:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800412a:	06d8      	lsls	r0, r3, #27
 800412c:	d50b      	bpl.n	8004146 <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800412e:	497c      	ldr	r1, [pc, #496]	@ (8004320 <HAL_RCC_ClockConfig+0x238>)
 8004130:	69a0      	ldr	r0, [r4, #24]
 8004132:	69ca      	ldr	r2, [r1, #28]
 8004134:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8004138:	4290      	cmp	r0, r2
 800413a:	d904      	bls.n	8004146 <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800413c:	69ca      	ldr	r2, [r1, #28]
 800413e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004142:	4302      	orrs	r2, r0
 8004144:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004146:	0699      	lsls	r1, r3, #26
 8004148:	d50b      	bpl.n	8004162 <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800414a:	4975      	ldr	r1, [pc, #468]	@ (8004320 <HAL_RCC_ClockConfig+0x238>)
 800414c:	69e0      	ldr	r0, [r4, #28]
 800414e:	6a0a      	ldr	r2, [r1, #32]
 8004150:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8004154:	4290      	cmp	r0, r2
 8004156:	d904      	bls.n	8004162 <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004158:	6a0a      	ldr	r2, [r1, #32]
 800415a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800415e:	4302      	orrs	r2, r0
 8004160:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004162:	079a      	lsls	r2, r3, #30
 8004164:	d50b      	bpl.n	800417e <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004166:	496e      	ldr	r1, [pc, #440]	@ (8004320 <HAL_RCC_ClockConfig+0x238>)
 8004168:	68e0      	ldr	r0, [r4, #12]
 800416a:	698a      	ldr	r2, [r1, #24]
 800416c:	f002 020f 	and.w	r2, r2, #15
 8004170:	4290      	cmp	r0, r2
 8004172:	d904      	bls.n	800417e <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004174:	698a      	ldr	r2, [r1, #24]
 8004176:	f022 020f 	bic.w	r2, r2, #15
 800417a:	4302      	orrs	r2, r0
 800417c:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800417e:	07df      	lsls	r7, r3, #31
 8004180:	d46e      	bmi.n	8004260 <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004182:	6823      	ldr	r3, [r4, #0]
 8004184:	079e      	lsls	r6, r3, #30
 8004186:	f100 80a1 	bmi.w	80042cc <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800418a:	4964      	ldr	r1, [pc, #400]	@ (800431c <HAL_RCC_ClockConfig+0x234>)
 800418c:	680a      	ldr	r2, [r1, #0]
 800418e:	f002 020f 	and.w	r2, r2, #15
 8004192:	42aa      	cmp	r2, r5
 8004194:	f200 80a8 	bhi.w	80042e8 <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004198:	0758      	lsls	r0, r3, #29
 800419a:	f100 80b1 	bmi.w	8004300 <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800419e:	0719      	lsls	r1, r3, #28
 80041a0:	d50b      	bpl.n	80041ba <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80041a2:	495f      	ldr	r1, [pc, #380]	@ (8004320 <HAL_RCC_ClockConfig+0x238>)
 80041a4:	6960      	ldr	r0, [r4, #20]
 80041a6:	69ca      	ldr	r2, [r1, #28]
 80041a8:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80041ac:	4290      	cmp	r0, r2
 80041ae:	d204      	bcs.n	80041ba <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80041b0:	69ca      	ldr	r2, [r1, #28]
 80041b2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80041b6:	4302      	orrs	r2, r0
 80041b8:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ba:	06da      	lsls	r2, r3, #27
 80041bc:	d50b      	bpl.n	80041d6 <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80041be:	4958      	ldr	r1, [pc, #352]	@ (8004320 <HAL_RCC_ClockConfig+0x238>)
 80041c0:	69a0      	ldr	r0, [r4, #24]
 80041c2:	69ca      	ldr	r2, [r1, #28]
 80041c4:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 80041c8:	4290      	cmp	r0, r2
 80041ca:	d204      	bcs.n	80041d6 <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80041cc:	69ca      	ldr	r2, [r1, #28]
 80041ce:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80041d2:	4302      	orrs	r2, r0
 80041d4:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80041d6:	069b      	lsls	r3, r3, #26
 80041d8:	d50b      	bpl.n	80041f2 <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80041da:	4a51      	ldr	r2, [pc, #324]	@ (8004320 <HAL_RCC_ClockConfig+0x238>)
 80041dc:	69e1      	ldr	r1, [r4, #28]
 80041de:	6a13      	ldr	r3, [r2, #32]
 80041e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041e4:	4299      	cmp	r1, r3
 80041e6:	d204      	bcs.n	80041f2 <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80041e8:	6a13      	ldr	r3, [r2, #32]
 80041ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041ee:	430b      	orrs	r3, r1
 80041f0:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80041f2:	f7ff fed7 	bl	8003fa4 <HAL_RCC_GetSysClockFreq>
 80041f6:	494a      	ldr	r1, [pc, #296]	@ (8004320 <HAL_RCC_ClockConfig+0x238>)
 80041f8:	4a4a      	ldr	r2, [pc, #296]	@ (8004324 <HAL_RCC_ClockConfig+0x23c>)
 80041fa:	698b      	ldr	r3, [r1, #24]
 80041fc:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8004200:	5cd3      	ldrb	r3, [r2, r3]
 8004202:	f003 031f 	and.w	r3, r3, #31
 8004206:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004208:	698b      	ldr	r3, [r1, #24]
 800420a:	f003 030f 	and.w	r3, r3, #15
 800420e:	5cd3      	ldrb	r3, [r2, r3]
 8004210:	4a45      	ldr	r2, [pc, #276]	@ (8004328 <HAL_RCC_ClockConfig+0x240>)
 8004212:	f003 031f 	and.w	r3, r3, #31
 8004216:	fa20 f303 	lsr.w	r3, r0, r3
 800421a:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800421c:	4b43      	ldr	r3, [pc, #268]	@ (800432c <HAL_RCC_ClockConfig+0x244>)
 800421e:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 8004220:	4b43      	ldr	r3, [pc, #268]	@ (8004330 <HAL_RCC_ClockConfig+0x248>)
}
 8004222:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 8004226:	6818      	ldr	r0, [r3, #0]
 8004228:	f7fd b8f0 	b.w	800140c <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800422c:	6813      	ldr	r3, [r2, #0]
 800422e:	f023 030f 	bic.w	r3, r3, #15
 8004232:	430b      	orrs	r3, r1
 8004234:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004236:	6813      	ldr	r3, [r2, #0]
 8004238:	f003 030f 	and.w	r3, r3, #15
 800423c:	428b      	cmp	r3, r1
 800423e:	f47f af58 	bne.w	80040f2 <HAL_RCC_ClockConfig+0xa>
 8004242:	e760      	b.n	8004106 <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004244:	4936      	ldr	r1, [pc, #216]	@ (8004320 <HAL_RCC_ClockConfig+0x238>)
 8004246:	6920      	ldr	r0, [r4, #16]
 8004248:	698a      	ldr	r2, [r1, #24]
 800424a:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800424e:	4290      	cmp	r0, r2
 8004250:	f67f af5d 	bls.w	800410e <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004254:	698a      	ldr	r2, [r1, #24]
 8004256:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800425a:	4302      	orrs	r2, r0
 800425c:	618a      	str	r2, [r1, #24]
 800425e:	e756      	b.n	800410e <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004260:	4b2f      	ldr	r3, [pc, #188]	@ (8004320 <HAL_RCC_ClockConfig+0x238>)
 8004262:	68a1      	ldr	r1, [r4, #8]
 8004264:	699a      	ldr	r2, [r3, #24]
 8004266:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 800426a:	430a      	orrs	r2, r1
 800426c:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800426e:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004270:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004272:	2902      	cmp	r1, #2
 8004274:	d11d      	bne.n	80042b2 <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004276:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800427a:	f43f af3a 	beq.w	80040f2 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800427e:	691a      	ldr	r2, [r3, #16]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004280:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004284:	4f26      	ldr	r7, [pc, #152]	@ (8004320 <HAL_RCC_ClockConfig+0x238>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004286:	f022 0207 	bic.w	r2, r2, #7
 800428a:	430a      	orrs	r2, r1
 800428c:	611a      	str	r2, [r3, #16]
    tickstart = HAL_GetTick();
 800428e:	f7fd f91d 	bl	80014cc <HAL_GetTick>
 8004292:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	6862      	ldr	r2, [r4, #4]
 8004298:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800429c:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80042a0:	f43f af6f 	beq.w	8004182 <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042a4:	f7fd f912 	bl	80014cc <HAL_GetTick>
 80042a8:	1b80      	subs	r0, r0, r6
 80042aa:	4540      	cmp	r0, r8
 80042ac:	d9f2      	bls.n	8004294 <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 80042ae:	2003      	movs	r0, #3
 80042b0:	e720      	b.n	80040f4 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042b2:	2903      	cmp	r1, #3
 80042b4:	d102      	bne.n	80042bc <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80042b6:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80042ba:	e7de      	b.n	800427a <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80042bc:	2901      	cmp	r1, #1
 80042be:	d102      	bne.n	80042c6 <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80042c0:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80042c4:	e7d9      	b.n	800427a <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042c6:	f012 0f04 	tst.w	r2, #4
 80042ca:	e7d6      	b.n	800427a <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80042cc:	4914      	ldr	r1, [pc, #80]	@ (8004320 <HAL_RCC_ClockConfig+0x238>)
 80042ce:	68e0      	ldr	r0, [r4, #12]
 80042d0:	698a      	ldr	r2, [r1, #24]
 80042d2:	f002 020f 	and.w	r2, r2, #15
 80042d6:	4290      	cmp	r0, r2
 80042d8:	f4bf af57 	bcs.w	800418a <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042dc:	698a      	ldr	r2, [r1, #24]
 80042de:	f022 020f 	bic.w	r2, r2, #15
 80042e2:	4302      	orrs	r2, r0
 80042e4:	618a      	str	r2, [r1, #24]
 80042e6:	e750      	b.n	800418a <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042e8:	680a      	ldr	r2, [r1, #0]
 80042ea:	f022 020f 	bic.w	r2, r2, #15
 80042ee:	432a      	orrs	r2, r5
 80042f0:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042f2:	680a      	ldr	r2, [r1, #0]
 80042f4:	f002 020f 	and.w	r2, r2, #15
 80042f8:	42aa      	cmp	r2, r5
 80042fa:	f47f aefa 	bne.w	80040f2 <HAL_RCC_ClockConfig+0xa>
 80042fe:	e74b      	b.n	8004198 <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004300:	4907      	ldr	r1, [pc, #28]	@ (8004320 <HAL_RCC_ClockConfig+0x238>)
 8004302:	6920      	ldr	r0, [r4, #16]
 8004304:	698a      	ldr	r2, [r1, #24]
 8004306:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800430a:	4290      	cmp	r0, r2
 800430c:	f4bf af47 	bcs.w	800419e <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004310:	698a      	ldr	r2, [r1, #24]
 8004312:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004316:	4302      	orrs	r2, r0
 8004318:	618a      	str	r2, [r1, #24]
 800431a:	e740      	b.n	800419e <HAL_RCC_ClockConfig+0xb6>
 800431c:	52002000 	.word	0x52002000
 8004320:	58024400 	.word	0x58024400
 8004324:	0800ec85 	.word	0x0800ec85
 8004328:	24000008 	.word	0x24000008
 800432c:	2400000c 	.word	0x2400000c
 8004330:	24000014 	.word	0x24000014

08004334 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004334:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004336:	f7ff fe35 	bl	8003fa4 <HAL_RCC_GetSysClockFreq>
 800433a:	4a0b      	ldr	r2, [pc, #44]	@ (8004368 <HAL_RCC_GetHCLKFreq+0x34>)
 800433c:	490b      	ldr	r1, [pc, #44]	@ (800436c <HAL_RCC_GetHCLKFreq+0x38>)
 800433e:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004340:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004342:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004346:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800434a:	5ccb      	ldrb	r3, [r1, r3]
 800434c:	f003 031f 	and.w	r3, r3, #31
 8004350:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004354:	5c88      	ldrb	r0, [r1, r2]
 8004356:	4a06      	ldr	r2, [pc, #24]	@ (8004370 <HAL_RCC_GetHCLKFreq+0x3c>)
 8004358:	f000 001f 	and.w	r0, r0, #31
 800435c:	fa23 f000 	lsr.w	r0, r3, r0
 8004360:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004362:	4a04      	ldr	r2, [pc, #16]	@ (8004374 <HAL_RCC_GetHCLKFreq+0x40>)
 8004364:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8004366:	bd08      	pop	{r3, pc}
 8004368:	58024400 	.word	0x58024400
 800436c:	0800ec85 	.word	0x0800ec85
 8004370:	24000008 	.word	0x24000008
 8004374:	2400000c 	.word	0x2400000c

08004378 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004378:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800437a:	f7ff ffdb 	bl	8004334 <HAL_RCC_GetHCLKFreq>
 800437e:	4b05      	ldr	r3, [pc, #20]	@ (8004394 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004380:	4a05      	ldr	r2, [pc, #20]	@ (8004398 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004382:	69db      	ldr	r3, [r3, #28]
 8004384:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004388:	5cd3      	ldrb	r3, [r2, r3]
 800438a:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800438e:	40d8      	lsrs	r0, r3
 8004390:	bd08      	pop	{r3, pc}
 8004392:	bf00      	nop
 8004394:	58024400 	.word	0x58024400
 8004398:	0800ec85 	.word	0x0800ec85

0800439c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800439c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800439e:	f7ff ffc9 	bl	8004334 <HAL_RCC_GetHCLKFreq>
 80043a2:	4b05      	ldr	r3, [pc, #20]	@ (80043b8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80043a4:	4a05      	ldr	r2, [pc, #20]	@ (80043bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80043a6:	69db      	ldr	r3, [r3, #28]
 80043a8:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80043ac:	5cd3      	ldrb	r3, [r2, r3]
 80043ae:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80043b2:	40d8      	lsrs	r0, r3
 80043b4:	bd08      	pop	{r3, pc}
 80043b6:	bf00      	nop
 80043b8:	58024400 	.word	0x58024400
 80043bc:	0800ec85 	.word	0x0800ec85

080043c0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80043c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80043c2:	4c3a      	ldr	r4, [pc, #232]	@ (80044ac <RCCEx_PLL2_Config+0xec>)
{
 80043c4:	4606      	mov	r6, r0
 80043c6:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80043c8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80043ca:	f003 0303 	and.w	r3, r3, #3
 80043ce:	2b03      	cmp	r3, #3
 80043d0:	d069      	beq.n	80044a6 <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80043d2:	6823      	ldr	r3, [r4, #0]
 80043d4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80043d8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043da:	f7fd f877 	bl	80014cc <HAL_GetTick>
 80043de:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80043e0:	6823      	ldr	r3, [r4, #0]
 80043e2:	011a      	lsls	r2, r3, #4
 80043e4:	d44b      	bmi.n	800447e <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80043e6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80043e8:	6832      	ldr	r2, [r6, #0]
 80043ea:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80043ee:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80043f2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80043f4:	68b3      	ldr	r3, [r6, #8]
 80043f6:	68f2      	ldr	r2, [r6, #12]
 80043f8:	3b01      	subs	r3, #1
 80043fa:	3a01      	subs	r2, #1
 80043fc:	025b      	lsls	r3, r3, #9
 80043fe:	0412      	lsls	r2, r2, #16
 8004400:	b29b      	uxth	r3, r3
 8004402:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004406:	4313      	orrs	r3, r2
 8004408:	6872      	ldr	r2, [r6, #4]
 800440a:	3a01      	subs	r2, #1
 800440c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004410:	4313      	orrs	r3, r2
 8004412:	6932      	ldr	r2, [r6, #16]
 8004414:	3a01      	subs	r2, #1
 8004416:	0612      	lsls	r2, r2, #24
 8004418:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800441c:	4313      	orrs	r3, r2
 800441e:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004420:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004422:	6972      	ldr	r2, [r6, #20]
 8004424:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004428:	4313      	orrs	r3, r2
 800442a:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800442c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800442e:	69b2      	ldr	r2, [r6, #24]
 8004430:	f023 0320 	bic.w	r3, r3, #32
 8004434:	4313      	orrs	r3, r2
 8004436:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004438:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800443a:	f023 0310 	bic.w	r3, r3, #16
 800443e:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004440:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004442:	69f2      	ldr	r2, [r6, #28]
 8004444:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004448:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800444c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004450:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004452:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004454:	f043 0310 	orr.w	r3, r3, #16
 8004458:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800445a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800445c:	b9b5      	cbnz	r5, 800448c <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800445e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004462:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004464:	4c11      	ldr	r4, [pc, #68]	@ (80044ac <RCCEx_PLL2_Config+0xec>)
 8004466:	6823      	ldr	r3, [r4, #0]
 8004468:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800446c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800446e:	f7fd f82d 	bl	80014cc <HAL_GetTick>
 8004472:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004474:	6823      	ldr	r3, [r4, #0]
 8004476:	011b      	lsls	r3, r3, #4
 8004478:	d50f      	bpl.n	800449a <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 800447a:	2000      	movs	r0, #0
 800447c:	e005      	b.n	800448a <RCCEx_PLL2_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800447e:	f7fd f825 	bl	80014cc <HAL_GetTick>
 8004482:	1bc0      	subs	r0, r0, r7
 8004484:	2802      	cmp	r0, #2
 8004486:	d9ab      	bls.n	80043e0 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8004488:	2003      	movs	r0, #3
}
 800448a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800448c:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800448e:	bf0c      	ite	eq
 8004490:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004494:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 8004498:	e7e3      	b.n	8004462 <RCCEx_PLL2_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800449a:	f7fd f817 	bl	80014cc <HAL_GetTick>
 800449e:	1b40      	subs	r0, r0, r5
 80044a0:	2802      	cmp	r0, #2
 80044a2:	d9e7      	bls.n	8004474 <RCCEx_PLL2_Config+0xb4>
 80044a4:	e7f0      	b.n	8004488 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 80044a6:	2001      	movs	r0, #1
 80044a8:	e7ef      	b.n	800448a <RCCEx_PLL2_Config+0xca>
 80044aa:	bf00      	nop
 80044ac:	58024400 	.word	0x58024400

080044b0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80044b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80044b2:	4c3a      	ldr	r4, [pc, #232]	@ (800459c <RCCEx_PLL3_Config+0xec>)
{
 80044b4:	4606      	mov	r6, r0
 80044b6:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80044b8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80044ba:	f003 0303 	and.w	r3, r3, #3
 80044be:	2b03      	cmp	r3, #3
 80044c0:	d069      	beq.n	8004596 <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80044c2:	6823      	ldr	r3, [r4, #0]
 80044c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044c8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044ca:	f7fc ffff 	bl	80014cc <HAL_GetTick>
 80044ce:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80044d0:	6823      	ldr	r3, [r4, #0]
 80044d2:	009a      	lsls	r2, r3, #2
 80044d4:	d44b      	bmi.n	800456e <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80044d6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80044d8:	6832      	ldr	r2, [r6, #0]
 80044da:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 80044de:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80044e2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80044e4:	68b3      	ldr	r3, [r6, #8]
 80044e6:	68f2      	ldr	r2, [r6, #12]
 80044e8:	3b01      	subs	r3, #1
 80044ea:	3a01      	subs	r2, #1
 80044ec:	025b      	lsls	r3, r3, #9
 80044ee:	0412      	lsls	r2, r2, #16
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80044f6:	4313      	orrs	r3, r2
 80044f8:	6872      	ldr	r2, [r6, #4]
 80044fa:	3a01      	subs	r2, #1
 80044fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004500:	4313      	orrs	r3, r2
 8004502:	6932      	ldr	r2, [r6, #16]
 8004504:	3a01      	subs	r2, #1
 8004506:	0612      	lsls	r2, r2, #24
 8004508:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800450c:	4313      	orrs	r3, r2
 800450e:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004510:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004512:	6972      	ldr	r2, [r6, #20]
 8004514:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004518:	4313      	orrs	r3, r2
 800451a:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800451c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800451e:	69b2      	ldr	r2, [r6, #24]
 8004520:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004524:	4313      	orrs	r3, r2
 8004526:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004528:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800452a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800452e:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004530:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004532:	69f2      	ldr	r2, [r6, #28]
 8004534:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004538:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800453c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004540:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004542:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004544:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004548:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800454a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800454c:	b9b5      	cbnz	r5, 800457c <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800454e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004552:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004554:	4c11      	ldr	r4, [pc, #68]	@ (800459c <RCCEx_PLL3_Config+0xec>)
 8004556:	6823      	ldr	r3, [r4, #0]
 8004558:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800455c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800455e:	f7fc ffb5 	bl	80014cc <HAL_GetTick>
 8004562:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004564:	6823      	ldr	r3, [r4, #0]
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	d50f      	bpl.n	800458a <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 800456a:	2000      	movs	r0, #0
 800456c:	e005      	b.n	800457a <RCCEx_PLL3_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800456e:	f7fc ffad 	bl	80014cc <HAL_GetTick>
 8004572:	1bc0      	subs	r0, r0, r7
 8004574:	2802      	cmp	r0, #2
 8004576:	d9ab      	bls.n	80044d0 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 8004578:	2003      	movs	r0, #3
}
 800457a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800457c:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800457e:	bf0c      	ite	eq
 8004580:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004584:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 8004588:	e7e3      	b.n	8004552 <RCCEx_PLL3_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800458a:	f7fc ff9f 	bl	80014cc <HAL_GetTick>
 800458e:	1b40      	subs	r0, r0, r5
 8004590:	2802      	cmp	r0, #2
 8004592:	d9e7      	bls.n	8004564 <RCCEx_PLL3_Config+0xb4>
 8004594:	e7f0      	b.n	8004578 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 8004596:	2001      	movs	r0, #1
 8004598:	e7ef      	b.n	800457a <RCCEx_PLL3_Config+0xca>
 800459a:	bf00      	nop
 800459c:	58024400 	.word	0x58024400

080045a0 <HAL_RCCEx_PeriphCLKConfig>:
{
 80045a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80045a4:	6803      	ldr	r3, [r0, #0]
{
 80045a6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80045a8:	0118      	lsls	r0, r3, #4
 80045aa:	d51e      	bpl.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 80045ac:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 80045ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80045b2:	d02b      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x6c>
 80045b4:	d80f      	bhi.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x36>
 80045b6:	b1d3      	cbz	r3, 80045ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80045b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045bc:	d01d      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x5a>
 80045be:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80045c0:	682b      	ldr	r3, [r5, #0]
 80045c2:	05d9      	lsls	r1, r3, #23
 80045c4:	d551      	bpl.n	800466a <HAL_RCCEx_PeriphCLKConfig+0xca>
    switch (PeriphClkInit->Sai1ClockSelection)
 80045c6:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80045c8:	2b04      	cmp	r3, #4
 80045ca:	d84d      	bhi.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 80045cc:	e8df f003 	tbb	[pc, r3]
 80045d0:	29463f24 	.word	0x29463f24
 80045d4:	29          	.byte	0x29
 80045d5:	00          	.byte	0x00
    switch (PeriphClkInit->SpdifrxClockSelection)
 80045d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80045da:	d1f0      	bne.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x1e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80045dc:	4a85      	ldr	r2, [pc, #532]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80045de:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 80045e0:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80045e2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80045e6:	430b      	orrs	r3, r1
 80045e8:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80045ea:	2600      	movs	r6, #0
 80045ec:	e7e8      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x20>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045ee:	4a81      	ldr	r2, [pc, #516]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80045f0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80045f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 80045f8:	e7f0      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80045fa:	2102      	movs	r1, #2
 80045fc:	f105 0008 	add.w	r0, r5, #8
 8004600:	f7ff fede 	bl	80043c0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004604:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 8004606:	2800      	cmp	r0, #0
 8004608:	d1da      	bne.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x20>
 800460a:	e7e7      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800460c:	2102      	movs	r1, #2
 800460e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004612:	f7ff ff4d 	bl	80044b0 <RCCEx_PLL3_Config>
 8004616:	e7f5      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x64>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004618:	4a76      	ldr	r2, [pc, #472]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800461a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800461c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004620:	62d3      	str	r3, [r2, #44]	@ 0x2c
    switch (PeriphClkInit->SpdifrxClockSelection)
 8004622:	4634      	mov	r4, r6
    if (ret == HAL_OK)
 8004624:	bb1c      	cbnz	r4, 800466e <HAL_RCCEx_PeriphCLKConfig+0xce>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004626:	4a73      	ldr	r2, [pc, #460]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004628:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800462a:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800462c:	f023 0307 	bic.w	r3, r3, #7
 8004630:	430b      	orrs	r3, r1
 8004632:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004634:	682b      	ldr	r3, [r5, #0]
 8004636:	059a      	lsls	r2, r3, #22
 8004638:	d528      	bpl.n	800468c <HAL_RCCEx_PeriphCLKConfig+0xec>
    switch (PeriphClkInit->Sai23ClockSelection)
 800463a:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 800463c:	2b80      	cmp	r3, #128	@ 0x80
 800463e:	d043      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8004640:	d817      	bhi.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0xd2>
 8004642:	b3a3      	cbz	r3, 80046ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8004644:	2b40      	cmp	r3, #64	@ 0x40
 8004646:	d038      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x11a>
 8004648:	2601      	movs	r6, #1
 800464a:	4634      	mov	r4, r6
 800464c:	e01e      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0xec>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800464e:	2100      	movs	r1, #0
 8004650:	f105 0008 	add.w	r0, r5, #8
 8004654:	f7ff feb4 	bl	80043c0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004658:	4604      	mov	r4, r0
        break;
 800465a:	e7e3      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x84>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800465c:	2100      	movs	r1, #0
 800465e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004662:	f7ff ff25 	bl	80044b0 <RCCEx_PLL3_Config>
 8004666:	e7f7      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    switch (PeriphClkInit->Sai1ClockSelection)
 8004668:	2601      	movs	r6, #1
 800466a:	4634      	mov	r4, r6
 800466c:	e7e2      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x94>
 800466e:	4626      	mov	r6, r4
 8004670:	e7e0      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch (PeriphClkInit->Sai23ClockSelection)
 8004672:	2bc0      	cmp	r3, #192	@ 0xc0
 8004674:	d002      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8004676:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800467a:	d1e5      	bne.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    if (ret == HAL_OK)
 800467c:	bb54      	cbnz	r4, 80046d4 <HAL_RCCEx_PeriphCLKConfig+0x134>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800467e:	4a5d      	ldr	r2, [pc, #372]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004680:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 8004682:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8004684:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 8004688:	430b      	orrs	r3, r1
 800468a:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800468c:	682b      	ldr	r3, [r5, #0]
 800468e:	055b      	lsls	r3, r3, #21
 8004690:	d531      	bpl.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
    switch (PeriphClkInit->Sai4AClockSelection)
 8004692:	f8d5 30a8 	ldr.w	r3, [r5, #168]	@ 0xa8
 8004696:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800469a:	d049      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800469c:	d81c      	bhi.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x138>
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d039      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x176>
 80046a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046a6:	d03c      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x182>
 80046a8:	2601      	movs	r6, #1
 80046aa:	4634      	mov	r4, r6
 80046ac:	e023      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046ae:	4a51      	ldr	r2, [pc, #324]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80046b0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80046b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 80046b8:	e7e0      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0xdc>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046ba:	2100      	movs	r1, #0
 80046bc:	f105 0008 	add.w	r0, r5, #8
 80046c0:	f7ff fe7e 	bl	80043c0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046c4:	4604      	mov	r4, r0
        break;
 80046c6:	e7d9      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0xdc>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046c8:	2100      	movs	r1, #0
 80046ca:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 80046ce:	f7ff feef 	bl	80044b0 <RCCEx_PLL3_Config>
 80046d2:	e7f7      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x124>
 80046d4:	4626      	mov	r6, r4
 80046d6:	e7d9      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0xec>
    switch (PeriphClkInit->Sai4AClockSelection)
 80046d8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80046dc:	d002      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x144>
 80046de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80046e2:	d1e1      	bne.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x108>
    if (ret == HAL_OK)
 80046e4:	bb54      	cbnz	r4, 800473c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80046e6:	4a43      	ldr	r2, [pc, #268]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80046e8:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 80046ec:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80046ee:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 80046f2:	430b      	orrs	r3, r1
 80046f4:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80046f6:	682b      	ldr	r3, [r5, #0]
 80046f8:	051f      	lsls	r7, r3, #20
 80046fa:	d530      	bpl.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    switch (PeriphClkInit->Sai4BClockSelection)
 80046fc:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 8004700:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004704:	d045      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 8004706:	d81b      	bhi.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 8004708:	b3b3      	cbz	r3, 8004778 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800470a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800470e:	d039      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8004710:	2601      	movs	r6, #1
 8004712:	4634      	mov	r4, r6
 8004714:	e023      	b.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004716:	4a37      	ldr	r2, [pc, #220]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004718:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800471a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800471e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8004720:	e7e0      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x144>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004722:	2100      	movs	r1, #0
 8004724:	f105 0008 	add.w	r0, r5, #8
 8004728:	f7ff fe4a 	bl	80043c0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800472c:	4604      	mov	r4, r0
        break;
 800472e:	e7d9      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x144>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004730:	2100      	movs	r1, #0
 8004732:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004736:	f7ff febb 	bl	80044b0 <RCCEx_PLL3_Config>
 800473a:	e7f7      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800473c:	4626      	mov	r6, r4
 800473e:	e7da      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
    switch (PeriphClkInit->Sai4BClockSelection)
 8004740:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004744:	d002      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8004746:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800474a:	d1e1      	bne.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x170>
    if (ret == HAL_OK)
 800474c:	bb3c      	cbnz	r4, 800479e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800474e:	4a29      	ldr	r2, [pc, #164]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004750:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 8004754:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004756:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800475a:	430b      	orrs	r3, r1
 800475c:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800475e:	682b      	ldr	r3, [r5, #0]
 8004760:	0198      	lsls	r0, r3, #6
 8004762:	d528      	bpl.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    switch (PeriphClkInit->QspiClockSelection)
 8004764:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8004766:	2b20      	cmp	r3, #32
 8004768:	d03b      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x242>
 800476a:	d81a      	bhi.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800476c:	b1db      	cbz	r3, 80047a6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800476e:	2b10      	cmp	r3, #16
 8004770:	d031      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x236>
 8004772:	2601      	movs	r6, #1
 8004774:	4634      	mov	r4, r6
 8004776:	e01e      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x216>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004778:	4a1e      	ldr	r2, [pc, #120]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800477a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800477c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004780:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8004782:	e7e3      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004784:	2100      	movs	r1, #0
 8004786:	f105 0008 	add.w	r0, r5, #8
 800478a:	f7ff fe19 	bl	80043c0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800478e:	4604      	mov	r4, r0
        break;
 8004790:	e7dc      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004792:	2100      	movs	r1, #0
 8004794:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004798:	f7ff fe8a 	bl	80044b0 <RCCEx_PLL3_Config>
 800479c:	e7f7      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800479e:	4626      	mov	r6, r4
 80047a0:	e7dd      	b.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    switch (PeriphClkInit->QspiClockSelection)
 80047a2:	2b30      	cmp	r3, #48	@ 0x30
 80047a4:	d1e5      	bne.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    if (ret == HAL_OK)
 80047a6:	bb1c      	cbnz	r4, 80047f0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80047a8:	4a12      	ldr	r2, [pc, #72]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80047aa:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80047ac:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80047ae:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80047b2:	430b      	orrs	r3, r1
 80047b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80047b6:	682b      	ldr	r3, [r5, #0]
 80047b8:	04d9      	lsls	r1, r3, #19
 80047ba:	d52c      	bpl.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x276>
    switch (PeriphClkInit->Spi123ClockSelection)
 80047bc:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 80047be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047c2:	d076      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80047c4:	d818      	bhi.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x258>
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d066      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 80047ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047ce:	d069      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80047d0:	2601      	movs	r6, #1
 80047d2:	4634      	mov	r4, r6
 80047d4:	e01f      	b.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x276>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047d6:	4a07      	ldr	r2, [pc, #28]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80047d8:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80047da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047de:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 80047e0:	e7e1      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x206>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80047e2:	2102      	movs	r1, #2
 80047e4:	f105 0008 	add.w	r0, r5, #8
 80047e8:	f7ff fdea 	bl	80043c0 <RCCEx_PLL2_Config>
 80047ec:	4604      	mov	r4, r0
        break;
 80047ee:	e7da      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80047f0:	4626      	mov	r6, r4
 80047f2:	e7e0      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x216>
 80047f4:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi123ClockSelection)
 80047f8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80047fc:	d002      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80047fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004802:	d1e5      	bne.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x230>
    if (ret == HAL_OK)
 8004804:	2c00      	cmp	r4, #0
 8004806:	d15a      	bne.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x31e>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004808:	4a9e      	ldr	r2, [pc, #632]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800480a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800480c:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800480e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004812:	430b      	orrs	r3, r1
 8004814:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004816:	682b      	ldr	r3, [r5, #0]
 8004818:	049a      	lsls	r2, r3, #18
 800481a:	d50b      	bpl.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x294>
    switch (PeriphClkInit->Spi45ClockSelection)
 800481c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800481e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004822:	d066      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8004824:	d84d      	bhi.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x322>
 8004826:	2b00      	cmp	r3, #0
 8004828:	d053      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800482a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800482e:	d059      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004830:	2601      	movs	r6, #1
 8004832:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004834:	682b      	ldr	r3, [r5, #0]
 8004836:	045b      	lsls	r3, r3, #17
 8004838:	d50c      	bpl.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    switch (PeriphClkInit->Spi6ClockSelection)
 800483a:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 800483e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004842:	d077      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x394>
 8004844:	d85d      	bhi.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004846:	2b00      	cmp	r3, #0
 8004848:	d063      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800484a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800484e:	d06a      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8004850:	2601      	movs	r6, #1
 8004852:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004854:	682b      	ldr	r3, [r5, #0]
 8004856:	041f      	lsls	r7, r3, #16
 8004858:	d511      	bpl.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    switch (PeriphClkInit->FdcanClockSelection)
 800485a:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800485c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004860:	d070      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8004862:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004866:	d073      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8004868:	2b00      	cmp	r3, #0
 800486a:	d178      	bne.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x3be>
    if (ret == HAL_OK)
 800486c:	2c00      	cmp	r4, #0
 800486e:	d179      	bne.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004870:	4a84      	ldr	r2, [pc, #528]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004872:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8004874:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8004876:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800487a:	430b      	orrs	r3, r1
 800487c:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800487e:	682b      	ldr	r3, [r5, #0]
 8004880:	01d8      	lsls	r0, r3, #7
 8004882:	d57f      	bpl.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    switch (PeriphClkInit->FmcClockSelection)
 8004884:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8004886:	2b03      	cmp	r3, #3
 8004888:	f200 80d8 	bhi.w	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x49c>
 800488c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004890:	006c0071 	.word	0x006c0071
 8004894:	007100cf 	.word	0x007100cf
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004898:	4a7a      	ldr	r2, [pc, #488]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800489a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800489c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 80048a2:	e7af      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x264>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048a4:	2100      	movs	r1, #0
 80048a6:	f105 0008 	add.w	r0, r5, #8
 80048aa:	f7ff fd89 	bl	80043c0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80048ae:	4604      	mov	r4, r0
        break;
 80048b0:	e7a8      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x264>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80048b2:	2100      	movs	r1, #0
 80048b4:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 80048b8:	f7ff fdfa 	bl	80044b0 <RCCEx_PLL3_Config>
 80048bc:	e7f7      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x30e>
 80048be:	4626      	mov	r6, r4
 80048c0:	e7a9      	b.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x276>
    switch (PeriphClkInit->Spi45ClockSelection)
 80048c2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80048c6:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 80048ca:	d002      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80048cc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80048d0:	d1ae      	bne.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x290>
    if (ret == HAL_OK)
 80048d2:	b9a4      	cbnz	r4, 80048fe <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80048d4:	4a6b      	ldr	r2, [pc, #428]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048d6:	6e69      	ldr	r1, [r5, #100]	@ 0x64
 80048d8:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80048da:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80048de:	430b      	orrs	r3, r1
 80048e0:	6513      	str	r3, [r2, #80]	@ 0x50
 80048e2:	e7a7      	b.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x294>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80048e4:	2101      	movs	r1, #1
 80048e6:	f105 0008 	add.w	r0, r5, #8
 80048ea:	f7ff fd69 	bl	80043c0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048ee:	4604      	mov	r4, r0
        break;
 80048f0:	e7ef      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x332>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048f2:	2101      	movs	r1, #1
 80048f4:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 80048f8:	f7ff fdda 	bl	80044b0 <RCCEx_PLL3_Config>
 80048fc:	e7f7      	b.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80048fe:	4626      	mov	r6, r4
 8004900:	e798      	b.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x294>
    switch (PeriphClkInit->Spi6ClockSelection)
 8004902:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004906:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800490a:	d002      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800490c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004910:	d19e      	bne.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    if (ret == HAL_OK)
 8004912:	b9ac      	cbnz	r4, 8004940 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004914:	4a5b      	ldr	r2, [pc, #364]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004916:	f8d5 10b0 	ldr.w	r1, [r5, #176]	@ 0xb0
 800491a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800491c:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 8004920:	430b      	orrs	r3, r1
 8004922:	6593      	str	r3, [r2, #88]	@ 0x58
 8004924:	e796      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004926:	2101      	movs	r1, #1
 8004928:	f105 0008 	add.w	r0, r5, #8
 800492c:	f7ff fd48 	bl	80043c0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004930:	4604      	mov	r4, r0
        break;
 8004932:	e7ee      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x372>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004934:	2101      	movs	r1, #1
 8004936:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800493a:	f7ff fdb9 	bl	80044b0 <RCCEx_PLL3_Config>
 800493e:	e7f7      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x390>
 8004940:	4626      	mov	r6, r4
 8004942:	e787      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004944:	4a4f      	ldr	r2, [pc, #316]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004946:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004948:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800494c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800494e:	e78d      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004950:	2101      	movs	r1, #1
 8004952:	f105 0008 	add.w	r0, r5, #8
 8004956:	f7ff fd33 	bl	80043c0 <RCCEx_PLL2_Config>
 800495a:	4604      	mov	r4, r0
        break;
 800495c:	e786      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    switch (PeriphClkInit->FdcanClockSelection)
 800495e:	2601      	movs	r6, #1
 8004960:	4634      	mov	r4, r6
 8004962:	e78c      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8004964:	4626      	mov	r6, r4
 8004966:	e78a      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x2de>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004968:	4a46      	ldr	r2, [pc, #280]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800496a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800496c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004970:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8004972:	2c00      	cmp	r4, #0
 8004974:	d165      	bne.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004976:	4a43      	ldr	r2, [pc, #268]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004978:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 800497a:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800497c:	f023 0303 	bic.w	r3, r3, #3
 8004980:	430b      	orrs	r3, r1
 8004982:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004984:	682b      	ldr	r3, [r5, #0]
 8004986:	0259      	lsls	r1, r3, #9
 8004988:	d539      	bpl.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x45e>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800498a:	4f3f      	ldr	r7, [pc, #252]	@ (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004992:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8004994:	f7fc fd9a 	bl	80014cc <HAL_GetTick>
 8004998:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	05da      	lsls	r2, r3, #23
 800499e:	d552      	bpl.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    if (ret == HAL_OK)
 80049a0:	2c00      	cmp	r4, #0
 80049a2:	d175      	bne.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80049a4:	4b37      	ldr	r3, [pc, #220]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049a6:	f8d5 00b4 	ldr.w	r0, [r5, #180]	@ 0xb4
 80049aa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80049ac:	4042      	eors	r2, r0
 80049ae:	f412 7f40 	tst.w	r2, #768	@ 0x300
 80049b2:	d00b      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x42c>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049b4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 80049b6:	6f19      	ldr	r1, [r3, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049b8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80049bc:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 80049c0:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049c2:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80049c4:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 80049c8:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 80049ca:	671a      	str	r2, [r3, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80049cc:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 80049d0:	d042      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049d2:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 80049d6:	492b      	ldr	r1, [pc, #172]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049d8:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 80049dc:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 80049e0:	d14b      	bne.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80049e2:	6908      	ldr	r0, [r1, #16]
 80049e4:	4a29      	ldr	r2, [pc, #164]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049e6:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
 80049ea:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 80049ee:	4302      	orrs	r2, r0
 80049f0:	610a      	str	r2, [r1, #16]
 80049f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049f6:	4a23      	ldr	r2, [pc, #140]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049f8:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 80049fa:	430b      	orrs	r3, r1
 80049fc:	6713      	str	r3, [r2, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80049fe:	682b      	ldr	r3, [r5, #0]
 8004a00:	07d8      	lsls	r0, r3, #31
 8004a02:	d509      	bpl.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x478>
    switch (PeriphClkInit->Usart16ClockSelection)
 8004a04:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 8004a06:	2b10      	cmp	r3, #16
 8004a08:	d05a      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8004a0a:	d843      	bhi.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d047      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8004a10:	2b08      	cmp	r3, #8
 8004a12:	d04e      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x512>
 8004a14:	2601      	movs	r6, #1
 8004a16:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004a18:	682b      	ldr	r3, [r5, #0]
 8004a1a:	0799      	lsls	r1, r3, #30
 8004a1c:	d566      	bpl.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x54c>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004a1e:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 8004a20:	2b05      	cmp	r3, #5
 8004a22:	d879      	bhi.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x578>
 8004a24:	e8df f003 	tbb	[pc, r3]
 8004a28:	5a72545a 	.word	0x5a72545a
 8004a2c:	5a5a      	.short	0x5a5a
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a2e:	2102      	movs	r1, #2
 8004a30:	f105 0008 	add.w	r0, r5, #8
 8004a34:	f7ff fcc4 	bl	80043c0 <RCCEx_PLL2_Config>
 8004a38:	4604      	mov	r4, r0
        break;
 8004a3a:	e79a      	b.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    switch (PeriphClkInit->FmcClockSelection)
 8004a3c:	2601      	movs	r6, #1
 8004a3e:	4634      	mov	r4, r6
 8004a40:	e7a0      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004a42:	4626      	mov	r6, r4
 8004a44:	e79e      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a46:	f7fc fd41 	bl	80014cc <HAL_GetTick>
 8004a4a:	eba0 0008 	sub.w	r0, r0, r8
 8004a4e:	2864      	cmp	r0, #100	@ 0x64
 8004a50:	d9a3      	bls.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
        ret = HAL_TIMEOUT;
 8004a52:	2603      	movs	r6, #3
 8004a54:	4634      	mov	r4, r6
 8004a56:	e7d2      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x45e>
        tickstart = HAL_GetTick();
 8004a58:	f7fc fd38 	bl	80014cc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a5c:	f8df 8024 	ldr.w	r8, [pc, #36]	@ 8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        tickstart = HAL_GetTick();
 8004a60:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a62:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a66:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8004a6a:	079b      	lsls	r3, r3, #30
 8004a6c:	d4b1      	bmi.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x432>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a6e:	f7fc fd2d 	bl	80014cc <HAL_GetTick>
 8004a72:	1bc0      	subs	r0, r0, r7
 8004a74:	4548      	cmp	r0, r9
 8004a76:	d9f6      	bls.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8004a78:	e7eb      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a7a:	690a      	ldr	r2, [r1, #16]
 8004a7c:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8004a80:	e7b6      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x450>
 8004a82:	bf00      	nop
 8004a84:	58024400 	.word	0x58024400
 8004a88:	58024800 	.word	0x58024800
 8004a8c:	00ffffcf 	.word	0x00ffffcf
 8004a90:	4626      	mov	r6, r4
 8004a92:	e7b4      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x45e>
    switch (PeriphClkInit->Usart16ClockSelection)
 8004a94:	f023 0208 	bic.w	r2, r3, #8
 8004a98:	2a20      	cmp	r2, #32
 8004a9a:	d001      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8004a9c:	2b18      	cmp	r3, #24
 8004a9e:	d1b9      	bne.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x474>
    if (ret == HAL_OK)
 8004aa0:	b9a4      	cbnz	r4, 8004acc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004aa2:	4a20      	ldr	r2, [pc, #128]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8004aa4:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
 8004aa6:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004aa8:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8004aac:	430b      	orrs	r3, r1
 8004aae:	6553      	str	r3, [r2, #84]	@ 0x54
 8004ab0:	e7b2      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x478>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ab2:	2101      	movs	r1, #1
 8004ab4:	f105 0008 	add.w	r0, r5, #8
 8004ab8:	f7ff fc82 	bl	80043c0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004abc:	4604      	mov	r4, r0
        break;
 8004abe:	e7ef      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x500>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ac0:	2101      	movs	r1, #1
 8004ac2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004ac6:	f7ff fcf3 	bl	80044b0 <RCCEx_PLL3_Config>
 8004aca:	e7f7      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x51c>
 8004acc:	4626      	mov	r6, r4
 8004ace:	e7a3      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x478>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ad0:	2101      	movs	r1, #1
 8004ad2:	f105 0008 	add.w	r0, r5, #8
 8004ad6:	f7ff fc73 	bl	80043c0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ada:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8004adc:	b9fc      	cbnz	r4, 8004b1e <HAL_RCCEx_PeriphCLKConfig+0x57e>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004ade:	4a11      	ldr	r2, [pc, #68]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8004ae0:	6fa9      	ldr	r1, [r5, #120]	@ 0x78
 8004ae2:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004ae4:	f023 0307 	bic.w	r3, r3, #7
 8004ae8:	430b      	orrs	r3, r1
 8004aea:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004aec:	682b      	ldr	r3, [r5, #0]
 8004aee:	075a      	lsls	r2, r3, #29
 8004af0:	d52b      	bpl.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004af2:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8004af6:	2b05      	cmp	r3, #5
 8004af8:	f200 816e 	bhi.w	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8004afc:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004b00:	0014001a 	.word	0x0014001a
 8004b04:	001a0166 	.word	0x001a0166
 8004b08:	001a001a 	.word	0x001a001a
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b0c:	2101      	movs	r1, #1
 8004b0e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004b12:	f7ff fccd 	bl	80044b0 <RCCEx_PLL3_Config>
 8004b16:	e7e0      	b.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x53a>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004b18:	2601      	movs	r6, #1
 8004b1a:	4634      	mov	r4, r6
 8004b1c:	e7e6      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x54c>
 8004b1e:	4626      	mov	r6, r4
 8004b20:	e7e4      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x54c>
 8004b22:	bf00      	nop
 8004b24:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b28:	2101      	movs	r1, #1
 8004b2a:	f105 0008 	add.w	r0, r5, #8
 8004b2e:	f7ff fc47 	bl	80043c0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b32:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8004b34:	2c00      	cmp	r4, #0
 8004b36:	f040 8152 	bne.w	8004dde <HAL_RCCEx_PeriphCLKConfig+0x83e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b3a:	4aaa      	ldr	r2, [pc, #680]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004b3c:	f8d5 1094 	ldr.w	r1, [r5, #148]	@ 0x94
 8004b40:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004b42:	f023 0307 	bic.w	r3, r3, #7
 8004b46:	430b      	orrs	r3, r1
 8004b48:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b4a:	682b      	ldr	r3, [r5, #0]
 8004b4c:	069b      	lsls	r3, r3, #26
 8004b4e:	d510      	bpl.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004b50:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8004b54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b58:	f000 8160 	beq.w	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x87c>
 8004b5c:	f200 8144 	bhi.w	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f000 814a 	beq.w	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x85a>
 8004b66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b6a:	f000 8150 	beq.w	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x86e>
 8004b6e:	2601      	movs	r6, #1
 8004b70:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004b72:	682b      	ldr	r3, [r5, #0]
 8004b74:	065f      	lsls	r7, r3, #25
 8004b76:	d510      	bpl.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x5fa>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004b78:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 8004b7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b80:	f000 816e 	beq.w	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8004b84:	f200 8152 	bhi.w	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x88c>
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f000 8158 	beq.w	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x89e>
 8004b8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b92:	f000 815e 	beq.w	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
 8004b96:	2601      	movs	r6, #1
 8004b98:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004b9a:	682b      	ldr	r3, [r5, #0]
 8004b9c:	0618      	lsls	r0, r3, #24
 8004b9e:	d510      	bpl.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004ba0:	f8d5 30a0 	ldr.w	r3, [r5, #160]	@ 0xa0
 8004ba4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ba8:	f000 817c 	beq.w	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x904>
 8004bac:	f200 8160 	bhi.w	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f000 8166 	beq.w	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004bb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bba:	f000 816c 	beq.w	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8004bbe:	2601      	movs	r6, #1
 8004bc0:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004bc2:	682b      	ldr	r3, [r5, #0]
 8004bc4:	0719      	lsls	r1, r3, #28
 8004bc6:	d514      	bpl.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x652>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004bc8:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
 8004bcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bd0:	d107      	bne.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x642>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004bd2:	2102      	movs	r1, #2
 8004bd4:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004bd8:	f7ff fc6a 	bl	80044b0 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8004bdc:	2800      	cmp	r0, #0
 8004bde:	bf18      	it	ne
 8004be0:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004be2:	4a80      	ldr	r2, [pc, #512]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004be4:	f8d5 1084 	ldr.w	r1, [r5, #132]	@ 0x84
 8004be8:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004bea:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004bee:	430b      	orrs	r3, r1
 8004bf0:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004bf2:	682b      	ldr	r3, [r5, #0]
 8004bf4:	06da      	lsls	r2, r3, #27
 8004bf6:	d514      	bpl.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x682>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004bf8:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8004bfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c00:	d107      	bne.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x672>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004c02:	2102      	movs	r1, #2
 8004c04:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004c08:	f7ff fc52 	bl	80044b0 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8004c0c:	2800      	cmp	r0, #0
 8004c0e:	bf18      	it	ne
 8004c10:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c12:	4a74      	ldr	r2, [pc, #464]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004c14:	f8d5 1098 	ldr.w	r1, [r5, #152]	@ 0x98
 8004c18:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004c1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c1e:	430b      	orrs	r3, r1
 8004c20:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c22:	682b      	ldr	r3, [r5, #0]
 8004c24:	031b      	lsls	r3, r3, #12
 8004c26:	d51b      	bpl.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    switch (PeriphClkInit->AdcClockSelection)
 8004c28:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 8004c2c:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8004c30:	f000 8140 	beq.w	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x914>
 8004c34:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8004c38:	d007      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8004c3a:	2900      	cmp	r1, #0
 8004c3c:	f040 8140 	bne.w	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x920>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c40:	f105 0008 	add.w	r0, r5, #8
 8004c44:	f7ff fbbc 	bl	80043c0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c48:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8004c4a:	2c00      	cmp	r4, #0
 8004c4c:	f040 813b 	bne.w	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x926>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c50:	4a64      	ldr	r2, [pc, #400]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004c52:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 8004c56:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004c58:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8004c5c:	430b      	orrs	r3, r1
 8004c5e:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c60:	682b      	ldr	r3, [r5, #0]
 8004c62:	035f      	lsls	r7, r3, #13
 8004c64:	d50f      	bpl.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    switch (PeriphClkInit->UsbClockSelection)
 8004c66:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
 8004c6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c6e:	f000 813b 	beq.w	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x948>
 8004c72:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c76:	f000 812d 	beq.w	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8004c7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c7e:	f000 8124 	beq.w	8004eca <HAL_RCCEx_PeriphCLKConfig+0x92a>
 8004c82:	2601      	movs	r6, #1
 8004c84:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004c86:	682b      	ldr	r3, [r5, #0]
 8004c88:	03d8      	lsls	r0, r3, #15
 8004c8a:	d509      	bpl.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    switch (PeriphClkInit->SdmmcClockSelection)
 8004c8c:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f000 8133 	beq.w	8004efa <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004c94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c98:	f000 813d 	beq.w	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8004c9c:	2601      	movs	r6, #1
 8004c9e:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004ca0:	682b      	ldr	r3, [r5, #0]
 8004ca2:	0099      	lsls	r1, r3, #2
 8004ca4:	d507      	bpl.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x716>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004ca6:	2102      	movs	r1, #2
 8004ca8:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004cac:	f7ff fc00 	bl	80044b0 <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 8004cb0:	2800      	cmp	r0, #0
 8004cb2:	bf18      	it	ne
 8004cb4:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004cb6:	e9d5 3100 	ldrd	r3, r1, [r5]
 8004cba:	039a      	lsls	r2, r3, #14
 8004cbc:	f140 8143 	bpl.w	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    switch (PeriphClkInit->RngClockSelection)
 8004cc0:	f8d5 0080 	ldr.w	r0, [r5, #128]	@ 0x80
 8004cc4:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8004cc8:	f000 813f 	beq.w	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
 8004ccc:	f200 812c 	bhi.w	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8004cd0:	2800      	cmp	r0, #0
 8004cd2:	f000 812f 	beq.w	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x994>
 8004cd6:	2401      	movs	r4, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004cd8:	02df      	lsls	r7, r3, #11
 8004cda:	d506      	bpl.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x74a>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004cdc:	4841      	ldr	r0, [pc, #260]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004cde:	6f6e      	ldr	r6, [r5, #116]	@ 0x74
 8004ce0:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8004ce2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004ce6:	4332      	orrs	r2, r6
 8004ce8:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004cea:	00de      	lsls	r6, r3, #3
 8004cec:	d507      	bpl.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x75e>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004cee:	483d      	ldr	r0, [pc, #244]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004cf0:	f8d5 60b8 	ldr.w	r6, [r5, #184]	@ 0xb8
 8004cf4:	6902      	ldr	r2, [r0, #16]
 8004cf6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004cfa:	4332      	orrs	r2, r6
 8004cfc:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004cfe:	0298      	lsls	r0, r3, #10
 8004d00:	d506      	bpl.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x770>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d02:	4838      	ldr	r0, [pc, #224]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004d04:	6eee      	ldr	r6, [r5, #108]	@ 0x6c
 8004d06:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8004d08:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8004d0c:	4332      	orrs	r2, r6
 8004d0e:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004d10:	005a      	lsls	r2, r3, #1
 8004d12:	d509      	bpl.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x788>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d14:	4a33      	ldr	r2, [pc, #204]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004d16:	6910      	ldr	r0, [r2, #16]
 8004d18:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 8004d1c:	6110      	str	r0, [r2, #16]
 8004d1e:	6910      	ldr	r0, [r2, #16]
 8004d20:	f8d5 60bc 	ldr.w	r6, [r5, #188]	@ 0xbc
 8004d24:	4330      	orrs	r0, r6
 8004d26:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	da06      	bge.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x79a>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004d2c:	482d      	ldr	r0, [pc, #180]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004d2e:	6d6e      	ldr	r6, [r5, #84]	@ 0x54
 8004d30:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8004d32:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004d36:	4332      	orrs	r2, r6
 8004d38:	64c2      	str	r2, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d3a:	021f      	lsls	r7, r3, #8
 8004d3c:	d507      	bpl.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d3e:	4a29      	ldr	r2, [pc, #164]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004d40:	f8d5 008c 	ldr.w	r0, [r5, #140]	@ 0x8c
 8004d44:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004d46:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004d4a:	4303      	orrs	r3, r0
 8004d4c:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004d4e:	07ce      	lsls	r6, r1, #31
 8004d50:	d506      	bpl.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d52:	2100      	movs	r1, #0
 8004d54:	f105 0008 	add.w	r0, r5, #8
 8004d58:	f7ff fb32 	bl	80043c0 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8004d5c:	4607      	mov	r7, r0
 8004d5e:	b900      	cbnz	r0, 8004d62 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    switch (PeriphClkInit->RngClockSelection)
 8004d60:	4627      	mov	r7, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004d62:	686b      	ldr	r3, [r5, #4]
 8004d64:	079c      	lsls	r4, r3, #30
 8004d66:	d506      	bpl.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x7d6>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d68:	2101      	movs	r1, #1
 8004d6a:	f105 0008 	add.w	r0, r5, #8
 8004d6e:	f7ff fb27 	bl	80043c0 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8004d72:	4606      	mov	r6, r0
 8004d74:	b900      	cbnz	r0, 8004d78 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    switch (PeriphClkInit->RngClockSelection)
 8004d76:	463e      	mov	r6, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004d78:	686b      	ldr	r3, [r5, #4]
 8004d7a:	0758      	lsls	r0, r3, #29
 8004d7c:	d506      	bpl.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d7e:	2102      	movs	r1, #2
 8004d80:	f105 0008 	add.w	r0, r5, #8
 8004d84:	f7ff fb1c 	bl	80043c0 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8004d88:	4604      	mov	r4, r0
 8004d8a:	b900      	cbnz	r0, 8004d8e <HAL_RCCEx_PeriphCLKConfig+0x7ee>
    switch (PeriphClkInit->RngClockSelection)
 8004d8c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004d8e:	686b      	ldr	r3, [r5, #4]
 8004d90:	0719      	lsls	r1, r3, #28
 8004d92:	d506      	bpl.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x802>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d94:	2100      	movs	r1, #0
 8004d96:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004d9a:	f7ff fb89 	bl	80044b0 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8004d9e:	4606      	mov	r6, r0
 8004da0:	b900      	cbnz	r0, 8004da4 <HAL_RCCEx_PeriphCLKConfig+0x804>
    switch (PeriphClkInit->RngClockSelection)
 8004da2:	4626      	mov	r6, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004da4:	686b      	ldr	r3, [r5, #4]
 8004da6:	06da      	lsls	r2, r3, #27
 8004da8:	d506      	bpl.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x818>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004daa:	2101      	movs	r1, #1
 8004dac:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004db0:	f7ff fb7e 	bl	80044b0 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8004db4:	4604      	mov	r4, r0
 8004db6:	b900      	cbnz	r0, 8004dba <HAL_RCCEx_PeriphCLKConfig+0x81a>
    switch (PeriphClkInit->RngClockSelection)
 8004db8:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004dba:	686b      	ldr	r3, [r5, #4]
 8004dbc:	069b      	lsls	r3, r3, #26
 8004dbe:	f100 80ca 	bmi.w	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  if (status == HAL_OK)
 8004dc2:	1e20      	subs	r0, r4, #0
 8004dc4:	bf18      	it	ne
 8004dc6:	2001      	movne	r0, #1
}
 8004dc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004dcc:	2101      	movs	r1, #1
 8004dce:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004dd2:	f7ff fb6d 	bl	80044b0 <RCCEx_PLL3_Config>
 8004dd6:	e6ac      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x592>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004dd8:	2601      	movs	r6, #1
 8004dda:	4634      	mov	r4, r6
 8004ddc:	e6b5      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8004dde:	4626      	mov	r6, r4
 8004de0:	e6b3      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8004de2:	bf00      	nop
 8004de4:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004de8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004dec:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8004df0:	d003      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x85a>
 8004df2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004df6:	f47f aeba 	bne.w	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    if (ret == HAL_OK)
 8004dfa:	b9ac      	cbnz	r4, 8004e28 <HAL_RCCEx_PeriphCLKConfig+0x888>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004dfc:	4a5b      	ldr	r2, [pc, #364]	@ (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8004dfe:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
 8004e02:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004e04:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 8004e08:	430b      	orrs	r3, r1
 8004e0a:	6553      	str	r3, [r2, #84]	@ 0x54
 8004e0c:	e6b1      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e0e:	2100      	movs	r1, #0
 8004e10:	f105 0008 	add.w	r0, r5, #8
 8004e14:	f7ff fad4 	bl	80043c0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e18:	4604      	mov	r4, r0
        break;
 8004e1a:	e7ee      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x85a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e1c:	2102      	movs	r1, #2
 8004e1e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004e22:	f7ff fb45 	bl	80044b0 <RCCEx_PLL3_Config>
 8004e26:	e7f7      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x878>
 8004e28:	4626      	mov	r6, r4
 8004e2a:	e6a2      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004e2c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004e30:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 8004e34:	d003      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x89e>
 8004e36:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004e3a:	f47f aeac 	bne.w	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    if (ret == HAL_OK)
 8004e3e:	b9ac      	cbnz	r4, 8004e6c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e40:	4a4a      	ldr	r2, [pc, #296]	@ (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8004e42:	f8d5 109c 	ldr.w	r1, [r5, #156]	@ 0x9c
 8004e46:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004e48:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8004e4c:	430b      	orrs	r3, r1
 8004e4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e50:	e6a3      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x5fa>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e52:	2100      	movs	r1, #0
 8004e54:	f105 0008 	add.w	r0, r5, #8
 8004e58:	f7ff fab2 	bl	80043c0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e5c:	4604      	mov	r4, r0
        break;
 8004e5e:	e7ee      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e60:	2102      	movs	r1, #2
 8004e62:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004e66:	f7ff fb23 	bl	80044b0 <RCCEx_PLL3_Config>
 8004e6a:	e7f7      	b.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8004e6c:	4626      	mov	r6, r4
 8004e6e:	e694      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x5fa>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004e70:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004e74:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8004e78:	d003      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004e7a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004e7e:	f47f ae9e 	bne.w	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x61e>
    if (ret == HAL_OK)
 8004e82:	b9ac      	cbnz	r4, 8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004e84:	4a39      	ldr	r2, [pc, #228]	@ (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8004e86:	f8d5 10a0 	ldr.w	r1, [r5, #160]	@ 0xa0
 8004e8a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004e8c:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8004e90:	430b      	orrs	r3, r1
 8004e92:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e94:	e695      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x622>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e96:	2100      	movs	r1, #0
 8004e98:	f105 0008 	add.w	r0, r5, #8
 8004e9c:	f7ff fa90 	bl	80043c0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ea0:	4604      	mov	r4, r0
        break;
 8004ea2:	e7ee      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ea4:	2102      	movs	r1, #2
 8004ea6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004eaa:	f7ff fb01 	bl	80044b0 <RCCEx_PLL3_Config>
 8004eae:	e7f7      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x900>
 8004eb0:	4626      	mov	r6, r4
 8004eb2:	e686      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x622>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004eb4:	2102      	movs	r1, #2
 8004eb6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004eba:	f7ff faf9 	bl	80044b0 <RCCEx_PLL3_Config>
 8004ebe:	e6c3      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
    switch (PeriphClkInit->AdcClockSelection)
 8004ec0:	2601      	movs	r6, #1
 8004ec2:	4634      	mov	r4, r6
 8004ec4:	e6cc      	b.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 8004ec6:	4626      	mov	r6, r4
 8004ec8:	e6ca      	b.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004eca:	4a28      	ldr	r2, [pc, #160]	@ (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8004ecc:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004ece:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ed2:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8004ed4:	b97c      	cbnz	r4, 8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x956>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ed6:	4a25      	ldr	r2, [pc, #148]	@ (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8004ed8:	f8d5 1088 	ldr.w	r1, [r5, #136]	@ 0x88
 8004edc:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004ede:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004ee2:	430b      	orrs	r3, r1
 8004ee4:	6553      	str	r3, [r2, #84]	@ 0x54
 8004ee6:	e6ce      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ee8:	2101      	movs	r1, #1
 8004eea:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004eee:	f7ff fadf 	bl	80044b0 <RCCEx_PLL3_Config>
 8004ef2:	4604      	mov	r4, r0
        break;
 8004ef4:	e7ee      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8004ef6:	4626      	mov	r6, r4
 8004ef8:	e6c5      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004efa:	4a1c      	ldr	r2, [pc, #112]	@ (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8004efc:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004efe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f02:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8004f04:	b974      	cbnz	r4, 8004f24 <HAL_RCCEx_PeriphCLKConfig+0x984>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004f06:	4a19      	ldr	r2, [pc, #100]	@ (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8004f08:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 8004f0a:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8004f0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f10:	430b      	orrs	r3, r1
 8004f12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f14:	e6c4      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x700>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f16:	2102      	movs	r1, #2
 8004f18:	f105 0008 	add.w	r0, r5, #8
 8004f1c:	f7ff fa50 	bl	80043c0 <RCCEx_PLL2_Config>
 8004f20:	4604      	mov	r4, r0
        break;
 8004f22:	e7ef      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8004f24:	4626      	mov	r6, r4
 8004f26:	e6bb      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    switch (PeriphClkInit->RngClockSelection)
 8004f28:	f420 7280 	bic.w	r2, r0, #256	@ 0x100
 8004f2c:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8004f30:	f47f aed1 	bne.w	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x736>
    if (ret == HAL_OK)
 8004f34:	2c00      	cmp	r4, #0
 8004f36:	f47f aecf 	bne.w	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x738>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f3a:	4c0c      	ldr	r4, [pc, #48]	@ (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8004f3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004f3e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004f42:	4302      	orrs	r2, r0
 8004f44:	6562      	str	r2, [r4, #84]	@ 0x54
      status = HAL_ERROR;
 8004f46:	4634      	mov	r4, r6
 8004f48:	e6c6      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x738>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f4a:	4f08      	ldr	r7, [pc, #32]	@ (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8004f4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f4e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004f52:	62fa      	str	r2, [r7, #44]	@ 0x2c
        break;
 8004f54:	e7ee      	b.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x994>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f56:	2102      	movs	r1, #2
 8004f58:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004f5c:	f7ff faa8 	bl	80044b0 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8004f60:	2800      	cmp	r0, #0
 8004f62:	f43f af2e 	beq.w	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x822>
  return HAL_ERROR;
 8004f66:	2001      	movs	r0, #1
 8004f68:	e72e      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x828>
 8004f6a:	bf00      	nop
 8004f6c:	58024400 	.word	0x58024400

08004f70 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8004f70:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004f72:	f7ff f9df 	bl	8004334 <HAL_RCC_GetHCLKFreq>
 8004f76:	4b05      	ldr	r3, [pc, #20]	@ (8004f8c <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8004f78:	4a05      	ldr	r2, [pc, #20]	@ (8004f90 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8004f7a:	6a1b      	ldr	r3, [r3, #32]
 8004f7c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004f80:	5cd3      	ldrb	r3, [r2, r3]
 8004f82:	f003 031f 	and.w	r3, r3, #31
}
 8004f86:	40d8      	lsrs	r0, r3
 8004f88:	bd08      	pop	{r3, pc}
 8004f8a:	bf00      	nop
 8004f8c:	58024400 	.word	0x58024400
 8004f90:	0800ec85 	.word	0x0800ec85

08004f94 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f94:	494f      	ldr	r1, [pc, #316]	@ (80050d4 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 8004f96:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f98:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004f9a:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004f9c:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (pll2m != 0U)
 8004f9e:	f416 3f7c 	tst.w	r6, #258048	@ 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004fa2:	f3c6 3305 	ubfx	r3, r6, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004fa6:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
  if (pll2m != 0U)
 8004fa8:	f000 8090 	beq.w	80050cc <HAL_RCCEx_GetPLL2ClockFreq+0x138>
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004fac:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004fb0:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004fb4:	f3c5 1200 	ubfx	r2, r5, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004fb8:	f004 0403 	and.w	r4, r4, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004fbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004fc0:	4353      	muls	r3, r2
    switch (pllsource)
 8004fc2:	2c01      	cmp	r4, #1
 8004fc4:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004fc8:	ee06 3a90 	vmov	s13, r3
 8004fcc:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8004fd0:	d06e      	beq.n	80050b0 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
 8004fd2:	2c02      	cmp	r4, #2
 8004fd4:	d05e      	beq.n	8005094 <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 8004fd6:	2c00      	cmp	r4, #0
 8004fd8:	d16a      	bne.n	80050b0 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fda:	680b      	ldr	r3, [r1, #0]
 8004fdc:	069b      	lsls	r3, r3, #26
 8004fde:	d547      	bpl.n	8005070 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004fe0:	680a      	ldr	r2, [r1, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004fe2:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004fe4:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 8004fe8:	4a3b      	ldr	r2, [pc, #236]	@ (80050d8 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004fee:	40ca      	lsrs	r2, r1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ff0:	ee07 2a90 	vmov	s15, r2
 8004ff4:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8004ff8:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8004ffc:	ee07 3a10 	vmov	s14, r3
 8005000:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005004:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005008:	ee37 7a06 	vadd.f32	s14, s14, s12
 800500c:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005010:	4a30      	ldr	r2, [pc, #192]	@ (80050d4 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 8005012:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8005014:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005018:	ee07 3a10 	vmov	s14, r3
 800501c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005020:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005024:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005028:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800502c:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005030:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8005032:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005036:	ee07 3a10 	vmov	s14, r3
 800503a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800503e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005042:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005046:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800504a:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800504e:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8005050:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005054:	ee06 3a90 	vmov	s13, r3
 8005058:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800505c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005060:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005064:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8005068:	ee17 3a90 	vmov	r3, s15
 800506c:	6083      	str	r3, [r0, #8]
}
 800506e:	bd70      	pop	{r4, r5, r6, pc}
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005070:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 8005072:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 80050dc <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8005076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800507a:	ee07 3a90 	vmov	s15, r3
 800507e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005086:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800508a:	eec5 6a87 	vdiv.f32	s13, s11, s14
 800508e:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 8005092:	e7bd      	b.n	8005010 <HAL_RCCEx_GetPLL2ClockFreq+0x7c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005094:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 8005096:	eddf 5a12 	vldr	s11, [pc, #72]	@ 80050e0 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 800509a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800509e:	ee07 3a90 	vmov	s15, r3
 80050a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050aa:	ee77 7a86 	vadd.f32	s15, s15, s12
 80050ae:	e7ec      	b.n	800508a <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80050b0:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 80050b2:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 80050e4 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 80050b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ba:	ee07 3a90 	vmov	s15, r3
 80050be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050c6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80050ca:	e7de      	b.n	800508a <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80050cc:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80050d0:	e7cc      	b.n	800506c <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 80050d2:	bf00      	nop
 80050d4:	58024400 	.word	0x58024400
 80050d8:	03d09000 	.word	0x03d09000
 80050dc:	4c742400 	.word	0x4c742400
 80050e0:	4af42400 	.word	0x4af42400
 80050e4:	4a742400 	.word	0x4a742400

080050e8 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80050e8:	494f      	ldr	r1, [pc, #316]	@ (8005228 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 80050ea:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80050ec:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80050ee:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80050f0:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (pll3m != 0U)
 80050f2:	f016 7f7c 	tst.w	r6, #66060288	@ 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80050f6:	f3c6 5305 	ubfx	r3, r6, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80050fa:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
  if (pll3m != 0U)
 80050fc:	f000 8090 	beq.w	8005220 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005100:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005104:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005108:	f3c5 2200 	ubfx	r2, r5, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800510c:	f004 0403 	and.w	r4, r4, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005110:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005114:	4353      	muls	r3, r2
    switch (pllsource)
 8005116:	2c01      	cmp	r4, #1
 8005118:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800511c:	ee06 3a90 	vmov	s13, r3
 8005120:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8005124:	d06e      	beq.n	8005204 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
 8005126:	2c02      	cmp	r4, #2
 8005128:	d05e      	beq.n	80051e8 <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 800512a:	2c00      	cmp	r4, #0
 800512c:	d16a      	bne.n	8005204 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800512e:	680b      	ldr	r3, [r1, #0]
 8005130:	069b      	lsls	r3, r3, #26
 8005132:	d547      	bpl.n	80051c4 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005134:	680a      	ldr	r2, [r1, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005136:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005138:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 800513c:	4a3b      	ldr	r2, [pc, #236]	@ (800522c <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800513e:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005142:	40ca      	lsrs	r2, r1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005144:	ee07 2a90 	vmov	s15, r2
 8005148:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800514c:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8005150:	ee07 3a10 	vmov	s14, r3
 8005154:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005158:	ee37 7a26 	vadd.f32	s14, s14, s13
 800515c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005160:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005164:	4a30      	ldr	r2, [pc, #192]	@ (8005228 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 8005166:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005168:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800516c:	ee07 3a10 	vmov	s14, r3
 8005170:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005174:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005178:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800517c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005180:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005184:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005186:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800518a:	ee07 3a10 	vmov	s14, r3
 800518e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005192:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005196:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800519a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800519e:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80051a2:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80051a4:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80051a8:	ee06 3a90 	vmov	s13, r3
 80051ac:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80051b0:	ee76 6a86 	vadd.f32	s13, s13, s12
 80051b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80051b8:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80051bc:	ee17 3a90 	vmov	r3, s15
 80051c0:	6083      	str	r3, [r0, #8]
}
 80051c2:	bd70      	pop	{r4, r5, r6, pc}
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80051c4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80051c6:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 8005230 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 80051ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051ce:	ee07 3a90 	vmov	s15, r3
 80051d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051da:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80051de:	eec5 6a87 	vdiv.f32	s13, s11, s14
 80051e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 80051e6:	e7bd      	b.n	8005164 <HAL_RCCEx_GetPLL3ClockFreq+0x7c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80051e8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80051ea:	eddf 5a12 	vldr	s11, [pc, #72]	@ 8005234 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 80051ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051f2:	ee07 3a90 	vmov	s15, r3
 80051f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051fe:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005202:	e7ec      	b.n	80051de <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005204:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005206:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 8005238 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 800520a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800520e:	ee07 3a90 	vmov	s15, r3
 8005212:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800521a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800521e:	e7de      	b.n	80051de <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005220:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005224:	e7cc      	b.n	80051c0 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 8005226:	bf00      	nop
 8005228:	58024400 	.word	0x58024400
 800522c:	03d09000 	.word	0x03d09000
 8005230:	4c742400 	.word	0x4c742400
 8005234:	4af42400 	.word	0x4af42400
 8005238:	4a742400 	.word	0x4a742400

0800523c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800523c:	b510      	push	{r4, lr}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800523e:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005240:	e852 3f00 	ldrex	r3, [r2]
 8005244:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005248:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800524c:	6802      	ldr	r2, [r0, #0]
 800524e:	2900      	cmp	r1, #0
 8005250:	d1f5      	bne.n	800523e <UART_EndRxTransfer+0x2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005252:	4c0f      	ldr	r4, [pc, #60]	@ (8005290 <UART_EndRxTransfer+0x54>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005254:	f102 0308 	add.w	r3, r2, #8
 8005258:	e853 3f00 	ldrex	r3, [r3]
 800525c:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525e:	f102 0c08 	add.w	ip, r2, #8
 8005262:	e84c 3100 	strex	r1, r3, [ip]
 8005266:	2900      	cmp	r1, #0
 8005268:	d1f4      	bne.n	8005254 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800526a:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800526c:	2b01      	cmp	r3, #1
 800526e:	d107      	bne.n	8005280 <UART_EndRxTransfer+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005270:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005274:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005278:	e842 3100 	strex	r1, r3, [r2]
 800527c:	2900      	cmp	r1, #0
 800527e:	d1f7      	bne.n	8005270 <UART_EndRxTransfer+0x34>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005280:	2320      	movs	r3, #32
 8005282:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005286:	2300      	movs	r3, #0
 8005288:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800528a:	6743      	str	r3, [r0, #116]	@ 0x74
}
 800528c:	bd10      	pop	{r4, pc}
 800528e:	bf00      	nop
 8005290:	effffffe 	.word	0xeffffffe

08005294 <UART_SetConfig>:
{
 8005294:	b530      	push	{r4, r5, lr}
 8005296:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8005298:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800529a:	69c0      	ldr	r0, [r0, #28]
{
 800529c:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800529e:	6921      	ldr	r1, [r4, #16]
 80052a0:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052a2:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052a4:	430a      	orrs	r2, r1
 80052a6:	6961      	ldr	r1, [r4, #20]
 80052a8:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052aa:	499c      	ldr	r1, [pc, #624]	@ (800551c <UART_SetConfig+0x288>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052ac:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052ae:	4029      	ands	r1, r5
 80052b0:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052b2:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052b4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80052bc:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052be:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052c0:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80052c2:	4a97      	ldr	r2, [pc, #604]	@ (8005520 <UART_SetConfig+0x28c>)
 80052c4:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 80052c6:	bf1c      	itt	ne
 80052c8:	6a22      	ldrne	r2, [r4, #32]
 80052ca:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052cc:	689a      	ldr	r2, [r3, #8]
 80052ce:	f022 426e 	bic.w	r2, r2, #3992977408	@ 0xee000000
 80052d2:	f422 6230 	bic.w	r2, r2, #2816	@ 0xb00
 80052d6:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80052d8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052da:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80052dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052de:	f022 020f 	bic.w	r2, r2, #15
 80052e2:	430a      	orrs	r2, r1
 80052e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052e6:	4a8f      	ldr	r2, [pc, #572]	@ (8005524 <UART_SetConfig+0x290>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d128      	bne.n	800533e <UART_SetConfig+0xaa>
 80052ec:	4b8e      	ldr	r3, [pc, #568]	@ (8005528 <UART_SetConfig+0x294>)
 80052ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052f4:	2b18      	cmp	r3, #24
 80052f6:	f000 812f 	beq.w	8005558 <UART_SetConfig+0x2c4>
 80052fa:	d814      	bhi.n	8005326 <UART_SetConfig+0x92>
 80052fc:	2b08      	cmp	r3, #8
 80052fe:	f000 8154 	beq.w	80055aa <UART_SetConfig+0x316>
 8005302:	2b10      	cmp	r3, #16
 8005304:	f000 8102 	beq.w	800550c <UART_SetConfig+0x278>
 8005308:	2b00      	cmp	r3, #0
 800530a:	f000 80f9 	beq.w	8005500 <UART_SetConfig+0x26c>
 800530e:	2380      	movs	r3, #128	@ 0x80
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005310:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005314:	f040 80b4 	bne.w	8005480 <UART_SetConfig+0x1ec>
    switch (clocksource)
 8005318:	2b08      	cmp	r3, #8
 800531a:	d846      	bhi.n	80053aa <UART_SetConfig+0x116>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800531c:	4668      	mov	r0, sp
 800531e:	f7ff fe39 	bl	8004f94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005322:	9801      	ldr	r0, [sp, #4]
        break;
 8005324:	e0e9      	b.n	80054fa <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005326:	2b20      	cmp	r3, #32
 8005328:	f000 80dd 	beq.w	80054e6 <UART_SetConfig+0x252>
 800532c:	2b28      	cmp	r3, #40	@ 0x28
 800532e:	d1ee      	bne.n	800530e <UART_SetConfig+0x7a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005330:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005334:	f000 811d 	beq.w	8005572 <UART_SetConfig+0x2de>
        pclk = (uint32_t) LSE_VALUE;
 8005338:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800533c:	e0be      	b.n	80054bc <UART_SetConfig+0x228>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800533e:	4a7b      	ldr	r2, [pc, #492]	@ (800552c <UART_SetConfig+0x298>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d115      	bne.n	8005370 <UART_SetConfig+0xdc>
 8005344:	4b78      	ldr	r3, [pc, #480]	@ (8005528 <UART_SetConfig+0x294>)
 8005346:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005348:	f003 0307 	and.w	r3, r3, #7
 800534c:	2b05      	cmp	r3, #5
 800534e:	d82c      	bhi.n	80053aa <UART_SetConfig+0x116>
 8005350:	a201      	add	r2, pc, #4	@ (adr r2, 8005358 <UART_SetConfig+0xc4>)
 8005352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005356:	bf00      	nop
 8005358:	080054f1 	.word	0x080054f1
 800535c:	0800547d 	.word	0x0800547d
 8005360:	0800550d 	.word	0x0800550d
 8005364:	08005559 	.word	0x08005559
 8005368:	080054e7 	.word	0x080054e7
 800536c:	08005331 	.word	0x08005331
 8005370:	4a6f      	ldr	r2, [pc, #444]	@ (8005530 <UART_SetConfig+0x29c>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d0e6      	beq.n	8005344 <UART_SetConfig+0xb0>
 8005376:	4a6f      	ldr	r2, [pc, #444]	@ (8005534 <UART_SetConfig+0x2a0>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d0e3      	beq.n	8005344 <UART_SetConfig+0xb0>
 800537c:	4a6e      	ldr	r2, [pc, #440]	@ (8005538 <UART_SetConfig+0x2a4>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d0e0      	beq.n	8005344 <UART_SetConfig+0xb0>
 8005382:	4a6e      	ldr	r2, [pc, #440]	@ (800553c <UART_SetConfig+0x2a8>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d118      	bne.n	80053ba <UART_SetConfig+0x126>
 8005388:	4b67      	ldr	r3, [pc, #412]	@ (8005528 <UART_SetConfig+0x294>)
 800538a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800538c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005390:	2b18      	cmp	r3, #24
 8005392:	f000 80e1 	beq.w	8005558 <UART_SetConfig+0x2c4>
 8005396:	d80a      	bhi.n	80053ae <UART_SetConfig+0x11a>
 8005398:	2b08      	cmp	r3, #8
 800539a:	f000 8106 	beq.w	80055aa <UART_SetConfig+0x316>
 800539e:	2b10      	cmp	r3, #16
 80053a0:	f000 80b4 	beq.w	800550c <UART_SetConfig+0x278>
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f000 80ab 	beq.w	8005500 <UART_SetConfig+0x26c>
        pclk = (uint32_t) CSI_VALUE;
 80053aa:	2001      	movs	r0, #1
 80053ac:	e049      	b.n	8005442 <UART_SetConfig+0x1ae>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053ae:	2b20      	cmp	r3, #32
 80053b0:	f000 8099 	beq.w	80054e6 <UART_SetConfig+0x252>
 80053b4:	2b28      	cmp	r3, #40	@ 0x28
 80053b6:	d0bb      	beq.n	8005330 <UART_SetConfig+0x9c>
 80053b8:	e7f7      	b.n	80053aa <UART_SetConfig+0x116>
 80053ba:	4a61      	ldr	r2, [pc, #388]	@ (8005540 <UART_SetConfig+0x2ac>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d0c1      	beq.n	8005344 <UART_SetConfig+0xb0>
 80053c0:	4a60      	ldr	r2, [pc, #384]	@ (8005544 <UART_SetConfig+0x2b0>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d0be      	beq.n	8005344 <UART_SetConfig+0xb0>
 80053c6:	4a56      	ldr	r2, [pc, #344]	@ (8005520 <UART_SetConfig+0x28c>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d1ee      	bne.n	80053aa <UART_SetConfig+0x116>
 80053cc:	f502 320e 	add.w	r2, r2, #145408	@ 0x23800
 80053d0:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80053d2:	f003 0307 	and.w	r3, r3, #7
 80053d6:	2b05      	cmp	r3, #5
 80053d8:	d8e7      	bhi.n	80053aa <UART_SetConfig+0x116>
 80053da:	e8df f003 	tbb	[pc, r3]
 80053de:	2b49      	.short	0x2b49
 80053e0:	4c033f3a 	.word	0x4c033f3a
        pclk = (uint32_t) CSI_VALUE;
 80053e4:	4858      	ldr	r0, [pc, #352]	@ (8005548 <UART_SetConfig+0x2b4>)
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80053e6:	4b59      	ldr	r3, [pc, #356]	@ (800554c <UART_SetConfig+0x2b8>)
 80053e8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053ea:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80053ec:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053f0:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80053f4:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053f8:	4299      	cmp	r1, r3
 80053fa:	d8d6      	bhi.n	80053aa <UART_SetConfig+0x116>
 80053fc:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8005400:	d8d3      	bhi.n	80053aa <UART_SetConfig+0x116>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005402:	2300      	movs	r3, #0
 8005404:	4619      	mov	r1, r3
 8005406:	f7fa ffc3 	bl	8000390 <__aeabi_uldivmod>
 800540a:	462a      	mov	r2, r5
 800540c:	0209      	lsls	r1, r1, #8
 800540e:	086b      	lsrs	r3, r5, #1
 8005410:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8005414:	0200      	lsls	r0, r0, #8
 8005416:	18c0      	adds	r0, r0, r3
 8005418:	f04f 0300 	mov.w	r3, #0
 800541c:	f141 0100 	adc.w	r1, r1, #0
 8005420:	f7fa ffb6 	bl	8000390 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005424:	4b4a      	ldr	r3, [pc, #296]	@ (8005550 <UART_SetConfig+0x2bc>)
 8005426:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 800542a:	429a      	cmp	r2, r3
 800542c:	d8bd      	bhi.n	80053aa <UART_SetConfig+0x116>
          huart->Instance->BRR = usartdiv;
 800542e:	6823      	ldr	r3, [r4, #0]
 8005430:	60d8      	str	r0, [r3, #12]
 8005432:	e005      	b.n	8005440 <UART_SetConfig+0x1ac>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005434:	4668      	mov	r0, sp
 8005436:	f7ff fdad 	bl	8004f94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800543a:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 800543c:	2800      	cmp	r0, #0
 800543e:	d1d2      	bne.n	80053e6 <UART_SetConfig+0x152>
        pclk = (uint32_t) CSI_VALUE;
 8005440:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 8005442:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8005446:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 8005448:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800544a:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
}
 800544e:	b007      	add	sp, #28
 8005450:	bd30      	pop	{r4, r5, pc}
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005452:	a803      	add	r0, sp, #12
 8005454:	f7ff fe48 	bl	80050e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005458:	9804      	ldr	r0, [sp, #16]
        break;
 800545a:	e7ef      	b.n	800543c <UART_SetConfig+0x1a8>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800545c:	6813      	ldr	r3, [r2, #0]
 800545e:	483d      	ldr	r0, [pc, #244]	@ (8005554 <UART_SetConfig+0x2c0>)
 8005460:	f013 0f20 	tst.w	r3, #32
 8005464:	d0bf      	beq.n	80053e6 <UART_SetConfig+0x152>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005466:	6813      	ldr	r3, [r2, #0]
 8005468:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800546c:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800546e:	e7ba      	b.n	80053e6 <UART_SetConfig+0x152>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005470:	f7ff fd7e 	bl	8004f70 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 8005474:	e7e2      	b.n	800543c <UART_SetConfig+0x1a8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005476:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800547a:	e7b4      	b.n	80053e6 <UART_SetConfig+0x152>
 800547c:	2304      	movs	r3, #4
 800547e:	e747      	b.n	8005310 <UART_SetConfig+0x7c>
    switch (clocksource)
 8005480:	2b08      	cmp	r3, #8
 8005482:	d892      	bhi.n	80053aa <UART_SetConfig+0x116>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005484:	4668      	mov	r0, sp
 8005486:	f7ff fd85 	bl	8004f94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800548a:	9801      	ldr	r0, [sp, #4]
        break;
 800548c:	e001      	b.n	8005492 <UART_SetConfig+0x1fe>
        pclk = HAL_RCC_GetPCLK1Freq();
 800548e:	f7fe ff73 	bl	8004378 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005492:	2800      	cmp	r0, #0
 8005494:	d0d4      	beq.n	8005440 <UART_SetConfig+0x1ac>
 8005496:	e011      	b.n	80054bc <UART_SetConfig+0x228>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005498:	f7fe ff80 	bl	800439c <HAL_RCC_GetPCLK2Freq>
        break;
 800549c:	e7f9      	b.n	8005492 <UART_SetConfig+0x1fe>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800549e:	a803      	add	r0, sp, #12
 80054a0:	f7ff fe22 	bl	80050e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80054a4:	9804      	ldr	r0, [sp, #16]
        break;
 80054a6:	e7f4      	b.n	8005492 <UART_SetConfig+0x1fe>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054a8:	4b1f      	ldr	r3, [pc, #124]	@ (8005528 <UART_SetConfig+0x294>)
 80054aa:	482a      	ldr	r0, [pc, #168]	@ (8005554 <UART_SetConfig+0x2c0>)
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	f012 0f20 	tst.w	r2, #32
 80054b2:	d003      	beq.n	80054bc <UART_SetConfig+0x228>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80054ba:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054bc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80054be:	4b23      	ldr	r3, [pc, #140]	@ (800554c <UART_SetConfig+0x2b8>)
 80054c0:	6862      	ldr	r2, [r4, #4]
 80054c2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80054c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80054ca:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80054ce:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054d2:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80054d6:	f1a3 0110 	sub.w	r1, r3, #16
 80054da:	4291      	cmp	r1, r2
 80054dc:	f63f af65 	bhi.w	80053aa <UART_SetConfig+0x116>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80054e0:	6822      	ldr	r2, [r4, #0]
 80054e2:	60d3      	str	r3, [r2, #12]
 80054e4:	e7ac      	b.n	8005440 <UART_SetConfig+0x1ac>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054e6:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80054ea:	4817      	ldr	r0, [pc, #92]	@ (8005548 <UART_SetConfig+0x2b4>)
 80054ec:	d1e6      	bne.n	80054bc <UART_SetConfig+0x228>
 80054ee:	e040      	b.n	8005572 <UART_SetConfig+0x2de>
 80054f0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80054f4:	d1cb      	bne.n	800548e <UART_SetConfig+0x1fa>
        pclk = HAL_RCC_GetPCLK1Freq();
 80054f6:	f7fe ff3f 	bl	8004378 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80054fa:	2800      	cmp	r0, #0
 80054fc:	d0a0      	beq.n	8005440 <UART_SetConfig+0x1ac>
 80054fe:	e038      	b.n	8005572 <UART_SetConfig+0x2de>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005500:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005504:	d1c8      	bne.n	8005498 <UART_SetConfig+0x204>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005506:	f7fe ff49 	bl	800439c <HAL_RCC_GetPCLK2Freq>
        break;
 800550a:	e7f6      	b.n	80054fa <UART_SetConfig+0x266>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800550c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005510:	d1c5      	bne.n	800549e <UART_SetConfig+0x20a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005512:	a803      	add	r0, sp, #12
 8005514:	f7ff fde8 	bl	80050e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005518:	9804      	ldr	r0, [sp, #16]
        break;
 800551a:	e7ee      	b.n	80054fa <UART_SetConfig+0x266>
 800551c:	cfff69f3 	.word	0xcfff69f3
 8005520:	58000c00 	.word	0x58000c00
 8005524:	40011000 	.word	0x40011000
 8005528:	58024400 	.word	0x58024400
 800552c:	40004400 	.word	0x40004400
 8005530:	40004800 	.word	0x40004800
 8005534:	40004c00 	.word	0x40004c00
 8005538:	40005000 	.word	0x40005000
 800553c:	40011400 	.word	0x40011400
 8005540:	40007800 	.word	0x40007800
 8005544:	40007c00 	.word	0x40007c00
 8005548:	003d0900 	.word	0x003d0900
 800554c:	0800ec9e 	.word	0x0800ec9e
 8005550:	000ffcff 	.word	0x000ffcff
 8005554:	03d09000 	.word	0x03d09000
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005558:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800555c:	d1a4      	bne.n	80054a8 <UART_SetConfig+0x214>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800555e:	4b15      	ldr	r3, [pc, #84]	@ (80055b4 <UART_SetConfig+0x320>)
 8005560:	4815      	ldr	r0, [pc, #84]	@ (80055b8 <UART_SetConfig+0x324>)
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	f012 0f20 	tst.w	r2, #32
 8005568:	d003      	beq.n	8005572 <UART_SetConfig+0x2de>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005570:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005572:	4b12      	ldr	r3, [pc, #72]	@ (80055bc <UART_SetConfig+0x328>)
 8005574:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005576:	6861      	ldr	r1, [r4, #4]
 8005578:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800557c:	084b      	lsrs	r3, r1, #1
 800557e:	fbb0 f2f2 	udiv	r2, r0, r2
 8005582:	eb03 0342 	add.w	r3, r3, r2, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005586:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800558a:	fbb3 f3f1 	udiv	r3, r3, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800558e:	f1a3 0110 	sub.w	r1, r3, #16
 8005592:	4291      	cmp	r1, r2
 8005594:	f63f af09 	bhi.w	80053aa <UART_SetConfig+0x116>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005598:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800559c:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 80055a0:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055a2:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 80055a4:	4313      	orrs	r3, r2
 80055a6:	60cb      	str	r3, [r1, #12]
 80055a8:	e74a      	b.n	8005440 <UART_SetConfig+0x1ac>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055aa:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80055ae:	f47f af69 	bne.w	8005484 <UART_SetConfig+0x1f0>
 80055b2:	e6b3      	b.n	800531c <UART_SetConfig+0x88>
 80055b4:	58024400 	.word	0x58024400
 80055b8:	03d09000 	.word	0x03d09000
 80055bc:	0800ec9e 	.word	0x0800ec9e

080055c0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055c0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80055c2:	071a      	lsls	r2, r3, #28
{
 80055c4:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055c6:	d506      	bpl.n	80055d6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055c8:	6801      	ldr	r1, [r0, #0]
 80055ca:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80055cc:	684a      	ldr	r2, [r1, #4]
 80055ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80055d2:	4322      	orrs	r2, r4
 80055d4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055d6:	07dc      	lsls	r4, r3, #31
 80055d8:	d506      	bpl.n	80055e8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055da:	6801      	ldr	r1, [r0, #0]
 80055dc:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 80055de:	684a      	ldr	r2, [r1, #4]
 80055e0:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80055e4:	4322      	orrs	r2, r4
 80055e6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055e8:	0799      	lsls	r1, r3, #30
 80055ea:	d506      	bpl.n	80055fa <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055ec:	6801      	ldr	r1, [r0, #0]
 80055ee:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80055f0:	684a      	ldr	r2, [r1, #4]
 80055f2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80055f6:	4322      	orrs	r2, r4
 80055f8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055fa:	075a      	lsls	r2, r3, #29
 80055fc:	d506      	bpl.n	800560c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055fe:	6801      	ldr	r1, [r0, #0]
 8005600:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8005602:	684a      	ldr	r2, [r1, #4]
 8005604:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005608:	4322      	orrs	r2, r4
 800560a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800560c:	06dc      	lsls	r4, r3, #27
 800560e:	d506      	bpl.n	800561e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005610:	6801      	ldr	r1, [r0, #0]
 8005612:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8005614:	688a      	ldr	r2, [r1, #8]
 8005616:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800561a:	4322      	orrs	r2, r4
 800561c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800561e:	0699      	lsls	r1, r3, #26
 8005620:	d506      	bpl.n	8005630 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005622:	6801      	ldr	r1, [r0, #0]
 8005624:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8005626:	688a      	ldr	r2, [r1, #8]
 8005628:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800562c:	4322      	orrs	r2, r4
 800562e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005630:	065a      	lsls	r2, r3, #25
 8005632:	d510      	bpl.n	8005656 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005634:	6801      	ldr	r1, [r0, #0]
 8005636:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8005638:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800563a:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800563e:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8005642:	ea42 0204 	orr.w	r2, r2, r4
 8005646:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005648:	d105      	bne.n	8005656 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800564a:	684a      	ldr	r2, [r1, #4]
 800564c:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 800564e:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8005652:	4322      	orrs	r2, r4
 8005654:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005656:	061b      	lsls	r3, r3, #24
 8005658:	d506      	bpl.n	8005668 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800565a:	6802      	ldr	r2, [r0, #0]
 800565c:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800565e:	6853      	ldr	r3, [r2, #4]
 8005660:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8005664:	430b      	orrs	r3, r1
 8005666:	6053      	str	r3, [r2, #4]
}
 8005668:	bd10      	pop	{r4, pc}

0800566a <UART_WaitOnFlagUntilTimeout>:
{
 800566a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800566e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005672:	4604      	mov	r4, r0
 8005674:	460d      	mov	r5, r1
 8005676:	4617      	mov	r7, r2
 8005678:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800567a:	6822      	ldr	r2, [r4, #0]
 800567c:	69d3      	ldr	r3, [r2, #28]
 800567e:	ea35 0303 	bics.w	r3, r5, r3
 8005682:	bf0c      	ite	eq
 8005684:	2301      	moveq	r3, #1
 8005686:	2300      	movne	r3, #0
 8005688:	42bb      	cmp	r3, r7
 800568a:	d001      	beq.n	8005690 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 800568c:	2000      	movs	r0, #0
 800568e:	e022      	b.n	80056d6 <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8005690:	f1b9 3fff 	cmp.w	r9, #4294967295
 8005694:	d0f2      	beq.n	800567c <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005696:	f7fb ff19 	bl	80014cc <HAL_GetTick>
 800569a:	eba0 0008 	sub.w	r0, r0, r8
 800569e:	4548      	cmp	r0, r9
 80056a0:	d829      	bhi.n	80056f6 <UART_WaitOnFlagUntilTimeout+0x8c>
 80056a2:	f1b9 0f00 	cmp.w	r9, #0
 80056a6:	d026      	beq.n	80056f6 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80056a8:	6821      	ldr	r1, [r4, #0]
 80056aa:	680b      	ldr	r3, [r1, #0]
 80056ac:	075a      	lsls	r2, r3, #29
 80056ae:	d5e4      	bpl.n	800567a <UART_WaitOnFlagUntilTimeout+0x10>
 80056b0:	2d80      	cmp	r5, #128	@ 0x80
 80056b2:	d0e2      	beq.n	800567a <UART_WaitOnFlagUntilTimeout+0x10>
 80056b4:	2d40      	cmp	r5, #64	@ 0x40
 80056b6:	d0e0      	beq.n	800567a <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80056b8:	69ce      	ldr	r6, [r1, #28]
 80056ba:	f016 0608 	ands.w	r6, r6, #8
 80056be:	d00c      	beq.n	80056da <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056c0:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
 80056c2:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056c4:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
 80056c6:	f7ff fdb9 	bl	800523c <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 80056ca:	2300      	movs	r3, #0
          return HAL_ERROR;
 80056cc:	2001      	movs	r0, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80056ce:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 80056d2:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 80056d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056da:	69cb      	ldr	r3, [r1, #28]
 80056dc:	051b      	lsls	r3, r3, #20
 80056de:	d5cc      	bpl.n	800567a <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056e0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
          UART_EndRxTransfer(huart);
 80056e4:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056e6:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 80056e8:	f7ff fda8 	bl	800523c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056ec:	2320      	movs	r3, #32
          __HAL_UNLOCK(huart);
 80056ee:	f884 6084 	strb.w	r6, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056f2:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        return HAL_TIMEOUT;
 80056f6:	2003      	movs	r0, #3
 80056f8:	e7ed      	b.n	80056d6 <UART_WaitOnFlagUntilTimeout+0x6c>

080056fa <HAL_UART_Transmit>:
{
 80056fa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80056fe:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8005700:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 8005704:	4604      	mov	r4, r0
 8005706:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8005708:	2b20      	cmp	r3, #32
{
 800570a:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800570c:	d146      	bne.n	800579c <HAL_UART_Transmit+0xa2>
    if ((pData == NULL) || (Size == 0U))
 800570e:	2900      	cmp	r1, #0
 8005710:	d046      	beq.n	80057a0 <HAL_UART_Transmit+0xa6>
 8005712:	2a00      	cmp	r2, #0
 8005714:	d044      	beq.n	80057a0 <HAL_UART_Transmit+0xa6>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005716:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005718:	2500      	movs	r5, #0
 800571a:	f8c0 5090 	str.w	r5, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800571e:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    tickstart = HAL_GetTick();
 8005722:	f7fb fed3 	bl	80014cc <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005726:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8005728:	4681      	mov	r9, r0
    huart->TxXferSize  = Size;
 800572a:	f8a4 7054 	strh.w	r7, [r4, #84]	@ 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800572e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 8005732:	f8a4 7056 	strh.w	r7, [r4, #86]	@ 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005736:	d103      	bne.n	8005740 <HAL_UART_Transmit+0x46>
 8005738:	6923      	ldr	r3, [r4, #16]
 800573a:	b90b      	cbnz	r3, 8005740 <HAL_UART_Transmit+0x46>
 800573c:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800573e:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8005740:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005744:	464b      	mov	r3, r9
 8005746:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 800574a:	b292      	uxth	r2, r2
 800574c:	b942      	cbnz	r2, 8005760 <HAL_UART_Transmit+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800574e:	2140      	movs	r1, #64	@ 0x40
 8005750:	4620      	mov	r0, r4
 8005752:	f7ff ff8a 	bl	800566a <UART_WaitOnFlagUntilTimeout>
 8005756:	2320      	movs	r3, #32
 8005758:	b948      	cbnz	r0, 800576e <HAL_UART_Transmit+0x74>
    huart->gState = HAL_UART_STATE_READY;
 800575a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    return HAL_OK;
 800575e:	e009      	b.n	8005774 <HAL_UART_Transmit+0x7a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005760:	2200      	movs	r2, #0
 8005762:	2180      	movs	r1, #128	@ 0x80
 8005764:	4620      	mov	r0, r4
 8005766:	f7ff ff80 	bl	800566a <UART_WaitOnFlagUntilTimeout>
 800576a:	b130      	cbz	r0, 800577a <HAL_UART_Transmit+0x80>
        huart->gState = HAL_UART_STATE_READY;
 800576c:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 800576e:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 8005770:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
}
 8005774:	b003      	add	sp, #12
 8005776:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800577a:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800577c:	b95e      	cbnz	r6, 8005796 <HAL_UART_Transmit+0x9c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800577e:	f835 3b02 	ldrh.w	r3, [r5], #2
 8005782:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005786:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8005788:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 800578c:	3a01      	subs	r2, #1
 800578e:	b292      	uxth	r2, r2
 8005790:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
 8005794:	e7d4      	b.n	8005740 <HAL_UART_Transmit+0x46>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005796:	f816 3b01 	ldrb.w	r3, [r6], #1
 800579a:	e7f4      	b.n	8005786 <HAL_UART_Transmit+0x8c>
    return HAL_BUSY;
 800579c:	2002      	movs	r0, #2
 800579e:	e7e9      	b.n	8005774 <HAL_UART_Transmit+0x7a>
      return  HAL_ERROR;
 80057a0:	2001      	movs	r0, #1
 80057a2:	e7e7      	b.n	8005774 <HAL_UART_Transmit+0x7a>

080057a4 <UART_CheckIdleState>:
{
 80057a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057a6:	2600      	movs	r6, #0
{
 80057a8:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057aa:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 80057ae:	f7fb fe8d 	bl	80014cc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057b2:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80057b4:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	071a      	lsls	r2, r3, #28
 80057ba:	d51c      	bpl.n	80057f6 <UART_CheckIdleState+0x52>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80057c0:	4632      	mov	r2, r6
 80057c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80057c6:	9300      	str	r3, [sp, #0]
 80057c8:	4603      	mov	r3, r0
 80057ca:	4620      	mov	r0, r4
 80057cc:	f7ff ff4d 	bl	800566a <UART_WaitOnFlagUntilTimeout>
 80057d0:	b188      	cbz	r0, 80057f6 <UART_CheckIdleState+0x52>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80057d2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d4:	e852 3f00 	ldrex	r3, [r2]
 80057d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057dc:	e842 3100 	strex	r1, r3, [r2]
 80057e0:	2900      	cmp	r1, #0
 80057e2:	d1f6      	bne.n	80057d2 <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
 80057e4:	2320      	movs	r3, #32
 80057e6:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 80057ea:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 80057ec:	2300      	movs	r3, #0
 80057ee:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 80057f2:	b002      	add	sp, #8
 80057f4:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057f6:	6823      	ldr	r3, [r4, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	075b      	lsls	r3, r3, #29
 80057fc:	d524      	bpl.n	8005848 <UART_CheckIdleState+0xa4>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057fe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005802:	2200      	movs	r2, #0
 8005804:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005808:	4620      	mov	r0, r4
 800580a:	9300      	str	r3, [sp, #0]
 800580c:	462b      	mov	r3, r5
 800580e:	f7ff ff2c 	bl	800566a <UART_WaitOnFlagUntilTimeout>
 8005812:	b1c8      	cbz	r0, 8005848 <UART_CheckIdleState+0xa4>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005814:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005816:	e852 3f00 	ldrex	r3, [r2]
 800581a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581e:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8005822:	6822      	ldr	r2, [r4, #0]
 8005824:	2900      	cmp	r1, #0
 8005826:	d1f5      	bne.n	8005814 <UART_CheckIdleState+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005828:	f102 0308 	add.w	r3, r2, #8
 800582c:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005830:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005834:	f102 0008 	add.w	r0, r2, #8
 8005838:	e840 3100 	strex	r1, r3, [r0]
 800583c:	2900      	cmp	r1, #0
 800583e:	d1f3      	bne.n	8005828 <UART_CheckIdleState+0x84>
      huart->RxState = HAL_UART_STATE_READY;
 8005840:	2320      	movs	r3, #32
 8005842:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 8005846:	e7d0      	b.n	80057ea <UART_CheckIdleState+0x46>
  huart->gState = HAL_UART_STATE_READY;
 8005848:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800584a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800584c:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005850:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005854:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005856:	6720      	str	r0, [r4, #112]	@ 0x70
  return HAL_OK;
 8005858:	e7c8      	b.n	80057ec <UART_CheckIdleState+0x48>

0800585a <HAL_UART_Init>:
{
 800585a:	b510      	push	{r4, lr}
  if (huart == NULL)
 800585c:	4604      	mov	r4, r0
 800585e:	b350      	cbz	r0, 80058b6 <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8005860:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8005864:	b91b      	cbnz	r3, 800586e <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 8005866:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 800586a:	f7fb fcc5 	bl	80011f8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800586e:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8005870:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005872:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8005876:	6813      	ldr	r3, [r2, #0]
 8005878:	f023 0301 	bic.w	r3, r3, #1
 800587c:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800587e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005880:	b113      	cbz	r3, 8005888 <HAL_UART_Init+0x2e>
    UART_AdvFeatureConfig(huart);
 8005882:	4620      	mov	r0, r4
 8005884:	f7ff fe9c 	bl	80055c0 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005888:	4620      	mov	r0, r4
 800588a:	f7ff fd03 	bl	8005294 <UART_SetConfig>
 800588e:	2801      	cmp	r0, #1
 8005890:	d011      	beq.n	80058b6 <HAL_UART_Init+0x5c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005892:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8005894:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005896:	685a      	ldr	r2, [r3, #4]
 8005898:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800589c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800589e:	689a      	ldr	r2, [r3, #8]
 80058a0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80058a4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	f042 0201 	orr.w	r2, r2, #1
}
 80058ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 80058b0:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80058b2:	f7ff bf77 	b.w	80057a4 <UART_CheckIdleState>
}
 80058b6:	2001      	movs	r0, #1
 80058b8:	bd10      	pop	{r4, pc}
	...

080058bc <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80058bc:	6e43      	ldr	r3, [r0, #100]	@ 0x64
{
 80058be:	b530      	push	{r4, r5, lr}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80058c0:	b92b      	cbnz	r3, 80058ce <UARTEx_SetNbDataToProcess+0x12>
  {
    huart->NbTxDataToProcess = 1U;
 80058c2:	2301      	movs	r3, #1
 80058c4:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80058c8:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80058cc:	bd30      	pop	{r4, r5, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80058ce:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80058d0:	4d09      	ldr	r5, [pc, #36]	@ (80058f8 <UARTEx_SetNbDataToProcess+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80058d2:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80058d4:	6899      	ldr	r1, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 80058d6:	4c09      	ldr	r4, [pc, #36]	@ (80058fc <UARTEx_SetNbDataToProcess+0x40>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058d8:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80058dc:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80058de:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 80058e0:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80058e2:	011b      	lsls	r3, r3, #4
 80058e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80058e8:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058ec:	5cab      	ldrb	r3, [r5, r2]
                               (uint16_t)denominator[rx_fifo_threshold];
 80058ee:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058f0:	011b      	lsls	r3, r3, #4
 80058f2:	fbb3 f3f2 	udiv	r3, r3, r2
}
 80058f6:	e7e7      	b.n	80058c8 <UARTEx_SetNbDataToProcess+0xc>
 80058f8:	0800ecbe 	.word	0x0800ecbe
 80058fc:	0800ecb6 	.word	0x0800ecb6

08005900 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8005900:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8005904:	2b01      	cmp	r3, #1
 8005906:	d014      	beq.n	8005932 <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005908:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800590a:	2324      	movs	r3, #36	@ 0x24
 800590c:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005910:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8005912:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005914:	f021 5100 	bic.w	r1, r1, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 8005918:	f023 0301 	bic.w	r3, r3, #1
 800591c:	6013      	str	r3, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800591e:	2300      	movs	r3, #0
 8005920:	6643      	str	r3, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005922:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005924:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 8005926:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_READY;
 800592a:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  return HAL_OK;
 800592e:	4618      	mov	r0, r3
 8005930:	4770      	bx	lr
  __HAL_LOCK(huart);
 8005932:	2002      	movs	r0, #2
}
 8005934:	4770      	bx	lr

08005936 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8005936:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8005938:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
{
 800593c:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800593e:	2b01      	cmp	r3, #1
 8005940:	d017      	beq.n	8005972 <HAL_UARTEx_SetTxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005942:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005944:	2324      	movs	r3, #36	@ 0x24
 8005946:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800594a:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 800594c:	682b      	ldr	r3, [r5, #0]
 800594e:	f023 0301 	bic.w	r3, r3, #1
 8005952:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005954:	68ab      	ldr	r3, [r5, #8]
 8005956:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 800595a:	4319      	orrs	r1, r3
 800595c:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 800595e:	f7ff ffad 	bl	80058bc <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8005962:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005964:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005966:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 800596a:	2000      	movs	r0, #0
 800596c:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8005970:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8005972:	2002      	movs	r0, #2
 8005974:	e7fc      	b.n	8005970 <HAL_UARTEx_SetTxFifoThreshold+0x3a>

08005976 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8005976:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8005978:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
{
 800597c:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800597e:	2b01      	cmp	r3, #1
 8005980:	d017      	beq.n	80059b2 <HAL_UARTEx_SetRxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005982:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005984:	2324      	movs	r3, #36	@ 0x24
 8005986:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800598a:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 800598c:	682b      	ldr	r3, [r5, #0]
 800598e:	f023 0301 	bic.w	r3, r3, #1
 8005992:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005994:	68ab      	ldr	r3, [r5, #8]
 8005996:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 800599a:	4319      	orrs	r1, r3
 800599c:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 800599e:	f7ff ff8d 	bl	80058bc <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 80059a2:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059a4:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 80059a6:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 80059aa:	2000      	movs	r0, #0
 80059ac:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 80059b0:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 80059b2:	2002      	movs	r0, #2
 80059b4:	e7fc      	b.n	80059b0 <HAL_UARTEx_SetRxFifoThreshold+0x3a>
	...

080059b8 <acquire_and_process_data>:
  return 0;
}

/* USER CODE BEGIN 2 */
int acquire_and_process_data(void)
{
 80059b8:	b570      	push	{r4, r5, r6, lr}
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 80059ba:	483a      	ldr	r0, [pc, #232]	@ (8005aa4 <acquire_and_process_data+0xec>)
  HAL_Delay(20);
  extern uint32_t imagedata128[128 * 128 /2];
  for (int i = 0; i < 128 * 128 / 2; ++i) {
 80059bc:	2400      	movs	r4, #0
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 80059be:	f7fa fcdf 	bl	8000380 <strlen>
 80059c2:	4938      	ldr	r1, [pc, #224]	@ (8005aa4 <acquire_and_process_data+0xec>)
 80059c4:	b282      	uxth	r2, r0
 80059c6:	230a      	movs	r3, #10
 80059c8:	4837      	ldr	r0, [pc, #220]	@ (8005aa8 <acquire_and_process_data+0xf0>)
          uint8_t green2 = (pixels >> 5) & 0x3F;
          uint8_t blue2 = pixels & 0x1F;

          // Scale to 8-bit components
          uint8_t red1_8bit = (red1 * 255) / 31;
          uint8_t green1_8bit = (green1 * 255) / 63;
 80059ca:	253f      	movs	r5, #63	@ 0x3f
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 80059cc:	f7ff fe95 	bl	80056fa <HAL_UART_Transmit>
  HAL_Delay(20);
 80059d0:	2014      	movs	r0, #20
 80059d2:	f7fb fd81 	bl	80014d8 <HAL_Delay>
  for (int i = 0; i < 128 * 128 / 2; ++i) {
 80059d6:	4e35      	ldr	r6, [pc, #212]	@ (8005aac <acquire_and_process_data+0xf4>)
 80059d8:	4935      	ldr	r1, [pc, #212]	@ (8005ab0 <acquire_and_process_data+0xf8>)
          uint8_t red1_8bit = (red1 * 255) / 31;
 80059da:	201f      	movs	r0, #31

          // Place the 8-bit components in the AI input buffer
          // Assuming the AI expects RGB values in separate consecutive bytes

          // Store first pixel
          data_in_1[6*i] = (float) red1_8bit / 255;
 80059dc:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8005ab4 <acquire_and_process_data+0xfc>
          uint32_t pixels = imagedata128[i];
 80059e0:	f856 3b04 	ldr.w	r3, [r6], #4
  for (int i = 0; i < 128 * 128 / 2; ++i) {
 80059e4:	3401      	adds	r4, #1
 80059e6:	3118      	adds	r1, #24
          uint8_t red1 = (pixels >> 27) & 0x1F;
 80059e8:	0eda      	lsrs	r2, r3, #27
  for (int i = 0; i < 128 * 128 / 2; ++i) {
 80059ea:	f5b4 5f00 	cmp.w	r4, #8192	@ 0x2000
          uint8_t red1_8bit = (red1 * 255) / 31;
 80059ee:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 80059f2:	fbb2 f2f0 	udiv	r2, r2, r0
          data_in_1[6*i] = (float) red1_8bit / 255;
 80059f6:	b2d2      	uxtb	r2, r2
 80059f8:	ee07 2a90 	vmov	s15, r2
          uint8_t green1_8bit = (green1 * 255) / 63;
 80059fc:	f3c3 5245 	ubfx	r2, r3, #21, #6
          data_in_1[6*i] = (float) red1_8bit / 255;
 8005a00:	eef8 7a67 	vcvt.f32.u32	s15, s15
          uint8_t green1_8bit = (green1 * 255) / 63;
 8005a04:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 8005a08:	fbb2 f2f5 	udiv	r2, r2, r5
          data_in_1[6*i] = (float) red1_8bit / 255;
 8005a0c:	eec7 6a87 	vdiv.f32	s13, s15, s14
          data_in_1[6*i+1] = (float) green1_8bit / 255;
 8005a10:	b2d2      	uxtb	r2, r2
 8005a12:	ee07 2a90 	vmov	s15, r2
          uint8_t blue1_8bit = (blue1 * 255) / 31;
 8005a16:	f3c3 4204 	ubfx	r2, r3, #16, #5
 8005a1a:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
          data_in_1[6*i+1] = (float) green1_8bit / 255;
 8005a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
          uint8_t blue1_8bit = (blue1 * 255) / 31;
 8005a22:	fbb2 f2f0 	udiv	r2, r2, r0
          data_in_1[6*i+2] = (float) blue1_8bit / 255;
 8005a26:	b2d2      	uxtb	r2, r2
          data_in_1[6*i] = (float) red1_8bit / 255;
 8005a28:	ed41 6a06 	vstr	s13, [r1, #-24]	@ 0xffffffe8
          data_in_1[6*i+1] = (float) green1_8bit / 255;
 8005a2c:	eec7 6a87 	vdiv.f32	s13, s15, s14
          data_in_1[6*i+2] = (float) blue1_8bit / 255;
 8005a30:	ee07 2a90 	vmov	s15, r2
          uint8_t red2_8bit = (red2 * 255) / 31;
 8005a34:	f3c3 22c4 	ubfx	r2, r3, #11, #5
 8005a38:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
          data_in_1[6*i+2] = (float) blue1_8bit / 255;
 8005a3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
          uint8_t red2_8bit = (red2 * 255) / 31;
 8005a40:	fbb2 f2f0 	udiv	r2, r2, r0
          data_in_1[6*i+3] = (float) red2_8bit / 255;
 8005a44:	b2d2      	uxtb	r2, r2
          data_in_1[6*i+1] = (float) green1_8bit / 255;
 8005a46:	ed41 6a05 	vstr	s13, [r1, #-20]	@ 0xffffffec
          data_in_1[6*i+2] = (float) blue1_8bit / 255;
 8005a4a:	eec7 6a87 	vdiv.f32	s13, s15, s14
          data_in_1[6*i+3] = (float) red2_8bit / 255;
 8005a4e:	ee07 2a90 	vmov	s15, r2
          uint8_t green2_8bit = (green2 * 255) / 63;
 8005a52:	f3c3 1245 	ubfx	r2, r3, #5, #6
          uint8_t blue2_8bit = (blue2 * 255) / 31;
 8005a56:	f003 031f 	and.w	r3, r3, #31
          uint8_t green2_8bit = (green2 * 255) / 63;
 8005a5a:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
          uint8_t blue2_8bit = (blue2 * 255) / 31;
 8005a5e:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
          data_in_1[6*i+3] = (float) red2_8bit / 255;
 8005a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
          uint8_t green2_8bit = (green2 * 255) / 63;
 8005a66:	fbb2 f2f5 	udiv	r2, r2, r5
          data_in_1[6*i+4] = (float) green2_8bit / 255;
 8005a6a:	b2d2      	uxtb	r2, r2
          uint8_t blue2_8bit = (blue2 * 255) / 31;
 8005a6c:	fbb3 f3f0 	udiv	r3, r3, r0
          data_in_1[6*i+2] = (float) blue1_8bit / 255;
 8005a70:	ed41 6a04 	vstr	s13, [r1, #-16]
          data_in_1[6*i+3] = (float) red2_8bit / 255;
 8005a74:	eec7 6a87 	vdiv.f32	s13, s15, s14
          data_in_1[6*i+4] = (float) green2_8bit / 255;
 8005a78:	ee07 2a90 	vmov	s15, r2
          data_in_1[6*i+5] = (float) blue2_8bit /255;
 8005a7c:	b2db      	uxtb	r3, r3
          data_in_1[6*i+4] = (float) green2_8bit / 255;
 8005a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
          data_in_1[6*i+3] = (float) red2_8bit / 255;
 8005a82:	ed41 6a03 	vstr	s13, [r1, #-12]
          data_in_1[6*i+4] = (float) green2_8bit / 255;
 8005a86:	eec7 6a87 	vdiv.f32	s13, s15, s14
          data_in_1[6*i+5] = (float) blue2_8bit /255;
 8005a8a:	ee07 3a90 	vmov	s15, r3
 8005a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
          data_in_1[6*i+4] = (float) green2_8bit / 255;
 8005a92:	ed41 6a02 	vstr	s13, [r1, #-8]
          data_in_1[6*i+5] = (float) blue2_8bit /255;
 8005a96:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005a9a:	ed41 6a01 	vstr	s13, [r1, #-4]
  for (int i = 0; i < 128 * 128 / 2; ++i) {
 8005a9e:	d19f      	bne.n	80059e0 <acquire_and_process_data+0x28>
  }
  return 0;
}
 8005aa0:	2000      	movs	r0, #0
 8005aa2:	bd70      	pop	{r4, r5, r6, pc}
 8005aa4:	24038fa0 	.word	0x24038fa0
 8005aa8:	24008d48 	.word	0x24008d48
 8005aac:	24000d48 	.word	0x24000d48
 8005ab0:	240390dc 	.word	0x240390dc
 8005ab4:	437f0000 	.word	0x437f0000

08005ab8 <indexlargest>:
  	HAL_Delay(20);
  return 0;
}

int indexlargest(const float *arr, int n) { //Find the index of the largest element of an array
    if (n <= 0) return -1; // Return -1 for an empty array
 8005ab8:	2900      	cmp	r1, #0
int indexlargest(const float *arr, int n) { //Find the index of the largest element of an array
 8005aba:	4603      	mov	r3, r0
    if (n <= 0) return -1; // Return -1 for an empty array
 8005abc:	dd16      	ble.n	8005aec <indexlargest+0x34>

    int maxIndex = 0; // Start with the first element as the largest
    int max = arr[0];
 8005abe:	ecf3 7a01 	vldmia	r3!, {s15}
    for (int i = 1; i < n; i++) {
 8005ac2:	2201      	movs	r2, #1
    int maxIndex = 0; // Start with the first element as the largest
 8005ac4:	2000      	movs	r0, #0
    int max = arr[0];
 8005ac6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    for (int i = 1; i < n; i++) {
 8005aca:	428a      	cmp	r2, r1
 8005acc:	d100      	bne.n	8005ad0 <indexlargest+0x18>
 8005ace:	4770      	bx	lr
        if (arr[i] > max) {
 8005ad0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005ad4:	ecb3 7a01 	vldmia	r3!, {s14}
 8005ad8:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8005adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            max = arr[i];
 8005ae0:	bfc4      	itt	gt
 8005ae2:	4610      	movgt	r0, r2
 8005ae4:	eefd 7ac7 	vcvtgt.s32.f32	s15, s14
    for (int i = 1; i < n; i++) {
 8005ae8:	3201      	adds	r2, #1
 8005aea:	e7ee      	b.n	8005aca <indexlargest+0x12>
    if (n <= 0) return -1; // Return -1 for an empty array
 8005aec:	f04f 30ff 	mov.w	r0, #4294967295
            maxIndex = i; // Update maxIndex to the current index
        }
    }
    return maxIndex;
}
 8005af0:	4770      	bx	lr
	...

08005af4 <post_process>:
{
 8005af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005af6:	4d79      	ldr	r5, [pc, #484]	@ (8005cdc <post_process+0x1e8>)
	for (int i = 0; i < 54; ++i) {
 8005af8:	2400      	movs	r4, #0
	  	sprintf(buffer, "index: %d, data: %f\r\n",i, data_out_1[i]);
 8005afa:	4f79      	ldr	r7, [pc, #484]	@ (8005ce0 <post_process+0x1ec>)
	  	HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8005afc:	4e79      	ldr	r6, [pc, #484]	@ (8005ce4 <post_process+0x1f0>)
{
 8005afe:	ed2d 8b02 	vpush	{d8}
	float temp = 0;
 8005b02:	ed9f 8a79 	vldr	s16, [pc, #484]	@ 8005ce8 <post_process+0x1f4>
{
 8005b06:	b0e7      	sub	sp, #412	@ 0x19c
		temp += data_out_1[i];
 8005b08:	ecb5 7a01 	vldmia	r5!, {s14}
	  	sprintf(buffer, "index: %d, data: %f\r\n",i, data_out_1[i]);
 8005b0c:	4622      	mov	r2, r4
 8005b0e:	4639      	mov	r1, r7
 8005b10:	a802      	add	r0, sp, #8
		temp += data_out_1[i];
 8005b12:	ee38 8a07 	vadd.f32	s16, s16, s14
	for (int i = 0; i < 54; ++i) {
 8005b16:	3401      	adds	r4, #1
	  	sprintf(buffer, "index: %d, data: %f\r\n",i, data_out_1[i]);
 8005b18:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8005b1c:	ed8d 7b00 	vstr	d7, [sp]
 8005b20:	f006 fe2c 	bl	800c77c <siprintf>
	  	HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8005b24:	a802      	add	r0, sp, #8
 8005b26:	f7fa fc2b 	bl	8000380 <strlen>
 8005b2a:	230a      	movs	r3, #10
 8005b2c:	b282      	uxth	r2, r0
 8005b2e:	a902      	add	r1, sp, #8
 8005b30:	4630      	mov	r0, r6
 8005b32:	f7ff fde2 	bl	80056fa <HAL_UART_Transmit>
	  	HAL_Delay(20);
 8005b36:	2014      	movs	r0, #20
 8005b38:	f7fb fcce 	bl	80014d8 <HAL_Delay>
	for (int i = 0; i < 54; ++i) {
 8005b3c:	2c36      	cmp	r4, #54	@ 0x36
 8005b3e:	d1e3      	bne.n	8005b08 <post_process+0x14>
  	sprintf(buffer, "temp: %f\r\n", temp);
 8005b40:	eeb7 7ac8 	vcvt.f64.f32	d7, s16
 8005b44:	4969      	ldr	r1, [pc, #420]	@ (8005cec <post_process+0x1f8>)
 8005b46:	a802      	add	r0, sp, #8
 8005b48:	ec53 2b17 	vmov	r2, r3, d7
 8005b4c:	f006 fe16 	bl	800c77c <siprintf>
  	HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8005b50:	a802      	add	r0, sp, #8
 8005b52:	f7fa fc15 	bl	8000380 <strlen>
 8005b56:	230a      	movs	r3, #10
 8005b58:	b282      	uxth	r2, r0
 8005b5a:	a902      	add	r1, sp, #8
 8005b5c:	4861      	ldr	r0, [pc, #388]	@ (8005ce4 <post_process+0x1f0>)
 8005b5e:	f7ff fdcc 	bl	80056fa <HAL_UART_Transmit>
  	HAL_Delay(20);
 8005b62:	2014      	movs	r0, #20
 8005b64:	f7fb fcb8 	bl	80014d8 <HAL_Delay>
  	int index = indexlargest(data_out_1, 54);
 8005b68:	4621      	mov	r1, r4
 8005b6a:	485c      	ldr	r0, [pc, #368]	@ (8005cdc <post_process+0x1e8>)
 8005b6c:	f7ff ffa4 	bl	8005ab8 <indexlargest>
  	sprintf(buffer, "index :%d \r\n", index);
 8005b70:	495f      	ldr	r1, [pc, #380]	@ (8005cf0 <post_process+0x1fc>)
 8005b72:	4602      	mov	r2, r0
  	int index = indexlargest(data_out_1, 54);
 8005b74:	4604      	mov	r4, r0
  	sprintf(buffer, "index :%d \r\n", index);
 8005b76:	a802      	add	r0, sp, #8
 8005b78:	f006 fe00 	bl	800c77c <siprintf>
  	HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8005b7c:	a802      	add	r0, sp, #8
 8005b7e:	f7fa fbff 	bl	8000380 <strlen>
 8005b82:	230a      	movs	r3, #10
 8005b84:	b282      	uxth	r2, r0
 8005b86:	a902      	add	r1, sp, #8
 8005b88:	4856      	ldr	r0, [pc, #344]	@ (8005ce4 <post_process+0x1f0>)
 8005b8a:	f7ff fdb6 	bl	80056fa <HAL_UART_Transmit>
  	HAL_Delay(20);
 8005b8e:	2014      	movs	r0, #20
 8005b90:	f7fb fca2 	bl	80014d8 <HAL_Delay>
  	if (index >= 1 && index <= 13) {
 8005b94:	1e63      	subs	r3, r4, #1
 8005b96:	2b0c      	cmp	r3, #12
 8005b98:	d816      	bhi.n	8005bc8 <post_process+0xd4>
  		strcpy(suit, "Clubs");
 8005b9a:	4956      	ldr	r1, [pc, #344]	@ (8005cf4 <post_process+0x200>)
  		strcpy(suit, "Diamonds");
 8005b9c:	a834      	add	r0, sp, #208	@ 0xd0
 8005b9e:	f006 ff08 	bl	800c9b2 <strcpy>
  	int offset = -1;
 8005ba2:	f04f 33ff 	mov.w	r3, #4294967295
  	int ranknum = (index + offset) % 13;
 8005ba6:	4423      	add	r3, r4
 8005ba8:	220d      	movs	r2, #13
 8005baa:	fb93 f1f2 	sdiv	r1, r3, r2
 8005bae:	fb02 3311 	mls	r3, r2, r1, r3
  	switch(ranknum) {
 8005bb2:	2b0c      	cmp	r3, #12
 8005bb4:	d832      	bhi.n	8005c1c <post_process+0x128>
 8005bb6:	e8df f003 	tbb	[pc, r3]
 8005bba:	792d      	.short	0x792d
 8005bbc:	817f7d7b 	.word	0x817f7d7b
 8005bc0:	89878583 	.word	0x89878583
 8005bc4:	8d8b      	.short	0x8d8b
 8005bc6:	8f          	.byte	0x8f
 8005bc7:	00          	.byte	0x00
  	} else if (index >= 14 && index <= 26) {
 8005bc8:	f1a4 030e 	sub.w	r3, r4, #14
 8005bcc:	2b0c      	cmp	r3, #12
 8005bce:	d801      	bhi.n	8005bd4 <post_process+0xe0>
  		strcpy(suit, "Diamonds");
 8005bd0:	4949      	ldr	r1, [pc, #292]	@ (8005cf8 <post_process+0x204>)
 8005bd2:	e7e3      	b.n	8005b9c <post_process+0xa8>
  	} else if (index >= 27 && index <= 39) {
 8005bd4:	f1a4 031b 	sub.w	r3, r4, #27
 8005bd8:	2b0c      	cmp	r3, #12
 8005bda:	d801      	bhi.n	8005be0 <post_process+0xec>
  		strcpy(suit, "Hearts");
 8005bdc:	4947      	ldr	r1, [pc, #284]	@ (8005cfc <post_process+0x208>)
 8005bde:	e7dd      	b.n	8005b9c <post_process+0xa8>
  	} else if (index >= 41 && index <= 53) {
 8005be0:	f1a4 0329 	sub.w	r3, r4, #41	@ 0x29
 8005be4:	2b0c      	cmp	r3, #12
 8005be6:	d806      	bhi.n	8005bf6 <post_process+0x102>
  		strcpy(suit, "Spades");
 8005be8:	4945      	ldr	r1, [pc, #276]	@ (8005d00 <post_process+0x20c>)
 8005bea:	a834      	add	r0, sp, #208	@ 0xd0
 8005bec:	f006 fee1 	bl	800c9b2 <strcpy>
  		offset = -2;
 8005bf0:	f06f 0301 	mvn.w	r3, #1
 8005bf4:	e7d7      	b.n	8005ba6 <post_process+0xb2>
  	} else if (index == 0) {
 8005bf6:	b94c      	cbnz	r4, 8005c0c <post_process+0x118>
  	  lcd_clear();
 8005bf8:	f7fa ff54 	bl	8000aa4 <lcd_clear>
  	  lcd_send_string("Black Joker");
 8005bfc:	4841      	ldr	r0, [pc, #260]	@ (8005d04 <post_process+0x210>)
    	lcd_send_string("Red Joker");
 8005bfe:	f7fa fefd 	bl	80009fc <lcd_send_string>
}
 8005c02:	2000      	movs	r0, #0
 8005c04:	b067      	add	sp, #412	@ 0x19c
 8005c06:	ecbd 8b02 	vpop	{d8}
 8005c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  		lcd_clear();
 8005c0c:	f7fa ff4a 	bl	8000aa4 <lcd_clear>
    	lcd_send_string("Red Joker");
 8005c10:	483d      	ldr	r0, [pc, #244]	@ (8005d08 <post_process+0x214>)
 8005c12:	e7f4      	b.n	8005bfe <post_process+0x10a>
  		strcpy(rank, "Two");
 8005c14:	493d      	ldr	r1, [pc, #244]	@ (8005d0c <post_process+0x218>)
  		strcpy(rank, "Ten");
 8005c16:	a81b      	add	r0, sp, #108	@ 0x6c
 8005c18:	f006 fecb 	bl	800c9b2 <strcpy>
  	sprintf(buffer, rank);
 8005c1c:	a91b      	add	r1, sp, #108	@ 0x6c
 8005c1e:	a802      	add	r0, sp, #8
 8005c20:	f006 fdac 	bl	800c77c <siprintf>
  	HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8005c24:	a802      	add	r0, sp, #8
 8005c26:	f7fa fbab 	bl	8000380 <strlen>
 8005c2a:	230a      	movs	r3, #10
 8005c2c:	b282      	uxth	r2, r0
 8005c2e:	a902      	add	r1, sp, #8
 8005c30:	482c      	ldr	r0, [pc, #176]	@ (8005ce4 <post_process+0x1f0>)
 8005c32:	f7ff fd62 	bl	80056fa <HAL_UART_Transmit>
  	HAL_Delay(20);
 8005c36:	2014      	movs	r0, #20
 8005c38:	f7fb fc4e 	bl	80014d8 <HAL_Delay>
  	sprintf(buffer, suit);
 8005c3c:	a934      	add	r1, sp, #208	@ 0xd0
 8005c3e:	a802      	add	r0, sp, #8
 8005c40:	f006 fd9c 	bl	800c77c <siprintf>
  	HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8005c44:	a802      	add	r0, sp, #8
 8005c46:	f7fa fb9b 	bl	8000380 <strlen>
 8005c4a:	230a      	movs	r3, #10
 8005c4c:	b282      	uxth	r2, r0
 8005c4e:	a902      	add	r1, sp, #8
 8005c50:	4824      	ldr	r0, [pc, #144]	@ (8005ce4 <post_process+0x1f0>)
 8005c52:	f7ff fd52 	bl	80056fa <HAL_UART_Transmit>
  	HAL_Delay(20);
 8005c56:	2014      	movs	r0, #20
 8005c58:	f7fb fc3e 	bl	80014d8 <HAL_Delay>
  	char temp1[100] = "";
 8005c5c:	2100      	movs	r1, #0
 8005c5e:	2260      	movs	r2, #96	@ 0x60
 8005c60:	a84e      	add	r0, sp, #312	@ 0x138
 8005c62:	914d      	str	r1, [sp, #308]	@ 0x134
 8005c64:	f006 fe07 	bl	800c876 <memset>
  	strcat(temp1, rank);
 8005c68:	a91b      	add	r1, sp, #108	@ 0x6c
 8005c6a:	a84d      	add	r0, sp, #308	@ 0x134
 8005c6c:	f006 fe0b 	bl	800c886 <strcat>
  	strcat(temp1, " of ");
 8005c70:	4927      	ldr	r1, [pc, #156]	@ (8005d10 <post_process+0x21c>)
 8005c72:	a84d      	add	r0, sp, #308	@ 0x134
 8005c74:	f006 fe07 	bl	800c886 <strcat>
  	strcat(temp1, suit);
 8005c78:	a934      	add	r1, sp, #208	@ 0xd0
 8005c7a:	a84d      	add	r0, sp, #308	@ 0x134
 8005c7c:	f006 fe03 	bl	800c886 <strcat>
	lcd_clear();
 8005c80:	f7fa ff10 	bl	8000aa4 <lcd_clear>
	lcd_send_string(temp1);
 8005c84:	a84d      	add	r0, sp, #308	@ 0x134
 8005c86:	f7fa feb9 	bl	80009fc <lcd_send_string>
  	sprintf(buffer, temp1);
 8005c8a:	a94d      	add	r1, sp, #308	@ 0x134
 8005c8c:	a802      	add	r0, sp, #8
 8005c8e:	f006 fd75 	bl	800c77c <siprintf>
  	HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8005c92:	a802      	add	r0, sp, #8
 8005c94:	f7fa fb74 	bl	8000380 <strlen>
 8005c98:	230a      	movs	r3, #10
 8005c9a:	b282      	uxth	r2, r0
 8005c9c:	a902      	add	r1, sp, #8
 8005c9e:	4811      	ldr	r0, [pc, #68]	@ (8005ce4 <post_process+0x1f0>)
 8005ca0:	f7ff fd2b 	bl	80056fa <HAL_UART_Transmit>
  	HAL_Delay(20);
 8005ca4:	2014      	movs	r0, #20
 8005ca6:	f7fb fc17 	bl	80014d8 <HAL_Delay>
  return 0;
 8005caa:	e7aa      	b.n	8005c02 <post_process+0x10e>
  		strcpy(rank, "Three");
 8005cac:	4919      	ldr	r1, [pc, #100]	@ (8005d14 <post_process+0x220>)
 8005cae:	e7b2      	b.n	8005c16 <post_process+0x122>
  		strcpy(rank, "Four");
 8005cb0:	4919      	ldr	r1, [pc, #100]	@ (8005d18 <post_process+0x224>)
 8005cb2:	e7b0      	b.n	8005c16 <post_process+0x122>
  		strcpy(rank, "Five");
 8005cb4:	4919      	ldr	r1, [pc, #100]	@ (8005d1c <post_process+0x228>)
 8005cb6:	e7ae      	b.n	8005c16 <post_process+0x122>
  		strcpy(rank, "Six");
 8005cb8:	4919      	ldr	r1, [pc, #100]	@ (8005d20 <post_process+0x22c>)
 8005cba:	e7ac      	b.n	8005c16 <post_process+0x122>
  		strcpy(rank, "Seven");
 8005cbc:	4919      	ldr	r1, [pc, #100]	@ (8005d24 <post_process+0x230>)
 8005cbe:	e7aa      	b.n	8005c16 <post_process+0x122>
  		strcpy(rank, "Eight");
 8005cc0:	4919      	ldr	r1, [pc, #100]	@ (8005d28 <post_process+0x234>)
 8005cc2:	e7a8      	b.n	8005c16 <post_process+0x122>
  		strcpy(rank, "Nine");
 8005cc4:	4919      	ldr	r1, [pc, #100]	@ (8005d2c <post_process+0x238>)
 8005cc6:	e7a6      	b.n	8005c16 <post_process+0x122>
  		strcpy(rank, "Ace");
 8005cc8:	4919      	ldr	r1, [pc, #100]	@ (8005d30 <post_process+0x23c>)
 8005cca:	e7a4      	b.n	8005c16 <post_process+0x122>
  		strcpy(rank, "Jack");
 8005ccc:	4919      	ldr	r1, [pc, #100]	@ (8005d34 <post_process+0x240>)
 8005cce:	e7a2      	b.n	8005c16 <post_process+0x122>
  		strcpy(rank, "King");
 8005cd0:	4919      	ldr	r1, [pc, #100]	@ (8005d38 <post_process+0x244>)
 8005cd2:	e7a0      	b.n	8005c16 <post_process+0x122>
  		strcpy(rank, "Queen");
 8005cd4:	4919      	ldr	r1, [pc, #100]	@ (8005d3c <post_process+0x248>)
 8005cd6:	e79e      	b.n	8005c16 <post_process+0x122>
  		strcpy(rank, "Ten");
 8005cd8:	4919      	ldr	r1, [pc, #100]	@ (8005d40 <post_process+0x24c>)
 8005cda:	e79c      	b.n	8005c16 <post_process+0x122>
 8005cdc:	24039004 	.word	0x24039004
 8005ce0:	0800ecc6 	.word	0x0800ecc6
 8005ce4:	24008d48 	.word	0x24008d48
 8005ce8:	00000000 	.word	0x00000000
 8005cec:	0800ecdc 	.word	0x0800ecdc
 8005cf0:	0800ece7 	.word	0x0800ece7
 8005cf4:	0800ecf4 	.word	0x0800ecf4
 8005cf8:	0800ecfa 	.word	0x0800ecfa
 8005cfc:	0800ed03 	.word	0x0800ed03
 8005d00:	0800ed0a 	.word	0x0800ed0a
 8005d04:	0800ed11 	.word	0x0800ed11
 8005d08:	0800ed1d 	.word	0x0800ed1d
 8005d0c:	0800ed27 	.word	0x0800ed27
 8005d10:	0800ed68 	.word	0x0800ed68
 8005d14:	0800ed2b 	.word	0x0800ed2b
 8005d18:	0800ed31 	.word	0x0800ed31
 8005d1c:	0800ed36 	.word	0x0800ed36
 8005d20:	0800ed3b 	.word	0x0800ed3b
 8005d24:	0800ed3f 	.word	0x0800ed3f
 8005d28:	0800ed45 	.word	0x0800ed45
 8005d2c:	0800ed4b 	.word	0x0800ed4b
 8005d30:	0800ed50 	.word	0x0800ed50
 8005d34:	0800ed54 	.word	0x0800ed54
 8005d38:	0800ed59 	.word	0x0800ed59
 8005d3c:	0800ed5e 	.word	0x0800ed5e
 8005d40:	0800ed64 	.word	0x0800ed64

08005d44 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 8005d44:	b537      	push	{r0, r1, r2, r4, r5, lr}
  err = ai_network_create_and_init(&network, act_addr, NULL);
 8005d46:	4d1a      	ldr	r5, [pc, #104]	@ (8005db0 <MX_X_CUBE_AI_Init+0x6c>)
 8005d48:	2200      	movs	r2, #0
 8005d4a:	491a      	ldr	r1, [pc, #104]	@ (8005db4 <MX_X_CUBE_AI_Init+0x70>)
 8005d4c:	4628      	mov	r0, r5
 8005d4e:	f000 fa0f 	bl	8006170 <ai_network_create_and_init>
  if (err.type != AI_ERROR_NONE) {
 8005d52:	f010 04ff 	ands.w	r4, r0, #255	@ 0xff
 8005d56:	d015      	beq.n	8005d84 <MX_X_CUBE_AI_Init+0x40>
    {sprintf(buffer, "TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8005d58:	f3c0 2017 	ubfx	r0, r0, #8, #24
 8005d5c:	4623      	mov	r3, r4
 8005d5e:	4a16      	ldr	r2, [pc, #88]	@ (8005db8 <MX_X_CUBE_AI_Init+0x74>)
 8005d60:	4916      	ldr	r1, [pc, #88]	@ (8005dbc <MX_X_CUBE_AI_Init+0x78>)
 8005d62:	9000      	str	r0, [sp, #0]
 8005d64:	4816      	ldr	r0, [pc, #88]	@ (8005dc0 <MX_X_CUBE_AI_Init+0x7c>)
 8005d66:	f006 fd09 	bl	800c77c <siprintf>
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8005d6a:	4815      	ldr	r0, [pc, #84]	@ (8005dc0 <MX_X_CUBE_AI_Init+0x7c>)
 8005d6c:	f7fa fb08 	bl	8000380 <strlen>
 8005d70:	230a      	movs	r3, #10
 8005d72:	b282      	uxth	r2, r0
 8005d74:	4912      	ldr	r1, [pc, #72]	@ (8005dc0 <MX_X_CUBE_AI_Init+0x7c>)
 8005d76:	4813      	ldr	r0, [pc, #76]	@ (8005dc4 <MX_X_CUBE_AI_Init+0x80>)
 8005d78:	f7ff fcbf 	bl	80056fa <HAL_UART_Transmit>
  HAL_Delay(20);
 8005d7c:	2014      	movs	r0, #20
 8005d7e:	f7fb fbab 	bl	80014d8 <HAL_Delay>
  do {} while (1);
 8005d82:	e7fe      	b.n	8005d82 <MX_X_CUBE_AI_Init+0x3e>
  ai_input = ai_network_inputs_get(network, NULL);
 8005d84:	4621      	mov	r1, r4
 8005d86:	6828      	ldr	r0, [r5, #0]
 8005d88:	f000 f8f2 	bl	8005f70 <ai_network_inputs_get>
 8005d8c:	4b0e      	ldr	r3, [pc, #56]	@ (8005dc8 <MX_X_CUBE_AI_Init+0x84>)
  ai_output = ai_network_outputs_get(network, NULL);
 8005d8e:	4621      	mov	r1, r4
  ai_input = ai_network_inputs_get(network, NULL);
 8005d90:	6018      	str	r0, [r3, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 8005d92:	6828      	ldr	r0, [r5, #0]
 8005d94:	f000 f8f6 	bl	8005f84 <ai_network_outputs_get>
 8005d98:	4b0c      	ldr	r3, [pc, #48]	@ (8005dcc <MX_X_CUBE_AI_Init+0x88>)
	  data_out_1[i] = 0;
 8005d9a:	f44f 7258 	mov.w	r2, #864	@ 0x360
 8005d9e:	4621      	mov	r1, r4
  ai_output = ai_network_outputs_get(network, NULL);
 8005da0:	6018      	str	r0, [r3, #0]
	  data_out_1[i] = 0;
 8005da2:	480b      	ldr	r0, [pc, #44]	@ (8005dd0 <MX_X_CUBE_AI_Init+0x8c>)
    /* USER CODE BEGIN 5 */

  ai_boostrap(data_activations0);
    /* USER CODE END 5 */
}
 8005da4:	b003      	add	sp, #12
 8005da6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  data_out_1[i] = 0;
 8005daa:	f006 bd64 	b.w	800c876 <memset>
 8005dae:	bf00      	nop
 8005db0:	24008f80 	.word	0x24008f80
 8005db4:	24000018 	.word	0x24000018
 8005db8:	0800ed6d 	.word	0x0800ed6d
 8005dbc:	0800ed88 	.word	0x0800ed88
 8005dc0:	24038fa0 	.word	0x24038fa0
 8005dc4:	24008d48 	.word	0x24008d48
 8005dc8:	24008f7c 	.word	0x24008f7c
 8005dcc:	24008f78 	.word	0x24008f78
 8005dd0:	24039004 	.word	0x24039004

08005dd4 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 8005dd4:	b530      	push	{r4, r5, lr}
    /* USER CODE BEGIN 6 */
  int res = -1;
  extern UART_HandleTypeDef huart4;
  char buffer [100];
  sprintf(buffer, "AI Process Starts, AI_NETWORK_IN_NUM: %d, data_out_size: %d, data_in_size: %d\r\n", AI_NETWORK_IN_NUM, sizeof(data_out_1), sizeof(data_in_1));
 8005dd6:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
{
 8005dda:	b09d      	sub	sp, #116	@ 0x74
  sprintf(buffer, "AI Process Starts, AI_NETWORK_IN_NUM: %d, data_out_size: %d, data_in_size: %d\r\n", AI_NETWORK_IN_NUM, sizeof(data_out_1), sizeof(data_in_1));
 8005ddc:	2201      	movs	r2, #1
 8005dde:	494d      	ldr	r1, [pc, #308]	@ (8005f14 <MX_X_CUBE_AI_Process+0x140>)
 8005de0:	9300      	str	r3, [sp, #0]
 8005de2:	a803      	add	r0, sp, #12
 8005de4:	23d8      	movs	r3, #216	@ 0xd8
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
  HAL_Delay(20);
  if (network) {
 8005de6:	4c4c      	ldr	r4, [pc, #304]	@ (8005f18 <MX_X_CUBE_AI_Process+0x144>)
  sprintf(buffer, "AI Process Starts, AI_NETWORK_IN_NUM: %d, data_out_size: %d, data_in_size: %d\r\n", AI_NETWORK_IN_NUM, sizeof(data_out_1), sizeof(data_in_1));
 8005de8:	f006 fcc8 	bl	800c77c <siprintf>
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8005dec:	a803      	add	r0, sp, #12
 8005dee:	f7fa fac7 	bl	8000380 <strlen>
 8005df2:	230a      	movs	r3, #10
 8005df4:	b282      	uxth	r2, r0
 8005df6:	a903      	add	r1, sp, #12
 8005df8:	4848      	ldr	r0, [pc, #288]	@ (8005f1c <MX_X_CUBE_AI_Process+0x148>)
 8005dfa:	f7ff fc7e 	bl	80056fa <HAL_UART_Transmit>
  HAL_Delay(20);
 8005dfe:	2014      	movs	r0, #20
 8005e00:	f7fb fb6a 	bl	80014d8 <HAL_Delay>
  if (network) {
 8005e04:	6823      	ldr	r3, [r4, #0]
 8005e06:	b98b      	cbnz	r3, 8005e2c <MX_X_CUBE_AI_Process+0x58>
	  	HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
	  	HAL_Delay(20);
//      }
  }
  if (res) {
	  sprintf(buffer, "AI Failed!\r\n");
 8005e08:	4945      	ldr	r1, [pc, #276]	@ (8005f20 <MX_X_CUBE_AI_Process+0x14c>)
 8005e0a:	a803      	add	r0, sp, #12
 8005e0c:	f006 fdd1 	bl	800c9b2 <strcpy>
	  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8005e10:	a803      	add	r0, sp, #12
 8005e12:	f7fa fab5 	bl	8000380 <strlen>
 8005e16:	230a      	movs	r3, #10
 8005e18:	b282      	uxth	r2, r0
 8005e1a:	a903      	add	r1, sp, #12
 8005e1c:	483f      	ldr	r0, [pc, #252]	@ (8005f1c <MX_X_CUBE_AI_Process+0x148>)
 8005e1e:	f7ff fc6c 	bl	80056fa <HAL_UART_Transmit>
	  HAL_Delay(20);
 8005e22:	2014      	movs	r0, #20
 8005e24:	f7fb fb58 	bl	80014d8 <HAL_Delay>
  }
    /* USER CODE END 6 */
}
 8005e28:	b01d      	add	sp, #116	@ 0x74
 8005e2a:	bd30      	pop	{r4, r5, pc}
      res = acquire_and_process_data();
 8005e2c:	f7ff fdc4 	bl	80059b8 <acquire_and_process_data>
	  sprintf(buffer, "data acquired passed\r\n");
 8005e30:	493c      	ldr	r1, [pc, #240]	@ (8005f24 <MX_X_CUBE_AI_Process+0x150>)
      res = acquire_and_process_data();
 8005e32:	4605      	mov	r5, r0
	  sprintf(buffer, "data acquired passed\r\n");
 8005e34:	a803      	add	r0, sp, #12
 8005e36:	f006 fdbc 	bl	800c9b2 <strcpy>
	  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8005e3a:	a803      	add	r0, sp, #12
 8005e3c:	f7fa faa0 	bl	8000380 <strlen>
 8005e40:	230a      	movs	r3, #10
 8005e42:	b282      	uxth	r2, r0
 8005e44:	a903      	add	r1, sp, #12
 8005e46:	4835      	ldr	r0, [pc, #212]	@ (8005f1c <MX_X_CUBE_AI_Process+0x148>)
 8005e48:	f7ff fc57 	bl	80056fa <HAL_UART_Transmit>
	  HAL_Delay(20);
 8005e4c:	2014      	movs	r0, #20
 8005e4e:	f7fb fb43 	bl	80014d8 <HAL_Delay>
      if (res == 0) {
 8005e52:	2d00      	cmp	r5, #0
 8005e54:	d146      	bne.n	8005ee4 <MX_X_CUBE_AI_Process+0x110>
  ai_input[0].data = AI_HANDLE_PTR(in_data);
 8005e56:	4b34      	ldr	r3, [pc, #208]	@ (8005f28 <MX_X_CUBE_AI_Process+0x154>)
  batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 8005e58:	6820      	ldr	r0, [r4, #0]
  ai_input[0].data = AI_HANDLE_PTR(in_data);
 8005e5a:	6819      	ldr	r1, [r3, #0]
 8005e5c:	4b33      	ldr	r3, [pc, #204]	@ (8005f2c <MX_X_CUBE_AI_Process+0x158>)
 8005e5e:	604b      	str	r3, [r1, #4]
  ai_output[0].data = AI_HANDLE_PTR(out_data);
 8005e60:	4b33      	ldr	r3, [pc, #204]	@ (8005f30 <MX_X_CUBE_AI_Process+0x15c>)
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	4b33      	ldr	r3, [pc, #204]	@ (8005f34 <MX_X_CUBE_AI_Process+0x160>)
 8005e66:	6053      	str	r3, [r2, #4]
  batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 8005e68:	f000 f9c9 	bl	80061fe <ai_network_run>
  if (batch != 1) {
 8005e6c:	2801      	cmp	r0, #1
  batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 8005e6e:	4602      	mov	r2, r0
  if (batch != 1) {
 8005e70:	d028      	beq.n	8005ec4 <MX_X_CUBE_AI_Process+0xf0>
	  	sprintf(buffer, "Batch Mismatch! Batch number rn is: %d",batch);
 8005e72:	4931      	ldr	r1, [pc, #196]	@ (8005f38 <MX_X_CUBE_AI_Process+0x164>)
 8005e74:	4831      	ldr	r0, [pc, #196]	@ (8005f3c <MX_X_CUBE_AI_Process+0x168>)
 8005e76:	f006 fc81 	bl	800c77c <siprintf>
	  	HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8005e7a:	4830      	ldr	r0, [pc, #192]	@ (8005f3c <MX_X_CUBE_AI_Process+0x168>)
 8005e7c:	f7fa fa80 	bl	8000380 <strlen>
 8005e80:	230a      	movs	r3, #10
 8005e82:	b282      	uxth	r2, r0
 8005e84:	492d      	ldr	r1, [pc, #180]	@ (8005f3c <MX_X_CUBE_AI_Process+0x168>)
 8005e86:	4825      	ldr	r0, [pc, #148]	@ (8005f1c <MX_X_CUBE_AI_Process+0x148>)
 8005e88:	f7ff fc37 	bl	80056fa <HAL_UART_Transmit>
	  	HAL_Delay(20);
 8005e8c:	2014      	movs	r0, #20
 8005e8e:	f7fb fb23 	bl	80014d8 <HAL_Delay>
    ai_log_err(ai_network_get_error(network),
 8005e92:	6820      	ldr	r0, [r4, #0]
 8005e94:	f000 f85c 	bl	8005f50 <ai_network_get_error>
    {sprintf(buffer, "TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8005e98:	f3c0 2317 	ubfx	r3, r0, #8, #24
 8005e9c:	4a28      	ldr	r2, [pc, #160]	@ (8005f40 <MX_X_CUBE_AI_Process+0x16c>)
 8005e9e:	4929      	ldr	r1, [pc, #164]	@ (8005f44 <MX_X_CUBE_AI_Process+0x170>)
 8005ea0:	9300      	str	r3, [sp, #0]
 8005ea2:	b2c3      	uxtb	r3, r0
 8005ea4:	4825      	ldr	r0, [pc, #148]	@ (8005f3c <MX_X_CUBE_AI_Process+0x168>)
 8005ea6:	f006 fc69 	bl	800c77c <siprintf>
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8005eaa:	4824      	ldr	r0, [pc, #144]	@ (8005f3c <MX_X_CUBE_AI_Process+0x168>)
 8005eac:	f7fa fa68 	bl	8000380 <strlen>
 8005eb0:	230a      	movs	r3, #10
 8005eb2:	b282      	uxth	r2, r0
 8005eb4:	4921      	ldr	r1, [pc, #132]	@ (8005f3c <MX_X_CUBE_AI_Process+0x168>)
 8005eb6:	4819      	ldr	r0, [pc, #100]	@ (8005f1c <MX_X_CUBE_AI_Process+0x148>)
 8005eb8:	f7ff fc1f 	bl	80056fa <HAL_UART_Transmit>
  HAL_Delay(20);
 8005ebc:	2014      	movs	r0, #20
 8005ebe:	f7fb fb0b 	bl	80014d8 <HAL_Delay>
  do {} while (1);
 8005ec2:	e7fe      	b.n	8005ec2 <MX_X_CUBE_AI_Process+0xee>
  	  	sprintf(buffer, "ai_run passed:\r\n");
 8005ec4:	4920      	ldr	r1, [pc, #128]	@ (8005f48 <MX_X_CUBE_AI_Process+0x174>)
 8005ec6:	a803      	add	r0, sp, #12
 8005ec8:	f006 fd73 	bl	800c9b2 <strcpy>
  	  	HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8005ecc:	a803      	add	r0, sp, #12
 8005ece:	f7fa fa57 	bl	8000380 <strlen>
 8005ed2:	230a      	movs	r3, #10
 8005ed4:	b282      	uxth	r2, r0
 8005ed6:	a903      	add	r1, sp, #12
 8005ed8:	4810      	ldr	r0, [pc, #64]	@ (8005f1c <MX_X_CUBE_AI_Process+0x148>)
 8005eda:	f7ff fc0e 	bl	80056fa <HAL_UART_Transmit>
  	  	HAL_Delay(20);
 8005ede:	2014      	movs	r0, #20
 8005ee0:	f7fb fafa 	bl	80014d8 <HAL_Delay>
        res = post_process();
 8005ee4:	f7ff fe06 	bl	8005af4 <post_process>
	  	sprintf(buffer, "post process passed\r\n");
 8005ee8:	4918      	ldr	r1, [pc, #96]	@ (8005f4c <MX_X_CUBE_AI_Process+0x178>)
        res = post_process();
 8005eea:	4604      	mov	r4, r0
	  	sprintf(buffer, "post process passed\r\n");
 8005eec:	a803      	add	r0, sp, #12
 8005eee:	f006 fd60 	bl	800c9b2 <strcpy>
	  	HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8005ef2:	a803      	add	r0, sp, #12
 8005ef4:	f7fa fa44 	bl	8000380 <strlen>
 8005ef8:	230a      	movs	r3, #10
 8005efa:	b282      	uxth	r2, r0
 8005efc:	a903      	add	r1, sp, #12
 8005efe:	4807      	ldr	r0, [pc, #28]	@ (8005f1c <MX_X_CUBE_AI_Process+0x148>)
 8005f00:	f7ff fbfb 	bl	80056fa <HAL_UART_Transmit>
	  	HAL_Delay(20);
 8005f04:	2014      	movs	r0, #20
 8005f06:	f7fb fae7 	bl	80014d8 <HAL_Delay>
  if (res) {
 8005f0a:	2c00      	cmp	r4, #0
 8005f0c:	f47f af7c 	bne.w	8005e08 <MX_X_CUBE_AI_Process+0x34>
 8005f10:	e78a      	b.n	8005e28 <MX_X_CUBE_AI_Process+0x54>
 8005f12:	bf00      	nop
 8005f14:	0800edba 	.word	0x0800edba
 8005f18:	24008f80 	.word	0x24008f80
 8005f1c:	24008d48 	.word	0x24008d48
 8005f20:	0800ee0a 	.word	0x0800ee0a
 8005f24:	0800ee17 	.word	0x0800ee17
 8005f28:	24008f7c 	.word	0x24008f7c
 8005f2c:	240390dc 	.word	0x240390dc
 8005f30:	24008f78 	.word	0x24008f78
 8005f34:	24039004 	.word	0x24039004
 8005f38:	0800ee2e 	.word	0x0800ee2e
 8005f3c:	24038fa0 	.word	0x24038fa0
 8005f40:	0800ee55 	.word	0x0800ee55
 8005f44:	0800ed88 	.word	0x0800ed88
 8005f48:	0800ee64 	.word	0x0800ee64
 8005f4c:	0800ee75 	.word	0x0800ee75

08005f50 <ai_network_get_error>:
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 8005f50:	f000 ba8c 	b.w	800646c <ai_platform_network_get_error>

08005f54 <ai_network_create>:
}

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8005f54:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 8005f56:	2305      	movs	r3, #5
 8005f58:	2200      	movs	r2, #0
 8005f5a:	e9cd 3200 	strd	r3, r2, [sp]
 8005f5e:	2301      	movs	r3, #1
 8005f60:	4a02      	ldr	r2, [pc, #8]	@ (8005f6c <ai_network_create+0x18>)
 8005f62:	f000 fea9 	bl	8006cb8 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8005f66:	b003      	add	sp, #12
 8005f68:	f85d fb04 	ldr.w	pc, [sp], #4
 8005f6c:	2400001c 	.word	0x2400001c

08005f70 <ai_network_inputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 8005f70:	b910      	cbnz	r0, 8005f78 <ai_network_inputs_get+0x8>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8005f72:	4802      	ldr	r0, [pc, #8]	@ (8005f7c <ai_network_inputs_get+0xc>)
 8005f74:	4b02      	ldr	r3, [pc, #8]	@ (8005f80 <ai_network_inputs_get+0x10>)
 8005f76:	6003      	str	r3, [r0, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8005f78:	f000 bb8a 	b.w	8006690 <ai_platform_inputs_get>
 8005f7c:	2400001c 	.word	0x2400001c
 8005f80:	a1c00100 	.word	0xa1c00100

08005f84 <ai_network_outputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 8005f84:	b910      	cbnz	r0, 8005f8c <ai_network_outputs_get+0x8>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8005f86:	4802      	ldr	r0, [pc, #8]	@ (8005f90 <ai_network_outputs_get+0xc>)
 8005f88:	4b02      	ldr	r3, [pc, #8]	@ (8005f94 <ai_network_outputs_get+0x10>)
 8005f8a:	6003      	str	r3, [r0, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8005f8c:	f000 bd0c 	b.w	80069a8 <ai_platform_outputs_get>
 8005f90:	2400001c 	.word	0x2400001c
 8005f94:	a1c00100 	.word	0xa1c00100

08005f98 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8005f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f9c:	4607      	mov	r7, r0
 8005f9e:	4688      	mov	r8, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8005fa0:	f001 f864 	bl	800706c <ai_platform_network_init>
  if (!net_ctx) return false;
 8005fa4:	4604      	mov	r4, r0
 8005fa6:	2800      	cmp	r0, #0
 8005fa8:	f000 80a4 	beq.w	80060f4 <ai_network_init+0x15c>
  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 8005fac:	4e58      	ldr	r6, [pc, #352]	@ (8006110 <ai_network_init+0x178>)
 8005fae:	4642      	mov	r2, r8
 8005fb0:	2101      	movs	r1, #1
 8005fb2:	4630      	mov	r0, r6
 8005fb4:	f000 f990 	bl	80062d8 <ai_platform_get_weights_map>
 8005fb8:	4605      	mov	r5, r0
 8005fba:	2800      	cmp	r0, #0
 8005fbc:	f000 809c 	beq.w	80060f8 <ai_network_init+0x160>
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8005fc0:	4a54      	ldr	r2, [pc, #336]	@ (8006114 <ai_network_init+0x17c>)
 8005fc2:	6813      	ldr	r3, [r2, #0]
 8005fc4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005fc8:	6013      	str	r3, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8005fca:	6833      	ldr	r3, [r6, #0]
    conv2d_1_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8005fcc:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8005fd0:	4a51      	ldr	r2, [pc, #324]	@ (8006118 <ai_network_init+0x180>)
    gemm_7_bias_array.data = AI_PTR(g_network_weights_map[0] + 378396);
 8005fd2:	f503 26b8 	add.w	r6, r3, #376832	@ 0x5c000
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8005fd6:	6811      	ldr	r1, [r2, #0]
 8005fd8:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8005fdc:	6011      	str	r1, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 452);
 8005fde:	f503 71e2 	add.w	r1, r3, #452	@ 0x1c4
    conv2d_1_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 452);
 8005fe2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8005fe6:	4a4d      	ldr	r2, [pc, #308]	@ (800611c <ai_network_init+0x184>)
 8005fe8:	6811      	ldr	r1, [r2, #0]
 8005fea:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8005fee:	6011      	str	r1, [r2, #0]
    conv2d_3_weights_array.data = AI_PTR(g_network_weights_map[0] + 476);
 8005ff0:	f503 71ee 	add.w	r1, r3, #476	@ 0x1dc
    conv2d_3_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 476);
 8005ff4:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8005ff8:	4a49      	ldr	r2, [pc, #292]	@ (8006120 <ai_network_init+0x188>)
 8005ffa:	6811      	ldr	r1, [r2, #0]
 8005ffc:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8006000:	6011      	str	r1, [r2, #0]
    conv2d_3_bias_array.data = AI_PTR(g_network_weights_map[0] + 2012);
 8006002:	f203 71dc 	addw	r1, r3, #2012	@ 0x7dc
    conv2d_3_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 2012);
 8006006:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_7_weights_array.format |= AI_FMT_FLAG_CONST;
 800600a:	4a46      	ldr	r2, [pc, #280]	@ (8006124 <ai_network_init+0x18c>)
 800600c:	6811      	ldr	r1, [r2, #0]
 800600e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8006012:	6011      	str	r1, [r2, #0]
    gemm_7_weights_array.data = AI_PTR(g_network_weights_map[0] + 2076);
 8006014:	f603 011c 	addw	r1, r3, #2076	@ 0x81c
    gemm_8_bias_array.data = AI_PTR(g_network_weights_map[0] + 385356);
 8006018:	f503 23bc 	add.w	r3, r3, #385024	@ 0x5e000
    gemm_7_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 2076);
 800601c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8006020:	4a41      	ldr	r2, [pc, #260]	@ (8006128 <ai_network_init+0x190>)
    gemm_8_bias_array.data = AI_PTR(g_network_weights_map[0] + 385356);
 8006022:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
    gemm_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8006026:	6811      	ldr	r1, [r2, #0]
 8006028:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800602c:	6011      	str	r1, [r2, #0]
    gemm_7_bias_array.data = AI_PTR(g_network_weights_map[0] + 378396);
 800602e:	f206 611c 	addw	r1, r6, #1564	@ 0x61c
    gemm_8_weights_array.data = AI_PTR(g_network_weights_map[0] + 378876);
 8006032:	f206 76fc 	addw	r6, r6, #2044	@ 0x7fc
    gemm_7_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 378396);
 8006036:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_8_weights_array.format |= AI_FMT_FLAG_CONST;
 800603a:	4a3c      	ldr	r2, [pc, #240]	@ (800612c <ai_network_init+0x194>)
 800603c:	6811      	ldr	r1, [r2, #0]
 800603e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
    gemm_8_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 378876);
 8006042:	e9c2 6602 	strd	r6, r6, [r2, #8]
    gemm_8_weights_array.format |= AI_FMT_FLAG_CONST;
 8006046:	6011      	str	r1, [r2, #0]
    gemm_8_bias_array.format |= AI_FMT_FLAG_CONST;
 8006048:	4a39      	ldr	r2, [pc, #228]	@ (8006130 <ai_network_init+0x198>)
 800604a:	6811      	ldr	r1, [r2, #0]
 800604c:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8006050:	6011      	str	r1, [r2, #0]
    gemm_8_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 385356);
 8006052:	e9c2 3302 	strd	r3, r3, [r2, #8]
  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 8006056:	f8df 9114 	ldr.w	r9, [pc, #276]	@ 800616c <ai_network_init+0x1d4>
 800605a:	4642      	mov	r2, r8
 800605c:	2101      	movs	r1, #1
 800605e:	4648      	mov	r0, r9
 8006060:	f000 f992 	bl	8006388 <ai_platform_get_activations_map>
 8006064:	4606      	mov	r6, r0
 8006066:	2800      	cmp	r0, #0
 8006068:	d04c      	beq.n	8006104 <ai_network_init+0x16c>
    serving_default_input_10_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800606a:	f8d9 3000 	ldr.w	r3, [r9]
 800606e:	4a31      	ldr	r2, [pc, #196]	@ (8006134 <ai_network_init+0x19c>)
    conv2d_1_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 49156);
 8006070:	4931      	ldr	r1, [pc, #196]	@ (8006138 <ai_network_init+0x1a0>)
    serving_default_input_10_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8006072:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conversion_0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8006076:	4a31      	ldr	r2, [pc, #196]	@ (800613c <ai_network_init+0x1a4>)
    conversion_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8006078:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_1_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 49156);
 800607c:	f503 4240 	add.w	r2, r3, #49152	@ 0xc000
 8006080:	3204      	adds	r2, #4
    conv2d_1_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 49156);
 8006082:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_1_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 50440);
 8006086:	f503 4245 	add.w	r2, r3, #50432	@ 0xc500
 800608a:	492d      	ldr	r1, [pc, #180]	@ (8006140 <ai_network_init+0x1a8>)
 800608c:	3208      	adds	r2, #8
    conv2d_1_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 50440);
 800608e:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_1_output_array.data = AI_PTR(g_network_activations_map[0] + 51184);
 8006092:	f503 4247 	add.w	r2, r3, #50944	@ 0xc700
 8006096:	492b      	ldr	r1, [pc, #172]	@ (8006144 <ai_network_init+0x1ac>)
 8006098:	32f0      	adds	r2, #240	@ 0xf0
    conv2d_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 51184);
 800609a:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_3_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800609e:	4a2a      	ldr	r2, [pc, #168]	@ (8006148 <ai_network_init+0x1b0>)
    conv2d_3_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 3680);
 80060a0:	f503 6166 	add.w	r1, r3, #3680	@ 0xe60
    conv2d_3_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80060a4:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_3_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 3680);
 80060a8:	4a28      	ldr	r2, [pc, #160]	@ (800614c <ai_network_init+0x1b4>)
    conv2d_3_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 3680);
 80060aa:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_3_output_array.data = AI_PTR(g_network_activations_map[0] + 4576);
 80060ae:	f503 518f 	add.w	r1, r3, #4576	@ 0x11e0
 80060b2:	4a27      	ldr	r2, [pc, #156]	@ (8006150 <ai_network_init+0x1b8>)
    conv2d_3_output_array.data_start = AI_PTR(g_network_activations_map[0] + 4576);
 80060b4:	e9c2 1102 	strd	r1, r1, [r2, #8]
    transpose_5_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80060b8:	4a26      	ldr	r2, [pc, #152]	@ (8006154 <ai_network_init+0x1bc>)
    gemm_7_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 3136);
 80060ba:	f503 6144 	add.w	r1, r3, #3136	@ 0xc40
    transpose_5_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80060be:	e9c2 3302 	strd	r3, r3, [r2, #8]
    gemm_7_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 3136);
 80060c2:	4a25      	ldr	r2, [pc, #148]	@ (8006158 <ai_network_init+0x1c0>)
    gemm_7_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 3136);
 80060c4:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_7_output_array.data = AI_PTR(g_network_activations_map[0] + 9408);
 80060c8:	f503 5113 	add.w	r1, r3, #9408	@ 0x24c0
 80060cc:	4a23      	ldr	r2, [pc, #140]	@ (800615c <ai_network_init+0x1c4>)
    gemm_7_output_array.data_start = AI_PTR(g_network_activations_map[0] + 9408);
 80060ce:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_8_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80060d2:	4a23      	ldr	r2, [pc, #140]	@ (8006160 <ai_network_init+0x1c8>)
    gemm_8_output_array.data = AI_PTR(g_network_activations_map[0] + 240);
 80060d4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
    gemm_8_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80060d8:	e9c2 3302 	strd	r3, r3, [r2, #8]
    gemm_8_output_array.data = AI_PTR(g_network_activations_map[0] + 240);
 80060dc:	4a21      	ldr	r2, [pc, #132]	@ (8006164 <ai_network_init+0x1cc>)
    gemm_8_output_array.data_start = AI_PTR(g_network_activations_map[0] + 240);
 80060de:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conversion_9_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80060e2:	4a21      	ldr	r2, [pc, #132]	@ (8006168 <ai_network_init+0x1d0>)
    conversion_9_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80060e4:	e9c2 3302 	strd	r3, r3, [r2, #8]

  ai_bool ok = true;
  ok &= network_configure_weights(net_ctx, params);
  ok &= network_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 80060e8:	4638      	mov	r0, r7
 80060ea:	f001 f95b 	bl	80073a4 <ai_platform_network_post_init>
 80060ee:	4030      	ands	r0, r6
 80060f0:	4005      	ands	r5, r0
 80060f2:	b2e8      	uxtb	r0, r5

  return ok;
}
 80060f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 80060f8:	2212      	movs	r2, #18
 80060fa:	2130      	movs	r1, #48	@ 0x30
 80060fc:	4620      	mov	r0, r4
 80060fe:	f000 fac1 	bl	8006684 <ai_platform_network_set_error>
  return false;
 8006102:	e7a8      	b.n	8006056 <ai_network_init+0xbe>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8006104:	2213      	movs	r2, #19
 8006106:	2130      	movs	r1, #48	@ 0x30
 8006108:	4620      	mov	r0, r4
 800610a:	f000 fabb 	bl	8006684 <ai_platform_network_set_error>
  return false;
 800610e:	e7eb      	b.n	80060e8 <ai_network_init+0x150>
 8006110:	2406919c 	.word	0x2406919c
 8006114:	24000ad8 	.word	0x24000ad8
 8006118:	24000ac8 	.word	0x24000ac8
 800611c:	24000ab8 	.word	0x24000ab8
 8006120:	24000aa8 	.word	0x24000aa8
 8006124:	24000a98 	.word	0x24000a98
 8006128:	24000a88 	.word	0x24000a88
 800612c:	24000a78 	.word	0x24000a78
 8006130:	24000a68 	.word	0x24000a68
 8006134:	240009f8 	.word	0x240009f8
 8006138:	24000a58 	.word	0x24000a58
 800613c:	240009e8 	.word	0x240009e8
 8006140:	24000a48 	.word	0x24000a48
 8006144:	240009d8 	.word	0x240009d8
 8006148:	24000a38 	.word	0x24000a38
 800614c:	24000a28 	.word	0x24000a28
 8006150:	240009c8 	.word	0x240009c8
 8006154:	240009b8 	.word	0x240009b8
 8006158:	24000a18 	.word	0x24000a18
 800615c:	240009a8 	.word	0x240009a8
 8006160:	24000a08 	.word	0x24000a08
 8006164:	24000998 	.word	0x24000998
 8006168:	24000ae8 	.word	0x24000ae8
 800616c:	240691a0 	.word	0x240691a0

08006170 <ai_network_create_and_init>:
{
 8006170:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006174:	4688      	mov	r8, r1
 8006176:	b08f      	sub	sp, #60	@ 0x3c
    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8006178:	2100      	movs	r1, #0
{
 800617a:	4606      	mov	r6, r0
 800617c:	4617      	mov	r7, r2
    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 800617e:	f7ff fee9 	bl	8005f54 <ai_network_create>
    if (err.type != AI_ERROR_NONE)
 8006182:	f010 09ff 	ands.w	r9, r0, #255	@ 0xff
    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8006186:	4604      	mov	r4, r0
    if (err.type != AI_ERROR_NONE)
 8006188:	d107      	bne.n	800619a <ai_network_create_and_init+0x2a>
    if (ai_network_data_params_get(&params) != true) {
 800618a:	4668      	mov	r0, sp
 800618c:	f000 f83a 	bl	8006204 <ai_network_data_params_get>
 8006190:	b938      	cbnz	r0, 80061a2 <ai_network_create_and_init+0x32>
  return ai_platform_network_get_error(network);
 8006192:	6830      	ldr	r0, [r6, #0]
 8006194:	f000 f96a 	bl	800646c <ai_platform_network_get_error>
 8006198:	4604      	mov	r4, r0
}
 800619a:	4620      	mov	r0, r4
 800619c:	b00f      	add	sp, #60	@ 0x3c
 800619e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (activations) {
 80061a2:	f1b8 0f00 	cmp.w	r8, #0
 80061a6:	d11a      	bne.n	80061de <ai_network_create_and_init+0x6e>
    if (weights) {
 80061a8:	bb3f      	cbnz	r7, 80061fa <ai_network_create_and_init+0x8a>
    if (ai_network_init(*network, &params) != true) {
 80061aa:	4669      	mov	r1, sp
 80061ac:	6830      	ldr	r0, [r6, #0]
 80061ae:	f7ff fef3 	bl	8005f98 <ai_network_init>
 80061b2:	b928      	cbnz	r0, 80061c0 <ai_network_create_and_init+0x50>
  return ai_platform_network_get_error(network);
 80061b4:	6830      	ldr	r0, [r6, #0]
 80061b6:	f000 f959 	bl	800646c <ai_platform_network_get_error>
 80061ba:	4604      	mov	r4, r0
 80061bc:	fa5f f980 	uxtb.w	r9, r0
    return err;
 80061c0:	f369 0407 	bfi	r4, r9, #0, #8
 80061c4:	e7e9      	b.n	800619a <ai_network_create_and_init+0x2a>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 80061c6:	f858 2025 	ldr.w	r2, [r8, r5, lsl #2]
 80061ca:	4629      	mov	r1, r5
        for (int idx=0;idx<params.map_activations.size;idx++)
 80061cc:	3501      	adds	r5, #1
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 80061ce:	a803      	add	r0, sp, #12
 80061d0:	f000 f86e 	bl	80062b0 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 80061d4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80061d8:	42ab      	cmp	r3, r5
 80061da:	dcf4      	bgt.n	80061c6 <ai_network_create_and_init+0x56>
 80061dc:	e7e4      	b.n	80061a8 <ai_network_create_and_init+0x38>
 80061de:	464d      	mov	r5, r9
 80061e0:	e7f8      	b.n	80061d4 <ai_network_create_and_init+0x64>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 80061e2:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
 80061e6:	4629      	mov	r1, r5
        for (int idx=0;idx<params.map_weights.size;idx++)
 80061e8:	3501      	adds	r5, #1
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 80061ea:	a801      	add	r0, sp, #4
 80061ec:	f000 f860 	bl	80062b0 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 80061f0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80061f4:	42ab      	cmp	r3, r5
 80061f6:	dcf4      	bgt.n	80061e2 <ai_network_create_and_init+0x72>
 80061f8:	e7d7      	b.n	80061aa <ai_network_create_and_init+0x3a>
 80061fa:	2500      	movs	r5, #0
 80061fc:	e7f8      	b.n	80061f0 <ai_network_create_and_init+0x80>

080061fe <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 80061fe:	f001 b9fb 	b.w	80075f8 <ai_platform_network_process>
	...

08006204 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8006204:	b530      	push	{r4, r5, lr}
  if (!params) return false;
 8006206:	4603      	mov	r3, r0
{
 8006208:	b085      	sub	sp, #20
  if (!params) return false;
 800620a:	b170      	cbz	r0, 800622a <ai_network_data_params_get+0x26>
  
  const ai_buffer_array map_activations = 
 800620c:	4c08      	ldr	r4, [pc, #32]	@ (8006230 <ai_network_data_params_get+0x2c>)
 800620e:	466a      	mov	r2, sp
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8006210:	ad02      	add	r5, sp, #8
  const ai_buffer_array map_activations = 
 8006212:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006216:	e882 0003 	stmia.w	r2, {r0, r1}
  const ai_buffer_array map_weights = 
 800621a:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 800621e:	e885 0003 	stmia.w	r5, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8006222:	4629      	mov	r1, r5
 8006224:	4618      	mov	r0, r3
 8006226:	f000 f907 	bl	8006438 <ai_platform_bind_network_params>
}
 800622a:	b005      	add	sp, #20
 800622c:	bd30      	pop	{r4, r5, pc}
 800622e:	bf00      	nop
 8006230:	0800eba0 	.word	0x0800eba0

08006234 <ai_buffer_get_size>:
 8006234:	b368      	cbz	r0, 8006292 <ai_buffer_get_size+0x5e>
 8006236:	4b17      	ldr	r3, [pc, #92]	@ (8006294 <ai_buffer_get_size+0x60>)
 8006238:	4a17      	ldr	r2, [pc, #92]	@ (8006298 <ai_buffer_get_size+0x64>)
 800623a:	b410      	push	{r4}
 800623c:	6804      	ldr	r4, [r0, #0]
 800623e:	4023      	ands	r3, r4
 8006240:	4293      	cmp	r3, r2
 8006242:	d123      	bne.n	800628c <ai_buffer_get_size+0x58>
 8006244:	b311      	cbz	r1, 800628c <ai_buffer_get_size+0x58>
 8006246:	6984      	ldr	r4, [r0, #24]
 8006248:	6862      	ldr	r2, [r4, #4]
 800624a:	321f      	adds	r2, #31
 800624c:	f022 021f 	bic.w	r2, r2, #31
 8006250:	7d03      	ldrb	r3, [r0, #20]
 8006252:	6941      	ldr	r1, [r0, #20]
 8006254:	f1a3 0301 	sub.w	r3, r3, #1
 8006258:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800625c:	fab3 f383 	clz	r3, r3
 8006260:	095b      	lsrs	r3, r3, #5
 8006262:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8006266:	da0c      	bge.n	8006282 <ai_buffer_get_size+0x4e>
 8006268:	2b01      	cmp	r3, #1
 800626a:	d103      	bne.n	8006274 <ai_buffer_get_size+0x40>
 800626c:	2802      	cmp	r0, #2
 800626e:	f04f 0302 	mov.w	r3, #2
 8006272:	d006      	beq.n	8006282 <ai_buffer_get_size+0x4e>
 8006274:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8006278:	3301      	adds	r3, #1
 800627a:	4298      	cmp	r0, r3
 800627c:	fb01 f202 	mul.w	r2, r1, r2
 8006280:	d1f2      	bne.n	8006268 <ai_buffer_get_size+0x34>
 8006282:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8006286:	f85d 4b04 	ldr.w	r4, [sp], #4
 800628a:	4770      	bx	lr
 800628c:	6984      	ldr	r4, [r0, #24]
 800628e:	6862      	ldr	r2, [r4, #4]
 8006290:	e7de      	b.n	8006250 <ai_buffer_get_size+0x1c>
 8006292:	4770      	bx	lr
 8006294:	017fffff 	.word	0x017fffff
 8006298:	000400c0 	.word	0x000400c0

0800629c <ai_buffer_array_sane>:
 800629c:	b138      	cbz	r0, 80062ae <ai_buffer_array_sane+0x12>
 800629e:	6843      	ldr	r3, [r0, #4]
 80062a0:	b123      	cbz	r3, 80062ac <ai_buffer_array_sane+0x10>
 80062a2:	8840      	ldrh	r0, [r0, #2]
 80062a4:	3800      	subs	r0, #0
 80062a6:	bf18      	it	ne
 80062a8:	2001      	movne	r0, #1
 80062aa:	4770      	bx	lr
 80062ac:	4618      	mov	r0, r3
 80062ae:	4770      	bx	lr

080062b0 <ai_buffer_array_item_set_address>:
 80062b0:	b150      	cbz	r0, 80062c8 <ai_buffer_array_item_set_address+0x18>
 80062b2:	6843      	ldr	r3, [r0, #4]
 80062b4:	b14b      	cbz	r3, 80062ca <ai_buffer_array_item_set_address+0x1a>
 80062b6:	8840      	ldrh	r0, [r0, #2]
 80062b8:	b900      	cbnz	r0, 80062bc <ai_buffer_array_item_set_address+0xc>
 80062ba:	4770      	bx	lr
 80062bc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80062c0:	2001      	movs	r0, #1
 80062c2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80062c6:	604a      	str	r2, [r1, #4]
 80062c8:	4770      	bx	lr
 80062ca:	4618      	mov	r0, r3
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop

080062d0 <_ai_platform_acquire_crc>:
 80062d0:	2001      	movs	r0, #1
 80062d2:	4770      	bx	lr

080062d4 <_ai_platform_release_crc>:
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop

080062d8 <ai_platform_get_weights_map>:
 80062d8:	2900      	cmp	r1, #0
 80062da:	bf18      	it	ne
 80062dc:	2800      	cmpne	r0, #0
 80062de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062e0:	bf0c      	ite	eq
 80062e2:	2401      	moveq	r4, #1
 80062e4:	2400      	movne	r4, #0
 80062e6:	2a00      	cmp	r2, #0
 80062e8:	bf08      	it	eq
 80062ea:	f044 0401 	orreq.w	r4, r4, #1
 80062ee:	b114      	cbz	r4, 80062f6 <ai_platform_get_weights_map+0x1e>
 80062f0:	2400      	movs	r4, #0
 80062f2:	4620      	mov	r0, r4
 80062f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062f6:	4616      	mov	r6, r2
 80062f8:	4b22      	ldr	r3, [pc, #136]	@ (8006384 <ai_platform_get_weights_map+0xac>)
 80062fa:	6812      	ldr	r2, [r2, #0]
 80062fc:	4605      	mov	r5, r0
 80062fe:	460f      	mov	r7, r1
 8006300:	429a      	cmp	r2, r3
 8006302:	d022      	beq.n	800634a <ai_platform_get_weights_map+0x72>
 8006304:	6870      	ldr	r0, [r6, #4]
 8006306:	2800      	cmp	r0, #0
 8006308:	d0f2      	beq.n	80062f0 <ai_platform_get_weights_map+0x18>
 800630a:	6806      	ldr	r6, [r0, #0]
 800630c:	429e      	cmp	r6, r3
 800630e:	d006      	beq.n	800631e <ai_platform_get_weights_map+0x46>
 8006310:	f1a1 0401 	sub.w	r4, r1, #1
 8006314:	6028      	str	r0, [r5, #0]
 8006316:	fab4 f484 	clz	r4, r4
 800631a:	0964      	lsrs	r4, r4, #5
 800631c:	e7e9      	b.n	80062f2 <ai_platform_get_weights_map+0x1a>
 800631e:	3d04      	subs	r5, #4
 8006320:	4602      	mov	r2, r0
 8006322:	4621      	mov	r1, r4
 8006324:	e000      	b.n	8006328 <ai_platform_get_weights_map+0x50>
 8006326:	4619      	mov	r1, r3
 8006328:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800632c:	42b3      	cmp	r3, r6
 800632e:	d025      	beq.n	800637c <ai_platform_get_weights_map+0xa4>
 8006330:	f845 3f04 	str.w	r3, [r5, #4]!
 8006334:	1c4b      	adds	r3, r1, #1
 8006336:	429f      	cmp	r7, r3
 8006338:	d8f5      	bhi.n	8006326 <ai_platform_get_weights_map+0x4e>
 800633a:	d1da      	bne.n	80062f2 <ai_platform_get_weights_map+0x1a>
 800633c:	3102      	adds	r1, #2
 800633e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8006342:	42b3      	cmp	r3, r6
 8006344:	d1d5      	bne.n	80062f2 <ai_platform_get_weights_map+0x1a>
 8006346:	2401      	movs	r4, #1
 8006348:	e7d3      	b.n	80062f2 <ai_platform_get_weights_map+0x1a>
 800634a:	1d30      	adds	r0, r6, #4
 800634c:	f7ff ffa6 	bl	800629c <ai_buffer_array_sane>
 8006350:	2800      	cmp	r0, #0
 8006352:	d0cd      	beq.n	80062f0 <ai_platform_get_weights_map+0x18>
 8006354:	88f3      	ldrh	r3, [r6, #6]
 8006356:	429f      	cmp	r7, r3
 8006358:	d1ca      	bne.n	80062f0 <ai_platform_get_weights_map+0x18>
 800635a:	3d04      	subs	r5, #4
 800635c:	4622      	mov	r2, r4
 800635e:	68b3      	ldr	r3, [r6, #8]
 8006360:	4423      	add	r3, r4
 8006362:	341c      	adds	r4, #28
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	b123      	cbz	r3, 8006372 <ai_platform_get_weights_map+0x9a>
 8006368:	3201      	adds	r2, #1
 800636a:	f845 3f04 	str.w	r3, [r5, #4]!
 800636e:	4297      	cmp	r7, r2
 8006370:	d8f5      	bhi.n	800635e <ai_platform_get_weights_map+0x86>
 8006372:	1abc      	subs	r4, r7, r2
 8006374:	fab4 f484 	clz	r4, r4
 8006378:	0964      	lsrs	r4, r4, #5
 800637a:	e7ba      	b.n	80062f2 <ai_platform_get_weights_map+0x1a>
 800637c:	428f      	cmp	r7, r1
 800637e:	d1b8      	bne.n	80062f2 <ai_platform_get_weights_map+0x1a>
 8006380:	e7e1      	b.n	8006346 <ai_platform_get_weights_map+0x6e>
 8006382:	bf00      	nop
 8006384:	a1facade 	.word	0xa1facade

08006388 <ai_platform_get_activations_map>:
 8006388:	2900      	cmp	r1, #0
 800638a:	bf18      	it	ne
 800638c:	2800      	cmpne	r0, #0
 800638e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006390:	bf0c      	ite	eq
 8006392:	2401      	moveq	r4, #1
 8006394:	2400      	movne	r4, #0
 8006396:	2a00      	cmp	r2, #0
 8006398:	bf08      	it	eq
 800639a:	f044 0401 	orreq.w	r4, r4, #1
 800639e:	b114      	cbz	r4, 80063a6 <ai_platform_get_activations_map+0x1e>
 80063a0:	2400      	movs	r4, #0
 80063a2:	4620      	mov	r0, r4
 80063a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063a6:	4616      	mov	r6, r2
 80063a8:	4b22      	ldr	r3, [pc, #136]	@ (8006434 <ai_platform_get_activations_map+0xac>)
 80063aa:	6812      	ldr	r2, [r2, #0]
 80063ac:	4605      	mov	r5, r0
 80063ae:	460f      	mov	r7, r1
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d022      	beq.n	80063fa <ai_platform_get_activations_map+0x72>
 80063b4:	6a30      	ldr	r0, [r6, #32]
 80063b6:	2800      	cmp	r0, #0
 80063b8:	d0f2      	beq.n	80063a0 <ai_platform_get_activations_map+0x18>
 80063ba:	6806      	ldr	r6, [r0, #0]
 80063bc:	429e      	cmp	r6, r3
 80063be:	d006      	beq.n	80063ce <ai_platform_get_activations_map+0x46>
 80063c0:	f1a1 0401 	sub.w	r4, r1, #1
 80063c4:	6028      	str	r0, [r5, #0]
 80063c6:	fab4 f484 	clz	r4, r4
 80063ca:	0964      	lsrs	r4, r4, #5
 80063cc:	e7e9      	b.n	80063a2 <ai_platform_get_activations_map+0x1a>
 80063ce:	3d04      	subs	r5, #4
 80063d0:	4602      	mov	r2, r0
 80063d2:	4621      	mov	r1, r4
 80063d4:	e000      	b.n	80063d8 <ai_platform_get_activations_map+0x50>
 80063d6:	4619      	mov	r1, r3
 80063d8:	f852 3f04 	ldr.w	r3, [r2, #4]!
 80063dc:	42b3      	cmp	r3, r6
 80063de:	d026      	beq.n	800642e <ai_platform_get_activations_map+0xa6>
 80063e0:	f845 3f04 	str.w	r3, [r5, #4]!
 80063e4:	1c4b      	adds	r3, r1, #1
 80063e6:	429f      	cmp	r7, r3
 80063e8:	d8f5      	bhi.n	80063d6 <ai_platform_get_activations_map+0x4e>
 80063ea:	d1da      	bne.n	80063a2 <ai_platform_get_activations_map+0x1a>
 80063ec:	3102      	adds	r1, #2
 80063ee:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 80063f2:	42b3      	cmp	r3, r6
 80063f4:	d1d5      	bne.n	80063a2 <ai_platform_get_activations_map+0x1a>
 80063f6:	2401      	movs	r4, #1
 80063f8:	e7d3      	b.n	80063a2 <ai_platform_get_activations_map+0x1a>
 80063fa:	f106 000c 	add.w	r0, r6, #12
 80063fe:	f7ff ff4d 	bl	800629c <ai_buffer_array_sane>
 8006402:	2800      	cmp	r0, #0
 8006404:	d0cc      	beq.n	80063a0 <ai_platform_get_activations_map+0x18>
 8006406:	89f3      	ldrh	r3, [r6, #14]
 8006408:	429f      	cmp	r7, r3
 800640a:	d1c9      	bne.n	80063a0 <ai_platform_get_activations_map+0x18>
 800640c:	3d04      	subs	r5, #4
 800640e:	4622      	mov	r2, r4
 8006410:	6933      	ldr	r3, [r6, #16]
 8006412:	4423      	add	r3, r4
 8006414:	341c      	adds	r4, #28
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	b123      	cbz	r3, 8006424 <ai_platform_get_activations_map+0x9c>
 800641a:	3201      	adds	r2, #1
 800641c:	f845 3f04 	str.w	r3, [r5, #4]!
 8006420:	4297      	cmp	r7, r2
 8006422:	d8f5      	bhi.n	8006410 <ai_platform_get_activations_map+0x88>
 8006424:	1abc      	subs	r4, r7, r2
 8006426:	fab4 f484 	clz	r4, r4
 800642a:	0964      	lsrs	r4, r4, #5
 800642c:	e7b9      	b.n	80063a2 <ai_platform_get_activations_map+0x1a>
 800642e:	428f      	cmp	r7, r1
 8006430:	d1b7      	bne.n	80063a2 <ai_platform_get_activations_map+0x1a>
 8006432:	e7e0      	b.n	80063f6 <ai_platform_get_activations_map+0x6e>
 8006434:	a1facade 	.word	0xa1facade

08006438 <ai_platform_bind_network_params>:
 8006438:	2a00      	cmp	r2, #0
 800643a:	bf18      	it	ne
 800643c:	2900      	cmpne	r1, #0
 800643e:	d010      	beq.n	8006462 <ai_platform_bind_network_params+0x2a>
 8006440:	b178      	cbz	r0, 8006462 <ai_platform_bind_network_params+0x2a>
 8006442:	4603      	mov	r3, r0
 8006444:	4808      	ldr	r0, [pc, #32]	@ (8006468 <ai_platform_bind_network_params+0x30>)
 8006446:	f103 0c0c 	add.w	ip, r3, #12
 800644a:	f843 0b04 	str.w	r0, [r3], #4
 800644e:	c903      	ldmia	r1, {r0, r1}
 8006450:	e883 0003 	stmia.w	r3, {r0, r1}
 8006454:	2301      	movs	r3, #1
 8006456:	e892 0003 	ldmia.w	r2, {r0, r1}
 800645a:	e88c 0003 	stmia.w	ip, {r0, r1}
 800645e:	4618      	mov	r0, r3
 8006460:	4770      	bx	lr
 8006462:	2300      	movs	r3, #0
 8006464:	4618      	mov	r0, r3
 8006466:	4770      	bx	lr
 8006468:	a1facade 	.word	0xa1facade

0800646c <ai_platform_network_get_error>:
 800646c:	b510      	push	{r4, lr}
 800646e:	2800      	cmp	r0, #0
 8006470:	d03f      	beq.n	80064f2 <ai_platform_network_get_error+0x86>
 8006472:	4b7d      	ldr	r3, [pc, #500]	@ (8006668 <ai_platform_network_get_error+0x1fc>)
 8006474:	4604      	mov	r4, r0
 8006476:	6802      	ldr	r2, [r0, #0]
 8006478:	429a      	cmp	r2, r3
 800647a:	d13a      	bne.n	80064f2 <ai_platform_network_get_error+0x86>
 800647c:	f7ff ff28 	bl	80062d0 <_ai_platform_acquire_crc>
 8006480:	4b7a      	ldr	r3, [pc, #488]	@ (800666c <ai_platform_network_get_error+0x200>)
 8006482:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800648c:	189a      	adds	r2, r3, r2
 800648e:	2a01      	cmp	r2, #1
 8006490:	f240 8086 	bls.w	80065a0 <ai_platform_network_get_error+0x134>
 8006494:	f240 4249 	movw	r2, #1097	@ 0x449
 8006498:	4293      	cmp	r3, r2
 800649a:	f000 8081 	beq.w	80065a0 <ai_platform_network_get_error+0x134>
 800649e:	4a74      	ldr	r2, [pc, #464]	@ (8006670 <ai_platform_network_get_error+0x204>)
 80064a0:	6813      	ldr	r3, [r2, #0]
 80064a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80064a6:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 80064aa:	f000 8087 	beq.w	80065bc <ai_platform_network_get_error+0x150>
 80064ae:	6813      	ldr	r3, [r2, #0]
 80064b0:	f240 4183 	movw	r1, #1155	@ 0x483
 80064b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80064b8:	428b      	cmp	r3, r1
 80064ba:	f000 80a9 	beq.w	8006610 <ai_platform_network_get_error+0x1a4>
 80064be:	6813      	ldr	r3, [r2, #0]
 80064c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80064c4:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 80064c8:	f000 80c0 	beq.w	800664c <ai_platform_network_get_error+0x1e0>
 80064cc:	6813      	ldr	r3, [r2, #0]
 80064ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f040 8082 	bne.w	80065dc <ai_platform_network_get_error+0x170>
 80064d8:	4a66      	ldr	r2, [pc, #408]	@ (8006674 <ai_platform_network_get_error+0x208>)
 80064da:	2301      	movs	r3, #1
 80064dc:	6093      	str	r3, [r2, #8]
 80064de:	6893      	ldr	r3, [r2, #8]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d1fc      	bne.n	80064de <ai_platform_network_get_error+0x72>
 80064e4:	4964      	ldr	r1, [pc, #400]	@ (8006678 <ai_platform_network_get_error+0x20c>)
 80064e6:	4b65      	ldr	r3, [pc, #404]	@ (800667c <ai_platform_network_get_error+0x210>)
 80064e8:	6011      	str	r1, [r2, #0]
 80064ea:	6812      	ldr	r2, [r2, #0]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d075      	beq.n	80065dc <ai_platform_network_get_error+0x170>
 80064f0:	e7fe      	b.n	80064f0 <ai_platform_network_get_error+0x84>
 80064f2:	f7ff feed 	bl	80062d0 <_ai_platform_acquire_crc>
 80064f6:	4b5d      	ldr	r3, [pc, #372]	@ (800666c <ai_platform_network_get_error+0x200>)
 80064f8:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006502:	185a      	adds	r2, r3, r1
 8006504:	2a01      	cmp	r2, #1
 8006506:	d929      	bls.n	800655c <ai_platform_network_get_error+0xf0>
 8006508:	f240 4249 	movw	r2, #1097	@ 0x449
 800650c:	4293      	cmp	r3, r2
 800650e:	d025      	beq.n	800655c <ai_platform_network_get_error+0xf0>
 8006510:	4a57      	ldr	r2, [pc, #348]	@ (8006670 <ai_platform_network_get_error+0x204>)
 8006512:	6813      	ldr	r3, [r2, #0]
 8006514:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006518:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 800651c:	d02b      	beq.n	8006576 <ai_platform_network_get_error+0x10a>
 800651e:	6813      	ldr	r3, [r2, #0]
 8006520:	f240 4183 	movw	r1, #1155	@ 0x483
 8006524:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006528:	428b      	cmp	r3, r1
 800652a:	d060      	beq.n	80065ee <ai_platform_network_get_error+0x182>
 800652c:	6813      	ldr	r3, [r2, #0]
 800652e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006532:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8006536:	d07c      	beq.n	8006632 <ai_platform_network_get_error+0x1c6>
 8006538:	6813      	ldr	r3, [r2, #0]
 800653a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800653e:	2b00      	cmp	r3, #0
 8006540:	d129      	bne.n	8006596 <ai_platform_network_get_error+0x12a>
 8006542:	4a4c      	ldr	r2, [pc, #304]	@ (8006674 <ai_platform_network_get_error+0x208>)
 8006544:	2301      	movs	r3, #1
 8006546:	6093      	str	r3, [r2, #8]
 8006548:	6893      	ldr	r3, [r2, #8]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1fc      	bne.n	8006548 <ai_platform_network_get_error+0xdc>
 800654e:	494a      	ldr	r1, [pc, #296]	@ (8006678 <ai_platform_network_get_error+0x20c>)
 8006550:	4b4a      	ldr	r3, [pc, #296]	@ (800667c <ai_platform_network_get_error+0x210>)
 8006552:	6011      	str	r1, [r2, #0]
 8006554:	6812      	ldr	r2, [r2, #0]
 8006556:	429a      	cmp	r2, r3
 8006558:	d01d      	beq.n	8006596 <ai_platform_network_get_error+0x12a>
 800655a:	e7fe      	b.n	800655a <ai_platform_network_get_error+0xee>
 800655c:	4a45      	ldr	r2, [pc, #276]	@ (8006674 <ai_platform_network_get_error+0x208>)
 800655e:	2301      	movs	r3, #1
 8006560:	6093      	str	r3, [r2, #8]
 8006562:	6893      	ldr	r3, [r2, #8]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1fc      	bne.n	8006562 <ai_platform_network_get_error+0xf6>
 8006568:	4943      	ldr	r1, [pc, #268]	@ (8006678 <ai_platform_network_get_error+0x20c>)
 800656a:	4b44      	ldr	r3, [pc, #272]	@ (800667c <ai_platform_network_get_error+0x210>)
 800656c:	6011      	str	r1, [r2, #0]
 800656e:	6812      	ldr	r2, [r2, #0]
 8006570:	429a      	cmp	r2, r3
 8006572:	d010      	beq.n	8006596 <ai_platform_network_get_error+0x12a>
 8006574:	e7fe      	b.n	8006574 <ai_platform_network_get_error+0x108>
 8006576:	4a42      	ldr	r2, [pc, #264]	@ (8006680 <ai_platform_network_get_error+0x214>)
 8006578:	2301      	movs	r3, #1
 800657a:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800657e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1fb      	bne.n	800657e <ai_platform_network_get_error+0x112>
 8006586:	493c      	ldr	r1, [pc, #240]	@ (8006678 <ai_platform_network_get_error+0x20c>)
 8006588:	4b3c      	ldr	r3, [pc, #240]	@ (800667c <ai_platform_network_get_error+0x210>)
 800658a:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 800658e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006592:	429a      	cmp	r2, r3
 8006594:	d111      	bne.n	80065ba <ai_platform_network_get_error+0x14e>
 8006596:	f7ff fe9d 	bl	80062d4 <_ai_platform_release_crc>
 800659a:	f241 0010 	movw	r0, #4112	@ 0x1010
 800659e:	bd10      	pop	{r4, pc}
 80065a0:	4a34      	ldr	r2, [pc, #208]	@ (8006674 <ai_platform_network_get_error+0x208>)
 80065a2:	2301      	movs	r3, #1
 80065a4:	6093      	str	r3, [r2, #8]
 80065a6:	6893      	ldr	r3, [r2, #8]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1fc      	bne.n	80065a6 <ai_platform_network_get_error+0x13a>
 80065ac:	4932      	ldr	r1, [pc, #200]	@ (8006678 <ai_platform_network_get_error+0x20c>)
 80065ae:	4b33      	ldr	r3, [pc, #204]	@ (800667c <ai_platform_network_get_error+0x210>)
 80065b0:	6011      	str	r1, [r2, #0]
 80065b2:	6812      	ldr	r2, [r2, #0]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d011      	beq.n	80065dc <ai_platform_network_get_error+0x170>
 80065b8:	e7fe      	b.n	80065b8 <ai_platform_network_get_error+0x14c>
 80065ba:	e7fe      	b.n	80065ba <ai_platform_network_get_error+0x14e>
 80065bc:	4a30      	ldr	r2, [pc, #192]	@ (8006680 <ai_platform_network_get_error+0x214>)
 80065be:	2301      	movs	r3, #1
 80065c0:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80065c4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d1fb      	bne.n	80065c4 <ai_platform_network_get_error+0x158>
 80065cc:	492a      	ldr	r1, [pc, #168]	@ (8006678 <ai_platform_network_get_error+0x20c>)
 80065ce:	4b2b      	ldr	r3, [pc, #172]	@ (800667c <ai_platform_network_get_error+0x210>)
 80065d0:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 80065d4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 80065d8:	429a      	cmp	r2, r3
 80065da:	d107      	bne.n	80065ec <ai_platform_network_get_error+0x180>
 80065dc:	f7ff fe7a 	bl	80062d4 <_ai_platform_release_crc>
 80065e0:	f104 0010 	add.w	r0, r4, #16
 80065e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065e8:	f001 bae4 	b.w	8007bb4 <core_get_error>
 80065ec:	e7fe      	b.n	80065ec <ai_platform_network_get_error+0x180>
 80065ee:	4a24      	ldr	r2, [pc, #144]	@ (8006680 <ai_platform_network_get_error+0x214>)
 80065f0:	2301      	movs	r3, #1
 80065f2:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80065f6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d1fb      	bne.n	80065f6 <ai_platform_network_get_error+0x18a>
 80065fe:	491e      	ldr	r1, [pc, #120]	@ (8006678 <ai_platform_network_get_error+0x20c>)
 8006600:	4b1e      	ldr	r3, [pc, #120]	@ (800667c <ai_platform_network_get_error+0x210>)
 8006602:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8006606:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800660a:	429a      	cmp	r2, r3
 800660c:	d0c3      	beq.n	8006596 <ai_platform_network_get_error+0x12a>
 800660e:	e7fe      	b.n	800660e <ai_platform_network_get_error+0x1a2>
 8006610:	4a1b      	ldr	r2, [pc, #108]	@ (8006680 <ai_platform_network_get_error+0x214>)
 8006612:	2301      	movs	r3, #1
 8006614:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006618:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800661c:	2b00      	cmp	r3, #0
 800661e:	d1fb      	bne.n	8006618 <ai_platform_network_get_error+0x1ac>
 8006620:	4915      	ldr	r1, [pc, #84]	@ (8006678 <ai_platform_network_get_error+0x20c>)
 8006622:	4b16      	ldr	r3, [pc, #88]	@ (800667c <ai_platform_network_get_error+0x210>)
 8006624:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8006628:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800662c:	429a      	cmp	r2, r3
 800662e:	d0d5      	beq.n	80065dc <ai_platform_network_get_error+0x170>
 8006630:	e7fe      	b.n	8006630 <ai_platform_network_get_error+0x1c4>
 8006632:	4a10      	ldr	r2, [pc, #64]	@ (8006674 <ai_platform_network_get_error+0x208>)
 8006634:	2301      	movs	r3, #1
 8006636:	6093      	str	r3, [r2, #8]
 8006638:	6893      	ldr	r3, [r2, #8]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d1fc      	bne.n	8006638 <ai_platform_network_get_error+0x1cc>
 800663e:	490e      	ldr	r1, [pc, #56]	@ (8006678 <ai_platform_network_get_error+0x20c>)
 8006640:	4b0e      	ldr	r3, [pc, #56]	@ (800667c <ai_platform_network_get_error+0x210>)
 8006642:	6011      	str	r1, [r2, #0]
 8006644:	6812      	ldr	r2, [r2, #0]
 8006646:	429a      	cmp	r2, r3
 8006648:	d0a5      	beq.n	8006596 <ai_platform_network_get_error+0x12a>
 800664a:	e7fe      	b.n	800664a <ai_platform_network_get_error+0x1de>
 800664c:	4a09      	ldr	r2, [pc, #36]	@ (8006674 <ai_platform_network_get_error+0x208>)
 800664e:	2301      	movs	r3, #1
 8006650:	6093      	str	r3, [r2, #8]
 8006652:	6893      	ldr	r3, [r2, #8]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1fc      	bne.n	8006652 <ai_platform_network_get_error+0x1e6>
 8006658:	4907      	ldr	r1, [pc, #28]	@ (8006678 <ai_platform_network_get_error+0x20c>)
 800665a:	4b08      	ldr	r3, [pc, #32]	@ (800667c <ai_platform_network_get_error+0x210>)
 800665c:	6011      	str	r1, [r2, #0]
 800665e:	6812      	ldr	r2, [r2, #0]
 8006660:	429a      	cmp	r2, r3
 8006662:	d0bb      	beq.n	80065dc <ai_platform_network_get_error+0x170>
 8006664:	e7fe      	b.n	8006664 <ai_platform_network_get_error+0x1f8>
 8006666:	bf00      	nop
 8006668:	a1c00100 	.word	0xa1c00100
 800666c:	e0042000 	.word	0xe0042000
 8006670:	5c001000 	.word	0x5c001000
 8006674:	40023000 	.word	0x40023000
 8006678:	f407a5c2 	.word	0xf407a5c2
 800667c:	b5e8b5cd 	.word	0xb5e8b5cd
 8006680:	58024000 	.word	0x58024000

08006684 <ai_platform_network_set_error>:
 8006684:	b110      	cbz	r0, 800668c <ai_platform_network_set_error+0x8>
 8006686:	3010      	adds	r0, #16
 8006688:	f001 ba9a 	b.w	8007bc0 <core_set_error>
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop

08006690 <ai_platform_inputs_get>:
 8006690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006694:	b085      	sub	sp, #20
 8006696:	9102      	str	r1, [sp, #8]
 8006698:	2800      	cmp	r0, #0
 800669a:	f000 8093 	beq.w	80067c4 <ai_platform_inputs_get+0x134>
 800669e:	4baa      	ldr	r3, [pc, #680]	@ (8006948 <ai_platform_inputs_get+0x2b8>)
 80066a0:	4681      	mov	r9, r0
 80066a2:	6802      	ldr	r2, [r0, #0]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	f040 808d 	bne.w	80067c4 <ai_platform_inputs_get+0x134>
 80066aa:	f7ff fe11 	bl	80062d0 <_ai_platform_acquire_crc>
 80066ae:	4ba7      	ldr	r3, [pc, #668]	@ (800694c <ai_platform_inputs_get+0x2bc>)
 80066b0:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066ba:	189a      	adds	r2, r3, r2
 80066bc:	2a01      	cmp	r2, #1
 80066be:	f240 80da 	bls.w	8006876 <ai_platform_inputs_get+0x1e6>
 80066c2:	f240 4249 	movw	r2, #1097	@ 0x449
 80066c6:	4293      	cmp	r3, r2
 80066c8:	f000 80d5 	beq.w	8006876 <ai_platform_inputs_get+0x1e6>
 80066cc:	4aa0      	ldr	r2, [pc, #640]	@ (8006950 <ai_platform_inputs_get+0x2c0>)
 80066ce:	6813      	ldr	r3, [r2, #0]
 80066d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066d4:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 80066d8:	f000 80dc 	beq.w	8006894 <ai_platform_inputs_get+0x204>
 80066dc:	6813      	ldr	r3, [r2, #0]
 80066de:	f240 4183 	movw	r1, #1155	@ 0x483
 80066e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066e6:	428b      	cmp	r3, r1
 80066e8:	f000 810e 	beq.w	8006908 <ai_platform_inputs_get+0x278>
 80066ec:	6813      	ldr	r3, [r2, #0]
 80066ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066f2:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 80066f6:	f000 8143 	beq.w	8006980 <ai_platform_inputs_get+0x2f0>
 80066fa:	6813      	ldr	r3, [r2, #0]
 80066fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006700:	2b00      	cmp	r3, #0
 8006702:	f000 8113 	beq.w	800692c <ai_platform_inputs_get+0x29c>
 8006706:	f7ff fde5 	bl	80062d4 <_ai_platform_release_crc>
 800670a:	f8b9 302c 	ldrh.w	r3, [r9, #44]	@ 0x2c
 800670e:	2b00      	cmp	r3, #0
 8006710:	f000 80d2 	beq.w	80068b8 <ai_platform_inputs_get+0x228>
 8006714:	f8d9 a030 	ldr.w	sl, [r9, #48]	@ 0x30
 8006718:	f1ba 0f00 	cmp.w	sl, #0
 800671c:	f000 80cc 	beq.w	80068b8 <ai_platform_inputs_get+0x228>
 8006720:	2100      	movs	r1, #0
 8006722:	f8cd 900c 	str.w	r9, [sp, #12]
 8006726:	460d      	mov	r5, r1
 8006728:	4689      	mov	r9, r1
 800672a:	e016      	b.n	800675a <ai_platform_inputs_get+0xca>
 800672c:	9a01      	ldr	r2, [sp, #4]
 800672e:	2301      	movs	r3, #1
 8006730:	f848 3002 	str.w	r3, [r8, r2]
 8006734:	69b2      	ldr	r2, [r6, #24]
 8006736:	f04f 0301 	mov.w	r3, #1
 800673a:	6856      	ldr	r6, [r2, #4]
 800673c:	3501      	adds	r5, #1
 800673e:	f109 091c 	add.w	r9, r9, #28
 8006742:	7523      	strb	r3, [r4, #20]
 8006744:	2300      	movs	r3, #0
 8006746:	6962      	ldr	r2, [r4, #20]
 8006748:	60a7      	str	r7, [r4, #8]
 800674a:	f36b 221f 	bfi	r2, fp, #8, #24
 800674e:	6126      	str	r6, [r4, #16]
 8006750:	61a1      	str	r1, [r4, #24]
 8006752:	60e3      	str	r3, [r4, #12]
 8006754:	6162      	str	r2, [r4, #20]
 8006756:	e9c4 0c00 	strd	r0, ip, [r4]
 800675a:	f8ba 3000 	ldrh.w	r3, [sl]
 800675e:	b2ac      	uxth	r4, r5
 8006760:	42ab      	cmp	r3, r5
 8006762:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 8006766:	9301      	str	r3, [sp, #4]
 8006768:	f240 80b5 	bls.w	80068d6 <ai_platform_inputs_get+0x246>
 800676c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006770:	2b00      	cmp	r3, #0
 8006772:	f000 80b0 	beq.w	80068d6 <ai_platform_inputs_get+0x246>
 8006776:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800677a:	2e00      	cmp	r6, #0
 800677c:	f000 80ab 	beq.w	80068d6 <ai_platform_inputs_get+0x246>
 8006780:	f8da 3008 	ldr.w	r3, [sl, #8]
 8006784:	69b2      	ldr	r2, [r6, #24]
 8006786:	68f1      	ldr	r1, [r6, #12]
 8006788:	6810      	ldr	r0, [r2, #0]
 800678a:	9100      	str	r1, [sp, #0]
 800678c:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 8006790:	68b3      	ldr	r3, [r6, #8]
 8006792:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8006796:	444c      	add	r4, r9
 8006798:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800679c:	f005 f918 	bl	800b9d0 <ai_array_to_buffer_fmt>
 80067a0:	69b2      	ldr	r2, [r6, #24]
 80067a2:	9900      	ldr	r1, [sp, #0]
 80067a4:	f8d2 c008 	ldr.w	ip, [r2, #8]
 80067a8:	2f00      	cmp	r7, #0
 80067aa:	d0c4      	beq.n	8006736 <ai_platform_inputs_get+0xa6>
 80067ac:	2200      	movs	r2, #0
 80067ae:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 80067b2:	6832      	ldr	r2, [r6, #0]
 80067b4:	607a      	str	r2, [r7, #4]
 80067b6:	b112      	cbz	r2, 80067be <ai_platform_inputs_get+0x12e>
 80067b8:	8852      	ldrh	r2, [r2, #2]
 80067ba:	2a00      	cmp	r2, #0
 80067bc:	d1b6      	bne.n	800672c <ai_platform_inputs_get+0x9c>
 80067be:	69b2      	ldr	r2, [r6, #24]
 80067c0:	2700      	movs	r7, #0
 80067c2:	e7b8      	b.n	8006736 <ai_platform_inputs_get+0xa6>
 80067c4:	f7ff fd84 	bl	80062d0 <_ai_platform_acquire_crc>
 80067c8:	4b60      	ldr	r3, [pc, #384]	@ (800694c <ai_platform_inputs_get+0x2bc>)
 80067ca:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80067d4:	185a      	adds	r2, r3, r1
 80067d6:	2a01      	cmp	r2, #1
 80067d8:	d92a      	bls.n	8006830 <ai_platform_inputs_get+0x1a0>
 80067da:	f240 4249 	movw	r2, #1097	@ 0x449
 80067de:	4293      	cmp	r3, r2
 80067e0:	d026      	beq.n	8006830 <ai_platform_inputs_get+0x1a0>
 80067e2:	4a5b      	ldr	r2, [pc, #364]	@ (8006950 <ai_platform_inputs_get+0x2c0>)
 80067e4:	6813      	ldr	r3, [r2, #0]
 80067e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80067ea:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 80067ee:	d02c      	beq.n	800684a <ai_platform_inputs_get+0x1ba>
 80067f0:	6813      	ldr	r3, [r2, #0]
 80067f2:	f240 4183 	movw	r1, #1155	@ 0x483
 80067f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80067fa:	428b      	cmp	r3, r1
 80067fc:	d073      	beq.n	80068e6 <ai_platform_inputs_get+0x256>
 80067fe:	6813      	ldr	r3, [r2, #0]
 8006800:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006804:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8006808:	f000 80ac 	beq.w	8006964 <ai_platform_inputs_get+0x2d4>
 800680c:	6813      	ldr	r3, [r2, #0]
 800680e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006812:	2b00      	cmp	r3, #0
 8006814:	d129      	bne.n	800686a <ai_platform_inputs_get+0x1da>
 8006816:	4a4f      	ldr	r2, [pc, #316]	@ (8006954 <ai_platform_inputs_get+0x2c4>)
 8006818:	2301      	movs	r3, #1
 800681a:	6093      	str	r3, [r2, #8]
 800681c:	6893      	ldr	r3, [r2, #8]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1fc      	bne.n	800681c <ai_platform_inputs_get+0x18c>
 8006822:	494d      	ldr	r1, [pc, #308]	@ (8006958 <ai_platform_inputs_get+0x2c8>)
 8006824:	4b4d      	ldr	r3, [pc, #308]	@ (800695c <ai_platform_inputs_get+0x2cc>)
 8006826:	6011      	str	r1, [r2, #0]
 8006828:	6812      	ldr	r2, [r2, #0]
 800682a:	429a      	cmp	r2, r3
 800682c:	d01d      	beq.n	800686a <ai_platform_inputs_get+0x1da>
 800682e:	e7fe      	b.n	800682e <ai_platform_inputs_get+0x19e>
 8006830:	4a48      	ldr	r2, [pc, #288]	@ (8006954 <ai_platform_inputs_get+0x2c4>)
 8006832:	2301      	movs	r3, #1
 8006834:	6093      	str	r3, [r2, #8]
 8006836:	6893      	ldr	r3, [r2, #8]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d1fc      	bne.n	8006836 <ai_platform_inputs_get+0x1a6>
 800683c:	4946      	ldr	r1, [pc, #280]	@ (8006958 <ai_platform_inputs_get+0x2c8>)
 800683e:	4b47      	ldr	r3, [pc, #284]	@ (800695c <ai_platform_inputs_get+0x2cc>)
 8006840:	6011      	str	r1, [r2, #0]
 8006842:	6812      	ldr	r2, [r2, #0]
 8006844:	429a      	cmp	r2, r3
 8006846:	d010      	beq.n	800686a <ai_platform_inputs_get+0x1da>
 8006848:	e7fe      	b.n	8006848 <ai_platform_inputs_get+0x1b8>
 800684a:	4a45      	ldr	r2, [pc, #276]	@ (8006960 <ai_platform_inputs_get+0x2d0>)
 800684c:	2301      	movs	r3, #1
 800684e:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006852:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006856:	2b00      	cmp	r3, #0
 8006858:	d1fb      	bne.n	8006852 <ai_platform_inputs_get+0x1c2>
 800685a:	493f      	ldr	r1, [pc, #252]	@ (8006958 <ai_platform_inputs_get+0x2c8>)
 800685c:	4b3f      	ldr	r3, [pc, #252]	@ (800695c <ai_platform_inputs_get+0x2cc>)
 800685e:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8006862:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006866:	429a      	cmp	r2, r3
 8006868:	d113      	bne.n	8006892 <ai_platform_inputs_get+0x202>
 800686a:	f7ff fd33 	bl	80062d4 <_ai_platform_release_crc>
 800686e:	2000      	movs	r0, #0
 8006870:	b005      	add	sp, #20
 8006872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006876:	4a37      	ldr	r2, [pc, #220]	@ (8006954 <ai_platform_inputs_get+0x2c4>)
 8006878:	2301      	movs	r3, #1
 800687a:	6093      	str	r3, [r2, #8]
 800687c:	6893      	ldr	r3, [r2, #8]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1fc      	bne.n	800687c <ai_platform_inputs_get+0x1ec>
 8006882:	4b35      	ldr	r3, [pc, #212]	@ (8006958 <ai_platform_inputs_get+0x2c8>)
 8006884:	6013      	str	r3, [r2, #0]
 8006886:	4b35      	ldr	r3, [pc, #212]	@ (800695c <ai_platform_inputs_get+0x2cc>)
 8006888:	6812      	ldr	r2, [r2, #0]
 800688a:	429a      	cmp	r2, r3
 800688c:	f43f af3b 	beq.w	8006706 <ai_platform_inputs_get+0x76>
 8006890:	e7fe      	b.n	8006890 <ai_platform_inputs_get+0x200>
 8006892:	e7fe      	b.n	8006892 <ai_platform_inputs_get+0x202>
 8006894:	4a32      	ldr	r2, [pc, #200]	@ (8006960 <ai_platform_inputs_get+0x2d0>)
 8006896:	2301      	movs	r3, #1
 8006898:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800689c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d1fb      	bne.n	800689c <ai_platform_inputs_get+0x20c>
 80068a4:	4b2c      	ldr	r3, [pc, #176]	@ (8006958 <ai_platform_inputs_get+0x2c8>)
 80068a6:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 80068aa:	4b2c      	ldr	r3, [pc, #176]	@ (800695c <ai_platform_inputs_get+0x2cc>)
 80068ac:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 80068b0:	429a      	cmp	r2, r3
 80068b2:	f43f af28 	beq.w	8006706 <ai_platform_inputs_get+0x76>
 80068b6:	e7fe      	b.n	80068b6 <ai_platform_inputs_get+0x226>
 80068b8:	2400      	movs	r4, #0
 80068ba:	2218      	movs	r2, #24
 80068bc:	2111      	movs	r1, #17
 80068be:	f109 0010 	add.w	r0, r9, #16
 80068c2:	f001 f97d 	bl	8007bc0 <core_set_error>
 80068c6:	4620      	mov	r0, r4
 80068c8:	9b02      	ldr	r3, [sp, #8]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d0d0      	beq.n	8006870 <ai_platform_inputs_get+0x1e0>
 80068ce:	801c      	strh	r4, [r3, #0]
 80068d0:	b005      	add	sp, #20
 80068d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068d6:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80068da:	2c00      	cmp	r4, #0
 80068dc:	d0ec      	beq.n	80068b8 <ai_platform_inputs_get+0x228>
 80068de:	f8da 3008 	ldr.w	r3, [sl, #8]
 80068e2:	6858      	ldr	r0, [r3, #4]
 80068e4:	e7f0      	b.n	80068c8 <ai_platform_inputs_get+0x238>
 80068e6:	4a1e      	ldr	r2, [pc, #120]	@ (8006960 <ai_platform_inputs_get+0x2d0>)
 80068e8:	2301      	movs	r3, #1
 80068ea:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80068ee:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d1fb      	bne.n	80068ee <ai_platform_inputs_get+0x25e>
 80068f6:	4918      	ldr	r1, [pc, #96]	@ (8006958 <ai_platform_inputs_get+0x2c8>)
 80068f8:	4b18      	ldr	r3, [pc, #96]	@ (800695c <ai_platform_inputs_get+0x2cc>)
 80068fa:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 80068fe:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006902:	429a      	cmp	r2, r3
 8006904:	d0b1      	beq.n	800686a <ai_platform_inputs_get+0x1da>
 8006906:	e7fe      	b.n	8006906 <ai_platform_inputs_get+0x276>
 8006908:	4a15      	ldr	r2, [pc, #84]	@ (8006960 <ai_platform_inputs_get+0x2d0>)
 800690a:	2301      	movs	r3, #1
 800690c:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006910:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006914:	2b00      	cmp	r3, #0
 8006916:	d1fb      	bne.n	8006910 <ai_platform_inputs_get+0x280>
 8006918:	4b0f      	ldr	r3, [pc, #60]	@ (8006958 <ai_platform_inputs_get+0x2c8>)
 800691a:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 800691e:	4b0f      	ldr	r3, [pc, #60]	@ (800695c <ai_platform_inputs_get+0x2cc>)
 8006920:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006924:	429a      	cmp	r2, r3
 8006926:	f43f aeee 	beq.w	8006706 <ai_platform_inputs_get+0x76>
 800692a:	e7fe      	b.n	800692a <ai_platform_inputs_get+0x29a>
 800692c:	4a09      	ldr	r2, [pc, #36]	@ (8006954 <ai_platform_inputs_get+0x2c4>)
 800692e:	2301      	movs	r3, #1
 8006930:	6093      	str	r3, [r2, #8]
 8006932:	6893      	ldr	r3, [r2, #8]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d1fc      	bne.n	8006932 <ai_platform_inputs_get+0x2a2>
 8006938:	4b07      	ldr	r3, [pc, #28]	@ (8006958 <ai_platform_inputs_get+0x2c8>)
 800693a:	6013      	str	r3, [r2, #0]
 800693c:	4b07      	ldr	r3, [pc, #28]	@ (800695c <ai_platform_inputs_get+0x2cc>)
 800693e:	6812      	ldr	r2, [r2, #0]
 8006940:	429a      	cmp	r2, r3
 8006942:	f43f aee0 	beq.w	8006706 <ai_platform_inputs_get+0x76>
 8006946:	e7fe      	b.n	8006946 <ai_platform_inputs_get+0x2b6>
 8006948:	a1c00100 	.word	0xa1c00100
 800694c:	e0042000 	.word	0xe0042000
 8006950:	5c001000 	.word	0x5c001000
 8006954:	40023000 	.word	0x40023000
 8006958:	f407a5c2 	.word	0xf407a5c2
 800695c:	b5e8b5cd 	.word	0xb5e8b5cd
 8006960:	58024000 	.word	0x58024000
 8006964:	4a0d      	ldr	r2, [pc, #52]	@ (800699c <ai_platform_inputs_get+0x30c>)
 8006966:	2301      	movs	r3, #1
 8006968:	6093      	str	r3, [r2, #8]
 800696a:	6893      	ldr	r3, [r2, #8]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d1fc      	bne.n	800696a <ai_platform_inputs_get+0x2da>
 8006970:	490b      	ldr	r1, [pc, #44]	@ (80069a0 <ai_platform_inputs_get+0x310>)
 8006972:	4b0c      	ldr	r3, [pc, #48]	@ (80069a4 <ai_platform_inputs_get+0x314>)
 8006974:	6011      	str	r1, [r2, #0]
 8006976:	6812      	ldr	r2, [r2, #0]
 8006978:	429a      	cmp	r2, r3
 800697a:	f43f af76 	beq.w	800686a <ai_platform_inputs_get+0x1da>
 800697e:	e7fe      	b.n	800697e <ai_platform_inputs_get+0x2ee>
 8006980:	4a06      	ldr	r2, [pc, #24]	@ (800699c <ai_platform_inputs_get+0x30c>)
 8006982:	2301      	movs	r3, #1
 8006984:	6093      	str	r3, [r2, #8]
 8006986:	6893      	ldr	r3, [r2, #8]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d1fc      	bne.n	8006986 <ai_platform_inputs_get+0x2f6>
 800698c:	4b04      	ldr	r3, [pc, #16]	@ (80069a0 <ai_platform_inputs_get+0x310>)
 800698e:	6013      	str	r3, [r2, #0]
 8006990:	4b04      	ldr	r3, [pc, #16]	@ (80069a4 <ai_platform_inputs_get+0x314>)
 8006992:	6812      	ldr	r2, [r2, #0]
 8006994:	429a      	cmp	r2, r3
 8006996:	f43f aeb6 	beq.w	8006706 <ai_platform_inputs_get+0x76>
 800699a:	e7fe      	b.n	800699a <ai_platform_inputs_get+0x30a>
 800699c:	40023000 	.word	0x40023000
 80069a0:	f407a5c2 	.word	0xf407a5c2
 80069a4:	b5e8b5cd 	.word	0xb5e8b5cd

080069a8 <ai_platform_outputs_get>:
 80069a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ac:	b085      	sub	sp, #20
 80069ae:	9102      	str	r1, [sp, #8]
 80069b0:	2800      	cmp	r0, #0
 80069b2:	f000 808f 	beq.w	8006ad4 <ai_platform_outputs_get+0x12c>
 80069b6:	4ba8      	ldr	r3, [pc, #672]	@ (8006c58 <ai_platform_outputs_get+0x2b0>)
 80069b8:	4681      	mov	r9, r0
 80069ba:	6802      	ldr	r2, [r0, #0]
 80069bc:	429a      	cmp	r2, r3
 80069be:	f040 8089 	bne.w	8006ad4 <ai_platform_outputs_get+0x12c>
 80069c2:	f7ff fc85 	bl	80062d0 <_ai_platform_acquire_crc>
 80069c6:	4ba5      	ldr	r3, [pc, #660]	@ (8006c5c <ai_platform_outputs_get+0x2b4>)
 80069c8:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80069d2:	189a      	adds	r2, r3, r2
 80069d4:	2a01      	cmp	r2, #1
 80069d6:	f240 80d6 	bls.w	8006b86 <ai_platform_outputs_get+0x1de>
 80069da:	f240 4249 	movw	r2, #1097	@ 0x449
 80069de:	4293      	cmp	r3, r2
 80069e0:	f000 80d1 	beq.w	8006b86 <ai_platform_outputs_get+0x1de>
 80069e4:	4a9e      	ldr	r2, [pc, #632]	@ (8006c60 <ai_platform_outputs_get+0x2b8>)
 80069e6:	6813      	ldr	r3, [r2, #0]
 80069e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80069ec:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 80069f0:	f000 80d8 	beq.w	8006ba4 <ai_platform_outputs_get+0x1fc>
 80069f4:	6813      	ldr	r3, [r2, #0]
 80069f6:	f240 4183 	movw	r1, #1155	@ 0x483
 80069fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80069fe:	428b      	cmp	r3, r1
 8006a00:	f000 8109 	beq.w	8006c16 <ai_platform_outputs_get+0x26e>
 8006a04:	6813      	ldr	r3, [r2, #0]
 8006a06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a0a:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8006a0e:	f000 813f 	beq.w	8006c90 <ai_platform_outputs_get+0x2e8>
 8006a12:	6813      	ldr	r3, [r2, #0]
 8006a14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	f000 810e 	beq.w	8006c3a <ai_platform_outputs_get+0x292>
 8006a1e:	f7ff fc59 	bl	80062d4 <_ai_platform_release_crc>
 8006a22:	f8b9 302c 	ldrh.w	r3, [r9, #44]	@ 0x2c
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	f240 80db 	bls.w	8006be2 <ai_platform_outputs_get+0x23a>
 8006a2c:	2100      	movs	r1, #0
 8006a2e:	f8d9 a030 	ldr.w	sl, [r9, #48]	@ 0x30
 8006a32:	f8cd 900c 	str.w	r9, [sp, #12]
 8006a36:	460d      	mov	r5, r1
 8006a38:	4689      	mov	r9, r1
 8006a3a:	e016      	b.n	8006a6a <ai_platform_outputs_get+0xc2>
 8006a3c:	9a01      	ldr	r2, [sp, #4]
 8006a3e:	2301      	movs	r3, #1
 8006a40:	f848 3002 	str.w	r3, [r8, r2]
 8006a44:	69b2      	ldr	r2, [r6, #24]
 8006a46:	f04f 0301 	mov.w	r3, #1
 8006a4a:	6856      	ldr	r6, [r2, #4]
 8006a4c:	3501      	adds	r5, #1
 8006a4e:	f109 091c 	add.w	r9, r9, #28
 8006a52:	7523      	strb	r3, [r4, #20]
 8006a54:	2300      	movs	r3, #0
 8006a56:	6962      	ldr	r2, [r4, #20]
 8006a58:	60a7      	str	r7, [r4, #8]
 8006a5a:	f36b 221f 	bfi	r2, fp, #8, #24
 8006a5e:	6126      	str	r6, [r4, #16]
 8006a60:	61a1      	str	r1, [r4, #24]
 8006a62:	60e3      	str	r3, [r4, #12]
 8006a64:	6162      	str	r2, [r4, #20]
 8006a66:	e9c4 0c00 	strd	r0, ip, [r4]
 8006a6a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8006a6e:	b2ac      	uxth	r4, r5
 8006a70:	42ab      	cmp	r3, r5
 8006a72:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 8006a76:	9301      	str	r3, [sp, #4]
 8006a78:	f240 80a6 	bls.w	8006bc8 <ai_platform_outputs_get+0x220>
 8006a7c:	f8da 3010 	ldr.w	r3, [sl, #16]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f000 80a1 	beq.w	8006bc8 <ai_platform_outputs_get+0x220>
 8006a86:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8006a8a:	2e00      	cmp	r6, #0
 8006a8c:	f000 809c 	beq.w	8006bc8 <ai_platform_outputs_get+0x220>
 8006a90:	f8da 3014 	ldr.w	r3, [sl, #20]
 8006a94:	69b2      	ldr	r2, [r6, #24]
 8006a96:	68f1      	ldr	r1, [r6, #12]
 8006a98:	6810      	ldr	r0, [r2, #0]
 8006a9a:	9100      	str	r1, [sp, #0]
 8006a9c:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 8006aa0:	68b3      	ldr	r3, [r6, #8]
 8006aa2:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8006aa6:	444c      	add	r4, r9
 8006aa8:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 8006aac:	f004 ff90 	bl	800b9d0 <ai_array_to_buffer_fmt>
 8006ab0:	69b2      	ldr	r2, [r6, #24]
 8006ab2:	9900      	ldr	r1, [sp, #0]
 8006ab4:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8006ab8:	2f00      	cmp	r7, #0
 8006aba:	d0c4      	beq.n	8006a46 <ai_platform_outputs_get+0x9e>
 8006abc:	2200      	movs	r2, #0
 8006abe:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 8006ac2:	6832      	ldr	r2, [r6, #0]
 8006ac4:	607a      	str	r2, [r7, #4]
 8006ac6:	b112      	cbz	r2, 8006ace <ai_platform_outputs_get+0x126>
 8006ac8:	8852      	ldrh	r2, [r2, #2]
 8006aca:	2a00      	cmp	r2, #0
 8006acc:	d1b6      	bne.n	8006a3c <ai_platform_outputs_get+0x94>
 8006ace:	69b2      	ldr	r2, [r6, #24]
 8006ad0:	2700      	movs	r7, #0
 8006ad2:	e7b8      	b.n	8006a46 <ai_platform_outputs_get+0x9e>
 8006ad4:	f7ff fbfc 	bl	80062d0 <_ai_platform_acquire_crc>
 8006ad8:	4b60      	ldr	r3, [pc, #384]	@ (8006c5c <ai_platform_outputs_get+0x2b4>)
 8006ada:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ae4:	185a      	adds	r2, r3, r1
 8006ae6:	2a01      	cmp	r2, #1
 8006ae8:	d92a      	bls.n	8006b40 <ai_platform_outputs_get+0x198>
 8006aea:	f240 4249 	movw	r2, #1097	@ 0x449
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d026      	beq.n	8006b40 <ai_platform_outputs_get+0x198>
 8006af2:	4a5b      	ldr	r2, [pc, #364]	@ (8006c60 <ai_platform_outputs_get+0x2b8>)
 8006af4:	6813      	ldr	r3, [r2, #0]
 8006af6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006afa:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8006afe:	d02c      	beq.n	8006b5a <ai_platform_outputs_get+0x1b2>
 8006b00:	6813      	ldr	r3, [r2, #0]
 8006b02:	f240 4183 	movw	r1, #1155	@ 0x483
 8006b06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b0a:	428b      	cmp	r3, r1
 8006b0c:	d072      	beq.n	8006bf4 <ai_platform_outputs_get+0x24c>
 8006b0e:	6813      	ldr	r3, [r2, #0]
 8006b10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b14:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8006b18:	f000 80ac 	beq.w	8006c74 <ai_platform_outputs_get+0x2cc>
 8006b1c:	6813      	ldr	r3, [r2, #0]
 8006b1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d129      	bne.n	8006b7a <ai_platform_outputs_get+0x1d2>
 8006b26:	4a4f      	ldr	r2, [pc, #316]	@ (8006c64 <ai_platform_outputs_get+0x2bc>)
 8006b28:	2301      	movs	r3, #1
 8006b2a:	6093      	str	r3, [r2, #8]
 8006b2c:	6893      	ldr	r3, [r2, #8]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d1fc      	bne.n	8006b2c <ai_platform_outputs_get+0x184>
 8006b32:	494d      	ldr	r1, [pc, #308]	@ (8006c68 <ai_platform_outputs_get+0x2c0>)
 8006b34:	4b4d      	ldr	r3, [pc, #308]	@ (8006c6c <ai_platform_outputs_get+0x2c4>)
 8006b36:	6011      	str	r1, [r2, #0]
 8006b38:	6812      	ldr	r2, [r2, #0]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d01d      	beq.n	8006b7a <ai_platform_outputs_get+0x1d2>
 8006b3e:	e7fe      	b.n	8006b3e <ai_platform_outputs_get+0x196>
 8006b40:	4a48      	ldr	r2, [pc, #288]	@ (8006c64 <ai_platform_outputs_get+0x2bc>)
 8006b42:	2301      	movs	r3, #1
 8006b44:	6093      	str	r3, [r2, #8]
 8006b46:	6893      	ldr	r3, [r2, #8]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1fc      	bne.n	8006b46 <ai_platform_outputs_get+0x19e>
 8006b4c:	4946      	ldr	r1, [pc, #280]	@ (8006c68 <ai_platform_outputs_get+0x2c0>)
 8006b4e:	4b47      	ldr	r3, [pc, #284]	@ (8006c6c <ai_platform_outputs_get+0x2c4>)
 8006b50:	6011      	str	r1, [r2, #0]
 8006b52:	6812      	ldr	r2, [r2, #0]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d010      	beq.n	8006b7a <ai_platform_outputs_get+0x1d2>
 8006b58:	e7fe      	b.n	8006b58 <ai_platform_outputs_get+0x1b0>
 8006b5a:	4a45      	ldr	r2, [pc, #276]	@ (8006c70 <ai_platform_outputs_get+0x2c8>)
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006b62:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d1fb      	bne.n	8006b62 <ai_platform_outputs_get+0x1ba>
 8006b6a:	493f      	ldr	r1, [pc, #252]	@ (8006c68 <ai_platform_outputs_get+0x2c0>)
 8006b6c:	4b3f      	ldr	r3, [pc, #252]	@ (8006c6c <ai_platform_outputs_get+0x2c4>)
 8006b6e:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8006b72:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d113      	bne.n	8006ba2 <ai_platform_outputs_get+0x1fa>
 8006b7a:	f7ff fbab 	bl	80062d4 <_ai_platform_release_crc>
 8006b7e:	2000      	movs	r0, #0
 8006b80:	b005      	add	sp, #20
 8006b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b86:	4a37      	ldr	r2, [pc, #220]	@ (8006c64 <ai_platform_outputs_get+0x2bc>)
 8006b88:	2301      	movs	r3, #1
 8006b8a:	6093      	str	r3, [r2, #8]
 8006b8c:	6893      	ldr	r3, [r2, #8]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1fc      	bne.n	8006b8c <ai_platform_outputs_get+0x1e4>
 8006b92:	4b35      	ldr	r3, [pc, #212]	@ (8006c68 <ai_platform_outputs_get+0x2c0>)
 8006b94:	6013      	str	r3, [r2, #0]
 8006b96:	4b35      	ldr	r3, [pc, #212]	@ (8006c6c <ai_platform_outputs_get+0x2c4>)
 8006b98:	6812      	ldr	r2, [r2, #0]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	f43f af3f 	beq.w	8006a1e <ai_platform_outputs_get+0x76>
 8006ba0:	e7fe      	b.n	8006ba0 <ai_platform_outputs_get+0x1f8>
 8006ba2:	e7fe      	b.n	8006ba2 <ai_platform_outputs_get+0x1fa>
 8006ba4:	4a32      	ldr	r2, [pc, #200]	@ (8006c70 <ai_platform_outputs_get+0x2c8>)
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006bac:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d1fb      	bne.n	8006bac <ai_platform_outputs_get+0x204>
 8006bb4:	4b2c      	ldr	r3, [pc, #176]	@ (8006c68 <ai_platform_outputs_get+0x2c0>)
 8006bb6:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8006bba:	4b2c      	ldr	r3, [pc, #176]	@ (8006c6c <ai_platform_outputs_get+0x2c4>)
 8006bbc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	f43f af2c 	beq.w	8006a1e <ai_platform_outputs_get+0x76>
 8006bc6:	e7fe      	b.n	8006bc6 <ai_platform_outputs_get+0x21e>
 8006bc8:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006bcc:	b14c      	cbz	r4, 8006be2 <ai_platform_outputs_get+0x23a>
 8006bce:	f8da 3014 	ldr.w	r3, [sl, #20]
 8006bd2:	6858      	ldr	r0, [r3, #4]
 8006bd4:	9b02      	ldr	r3, [sp, #8]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d0d2      	beq.n	8006b80 <ai_platform_outputs_get+0x1d8>
 8006bda:	801c      	strh	r4, [r3, #0]
 8006bdc:	b005      	add	sp, #20
 8006bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006be2:	2400      	movs	r4, #0
 8006be4:	2218      	movs	r2, #24
 8006be6:	2111      	movs	r1, #17
 8006be8:	f109 0010 	add.w	r0, r9, #16
 8006bec:	f000 ffe8 	bl	8007bc0 <core_set_error>
 8006bf0:	4620      	mov	r0, r4
 8006bf2:	e7ef      	b.n	8006bd4 <ai_platform_outputs_get+0x22c>
 8006bf4:	4a1e      	ldr	r2, [pc, #120]	@ (8006c70 <ai_platform_outputs_get+0x2c8>)
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006bfc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d1fb      	bne.n	8006bfc <ai_platform_outputs_get+0x254>
 8006c04:	4918      	ldr	r1, [pc, #96]	@ (8006c68 <ai_platform_outputs_get+0x2c0>)
 8006c06:	4b19      	ldr	r3, [pc, #100]	@ (8006c6c <ai_platform_outputs_get+0x2c4>)
 8006c08:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8006c0c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d0b2      	beq.n	8006b7a <ai_platform_outputs_get+0x1d2>
 8006c14:	e7fe      	b.n	8006c14 <ai_platform_outputs_get+0x26c>
 8006c16:	4a16      	ldr	r2, [pc, #88]	@ (8006c70 <ai_platform_outputs_get+0x2c8>)
 8006c18:	2301      	movs	r3, #1
 8006c1a:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006c1e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d1fb      	bne.n	8006c1e <ai_platform_outputs_get+0x276>
 8006c26:	4b10      	ldr	r3, [pc, #64]	@ (8006c68 <ai_platform_outputs_get+0x2c0>)
 8006c28:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8006c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8006c6c <ai_platform_outputs_get+0x2c4>)
 8006c2e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006c32:	429a      	cmp	r2, r3
 8006c34:	f43f aef3 	beq.w	8006a1e <ai_platform_outputs_get+0x76>
 8006c38:	e7fe      	b.n	8006c38 <ai_platform_outputs_get+0x290>
 8006c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8006c64 <ai_platform_outputs_get+0x2bc>)
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	6093      	str	r3, [r2, #8]
 8006c40:	6893      	ldr	r3, [r2, #8]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1fc      	bne.n	8006c40 <ai_platform_outputs_get+0x298>
 8006c46:	4b08      	ldr	r3, [pc, #32]	@ (8006c68 <ai_platform_outputs_get+0x2c0>)
 8006c48:	6013      	str	r3, [r2, #0]
 8006c4a:	4b08      	ldr	r3, [pc, #32]	@ (8006c6c <ai_platform_outputs_get+0x2c4>)
 8006c4c:	6812      	ldr	r2, [r2, #0]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	f43f aee5 	beq.w	8006a1e <ai_platform_outputs_get+0x76>
 8006c54:	e7fe      	b.n	8006c54 <ai_platform_outputs_get+0x2ac>
 8006c56:	bf00      	nop
 8006c58:	a1c00100 	.word	0xa1c00100
 8006c5c:	e0042000 	.word	0xe0042000
 8006c60:	5c001000 	.word	0x5c001000
 8006c64:	40023000 	.word	0x40023000
 8006c68:	f407a5c2 	.word	0xf407a5c2
 8006c6c:	b5e8b5cd 	.word	0xb5e8b5cd
 8006c70:	58024000 	.word	0x58024000
 8006c74:	4a0d      	ldr	r2, [pc, #52]	@ (8006cac <ai_platform_outputs_get+0x304>)
 8006c76:	2301      	movs	r3, #1
 8006c78:	6093      	str	r3, [r2, #8]
 8006c7a:	6893      	ldr	r3, [r2, #8]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d1fc      	bne.n	8006c7a <ai_platform_outputs_get+0x2d2>
 8006c80:	490b      	ldr	r1, [pc, #44]	@ (8006cb0 <ai_platform_outputs_get+0x308>)
 8006c82:	4b0c      	ldr	r3, [pc, #48]	@ (8006cb4 <ai_platform_outputs_get+0x30c>)
 8006c84:	6011      	str	r1, [r2, #0]
 8006c86:	6812      	ldr	r2, [r2, #0]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	f43f af76 	beq.w	8006b7a <ai_platform_outputs_get+0x1d2>
 8006c8e:	e7fe      	b.n	8006c8e <ai_platform_outputs_get+0x2e6>
 8006c90:	4a06      	ldr	r2, [pc, #24]	@ (8006cac <ai_platform_outputs_get+0x304>)
 8006c92:	2301      	movs	r3, #1
 8006c94:	6093      	str	r3, [r2, #8]
 8006c96:	6893      	ldr	r3, [r2, #8]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d1fc      	bne.n	8006c96 <ai_platform_outputs_get+0x2ee>
 8006c9c:	4b04      	ldr	r3, [pc, #16]	@ (8006cb0 <ai_platform_outputs_get+0x308>)
 8006c9e:	6013      	str	r3, [r2, #0]
 8006ca0:	4b04      	ldr	r3, [pc, #16]	@ (8006cb4 <ai_platform_outputs_get+0x30c>)
 8006ca2:	6812      	ldr	r2, [r2, #0]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	f43f aeba 	beq.w	8006a1e <ai_platform_outputs_get+0x76>
 8006caa:	e7fe      	b.n	8006caa <ai_platform_outputs_get+0x302>
 8006cac:	40023000 	.word	0x40023000
 8006cb0:	f407a5c2 	.word	0xf407a5c2
 8006cb4:	b5e8b5cd 	.word	0xb5e8b5cd

08006cb8 <ai_platform_network_create>:
 8006cb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006cbc:	b083      	sub	sp, #12
 8006cbe:	4604      	mov	r4, r0
 8006cc0:	4615      	mov	r5, r2
 8006cc2:	461e      	mov	r6, r3
 8006cc4:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 8006cc8:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 8006ccc:	f7ff fb00 	bl	80062d0 <_ai_platform_acquire_crc>
 8006cd0:	2800      	cmp	r0, #0
 8006cd2:	f000 80bd 	beq.w	8006e50 <ai_platform_network_create+0x198>
 8006cd6:	4ba5      	ldr	r3, [pc, #660]	@ (8006f6c <ai_platform_network_create+0x2b4>)
 8006cd8:	f46f 6c8a 	mvn.w	ip, #1104	@ 0x450
 8006cdc:	4601      	mov	r1, r0
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ce4:	eb03 020c 	add.w	r2, r3, ip
 8006ce8:	2a01      	cmp	r2, #1
 8006cea:	f240 80a8 	bls.w	8006e3e <ai_platform_network_create+0x186>
 8006cee:	f240 4249 	movw	r2, #1097	@ 0x449
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	f000 80a3 	beq.w	8006e3e <ai_platform_network_create+0x186>
 8006cf8:	4a9d      	ldr	r2, [pc, #628]	@ (8006f70 <ai_platform_network_create+0x2b8>)
 8006cfa:	6813      	ldr	r3, [r2, #0]
 8006cfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d00:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8006d04:	f000 80b9 	beq.w	8006e7a <ai_platform_network_create+0x1c2>
 8006d08:	6813      	ldr	r3, [r2, #0]
 8006d0a:	f240 4c83 	movw	ip, #1155	@ 0x483
 8006d0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d12:	4563      	cmp	r3, ip
 8006d14:	f000 80a1 	beq.w	8006e5a <ai_platform_network_create+0x1a2>
 8006d18:	6813      	ldr	r3, [r2, #0]
 8006d1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d1e:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8006d22:	f000 8153 	beq.w	8006fcc <ai_platform_network_create+0x314>
 8006d26:	6813      	ldr	r3, [r2, #0]
 8006d28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	f040 808d 	bne.w	8006e4c <ai_platform_network_create+0x194>
 8006d32:	4a90      	ldr	r2, [pc, #576]	@ (8006f74 <ai_platform_network_create+0x2bc>)
 8006d34:	2318      	movs	r3, #24
 8006d36:	6093      	str	r3, [r2, #8]
 8006d38:	6893      	ldr	r3, [r2, #8]
 8006d3a:	2b18      	cmp	r3, #24
 8006d3c:	f040 8086 	bne.w	8006e4c <ai_platform_network_create+0x194>
 8006d40:	2301      	movs	r3, #1
 8006d42:	6093      	str	r3, [r2, #8]
 8006d44:	6893      	ldr	r3, [r2, #8]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d1fc      	bne.n	8006d44 <ai_platform_network_create+0x8c>
 8006d4a:	4608      	mov	r0, r1
 8006d4c:	f7ff fac2 	bl	80062d4 <_ai_platform_release_crc>
 8006d50:	f7ff fabe 	bl	80062d0 <_ai_platform_acquire_crc>
 8006d54:	4b85      	ldr	r3, [pc, #532]	@ (8006f6c <ai_platform_network_create+0x2b4>)
 8006d56:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d60:	189a      	adds	r2, r3, r2
 8006d62:	2a01      	cmp	r2, #1
 8006d64:	f240 809f 	bls.w	8006ea6 <ai_platform_network_create+0x1ee>
 8006d68:	f240 4249 	movw	r2, #1097	@ 0x449
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	f000 809a 	beq.w	8006ea6 <ai_platform_network_create+0x1ee>
 8006d72:	4a7f      	ldr	r2, [pc, #508]	@ (8006f70 <ai_platform_network_create+0x2b8>)
 8006d74:	6813      	ldr	r3, [r2, #0]
 8006d76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d7a:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8006d7e:	f000 80a0 	beq.w	8006ec2 <ai_platform_network_create+0x20a>
 8006d82:	6813      	ldr	r3, [r2, #0]
 8006d84:	f240 4183 	movw	r1, #1155	@ 0x483
 8006d88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d8c:	428b      	cmp	r3, r1
 8006d8e:	f000 80bf 	beq.w	8006f10 <ai_platform_network_create+0x258>
 8006d92:	6813      	ldr	r3, [r2, #0]
 8006d94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d98:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8006d9c:	f000 8123 	beq.w	8006fe6 <ai_platform_network_create+0x32e>
 8006da0:	6813      	ldr	r3, [r2, #0]
 8006da2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	f000 80c4 	beq.w	8006f34 <ai_platform_network_create+0x27c>
 8006dac:	f7ff fa92 	bl	80062d4 <_ai_platform_release_crc>
 8006db0:	2c00      	cmp	r4, #0
 8006db2:	f000 80aa 	beq.w	8006f0a <ai_platform_network_create+0x252>
 8006db6:	4b70      	ldr	r3, [pc, #448]	@ (8006f78 <ai_platform_network_create+0x2c0>)
 8006db8:	602b      	str	r3, [r5, #0]
 8006dba:	6025      	str	r5, [r4, #0]
 8006dbc:	f000 fef8 	bl	8007bb0 <core_init>
 8006dc0:	2800      	cmp	r0, #0
 8006dc2:	f000 8090 	beq.w	8006ee6 <ai_platform_network_create+0x22e>
 8006dc6:	f7ff fa83 	bl	80062d0 <_ai_platform_acquire_crc>
 8006dca:	4b68      	ldr	r3, [pc, #416]	@ (8006f6c <ai_platform_network_create+0x2b4>)
 8006dcc:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006dd6:	185a      	adds	r2, r3, r1
 8006dd8:	2a01      	cmp	r2, #1
 8006dda:	f240 80b9 	bls.w	8006f50 <ai_platform_network_create+0x298>
 8006dde:	f240 4249 	movw	r2, #1097	@ 0x449
 8006de2:	4293      	cmp	r3, r2
 8006de4:	f000 80b4 	beq.w	8006f50 <ai_platform_network_create+0x298>
 8006de8:	4a61      	ldr	r2, [pc, #388]	@ (8006f70 <ai_platform_network_create+0x2b8>)
 8006dea:	6813      	ldr	r3, [r2, #0]
 8006dec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006df0:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8006df4:	f000 80c8 	beq.w	8006f88 <ai_platform_network_create+0x2d0>
 8006df8:	6813      	ldr	r3, [r2, #0]
 8006dfa:	f240 4183 	movw	r1, #1155	@ 0x483
 8006dfe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e02:	428b      	cmp	r3, r1
 8006e04:	f000 8107 	beq.w	8007016 <ai_platform_network_create+0x35e>
 8006e08:	6813      	ldr	r3, [r2, #0]
 8006e0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e0e:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8006e12:	f000 8111 	beq.w	8007038 <ai_platform_network_create+0x380>
 8006e16:	6813      	ldr	r3, [r2, #0]
 8006e18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	f040 80c3 	bne.w	8006fa8 <ai_platform_network_create+0x2f0>
 8006e22:	4b54      	ldr	r3, [pc, #336]	@ (8006f74 <ai_platform_network_create+0x2bc>)
 8006e24:	2201      	movs	r2, #1
 8006e26:	609a      	str	r2, [r3, #8]
 8006e28:	689a      	ldr	r2, [r3, #8]
 8006e2a:	2a00      	cmp	r2, #0
 8006e2c:	d1fc      	bne.n	8006e28 <ai_platform_network_create+0x170>
 8006e2e:	4a53      	ldr	r2, [pc, #332]	@ (8006f7c <ai_platform_network_create+0x2c4>)
 8006e30:	601a      	str	r2, [r3, #0]
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	4b52      	ldr	r3, [pc, #328]	@ (8006f80 <ai_platform_network_create+0x2c8>)
 8006e36:	429a      	cmp	r2, r3
 8006e38:	f000 80b6 	beq.w	8006fa8 <ai_platform_network_create+0x2f0>
 8006e3c:	e7fe      	b.n	8006e3c <ai_platform_network_create+0x184>
 8006e3e:	4b4d      	ldr	r3, [pc, #308]	@ (8006f74 <ai_platform_network_create+0x2bc>)
 8006e40:	2218      	movs	r2, #24
 8006e42:	609a      	str	r2, [r3, #8]
 8006e44:	689a      	ldr	r2, [r3, #8]
 8006e46:	2a18      	cmp	r2, #24
 8006e48:	d027      	beq.n	8006e9a <ai_platform_network_create+0x1e2>
 8006e4a:	4608      	mov	r0, r1
 8006e4c:	f7ff fa42 	bl	80062d4 <_ai_platform_release_crc>
 8006e50:	f244 1033 	movw	r0, #16691	@ 0x4133
 8006e54:	b003      	add	sp, #12
 8006e56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e5a:	4a4a      	ldr	r2, [pc, #296]	@ (8006f84 <ai_platform_network_create+0x2cc>)
 8006e5c:	2318      	movs	r3, #24
 8006e5e:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006e62:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006e66:	2b18      	cmp	r3, #24
 8006e68:	d1f0      	bne.n	8006e4c <ai_platform_network_create+0x194>
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006e70:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d1fb      	bne.n	8006e70 <ai_platform_network_create+0x1b8>
 8006e78:	e767      	b.n	8006d4a <ai_platform_network_create+0x92>
 8006e7a:	4a42      	ldr	r2, [pc, #264]	@ (8006f84 <ai_platform_network_create+0x2cc>)
 8006e7c:	2318      	movs	r3, #24
 8006e7e:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006e82:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006e86:	2b18      	cmp	r3, #24
 8006e88:	d1e0      	bne.n	8006e4c <ai_platform_network_create+0x194>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006e90:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d1fb      	bne.n	8006e90 <ai_platform_network_create+0x1d8>
 8006e98:	e757      	b.n	8006d4a <ai_platform_network_create+0x92>
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	609a      	str	r2, [r3, #8]
 8006e9e:	689a      	ldr	r2, [r3, #8]
 8006ea0:	2a00      	cmp	r2, #0
 8006ea2:	d1fc      	bne.n	8006e9e <ai_platform_network_create+0x1e6>
 8006ea4:	e751      	b.n	8006d4a <ai_platform_network_create+0x92>
 8006ea6:	4a33      	ldr	r2, [pc, #204]	@ (8006f74 <ai_platform_network_create+0x2bc>)
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	6093      	str	r3, [r2, #8]
 8006eac:	6891      	ldr	r1, [r2, #8]
 8006eae:	2900      	cmp	r1, #0
 8006eb0:	d1fc      	bne.n	8006eac <ai_platform_network_create+0x1f4>
 8006eb2:	4b32      	ldr	r3, [pc, #200]	@ (8006f7c <ai_platform_network_create+0x2c4>)
 8006eb4:	6013      	str	r3, [r2, #0]
 8006eb6:	4b32      	ldr	r3, [pc, #200]	@ (8006f80 <ai_platform_network_create+0x2c8>)
 8006eb8:	6812      	ldr	r2, [r2, #0]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	f43f af76 	beq.w	8006dac <ai_platform_network_create+0xf4>
 8006ec0:	e7fe      	b.n	8006ec0 <ai_platform_network_create+0x208>
 8006ec2:	4a30      	ldr	r2, [pc, #192]	@ (8006f84 <ai_platform_network_create+0x2cc>)
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006eca:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d1fb      	bne.n	8006eca <ai_platform_network_create+0x212>
 8006ed2:	4b2a      	ldr	r3, [pc, #168]	@ (8006f7c <ai_platform_network_create+0x2c4>)
 8006ed4:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8006ed8:	4b29      	ldr	r3, [pc, #164]	@ (8006f80 <ai_platform_network_create+0x2c8>)
 8006eda:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	f43f af64 	beq.w	8006dac <ai_platform_network_create+0xf4>
 8006ee4:	e7fe      	b.n	8006ee4 <ai_platform_network_create+0x22c>
 8006ee6:	f04f 0930 	mov.w	r9, #48	@ 0x30
 8006eea:	2300      	movs	r3, #0
 8006eec:	6023      	str	r3, [r4, #0]
 8006eee:	2410      	movs	r4, #16
 8006ef0:	4642      	mov	r2, r8
 8006ef2:	4639      	mov	r1, r7
 8006ef4:	4630      	mov	r0, r6
 8006ef6:	f004 fe0f 	bl	800bb18 <ai_version_get>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2000      	movs	r0, #0
 8006efe:	64ab      	str	r3, [r5, #72]	@ 0x48
 8006f00:	f369 0007 	bfi	r0, r9, #0, #8
 8006f04:	f364 201f 	bfi	r0, r4, #8, #24
 8006f08:	e7a4      	b.n	8006e54 <ai_platform_network_create+0x19c>
 8006f0a:	f241 0010 	movw	r0, #4112	@ 0x1010
 8006f0e:	e7a1      	b.n	8006e54 <ai_platform_network_create+0x19c>
 8006f10:	4a1c      	ldr	r2, [pc, #112]	@ (8006f84 <ai_platform_network_create+0x2cc>)
 8006f12:	2301      	movs	r3, #1
 8006f14:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006f18:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d1fb      	bne.n	8006f18 <ai_platform_network_create+0x260>
 8006f20:	4b16      	ldr	r3, [pc, #88]	@ (8006f7c <ai_platform_network_create+0x2c4>)
 8006f22:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8006f26:	4b16      	ldr	r3, [pc, #88]	@ (8006f80 <ai_platform_network_create+0x2c8>)
 8006f28:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	f43f af3d 	beq.w	8006dac <ai_platform_network_create+0xf4>
 8006f32:	e7fe      	b.n	8006f32 <ai_platform_network_create+0x27a>
 8006f34:	4a0f      	ldr	r2, [pc, #60]	@ (8006f74 <ai_platform_network_create+0x2bc>)
 8006f36:	2301      	movs	r3, #1
 8006f38:	6093      	str	r3, [r2, #8]
 8006f3a:	6893      	ldr	r3, [r2, #8]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d1fc      	bne.n	8006f3a <ai_platform_network_create+0x282>
 8006f40:	4b0e      	ldr	r3, [pc, #56]	@ (8006f7c <ai_platform_network_create+0x2c4>)
 8006f42:	6013      	str	r3, [r2, #0]
 8006f44:	4b0e      	ldr	r3, [pc, #56]	@ (8006f80 <ai_platform_network_create+0x2c8>)
 8006f46:	6812      	ldr	r2, [r2, #0]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	f43f af2f 	beq.w	8006dac <ai_platform_network_create+0xf4>
 8006f4e:	e7fe      	b.n	8006f4e <ai_platform_network_create+0x296>
 8006f50:	4a08      	ldr	r2, [pc, #32]	@ (8006f74 <ai_platform_network_create+0x2bc>)
 8006f52:	2301      	movs	r3, #1
 8006f54:	6093      	str	r3, [r2, #8]
 8006f56:	6893      	ldr	r3, [r2, #8]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d1fc      	bne.n	8006f56 <ai_platform_network_create+0x29e>
 8006f5c:	4b07      	ldr	r3, [pc, #28]	@ (8006f7c <ai_platform_network_create+0x2c4>)
 8006f5e:	6013      	str	r3, [r2, #0]
 8006f60:	4b07      	ldr	r3, [pc, #28]	@ (8006f80 <ai_platform_network_create+0x2c8>)
 8006f62:	6812      	ldr	r2, [r2, #0]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d01f      	beq.n	8006fa8 <ai_platform_network_create+0x2f0>
 8006f68:	e7fe      	b.n	8006f68 <ai_platform_network_create+0x2b0>
 8006f6a:	bf00      	nop
 8006f6c:	e0042000 	.word	0xe0042000
 8006f70:	5c001000 	.word	0x5c001000
 8006f74:	40023000 	.word	0x40023000
 8006f78:	a1c00100 	.word	0xa1c00100
 8006f7c:	f407a5c2 	.word	0xf407a5c2
 8006f80:	b5e8b5cd 	.word	0xb5e8b5cd
 8006f84:	58024000 	.word	0x58024000
 8006f88:	4a33      	ldr	r2, [pc, #204]	@ (8007058 <ai_platform_network_create+0x3a0>)
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006f90:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d1fb      	bne.n	8006f90 <ai_platform_network_create+0x2d8>
 8006f98:	4b30      	ldr	r3, [pc, #192]	@ (800705c <ai_platform_network_create+0x3a4>)
 8006f9a:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8006f9e:	4b30      	ldr	r3, [pc, #192]	@ (8007060 <ai_platform_network_create+0x3a8>)
 8006fa0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d12c      	bne.n	8007002 <ai_platform_network_create+0x34a>
 8006fa8:	f7ff f994 	bl	80062d4 <_ai_platform_release_crc>
 8006fac:	2200      	movs	r2, #0
 8006fae:	4639      	mov	r1, r7
 8006fb0:	4630      	mov	r0, r6
 8006fb2:	f004 fdb1 	bl	800bb18 <ai_version_get>
 8006fb6:	4681      	mov	r9, r0
 8006fb8:	2200      	movs	r2, #0
 8006fba:	2105      	movs	r1, #5
 8006fbc:	2001      	movs	r0, #1
 8006fbe:	f004 fdab 	bl	800bb18 <ai_version_get>
 8006fc2:	4581      	cmp	r9, r0
 8006fc4:	d01e      	beq.n	8007004 <ai_platform_network_create+0x34c>
 8006fc6:	f04f 0901 	mov.w	r9, #1
 8006fca:	e78e      	b.n	8006eea <ai_platform_network_create+0x232>
 8006fcc:	4b25      	ldr	r3, [pc, #148]	@ (8007064 <ai_platform_network_create+0x3ac>)
 8006fce:	2218      	movs	r2, #24
 8006fd0:	609a      	str	r2, [r3, #8]
 8006fd2:	689a      	ldr	r2, [r3, #8]
 8006fd4:	2a18      	cmp	r2, #24
 8006fd6:	f47f af39 	bne.w	8006e4c <ai_platform_network_create+0x194>
 8006fda:	2201      	movs	r2, #1
 8006fdc:	609a      	str	r2, [r3, #8]
 8006fde:	689a      	ldr	r2, [r3, #8]
 8006fe0:	2a00      	cmp	r2, #0
 8006fe2:	d1fc      	bne.n	8006fde <ai_platform_network_create+0x326>
 8006fe4:	e6b1      	b.n	8006d4a <ai_platform_network_create+0x92>
 8006fe6:	4a1f      	ldr	r2, [pc, #124]	@ (8007064 <ai_platform_network_create+0x3ac>)
 8006fe8:	2301      	movs	r3, #1
 8006fea:	6093      	str	r3, [r2, #8]
 8006fec:	6893      	ldr	r3, [r2, #8]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d1fc      	bne.n	8006fec <ai_platform_network_create+0x334>
 8006ff2:	4b1a      	ldr	r3, [pc, #104]	@ (800705c <ai_platform_network_create+0x3a4>)
 8006ff4:	6013      	str	r3, [r2, #0]
 8006ff6:	4b1a      	ldr	r3, [pc, #104]	@ (8007060 <ai_platform_network_create+0x3a8>)
 8006ff8:	6812      	ldr	r2, [r2, #0]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	f43f aed6 	beq.w	8006dac <ai_platform_network_create+0xf4>
 8007000:	e7fe      	b.n	8007000 <ai_platform_network_create+0x348>
 8007002:	e7fe      	b.n	8007002 <ai_platform_network_create+0x34a>
 8007004:	4b18      	ldr	r3, [pc, #96]	@ (8007068 <ai_platform_network_create+0x3b0>)
 8007006:	a801      	add	r0, sp, #4
 8007008:	9301      	str	r3, [sp, #4]
 800700a:	f000 ff35 	bl	8007e78 <ai_check_custom_types>
 800700e:	b300      	cbz	r0, 8007052 <ai_platform_network_create+0x39a>
 8007010:	2400      	movs	r4, #0
 8007012:	46a1      	mov	r9, r4
 8007014:	e76c      	b.n	8006ef0 <ai_platform_network_create+0x238>
 8007016:	4b10      	ldr	r3, [pc, #64]	@ (8007058 <ai_platform_network_create+0x3a0>)
 8007018:	2201      	movs	r2, #1
 800701a:	f8c3 2c08 	str.w	r2, [r3, #3080]	@ 0xc08
 800701e:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	@ 0xc08
 8007022:	2a00      	cmp	r2, #0
 8007024:	d1fb      	bne.n	800701e <ai_platform_network_create+0x366>
 8007026:	4a0d      	ldr	r2, [pc, #52]	@ (800705c <ai_platform_network_create+0x3a4>)
 8007028:	f8c3 2c00 	str.w	r2, [r3, #3072]	@ 0xc00
 800702c:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	@ 0xc00
 8007030:	4b0b      	ldr	r3, [pc, #44]	@ (8007060 <ai_platform_network_create+0x3a8>)
 8007032:	429a      	cmp	r2, r3
 8007034:	d0b8      	beq.n	8006fa8 <ai_platform_network_create+0x2f0>
 8007036:	e7fe      	b.n	8007036 <ai_platform_network_create+0x37e>
 8007038:	4b0a      	ldr	r3, [pc, #40]	@ (8007064 <ai_platform_network_create+0x3ac>)
 800703a:	2201      	movs	r2, #1
 800703c:	609a      	str	r2, [r3, #8]
 800703e:	689a      	ldr	r2, [r3, #8]
 8007040:	2a00      	cmp	r2, #0
 8007042:	d1fc      	bne.n	800703e <ai_platform_network_create+0x386>
 8007044:	4a05      	ldr	r2, [pc, #20]	@ (800705c <ai_platform_network_create+0x3a4>)
 8007046:	601a      	str	r2, [r3, #0]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	4b05      	ldr	r3, [pc, #20]	@ (8007060 <ai_platform_network_create+0x3a8>)
 800704c:	429a      	cmp	r2, r3
 800704e:	d0ab      	beq.n	8006fa8 <ai_platform_network_create+0x2f0>
 8007050:	e7fe      	b.n	8007050 <ai_platform_network_create+0x398>
 8007052:	f04f 0902 	mov.w	r9, #2
 8007056:	e748      	b.n	8006eea <ai_platform_network_create+0x232>
 8007058:	58024000 	.word	0x58024000
 800705c:	f407a5c2 	.word	0xf407a5c2
 8007060:	b5e8b5cd 	.word	0xb5e8b5cd
 8007064:	40023000 	.word	0x40023000
 8007068:	84048403 	.word	0x84048403

0800706c <ai_platform_network_init>:
 800706c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007070:	2800      	cmp	r0, #0
 8007072:	d052      	beq.n	800711a <ai_platform_network_init+0xae>
 8007074:	4bab      	ldr	r3, [pc, #684]	@ (8007324 <ai_platform_network_init+0x2b8>)
 8007076:	4604      	mov	r4, r0
 8007078:	6802      	ldr	r2, [r0, #0]
 800707a:	429a      	cmp	r2, r3
 800707c:	d14d      	bne.n	800711a <ai_platform_network_init+0xae>
 800707e:	460d      	mov	r5, r1
 8007080:	f7ff f926 	bl	80062d0 <_ai_platform_acquire_crc>
 8007084:	4ba8      	ldr	r3, [pc, #672]	@ (8007328 <ai_platform_network_init+0x2bc>)
 8007086:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007090:	189a      	adds	r2, r3, r2
 8007092:	2a01      	cmp	r2, #1
 8007094:	f240 809b 	bls.w	80071ce <ai_platform_network_init+0x162>
 8007098:	f240 4249 	movw	r2, #1097	@ 0x449
 800709c:	4293      	cmp	r3, r2
 800709e:	f000 8096 	beq.w	80071ce <ai_platform_network_init+0x162>
 80070a2:	4aa2      	ldr	r2, [pc, #648]	@ (800732c <ai_platform_network_init+0x2c0>)
 80070a4:	6813      	ldr	r3, [r2, #0]
 80070a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80070aa:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 80070ae:	f000 809d 	beq.w	80071ec <ai_platform_network_init+0x180>
 80070b2:	6813      	ldr	r3, [r2, #0]
 80070b4:	f240 4183 	movw	r1, #1155	@ 0x483
 80070b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80070bc:	428b      	cmp	r3, r1
 80070be:	f000 80e4 	beq.w	800728a <ai_platform_network_init+0x21e>
 80070c2:	6813      	ldr	r3, [r2, #0]
 80070c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80070c8:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 80070cc:	f000 811b 	beq.w	8007306 <ai_platform_network_init+0x29a>
 80070d0:	6813      	ldr	r3, [r2, #0]
 80070d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	f000 80f9 	beq.w	80072ce <ai_platform_network_init+0x262>
 80070dc:	f7ff f8fa 	bl	80062d4 <_ai_platform_release_crc>
 80070e0:	2d00      	cmp	r5, #0
 80070e2:	f000 8147 	beq.w	8007374 <ai_platform_network_init+0x308>
 80070e6:	4b92      	ldr	r3, [pc, #584]	@ (8007330 <ai_platform_network_init+0x2c4>)
 80070e8:	682a      	ldr	r2, [r5, #0]
 80070ea:	429a      	cmp	r2, r3
 80070ec:	f040 8090 	bne.w	8007210 <ai_platform_network_init+0x1a4>
 80070f0:	692b      	ldr	r3, [r5, #16]
 80070f2:	89ae      	ldrh	r6, [r5, #12]
 80070f4:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 80070f8:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 80070fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80070fe:	e9c4 1207 	strd	r1, r2, [r4, #28]
 8007102:	2303      	movs	r3, #3
 8007104:	84a6      	strh	r6, [r4, #36]	@ 0x24
 8007106:	4626      	mov	r6, r4
 8007108:	4620      	mov	r0, r4
 800710a:	f8a4 c026 	strh.w	ip, [r4, #38]	@ 0x26
 800710e:	60e3      	str	r3, [r4, #12]
 8007110:	f000 feda 	bl	8007ec8 <ai_layers_init_all>
 8007114:	4630      	mov	r0, r6
 8007116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800711a:	f7ff f8d9 	bl	80062d0 <_ai_platform_acquire_crc>
 800711e:	4b82      	ldr	r3, [pc, #520]	@ (8007328 <ai_platform_network_init+0x2bc>)
 8007120:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800712a:	185a      	adds	r2, r3, r1
 800712c:	2a01      	cmp	r2, #1
 800712e:	d92b      	bls.n	8007188 <ai_platform_network_init+0x11c>
 8007130:	f240 4249 	movw	r2, #1097	@ 0x449
 8007134:	4293      	cmp	r3, r2
 8007136:	d027      	beq.n	8007188 <ai_platform_network_init+0x11c>
 8007138:	4a7c      	ldr	r2, [pc, #496]	@ (800732c <ai_platform_network_init+0x2c0>)
 800713a:	6813      	ldr	r3, [r2, #0]
 800713c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007140:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8007144:	d02d      	beq.n	80071a2 <ai_platform_network_init+0x136>
 8007146:	6813      	ldr	r3, [r2, #0]
 8007148:	f240 4183 	movw	r1, #1155	@ 0x483
 800714c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007150:	428b      	cmp	r3, r1
 8007152:	f000 8089 	beq.w	8007268 <ai_platform_network_init+0x1fc>
 8007156:	6813      	ldr	r3, [r2, #0]
 8007158:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800715c:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8007160:	f000 80c3 	beq.w	80072ea <ai_platform_network_init+0x27e>
 8007164:	6813      	ldr	r3, [r2, #0]
 8007166:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800716a:	2b00      	cmp	r3, #0
 800716c:	d129      	bne.n	80071c2 <ai_platform_network_init+0x156>
 800716e:	4a71      	ldr	r2, [pc, #452]	@ (8007334 <ai_platform_network_init+0x2c8>)
 8007170:	2301      	movs	r3, #1
 8007172:	6093      	str	r3, [r2, #8]
 8007174:	6893      	ldr	r3, [r2, #8]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d1fc      	bne.n	8007174 <ai_platform_network_init+0x108>
 800717a:	496f      	ldr	r1, [pc, #444]	@ (8007338 <ai_platform_network_init+0x2cc>)
 800717c:	4b6f      	ldr	r3, [pc, #444]	@ (800733c <ai_platform_network_init+0x2d0>)
 800717e:	6011      	str	r1, [r2, #0]
 8007180:	6812      	ldr	r2, [r2, #0]
 8007182:	429a      	cmp	r2, r3
 8007184:	d01d      	beq.n	80071c2 <ai_platform_network_init+0x156>
 8007186:	e7fe      	b.n	8007186 <ai_platform_network_init+0x11a>
 8007188:	4a6a      	ldr	r2, [pc, #424]	@ (8007334 <ai_platform_network_init+0x2c8>)
 800718a:	2301      	movs	r3, #1
 800718c:	6093      	str	r3, [r2, #8]
 800718e:	6893      	ldr	r3, [r2, #8]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d1fc      	bne.n	800718e <ai_platform_network_init+0x122>
 8007194:	4968      	ldr	r1, [pc, #416]	@ (8007338 <ai_platform_network_init+0x2cc>)
 8007196:	4b69      	ldr	r3, [pc, #420]	@ (800733c <ai_platform_network_init+0x2d0>)
 8007198:	6011      	str	r1, [r2, #0]
 800719a:	6812      	ldr	r2, [r2, #0]
 800719c:	429a      	cmp	r2, r3
 800719e:	d010      	beq.n	80071c2 <ai_platform_network_init+0x156>
 80071a0:	e7fe      	b.n	80071a0 <ai_platform_network_init+0x134>
 80071a2:	4a67      	ldr	r2, [pc, #412]	@ (8007340 <ai_platform_network_init+0x2d4>)
 80071a4:	2301      	movs	r3, #1
 80071a6:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80071aa:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d1fb      	bne.n	80071aa <ai_platform_network_init+0x13e>
 80071b2:	4961      	ldr	r1, [pc, #388]	@ (8007338 <ai_platform_network_init+0x2cc>)
 80071b4:	4b61      	ldr	r3, [pc, #388]	@ (800733c <ai_platform_network_init+0x2d0>)
 80071b6:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 80071ba:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 80071be:	429a      	cmp	r2, r3
 80071c0:	d113      	bne.n	80071ea <ai_platform_network_init+0x17e>
 80071c2:	2600      	movs	r6, #0
 80071c4:	f7ff f886 	bl	80062d4 <_ai_platform_release_crc>
 80071c8:	4630      	mov	r0, r6
 80071ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071ce:	4a59      	ldr	r2, [pc, #356]	@ (8007334 <ai_platform_network_init+0x2c8>)
 80071d0:	2301      	movs	r3, #1
 80071d2:	6093      	str	r3, [r2, #8]
 80071d4:	6893      	ldr	r3, [r2, #8]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d1fc      	bne.n	80071d4 <ai_platform_network_init+0x168>
 80071da:	4b57      	ldr	r3, [pc, #348]	@ (8007338 <ai_platform_network_init+0x2cc>)
 80071dc:	6013      	str	r3, [r2, #0]
 80071de:	4b57      	ldr	r3, [pc, #348]	@ (800733c <ai_platform_network_init+0x2d0>)
 80071e0:	6812      	ldr	r2, [r2, #0]
 80071e2:	429a      	cmp	r2, r3
 80071e4:	f43f af7a 	beq.w	80070dc <ai_platform_network_init+0x70>
 80071e8:	e7fe      	b.n	80071e8 <ai_platform_network_init+0x17c>
 80071ea:	e7fe      	b.n	80071ea <ai_platform_network_init+0x17e>
 80071ec:	4a54      	ldr	r2, [pc, #336]	@ (8007340 <ai_platform_network_init+0x2d4>)
 80071ee:	2301      	movs	r3, #1
 80071f0:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80071f4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d1fb      	bne.n	80071f4 <ai_platform_network_init+0x188>
 80071fc:	4b4e      	ldr	r3, [pc, #312]	@ (8007338 <ai_platform_network_init+0x2cc>)
 80071fe:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8007202:	4b4e      	ldr	r3, [pc, #312]	@ (800733c <ai_platform_network_init+0x2d0>)
 8007204:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8007208:	429a      	cmp	r2, r3
 800720a:	f43f af67 	beq.w	80070dc <ai_platform_network_init+0x70>
 800720e:	e7fe      	b.n	800720e <ai_platform_network_init+0x1a2>
 8007210:	2101      	movs	r1, #1
 8007212:	4628      	mov	r0, r5
 8007214:	f105 081c 	add.w	r8, r5, #28
 8007218:	686e      	ldr	r6, [r5, #4]
 800721a:	f7ff f80b 	bl	8006234 <ai_buffer_get_size>
 800721e:	4607      	mov	r7, r0
 8007220:	2101      	movs	r1, #1
 8007222:	4640      	mov	r0, r8
 8007224:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8007228:	f7ff f804 	bl	8006234 <ai_buffer_get_size>
 800722c:	2f00      	cmp	r7, #0
 800722e:	d13e      	bne.n	80072ae <ai_platform_network_init+0x242>
 8007230:	2800      	cmp	r0, #0
 8007232:	f000 808e 	beq.w	8007352 <ai_platform_network_init+0x2e6>
 8007236:	f1b9 0f00 	cmp.w	r9, #0
 800723a:	f000 8094 	beq.w	8007366 <ai_platform_network_init+0x2fa>
 800723e:	f04f 0c01 	mov.w	ip, #1
 8007242:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8007244:	2600      	movs	r6, #0
 8007246:	83e7      	strh	r7, [r4, #30]
 8007248:	4563      	cmp	r3, ip
 800724a:	83a6      	strh	r6, [r4, #28]
 800724c:	d37a      	bcc.n	8007344 <ai_platform_network_init+0x2d8>
 800724e:	f1bc 0f00 	cmp.w	ip, #0
 8007252:	f000 809c 	beq.w	800738e <ai_platform_network_init+0x322>
 8007256:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8007258:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 800725c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800725e:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8007262:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8007266:	e74c      	b.n	8007102 <ai_platform_network_init+0x96>
 8007268:	4a35      	ldr	r2, [pc, #212]	@ (8007340 <ai_platform_network_init+0x2d4>)
 800726a:	2301      	movs	r3, #1
 800726c:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8007270:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8007274:	2b00      	cmp	r3, #0
 8007276:	d1fb      	bne.n	8007270 <ai_platform_network_init+0x204>
 8007278:	492f      	ldr	r1, [pc, #188]	@ (8007338 <ai_platform_network_init+0x2cc>)
 800727a:	4b30      	ldr	r3, [pc, #192]	@ (800733c <ai_platform_network_init+0x2d0>)
 800727c:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8007280:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8007284:	429a      	cmp	r2, r3
 8007286:	d09c      	beq.n	80071c2 <ai_platform_network_init+0x156>
 8007288:	e7fe      	b.n	8007288 <ai_platform_network_init+0x21c>
 800728a:	4a2d      	ldr	r2, [pc, #180]	@ (8007340 <ai_platform_network_init+0x2d4>)
 800728c:	2301      	movs	r3, #1
 800728e:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8007292:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8007296:	2b00      	cmp	r3, #0
 8007298:	d1fb      	bne.n	8007292 <ai_platform_network_init+0x226>
 800729a:	4b27      	ldr	r3, [pc, #156]	@ (8007338 <ai_platform_network_init+0x2cc>)
 800729c:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 80072a0:	4b26      	ldr	r3, [pc, #152]	@ (800733c <ai_platform_network_init+0x2d0>)
 80072a2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 80072a6:	429a      	cmp	r2, r3
 80072a8:	f43f af18 	beq.w	80070dc <ai_platform_network_init+0x70>
 80072ac:	e7fe      	b.n	80072ac <ai_platform_network_init+0x240>
 80072ae:	2800      	cmp	r0, #0
 80072b0:	d153      	bne.n	800735a <ai_platform_network_init+0x2ee>
 80072b2:	4680      	mov	r8, r0
 80072b4:	4684      	mov	ip, r0
 80072b6:	2e00      	cmp	r6, #0
 80072b8:	d063      	beq.n	8007382 <ai_platform_network_init+0x316>
 80072ba:	8be6      	ldrh	r6, [r4, #30]
 80072bc:	2e00      	cmp	r6, #0
 80072be:	d168      	bne.n	8007392 <ai_platform_network_init+0x326>
 80072c0:	2212      	movs	r2, #18
 80072c2:	2116      	movs	r1, #22
 80072c4:	f104 0010 	add.w	r0, r4, #16
 80072c8:	f000 fc7a 	bl	8007bc0 <core_set_error>
 80072cc:	e77c      	b.n	80071c8 <ai_platform_network_init+0x15c>
 80072ce:	4a19      	ldr	r2, [pc, #100]	@ (8007334 <ai_platform_network_init+0x2c8>)
 80072d0:	2301      	movs	r3, #1
 80072d2:	6093      	str	r3, [r2, #8]
 80072d4:	6893      	ldr	r3, [r2, #8]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1fc      	bne.n	80072d4 <ai_platform_network_init+0x268>
 80072da:	4b17      	ldr	r3, [pc, #92]	@ (8007338 <ai_platform_network_init+0x2cc>)
 80072dc:	6013      	str	r3, [r2, #0]
 80072de:	4b17      	ldr	r3, [pc, #92]	@ (800733c <ai_platform_network_init+0x2d0>)
 80072e0:	6812      	ldr	r2, [r2, #0]
 80072e2:	429a      	cmp	r2, r3
 80072e4:	f43f aefa 	beq.w	80070dc <ai_platform_network_init+0x70>
 80072e8:	e7fe      	b.n	80072e8 <ai_platform_network_init+0x27c>
 80072ea:	4a12      	ldr	r2, [pc, #72]	@ (8007334 <ai_platform_network_init+0x2c8>)
 80072ec:	2301      	movs	r3, #1
 80072ee:	6093      	str	r3, [r2, #8]
 80072f0:	6893      	ldr	r3, [r2, #8]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d1fc      	bne.n	80072f0 <ai_platform_network_init+0x284>
 80072f6:	4910      	ldr	r1, [pc, #64]	@ (8007338 <ai_platform_network_init+0x2cc>)
 80072f8:	4b10      	ldr	r3, [pc, #64]	@ (800733c <ai_platform_network_init+0x2d0>)
 80072fa:	6011      	str	r1, [r2, #0]
 80072fc:	6812      	ldr	r2, [r2, #0]
 80072fe:	429a      	cmp	r2, r3
 8007300:	f43f af5f 	beq.w	80071c2 <ai_platform_network_init+0x156>
 8007304:	e7fe      	b.n	8007304 <ai_platform_network_init+0x298>
 8007306:	4a0b      	ldr	r2, [pc, #44]	@ (8007334 <ai_platform_network_init+0x2c8>)
 8007308:	2301      	movs	r3, #1
 800730a:	6093      	str	r3, [r2, #8]
 800730c:	6893      	ldr	r3, [r2, #8]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1fc      	bne.n	800730c <ai_platform_network_init+0x2a0>
 8007312:	4b09      	ldr	r3, [pc, #36]	@ (8007338 <ai_platform_network_init+0x2cc>)
 8007314:	6013      	str	r3, [r2, #0]
 8007316:	4b09      	ldr	r3, [pc, #36]	@ (800733c <ai_platform_network_init+0x2d0>)
 8007318:	6812      	ldr	r2, [r2, #0]
 800731a:	429a      	cmp	r2, r3
 800731c:	f43f aede 	beq.w	80070dc <ai_platform_network_init+0x70>
 8007320:	e7fe      	b.n	8007320 <ai_platform_network_init+0x2b4>
 8007322:	bf00      	nop
 8007324:	a1c00100 	.word	0xa1c00100
 8007328:	e0042000 	.word	0xe0042000
 800732c:	5c001000 	.word	0x5c001000
 8007330:	a1facade 	.word	0xa1facade
 8007334:	40023000 	.word	0x40023000
 8007338:	f407a5c2 	.word	0xf407a5c2
 800733c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007340:	58024000 	.word	0x58024000
 8007344:	2213      	movs	r2, #19
 8007346:	2116      	movs	r1, #22
 8007348:	f104 0010 	add.w	r0, r4, #16
 800734c:	f000 fc38 	bl	8007bc0 <core_set_error>
 8007350:	e73a      	b.n	80071c8 <ai_platform_network_init+0x15c>
 8007352:	4607      	mov	r7, r0
 8007354:	4680      	mov	r8, r0
 8007356:	4684      	mov	ip, r0
 8007358:	e773      	b.n	8007242 <ai_platform_network_init+0x1d6>
 800735a:	f1b9 0f00 	cmp.w	r9, #0
 800735e:	d002      	beq.n	8007366 <ai_platform_network_init+0x2fa>
 8007360:	f04f 0c01 	mov.w	ip, #1
 8007364:	e7a7      	b.n	80072b6 <ai_platform_network_init+0x24a>
 8007366:	2110      	movs	r1, #16
 8007368:	2213      	movs	r2, #19
 800736a:	2600      	movs	r6, #0
 800736c:	1860      	adds	r0, r4, r1
 800736e:	f000 fc27 	bl	8007bc0 <core_set_error>
 8007372:	e729      	b.n	80071c8 <ai_platform_network_init+0x15c>
 8007374:	2110      	movs	r1, #16
 8007376:	2211      	movs	r2, #17
 8007378:	462e      	mov	r6, r5
 800737a:	1860      	adds	r0, r4, r1
 800737c:	f000 fc20 	bl	8007bc0 <core_set_error>
 8007380:	e722      	b.n	80071c8 <ai_platform_network_init+0x15c>
 8007382:	2110      	movs	r1, #16
 8007384:	2212      	movs	r2, #18
 8007386:	1860      	adds	r0, r4, r1
 8007388:	f000 fc1a 	bl	8007bc0 <core_set_error>
 800738c:	e71c      	b.n	80071c8 <ai_platform_network_init+0x15c>
 800738e:	4666      	mov	r6, ip
 8007390:	e6b7      	b.n	8007102 <ai_platform_network_init+0x96>
 8007392:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007394:	6a26      	ldr	r6, [r4, #32]
 8007396:	2701      	movs	r7, #1
 8007398:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800739a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800739e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80073a2:	e74e      	b.n	8007242 <ai_platform_network_init+0x1d6>

080073a4 <ai_platform_network_post_init>:
 80073a4:	b538      	push	{r3, r4, r5, lr}
 80073a6:	2800      	cmp	r0, #0
 80073a8:	d04e      	beq.n	8007448 <ai_platform_network_post_init+0xa4>
 80073aa:	4b8c      	ldr	r3, [pc, #560]	@ (80075dc <ai_platform_network_post_init+0x238>)
 80073ac:	4604      	mov	r4, r0
 80073ae:	6802      	ldr	r2, [r0, #0]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d149      	bne.n	8007448 <ai_platform_network_post_init+0xa4>
 80073b4:	f7fe ff8c 	bl	80062d0 <_ai_platform_acquire_crc>
 80073b8:	4b89      	ldr	r3, [pc, #548]	@ (80075e0 <ai_platform_network_post_init+0x23c>)
 80073ba:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80073c4:	189a      	adds	r2, r3, r2
 80073c6:	2a01      	cmp	r2, #1
 80073c8:	f240 8095 	bls.w	80074f6 <ai_platform_network_post_init+0x152>
 80073cc:	f240 4249 	movw	r2, #1097	@ 0x449
 80073d0:	4293      	cmp	r3, r2
 80073d2:	f000 8090 	beq.w	80074f6 <ai_platform_network_post_init+0x152>
 80073d6:	4a83      	ldr	r2, [pc, #524]	@ (80075e4 <ai_platform_network_post_init+0x240>)
 80073d8:	6813      	ldr	r3, [r2, #0]
 80073da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80073de:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 80073e2:	f000 8096 	beq.w	8007512 <ai_platform_network_post_init+0x16e>
 80073e6:	6813      	ldr	r3, [r2, #0]
 80073e8:	f240 4183 	movw	r1, #1155	@ 0x483
 80073ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80073f0:	428b      	cmp	r3, r1
 80073f2:	f000 80b8 	beq.w	8007566 <ai_platform_network_post_init+0x1c2>
 80073f6:	6813      	ldr	r3, [r2, #0]
 80073f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80073fc:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8007400:	f000 80de 	beq.w	80075c0 <ai_platform_network_post_init+0x21c>
 8007404:	6813      	ldr	r3, [r2, #0]
 8007406:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800740a:	2b00      	cmp	r3, #0
 800740c:	f000 80bd 	beq.w	800758a <ai_platform_network_post_init+0x1e6>
 8007410:	f7fe ff60 	bl	80062d4 <_ai_platform_release_crc>
 8007414:	68e3      	ldr	r3, [r4, #12]
 8007416:	f013 0502 	ands.w	r5, r3, #2
 800741a:	f000 808c 	beq.w	8007536 <ai_platform_network_post_init+0x192>
 800741e:	4620      	mov	r0, r4
 8007420:	f000 fd60 	bl	8007ee4 <ai_layers_post_init_all>
 8007424:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007426:	b16b      	cbz	r3, 8007444 <ai_platform_network_post_init+0xa0>
 8007428:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 800742a:	e007      	b.n	800743c <ai_platform_network_post_init+0x98>
 800742c:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	@ 0x3c
 8007430:	4798      	blx	r3
 8007432:	692b      	ldr	r3, [r5, #16]
 8007434:	b133      	cbz	r3, 8007444 <ai_platform_network_post_init+0xa0>
 8007436:	42ab      	cmp	r3, r5
 8007438:	461d      	mov	r5, r3
 800743a:	d003      	beq.n	8007444 <ai_platform_network_post_init+0xa0>
 800743c:	4629      	mov	r1, r5
 800743e:	2000      	movs	r0, #0
 8007440:	2d00      	cmp	r5, #0
 8007442:	d1f3      	bne.n	800742c <ai_platform_network_post_init+0x88>
 8007444:	2001      	movs	r0, #1
 8007446:	bd38      	pop	{r3, r4, r5, pc}
 8007448:	f7fe ff42 	bl	80062d0 <_ai_platform_acquire_crc>
 800744c:	4b64      	ldr	r3, [pc, #400]	@ (80075e0 <ai_platform_network_post_init+0x23c>)
 800744e:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007458:	185a      	adds	r2, r3, r1
 800745a:	2a01      	cmp	r2, #1
 800745c:	d92a      	bls.n	80074b4 <ai_platform_network_post_init+0x110>
 800745e:	f240 4249 	movw	r2, #1097	@ 0x449
 8007462:	4293      	cmp	r3, r2
 8007464:	d026      	beq.n	80074b4 <ai_platform_network_post_init+0x110>
 8007466:	4a5f      	ldr	r2, [pc, #380]	@ (80075e4 <ai_platform_network_post_init+0x240>)
 8007468:	6813      	ldr	r3, [r2, #0]
 800746a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800746e:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8007472:	d02c      	beq.n	80074ce <ai_platform_network_post_init+0x12a>
 8007474:	6813      	ldr	r3, [r2, #0]
 8007476:	f240 4183 	movw	r1, #1155	@ 0x483
 800747a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800747e:	428b      	cmp	r3, r1
 8007480:	d060      	beq.n	8007544 <ai_platform_network_post_init+0x1a0>
 8007482:	6813      	ldr	r3, [r2, #0]
 8007484:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007488:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 800748c:	f000 808b 	beq.w	80075a6 <ai_platform_network_post_init+0x202>
 8007490:	6813      	ldr	r3, [r2, #0]
 8007492:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007496:	2b00      	cmp	r3, #0
 8007498:	d129      	bne.n	80074ee <ai_platform_network_post_init+0x14a>
 800749a:	4a53      	ldr	r2, [pc, #332]	@ (80075e8 <ai_platform_network_post_init+0x244>)
 800749c:	2301      	movs	r3, #1
 800749e:	6093      	str	r3, [r2, #8]
 80074a0:	6893      	ldr	r3, [r2, #8]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d1fc      	bne.n	80074a0 <ai_platform_network_post_init+0xfc>
 80074a6:	4951      	ldr	r1, [pc, #324]	@ (80075ec <ai_platform_network_post_init+0x248>)
 80074a8:	4b51      	ldr	r3, [pc, #324]	@ (80075f0 <ai_platform_network_post_init+0x24c>)
 80074aa:	6011      	str	r1, [r2, #0]
 80074ac:	6812      	ldr	r2, [r2, #0]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d01d      	beq.n	80074ee <ai_platform_network_post_init+0x14a>
 80074b2:	e7fe      	b.n	80074b2 <ai_platform_network_post_init+0x10e>
 80074b4:	4a4c      	ldr	r2, [pc, #304]	@ (80075e8 <ai_platform_network_post_init+0x244>)
 80074b6:	2301      	movs	r3, #1
 80074b8:	6093      	str	r3, [r2, #8]
 80074ba:	6893      	ldr	r3, [r2, #8]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d1fc      	bne.n	80074ba <ai_platform_network_post_init+0x116>
 80074c0:	494a      	ldr	r1, [pc, #296]	@ (80075ec <ai_platform_network_post_init+0x248>)
 80074c2:	4b4b      	ldr	r3, [pc, #300]	@ (80075f0 <ai_platform_network_post_init+0x24c>)
 80074c4:	6011      	str	r1, [r2, #0]
 80074c6:	6812      	ldr	r2, [r2, #0]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d010      	beq.n	80074ee <ai_platform_network_post_init+0x14a>
 80074cc:	e7fe      	b.n	80074cc <ai_platform_network_post_init+0x128>
 80074ce:	4a49      	ldr	r2, [pc, #292]	@ (80075f4 <ai_platform_network_post_init+0x250>)
 80074d0:	2301      	movs	r3, #1
 80074d2:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80074d6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d1fb      	bne.n	80074d6 <ai_platform_network_post_init+0x132>
 80074de:	4943      	ldr	r1, [pc, #268]	@ (80075ec <ai_platform_network_post_init+0x248>)
 80074e0:	4b43      	ldr	r3, [pc, #268]	@ (80075f0 <ai_platform_network_post_init+0x24c>)
 80074e2:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 80074e6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d110      	bne.n	8007510 <ai_platform_network_post_init+0x16c>
 80074ee:	f7fe fef1 	bl	80062d4 <_ai_platform_release_crc>
 80074f2:	2000      	movs	r0, #0
 80074f4:	bd38      	pop	{r3, r4, r5, pc}
 80074f6:	4a3c      	ldr	r2, [pc, #240]	@ (80075e8 <ai_platform_network_post_init+0x244>)
 80074f8:	2301      	movs	r3, #1
 80074fa:	6093      	str	r3, [r2, #8]
 80074fc:	6893      	ldr	r3, [r2, #8]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d1fc      	bne.n	80074fc <ai_platform_network_post_init+0x158>
 8007502:	493a      	ldr	r1, [pc, #232]	@ (80075ec <ai_platform_network_post_init+0x248>)
 8007504:	4b3a      	ldr	r3, [pc, #232]	@ (80075f0 <ai_platform_network_post_init+0x24c>)
 8007506:	6011      	str	r1, [r2, #0]
 8007508:	6812      	ldr	r2, [r2, #0]
 800750a:	429a      	cmp	r2, r3
 800750c:	d080      	beq.n	8007410 <ai_platform_network_post_init+0x6c>
 800750e:	e7fe      	b.n	800750e <ai_platform_network_post_init+0x16a>
 8007510:	e7fe      	b.n	8007510 <ai_platform_network_post_init+0x16c>
 8007512:	4a38      	ldr	r2, [pc, #224]	@ (80075f4 <ai_platform_network_post_init+0x250>)
 8007514:	2301      	movs	r3, #1
 8007516:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800751a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800751e:	2b00      	cmp	r3, #0
 8007520:	d1fb      	bne.n	800751a <ai_platform_network_post_init+0x176>
 8007522:	4932      	ldr	r1, [pc, #200]	@ (80075ec <ai_platform_network_post_init+0x248>)
 8007524:	4b32      	ldr	r3, [pc, #200]	@ (80075f0 <ai_platform_network_post_init+0x24c>)
 8007526:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 800752a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800752e:	429a      	cmp	r2, r3
 8007530:	f43f af6e 	beq.w	8007410 <ai_platform_network_post_init+0x6c>
 8007534:	e7fe      	b.n	8007534 <ai_platform_network_post_init+0x190>
 8007536:	2210      	movs	r2, #16
 8007538:	2111      	movs	r1, #17
 800753a:	18a0      	adds	r0, r4, r2
 800753c:	f000 fb40 	bl	8007bc0 <core_set_error>
 8007540:	4628      	mov	r0, r5
 8007542:	bd38      	pop	{r3, r4, r5, pc}
 8007544:	4a2b      	ldr	r2, [pc, #172]	@ (80075f4 <ai_platform_network_post_init+0x250>)
 8007546:	2301      	movs	r3, #1
 8007548:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800754c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8007550:	2b00      	cmp	r3, #0
 8007552:	d1fb      	bne.n	800754c <ai_platform_network_post_init+0x1a8>
 8007554:	4925      	ldr	r1, [pc, #148]	@ (80075ec <ai_platform_network_post_init+0x248>)
 8007556:	4b26      	ldr	r3, [pc, #152]	@ (80075f0 <ai_platform_network_post_init+0x24c>)
 8007558:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 800755c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8007560:	429a      	cmp	r2, r3
 8007562:	d0c4      	beq.n	80074ee <ai_platform_network_post_init+0x14a>
 8007564:	e7fe      	b.n	8007564 <ai_platform_network_post_init+0x1c0>
 8007566:	4a23      	ldr	r2, [pc, #140]	@ (80075f4 <ai_platform_network_post_init+0x250>)
 8007568:	2301      	movs	r3, #1
 800756a:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800756e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8007572:	2b00      	cmp	r3, #0
 8007574:	d1fb      	bne.n	800756e <ai_platform_network_post_init+0x1ca>
 8007576:	491d      	ldr	r1, [pc, #116]	@ (80075ec <ai_platform_network_post_init+0x248>)
 8007578:	4b1d      	ldr	r3, [pc, #116]	@ (80075f0 <ai_platform_network_post_init+0x24c>)
 800757a:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 800757e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8007582:	429a      	cmp	r2, r3
 8007584:	f43f af44 	beq.w	8007410 <ai_platform_network_post_init+0x6c>
 8007588:	e7fe      	b.n	8007588 <ai_platform_network_post_init+0x1e4>
 800758a:	4a17      	ldr	r2, [pc, #92]	@ (80075e8 <ai_platform_network_post_init+0x244>)
 800758c:	2301      	movs	r3, #1
 800758e:	6093      	str	r3, [r2, #8]
 8007590:	6893      	ldr	r3, [r2, #8]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d1fc      	bne.n	8007590 <ai_platform_network_post_init+0x1ec>
 8007596:	4915      	ldr	r1, [pc, #84]	@ (80075ec <ai_platform_network_post_init+0x248>)
 8007598:	4b15      	ldr	r3, [pc, #84]	@ (80075f0 <ai_platform_network_post_init+0x24c>)
 800759a:	6011      	str	r1, [r2, #0]
 800759c:	6812      	ldr	r2, [r2, #0]
 800759e:	429a      	cmp	r2, r3
 80075a0:	f43f af36 	beq.w	8007410 <ai_platform_network_post_init+0x6c>
 80075a4:	e7fe      	b.n	80075a4 <ai_platform_network_post_init+0x200>
 80075a6:	4a10      	ldr	r2, [pc, #64]	@ (80075e8 <ai_platform_network_post_init+0x244>)
 80075a8:	2301      	movs	r3, #1
 80075aa:	6093      	str	r3, [r2, #8]
 80075ac:	6893      	ldr	r3, [r2, #8]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d1fc      	bne.n	80075ac <ai_platform_network_post_init+0x208>
 80075b2:	490e      	ldr	r1, [pc, #56]	@ (80075ec <ai_platform_network_post_init+0x248>)
 80075b4:	4b0e      	ldr	r3, [pc, #56]	@ (80075f0 <ai_platform_network_post_init+0x24c>)
 80075b6:	6011      	str	r1, [r2, #0]
 80075b8:	6812      	ldr	r2, [r2, #0]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d097      	beq.n	80074ee <ai_platform_network_post_init+0x14a>
 80075be:	e7fe      	b.n	80075be <ai_platform_network_post_init+0x21a>
 80075c0:	4a09      	ldr	r2, [pc, #36]	@ (80075e8 <ai_platform_network_post_init+0x244>)
 80075c2:	2301      	movs	r3, #1
 80075c4:	6093      	str	r3, [r2, #8]
 80075c6:	6893      	ldr	r3, [r2, #8]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d1fc      	bne.n	80075c6 <ai_platform_network_post_init+0x222>
 80075cc:	4907      	ldr	r1, [pc, #28]	@ (80075ec <ai_platform_network_post_init+0x248>)
 80075ce:	4b08      	ldr	r3, [pc, #32]	@ (80075f0 <ai_platform_network_post_init+0x24c>)
 80075d0:	6011      	str	r1, [r2, #0]
 80075d2:	6812      	ldr	r2, [r2, #0]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	f43f af1b 	beq.w	8007410 <ai_platform_network_post_init+0x6c>
 80075da:	e7fe      	b.n	80075da <ai_platform_network_post_init+0x236>
 80075dc:	a1c00100 	.word	0xa1c00100
 80075e0:	e0042000 	.word	0xe0042000
 80075e4:	5c001000 	.word	0x5c001000
 80075e8:	40023000 	.word	0x40023000
 80075ec:	f407a5c2 	.word	0xf407a5c2
 80075f0:	b5e8b5cd 	.word	0xb5e8b5cd
 80075f4:	58024000 	.word	0x58024000

080075f8 <ai_platform_network_process>:
 80075f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075fc:	b085      	sub	sp, #20
 80075fe:	460e      	mov	r6, r1
 8007600:	4605      	mov	r5, r0
 8007602:	9201      	str	r2, [sp, #4]
 8007604:	b120      	cbz	r0, 8007610 <ai_platform_network_process+0x18>
 8007606:	4b24      	ldr	r3, [pc, #144]	@ (8007698 <ai_platform_network_process+0xa0>)
 8007608:	6802      	ldr	r2, [r0, #0]
 800760a:	429a      	cmp	r2, r3
 800760c:	bf18      	it	ne
 800760e:	2500      	movne	r5, #0
 8007610:	f7fe fe5e 	bl	80062d0 <_ai_platform_acquire_crc>
 8007614:	4b21      	ldr	r3, [pc, #132]	@ (800769c <ai_platform_network_process+0xa4>)
 8007616:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007620:	185a      	adds	r2, r3, r1
 8007622:	2a01      	cmp	r2, #1
 8007624:	d92b      	bls.n	800767e <ai_platform_network_process+0x86>
 8007626:	f240 4249 	movw	r2, #1097	@ 0x449
 800762a:	4293      	cmp	r3, r2
 800762c:	d027      	beq.n	800767e <ai_platform_network_process+0x86>
 800762e:	4a1c      	ldr	r2, [pc, #112]	@ (80076a0 <ai_platform_network_process+0xa8>)
 8007630:	6813      	ldr	r3, [r2, #0]
 8007632:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007636:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 800763a:	d039      	beq.n	80076b0 <ai_platform_network_process+0xb8>
 800763c:	6813      	ldr	r3, [r2, #0]
 800763e:	f240 4183 	movw	r1, #1155	@ 0x483
 8007642:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007646:	428b      	cmp	r3, r1
 8007648:	f000 819c 	beq.w	8007984 <ai_platform_network_process+0x38c>
 800764c:	6813      	ldr	r3, [r2, #0]
 800764e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007652:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8007656:	f000 8179 	beq.w	800794c <ai_platform_network_process+0x354>
 800765a:	6813      	ldr	r3, [r2, #0]
 800765c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007660:	2b00      	cmp	r3, #0
 8007662:	d136      	bne.n	80076d2 <ai_platform_network_process+0xda>
 8007664:	4a0f      	ldr	r2, [pc, #60]	@ (80076a4 <ai_platform_network_process+0xac>)
 8007666:	2301      	movs	r3, #1
 8007668:	6093      	str	r3, [r2, #8]
 800766a:	6893      	ldr	r3, [r2, #8]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d1fc      	bne.n	800766a <ai_platform_network_process+0x72>
 8007670:	4b0d      	ldr	r3, [pc, #52]	@ (80076a8 <ai_platform_network_process+0xb0>)
 8007672:	6013      	str	r3, [r2, #0]
 8007674:	4b0d      	ldr	r3, [pc, #52]	@ (80076ac <ai_platform_network_process+0xb4>)
 8007676:	6812      	ldr	r2, [r2, #0]
 8007678:	429a      	cmp	r2, r3
 800767a:	d02a      	beq.n	80076d2 <ai_platform_network_process+0xda>
 800767c:	e7fe      	b.n	800767c <ai_platform_network_process+0x84>
 800767e:	4a09      	ldr	r2, [pc, #36]	@ (80076a4 <ai_platform_network_process+0xac>)
 8007680:	2301      	movs	r3, #1
 8007682:	6093      	str	r3, [r2, #8]
 8007684:	6893      	ldr	r3, [r2, #8]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d1fc      	bne.n	8007684 <ai_platform_network_process+0x8c>
 800768a:	4b07      	ldr	r3, [pc, #28]	@ (80076a8 <ai_platform_network_process+0xb0>)
 800768c:	6013      	str	r3, [r2, #0]
 800768e:	4b07      	ldr	r3, [pc, #28]	@ (80076ac <ai_platform_network_process+0xb4>)
 8007690:	6812      	ldr	r2, [r2, #0]
 8007692:	429a      	cmp	r2, r3
 8007694:	d01d      	beq.n	80076d2 <ai_platform_network_process+0xda>
 8007696:	e7fe      	b.n	8007696 <ai_platform_network_process+0x9e>
 8007698:	a1c00100 	.word	0xa1c00100
 800769c:	e0042000 	.word	0xe0042000
 80076a0:	5c001000 	.word	0x5c001000
 80076a4:	40023000 	.word	0x40023000
 80076a8:	f407a5c2 	.word	0xf407a5c2
 80076ac:	b5e8b5cd 	.word	0xb5e8b5cd
 80076b0:	4ab0      	ldr	r2, [pc, #704]	@ (8007974 <ai_platform_network_process+0x37c>)
 80076b2:	2301      	movs	r3, #1
 80076b4:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80076b8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d1fb      	bne.n	80076b8 <ai_platform_network_process+0xc0>
 80076c0:	4bad      	ldr	r3, [pc, #692]	@ (8007978 <ai_platform_network_process+0x380>)
 80076c2:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 80076c6:	4bad      	ldr	r3, [pc, #692]	@ (800797c <ai_platform_network_process+0x384>)
 80076c8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 80076cc:	429a      	cmp	r2, r3
 80076ce:	f040 812b 	bne.w	8007928 <ai_platform_network_process+0x330>
 80076d2:	f7fe fdff 	bl	80062d4 <_ai_platform_release_crc>
 80076d6:	2d00      	cmp	r5, #0
 80076d8:	f000 8172 	beq.w	80079c0 <ai_platform_network_process+0x3c8>
 80076dc:	8dab      	ldrh	r3, [r5, #44]	@ 0x2c
 80076de:	2b00      	cmp	r3, #0
 80076e0:	f000 8123 	beq.w	800792a <ai_platform_network_process+0x332>
 80076e4:	68eb      	ldr	r3, [r5, #12]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 80076ec:	f003 0303 	and.w	r3, r3, #3
 80076f0:	616a      	str	r2, [r5, #20]
 80076f2:	2b03      	cmp	r3, #3
 80076f4:	f040 811f 	bne.w	8007936 <ai_platform_network_process+0x33e>
 80076f8:	2e00      	cmp	r6, #0
 80076fa:	f000 8156 	beq.w	80079aa <ai_platform_network_process+0x3b2>
 80076fe:	fab8 f788 	clz	r7, r8
 8007702:	097f      	lsrs	r7, r7, #5
 8007704:	f1b8 0f00 	cmp.w	r8, #0
 8007708:	f000 814f 	beq.w	80079aa <ai_platform_network_process+0x3b2>
 800770c:	f8b8 3000 	ldrh.w	r3, [r8]
 8007710:	2b00      	cmp	r3, #0
 8007712:	f000 814a 	beq.w	80079aa <ai_platform_network_process+0x3b2>
 8007716:	69b3      	ldr	r3, [r6, #24]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	e9cd 3502 	strd	r3, r5, [sp, #8]
 800771e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d072      	beq.n	800780c <ai_platform_network_process+0x214>
 8007726:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800772a:	2c00      	cmp	r4, #0
 800772c:	d06e      	beq.n	800780c <ai_platform_network_process+0x214>
 800772e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007732:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8007736:	f8d3 a000 	ldr.w	sl, [r3]
 800773a:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 800773e:	f000 8133 	beq.w	80079a8 <ai_platform_network_process+0x3b0>
 8007742:	69a3      	ldr	r3, [r4, #24]
 8007744:	2101      	movs	r1, #1
 8007746:	4630      	mov	r0, r6
 8007748:	685d      	ldr	r5, [r3, #4]
 800774a:	f7fe fd73 	bl	8006234 <ai_buffer_get_size>
 800774e:	4285      	cmp	r5, r0
 8007750:	f0c0 8138 	bcc.w	80079c4 <ai_platform_network_process+0x3cc>
 8007754:	68e0      	ldr	r0, [r4, #12]
 8007756:	69b1      	ldr	r1, [r6, #24]
 8007758:	68c2      	ldr	r2, [r0, #12]
 800775a:	68cb      	ldr	r3, [r1, #12]
 800775c:	429a      	cmp	r2, r3
 800775e:	f040 8131 	bne.w	80079c4 <ai_platform_network_process+0x3cc>
 8007762:	6882      	ldr	r2, [r0, #8]
 8007764:	688b      	ldr	r3, [r1, #8]
 8007766:	429a      	cmp	r2, r3
 8007768:	f040 812c 	bne.w	80079c4 <ai_platform_network_process+0x3cc>
 800776c:	6842      	ldr	r2, [r0, #4]
 800776e:	684b      	ldr	r3, [r1, #4]
 8007770:	429a      	cmp	r2, r3
 8007772:	f040 8127 	bne.w	80079c4 <ai_platform_network_process+0x3cc>
 8007776:	69a3      	ldr	r3, [r4, #24]
 8007778:	e9d3 0100 	ldrd	r0, r1, [r3]
 800777c:	f004 f9bc 	bl	800baf8 <ai_array_get_data_byte_size>
 8007780:	4605      	mov	r5, r0
 8007782:	4620      	mov	r0, r4
 8007784:	f004 f9ce 	bl	800bb24 <get_tensor_byte_size>
 8007788:	4285      	cmp	r5, r0
 800778a:	f0c0 811b 	bcc.w	80079c4 <ai_platform_network_process+0x3cc>
 800778e:	69a3      	ldr	r3, [r4, #24]
 8007790:	6818      	ldr	r0, [r3, #0]
 8007792:	f004 f91d 	bl	800b9d0 <ai_array_to_buffer_fmt>
 8007796:	6833      	ldr	r3, [r6, #0]
 8007798:	4058      	eors	r0, r3
 800779a:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 800779e:	f040 81c8 	bne.w	8007b32 <ai_platform_network_process+0x53a>
 80077a2:	6873      	ldr	r3, [r6, #4]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	f000 81bb 	beq.w	8007b20 <ai_platform_network_process+0x528>
 80077aa:	69b3      	ldr	r3, [r6, #24]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	f000 81c8 	beq.w	8007b44 <ai_platform_network_process+0x54c>
 80077b4:	9a02      	ldr	r2, [sp, #8]
 80077b6:	4620      	mov	r0, r4
 80077b8:	3701      	adds	r7, #1
 80077ba:	361c      	adds	r6, #28
 80077bc:	429a      	cmp	r2, r3
 80077be:	bf38      	it	cc
 80077c0:	461a      	movcc	r2, r3
 80077c2:	9202      	str	r2, [sp, #8]
 80077c4:	f004 f9ae 	bl	800bb24 <get_tensor_byte_size>
 80077c8:	f8c9 0008 	str.w	r0, [r9, #8]
 80077cc:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	fb00 f303 	mul.w	r3, r0, r3
 80077d6:	f8c9 300c 	str.w	r3, [r9, #12]
 80077da:	f856 1c18 	ldr.w	r1, [r6, #-24]
 80077de:	440b      	add	r3, r1
 80077e0:	f8c9 1004 	str.w	r1, [r9, #4]
 80077e4:	f84a 300b 	str.w	r3, [sl, fp]
 80077e8:	69a0      	ldr	r0, [r4, #24]
 80077ea:	6803      	ldr	r3, [r0, #0]
 80077ec:	009a      	lsls	r2, r3, #2
 80077ee:	f100 80bb 	bmi.w	8007968 <ai_platform_network_process+0x370>
 80077f2:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80077f6:	1a9b      	subs	r3, r3, r2
 80077f8:	4419      	add	r1, r3
 80077fa:	6081      	str	r1, [r0, #8]
 80077fc:	69a3      	ldr	r3, [r4, #24]
 80077fe:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8007802:	60da      	str	r2, [r3, #12]
 8007804:	f8b8 3000 	ldrh.w	r3, [r8]
 8007808:	42bb      	cmp	r3, r7
 800780a:	d888      	bhi.n	800771e <ai_platform_network_process+0x126>
 800780c:	9d03      	ldr	r5, [sp, #12]
 800780e:	9b01      	ldr	r3, [sp, #4]
 8007810:	8daa      	ldrh	r2, [r5, #44]	@ 0x2c
 8007812:	2b00      	cmp	r3, #0
 8007814:	f000 819f 	beq.w	8007b56 <ai_platform_network_process+0x55e>
 8007818:	2a01      	cmp	r2, #1
 800781a:	f240 8179 	bls.w	8007b10 <ai_platform_network_process+0x518>
 800781e:	f8d5 9030 	ldr.w	r9, [r5, #48]	@ 0x30
 8007822:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007826:	2b00      	cmp	r3, #0
 8007828:	f000 8172 	beq.w	8007b10 <ai_platform_network_process+0x518>
 800782c:	9e01      	ldr	r6, [sp, #4]
 800782e:	2700      	movs	r7, #0
 8007830:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007834:	2b00      	cmp	r3, #0
 8007836:	f000 80d3 	beq.w	80079e0 <ai_platform_network_process+0x3e8>
 800783a:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800783e:	2c00      	cmp	r4, #0
 8007840:	f000 80ce 	beq.w	80079e0 <ai_platform_network_process+0x3e8>
 8007844:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8007848:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800784c:	f8d3 8000 	ldr.w	r8, [r3]
 8007850:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8007854:	f000 819d 	beq.w	8007b92 <ai_platform_network_process+0x59a>
 8007858:	69a3      	ldr	r3, [r4, #24]
 800785a:	2101      	movs	r1, #1
 800785c:	4630      	mov	r0, r6
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	9301      	str	r3, [sp, #4]
 8007862:	f7fe fce7 	bl	8006234 <ai_buffer_get_size>
 8007866:	9b01      	ldr	r3, [sp, #4]
 8007868:	4283      	cmp	r3, r0
 800786a:	f0c0 8151 	bcc.w	8007b10 <ai_platform_network_process+0x518>
 800786e:	68e0      	ldr	r0, [r4, #12]
 8007870:	69b1      	ldr	r1, [r6, #24]
 8007872:	68c2      	ldr	r2, [r0, #12]
 8007874:	68cb      	ldr	r3, [r1, #12]
 8007876:	429a      	cmp	r2, r3
 8007878:	f040 814a 	bne.w	8007b10 <ai_platform_network_process+0x518>
 800787c:	6882      	ldr	r2, [r0, #8]
 800787e:	688b      	ldr	r3, [r1, #8]
 8007880:	429a      	cmp	r2, r3
 8007882:	f040 8145 	bne.w	8007b10 <ai_platform_network_process+0x518>
 8007886:	6842      	ldr	r2, [r0, #4]
 8007888:	684b      	ldr	r3, [r1, #4]
 800788a:	429a      	cmp	r2, r3
 800788c:	f040 8140 	bne.w	8007b10 <ai_platform_network_process+0x518>
 8007890:	69a3      	ldr	r3, [r4, #24]
 8007892:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007896:	f004 f92f 	bl	800baf8 <ai_array_get_data_byte_size>
 800789a:	9001      	str	r0, [sp, #4]
 800789c:	4620      	mov	r0, r4
 800789e:	f004 f941 	bl	800bb24 <get_tensor_byte_size>
 80078a2:	9b01      	ldr	r3, [sp, #4]
 80078a4:	4283      	cmp	r3, r0
 80078a6:	f0c0 8133 	bcc.w	8007b10 <ai_platform_network_process+0x518>
 80078aa:	69a3      	ldr	r3, [r4, #24]
 80078ac:	6818      	ldr	r0, [r3, #0]
 80078ae:	f004 f88f 	bl	800b9d0 <ai_array_to_buffer_fmt>
 80078b2:	6833      	ldr	r3, [r6, #0]
 80078b4:	4058      	eors	r0, r3
 80078b6:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 80078ba:	f040 815a 	bne.w	8007b72 <ai_platform_network_process+0x57a>
 80078be:	6873      	ldr	r3, [r6, #4]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	f000 814e 	beq.w	8007b62 <ai_platform_network_process+0x56a>
 80078c6:	69b3      	ldr	r3, [r6, #24]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	f000 8159 	beq.w	8007b82 <ai_platform_network_process+0x58a>
 80078d0:	9a02      	ldr	r2, [sp, #8]
 80078d2:	4620      	mov	r0, r4
 80078d4:	3701      	adds	r7, #1
 80078d6:	361c      	adds	r6, #28
 80078d8:	429a      	cmp	r2, r3
 80078da:	bf38      	it	cc
 80078dc:	461a      	movcc	r2, r3
 80078de:	9202      	str	r2, [sp, #8]
 80078e0:	f004 f920 	bl	800bb24 <get_tensor_byte_size>
 80078e4:	f8ca 0008 	str.w	r0, [sl, #8]
 80078e8:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	fb00 f303 	mul.w	r3, r0, r3
 80078f2:	f8ca 300c 	str.w	r3, [sl, #12]
 80078f6:	f856 1c18 	ldr.w	r1, [r6, #-24]
 80078fa:	440b      	add	r3, r1
 80078fc:	f8ca 1004 	str.w	r1, [sl, #4]
 8007900:	f848 300b 	str.w	r3, [r8, fp]
 8007904:	69a0      	ldr	r0, [r4, #24]
 8007906:	6803      	ldr	r3, [r0, #0]
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	d464      	bmi.n	80079d6 <ai_platform_network_process+0x3de>
 800790c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8007910:	1a9b      	subs	r3, r3, r2
 8007912:	4419      	add	r1, r3
 8007914:	6081      	str	r1, [r0, #8]
 8007916:	69a3      	ldr	r3, [r4, #24]
 8007918:	f8da 2004 	ldr.w	r2, [sl, #4]
 800791c:	60da      	str	r2, [r3, #12]
 800791e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007922:	429f      	cmp	r7, r3
 8007924:	d384      	bcc.n	8007830 <ai_platform_network_process+0x238>
 8007926:	e05b      	b.n	80079e0 <ai_platform_network_process+0x3e8>
 8007928:	e7fe      	b.n	8007928 <ai_platform_network_process+0x330>
 800792a:	68ea      	ldr	r2, [r5, #12]
 800792c:	616b      	str	r3, [r5, #20]
 800792e:	f002 0203 	and.w	r2, r2, #3
 8007932:	2a03      	cmp	r2, #3
 8007934:	d039      	beq.n	80079aa <ai_platform_network_process+0x3b2>
 8007936:	2230      	movs	r2, #48	@ 0x30
 8007938:	2111      	movs	r1, #17
 800793a:	f105 0010 	add.w	r0, r5, #16
 800793e:	2400      	movs	r4, #0
 8007940:	f000 f93e 	bl	8007bc0 <core_set_error>
 8007944:	4620      	mov	r0, r4
 8007946:	b005      	add	sp, #20
 8007948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800794c:	4a0c      	ldr	r2, [pc, #48]	@ (8007980 <ai_platform_network_process+0x388>)
 800794e:	2301      	movs	r3, #1
 8007950:	6093      	str	r3, [r2, #8]
 8007952:	6893      	ldr	r3, [r2, #8]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d1fc      	bne.n	8007952 <ai_platform_network_process+0x35a>
 8007958:	4b07      	ldr	r3, [pc, #28]	@ (8007978 <ai_platform_network_process+0x380>)
 800795a:	6013      	str	r3, [r2, #0]
 800795c:	4b07      	ldr	r3, [pc, #28]	@ (800797c <ai_platform_network_process+0x384>)
 800795e:	6812      	ldr	r2, [r2, #0]
 8007960:	429a      	cmp	r2, r3
 8007962:	f43f aeb6 	beq.w	80076d2 <ai_platform_network_process+0xda>
 8007966:	e7fe      	b.n	8007966 <ai_platform_network_process+0x36e>
 8007968:	f8b8 3000 	ldrh.w	r3, [r8]
 800796c:	429f      	cmp	r7, r3
 800796e:	f4ff aed6 	bcc.w	800771e <ai_platform_network_process+0x126>
 8007972:	e74b      	b.n	800780c <ai_platform_network_process+0x214>
 8007974:	58024000 	.word	0x58024000
 8007978:	f407a5c2 	.word	0xf407a5c2
 800797c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007980:	40023000 	.word	0x40023000
 8007984:	4a87      	ldr	r2, [pc, #540]	@ (8007ba4 <ai_platform_network_process+0x5ac>)
 8007986:	2301      	movs	r3, #1
 8007988:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800798c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8007990:	2b00      	cmp	r3, #0
 8007992:	d1fb      	bne.n	800798c <ai_platform_network_process+0x394>
 8007994:	4b84      	ldr	r3, [pc, #528]	@ (8007ba8 <ai_platform_network_process+0x5b0>)
 8007996:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 800799a:	4b84      	ldr	r3, [pc, #528]	@ (8007bac <ai_platform_network_process+0x5b4>)
 800799c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 80079a0:	429a      	cmp	r2, r3
 80079a2:	f43f ae96 	beq.w	80076d2 <ai_platform_network_process+0xda>
 80079a6:	e7fe      	b.n	80079a6 <ai_platform_network_process+0x3ae>
 80079a8:	9d03      	ldr	r5, [sp, #12]
 80079aa:	2400      	movs	r4, #0
 80079ac:	2217      	movs	r2, #23
 80079ae:	2112      	movs	r1, #18
 80079b0:	f105 0010 	add.w	r0, r5, #16
 80079b4:	f000 f904 	bl	8007bc0 <core_set_error>
 80079b8:	4620      	mov	r0, r4
 80079ba:	b005      	add	sp, #20
 80079bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079c0:	462c      	mov	r4, r5
 80079c2:	e7bf      	b.n	8007944 <ai_platform_network_process+0x34c>
 80079c4:	9d03      	ldr	r5, [sp, #12]
 80079c6:	2218      	movs	r2, #24
 80079c8:	2112      	movs	r1, #18
 80079ca:	2400      	movs	r4, #0
 80079cc:	f105 0010 	add.w	r0, r5, #16
 80079d0:	f000 f8f6 	bl	8007bc0 <core_set_error>
 80079d4:	e7b6      	b.n	8007944 <ai_platform_network_process+0x34c>
 80079d6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80079da:	429f      	cmp	r7, r3
 80079dc:	f4ff af28 	bcc.w	8007830 <ai_platform_network_process+0x238>
 80079e0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80079e4:	8daa      	ldrh	r2, [r5, #44]	@ 0x2c
 80079e6:	82ab      	strh	r3, [r5, #20]
 80079e8:	2a00      	cmp	r2, #0
 80079ea:	f040 808b 	bne.w	8007b04 <ai_platform_network_process+0x50c>
 80079ee:	4616      	mov	r6, r2
 80079f0:	4617      	mov	r7, r2
 80079f2:	8aec      	ldrh	r4, [r5, #22]
 80079f4:	429c      	cmp	r4, r3
 80079f6:	d2a5      	bcs.n	8007944 <ai_platform_network_process+0x34c>
 80079f8:	46ab      	mov	fp, r5
 80079fa:	2e00      	cmp	r6, #0
 80079fc:	d030      	beq.n	8007a60 <ai_platform_network_process+0x468>
 80079fe:	f04f 0800 	mov.w	r8, #0
 8007a02:	e014      	b.n	8007a2e <ai_platform_network_process+0x436>
 8007a04:	6882      	ldr	r2, [r0, #8]
 8007a06:	68c5      	ldr	r5, [r0, #12]
 8007a08:	6863      	ldr	r3, [r4, #4]
 8007a0a:	1b52      	subs	r2, r2, r5
 8007a0c:	4413      	add	r3, r2
 8007a0e:	6083      	str	r3, [r0, #8]
 8007a10:	698b      	ldr	r3, [r1, #24]
 8007a12:	6862      	ldr	r2, [r4, #4]
 8007a14:	60da      	str	r2, [r3, #12]
 8007a16:	f859 200a 	ldr.w	r2, [r9, sl]
 8007a1a:	f108 0801 	add.w	r8, r8, #1
 8007a1e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8007a22:	440b      	add	r3, r1
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d301      	bcc.n	8007a2c <ai_platform_network_process+0x434>
 8007a28:	68e3      	ldr	r3, [r4, #12]
 8007a2a:	1ad3      	subs	r3, r2, r3
 8007a2c:	6063      	str	r3, [r4, #4]
 8007a2e:	8833      	ldrh	r3, [r6, #0]
 8007a30:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8007a34:	4543      	cmp	r3, r8
 8007a36:	d913      	bls.n	8007a60 <ai_platform_network_process+0x468>
 8007a38:	6873      	ldr	r3, [r6, #4]
 8007a3a:	b18b      	cbz	r3, 8007a60 <ai_platform_network_process+0x468>
 8007a3c:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8007a40:	b171      	cbz	r1, 8007a60 <ai_platform_network_process+0x468>
 8007a42:	6988      	ldr	r0, [r1, #24]
 8007a44:	68b2      	ldr	r2, [r6, #8]
 8007a46:	6803      	ldr	r3, [r0, #0]
 8007a48:	f8d2 9000 	ldr.w	r9, [r2]
 8007a4c:	009d      	lsls	r5, r3, #2
 8007a4e:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8007a52:	d5d7      	bpl.n	8007a04 <ai_platform_network_process+0x40c>
 8007a54:	6881      	ldr	r1, [r0, #8]
 8007a56:	68a2      	ldr	r2, [r4, #8]
 8007a58:	6860      	ldr	r0, [r4, #4]
 8007a5a:	f002 fb99 	bl	800a190 <st_int8_copy>
 8007a5e:	e7da      	b.n	8007a16 <ai_platform_network_process+0x41e>
 8007a60:	4658      	mov	r0, fp
 8007a62:	f000 fa53 	bl	8007f0c <ai_layers_forward_all>
 8007a66:	2f00      	cmp	r7, #0
 8007a68:	d03d      	beq.n	8007ae6 <ai_platform_network_process+0x4ee>
 8007a6a:	2400      	movs	r4, #0
 8007a6c:	e016      	b.n	8007a9c <ai_platform_network_process+0x4a4>
 8007a6e:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8007a72:	f859 100a 	ldr.w	r1, [r9, sl]
 8007a76:	4413      	add	r3, r2
 8007a78:	428b      	cmp	r3, r1
 8007a7a:	d302      	bcc.n	8007a82 <ai_platform_network_process+0x48a>
 8007a7c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007a80:	1acb      	subs	r3, r1, r3
 8007a82:	f8c8 3004 	str.w	r3, [r8, #4]
 8007a86:	6981      	ldr	r1, [r0, #24]
 8007a88:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8007a8c:	1b52      	subs	r2, r2, r5
 8007a8e:	4413      	add	r3, r2
 8007a90:	608b      	str	r3, [r1, #8]
 8007a92:	6983      	ldr	r3, [r0, #24]
 8007a94:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007a98:	60da      	str	r2, [r3, #12]
 8007a9a:	3401      	adds	r4, #1
 8007a9c:	883b      	ldrh	r3, [r7, #0]
 8007a9e:	42a3      	cmp	r3, r4
 8007aa0:	d921      	bls.n	8007ae6 <ai_platform_network_process+0x4ee>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	b1fb      	cbz	r3, 8007ae6 <ai_platform_network_process+0x4ee>
 8007aa6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007aaa:	b1e0      	cbz	r0, 8007ae6 <ai_platform_network_process+0x4ee>
 8007aac:	68ba      	ldr	r2, [r7, #8]
 8007aae:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8007ab2:	6983      	ldr	r3, [r0, #24]
 8007ab4:	f8d2 9000 	ldr.w	r9, [r2]
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8007abe:	0092      	lsls	r2, r2, #2
 8007ac0:	d5d5      	bpl.n	8007a6e <ai_platform_network_process+0x476>
 8007ac2:	6898      	ldr	r0, [r3, #8]
 8007ac4:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8007ac8:	f002 fb62 	bl	800a190 <st_int8_copy>
 8007acc:	f859 200a 	ldr.w	r2, [r9, sl]
 8007ad0:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8007ad4:	440b      	add	r3, r1
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d302      	bcc.n	8007ae0 <ai_platform_network_process+0x4e8>
 8007ada:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007ade:	1ad3      	subs	r3, r2, r3
 8007ae0:	f8c8 3004 	str.w	r3, [r8, #4]
 8007ae4:	e7d9      	b.n	8007a9a <ai_platform_network_process+0x4a2>
 8007ae6:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8007aea:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8007aee:	3401      	adds	r4, #1
 8007af0:	b2a4      	uxth	r4, r4
 8007af2:	42a3      	cmp	r3, r4
 8007af4:	f8ab 4016 	strh.w	r4, [fp, #22]
 8007af8:	f63f af7f 	bhi.w	80079fa <ai_platform_network_process+0x402>
 8007afc:	4620      	mov	r0, r4
 8007afe:	b005      	add	sp, #20
 8007b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b04:	2a01      	cmp	r2, #1
 8007b06:	6b2e      	ldr	r6, [r5, #48]	@ 0x30
 8007b08:	d029      	beq.n	8007b5e <ai_platform_network_process+0x566>
 8007b0a:	f106 070c 	add.w	r7, r6, #12
 8007b0e:	e770      	b.n	80079f2 <ai_platform_network_process+0x3fa>
 8007b10:	2218      	movs	r2, #24
 8007b12:	2113      	movs	r1, #19
 8007b14:	f105 0010 	add.w	r0, r5, #16
 8007b18:	2400      	movs	r4, #0
 8007b1a:	f000 f851 	bl	8007bc0 <core_set_error>
 8007b1e:	e711      	b.n	8007944 <ai_platform_network_process+0x34c>
 8007b20:	9d03      	ldr	r5, [sp, #12]
 8007b22:	4604      	mov	r4, r0
 8007b24:	2217      	movs	r2, #23
 8007b26:	2112      	movs	r1, #18
 8007b28:	f105 0010 	add.w	r0, r5, #16
 8007b2c:	f000 f848 	bl	8007bc0 <core_set_error>
 8007b30:	e708      	b.n	8007944 <ai_platform_network_process+0x34c>
 8007b32:	9d03      	ldr	r5, [sp, #12]
 8007b34:	2219      	movs	r2, #25
 8007b36:	2112      	movs	r1, #18
 8007b38:	2400      	movs	r4, #0
 8007b3a:	f105 0010 	add.w	r0, r5, #16
 8007b3e:	f000 f83f 	bl	8007bc0 <core_set_error>
 8007b42:	e6ff      	b.n	8007944 <ai_platform_network_process+0x34c>
 8007b44:	9d03      	ldr	r5, [sp, #12]
 8007b46:	4604      	mov	r4, r0
 8007b48:	2221      	movs	r2, #33	@ 0x21
 8007b4a:	2112      	movs	r1, #18
 8007b4c:	f105 0010 	add.w	r0, r5, #16
 8007b50:	f000 f836 	bl	8007bc0 <core_set_error>
 8007b54:	e6f6      	b.n	8007944 <ai_platform_network_process+0x34c>
 8007b56:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8007b5a:	82ab      	strh	r3, [r5, #20]
 8007b5c:	e744      	b.n	80079e8 <ai_platform_network_process+0x3f0>
 8007b5e:	2700      	movs	r7, #0
 8007b60:	e747      	b.n	80079f2 <ai_platform_network_process+0x3fa>
 8007b62:	4604      	mov	r4, r0
 8007b64:	2217      	movs	r2, #23
 8007b66:	2113      	movs	r1, #19
 8007b68:	f105 0010 	add.w	r0, r5, #16
 8007b6c:	f000 f828 	bl	8007bc0 <core_set_error>
 8007b70:	e6e8      	b.n	8007944 <ai_platform_network_process+0x34c>
 8007b72:	2219      	movs	r2, #25
 8007b74:	2113      	movs	r1, #19
 8007b76:	f105 0010 	add.w	r0, r5, #16
 8007b7a:	2400      	movs	r4, #0
 8007b7c:	f000 f820 	bl	8007bc0 <core_set_error>
 8007b80:	e6e0      	b.n	8007944 <ai_platform_network_process+0x34c>
 8007b82:	4604      	mov	r4, r0
 8007b84:	2221      	movs	r2, #33	@ 0x21
 8007b86:	2113      	movs	r1, #19
 8007b88:	f105 0010 	add.w	r0, r5, #16
 8007b8c:	f000 f818 	bl	8007bc0 <core_set_error>
 8007b90:	e6d8      	b.n	8007944 <ai_platform_network_process+0x34c>
 8007b92:	2217      	movs	r2, #23
 8007b94:	2113      	movs	r1, #19
 8007b96:	f105 0010 	add.w	r0, r5, #16
 8007b9a:	4654      	mov	r4, sl
 8007b9c:	f000 f810 	bl	8007bc0 <core_set_error>
 8007ba0:	e6d0      	b.n	8007944 <ai_platform_network_process+0x34c>
 8007ba2:	bf00      	nop
 8007ba4:	58024000 	.word	0x58024000
 8007ba8:	f407a5c2 	.word	0xf407a5c2
 8007bac:	b5e8b5cd 	.word	0xb5e8b5cd

08007bb0 <core_init>:
 8007bb0:	2001      	movs	r0, #1
 8007bb2:	4770      	bx	lr

08007bb4 <core_get_error>:
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	6800      	ldr	r0, [r0, #0]
 8007bba:	601a      	str	r2, [r3, #0]
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop

08007bc0 <core_set_error>:
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	7800      	ldrb	r0, [r0, #0]
 8007bc4:	b108      	cbz	r0, 8007bca <core_set_error+0xa>
 8007bc6:	2000      	movs	r0, #0
 8007bc8:	4770      	bx	lr
 8007bca:	7019      	strb	r1, [r3, #0]
 8007bcc:	2001      	movs	r0, #1
 8007bce:	6819      	ldr	r1, [r3, #0]
 8007bd0:	f362 211f 	bfi	r1, r2, #8, #24
 8007bd4:	6019      	str	r1, [r3, #0]
 8007bd6:	4770      	bx	lr

08007bd8 <node_convert>:
 8007bd8:	6982      	ldr	r2, [r0, #24]
 8007bda:	8813      	ldrh	r3, [r2, #0]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d04a      	beq.n	8007c76 <node_convert+0x9e>
 8007be0:	6852      	ldr	r2, [r2, #4]
 8007be2:	6850      	ldr	r0, [r2, #4]
 8007be4:	b100      	cbz	r0, 8007be8 <node_convert+0x10>
 8007be6:	6800      	ldr	r0, [r0, #0]
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	f000 813d 	beq.w	8007e68 <node_convert+0x290>
 8007bee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bf2:	6915      	ldr	r5, [r2, #16]
 8007bf4:	b105      	cbz	r5, 8007bf8 <node_convert+0x20>
 8007bf6:	682d      	ldr	r5, [r5, #0]
 8007bf8:	6883      	ldr	r3, [r0, #8]
 8007bfa:	0a1b      	lsrs	r3, r3, #8
 8007bfc:	f000 80ee 	beq.w	8007ddc <node_convert+0x204>
 8007c00:	68c1      	ldr	r1, [r0, #12]
 8007c02:	2401      	movs	r4, #1
 8007c04:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8007c08:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007c0c:	4299      	cmp	r1, r3
 8007c0e:	fb02 f404 	mul.w	r4, r2, r4
 8007c12:	d1f9      	bne.n	8007c08 <node_convert+0x30>
 8007c14:	6982      	ldr	r2, [r0, #24]
 8007c16:	69af      	ldr	r7, [r5, #24]
 8007c18:	6813      	ldr	r3, [r2, #0]
 8007c1a:	f3c3 4143 	ubfx	r1, r3, #17, #4
 8007c1e:	2901      	cmp	r1, #1
 8007c20:	d02b      	beq.n	8007c7a <node_convert+0xa2>
 8007c22:	6801      	ldr	r1, [r0, #0]
 8007c24:	68bd      	ldr	r5, [r7, #8]
 8007c26:	2900      	cmp	r1, #0
 8007c28:	d069      	beq.n	8007cfe <node_convert+0x126>
 8007c2a:	684e      	ldr	r6, [r1, #4]
 8007c2c:	f3c3 50c0 	ubfx	r0, r3, #23, #1
 8007c30:	6892      	ldr	r2, [r2, #8]
 8007c32:	2e00      	cmp	r6, #0
 8007c34:	f000 80b8 	beq.w	8007da8 <node_convert+0x1d0>
 8007c38:	884b      	ldrh	r3, [r1, #2]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	f000 8089 	beq.w	8007d52 <node_convert+0x17a>
 8007c40:	6833      	ldr	r3, [r6, #0]
 8007c42:	ed93 7a00 	vldr	s14, [r3]
 8007c46:	6873      	ldr	r3, [r6, #4]
 8007c48:	2800      	cmp	r0, #0
 8007c4a:	f000 80c5 	beq.w	8007dd8 <node_convert+0x200>
 8007c4e:	f993 0000 	ldrsb.w	r0, [r3]
 8007c52:	b174      	cbz	r4, 8007c72 <node_convert+0x9a>
 8007c54:	4629      	mov	r1, r5
 8007c56:	4414      	add	r4, r2
 8007c58:	f912 3b01 	ldrsb.w	r3, [r2], #1
 8007c5c:	1a1b      	subs	r3, r3, r0
 8007c5e:	42a2      	cmp	r2, r4
 8007c60:	ee07 3a90 	vmov	s15, r3
 8007c64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007c6c:	ece1 7a01 	vstmia	r1!, {s15}
 8007c70:	d1f2      	bne.n	8007c58 <node_convert+0x80>
 8007c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	deff      	udf	#255	@ 0xff
 8007c7a:	682e      	ldr	r6, [r5, #0]
 8007c7c:	6895      	ldr	r5, [r2, #8]
 8007c7e:	2e00      	cmp	r6, #0
 8007c80:	f000 80ae 	beq.w	8007de0 <node_convert+0x208>
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	6871      	ldr	r1, [r6, #4]
 8007c88:	68ba      	ldr	r2, [r7, #8]
 8007c8a:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 8007c8e:	2900      	cmp	r1, #0
 8007c90:	d064      	beq.n	8007d5c <node_convert+0x184>
 8007c92:	8870      	ldrh	r0, [r6, #2]
 8007c94:	2800      	cmp	r0, #0
 8007c96:	d067      	beq.n	8007d68 <node_convert+0x190>
 8007c98:	6808      	ldr	r0, [r1, #0]
 8007c9a:	edd0 7a00 	vldr	s15, [r0]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	f000 80d7 	beq.w	8007e52 <node_convert+0x27a>
 8007ca4:	684b      	ldr	r3, [r1, #4]
 8007ca6:	f993 3000 	ldrsb.w	r3, [r3]
 8007caa:	ee06 3a90 	vmov	s13, r3
 8007cae:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007cb2:	2c00      	cmp	r4, #0
 8007cb4:	d0dd      	beq.n	8007c72 <node_convert+0x9a>
 8007cb6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007cba:	4414      	add	r4, r2
 8007cbc:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8007cc0:	ed9f 5a6b 	vldr	s10, [pc, #428]	@ 8007e70 <node_convert+0x298>
 8007cc4:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8007cc8:	ecb5 7a01 	vldmia	r5!, {s14}
 8007ccc:	eef0 7a66 	vmov.f32	s15, s13
 8007cd0:	eee7 7a06 	vfma.f32	s15, s14, s12
 8007cd4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cdc:	bfac      	ite	ge
 8007cde:	ee77 7aa5 	vaddge.f32	s15, s15, s11
 8007ce2:	ee77 7ac5 	vsublt.f32	s15, s15, s10
 8007ce6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007cea:	ee17 3a90 	vmov	r3, s15
 8007cee:	f303 0307 	ssat	r3, #8, r3
 8007cf2:	f802 3b01 	strb.w	r3, [r2], #1
 8007cf6:	42a2      	cmp	r2, r4
 8007cf8:	d1e6      	bne.n	8007cc8 <node_convert+0xf0>
 8007cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cfe:	f3c3 11c6 	ubfx	r1, r3, #7, #7
 8007d02:	f003 067f 	and.w	r6, r3, #127	@ 0x7f
 8007d06:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 8007d0a:	6890      	ldr	r0, [r2, #8]
 8007d0c:	1b8e      	subs	r6, r1, r6
 8007d0e:	2908      	cmp	r1, #8
 8007d10:	4622      	mov	r2, r4
 8007d12:	4629      	mov	r1, r5
 8007d14:	f106 0640 	add.w	r6, r6, #64	@ 0x40
 8007d18:	eba6 0603 	sub.w	r6, r6, r3
 8007d1c:	f000 808b 	beq.w	8007e36 <node_convert+0x25e>
 8007d20:	f003 fd8c 	bl	800b83c <arm_q15_to_float>
 8007d24:	2e00      	cmp	r6, #0
 8007d26:	d0a4      	beq.n	8007c72 <node_convert+0x9a>
 8007d28:	ee07 6a90 	vmov	s15, r6
 8007d2c:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8007d30:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8007d34:	f006 fd2c 	bl	800e790 <powf>
 8007d38:	2c00      	cmp	r4, #0
 8007d3a:	d09a      	beq.n	8007c72 <node_convert+0x9a>
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	ecf5 7a01 	vldmia	r5!, {s15}
 8007d42:	3301      	adds	r3, #1
 8007d44:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007d48:	429c      	cmp	r4, r3
 8007d4a:	ed45 7a01 	vstr	s15, [r5, #-4]
 8007d4e:	d1f6      	bne.n	8007d3e <node_convert+0x166>
 8007d50:	e78f      	b.n	8007c72 <node_convert+0x9a>
 8007d52:	b358      	cbz	r0, 8007dac <node_convert+0x1d4>
 8007d54:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8007e74 <node_convert+0x29c>
 8007d58:	4618      	mov	r0, r3
 8007d5a:	e77a      	b.n	8007c52 <node_convert+0x7a>
 8007d5c:	b133      	cbz	r3, 8007d6c <node_convert+0x194>
 8007d5e:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8007e74 <node_convert+0x29c>
 8007d62:	eef0 7a66 	vmov.f32	s15, s13
 8007d66:	e7a4      	b.n	8007cb2 <node_convert+0xda>
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d1f8      	bne.n	8007d5e <node_convert+0x186>
 8007d6c:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8007d70:	eddf 7a40 	vldr	s15, [pc, #256]	@ 8007e74 <node_convert+0x29c>
 8007d74:	2c00      	cmp	r4, #0
 8007d76:	f43f af7c 	beq.w	8007c72 <node_convert+0x9a>
 8007d7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d7e:	4414      	add	r4, r2
 8007d80:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8007d84:	ecb5 7a01 	vldmia	r5!, {s14}
 8007d88:	eef0 7a66 	vmov.f32	s15, s13
 8007d8c:	eee7 7a06 	vfma.f32	s15, s14, s12
 8007d90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d94:	ee17 3a90 	vmov	r3, s15
 8007d98:	f383 0308 	usat	r3, #8, r3
 8007d9c:	f802 3b01 	strb.w	r3, [r2], #1
 8007da0:	42a2      	cmp	r2, r4
 8007da2:	d1ef      	bne.n	8007d84 <node_convert+0x1ac>
 8007da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007da8:	2800      	cmp	r0, #0
 8007daa:	d147      	bne.n	8007e3c <node_convert+0x264>
 8007dac:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8007e74 <node_convert+0x29c>
 8007db0:	2c00      	cmp	r4, #0
 8007db2:	f43f af5e 	beq.w	8007c72 <node_convert+0x9a>
 8007db6:	4629      	mov	r1, r5
 8007db8:	4414      	add	r4, r2
 8007dba:	f812 3b01 	ldrb.w	r3, [r2], #1
 8007dbe:	1a1b      	subs	r3, r3, r0
 8007dc0:	42a2      	cmp	r2, r4
 8007dc2:	ee07 3a90 	vmov	s15, r3
 8007dc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007dca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007dce:	ece1 7a01 	vstmia	r1!, {s15}
 8007dd2:	d1f2      	bne.n	8007dba <node_convert+0x1e2>
 8007dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dd8:	7818      	ldrb	r0, [r3, #0]
 8007dda:	e7e9      	b.n	8007db0 <node_convert+0x1d8>
 8007ddc:	2401      	movs	r4, #1
 8007dde:	e719      	b.n	8007c14 <node_convert+0x3c>
 8007de0:	683a      	ldr	r2, [r7, #0]
 8007de2:	f3c2 18c6 	ubfx	r8, r2, #7, #7
 8007de6:	f002 037f 	and.w	r3, r2, #127	@ 0x7f
 8007dea:	f3c2 52c0 	ubfx	r2, r2, #23, #1
 8007dee:	eba8 0303 	sub.w	r3, r8, r3
 8007df2:	3340      	adds	r3, #64	@ 0x40
 8007df4:	1a9b      	subs	r3, r3, r2
 8007df6:	d014      	beq.n	8007e22 <node_convert+0x24a>
 8007df8:	425b      	negs	r3, r3
 8007dfa:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8007dfe:	ee00 3a90 	vmov	s1, r3
 8007e02:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8007e06:	f006 fcc3 	bl	800e790 <powf>
 8007e0a:	b154      	cbz	r4, 8007e22 <node_convert+0x24a>
 8007e0c:	4633      	mov	r3, r6
 8007e0e:	462a      	mov	r2, r5
 8007e10:	ecf2 7a01 	vldmia	r2!, {s15}
 8007e14:	3301      	adds	r3, #1
 8007e16:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007e1a:	42a3      	cmp	r3, r4
 8007e1c:	ed42 7a01 	vstr	s15, [r2, #-4]
 8007e20:	d1f6      	bne.n	8007e10 <node_convert+0x238>
 8007e22:	f1b8 0f08 	cmp.w	r8, #8
 8007e26:	d00d      	beq.n	8007e44 <node_convert+0x26c>
 8007e28:	4622      	mov	r2, r4
 8007e2a:	68b9      	ldr	r1, [r7, #8]
 8007e2c:	4628      	mov	r0, r5
 8007e2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e32:	f003 bb81 	b.w	800b538 <arm_float_to_q15>
 8007e36:	f003 fd67 	bl	800b908 <arm_q7_to_float>
 8007e3a:	e773      	b.n	8007d24 <node_convert+0x14c>
 8007e3c:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8007e74 <node_convert+0x29c>
 8007e40:	4630      	mov	r0, r6
 8007e42:	e706      	b.n	8007c52 <node_convert+0x7a>
 8007e44:	4622      	mov	r2, r4
 8007e46:	68b9      	ldr	r1, [r7, #8]
 8007e48:	4628      	mov	r0, r5
 8007e4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e4e:	f003 bc29 	b.w	800b6a4 <arm_float_to_q7>
 8007e52:	684b      	ldr	r3, [r1, #4]
 8007e54:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	ee06 3a90 	vmov	s13, r3
 8007e5e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007e62:	ee76 6a87 	vadd.f32	s13, s13, s14
 8007e66:	e785      	b.n	8007d74 <node_convert+0x19c>
 8007e68:	2300      	movs	r3, #0
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	deff      	udf	#255	@ 0xff
 8007e6e:	bf00      	nop
 8007e70:	3efffffc 	.word	0x3efffffc
 8007e74:	00000000 	.word	0x00000000

08007e78 <ai_check_custom_types>:
 8007e78:	b082      	sub	sp, #8
 8007e7a:	4b12      	ldr	r3, [pc, #72]	@ (8007ec4 <ai_check_custom_types+0x4c>)
 8007e7c:	9301      	str	r3, [sp, #4]
 8007e7e:	b118      	cbz	r0, 8007e88 <ai_check_custom_types+0x10>
 8007e80:	7803      	ldrb	r3, [r0, #0]
 8007e82:	2b03      	cmp	r3, #3
 8007e84:	d002      	beq.n	8007e8c <ai_check_custom_types+0x14>
 8007e86:	2000      	movs	r0, #0
 8007e88:	b002      	add	sp, #8
 8007e8a:	4770      	bx	lr
 8007e8c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d004      	beq.n	8007e9e <ai_check_custom_types+0x26>
 8007e94:	2001      	movs	r0, #1
 8007e96:	f080 0001 	eor.w	r0, r0, #1
 8007e9a:	b002      	add	sp, #8
 8007e9c:	4770      	bx	lr
 8007e9e:	7842      	ldrb	r2, [r0, #1]
 8007ea0:	3001      	adds	r0, #1
 8007ea2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d1f4      	bne.n	8007e94 <ai_check_custom_types+0x1c>
 8007eaa:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8007eae:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d1ee      	bne.n	8007e94 <ai_check_custom_types+0x1c>
 8007eb6:	7842      	ldrb	r2, [r0, #1]
 8007eb8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d1e9      	bne.n	8007e94 <ai_check_custom_types+0x1c>
 8007ec0:	2000      	movs	r0, #0
 8007ec2:	e7e8      	b.n	8007e96 <ai_check_custom_types+0x1e>
 8007ec4:	84048403 	.word	0x84048403

08007ec8 <ai_layers_init_all>:
 8007ec8:	2100      	movs	r1, #0
 8007eca:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8007ecc:	b13b      	cbz	r3, 8007ede <ai_layers_init_all+0x16>
 8007ece:	691a      	ldr	r2, [r3, #16]
 8007ed0:	3101      	adds	r1, #1
 8007ed2:	60d8      	str	r0, [r3, #12]
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	4613      	mov	r3, r2
 8007ed8:	d001      	beq.n	8007ede <ai_layers_init_all+0x16>
 8007eda:	2a00      	cmp	r2, #0
 8007edc:	d1f6      	bne.n	8007ecc <ai_layers_init_all+0x4>
 8007ede:	4608      	mov	r0, r1
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop

08007ee4 <ai_layers_post_init_all>:
 8007ee4:	b538      	push	{r3, r4, r5, lr}
 8007ee6:	2500      	movs	r5, #0
 8007ee8:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8007eea:	b16c      	cbz	r4, 8007f08 <ai_layers_post_init_all+0x24>
 8007eec:	6863      	ldr	r3, [r4, #4]
 8007eee:	07db      	lsls	r3, r3, #31
 8007ef0:	d504      	bpl.n	8007efc <ai_layers_post_init_all+0x18>
 8007ef2:	6a23      	ldr	r3, [r4, #32]
 8007ef4:	4620      	mov	r0, r4
 8007ef6:	b10b      	cbz	r3, 8007efc <ai_layers_post_init_all+0x18>
 8007ef8:	3501      	adds	r5, #1
 8007efa:	4798      	blx	r3
 8007efc:	6923      	ldr	r3, [r4, #16]
 8007efe:	42a3      	cmp	r3, r4
 8007f00:	461c      	mov	r4, r3
 8007f02:	d001      	beq.n	8007f08 <ai_layers_post_init_all+0x24>
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d1f0      	bne.n	8007eea <ai_layers_post_init_all+0x6>
 8007f08:	4628      	mov	r0, r5
 8007f0a:	bd38      	pop	{r3, r4, r5, pc}

08007f0c <ai_layers_forward_all>:
 8007f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f10:	f8d0 803c 	ldr.w	r8, [r0, #60]	@ 0x3c
 8007f14:	4604      	mov	r4, r0
 8007f16:	f1b8 0f00 	cmp.w	r8, #0
 8007f1a:	d02a      	beq.n	8007f72 <ai_layers_forward_all+0x66>
 8007f1c:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8007f1e:	6381      	str	r1, [r0, #56]	@ 0x38
 8007f20:	b319      	cbz	r1, 8007f6a <ai_layers_forward_all+0x5e>
 8007f22:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8007f24:	2001      	movs	r0, #1
 8007f26:	47c0      	blx	r8
 8007f28:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8007f2a:	b1f6      	cbz	r6, 8007f6a <ai_layers_forward_all+0x5e>
 8007f2c:	2700      	movs	r7, #0
 8007f2e:	4631      	mov	r1, r6
 8007f30:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8007f32:	2002      	movs	r0, #2
 8007f34:	47c0      	blx	r8
 8007f36:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8007f38:	4628      	mov	r0, r5
 8007f3a:	696b      	ldr	r3, [r5, #20]
 8007f3c:	4798      	blx	r3
 8007f3e:	692e      	ldr	r6, [r5, #16]
 8007f40:	2003      	movs	r0, #3
 8007f42:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8007f44:	42b5      	cmp	r5, r6
 8007f46:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007f48:	d007      	beq.n	8007f5a <ai_layers_forward_all+0x4e>
 8007f4a:	47c0      	blx	r8
 8007f4c:	3701      	adds	r7, #1
 8007f4e:	63a6      	str	r6, [r4, #56]	@ 0x38
 8007f50:	2e00      	cmp	r6, #0
 8007f52:	d1ec      	bne.n	8007f2e <ai_layers_forward_all+0x22>
 8007f54:	4638      	mov	r0, r7
 8007f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f5a:	2003      	movs	r0, #3
 8007f5c:	3701      	adds	r7, #1
 8007f5e:	47c0      	blx	r8
 8007f60:	2300      	movs	r3, #0
 8007f62:	4638      	mov	r0, r7
 8007f64:	63a3      	str	r3, [r4, #56]	@ 0x38
 8007f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f6a:	2700      	movs	r7, #0
 8007f6c:	4638      	mov	r0, r7
 8007f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f72:	6b45      	ldr	r5, [r0, #52]	@ 0x34
 8007f74:	6385      	str	r5, [r0, #56]	@ 0x38
 8007f76:	2d00      	cmp	r5, #0
 8007f78:	d0f7      	beq.n	8007f6a <ai_layers_forward_all+0x5e>
 8007f7a:	4647      	mov	r7, r8
 8007f7c:	696b      	ldr	r3, [r5, #20]
 8007f7e:	4628      	mov	r0, r5
 8007f80:	4798      	blx	r3
 8007f82:	462b      	mov	r3, r5
 8007f84:	692d      	ldr	r5, [r5, #16]
 8007f86:	429d      	cmp	r5, r3
 8007f88:	d004      	beq.n	8007f94 <ai_layers_forward_all+0x88>
 8007f8a:	3701      	adds	r7, #1
 8007f8c:	63a5      	str	r5, [r4, #56]	@ 0x38
 8007f8e:	2d00      	cmp	r5, #0
 8007f90:	d1f4      	bne.n	8007f7c <ai_layers_forward_all+0x70>
 8007f92:	e7df      	b.n	8007f54 <ai_layers_forward_all+0x48>
 8007f94:	2300      	movs	r3, #0
 8007f96:	3701      	adds	r7, #1
 8007f98:	63a3      	str	r3, [r4, #56]	@ 0x38
 8007f9a:	e7db      	b.n	8007f54 <ai_layers_forward_all+0x48>

08007f9c <func_dummy>:
 8007f9c:	4770      	bx	lr
 8007f9e:	bf00      	nop

08007fa0 <forward_conv2d_sssa8_ch_nl_pool>:
 8007fa0:	6982      	ldr	r2, [r0, #24]
 8007fa2:	8813      	ldrh	r3, [r2, #0]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	f000 823f 	beq.w	8008428 <forward_conv2d_sssa8_ch_nl_pool+0x488>
 8007faa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fae:	ed2d 8b04 	vpush	{d8-d9}
 8007fb2:	6852      	ldr	r2, [r2, #4]
 8007fb4:	b0cf      	sub	sp, #316	@ 0x13c
 8007fb6:	4681      	mov	r9, r0
 8007fb8:	f8d2 a004 	ldr.w	sl, [r2, #4]
 8007fbc:	f1ba 0f00 	cmp.w	sl, #0
 8007fc0:	d001      	beq.n	8007fc6 <forward_conv2d_sssa8_ch_nl_pool+0x26>
 8007fc2:	f8da a000 	ldr.w	sl, [sl]
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	f000 8285 	beq.w	80084d6 <forward_conv2d_sssa8_ch_nl_pool+0x536>
 8007fcc:	6911      	ldr	r1, [r2, #16]
 8007fce:	911b      	str	r1, [sp, #108]	@ 0x6c
 8007fd0:	b109      	cbz	r1, 8007fd6 <forward_conv2d_sssa8_ch_nl_pool+0x36>
 8007fd2:	6809      	ldr	r1, [r1, #0]
 8007fd4:	911b      	str	r1, [sp, #108]	@ 0x6c
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	f000 8223 	beq.w	8008422 <forward_conv2d_sssa8_ch_nl_pool+0x482>
 8007fdc:	69d1      	ldr	r1, [r2, #28]
 8007fde:	2900      	cmp	r1, #0
 8007fe0:	f000 8274 	beq.w	80084cc <forward_conv2d_sssa8_ch_nl_pool+0x52c>
 8007fe4:	8b10      	ldrh	r0, [r2, #24]
 8007fe6:	680c      	ldr	r4, [r1, #0]
 8007fe8:	2801      	cmp	r0, #1
 8007fea:	9415      	str	r4, [sp, #84]	@ 0x54
 8007fec:	f200 821e 	bhi.w	800842c <forward_conv2d_sssa8_ch_nl_pool+0x48c>
 8007ff0:	2000      	movs	r0, #0
 8007ff2:	9018      	str	r0, [sp, #96]	@ 0x60
 8007ff4:	2b03      	cmp	r3, #3
 8007ff6:	f000 8271 	beq.w	80084dc <forward_conv2d_sssa8_ch_nl_pool+0x53c>
 8007ffa:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	f000 8268 	beq.w	80084d2 <forward_conv2d_sssa8_ch_nl_pool+0x532>
 8008002:	f8d9 2024 	ldr.w	r2, [r9, #36]	@ 0x24
 8008006:	6818      	ldr	r0, [r3, #0]
 8008008:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800800c:	922e      	str	r2, [sp, #184]	@ 0xb8
 800800e:	9026      	str	r0, [sp, #152]	@ 0x98
 8008010:	2a00      	cmp	r2, #0
 8008012:	f000 8255 	beq.w	80084c0 <forward_conv2d_sssa8_ch_nl_pool+0x520>
 8008016:	f8d3 b008 	ldr.w	fp, [r3, #8]
 800801a:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800801e:	f8da 600c 	ldr.w	r6, [sl, #12]
 8008022:	6852      	ldr	r2, [r2, #4]
 8008024:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8008026:	4615      	mov	r5, r2
 8008028:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 800802a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800802e:	b2ad      	uxth	r5, r5
 8008030:	6874      	ldr	r4, [r6, #4]
 8008032:	68c0      	ldr	r0, [r0, #12]
 8008034:	9417      	str	r4, [sp, #92]	@ 0x5c
 8008036:	951e      	str	r5, [sp, #120]	@ 0x78
 8008038:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 800803c:	f8d9 303c 	ldr.w	r3, [r9, #60]	@ 0x3c
 8008040:	ee09 5a90 	vmov	s19, r5
 8008044:	68c5      	ldr	r5, [r0, #12]
 8008046:	6880      	ldr	r0, [r0, #8]
 8008048:	9520      	str	r5, [sp, #128]	@ 0x80
 800804a:	9034      	str	r0, [sp, #208]	@ 0xd0
 800804c:	f8d9 402c 	ldr.w	r4, [r9, #44]	@ 0x2c
 8008050:	921f      	str	r2, [sp, #124]	@ 0x7c
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	f8d9 7058 	ldr.w	r7, [r9, #88]	@ 0x58
 8008058:	e9d6 5002 	ldrd	r5, r0, [r6, #8]
 800805c:	9538      	str	r5, [sp, #224]	@ 0xe0
 800805e:	f8b9 5028 	ldrh.w	r5, [r9, #40]	@ 0x28
 8008062:	952f      	str	r5, [sp, #188]	@ 0xbc
 8008064:	b2a5      	uxth	r5, r4
 8008066:	9530      	str	r5, [sp, #192]	@ 0xc0
 8008068:	b295      	uxth	r5, r2
 800806a:	9516      	str	r5, [sp, #88]	@ 0x58
 800806c:	889d      	ldrh	r5, [r3, #4]
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	9531      	str	r5, [sp, #196]	@ 0xc4
 8008072:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8008076:	9524      	str	r5, [sp, #144]	@ 0x90
 8008078:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800807c:	9532      	str	r5, [sp, #200]	@ 0xc8
 800807e:	f8d9 5044 	ldr.w	r5, [r9, #68]	@ 0x44
 8008082:	9535      	str	r5, [sp, #212]	@ 0xd4
 8008084:	f8d9 504c 	ldr.w	r5, [r9, #76]	@ 0x4c
 8008088:	9536      	str	r5, [sp, #216]	@ 0xd8
 800808a:	f8d9 5050 	ldr.w	r5, [r9, #80]	@ 0x50
 800808e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008090:	683d      	ldr	r5, [r7, #0]
 8008092:	9527      	str	r5, [sp, #156]	@ 0x9c
 8008094:	687d      	ldr	r5, [r7, #4]
 8008096:	9537      	str	r5, [sp, #220]	@ 0xdc
 8008098:	2900      	cmp	r1, #0
 800809a:	f000 8204 	beq.w	80084a6 <forward_conv2d_sssa8_ch_nl_pool+0x506>
 800809e:	6889      	ldr	r1, [r1, #8]
 80080a0:	2900      	cmp	r1, #0
 80080a2:	f000 8200 	beq.w	80084a6 <forward_conv2d_sssa8_ch_nl_pool+0x506>
 80080a6:	698d      	ldr	r5, [r1, #24]
 80080a8:	2d00      	cmp	r5, #0
 80080aa:	bf08      	it	eq
 80080ac:	4629      	moveq	r1, r5
 80080ae:	ee08 1a90 	vmov	s17, r1
 80080b2:	b292      	uxth	r2, r2
 80080b4:	f8db 6018 	ldr.w	r6, [fp, #24]
 80080b8:	b2a1      	uxth	r1, r4
 80080ba:	f8d8 5018 	ldr.w	r5, [r8, #24]
 80080be:	fa12 f783 	uxtah	r7, r2, r3
 80080c2:	1813      	adds	r3, r2, r0
 80080c4:	aa3f      	add	r2, sp, #252	@ 0xfc
 80080c6:	9123      	str	r1, [sp, #140]	@ 0x8c
 80080c8:	4407      	add	r7, r0
 80080ca:	931d      	str	r3, [sp, #116]	@ 0x74
 80080cc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80080ce:	f10d 0cec 	add.w	ip, sp, #236	@ 0xec
 80080d2:	924c      	str	r2, [sp, #304]	@ 0x130
 80080d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80080d8:	1aff      	subs	r7, r7, r3
 80080da:	ac43      	add	r4, sp, #268	@ 0x10c
 80080dc:	a847      	add	r0, sp, #284	@ 0x11c
 80080de:	f8cd c128 	str.w	ip, [sp, #296]	@ 0x128
 80080e2:	fbb7 f3f1 	udiv	r3, r7, r1
 80080e6:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 80080e8:	f240 4101 	movw	r1, #1025	@ 0x401
 80080ec:	9313      	str	r3, [sp, #76]	@ 0x4c
 80080ee:	2300      	movs	r3, #0
 80080f0:	69bf      	ldr	r7, [r7, #24]
 80080f2:	9347      	str	r3, [sp, #284]	@ 0x11c
 80080f4:	933b      	str	r3, [sp, #236]	@ 0xec
 80080f6:	933f      	str	r3, [sp, #252]	@ 0xfc
 80080f8:	933e      	str	r3, [sp, #248]	@ 0xf8
 80080fa:	9342      	str	r3, [sp, #264]	@ 0x108
 80080fc:	934d      	str	r3, [sp, #308]	@ 0x134
 80080fe:	9728      	str	r7, [sp, #160]	@ 0xa0
 8008100:	e9cd 333c 	strd	r3, r3, [sp, #240]	@ 0xf0
 8008104:	e9cd 3340 	strd	r3, r3, [sp, #256]	@ 0x100
 8008108:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 800810c:	e9cd 2148 	strd	r2, r1, [sp, #288]	@ 0x120
 8008110:	f240 4102 	movw	r1, #1026	@ 0x402
 8008114:	9322      	str	r3, [sp, #136]	@ 0x88
 8008116:	f8d9 305c 	ldr.w	r3, [r9, #92]	@ 0x5c
 800811a:	914b      	str	r1, [sp, #300]	@ 0x12c
 800811c:	4659      	mov	r1, fp
 800811e:	9333      	str	r3, [sp, #204]	@ 0xcc
 8008120:	f003 fd16 	bl	800bb50 <core_tensor_clone>
 8008124:	4631      	mov	r1, r6
 8008126:	4620      	mov	r0, r4
 8008128:	f003 fd44 	bl	800bbb4 <core_array_clone>
 800812c:	944d      	str	r4, [sp, #308]	@ 0x134
 800812e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008132:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	6809      	ldr	r1, [r1, #0]
 8008138:	931c      	str	r3, [sp, #112]	@ 0x70
 800813a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800813c:	f8da 2000 	ldr.w	r2, [sl]
 8008140:	f8d3 e018 	ldr.w	lr, [r3, #24]
 8008144:	f9bd 409c 	ldrsh.w	r4, [sp, #156]	@ 0x9c
 8008148:	f8de 3008 	ldr.w	r3, [lr, #8]
 800814c:	9114      	str	r1, [sp, #80]	@ 0x50
 800814e:	9325      	str	r3, [sp, #148]	@ 0x94
 8008150:	f8d8 3000 	ldr.w	r3, [r8]
 8008154:	2a00      	cmp	r2, #0
 8008156:	f000 818e 	beq.w	8008476 <forward_conv2d_sssa8_ch_nl_pool+0x4d6>
 800815a:	6851      	ldr	r1, [r2, #4]
 800815c:	2900      	cmp	r1, #0
 800815e:	f000 818a 	beq.w	8008476 <forward_conv2d_sssa8_ch_nl_pool+0x4d6>
 8008162:	8850      	ldrh	r0, [r2, #2]
 8008164:	2800      	cmp	r0, #0
 8008166:	f000 8186 	beq.w	8008476 <forward_conv2d_sssa8_ch_nl_pool+0x4d6>
 800816a:	6809      	ldr	r1, [r1, #0]
 800816c:	ed91 0a00 	vldr	s0, [r1]
 8008170:	2b00      	cmp	r3, #0
 8008172:	f000 817d 	beq.w	8008470 <forward_conv2d_sssa8_ch_nl_pool+0x4d0>
 8008176:	6859      	ldr	r1, [r3, #4]
 8008178:	2900      	cmp	r1, #0
 800817a:	f000 8179 	beq.w	8008470 <forward_conv2d_sssa8_ch_nl_pool+0x4d0>
 800817e:	8858      	ldrh	r0, [r3, #2]
 8008180:	2800      	cmp	r0, #0
 8008182:	f000 8175 	beq.w	8008470 <forward_conv2d_sssa8_ch_nl_pool+0x4d0>
 8008186:	6809      	ldr	r1, [r1, #0]
 8008188:	edd1 0a00 	vldr	s1, [r1]
 800818c:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800818e:	f8da c018 	ldr.w	ip, [sl, #24]
 8008192:	6988      	ldr	r0, [r1, #24]
 8008194:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8008196:	f8dc 7008 	ldr.w	r7, [ip, #8]
 800819a:	6989      	ldr	r1, [r1, #24]
 800819c:	6880      	ldr	r0, [r0, #8]
 800819e:	6889      	ldr	r1, [r1, #8]
 80081a0:	9718      	str	r7, [sp, #96]	@ 0x60
 80081a2:	912d      	str	r1, [sp, #180]	@ 0xb4
 80081a4:	f899 1041 	ldrb.w	r1, [r9, #65]	@ 0x41
 80081a8:	902c      	str	r0, [sp, #176]	@ 0xb0
 80081aa:	912b      	str	r1, [sp, #172]	@ 0xac
 80081ac:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80081ae:	b121      	cbz	r1, 80081ba <forward_conv2d_sssa8_ch_nl_pool+0x21a>
 80081b0:	6849      	ldr	r1, [r1, #4]
 80081b2:	9114      	str	r1, [sp, #80]	@ 0x50
 80081b4:	b109      	cbz	r1, 80081ba <forward_conv2d_sssa8_ch_nl_pool+0x21a>
 80081b6:	6809      	ldr	r1, [r1, #0]
 80081b8:	9114      	str	r1, [sp, #80]	@ 0x50
 80081ba:	2a00      	cmp	r2, #0
 80081bc:	f000 8171 	beq.w	80084a2 <forward_conv2d_sssa8_ch_nl_pool+0x502>
 80081c0:	6851      	ldr	r1, [r2, #4]
 80081c2:	2900      	cmp	r1, #0
 80081c4:	f000 817a 	beq.w	80084bc <forward_conv2d_sssa8_ch_nl_pool+0x51c>
 80081c8:	8852      	ldrh	r2, [r2, #2]
 80081ca:	2a00      	cmp	r2, #0
 80081cc:	f000 8169 	beq.w	80084a2 <forward_conv2d_sssa8_ch_nl_pool+0x502>
 80081d0:	684a      	ldr	r2, [r1, #4]
 80081d2:	f992 2000 	ldrsb.w	r2, [r2]
 80081d6:	9229      	str	r2, [sp, #164]	@ 0xa4
 80081d8:	2b00      	cmp	r3, #0
 80081da:	f000 8160 	beq.w	800849e <forward_conv2d_sssa8_ch_nl_pool+0x4fe>
 80081de:	685a      	ldr	r2, [r3, #4]
 80081e0:	2a00      	cmp	r2, #0
 80081e2:	f000 8171 	beq.w	80084c8 <forward_conv2d_sssa8_ch_nl_pool+0x528>
 80081e6:	885b      	ldrh	r3, [r3, #2]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	f000 8158 	beq.w	800849e <forward_conv2d_sssa8_ch_nl_pool+0x4fe>
 80081ee:	6853      	ldr	r3, [r2, #4]
 80081f0:	f993 3000 	ldrsb.w	r3, [r3]
 80081f4:	932a      	str	r3, [sp, #168]	@ 0xa8
 80081f6:	f8bd a07c 	ldrh.w	sl, [sp, #124]	@ 0x7c
 80081fa:	edcd 0a1a 	vstr	s1, [sp, #104]	@ 0x68
 80081fe:	ed8d 0a15 	vstr	s0, [sp, #84]	@ 0x54
 8008202:	e9de 0100 	ldrd	r0, r1, [lr]
 8008206:	f003 fc4f 	bl	800baa8 <ai_array_get_byte_size>
 800820a:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 800820c:	eba0 034a 	sub.w	r3, r0, sl, lsl #1
 8008210:	eddd 0a1a 	vldr	s1, [sp, #104]	@ 0x68
 8008214:	ed9d 0a15 	vldr	s0, [sp, #84]	@ 0x54
 8008218:	4413      	add	r3, r2
 800821a:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800821c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800821e:	f001 fc03 	bl	8009a28 <align_factor_ch>
 8008222:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008224:	2b00      	cmp	r3, #0
 8008226:	f000 8117 	beq.w	8008458 <forward_conv2d_sssa8_ch_nl_pool+0x4b8>
 800822a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800822c:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 8008230:	fb02 f10a 	mul.w	r1, r2, sl
 8008234:	b292      	uxth	r2, r2
 8008236:	f04f 0a00 	mov.w	sl, #0
 800823a:	9417      	str	r4, [sp, #92]	@ 0x5c
 800823c:	ee08 1a10 	vmov	s16, r1
 8008240:	9221      	str	r2, [sp, #132]	@ 0x84
 8008242:	9938      	ldr	r1, [sp, #224]	@ 0xe0
 8008244:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008246:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
 800824a:	fb01 f202 	mul.w	r2, r1, r2
 800824e:	fb03 f202 	mul.w	r2, r3, r2
 8008252:	fb01 f303 	mul.w	r3, r1, r3
 8008256:	9238      	str	r2, [sp, #224]	@ 0xe0
 8008258:	9339      	str	r3, [sp, #228]	@ 0xe4
 800825a:	b28b      	uxth	r3, r1
 800825c:	ee09 3a10 	vmov	s18, r3
 8008260:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	@ 0x88
 8008264:	931c      	str	r3, [sp, #112]	@ 0x70
 8008266:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008268:	931f      	str	r3, [sp, #124]	@ 0x7c
 800826a:	e0b8      	b.n	80083de <forward_conv2d_sssa8_ch_nl_pool+0x43e>
 800826c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800826e:	68aa      	ldr	r2, [r5, #8]
 8008270:	699b      	ldr	r3, [r3, #24]
 8008272:	9214      	str	r2, [sp, #80]	@ 0x50
 8008274:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008278:	f003 fc16 	bl	800baa8 <ai_array_get_byte_size>
 800827c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800827e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008280:	ee19 1a10 	vmov	r1, s18
 8008284:	930d      	str	r3, [sp, #52]	@ 0x34
 8008286:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8008288:	920c      	str	r2, [sp, #48]	@ 0x30
 800828a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800828c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800828e:	9010      	str	r0, [sp, #64]	@ 0x40
 8008290:	930a      	str	r3, [sp, #40]	@ 0x28
 8008292:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8008294:	9309      	str	r3, [sp, #36]	@ 0x24
 8008296:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8008298:	9308      	str	r3, [sp, #32]
 800829a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800829c:	9307      	str	r3, [sp, #28]
 800829e:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 80082a0:	9306      	str	r3, [sp, #24]
 80082a2:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80082a4:	9305      	str	r3, [sp, #20]
 80082a6:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 80082a8:	9304      	str	r3, [sp, #16]
 80082aa:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80082ac:	9301      	str	r3, [sp, #4]
 80082ae:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80082b0:	9300      	str	r3, [sp, #0]
 80082b2:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80082b4:	9311      	str	r3, [sp, #68]	@ 0x44
 80082b6:	2301      	movs	r3, #1
 80082b8:	930e      	str	r3, [sp, #56]	@ 0x38
 80082ba:	f8bd 3090 	ldrh.w	r3, [sp, #144]	@ 0x90
 80082be:	9303      	str	r3, [sp, #12]
 80082c0:	f8bd 30c8 	ldrh.w	r3, [sp, #200]	@ 0xc8
 80082c4:	9302      	str	r3, [sp, #8]
 80082c6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80082c8:	9f1f      	ldr	r7, [sp, #124]	@ 0x7c
 80082ca:	429c      	cmp	r4, r3
 80082cc:	bf08      	it	eq
 80082ce:	f1ba 0f00 	cmpeq.w	sl, #0
 80082d2:	9818      	ldr	r0, [sp, #96]	@ 0x60
 80082d4:	b2ba      	uxth	r2, r7
 80082d6:	bf0c      	ite	eq
 80082d8:	2301      	moveq	r3, #1
 80082da:	2300      	movne	r3, #0
 80082dc:	930f      	str	r3, [sp, #60]	@ 0x3c
 80082de:	ee19 3a90 	vmov	r3, s19
 80082e2:	f000 fc1d 	bl	8008b20 <forward_lite_conv2d_sssa8_ch>
 80082e6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80082e8:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80082ea:	4293      	cmp	r3, r2
 80082ec:	f000 80b0 	beq.w	8008450 <forward_conv2d_sssa8_ch_nl_pool+0x4b0>
 80082f0:	1ad3      	subs	r3, r2, r3
 80082f2:	463a      	mov	r2, r7
 80082f4:	429f      	cmp	r7, r3
 80082f6:	931d      	str	r3, [sp, #116]	@ 0x74
 80082f8:	bf28      	it	cs
 80082fa:	461a      	movcs	r2, r3
 80082fc:	921f      	str	r2, [sp, #124]	@ 0x7c
 80082fe:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008300:	2b00      	cmp	r3, #0
 8008302:	f040 8096 	bne.w	8008432 <forward_conv2d_sssa8_ch_nl_pool+0x492>
 8008306:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8008308:	9a38      	ldr	r2, [sp, #224]	@ 0xe0
 800830a:	4413      	add	r3, r2
 800830c:	9318      	str	r3, [sp, #96]	@ 0x60
 800830e:	3401      	adds	r4, #1
 8008310:	ee18 3a90 	vmov	r3, s17
 8008314:	ee18 2a10 	vmov	r2, s16
 8008318:	4641      	mov	r1, r8
 800831a:	b224      	sxth	r4, r4
 800831c:	4658      	mov	r0, fp
 800831e:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8008320:	47b8      	blx	r7
 8008322:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8008324:	429c      	cmp	r4, r3
 8008326:	db32      	blt.n	800838e <forward_conv2d_sssa8_ch_nl_pool+0x3ee>
 8008328:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800832a:	2201      	movs	r2, #1
 800832c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800832e:	a847      	add	r0, sp, #284	@ 0x11c
 8008330:	9308      	str	r3, [sp, #32]
 8008332:	4492      	add	sl, r2
 8008334:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 8008338:	9207      	str	r2, [sp, #28]
 800833a:	1ae4      	subs	r4, r4, r3
 800833c:	9305      	str	r3, [sp, #20]
 800833e:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 8008342:	f8bd 2088 	ldrh.w	r2, [sp, #136]	@ 0x88
 8008346:	b224      	sxth	r4, r4
 8008348:	9303      	str	r3, [sp, #12]
 800834a:	f8bd 30d0 	ldrh.w	r3, [sp, #208]	@ 0xd0
 800834e:	9201      	str	r2, [sp, #4]
 8008350:	1a52      	subs	r2, r2, r1
 8008352:	9306      	str	r3, [sp, #24]
 8008354:	f8bd 30d8 	ldrh.w	r3, [sp, #216]	@ 0xd8
 8008358:	b292      	uxth	r2, r2
 800835a:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800835c:	9304      	str	r3, [sp, #16]
 800835e:	f8bd 30dc 	ldrh.w	r3, [sp, #220]	@ 0xdc
 8008362:	9f33      	ldr	r7, [sp, #204]	@ 0xcc
 8008364:	9302      	str	r3, [sp, #8]
 8008366:	f8bd 30d4 	ldrh.w	r3, [sp, #212]	@ 0xd4
 800836a:	9300      	str	r3, [sp, #0]
 800836c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800836e:	47b8      	blx	r7
 8008370:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008372:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 8008376:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8008378:	1ad3      	subs	r3, r2, r3
 800837a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800837e:	b21a      	sxth	r2, r3
 8008380:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8008382:	695b      	ldr	r3, [r3, #20]
 8008384:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008386:	68da      	ldr	r2, [r3, #12]
 8008388:	688b      	ldr	r3, [r1, #8]
 800838a:	4413      	add	r3, r2
 800838c:	608b      	str	r3, [r1, #8]
 800838e:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8008392:	68aa      	ldr	r2, [r5, #8]
 8008394:	68db      	ldr	r3, [r3, #12]
 8008396:	4413      	add	r3, r2
 8008398:	60ab      	str	r3, [r5, #8]
 800839a:	f8d9 2024 	ldr.w	r2, [r9, #36]	@ 0x24
 800839e:	b132      	cbz	r2, 80083ae <forward_conv2d_sssa8_ch_nl_pool+0x40e>
 80083a0:	f8db 3014 	ldr.w	r3, [fp, #20]
 80083a4:	68da      	ldr	r2, [r3, #12]
 80083a6:	68b3      	ldr	r3, [r6, #8]
 80083a8:	4413      	add	r3, r2
 80083aa:	60b3      	str	r3, [r6, #8]
 80083ac:	68ab      	ldr	r3, [r5, #8]
 80083ae:	68ea      	ldr	r2, [r5, #12]
 80083b0:	4640      	mov	r0, r8
 80083b2:	9315      	str	r3, [sp, #84]	@ 0x54
 80083b4:	9214      	str	r2, [sp, #80]	@ 0x50
 80083b6:	f003 fbb5 	bl	800bb24 <get_tensor_byte_size>
 80083ba:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80083bc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80083be:	4410      	add	r0, r2
 80083c0:	4283      	cmp	r3, r0
 80083c2:	d306      	bcc.n	80083d2 <forward_conv2d_sssa8_ch_nl_pool+0x432>
 80083c4:	68eb      	ldr	r3, [r5, #12]
 80083c6:	60ab      	str	r3, [r5, #8]
 80083c8:	f8d9 3024 	ldr.w	r3, [r9, #36]	@ 0x24
 80083cc:	b10b      	cbz	r3, 80083d2 <forward_conv2d_sssa8_ch_nl_pool+0x432>
 80083ce:	68f3      	ldr	r3, [r6, #12]
 80083d0:	60b3      	str	r3, [r6, #8]
 80083d2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80083d4:	3b01      	subs	r3, #1
 80083d6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80083d8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80083da:	459a      	cmp	sl, r3
 80083dc:	d23c      	bcs.n	8008458 <forward_conv2d_sssa8_ch_nl_pool+0x4b8>
 80083de:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80083e0:	3301      	adds	r3, #1
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	f73f af42 	bgt.w	800826c <forward_conv2d_sssa8_ch_nl_pool+0x2cc>
 80083e8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	da99      	bge.n	8008322 <forward_conv2d_sssa8_ch_nl_pool+0x382>
 80083ee:	ee18 3a10 	vmov	r3, s16
 80083f2:	e9d6 1202 	ldrd	r1, r2, [r6, #8]
 80083f6:	fb03 1314 	mls	r3, r3, r4, r1
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d901      	bls.n	8008402 <forward_conv2d_sssa8_ch_nl_pool+0x462>
 80083fe:	6870      	ldr	r0, [r6, #4]
 8008400:	4403      	add	r3, r0
 8008402:	429a      	cmp	r2, r3
 8008404:	d202      	bcs.n	800840c <forward_conv2d_sssa8_ch_nl_pool+0x46c>
 8008406:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8008408:	42a0      	cmp	r0, r4
 800840a:	d137      	bne.n	800847c <forward_conv2d_sssa8_ch_nl_pool+0x4dc>
 800840c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800840e:	b2a4      	uxth	r4, r4
 8008410:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008412:	4413      	add	r3, r2
 8008414:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008416:	1b1b      	subs	r3, r3, r4
 8008418:	4414      	add	r4, r2
 800841a:	b21b      	sxth	r3, r3
 800841c:	b224      	sxth	r4, r4
 800841e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008420:	e77f      	b.n	8008322 <forward_conv2d_sssa8_ch_nl_pool+0x382>
 8008422:	2300      	movs	r3, #0
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	deff      	udf	#255	@ 0xff
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	deff      	udf	#255	@ 0xff
 800842c:	6848      	ldr	r0, [r1, #4]
 800842e:	9018      	str	r0, [sp, #96]	@ 0x60
 8008430:	e5e0      	b.n	8007ff4 <forward_conv2d_sssa8_ch_nl_pool+0x54>
 8008432:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8008434:	461a      	mov	r2, r3
 8008436:	1a5b      	subs	r3, r3, r1
 8008438:	d505      	bpl.n	8008446 <forward_conv2d_sssa8_ch_nl_pool+0x4a6>
 800843a:	1a8a      	subs	r2, r1, r2
 800843c:	9839      	ldr	r0, [sp, #228]	@ 0xe4
 800843e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8008440:	fb00 1202 	mla	r2, r0, r2, r1
 8008444:	9218      	str	r2, [sp, #96]	@ 0x60
 8008446:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800844a:	b29b      	uxth	r3, r3
 800844c:	9316      	str	r3, [sp, #88]	@ 0x58
 800844e:	e75e      	b.n	800830e <forward_conv2d_sssa8_ch_nl_pool+0x36e>
 8008450:	2300      	movs	r3, #0
 8008452:	931f      	str	r3, [sp, #124]	@ 0x7c
 8008454:	931d      	str	r3, [sp, #116]	@ 0x74
 8008456:	e752      	b.n	80082fe <forward_conv2d_sssa8_ch_nl_pool+0x35e>
 8008458:	68eb      	ldr	r3, [r5, #12]
 800845a:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 800845c:	60ab      	str	r3, [r5, #8]
 800845e:	68f3      	ldr	r3, [r6, #12]
 8008460:	60b3      	str	r3, [r6, #8]
 8008462:	68d3      	ldr	r3, [r2, #12]
 8008464:	6093      	str	r3, [r2, #8]
 8008466:	b04f      	add	sp, #316	@ 0x13c
 8008468:	ecbd 8b04 	vpop	{d8-d9}
 800846c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008470:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 80084e4 <forward_conv2d_sssa8_ch_nl_pool+0x544>
 8008474:	e68a      	b.n	800818c <forward_conv2d_sssa8_ch_nl_pool+0x1ec>
 8008476:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 80084e4 <forward_conv2d_sssa8_ch_nl_pool+0x544>
 800847a:	e679      	b.n	8008170 <forward_conv2d_sssa8_ch_nl_pool+0x1d0>
 800847c:	6870      	ldr	r0, [r6, #4]
 800847e:	4402      	add	r2, r0
 8008480:	4293      	cmp	r3, r2
 8008482:	d2c3      	bcs.n	800840c <forward_conv2d_sssa8_ch_nl_pool+0x46c>
 8008484:	3901      	subs	r1, #1
 8008486:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8008488:	f813 2b01 	ldrb.w	r2, [r3], #1
 800848c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008490:	68f2      	ldr	r2, [r6, #12]
 8008492:	6870      	ldr	r0, [r6, #4]
 8008494:	4402      	add	r2, r0
 8008496:	4293      	cmp	r3, r2
 8008498:	d3f6      	bcc.n	8008488 <forward_conv2d_sssa8_ch_nl_pool+0x4e8>
 800849a:	9713      	str	r7, [sp, #76]	@ 0x4c
 800849c:	e7b6      	b.n	800840c <forward_conv2d_sssa8_ch_nl_pool+0x46c>
 800849e:	932a      	str	r3, [sp, #168]	@ 0xa8
 80084a0:	e6a9      	b.n	80081f6 <forward_conv2d_sssa8_ch_nl_pool+0x256>
 80084a2:	9229      	str	r2, [sp, #164]	@ 0xa4
 80084a4:	e698      	b.n	80081d8 <forward_conv2d_sssa8_ch_nl_pool+0x238>
 80084a6:	f8d9 1020 	ldr.w	r1, [r9, #32]
 80084aa:	ee08 1a90 	vmov	s17, r1
 80084ae:	2900      	cmp	r1, #0
 80084b0:	f43f adff 	beq.w	80080b2 <forward_conv2d_sssa8_ch_nl_pool+0x112>
 80084b4:	6889      	ldr	r1, [r1, #8]
 80084b6:	ee08 1a90 	vmov	s17, r1
 80084ba:	e5fa      	b.n	80080b2 <forward_conv2d_sssa8_ch_nl_pool+0x112>
 80084bc:	9129      	str	r1, [sp, #164]	@ 0xa4
 80084be:	e68b      	b.n	80081d8 <forward_conv2d_sssa8_ch_nl_pool+0x238>
 80084c0:	4b09      	ldr	r3, [pc, #36]	@ (80084e8 <forward_conv2d_sssa8_ch_nl_pool+0x548>)
 80084c2:	46c3      	mov	fp, r8
 80084c4:	932e      	str	r3, [sp, #184]	@ 0xb8
 80084c6:	e5a8      	b.n	800801a <forward_conv2d_sssa8_ch_nl_pool+0x7a>
 80084c8:	922a      	str	r2, [sp, #168]	@ 0xa8
 80084ca:	e694      	b.n	80081f6 <forward_conv2d_sssa8_ch_nl_pool+0x256>
 80084cc:	9115      	str	r1, [sp, #84]	@ 0x54
 80084ce:	9118      	str	r1, [sp, #96]	@ 0x60
 80084d0:	e590      	b.n	8007ff4 <forward_conv2d_sssa8_ch_nl_pool+0x54>
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	deff      	udf	#255	@ 0xff
 80084d6:	2300      	movs	r3, #0
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	deff      	udf	#255	@ 0xff
 80084dc:	2300      	movs	r3, #0
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	deff      	udf	#255	@ 0xff
 80084e2:	bf00      	nop
 80084e4:	00000000 	.word	0x00000000
 80084e8:	08007f9d 	.word	0x08007f9d

080084ec <forward_dense_integer_SSSA>:
 80084ec:	6982      	ldr	r2, [r0, #24]
 80084ee:	8813      	ldrh	r3, [r2, #0]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	f000 80c8 	beq.w	8008686 <forward_dense_integer_SSSA+0x19a>
 80084f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084fa:	6852      	ldr	r2, [r2, #4]
 80084fc:	b093      	sub	sp, #76	@ 0x4c
 80084fe:	6854      	ldr	r4, [r2, #4]
 8008500:	b104      	cbz	r4, 8008504 <forward_dense_integer_SSSA+0x18>
 8008502:	6824      	ldr	r4, [r4, #0]
 8008504:	2b01      	cmp	r3, #1
 8008506:	f000 8161 	beq.w	80087cc <forward_dense_integer_SSSA+0x2e0>
 800850a:	6911      	ldr	r1, [r2, #16]
 800850c:	b101      	cbz	r1, 8008510 <forward_dense_integer_SSSA+0x24>
 800850e:	6809      	ldr	r1, [r1, #0]
 8008510:	2b02      	cmp	r3, #2
 8008512:	f000 815e 	beq.w	80087d2 <forward_dense_integer_SSSA+0x2e6>
 8008516:	69d5      	ldr	r5, [r2, #28]
 8008518:	2d00      	cmp	r5, #0
 800851a:	f000 8108 	beq.w	800872e <forward_dense_integer_SSSA+0x242>
 800851e:	8b16      	ldrh	r6, [r2, #24]
 8008520:	6828      	ldr	r0, [r5, #0]
 8008522:	2e01      	cmp	r6, #1
 8008524:	f240 812d 	bls.w	8008782 <forward_dense_integer_SSSA+0x296>
 8008528:	686d      	ldr	r5, [r5, #4]
 800852a:	2b03      	cmp	r3, #3
 800852c:	f000 8154 	beq.w	80087d8 <forward_dense_integer_SSSA+0x2ec>
 8008530:	f8d2 9028 	ldr.w	r9, [r2, #40]	@ 0x28
 8008534:	69ab      	ldr	r3, [r5, #24]
 8008536:	f1b9 0f00 	cmp.w	r9, #0
 800853a:	f000 810f 	beq.w	800875c <forward_dense_integer_SSSA+0x270>
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	68e2      	ldr	r2, [r4, #12]
 8008542:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008544:	68cb      	ldr	r3, [r1, #12]
 8008546:	6856      	ldr	r6, [r2, #4]
 8008548:	f8d9 9000 	ldr.w	r9, [r9]
 800854c:	f8d4 e018 	ldr.w	lr, [r4, #24]
 8008550:	698d      	ldr	r5, [r1, #24]
 8008552:	960f      	str	r6, [sp, #60]	@ 0x3c
 8008554:	e9d3 a201 	ldrd	sl, r2, [r3, #4]
 8008558:	68db      	ldr	r3, [r3, #12]
 800855a:	fb03 f302 	mul.w	r3, r3, r2
 800855e:	b2b2      	uxth	r2, r6
 8008560:	930c      	str	r3, [sp, #48]	@ 0x30
 8008562:	fa1f f38a 	uxth.w	r3, sl
 8008566:	f1b9 0f00 	cmp.w	r9, #0
 800856a:	d003      	beq.n	8008574 <forward_dense_integer_SSSA+0x88>
 800856c:	f8d9 6018 	ldr.w	r6, [r9, #24]
 8008570:	f8d6 9008 	ldr.w	r9, [r6, #8]
 8008574:	6827      	ldr	r7, [r4, #0]
 8008576:	f8d0 b000 	ldr.w	fp, [r0]
 800857a:	680c      	ldr	r4, [r1, #0]
 800857c:	6981      	ldr	r1, [r0, #24]
 800857e:	2f00      	cmp	r7, #0
 8008580:	f000 8083 	beq.w	800868a <forward_dense_integer_SSSA+0x19e>
 8008584:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8008588:	f1bc 0f00 	cmp.w	ip, #0
 800858c:	f000 80b1 	beq.w	80086f2 <forward_dense_integer_SSSA+0x206>
 8008590:	8878      	ldrh	r0, [r7, #2]
 8008592:	2800      	cmp	r0, #0
 8008594:	f000 809c 	beq.w	80086d0 <forward_dense_integer_SSSA+0x1e4>
 8008598:	f8dc 6000 	ldr.w	r6, [ip]
 800859c:	edd6 7a00 	vldr	s15, [r6]
 80085a0:	2c00      	cmp	r4, #0
 80085a2:	f000 809a 	beq.w	80086da <forward_dense_integer_SSSA+0x1ee>
 80085a6:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80085aa:	f1b8 0f00 	cmp.w	r8, #0
 80085ae:	f000 80a9 	beq.w	8008704 <forward_dense_integer_SSSA+0x218>
 80085b2:	8860      	ldrh	r0, [r4, #2]
 80085b4:	2800      	cmp	r0, #0
 80085b6:	d074      	beq.n	80086a2 <forward_dense_integer_SSSA+0x1b6>
 80085b8:	68ae      	ldr	r6, [r5, #8]
 80085ba:	f8de 5008 	ldr.w	r5, [lr, #8]
 80085be:	6889      	ldr	r1, [r1, #8]
 80085c0:	950d      	str	r5, [sp, #52]	@ 0x34
 80085c2:	f8d8 5000 	ldr.w	r5, [r8]
 80085c6:	ed95 0a00 	vldr	s0, [r5]
 80085ca:	f1bc 0f00 	cmp.w	ip, #0
 80085ce:	d076      	beq.n	80086be <forward_dense_integer_SSSA+0x1d2>
 80085d0:	8878      	ldrh	r0, [r7, #2]
 80085d2:	2800      	cmp	r0, #0
 80085d4:	f000 80a3 	beq.w	800871e <forward_dense_integer_SSSA+0x232>
 80085d8:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80085dc:	f990 7000 	ldrsb.w	r7, [r0]
 80085e0:	2c00      	cmp	r4, #0
 80085e2:	f000 80eb 	beq.w	80087bc <forward_dense_integer_SSSA+0x2d0>
 80085e6:	f1b8 0f00 	cmp.w	r8, #0
 80085ea:	f000 809d 	beq.w	8008728 <forward_dense_integer_SSSA+0x23c>
 80085ee:	8860      	ldrh	r0, [r4, #2]
 80085f0:	2800      	cmp	r0, #0
 80085f2:	d167      	bne.n	80086c4 <forward_dense_integer_SSSA+0x1d8>
 80085f4:	900a      	str	r0, [sp, #40]	@ 0x28
 80085f6:	910e      	str	r1, [sp, #56]	@ 0x38
 80085f8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80085fc:	f1bb 0f00 	cmp.w	fp, #0
 8008600:	f000 80de 	beq.w	80087c0 <forward_dense_integer_SSSA+0x2d4>
 8008604:	f8db 0004 	ldr.w	r0, [fp, #4]
 8008608:	2800      	cmp	r0, #0
 800860a:	f000 80d9 	beq.w	80087c0 <forward_dense_integer_SSSA+0x2d4>
 800860e:	6800      	ldr	r0, [r0, #0]
 8008610:	2400      	movs	r4, #0
 8008612:	f10d 0842 	add.w	r8, sp, #66	@ 0x42
 8008616:	f8ad 4042 	strh.w	r4, [sp, #66]	@ 0x42
 800861a:	9411      	str	r4, [sp, #68]	@ 0x44
 800861c:	ed90 7a00 	vldr	s14, [r0]
 8008620:	4640      	mov	r0, r8
 8008622:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008626:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800862a:	f001 f9ab 	bl	8009984 <align_factor>
 800862e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008630:	9011      	str	r0, [sp, #68]	@ 0x44
 8008632:	b32b      	cbz	r3, 8008680 <forward_dense_integer_SSSA+0x194>
 8008634:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 8008638:	4699      	mov	r9, r3
 800863a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800863c:	fa1f fa8a 	uxth.w	sl, sl
 8008640:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8008642:	f8bd b03c 	ldrh.w	fp, [sp, #60]	@ 0x3c
 8008646:	970d      	str	r7, [sp, #52]	@ 0x34
 8008648:	461f      	mov	r7, r3
 800864a:	9a08      	ldr	r2, [sp, #32]
 800864c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800864e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008650:	3401      	adds	r4, #1
 8008652:	4628      	mov	r0, r5
 8008654:	9605      	str	r6, [sp, #20]
 8008656:	9306      	str	r3, [sp, #24]
 8008658:	4456      	add	r6, sl
 800865a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800865c:	445d      	add	r5, fp
 800865e:	9304      	str	r3, [sp, #16]
 8008660:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008662:	9303      	str	r3, [sp, #12]
 8008664:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008666:	e9cd 8301 	strd	r8, r3, [sp, #4]
 800866a:	ab11      	add	r3, sp, #68	@ 0x44
 800866c:	9300      	str	r3, [sp, #0]
 800866e:	463b      	mov	r3, r7
 8008670:	e9cd 1208 	strd	r1, r2, [sp, #32]
 8008674:	f001 fa92 	bl	8009b9c <st_sssa8_fully_connected>
 8008678:	454c      	cmp	r4, r9
 800867a:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800867e:	d1e6      	bne.n	800864e <forward_dense_integer_SSSA+0x162>
 8008680:	b013      	add	sp, #76	@ 0x4c
 8008682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	deff      	udf	#255	@ 0xff
 800868a:	2c00      	cmp	r4, #0
 800868c:	d056      	beq.n	800873c <forward_dense_integer_SSSA+0x250>
 800868e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8008692:	f1b8 0f00 	cmp.w	r8, #0
 8008696:	d05d      	beq.n	8008754 <forward_dense_integer_SSSA+0x268>
 8008698:	8860      	ldrh	r0, [r4, #2]
 800869a:	2800      	cmp	r0, #0
 800869c:	d173      	bne.n	8008786 <forward_dense_integer_SSSA+0x29a>
 800869e:	eddf 7a50 	vldr	s15, [pc, #320]	@ 80087e0 <forward_dense_integer_SSSA+0x2f4>
 80086a2:	68ae      	ldr	r6, [r5, #8]
 80086a4:	f8de 5008 	ldr.w	r5, [lr, #8]
 80086a8:	6889      	ldr	r1, [r1, #8]
 80086aa:	950d      	str	r5, [sp, #52]	@ 0x34
 80086ac:	2f00      	cmp	r7, #0
 80086ae:	d041      	beq.n	8008734 <forward_dense_integer_SSSA+0x248>
 80086b0:	f8d7 c004 	ldr.w	ip, [r7, #4]
 80086b4:	ed9f 0a4a 	vldr	s0, [pc, #296]	@ 80087e0 <forward_dense_integer_SSSA+0x2f4>
 80086b8:	f1bc 0f00 	cmp.w	ip, #0
 80086bc:	d188      	bne.n	80085d0 <forward_dense_integer_SSSA+0xe4>
 80086be:	4667      	mov	r7, ip
 80086c0:	2800      	cmp	r0, #0
 80086c2:	d097      	beq.n	80085f4 <forward_dense_integer_SSSA+0x108>
 80086c4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80086c8:	f990 0000 	ldrsb.w	r0, [r0]
 80086cc:	900a      	str	r0, [sp, #40]	@ 0x28
 80086ce:	e792      	b.n	80085f6 <forward_dense_integer_SSSA+0x10a>
 80086d0:	eddf 7a43 	vldr	s15, [pc, #268]	@ 80087e0 <forward_dense_integer_SSSA+0x2f4>
 80086d4:	2c00      	cmp	r4, #0
 80086d6:	f47f af66 	bne.w	80085a6 <forward_dense_integer_SSSA+0xba>
 80086da:	68ae      	ldr	r6, [r5, #8]
 80086dc:	f8de 5008 	ldr.w	r5, [lr, #8]
 80086e0:	6889      	ldr	r1, [r1, #8]
 80086e2:	950d      	str	r5, [sp, #52]	@ 0x34
 80086e4:	2800      	cmp	r0, #0
 80086e6:	d15a      	bne.n	800879e <forward_dense_integer_SSSA+0x2b2>
 80086e8:	4607      	mov	r7, r0
 80086ea:	ed9f 0a3d 	vldr	s0, [pc, #244]	@ 80087e0 <forward_dense_integer_SSSA+0x2f4>
 80086ee:	900a      	str	r0, [sp, #40]	@ 0x28
 80086f0:	e781      	b.n	80085f6 <forward_dense_integer_SSSA+0x10a>
 80086f2:	b31c      	cbz	r4, 800873c <forward_dense_integer_SSSA+0x250>
 80086f4:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80086f8:	eddf 7a39 	vldr	s15, [pc, #228]	@ 80087e0 <forward_dense_integer_SSSA+0x2f4>
 80086fc:	f1b8 0f00 	cmp.w	r8, #0
 8008700:	f47f af57 	bne.w	80085b2 <forward_dense_integer_SSSA+0xc6>
 8008704:	f8de 0008 	ldr.w	r0, [lr, #8]
 8008708:	68ae      	ldr	r6, [r5, #8]
 800870a:	6889      	ldr	r1, [r1, #8]
 800870c:	900d      	str	r0, [sp, #52]	@ 0x34
 800870e:	f1bc 0f00 	cmp.w	ip, #0
 8008712:	d00e      	beq.n	8008732 <forward_dense_integer_SSSA+0x246>
 8008714:	8878      	ldrh	r0, [r7, #2]
 8008716:	2800      	cmp	r0, #0
 8008718:	d149      	bne.n	80087ae <forward_dense_integer_SSSA+0x2c2>
 800871a:	ed9f 0a31 	vldr	s0, [pc, #196]	@ 80087e0 <forward_dense_integer_SSSA+0x2f4>
 800871e:	2700      	movs	r7, #0
 8008720:	f1b8 0f00 	cmp.w	r8, #0
 8008724:	f47f af63 	bne.w	80085ee <forward_dense_integer_SSSA+0x102>
 8008728:	2000      	movs	r0, #0
 800872a:	900a      	str	r0, [sp, #40]	@ 0x28
 800872c:	e763      	b.n	80085f6 <forward_dense_integer_SSSA+0x10a>
 800872e:	4628      	mov	r0, r5
 8008730:	e6fb      	b.n	800852a <forward_dense_integer_SSSA+0x3e>
 8008732:	4667      	mov	r7, ip
 8008734:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 80087e0 <forward_dense_integer_SSSA+0x2f4>
 8008738:	970a      	str	r7, [sp, #40]	@ 0x28
 800873a:	e75c      	b.n	80085f6 <forward_dense_integer_SSSA+0x10a>
 800873c:	eddf 7a28 	vldr	s15, [pc, #160]	@ 80087e0 <forward_dense_integer_SSSA+0x2f4>
 8008740:	4627      	mov	r7, r4
 8008742:	f8de 0008 	ldr.w	r0, [lr, #8]
 8008746:	eeb0 0a67 	vmov.f32	s0, s15
 800874a:	68ae      	ldr	r6, [r5, #8]
 800874c:	6889      	ldr	r1, [r1, #8]
 800874e:	900d      	str	r0, [sp, #52]	@ 0x34
 8008750:	970a      	str	r7, [sp, #40]	@ 0x28
 8008752:	e750      	b.n	80085f6 <forward_dense_integer_SSSA+0x10a>
 8008754:	eddf 7a22 	vldr	s15, [pc, #136]	@ 80087e0 <forward_dense_integer_SSSA+0x2f4>
 8008758:	4647      	mov	r7, r8
 800875a:	e7f2      	b.n	8008742 <forward_dense_integer_SSSA+0x256>
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	68e2      	ldr	r2, [r4, #12]
 8008760:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008762:	68cb      	ldr	r3, [r1, #12]
 8008764:	6856      	ldr	r6, [r2, #4]
 8008766:	f8d4 e018 	ldr.w	lr, [r4, #24]
 800876a:	698d      	ldr	r5, [r1, #24]
 800876c:	960f      	str	r6, [sp, #60]	@ 0x3c
 800876e:	e9d3 a201 	ldrd	sl, r2, [r3, #4]
 8008772:	68db      	ldr	r3, [r3, #12]
 8008774:	fb03 f302 	mul.w	r3, r3, r2
 8008778:	b2b2      	uxth	r2, r6
 800877a:	930c      	str	r3, [sp, #48]	@ 0x30
 800877c:	fa1f f38a 	uxth.w	r3, sl
 8008780:	e6f8      	b.n	8008574 <forward_dense_integer_SSSA+0x88>
 8008782:	2500      	movs	r5, #0
 8008784:	e6d1      	b.n	800852a <forward_dense_integer_SSSA+0x3e>
 8008786:	f8de 0008 	ldr.w	r0, [lr, #8]
 800878a:	68ae      	ldr	r6, [r5, #8]
 800878c:	900d      	str	r0, [sp, #52]	@ 0x34
 800878e:	f8d8 0000 	ldr.w	r0, [r8]
 8008792:	6889      	ldr	r1, [r1, #8]
 8008794:	eddf 7a12 	vldr	s15, [pc, #72]	@ 80087e0 <forward_dense_integer_SSSA+0x2f4>
 8008798:	ed90 0a00 	vldr	s0, [r0]
 800879c:	e792      	b.n	80086c4 <forward_dense_integer_SSSA+0x1d8>
 800879e:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80087a2:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 80087e0 <forward_dense_integer_SSSA+0x2f4>
 80087a6:	f990 7000 	ldrsb.w	r7, [r0]
 80087aa:	940a      	str	r4, [sp, #40]	@ 0x28
 80087ac:	e723      	b.n	80085f6 <forward_dense_integer_SSSA+0x10a>
 80087ae:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80087b2:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 80087e0 <forward_dense_integer_SSSA+0x2f4>
 80087b6:	f990 7000 	ldrsb.w	r7, [r0]
 80087ba:	e7b5      	b.n	8008728 <forward_dense_integer_SSSA+0x23c>
 80087bc:	940a      	str	r4, [sp, #40]	@ 0x28
 80087be:	e71a      	b.n	80085f6 <forward_dense_integer_SSSA+0x10a>
 80087c0:	2300      	movs	r3, #0
 80087c2:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 80087c6:	9311      	str	r3, [sp, #68]	@ 0x44
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	deff      	udf	#255	@ 0xff
 80087cc:	2300      	movs	r3, #0
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	deff      	udf	#255	@ 0xff
 80087d2:	2300      	movs	r3, #0
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	deff      	udf	#255	@ 0xff
 80087d8:	2300      	movs	r3, #0
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	deff      	udf	#255	@ 0xff
 80087de:	bf00      	nop
 80087e0:	00000000 	.word	0x00000000

080087e4 <forward_transpose>:
 80087e4:	6983      	ldr	r3, [r0, #24]
 80087e6:	881a      	ldrh	r2, [r3, #0]
 80087e8:	2a00      	cmp	r2, #0
 80087ea:	d035      	beq.n	8008858 <forward_transpose+0x74>
 80087ec:	6859      	ldr	r1, [r3, #4]
 80087ee:	684b      	ldr	r3, [r1, #4]
 80087f0:	b103      	cbz	r3, 80087f4 <forward_transpose+0x10>
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	2a01      	cmp	r2, #1
 80087f6:	f000 80a3 	beq.w	8008940 <forward_transpose+0x15c>
 80087fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087fe:	690c      	ldr	r4, [r1, #16]
 8008800:	b08b      	sub	sp, #44	@ 0x2c
 8008802:	b104      	cbz	r4, 8008806 <forward_transpose+0x22>
 8008804:	6824      	ldr	r4, [r4, #0]
 8008806:	6a05      	ldr	r5, [r0, #32]
 8008808:	e9d3 6204 	ldrd	r6, r2, [r3, #16]
 800880c:	6869      	ldr	r1, [r5, #4]
 800880e:	f5b6 6fa0 	cmp.w	r6, #1280	@ 0x500
 8008812:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8008816:	9100      	str	r1, [sp, #0]
 8008818:	68a9      	ldr	r1, [r5, #8]
 800881a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800881e:	9106      	str	r1, [sp, #24]
 8008820:	68e9      	ldr	r1, [r5, #12]
 8008822:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8008826:	9107      	str	r1, [sp, #28]
 8008828:	d318      	bcc.n	800885c <forward_transpose+0x78>
 800882a:	69c1      	ldr	r1, [r0, #28]
 800882c:	f5b1 6fa0 	cmp.w	r1, #1280	@ 0x500
 8008830:	f0c0 8082 	bcc.w	8008938 <forward_transpose+0x154>
 8008834:	6929      	ldr	r1, [r5, #16]
 8008836:	0089      	lsls	r1, r1, #2
 8008838:	f026 06ff 	bic.w	r6, r6, #255	@ 0xff
 800883c:	5851      	ldr	r1, [r2, r1]
 800883e:	f5b6 6fc0 	cmp.w	r6, #1536	@ 0x600
 8008842:	9102      	str	r1, [sp, #8]
 8008844:	d111      	bne.n	800886a <forward_transpose+0x86>
 8008846:	69c1      	ldr	r1, [r0, #28]
 8008848:	f5b1 6fc0 	cmp.w	r1, #1536	@ 0x600
 800884c:	d376      	bcc.n	800893c <forward_transpose+0x158>
 800884e:	6969      	ldr	r1, [r5, #20]
 8008850:	0089      	lsls	r1, r1, #2
 8008852:	5852      	ldr	r2, [r2, r1]
 8008854:	9203      	str	r2, [sp, #12]
 8008856:	e00a      	b.n	800886e <forward_transpose+0x8a>
 8008858:	6853      	ldr	r3, [r2, #4]
 800885a:	deff      	udf	#255	@ 0xff
 800885c:	f026 06ff 	bic.w	r6, r6, #255	@ 0xff
 8008860:	2100      	movs	r1, #0
 8008862:	f5b6 6fc0 	cmp.w	r6, #1536	@ 0x600
 8008866:	9102      	str	r1, [sp, #8]
 8008868:	d0ed      	beq.n	8008846 <forward_transpose+0x62>
 800886a:	2200      	movs	r2, #0
 800886c:	9203      	str	r2, [sp, #12]
 800886e:	699b      	ldr	r3, [r3, #24]
 8008870:	69a2      	ldr	r2, [r4, #24]
 8008872:	68e1      	ldr	r1, [r4, #12]
 8008874:	6896      	ldr	r6, [r2, #8]
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	f3c2 2283 	ubfx	r2, r2, #10, #4
 800887e:	9301      	str	r3, [sp, #4]
 8008880:	68cb      	ldr	r3, [r1, #12]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d055      	beq.n	8008932 <forward_transpose+0x14e>
 8008886:	2300      	movs	r3, #0
 8008888:	6888      	ldr	r0, [r1, #8]
 800888a:	9305      	str	r3, [sp, #20]
 800888c:	2800      	cmp	r0, #0
 800888e:	d050      	beq.n	8008932 <forward_transpose+0x14e>
 8008890:	68a5      	ldr	r5, [r4, #8]
 8008892:	2000      	movs	r0, #0
 8008894:	4692      	mov	sl, r2
 8008896:	9308      	str	r3, [sp, #32]
 8008898:	f3c5 2517 	ubfx	r5, r5, #8, #24
 800889c:	9004      	str	r0, [sp, #16]
 800889e:	469b      	mov	fp, r3
 80088a0:	f04f 0800 	mov.w	r8, #0
 80088a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80088a6:	2d04      	cmp	r5, #4
 80088a8:	bf8c      	ite	hi
 80088aa:	690b      	ldrhi	r3, [r1, #16]
 80088ac:	2301      	movls	r3, #1
 80088ae:	4598      	cmp	r8, r3
 80088b0:	d229      	bcs.n	8008906 <forward_transpose+0x122>
 80088b2:	2d05      	cmp	r5, #5
 80088b4:	46d9      	mov	r9, fp
 80088b6:	f04f 0700 	mov.w	r7, #0
 80088ba:	d91d      	bls.n	80088f8 <forward_transpose+0x114>
 80088bc:	694a      	ldr	r2, [r1, #20]
 80088be:	4297      	cmp	r7, r2
 80088c0:	d21c      	bcs.n	80088fc <forward_transpose+0x118>
 80088c2:	684a      	ldr	r2, [r1, #4]
 80088c4:	b192      	cbz	r2, 80088ec <forward_transpose+0x108>
 80088c6:	2500      	movs	r5, #0
 80088c8:	9b00      	ldr	r3, [sp, #0]
 80088ca:	4631      	mov	r1, r6
 80088cc:	4652      	mov	r2, sl
 80088ce:	4456      	add	r6, sl
 80088d0:	fb03 9005 	mla	r0, r3, r5, r9
 80088d4:	9b01      	ldr	r3, [sp, #4]
 80088d6:	3501      	adds	r5, #1
 80088d8:	4418      	add	r0, r3
 80088da:	f001 fc59 	bl	800a190 <st_int8_copy>
 80088de:	68e1      	ldr	r1, [r4, #12]
 80088e0:	684b      	ldr	r3, [r1, #4]
 80088e2:	429d      	cmp	r5, r3
 80088e4:	d3f0      	bcc.n	80088c8 <forward_transpose+0xe4>
 80088e6:	68a3      	ldr	r3, [r4, #8]
 80088e8:	f3c3 2517 	ubfx	r5, r3, #8, #24
 80088ec:	9b03      	ldr	r3, [sp, #12]
 80088ee:	2d05      	cmp	r5, #5
 80088f0:	f107 0701 	add.w	r7, r7, #1
 80088f4:	4499      	add	r9, r3
 80088f6:	d8e1      	bhi.n	80088bc <forward_transpose+0xd8>
 80088f8:	2f00      	cmp	r7, #0
 80088fa:	d0e2      	beq.n	80088c2 <forward_transpose+0xde>
 80088fc:	9b02      	ldr	r3, [sp, #8]
 80088fe:	f108 0801 	add.w	r8, r8, #1
 8008902:	449b      	add	fp, r3
 8008904:	e7cf      	b.n	80088a6 <forward_transpose+0xc2>
 8008906:	9a04      	ldr	r2, [sp, #16]
 8008908:	9806      	ldr	r0, [sp, #24]
 800890a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800890c:	3201      	adds	r2, #1
 800890e:	4403      	add	r3, r0
 8008910:	6888      	ldr	r0, [r1, #8]
 8008912:	9204      	str	r2, [sp, #16]
 8008914:	4282      	cmp	r2, r0
 8008916:	d3c2      	bcc.n	800889e <forward_transpose+0xba>
 8008918:	9d05      	ldr	r5, [sp, #20]
 800891a:	4652      	mov	r2, sl
 800891c:	9b08      	ldr	r3, [sp, #32]
 800891e:	3501      	adds	r5, #1
 8008920:	462f      	mov	r7, r5
 8008922:	9505      	str	r5, [sp, #20]
 8008924:	68cd      	ldr	r5, [r1, #12]
 8008926:	42af      	cmp	r7, r5
 8008928:	d203      	bcs.n	8008932 <forward_transpose+0x14e>
 800892a:	9d07      	ldr	r5, [sp, #28]
 800892c:	442b      	add	r3, r5
 800892e:	2800      	cmp	r0, #0
 8008930:	d1ae      	bne.n	8008890 <forward_transpose+0xac>
 8008932:	b00b      	add	sp, #44	@ 0x2c
 8008934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008938:	2104      	movs	r1, #4
 800893a:	e77d      	b.n	8008838 <forward_transpose+0x54>
 800893c:	2104      	movs	r1, #4
 800893e:	e788      	b.n	8008852 <forward_transpose+0x6e>
 8008940:	2300      	movs	r3, #0
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	deff      	udf	#255	@ 0xff
 8008946:	bf00      	nop

08008948 <pool_func_mp_array_integer_INT8>:
 8008948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800894c:	b093      	sub	sp, #76	@ 0x4c
 800894e:	468c      	mov	ip, r1
 8008950:	469a      	mov	sl, r3
 8008952:	6804      	ldr	r4, [r0, #0]
 8008954:	f8bd 1074 	ldrh.w	r1, [sp, #116]	@ 0x74
 8008958:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 800895c:	910e      	str	r1, [sp, #56]	@ 0x38
 800895e:	f8bd 1078 	ldrh.w	r1, [sp, #120]	@ 0x78
 8008962:	930d      	str	r3, [sp, #52]	@ 0x34
 8008964:	910f      	str	r1, [sp, #60]	@ 0x3c
 8008966:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008968:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 800896c:	6980      	ldr	r0, [r0, #24]
 800896e:	9110      	str	r1, [sp, #64]	@ 0x40
 8008970:	f8bd b080 	ldrh.w	fp, [sp, #128]	@ 0x80
 8008974:	f8bd 7084 	ldrh.w	r7, [sp, #132]	@ 0x84
 8008978:	f8bd e088 	ldrh.w	lr, [sp, #136]	@ 0x88
 800897c:	f8bd 808c 	ldrh.w	r8, [sp, #140]	@ 0x8c
 8008980:	6999      	ldr	r1, [r3, #24]
 8008982:	681d      	ldr	r5, [r3, #0]
 8008984:	2c00      	cmp	r4, #0
 8008986:	d068      	beq.n	8008a5a <pool_func_mp_array_integer_INT8+0x112>
 8008988:	6866      	ldr	r6, [r4, #4]
 800898a:	2e00      	cmp	r6, #0
 800898c:	d04c      	beq.n	8008a28 <pool_func_mp_array_integer_INT8+0xe0>
 800898e:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 8008992:	f1b9 0f00 	cmp.w	r9, #0
 8008996:	d07a      	beq.n	8008a8e <pool_func_mp_array_integer_INT8+0x146>
 8008998:	6833      	ldr	r3, [r6, #0]
 800899a:	edd3 7a00 	vldr	s15, [r3]
 800899e:	2d00      	cmp	r5, #0
 80089a0:	d079      	beq.n	8008a96 <pool_func_mp_array_integer_INT8+0x14e>
 80089a2:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80089a6:	f1b9 0f00 	cmp.w	r9, #0
 80089aa:	d046      	beq.n	8008a3a <pool_func_mp_array_integer_INT8+0xf2>
 80089ac:	886b      	ldrh	r3, [r5, #2]
 80089ae:	9311      	str	r3, [sp, #68]	@ 0x44
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d05f      	beq.n	8008a74 <pool_func_mp_array_integer_INT8+0x12c>
 80089b4:	f8d9 3000 	ldr.w	r3, [r9]
 80089b8:	6880      	ldr	r0, [r0, #8]
 80089ba:	ed93 7a00 	vldr	s14, [r3]
 80089be:	6889      	ldr	r1, [r1, #8]
 80089c0:	ee87 0a87 	vdiv.f32	s0, s15, s14
 80089c4:	2e00      	cmp	r6, #0
 80089c6:	d060      	beq.n	8008a8a <pool_func_mp_array_integer_INT8+0x142>
 80089c8:	8863      	ldrh	r3, [r4, #2]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	f000 808c 	beq.w	8008ae8 <pool_func_mp_array_integer_INT8+0x1a0>
 80089d0:	6873      	ldr	r3, [r6, #4]
 80089d2:	f993 4000 	ldrsb.w	r4, [r3]
 80089d6:	2d00      	cmp	r5, #0
 80089d8:	d03d      	beq.n	8008a56 <pool_func_mp_array_integer_INT8+0x10e>
 80089da:	f1b9 0f00 	cmp.w	r9, #0
 80089de:	d03a      	beq.n	8008a56 <pool_func_mp_array_integer_INT8+0x10e>
 80089e0:	886b      	ldrh	r3, [r5, #2]
 80089e2:	9311      	str	r3, [sp, #68]	@ 0x44
 80089e4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80089e6:	b11b      	cbz	r3, 80089f0 <pool_func_mp_array_integer_INT8+0xa8>
 80089e8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80089ec:	f993 3000 	ldrsb.w	r3, [r3]
 80089f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80089f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089f8:	da5f      	bge.n	8008aba <pool_func_mp_array_integer_INT8+0x172>
 80089fa:	f8cd a000 	str.w	sl, [sp]
 80089fe:	e9cd 4309 	strd	r4, r3, [sp, #36]	@ 0x24
 8008a02:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008a04:	9304      	str	r3, [sp, #16]
 8008a06:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a08:	9303      	str	r3, [sp, #12]
 8008a0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a0c:	9302      	str	r3, [sp, #8]
 8008a0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008a10:	9301      	str	r3, [sp, #4]
 8008a12:	4613      	mov	r3, r2
 8008a14:	4662      	mov	r2, ip
 8008a16:	e9cd e807 	strd	lr, r8, [sp, #28]
 8008a1a:	e9cd b705 	strd	fp, r7, [sp, #20]
 8008a1e:	f000 fed1 	bl	80097c4 <forward_lite_maxpool_is8os8_scaleneg>
 8008a22:	b013      	add	sp, #76	@ 0x4c
 8008a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a28:	2d00      	cmp	r5, #0
 8008a2a:	d040      	beq.n	8008aae <pool_func_mp_array_integer_INT8+0x166>
 8008a2c:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8008a30:	eddf 7a39 	vldr	s15, [pc, #228]	@ 8008b18 <pool_func_mp_array_integer_INT8+0x1d0>
 8008a34:	f1b9 0f00 	cmp.w	r9, #0
 8008a38:	d1b8      	bne.n	80089ac <pool_func_mp_array_integer_INT8+0x64>
 8008a3a:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8008b18 <pool_func_mp_array_integer_INT8+0x1d0>
 8008a3e:	6880      	ldr	r0, [r0, #8]
 8008a40:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8008a44:	6889      	ldr	r1, [r1, #8]
 8008a46:	2e00      	cmp	r6, #0
 8008a48:	d063      	beq.n	8008b12 <pool_func_mp_array_integer_INT8+0x1ca>
 8008a4a:	8863      	ldrh	r3, [r4, #2]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d04b      	beq.n	8008ae8 <pool_func_mp_array_integer_INT8+0x1a0>
 8008a50:	6873      	ldr	r3, [r6, #4]
 8008a52:	f993 4000 	ldrsb.w	r4, [r3]
 8008a56:	2300      	movs	r3, #0
 8008a58:	e7ca      	b.n	80089f0 <pool_func_mp_array_integer_INT8+0xa8>
 8008a5a:	2d00      	cmp	r5, #0
 8008a5c:	d046      	beq.n	8008aec <pool_func_mp_array_integer_INT8+0x1a4>
 8008a5e:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8008a62:	f1b9 0f00 	cmp.w	r9, #0
 8008a66:	d022      	beq.n	8008aae <pool_func_mp_array_integer_INT8+0x166>
 8008a68:	886b      	ldrh	r3, [r5, #2]
 8008a6a:	9311      	str	r3, [sp, #68]	@ 0x44
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d144      	bne.n	8008afa <pool_func_mp_array_integer_INT8+0x1b2>
 8008a70:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8008b18 <pool_func_mp_array_integer_INT8+0x1d0>
 8008a74:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8008b18 <pool_func_mp_array_integer_INT8+0x1d0>
 8008a78:	6880      	ldr	r0, [r0, #8]
 8008a7a:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8008a7e:	6889      	ldr	r1, [r1, #8]
 8008a80:	2c00      	cmp	r4, #0
 8008a82:	d0e8      	beq.n	8008a56 <pool_func_mp_array_integer_INT8+0x10e>
 8008a84:	6866      	ldr	r6, [r4, #4]
 8008a86:	2e00      	cmp	r6, #0
 8008a88:	d19e      	bne.n	80089c8 <pool_func_mp_array_integer_INT8+0x80>
 8008a8a:	4634      	mov	r4, r6
 8008a8c:	e7aa      	b.n	80089e4 <pool_func_mp_array_integer_INT8+0x9c>
 8008a8e:	eddf 7a22 	vldr	s15, [pc, #136]	@ 8008b18 <pool_func_mp_array_integer_INT8+0x1d0>
 8008a92:	2d00      	cmp	r5, #0
 8008a94:	d185      	bne.n	80089a2 <pool_func_mp_array_integer_INT8+0x5a>
 8008a96:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8008b18 <pool_func_mp_array_integer_INT8+0x1d0>
 8008a9a:	6880      	ldr	r0, [r0, #8]
 8008a9c:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8008aa0:	6889      	ldr	r1, [r1, #8]
 8008aa2:	f1b9 0f00 	cmp.w	r9, #0
 8008aa6:	d12f      	bne.n	8008b08 <pool_func_mp_array_integer_INT8+0x1c0>
 8008aa8:	464c      	mov	r4, r9
 8008aaa:	464b      	mov	r3, r9
 8008aac:	e7a0      	b.n	80089f0 <pool_func_mp_array_integer_INT8+0xa8>
 8008aae:	2400      	movs	r4, #0
 8008ab0:	6880      	ldr	r0, [r0, #8]
 8008ab2:	6889      	ldr	r1, [r1, #8]
 8008ab4:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8008b1c <pool_func_mp_array_integer_INT8+0x1d4>
 8008ab8:	4623      	mov	r3, r4
 8008aba:	f8cd a000 	str.w	sl, [sp]
 8008abe:	e9cd 4309 	strd	r4, r3, [sp, #36]	@ 0x24
 8008ac2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008ac4:	9304      	str	r3, [sp, #16]
 8008ac6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ac8:	9303      	str	r3, [sp, #12]
 8008aca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008acc:	9302      	str	r3, [sp, #8]
 8008ace:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ad0:	9301      	str	r3, [sp, #4]
 8008ad2:	4613      	mov	r3, r2
 8008ad4:	4662      	mov	r2, ip
 8008ad6:	e9cd e807 	strd	lr, r8, [sp, #28]
 8008ada:	e9cd b705 	strd	fp, r7, [sp, #20]
 8008ade:	f000 fd8f 	bl	8009600 <forward_lite_maxpool_is8os8_scalepos>
 8008ae2:	b013      	add	sp, #76	@ 0x4c
 8008ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ae8:	2400      	movs	r4, #0
 8008aea:	e776      	b.n	80089da <pool_func_mp_array_integer_INT8+0x92>
 8008aec:	462c      	mov	r4, r5
 8008aee:	6880      	ldr	r0, [r0, #8]
 8008af0:	6889      	ldr	r1, [r1, #8]
 8008af2:	462b      	mov	r3, r5
 8008af4:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8008b1c <pool_func_mp_array_integer_INT8+0x1d4>
 8008af8:	e7df      	b.n	8008aba <pool_func_mp_array_integer_INT8+0x172>
 8008afa:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8008b18 <pool_func_mp_array_integer_INT8+0x1d0>
 8008afe:	6880      	ldr	r0, [r0, #8]
 8008b00:	eef0 7a40 	vmov.f32	s15, s0
 8008b04:	6889      	ldr	r1, [r1, #8]
 8008b06:	e76f      	b.n	80089e8 <pool_func_mp_array_integer_INT8+0xa0>
 8008b08:	6874      	ldr	r4, [r6, #4]
 8008b0a:	462b      	mov	r3, r5
 8008b0c:	f994 4000 	ldrsb.w	r4, [r4]
 8008b10:	e76e      	b.n	80089f0 <pool_func_mp_array_integer_INT8+0xa8>
 8008b12:	4634      	mov	r4, r6
 8008b14:	4633      	mov	r3, r6
 8008b16:	e76b      	b.n	80089f0 <pool_func_mp_array_integer_INT8+0xa8>
 8008b18:	00000000 	.word	0x00000000
 8008b1c:	7fc00000 	.word	0x7fc00000

08008b20 <forward_lite_conv2d_sssa8_ch>:
 8008b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b24:	ed2d 8b08 	vpush	{d8-d11}
 8008b28:	b0d5      	sub	sp, #340	@ 0x154
 8008b2a:	469a      	mov	sl, r3
 8008b2c:	4689      	mov	r9, r1
 8008b2e:	f8bd 319c 	ldrh.w	r3, [sp, #412]	@ 0x19c
 8008b32:	f8dd b1d8 	ldr.w	fp, [sp, #472]	@ 0x1d8
 8008b36:	9213      	str	r2, [sp, #76]	@ 0x4c
 8008b38:	ee09 3a10 	vmov	s18, r3
 8008b3c:	f8bd 21a0 	ldrh.w	r2, [sp, #416]	@ 0x1a0
 8008b40:	ebab 0543 	sub.w	r5, fp, r3, lsl #1
 8008b44:	f89d 11c4 	ldrb.w	r1, [sp, #452]	@ 0x1c4
 8008b48:	9225      	str	r2, [sp, #148]	@ 0x94
 8008b4a:	9a77      	ldr	r2, [sp, #476]	@ 0x1dc
 8008b4c:	f8bd 61d0 	ldrh.w	r6, [sp, #464]	@ 0x1d0
 8008b50:	4415      	add	r5, r2
 8008b52:	f8bd 21a4 	ldrh.w	r2, [sp, #420]	@ 0x1a4
 8008b56:	9011      	str	r0, [sp, #68]	@ 0x44
 8008b58:	922a      	str	r2, [sp, #168]	@ 0xa8
 8008b5a:	f8bd 21a8 	ldrh.w	r2, [sp, #424]	@ 0x1a8
 8008b5e:	f8bd 01cc 	ldrh.w	r0, [sp, #460]	@ 0x1cc
 8008b62:	9214      	str	r2, [sp, #80]	@ 0x50
 8008b64:	f8bd 21ac 	ldrh.w	r2, [sp, #428]	@ 0x1ac
 8008b68:	9629      	str	r6, [sp, #164]	@ 0xa4
 8008b6a:	005e      	lsls	r6, r3, #1
 8008b6c:	9224      	str	r2, [sp, #144]	@ 0x90
 8008b6e:	07cb      	lsls	r3, r1, #31
 8008b70:	f8bd 21b0 	ldrh.w	r2, [sp, #432]	@ 0x1b0
 8008b74:	f99d 81bc 	ldrsb.w	r8, [sp, #444]	@ 0x1bc
 8008b78:	9220      	str	r2, [sp, #128]	@ 0x80
 8008b7a:	f8bd 21b4 	ldrh.w	r2, [sp, #436]	@ 0x1b4
 8008b7e:	f99d 41c0 	ldrsb.w	r4, [sp, #448]	@ 0x1c0
 8008b82:	922b      	str	r2, [sp, #172]	@ 0xac
 8008b84:	f8bd 71d4 	ldrh.w	r7, [sp, #468]	@ 0x1d4
 8008b88:	9a6e      	ldr	r2, [sp, #440]	@ 0x1b8
 8008b8a:	9126      	str	r1, [sp, #152]	@ 0x98
 8008b8c:	9012      	str	r0, [sp, #72]	@ 0x48
 8008b8e:	f140 8429 	bpl.w	80093e4 <forward_lite_conv2d_sssa8_ch+0x8c4>
 8008b92:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 8008b94:	1c83      	adds	r3, r0, #2
 8008b96:	3102      	adds	r1, #2
 8008b98:	fb01 f303 	mul.w	r3, r1, r3
 8008b9c:	931d      	str	r3, [sp, #116]	@ 0x74
 8008b9e:	9b77      	ldr	r3, [sp, #476]	@ 0x1dc
 8008ba0:	4650      	mov	r0, sl
 8008ba2:	9966      	ldr	r1, [sp, #408]	@ 0x198
 8008ba4:	9201      	str	r2, [sp, #4]
 8008ba6:	ee19 2a10 	vmov	r2, s18
 8008baa:	e9cd 8302 	strd	r8, r3, [sp, #8]
 8008bae:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8008bb0:	9300      	str	r3, [sp, #0]
 8008bb2:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8008bb4:	f000 ff68 	bl	8009a88 <st_sssa8_ch_convolve_rank1upd>
 8008bb8:	ee19 2a10 	vmov	r2, s18
 8008bbc:	9977      	ldr	r1, [sp, #476]	@ 0x1dc
 8008bbe:	18b3      	adds	r3, r6, r2
 8008bc0:	9825      	ldr	r0, [sp, #148]	@ 0x94
 8008bc2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8008bc6:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8008bc8:	fb10 f303 	smulbb	r3, r0, r3
 8008bcc:	9119      	str	r1, [sp, #100]	@ 0x64
 8008bce:	fb13 f30a 	smulbb	r3, r3, sl
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	931c      	str	r3, [sp, #112]	@ 0x70
 8008bd6:	ebc2 7342 	rsb	r3, r2, r2, lsl #29
 8008bda:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8008bde:	ee0a 3a10 	vmov	s20, r3
 8008be2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8008be6:	9323      	str	r3, [sp, #140]	@ 0x8c
 8008be8:	b1d2      	cbz	r2, 8008c20 <forward_lite_conv2d_sssa8_ch+0x100>
 8008bea:	1d19      	adds	r1, r3, #4
 8008bec:	f04f 0c01 	mov.w	ip, #1
 8008bf0:	eb05 0e06 	add.w	lr, r5, r6
 8008bf4:	f935 3b02 	ldrsh.w	r3, [r5], #2
 8008bf8:	1e5a      	subs	r2, r3, #1
 8008bfa:	fa0c f003 	lsl.w	r0, ip, r3
 8008bfe:	fa04 f303 	lsl.w	r3, r4, r3
 8008c02:	b292      	uxth	r2, r2
 8008c04:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8008c08:	2a14      	cmp	r2, #20
 8008c0a:	f200 8184 	bhi.w	8008f16 <forward_lite_conv2d_sssa8_ch+0x3f6>
 8008c0e:	45ae      	cmp	lr, r5
 8008c10:	f841 3c04 	str.w	r3, [r1, #-4]
 8008c14:	f101 0104 	add.w	r1, r1, #4
 8008c18:	d1ec      	bne.n	8008bf4 <forward_lite_conv2d_sssa8_ch+0xd4>
 8008c1a:	9b77      	ldr	r3, [sp, #476]	@ 0x1dc
 8008c1c:	eb03 050b 	add.w	r5, r3, fp
 8008c20:	1bab      	subs	r3, r5, r6
 8008c22:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8008c24:	9e2a      	ldr	r6, [sp, #168]	@ 0xa8
 8008c26:	aa34      	add	r2, sp, #208	@ 0xd0
 8008c28:	9322      	str	r3, [sp, #136]	@ 0x88
 8008c2a:	a94a      	add	r1, sp, #296	@ 0x128
 8008c2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008c2e:	fb06 f504 	mul.w	r5, r6, r4
 8008c32:	a840      	add	r0, sp, #256	@ 0x100
 8008c34:	fb0a fb04 	mul.w	fp, sl, r4
 8008c38:	9335      	str	r3, [sp, #212]	@ 0xd4
 8008c3a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008c3c:	943e      	str	r4, [sp, #248]	@ 0xf8
 8008c3e:	933a      	str	r3, [sp, #232]	@ 0xe8
 8008c40:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8008c42:	fb0a f405 	mul.w	r4, sl, r5
 8008c46:	f8cd 90d8 	str.w	r9, [sp, #216]	@ 0xd8
 8008c4a:	9339      	str	r3, [sp, #228]	@ 0xe4
 8008c4c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008c4e:	963d      	str	r6, [sp, #244]	@ 0xf4
 8008c50:	934c      	str	r3, [sp, #304]	@ 0x130
 8008c52:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008c54:	934d      	str	r3, [sp, #308]	@ 0x134
 8008c56:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008c58:	934e      	str	r3, [sp, #312]	@ 0x138
 8008c5a:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8008c5c:	934f      	str	r3, [sp, #316]	@ 0x13c
 8008c5e:	ab3c      	add	r3, sp, #240	@ 0xf0
 8008c60:	9300      	str	r3, [sp, #0]
 8008c62:	ab38      	add	r3, sp, #224	@ 0xe0
 8008c64:	f001 fd9e 	bl	800a7a4 <ai_padding_opt_init>
 8008c68:	ee19 3a10 	vmov	r3, s18
 8008c6c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008c6e:	fb03 f404 	mul.w	r4, r3, r4
 8008c72:	fb0b f306 	mul.w	r3, fp, r6
 8008c76:	f5b4 6f20 	cmp.w	r4, #2560	@ 0xa00
 8008c7a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008c7e:	bfa8      	it	ge
 8008c80:	f44f 6420 	movge.w	r4, #2560	@ 0xa00
 8008c84:	2f01      	cmp	r7, #1
 8008c86:	ee09 3a90 	vmov	s19, r3
 8008c8a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8008c8c:	f003 0202 	and.w	r2, r3, #2
 8008c90:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008c94:	9230      	str	r2, [sp, #192]	@ 0xc0
 8008c96:	931e      	str	r3, [sp, #120]	@ 0x78
 8008c98:	f000 838f 	beq.w	80093ba <forward_lite_conv2d_sssa8_ch+0x89a>
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	932e      	str	r3, [sp, #184]	@ 0xb8
 8008ca0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	f240 824c 	bls.w	8009140 <forward_lite_conv2d_sssa8_ch+0x620>
 8008ca8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8008caa:	ee19 2a10 	vmov	r2, s18
 8008cae:	fbb4 f3f3 	udiv	r3, r4, r3
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	bf28      	it	cs
 8008cba:	4611      	movcs	r1, r2
 8008cbc:	fbb2 f3f1 	udiv	r3, r2, r1
 8008cc0:	fb01 2213 	mls	r2, r1, r3, r2
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	911f      	str	r1, [sp, #124]	@ 0x7c
 8008cc8:	b292      	uxth	r2, r2
 8008cca:	2a00      	cmp	r2, #0
 8008ccc:	f040 812b 	bne.w	8008f26 <forward_lite_conv2d_sssa8_ch+0x406>
 8008cd0:	1e5a      	subs	r2, r3, #1
 8008cd2:	b292      	uxth	r2, r2
 8008cd4:	922d      	str	r2, [sp, #180]	@ 0xb4
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	f000 8219 	beq.w	800910e <forward_lite_conv2d_sssa8_ch+0x5ee>
 8008cdc:	fb0a f505 	mul.w	r5, sl, r5
 8008ce0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008ce2:	fa0f f688 	sxth.w	r6, r8
 8008ce6:	ed8d 9a2f 	vstr	s18, [sp, #188]	@ 0xbc
 8008cea:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8008cee:	ea4f 084a 	mov.w	r8, sl, lsl #1
 8008cf2:	ee0a 6a90 	vmov	s21, r6
 8008cf6:	9318      	str	r3, [sp, #96]	@ 0x60
 8008cf8:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8008cfa:	f8cd 80b0 	str.w	r8, [sp, #176]	@ 0xb0
 8008cfe:	46d0      	mov	r8, sl
 8008d00:	f1a3 0303 	sub.w	r3, r3, #3
 8008d04:	fab3 f383 	clz	r3, r3
 8008d08:	095b      	lsrs	r3, r3, #5
 8008d0a:	9328      	str	r3, [sp, #160]	@ 0xa0
 8008d0c:	f00a 0303 	and.w	r3, sl, #3
 8008d10:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008d12:	ea4f 034b 	mov.w	r3, fp, lsl #1
 8008d16:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d18:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8008d1a:	b953      	cbnz	r3, 8008d32 <forward_lite_conv2d_sssa8_ch+0x212>
 8008d1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	f040 8206 	bne.w	8009130 <forward_lite_conv2d_sssa8_ch+0x610>
 8008d24:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8008d26:	ee19 1a90 	vmov	r1, s19
 8008d2a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008d2c:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8008d2e:	f001 fc7f 	bl	800a630 <st_int8_to16_dual_interleaved>
 8008d32:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8008d34:	2b03      	cmp	r3, #3
 8008d36:	f000 81ef 	beq.w	8009118 <forward_lite_conv2d_sssa8_ch+0x5f8>
 8008d3a:	9b72      	ldr	r3, [sp, #456]	@ 0x1c8
 8008d3c:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008d3e:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	f000 80b3 	beq.w	8008eac <forward_lite_conv2d_sssa8_ch+0x38c>
 8008d46:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8008d48:	2400      	movs	r4, #0
 8008d4a:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008d4c:	ee08 ba90 	vmov	s17, fp
 8008d50:	425b      	negs	r3, r3
 8008d52:	4626      	mov	r6, r4
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	9321      	str	r3, [sp, #132]	@ 0x84
 8008d58:	a840      	add	r0, sp, #256	@ 0x100
 8008d5a:	f001 fd7d 	bl	800a858 <ai_padding_opt_phase1>
 8008d5e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	f000 81ca 	beq.w	80090fa <forward_lite_conv2d_sssa8_ch+0x5da>
 8008d66:	b2a3      	uxth	r3, r4
 8008d68:	9327      	str	r3, [sp, #156]	@ 0x9c
 8008d6a:	e9dd 322a 	ldrd	r3, r2, [sp, #168]	@ 0xa8
 8008d6e:	1a9b      	subs	r3, r3, r2
 8008d70:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008d72:	fb06 3302 	mla	r3, r6, r2, r3
 8008d76:	f9bd 2084 	ldrsh.w	r2, [sp, #132]	@ 0x84
 8008d7a:	930d      	str	r3, [sp, #52]	@ 0x34
 8008d7c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008d7e:	425b      	negs	r3, r3
 8008d80:	b29b      	uxth	r3, r3
 8008d82:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d84:	2300      	movs	r3, #0
 8008d86:	930c      	str	r3, [sp, #48]	@ 0x30
 8008d88:	e9cd 3216 	strd	r3, r2, [sp, #88]	@ 0x58
 8008d8c:	9b40      	ldr	r3, [sp, #256]	@ 0x100
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	f000 80e6 	beq.w	8008f60 <forward_lite_conv2d_sssa8_ch+0x440>
 8008d94:	3b01      	subs	r3, #1
 8008d96:	9340      	str	r3, [sp, #256]	@ 0x100
 8008d98:	2301      	movs	r3, #1
 8008d9a:	f8ad 3126 	strh.w	r3, [sp, #294]	@ 0x126
 8008d9e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008da0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008da2:	4293      	cmp	r3, r2
 8008da4:	f280 80ea 	bge.w	8008f7c <forward_lite_conv2d_sssa8_ch+0x45c>
 8008da8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8008daa:	46c3      	mov	fp, r8
 8008dac:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008dae:	ee1a 7a90 	vmov	r7, s21
 8008db2:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8008db4:	f8dd a0b0 	ldr.w	sl, [sp, #176]	@ 0xb0
 8008db8:	fb01 3402 	mla	r4, r1, r2, r3
 8008dbc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008dbe:	1ae4      	subs	r4, r4, r3
 8008dc0:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 8008dc4:	9310      	str	r3, [sp, #64]	@ 0x40
 8008dc6:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8008dca:	930e      	str	r3, [sp, #56]	@ 0x38
 8008dcc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008dce:	461a      	mov	r2, r3
 8008dd0:	930a      	str	r3, [sp, #40]	@ 0x28
 8008dd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008dd4:	42a3      	cmp	r3, r4
 8008dd6:	da25      	bge.n	8008e24 <forward_lite_conv2d_sssa8_ch+0x304>
 8008dd8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008dda:	ea4f 78d1 	mov.w	r8, r1, lsr #31
 8008dde:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008de0:	4291      	cmp	r1, r2
 8008de2:	bfd8      	it	le
 8008de4:	f048 0801 	orrle.w	r8, r8, #1
 8008de8:	fb09 f202 	mul.w	r2, r9, r2
 8008dec:	9215      	str	r2, [sp, #84]	@ 0x54
 8008dee:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008df0:	2a00      	cmp	r2, #0
 8008df2:	f000 809c 	beq.w	8008f2e <forward_lite_conv2d_sssa8_ch+0x40e>
 8008df6:	461e      	mov	r6, r3
 8008df8:	469e      	mov	lr, r3
 8008dfa:	0ff3      	lsrs	r3, r6, #31
 8008dfc:	4629      	mov	r1, r5
 8008dfe:	465a      	mov	r2, fp
 8008e00:	4638      	mov	r0, r7
 8008e02:	45f1      	cmp	r9, lr
 8008e04:	bfd8      	it	le
 8008e06:	f043 0301 	orrle.w	r3, r3, #1
 8008e0a:	b91b      	cbnz	r3, 8008e14 <forward_lite_conv2d_sssa8_ch+0x2f4>
 8008e0c:	f1b8 0f00 	cmp.w	r8, #0
 8008e10:	f000 8144 	beq.w	800909c <forward_lite_conv2d_sssa8_ch+0x57c>
 8008e14:	f002 fb62 	bl	800b4dc <arm_fill_q15>
 8008e18:	3601      	adds	r6, #1
 8008e1a:	4455      	add	r5, sl
 8008e1c:	b236      	sxth	r6, r6
 8008e1e:	42a6      	cmp	r6, r4
 8008e20:	46b6      	mov	lr, r6
 8008e22:	dbea      	blt.n	8008dfa <forward_lite_conv2d_sssa8_ch+0x2da>
 8008e24:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008e26:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008e28:	3201      	adds	r2, #1
 8008e2a:	b213      	sxth	r3, r2
 8008e2c:	428b      	cmp	r3, r1
 8008e2e:	461a      	mov	r2, r3
 8008e30:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e32:	dbce      	blt.n	8008dd2 <forward_lite_conv2d_sssa8_ch+0x2b2>
 8008e34:	46d8      	mov	r8, fp
 8008e36:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8008e38:	42ab      	cmp	r3, r5
 8008e3a:	f000 80a6 	beq.w	8008f8a <forward_lite_conv2d_sssa8_ch+0x46a>
 8008e3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e40:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8008e42:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8008e44:	440b      	add	r3, r1
 8008e46:	3201      	adds	r2, #1
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	b212      	sxth	r2, r2
 8008e4c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008e4e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008e50:	920c      	str	r2, [sp, #48]	@ 0x30
 8008e52:	429a      	cmp	r2, r3
 8008e54:	9216      	str	r2, [sp, #88]	@ 0x58
 8008e56:	db99      	blt.n	8008d8c <forward_lite_conv2d_sssa8_ch+0x26c>
 8008e58:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008e5a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008e5c:	9c27      	ldr	r4, [sp, #156]	@ 0x9c
 8008e5e:	4413      	add	r3, r2
 8008e60:	3401      	adds	r4, #1
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	b224      	sxth	r4, r4
 8008e66:	9321      	str	r3, [sp, #132]	@ 0x84
 8008e68:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8008e6a:	4626      	mov	r6, r4
 8008e6c:	429c      	cmp	r4, r3
 8008e6e:	f6ff af73 	blt.w	8008d58 <forward_lite_conv2d_sssa8_ch+0x238>
 8008e72:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8008e74:	ee18 ba90 	vmov	fp, s17
 8008e78:	42a9      	cmp	r1, r5
 8008e7a:	d017      	beq.n	8008eac <forward_lite_conv2d_sssa8_ch+0x38c>
 8008e7c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8008e7e:	ee1a 2a10 	vmov	r2, s20
 8008e82:	ee19 0a90 	vmov	r0, s19
 8008e86:	9307      	str	r3, [sp, #28]
 8008e88:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8008e8a:	9306      	str	r3, [sp, #24]
 8008e8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008e8e:	9305      	str	r3, [sp, #20]
 8008e90:	9b77      	ldr	r3, [sp, #476]	@ 0x1dc
 8008e92:	9304      	str	r3, [sp, #16]
 8008e94:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008e96:	9303      	str	r3, [sp, #12]
 8008e98:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8008e9a:	9302      	str	r3, [sp, #8]
 8008e9c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8008e9e:	9301      	str	r3, [sp, #4]
 8008ea0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008ea2:	9300      	str	r3, [sp, #0]
 8008ea4:	ee19 3a10 	vmov	r3, s18
 8008ea8:	f002 f8da 	bl	800b060 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 8008eac:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8008eae:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8008eb0:	1a9b      	subs	r3, r3, r2
 8008eb2:	b299      	uxth	r1, r3
 8008eb4:	4613      	mov	r3, r2
 8008eb6:	428a      	cmp	r2, r1
 8008eb8:	912f      	str	r1, [sp, #188]	@ 0xbc
 8008eba:	bf28      	it	cs
 8008ebc:	460b      	movcs	r3, r1
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	f000 811e 	beq.w	8009100 <forward_lite_conv2d_sssa8_ch+0x5e0>
 8008ec4:	9966      	ldr	r1, [sp, #408]	@ 0x198
 8008ec6:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8008ec8:	fb00 1102 	mla	r1, r0, r2, r1
 8008ecc:	9166      	str	r1, [sp, #408]	@ 0x198
 8008ece:	ee1a 1a10 	vmov	r1, s20
 8008ed2:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008ed6:	ee0a 1a10 	vmov	s20, r1
 8008eda:	9922      	ldr	r1, [sp, #136]	@ 0x88
 8008edc:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8008ee0:	9122      	str	r1, [sp, #136]	@ 0x88
 8008ee2:	9977      	ldr	r1, [sp, #476]	@ 0x1dc
 8008ee4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008ee8:	9177      	str	r1, [sp, #476]	@ 0x1dc
 8008eea:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8008eec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008ef0:	9123      	str	r1, [sp, #140]	@ 0x8c
 8008ef2:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 8008ef4:	2900      	cmp	r1, #0
 8008ef6:	f000 8115 	beq.w	8009124 <forward_lite_conv2d_sssa8_ch+0x604>
 8008efa:	9972      	ldr	r1, [sp, #456]	@ 0x1c8
 8008efc:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8008efe:	931f      	str	r3, [sp, #124]	@ 0x7c
 8008f00:	fb00 1202 	mla	r2, r0, r2, r1
 8008f04:	9272      	str	r2, [sp, #456]	@ 0x1c8
 8008f06:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8008f08:	1e53      	subs	r3, r2, #1
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	2a00      	cmp	r2, #0
 8008f0e:	f000 80fe 	beq.w	800910e <forward_lite_conv2d_sssa8_ch+0x5ee>
 8008f12:	932d      	str	r3, [sp, #180]	@ 0xb4
 8008f14:	e700      	b.n	8008d18 <forward_lite_conv2d_sssa8_ch+0x1f8>
 8008f16:	45ae      	cmp	lr, r5
 8008f18:	f841 4c04 	str.w	r4, [r1, #-4]
 8008f1c:	f101 0104 	add.w	r1, r1, #4
 8008f20:	f47f ae68 	bne.w	8008bf4 <forward_lite_conv2d_sssa8_ch+0xd4>
 8008f24:	e679      	b.n	8008c1a <forward_lite_conv2d_sssa8_ch+0xfa>
 8008f26:	1c5a      	adds	r2, r3, #1
 8008f28:	932d      	str	r3, [sp, #180]	@ 0xb4
 8008f2a:	b293      	uxth	r3, r2
 8008f2c:	e6d3      	b.n	8008cd6 <forward_lite_conv2d_sssa8_ch+0x1b6>
 8008f2e:	469c      	mov	ip, r3
 8008f30:	461e      	mov	r6, r3
 8008f32:	45e1      	cmp	r9, ip
 8008f34:	465a      	mov	r2, fp
 8008f36:	4629      	mov	r1, r5
 8008f38:	4638      	mov	r0, r7
 8008f3a:	bfcc      	ite	gt
 8008f3c:	2300      	movgt	r3, #0
 8008f3e:	2301      	movle	r3, #1
 8008f40:	ea53 73d6 	orrs.w	r3, r3, r6, lsr #31
 8008f44:	d103      	bne.n	8008f4e <forward_lite_conv2d_sssa8_ch+0x42e>
 8008f46:	f1b8 0f00 	cmp.w	r8, #0
 8008f4a:	f000 809e 	beq.w	800908a <forward_lite_conv2d_sssa8_ch+0x56a>
 8008f4e:	f002 fac5 	bl	800b4dc <arm_fill_q15>
 8008f52:	3601      	adds	r6, #1
 8008f54:	4455      	add	r5, sl
 8008f56:	b236      	sxth	r6, r6
 8008f58:	42a6      	cmp	r6, r4
 8008f5a:	46b4      	mov	ip, r6
 8008f5c:	dbe9      	blt.n	8008f32 <forward_lite_conv2d_sssa8_ch+0x412>
 8008f5e:	e761      	b.n	8008e24 <forward_lite_conv2d_sssa8_ch+0x304>
 8008f60:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d13d      	bne.n	8008fe2 <forward_lite_conv2d_sssa8_ch+0x4c2>
 8008f66:	9b42      	ldr	r3, [sp, #264]	@ 0x108
 8008f68:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008f6a:	3b01      	subs	r3, #1
 8008f6c:	9342      	str	r3, [sp, #264]	@ 0x108
 8008f6e:	2301      	movs	r3, #1
 8008f70:	f8ad 3126 	strh.w	r3, [sp, #294]	@ 0x126
 8008f74:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008f76:	4293      	cmp	r3, r2
 8008f78:	f6ff af16 	blt.w	8008da8 <forward_lite_conv2d_sssa8_ch+0x288>
 8008f7c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 8008f80:	9310      	str	r3, [sp, #64]	@ 0x40
 8008f82:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8008f84:	42ab      	cmp	r3, r5
 8008f86:	f47f af5a 	bne.w	8008e3e <forward_lite_conv2d_sssa8_ch+0x31e>
 8008f8a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	f040 808e 	bne.w	80090ae <forward_lite_conv2d_sssa8_ch+0x58e>
 8008f92:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	f000 808a 	beq.w	80090ae <forward_lite_conv2d_sssa8_ch+0x58e>
 8008f9a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8008f9c:	ee1a 2a10 	vmov	r2, s20
 8008fa0:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8008fa2:	ee19 0a90 	vmov	r0, s19
 8008fa6:	9308      	str	r3, [sp, #32]
 8008fa8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8008faa:	9307      	str	r3, [sp, #28]
 8008fac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008fae:	9306      	str	r3, [sp, #24]
 8008fb0:	9b77      	ldr	r3, [sp, #476]	@ 0x1dc
 8008fb2:	9305      	str	r3, [sp, #20]
 8008fb4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008fb6:	9304      	str	r3, [sp, #16]
 8008fb8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8008fba:	9303      	str	r3, [sp, #12]
 8008fbc:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8008fbe:	9302      	str	r3, [sp, #8]
 8008fc0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008fc2:	9300      	str	r3, [sp, #0]
 8008fc4:	2302      	movs	r3, #2
 8008fc6:	9301      	str	r3, [sp, #4]
 8008fc8:	ee19 3a10 	vmov	r3, s18
 8008fcc:	f001 fc5e 	bl	800a88c <st_sssa8_ch_nn_mat_mult_kernel_opt>
 8008fd0:	901b      	str	r0, [sp, #108]	@ 0x6c
 8008fd2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008fd4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008fd6:	3b01      	subs	r3, #1
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	f000 8089 	beq.w	80090f0 <forward_lite_conv2d_sssa8_ch+0x5d0>
 8008fde:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008fe0:	e72d      	b.n	8008e3e <forward_lite_conv2d_sssa8_ch+0x31e>
 8008fe2:	3b01      	subs	r3, #1
 8008fe4:	9341      	str	r3, [sp, #260]	@ 0x104
 8008fe6:	f8bd 3124 	ldrh.w	r3, [sp, #292]	@ 0x124
 8008fea:	2b01      	cmp	r3, #1
 8008fec:	f8ad 3126 	strh.w	r3, [sp, #294]	@ 0x126
 8008ff0:	f43f aed5 	beq.w	8008d9e <forward_lite_conv2d_sssa8_ch+0x27e>
 8008ff4:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 8008ff8:	f9bd 402c 	ldrsh.w	r4, [sp, #44]	@ 0x2c
 8008ffc:	9310      	str	r3, [sp, #64]	@ 0x40
 8008ffe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009000:	bb0b      	cbnz	r3, 8009046 <forward_lite_conv2d_sssa8_ch+0x526>
 8009002:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009004:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009006:	428b      	cmp	r3, r1
 8009008:	f6bf af15 	bge.w	8008e36 <forward_lite_conv2d_sssa8_ch+0x316>
 800900c:	46ab      	mov	fp, r5
 800900e:	464f      	mov	r7, r9
 8009010:	4625      	mov	r5, r4
 8009012:	461e      	mov	r6, r3
 8009014:	4618      	mov	r0, r3
 8009016:	ee18 2a90 	vmov	r2, s17
 800901a:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 800901c:	4689      	mov	r9, r1
 800901e:	f8dd a044 	ldr.w	sl, [sp, #68]	@ 0x44
 8009022:	3601      	adds	r6, #1
 8009024:	fb00 5007 	mla	r0, r0, r7, r5
 8009028:	4659      	mov	r1, fp
 800902a:	920a      	str	r2, [sp, #40]	@ 0x28
 800902c:	b236      	sxth	r6, r6
 800902e:	fb08 a000 	mla	r0, r8, r0, sl
 8009032:	f001 f9cf 	bl	800a3d4 <st_int8_to16_no_shift_interleaved>
 8009036:	44a3      	add	fp, r4
 8009038:	454e      	cmp	r6, r9
 800903a:	4630      	mov	r0, r6
 800903c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800903e:	dbf0      	blt.n	8009022 <forward_lite_conv2d_sssa8_ch+0x502>
 8009040:	465d      	mov	r5, fp
 8009042:	46b9      	mov	r9, r7
 8009044:	e6f7      	b.n	8008e36 <forward_lite_conv2d_sssa8_ch+0x316>
 8009046:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009048:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800904a:	428b      	cmp	r3, r1
 800904c:	f6bf aef3 	bge.w	8008e36 <forward_lite_conv2d_sssa8_ch+0x316>
 8009050:	46ab      	mov	fp, r5
 8009052:	464f      	mov	r7, r9
 8009054:	4625      	mov	r5, r4
 8009056:	461e      	mov	r6, r3
 8009058:	4618      	mov	r0, r3
 800905a:	ee18 2a90 	vmov	r2, s17
 800905e:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8009060:	4689      	mov	r9, r1
 8009062:	f8dd a044 	ldr.w	sl, [sp, #68]	@ 0x44
 8009066:	3601      	adds	r6, #1
 8009068:	fb00 5007 	mla	r0, r0, r7, r5
 800906c:	4659      	mov	r1, fp
 800906e:	920a      	str	r2, [sp, #40]	@ 0x28
 8009070:	b236      	sxth	r6, r6
 8009072:	fb08 a000 	mla	r0, r8, r0, sl
 8009076:	f001 f94b 	bl	800a310 <st_int8_to16_no_shift>
 800907a:	44a3      	add	fp, r4
 800907c:	454e      	cmp	r6, r9
 800907e:	4630      	mov	r0, r6
 8009080:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009082:	dbf0      	blt.n	8009066 <forward_lite_conv2d_sssa8_ch+0x546>
 8009084:	465d      	mov	r5, fp
 8009086:	46b9      	mov	r9, r7
 8009088:	e6d5      	b.n	8008e36 <forward_lite_conv2d_sssa8_ch+0x316>
 800908a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800908c:	eb03 000c 	add.w	r0, r3, ip
 8009090:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009092:	fb0b 3000 	mla	r0, fp, r0, r3
 8009096:	f001 f99d 	bl	800a3d4 <st_int8_to16_no_shift_interleaved>
 800909a:	e75a      	b.n	8008f52 <forward_lite_conv2d_sssa8_ch+0x432>
 800909c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800909e:	eb03 000e 	add.w	r0, r3, lr
 80090a2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80090a4:	fb0b 3000 	mla	r0, fp, r0, r3
 80090a8:	f001 f932 	bl	800a310 <st_int8_to16_no_shift>
 80090ac:	e6b4      	b.n	8008e18 <forward_lite_conv2d_sssa8_ch+0x2f8>
 80090ae:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80090b0:	ee1a 2a10 	vmov	r2, s20
 80090b4:	9919      	ldr	r1, [sp, #100]	@ 0x64
 80090b6:	ee19 0a90 	vmov	r0, s19
 80090ba:	9308      	str	r3, [sp, #32]
 80090bc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80090be:	9307      	str	r3, [sp, #28]
 80090c0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80090c2:	9306      	str	r3, [sp, #24]
 80090c4:	9b77      	ldr	r3, [sp, #476]	@ 0x1dc
 80090c6:	9305      	str	r3, [sp, #20]
 80090c8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80090ca:	9304      	str	r3, [sp, #16]
 80090cc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80090ce:	9303      	str	r3, [sp, #12]
 80090d0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80090d2:	9302      	str	r3, [sp, #8]
 80090d4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80090d6:	9300      	str	r3, [sp, #0]
 80090d8:	2300      	movs	r3, #0
 80090da:	9301      	str	r3, [sp, #4]
 80090dc:	ee19 3a10 	vmov	r3, s18
 80090e0:	f001 fbd4 	bl	800a88c <st_sssa8_ch_nn_mat_mult_kernel_opt>
 80090e4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80090e6:	901b      	str	r0, [sp, #108]	@ 0x6c
 80090e8:	2b03      	cmp	r3, #3
 80090ea:	f47f af78 	bne.w	8008fde <forward_lite_conv2d_sssa8_ch+0x4be>
 80090ee:	e770      	b.n	8008fd2 <forward_lite_conv2d_sssa8_ch+0x4b2>
 80090f0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80090f2:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80090f4:	3302      	adds	r3, #2
 80090f6:	931b      	str	r3, [sp, #108]	@ 0x6c
 80090f8:	e6a1      	b.n	8008e3e <forward_lite_conv2d_sssa8_ch+0x31e>
 80090fa:	b2a3      	uxth	r3, r4
 80090fc:	9327      	str	r3, [sp, #156]	@ 0x9c
 80090fe:	e6ab      	b.n	8008e58 <forward_lite_conv2d_sssa8_ch+0x338>
 8009100:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8009102:	931f      	str	r3, [sp, #124]	@ 0x7c
 8009104:	1e53      	subs	r3, r2, #1
 8009106:	b29b      	uxth	r3, r3
 8009108:	2a00      	cmp	r2, #0
 800910a:	f47f af02 	bne.w	8008f12 <forward_lite_conv2d_sssa8_ch+0x3f2>
 800910e:	b055      	add	sp, #340	@ 0x154
 8009110:	ecbd 8b08 	vpop	{d8-d11}
 8009114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009118:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800911a:	9a72      	ldr	r2, [sp, #456]	@ 0x1c8
 800911c:	3303      	adds	r3, #3
 800911e:	18d3      	adds	r3, r2, r3
 8009120:	931b      	str	r3, [sp, #108]	@ 0x6c
 8009122:	e60c      	b.n	8008d3e <forward_lite_conv2d_sssa8_ch+0x21e>
 8009124:	4611      	mov	r1, r2
 8009126:	9a72      	ldr	r2, [sp, #456]	@ 0x1c8
 8009128:	931f      	str	r3, [sp, #124]	@ 0x7c
 800912a:	440a      	add	r2, r1
 800912c:	9272      	str	r2, [sp, #456]	@ 0x1c8
 800912e:	e6ea      	b.n	8008f06 <forward_lite_conv2d_sssa8_ch+0x3e6>
 8009130:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8009132:	ee19 1a90 	vmov	r1, s19
 8009136:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009138:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800913a:	f001 f98f 	bl	800a45c <st_int8_to16_dual>
 800913e:	e5f8      	b.n	8008d32 <forward_lite_conv2d_sssa8_ch+0x212>
 8009140:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009142:	ee19 1a10 	vmov	r1, s18
 8009146:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8009148:	fb02 f303 	mul.w	r3, r2, r3
 800914c:	9a72      	ldr	r2, [sp, #456]	@ 0x1c8
 800914e:	fb01 2303 	mla	r3, r1, r3, r2
 8009152:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009154:	429a      	cmp	r2, r3
 8009156:	f4bf ada7 	bcs.w	8008ca8 <forward_lite_conv2d_sssa8_ch+0x188>
 800915a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800915c:	fb03 f309 	mul.w	r3, r3, r9
 8009160:	fb0a 2303 	mla	r3, sl, r3, r2
 8009164:	9a72      	ldr	r2, [sp, #456]	@ 0x1c8
 8009166:	429a      	cmp	r2, r3
 8009168:	f4bf ad9e 	bcs.w	8008ca8 <forward_lite_conv2d_sssa8_ch+0x188>
 800916c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800916e:	fbb4 f3f3 	udiv	r3, r4, r3
 8009172:	b29b      	uxth	r3, r3
 8009174:	4619      	mov	r1, r3
 8009176:	ee19 3a10 	vmov	r3, s18
 800917a:	4299      	cmp	r1, r3
 800917c:	bf28      	it	cs
 800917e:	4619      	movcs	r1, r3
 8009180:	fbb3 f2f1 	udiv	r2, r3, r1
 8009184:	fb01 3312 	mls	r3, r1, r2, r3
 8009188:	b292      	uxth	r2, r2
 800918a:	9131      	str	r1, [sp, #196]	@ 0xc4
 800918c:	b29b      	uxth	r3, r3
 800918e:	922f      	str	r2, [sp, #188]	@ 0xbc
 8009190:	b11b      	cbz	r3, 800919a <forward_lite_conv2d_sssa8_ch+0x67a>
 8009192:	4613      	mov	r3, r2
 8009194:	3301      	adds	r3, #1
 8009196:	b29b      	uxth	r3, r3
 8009198:	932f      	str	r3, [sp, #188]	@ 0xbc
 800919a:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800919c:	2b00      	cmp	r3, #0
 800919e:	d0b6      	beq.n	800910e <forward_lite_conv2d_sssa8_ch+0x5ee>
 80091a0:	fb0a f505 	mul.w	r5, sl, r5
 80091a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80091a6:	fa0f f788 	sxth.w	r7, r8
 80091aa:	2400      	movs	r4, #0
 80091ac:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80091b0:	ea4f 084a 	mov.w	r8, sl, lsl #1
 80091b4:	4625      	mov	r5, r4
 80091b6:	9316      	str	r3, [sp, #88]	@ 0x58
 80091b8:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 80091ba:	f8cd 80b0 	str.w	r8, [sp, #176]	@ 0xb0
 80091be:	46d0      	mov	r8, sl
 80091c0:	3b01      	subs	r3, #1
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	9333      	str	r3, [sp, #204]	@ 0xcc
 80091c6:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80091c8:	425b      	negs	r3, r3
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	9330      	str	r3, [sp, #192]	@ 0xc0
 80091ce:	f00a 0303 	and.w	r3, sl, #3
 80091d2:	930d      	str	r3, [sp, #52]	@ 0x34
 80091d4:	ea4f 034b 	mov.w	r3, fp, lsl #1
 80091d8:	9317      	str	r3, [sp, #92]	@ 0x5c
 80091da:	a840      	add	r0, sp, #256	@ 0x100
 80091dc:	f001 fb3c 	bl	800a858 <ai_padding_opt_phase1>
 80091e0:	ee19 3a10 	vmov	r3, s18
 80091e4:	9a72      	ldr	r2, [sp, #456]	@ 0x1c8
 80091e6:	fb05 f303 	mul.w	r3, r5, r3
 80091ea:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80091ec:	fb01 2303 	mla	r3, r1, r3, r2
 80091f0:	931b      	str	r3, [sp, #108]	@ 0x6c
 80091f2:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80091f4:	b953      	cbnz	r3, 800920c <forward_lite_conv2d_sssa8_ch+0x6ec>
 80091f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	f040 81ea 	bne.w	80095d2 <forward_lite_conv2d_sssa8_ch+0xab2>
 80091fe:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8009200:	ee19 1a90 	vmov	r1, s19
 8009204:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009206:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8009208:	f001 fa12 	bl	800a630 <st_int8_to16_dual_interleaved>
 800920c:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 800920e:	2b00      	cmp	r3, #0
 8009210:	f000 81ea 	beq.w	80095e8 <forward_lite_conv2d_sssa8_ch+0xac8>
 8009214:	b2a3      	uxth	r3, r4
 8009216:	eef0 aa4a 	vmov.f32	s21, s20
 800921a:	ee08 ba90 	vmov	s17, fp
 800921e:	ee0b 7a10 	vmov	s22, r7
 8009222:	9332      	str	r3, [sp, #200]	@ 0xc8
 8009224:	ed8d 9a28 	vstr	s18, [sp, #160]	@ 0xa0
 8009228:	e9dd 322a 	ldrd	r3, r2, [sp, #168]	@ 0xa8
 800922c:	1a9b      	subs	r3, r3, r2
 800922e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009230:	fb05 3302 	mla	r3, r5, r2, r3
 8009234:	930c      	str	r3, [sp, #48]	@ 0x30
 8009236:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	@ 0xc0
 800923a:	9315      	str	r3, [sp, #84]	@ 0x54
 800923c:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 800923e:	9327      	str	r3, [sp, #156]	@ 0x9c
 8009240:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8009242:	931a      	str	r3, [sp, #104]	@ 0x68
 8009244:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8009246:	932d      	str	r3, [sp, #180]	@ 0xb4
 8009248:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800924a:	931f      	str	r3, [sp, #124]	@ 0x7c
 800924c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800924e:	9326      	str	r3, [sp, #152]	@ 0x98
 8009250:	9b77      	ldr	r3, [sp, #476]	@ 0x1dc
 8009252:	9321      	str	r3, [sp, #132]	@ 0x84
 8009254:	9a44      	ldr	r2, [sp, #272]	@ 0x110
 8009256:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8009258:	9241      	str	r2, [sp, #260]	@ 0x104
 800925a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800925c:	9340      	str	r3, [sp, #256]	@ 0x100
 800925e:	9242      	str	r2, [sp, #264]	@ 0x108
 8009260:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009262:	2a00      	cmp	r2, #0
 8009264:	f000 815e 	beq.w	8009524 <forward_lite_conv2d_sssa8_ch+0xa04>
 8009268:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800926a:	2100      	movs	r1, #0
 800926c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800926e:	4252      	negs	r2, r2
 8009270:	b292      	uxth	r2, r2
 8009272:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009274:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009276:	9218      	str	r2, [sp, #96]	@ 0x60
 8009278:	460a      	mov	r2, r1
 800927a:	2b00      	cmp	r3, #0
 800927c:	d060      	beq.n	8009340 <forward_lite_conv2d_sssa8_ch+0x820>
 800927e:	3b01      	subs	r3, #1
 8009280:	9340      	str	r3, [sp, #256]	@ 0x100
 8009282:	2301      	movs	r3, #1
 8009284:	f8ad 3126 	strh.w	r3, [sp, #294]	@ 0x126
 8009288:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800928a:	9815      	ldr	r0, [sp, #84]	@ 0x54
 800928c:	4283      	cmp	r3, r0
 800928e:	dd64      	ble.n	800935a <forward_lite_conv2d_sssa8_ch+0x83a>
 8009290:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8009292:	46c3      	mov	fp, r8
 8009294:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8009296:	ee1b 7a10 	vmov	r7, s22
 800929a:	f8dd a0b0 	ldr.w	sl, [sp, #176]	@ 0xb0
 800929e:	fb02 3200 	mla	r2, r2, r0, r3
 80092a2:	b28b      	uxth	r3, r1
 80092a4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80092a6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80092a8:	1ad5      	subs	r5, r2, r3
 80092aa:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80092ae:	930e      	str	r3, [sp, #56]	@ 0x38
 80092b0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80092b2:	461a      	mov	r2, r3
 80092b4:	930a      	str	r3, [sp, #40]	@ 0x28
 80092b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80092b8:	429d      	cmp	r5, r3
 80092ba:	dd25      	ble.n	8009308 <forward_lite_conv2d_sssa8_ch+0x7e8>
 80092bc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80092be:	ea4f 78d1 	mov.w	r8, r1, lsr #31
 80092c2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80092c4:	4291      	cmp	r1, r2
 80092c6:	bfd8      	it	le
 80092c8:	f048 0801 	orrle.w	r8, r8, #1
 80092cc:	fb02 f209 	mul.w	r2, r2, r9
 80092d0:	9210      	str	r2, [sp, #64]	@ 0x40
 80092d2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80092d4:	2a00      	cmp	r2, #0
 80092d6:	f000 808c 	beq.w	80093f2 <forward_lite_conv2d_sssa8_ch+0x8d2>
 80092da:	461e      	mov	r6, r3
 80092dc:	469e      	mov	lr, r3
 80092de:	0ff3      	lsrs	r3, r6, #31
 80092e0:	4621      	mov	r1, r4
 80092e2:	465a      	mov	r2, fp
 80092e4:	4638      	mov	r0, r7
 80092e6:	45f1      	cmp	r9, lr
 80092e8:	bfd8      	it	le
 80092ea:	f043 0301 	orrle.w	r3, r3, #1
 80092ee:	b91b      	cbnz	r3, 80092f8 <forward_lite_conv2d_sssa8_ch+0x7d8>
 80092f0:	f1b8 0f00 	cmp.w	r8, #0
 80092f4:	f000 80e8 	beq.w	80094c8 <forward_lite_conv2d_sssa8_ch+0x9a8>
 80092f8:	f002 f8f0 	bl	800b4dc <arm_fill_q15>
 80092fc:	3601      	adds	r6, #1
 80092fe:	4454      	add	r4, sl
 8009300:	b236      	sxth	r6, r6
 8009302:	42b5      	cmp	r5, r6
 8009304:	46b6      	mov	lr, r6
 8009306:	dcea      	bgt.n	80092de <forward_lite_conv2d_sssa8_ch+0x7be>
 8009308:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800930a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800930c:	3201      	adds	r2, #1
 800930e:	b213      	sxth	r3, r2
 8009310:	428b      	cmp	r3, r1
 8009312:	461a      	mov	r2, r3
 8009314:	930a      	str	r3, [sp, #40]	@ 0x28
 8009316:	dbce      	blt.n	80092b6 <forward_lite_conv2d_sssa8_ch+0x796>
 8009318:	46d8      	mov	r8, fp
 800931a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800931c:	42a3      	cmp	r3, r4
 800931e:	d021      	beq.n	8009364 <forward_lite_conv2d_sssa8_ch+0x844>
 8009320:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009322:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009324:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009326:	4413      	add	r3, r2
 8009328:	3101      	adds	r1, #1
 800932a:	b29b      	uxth	r3, r3
 800932c:	b209      	sxth	r1, r1
 800932e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009330:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009332:	460a      	mov	r2, r1
 8009334:	4299      	cmp	r1, r3
 8009336:	f280 80d9 	bge.w	80094ec <forward_lite_conv2d_sssa8_ch+0x9cc>
 800933a:	9b40      	ldr	r3, [sp, #256]	@ 0x100
 800933c:	2b00      	cmp	r3, #0
 800933e:	d19e      	bne.n	800927e <forward_lite_conv2d_sssa8_ch+0x75e>
 8009340:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009342:	2b00      	cmp	r3, #0
 8009344:	d16d      	bne.n	8009422 <forward_lite_conv2d_sssa8_ch+0x902>
 8009346:	9b42      	ldr	r3, [sp, #264]	@ 0x108
 8009348:	9815      	ldr	r0, [sp, #84]	@ 0x54
 800934a:	3b01      	subs	r3, #1
 800934c:	9342      	str	r3, [sp, #264]	@ 0x108
 800934e:	2301      	movs	r3, #1
 8009350:	f8ad 3126 	strh.w	r3, [sp, #294]	@ 0x126
 8009354:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009356:	4283      	cmp	r3, r0
 8009358:	dc9a      	bgt.n	8009290 <forward_lite_conv2d_sssa8_ch+0x770>
 800935a:	b28b      	uxth	r3, r1
 800935c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800935e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009360:	42a3      	cmp	r3, r4
 8009362:	d1dd      	bne.n	8009320 <forward_lite_conv2d_sssa8_ch+0x800>
 8009364:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8009366:	ee1a 2a90 	vmov	r2, s21
 800936a:	9919      	ldr	r1, [sp, #100]	@ 0x64
 800936c:	ee19 0a90 	vmov	r0, s19
 8009370:	9308      	str	r3, [sp, #32]
 8009372:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8009374:	9307      	str	r3, [sp, #28]
 8009376:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8009378:	9306      	str	r3, [sp, #24]
 800937a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800937c:	9305      	str	r3, [sp, #20]
 800937e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8009380:	9304      	str	r3, [sp, #16]
 8009382:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8009384:	9303      	str	r3, [sp, #12]
 8009386:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8009388:	9302      	str	r3, [sp, #8]
 800938a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800938c:	9300      	str	r3, [sp, #0]
 800938e:	2300      	movs	r3, #0
 8009390:	9301      	str	r3, [sp, #4]
 8009392:	ee19 3a10 	vmov	r3, s18
 8009396:	f001 fa79 	bl	800a88c <st_sssa8_ch_nn_mat_mult_kernel_opt>
 800939a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800939c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800939e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80093a0:	4413      	add	r3, r2
 80093a2:	9018      	str	r0, [sp, #96]	@ 0x60
 80093a4:	3101      	adds	r1, #1
 80093a6:	b29b      	uxth	r3, r3
 80093a8:	b209      	sxth	r1, r1
 80093aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80093ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80093ae:	460a      	mov	r2, r1
 80093b0:	428b      	cmp	r3, r1
 80093b2:	f340 80b7 	ble.w	8009524 <forward_lite_conv2d_sssa8_ch+0xa04>
 80093b6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80093b8:	e7bf      	b.n	800933a <forward_lite_conv2d_sssa8_ch+0x81a>
 80093ba:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80093bc:	ee19 1a10 	vmov	r1, s18
 80093c0:	fb01 f302 	mul.w	r3, r1, r2
 80093c4:	42a3      	cmp	r3, r4
 80093c6:	f73f ac69 	bgt.w	8008c9c <forward_lite_conv2d_sssa8_ch+0x17c>
 80093ca:	f01a 0f03 	tst.w	sl, #3
 80093ce:	972e      	str	r7, [sp, #184]	@ 0xb8
 80093d0:	f040 810d 	bne.w	80095ee <forward_lite_conv2d_sssa8_ch+0xace>
 80093d4:	ee19 3a10 	vmov	r3, s18
 80093d8:	ee19 1a90 	vmov	r1, s19
 80093dc:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80093de:	f001 f927 	bl	800a630 <st_int8_to16_dual_interleaved>
 80093e2:	e45d      	b.n	8008ca0 <forward_lite_conv2d_sssa8_ch+0x180>
 80093e4:	4603      	mov	r3, r0
 80093e6:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 80093e8:	fb01 f303 	mul.w	r3, r1, r3
 80093ec:	931d      	str	r3, [sp, #116]	@ 0x74
 80093ee:	f7ff bbd6 	b.w	8008b9e <forward_lite_conv2d_sssa8_ch+0x7e>
 80093f2:	469c      	mov	ip, r3
 80093f4:	461e      	mov	r6, r3
 80093f6:	45e1      	cmp	r9, ip
 80093f8:	465a      	mov	r2, fp
 80093fa:	4621      	mov	r1, r4
 80093fc:	4638      	mov	r0, r7
 80093fe:	bfcc      	ite	gt
 8009400:	2300      	movgt	r3, #0
 8009402:	2301      	movle	r3, #1
 8009404:	ea53 73d6 	orrs.w	r3, r3, r6, lsr #31
 8009408:	d102      	bne.n	8009410 <forward_lite_conv2d_sssa8_ch+0x8f0>
 800940a:	f1b8 0f00 	cmp.w	r8, #0
 800940e:	d064      	beq.n	80094da <forward_lite_conv2d_sssa8_ch+0x9ba>
 8009410:	f002 f864 	bl	800b4dc <arm_fill_q15>
 8009414:	3601      	adds	r6, #1
 8009416:	4454      	add	r4, sl
 8009418:	b236      	sxth	r6, r6
 800941a:	42ae      	cmp	r6, r5
 800941c:	46b4      	mov	ip, r6
 800941e:	dbea      	blt.n	80093f6 <forward_lite_conv2d_sssa8_ch+0x8d6>
 8009420:	e772      	b.n	8009308 <forward_lite_conv2d_sssa8_ch+0x7e8>
 8009422:	3b01      	subs	r3, #1
 8009424:	9341      	str	r3, [sp, #260]	@ 0x104
 8009426:	f8bd 3124 	ldrh.w	r3, [sp, #292]	@ 0x124
 800942a:	2b01      	cmp	r3, #1
 800942c:	f8ad 3126 	strh.w	r3, [sp, #294]	@ 0x126
 8009430:	f43f af2a 	beq.w	8009288 <forward_lite_conv2d_sssa8_ch+0x768>
 8009434:	b28b      	uxth	r3, r1
 8009436:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	@ 0x2c
 800943a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800943c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800943e:	bb0b      	cbnz	r3, 8009484 <forward_lite_conv2d_sssa8_ch+0x964>
 8009440:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009442:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009444:	4293      	cmp	r3, r2
 8009446:	f77f af68 	ble.w	800931a <forward_lite_conv2d_sssa8_ch+0x7fa>
 800944a:	4616      	mov	r6, r2
 800944c:	4610      	mov	r0, r2
 800944e:	46a3      	mov	fp, r4
 8009450:	464f      	mov	r7, r9
 8009452:	462c      	mov	r4, r5
 8009454:	ee18 2a90 	vmov	r2, s17
 8009458:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 800945a:	4699      	mov	r9, r3
 800945c:	f8dd a044 	ldr.w	sl, [sp, #68]	@ 0x44
 8009460:	3601      	adds	r6, #1
 8009462:	fb00 4007 	mla	r0, r0, r7, r4
 8009466:	4659      	mov	r1, fp
 8009468:	920a      	str	r2, [sp, #40]	@ 0x28
 800946a:	b236      	sxth	r6, r6
 800946c:	fb08 a000 	mla	r0, r8, r0, sl
 8009470:	f000 ffb0 	bl	800a3d4 <st_int8_to16_no_shift_interleaved>
 8009474:	44ab      	add	fp, r5
 8009476:	454e      	cmp	r6, r9
 8009478:	4630      	mov	r0, r6
 800947a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800947c:	dbf0      	blt.n	8009460 <forward_lite_conv2d_sssa8_ch+0x940>
 800947e:	465c      	mov	r4, fp
 8009480:	46b9      	mov	r9, r7
 8009482:	e74a      	b.n	800931a <forward_lite_conv2d_sssa8_ch+0x7fa>
 8009484:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009486:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009488:	4293      	cmp	r3, r2
 800948a:	f77f af46 	ble.w	800931a <forward_lite_conv2d_sssa8_ch+0x7fa>
 800948e:	4616      	mov	r6, r2
 8009490:	4610      	mov	r0, r2
 8009492:	46a3      	mov	fp, r4
 8009494:	464f      	mov	r7, r9
 8009496:	462c      	mov	r4, r5
 8009498:	ee18 2a90 	vmov	r2, s17
 800949c:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 800949e:	4699      	mov	r9, r3
 80094a0:	f8dd a044 	ldr.w	sl, [sp, #68]	@ 0x44
 80094a4:	3601      	adds	r6, #1
 80094a6:	fb00 4007 	mla	r0, r0, r7, r4
 80094aa:	4659      	mov	r1, fp
 80094ac:	920a      	str	r2, [sp, #40]	@ 0x28
 80094ae:	b236      	sxth	r6, r6
 80094b0:	fb08 a000 	mla	r0, r8, r0, sl
 80094b4:	f000 ff2c 	bl	800a310 <st_int8_to16_no_shift>
 80094b8:	44ab      	add	fp, r5
 80094ba:	454e      	cmp	r6, r9
 80094bc:	4630      	mov	r0, r6
 80094be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80094c0:	dbf0      	blt.n	80094a4 <forward_lite_conv2d_sssa8_ch+0x984>
 80094c2:	465c      	mov	r4, fp
 80094c4:	46b9      	mov	r9, r7
 80094c6:	e728      	b.n	800931a <forward_lite_conv2d_sssa8_ch+0x7fa>
 80094c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80094ca:	eb03 000e 	add.w	r0, r3, lr
 80094ce:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80094d0:	fb0b 3000 	mla	r0, fp, r0, r3
 80094d4:	f000 ff1c 	bl	800a310 <st_int8_to16_no_shift>
 80094d8:	e710      	b.n	80092fc <forward_lite_conv2d_sssa8_ch+0x7dc>
 80094da:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80094dc:	eb03 000c 	add.w	r0, r3, ip
 80094e0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80094e2:	fb0b 3000 	mla	r0, fp, r0, r3
 80094e6:	f000 ff75 	bl	800a3d4 <st_int8_to16_no_shift_interleaved>
 80094ea:	e793      	b.n	8009414 <forward_lite_conv2d_sssa8_ch+0x8f4>
 80094ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80094ee:	429c      	cmp	r4, r3
 80094f0:	d018      	beq.n	8009524 <forward_lite_conv2d_sssa8_ch+0xa04>
 80094f2:	4619      	mov	r1, r3
 80094f4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80094f6:	ee1a 2a90 	vmov	r2, s21
 80094fa:	ee19 0a90 	vmov	r0, s19
 80094fe:	9307      	str	r3, [sp, #28]
 8009500:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8009502:	9306      	str	r3, [sp, #24]
 8009504:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8009506:	9305      	str	r3, [sp, #20]
 8009508:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800950a:	9304      	str	r3, [sp, #16]
 800950c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800950e:	9303      	str	r3, [sp, #12]
 8009510:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8009512:	9302      	str	r3, [sp, #8]
 8009514:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8009516:	9301      	str	r3, [sp, #4]
 8009518:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800951a:	9300      	str	r3, [sp, #0]
 800951c:	ee19 3a10 	vmov	r3, s18
 8009520:	f001 fd9e 	bl	800b060 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 8009524:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009526:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8009528:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800952a:	1a9b      	subs	r3, r3, r2
 800952c:	4411      	add	r1, r2
 800952e:	911b      	str	r1, [sp, #108]	@ 0x6c
 8009530:	b299      	uxth	r1, r3
 8009532:	4613      	mov	r3, r2
 8009534:	428a      	cmp	r2, r1
 8009536:	9128      	str	r1, [sp, #160]	@ 0xa0
 8009538:	bf28      	it	cs
 800953a:	460b      	movcs	r3, r1
 800953c:	b29b      	uxth	r3, r3
 800953e:	2b00      	cmp	r3, #0
 8009540:	d03e      	beq.n	80095c0 <forward_lite_conv2d_sssa8_ch+0xaa0>
 8009542:	ee1a 4a90 	vmov	r4, s21
 8009546:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 8009548:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800954a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800954e:	fb01 0002 	mla	r0, r1, r2, r0
 8009552:	ee0a 4a90 	vmov	s21, r4
 8009556:	9c26      	ldr	r4, [sp, #152]	@ 0x98
 8009558:	902d      	str	r0, [sp, #180]	@ 0xb4
 800955a:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 800955e:	9426      	str	r4, [sp, #152]	@ 0x98
 8009560:	9c21      	ldr	r4, [sp, #132]	@ 0x84
 8009562:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8009566:	9421      	str	r4, [sp, #132]	@ 0x84
 8009568:	9c1f      	ldr	r4, [sp, #124]	@ 0x7c
 800956a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800956e:	921f      	str	r2, [sp, #124]	@ 0x7c
 8009570:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009572:	bb3a      	cbnz	r2, 80095c4 <forward_lite_conv2d_sssa8_ch+0xaa4>
 8009574:	460a      	mov	r2, r1
 8009576:	ee19 1a90 	vmov	r1, s19
 800957a:	931a      	str	r3, [sp, #104]	@ 0x68
 800957c:	f001 f858 	bl	800a630 <st_int8_to16_dual_interleaved>
 8009580:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8009582:	3b01      	subs	r3, #1
 8009584:	b29b      	uxth	r3, r3
 8009586:	461a      	mov	r2, r3
 8009588:	9327      	str	r3, [sp, #156]	@ 0x9c
 800958a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800958e:	429a      	cmp	r2, r3
 8009590:	f47f ae60 	bne.w	8009254 <forward_lite_conv2d_sssa8_ch+0x734>
 8009594:	ee18 ba90 	vmov	fp, s17
 8009598:	ee1b 7a10 	vmov	r7, s22
 800959c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 800959e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80095a0:	9c32      	ldr	r4, [sp, #200]	@ 0xc8
 80095a2:	4413      	add	r3, r2
 80095a4:	3401      	adds	r4, #1
 80095a6:	b29b      	uxth	r3, r3
 80095a8:	b224      	sxth	r4, r4
 80095aa:	9330      	str	r3, [sp, #192]	@ 0xc0
 80095ac:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80095ae:	4625      	mov	r5, r4
 80095b0:	429c      	cmp	r4, r3
 80095b2:	f6ff ae12 	blt.w	80091da <forward_lite_conv2d_sssa8_ch+0x6ba>
 80095b6:	b055      	add	sp, #340	@ 0x154
 80095b8:	ecbd 8b08 	vpop	{d8-d11}
 80095bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095c0:	931a      	str	r3, [sp, #104]	@ 0x68
 80095c2:	e7dd      	b.n	8009580 <forward_lite_conv2d_sssa8_ch+0xa60>
 80095c4:	460a      	mov	r2, r1
 80095c6:	ee19 1a90 	vmov	r1, s19
 80095ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80095cc:	f000 ff46 	bl	800a45c <st_int8_to16_dual>
 80095d0:	e7d6      	b.n	8009580 <forward_lite_conv2d_sssa8_ch+0xa60>
 80095d2:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 80095d4:	ee19 1a90 	vmov	r1, s19
 80095d8:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80095da:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80095dc:	f000 ff3e 	bl	800a45c <st_int8_to16_dual>
 80095e0:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	f47f ae16 	bne.w	8009214 <forward_lite_conv2d_sssa8_ch+0x6f4>
 80095e8:	b2a3      	uxth	r3, r4
 80095ea:	9332      	str	r3, [sp, #200]	@ 0xc8
 80095ec:	e7d6      	b.n	800959c <forward_lite_conv2d_sssa8_ch+0xa7c>
 80095ee:	ee19 3a10 	vmov	r3, s18
 80095f2:	ee19 1a90 	vmov	r1, s19
 80095f6:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80095f8:	f000 ff30 	bl	800a45c <st_int8_to16_dual>
 80095fc:	f7ff bb50 	b.w	8008ca0 <forward_lite_conv2d_sssa8_ch+0x180>

08009600 <forward_lite_maxpool_is8os8_scalepos>:
 8009600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009604:	b095      	sub	sp, #84	@ 0x54
 8009606:	4614      	mov	r4, r2
 8009608:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800960c:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 8009610:	f99d 009c 	ldrsb.w	r0, [sp, #156]	@ 0x9c
 8009614:	910d      	str	r1, [sp, #52]	@ 0x34
 8009616:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 800961a:	930c      	str	r3, [sp, #48]	@ 0x30
 800961c:	910e      	str	r1, [sp, #56]	@ 0x38
 800961e:	f8bd 1084 	ldrh.w	r1, [sp, #132]	@ 0x84
 8009622:	f8bd 3098 	ldrh.w	r3, [sp, #152]	@ 0x98
 8009626:	910f      	str	r1, [sp, #60]	@ 0x3c
 8009628:	f8bd 1088 	ldrh.w	r1, [sp, #136]	@ 0x88
 800962c:	9206      	str	r2, [sp, #24]
 800962e:	9110      	str	r1, [sp, #64]	@ 0x40
 8009630:	f8bd 108c 	ldrh.w	r1, [sp, #140]	@ 0x8c
 8009634:	f8bd a078 	ldrh.w	sl, [sp, #120]	@ 0x78
 8009638:	9111      	str	r1, [sp, #68]	@ 0x44
 800963a:	f8bd 1090 	ldrh.w	r1, [sp, #144]	@ 0x90
 800963e:	f99d 20a0 	ldrsb.w	r2, [sp, #160]	@ 0xa0
 8009642:	9112      	str	r1, [sp, #72]	@ 0x48
 8009644:	f8bd 1094 	ldrh.w	r1, [sp, #148]	@ 0x94
 8009648:	9313      	str	r3, [sp, #76]	@ 0x4c
 800964a:	9107      	str	r1, [sp, #28]
 800964c:	9003      	str	r0, [sp, #12]
 800964e:	2b00      	cmp	r3, #0
 8009650:	f000 8094 	beq.w	800977c <forward_lite_maxpool_is8os8_scalepos+0x17c>
 8009654:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009658:	eeb4 0a67 	vcmp.f32	s0, s15
 800965c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009660:	bf0c      	ite	eq
 8009662:	2301      	moveq	r3, #1
 8009664:	2300      	movne	r3, #0
 8009666:	4290      	cmp	r0, r2
 8009668:	bf14      	ite	ne
 800966a:	2300      	movne	r3, #0
 800966c:	f003 0301 	andeq.w	r3, r3, #1
 8009670:	9301      	str	r3, [sp, #4]
 8009672:	2900      	cmp	r1, #0
 8009674:	f000 8082 	beq.w	800977c <forward_lite_maxpool_is8os8_scalepos+0x17c>
 8009678:	f1ba 0f00 	cmp.w	sl, #0
 800967c:	d07e      	beq.n	800977c <forward_lite_maxpool_is8os8_scalepos+0x17c>
 800967e:	ee07 2a90 	vmov	s15, r2
 8009682:	2300      	movs	r3, #0
 8009684:	ed9f 6a4e 	vldr	s12, [pc, #312]	@ 80097c0 <forward_lite_maxpool_is8os8_scalepos+0x1c0>
 8009688:	fb04 fb0a 	mul.w	fp, r4, sl
 800968c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009690:	9304      	str	r3, [sp, #16]
 8009692:	9b04      	ldr	r3, [sp, #16]
 8009694:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8009698:	9907      	ldr	r1, [sp, #28]
 800969a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800969c:	fb03 f202 	mul.w	r2, r3, r2
 80096a0:	fb03 f301 	mul.w	r3, r3, r1
 80096a4:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80096a6:	9308      	str	r3, [sp, #32]
 80096a8:	2300      	movs	r3, #0
 80096aa:	9305      	str	r3, [sp, #20]
 80096ac:	1a53      	subs	r3, r2, r1
 80096ae:	1a8a      	subs	r2, r1, r2
 80096b0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	eb02 0c01 	add.w	ip, r2, r1
 80096b8:	bfd8      	it	le
 80096ba:	4691      	movle	r9, r2
 80096bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80096be:	bfc8      	it	gt
 80096c0:	f04f 0900 	movgt.w	r9, #0
 80096c4:	4594      	cmp	ip, r2
 80096c6:	444b      	add	r3, r9
 80096c8:	bfa8      	it	ge
 80096ca:	4694      	movge	ip, r2
 80096cc:	9a06      	ldr	r2, [sp, #24]
 80096ce:	fb02 f303 	mul.w	r3, r2, r3
 80096d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80096d4:	9a05      	ldr	r2, [sp, #20]
 80096d6:	f04f 0e00 	mov.w	lr, #0
 80096da:	9908      	ldr	r1, [sp, #32]
 80096dc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80096de:	eb02 0801 	add.w	r8, r2, r1
 80096e2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80096e4:	fb03 f302 	mul.w	r3, r3, r2
 80096e8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80096ea:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80096ec:	fb0a 2808 	mla	r8, sl, r8, r2
 80096f0:	1a5a      	subs	r2, r3, r1
 80096f2:	1acb      	subs	r3, r1, r3
 80096f4:	9906      	ldr	r1, [sp, #24]
 80096f6:	2a00      	cmp	r2, #0
 80096f8:	bfd8      	it	le
 80096fa:	461f      	movle	r7, r3
 80096fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096fe:	bfc8      	it	gt
 8009700:	2700      	movgt	r7, #0
 8009702:	18d3      	adds	r3, r2, r3
 8009704:	1a8a      	subs	r2, r1, r2
 8009706:	4294      	cmp	r4, r2
 8009708:	443b      	add	r3, r7
 800970a:	bfa8      	it	ge
 800970c:	4614      	movge	r4, r2
 800970e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009710:	fb0a 2303 	mla	r3, sl, r3, r2
 8009714:	9302      	str	r3, [sp, #8]
 8009716:	45e1      	cmp	r9, ip
 8009718:	da4e      	bge.n	80097b8 <forward_lite_maxpool_is8os8_scalepos+0x1b8>
 800971a:	9b02      	ldr	r3, [sp, #8]
 800971c:	464d      	mov	r5, r9
 800971e:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 8009722:	eb03 060e 	add.w	r6, r3, lr
 8009726:	42a7      	cmp	r7, r4
 8009728:	da0a      	bge.n	8009740 <forward_lite_maxpool_is8os8_scalepos+0x140>
 800972a:	4632      	mov	r2, r6
 800972c:	463b      	mov	r3, r7
 800972e:	f992 0000 	ldrsb.w	r0, [r2]
 8009732:	3301      	adds	r3, #1
 8009734:	4452      	add	r2, sl
 8009736:	4281      	cmp	r1, r0
 8009738:	bfb8      	it	lt
 800973a:	4601      	movlt	r1, r0
 800973c:	429c      	cmp	r4, r3
 800973e:	d1f6      	bne.n	800972e <forward_lite_maxpool_is8os8_scalepos+0x12e>
 8009740:	3501      	adds	r5, #1
 8009742:	445e      	add	r6, fp
 8009744:	45ac      	cmp	ip, r5
 8009746:	d1ee      	bne.n	8009726 <forward_lite_maxpool_is8os8_scalepos+0x126>
 8009748:	9b01      	ldr	r3, [sp, #4]
 800974a:	b1d3      	cbz	r3, 8009782 <forward_lite_maxpool_is8os8_scalepos+0x182>
 800974c:	f888 1000 	strb.w	r1, [r8]
 8009750:	f10e 0e01 	add.w	lr, lr, #1
 8009754:	f108 0801 	add.w	r8, r8, #1
 8009758:	fa1f f38e 	uxth.w	r3, lr
 800975c:	459a      	cmp	sl, r3
 800975e:	d8da      	bhi.n	8009716 <forward_lite_maxpool_is8os8_scalepos+0x116>
 8009760:	9b05      	ldr	r3, [sp, #20]
 8009762:	9a07      	ldr	r2, [sp, #28]
 8009764:	3301      	adds	r3, #1
 8009766:	b29b      	uxth	r3, r3
 8009768:	429a      	cmp	r2, r3
 800976a:	9305      	str	r3, [sp, #20]
 800976c:	d8b2      	bhi.n	80096d4 <forward_lite_maxpool_is8os8_scalepos+0xd4>
 800976e:	9b04      	ldr	r3, [sp, #16]
 8009770:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009772:	3301      	adds	r3, #1
 8009774:	b29b      	uxth	r3, r3
 8009776:	429a      	cmp	r2, r3
 8009778:	9304      	str	r3, [sp, #16]
 800977a:	d88a      	bhi.n	8009692 <forward_lite_maxpool_is8os8_scalepos+0x92>
 800977c:	b015      	add	sp, #84	@ 0x54
 800977e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009782:	9b03      	ldr	r3, [sp, #12]
 8009784:	eeb0 7a66 	vmov.f32	s14, s13
 8009788:	1ac9      	subs	r1, r1, r3
 800978a:	ee07 1a90 	vmov	s15, r1
 800978e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009792:	eea7 7a80 	vfma.f32	s14, s15, s0
 8009796:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800979a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800979e:	fe65 7a86 	vselge.f32	s15, s11, s12
 80097a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80097a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80097aa:	ee17 3a90 	vmov	r3, s15
 80097ae:	f303 0307 	ssat	r3, #8, r3
 80097b2:	f888 3000 	strb.w	r3, [r8]
 80097b6:	e7cb      	b.n	8009750 <forward_lite_maxpool_is8os8_scalepos+0x150>
 80097b8:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 80097bc:	e7c4      	b.n	8009748 <forward_lite_maxpool_is8os8_scalepos+0x148>
 80097be:	bf00      	nop
 80097c0:	befffffc 	.word	0xbefffffc

080097c4 <forward_lite_maxpool_is8os8_scaleneg>:
 80097c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097c8:	b095      	sub	sp, #84	@ 0x54
 80097ca:	4614      	mov	r4, r2
 80097cc:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80097d0:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 80097d4:	f99d 009c 	ldrsb.w	r0, [sp, #156]	@ 0x9c
 80097d8:	910d      	str	r1, [sp, #52]	@ 0x34
 80097da:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 80097de:	930c      	str	r3, [sp, #48]	@ 0x30
 80097e0:	910e      	str	r1, [sp, #56]	@ 0x38
 80097e2:	f8bd 1084 	ldrh.w	r1, [sp, #132]	@ 0x84
 80097e6:	f8bd 3098 	ldrh.w	r3, [sp, #152]	@ 0x98
 80097ea:	910f      	str	r1, [sp, #60]	@ 0x3c
 80097ec:	f8bd 1088 	ldrh.w	r1, [sp, #136]	@ 0x88
 80097f0:	9206      	str	r2, [sp, #24]
 80097f2:	9110      	str	r1, [sp, #64]	@ 0x40
 80097f4:	f8bd 108c 	ldrh.w	r1, [sp, #140]	@ 0x8c
 80097f8:	f8bd a078 	ldrh.w	sl, [sp, #120]	@ 0x78
 80097fc:	9111      	str	r1, [sp, #68]	@ 0x44
 80097fe:	f8bd 1090 	ldrh.w	r1, [sp, #144]	@ 0x90
 8009802:	f99d 20a0 	ldrsb.w	r2, [sp, #160]	@ 0xa0
 8009806:	9112      	str	r1, [sp, #72]	@ 0x48
 8009808:	f8bd 1094 	ldrh.w	r1, [sp, #148]	@ 0x94
 800980c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800980e:	9107      	str	r1, [sp, #28]
 8009810:	9003      	str	r0, [sp, #12]
 8009812:	2b00      	cmp	r3, #0
 8009814:	f000 8093 	beq.w	800993e <forward_lite_maxpool_is8os8_scaleneg+0x17a>
 8009818:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800981c:	eeb4 0a67 	vcmp.f32	s0, s15
 8009820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009824:	bf0c      	ite	eq
 8009826:	2301      	moveq	r3, #1
 8009828:	2300      	movne	r3, #0
 800982a:	4290      	cmp	r0, r2
 800982c:	bf14      	ite	ne
 800982e:	2300      	movne	r3, #0
 8009830:	f003 0301 	andeq.w	r3, r3, #1
 8009834:	9301      	str	r3, [sp, #4]
 8009836:	2900      	cmp	r1, #0
 8009838:	f000 8081 	beq.w	800993e <forward_lite_maxpool_is8os8_scaleneg+0x17a>
 800983c:	f1ba 0f00 	cmp.w	sl, #0
 8009840:	d07d      	beq.n	800993e <forward_lite_maxpool_is8os8_scaleneg+0x17a>
 8009842:	ee07 2a90 	vmov	s15, r2
 8009846:	2300      	movs	r3, #0
 8009848:	ed9f 6a4d 	vldr	s12, [pc, #308]	@ 8009980 <forward_lite_maxpool_is8os8_scaleneg+0x1bc>
 800984c:	fb04 fb0a 	mul.w	fp, r4, sl
 8009850:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009854:	9304      	str	r3, [sp, #16]
 8009856:	9b04      	ldr	r3, [sp, #16]
 8009858:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 800985c:	9907      	ldr	r1, [sp, #28]
 800985e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009860:	fb03 f202 	mul.w	r2, r3, r2
 8009864:	fb03 f301 	mul.w	r3, r3, r1
 8009868:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800986a:	9308      	str	r3, [sp, #32]
 800986c:	2300      	movs	r3, #0
 800986e:	9305      	str	r3, [sp, #20]
 8009870:	1a53      	subs	r3, r2, r1
 8009872:	1a8a      	subs	r2, r1, r2
 8009874:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009876:	2b00      	cmp	r3, #0
 8009878:	eb02 0c01 	add.w	ip, r2, r1
 800987c:	bfd8      	it	le
 800987e:	4691      	movle	r9, r2
 8009880:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009882:	bfc8      	it	gt
 8009884:	f04f 0900 	movgt.w	r9, #0
 8009888:	4594      	cmp	ip, r2
 800988a:	444b      	add	r3, r9
 800988c:	bfa8      	it	ge
 800988e:	4694      	movge	ip, r2
 8009890:	9a06      	ldr	r2, [sp, #24]
 8009892:	fb02 f303 	mul.w	r3, r2, r3
 8009896:	9309      	str	r3, [sp, #36]	@ 0x24
 8009898:	9a05      	ldr	r2, [sp, #20]
 800989a:	f04f 0e00 	mov.w	lr, #0
 800989e:	9908      	ldr	r1, [sp, #32]
 80098a0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80098a2:	eb02 0801 	add.w	r8, r2, r1
 80098a6:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80098a8:	fb03 f302 	mul.w	r3, r3, r2
 80098ac:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80098ae:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80098b0:	fb0a 2808 	mla	r8, sl, r8, r2
 80098b4:	1a5a      	subs	r2, r3, r1
 80098b6:	1acb      	subs	r3, r1, r3
 80098b8:	9906      	ldr	r1, [sp, #24]
 80098ba:	2a00      	cmp	r2, #0
 80098bc:	bfd8      	it	le
 80098be:	461f      	movle	r7, r3
 80098c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098c2:	bfc8      	it	gt
 80098c4:	2700      	movgt	r7, #0
 80098c6:	18d3      	adds	r3, r2, r3
 80098c8:	1a8a      	subs	r2, r1, r2
 80098ca:	4294      	cmp	r4, r2
 80098cc:	443b      	add	r3, r7
 80098ce:	bfa8      	it	ge
 80098d0:	4614      	movge	r4, r2
 80098d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80098d4:	fb0a 2303 	mla	r3, sl, r3, r2
 80098d8:	9302      	str	r3, [sp, #8]
 80098da:	45e1      	cmp	r9, ip
 80098dc:	da4d      	bge.n	800997a <forward_lite_maxpool_is8os8_scaleneg+0x1b6>
 80098de:	9b02      	ldr	r3, [sp, #8]
 80098e0:	464d      	mov	r5, r9
 80098e2:	217f      	movs	r1, #127	@ 0x7f
 80098e4:	eb03 060e 	add.w	r6, r3, lr
 80098e8:	42a7      	cmp	r7, r4
 80098ea:	da0a      	bge.n	8009902 <forward_lite_maxpool_is8os8_scaleneg+0x13e>
 80098ec:	4632      	mov	r2, r6
 80098ee:	463b      	mov	r3, r7
 80098f0:	f992 0000 	ldrsb.w	r0, [r2]
 80098f4:	3301      	adds	r3, #1
 80098f6:	4452      	add	r2, sl
 80098f8:	4281      	cmp	r1, r0
 80098fa:	bfa8      	it	ge
 80098fc:	4601      	movge	r1, r0
 80098fe:	429c      	cmp	r4, r3
 8009900:	d1f6      	bne.n	80098f0 <forward_lite_maxpool_is8os8_scaleneg+0x12c>
 8009902:	3501      	adds	r5, #1
 8009904:	445e      	add	r6, fp
 8009906:	45ac      	cmp	ip, r5
 8009908:	d1ee      	bne.n	80098e8 <forward_lite_maxpool_is8os8_scaleneg+0x124>
 800990a:	9b01      	ldr	r3, [sp, #4]
 800990c:	b1d3      	cbz	r3, 8009944 <forward_lite_maxpool_is8os8_scaleneg+0x180>
 800990e:	f888 1000 	strb.w	r1, [r8]
 8009912:	f10e 0e01 	add.w	lr, lr, #1
 8009916:	f108 0801 	add.w	r8, r8, #1
 800991a:	fa1f f38e 	uxth.w	r3, lr
 800991e:	459a      	cmp	sl, r3
 8009920:	d8db      	bhi.n	80098da <forward_lite_maxpool_is8os8_scaleneg+0x116>
 8009922:	9b05      	ldr	r3, [sp, #20]
 8009924:	9a07      	ldr	r2, [sp, #28]
 8009926:	3301      	adds	r3, #1
 8009928:	b29b      	uxth	r3, r3
 800992a:	429a      	cmp	r2, r3
 800992c:	9305      	str	r3, [sp, #20]
 800992e:	d8b3      	bhi.n	8009898 <forward_lite_maxpool_is8os8_scaleneg+0xd4>
 8009930:	9b04      	ldr	r3, [sp, #16]
 8009932:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009934:	3301      	adds	r3, #1
 8009936:	b29b      	uxth	r3, r3
 8009938:	429a      	cmp	r2, r3
 800993a:	9304      	str	r3, [sp, #16]
 800993c:	d88b      	bhi.n	8009856 <forward_lite_maxpool_is8os8_scaleneg+0x92>
 800993e:	b015      	add	sp, #84	@ 0x54
 8009940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009944:	9b03      	ldr	r3, [sp, #12]
 8009946:	eeb0 7a66 	vmov.f32	s14, s13
 800994a:	1ac9      	subs	r1, r1, r3
 800994c:	ee07 1a90 	vmov	s15, r1
 8009950:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009954:	eea7 7a80 	vfma.f32	s14, s15, s0
 8009958:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800995c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009960:	fe65 7a86 	vselge.f32	s15, s11, s12
 8009964:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009968:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800996c:	ee17 3a90 	vmov	r3, s15
 8009970:	f303 0307 	ssat	r3, #8, r3
 8009974:	f888 3000 	strb.w	r3, [r8]
 8009978:	e7cb      	b.n	8009912 <forward_lite_maxpool_is8os8_scaleneg+0x14e>
 800997a:	217f      	movs	r1, #127	@ 0x7f
 800997c:	e7c5      	b.n	800990a <forward_lite_maxpool_is8os8_scaleneg+0x146>
 800997e:	bf00      	nop
 8009980:	befffffc 	.word	0xbefffffc

08009984 <align_factor>:
 8009984:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009988:	4602      	mov	r2, r0
 800998a:	b508      	push	{r3, lr}
 800998c:	eeb4 0a67 	vcmp.f32	s0, s15
 8009990:	2300      	movs	r3, #0
 8009992:	8003      	strh	r3, [r0, #0]
 8009994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009998:	d524      	bpl.n	80099e4 <align_factor+0x60>
 800999a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800999e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099a2:	dd1f      	ble.n	80099e4 <align_factor+0x60>
 80099a4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80099a8:	2301      	movs	r3, #1
 80099aa:	e005      	b.n	80099b8 <align_factor+0x34>
 80099ac:	8013      	strh	r3, [r2, #0]
 80099ae:	b28b      	uxth	r3, r1
 80099b0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80099b4:	2b21      	cmp	r3, #33	@ 0x21
 80099b6:	d02b      	beq.n	8009a10 <align_factor+0x8c>
 80099b8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80099bc:	1c59      	adds	r1, r3, #1
 80099be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099c2:	d4f3      	bmi.n	80099ac <align_factor+0x28>
 80099c4:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8009a24 <align_factor+0xa0>
 80099c8:	ee60 7a27 	vmul.f32	s15, s0, s15
 80099cc:	ee17 0a90 	vmov	r0, s15
 80099d0:	f7f6 fcf6 	bl	80003c0 <__aeabi_f2lz>
 80099d4:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 80099d8:	d003      	beq.n	80099e2 <align_factor+0x5e>
 80099da:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80099de:	ea80 70e1 	eor.w	r0, r0, r1, asr #31
 80099e2:	bd08      	pop	{r3, pc}
 80099e4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80099e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80099ec:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80099f0:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 80099f4:	e005      	b.n	8009a02 <align_factor+0x7e>
 80099f6:	8013      	strh	r3, [r2, #0]
 80099f8:	b28b      	uxth	r3, r1
 80099fa:	ee20 0a07 	vmul.f32	s0, s0, s14
 80099fe:	4283      	cmp	r3, r0
 8009a00:	d00a      	beq.n	8009a18 <align_factor+0x94>
 8009a02:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8009a06:	1e59      	subs	r1, r3, #1
 8009a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a0c:	dcf3      	bgt.n	80099f6 <align_factor+0x72>
 8009a0e:	e7d9      	b.n	80099c4 <align_factor+0x40>
 8009a10:	2300      	movs	r3, #0
 8009a12:	4618      	mov	r0, r3
 8009a14:	8013      	strh	r3, [r2, #0]
 8009a16:	bd08      	pop	{r3, pc}
 8009a18:	f64f 73e2 	movw	r3, #65506	@ 0xffe2
 8009a1c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009a20:	8013      	strh	r3, [r2, #0]
 8009a22:	e7cf      	b.n	80099c4 <align_factor+0x40>
 8009a24:	4f000000 	.word	0x4f000000

08009a28 <align_factor_ch>:
 8009a28:	b361      	cbz	r1, 8009a84 <align_factor_ch+0x5c>
 8009a2a:	ee80 7a20 	vdiv.f32	s14, s0, s1
 8009a2e:	f1a2 0c04 	sub.w	ip, r2, #4
 8009a32:	b530      	push	{r4, r5, lr}
 8009a34:	f1a3 0e02 	sub.w	lr, r3, #2
 8009a38:	eb00 0481 	add.w	r4, r0, r1, lsl #2
 8009a3c:	2500      	movs	r5, #0
 8009a3e:	ecf0 7a01 	vldmia	r0!, {s15}
 8009a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a46:	ee17 2a90 	vmov	r2, s15
 8009a4a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8009a4e:	f3c2 0316 	ubfx	r3, r2, #0, #23
 8009a52:	2a00      	cmp	r2, #0
 8009a54:	f503 0300 	add.w	r3, r3, #8388608	@ 0x800000
 8009a58:	f1c1 017e 	rsb	r1, r1, #126	@ 0x7e
 8009a5c:	bfb8      	it	lt
 8009a5e:	425b      	neglt	r3, r3
 8009a60:	291f      	cmp	r1, #31
 8009a62:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 8009a66:	dc06      	bgt.n	8009a76 <align_factor_ch+0x4e>
 8009a68:	4284      	cmp	r4, r0
 8009a6a:	f82e 1f02 	strh.w	r1, [lr, #2]!
 8009a6e:	f84c 3f04 	str.w	r3, [ip, #4]!
 8009a72:	d1e4      	bne.n	8009a3e <align_factor_ch+0x16>
 8009a74:	bd30      	pop	{r4, r5, pc}
 8009a76:	4284      	cmp	r4, r0
 8009a78:	f82e 5f02 	strh.w	r5, [lr, #2]!
 8009a7c:	f84c 5f04 	str.w	r5, [ip, #4]!
 8009a80:	d1dd      	bne.n	8009a3e <align_factor_ch+0x16>
 8009a82:	bd30      	pop	{r4, r5, pc}
 8009a84:	4770      	bx	lr
 8009a86:	bf00      	nop

08009a88 <st_sssa8_ch_convolve_rank1upd>:
 8009a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a8c:	b085      	sub	sp, #20
 8009a8e:	f8bd 4038 	ldrh.w	r4, [sp, #56]	@ 0x38
 8009a92:	f99d b040 	ldrsb.w	fp, [sp, #64]	@ 0x40
 8009a96:	fb13 f304 	smulbb	r3, r3, r4
 8009a9a:	460c      	mov	r4, r1
 8009a9c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009a9e:	fb13 f500 	smulbb	r5, r3, r0
 8009aa2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009aa4:	2a00      	cmp	r2, #0
 8009aa6:	d070      	beq.n	8009b8a <st_sssa8_ch_convolve_rank1upd+0x102>
 8009aa8:	b2ad      	uxth	r5, r5
 8009aaa:	f1a1 0904 	sub.w	r9, r1, #4
 8009aae:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
 8009ab2:	08af      	lsrs	r7, r5, #2
 8009ab4:	f005 0503 	and.w	r5, r5, #3
 8009ab8:	eb03 08c2 	add.w	r8, r3, r2, lsl #3
 8009abc:	1e69      	subs	r1, r5, #1
 8009abe:	f1a7 0381 	sub.w	r3, r7, #129	@ 0x81
 8009ac2:	f1a7 0280 	sub.w	r2, r7, #128	@ 0x80
 8009ac6:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8009aca:	b289      	uxth	r1, r1
 8009acc:	9100      	str	r1, [sp, #0]
 8009ace:	ebc3 2143 	rsb	r1, r3, r3, lsl #9
 8009ad2:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
 8009ad6:	b292      	uxth	r2, r2
 8009ad8:	9202      	str	r2, [sp, #8]
 8009ada:	025a      	lsls	r2, r3, #9
 8009adc:	3301      	adds	r3, #1
 8009ade:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009ae2:	025b      	lsls	r3, r3, #9
 8009ae4:	9203      	str	r2, [sp, #12]
 8009ae6:	9301      	str	r3, [sp, #4]
 8009ae8:	2f80      	cmp	r7, #128	@ 0x80
 8009aea:	d953      	bls.n	8009b94 <st_sssa8_ch_convolve_rank1upd+0x10c>
 8009aec:	9b03      	ldr	r3, [sp, #12]
 8009aee:	f504 7000 	add.w	r0, r4, #512	@ 0x200
 8009af2:	2600      	movs	r6, #0
 8009af4:	eb04 0c03 	add.w	ip, r4, r3
 8009af8:	f5a0 7100 	sub.w	r1, r0, #512	@ 0x200
 8009afc:	2200      	movs	r2, #0
 8009afe:	f851 3b04 	ldr.w	r3, [r1], #4
 8009b02:	fa2f fe83 	sxtb16	lr, r3
 8009b06:	4281      	cmp	r1, r0
 8009b08:	ea4f 2333 	mov.w	r3, r3, ror #8
 8009b0c:	fa92 f21e 	qadd16	r2, r2, lr
 8009b10:	fa2f f383 	sxtb16	r3, r3
 8009b14:	fa92 f213 	qadd16	r2, r2, r3
 8009b18:	d1f1      	bne.n	8009afe <st_sssa8_ch_convolve_rank1upd+0x76>
 8009b1a:	f501 7000 	add.w	r0, r1, #512	@ 0x200
 8009b1e:	b213      	sxth	r3, r2
 8009b20:	4560      	cmp	r0, ip
 8009b22:	eb03 4222 	add.w	r2, r3, r2, asr #16
 8009b26:	4416      	add	r6, r2
 8009b28:	d1e6      	bne.n	8009af8 <st_sssa8_ch_convolve_rank1upd+0x70>
 8009b2a:	9b01      	ldr	r3, [sp, #4]
 8009b2c:	18e1      	adds	r1, r4, r3
 8009b2e:	9c02      	ldr	r4, [sp, #8]
 8009b30:	b374      	cbz	r4, 8009b90 <st_sssa8_ch_convolve_rank1upd+0x108>
 8009b32:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8009b36:	2200      	movs	r2, #0
 8009b38:	f851 3b04 	ldr.w	r3, [r1], #4
 8009b3c:	fa2f f083 	sxtb16	r0, r3
 8009b40:	428c      	cmp	r4, r1
 8009b42:	ea4f 2333 	mov.w	r3, r3, ror #8
 8009b46:	fa92 f210 	qadd16	r2, r2, r0
 8009b4a:	fa2f f383 	sxtb16	r3, r3
 8009b4e:	fa92 f213 	qadd16	r2, r2, r3
 8009b52:	d1f1      	bne.n	8009b38 <st_sssa8_ch_convolve_rank1upd+0xb0>
 8009b54:	b213      	sxth	r3, r2
 8009b56:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8009b5a:	441e      	add	r6, r3
 8009b5c:	b16d      	cbz	r5, 8009b7a <st_sssa8_ch_convolve_rank1upd+0xf2>
 8009b5e:	f994 3000 	ldrsb.w	r3, [r4]
 8009b62:	441e      	add	r6, r3
 8009b64:	9b00      	ldr	r3, [sp, #0]
 8009b66:	b13b      	cbz	r3, 8009b78 <st_sssa8_ch_convolve_rank1upd+0xf0>
 8009b68:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8009b6c:	2d02      	cmp	r5, #2
 8009b6e:	441e      	add	r6, r3
 8009b70:	d002      	beq.n	8009b78 <st_sssa8_ch_convolve_rank1upd+0xf0>
 8009b72:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8009b76:	441e      	add	r6, r3
 8009b78:	442c      	add	r4, r5
 8009b7a:	f859 3f04 	ldr.w	r3, [r9, #4]!
 8009b7e:	fb0b 3616 	mls	r6, fp, r6, r3
 8009b82:	f84a 6b04 	str.w	r6, [sl], #4
 8009b86:	45c2      	cmp	sl, r8
 8009b88:	d1ae      	bne.n	8009ae8 <st_sssa8_ch_convolve_rank1upd+0x60>
 8009b8a:	b005      	add	sp, #20
 8009b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b90:	460c      	mov	r4, r1
 8009b92:	e7e3      	b.n	8009b5c <st_sssa8_ch_convolve_rank1upd+0xd4>
 8009b94:	4621      	mov	r1, r4
 8009b96:	2600      	movs	r6, #0
 8009b98:	463c      	mov	r4, r7
 8009b9a:	e7c9      	b.n	8009b30 <st_sssa8_ch_convolve_rank1upd+0xa8>

08009b9c <st_sssa8_fully_connected>:
 8009b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ba0:	b097      	sub	sp, #92	@ 0x5c
 8009ba2:	460d      	mov	r5, r1
 8009ba4:	4683      	mov	fp, r0
 8009ba6:	9c20      	ldr	r4, [sp, #128]	@ 0x80
 8009ba8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009baa:	6823      	ldr	r3, [r4, #0]
 8009bac:	9203      	str	r2, [sp, #12]
 8009bae:	9307      	str	r3, [sp, #28]
 8009bb0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009bb2:	f99d 6088 	ldrsb.w	r6, [sp, #136]	@ 0x88
 8009bb6:	f9b3 1000 	ldrsh.w	r1, [r3]
 8009bba:	f99d 308c 	ldrsb.w	r3, [sp, #140]	@ 0x8c
 8009bbe:	1e4a      	subs	r2, r1, #1
 8009bc0:	9104      	str	r1, [sp, #16]
 8009bc2:	920d      	str	r2, [sp, #52]	@ 0x34
 8009bc4:	b292      	uxth	r2, r2
 8009bc6:	2a14      	cmp	r2, #20
 8009bc8:	f200 81b3 	bhi.w	8009f32 <st_sssa8_fully_connected+0x396>
 8009bcc:	2201      	movs	r2, #1
 8009bce:	408b      	lsls	r3, r1
 8009bd0:	408a      	lsls	r2, r1
 8009bd2:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8009bd6:	9308      	str	r3, [sp, #32]
 8009bd8:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	f000 81ae 	beq.w	8009f3c <st_sssa8_fully_connected+0x3a0>
 8009be0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009be2:	b2b3      	uxth	r3, r6
 8009be4:	9600      	str	r6, [sp, #0]
 8009be6:	4658      	mov	r0, fp
 8009be8:	0851      	lsrs	r1, r2, #1
 8009bea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8009bee:	9e03      	ldr	r6, [sp, #12]
 8009bf0:	460c      	mov	r4, r1
 8009bf2:	9115      	str	r1, [sp, #84]	@ 0x54
 8009bf4:	4632      	mov	r2, r6
 8009bf6:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8009bf8:	f000 fb52 	bl	800a2a0 <st_int8_reordered_no_shift_zero>
 8009bfc:	4621      	mov	r1, r4
 8009bfe:	2c00      	cmp	r4, #0
 8009c00:	f000 8145 	beq.w	8009e8e <st_sssa8_fully_connected+0x2f2>
 8009c04:	4634      	mov	r4, r6
 8009c06:	f1a6 0310 	sub.w	r3, r6, #16
 8009c0a:	9e04      	ldr	r6, [sp, #16]
 8009c0c:	1e4a      	subs	r2, r1, #1
 8009c0e:	2001      	movs	r0, #1
 8009c10:	091b      	lsrs	r3, r3, #4
 8009c12:	1eb1      	subs	r1, r6, #2
 8009c14:	b292      	uxth	r2, r2
 8009c16:	3301      	adds	r3, #1
 8009c18:	fa00 f101 	lsl.w	r1, r0, r1
 8009c1c:	9112      	str	r1, [sp, #72]	@ 0x48
 8009c1e:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8009c20:	3110      	adds	r1, #16
 8009c22:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8009c26:	920e      	str	r2, [sp, #56]	@ 0x38
 8009c28:	1ee2      	subs	r2, r4, #3
 8009c2a:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009c2c:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009c2e:	3208      	adds	r2, #8
 8009c30:	9205      	str	r2, [sp, #20]
 8009c32:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8009c34:	3202      	adds	r2, #2
 8009c36:	9206      	str	r2, [sp, #24]
 8009c38:	011a      	lsls	r2, r3, #4
 8009c3a:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c3c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8009c3e:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8009c42:	9310      	str	r3, [sp, #64]	@ 0x40
 8009c44:	1f23      	subs	r3, r4, #4
 8009c46:	9311      	str	r3, [sp, #68]	@ 0x44
 8009c48:	1b83      	subs	r3, r0, r6
 8009c4a:	9314      	str	r3, [sp, #80]	@ 0x50
 8009c4c:	9a03      	ldr	r2, [sp, #12]
 8009c4e:	9b05      	ldr	r3, [sp, #20]
 8009c50:	2a0f      	cmp	r2, #15
 8009c52:	eb05 0b02 	add.w	fp, r5, r2
 8009c56:	e953 1302 	ldrd	r1, r3, [r3, #-8]
 8009c5a:	f340 8260 	ble.w	800a11e <st_sssa8_fully_connected+0x582>
 8009c5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c60:	465c      	mov	r4, fp
 8009c62:	18ae      	adds	r6, r5, r2
 8009c64:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8009c66:	682f      	ldr	r7, [r5, #0]
 8009c68:	f8d4 a000 	ldr.w	sl, [r4]
 8009c6c:	ea4f 2037 	mov.w	r0, r7, ror #8
 8009c70:	f8d2 9000 	ldr.w	r9, [r2]
 8009c74:	ea4f 2e3a 	mov.w	lr, sl, ror #8
 8009c78:	fa2f f080 	sxtb16	r0, r0
 8009c7c:	fa2f fc8e 	sxtb16	ip, lr
 8009c80:	fa2f f787 	sxtb16	r7, r7
 8009c84:	fa2f fe8a 	sxtb16	lr, sl
 8009c88:	fb29 1107 	smlad	r1, r9, r7, r1
 8009c8c:	fb29 390e 	smlad	r9, r9, lr, r3
 8009c90:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8009c94:	fb28 1100 	smlad	r1, r8, r0, r1
 8009c98:	fb28 9e0c 	smlad	lr, r8, ip, r9
 8009c9c:	6868      	ldr	r0, [r5, #4]
 8009c9e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8009ca2:	ea4f 2330 	mov.w	r3, r0, ror #8
 8009ca6:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8009caa:	ea4f 2a39 	mov.w	sl, r9, ror #8
 8009cae:	fa2f f383 	sxtb16	r3, r3
 8009cb2:	fa2f f78a 	sxtb16	r7, sl
 8009cb6:	fa2f f080 	sxtb16	r0, r0
 8009cba:	fa2f fa89 	sxtb16	sl, r9
 8009cbe:	fb28 1000 	smlad	r0, r8, r0, r1
 8009cc2:	fb28 e80a 	smlad	r8, r8, sl, lr
 8009cc6:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 8009cca:	fb2c 0003 	smlad	r0, ip, r3, r0
 8009cce:	fb2c 8a07 	smlad	sl, ip, r7, r8
 8009cd2:	68ab      	ldr	r3, [r5, #8]
 8009cd4:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8009cd8:	ea4f 2133 	mov.w	r1, r3, ror #8
 8009cdc:	f8d2 c010 	ldr.w	ip, [r2, #16]
 8009ce0:	ea4f 2e38 	mov.w	lr, r8, ror #8
 8009ce4:	fa2f f181 	sxtb16	r1, r1
 8009ce8:	fa2f f98e 	sxtb16	r9, lr
 8009cec:	fa2f f383 	sxtb16	r3, r3
 8009cf0:	fa2f fe88 	sxtb16	lr, r8
 8009cf4:	fb2c 0303 	smlad	r3, ip, r3, r0
 8009cf8:	fb2c ac0e 	smlad	ip, ip, lr, sl
 8009cfc:	6957      	ldr	r7, [r2, #20]
 8009cfe:	fb27 3301 	smlad	r3, r7, r1, r3
 8009d02:	fb27 ce09 	smlad	lr, r7, r9, ip
 8009d06:	68e8      	ldr	r0, [r5, #12]
 8009d08:	3410      	adds	r4, #16
 8009d0a:	f854 cc04 	ldr.w	ip, [r4, #-4]
 8009d0e:	3510      	adds	r5, #16
 8009d10:	ea4f 2130 	mov.w	r1, r0, ror #8
 8009d14:	6997      	ldr	r7, [r2, #24]
 8009d16:	fa2f f881 	sxtb16	r8, r1
 8009d1a:	fa2f f180 	sxtb16	r1, r0
 8009d1e:	ea4f 203c 	mov.w	r0, ip, ror #8
 8009d22:	fa2f fc8c 	sxtb16	ip, ip
 8009d26:	fa2f f080 	sxtb16	r0, r0
 8009d2a:	fb27 3101 	smlad	r1, r7, r1, r3
 8009d2e:	fb27 e70c 	smlad	r7, r7, ip, lr
 8009d32:	69d3      	ldr	r3, [r2, #28]
 8009d34:	3220      	adds	r2, #32
 8009d36:	fb23 1108 	smlad	r1, r3, r8, r1
 8009d3a:	fb23 7300 	smlad	r3, r3, r0, r7
 8009d3e:	42b5      	cmp	r5, r6
 8009d40:	d191      	bne.n	8009c66 <st_sssa8_fully_connected+0xca>
 8009d42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d44:	f8dd a040 	ldr.w	sl, [sp, #64]	@ 0x40
 8009d48:	4493      	add	fp, r2
 8009d4a:	4691      	mov	r9, r2
 8009d4c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009d4e:	4591      	cmp	r9, r2
 8009d50:	f280 81e3 	bge.w	800a11a <st_sssa8_fully_connected+0x57e>
 8009d54:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009d56:	4657      	mov	r7, sl
 8009d58:	46d8      	mov	r8, fp
 8009d5a:	eba2 0209 	sub.w	r2, r2, r9
 8009d5e:	0892      	lsrs	r2, r2, #2
 8009d60:	920c      	str	r2, [sp, #48]	@ 0x30
 8009d62:	3201      	adds	r2, #1
 8009d64:	0090      	lsls	r0, r2, #2
 8009d66:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009d68:	eb06 0482 	add.w	r4, r6, r2, lsl #2
 8009d6c:	900a      	str	r0, [sp, #40]	@ 0x28
 8009d6e:	f856 eb04 	ldr.w	lr, [r6], #4
 8009d72:	f858 0b04 	ldr.w	r0, [r8], #4
 8009d76:	ea4f 2c3e 	mov.w	ip, lr, ror #8
 8009d7a:	683a      	ldr	r2, [r7, #0]
 8009d7c:	ea4f 2530 	mov.w	r5, r0, ror #8
 8009d80:	fa2f fc8c 	sxtb16	ip, ip
 8009d84:	fa2f fe8e 	sxtb16	lr, lr
 8009d88:	fa2f f585 	sxtb16	r5, r5
 8009d8c:	fa2f f080 	sxtb16	r0, r0
 8009d90:	fb22 110e 	smlad	r1, r2, lr, r1
 8009d94:	fb22 3300 	smlad	r3, r2, r0, r3
 8009d98:	687a      	ldr	r2, [r7, #4]
 8009d9a:	3708      	adds	r7, #8
 8009d9c:	fb22 110c 	smlad	r1, r2, ip, r1
 8009da0:	fb22 3305 	smlad	r3, r2, r5, r3
 8009da4:	42a6      	cmp	r6, r4
 8009da6:	d1e2      	bne.n	8009d6e <st_sssa8_fully_connected+0x1d2>
 8009da8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009daa:	f109 0904 	add.w	r9, r9, #4
 8009dae:	eb0a 0ac2 	add.w	sl, sl, r2, lsl #3
 8009db2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009db4:	4493      	add	fp, r2
 8009db6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009db8:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 8009dbc:	9d03      	ldr	r5, [sp, #12]
 8009dbe:	454d      	cmp	r5, r9
 8009dc0:	dd37      	ble.n	8009e32 <st_sssa8_fully_connected+0x296>
 8009dc2:	f9ba 2000 	ldrsh.w	r2, [sl]
 8009dc6:	f994 0000 	ldrsb.w	r0, [r4]
 8009dca:	fb12 1100 	smlabb	r1, r2, r0, r1
 8009dce:	f99b 0000 	ldrsb.w	r0, [fp]
 8009dd2:	fb12 3300 	smlabb	r3, r2, r0, r3
 8009dd6:	f109 0201 	add.w	r2, r9, #1
 8009dda:	42aa      	cmp	r2, r5
 8009ddc:	da25      	bge.n	8009e2a <st_sssa8_fully_connected+0x28e>
 8009dde:	f9ba 2002 	ldrsh.w	r2, [sl, #2]
 8009de2:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8009de6:	fb12 1100 	smlabb	r1, r2, r0, r1
 8009dea:	f99b 0001 	ldrsb.w	r0, [fp, #1]
 8009dee:	fb12 3300 	smlabb	r3, r2, r0, r3
 8009df2:	f109 0202 	add.w	r2, r9, #2
 8009df6:	42aa      	cmp	r2, r5
 8009df8:	da17      	bge.n	8009e2a <st_sssa8_fully_connected+0x28e>
 8009dfa:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 8009dfe:	f994 0002 	ldrsb.w	r0, [r4, #2]
 8009e02:	fb12 1100 	smlabb	r1, r2, r0, r1
 8009e06:	f99b 0002 	ldrsb.w	r0, [fp, #2]
 8009e0a:	fb12 3300 	smlabb	r3, r2, r0, r3
 8009e0e:	f109 0203 	add.w	r2, r9, #3
 8009e12:	4295      	cmp	r5, r2
 8009e14:	dd09      	ble.n	8009e2a <st_sssa8_fully_connected+0x28e>
 8009e16:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
 8009e1a:	f99b 0003 	ldrsb.w	r0, [fp, #3]
 8009e1e:	fb12 3300 	smlabb	r3, r2, r0, r3
 8009e22:	f994 0003 	ldrsb.w	r0, [r4, #3]
 8009e26:	fb12 1100 	smlabb	r1, r2, r0, r1
 8009e2a:	9a03      	ldr	r2, [sp, #12]
 8009e2c:	eba2 0909 	sub.w	r9, r2, r9
 8009e30:	444c      	add	r4, r9
 8009e32:	9a04      	ldr	r2, [sp, #16]
 8009e34:	2a15      	cmp	r2, #21
 8009e36:	f340 8140 	ble.w	800a0ba <st_sssa8_fully_connected+0x51e>
 8009e3a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8009e3c:	9a07      	ldr	r2, [sp, #28]
 8009e3e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8009e40:	fb51 0102 	smmla	r1, r1, r2, r0
 8009e44:	fb53 0302 	smmla	r3, r3, r2, r0
 8009e48:	4129      	asrs	r1, r5
 8009e4a:	9a08      	ldr	r2, [sp, #32]
 8009e4c:	4411      	add	r1, r2
 8009e4e:	f301 0107 	ssat	r1, #8, r1
 8009e52:	9806      	ldr	r0, [sp, #24]
 8009e54:	412b      	asrs	r3, r5
 8009e56:	f800 1c02 	strb.w	r1, [r0, #-2]
 8009e5a:	4413      	add	r3, r2
 8009e5c:	f303 0307 	ssat	r3, #8, r3
 8009e60:	f800 3c01 	strb.w	r3, [r0, #-1]
 8009e64:	9a03      	ldr	r2, [sp, #12]
 8009e66:	9b05      	ldr	r3, [sp, #20]
 8009e68:	18a5      	adds	r5, r4, r2
 8009e6a:	9a06      	ldr	r2, [sp, #24]
 8009e6c:	3308      	adds	r3, #8
 8009e6e:	3202      	adds	r2, #2
 8009e70:	9305      	str	r3, [sp, #20]
 8009e72:	9206      	str	r2, [sp, #24]
 8009e74:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e76:	4293      	cmp	r3, r2
 8009e78:	f47f aee8 	bne.w	8009c4c <st_sssa8_fully_connected+0xb0>
 8009e7c:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8009e7e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009e80:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8009e84:	9225      	str	r2, [sp, #148]	@ 0x94
 8009e86:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009e88:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009e8c:	9324      	str	r3, [sp, #144]	@ 0x90
 8009e8e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009e90:	07db      	lsls	r3, r3, #31
 8009e92:	d54a      	bpl.n	8009f2a <st_sssa8_fully_connected+0x38e>
 8009e94:	9a03      	ldr	r2, [sp, #12]
 8009e96:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009e98:	0897      	lsrs	r7, r2, #2
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f000 8175 	beq.w	800a18a <st_sssa8_fully_connected+0x5ee>
 8009ea0:	eb05 0687 	add.w	r6, r5, r7, lsl #2
 8009ea4:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8009ea6:	f855 2b04 	ldr.w	r2, [r5], #4
 8009eaa:	6801      	ldr	r1, [r0, #0]
 8009eac:	fa2f f482 	sxtb16	r4, r2
 8009eb0:	ea4f 2232 	mov.w	r2, r2, ror #8
 8009eb4:	fa2f f282 	sxtb16	r2, r2
 8009eb8:	fb21 3304 	smlad	r3, r1, r4, r3
 8009ebc:	6841      	ldr	r1, [r0, #4]
 8009ebe:	3008      	adds	r0, #8
 8009ec0:	fb21 3302 	smlad	r3, r1, r2, r3
 8009ec4:	42b5      	cmp	r5, r6
 8009ec6:	d1ee      	bne.n	8009ea6 <st_sssa8_fully_connected+0x30a>
 8009ec8:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8009eca:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
 8009ece:	9226      	str	r2, [sp, #152]	@ 0x98
 8009ed0:	9a03      	ldr	r2, [sp, #12]
 8009ed2:	f012 0203 	ands.w	r2, r2, #3
 8009ed6:	d016      	beq.n	8009f06 <st_sssa8_fully_connected+0x36a>
 8009ed8:	3a01      	subs	r2, #1
 8009eda:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8009edc:	f996 1000 	ldrsb.w	r1, [r6]
 8009ee0:	8800      	ldrh	r0, [r0, #0]
 8009ee2:	b292      	uxth	r2, r2
 8009ee4:	fb10 3301 	smlabb	r3, r0, r1, r3
 8009ee8:	b16a      	cbz	r2, 8009f06 <st_sssa8_fully_connected+0x36a>
 8009eea:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8009eec:	2a01      	cmp	r2, #1
 8009eee:	f996 1001 	ldrsb.w	r1, [r6, #1]
 8009ef2:	8840      	ldrh	r0, [r0, #2]
 8009ef4:	fb10 3301 	smlabb	r3, r0, r1, r3
 8009ef8:	d005      	beq.n	8009f06 <st_sssa8_fully_connected+0x36a>
 8009efa:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8009efc:	f996 2002 	ldrsb.w	r2, [r6, #2]
 8009f00:	8889      	ldrh	r1, [r1, #4]
 8009f02:	fb11 3302 	smlabb	r3, r1, r2, r3
 8009f06:	9a04      	ldr	r2, [sp, #16]
 8009f08:	2a15      	cmp	r2, #21
 8009f0a:	f340 811c 	ble.w	800a146 <st_sssa8_fully_connected+0x5aa>
 8009f0e:	1e91      	subs	r1, r2, #2
 8009f10:	2201      	movs	r2, #1
 8009f12:	408a      	lsls	r2, r1
 8009f14:	9907      	ldr	r1, [sp, #28]
 8009f16:	fb53 2301 	smmla	r3, r3, r1, r2
 8009f1a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009f1c:	4113      	asrs	r3, r2
 8009f1e:	9a08      	ldr	r2, [sp, #32]
 8009f20:	4413      	add	r3, r2
 8009f22:	f303 0307 	ssat	r3, #8, r3
 8009f26:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8009f28:	7013      	strb	r3, [r2, #0]
 8009f2a:	2000      	movs	r0, #0
 8009f2c:	b017      	add	sp, #92	@ 0x5c
 8009f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f32:	9308      	str	r3, [sp, #32]
 8009f34:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	f47f ae52 	bne.w	8009be0 <st_sssa8_fully_connected+0x44>
 8009f3c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009f3e:	4270      	negs	r0, r6
 8009f40:	eac0 4000 	pkhbt	r0, r0, r0, lsl #16
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d0f0      	beq.n	8009f2a <st_sssa8_fully_connected+0x38e>
 8009f48:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8009f4a:	3301      	adds	r3, #1
 8009f4c:	9903      	ldr	r1, [sp, #12]
 8009f4e:	b236      	sxth	r6, r6
 8009f50:	18d3      	adds	r3, r2, r3
 8009f52:	9c04      	ldr	r4, [sp, #16]
 8009f54:	f1a1 0810 	sub.w	r8, r1, #16
 8009f58:	f102 0e01 	add.w	lr, r2, #1
 8009f5c:	9305      	str	r3, [sp, #20]
 8009f5e:	2201      	movs	r2, #1
 8009f60:	f028 080f 	bic.w	r8, r8, #15
 8009f64:	1ea3      	subs	r3, r4, #2
 8009f66:	468c      	mov	ip, r1
 8009f68:	f8dd 9090 	ldr.w	r9, [sp, #144]	@ 0x90
 8009f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8009f70:	f108 0810 	add.w	r8, r8, #16
 8009f74:	f1bc 0f0f 	cmp.w	ip, #15
 8009f78:	f8cd b00c 	str.w	fp, [sp, #12]
 8009f7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f7e:	eb0b 0308 	add.w	r3, fp, r8
 8009f82:	9306      	str	r3, [sp, #24]
 8009f84:	eba2 0304 	sub.w	r3, r2, r4
 8009f88:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f8a:	f859 3b04 	ldr.w	r3, [r9], #4
 8009f8e:	dd7e      	ble.n	800a08e <st_sssa8_fully_connected+0x4f2>
 8009f90:	eb05 0708 	add.w	r7, r5, r8
 8009f94:	462a      	mov	r2, r5
 8009f96:	9d03      	ldr	r5, [sp, #12]
 8009f98:	6811      	ldr	r1, [r2, #0]
 8009f9a:	682c      	ldr	r4, [r5, #0]
 8009f9c:	fa2f fb81 	sxtb16	fp, r1
 8009fa0:	ea4f 2a34 	mov.w	sl, r4, ror #8
 8009fa4:	ea4f 2131 	mov.w	r1, r1, ror #8
 8009fa8:	fa20 fa8a 	sxtab16	sl, r0, sl
 8009fac:	fa2f f181 	sxtb16	r1, r1
 8009fb0:	fa20 f484 	sxtab16	r4, r0, r4
 8009fb4:	fb24 340b 	smlad	r4, r4, fp, r3
 8009fb8:	fb2a 4b01 	smlad	fp, sl, r1, r4
 8009fbc:	6851      	ldr	r1, [r2, #4]
 8009fbe:	f8d5 a004 	ldr.w	sl, [r5, #4]
 8009fc2:	fa2f f481 	sxtb16	r4, r1
 8009fc6:	ea4f 233a 	mov.w	r3, sl, ror #8
 8009fca:	ea4f 2131 	mov.w	r1, r1, ror #8
 8009fce:	fa20 f383 	sxtab16	r3, r0, r3
 8009fd2:	fa2f f181 	sxtb16	r1, r1
 8009fd6:	fa20 fa8a 	sxtab16	sl, r0, sl
 8009fda:	fb2a ba04 	smlad	sl, sl, r4, fp
 8009fde:	fb23 a401 	smlad	r4, r3, r1, sl
 8009fe2:	6891      	ldr	r1, [r2, #8]
 8009fe4:	68ab      	ldr	r3, [r5, #8]
 8009fe6:	fa2f fb81 	sxtb16	fp, r1
 8009fea:	ea4f 2a33 	mov.w	sl, r3, ror #8
 8009fee:	ea4f 2131 	mov.w	r1, r1, ror #8
 8009ff2:	fa20 fa8a 	sxtab16	sl, r0, sl
 8009ff6:	fa2f f181 	sxtb16	r1, r1
 8009ffa:	fa20 f383 	sxtab16	r3, r0, r3
 8009ffe:	fb23 430b 	smlad	r3, r3, fp, r4
 800a002:	fb2a 3301 	smlad	r3, sl, r1, r3
 800a006:	f8d2 a00c 	ldr.w	sl, [r2, #12]
 800a00a:	3510      	adds	r5, #16
 800a00c:	f855 1c04 	ldr.w	r1, [r5, #-4]
 800a010:	3210      	adds	r2, #16
 800a012:	ea4f 2b3a 	mov.w	fp, sl, ror #8
 800a016:	ea4f 2431 	mov.w	r4, r1, ror #8
 800a01a:	fa2f fa8a 	sxtb16	sl, sl
 800a01e:	fa2f fb8b 	sxtb16	fp, fp
 800a022:	fa20 f181 	sxtab16	r1, r0, r1
 800a026:	fa20 f484 	sxtab16	r4, r0, r4
 800a02a:	fb21 330a 	smlad	r3, r1, sl, r3
 800a02e:	fb24 330b 	smlad	r3, r4, fp, r3
 800a032:	4297      	cmp	r7, r2
 800a034:	d1b0      	bne.n	8009f98 <st_sssa8_fully_connected+0x3fc>
 800a036:	4645      	mov	r5, r8
 800a038:	9f06      	ldr	r7, [sp, #24]
 800a03a:	45ac      	cmp	ip, r5
 800a03c:	dd2c      	ble.n	800a098 <st_sssa8_fully_connected+0x4fc>
 800a03e:	ebac 0505 	sub.w	r5, ip, r5
 800a042:	4415      	add	r5, r2
 800a044:	4611      	mov	r1, r2
 800a046:	f917 4b01 	ldrsb.w	r4, [r7], #1
 800a04a:	3201      	adds	r2, #1
 800a04c:	7809      	ldrb	r1, [r1, #0]
 800a04e:	1ba4      	subs	r4, r4, r6
 800a050:	42aa      	cmp	r2, r5
 800a052:	b249      	sxtb	r1, r1
 800a054:	fb14 3301 	smlabb	r3, r4, r1, r3
 800a058:	d1f4      	bne.n	800a044 <st_sssa8_fully_connected+0x4a8>
 800a05a:	9a04      	ldr	r2, [sp, #16]
 800a05c:	2a15      	cmp	r2, #21
 800a05e:	dd1f      	ble.n	800a0a0 <st_sssa8_fully_connected+0x504>
 800a060:	9a07      	ldr	r2, [sp, #28]
 800a062:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a064:	fb53 1302 	smmla	r3, r3, r2, r1
 800a068:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a06a:	4113      	asrs	r3, r2
 800a06c:	9a08      	ldr	r2, [sp, #32]
 800a06e:	4413      	add	r3, r2
 800a070:	f303 0307 	ssat	r3, #8, r3
 800a074:	f80e 3c01 	strb.w	r3, [lr, #-1]
 800a078:	f10e 0e01 	add.w	lr, lr, #1
 800a07c:	9b05      	ldr	r3, [sp, #20]
 800a07e:	459e      	cmp	lr, r3
 800a080:	f43f af53 	beq.w	8009f2a <st_sssa8_fully_connected+0x38e>
 800a084:	f1bc 0f0f 	cmp.w	ip, #15
 800a088:	f859 3b04 	ldr.w	r3, [r9], #4
 800a08c:	dc80      	bgt.n	8009f90 <st_sssa8_fully_connected+0x3f4>
 800a08e:	462a      	mov	r2, r5
 800a090:	2500      	movs	r5, #0
 800a092:	9f03      	ldr	r7, [sp, #12]
 800a094:	45ac      	cmp	ip, r5
 800a096:	dcd2      	bgt.n	800a03e <st_sssa8_fully_connected+0x4a2>
 800a098:	4615      	mov	r5, r2
 800a09a:	9a04      	ldr	r2, [sp, #16]
 800a09c:	2a15      	cmp	r2, #21
 800a09e:	dcdf      	bgt.n	800a060 <st_sssa8_fully_connected+0x4c4>
 800a0a0:	2a00      	cmp	r2, #0
 800a0a2:	dd42      	ble.n	800a12a <st_sssa8_fully_connected+0x58e>
 800a0a4:	005b      	lsls	r3, r3, #1
 800a0a6:	e9dd 1407 	ldrd	r1, r4, [sp, #28]
 800a0aa:	fb53 4301 	smmla	r3, r3, r1, r4
 800a0ae:	4113      	asrs	r3, r2
 800a0b0:	f303 0307 	ssat	r3, #8, r3
 800a0b4:	f80e 3c01 	strb.w	r3, [lr, #-1]
 800a0b8:	e7de      	b.n	800a078 <st_sssa8_fully_connected+0x4dc>
 800a0ba:	2a00      	cmp	r2, #0
 800a0bc:	dd13      	ble.n	800a0e6 <st_sssa8_fully_connected+0x54a>
 800a0be:	0049      	lsls	r1, r1, #1
 800a0c0:	005b      	lsls	r3, r3, #1
 800a0c2:	e9dd 0507 	ldrd	r0, r5, [sp, #28]
 800a0c6:	fb51 5100 	smmla	r1, r1, r0, r5
 800a0ca:	fb53 5300 	smmla	r3, r3, r0, r5
 800a0ce:	4111      	asrs	r1, r2
 800a0d0:	f301 0107 	ssat	r1, #8, r1
 800a0d4:	9806      	ldr	r0, [sp, #24]
 800a0d6:	4113      	asrs	r3, r2
 800a0d8:	f800 1c02 	strb.w	r1, [r0, #-2]
 800a0dc:	f303 0307 	ssat	r3, #8, r3
 800a0e0:	f800 3c01 	strb.w	r3, [r0, #-1]
 800a0e4:	e6be      	b.n	8009e64 <st_sssa8_fully_connected+0x2c8>
 800a0e6:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800a0e8:	fa01 f200 	lsl.w	r2, r1, r0
 800a0ec:	f302 021f 	ssat	r2, #32, r2
 800a0f0:	9907      	ldr	r1, [sp, #28]
 800a0f2:	fb52 f211 	smmulr	r2, r2, r1
 800a0f6:	4083      	lsls	r3, r0
 800a0f8:	f303 031f 	ssat	r3, #32, r3
 800a0fc:	fb53 f311 	smmulr	r3, r3, r1
 800a100:	9908      	ldr	r1, [sp, #32]
 800a102:	440a      	add	r2, r1
 800a104:	f302 0207 	ssat	r2, #8, r2
 800a108:	9806      	ldr	r0, [sp, #24]
 800a10a:	440b      	add	r3, r1
 800a10c:	f800 2c02 	strb.w	r2, [r0, #-2]
 800a110:	f303 0307 	ssat	r3, #8, r3
 800a114:	f800 3c01 	strb.w	r3, [r0, #-1]
 800a118:	e6a4      	b.n	8009e64 <st_sssa8_fully_connected+0x2c8>
 800a11a:	4634      	mov	r4, r6
 800a11c:	e64e      	b.n	8009dbc <st_sssa8_fully_connected+0x220>
 800a11e:	462e      	mov	r6, r5
 800a120:	f8dd a098 	ldr.w	sl, [sp, #152]	@ 0x98
 800a124:	f04f 0900 	mov.w	r9, #0
 800a128:	e610      	b.n	8009d4c <st_sssa8_fully_connected+0x1b0>
 800a12a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a12c:	4093      	lsls	r3, r2
 800a12e:	f303 031f 	ssat	r3, #32, r3
 800a132:	9a07      	ldr	r2, [sp, #28]
 800a134:	fb53 f312 	smmulr	r3, r3, r2
 800a138:	9a08      	ldr	r2, [sp, #32]
 800a13a:	4413      	add	r3, r2
 800a13c:	f303 0307 	ssat	r3, #8, r3
 800a140:	f80e 3c01 	strb.w	r3, [lr, #-1]
 800a144:	e798      	b.n	800a078 <st_sssa8_fully_connected+0x4dc>
 800a146:	2a00      	cmp	r2, #0
 800a148:	dd0d      	ble.n	800a166 <st_sssa8_fully_connected+0x5ca>
 800a14a:	005b      	lsls	r3, r3, #1
 800a14c:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
 800a150:	fb53 0301 	smmla	r3, r3, r1, r0
 800a154:	4113      	asrs	r3, r2
 800a156:	f303 0307 	ssat	r3, #8, r3
 800a15a:	2000      	movs	r0, #0
 800a15c:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 800a15e:	7013      	strb	r3, [r2, #0]
 800a160:	b017      	add	sp, #92	@ 0x5c
 800a162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a166:	f1c2 0201 	rsb	r2, r2, #1
 800a16a:	4093      	lsls	r3, r2
 800a16c:	f303 031f 	ssat	r3, #32, r3
 800a170:	9a07      	ldr	r2, [sp, #28]
 800a172:	fb53 f312 	smmulr	r3, r3, r2
 800a176:	9a08      	ldr	r2, [sp, #32]
 800a178:	441a      	add	r2, r3
 800a17a:	f302 0307 	ssat	r3, #8, r2
 800a17e:	2000      	movs	r0, #0
 800a180:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 800a182:	7013      	strb	r3, [r2, #0]
 800a184:	b017      	add	sp, #92	@ 0x5c
 800a186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a18a:	462e      	mov	r6, r5
 800a18c:	e6a0      	b.n	8009ed0 <st_sssa8_fully_connected+0x334>
 800a18e:	bf00      	nop

0800a190 <st_int8_copy>:
 800a190:	4288      	cmp	r0, r1
 800a192:	d010      	beq.n	800a1b6 <st_int8_copy+0x26>
 800a194:	b17a      	cbz	r2, 800a1b6 <st_int8_copy+0x26>
 800a196:	4288      	cmp	r0, r1
 800a198:	eb00 0302 	add.w	r3, r0, r2
 800a19c:	d20c      	bcs.n	800a1b8 <st_int8_copy+0x28>
 800a19e:	428b      	cmp	r3, r1
 800a1a0:	d90a      	bls.n	800a1b8 <st_int8_copy+0x28>
 800a1a2:	4283      	cmp	r3, r0
 800a1a4:	440a      	add	r2, r1
 800a1a6:	d906      	bls.n	800a1b6 <st_int8_copy+0x26>
 800a1a8:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 800a1ac:	4283      	cmp	r3, r0
 800a1ae:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800a1b2:	d1f9      	bne.n	800a1a8 <st_int8_copy+0x18>
 800a1b4:	4770      	bx	lr
 800a1b6:	4770      	bx	lr
 800a1b8:	078b      	lsls	r3, r1, #30
 800a1ba:	d102      	bne.n	800a1c2 <st_int8_copy+0x32>
 800a1bc:	e008      	b.n	800a1d0 <st_int8_copy+0x40>
 800a1be:	2a00      	cmp	r2, #0
 800a1c0:	d04d      	beq.n	800a25e <st_int8_copy+0xce>
 800a1c2:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800a1c6:	3a01      	subs	r2, #1
 800a1c8:	f801 3b01 	strb.w	r3, [r1], #1
 800a1cc:	078b      	lsls	r3, r1, #30
 800a1ce:	d1f6      	bne.n	800a1be <st_int8_copy+0x2e>
 800a1d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1d4:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 800a1d8:	d05e      	beq.n	800a298 <st_int8_copy+0x108>
 800a1da:	ea40 0301 	orr.w	r3, r0, r1
 800a1de:	075b      	lsls	r3, r3, #29
 800a1e0:	d13e      	bne.n	800a260 <st_int8_copy+0xd0>
 800a1e2:	f10e 33ff 	add.w	r3, lr, #4294967295
 800a1e6:	2b01      	cmp	r3, #1
 800a1e8:	d93a      	bls.n	800a260 <st_int8_copy+0xd0>
 800a1ea:	f100 0310 	add.w	r3, r0, #16
 800a1ee:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800a1f2:	f101 0c10 	add.w	ip, r1, #16
 800a1f6:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 800a1fa:	3310      	adds	r3, #16
 800a1fc:	f10c 0c10 	add.w	ip, ip, #16
 800a200:	ed13 6b08 	vldr	d6, [r3, #-32]	@ 0xffffffe0
 800a204:	ed13 7b06 	vldr	d7, [r3, #-24]	@ 0xffffffe8
 800a208:	4573      	cmp	r3, lr
 800a20a:	ed0c 6b08 	vstr	d6, [ip, #-32]	@ 0xffffffe0
 800a20e:	ed0c 7b06 	vstr	d7, [ip, #-24]	@ 0xffffffe8
 800a212:	d1f2      	bne.n	800a1fa <st_int8_copy+0x6a>
 800a214:	f3c2 0381 	ubfx	r3, r2, #2, #2
 800a218:	4421      	add	r1, r4
 800a21a:	4420      	add	r0, r4
 800a21c:	f002 0203 	and.w	r2, r2, #3
 800a220:	b16b      	cbz	r3, 800a23e <st_int8_copy+0xae>
 800a222:	6804      	ldr	r4, [r0, #0]
 800a224:	600c      	str	r4, [r1, #0]
 800a226:	1e5c      	subs	r4, r3, #1
 800a228:	d005      	beq.n	800a236 <st_int8_copy+0xa6>
 800a22a:	6845      	ldr	r5, [r0, #4]
 800a22c:	2c01      	cmp	r4, #1
 800a22e:	604d      	str	r5, [r1, #4]
 800a230:	d001      	beq.n	800a236 <st_int8_copy+0xa6>
 800a232:	6884      	ldr	r4, [r0, #8]
 800a234:	608c      	str	r4, [r1, #8]
 800a236:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800a23a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800a23e:	b162      	cbz	r2, 800a25a <st_int8_copy+0xca>
 800a240:	f990 3000 	ldrsb.w	r3, [r0]
 800a244:	3a01      	subs	r2, #1
 800a246:	700b      	strb	r3, [r1, #0]
 800a248:	d007      	beq.n	800a25a <st_int8_copy+0xca>
 800a24a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800a24e:	2a01      	cmp	r2, #1
 800a250:	704b      	strb	r3, [r1, #1]
 800a252:	d002      	beq.n	800a25a <st_int8_copy+0xca>
 800a254:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800a258:	708b      	strb	r3, [r1, #2]
 800a25a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a25e:	4770      	bx	lr
 800a260:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800a264:	460b      	mov	r3, r1
 800a266:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 800a26a:	4684      	mov	ip, r0
 800a26c:	f8dc 8000 	ldr.w	r8, [ip]
 800a270:	3310      	adds	r3, #16
 800a272:	f8dc 7004 	ldr.w	r7, [ip, #4]
 800a276:	f10c 0c10 	add.w	ip, ip, #16
 800a27a:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 800a27e:	f85c 5c04 	ldr.w	r5, [ip, #-4]
 800a282:	f843 8c10 	str.w	r8, [r3, #-16]
 800a286:	f843 7c0c 	str.w	r7, [r3, #-12]
 800a28a:	f843 6c08 	str.w	r6, [r3, #-8]
 800a28e:	f843 5c04 	str.w	r5, [r3, #-4]
 800a292:	459e      	cmp	lr, r3
 800a294:	d1ea      	bne.n	800a26c <st_int8_copy+0xdc>
 800a296:	e7bd      	b.n	800a214 <st_int8_copy+0x84>
 800a298:	0893      	lsrs	r3, r2, #2
 800a29a:	f002 0203 	and.w	r2, r2, #3
 800a29e:	e7bf      	b.n	800a220 <st_int8_copy+0x90>

0800a2a0 <st_int8_reordered_no_shift_zero>:
 800a2a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2a2:	0897      	lsrs	r7, r2, #2
 800a2a4:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 800a2a8:	d02f      	beq.n	800a30a <st_int8_reordered_no_shift_zero+0x6a>
 800a2aa:	eb00 0587 	add.w	r5, r0, r7, lsl #2
 800a2ae:	460c      	mov	r4, r1
 800a2b0:	f850 cb04 	ldr.w	ip, [r0], #4
 800a2b4:	ea4f 2e3c 	mov.w	lr, ip, ror #8
 800a2b8:	fa2f fe8e 	sxtb16	lr, lr
 800a2bc:	fade fe03 	ssub16	lr, lr, r3
 800a2c0:	fa2f fc8c 	sxtb16	ip, ip
 800a2c4:	fadc fc03 	ssub16	ip, ip, r3
 800a2c8:	42a8      	cmp	r0, r5
 800a2ca:	f8c4 c000 	str.w	ip, [r4]
 800a2ce:	f8c4 e004 	str.w	lr, [r4, #4]
 800a2d2:	f104 0408 	add.w	r4, r4, #8
 800a2d6:	d1eb      	bne.n	800a2b0 <st_int8_reordered_no_shift_zero+0x10>
 800a2d8:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800a2dc:	f012 0203 	ands.w	r2, r2, #3
 800a2e0:	d012      	beq.n	800a308 <st_int8_reordered_no_shift_zero+0x68>
 800a2e2:	f995 0000 	ldrsb.w	r0, [r5]
 800a2e6:	b273      	sxtb	r3, r6
 800a2e8:	3a01      	subs	r2, #1
 800a2ea:	eba0 0003 	sub.w	r0, r0, r3
 800a2ee:	8008      	strh	r0, [r1, #0]
 800a2f0:	d00a      	beq.n	800a308 <st_int8_reordered_no_shift_zero+0x68>
 800a2f2:	f995 0001 	ldrsb.w	r0, [r5, #1]
 800a2f6:	2a01      	cmp	r2, #1
 800a2f8:	eba0 0003 	sub.w	r0, r0, r3
 800a2fc:	8048      	strh	r0, [r1, #2]
 800a2fe:	d003      	beq.n	800a308 <st_int8_reordered_no_shift_zero+0x68>
 800a300:	f995 2002 	ldrsb.w	r2, [r5, #2]
 800a304:	1ad3      	subs	r3, r2, r3
 800a306:	808b      	strh	r3, [r1, #4]
 800a308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a30a:	4605      	mov	r5, r0
 800a30c:	e7e6      	b.n	800a2dc <st_int8_reordered_no_shift_zero+0x3c>
 800a30e:	bf00      	nop

0800a310 <st_int8_to16_no_shift>:
 800a310:	b570      	push	{r4, r5, r6, lr}
 800a312:	f1b2 0410 	subs.w	r4, r2, #16
 800a316:	f04f 0e00 	mov.w	lr, #0
 800a31a:	d438      	bmi.n	800a38e <st_int8_to16_no_shift+0x7e>
 800a31c:	f8d0 c000 	ldr.w	ip, [r0]
 800a320:	6843      	ldr	r3, [r0, #4]
 800a322:	fa2f f59c 	sxtb16	r5, ip, ror #8
 800a326:	fa2f fc8c 	sxtb16	ip, ip
 800a32a:	eac5 462c 	pkhtb	r6, r5, ip, asr #16
 800a32e:	eacc 4c05 	pkhbt	ip, ip, r5, lsl #16
 800a332:	fa2f f593 	sxtb16	r5, r3, ror #8
 800a336:	3010      	adds	r0, #16
 800a338:	604e      	str	r6, [r1, #4]
 800a33a:	f8c1 c000 	str.w	ip, [r1]
 800a33e:	fa2f f383 	sxtb16	r3, r3
 800a342:	eac5 4623 	pkhtb	r6, r5, r3, asr #16
 800a346:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 800a34a:	60ce      	str	r6, [r1, #12]
 800a34c:	608b      	str	r3, [r1, #8]
 800a34e:	f850 cc08 	ldr.w	ip, [r0, #-8]
 800a352:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800a356:	fa2f f59c 	sxtb16	r5, ip, ror #8
 800a35a:	fa2f fc8c 	sxtb16	ip, ip
 800a35e:	eac5 462c 	pkhtb	r6, r5, ip, asr #16
 800a362:	eacc 4c05 	pkhbt	ip, ip, r5, lsl #16
 800a366:	fa2f f593 	sxtb16	r5, r3, ror #8
 800a36a:	f10e 0e10 	add.w	lr, lr, #16
 800a36e:	f8c1 c010 	str.w	ip, [r1, #16]
 800a372:	614e      	str	r6, [r1, #20]
 800a374:	3120      	adds	r1, #32
 800a376:	45a6      	cmp	lr, r4
 800a378:	fa2f f383 	sxtb16	r3, r3
 800a37c:	eac5 4c23 	pkhtb	ip, r5, r3, asr #16
 800a380:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 800a384:	f841 cc04 	str.w	ip, [r1, #-4]
 800a388:	f841 3c08 	str.w	r3, [r1, #-8]
 800a38c:	ddc6      	ble.n	800a31c <st_int8_to16_no_shift+0xc>
 800a38e:	1f16      	subs	r6, r2, #4
 800a390:	4576      	cmp	r6, lr
 800a392:	db12      	blt.n	800a3ba <st_int8_to16_no_shift+0xaa>
 800a394:	f850 3b04 	ldr.w	r3, [r0], #4
 800a398:	fa2f f493 	sxtb16	r4, r3, ror #8
 800a39c:	f10e 0e04 	add.w	lr, lr, #4
 800a3a0:	3108      	adds	r1, #8
 800a3a2:	fa2f f383 	sxtb16	r3, r3
 800a3a6:	45b6      	cmp	lr, r6
 800a3a8:	eac4 4523 	pkhtb	r5, r4, r3, asr #16
 800a3ac:	eac3 4304 	pkhbt	r3, r3, r4, lsl #16
 800a3b0:	f841 5c04 	str.w	r5, [r1, #-4]
 800a3b4:	f841 3c08 	str.w	r3, [r1, #-8]
 800a3b8:	ddec      	ble.n	800a394 <st_int8_to16_no_shift+0x84>
 800a3ba:	4572      	cmp	r2, lr
 800a3bc:	dd08      	ble.n	800a3d0 <st_int8_to16_no_shift+0xc0>
 800a3be:	eba2 020e 	sub.w	r2, r2, lr
 800a3c2:	4402      	add	r2, r0
 800a3c4:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800a3c8:	4290      	cmp	r0, r2
 800a3ca:	f821 3b02 	strh.w	r3, [r1], #2
 800a3ce:	d1f9      	bne.n	800a3c4 <st_int8_to16_no_shift+0xb4>
 800a3d0:	bd70      	pop	{r4, r5, r6, pc}
 800a3d2:	bf00      	nop

0800a3d4 <st_int8_to16_no_shift_interleaved>:
 800a3d4:	b570      	push	{r4, r5, r6, lr}
 800a3d6:	f1b2 0510 	subs.w	r5, r2, #16
 800a3da:	f04f 0e00 	mov.w	lr, #0
 800a3de:	d428      	bmi.n	800a432 <st_int8_to16_no_shift_interleaved+0x5e>
 800a3e0:	f8d0 c000 	ldr.w	ip, [r0]
 800a3e4:	6843      	ldr	r3, [r0, #4]
 800a3e6:	fa2f f69c 	sxtb16	r6, ip, ror #8
 800a3ea:	fa2f fc8c 	sxtb16	ip, ip
 800a3ee:	fa2f f493 	sxtb16	r4, r3, ror #8
 800a3f2:	3010      	adds	r0, #16
 800a3f4:	600e      	str	r6, [r1, #0]
 800a3f6:	f8c1 c004 	str.w	ip, [r1, #4]
 800a3fa:	608c      	str	r4, [r1, #8]
 800a3fc:	fa2f f383 	sxtb16	r3, r3
 800a400:	60cb      	str	r3, [r1, #12]
 800a402:	f850 cc08 	ldr.w	ip, [r0, #-8]
 800a406:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800a40a:	fa2f f69c 	sxtb16	r6, ip, ror #8
 800a40e:	fa2f fc8c 	sxtb16	ip, ip
 800a412:	fa2f f493 	sxtb16	r4, r3, ror #8
 800a416:	f10e 0e10 	add.w	lr, lr, #16
 800a41a:	610e      	str	r6, [r1, #16]
 800a41c:	f8c1 c014 	str.w	ip, [r1, #20]
 800a420:	3120      	adds	r1, #32
 800a422:	45ae      	cmp	lr, r5
 800a424:	f841 4c08 	str.w	r4, [r1, #-8]
 800a428:	fa2f f383 	sxtb16	r3, r3
 800a42c:	f841 3c04 	str.w	r3, [r1, #-4]
 800a430:	ddd6      	ble.n	800a3e0 <st_int8_to16_no_shift_interleaved+0xc>
 800a432:	1f14      	subs	r4, r2, #4
 800a434:	4574      	cmp	r4, lr
 800a436:	db10      	blt.n	800a45a <st_int8_to16_no_shift_interleaved+0x86>
 800a438:	ebae 0e00 	sub.w	lr, lr, r0
 800a43c:	f850 3b04 	ldr.w	r3, [r0], #4
 800a440:	fa2f fc93 	sxtb16	ip, r3, ror #8
 800a444:	eb00 020e 	add.w	r2, r0, lr
 800a448:	f8c1 c000 	str.w	ip, [r1]
 800a44c:	3108      	adds	r1, #8
 800a44e:	4294      	cmp	r4, r2
 800a450:	fa2f f383 	sxtb16	r3, r3
 800a454:	f841 3c04 	str.w	r3, [r1, #-4]
 800a458:	daf0      	bge.n	800a43c <st_int8_to16_no_shift_interleaved+0x68>
 800a45a:	bd70      	pop	{r4, r5, r6, pc}

0800a45c <st_int8_to16_dual>:
 800a45c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a460:	4698      	mov	r8, r3
 800a462:	085b      	lsrs	r3, r3, #1
 800a464:	eb00 0c02 	add.w	ip, r0, r2
 800a468:	f000 80b9 	beq.w	800a5de <st_int8_to16_dual+0x182>
 800a46c:	f1a2 0710 	sub.w	r7, r2, #16
 800a470:	1f16      	subs	r6, r2, #4
 800a472:	2f00      	cmp	r7, #0
 800a474:	f04f 0500 	mov.w	r5, #0
 800a478:	db73      	blt.n	800a562 <st_int8_to16_dual+0x106>
 800a47a:	f8d0 e000 	ldr.w	lr, [r0]
 800a47e:	f8dc 4000 	ldr.w	r4, [ip]
 800a482:	fa2f f99e 	sxtb16	r9, lr, ror #8
 800a486:	fa2f fe8e 	sxtb16	lr, lr
 800a48a:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 800a48e:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 800a492:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a496:	f8c1 e000 	str.w	lr, [r1]
 800a49a:	f8c1 a008 	str.w	sl, [r1, #8]
 800a49e:	fa2f f484 	sxtb16	r4, r4
 800a4a2:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 800a4a6:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 800a4aa:	f8c1 e00c 	str.w	lr, [r1, #12]
 800a4ae:	604c      	str	r4, [r1, #4]
 800a4b0:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800a4b4:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800a4b8:	fa2f f99e 	sxtb16	r9, lr, ror #8
 800a4bc:	fa2f fe8e 	sxtb16	lr, lr
 800a4c0:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 800a4c4:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 800a4c8:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a4cc:	f8c1 e010 	str.w	lr, [r1, #16]
 800a4d0:	f8c1 a018 	str.w	sl, [r1, #24]
 800a4d4:	fa2f f484 	sxtb16	r4, r4
 800a4d8:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 800a4dc:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 800a4e0:	f8c1 e01c 	str.w	lr, [r1, #28]
 800a4e4:	614c      	str	r4, [r1, #20]
 800a4e6:	f8d0 e008 	ldr.w	lr, [r0, #8]
 800a4ea:	f8dc 4008 	ldr.w	r4, [ip, #8]
 800a4ee:	fa2f f99e 	sxtb16	r9, lr, ror #8
 800a4f2:	fa2f fe8e 	sxtb16	lr, lr
 800a4f6:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 800a4fa:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 800a4fe:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a502:	3010      	adds	r0, #16
 800a504:	f10c 0c10 	add.w	ip, ip, #16
 800a508:	f8c1 e020 	str.w	lr, [r1, #32]
 800a50c:	f8c1 a028 	str.w	sl, [r1, #40]	@ 0x28
 800a510:	fa2f f484 	sxtb16	r4, r4
 800a514:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 800a518:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 800a51c:	f8c1 e02c 	str.w	lr, [r1, #44]	@ 0x2c
 800a520:	624c      	str	r4, [r1, #36]	@ 0x24
 800a522:	f850 ec04 	ldr.w	lr, [r0, #-4]
 800a526:	f85c 4c04 	ldr.w	r4, [ip, #-4]
 800a52a:	fa2f fa9e 	sxtb16	sl, lr, ror #8
 800a52e:	fa2f fe8e 	sxtb16	lr, lr
 800a532:	eaca 492e 	pkhtb	r9, sl, lr, asr #16
 800a536:	eace 4e0a 	pkhbt	lr, lr, sl, lsl #16
 800a53a:	fa2f fa94 	sxtb16	sl, r4, ror #8
 800a53e:	3510      	adds	r5, #16
 800a540:	f8c1 e030 	str.w	lr, [r1, #48]	@ 0x30
 800a544:	f8c1 9038 	str.w	r9, [r1, #56]	@ 0x38
 800a548:	3140      	adds	r1, #64	@ 0x40
 800a54a:	42bd      	cmp	r5, r7
 800a54c:	fa2f f484 	sxtb16	r4, r4
 800a550:	eaca 4e24 	pkhtb	lr, sl, r4, asr #16
 800a554:	eac4 440a 	pkhbt	r4, r4, sl, lsl #16
 800a558:	f841 ec04 	str.w	lr, [r1, #-4]
 800a55c:	f841 4c0c 	str.w	r4, [r1, #-12]
 800a560:	dd8b      	ble.n	800a47a <st_int8_to16_dual+0x1e>
 800a562:	42ae      	cmp	r6, r5
 800a564:	db1e      	blt.n	800a5a4 <st_int8_to16_dual+0x148>
 800a566:	f850 4b04 	ldr.w	r4, [r0], #4
 800a56a:	f85c eb04 	ldr.w	lr, [ip], #4
 800a56e:	fa2f fa94 	sxtb16	sl, r4, ror #8
 800a572:	fa2f f484 	sxtb16	r4, r4
 800a576:	eaca 4924 	pkhtb	r9, sl, r4, asr #16
 800a57a:	eac4 440a 	pkhbt	r4, r4, sl, lsl #16
 800a57e:	fa2f fa9e 	sxtb16	sl, lr, ror #8
 800a582:	3504      	adds	r5, #4
 800a584:	600c      	str	r4, [r1, #0]
 800a586:	f8c1 9008 	str.w	r9, [r1, #8]
 800a58a:	3110      	adds	r1, #16
 800a58c:	42b5      	cmp	r5, r6
 800a58e:	fa2f fe8e 	sxtb16	lr, lr
 800a592:	eaca 442e 	pkhtb	r4, sl, lr, asr #16
 800a596:	eace 4e0a 	pkhbt	lr, lr, sl, lsl #16
 800a59a:	f841 4c04 	str.w	r4, [r1, #-4]
 800a59e:	f841 ec0c 	str.w	lr, [r1, #-12]
 800a5a2:	dde0      	ble.n	800a566 <st_int8_to16_dual+0x10a>
 800a5a4:	42aa      	cmp	r2, r5
 800a5a6:	dd40      	ble.n	800a62a <st_int8_to16_dual+0x1ce>
 800a5a8:	1b55      	subs	r5, r2, r5
 800a5aa:	1d0c      	adds	r4, r1, #4
 800a5ac:	46e6      	mov	lr, ip
 800a5ae:	eb00 0a05 	add.w	sl, r0, r5
 800a5b2:	f910 9b01 	ldrsb.w	r9, [r0], #1
 800a5b6:	3404      	adds	r4, #4
 800a5b8:	f824 9c08 	strh.w	r9, [r4, #-8]
 800a5bc:	4550      	cmp	r0, sl
 800a5be:	f91e 9b01 	ldrsb.w	r9, [lr], #1
 800a5c2:	f824 9c06 	strh.w	r9, [r4, #-6]
 800a5c6:	d1f4      	bne.n	800a5b2 <st_int8_to16_dual+0x156>
 800a5c8:	44ac      	add	ip, r5
 800a5ca:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800a5ce:	3b01      	subs	r3, #1
 800a5d0:	eb0a 0002 	add.w	r0, sl, r2
 800a5d4:	4494      	add	ip, r2
 800a5d6:	b29b      	uxth	r3, r3
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	f47f af4a 	bne.w	800a472 <st_int8_to16_dual+0x16>
 800a5de:	f018 0f01 	tst.w	r8, #1
 800a5e2:	d020      	beq.n	800a626 <st_int8_to16_dual+0x1ca>
 800a5e4:	1f17      	subs	r7, r2, #4
 800a5e6:	f04f 0400 	mov.w	r4, #0
 800a5ea:	d411      	bmi.n	800a610 <st_int8_to16_dual+0x1b4>
 800a5ec:	f850 3b04 	ldr.w	r3, [r0], #4
 800a5f0:	fa2f f593 	sxtb16	r5, r3, ror #8
 800a5f4:	3404      	adds	r4, #4
 800a5f6:	3108      	adds	r1, #8
 800a5f8:	fa2f f383 	sxtb16	r3, r3
 800a5fc:	42a7      	cmp	r7, r4
 800a5fe:	eac5 4623 	pkhtb	r6, r5, r3, asr #16
 800a602:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 800a606:	f841 6c04 	str.w	r6, [r1, #-4]
 800a60a:	f841 3c08 	str.w	r3, [r1, #-8]
 800a60e:	daed      	bge.n	800a5ec <st_int8_to16_dual+0x190>
 800a610:	42a2      	cmp	r2, r4
 800a612:	dd08      	ble.n	800a626 <st_int8_to16_dual+0x1ca>
 800a614:	1b13      	subs	r3, r2, r4
 800a616:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800a61a:	f910 2b01 	ldrsb.w	r2, [r0], #1
 800a61e:	f821 2b02 	strh.w	r2, [r1], #2
 800a622:	428b      	cmp	r3, r1
 800a624:	d1f9      	bne.n	800a61a <st_int8_to16_dual+0x1be>
 800a626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a62a:	4682      	mov	sl, r0
 800a62c:	e7cf      	b.n	800a5ce <st_int8_to16_dual+0x172>
 800a62e:	bf00      	nop

0800a630 <st_int8_to16_dual_interleaved>:
 800a630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a634:	4698      	mov	r8, r3
 800a636:	085b      	lsrs	r3, r3, #1
 800a638:	eb00 0c02 	add.w	ip, r0, r2
 800a63c:	f000 808f 	beq.w	800a75e <st_int8_to16_dual_interleaved+0x12e>
 800a640:	f1a2 0710 	sub.w	r7, r2, #16
 800a644:	1f16      	subs	r6, r2, #4
 800a646:	2f00      	cmp	r7, #0
 800a648:	f04f 0e00 	mov.w	lr, #0
 800a64c:	db4e      	blt.n	800a6ec <st_int8_to16_dual_interleaved+0xbc>
 800a64e:	6805      	ldr	r5, [r0, #0]
 800a650:	f8dc 4000 	ldr.w	r4, [ip]
 800a654:	fa2f fa95 	sxtb16	sl, r5, ror #8
 800a658:	fa2f f585 	sxtb16	r5, r5
 800a65c:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a660:	f8c1 a000 	str.w	sl, [r1]
 800a664:	f8c1 9004 	str.w	r9, [r1, #4]
 800a668:	608d      	str	r5, [r1, #8]
 800a66a:	fa2f f484 	sxtb16	r4, r4
 800a66e:	60cc      	str	r4, [r1, #12]
 800a670:	6845      	ldr	r5, [r0, #4]
 800a672:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800a676:	fa2f fa95 	sxtb16	sl, r5, ror #8
 800a67a:	fa2f f585 	sxtb16	r5, r5
 800a67e:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a682:	f8c1 a010 	str.w	sl, [r1, #16]
 800a686:	f8c1 9014 	str.w	r9, [r1, #20]
 800a68a:	618d      	str	r5, [r1, #24]
 800a68c:	fa2f f484 	sxtb16	r4, r4
 800a690:	61cc      	str	r4, [r1, #28]
 800a692:	6885      	ldr	r5, [r0, #8]
 800a694:	f8dc 4008 	ldr.w	r4, [ip, #8]
 800a698:	fa2f fa95 	sxtb16	sl, r5, ror #8
 800a69c:	fa2f f585 	sxtb16	r5, r5
 800a6a0:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a6a4:	3010      	adds	r0, #16
 800a6a6:	f10c 0c10 	add.w	ip, ip, #16
 800a6aa:	f8c1 a020 	str.w	sl, [r1, #32]
 800a6ae:	f8c1 9024 	str.w	r9, [r1, #36]	@ 0x24
 800a6b2:	628d      	str	r5, [r1, #40]	@ 0x28
 800a6b4:	fa2f f484 	sxtb16	r4, r4
 800a6b8:	62cc      	str	r4, [r1, #44]	@ 0x2c
 800a6ba:	f850 5c04 	ldr.w	r5, [r0, #-4]
 800a6be:	f85c 4c04 	ldr.w	r4, [ip, #-4]
 800a6c2:	fa2f fa95 	sxtb16	sl, r5, ror #8
 800a6c6:	fa2f f585 	sxtb16	r5, r5
 800a6ca:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a6ce:	f10e 0e10 	add.w	lr, lr, #16
 800a6d2:	f8c1 a030 	str.w	sl, [r1, #48]	@ 0x30
 800a6d6:	f8c1 9034 	str.w	r9, [r1, #52]	@ 0x34
 800a6da:	3140      	adds	r1, #64	@ 0x40
 800a6dc:	45be      	cmp	lr, r7
 800a6de:	f841 5c08 	str.w	r5, [r1, #-8]
 800a6e2:	fa2f f484 	sxtb16	r4, r4
 800a6e6:	f841 4c04 	str.w	r4, [r1, #-4]
 800a6ea:	ddb0      	ble.n	800a64e <st_int8_to16_dual_interleaved+0x1e>
 800a6ec:	4576      	cmp	r6, lr
 800a6ee:	db18      	blt.n	800a722 <st_int8_to16_dual_interleaved+0xf2>
 800a6f0:	f850 5b04 	ldr.w	r5, [r0], #4
 800a6f4:	f85c 4b04 	ldr.w	r4, [ip], #4
 800a6f8:	fa2f fa95 	sxtb16	sl, r5, ror #8
 800a6fc:	fa2f f585 	sxtb16	r5, r5
 800a700:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a704:	f10e 0e04 	add.w	lr, lr, #4
 800a708:	f8c1 a000 	str.w	sl, [r1]
 800a70c:	f8c1 9004 	str.w	r9, [r1, #4]
 800a710:	3110      	adds	r1, #16
 800a712:	45b6      	cmp	lr, r6
 800a714:	f841 5c08 	str.w	r5, [r1, #-8]
 800a718:	fa2f f484 	sxtb16	r4, r4
 800a71c:	f841 4c04 	str.w	r4, [r1, #-4]
 800a720:	dde6      	ble.n	800a6f0 <st_int8_to16_dual_interleaved+0xc0>
 800a722:	4572      	cmp	r2, lr
 800a724:	dd3c      	ble.n	800a7a0 <st_int8_to16_dual_interleaved+0x170>
 800a726:	eba2 0e0e 	sub.w	lr, r2, lr
 800a72a:	1d0c      	adds	r4, r1, #4
 800a72c:	4665      	mov	r5, ip
 800a72e:	eb00 0a0e 	add.w	sl, r0, lr
 800a732:	f910 9b01 	ldrsb.w	r9, [r0], #1
 800a736:	3404      	adds	r4, #4
 800a738:	f824 9c08 	strh.w	r9, [r4, #-8]
 800a73c:	4550      	cmp	r0, sl
 800a73e:	f915 9b01 	ldrsb.w	r9, [r5], #1
 800a742:	f824 9c06 	strh.w	r9, [r4, #-6]
 800a746:	d1f4      	bne.n	800a732 <st_int8_to16_dual_interleaved+0x102>
 800a748:	44f4      	add	ip, lr
 800a74a:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 800a74e:	3b01      	subs	r3, #1
 800a750:	eb0a 0002 	add.w	r0, sl, r2
 800a754:	4494      	add	ip, r2
 800a756:	b29b      	uxth	r3, r3
 800a758:	2b00      	cmp	r3, #0
 800a75a:	f47f af74 	bne.w	800a646 <st_int8_to16_dual_interleaved+0x16>
 800a75e:	f018 0f01 	tst.w	r8, #1
 800a762:	d01b      	beq.n	800a79c <st_int8_to16_dual_interleaved+0x16c>
 800a764:	1f16      	subs	r6, r2, #4
 800a766:	f04f 0400 	mov.w	r4, #0
 800a76a:	d40c      	bmi.n	800a786 <st_int8_to16_dual_interleaved+0x156>
 800a76c:	f850 3b04 	ldr.w	r3, [r0], #4
 800a770:	fa2f f593 	sxtb16	r5, r3, ror #8
 800a774:	3404      	adds	r4, #4
 800a776:	600d      	str	r5, [r1, #0]
 800a778:	3108      	adds	r1, #8
 800a77a:	42a6      	cmp	r6, r4
 800a77c:	fa2f f383 	sxtb16	r3, r3
 800a780:	f841 3c04 	str.w	r3, [r1, #-4]
 800a784:	daf2      	bge.n	800a76c <st_int8_to16_dual_interleaved+0x13c>
 800a786:	42a2      	cmp	r2, r4
 800a788:	dd08      	ble.n	800a79c <st_int8_to16_dual_interleaved+0x16c>
 800a78a:	1b13      	subs	r3, r2, r4
 800a78c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800a790:	f910 2b01 	ldrsb.w	r2, [r0], #1
 800a794:	f821 2b02 	strh.w	r2, [r1], #2
 800a798:	428b      	cmp	r3, r1
 800a79a:	d1f9      	bne.n	800a790 <st_int8_to16_dual_interleaved+0x160>
 800a79c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7a0:	4682      	mov	sl, r0
 800a7a2:	e7d4      	b.n	800a74e <st_int8_to16_dual_interleaved+0x11e>

0800a7a4 <ai_padding_opt_init>:
 800a7a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a7a8:	2700      	movs	r7, #0
 800a7aa:	9c07      	ldr	r4, [sp, #28]
 800a7ac:	e9c0 7700 	strd	r7, r7, [r0]
 800a7b0:	6087      	str	r7, [r0, #8]
 800a7b2:	46b9      	mov	r9, r7
 800a7b4:	690d      	ldr	r5, [r1, #16]
 800a7b6:	f1c5 0c00 	rsb	ip, r5, #0
 800a7ba:	689d      	ldr	r5, [r3, #8]
 800a7bc:	42bd      	cmp	r5, r7
 800a7be:	dd1c      	ble.n	800a7fa <ai_padding_opt_init+0x56>
 800a7c0:	463e      	mov	r6, r7
 800a7c2:	46be      	mov	lr, r7
 800a7c4:	e010      	b.n	800a7e8 <ai_padding_opt_init+0x44>
 800a7c6:	6895      	ldr	r5, [r2, #8]
 800a7c8:	eba5 080c 	sub.w	r8, r5, ip
 800a7cc:	68a5      	ldr	r5, [r4, #8]
 800a7ce:	45a8      	cmp	r8, r5
 800a7d0:	da10      	bge.n	800a7f4 <ai_padding_opt_init+0x50>
 800a7d2:	f109 0901 	add.w	r9, r9, #1
 800a7d6:	f8c0 9008 	str.w	r9, [r0, #8]
 800a7da:	688d      	ldr	r5, [r1, #8]
 800a7dc:	f10e 0e01 	add.w	lr, lr, #1
 800a7e0:	44ac      	add	ip, r5
 800a7e2:	689d      	ldr	r5, [r3, #8]
 800a7e4:	4575      	cmp	r5, lr
 800a7e6:	dd09      	ble.n	800a7fc <ai_padding_opt_init+0x58>
 800a7e8:	f1bc 0f00 	cmp.w	ip, #0
 800a7ec:	daeb      	bge.n	800a7c6 <ai_padding_opt_init+0x22>
 800a7ee:	3601      	adds	r6, #1
 800a7f0:	6006      	str	r6, [r0, #0]
 800a7f2:	e7f2      	b.n	800a7da <ai_padding_opt_init+0x36>
 800a7f4:	3701      	adds	r7, #1
 800a7f6:	6047      	str	r7, [r0, #4]
 800a7f8:	e7ef      	b.n	800a7da <ai_padding_opt_init+0x36>
 800a7fa:	463e      	mov	r6, r7
 800a7fc:	2500      	movs	r5, #0
 800a7fe:	f8c0 9014 	str.w	r9, [r0, #20]
 800a802:	e9c0 6703 	strd	r6, r7, [r0, #12]
 800a806:	e9c0 5506 	strd	r5, r5, [r0, #24]
 800a80a:	6205      	str	r5, [r0, #32]
 800a80c:	694e      	ldr	r6, [r1, #20]
 800a80e:	f1c6 0c00 	rsb	ip, r6, #0
 800a812:	685e      	ldr	r6, [r3, #4]
 800a814:	42ae      	cmp	r6, r5
 800a816:	dd1c      	ble.n	800a852 <ai_padding_opt_init+0xae>
 800a818:	46ae      	mov	lr, r5
 800a81a:	e00f      	b.n	800a83c <ai_padding_opt_init+0x98>
 800a81c:	6855      	ldr	r5, [r2, #4]
 800a81e:	6866      	ldr	r6, [r4, #4]
 800a820:	eba5 050c 	sub.w	r5, r5, ip
 800a824:	42b5      	cmp	r5, r6
 800a826:	da10      	bge.n	800a84a <ai_padding_opt_init+0xa6>
 800a828:	6a05      	ldr	r5, [r0, #32]
 800a82a:	3501      	adds	r5, #1
 800a82c:	6205      	str	r5, [r0, #32]
 800a82e:	68cd      	ldr	r5, [r1, #12]
 800a830:	f10e 0e01 	add.w	lr, lr, #1
 800a834:	44ac      	add	ip, r5
 800a836:	685d      	ldr	r5, [r3, #4]
 800a838:	4575      	cmp	r5, lr
 800a83a:	dd0a      	ble.n	800a852 <ai_padding_opt_init+0xae>
 800a83c:	f1bc 0f00 	cmp.w	ip, #0
 800a840:	daec      	bge.n	800a81c <ai_padding_opt_init+0x78>
 800a842:	6985      	ldr	r5, [r0, #24]
 800a844:	3501      	adds	r5, #1
 800a846:	6185      	str	r5, [r0, #24]
 800a848:	e7f1      	b.n	800a82e <ai_padding_opt_init+0x8a>
 800a84a:	69c5      	ldr	r5, [r0, #28]
 800a84c:	3501      	adds	r5, #1
 800a84e:	61c5      	str	r5, [r0, #28]
 800a850:	e7ed      	b.n	800a82e <ai_padding_opt_init+0x8a>
 800a852:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a856:	bf00      	nop

0800a858 <ai_padding_opt_phase1>:
 800a858:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 800a85c:	b923      	cbnz	r3, 800a868 <ai_padding_opt_phase1+0x10>
 800a85e:	b17a      	cbz	r2, 800a880 <ai_padding_opt_phase1+0x28>
 800a860:	3a01      	subs	r2, #1
 800a862:	8483      	strh	r3, [r0, #36]	@ 0x24
 800a864:	61c2      	str	r2, [r0, #28]
 800a866:	e004      	b.n	800a872 <ai_padding_opt_phase1+0x1a>
 800a868:	b152      	cbz	r2, 800a880 <ai_padding_opt_phase1+0x28>
 800a86a:	2201      	movs	r2, #1
 800a86c:	3b01      	subs	r3, #1
 800a86e:	8482      	strh	r2, [r0, #36]	@ 0x24
 800a870:	6183      	str	r3, [r0, #24]
 800a872:	68c3      	ldr	r3, [r0, #12]
 800a874:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
 800a878:	6003      	str	r3, [r0, #0]
 800a87a:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800a87e:	4770      	bx	lr
 800a880:	6a03      	ldr	r3, [r0, #32]
 800a882:	2201      	movs	r2, #1
 800a884:	3b01      	subs	r3, #1
 800a886:	8482      	strh	r2, [r0, #36]	@ 0x24
 800a888:	6203      	str	r3, [r0, #32]
 800a88a:	e7f2      	b.n	800a872 <ai_padding_opt_phase1+0x1a>

0800a88c <st_sssa8_ch_nn_mat_mult_kernel_opt>:
 800a88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a890:	b09b      	sub	sp, #108	@ 0x6c
 800a892:	4683      	mov	fp, r0
 800a894:	f89d 00ac 	ldrb.w	r0, [sp, #172]	@ 0xac
 800a898:	9317      	str	r3, [sp, #92]	@ 0x5c
 800a89a:	2800      	cmp	r0, #0
 800a89c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a89e:	9825      	ldr	r0, [sp, #148]	@ 0x94
 800a8a0:	bf18      	it	ne
 800a8a2:	2301      	movne	r3, #1
 800a8a4:	f8bd 4098 	ldrh.w	r4, [sp, #152]	@ 0x98
 800a8a8:	910c      	str	r1, [sp, #48]	@ 0x30
 800a8aa:	fb00 3303 	mla	r3, r0, r3, r3
 800a8ae:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 800a8b0:	9414      	str	r4, [sp, #80]	@ 0x50
 800a8b2:	0864      	lsrs	r4, r4, #1
 800a8b4:	4403      	add	r3, r0
 800a8b6:	f8bd 009c 	ldrh.w	r0, [sp, #156]	@ 0x9c
 800a8ba:	9205      	str	r2, [sp, #20]
 800a8bc:	9302      	str	r3, [sp, #8]
 800a8be:	9006      	str	r0, [sp, #24]
 800a8c0:	9415      	str	r4, [sp, #84]	@ 0x54
 800a8c2:	f000 81c6 	beq.w	800ac52 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3c6>
 800a8c6:	460d      	mov	r5, r1
 800a8c8:	4601      	mov	r1, r0
 800a8ca:	f1a0 0310 	sub.w	r3, r0, #16
 800a8ce:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800a8d2:	1ece      	subs	r6, r1, #3
 800a8d4:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 800a8d8:	091b      	lsrs	r3, r3, #4
 800a8da:	920e      	str	r2, [sp, #56]	@ 0x38
 800a8dc:	960d      	str	r6, [sp, #52]	@ 0x34
 800a8de:	46d9      	mov	r9, fp
 800a8e0:	9e28      	ldr	r6, [sp, #160]	@ 0xa0
 800a8e2:	3301      	adds	r3, #1
 800a8e4:	900f      	str	r0, [sp, #60]	@ 0x3c
 800a8e6:	3604      	adds	r6, #4
 800a8e8:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 800a8ec:	9601      	str	r6, [sp, #4]
 800a8ee:	9e29      	ldr	r6, [sp, #164]	@ 0xa4
 800a8f0:	9207      	str	r2, [sp, #28]
 800a8f2:	011a      	lsls	r2, r3, #4
 800a8f4:	3608      	adds	r6, #8
 800a8f6:	9212      	str	r2, [sp, #72]	@ 0x48
 800a8f8:	019a      	lsls	r2, r3, #6
 800a8fa:	9604      	str	r6, [sp, #16]
 800a8fc:	eb05 1343 	add.w	r3, r5, r3, lsl #5
 800a900:	9e2a      	ldr	r6, [sp, #168]	@ 0xa8
 800a902:	9311      	str	r3, [sp, #68]	@ 0x44
 800a904:	1f0b      	subs	r3, r1, #4
 800a906:	3608      	adds	r6, #8
 800a908:	9210      	str	r2, [sp, #64]	@ 0x40
 800a90a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a90c:	9603      	str	r6, [sp, #12]
 800a90e:	00e6      	lsls	r6, r4, #3
 800a910:	9616      	str	r6, [sp, #88]	@ 0x58
 800a912:	9905      	ldr	r1, [sp, #20]
 800a914:	9c06      	ldr	r4, [sp, #24]
 800a916:	680b      	ldr	r3, [r1, #0]
 800a918:	3108      	adds	r1, #8
 800a91a:	2c0f      	cmp	r4, #15
 800a91c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800a91e:	9319      	str	r3, [sp, #100]	@ 0x64
 800a920:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a922:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a924:	f851 2c04 	ldr.w	r2, [r1, #-4]
 800a928:	9105      	str	r1, [sp, #20]
 800a92a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a92c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a92e:	9919      	ldr	r1, [sp, #100]	@ 0x64
 800a930:	f340 82c1 	ble.w	800aeb6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x62a>
 800a934:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 800a936:	464c      	mov	r4, r9
 800a938:	9e07      	ldr	r6, [sp, #28]
 800a93a:	f8d7 e000 	ldr.w	lr, [r7]
 800a93e:	f8d5 a000 	ldr.w	sl, [r5]
 800a942:	f8d4 c000 	ldr.w	ip, [r4]
 800a946:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800a94a:	fb2c 330e 	smlad	r3, ip, lr, r3
 800a94e:	fb2c 000a 	smlad	r0, ip, sl, r0
 800a952:	fb28 2e0e 	smlad	lr, r8, lr, r2
 800a956:	fb28 110a 	smlad	r1, r8, sl, r1
 800a95a:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800a95e:	f8d5 8004 	ldr.w	r8, [r5, #4]
 800a962:	68a2      	ldr	r2, [r4, #8]
 800a964:	f8d4 b00c 	ldr.w	fp, [r4, #12]
 800a968:	fb22 330c 	smlad	r3, r2, ip, r3
 800a96c:	fb22 0008 	smlad	r0, r2, r8, r0
 800a970:	fb2b ee0c 	smlad	lr, fp, ip, lr
 800a974:	fb2b 1808 	smlad	r8, fp, r8, r1
 800a978:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800a97c:	f8d5 b008 	ldr.w	fp, [r5, #8]
 800a980:	6922      	ldr	r2, [r4, #16]
 800a982:	f8d4 a014 	ldr.w	sl, [r4, #20]
 800a986:	fb22 330c 	smlad	r3, r2, ip, r3
 800a98a:	fb22 000b 	smlad	r0, r2, fp, r0
 800a98e:	fb2a ee0c 	smlad	lr, sl, ip, lr
 800a992:	fb2a 8b0b 	smlad	fp, sl, fp, r8
 800a996:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800a99a:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800a99e:	f8d4 8018 	ldr.w	r8, [r4, #24]
 800a9a2:	69e1      	ldr	r1, [r4, #28]
 800a9a4:	fb28 330c 	smlad	r3, r8, ip, r3
 800a9a8:	fb28 000a 	smlad	r0, r8, sl, r0
 800a9ac:	fb21 ec0c 	smlad	ip, r1, ip, lr
 800a9b0:	fb21 ba0a 	smlad	sl, r1, sl, fp
 800a9b4:	f8d7 e010 	ldr.w	lr, [r7, #16]
 800a9b8:	6929      	ldr	r1, [r5, #16]
 800a9ba:	f8d4 8020 	ldr.w	r8, [r4, #32]
 800a9be:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800a9c0:	fb28 330e 	smlad	r3, r8, lr, r3
 800a9c4:	fb28 0001 	smlad	r0, r8, r1, r0
 800a9c8:	fb22 cc0e 	smlad	ip, r2, lr, ip
 800a9cc:	fb22 a101 	smlad	r1, r2, r1, sl
 800a9d0:	f8d7 e014 	ldr.w	lr, [r7, #20]
 800a9d4:	f8d5 a014 	ldr.w	sl, [r5, #20]
 800a9d8:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
 800a9dc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a9de:	fb28 330e 	smlad	r3, r8, lr, r3
 800a9e2:	fb28 000a 	smlad	r0, r8, sl, r0
 800a9e6:	fb22 cc0e 	smlad	ip, r2, lr, ip
 800a9ea:	fb22 120a 	smlad	r2, r2, sl, r1
 800a9ee:	f8d7 e018 	ldr.w	lr, [r7, #24]
 800a9f2:	f8d5 b018 	ldr.w	fp, [r5, #24]
 800a9f6:	f8d4 8030 	ldr.w	r8, [r4, #48]	@ 0x30
 800a9fa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a9fc:	fb28 330e 	smlad	r3, r8, lr, r3
 800aa00:	fb28 080b 	smlad	r8, r8, fp, r0
 800aa04:	fb21 ce0e 	smlad	lr, r1, lr, ip
 800aa08:	fb21 210b 	smlad	r1, r1, fp, r2
 800aa0c:	69fa      	ldr	r2, [r7, #28]
 800aa0e:	3520      	adds	r5, #32
 800aa10:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800aa12:	3720      	adds	r7, #32
 800aa14:	f8d4 c03c 	ldr.w	ip, [r4, #60]	@ 0x3c
 800aa18:	3440      	adds	r4, #64	@ 0x40
 800aa1a:	f855 bc04 	ldr.w	fp, [r5, #-4]
 800aa1e:	fb20 3302 	smlad	r3, r0, r2, r3
 800aa22:	fb20 800b 	smlad	r0, r0, fp, r8
 800aa26:	fb2c e202 	smlad	r2, ip, r2, lr
 800aa2a:	fb2c 110b 	smlad	r1, ip, fp, r1
 800aa2e:	42b5      	cmp	r5, r6
 800aa30:	d183      	bne.n	800a93a <st_sssa8_ch_nn_mat_mult_kernel_opt+0xae>
 800aa32:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800aa34:	f8dd b048 	ldr.w	fp, [sp, #72]	@ 0x48
 800aa38:	44a1      	add	r9, r4
 800aa3a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800aa3c:	9d07      	ldr	r5, [sp, #28]
 800aa3e:	9400      	str	r4, [sp, #0]
 800aa40:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 800aa42:	45a3      	cmp	fp, r4
 800aa44:	f280 823f 	bge.w	800aec6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x63a>
 800aa48:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800aa4a:	f8dd c000 	ldr.w	ip, [sp]
 800aa4e:	eba4 040b 	sub.w	r4, r4, fp
 800aa52:	08a4      	lsrs	r4, r4, #2
 800aa54:	4626      	mov	r6, r4
 800aa56:	940a      	str	r4, [sp, #40]	@ 0x28
 800aa58:	464c      	mov	r4, r9
 800aa5a:	3601      	adds	r6, #1
 800aa5c:	00f7      	lsls	r7, r6, #3
 800aa5e:	9609      	str	r6, [sp, #36]	@ 0x24
 800aa60:	eb05 08c6 	add.w	r8, r5, r6, lsl #3
 800aa64:	9708      	str	r7, [sp, #32]
 800aa66:	f8dc e000 	ldr.w	lr, [ip]
 800aa6a:	682f      	ldr	r7, [r5, #0]
 800aa6c:	f8d4 a000 	ldr.w	sl, [r4]
 800aa70:	6866      	ldr	r6, [r4, #4]
 800aa72:	fb2a 330e 	smlad	r3, sl, lr, r3
 800aa76:	fb2a 0007 	smlad	r0, sl, r7, r0
 800aa7a:	fb26 220e 	smlad	r2, r6, lr, r2
 800aa7e:	fb26 1107 	smlad	r1, r6, r7, r1
 800aa82:	f8dc 7004 	ldr.w	r7, [ip, #4]
 800aa86:	3508      	adds	r5, #8
 800aa88:	68a6      	ldr	r6, [r4, #8]
 800aa8a:	f10c 0c08 	add.w	ip, ip, #8
 800aa8e:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 800aa92:	3410      	adds	r4, #16
 800aa94:	f855 ac04 	ldr.w	sl, [r5, #-4]
 800aa98:	fb26 3307 	smlad	r3, r6, r7, r3
 800aa9c:	fb26 000a 	smlad	r0, r6, sl, r0
 800aaa0:	fb2e 2207 	smlad	r2, lr, r7, r2
 800aaa4:	fb2e 110a 	smlad	r1, lr, sl, r1
 800aaa8:	4545      	cmp	r5, r8
 800aaaa:	d1dc      	bne.n	800aa66 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1da>
 800aaac:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800aaae:	f10b 0b04 	add.w	fp, fp, #4
 800aab2:	9d08      	ldr	r5, [sp, #32]
 800aab4:	eb09 1904 	add.w	r9, r9, r4, lsl #4
 800aab8:	9c00      	ldr	r4, [sp, #0]
 800aaba:	442c      	add	r4, r5
 800aabc:	9400      	str	r4, [sp, #0]
 800aabe:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800aac0:	eb0b 0b84 	add.w	fp, fp, r4, lsl #2
 800aac4:	9f06      	ldr	r7, [sp, #24]
 800aac6:	455f      	cmp	r7, fp
 800aac8:	dd54      	ble.n	800ab74 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2e8>
 800aaca:	9c00      	ldr	r4, [sp, #0]
 800aacc:	f9b9 6000 	ldrsh.w	r6, [r9]
 800aad0:	f9b4 4000 	ldrsh.w	r4, [r4]
 800aad4:	f9b9 5002 	ldrsh.w	r5, [r9, #2]
 800aad8:	fb04 3306 	mla	r3, r4, r6, r3
 800aadc:	fb05 2204 	mla	r2, r5, r4, r2
 800aae0:	f9b8 4000 	ldrsh.w	r4, [r8]
 800aae4:	fb04 0006 	mla	r0, r4, r6, r0
 800aae8:	fb05 1104 	mla	r1, r5, r4, r1
 800aaec:	f10b 0401 	add.w	r4, fp, #1
 800aaf0:	42bc      	cmp	r4, r7
 800aaf2:	da3a      	bge.n	800ab6a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2de>
 800aaf4:	9c00      	ldr	r4, [sp, #0]
 800aaf6:	f9b9 6004 	ldrsh.w	r6, [r9, #4]
 800aafa:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
 800aafe:	f9b9 4006 	ldrsh.w	r4, [r9, #6]
 800ab02:	fb05 3306 	mla	r3, r5, r6, r3
 800ab06:	fb05 2204 	mla	r2, r5, r4, r2
 800ab0a:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 800ab0e:	fb05 1104 	mla	r1, r5, r4, r1
 800ab12:	f10b 0402 	add.w	r4, fp, #2
 800ab16:	fb06 0005 	mla	r0, r6, r5, r0
 800ab1a:	42a7      	cmp	r7, r4
 800ab1c:	dd25      	ble.n	800ab6a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2de>
 800ab1e:	9c00      	ldr	r4, [sp, #0]
 800ab20:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 800ab24:	f9b4 5004 	ldrsh.w	r5, [r4, #4]
 800ab28:	f9b9 400a 	ldrsh.w	r4, [r9, #10]
 800ab2c:	fb06 3305 	mla	r3, r6, r5, r3
 800ab30:	fb05 2204 	mla	r2, r5, r4, r2
 800ab34:	f9b8 5004 	ldrsh.w	r5, [r8, #4]
 800ab38:	fb05 1104 	mla	r1, r5, r4, r1
 800ab3c:	f10b 0403 	add.w	r4, fp, #3
 800ab40:	fb06 0005 	mla	r0, r6, r5, r0
 800ab44:	42a7      	cmp	r7, r4
 800ab46:	dd10      	ble.n	800ab6a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2de>
 800ab48:	9c00      	ldr	r4, [sp, #0]
 800ab4a:	f9b8 6006 	ldrsh.w	r6, [r8, #6]
 800ab4e:	f9b4 5006 	ldrsh.w	r5, [r4, #6]
 800ab52:	f9b9 400c 	ldrsh.w	r4, [r9, #12]
 800ab56:	fb04 3305 	mla	r3, r4, r5, r3
 800ab5a:	fb04 0006 	mla	r0, r4, r6, r0
 800ab5e:	f9b9 400e 	ldrsh.w	r4, [r9, #14]
 800ab62:	fb05 2204 	mla	r2, r5, r4, r2
 800ab66:	fb06 1104 	mla	r1, r6, r4, r1
 800ab6a:	9c06      	ldr	r4, [sp, #24]
 800ab6c:	eba4 0b0b 	sub.w	fp, r4, fp
 800ab70:	eb09 098b 	add.w	r9, r9, fp, lsl #2
 800ab74:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800ab76:	2c00      	cmp	r4, #0
 800ab78:	f000 80f2 	beq.w	800ad60 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4d4>
 800ab7c:	9c01      	ldr	r4, [sp, #4]
 800ab7e:	f934 4c04 	ldrsh.w	r4, [r4, #-4]
 800ab82:	2c15      	cmp	r4, #21
 800ab84:	f340 8147 	ble.w	800ae16 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x58a>
 800ab88:	1ea5      	subs	r5, r4, #2
 800ab8a:	2601      	movs	r6, #1
 800ab8c:	3c01      	subs	r4, #1
 800ab8e:	fa06 f505 	lsl.w	r5, r6, r5
 800ab92:	9e04      	ldr	r6, [sp, #16]
 800ab94:	f856 6c08 	ldr.w	r6, [r6, #-8]
 800ab98:	fb53 5306 	smmla	r3, r3, r6, r5
 800ab9c:	fb50 5006 	smmla	r0, r0, r6, r5
 800aba0:	9d03      	ldr	r5, [sp, #12]
 800aba2:	4123      	asrs	r3, r4
 800aba4:	9e04      	ldr	r6, [sp, #16]
 800aba6:	f855 7c08 	ldr.w	r7, [r5, #-8]
 800abaa:	1f35      	subs	r5, r6, #4
 800abac:	9e03      	ldr	r6, [sp, #12]
 800abae:	443b      	add	r3, r7
 800abb0:	3e04      	subs	r6, #4
 800abb2:	f303 0307 	ssat	r3, #8, r3
 800abb6:	4120      	asrs	r0, r4
 800abb8:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 800abba:	4438      	add	r0, r7
 800abbc:	7023      	strb	r3, [r4, #0]
 800abbe:	f300 0007 	ssat	r0, #8, r0
 800abc2:	9b02      	ldr	r3, [sp, #8]
 800abc4:	7018      	strb	r0, [r3, #0]
 800abc6:	4620      	mov	r0, r4
 800abc8:	9b01      	ldr	r3, [sp, #4]
 800abca:	9c24      	ldr	r4, [sp, #144]	@ 0x90
 800abcc:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
 800abd0:	1904      	adds	r4, r0, r4
 800abd2:	9f24      	ldr	r7, [sp, #144]	@ 0x90
 800abd4:	9802      	ldr	r0, [sp, #8]
 800abd6:	2b15      	cmp	r3, #21
 800abd8:	4438      	add	r0, r7
 800abda:	f340 8109 	ble.w	800adf0 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x564>
 800abde:	682f      	ldr	r7, [r5, #0]
 800abe0:	f04f 0c01 	mov.w	ip, #1
 800abe4:	1e9d      	subs	r5, r3, #2
 800abe6:	3b01      	subs	r3, #1
 800abe8:	6836      	ldr	r6, [r6, #0]
 800abea:	fa0c f505 	lsl.w	r5, ip, r5
 800abee:	fb52 5207 	smmla	r2, r2, r7, r5
 800abf2:	411a      	asrs	r2, r3
 800abf4:	fb51 5107 	smmla	r1, r1, r7, r5
 800abf8:	4432      	add	r2, r6
 800abfa:	f302 0207 	ssat	r2, #8, r2
 800abfe:	9d2c      	ldr	r5, [sp, #176]	@ 0xb0
 800ac00:	4119      	asrs	r1, r3
 800ac02:	9f24      	ldr	r7, [sp, #144]	@ 0x90
 800ac04:	4431      	add	r1, r6
 800ac06:	55ea      	strb	r2, [r5, r7]
 800ac08:	f301 0107 	ssat	r1, #8, r1
 800ac0c:	9b02      	ldr	r3, [sp, #8]
 800ac0e:	55d9      	strb	r1, [r3, r7]
 800ac10:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ac12:	18e3      	adds	r3, r4, r3
 800ac14:	932c      	str	r3, [sp, #176]	@ 0xb0
 800ac16:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ac18:	18c3      	adds	r3, r0, r3
 800ac1a:	9302      	str	r3, [sp, #8]
 800ac1c:	9b01      	ldr	r3, [sp, #4]
 800ac1e:	9a05      	ldr	r2, [sp, #20]
 800ac20:	3304      	adds	r3, #4
 800ac22:	9301      	str	r3, [sp, #4]
 800ac24:	9b04      	ldr	r3, [sp, #16]
 800ac26:	3308      	adds	r3, #8
 800ac28:	9304      	str	r3, [sp, #16]
 800ac2a:	9b03      	ldr	r3, [sp, #12]
 800ac2c:	3308      	adds	r3, #8
 800ac2e:	9303      	str	r3, [sp, #12]
 800ac30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac32:	4293      	cmp	r3, r2
 800ac34:	f47f ae6d 	bne.w	800a912 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x86>
 800ac38:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800ac3a:	46cb      	mov	fp, r9
 800ac3c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800ac3e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800ac42:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ac44:	9328      	str	r3, [sp, #160]	@ 0xa0
 800ac46:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800ac48:	4413      	add	r3, r2
 800ac4a:	9329      	str	r3, [sp, #164]	@ 0xa4
 800ac4c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800ac4e:	4413      	add	r3, r2
 800ac50:	932a      	str	r3, [sp, #168]	@ 0xa8
 800ac52:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ac54:	07db      	lsls	r3, r3, #31
 800ac56:	f140 81b1 	bpl.w	800afbc <st_sssa8_ch_nn_mat_mult_kernel_opt+0x730>
 800ac5a:	9a06      	ldr	r2, [sp, #24]
 800ac5c:	9b05      	ldr	r3, [sp, #20]
 800ac5e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ac60:	0896      	lsrs	r6, r2, #2
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	eb01 0e42 	add.w	lr, r1, r2, lsl #1
 800ac68:	f000 81f6 	beq.w	800b058 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x7cc>
 800ac6c:	00f7      	lsls	r7, r6, #3
 800ac6e:	4674      	mov	r4, lr
 800ac70:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800ac74:	4658      	mov	r0, fp
 800ac76:	461a      	mov	r2, r3
 800ac78:	f8d0 c000 	ldr.w	ip, [r0]
 800ac7c:	3008      	adds	r0, #8
 800ac7e:	f850 5c04 	ldr.w	r5, [r0, #-4]
 800ac82:	f8d1 8000 	ldr.w	r8, [r1]
 800ac86:	fb2c 3308 	smlad	r3, ip, r8, r3
 800ac8a:	f8d4 8000 	ldr.w	r8, [r4]
 800ac8e:	fb2c 2208 	smlad	r2, ip, r8, r2
 800ac92:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800ac96:	3408      	adds	r4, #8
 800ac98:	f854 cc04 	ldr.w	ip, [r4, #-4]
 800ac9c:	3108      	adds	r1, #8
 800ac9e:	fb25 3308 	smlad	r3, r5, r8, r3
 800aca2:	fb25 220c 	smlad	r2, r5, ip, r2
 800aca6:	42b1      	cmp	r1, r6
 800aca8:	d1e6      	bne.n	800ac78 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3ec>
 800acaa:	44bb      	add	fp, r7
 800acac:	44be      	add	lr, r7
 800acae:	9906      	ldr	r1, [sp, #24]
 800acb0:	f011 0103 	ands.w	r1, r1, #3
 800acb4:	d01f      	beq.n	800acf6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x46a>
 800acb6:	f9bb 0000 	ldrsh.w	r0, [fp]
 800acba:	3901      	subs	r1, #1
 800acbc:	8834      	ldrh	r4, [r6, #0]
 800acbe:	b289      	uxth	r1, r1
 800acc0:	fb14 3300 	smlabb	r3, r4, r0, r3
 800acc4:	f8be 4000 	ldrh.w	r4, [lr]
 800acc8:	fb14 2200 	smlabb	r2, r4, r0, r2
 800accc:	b199      	cbz	r1, 800acf6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x46a>
 800acce:	f9bb 0002 	ldrsh.w	r0, [fp, #2]
 800acd2:	2901      	cmp	r1, #1
 800acd4:	8874      	ldrh	r4, [r6, #2]
 800acd6:	fb14 3300 	smlabb	r3, r4, r0, r3
 800acda:	f8be 4002 	ldrh.w	r4, [lr, #2]
 800acde:	fb14 2200 	smlabb	r2, r4, r0, r2
 800ace2:	d008      	beq.n	800acf6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x46a>
 800ace4:	f9bb 1004 	ldrsh.w	r1, [fp, #4]
 800ace8:	88b0      	ldrh	r0, [r6, #4]
 800acea:	fb11 3300 	smlabb	r3, r1, r0, r3
 800acee:	f8be 0004 	ldrh.w	r0, [lr, #4]
 800acf2:	fb11 2200 	smlabb	r2, r1, r0, r2
 800acf6:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 800acf8:	f9b1 0000 	ldrsh.w	r0, [r1]
 800acfc:	2815      	cmp	r0, #21
 800acfe:	f340 816c 	ble.w	800afda <st_sssa8_ch_nn_mat_mult_kernel_opt+0x74e>
 800ad02:	1e85      	subs	r5, r0, #2
 800ad04:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 800ad06:	9c2a      	ldr	r4, [sp, #168]	@ 0xa8
 800ad08:	3801      	subs	r0, #1
 800ad0a:	2601      	movs	r6, #1
 800ad0c:	6809      	ldr	r1, [r1, #0]
 800ad0e:	6824      	ldr	r4, [r4, #0]
 800ad10:	40ae      	lsls	r6, r5
 800ad12:	fb53 6501 	smmla	r5, r3, r1, r6
 800ad16:	fb52 6301 	smmla	r3, r2, r1, r6
 800ad1a:	fa45 f200 	asr.w	r2, r5, r0
 800ad1e:	4422      	add	r2, r4
 800ad20:	f302 0207 	ssat	r2, #8, r2
 800ad24:	4103      	asrs	r3, r0
 800ad26:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 800ad28:	4423      	add	r3, r4
 800ad2a:	f801 2b01 	strb.w	r2, [r1], #1
 800ad2e:	f303 0307 	ssat	r3, #8, r3
 800ad32:	9a02      	ldr	r2, [sp, #8]
 800ad34:	912c      	str	r1, [sp, #176]	@ 0xb0
 800ad36:	7013      	strb	r3, [r2, #0]
 800ad38:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	f000 8142 	beq.w	800afc4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x738>
 800ad40:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ad42:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 800ad44:	3b01      	subs	r3, #1
 800ad46:	441a      	add	r2, r3
 800ad48:	922c      	str	r2, [sp, #176]	@ 0xb0
 800ad4a:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800ad4c:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800ad4e:	1c98      	adds	r0, r3, #2
 800ad50:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ad52:	fb02 0013 	mls	r0, r2, r3, r0
 800ad56:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 800ad58:	4418      	add	r0, r3
 800ad5a:	b01b      	add	sp, #108	@ 0x6c
 800ad5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad60:	9c01      	ldr	r4, [sp, #4]
 800ad62:	f934 4c04 	ldrsh.w	r4, [r4, #-4]
 800ad66:	2c15      	cmp	r4, #21
 800ad68:	f340 8089 	ble.w	800ae7e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5f2>
 800ad6c:	9f04      	ldr	r7, [sp, #16]
 800ad6e:	1ea5      	subs	r5, r4, #2
 800ad70:	2601      	movs	r6, #1
 800ad72:	3c01      	subs	r4, #1
 800ad74:	fa06 f505 	lsl.w	r5, r6, r5
 800ad78:	f857 6c08 	ldr.w	r6, [r7, #-8]
 800ad7c:	fb53 5306 	smmla	r3, r3, r6, r5
 800ad80:	fb50 5006 	smmla	r0, r0, r6, r5
 800ad84:	9d03      	ldr	r5, [sp, #12]
 800ad86:	4123      	asrs	r3, r4
 800ad88:	f855 6c08 	ldr.w	r6, [r5, #-8]
 800ad8c:	1f3d      	subs	r5, r7, #4
 800ad8e:	9f03      	ldr	r7, [sp, #12]
 800ad90:	4433      	add	r3, r6
 800ad92:	3f04      	subs	r7, #4
 800ad94:	f303 0307 	ssat	r3, #8, r3
 800ad98:	4120      	asrs	r0, r4
 800ad9a:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 800ad9c:	4430      	add	r0, r6
 800ad9e:	7023      	strb	r3, [r4, #0]
 800ada0:	f300 0007 	ssat	r0, #8, r0
 800ada4:	9b02      	ldr	r3, [sp, #8]
 800ada6:	7018      	strb	r0, [r3, #0]
 800ada8:	9b01      	ldr	r3, [sp, #4]
 800adaa:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
 800adae:	2b15      	cmp	r3, #21
 800adb0:	dd4f      	ble.n	800ae52 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5c6>
 800adb2:	1e98      	subs	r0, r3, #2
 800adb4:	2601      	movs	r6, #1
 800adb6:	3b01      	subs	r3, #1
 800adb8:	682c      	ldr	r4, [r5, #0]
 800adba:	fa06 f000 	lsl.w	r0, r6, r0
 800adbe:	683d      	ldr	r5, [r7, #0]
 800adc0:	fb52 0204 	smmla	r2, r2, r4, r0
 800adc4:	411a      	asrs	r2, r3
 800adc6:	fb51 0104 	smmla	r1, r1, r4, r0
 800adca:	442a      	add	r2, r5
 800adcc:	f302 0207 	ssat	r2, #8, r2
 800add0:	fa41 f303 	asr.w	r3, r1, r3
 800add4:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 800add6:	442b      	add	r3, r5
 800add8:	704a      	strb	r2, [r1, #1]
 800adda:	f303 0307 	ssat	r3, #8, r3
 800adde:	9a02      	ldr	r2, [sp, #8]
 800ade0:	7053      	strb	r3, [r2, #1]
 800ade2:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 800ade4:	3302      	adds	r3, #2
 800ade6:	932c      	str	r3, [sp, #176]	@ 0xb0
 800ade8:	9b02      	ldr	r3, [sp, #8]
 800adea:	3302      	adds	r3, #2
 800adec:	9302      	str	r3, [sp, #8]
 800adee:	e715      	b.n	800ac1c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x390>
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	dd6a      	ble.n	800aeca <st_sssa8_ch_nn_mat_mult_kernel_opt+0x63e>
 800adf4:	682d      	ldr	r5, [r5, #0]
 800adf6:	0052      	lsls	r2, r2, #1
 800adf8:	6837      	ldr	r7, [r6, #0]
 800adfa:	0049      	lsls	r1, r1, #1
 800adfc:	fb52 7205 	smmla	r2, r2, r5, r7
 800ae00:	fb51 7105 	smmla	r1, r1, r5, r7
 800ae04:	411a      	asrs	r2, r3
 800ae06:	f302 0207 	ssat	r2, #8, r2
 800ae0a:	4119      	asrs	r1, r3
 800ae0c:	7022      	strb	r2, [r4, #0]
 800ae0e:	f301 0107 	ssat	r1, #8, r1
 800ae12:	7001      	strb	r1, [r0, #0]
 800ae14:	e6fc      	b.n	800ac10 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x384>
 800ae16:	2c00      	cmp	r4, #0
 800ae18:	f340 8092 	ble.w	800af40 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x6b4>
 800ae1c:	9f04      	ldr	r7, [sp, #16]
 800ae1e:	005b      	lsls	r3, r3, #1
 800ae20:	9e03      	ldr	r6, [sp, #12]
 800ae22:	0040      	lsls	r0, r0, #1
 800ae24:	f857 5c08 	ldr.w	r5, [r7, #-8]
 800ae28:	f856 6c08 	ldr.w	r6, [r6, #-8]
 800ae2c:	fb53 6305 	smmla	r3, r3, r5, r6
 800ae30:	fb50 6005 	smmla	r0, r0, r5, r6
 800ae34:	9e03      	ldr	r6, [sp, #12]
 800ae36:	4123      	asrs	r3, r4
 800ae38:	1f3d      	subs	r5, r7, #4
 800ae3a:	3e04      	subs	r6, #4
 800ae3c:	f303 0307 	ssat	r3, #8, r3
 800ae40:	4120      	asrs	r0, r4
 800ae42:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 800ae44:	7023      	strb	r3, [r4, #0]
 800ae46:	f300 0007 	ssat	r0, #8, r0
 800ae4a:	9b02      	ldr	r3, [sp, #8]
 800ae4c:	7018      	strb	r0, [r3, #0]
 800ae4e:	4620      	mov	r0, r4
 800ae50:	e6ba      	b.n	800abc8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x33c>
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	f340 8097 	ble.w	800af86 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x6fa>
 800ae58:	6828      	ldr	r0, [r5, #0]
 800ae5a:	0052      	lsls	r2, r2, #1
 800ae5c:	683c      	ldr	r4, [r7, #0]
 800ae5e:	0049      	lsls	r1, r1, #1
 800ae60:	fb52 4200 	smmla	r2, r2, r0, r4
 800ae64:	fb51 4100 	smmla	r1, r1, r0, r4
 800ae68:	411a      	asrs	r2, r3
 800ae6a:	f302 0207 	ssat	r2, #8, r2
 800ae6e:	4119      	asrs	r1, r3
 800ae70:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 800ae72:	705a      	strb	r2, [r3, #1]
 800ae74:	f301 0107 	ssat	r1, #8, r1
 800ae78:	9b02      	ldr	r3, [sp, #8]
 800ae7a:	7059      	strb	r1, [r3, #1]
 800ae7c:	e7b1      	b.n	800ade2 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x556>
 800ae7e:	2c00      	cmp	r4, #0
 800ae80:	dd3c      	ble.n	800aefc <st_sssa8_ch_nn_mat_mult_kernel_opt+0x670>
 800ae82:	9f04      	ldr	r7, [sp, #16]
 800ae84:	005b      	lsls	r3, r3, #1
 800ae86:	9e03      	ldr	r6, [sp, #12]
 800ae88:	0040      	lsls	r0, r0, #1
 800ae8a:	f857 5c08 	ldr.w	r5, [r7, #-8]
 800ae8e:	f856 6c08 	ldr.w	r6, [r6, #-8]
 800ae92:	fb53 6305 	smmla	r3, r3, r5, r6
 800ae96:	fb50 6005 	smmla	r0, r0, r5, r6
 800ae9a:	9e03      	ldr	r6, [sp, #12]
 800ae9c:	1f3d      	subs	r5, r7, #4
 800ae9e:	4123      	asrs	r3, r4
 800aea0:	1f37      	subs	r7, r6, #4
 800aea2:	f303 0307 	ssat	r3, #8, r3
 800aea6:	4120      	asrs	r0, r4
 800aea8:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 800aeaa:	7023      	strb	r3, [r4, #0]
 800aeac:	f300 0007 	ssat	r0, #8, r0
 800aeb0:	9b02      	ldr	r3, [sp, #8]
 800aeb2:	7018      	strb	r0, [r3, #0]
 800aeb4:	e778      	b.n	800ada8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x51c>
 800aeb6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800aeb8:	f04f 0b00 	mov.w	fp, #0
 800aebc:	9400      	str	r4, [sp, #0]
 800aebe:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 800aec0:	45a3      	cmp	fp, r4
 800aec2:	f6ff adc1 	blt.w	800aa48 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1bc>
 800aec6:	46a8      	mov	r8, r5
 800aec8:	e5fc      	b.n	800aac4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x238>
 800aeca:	f1c3 0301 	rsb	r3, r3, #1
 800aece:	409a      	lsls	r2, r3
 800aed0:	f302 021f 	ssat	r2, #32, r2
 800aed4:	682d      	ldr	r5, [r5, #0]
 800aed6:	fb52 f215 	smmulr	r2, r2, r5
 800aeda:	fa01 f303 	lsl.w	r3, r1, r3
 800aede:	f303 031f 	ssat	r3, #32, r3
 800aee2:	fb53 f515 	smmulr	r5, r3, r5
 800aee6:	6833      	ldr	r3, [r6, #0]
 800aee8:	4413      	add	r3, r2
 800aeea:	f303 0307 	ssat	r3, #8, r3
 800aeee:	7023      	strb	r3, [r4, #0]
 800aef0:	6833      	ldr	r3, [r6, #0]
 800aef2:	442b      	add	r3, r5
 800aef4:	f303 0307 	ssat	r3, #8, r3
 800aef8:	7003      	strb	r3, [r0, #0]
 800aefa:	e689      	b.n	800ac10 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x384>
 800aefc:	f1c4 0501 	rsb	r5, r4, #1
 800af00:	fa03 f405 	lsl.w	r4, r3, r5
 800af04:	f304 041f 	ssat	r4, #32, r4
 800af08:	9e04      	ldr	r6, [sp, #16]
 800af0a:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800af0e:	fb54 f413 	smmulr	r4, r4, r3
 800af12:	40a8      	lsls	r0, r5
 800af14:	f300 001f 	ssat	r0, #32, r0
 800af18:	1f35      	subs	r5, r6, #4
 800af1a:	fb50 f013 	smmulr	r0, r0, r3
 800af1e:	9e03      	ldr	r6, [sp, #12]
 800af20:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800af24:	4423      	add	r3, r4
 800af26:	f303 0307 	ssat	r3, #8, r3
 800af2a:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 800af2c:	1f37      	subs	r7, r6, #4
 800af2e:	7023      	strb	r3, [r4, #0]
 800af30:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800af34:	4403      	add	r3, r0
 800af36:	f303 0307 	ssat	r3, #8, r3
 800af3a:	9802      	ldr	r0, [sp, #8]
 800af3c:	7003      	strb	r3, [r0, #0]
 800af3e:	e733      	b.n	800ada8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x51c>
 800af40:	f1c4 0401 	rsb	r4, r4, #1
 800af44:	fa03 f604 	lsl.w	r6, r3, r4
 800af48:	f306 061f 	ssat	r6, #32, r6
 800af4c:	9d04      	ldr	r5, [sp, #16]
 800af4e:	f855 3c08 	ldr.w	r3, [r5, #-8]
 800af52:	fb56 f613 	smmulr	r6, r6, r3
 800af56:	40a0      	lsls	r0, r4
 800af58:	f300 001f 	ssat	r0, #32, r0
 800af5c:	3d04      	subs	r5, #4
 800af5e:	fb50 f013 	smmulr	r0, r0, r3
 800af62:	9c03      	ldr	r4, [sp, #12]
 800af64:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800af68:	4433      	add	r3, r6
 800af6a:	f303 0307 	ssat	r3, #8, r3
 800af6e:	9e2c      	ldr	r6, [sp, #176]	@ 0xb0
 800af70:	7033      	strb	r3, [r6, #0]
 800af72:	1f26      	subs	r6, r4, #4
 800af74:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800af78:	4403      	add	r3, r0
 800af7a:	f303 0307 	ssat	r3, #8, r3
 800af7e:	9802      	ldr	r0, [sp, #8]
 800af80:	7003      	strb	r3, [r0, #0]
 800af82:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 800af84:	e620      	b.n	800abc8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x33c>
 800af86:	f1c3 0301 	rsb	r3, r3, #1
 800af8a:	409a      	lsls	r2, r3
 800af8c:	f302 021f 	ssat	r2, #32, r2
 800af90:	6828      	ldr	r0, [r5, #0]
 800af92:	fb52 f210 	smmulr	r2, r2, r0
 800af96:	fa01 f303 	lsl.w	r3, r1, r3
 800af9a:	f303 031f 	ssat	r3, #32, r3
 800af9e:	fb53 f010 	smmulr	r0, r3, r0
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	4413      	add	r3, r2
 800afa6:	f303 0307 	ssat	r3, #8, r3
 800afaa:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 800afac:	7053      	strb	r3, [r2, #1]
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	4403      	add	r3, r0
 800afb2:	f303 0307 	ssat	r3, #8, r3
 800afb6:	9a02      	ldr	r2, [sp, #8]
 800afb8:	7053      	strb	r3, [r2, #1]
 800afba:	e712      	b.n	800ade2 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x556>
 800afbc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	f47f aec3 	bne.w	800ad4a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4be>
 800afc4:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 800afc6:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800afc8:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800afca:	3302      	adds	r3, #2
 800afcc:	1a50      	subs	r0, r2, r1
 800afce:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800afd0:	fb02 0003 	mla	r0, r2, r3, r0
 800afd4:	b01b      	add	sp, #108	@ 0x6c
 800afd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afda:	2800      	cmp	r0, #0
 800afdc:	dd1b      	ble.n	800b016 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x78a>
 800afde:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 800afe0:	0052      	lsls	r2, r2, #1
 800afe2:	9c2a      	ldr	r4, [sp, #168]	@ 0xa8
 800afe4:	005b      	lsls	r3, r3, #1
 800afe6:	6809      	ldr	r1, [r1, #0]
 800afe8:	6824      	ldr	r4, [r4, #0]
 800afea:	fb53 4301 	smmla	r3, r3, r1, r4
 800afee:	fb52 4101 	smmla	r1, r2, r1, r4
 800aff2:	fa43 f000 	asr.w	r0, r3, r0
 800aff6:	f300 0307 	ssat	r3, #8, r0
 800affa:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 800affc:	f802 3b01 	strb.w	r3, [r2], #1
 800b000:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800b002:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b006:	fa41 f303 	asr.w	r3, r1, r3
 800b00a:	f303 0307 	ssat	r3, #8, r3
 800b00e:	9902      	ldr	r1, [sp, #8]
 800b010:	922c      	str	r2, [sp, #176]	@ 0xb0
 800b012:	700b      	strb	r3, [r1, #0]
 800b014:	e690      	b.n	800ad38 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4ac>
 800b016:	f1c0 0001 	rsb	r0, r0, #1
 800b01a:	fa03 f100 	lsl.w	r1, r3, r0
 800b01e:	f301 011f 	ssat	r1, #32, r1
 800b022:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800b024:	681c      	ldr	r4, [r3, #0]
 800b026:	fb51 f114 	smmulr	r1, r1, r4
 800b02a:	fa02 f300 	lsl.w	r3, r2, r0
 800b02e:	f303 031f 	ssat	r3, #32, r3
 800b032:	fb53 f414 	smmulr	r4, r3, r4
 800b036:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	440b      	add	r3, r1
 800b03c:	f303 0307 	ssat	r3, #8, r3
 800b040:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 800b042:	f802 3b01 	strb.w	r3, [r2], #1
 800b046:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	4423      	add	r3, r4
 800b04c:	f303 0307 	ssat	r3, #8, r3
 800b050:	9902      	ldr	r1, [sp, #8]
 800b052:	922c      	str	r2, [sp, #176]	@ 0xb0
 800b054:	700b      	strb	r3, [r1, #0]
 800b056:	e66f      	b.n	800ad38 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4ac>
 800b058:	460e      	mov	r6, r1
 800b05a:	461a      	mov	r2, r3
 800b05c:	e627      	b.n	800acae <st_sssa8_ch_nn_mat_mult_kernel_opt+0x422>
 800b05e:	bf00      	nop

0800b060 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>:
 800b060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b064:	b095      	sub	sp, #84	@ 0x54
 800b066:	f8bd 407c 	ldrh.w	r4, [sp, #124]	@ 0x7c
 800b06a:	920d      	str	r2, [sp, #52]	@ 0x34
 800b06c:	f8bd 2080 	ldrh.w	r2, [sp, #128]	@ 0x80
 800b070:	9311      	str	r3, [sp, #68]	@ 0x44
 800b072:	9204      	str	r2, [sp, #16]
 800b074:	0862      	lsrs	r2, r4, #1
 800b076:	f89d 3090 	ldrb.w	r3, [sp, #144]	@ 0x90
 800b07a:	940f      	str	r4, [sp, #60]	@ 0x3c
 800b07c:	9106      	str	r1, [sp, #24]
 800b07e:	9310      	str	r3, [sp, #64]	@ 0x40
 800b080:	920e      	str	r2, [sp, #56]	@ 0x38
 800b082:	2b00      	cmp	r3, #0
 800b084:	f000 81fb 	beq.w	800b47e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x41e>
 800b088:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b08a:	b29c      	uxth	r4, r3
 800b08c:	2a00      	cmp	r2, #0
 800b08e:	f000 8144 	beq.w	800b31a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2ba>
 800b092:	1c61      	adds	r1, r4, #1
 800b094:	0064      	lsls	r4, r4, #1
 800b096:	3a01      	subs	r2, #1
 800b098:	9d04      	ldr	r5, [sp, #16]
 800b09a:	9407      	str	r4, [sp, #28]
 800b09c:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 800b09e:	b292      	uxth	r2, r2
 800b0a0:	f1a5 0310 	sub.w	r3, r5, #16
 800b0a4:	1861      	adds	r1, r4, r1
 800b0a6:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 800b0a8:	091b      	lsrs	r3, r3, #4
 800b0aa:	9102      	str	r1, [sp, #8]
 800b0ac:	f104 0110 	add.w	r1, r4, #16
 800b0b0:	3301      	adds	r3, #1
 800b0b2:	f104 0908 	add.w	r9, r4, #8
 800b0b6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800b0ba:	1ee9      	subs	r1, r5, #3
 800b0bc:	9108      	str	r1, [sp, #32]
 800b0be:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800b0c0:	9209      	str	r2, [sp, #36]	@ 0x24
 800b0c2:	3104      	adds	r1, #4
 800b0c4:	9100      	str	r1, [sp, #0]
 800b0c6:	9922      	ldr	r1, [sp, #136]	@ 0x88
 800b0c8:	3108      	adds	r1, #8
 800b0ca:	9101      	str	r1, [sp, #4]
 800b0cc:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 800b0ce:	f101 0b08 	add.w	fp, r1, #8
 800b0d2:	9925      	ldr	r1, [sp, #148]	@ 0x94
 800b0d4:	3101      	adds	r1, #1
 800b0d6:	9103      	str	r1, [sp, #12]
 800b0d8:	9906      	ldr	r1, [sp, #24]
 800b0da:	eb01 1743 	add.w	r7, r1, r3, lsl #5
 800b0de:	0119      	lsls	r1, r3, #4
 800b0e0:	019b      	lsls	r3, r3, #6
 800b0e2:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b0e4:	930a      	str	r3, [sp, #40]	@ 0x28
 800b0e6:	1f2b      	subs	r3, r5, #4
 800b0e8:	930c      	str	r3, [sp, #48]	@ 0x30
 800b0ea:	f859 3c08 	ldr.w	r3, [r9, #-8]
 800b0ee:	9904      	ldr	r1, [sp, #16]
 800b0f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b0f2:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800b0f6:	290f      	cmp	r1, #15
 800b0f8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b0fa:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b0fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b0fe:	9c06      	ldr	r4, [sp, #24]
 800b100:	f340 81ba 	ble.w	800b478 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x418>
 800b104:	4601      	mov	r1, r0
 800b106:	f8d4 c000 	ldr.w	ip, [r4]
 800b10a:	680e      	ldr	r6, [r1, #0]
 800b10c:	fb26 220c 	smlad	r2, r6, ip, r2
 800b110:	684d      	ldr	r5, [r1, #4]
 800b112:	fb25 330c 	smlad	r3, r5, ip, r3
 800b116:	f8d4 c004 	ldr.w	ip, [r4, #4]
 800b11a:	688e      	ldr	r6, [r1, #8]
 800b11c:	fb26 260c 	smlad	r6, r6, ip, r2
 800b120:	68cd      	ldr	r5, [r1, #12]
 800b122:	fb25 350c 	smlad	r5, r5, ip, r3
 800b126:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800b12a:	690a      	ldr	r2, [r1, #16]
 800b12c:	fb22 660c 	smlad	r6, r2, ip, r6
 800b130:	694b      	ldr	r3, [r1, #20]
 800b132:	fb23 550c 	smlad	r5, r3, ip, r5
 800b136:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800b13a:	698a      	ldr	r2, [r1, #24]
 800b13c:	fb22 620c 	smlad	r2, r2, ip, r6
 800b140:	69cb      	ldr	r3, [r1, #28]
 800b142:	fb23 530c 	smlad	r3, r3, ip, r5
 800b146:	f8d4 c010 	ldr.w	ip, [r4, #16]
 800b14a:	6a0e      	ldr	r6, [r1, #32]
 800b14c:	fb26 220c 	smlad	r2, r6, ip, r2
 800b150:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 800b152:	fb25 330c 	smlad	r3, r5, ip, r3
 800b156:	f8d4 c014 	ldr.w	ip, [r4, #20]
 800b15a:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
 800b15c:	fb26 260c 	smlad	r6, r6, ip, r2
 800b160:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
 800b162:	fb25 350c 	smlad	r5, r5, ip, r3
 800b166:	f8d4 c018 	ldr.w	ip, [r4, #24]
 800b16a:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800b16c:	fb22 660c 	smlad	r6, r2, ip, r6
 800b170:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800b172:	fb23 550c 	smlad	r5, r3, ip, r5
 800b176:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 800b17a:	3140      	adds	r1, #64	@ 0x40
 800b17c:	f851 2c08 	ldr.w	r2, [r1, #-8]
 800b180:	3420      	adds	r4, #32
 800b182:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b186:	fb22 620c 	smlad	r2, r2, ip, r6
 800b18a:	fb23 530c 	smlad	r3, r3, ip, r5
 800b18e:	42bc      	cmp	r4, r7
 800b190:	d1b9      	bne.n	800b106 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0xa6>
 800b192:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b194:	463c      	mov	r4, r7
 800b196:	f8dd e02c 	ldr.w	lr, [sp, #44]	@ 0x2c
 800b19a:	4408      	add	r0, r1
 800b19c:	9908      	ldr	r1, [sp, #32]
 800b19e:	458e      	cmp	lr, r1
 800b1a0:	da25      	bge.n	800b1ee <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x18e>
 800b1a2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b1a4:	eba1 0a0e 	sub.w	sl, r1, lr
 800b1a8:	4601      	mov	r1, r0
 800b1aa:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
 800b1ae:	f10a 0501 	add.w	r5, sl, #1
 800b1b2:	eb04 08c5 	add.w	r8, r4, r5, lsl #3
 800b1b6:	9505      	str	r5, [sp, #20]
 800b1b8:	6825      	ldr	r5, [r4, #0]
 800b1ba:	680e      	ldr	r6, [r1, #0]
 800b1bc:	fb26 2205 	smlad	r2, r6, r5, r2
 800b1c0:	684e      	ldr	r6, [r1, #4]
 800b1c2:	fb26 3505 	smlad	r5, r6, r5, r3
 800b1c6:	6866      	ldr	r6, [r4, #4]
 800b1c8:	3110      	adds	r1, #16
 800b1ca:	f851 cc08 	ldr.w	ip, [r1, #-8]
 800b1ce:	3408      	adds	r4, #8
 800b1d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1d4:	fb2c 2206 	smlad	r2, ip, r6, r2
 800b1d8:	fb23 5306 	smlad	r3, r3, r6, r5
 800b1dc:	45a0      	cmp	r8, r4
 800b1de:	d1eb      	bne.n	800b1b8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x158>
 800b1e0:	9905      	ldr	r1, [sp, #20]
 800b1e2:	f10e 0e04 	add.w	lr, lr, #4
 800b1e6:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 800b1ea:	eb0e 0e8a 	add.w	lr, lr, sl, lsl #2
 800b1ee:	9e04      	ldr	r6, [sp, #16]
 800b1f0:	4576      	cmp	r6, lr
 800b1f2:	dd30      	ble.n	800b256 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1f6>
 800b1f4:	f9b4 1000 	ldrsh.w	r1, [r4]
 800b1f8:	8805      	ldrh	r5, [r0, #0]
 800b1fa:	fb15 2201 	smlabb	r2, r5, r1, r2
 800b1fe:	8845      	ldrh	r5, [r0, #2]
 800b200:	fb11 3305 	smlabb	r3, r1, r5, r3
 800b204:	f10e 0101 	add.w	r1, lr, #1
 800b208:	428e      	cmp	r6, r1
 800b20a:	dd1f      	ble.n	800b24c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1ec>
 800b20c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800b210:	8885      	ldrh	r5, [r0, #4]
 800b212:	fb15 2201 	smlabb	r2, r5, r1, r2
 800b216:	88c5      	ldrh	r5, [r0, #6]
 800b218:	fb11 3305 	smlabb	r3, r1, r5, r3
 800b21c:	f10e 0102 	add.w	r1, lr, #2
 800b220:	428e      	cmp	r6, r1
 800b222:	dd13      	ble.n	800b24c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1ec>
 800b224:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800b228:	8905      	ldrh	r5, [r0, #8]
 800b22a:	fb15 2201 	smlabb	r2, r5, r1, r2
 800b22e:	8945      	ldrh	r5, [r0, #10]
 800b230:	fb11 3305 	smlabb	r3, r1, r5, r3
 800b234:	f10e 0103 	add.w	r1, lr, #3
 800b238:	428e      	cmp	r6, r1
 800b23a:	dd07      	ble.n	800b24c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1ec>
 800b23c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 800b240:	8984      	ldrh	r4, [r0, #12]
 800b242:	fb14 2201 	smlabb	r2, r4, r1, r2
 800b246:	89c4      	ldrh	r4, [r0, #14]
 800b248:	fb11 3304 	smlabb	r3, r1, r4, r3
 800b24c:	9904      	ldr	r1, [sp, #16]
 800b24e:	eba1 0e0e 	sub.w	lr, r1, lr
 800b252:	eb00 008e 	add.w	r0, r0, lr, lsl #2
 800b256:	9e00      	ldr	r6, [sp, #0]
 800b258:	f936 5c04 	ldrsh.w	r5, [r6, #-4]
 800b25c:	2d15      	cmp	r5, #21
 800b25e:	f340 80b4 	ble.w	800b3ca <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x36a>
 800b262:	1eac      	subs	r4, r5, #2
 800b264:	2101      	movs	r1, #1
 800b266:	3d01      	subs	r5, #1
 800b268:	f1a6 0c02 	sub.w	ip, r6, #2
 800b26c:	fa01 f404 	lsl.w	r4, r1, r4
 800b270:	9901      	ldr	r1, [sp, #4]
 800b272:	f1ab 0604 	sub.w	r6, fp, #4
 800b276:	f851 1c08 	ldr.w	r1, [r1, #-8]
 800b27a:	fb52 4401 	smmla	r4, r2, r1, r4
 800b27e:	9901      	ldr	r1, [sp, #4]
 800b280:	fa44 f505 	asr.w	r5, r4, r5
 800b284:	f85b 4c08 	ldr.w	r4, [fp, #-8]
 800b288:	f1a1 0e04 	sub.w	lr, r1, #4
 800b28c:	442c      	add	r4, r5
 800b28e:	f304 0407 	ssat	r4, #8, r4
 800b292:	9a03      	ldr	r2, [sp, #12]
 800b294:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b298:	f9bc 2000 	ldrsh.w	r2, [ip]
 800b29c:	2a15      	cmp	r2, #21
 800b29e:	f340 80b1 	ble.w	800b404 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3a4>
 800b2a2:	1e94      	subs	r4, r2, #2
 800b2a4:	2501      	movs	r5, #1
 800b2a6:	3a01      	subs	r2, #1
 800b2a8:	6836      	ldr	r6, [r6, #0]
 800b2aa:	f8de 1000 	ldr.w	r1, [lr]
 800b2ae:	fa05 f404 	lsl.w	r4, r5, r4
 800b2b2:	fb53 4301 	smmla	r3, r3, r1, r4
 800b2b6:	4113      	asrs	r3, r2
 800b2b8:	4433      	add	r3, r6
 800b2ba:	f303 0307 	ssat	r3, #8, r3
 800b2be:	9a02      	ldr	r2, [sp, #8]
 800b2c0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b2c4:	9b00      	ldr	r3, [sp, #0]
 800b2c6:	f109 0908 	add.w	r9, r9, #8
 800b2ca:	9a07      	ldr	r2, [sp, #28]
 800b2cc:	f10b 0b08 	add.w	fp, fp, #8
 800b2d0:	3304      	adds	r3, #4
 800b2d2:	9300      	str	r3, [sp, #0]
 800b2d4:	9b01      	ldr	r3, [sp, #4]
 800b2d6:	3308      	adds	r3, #8
 800b2d8:	9301      	str	r3, [sp, #4]
 800b2da:	9b02      	ldr	r3, [sp, #8]
 800b2dc:	4413      	add	r3, r2
 800b2de:	9302      	str	r3, [sp, #8]
 800b2e0:	9b03      	ldr	r3, [sp, #12]
 800b2e2:	4413      	add	r3, r2
 800b2e4:	9303      	str	r3, [sp, #12]
 800b2e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2e8:	4599      	cmp	r9, r3
 800b2ea:	f47f aefe 	bne.w	800b0ea <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x8a>
 800b2ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2f0:	4611      	mov	r1, r2
 800b2f2:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 800b2f4:	fb03 2201 	mla	r2, r3, r1, r2
 800b2f8:	9225      	str	r2, [sp, #148]	@ 0x94
 800b2fa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b2fc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800b300:	920d      	str	r2, [sp, #52]	@ 0x34
 800b302:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b304:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b308:	9221      	str	r2, [sp, #132]	@ 0x84
 800b30a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b30c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800b310:	9222      	str	r2, [sp, #136]	@ 0x88
 800b312:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b314:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b318:	9323      	str	r3, [sp, #140]	@ 0x8c
 800b31a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b31c:	07db      	lsls	r3, r3, #31
 800b31e:	d546      	bpl.n	800b3ae <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x34e>
 800b320:	9a04      	ldr	r2, [sp, #16]
 800b322:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b324:	0896      	lsrs	r6, r2, #2
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	d013      	beq.n	800b352 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2f2>
 800b32a:	00f7      	lsls	r7, r6, #3
 800b32c:	9906      	ldr	r1, [sp, #24]
 800b32e:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800b332:	6804      	ldr	r4, [r0, #0]
 800b334:	3008      	adds	r0, #8
 800b336:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800b33a:	680d      	ldr	r5, [r1, #0]
 800b33c:	fb24 3305 	smlad	r3, r4, r5, r3
 800b340:	684c      	ldr	r4, [r1, #4]
 800b342:	3108      	adds	r1, #8
 800b344:	fb22 3304 	smlad	r3, r2, r4, r3
 800b348:	4286      	cmp	r6, r0
 800b34a:	d1f2      	bne.n	800b332 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2d2>
 800b34c:	9a06      	ldr	r2, [sp, #24]
 800b34e:	443a      	add	r2, r7
 800b350:	9206      	str	r2, [sp, #24]
 800b352:	9a04      	ldr	r2, [sp, #16]
 800b354:	f012 0203 	ands.w	r2, r2, #3
 800b358:	d011      	beq.n	800b37e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x31e>
 800b35a:	3a01      	subs	r2, #1
 800b35c:	9d06      	ldr	r5, [sp, #24]
 800b35e:	8801      	ldrh	r1, [r0, #0]
 800b360:	882c      	ldrh	r4, [r5, #0]
 800b362:	b292      	uxth	r2, r2
 800b364:	fb14 3301 	smlabb	r3, r4, r1, r3
 800b368:	b14a      	cbz	r2, 800b37e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x31e>
 800b36a:	886c      	ldrh	r4, [r5, #2]
 800b36c:	2a01      	cmp	r2, #1
 800b36e:	8841      	ldrh	r1, [r0, #2]
 800b370:	fb14 3301 	smlabb	r3, r4, r1, r3
 800b374:	d003      	beq.n	800b37e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x31e>
 800b376:	8881      	ldrh	r1, [r0, #4]
 800b378:	88aa      	ldrh	r2, [r5, #4]
 800b37a:	fb11 3302 	smlabb	r3, r1, r2, r3
 800b37e:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b380:	f9b2 2000 	ldrsh.w	r2, [r2]
 800b384:	2a15      	cmp	r2, #21
 800b386:	f340 8084 	ble.w	800b492 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x432>
 800b38a:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 800b38c:	1e95      	subs	r5, r2, #2
 800b38e:	9922      	ldr	r1, [sp, #136]	@ 0x88
 800b390:	3a01      	subs	r2, #1
 800b392:	6804      	ldr	r4, [r0, #0]
 800b394:	2001      	movs	r0, #1
 800b396:	6809      	ldr	r1, [r1, #0]
 800b398:	40a8      	lsls	r0, r5
 800b39a:	fb53 0301 	smmla	r3, r3, r1, r0
 800b39e:	4113      	asrs	r3, r2
 800b3a0:	4423      	add	r3, r4
 800b3a2:	f303 0307 	ssat	r3, #8, r3
 800b3a6:	9825      	ldr	r0, [sp, #148]	@ 0x94
 800b3a8:	f800 3b01 	strb.w	r3, [r0], #1
 800b3ac:	9025      	str	r0, [sp, #148]	@ 0x94
 800b3ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d066      	beq.n	800b482 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x422>
 800b3b4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b3b6:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800b3b8:	fb03 f000 	mul.w	r0, r3, r0
 800b3bc:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800b3be:	f1c0 0001 	rsb	r0, r0, #1
 800b3c2:	4418      	add	r0, r3
 800b3c4:	b015      	add	sp, #84	@ 0x54
 800b3c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3ca:	2d00      	cmp	r5, #0
 800b3cc:	dd29      	ble.n	800b422 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3c2>
 800b3ce:	9e01      	ldr	r6, [sp, #4]
 800b3d0:	0052      	lsls	r2, r2, #1
 800b3d2:	f85b 4c08 	ldr.w	r4, [fp, #-8]
 800b3d6:	f856 1c08 	ldr.w	r1, [r6, #-8]
 800b3da:	f1a6 0e04 	sub.w	lr, r6, #4
 800b3de:	fb52 4201 	smmla	r2, r2, r1, r4
 800b3e2:	fa42 f505 	asr.w	r5, r2, r5
 800b3e6:	9a00      	ldr	r2, [sp, #0]
 800b3e8:	f1ab 0604 	sub.w	r6, fp, #4
 800b3ec:	f1a2 0c02 	sub.w	ip, r2, #2
 800b3f0:	f305 0507 	ssat	r5, #8, r5
 800b3f4:	9a03      	ldr	r2, [sp, #12]
 800b3f6:	f802 5c01 	strb.w	r5, [r2, #-1]
 800b3fa:	f9bc 2000 	ldrsh.w	r2, [ip]
 800b3fe:	2a15      	cmp	r2, #21
 800b400:	f73f af4f 	bgt.w	800b2a2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x242>
 800b404:	2a00      	cmp	r2, #0
 800b406:	dd25      	ble.n	800b454 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3f4>
 800b408:	f8de 1000 	ldr.w	r1, [lr]
 800b40c:	005b      	lsls	r3, r3, #1
 800b40e:	6834      	ldr	r4, [r6, #0]
 800b410:	fb53 4301 	smmla	r3, r3, r1, r4
 800b414:	4113      	asrs	r3, r2
 800b416:	f303 0307 	ssat	r3, #8, r3
 800b41a:	9a02      	ldr	r2, [sp, #8]
 800b41c:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b420:	e750      	b.n	800b2c4 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x264>
 800b422:	f1c5 0501 	rsb	r5, r5, #1
 800b426:	f1a6 0c02 	sub.w	ip, r6, #2
 800b42a:	40aa      	lsls	r2, r5
 800b42c:	f302 021f 	ssat	r2, #32, r2
 800b430:	9901      	ldr	r1, [sp, #4]
 800b432:	f1a1 0e04 	sub.w	lr, r1, #4
 800b436:	f851 1c08 	ldr.w	r1, [r1, #-8]
 800b43a:	fb52 f111 	smmulr	r1, r2, r1
 800b43e:	f85b 2c08 	ldr.w	r2, [fp, #-8]
 800b442:	f1ab 0604 	sub.w	r6, fp, #4
 800b446:	440a      	add	r2, r1
 800b448:	f302 0207 	ssat	r2, #8, r2
 800b44c:	9903      	ldr	r1, [sp, #12]
 800b44e:	f801 2c01 	strb.w	r2, [r1, #-1]
 800b452:	e721      	b.n	800b298 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x238>
 800b454:	f1c2 0201 	rsb	r2, r2, #1
 800b458:	fa03 f202 	lsl.w	r2, r3, r2
 800b45c:	f302 021f 	ssat	r2, #32, r2
 800b460:	f8de 3000 	ldr.w	r3, [lr]
 800b464:	fb52 f313 	smmulr	r3, r2, r3
 800b468:	6832      	ldr	r2, [r6, #0]
 800b46a:	4413      	add	r3, r2
 800b46c:	f303 0307 	ssat	r3, #8, r3
 800b470:	9a02      	ldr	r2, [sp, #8]
 800b472:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b476:	e725      	b.n	800b2c4 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x264>
 800b478:	f04f 0e00 	mov.w	lr, #0
 800b47c:	e68e      	b.n	800b19c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x13c>
 800b47e:	2401      	movs	r4, #1
 800b480:	e604      	b.n	800b08c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2c>
 800b482:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b484:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b486:	1a98      	subs	r0, r3, r2
 800b488:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800b48a:	4418      	add	r0, r3
 800b48c:	b015      	add	sp, #84	@ 0x54
 800b48e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b492:	2a00      	cmp	r2, #0
 800b494:	dd0e      	ble.n	800b4b4 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x454>
 800b496:	9922      	ldr	r1, [sp, #136]	@ 0x88
 800b498:	005b      	lsls	r3, r3, #1
 800b49a:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 800b49c:	6809      	ldr	r1, [r1, #0]
 800b49e:	6800      	ldr	r0, [r0, #0]
 800b4a0:	fb53 0301 	smmla	r3, r3, r1, r0
 800b4a4:	4113      	asrs	r3, r2
 800b4a6:	f303 0307 	ssat	r3, #8, r3
 800b4aa:	9825      	ldr	r0, [sp, #148]	@ 0x94
 800b4ac:	f800 3b01 	strb.w	r3, [r0], #1
 800b4b0:	9025      	str	r0, [sp, #148]	@ 0x94
 800b4b2:	e77c      	b.n	800b3ae <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x34e>
 800b4b4:	f1c2 0201 	rsb	r2, r2, #1
 800b4b8:	4093      	lsls	r3, r2
 800b4ba:	f303 031f 	ssat	r3, #32, r3
 800b4be:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b4c0:	6812      	ldr	r2, [r2, #0]
 800b4c2:	fb53 f312 	smmulr	r3, r3, r2
 800b4c6:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b4c8:	6812      	ldr	r2, [r2, #0]
 800b4ca:	4413      	add	r3, r2
 800b4cc:	f303 0307 	ssat	r3, #8, r3
 800b4d0:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 800b4d2:	f802 3b01 	strb.w	r3, [r2], #1
 800b4d6:	9225      	str	r2, [sp, #148]	@ 0x94
 800b4d8:	e769      	b.n	800b3ae <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x34e>
 800b4da:	bf00      	nop

0800b4dc <arm_fill_q15>:
 800b4dc:	b510      	push	{r4, lr}
 800b4de:	eac0 4400 	pkhbt	r4, r0, r0, lsl #16
 800b4e2:	ea5f 0e92 	movs.w	lr, r2, lsr #2
 800b4e6:	d013      	beq.n	800b510 <arm_fill_q15+0x34>
 800b4e8:	f10e 33ff 	add.w	r3, lr, #4294967295
 800b4ec:	2b09      	cmp	r3, #9
 800b4ee:	460b      	mov	r3, r1
 800b4f0:	d919      	bls.n	800b526 <arm_fill_q15+0x4a>
 800b4f2:	f011 0f07 	tst.w	r1, #7
 800b4f6:	d116      	bne.n	800b526 <arm_fill_q15+0x4a>
 800b4f8:	f04f 0c00 	mov.w	ip, #0
 800b4fc:	f10c 0c01 	add.w	ip, ip, #1
 800b500:	45e6      	cmp	lr, ip
 800b502:	e9c3 4400 	strd	r4, r4, [r3]
 800b506:	f103 0308 	add.w	r3, r3, #8
 800b50a:	d1f7      	bne.n	800b4fc <arm_fill_q15+0x20>
 800b50c:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
 800b510:	f012 0203 	ands.w	r2, r2, #3
 800b514:	d006      	beq.n	800b524 <arm_fill_q15+0x48>
 800b516:	3a01      	subs	r2, #1
 800b518:	8008      	strh	r0, [r1, #0]
 800b51a:	d003      	beq.n	800b524 <arm_fill_q15+0x48>
 800b51c:	2a01      	cmp	r2, #1
 800b51e:	8048      	strh	r0, [r1, #2]
 800b520:	bf18      	it	ne
 800b522:	8088      	strhne	r0, [r1, #4]
 800b524:	bd10      	pop	{r4, pc}
 800b526:	46f4      	mov	ip, lr
 800b528:	f1bc 0c01 	subs.w	ip, ip, #1
 800b52c:	601c      	str	r4, [r3, #0]
 800b52e:	605c      	str	r4, [r3, #4]
 800b530:	f103 0308 	add.w	r3, r3, #8
 800b534:	d1f8      	bne.n	800b528 <arm_fill_q15+0x4c>
 800b536:	e7e9      	b.n	800b50c <arm_fill_q15+0x30>

0800b538 <arm_float_to_q15>:
 800b538:	b530      	push	{r4, r5, lr}
 800b53a:	0895      	lsrs	r5, r2, #2
 800b53c:	d069      	beq.n	800b612 <arm_float_to_q15+0xda>
 800b53e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800b542:	f100 0c10 	add.w	ip, r0, #16
 800b546:	eefe 5a00 	vmov.f32	s11, #224	@ 0xbf000000 -0.5
 800b54a:	ed9f 6a55 	vldr	s12, [pc, #340]	@ 800b6a0 <arm_float_to_q15+0x168>
 800b54e:	f101 0e08 	add.w	lr, r1, #8
 800b552:	462c      	mov	r4, r5
 800b554:	ed5c 7a04 	vldr	s15, [ip, #-16]
 800b558:	ee67 6a86 	vmul.f32	s13, s15, s12
 800b55c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800b560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b564:	fe77 7a25 	vselgt.f32	s15, s14, s11
 800b568:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b56c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b570:	ee17 3a90 	vmov	r3, s15
 800b574:	f303 030f 	ssat	r3, #16, r3
 800b578:	f82e 3c08 	strh.w	r3, [lr, #-8]
 800b57c:	ed5c 7a03 	vldr	s15, [ip, #-12]
 800b580:	ee67 6a86 	vmul.f32	s13, s15, s12
 800b584:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800b588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b58c:	fe77 7a25 	vselgt.f32	s15, s14, s11
 800b590:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b594:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b598:	ee17 3a90 	vmov	r3, s15
 800b59c:	f303 030f 	ssat	r3, #16, r3
 800b5a0:	f82e 3c06 	strh.w	r3, [lr, #-6]
 800b5a4:	ed5c 7a02 	vldr	s15, [ip, #-8]
 800b5a8:	ee67 6a86 	vmul.f32	s13, s15, s12
 800b5ac:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800b5b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5b4:	fe77 7a25 	vselgt.f32	s15, s14, s11
 800b5b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b5c0:	ee17 3a90 	vmov	r3, s15
 800b5c4:	f303 030f 	ssat	r3, #16, r3
 800b5c8:	f82e 3c04 	strh.w	r3, [lr, #-4]
 800b5cc:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800b5d0:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b5d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b5d8:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b5dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b5e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5e4:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800b5e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b5ec:	bfcc      	ite	gt
 800b5ee:	ee16 3a90 	vmovgt	r3, s13
 800b5f2:	ee17 3a90 	vmovle	r3, s15
 800b5f6:	f303 030f 	ssat	r3, #16, r3
 800b5fa:	3c01      	subs	r4, #1
 800b5fc:	f82e 3c02 	strh.w	r3, [lr, #-2]
 800b600:	f10c 0c10 	add.w	ip, ip, #16
 800b604:	f10e 0e08 	add.w	lr, lr, #8
 800b608:	d1a4      	bne.n	800b554 <arm_float_to_q15+0x1c>
 800b60a:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800b60e:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800b612:	f012 0203 	ands.w	r2, r2, #3
 800b616:	d042      	beq.n	800b69e <arm_float_to_q15+0x166>
 800b618:	edd0 7a00 	vldr	s15, [r0]
 800b61c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800b620:	eddf 5a1f 	vldr	s11, [pc, #124]	@ 800b6a0 <arm_float_to_q15+0x168>
 800b624:	eebe 6a00 	vmov.f32	s12, #224	@ 0xbf000000 -0.5
 800b628:	ee67 6aa5 	vmul.f32	s13, s15, s11
 800b62c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800b630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b634:	fe77 7a06 	vselgt.f32	s15, s14, s12
 800b638:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b63c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b640:	ee17 3a90 	vmov	r3, s15
 800b644:	f303 030f 	ssat	r3, #16, r3
 800b648:	3a01      	subs	r2, #1
 800b64a:	800b      	strh	r3, [r1, #0]
 800b64c:	d027      	beq.n	800b69e <arm_float_to_q15+0x166>
 800b64e:	edd0 7a01 	vldr	s15, [r0, #4]
 800b652:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b656:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b65a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b65e:	fe77 6a06 	vselgt.f32	s13, s14, s12
 800b662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b666:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b66a:	ee17 3a90 	vmov	r3, s15
 800b66e:	f303 030f 	ssat	r3, #16, r3
 800b672:	2a01      	cmp	r2, #1
 800b674:	804b      	strh	r3, [r1, #2]
 800b676:	d012      	beq.n	800b69e <arm_float_to_q15+0x166>
 800b678:	edd0 7a02 	vldr	s15, [r0, #8]
 800b67c:	ee67 5aa5 	vmul.f32	s11, s15, s11
 800b680:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 800b684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b688:	fe37 7a06 	vselgt.f32	s14, s14, s12
 800b68c:	ee37 7a25 	vadd.f32	s14, s14, s11
 800b690:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800b694:	ee17 3a10 	vmov	r3, s14
 800b698:	f303 030f 	ssat	r3, #16, r3
 800b69c:	808b      	strh	r3, [r1, #4]
 800b69e:	bd30      	pop	{r4, r5, pc}
 800b6a0:	47000000 	.word	0x47000000

0800b6a4 <arm_float_to_q7>:
 800b6a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6a6:	0895      	lsrs	r5, r2, #2
 800b6a8:	d06f      	beq.n	800b78a <arm_float_to_q7+0xe6>
 800b6aa:	f101 0c04 	add.w	ip, r1, #4
 800b6ae:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800b6b2:	eebe 5a00 	vmov.f32	s10, #224	@ 0xbf000000 -0.5
 800b6b6:	f100 0e10 	add.w	lr, r0, #16
 800b6ba:	eddf 5a5f 	vldr	s11, [pc, #380]	@ 800b838 <arm_float_to_q7+0x194>
 800b6be:	00ae      	lsls	r6, r5, #2
 800b6c0:	eb0c 0485 	add.w	r4, ip, r5, lsl #2
 800b6c4:	ed5e 7a04 	vldr	s15, [lr, #-16]
 800b6c8:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800b6cc:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800b6d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6d4:	fe76 7a05 	vselgt.f32	s15, s12, s10
 800b6d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b6dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b6e0:	ee17 3a90 	vmov	r3, s15
 800b6e4:	b21b      	sxth	r3, r3
 800b6e6:	f303 0307 	ssat	r3, #8, r3
 800b6ea:	f80c 3c04 	strb.w	r3, [ip, #-4]
 800b6ee:	ed5e 7a03 	vldr	s15, [lr, #-12]
 800b6f2:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800b6f6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800b6fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6fe:	fe76 7a05 	vselgt.f32	s15, s12, s10
 800b702:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b706:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b70a:	ee17 3a90 	vmov	r3, s15
 800b70e:	b21b      	sxth	r3, r3
 800b710:	f303 0307 	ssat	r3, #8, r3
 800b714:	f80c 3c03 	strb.w	r3, [ip, #-3]
 800b718:	ed5e 7a02 	vldr	s15, [lr, #-8]
 800b71c:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800b720:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800b724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b728:	fe76 7a05 	vselgt.f32	s15, s12, s10
 800b72c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b730:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b734:	ee17 3a90 	vmov	r3, s15
 800b738:	b21b      	sxth	r3, r3
 800b73a:	f303 0307 	ssat	r3, #8, r3
 800b73e:	f80c 3c02 	strb.w	r3, [ip, #-2]
 800b742:	ed5e 6a01 	vldr	s13, [lr, #-4]
 800b746:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800b74a:	ee76 7a86 	vadd.f32	s15, s13, s12
 800b74e:	ee36 7ac6 	vsub.f32	s14, s13, s12
 800b752:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800b756:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b75a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800b75e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b762:	ee17 3a90 	vmov	r3, s15
 800b766:	ee17 7a10 	vmov	r7, s14
 800b76a:	b21b      	sxth	r3, r3
 800b76c:	b23f      	sxth	r7, r7
 800b76e:	dd56      	ble.n	800b81e <arm_float_to_q7+0x17a>
 800b770:	f303 0307 	ssat	r3, #8, r3
 800b774:	f80c 3c01 	strb.w	r3, [ip, #-1]
 800b778:	f10c 0c04 	add.w	ip, ip, #4
 800b77c:	f10e 0e10 	add.w	lr, lr, #16
 800b780:	4564      	cmp	r4, ip
 800b782:	d19f      	bne.n	800b6c4 <arm_float_to_q7+0x20>
 800b784:	4431      	add	r1, r6
 800b786:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800b78a:	f012 0203 	ands.w	r2, r2, #3
 800b78e:	d045      	beq.n	800b81c <arm_float_to_q7+0x178>
 800b790:	edd0 7a00 	vldr	s15, [r0]
 800b794:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800b798:	ed9f 5a27 	vldr	s10, [pc, #156]	@ 800b838 <arm_float_to_q7+0x194>
 800b79c:	eefe 5a00 	vmov.f32	s11, #224	@ 0xbf000000 -0.5
 800b7a0:	ee67 6a85 	vmul.f32	s13, s15, s10
 800b7a4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800b7a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7ac:	fe77 7a25 	vselgt.f32	s15, s14, s11
 800b7b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b7b8:	ee17 3a90 	vmov	r3, s15
 800b7bc:	b21b      	sxth	r3, r3
 800b7be:	f303 0307 	ssat	r3, #8, r3
 800b7c2:	3a01      	subs	r2, #1
 800b7c4:	700b      	strb	r3, [r1, #0]
 800b7c6:	d029      	beq.n	800b81c <arm_float_to_q7+0x178>
 800b7c8:	edd0 6a01 	vldr	s13, [r0, #4]
 800b7cc:	ee26 6a85 	vmul.f32	s12, s13, s10
 800b7d0:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 800b7d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7d8:	fe77 6a25 	vselgt.f32	s13, s14, s11
 800b7dc:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b7e0:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800b7e4:	ee16 3a90 	vmov	r3, s13
 800b7e8:	b21b      	sxth	r3, r3
 800b7ea:	f303 0307 	ssat	r3, #8, r3
 800b7ee:	2a01      	cmp	r2, #1
 800b7f0:	704b      	strb	r3, [r1, #1]
 800b7f2:	d013      	beq.n	800b81c <arm_float_to_q7+0x178>
 800b7f4:	edd0 7a02 	vldr	s15, [r0, #8]
 800b7f8:	ee27 5a85 	vmul.f32	s10, s15, s10
 800b7fc:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 800b800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b804:	fe77 7a25 	vselgt.f32	s15, s14, s11
 800b808:	ee77 7a85 	vadd.f32	s15, s15, s10
 800b80c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b810:	ee17 3a90 	vmov	r3, s15
 800b814:	b21b      	sxth	r3, r3
 800b816:	f303 0307 	ssat	r3, #8, r3
 800b81a:	708b      	strb	r3, [r1, #2]
 800b81c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b81e:	f307 0707 	ssat	r7, #8, r7
 800b822:	f80c 7c01 	strb.w	r7, [ip, #-1]
 800b826:	f10c 0c04 	add.w	ip, ip, #4
 800b82a:	f10e 0e10 	add.w	lr, lr, #16
 800b82e:	45a4      	cmp	ip, r4
 800b830:	f47f af48 	bne.w	800b6c4 <arm_float_to_q7+0x20>
 800b834:	e7a6      	b.n	800b784 <arm_float_to_q7+0xe0>
 800b836:	bf00      	nop
 800b838:	43000000 	.word	0x43000000

0800b83c <arm_q15_to_float>:
 800b83c:	b530      	push	{r4, r5, lr}
 800b83e:	0894      	lsrs	r4, r2, #2
 800b840:	d038      	beq.n	800b8b4 <arm_q15_to_float+0x78>
 800b842:	f100 0c08 	add.w	ip, r0, #8
 800b846:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800b904 <arm_q15_to_float+0xc8>
 800b84a:	f101 0310 	add.w	r3, r1, #16
 800b84e:	46a6      	mov	lr, r4
 800b850:	f93c 5c08 	ldrsh.w	r5, [ip, #-8]
 800b854:	3310      	adds	r3, #16
 800b856:	f10c 0c08 	add.w	ip, ip, #8
 800b85a:	f1be 0e01 	subs.w	lr, lr, #1
 800b85e:	ee07 5a90 	vmov	s15, r5
 800b862:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b866:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b86a:	ed43 7a08 	vstr	s15, [r3, #-32]	@ 0xffffffe0
 800b86e:	f93c 5c0e 	ldrsh.w	r5, [ip, #-14]
 800b872:	ee07 5a90 	vmov	s15, r5
 800b876:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b87a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b87e:	ed43 7a07 	vstr	s15, [r3, #-28]	@ 0xffffffe4
 800b882:	f93c 5c0c 	ldrsh.w	r5, [ip, #-12]
 800b886:	ee07 5a90 	vmov	s15, r5
 800b88a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b88e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b892:	ed43 7a06 	vstr	s15, [r3, #-24]	@ 0xffffffe8
 800b896:	f93c 5c0a 	ldrsh.w	r5, [ip, #-10]
 800b89a:	ee07 5a90 	vmov	s15, r5
 800b89e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b8a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b8a6:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 800b8aa:	d1d1      	bne.n	800b850 <arm_q15_to_float+0x14>
 800b8ac:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 800b8b0:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800b8b4:	f012 0203 	ands.w	r2, r2, #3
 800b8b8:	d023      	beq.n	800b902 <arm_q15_to_float+0xc6>
 800b8ba:	f9b0 3000 	ldrsh.w	r3, [r0]
 800b8be:	3a01      	subs	r2, #1
 800b8c0:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800b904 <arm_q15_to_float+0xc8>
 800b8c4:	ee07 3a90 	vmov	s15, r3
 800b8c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b8cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b8d0:	edc1 7a00 	vstr	s15, [r1]
 800b8d4:	d015      	beq.n	800b902 <arm_q15_to_float+0xc6>
 800b8d6:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800b8da:	2a01      	cmp	r2, #1
 800b8dc:	ee07 3a90 	vmov	s15, r3
 800b8e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b8e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b8e8:	edc1 7a01 	vstr	s15, [r1, #4]
 800b8ec:	d009      	beq.n	800b902 <arm_q15_to_float+0xc6>
 800b8ee:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800b8f2:	ee07 3a90 	vmov	s15, r3
 800b8f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b8fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b8fe:	edc1 7a02 	vstr	s15, [r1, #8]
 800b902:	bd30      	pop	{r4, r5, pc}
 800b904:	38000000 	.word	0x38000000

0800b908 <arm_q7_to_float>:
 800b908:	b530      	push	{r4, r5, lr}
 800b90a:	0894      	lsrs	r4, r2, #2
 800b90c:	d036      	beq.n	800b97c <arm_q7_to_float+0x74>
 800b90e:	1d03      	adds	r3, r0, #4
 800b910:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800b914:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 800b9cc <arm_q7_to_float+0xc4>
 800b918:	f101 0010 	add.w	r0, r1, #16
 800b91c:	f913 ec04 	ldrsb.w	lr, [r3, #-4]
 800b920:	3010      	adds	r0, #16
 800b922:	ee07 ea90 	vmov	s15, lr
 800b926:	469e      	mov	lr, r3
 800b928:	3304      	adds	r3, #4
 800b92a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b92e:	45e6      	cmp	lr, ip
 800b930:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b934:	ed40 7a08 	vstr	s15, [r0, #-32]	@ 0xffffffe0
 800b938:	f913 5c07 	ldrsb.w	r5, [r3, #-7]
 800b93c:	ee07 5a90 	vmov	s15, r5
 800b940:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b944:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b948:	ed40 7a07 	vstr	s15, [r0, #-28]	@ 0xffffffe4
 800b94c:	f913 5c06 	ldrsb.w	r5, [r3, #-6]
 800b950:	ee07 5a90 	vmov	s15, r5
 800b954:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b958:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b95c:	ed40 7a06 	vstr	s15, [r0, #-24]	@ 0xffffffe8
 800b960:	f913 5c05 	ldrsb.w	r5, [r3, #-5]
 800b964:	ee07 5a90 	vmov	s15, r5
 800b968:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b96c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b970:	ed40 7a05 	vstr	s15, [r0, #-20]	@ 0xffffffec
 800b974:	d1d2      	bne.n	800b91c <arm_q7_to_float+0x14>
 800b976:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 800b97a:	4660      	mov	r0, ip
 800b97c:	f012 0203 	ands.w	r2, r2, #3
 800b980:	d023      	beq.n	800b9ca <arm_q7_to_float+0xc2>
 800b982:	f990 3000 	ldrsb.w	r3, [r0]
 800b986:	3a01      	subs	r2, #1
 800b988:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800b9cc <arm_q7_to_float+0xc4>
 800b98c:	ee07 3a90 	vmov	s15, r3
 800b990:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b994:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b998:	edc1 7a00 	vstr	s15, [r1]
 800b99c:	d015      	beq.n	800b9ca <arm_q7_to_float+0xc2>
 800b99e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800b9a2:	2a01      	cmp	r2, #1
 800b9a4:	ee07 3a90 	vmov	s15, r3
 800b9a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b9ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b9b0:	edc1 7a01 	vstr	s15, [r1, #4]
 800b9b4:	d009      	beq.n	800b9ca <arm_q7_to_float+0xc2>
 800b9b6:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800b9ba:	ee07 3a90 	vmov	s15, r3
 800b9be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b9c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b9c6:	edc1 7a02 	vstr	s15, [r1, #8]
 800b9ca:	bd30      	pop	{r4, r5, pc}
 800b9cc:	3c000000 	.word	0x3c000000

0800b9d0 <ai_array_to_buffer_fmt>:
 800b9d0:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800b9d4:	2b02      	cmp	r3, #2
 800b9d6:	d050      	beq.n	800ba7a <ai_array_to_buffer_fmt+0xaa>
 800b9d8:	f020 427e 	bic.w	r2, r0, #4261412864	@ 0xfe000000
 800b9dc:	4b29      	ldr	r3, [pc, #164]	@ (800ba84 <ai_array_to_buffer_fmt+0xb4>)
 800b9de:	429a      	cmp	r2, r3
 800b9e0:	d00b      	beq.n	800b9fa <ai_array_to_buffer_fmt+0x2a>
 800b9e2:	dc1c      	bgt.n	800ba1e <ai_array_to_buffer_fmt+0x4e>
 800b9e4:	4b28      	ldr	r3, [pc, #160]	@ (800ba88 <ai_array_to_buffer_fmt+0xb8>)
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	d007      	beq.n	800b9fa <ai_array_to_buffer_fmt+0x2a>
 800b9ea:	dd0b      	ble.n	800ba04 <ai_array_to_buffer_fmt+0x34>
 800b9ec:	4b27      	ldr	r3, [pc, #156]	@ (800ba8c <ai_array_to_buffer_fmt+0xbc>)
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	d003      	beq.n	800b9fa <ai_array_to_buffer_fmt+0x2a>
 800b9f2:	f503 33fa 	add.w	r3, r3, #128000	@ 0x1f400
 800b9f6:	429a      	cmp	r2, r3
 800b9f8:	d131      	bne.n	800ba5e <ai_array_to_buffer_fmt+0x8e>
 800b9fa:	4613      	mov	r3, r2
 800b9fc:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800ba00:	4318      	orrs	r0, r3
 800ba02:	4770      	bx	lr
 800ba04:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800ba08:	429a      	cmp	r2, r3
 800ba0a:	d0f6      	beq.n	800b9fa <ai_array_to_buffer_fmt+0x2a>
 800ba0c:	dd2c      	ble.n	800ba68 <ai_array_to_buffer_fmt+0x98>
 800ba0e:	4b20      	ldr	r3, [pc, #128]	@ (800ba90 <ai_array_to_buffer_fmt+0xc0>)
 800ba10:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800ba14:	429a      	cmp	r2, r3
 800ba16:	bf18      	it	ne
 800ba18:	2340      	movne	r3, #64	@ 0x40
 800ba1a:	4318      	orrs	r0, r3
 800ba1c:	4770      	bx	lr
 800ba1e:	4b1d      	ldr	r3, [pc, #116]	@ (800ba94 <ai_array_to_buffer_fmt+0xc4>)
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d0ea      	beq.n	800b9fa <ai_array_to_buffer_fmt+0x2a>
 800ba24:	dd0e      	ble.n	800ba44 <ai_array_to_buffer_fmt+0x74>
 800ba26:	4b1c      	ldr	r3, [pc, #112]	@ (800ba98 <ai_array_to_buffer_fmt+0xc8>)
 800ba28:	429a      	cmp	r2, r3
 800ba2a:	d0e6      	beq.n	800b9fa <ai_array_to_buffer_fmt+0x2a>
 800ba2c:	f503 037e 	add.w	r3, r3, #16646144	@ 0xfe0000
 800ba30:	429a      	cmp	r2, r3
 800ba32:	d0e2      	beq.n	800b9fa <ai_array_to_buffer_fmt+0x2a>
 800ba34:	4b19      	ldr	r3, [pc, #100]	@ (800ba9c <ai_array_to_buffer_fmt+0xcc>)
 800ba36:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800ba3a:	429a      	cmp	r2, r3
 800ba3c:	bf18      	it	ne
 800ba3e:	2340      	movne	r3, #64	@ 0x40
 800ba40:	4318      	orrs	r0, r3
 800ba42:	4770      	bx	lr
 800ba44:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800ba48:	429a      	cmp	r2, r3
 800ba4a:	d0d6      	beq.n	800b9fa <ai_array_to_buffer_fmt+0x2a>
 800ba4c:	3307      	adds	r3, #7
 800ba4e:	429a      	cmp	r2, r3
 800ba50:	d0d3      	beq.n	800b9fa <ai_array_to_buffer_fmt+0x2a>
 800ba52:	f2a3 3387 	subw	r3, r3, #903	@ 0x387
 800ba56:	429a      	cmp	r2, r3
 800ba58:	bf18      	it	ne
 800ba5a:	2340      	movne	r3, #64	@ 0x40
 800ba5c:	e7ce      	b.n	800b9fc <ai_array_to_buffer_fmt+0x2c>
 800ba5e:	4b10      	ldr	r3, [pc, #64]	@ (800baa0 <ai_array_to_buffer_fmt+0xd0>)
 800ba60:	429a      	cmp	r2, r3
 800ba62:	bf18      	it	ne
 800ba64:	2340      	movne	r3, #64	@ 0x40
 800ba66:	e7c9      	b.n	800b9fc <ai_array_to_buffer_fmt+0x2c>
 800ba68:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800ba6c:	429a      	cmp	r2, r3
 800ba6e:	d0c4      	beq.n	800b9fa <ai_array_to_buffer_fmt+0x2a>
 800ba70:	3380      	adds	r3, #128	@ 0x80
 800ba72:	429a      	cmp	r2, r3
 800ba74:	bf18      	it	ne
 800ba76:	2340      	movne	r3, #64	@ 0x40
 800ba78:	e7c0      	b.n	800b9fc <ai_array_to_buffer_fmt+0x2c>
 800ba7a:	4b0a      	ldr	r3, [pc, #40]	@ (800baa4 <ai_array_to_buffer_fmt+0xd4>)
 800ba7c:	4003      	ands	r3, r0
 800ba7e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ba82:	e7bb      	b.n	800b9fc <ai_array_to_buffer_fmt+0x2c>
 800ba84:	00840040 	.word	0x00840040
 800ba88:	00040840 	.word	0x00040840
 800ba8c:	00041040 	.word	0x00041040
 800ba90:	00040447 	.word	0x00040447
 800ba94:	00840840 	.word	0x00840840
 800ba98:	00841040 	.word	0x00841040
 800ba9c:	0084084f 	.word	0x0084084f
 800baa0:	0004084f 	.word	0x0004084f
 800baa4:	00803fff 	.word	0x00803fff

0800baa8 <ai_array_get_byte_size>:
 800baa8:	b319      	cbz	r1, 800baf2 <ai_array_get_byte_size+0x4a>
 800baaa:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800baae:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800bab2:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 800bab6:	11c0      	asrs	r0, r0, #7
 800bab8:	fb03 f101 	mul.w	r1, r3, r1
 800babc:	2a04      	cmp	r2, #4
 800babe:	f101 0107 	add.w	r1, r1, #7
 800bac2:	f021 0107 	bic.w	r1, r1, #7
 800bac6:	fa21 f10c 	lsr.w	r1, r1, ip
 800baca:	d00b      	beq.n	800bae4 <ai_array_get_byte_size+0x3c>
 800bacc:	2a08      	cmp	r2, #8
 800bace:	d002      	beq.n	800bad6 <ai_array_get_byte_size+0x2e>
 800bad0:	3107      	adds	r1, #7
 800bad2:	08c8      	lsrs	r0, r1, #3
 800bad4:	4770      	bx	lr
 800bad6:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 800bada:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800bade:	3107      	adds	r1, #7
 800bae0:	08c8      	lsrs	r0, r1, #3
 800bae2:	4770      	bx	lr
 800bae4:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 800bae8:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 800baec:	3107      	adds	r1, #7
 800baee:	08c8      	lsrs	r0, r1, #3
 800baf0:	4770      	bx	lr
 800baf2:	4608      	mov	r0, r1
 800baf4:	4770      	bx	lr
 800baf6:	bf00      	nop

0800baf8 <ai_array_get_data_byte_size>:
 800baf8:	b161      	cbz	r1, 800bb14 <ai_array_get_data_byte_size+0x1c>
 800bafa:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800bafe:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800bb02:	fb03 f101 	mul.w	r1, r3, r1
 800bb06:	1dc8      	adds	r0, r1, #7
 800bb08:	f020 0007 	bic.w	r0, r0, #7
 800bb0c:	40d0      	lsrs	r0, r2
 800bb0e:	3007      	adds	r0, #7
 800bb10:	08c0      	lsrs	r0, r0, #3
 800bb12:	4770      	bx	lr
 800bb14:	4608      	mov	r0, r1
 800bb16:	4770      	bx	lr

0800bb18 <ai_version_get>:
 800bb18:	0212      	lsls	r2, r2, #8
 800bb1a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800bb1e:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800bb22:	4770      	bx	lr

0800bb24 <get_tensor_byte_size>:
 800bb24:	b430      	push	{r4, r5}
 800bb26:	6985      	ldr	r5, [r0, #24]
 800bb28:	68c4      	ldr	r4, [r0, #12]
 800bb2a:	6941      	ldr	r1, [r0, #20]
 800bb2c:	4b06      	ldr	r3, [pc, #24]	@ (800bb48 <get_tensor_byte_size+0x24>)
 800bb2e:	6828      	ldr	r0, [r5, #0]
 800bb30:	4a06      	ldr	r2, [pc, #24]	@ (800bb4c <get_tensor_byte_size+0x28>)
 800bb32:	4003      	ands	r3, r0
 800bb34:	68c9      	ldr	r1, [r1, #12]
 800bb36:	68e0      	ldr	r0, [r4, #12]
 800bb38:	4293      	cmp	r3, r2
 800bb3a:	fb01 f000 	mul.w	r0, r1, r0
 800bb3e:	d101      	bne.n	800bb44 <get_tensor_byte_size+0x20>
 800bb40:	3007      	adds	r0, #7
 800bb42:	08c0      	lsrs	r0, r0, #3
 800bb44:	bc30      	pop	{r4, r5}
 800bb46:	4770      	bx	lr
 800bb48:	017fffff 	.word	0x017fffff
 800bb4c:	000400c0 	.word	0x000400c0

0800bb50 <core_tensor_clone>:
 800bb50:	680b      	ldr	r3, [r1, #0]
 800bb52:	6882      	ldr	r2, [r0, #8]
 800bb54:	6003      	str	r3, [r0, #0]
 800bb56:	684b      	ldr	r3, [r1, #4]
 800bb58:	6043      	str	r3, [r0, #4]
 800bb5a:	698b      	ldr	r3, [r1, #24]
 800bb5c:	6183      	str	r3, [r0, #24]
 800bb5e:	688b      	ldr	r3, [r1, #8]
 800bb60:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800bb64:	f363 221f 	bfi	r2, r3, #8, #24
 800bb68:	b410      	push	{r4}
 800bb6a:	6082      	str	r2, [r0, #8]
 800bb6c:	b15b      	cbz	r3, 800bb86 <core_tensor_clone+0x36>
 800bb6e:	2300      	movs	r3, #0
 800bb70:	68cc      	ldr	r4, [r1, #12]
 800bb72:	68c2      	ldr	r2, [r0, #12]
 800bb74:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 800bb78:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 800bb7c:	3301      	adds	r3, #1
 800bb7e:	6882      	ldr	r2, [r0, #8]
 800bb80:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 800bb84:	d3f4      	bcc.n	800bb70 <core_tensor_clone+0x20>
 800bb86:	690b      	ldr	r3, [r1, #16]
 800bb88:	6902      	ldr	r2, [r0, #16]
 800bb8a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800bb8e:	f363 221f 	bfi	r2, r3, #8, #24
 800bb92:	6102      	str	r2, [r0, #16]
 800bb94:	b15b      	cbz	r3, 800bbae <core_tensor_clone+0x5e>
 800bb96:	2300      	movs	r3, #0
 800bb98:	694c      	ldr	r4, [r1, #20]
 800bb9a:	6942      	ldr	r2, [r0, #20]
 800bb9c:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 800bba0:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 800bba4:	3301      	adds	r3, #1
 800bba6:	6902      	ldr	r2, [r0, #16]
 800bba8:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 800bbac:	d3f4      	bcc.n	800bb98 <core_tensor_clone+0x48>
 800bbae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbb2:	4770      	bx	lr

0800bbb4 <core_array_clone>:
 800bbb4:	4684      	mov	ip, r0
 800bbb6:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 800bbb8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800bbbc:	4770      	bx	lr
 800bbbe:	bf00      	nop

0800bbc0 <malloc>:
 800bbc0:	4b02      	ldr	r3, [pc, #8]	@ (800bbcc <malloc+0xc>)
 800bbc2:	4601      	mov	r1, r0
 800bbc4:	6818      	ldr	r0, [r3, #0]
 800bbc6:	f000 b825 	b.w	800bc14 <_malloc_r>
 800bbca:	bf00      	nop
 800bbcc:	24000b5c 	.word	0x24000b5c

0800bbd0 <sbrk_aligned>:
 800bbd0:	b570      	push	{r4, r5, r6, lr}
 800bbd2:	4e0f      	ldr	r6, [pc, #60]	@ (800bc10 <sbrk_aligned+0x40>)
 800bbd4:	460c      	mov	r4, r1
 800bbd6:	6831      	ldr	r1, [r6, #0]
 800bbd8:	4605      	mov	r5, r0
 800bbda:	b911      	cbnz	r1, 800bbe2 <sbrk_aligned+0x12>
 800bbdc:	f000 fe9a 	bl	800c914 <_sbrk_r>
 800bbe0:	6030      	str	r0, [r6, #0]
 800bbe2:	4621      	mov	r1, r4
 800bbe4:	4628      	mov	r0, r5
 800bbe6:	f000 fe95 	bl	800c914 <_sbrk_r>
 800bbea:	1c43      	adds	r3, r0, #1
 800bbec:	d103      	bne.n	800bbf6 <sbrk_aligned+0x26>
 800bbee:	f04f 34ff 	mov.w	r4, #4294967295
 800bbf2:	4620      	mov	r0, r4
 800bbf4:	bd70      	pop	{r4, r5, r6, pc}
 800bbf6:	1cc4      	adds	r4, r0, #3
 800bbf8:	f024 0403 	bic.w	r4, r4, #3
 800bbfc:	42a0      	cmp	r0, r4
 800bbfe:	d0f8      	beq.n	800bbf2 <sbrk_aligned+0x22>
 800bc00:	1a21      	subs	r1, r4, r0
 800bc02:	4628      	mov	r0, r5
 800bc04:	f000 fe86 	bl	800c914 <_sbrk_r>
 800bc08:	3001      	adds	r0, #1
 800bc0a:	d1f2      	bne.n	800bbf2 <sbrk_aligned+0x22>
 800bc0c:	e7ef      	b.n	800bbee <sbrk_aligned+0x1e>
 800bc0e:	bf00      	nop
 800bc10:	240691a4 	.word	0x240691a4

0800bc14 <_malloc_r>:
 800bc14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc18:	1ccd      	adds	r5, r1, #3
 800bc1a:	f025 0503 	bic.w	r5, r5, #3
 800bc1e:	3508      	adds	r5, #8
 800bc20:	2d0c      	cmp	r5, #12
 800bc22:	bf38      	it	cc
 800bc24:	250c      	movcc	r5, #12
 800bc26:	2d00      	cmp	r5, #0
 800bc28:	4606      	mov	r6, r0
 800bc2a:	db01      	blt.n	800bc30 <_malloc_r+0x1c>
 800bc2c:	42a9      	cmp	r1, r5
 800bc2e:	d904      	bls.n	800bc3a <_malloc_r+0x26>
 800bc30:	230c      	movs	r3, #12
 800bc32:	6033      	str	r3, [r6, #0]
 800bc34:	2000      	movs	r0, #0
 800bc36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bd10 <_malloc_r+0xfc>
 800bc3e:	f000 f869 	bl	800bd14 <__malloc_lock>
 800bc42:	f8d8 3000 	ldr.w	r3, [r8]
 800bc46:	461c      	mov	r4, r3
 800bc48:	bb44      	cbnz	r4, 800bc9c <_malloc_r+0x88>
 800bc4a:	4629      	mov	r1, r5
 800bc4c:	4630      	mov	r0, r6
 800bc4e:	f7ff ffbf 	bl	800bbd0 <sbrk_aligned>
 800bc52:	1c43      	adds	r3, r0, #1
 800bc54:	4604      	mov	r4, r0
 800bc56:	d158      	bne.n	800bd0a <_malloc_r+0xf6>
 800bc58:	f8d8 4000 	ldr.w	r4, [r8]
 800bc5c:	4627      	mov	r7, r4
 800bc5e:	2f00      	cmp	r7, #0
 800bc60:	d143      	bne.n	800bcea <_malloc_r+0xd6>
 800bc62:	2c00      	cmp	r4, #0
 800bc64:	d04b      	beq.n	800bcfe <_malloc_r+0xea>
 800bc66:	6823      	ldr	r3, [r4, #0]
 800bc68:	4639      	mov	r1, r7
 800bc6a:	4630      	mov	r0, r6
 800bc6c:	eb04 0903 	add.w	r9, r4, r3
 800bc70:	f000 fe50 	bl	800c914 <_sbrk_r>
 800bc74:	4581      	cmp	r9, r0
 800bc76:	d142      	bne.n	800bcfe <_malloc_r+0xea>
 800bc78:	6821      	ldr	r1, [r4, #0]
 800bc7a:	1a6d      	subs	r5, r5, r1
 800bc7c:	4629      	mov	r1, r5
 800bc7e:	4630      	mov	r0, r6
 800bc80:	f7ff ffa6 	bl	800bbd0 <sbrk_aligned>
 800bc84:	3001      	adds	r0, #1
 800bc86:	d03a      	beq.n	800bcfe <_malloc_r+0xea>
 800bc88:	6823      	ldr	r3, [r4, #0]
 800bc8a:	442b      	add	r3, r5
 800bc8c:	6023      	str	r3, [r4, #0]
 800bc8e:	f8d8 3000 	ldr.w	r3, [r8]
 800bc92:	685a      	ldr	r2, [r3, #4]
 800bc94:	bb62      	cbnz	r2, 800bcf0 <_malloc_r+0xdc>
 800bc96:	f8c8 7000 	str.w	r7, [r8]
 800bc9a:	e00f      	b.n	800bcbc <_malloc_r+0xa8>
 800bc9c:	6822      	ldr	r2, [r4, #0]
 800bc9e:	1b52      	subs	r2, r2, r5
 800bca0:	d420      	bmi.n	800bce4 <_malloc_r+0xd0>
 800bca2:	2a0b      	cmp	r2, #11
 800bca4:	d917      	bls.n	800bcd6 <_malloc_r+0xc2>
 800bca6:	1961      	adds	r1, r4, r5
 800bca8:	42a3      	cmp	r3, r4
 800bcaa:	6025      	str	r5, [r4, #0]
 800bcac:	bf18      	it	ne
 800bcae:	6059      	strne	r1, [r3, #4]
 800bcb0:	6863      	ldr	r3, [r4, #4]
 800bcb2:	bf08      	it	eq
 800bcb4:	f8c8 1000 	streq.w	r1, [r8]
 800bcb8:	5162      	str	r2, [r4, r5]
 800bcba:	604b      	str	r3, [r1, #4]
 800bcbc:	4630      	mov	r0, r6
 800bcbe:	f000 f82f 	bl	800bd20 <__malloc_unlock>
 800bcc2:	f104 000b 	add.w	r0, r4, #11
 800bcc6:	1d23      	adds	r3, r4, #4
 800bcc8:	f020 0007 	bic.w	r0, r0, #7
 800bccc:	1ac2      	subs	r2, r0, r3
 800bcce:	bf1c      	itt	ne
 800bcd0:	1a1b      	subne	r3, r3, r0
 800bcd2:	50a3      	strne	r3, [r4, r2]
 800bcd4:	e7af      	b.n	800bc36 <_malloc_r+0x22>
 800bcd6:	6862      	ldr	r2, [r4, #4]
 800bcd8:	42a3      	cmp	r3, r4
 800bcda:	bf0c      	ite	eq
 800bcdc:	f8c8 2000 	streq.w	r2, [r8]
 800bce0:	605a      	strne	r2, [r3, #4]
 800bce2:	e7eb      	b.n	800bcbc <_malloc_r+0xa8>
 800bce4:	4623      	mov	r3, r4
 800bce6:	6864      	ldr	r4, [r4, #4]
 800bce8:	e7ae      	b.n	800bc48 <_malloc_r+0x34>
 800bcea:	463c      	mov	r4, r7
 800bcec:	687f      	ldr	r7, [r7, #4]
 800bcee:	e7b6      	b.n	800bc5e <_malloc_r+0x4a>
 800bcf0:	461a      	mov	r2, r3
 800bcf2:	685b      	ldr	r3, [r3, #4]
 800bcf4:	42a3      	cmp	r3, r4
 800bcf6:	d1fb      	bne.n	800bcf0 <_malloc_r+0xdc>
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	6053      	str	r3, [r2, #4]
 800bcfc:	e7de      	b.n	800bcbc <_malloc_r+0xa8>
 800bcfe:	230c      	movs	r3, #12
 800bd00:	6033      	str	r3, [r6, #0]
 800bd02:	4630      	mov	r0, r6
 800bd04:	f000 f80c 	bl	800bd20 <__malloc_unlock>
 800bd08:	e794      	b.n	800bc34 <_malloc_r+0x20>
 800bd0a:	6005      	str	r5, [r0, #0]
 800bd0c:	e7d6      	b.n	800bcbc <_malloc_r+0xa8>
 800bd0e:	bf00      	nop
 800bd10:	240691a8 	.word	0x240691a8

0800bd14 <__malloc_lock>:
 800bd14:	4801      	ldr	r0, [pc, #4]	@ (800bd1c <__malloc_lock+0x8>)
 800bd16:	f000 be4a 	b.w	800c9ae <__retarget_lock_acquire_recursive>
 800bd1a:	bf00      	nop
 800bd1c:	240692ec 	.word	0x240692ec

0800bd20 <__malloc_unlock>:
 800bd20:	4801      	ldr	r0, [pc, #4]	@ (800bd28 <__malloc_unlock+0x8>)
 800bd22:	f000 be45 	b.w	800c9b0 <__retarget_lock_release_recursive>
 800bd26:	bf00      	nop
 800bd28:	240692ec 	.word	0x240692ec

0800bd2c <_realloc_r>:
 800bd2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd30:	4680      	mov	r8, r0
 800bd32:	4615      	mov	r5, r2
 800bd34:	460c      	mov	r4, r1
 800bd36:	b921      	cbnz	r1, 800bd42 <_realloc_r+0x16>
 800bd38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd3c:	4611      	mov	r1, r2
 800bd3e:	f7ff bf69 	b.w	800bc14 <_malloc_r>
 800bd42:	b92a      	cbnz	r2, 800bd50 <_realloc_r+0x24>
 800bd44:	f001 fc2a 	bl	800d59c <_free_r>
 800bd48:	2400      	movs	r4, #0
 800bd4a:	4620      	mov	r0, r4
 800bd4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd50:	f001 fff0 	bl	800dd34 <_malloc_usable_size_r>
 800bd54:	4285      	cmp	r5, r0
 800bd56:	4606      	mov	r6, r0
 800bd58:	d802      	bhi.n	800bd60 <_realloc_r+0x34>
 800bd5a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bd5e:	d8f4      	bhi.n	800bd4a <_realloc_r+0x1e>
 800bd60:	4629      	mov	r1, r5
 800bd62:	4640      	mov	r0, r8
 800bd64:	f7ff ff56 	bl	800bc14 <_malloc_r>
 800bd68:	4607      	mov	r7, r0
 800bd6a:	2800      	cmp	r0, #0
 800bd6c:	d0ec      	beq.n	800bd48 <_realloc_r+0x1c>
 800bd6e:	42b5      	cmp	r5, r6
 800bd70:	462a      	mov	r2, r5
 800bd72:	4621      	mov	r1, r4
 800bd74:	bf28      	it	cs
 800bd76:	4632      	movcs	r2, r6
 800bd78:	f000 fe23 	bl	800c9c2 <memcpy>
 800bd7c:	4621      	mov	r1, r4
 800bd7e:	4640      	mov	r0, r8
 800bd80:	f001 fc0c 	bl	800d59c <_free_r>
 800bd84:	463c      	mov	r4, r7
 800bd86:	e7e0      	b.n	800bd4a <_realloc_r+0x1e>

0800bd88 <__cvt>:
 800bd88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd8a:	ed2d 8b02 	vpush	{d8}
 800bd8e:	eeb0 8b40 	vmov.f64	d8, d0
 800bd92:	b085      	sub	sp, #20
 800bd94:	4617      	mov	r7, r2
 800bd96:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800bd98:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bd9a:	ee18 2a90 	vmov	r2, s17
 800bd9e:	f025 0520 	bic.w	r5, r5, #32
 800bda2:	2a00      	cmp	r2, #0
 800bda4:	bfb6      	itet	lt
 800bda6:	222d      	movlt	r2, #45	@ 0x2d
 800bda8:	2200      	movge	r2, #0
 800bdaa:	eeb1 8b40 	vneglt.f64	d8, d0
 800bdae:	2d46      	cmp	r5, #70	@ 0x46
 800bdb0:	460c      	mov	r4, r1
 800bdb2:	701a      	strb	r2, [r3, #0]
 800bdb4:	d004      	beq.n	800bdc0 <__cvt+0x38>
 800bdb6:	2d45      	cmp	r5, #69	@ 0x45
 800bdb8:	d100      	bne.n	800bdbc <__cvt+0x34>
 800bdba:	3401      	adds	r4, #1
 800bdbc:	2102      	movs	r1, #2
 800bdbe:	e000      	b.n	800bdc2 <__cvt+0x3a>
 800bdc0:	2103      	movs	r1, #3
 800bdc2:	ab03      	add	r3, sp, #12
 800bdc4:	9301      	str	r3, [sp, #4]
 800bdc6:	ab02      	add	r3, sp, #8
 800bdc8:	9300      	str	r3, [sp, #0]
 800bdca:	4622      	mov	r2, r4
 800bdcc:	4633      	mov	r3, r6
 800bdce:	eeb0 0b48 	vmov.f64	d0, d8
 800bdd2:	f000 fe8d 	bl	800caf0 <_dtoa_r>
 800bdd6:	2d47      	cmp	r5, #71	@ 0x47
 800bdd8:	d114      	bne.n	800be04 <__cvt+0x7c>
 800bdda:	07fb      	lsls	r3, r7, #31
 800bddc:	d50a      	bpl.n	800bdf4 <__cvt+0x6c>
 800bdde:	1902      	adds	r2, r0, r4
 800bde0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bde4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bde8:	bf08      	it	eq
 800bdea:	9203      	streq	r2, [sp, #12]
 800bdec:	2130      	movs	r1, #48	@ 0x30
 800bdee:	9b03      	ldr	r3, [sp, #12]
 800bdf0:	4293      	cmp	r3, r2
 800bdf2:	d319      	bcc.n	800be28 <__cvt+0xa0>
 800bdf4:	9b03      	ldr	r3, [sp, #12]
 800bdf6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bdf8:	1a1b      	subs	r3, r3, r0
 800bdfa:	6013      	str	r3, [r2, #0]
 800bdfc:	b005      	add	sp, #20
 800bdfe:	ecbd 8b02 	vpop	{d8}
 800be02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be04:	2d46      	cmp	r5, #70	@ 0x46
 800be06:	eb00 0204 	add.w	r2, r0, r4
 800be0a:	d1e9      	bne.n	800bde0 <__cvt+0x58>
 800be0c:	7803      	ldrb	r3, [r0, #0]
 800be0e:	2b30      	cmp	r3, #48	@ 0x30
 800be10:	d107      	bne.n	800be22 <__cvt+0x9a>
 800be12:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800be16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be1a:	bf1c      	itt	ne
 800be1c:	f1c4 0401 	rsbne	r4, r4, #1
 800be20:	6034      	strne	r4, [r6, #0]
 800be22:	6833      	ldr	r3, [r6, #0]
 800be24:	441a      	add	r2, r3
 800be26:	e7db      	b.n	800bde0 <__cvt+0x58>
 800be28:	1c5c      	adds	r4, r3, #1
 800be2a:	9403      	str	r4, [sp, #12]
 800be2c:	7019      	strb	r1, [r3, #0]
 800be2e:	e7de      	b.n	800bdee <__cvt+0x66>

0800be30 <__exponent>:
 800be30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be32:	2900      	cmp	r1, #0
 800be34:	bfba      	itte	lt
 800be36:	4249      	neglt	r1, r1
 800be38:	232d      	movlt	r3, #45	@ 0x2d
 800be3a:	232b      	movge	r3, #43	@ 0x2b
 800be3c:	2909      	cmp	r1, #9
 800be3e:	7002      	strb	r2, [r0, #0]
 800be40:	7043      	strb	r3, [r0, #1]
 800be42:	dd29      	ble.n	800be98 <__exponent+0x68>
 800be44:	f10d 0307 	add.w	r3, sp, #7
 800be48:	461d      	mov	r5, r3
 800be4a:	270a      	movs	r7, #10
 800be4c:	461a      	mov	r2, r3
 800be4e:	fbb1 f6f7 	udiv	r6, r1, r7
 800be52:	fb07 1416 	mls	r4, r7, r6, r1
 800be56:	3430      	adds	r4, #48	@ 0x30
 800be58:	f802 4c01 	strb.w	r4, [r2, #-1]
 800be5c:	460c      	mov	r4, r1
 800be5e:	2c63      	cmp	r4, #99	@ 0x63
 800be60:	f103 33ff 	add.w	r3, r3, #4294967295
 800be64:	4631      	mov	r1, r6
 800be66:	dcf1      	bgt.n	800be4c <__exponent+0x1c>
 800be68:	3130      	adds	r1, #48	@ 0x30
 800be6a:	1e94      	subs	r4, r2, #2
 800be6c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800be70:	1c41      	adds	r1, r0, #1
 800be72:	4623      	mov	r3, r4
 800be74:	42ab      	cmp	r3, r5
 800be76:	d30a      	bcc.n	800be8e <__exponent+0x5e>
 800be78:	f10d 0309 	add.w	r3, sp, #9
 800be7c:	1a9b      	subs	r3, r3, r2
 800be7e:	42ac      	cmp	r4, r5
 800be80:	bf88      	it	hi
 800be82:	2300      	movhi	r3, #0
 800be84:	3302      	adds	r3, #2
 800be86:	4403      	add	r3, r0
 800be88:	1a18      	subs	r0, r3, r0
 800be8a:	b003      	add	sp, #12
 800be8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be8e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800be92:	f801 6f01 	strb.w	r6, [r1, #1]!
 800be96:	e7ed      	b.n	800be74 <__exponent+0x44>
 800be98:	2330      	movs	r3, #48	@ 0x30
 800be9a:	3130      	adds	r1, #48	@ 0x30
 800be9c:	7083      	strb	r3, [r0, #2]
 800be9e:	70c1      	strb	r1, [r0, #3]
 800bea0:	1d03      	adds	r3, r0, #4
 800bea2:	e7f1      	b.n	800be88 <__exponent+0x58>
 800bea4:	0000      	movs	r0, r0
	...

0800bea8 <_printf_float>:
 800bea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beac:	b08d      	sub	sp, #52	@ 0x34
 800beae:	460c      	mov	r4, r1
 800beb0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800beb4:	4616      	mov	r6, r2
 800beb6:	461f      	mov	r7, r3
 800beb8:	4605      	mov	r5, r0
 800beba:	f000 fcf3 	bl	800c8a4 <_localeconv_r>
 800bebe:	f8d0 b000 	ldr.w	fp, [r0]
 800bec2:	4658      	mov	r0, fp
 800bec4:	f7f4 fa5c 	bl	8000380 <strlen>
 800bec8:	2300      	movs	r3, #0
 800beca:	930a      	str	r3, [sp, #40]	@ 0x28
 800becc:	f8d8 3000 	ldr.w	r3, [r8]
 800bed0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800bed4:	6822      	ldr	r2, [r4, #0]
 800bed6:	9005      	str	r0, [sp, #20]
 800bed8:	3307      	adds	r3, #7
 800beda:	f023 0307 	bic.w	r3, r3, #7
 800bede:	f103 0108 	add.w	r1, r3, #8
 800bee2:	f8c8 1000 	str.w	r1, [r8]
 800bee6:	ed93 0b00 	vldr	d0, [r3]
 800beea:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800c148 <_printf_float+0x2a0>
 800beee:	eeb0 7bc0 	vabs.f64	d7, d0
 800bef2:	eeb4 7b46 	vcmp.f64	d7, d6
 800bef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800befa:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800befe:	dd24      	ble.n	800bf4a <_printf_float+0xa2>
 800bf00:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800bf04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf08:	d502      	bpl.n	800bf10 <_printf_float+0x68>
 800bf0a:	232d      	movs	r3, #45	@ 0x2d
 800bf0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bf10:	498f      	ldr	r1, [pc, #572]	@ (800c150 <_printf_float+0x2a8>)
 800bf12:	4b90      	ldr	r3, [pc, #576]	@ (800c154 <_printf_float+0x2ac>)
 800bf14:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800bf18:	bf94      	ite	ls
 800bf1a:	4688      	movls	r8, r1
 800bf1c:	4698      	movhi	r8, r3
 800bf1e:	f022 0204 	bic.w	r2, r2, #4
 800bf22:	2303      	movs	r3, #3
 800bf24:	6123      	str	r3, [r4, #16]
 800bf26:	6022      	str	r2, [r4, #0]
 800bf28:	f04f 0a00 	mov.w	sl, #0
 800bf2c:	9700      	str	r7, [sp, #0]
 800bf2e:	4633      	mov	r3, r6
 800bf30:	aa0b      	add	r2, sp, #44	@ 0x2c
 800bf32:	4621      	mov	r1, r4
 800bf34:	4628      	mov	r0, r5
 800bf36:	f000 f9d1 	bl	800c2dc <_printf_common>
 800bf3a:	3001      	adds	r0, #1
 800bf3c:	f040 8089 	bne.w	800c052 <_printf_float+0x1aa>
 800bf40:	f04f 30ff 	mov.w	r0, #4294967295
 800bf44:	b00d      	add	sp, #52	@ 0x34
 800bf46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf4a:	eeb4 0b40 	vcmp.f64	d0, d0
 800bf4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf52:	d709      	bvc.n	800bf68 <_printf_float+0xc0>
 800bf54:	ee10 3a90 	vmov	r3, s1
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	bfbc      	itt	lt
 800bf5c:	232d      	movlt	r3, #45	@ 0x2d
 800bf5e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bf62:	497d      	ldr	r1, [pc, #500]	@ (800c158 <_printf_float+0x2b0>)
 800bf64:	4b7d      	ldr	r3, [pc, #500]	@ (800c15c <_printf_float+0x2b4>)
 800bf66:	e7d5      	b.n	800bf14 <_printf_float+0x6c>
 800bf68:	6863      	ldr	r3, [r4, #4]
 800bf6a:	1c59      	adds	r1, r3, #1
 800bf6c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800bf70:	d139      	bne.n	800bfe6 <_printf_float+0x13e>
 800bf72:	2306      	movs	r3, #6
 800bf74:	6063      	str	r3, [r4, #4]
 800bf76:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	6022      	str	r2, [r4, #0]
 800bf7e:	9303      	str	r3, [sp, #12]
 800bf80:	ab0a      	add	r3, sp, #40	@ 0x28
 800bf82:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800bf86:	ab09      	add	r3, sp, #36	@ 0x24
 800bf88:	9300      	str	r3, [sp, #0]
 800bf8a:	6861      	ldr	r1, [r4, #4]
 800bf8c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800bf90:	4628      	mov	r0, r5
 800bf92:	f7ff fef9 	bl	800bd88 <__cvt>
 800bf96:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bf9a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bf9c:	4680      	mov	r8, r0
 800bf9e:	d129      	bne.n	800bff4 <_printf_float+0x14c>
 800bfa0:	1cc8      	adds	r0, r1, #3
 800bfa2:	db02      	blt.n	800bfaa <_printf_float+0x102>
 800bfa4:	6863      	ldr	r3, [r4, #4]
 800bfa6:	4299      	cmp	r1, r3
 800bfa8:	dd41      	ble.n	800c02e <_printf_float+0x186>
 800bfaa:	f1a9 0902 	sub.w	r9, r9, #2
 800bfae:	fa5f f989 	uxtb.w	r9, r9
 800bfb2:	3901      	subs	r1, #1
 800bfb4:	464a      	mov	r2, r9
 800bfb6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bfba:	9109      	str	r1, [sp, #36]	@ 0x24
 800bfbc:	f7ff ff38 	bl	800be30 <__exponent>
 800bfc0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bfc2:	1813      	adds	r3, r2, r0
 800bfc4:	2a01      	cmp	r2, #1
 800bfc6:	4682      	mov	sl, r0
 800bfc8:	6123      	str	r3, [r4, #16]
 800bfca:	dc02      	bgt.n	800bfd2 <_printf_float+0x12a>
 800bfcc:	6822      	ldr	r2, [r4, #0]
 800bfce:	07d2      	lsls	r2, r2, #31
 800bfd0:	d501      	bpl.n	800bfd6 <_printf_float+0x12e>
 800bfd2:	3301      	adds	r3, #1
 800bfd4:	6123      	str	r3, [r4, #16]
 800bfd6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d0a6      	beq.n	800bf2c <_printf_float+0x84>
 800bfde:	232d      	movs	r3, #45	@ 0x2d
 800bfe0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bfe4:	e7a2      	b.n	800bf2c <_printf_float+0x84>
 800bfe6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bfea:	d1c4      	bne.n	800bf76 <_printf_float+0xce>
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d1c2      	bne.n	800bf76 <_printf_float+0xce>
 800bff0:	2301      	movs	r3, #1
 800bff2:	e7bf      	b.n	800bf74 <_printf_float+0xcc>
 800bff4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800bff8:	d9db      	bls.n	800bfb2 <_printf_float+0x10a>
 800bffa:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800bffe:	d118      	bne.n	800c032 <_printf_float+0x18a>
 800c000:	2900      	cmp	r1, #0
 800c002:	6863      	ldr	r3, [r4, #4]
 800c004:	dd0b      	ble.n	800c01e <_printf_float+0x176>
 800c006:	6121      	str	r1, [r4, #16]
 800c008:	b913      	cbnz	r3, 800c010 <_printf_float+0x168>
 800c00a:	6822      	ldr	r2, [r4, #0]
 800c00c:	07d0      	lsls	r0, r2, #31
 800c00e:	d502      	bpl.n	800c016 <_printf_float+0x16e>
 800c010:	3301      	adds	r3, #1
 800c012:	440b      	add	r3, r1
 800c014:	6123      	str	r3, [r4, #16]
 800c016:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c018:	f04f 0a00 	mov.w	sl, #0
 800c01c:	e7db      	b.n	800bfd6 <_printf_float+0x12e>
 800c01e:	b913      	cbnz	r3, 800c026 <_printf_float+0x17e>
 800c020:	6822      	ldr	r2, [r4, #0]
 800c022:	07d2      	lsls	r2, r2, #31
 800c024:	d501      	bpl.n	800c02a <_printf_float+0x182>
 800c026:	3302      	adds	r3, #2
 800c028:	e7f4      	b.n	800c014 <_printf_float+0x16c>
 800c02a:	2301      	movs	r3, #1
 800c02c:	e7f2      	b.n	800c014 <_printf_float+0x16c>
 800c02e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800c032:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c034:	4299      	cmp	r1, r3
 800c036:	db05      	blt.n	800c044 <_printf_float+0x19c>
 800c038:	6823      	ldr	r3, [r4, #0]
 800c03a:	6121      	str	r1, [r4, #16]
 800c03c:	07d8      	lsls	r0, r3, #31
 800c03e:	d5ea      	bpl.n	800c016 <_printf_float+0x16e>
 800c040:	1c4b      	adds	r3, r1, #1
 800c042:	e7e7      	b.n	800c014 <_printf_float+0x16c>
 800c044:	2900      	cmp	r1, #0
 800c046:	bfd4      	ite	le
 800c048:	f1c1 0202 	rsble	r2, r1, #2
 800c04c:	2201      	movgt	r2, #1
 800c04e:	4413      	add	r3, r2
 800c050:	e7e0      	b.n	800c014 <_printf_float+0x16c>
 800c052:	6823      	ldr	r3, [r4, #0]
 800c054:	055a      	lsls	r2, r3, #21
 800c056:	d407      	bmi.n	800c068 <_printf_float+0x1c0>
 800c058:	6923      	ldr	r3, [r4, #16]
 800c05a:	4642      	mov	r2, r8
 800c05c:	4631      	mov	r1, r6
 800c05e:	4628      	mov	r0, r5
 800c060:	47b8      	blx	r7
 800c062:	3001      	adds	r0, #1
 800c064:	d12a      	bne.n	800c0bc <_printf_float+0x214>
 800c066:	e76b      	b.n	800bf40 <_printf_float+0x98>
 800c068:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800c06c:	f240 80e0 	bls.w	800c230 <_printf_float+0x388>
 800c070:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800c074:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c07c:	d133      	bne.n	800c0e6 <_printf_float+0x23e>
 800c07e:	4a38      	ldr	r2, [pc, #224]	@ (800c160 <_printf_float+0x2b8>)
 800c080:	2301      	movs	r3, #1
 800c082:	4631      	mov	r1, r6
 800c084:	4628      	mov	r0, r5
 800c086:	47b8      	blx	r7
 800c088:	3001      	adds	r0, #1
 800c08a:	f43f af59 	beq.w	800bf40 <_printf_float+0x98>
 800c08e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c092:	4543      	cmp	r3, r8
 800c094:	db02      	blt.n	800c09c <_printf_float+0x1f4>
 800c096:	6823      	ldr	r3, [r4, #0]
 800c098:	07d8      	lsls	r0, r3, #31
 800c09a:	d50f      	bpl.n	800c0bc <_printf_float+0x214>
 800c09c:	9b05      	ldr	r3, [sp, #20]
 800c09e:	465a      	mov	r2, fp
 800c0a0:	4631      	mov	r1, r6
 800c0a2:	4628      	mov	r0, r5
 800c0a4:	47b8      	blx	r7
 800c0a6:	3001      	adds	r0, #1
 800c0a8:	f43f af4a 	beq.w	800bf40 <_printf_float+0x98>
 800c0ac:	f04f 0900 	mov.w	r9, #0
 800c0b0:	f108 38ff 	add.w	r8, r8, #4294967295
 800c0b4:	f104 0a1a 	add.w	sl, r4, #26
 800c0b8:	45c8      	cmp	r8, r9
 800c0ba:	dc09      	bgt.n	800c0d0 <_printf_float+0x228>
 800c0bc:	6823      	ldr	r3, [r4, #0]
 800c0be:	079b      	lsls	r3, r3, #30
 800c0c0:	f100 8107 	bmi.w	800c2d2 <_printf_float+0x42a>
 800c0c4:	68e0      	ldr	r0, [r4, #12]
 800c0c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c0c8:	4298      	cmp	r0, r3
 800c0ca:	bfb8      	it	lt
 800c0cc:	4618      	movlt	r0, r3
 800c0ce:	e739      	b.n	800bf44 <_printf_float+0x9c>
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	4652      	mov	r2, sl
 800c0d4:	4631      	mov	r1, r6
 800c0d6:	4628      	mov	r0, r5
 800c0d8:	47b8      	blx	r7
 800c0da:	3001      	adds	r0, #1
 800c0dc:	f43f af30 	beq.w	800bf40 <_printf_float+0x98>
 800c0e0:	f109 0901 	add.w	r9, r9, #1
 800c0e4:	e7e8      	b.n	800c0b8 <_printf_float+0x210>
 800c0e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	dc3b      	bgt.n	800c164 <_printf_float+0x2bc>
 800c0ec:	4a1c      	ldr	r2, [pc, #112]	@ (800c160 <_printf_float+0x2b8>)
 800c0ee:	2301      	movs	r3, #1
 800c0f0:	4631      	mov	r1, r6
 800c0f2:	4628      	mov	r0, r5
 800c0f4:	47b8      	blx	r7
 800c0f6:	3001      	adds	r0, #1
 800c0f8:	f43f af22 	beq.w	800bf40 <_printf_float+0x98>
 800c0fc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c100:	ea59 0303 	orrs.w	r3, r9, r3
 800c104:	d102      	bne.n	800c10c <_printf_float+0x264>
 800c106:	6823      	ldr	r3, [r4, #0]
 800c108:	07d9      	lsls	r1, r3, #31
 800c10a:	d5d7      	bpl.n	800c0bc <_printf_float+0x214>
 800c10c:	9b05      	ldr	r3, [sp, #20]
 800c10e:	465a      	mov	r2, fp
 800c110:	4631      	mov	r1, r6
 800c112:	4628      	mov	r0, r5
 800c114:	47b8      	blx	r7
 800c116:	3001      	adds	r0, #1
 800c118:	f43f af12 	beq.w	800bf40 <_printf_float+0x98>
 800c11c:	f04f 0a00 	mov.w	sl, #0
 800c120:	f104 0b1a 	add.w	fp, r4, #26
 800c124:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c126:	425b      	negs	r3, r3
 800c128:	4553      	cmp	r3, sl
 800c12a:	dc01      	bgt.n	800c130 <_printf_float+0x288>
 800c12c:	464b      	mov	r3, r9
 800c12e:	e794      	b.n	800c05a <_printf_float+0x1b2>
 800c130:	2301      	movs	r3, #1
 800c132:	465a      	mov	r2, fp
 800c134:	4631      	mov	r1, r6
 800c136:	4628      	mov	r0, r5
 800c138:	47b8      	blx	r7
 800c13a:	3001      	adds	r0, #1
 800c13c:	f43f af00 	beq.w	800bf40 <_printf_float+0x98>
 800c140:	f10a 0a01 	add.w	sl, sl, #1
 800c144:	e7ee      	b.n	800c124 <_printf_float+0x27c>
 800c146:	bf00      	nop
 800c148:	ffffffff 	.word	0xffffffff
 800c14c:	7fefffff 	.word	0x7fefffff
 800c150:	0806d288 	.word	0x0806d288
 800c154:	0806d28c 	.word	0x0806d28c
 800c158:	0806d290 	.word	0x0806d290
 800c15c:	0806d294 	.word	0x0806d294
 800c160:	0806d298 	.word	0x0806d298
 800c164:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c166:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c16a:	4553      	cmp	r3, sl
 800c16c:	bfa8      	it	ge
 800c16e:	4653      	movge	r3, sl
 800c170:	2b00      	cmp	r3, #0
 800c172:	4699      	mov	r9, r3
 800c174:	dc37      	bgt.n	800c1e6 <_printf_float+0x33e>
 800c176:	2300      	movs	r3, #0
 800c178:	9307      	str	r3, [sp, #28]
 800c17a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c17e:	f104 021a 	add.w	r2, r4, #26
 800c182:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c184:	9907      	ldr	r1, [sp, #28]
 800c186:	9306      	str	r3, [sp, #24]
 800c188:	eba3 0309 	sub.w	r3, r3, r9
 800c18c:	428b      	cmp	r3, r1
 800c18e:	dc31      	bgt.n	800c1f4 <_printf_float+0x34c>
 800c190:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c192:	459a      	cmp	sl, r3
 800c194:	dc3b      	bgt.n	800c20e <_printf_float+0x366>
 800c196:	6823      	ldr	r3, [r4, #0]
 800c198:	07da      	lsls	r2, r3, #31
 800c19a:	d438      	bmi.n	800c20e <_printf_float+0x366>
 800c19c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c19e:	ebaa 0903 	sub.w	r9, sl, r3
 800c1a2:	9b06      	ldr	r3, [sp, #24]
 800c1a4:	ebaa 0303 	sub.w	r3, sl, r3
 800c1a8:	4599      	cmp	r9, r3
 800c1aa:	bfa8      	it	ge
 800c1ac:	4699      	movge	r9, r3
 800c1ae:	f1b9 0f00 	cmp.w	r9, #0
 800c1b2:	dc34      	bgt.n	800c21e <_printf_float+0x376>
 800c1b4:	f04f 0800 	mov.w	r8, #0
 800c1b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c1bc:	f104 0b1a 	add.w	fp, r4, #26
 800c1c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1c2:	ebaa 0303 	sub.w	r3, sl, r3
 800c1c6:	eba3 0309 	sub.w	r3, r3, r9
 800c1ca:	4543      	cmp	r3, r8
 800c1cc:	f77f af76 	ble.w	800c0bc <_printf_float+0x214>
 800c1d0:	2301      	movs	r3, #1
 800c1d2:	465a      	mov	r2, fp
 800c1d4:	4631      	mov	r1, r6
 800c1d6:	4628      	mov	r0, r5
 800c1d8:	47b8      	blx	r7
 800c1da:	3001      	adds	r0, #1
 800c1dc:	f43f aeb0 	beq.w	800bf40 <_printf_float+0x98>
 800c1e0:	f108 0801 	add.w	r8, r8, #1
 800c1e4:	e7ec      	b.n	800c1c0 <_printf_float+0x318>
 800c1e6:	4642      	mov	r2, r8
 800c1e8:	4631      	mov	r1, r6
 800c1ea:	4628      	mov	r0, r5
 800c1ec:	47b8      	blx	r7
 800c1ee:	3001      	adds	r0, #1
 800c1f0:	d1c1      	bne.n	800c176 <_printf_float+0x2ce>
 800c1f2:	e6a5      	b.n	800bf40 <_printf_float+0x98>
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	4631      	mov	r1, r6
 800c1f8:	4628      	mov	r0, r5
 800c1fa:	9206      	str	r2, [sp, #24]
 800c1fc:	47b8      	blx	r7
 800c1fe:	3001      	adds	r0, #1
 800c200:	f43f ae9e 	beq.w	800bf40 <_printf_float+0x98>
 800c204:	9b07      	ldr	r3, [sp, #28]
 800c206:	9a06      	ldr	r2, [sp, #24]
 800c208:	3301      	adds	r3, #1
 800c20a:	9307      	str	r3, [sp, #28]
 800c20c:	e7b9      	b.n	800c182 <_printf_float+0x2da>
 800c20e:	9b05      	ldr	r3, [sp, #20]
 800c210:	465a      	mov	r2, fp
 800c212:	4631      	mov	r1, r6
 800c214:	4628      	mov	r0, r5
 800c216:	47b8      	blx	r7
 800c218:	3001      	adds	r0, #1
 800c21a:	d1bf      	bne.n	800c19c <_printf_float+0x2f4>
 800c21c:	e690      	b.n	800bf40 <_printf_float+0x98>
 800c21e:	9a06      	ldr	r2, [sp, #24]
 800c220:	464b      	mov	r3, r9
 800c222:	4442      	add	r2, r8
 800c224:	4631      	mov	r1, r6
 800c226:	4628      	mov	r0, r5
 800c228:	47b8      	blx	r7
 800c22a:	3001      	adds	r0, #1
 800c22c:	d1c2      	bne.n	800c1b4 <_printf_float+0x30c>
 800c22e:	e687      	b.n	800bf40 <_printf_float+0x98>
 800c230:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800c234:	f1b9 0f01 	cmp.w	r9, #1
 800c238:	dc01      	bgt.n	800c23e <_printf_float+0x396>
 800c23a:	07db      	lsls	r3, r3, #31
 800c23c:	d536      	bpl.n	800c2ac <_printf_float+0x404>
 800c23e:	2301      	movs	r3, #1
 800c240:	4642      	mov	r2, r8
 800c242:	4631      	mov	r1, r6
 800c244:	4628      	mov	r0, r5
 800c246:	47b8      	blx	r7
 800c248:	3001      	adds	r0, #1
 800c24a:	f43f ae79 	beq.w	800bf40 <_printf_float+0x98>
 800c24e:	9b05      	ldr	r3, [sp, #20]
 800c250:	465a      	mov	r2, fp
 800c252:	4631      	mov	r1, r6
 800c254:	4628      	mov	r0, r5
 800c256:	47b8      	blx	r7
 800c258:	3001      	adds	r0, #1
 800c25a:	f43f ae71 	beq.w	800bf40 <_printf_float+0x98>
 800c25e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800c262:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c26a:	f109 39ff 	add.w	r9, r9, #4294967295
 800c26e:	d018      	beq.n	800c2a2 <_printf_float+0x3fa>
 800c270:	464b      	mov	r3, r9
 800c272:	f108 0201 	add.w	r2, r8, #1
 800c276:	4631      	mov	r1, r6
 800c278:	4628      	mov	r0, r5
 800c27a:	47b8      	blx	r7
 800c27c:	3001      	adds	r0, #1
 800c27e:	d10c      	bne.n	800c29a <_printf_float+0x3f2>
 800c280:	e65e      	b.n	800bf40 <_printf_float+0x98>
 800c282:	2301      	movs	r3, #1
 800c284:	465a      	mov	r2, fp
 800c286:	4631      	mov	r1, r6
 800c288:	4628      	mov	r0, r5
 800c28a:	47b8      	blx	r7
 800c28c:	3001      	adds	r0, #1
 800c28e:	f43f ae57 	beq.w	800bf40 <_printf_float+0x98>
 800c292:	f108 0801 	add.w	r8, r8, #1
 800c296:	45c8      	cmp	r8, r9
 800c298:	dbf3      	blt.n	800c282 <_printf_float+0x3da>
 800c29a:	4653      	mov	r3, sl
 800c29c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c2a0:	e6dc      	b.n	800c05c <_printf_float+0x1b4>
 800c2a2:	f04f 0800 	mov.w	r8, #0
 800c2a6:	f104 0b1a 	add.w	fp, r4, #26
 800c2aa:	e7f4      	b.n	800c296 <_printf_float+0x3ee>
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	4642      	mov	r2, r8
 800c2b0:	e7e1      	b.n	800c276 <_printf_float+0x3ce>
 800c2b2:	2301      	movs	r3, #1
 800c2b4:	464a      	mov	r2, r9
 800c2b6:	4631      	mov	r1, r6
 800c2b8:	4628      	mov	r0, r5
 800c2ba:	47b8      	blx	r7
 800c2bc:	3001      	adds	r0, #1
 800c2be:	f43f ae3f 	beq.w	800bf40 <_printf_float+0x98>
 800c2c2:	f108 0801 	add.w	r8, r8, #1
 800c2c6:	68e3      	ldr	r3, [r4, #12]
 800c2c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c2ca:	1a5b      	subs	r3, r3, r1
 800c2cc:	4543      	cmp	r3, r8
 800c2ce:	dcf0      	bgt.n	800c2b2 <_printf_float+0x40a>
 800c2d0:	e6f8      	b.n	800c0c4 <_printf_float+0x21c>
 800c2d2:	f04f 0800 	mov.w	r8, #0
 800c2d6:	f104 0919 	add.w	r9, r4, #25
 800c2da:	e7f4      	b.n	800c2c6 <_printf_float+0x41e>

0800c2dc <_printf_common>:
 800c2dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2e0:	4616      	mov	r6, r2
 800c2e2:	4698      	mov	r8, r3
 800c2e4:	688a      	ldr	r2, [r1, #8]
 800c2e6:	690b      	ldr	r3, [r1, #16]
 800c2e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c2ec:	4293      	cmp	r3, r2
 800c2ee:	bfb8      	it	lt
 800c2f0:	4613      	movlt	r3, r2
 800c2f2:	6033      	str	r3, [r6, #0]
 800c2f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c2f8:	4607      	mov	r7, r0
 800c2fa:	460c      	mov	r4, r1
 800c2fc:	b10a      	cbz	r2, 800c302 <_printf_common+0x26>
 800c2fe:	3301      	adds	r3, #1
 800c300:	6033      	str	r3, [r6, #0]
 800c302:	6823      	ldr	r3, [r4, #0]
 800c304:	0699      	lsls	r1, r3, #26
 800c306:	bf42      	ittt	mi
 800c308:	6833      	ldrmi	r3, [r6, #0]
 800c30a:	3302      	addmi	r3, #2
 800c30c:	6033      	strmi	r3, [r6, #0]
 800c30e:	6825      	ldr	r5, [r4, #0]
 800c310:	f015 0506 	ands.w	r5, r5, #6
 800c314:	d106      	bne.n	800c324 <_printf_common+0x48>
 800c316:	f104 0a19 	add.w	sl, r4, #25
 800c31a:	68e3      	ldr	r3, [r4, #12]
 800c31c:	6832      	ldr	r2, [r6, #0]
 800c31e:	1a9b      	subs	r3, r3, r2
 800c320:	42ab      	cmp	r3, r5
 800c322:	dc26      	bgt.n	800c372 <_printf_common+0x96>
 800c324:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c328:	6822      	ldr	r2, [r4, #0]
 800c32a:	3b00      	subs	r3, #0
 800c32c:	bf18      	it	ne
 800c32e:	2301      	movne	r3, #1
 800c330:	0692      	lsls	r2, r2, #26
 800c332:	d42b      	bmi.n	800c38c <_printf_common+0xb0>
 800c334:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c338:	4641      	mov	r1, r8
 800c33a:	4638      	mov	r0, r7
 800c33c:	47c8      	blx	r9
 800c33e:	3001      	adds	r0, #1
 800c340:	d01e      	beq.n	800c380 <_printf_common+0xa4>
 800c342:	6823      	ldr	r3, [r4, #0]
 800c344:	6922      	ldr	r2, [r4, #16]
 800c346:	f003 0306 	and.w	r3, r3, #6
 800c34a:	2b04      	cmp	r3, #4
 800c34c:	bf02      	ittt	eq
 800c34e:	68e5      	ldreq	r5, [r4, #12]
 800c350:	6833      	ldreq	r3, [r6, #0]
 800c352:	1aed      	subeq	r5, r5, r3
 800c354:	68a3      	ldr	r3, [r4, #8]
 800c356:	bf0c      	ite	eq
 800c358:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c35c:	2500      	movne	r5, #0
 800c35e:	4293      	cmp	r3, r2
 800c360:	bfc4      	itt	gt
 800c362:	1a9b      	subgt	r3, r3, r2
 800c364:	18ed      	addgt	r5, r5, r3
 800c366:	2600      	movs	r6, #0
 800c368:	341a      	adds	r4, #26
 800c36a:	42b5      	cmp	r5, r6
 800c36c:	d11a      	bne.n	800c3a4 <_printf_common+0xc8>
 800c36e:	2000      	movs	r0, #0
 800c370:	e008      	b.n	800c384 <_printf_common+0xa8>
 800c372:	2301      	movs	r3, #1
 800c374:	4652      	mov	r2, sl
 800c376:	4641      	mov	r1, r8
 800c378:	4638      	mov	r0, r7
 800c37a:	47c8      	blx	r9
 800c37c:	3001      	adds	r0, #1
 800c37e:	d103      	bne.n	800c388 <_printf_common+0xac>
 800c380:	f04f 30ff 	mov.w	r0, #4294967295
 800c384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c388:	3501      	adds	r5, #1
 800c38a:	e7c6      	b.n	800c31a <_printf_common+0x3e>
 800c38c:	18e1      	adds	r1, r4, r3
 800c38e:	1c5a      	adds	r2, r3, #1
 800c390:	2030      	movs	r0, #48	@ 0x30
 800c392:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c396:	4422      	add	r2, r4
 800c398:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c39c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c3a0:	3302      	adds	r3, #2
 800c3a2:	e7c7      	b.n	800c334 <_printf_common+0x58>
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	4622      	mov	r2, r4
 800c3a8:	4641      	mov	r1, r8
 800c3aa:	4638      	mov	r0, r7
 800c3ac:	47c8      	blx	r9
 800c3ae:	3001      	adds	r0, #1
 800c3b0:	d0e6      	beq.n	800c380 <_printf_common+0xa4>
 800c3b2:	3601      	adds	r6, #1
 800c3b4:	e7d9      	b.n	800c36a <_printf_common+0x8e>
	...

0800c3b8 <_printf_i>:
 800c3b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c3bc:	7e0f      	ldrb	r7, [r1, #24]
 800c3be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c3c0:	2f78      	cmp	r7, #120	@ 0x78
 800c3c2:	4691      	mov	r9, r2
 800c3c4:	4680      	mov	r8, r0
 800c3c6:	460c      	mov	r4, r1
 800c3c8:	469a      	mov	sl, r3
 800c3ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c3ce:	d807      	bhi.n	800c3e0 <_printf_i+0x28>
 800c3d0:	2f62      	cmp	r7, #98	@ 0x62
 800c3d2:	d80a      	bhi.n	800c3ea <_printf_i+0x32>
 800c3d4:	2f00      	cmp	r7, #0
 800c3d6:	f000 80d2 	beq.w	800c57e <_printf_i+0x1c6>
 800c3da:	2f58      	cmp	r7, #88	@ 0x58
 800c3dc:	f000 80b9 	beq.w	800c552 <_printf_i+0x19a>
 800c3e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c3e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c3e8:	e03a      	b.n	800c460 <_printf_i+0xa8>
 800c3ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c3ee:	2b15      	cmp	r3, #21
 800c3f0:	d8f6      	bhi.n	800c3e0 <_printf_i+0x28>
 800c3f2:	a101      	add	r1, pc, #4	@ (adr r1, 800c3f8 <_printf_i+0x40>)
 800c3f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c3f8:	0800c451 	.word	0x0800c451
 800c3fc:	0800c465 	.word	0x0800c465
 800c400:	0800c3e1 	.word	0x0800c3e1
 800c404:	0800c3e1 	.word	0x0800c3e1
 800c408:	0800c3e1 	.word	0x0800c3e1
 800c40c:	0800c3e1 	.word	0x0800c3e1
 800c410:	0800c465 	.word	0x0800c465
 800c414:	0800c3e1 	.word	0x0800c3e1
 800c418:	0800c3e1 	.word	0x0800c3e1
 800c41c:	0800c3e1 	.word	0x0800c3e1
 800c420:	0800c3e1 	.word	0x0800c3e1
 800c424:	0800c565 	.word	0x0800c565
 800c428:	0800c48f 	.word	0x0800c48f
 800c42c:	0800c51f 	.word	0x0800c51f
 800c430:	0800c3e1 	.word	0x0800c3e1
 800c434:	0800c3e1 	.word	0x0800c3e1
 800c438:	0800c587 	.word	0x0800c587
 800c43c:	0800c3e1 	.word	0x0800c3e1
 800c440:	0800c48f 	.word	0x0800c48f
 800c444:	0800c3e1 	.word	0x0800c3e1
 800c448:	0800c3e1 	.word	0x0800c3e1
 800c44c:	0800c527 	.word	0x0800c527
 800c450:	6833      	ldr	r3, [r6, #0]
 800c452:	1d1a      	adds	r2, r3, #4
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	6032      	str	r2, [r6, #0]
 800c458:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c45c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c460:	2301      	movs	r3, #1
 800c462:	e09d      	b.n	800c5a0 <_printf_i+0x1e8>
 800c464:	6833      	ldr	r3, [r6, #0]
 800c466:	6820      	ldr	r0, [r4, #0]
 800c468:	1d19      	adds	r1, r3, #4
 800c46a:	6031      	str	r1, [r6, #0]
 800c46c:	0606      	lsls	r6, r0, #24
 800c46e:	d501      	bpl.n	800c474 <_printf_i+0xbc>
 800c470:	681d      	ldr	r5, [r3, #0]
 800c472:	e003      	b.n	800c47c <_printf_i+0xc4>
 800c474:	0645      	lsls	r5, r0, #25
 800c476:	d5fb      	bpl.n	800c470 <_printf_i+0xb8>
 800c478:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c47c:	2d00      	cmp	r5, #0
 800c47e:	da03      	bge.n	800c488 <_printf_i+0xd0>
 800c480:	232d      	movs	r3, #45	@ 0x2d
 800c482:	426d      	negs	r5, r5
 800c484:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c488:	4859      	ldr	r0, [pc, #356]	@ (800c5f0 <_printf_i+0x238>)
 800c48a:	230a      	movs	r3, #10
 800c48c:	e011      	b.n	800c4b2 <_printf_i+0xfa>
 800c48e:	6821      	ldr	r1, [r4, #0]
 800c490:	6833      	ldr	r3, [r6, #0]
 800c492:	0608      	lsls	r0, r1, #24
 800c494:	f853 5b04 	ldr.w	r5, [r3], #4
 800c498:	d402      	bmi.n	800c4a0 <_printf_i+0xe8>
 800c49a:	0649      	lsls	r1, r1, #25
 800c49c:	bf48      	it	mi
 800c49e:	b2ad      	uxthmi	r5, r5
 800c4a0:	2f6f      	cmp	r7, #111	@ 0x6f
 800c4a2:	4853      	ldr	r0, [pc, #332]	@ (800c5f0 <_printf_i+0x238>)
 800c4a4:	6033      	str	r3, [r6, #0]
 800c4a6:	bf14      	ite	ne
 800c4a8:	230a      	movne	r3, #10
 800c4aa:	2308      	moveq	r3, #8
 800c4ac:	2100      	movs	r1, #0
 800c4ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c4b2:	6866      	ldr	r6, [r4, #4]
 800c4b4:	60a6      	str	r6, [r4, #8]
 800c4b6:	2e00      	cmp	r6, #0
 800c4b8:	bfa2      	ittt	ge
 800c4ba:	6821      	ldrge	r1, [r4, #0]
 800c4bc:	f021 0104 	bicge.w	r1, r1, #4
 800c4c0:	6021      	strge	r1, [r4, #0]
 800c4c2:	b90d      	cbnz	r5, 800c4c8 <_printf_i+0x110>
 800c4c4:	2e00      	cmp	r6, #0
 800c4c6:	d04b      	beq.n	800c560 <_printf_i+0x1a8>
 800c4c8:	4616      	mov	r6, r2
 800c4ca:	fbb5 f1f3 	udiv	r1, r5, r3
 800c4ce:	fb03 5711 	mls	r7, r3, r1, r5
 800c4d2:	5dc7      	ldrb	r7, [r0, r7]
 800c4d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c4d8:	462f      	mov	r7, r5
 800c4da:	42bb      	cmp	r3, r7
 800c4dc:	460d      	mov	r5, r1
 800c4de:	d9f4      	bls.n	800c4ca <_printf_i+0x112>
 800c4e0:	2b08      	cmp	r3, #8
 800c4e2:	d10b      	bne.n	800c4fc <_printf_i+0x144>
 800c4e4:	6823      	ldr	r3, [r4, #0]
 800c4e6:	07df      	lsls	r7, r3, #31
 800c4e8:	d508      	bpl.n	800c4fc <_printf_i+0x144>
 800c4ea:	6923      	ldr	r3, [r4, #16]
 800c4ec:	6861      	ldr	r1, [r4, #4]
 800c4ee:	4299      	cmp	r1, r3
 800c4f0:	bfde      	ittt	le
 800c4f2:	2330      	movle	r3, #48	@ 0x30
 800c4f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c4f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c4fc:	1b92      	subs	r2, r2, r6
 800c4fe:	6122      	str	r2, [r4, #16]
 800c500:	f8cd a000 	str.w	sl, [sp]
 800c504:	464b      	mov	r3, r9
 800c506:	aa03      	add	r2, sp, #12
 800c508:	4621      	mov	r1, r4
 800c50a:	4640      	mov	r0, r8
 800c50c:	f7ff fee6 	bl	800c2dc <_printf_common>
 800c510:	3001      	adds	r0, #1
 800c512:	d14a      	bne.n	800c5aa <_printf_i+0x1f2>
 800c514:	f04f 30ff 	mov.w	r0, #4294967295
 800c518:	b004      	add	sp, #16
 800c51a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c51e:	6823      	ldr	r3, [r4, #0]
 800c520:	f043 0320 	orr.w	r3, r3, #32
 800c524:	6023      	str	r3, [r4, #0]
 800c526:	4833      	ldr	r0, [pc, #204]	@ (800c5f4 <_printf_i+0x23c>)
 800c528:	2778      	movs	r7, #120	@ 0x78
 800c52a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c52e:	6823      	ldr	r3, [r4, #0]
 800c530:	6831      	ldr	r1, [r6, #0]
 800c532:	061f      	lsls	r7, r3, #24
 800c534:	f851 5b04 	ldr.w	r5, [r1], #4
 800c538:	d402      	bmi.n	800c540 <_printf_i+0x188>
 800c53a:	065f      	lsls	r7, r3, #25
 800c53c:	bf48      	it	mi
 800c53e:	b2ad      	uxthmi	r5, r5
 800c540:	6031      	str	r1, [r6, #0]
 800c542:	07d9      	lsls	r1, r3, #31
 800c544:	bf44      	itt	mi
 800c546:	f043 0320 	orrmi.w	r3, r3, #32
 800c54a:	6023      	strmi	r3, [r4, #0]
 800c54c:	b11d      	cbz	r5, 800c556 <_printf_i+0x19e>
 800c54e:	2310      	movs	r3, #16
 800c550:	e7ac      	b.n	800c4ac <_printf_i+0xf4>
 800c552:	4827      	ldr	r0, [pc, #156]	@ (800c5f0 <_printf_i+0x238>)
 800c554:	e7e9      	b.n	800c52a <_printf_i+0x172>
 800c556:	6823      	ldr	r3, [r4, #0]
 800c558:	f023 0320 	bic.w	r3, r3, #32
 800c55c:	6023      	str	r3, [r4, #0]
 800c55e:	e7f6      	b.n	800c54e <_printf_i+0x196>
 800c560:	4616      	mov	r6, r2
 800c562:	e7bd      	b.n	800c4e0 <_printf_i+0x128>
 800c564:	6833      	ldr	r3, [r6, #0]
 800c566:	6825      	ldr	r5, [r4, #0]
 800c568:	6961      	ldr	r1, [r4, #20]
 800c56a:	1d18      	adds	r0, r3, #4
 800c56c:	6030      	str	r0, [r6, #0]
 800c56e:	062e      	lsls	r6, r5, #24
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	d501      	bpl.n	800c578 <_printf_i+0x1c0>
 800c574:	6019      	str	r1, [r3, #0]
 800c576:	e002      	b.n	800c57e <_printf_i+0x1c6>
 800c578:	0668      	lsls	r0, r5, #25
 800c57a:	d5fb      	bpl.n	800c574 <_printf_i+0x1bc>
 800c57c:	8019      	strh	r1, [r3, #0]
 800c57e:	2300      	movs	r3, #0
 800c580:	6123      	str	r3, [r4, #16]
 800c582:	4616      	mov	r6, r2
 800c584:	e7bc      	b.n	800c500 <_printf_i+0x148>
 800c586:	6833      	ldr	r3, [r6, #0]
 800c588:	1d1a      	adds	r2, r3, #4
 800c58a:	6032      	str	r2, [r6, #0]
 800c58c:	681e      	ldr	r6, [r3, #0]
 800c58e:	6862      	ldr	r2, [r4, #4]
 800c590:	2100      	movs	r1, #0
 800c592:	4630      	mov	r0, r6
 800c594:	f7f3 fea4 	bl	80002e0 <memchr>
 800c598:	b108      	cbz	r0, 800c59e <_printf_i+0x1e6>
 800c59a:	1b80      	subs	r0, r0, r6
 800c59c:	6060      	str	r0, [r4, #4]
 800c59e:	6863      	ldr	r3, [r4, #4]
 800c5a0:	6123      	str	r3, [r4, #16]
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c5a8:	e7aa      	b.n	800c500 <_printf_i+0x148>
 800c5aa:	6923      	ldr	r3, [r4, #16]
 800c5ac:	4632      	mov	r2, r6
 800c5ae:	4649      	mov	r1, r9
 800c5b0:	4640      	mov	r0, r8
 800c5b2:	47d0      	blx	sl
 800c5b4:	3001      	adds	r0, #1
 800c5b6:	d0ad      	beq.n	800c514 <_printf_i+0x15c>
 800c5b8:	6823      	ldr	r3, [r4, #0]
 800c5ba:	079b      	lsls	r3, r3, #30
 800c5bc:	d413      	bmi.n	800c5e6 <_printf_i+0x22e>
 800c5be:	68e0      	ldr	r0, [r4, #12]
 800c5c0:	9b03      	ldr	r3, [sp, #12]
 800c5c2:	4298      	cmp	r0, r3
 800c5c4:	bfb8      	it	lt
 800c5c6:	4618      	movlt	r0, r3
 800c5c8:	e7a6      	b.n	800c518 <_printf_i+0x160>
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	4632      	mov	r2, r6
 800c5ce:	4649      	mov	r1, r9
 800c5d0:	4640      	mov	r0, r8
 800c5d2:	47d0      	blx	sl
 800c5d4:	3001      	adds	r0, #1
 800c5d6:	d09d      	beq.n	800c514 <_printf_i+0x15c>
 800c5d8:	3501      	adds	r5, #1
 800c5da:	68e3      	ldr	r3, [r4, #12]
 800c5dc:	9903      	ldr	r1, [sp, #12]
 800c5de:	1a5b      	subs	r3, r3, r1
 800c5e0:	42ab      	cmp	r3, r5
 800c5e2:	dcf2      	bgt.n	800c5ca <_printf_i+0x212>
 800c5e4:	e7eb      	b.n	800c5be <_printf_i+0x206>
 800c5e6:	2500      	movs	r5, #0
 800c5e8:	f104 0619 	add.w	r6, r4, #25
 800c5ec:	e7f5      	b.n	800c5da <_printf_i+0x222>
 800c5ee:	bf00      	nop
 800c5f0:	0806d29a 	.word	0x0806d29a
 800c5f4:	0806d2ab 	.word	0x0806d2ab

0800c5f8 <std>:
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	b510      	push	{r4, lr}
 800c5fc:	4604      	mov	r4, r0
 800c5fe:	e9c0 3300 	strd	r3, r3, [r0]
 800c602:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c606:	6083      	str	r3, [r0, #8]
 800c608:	8181      	strh	r1, [r0, #12]
 800c60a:	6643      	str	r3, [r0, #100]	@ 0x64
 800c60c:	81c2      	strh	r2, [r0, #14]
 800c60e:	6183      	str	r3, [r0, #24]
 800c610:	4619      	mov	r1, r3
 800c612:	2208      	movs	r2, #8
 800c614:	305c      	adds	r0, #92	@ 0x5c
 800c616:	f000 f92e 	bl	800c876 <memset>
 800c61a:	4b0d      	ldr	r3, [pc, #52]	@ (800c650 <std+0x58>)
 800c61c:	6263      	str	r3, [r4, #36]	@ 0x24
 800c61e:	4b0d      	ldr	r3, [pc, #52]	@ (800c654 <std+0x5c>)
 800c620:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c622:	4b0d      	ldr	r3, [pc, #52]	@ (800c658 <std+0x60>)
 800c624:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c626:	4b0d      	ldr	r3, [pc, #52]	@ (800c65c <std+0x64>)
 800c628:	6323      	str	r3, [r4, #48]	@ 0x30
 800c62a:	4b0d      	ldr	r3, [pc, #52]	@ (800c660 <std+0x68>)
 800c62c:	6224      	str	r4, [r4, #32]
 800c62e:	429c      	cmp	r4, r3
 800c630:	d006      	beq.n	800c640 <std+0x48>
 800c632:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c636:	4294      	cmp	r4, r2
 800c638:	d002      	beq.n	800c640 <std+0x48>
 800c63a:	33d0      	adds	r3, #208	@ 0xd0
 800c63c:	429c      	cmp	r4, r3
 800c63e:	d105      	bne.n	800c64c <std+0x54>
 800c640:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c648:	f000 b9b0 	b.w	800c9ac <__retarget_lock_init_recursive>
 800c64c:	bd10      	pop	{r4, pc}
 800c64e:	bf00      	nop
 800c650:	0800c7bd 	.word	0x0800c7bd
 800c654:	0800c7df 	.word	0x0800c7df
 800c658:	0800c817 	.word	0x0800c817
 800c65c:	0800c83b 	.word	0x0800c83b
 800c660:	240691ac 	.word	0x240691ac

0800c664 <stdio_exit_handler>:
 800c664:	4a02      	ldr	r2, [pc, #8]	@ (800c670 <stdio_exit_handler+0xc>)
 800c666:	4903      	ldr	r1, [pc, #12]	@ (800c674 <stdio_exit_handler+0x10>)
 800c668:	4803      	ldr	r0, [pc, #12]	@ (800c678 <stdio_exit_handler+0x14>)
 800c66a:	f000 b869 	b.w	800c740 <_fwalk_sglue>
 800c66e:	bf00      	nop
 800c670:	24000b50 	.word	0x24000b50
 800c674:	0800e0fd 	.word	0x0800e0fd
 800c678:	24000b60 	.word	0x24000b60

0800c67c <cleanup_stdio>:
 800c67c:	6841      	ldr	r1, [r0, #4]
 800c67e:	4b0c      	ldr	r3, [pc, #48]	@ (800c6b0 <cleanup_stdio+0x34>)
 800c680:	4299      	cmp	r1, r3
 800c682:	b510      	push	{r4, lr}
 800c684:	4604      	mov	r4, r0
 800c686:	d001      	beq.n	800c68c <cleanup_stdio+0x10>
 800c688:	f001 fd38 	bl	800e0fc <_fflush_r>
 800c68c:	68a1      	ldr	r1, [r4, #8]
 800c68e:	4b09      	ldr	r3, [pc, #36]	@ (800c6b4 <cleanup_stdio+0x38>)
 800c690:	4299      	cmp	r1, r3
 800c692:	d002      	beq.n	800c69a <cleanup_stdio+0x1e>
 800c694:	4620      	mov	r0, r4
 800c696:	f001 fd31 	bl	800e0fc <_fflush_r>
 800c69a:	68e1      	ldr	r1, [r4, #12]
 800c69c:	4b06      	ldr	r3, [pc, #24]	@ (800c6b8 <cleanup_stdio+0x3c>)
 800c69e:	4299      	cmp	r1, r3
 800c6a0:	d004      	beq.n	800c6ac <cleanup_stdio+0x30>
 800c6a2:	4620      	mov	r0, r4
 800c6a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6a8:	f001 bd28 	b.w	800e0fc <_fflush_r>
 800c6ac:	bd10      	pop	{r4, pc}
 800c6ae:	bf00      	nop
 800c6b0:	240691ac 	.word	0x240691ac
 800c6b4:	24069214 	.word	0x24069214
 800c6b8:	2406927c 	.word	0x2406927c

0800c6bc <global_stdio_init.part.0>:
 800c6bc:	b510      	push	{r4, lr}
 800c6be:	4b0b      	ldr	r3, [pc, #44]	@ (800c6ec <global_stdio_init.part.0+0x30>)
 800c6c0:	4c0b      	ldr	r4, [pc, #44]	@ (800c6f0 <global_stdio_init.part.0+0x34>)
 800c6c2:	4a0c      	ldr	r2, [pc, #48]	@ (800c6f4 <global_stdio_init.part.0+0x38>)
 800c6c4:	601a      	str	r2, [r3, #0]
 800c6c6:	4620      	mov	r0, r4
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	2104      	movs	r1, #4
 800c6cc:	f7ff ff94 	bl	800c5f8 <std>
 800c6d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c6d4:	2201      	movs	r2, #1
 800c6d6:	2109      	movs	r1, #9
 800c6d8:	f7ff ff8e 	bl	800c5f8 <std>
 800c6dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c6e0:	2202      	movs	r2, #2
 800c6e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6e6:	2112      	movs	r1, #18
 800c6e8:	f7ff bf86 	b.w	800c5f8 <std>
 800c6ec:	240692e4 	.word	0x240692e4
 800c6f0:	240691ac 	.word	0x240691ac
 800c6f4:	0800c665 	.word	0x0800c665

0800c6f8 <__sfp_lock_acquire>:
 800c6f8:	4801      	ldr	r0, [pc, #4]	@ (800c700 <__sfp_lock_acquire+0x8>)
 800c6fa:	f000 b958 	b.w	800c9ae <__retarget_lock_acquire_recursive>
 800c6fe:	bf00      	nop
 800c700:	240692ed 	.word	0x240692ed

0800c704 <__sfp_lock_release>:
 800c704:	4801      	ldr	r0, [pc, #4]	@ (800c70c <__sfp_lock_release+0x8>)
 800c706:	f000 b953 	b.w	800c9b0 <__retarget_lock_release_recursive>
 800c70a:	bf00      	nop
 800c70c:	240692ed 	.word	0x240692ed

0800c710 <__sinit>:
 800c710:	b510      	push	{r4, lr}
 800c712:	4604      	mov	r4, r0
 800c714:	f7ff fff0 	bl	800c6f8 <__sfp_lock_acquire>
 800c718:	6a23      	ldr	r3, [r4, #32]
 800c71a:	b11b      	cbz	r3, 800c724 <__sinit+0x14>
 800c71c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c720:	f7ff bff0 	b.w	800c704 <__sfp_lock_release>
 800c724:	4b04      	ldr	r3, [pc, #16]	@ (800c738 <__sinit+0x28>)
 800c726:	6223      	str	r3, [r4, #32]
 800c728:	4b04      	ldr	r3, [pc, #16]	@ (800c73c <__sinit+0x2c>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d1f5      	bne.n	800c71c <__sinit+0xc>
 800c730:	f7ff ffc4 	bl	800c6bc <global_stdio_init.part.0>
 800c734:	e7f2      	b.n	800c71c <__sinit+0xc>
 800c736:	bf00      	nop
 800c738:	0800c67d 	.word	0x0800c67d
 800c73c:	240692e4 	.word	0x240692e4

0800c740 <_fwalk_sglue>:
 800c740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c744:	4607      	mov	r7, r0
 800c746:	4688      	mov	r8, r1
 800c748:	4614      	mov	r4, r2
 800c74a:	2600      	movs	r6, #0
 800c74c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c750:	f1b9 0901 	subs.w	r9, r9, #1
 800c754:	d505      	bpl.n	800c762 <_fwalk_sglue+0x22>
 800c756:	6824      	ldr	r4, [r4, #0]
 800c758:	2c00      	cmp	r4, #0
 800c75a:	d1f7      	bne.n	800c74c <_fwalk_sglue+0xc>
 800c75c:	4630      	mov	r0, r6
 800c75e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c762:	89ab      	ldrh	r3, [r5, #12]
 800c764:	2b01      	cmp	r3, #1
 800c766:	d907      	bls.n	800c778 <_fwalk_sglue+0x38>
 800c768:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c76c:	3301      	adds	r3, #1
 800c76e:	d003      	beq.n	800c778 <_fwalk_sglue+0x38>
 800c770:	4629      	mov	r1, r5
 800c772:	4638      	mov	r0, r7
 800c774:	47c0      	blx	r8
 800c776:	4306      	orrs	r6, r0
 800c778:	3568      	adds	r5, #104	@ 0x68
 800c77a:	e7e9      	b.n	800c750 <_fwalk_sglue+0x10>

0800c77c <siprintf>:
 800c77c:	b40e      	push	{r1, r2, r3}
 800c77e:	b500      	push	{lr}
 800c780:	b09c      	sub	sp, #112	@ 0x70
 800c782:	ab1d      	add	r3, sp, #116	@ 0x74
 800c784:	9002      	str	r0, [sp, #8]
 800c786:	9006      	str	r0, [sp, #24]
 800c788:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c78c:	4809      	ldr	r0, [pc, #36]	@ (800c7b4 <siprintf+0x38>)
 800c78e:	9107      	str	r1, [sp, #28]
 800c790:	9104      	str	r1, [sp, #16]
 800c792:	4909      	ldr	r1, [pc, #36]	@ (800c7b8 <siprintf+0x3c>)
 800c794:	f853 2b04 	ldr.w	r2, [r3], #4
 800c798:	9105      	str	r1, [sp, #20]
 800c79a:	6800      	ldr	r0, [r0, #0]
 800c79c:	9301      	str	r3, [sp, #4]
 800c79e:	a902      	add	r1, sp, #8
 800c7a0:	f001 fb2c 	bl	800ddfc <_svfiprintf_r>
 800c7a4:	9b02      	ldr	r3, [sp, #8]
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	701a      	strb	r2, [r3, #0]
 800c7aa:	b01c      	add	sp, #112	@ 0x70
 800c7ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800c7b0:	b003      	add	sp, #12
 800c7b2:	4770      	bx	lr
 800c7b4:	24000b5c 	.word	0x24000b5c
 800c7b8:	ffff0208 	.word	0xffff0208

0800c7bc <__sread>:
 800c7bc:	b510      	push	{r4, lr}
 800c7be:	460c      	mov	r4, r1
 800c7c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7c4:	f000 f894 	bl	800c8f0 <_read_r>
 800c7c8:	2800      	cmp	r0, #0
 800c7ca:	bfab      	itete	ge
 800c7cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c7ce:	89a3      	ldrhlt	r3, [r4, #12]
 800c7d0:	181b      	addge	r3, r3, r0
 800c7d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c7d6:	bfac      	ite	ge
 800c7d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c7da:	81a3      	strhlt	r3, [r4, #12]
 800c7dc:	bd10      	pop	{r4, pc}

0800c7de <__swrite>:
 800c7de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7e2:	461f      	mov	r7, r3
 800c7e4:	898b      	ldrh	r3, [r1, #12]
 800c7e6:	05db      	lsls	r3, r3, #23
 800c7e8:	4605      	mov	r5, r0
 800c7ea:	460c      	mov	r4, r1
 800c7ec:	4616      	mov	r6, r2
 800c7ee:	d505      	bpl.n	800c7fc <__swrite+0x1e>
 800c7f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7f4:	2302      	movs	r3, #2
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	f000 f868 	bl	800c8cc <_lseek_r>
 800c7fc:	89a3      	ldrh	r3, [r4, #12]
 800c7fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c802:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c806:	81a3      	strh	r3, [r4, #12]
 800c808:	4632      	mov	r2, r6
 800c80a:	463b      	mov	r3, r7
 800c80c:	4628      	mov	r0, r5
 800c80e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c812:	f000 b88f 	b.w	800c934 <_write_r>

0800c816 <__sseek>:
 800c816:	b510      	push	{r4, lr}
 800c818:	460c      	mov	r4, r1
 800c81a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c81e:	f000 f855 	bl	800c8cc <_lseek_r>
 800c822:	1c43      	adds	r3, r0, #1
 800c824:	89a3      	ldrh	r3, [r4, #12]
 800c826:	bf15      	itete	ne
 800c828:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c82a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c82e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c832:	81a3      	strheq	r3, [r4, #12]
 800c834:	bf18      	it	ne
 800c836:	81a3      	strhne	r3, [r4, #12]
 800c838:	bd10      	pop	{r4, pc}

0800c83a <__sclose>:
 800c83a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c83e:	f000 b835 	b.w	800c8ac <_close_r>

0800c842 <memmove>:
 800c842:	4288      	cmp	r0, r1
 800c844:	b510      	push	{r4, lr}
 800c846:	eb01 0402 	add.w	r4, r1, r2
 800c84a:	d902      	bls.n	800c852 <memmove+0x10>
 800c84c:	4284      	cmp	r4, r0
 800c84e:	4623      	mov	r3, r4
 800c850:	d807      	bhi.n	800c862 <memmove+0x20>
 800c852:	1e43      	subs	r3, r0, #1
 800c854:	42a1      	cmp	r1, r4
 800c856:	d008      	beq.n	800c86a <memmove+0x28>
 800c858:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c85c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c860:	e7f8      	b.n	800c854 <memmove+0x12>
 800c862:	4402      	add	r2, r0
 800c864:	4601      	mov	r1, r0
 800c866:	428a      	cmp	r2, r1
 800c868:	d100      	bne.n	800c86c <memmove+0x2a>
 800c86a:	bd10      	pop	{r4, pc}
 800c86c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c870:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c874:	e7f7      	b.n	800c866 <memmove+0x24>

0800c876 <memset>:
 800c876:	4402      	add	r2, r0
 800c878:	4603      	mov	r3, r0
 800c87a:	4293      	cmp	r3, r2
 800c87c:	d100      	bne.n	800c880 <memset+0xa>
 800c87e:	4770      	bx	lr
 800c880:	f803 1b01 	strb.w	r1, [r3], #1
 800c884:	e7f9      	b.n	800c87a <memset+0x4>

0800c886 <strcat>:
 800c886:	b510      	push	{r4, lr}
 800c888:	4602      	mov	r2, r0
 800c88a:	7814      	ldrb	r4, [r2, #0]
 800c88c:	4613      	mov	r3, r2
 800c88e:	3201      	adds	r2, #1
 800c890:	2c00      	cmp	r4, #0
 800c892:	d1fa      	bne.n	800c88a <strcat+0x4>
 800c894:	3b01      	subs	r3, #1
 800c896:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c89a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c89e:	2a00      	cmp	r2, #0
 800c8a0:	d1f9      	bne.n	800c896 <strcat+0x10>
 800c8a2:	bd10      	pop	{r4, pc}

0800c8a4 <_localeconv_r>:
 800c8a4:	4800      	ldr	r0, [pc, #0]	@ (800c8a8 <_localeconv_r+0x4>)
 800c8a6:	4770      	bx	lr
 800c8a8:	24000c9c 	.word	0x24000c9c

0800c8ac <_close_r>:
 800c8ac:	b538      	push	{r3, r4, r5, lr}
 800c8ae:	4d06      	ldr	r5, [pc, #24]	@ (800c8c8 <_close_r+0x1c>)
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	4604      	mov	r4, r0
 800c8b4:	4608      	mov	r0, r1
 800c8b6:	602b      	str	r3, [r5, #0]
 800c8b8:	f002 f918 	bl	800eaec <_close>
 800c8bc:	1c43      	adds	r3, r0, #1
 800c8be:	d102      	bne.n	800c8c6 <_close_r+0x1a>
 800c8c0:	682b      	ldr	r3, [r5, #0]
 800c8c2:	b103      	cbz	r3, 800c8c6 <_close_r+0x1a>
 800c8c4:	6023      	str	r3, [r4, #0]
 800c8c6:	bd38      	pop	{r3, r4, r5, pc}
 800c8c8:	240692e8 	.word	0x240692e8

0800c8cc <_lseek_r>:
 800c8cc:	b538      	push	{r3, r4, r5, lr}
 800c8ce:	4d07      	ldr	r5, [pc, #28]	@ (800c8ec <_lseek_r+0x20>)
 800c8d0:	4604      	mov	r4, r0
 800c8d2:	4608      	mov	r0, r1
 800c8d4:	4611      	mov	r1, r2
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	602a      	str	r2, [r5, #0]
 800c8da:	461a      	mov	r2, r3
 800c8dc:	f002 f92e 	bl	800eb3c <_lseek>
 800c8e0:	1c43      	adds	r3, r0, #1
 800c8e2:	d102      	bne.n	800c8ea <_lseek_r+0x1e>
 800c8e4:	682b      	ldr	r3, [r5, #0]
 800c8e6:	b103      	cbz	r3, 800c8ea <_lseek_r+0x1e>
 800c8e8:	6023      	str	r3, [r4, #0]
 800c8ea:	bd38      	pop	{r3, r4, r5, pc}
 800c8ec:	240692e8 	.word	0x240692e8

0800c8f0 <_read_r>:
 800c8f0:	b538      	push	{r3, r4, r5, lr}
 800c8f2:	4d07      	ldr	r5, [pc, #28]	@ (800c910 <_read_r+0x20>)
 800c8f4:	4604      	mov	r4, r0
 800c8f6:	4608      	mov	r0, r1
 800c8f8:	4611      	mov	r1, r2
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	602a      	str	r2, [r5, #0]
 800c8fe:	461a      	mov	r2, r3
 800c900:	f002 f924 	bl	800eb4c <_read>
 800c904:	1c43      	adds	r3, r0, #1
 800c906:	d102      	bne.n	800c90e <_read_r+0x1e>
 800c908:	682b      	ldr	r3, [r5, #0]
 800c90a:	b103      	cbz	r3, 800c90e <_read_r+0x1e>
 800c90c:	6023      	str	r3, [r4, #0]
 800c90e:	bd38      	pop	{r3, r4, r5, pc}
 800c910:	240692e8 	.word	0x240692e8

0800c914 <_sbrk_r>:
 800c914:	b538      	push	{r3, r4, r5, lr}
 800c916:	4d06      	ldr	r5, [pc, #24]	@ (800c930 <_sbrk_r+0x1c>)
 800c918:	2300      	movs	r3, #0
 800c91a:	4604      	mov	r4, r0
 800c91c:	4608      	mov	r0, r1
 800c91e:	602b      	str	r3, [r5, #0]
 800c920:	f7f4 fcca 	bl	80012b8 <_sbrk>
 800c924:	1c43      	adds	r3, r0, #1
 800c926:	d102      	bne.n	800c92e <_sbrk_r+0x1a>
 800c928:	682b      	ldr	r3, [r5, #0]
 800c92a:	b103      	cbz	r3, 800c92e <_sbrk_r+0x1a>
 800c92c:	6023      	str	r3, [r4, #0]
 800c92e:	bd38      	pop	{r3, r4, r5, pc}
 800c930:	240692e8 	.word	0x240692e8

0800c934 <_write_r>:
 800c934:	b538      	push	{r3, r4, r5, lr}
 800c936:	4d07      	ldr	r5, [pc, #28]	@ (800c954 <_write_r+0x20>)
 800c938:	4604      	mov	r4, r0
 800c93a:	4608      	mov	r0, r1
 800c93c:	4611      	mov	r1, r2
 800c93e:	2200      	movs	r2, #0
 800c940:	602a      	str	r2, [r5, #0]
 800c942:	461a      	mov	r2, r3
 800c944:	f002 f90a 	bl	800eb5c <_write>
 800c948:	1c43      	adds	r3, r0, #1
 800c94a:	d102      	bne.n	800c952 <_write_r+0x1e>
 800c94c:	682b      	ldr	r3, [r5, #0]
 800c94e:	b103      	cbz	r3, 800c952 <_write_r+0x1e>
 800c950:	6023      	str	r3, [r4, #0]
 800c952:	bd38      	pop	{r3, r4, r5, pc}
 800c954:	240692e8 	.word	0x240692e8

0800c958 <__errno>:
 800c958:	4b01      	ldr	r3, [pc, #4]	@ (800c960 <__errno+0x8>)
 800c95a:	6818      	ldr	r0, [r3, #0]
 800c95c:	4770      	bx	lr
 800c95e:	bf00      	nop
 800c960:	24000b5c 	.word	0x24000b5c

0800c964 <__libc_init_array>:
 800c964:	b570      	push	{r4, r5, r6, lr}
 800c966:	4d0d      	ldr	r5, [pc, #52]	@ (800c99c <__libc_init_array+0x38>)
 800c968:	4c0d      	ldr	r4, [pc, #52]	@ (800c9a0 <__libc_init_array+0x3c>)
 800c96a:	1b64      	subs	r4, r4, r5
 800c96c:	10a4      	asrs	r4, r4, #2
 800c96e:	2600      	movs	r6, #0
 800c970:	42a6      	cmp	r6, r4
 800c972:	d109      	bne.n	800c988 <__libc_init_array+0x24>
 800c974:	4d0b      	ldr	r5, [pc, #44]	@ (800c9a4 <__libc_init_array+0x40>)
 800c976:	4c0c      	ldr	r4, [pc, #48]	@ (800c9a8 <__libc_init_array+0x44>)
 800c978:	f002 f8fa 	bl	800eb70 <_init>
 800c97c:	1b64      	subs	r4, r4, r5
 800c97e:	10a4      	asrs	r4, r4, #2
 800c980:	2600      	movs	r6, #0
 800c982:	42a6      	cmp	r6, r4
 800c984:	d105      	bne.n	800c992 <__libc_init_array+0x2e>
 800c986:	bd70      	pop	{r4, r5, r6, pc}
 800c988:	f855 3b04 	ldr.w	r3, [r5], #4
 800c98c:	4798      	blx	r3
 800c98e:	3601      	adds	r6, #1
 800c990:	e7ee      	b.n	800c970 <__libc_init_array+0xc>
 800c992:	f855 3b04 	ldr.w	r3, [r5], #4
 800c996:	4798      	blx	r3
 800c998:	3601      	adds	r6, #1
 800c99a:	e7f2      	b.n	800c982 <__libc_init_array+0x1e>
 800c99c:	0806d870 	.word	0x0806d870
 800c9a0:	0806d870 	.word	0x0806d870
 800c9a4:	0806d870 	.word	0x0806d870
 800c9a8:	0806d874 	.word	0x0806d874

0800c9ac <__retarget_lock_init_recursive>:
 800c9ac:	4770      	bx	lr

0800c9ae <__retarget_lock_acquire_recursive>:
 800c9ae:	4770      	bx	lr

0800c9b0 <__retarget_lock_release_recursive>:
 800c9b0:	4770      	bx	lr

0800c9b2 <strcpy>:
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c9b8:	f803 2b01 	strb.w	r2, [r3], #1
 800c9bc:	2a00      	cmp	r2, #0
 800c9be:	d1f9      	bne.n	800c9b4 <strcpy+0x2>
 800c9c0:	4770      	bx	lr

0800c9c2 <memcpy>:
 800c9c2:	440a      	add	r2, r1
 800c9c4:	4291      	cmp	r1, r2
 800c9c6:	f100 33ff 	add.w	r3, r0, #4294967295
 800c9ca:	d100      	bne.n	800c9ce <memcpy+0xc>
 800c9cc:	4770      	bx	lr
 800c9ce:	b510      	push	{r4, lr}
 800c9d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c9d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c9d8:	4291      	cmp	r1, r2
 800c9da:	d1f9      	bne.n	800c9d0 <memcpy+0xe>
 800c9dc:	bd10      	pop	{r4, pc}

0800c9de <quorem>:
 800c9de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9e2:	6903      	ldr	r3, [r0, #16]
 800c9e4:	690c      	ldr	r4, [r1, #16]
 800c9e6:	42a3      	cmp	r3, r4
 800c9e8:	4607      	mov	r7, r0
 800c9ea:	db7e      	blt.n	800caea <quorem+0x10c>
 800c9ec:	3c01      	subs	r4, #1
 800c9ee:	f101 0814 	add.w	r8, r1, #20
 800c9f2:	00a3      	lsls	r3, r4, #2
 800c9f4:	f100 0514 	add.w	r5, r0, #20
 800c9f8:	9300      	str	r3, [sp, #0]
 800c9fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c9fe:	9301      	str	r3, [sp, #4]
 800ca00:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ca04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ca08:	3301      	adds	r3, #1
 800ca0a:	429a      	cmp	r2, r3
 800ca0c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ca10:	fbb2 f6f3 	udiv	r6, r2, r3
 800ca14:	d32e      	bcc.n	800ca74 <quorem+0x96>
 800ca16:	f04f 0a00 	mov.w	sl, #0
 800ca1a:	46c4      	mov	ip, r8
 800ca1c:	46ae      	mov	lr, r5
 800ca1e:	46d3      	mov	fp, sl
 800ca20:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ca24:	b298      	uxth	r0, r3
 800ca26:	fb06 a000 	mla	r0, r6, r0, sl
 800ca2a:	0c02      	lsrs	r2, r0, #16
 800ca2c:	0c1b      	lsrs	r3, r3, #16
 800ca2e:	fb06 2303 	mla	r3, r6, r3, r2
 800ca32:	f8de 2000 	ldr.w	r2, [lr]
 800ca36:	b280      	uxth	r0, r0
 800ca38:	b292      	uxth	r2, r2
 800ca3a:	1a12      	subs	r2, r2, r0
 800ca3c:	445a      	add	r2, fp
 800ca3e:	f8de 0000 	ldr.w	r0, [lr]
 800ca42:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ca46:	b29b      	uxth	r3, r3
 800ca48:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ca4c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ca50:	b292      	uxth	r2, r2
 800ca52:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ca56:	45e1      	cmp	r9, ip
 800ca58:	f84e 2b04 	str.w	r2, [lr], #4
 800ca5c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ca60:	d2de      	bcs.n	800ca20 <quorem+0x42>
 800ca62:	9b00      	ldr	r3, [sp, #0]
 800ca64:	58eb      	ldr	r3, [r5, r3]
 800ca66:	b92b      	cbnz	r3, 800ca74 <quorem+0x96>
 800ca68:	9b01      	ldr	r3, [sp, #4]
 800ca6a:	3b04      	subs	r3, #4
 800ca6c:	429d      	cmp	r5, r3
 800ca6e:	461a      	mov	r2, r3
 800ca70:	d32f      	bcc.n	800cad2 <quorem+0xf4>
 800ca72:	613c      	str	r4, [r7, #16]
 800ca74:	4638      	mov	r0, r7
 800ca76:	f001 f855 	bl	800db24 <__mcmp>
 800ca7a:	2800      	cmp	r0, #0
 800ca7c:	db25      	blt.n	800caca <quorem+0xec>
 800ca7e:	4629      	mov	r1, r5
 800ca80:	2000      	movs	r0, #0
 800ca82:	f858 2b04 	ldr.w	r2, [r8], #4
 800ca86:	f8d1 c000 	ldr.w	ip, [r1]
 800ca8a:	fa1f fe82 	uxth.w	lr, r2
 800ca8e:	fa1f f38c 	uxth.w	r3, ip
 800ca92:	eba3 030e 	sub.w	r3, r3, lr
 800ca96:	4403      	add	r3, r0
 800ca98:	0c12      	lsrs	r2, r2, #16
 800ca9a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ca9e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800caa2:	b29b      	uxth	r3, r3
 800caa4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800caa8:	45c1      	cmp	r9, r8
 800caaa:	f841 3b04 	str.w	r3, [r1], #4
 800caae:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cab2:	d2e6      	bcs.n	800ca82 <quorem+0xa4>
 800cab4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cab8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cabc:	b922      	cbnz	r2, 800cac8 <quorem+0xea>
 800cabe:	3b04      	subs	r3, #4
 800cac0:	429d      	cmp	r5, r3
 800cac2:	461a      	mov	r2, r3
 800cac4:	d30b      	bcc.n	800cade <quorem+0x100>
 800cac6:	613c      	str	r4, [r7, #16]
 800cac8:	3601      	adds	r6, #1
 800caca:	4630      	mov	r0, r6
 800cacc:	b003      	add	sp, #12
 800cace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cad2:	6812      	ldr	r2, [r2, #0]
 800cad4:	3b04      	subs	r3, #4
 800cad6:	2a00      	cmp	r2, #0
 800cad8:	d1cb      	bne.n	800ca72 <quorem+0x94>
 800cada:	3c01      	subs	r4, #1
 800cadc:	e7c6      	b.n	800ca6c <quorem+0x8e>
 800cade:	6812      	ldr	r2, [r2, #0]
 800cae0:	3b04      	subs	r3, #4
 800cae2:	2a00      	cmp	r2, #0
 800cae4:	d1ef      	bne.n	800cac6 <quorem+0xe8>
 800cae6:	3c01      	subs	r4, #1
 800cae8:	e7ea      	b.n	800cac0 <quorem+0xe2>
 800caea:	2000      	movs	r0, #0
 800caec:	e7ee      	b.n	800cacc <quorem+0xee>
	...

0800caf0 <_dtoa_r>:
 800caf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caf4:	ed2d 8b02 	vpush	{d8}
 800caf8:	69c7      	ldr	r7, [r0, #28]
 800cafa:	b091      	sub	sp, #68	@ 0x44
 800cafc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800cb00:	ec55 4b10 	vmov	r4, r5, d0
 800cb04:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800cb06:	9107      	str	r1, [sp, #28]
 800cb08:	4681      	mov	r9, r0
 800cb0a:	9209      	str	r2, [sp, #36]	@ 0x24
 800cb0c:	930d      	str	r3, [sp, #52]	@ 0x34
 800cb0e:	b97f      	cbnz	r7, 800cb30 <_dtoa_r+0x40>
 800cb10:	2010      	movs	r0, #16
 800cb12:	f7ff f855 	bl	800bbc0 <malloc>
 800cb16:	4602      	mov	r2, r0
 800cb18:	f8c9 001c 	str.w	r0, [r9, #28]
 800cb1c:	b920      	cbnz	r0, 800cb28 <_dtoa_r+0x38>
 800cb1e:	4ba0      	ldr	r3, [pc, #640]	@ (800cda0 <_dtoa_r+0x2b0>)
 800cb20:	21ef      	movs	r1, #239	@ 0xef
 800cb22:	48a0      	ldr	r0, [pc, #640]	@ (800cda4 <_dtoa_r+0x2b4>)
 800cb24:	f001 fb12 	bl	800e14c <__assert_func>
 800cb28:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cb2c:	6007      	str	r7, [r0, #0]
 800cb2e:	60c7      	str	r7, [r0, #12]
 800cb30:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cb34:	6819      	ldr	r1, [r3, #0]
 800cb36:	b159      	cbz	r1, 800cb50 <_dtoa_r+0x60>
 800cb38:	685a      	ldr	r2, [r3, #4]
 800cb3a:	604a      	str	r2, [r1, #4]
 800cb3c:	2301      	movs	r3, #1
 800cb3e:	4093      	lsls	r3, r2
 800cb40:	608b      	str	r3, [r1, #8]
 800cb42:	4648      	mov	r0, r9
 800cb44:	f000 fdb4 	bl	800d6b0 <_Bfree>
 800cb48:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	601a      	str	r2, [r3, #0]
 800cb50:	1e2b      	subs	r3, r5, #0
 800cb52:	bfbb      	ittet	lt
 800cb54:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cb58:	9303      	strlt	r3, [sp, #12]
 800cb5a:	2300      	movge	r3, #0
 800cb5c:	2201      	movlt	r2, #1
 800cb5e:	bfac      	ite	ge
 800cb60:	6033      	strge	r3, [r6, #0]
 800cb62:	6032      	strlt	r2, [r6, #0]
 800cb64:	4b90      	ldr	r3, [pc, #576]	@ (800cda8 <_dtoa_r+0x2b8>)
 800cb66:	9e03      	ldr	r6, [sp, #12]
 800cb68:	43b3      	bics	r3, r6
 800cb6a:	d110      	bne.n	800cb8e <_dtoa_r+0x9e>
 800cb6c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cb6e:	f242 730f 	movw	r3, #9999	@ 0x270f
 800cb72:	6013      	str	r3, [r2, #0]
 800cb74:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800cb78:	4323      	orrs	r3, r4
 800cb7a:	f000 84de 	beq.w	800d53a <_dtoa_r+0xa4a>
 800cb7e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cb80:	4f8a      	ldr	r7, [pc, #552]	@ (800cdac <_dtoa_r+0x2bc>)
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	f000 84e0 	beq.w	800d548 <_dtoa_r+0xa58>
 800cb88:	1cfb      	adds	r3, r7, #3
 800cb8a:	f000 bcdb 	b.w	800d544 <_dtoa_r+0xa54>
 800cb8e:	ed9d 8b02 	vldr	d8, [sp, #8]
 800cb92:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800cb96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb9a:	d10a      	bne.n	800cbb2 <_dtoa_r+0xc2>
 800cb9c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cb9e:	2301      	movs	r3, #1
 800cba0:	6013      	str	r3, [r2, #0]
 800cba2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cba4:	b113      	cbz	r3, 800cbac <_dtoa_r+0xbc>
 800cba6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800cba8:	4b81      	ldr	r3, [pc, #516]	@ (800cdb0 <_dtoa_r+0x2c0>)
 800cbaa:	6013      	str	r3, [r2, #0]
 800cbac:	4f81      	ldr	r7, [pc, #516]	@ (800cdb4 <_dtoa_r+0x2c4>)
 800cbae:	f000 bccb 	b.w	800d548 <_dtoa_r+0xa58>
 800cbb2:	aa0e      	add	r2, sp, #56	@ 0x38
 800cbb4:	a90f      	add	r1, sp, #60	@ 0x3c
 800cbb6:	4648      	mov	r0, r9
 800cbb8:	eeb0 0b48 	vmov.f64	d0, d8
 800cbbc:	f001 f862 	bl	800dc84 <__d2b>
 800cbc0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800cbc4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cbc6:	9001      	str	r0, [sp, #4]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d045      	beq.n	800cc58 <_dtoa_r+0x168>
 800cbcc:	eeb0 7b48 	vmov.f64	d7, d8
 800cbd0:	ee18 1a90 	vmov	r1, s17
 800cbd4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800cbd8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800cbdc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800cbe0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800cbe4:	2500      	movs	r5, #0
 800cbe6:	ee07 1a90 	vmov	s15, r1
 800cbea:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800cbee:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800cd88 <_dtoa_r+0x298>
 800cbf2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800cbf6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800cd90 <_dtoa_r+0x2a0>
 800cbfa:	eea7 6b05 	vfma.f64	d6, d7, d5
 800cbfe:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800cd98 <_dtoa_r+0x2a8>
 800cc02:	ee07 3a90 	vmov	s15, r3
 800cc06:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800cc0a:	eeb0 7b46 	vmov.f64	d7, d6
 800cc0e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800cc12:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800cc16:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800cc1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc1e:	ee16 8a90 	vmov	r8, s13
 800cc22:	d508      	bpl.n	800cc36 <_dtoa_r+0x146>
 800cc24:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800cc28:	eeb4 6b47 	vcmp.f64	d6, d7
 800cc2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc30:	bf18      	it	ne
 800cc32:	f108 38ff 	addne.w	r8, r8, #4294967295
 800cc36:	f1b8 0f16 	cmp.w	r8, #22
 800cc3a:	d82b      	bhi.n	800cc94 <_dtoa_r+0x1a4>
 800cc3c:	495e      	ldr	r1, [pc, #376]	@ (800cdb8 <_dtoa_r+0x2c8>)
 800cc3e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800cc42:	ed91 7b00 	vldr	d7, [r1]
 800cc46:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800cc4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc4e:	d501      	bpl.n	800cc54 <_dtoa_r+0x164>
 800cc50:	f108 38ff 	add.w	r8, r8, #4294967295
 800cc54:	2100      	movs	r1, #0
 800cc56:	e01e      	b.n	800cc96 <_dtoa_r+0x1a6>
 800cc58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc5a:	4413      	add	r3, r2
 800cc5c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800cc60:	2920      	cmp	r1, #32
 800cc62:	bfc1      	itttt	gt
 800cc64:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800cc68:	408e      	lslgt	r6, r1
 800cc6a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800cc6e:	fa24 f101 	lsrgt.w	r1, r4, r1
 800cc72:	bfd6      	itet	le
 800cc74:	f1c1 0120 	rsble	r1, r1, #32
 800cc78:	4331      	orrgt	r1, r6
 800cc7a:	fa04 f101 	lslle.w	r1, r4, r1
 800cc7e:	ee07 1a90 	vmov	s15, r1
 800cc82:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800cc86:	3b01      	subs	r3, #1
 800cc88:	ee17 1a90 	vmov	r1, s15
 800cc8c:	2501      	movs	r5, #1
 800cc8e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800cc92:	e7a8      	b.n	800cbe6 <_dtoa_r+0xf6>
 800cc94:	2101      	movs	r1, #1
 800cc96:	1ad2      	subs	r2, r2, r3
 800cc98:	1e53      	subs	r3, r2, #1
 800cc9a:	9306      	str	r3, [sp, #24]
 800cc9c:	bf45      	ittet	mi
 800cc9e:	f1c2 0301 	rsbmi	r3, r2, #1
 800cca2:	9305      	strmi	r3, [sp, #20]
 800cca4:	2300      	movpl	r3, #0
 800cca6:	2300      	movmi	r3, #0
 800cca8:	bf4c      	ite	mi
 800ccaa:	9306      	strmi	r3, [sp, #24]
 800ccac:	9305      	strpl	r3, [sp, #20]
 800ccae:	f1b8 0f00 	cmp.w	r8, #0
 800ccb2:	910c      	str	r1, [sp, #48]	@ 0x30
 800ccb4:	db18      	blt.n	800cce8 <_dtoa_r+0x1f8>
 800ccb6:	9b06      	ldr	r3, [sp, #24]
 800ccb8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800ccbc:	4443      	add	r3, r8
 800ccbe:	9306      	str	r3, [sp, #24]
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	9a07      	ldr	r2, [sp, #28]
 800ccc4:	2a09      	cmp	r2, #9
 800ccc6:	d849      	bhi.n	800cd5c <_dtoa_r+0x26c>
 800ccc8:	2a05      	cmp	r2, #5
 800ccca:	bfc4      	itt	gt
 800cccc:	3a04      	subgt	r2, #4
 800ccce:	9207      	strgt	r2, [sp, #28]
 800ccd0:	9a07      	ldr	r2, [sp, #28]
 800ccd2:	f1a2 0202 	sub.w	r2, r2, #2
 800ccd6:	bfcc      	ite	gt
 800ccd8:	2400      	movgt	r4, #0
 800ccda:	2401      	movle	r4, #1
 800ccdc:	2a03      	cmp	r2, #3
 800ccde:	d848      	bhi.n	800cd72 <_dtoa_r+0x282>
 800cce0:	e8df f002 	tbb	[pc, r2]
 800cce4:	3a2c2e0b 	.word	0x3a2c2e0b
 800cce8:	9b05      	ldr	r3, [sp, #20]
 800ccea:	2200      	movs	r2, #0
 800ccec:	eba3 0308 	sub.w	r3, r3, r8
 800ccf0:	9305      	str	r3, [sp, #20]
 800ccf2:	920a      	str	r2, [sp, #40]	@ 0x28
 800ccf4:	f1c8 0300 	rsb	r3, r8, #0
 800ccf8:	e7e3      	b.n	800ccc2 <_dtoa_r+0x1d2>
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	9208      	str	r2, [sp, #32]
 800ccfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd00:	2a00      	cmp	r2, #0
 800cd02:	dc39      	bgt.n	800cd78 <_dtoa_r+0x288>
 800cd04:	f04f 0b01 	mov.w	fp, #1
 800cd08:	46da      	mov	sl, fp
 800cd0a:	465a      	mov	r2, fp
 800cd0c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800cd10:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800cd14:	2100      	movs	r1, #0
 800cd16:	2004      	movs	r0, #4
 800cd18:	f100 0614 	add.w	r6, r0, #20
 800cd1c:	4296      	cmp	r6, r2
 800cd1e:	d930      	bls.n	800cd82 <_dtoa_r+0x292>
 800cd20:	6079      	str	r1, [r7, #4]
 800cd22:	4648      	mov	r0, r9
 800cd24:	9304      	str	r3, [sp, #16]
 800cd26:	f000 fc83 	bl	800d630 <_Balloc>
 800cd2a:	9b04      	ldr	r3, [sp, #16]
 800cd2c:	4607      	mov	r7, r0
 800cd2e:	2800      	cmp	r0, #0
 800cd30:	d146      	bne.n	800cdc0 <_dtoa_r+0x2d0>
 800cd32:	4b22      	ldr	r3, [pc, #136]	@ (800cdbc <_dtoa_r+0x2cc>)
 800cd34:	4602      	mov	r2, r0
 800cd36:	f240 11af 	movw	r1, #431	@ 0x1af
 800cd3a:	e6f2      	b.n	800cb22 <_dtoa_r+0x32>
 800cd3c:	2201      	movs	r2, #1
 800cd3e:	e7dd      	b.n	800ccfc <_dtoa_r+0x20c>
 800cd40:	2200      	movs	r2, #0
 800cd42:	9208      	str	r2, [sp, #32]
 800cd44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd46:	eb08 0b02 	add.w	fp, r8, r2
 800cd4a:	f10b 0a01 	add.w	sl, fp, #1
 800cd4e:	4652      	mov	r2, sl
 800cd50:	2a01      	cmp	r2, #1
 800cd52:	bfb8      	it	lt
 800cd54:	2201      	movlt	r2, #1
 800cd56:	e7db      	b.n	800cd10 <_dtoa_r+0x220>
 800cd58:	2201      	movs	r2, #1
 800cd5a:	e7f2      	b.n	800cd42 <_dtoa_r+0x252>
 800cd5c:	2401      	movs	r4, #1
 800cd5e:	2200      	movs	r2, #0
 800cd60:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800cd64:	f04f 3bff 	mov.w	fp, #4294967295
 800cd68:	2100      	movs	r1, #0
 800cd6a:	46da      	mov	sl, fp
 800cd6c:	2212      	movs	r2, #18
 800cd6e:	9109      	str	r1, [sp, #36]	@ 0x24
 800cd70:	e7ce      	b.n	800cd10 <_dtoa_r+0x220>
 800cd72:	2201      	movs	r2, #1
 800cd74:	9208      	str	r2, [sp, #32]
 800cd76:	e7f5      	b.n	800cd64 <_dtoa_r+0x274>
 800cd78:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800cd7c:	46da      	mov	sl, fp
 800cd7e:	465a      	mov	r2, fp
 800cd80:	e7c6      	b.n	800cd10 <_dtoa_r+0x220>
 800cd82:	3101      	adds	r1, #1
 800cd84:	0040      	lsls	r0, r0, #1
 800cd86:	e7c7      	b.n	800cd18 <_dtoa_r+0x228>
 800cd88:	636f4361 	.word	0x636f4361
 800cd8c:	3fd287a7 	.word	0x3fd287a7
 800cd90:	8b60c8b3 	.word	0x8b60c8b3
 800cd94:	3fc68a28 	.word	0x3fc68a28
 800cd98:	509f79fb 	.word	0x509f79fb
 800cd9c:	3fd34413 	.word	0x3fd34413
 800cda0:	0806d2c9 	.word	0x0806d2c9
 800cda4:	0806d2e0 	.word	0x0806d2e0
 800cda8:	7ff00000 	.word	0x7ff00000
 800cdac:	0806d2c5 	.word	0x0806d2c5
 800cdb0:	0806d299 	.word	0x0806d299
 800cdb4:	0806d298 	.word	0x0806d298
 800cdb8:	0806d3d8 	.word	0x0806d3d8
 800cdbc:	0806d338 	.word	0x0806d338
 800cdc0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800cdc4:	f1ba 0f0e 	cmp.w	sl, #14
 800cdc8:	6010      	str	r0, [r2, #0]
 800cdca:	d86f      	bhi.n	800ceac <_dtoa_r+0x3bc>
 800cdcc:	2c00      	cmp	r4, #0
 800cdce:	d06d      	beq.n	800ceac <_dtoa_r+0x3bc>
 800cdd0:	f1b8 0f00 	cmp.w	r8, #0
 800cdd4:	f340 80c2 	ble.w	800cf5c <_dtoa_r+0x46c>
 800cdd8:	4aca      	ldr	r2, [pc, #808]	@ (800d104 <_dtoa_r+0x614>)
 800cdda:	f008 010f 	and.w	r1, r8, #15
 800cdde:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800cde2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800cde6:	ed92 7b00 	vldr	d7, [r2]
 800cdea:	ea4f 1128 	mov.w	r1, r8, asr #4
 800cdee:	f000 80a9 	beq.w	800cf44 <_dtoa_r+0x454>
 800cdf2:	4ac5      	ldr	r2, [pc, #788]	@ (800d108 <_dtoa_r+0x618>)
 800cdf4:	ed92 6b08 	vldr	d6, [r2, #32]
 800cdf8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800cdfc:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ce00:	f001 010f 	and.w	r1, r1, #15
 800ce04:	2203      	movs	r2, #3
 800ce06:	48c0      	ldr	r0, [pc, #768]	@ (800d108 <_dtoa_r+0x618>)
 800ce08:	2900      	cmp	r1, #0
 800ce0a:	f040 809d 	bne.w	800cf48 <_dtoa_r+0x458>
 800ce0e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ce12:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ce16:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ce1a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ce1c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ce20:	2900      	cmp	r1, #0
 800ce22:	f000 80c1 	beq.w	800cfa8 <_dtoa_r+0x4b8>
 800ce26:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800ce2a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ce2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce32:	f140 80b9 	bpl.w	800cfa8 <_dtoa_r+0x4b8>
 800ce36:	f1ba 0f00 	cmp.w	sl, #0
 800ce3a:	f000 80b5 	beq.w	800cfa8 <_dtoa_r+0x4b8>
 800ce3e:	f1bb 0f00 	cmp.w	fp, #0
 800ce42:	dd31      	ble.n	800cea8 <_dtoa_r+0x3b8>
 800ce44:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800ce48:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ce4c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ce50:	f108 31ff 	add.w	r1, r8, #4294967295
 800ce54:	9104      	str	r1, [sp, #16]
 800ce56:	3201      	adds	r2, #1
 800ce58:	465c      	mov	r4, fp
 800ce5a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ce5e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800ce62:	ee07 2a90 	vmov	s15, r2
 800ce66:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ce6a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800ce6e:	ee15 2a90 	vmov	r2, s11
 800ce72:	ec51 0b15 	vmov	r0, r1, d5
 800ce76:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800ce7a:	2c00      	cmp	r4, #0
 800ce7c:	f040 8098 	bne.w	800cfb0 <_dtoa_r+0x4c0>
 800ce80:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800ce84:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ce88:	ec41 0b17 	vmov	d7, r0, r1
 800ce8c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ce90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce94:	f300 8261 	bgt.w	800d35a <_dtoa_r+0x86a>
 800ce98:	eeb1 7b47 	vneg.f64	d7, d7
 800ce9c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cea4:	f100 80f5 	bmi.w	800d092 <_dtoa_r+0x5a2>
 800cea8:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ceac:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ceae:	2a00      	cmp	r2, #0
 800ceb0:	f2c0 812c 	blt.w	800d10c <_dtoa_r+0x61c>
 800ceb4:	f1b8 0f0e 	cmp.w	r8, #14
 800ceb8:	f300 8128 	bgt.w	800d10c <_dtoa_r+0x61c>
 800cebc:	4b91      	ldr	r3, [pc, #580]	@ (800d104 <_dtoa_r+0x614>)
 800cebe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800cec2:	ed93 6b00 	vldr	d6, [r3]
 800cec6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	da03      	bge.n	800ced4 <_dtoa_r+0x3e4>
 800cecc:	f1ba 0f00 	cmp.w	sl, #0
 800ced0:	f340 80d2 	ble.w	800d078 <_dtoa_r+0x588>
 800ced4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800ced8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cedc:	463e      	mov	r6, r7
 800cede:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800cee2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800cee6:	ee15 3a10 	vmov	r3, s10
 800ceea:	3330      	adds	r3, #48	@ 0x30
 800ceec:	f806 3b01 	strb.w	r3, [r6], #1
 800cef0:	1bf3      	subs	r3, r6, r7
 800cef2:	459a      	cmp	sl, r3
 800cef4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800cef8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800cefc:	f040 80f8 	bne.w	800d0f0 <_dtoa_r+0x600>
 800cf00:	ee37 7b07 	vadd.f64	d7, d7, d7
 800cf04:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800cf08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf0c:	f300 80dd 	bgt.w	800d0ca <_dtoa_r+0x5da>
 800cf10:	eeb4 7b46 	vcmp.f64	d7, d6
 800cf14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf18:	d104      	bne.n	800cf24 <_dtoa_r+0x434>
 800cf1a:	ee15 3a10 	vmov	r3, s10
 800cf1e:	07db      	lsls	r3, r3, #31
 800cf20:	f100 80d3 	bmi.w	800d0ca <_dtoa_r+0x5da>
 800cf24:	9901      	ldr	r1, [sp, #4]
 800cf26:	4648      	mov	r0, r9
 800cf28:	f000 fbc2 	bl	800d6b0 <_Bfree>
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cf30:	7033      	strb	r3, [r6, #0]
 800cf32:	f108 0301 	add.w	r3, r8, #1
 800cf36:	6013      	str	r3, [r2, #0]
 800cf38:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	f000 8304 	beq.w	800d548 <_dtoa_r+0xa58>
 800cf40:	601e      	str	r6, [r3, #0]
 800cf42:	e301      	b.n	800d548 <_dtoa_r+0xa58>
 800cf44:	2202      	movs	r2, #2
 800cf46:	e75e      	b.n	800ce06 <_dtoa_r+0x316>
 800cf48:	07cc      	lsls	r4, r1, #31
 800cf4a:	d504      	bpl.n	800cf56 <_dtoa_r+0x466>
 800cf4c:	ed90 6b00 	vldr	d6, [r0]
 800cf50:	3201      	adds	r2, #1
 800cf52:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cf56:	1049      	asrs	r1, r1, #1
 800cf58:	3008      	adds	r0, #8
 800cf5a:	e755      	b.n	800ce08 <_dtoa_r+0x318>
 800cf5c:	d022      	beq.n	800cfa4 <_dtoa_r+0x4b4>
 800cf5e:	f1c8 0100 	rsb	r1, r8, #0
 800cf62:	4a68      	ldr	r2, [pc, #416]	@ (800d104 <_dtoa_r+0x614>)
 800cf64:	f001 000f 	and.w	r0, r1, #15
 800cf68:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800cf6c:	ed92 7b00 	vldr	d7, [r2]
 800cf70:	ee28 7b07 	vmul.f64	d7, d8, d7
 800cf74:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cf78:	4863      	ldr	r0, [pc, #396]	@ (800d108 <_dtoa_r+0x618>)
 800cf7a:	1109      	asrs	r1, r1, #4
 800cf7c:	2400      	movs	r4, #0
 800cf7e:	2202      	movs	r2, #2
 800cf80:	b929      	cbnz	r1, 800cf8e <_dtoa_r+0x49e>
 800cf82:	2c00      	cmp	r4, #0
 800cf84:	f43f af49 	beq.w	800ce1a <_dtoa_r+0x32a>
 800cf88:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cf8c:	e745      	b.n	800ce1a <_dtoa_r+0x32a>
 800cf8e:	07ce      	lsls	r6, r1, #31
 800cf90:	d505      	bpl.n	800cf9e <_dtoa_r+0x4ae>
 800cf92:	ed90 6b00 	vldr	d6, [r0]
 800cf96:	3201      	adds	r2, #1
 800cf98:	2401      	movs	r4, #1
 800cf9a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cf9e:	1049      	asrs	r1, r1, #1
 800cfa0:	3008      	adds	r0, #8
 800cfa2:	e7ed      	b.n	800cf80 <_dtoa_r+0x490>
 800cfa4:	2202      	movs	r2, #2
 800cfa6:	e738      	b.n	800ce1a <_dtoa_r+0x32a>
 800cfa8:	f8cd 8010 	str.w	r8, [sp, #16]
 800cfac:	4654      	mov	r4, sl
 800cfae:	e754      	b.n	800ce5a <_dtoa_r+0x36a>
 800cfb0:	4a54      	ldr	r2, [pc, #336]	@ (800d104 <_dtoa_r+0x614>)
 800cfb2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800cfb6:	ed12 4b02 	vldr	d4, [r2, #-8]
 800cfba:	9a08      	ldr	r2, [sp, #32]
 800cfbc:	ec41 0b17 	vmov	d7, r0, r1
 800cfc0:	443c      	add	r4, r7
 800cfc2:	b34a      	cbz	r2, 800d018 <_dtoa_r+0x528>
 800cfc4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800cfc8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800cfcc:	463e      	mov	r6, r7
 800cfce:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800cfd2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800cfd6:	ee35 7b47 	vsub.f64	d7, d5, d7
 800cfda:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800cfde:	ee14 2a90 	vmov	r2, s9
 800cfe2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800cfe6:	3230      	adds	r2, #48	@ 0x30
 800cfe8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800cfec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cff4:	f806 2b01 	strb.w	r2, [r6], #1
 800cff8:	d438      	bmi.n	800d06c <_dtoa_r+0x57c>
 800cffa:	ee32 5b46 	vsub.f64	d5, d2, d6
 800cffe:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d006:	d462      	bmi.n	800d0ce <_dtoa_r+0x5de>
 800d008:	42a6      	cmp	r6, r4
 800d00a:	f43f af4d 	beq.w	800cea8 <_dtoa_r+0x3b8>
 800d00e:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d012:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d016:	e7e0      	b.n	800cfda <_dtoa_r+0x4ea>
 800d018:	4621      	mov	r1, r4
 800d01a:	463e      	mov	r6, r7
 800d01c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d020:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800d024:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d028:	ee14 2a90 	vmov	r2, s9
 800d02c:	3230      	adds	r2, #48	@ 0x30
 800d02e:	f806 2b01 	strb.w	r2, [r6], #1
 800d032:	42a6      	cmp	r6, r4
 800d034:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d038:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d03c:	d119      	bne.n	800d072 <_dtoa_r+0x582>
 800d03e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800d042:	ee37 4b05 	vadd.f64	d4, d7, d5
 800d046:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d04a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d04e:	dc3e      	bgt.n	800d0ce <_dtoa_r+0x5de>
 800d050:	ee35 5b47 	vsub.f64	d5, d5, d7
 800d054:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800d058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d05c:	f57f af24 	bpl.w	800cea8 <_dtoa_r+0x3b8>
 800d060:	460e      	mov	r6, r1
 800d062:	3901      	subs	r1, #1
 800d064:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d068:	2b30      	cmp	r3, #48	@ 0x30
 800d06a:	d0f9      	beq.n	800d060 <_dtoa_r+0x570>
 800d06c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d070:	e758      	b.n	800cf24 <_dtoa_r+0x434>
 800d072:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d076:	e7d5      	b.n	800d024 <_dtoa_r+0x534>
 800d078:	d10b      	bne.n	800d092 <_dtoa_r+0x5a2>
 800d07a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800d07e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d082:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d086:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d08a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d08e:	f2c0 8161 	blt.w	800d354 <_dtoa_r+0x864>
 800d092:	2400      	movs	r4, #0
 800d094:	4625      	mov	r5, r4
 800d096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d098:	43db      	mvns	r3, r3
 800d09a:	9304      	str	r3, [sp, #16]
 800d09c:	463e      	mov	r6, r7
 800d09e:	f04f 0800 	mov.w	r8, #0
 800d0a2:	4621      	mov	r1, r4
 800d0a4:	4648      	mov	r0, r9
 800d0a6:	f000 fb03 	bl	800d6b0 <_Bfree>
 800d0aa:	2d00      	cmp	r5, #0
 800d0ac:	d0de      	beq.n	800d06c <_dtoa_r+0x57c>
 800d0ae:	f1b8 0f00 	cmp.w	r8, #0
 800d0b2:	d005      	beq.n	800d0c0 <_dtoa_r+0x5d0>
 800d0b4:	45a8      	cmp	r8, r5
 800d0b6:	d003      	beq.n	800d0c0 <_dtoa_r+0x5d0>
 800d0b8:	4641      	mov	r1, r8
 800d0ba:	4648      	mov	r0, r9
 800d0bc:	f000 faf8 	bl	800d6b0 <_Bfree>
 800d0c0:	4629      	mov	r1, r5
 800d0c2:	4648      	mov	r0, r9
 800d0c4:	f000 faf4 	bl	800d6b0 <_Bfree>
 800d0c8:	e7d0      	b.n	800d06c <_dtoa_r+0x57c>
 800d0ca:	f8cd 8010 	str.w	r8, [sp, #16]
 800d0ce:	4633      	mov	r3, r6
 800d0d0:	461e      	mov	r6, r3
 800d0d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d0d6:	2a39      	cmp	r2, #57	@ 0x39
 800d0d8:	d106      	bne.n	800d0e8 <_dtoa_r+0x5f8>
 800d0da:	429f      	cmp	r7, r3
 800d0dc:	d1f8      	bne.n	800d0d0 <_dtoa_r+0x5e0>
 800d0de:	9a04      	ldr	r2, [sp, #16]
 800d0e0:	3201      	adds	r2, #1
 800d0e2:	9204      	str	r2, [sp, #16]
 800d0e4:	2230      	movs	r2, #48	@ 0x30
 800d0e6:	703a      	strb	r2, [r7, #0]
 800d0e8:	781a      	ldrb	r2, [r3, #0]
 800d0ea:	3201      	adds	r2, #1
 800d0ec:	701a      	strb	r2, [r3, #0]
 800d0ee:	e7bd      	b.n	800d06c <_dtoa_r+0x57c>
 800d0f0:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d0f4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d0f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0fc:	f47f aeef 	bne.w	800cede <_dtoa_r+0x3ee>
 800d100:	e710      	b.n	800cf24 <_dtoa_r+0x434>
 800d102:	bf00      	nop
 800d104:	0806d3d8 	.word	0x0806d3d8
 800d108:	0806d3b0 	.word	0x0806d3b0
 800d10c:	9908      	ldr	r1, [sp, #32]
 800d10e:	2900      	cmp	r1, #0
 800d110:	f000 80e3 	beq.w	800d2da <_dtoa_r+0x7ea>
 800d114:	9907      	ldr	r1, [sp, #28]
 800d116:	2901      	cmp	r1, #1
 800d118:	f300 80c8 	bgt.w	800d2ac <_dtoa_r+0x7bc>
 800d11c:	2d00      	cmp	r5, #0
 800d11e:	f000 80c1 	beq.w	800d2a4 <_dtoa_r+0x7b4>
 800d122:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d126:	9e05      	ldr	r6, [sp, #20]
 800d128:	461c      	mov	r4, r3
 800d12a:	9304      	str	r3, [sp, #16]
 800d12c:	9b05      	ldr	r3, [sp, #20]
 800d12e:	4413      	add	r3, r2
 800d130:	9305      	str	r3, [sp, #20]
 800d132:	9b06      	ldr	r3, [sp, #24]
 800d134:	2101      	movs	r1, #1
 800d136:	4413      	add	r3, r2
 800d138:	4648      	mov	r0, r9
 800d13a:	9306      	str	r3, [sp, #24]
 800d13c:	f000 fb6c 	bl	800d818 <__i2b>
 800d140:	9b04      	ldr	r3, [sp, #16]
 800d142:	4605      	mov	r5, r0
 800d144:	b166      	cbz	r6, 800d160 <_dtoa_r+0x670>
 800d146:	9a06      	ldr	r2, [sp, #24]
 800d148:	2a00      	cmp	r2, #0
 800d14a:	dd09      	ble.n	800d160 <_dtoa_r+0x670>
 800d14c:	42b2      	cmp	r2, r6
 800d14e:	9905      	ldr	r1, [sp, #20]
 800d150:	bfa8      	it	ge
 800d152:	4632      	movge	r2, r6
 800d154:	1a89      	subs	r1, r1, r2
 800d156:	9105      	str	r1, [sp, #20]
 800d158:	9906      	ldr	r1, [sp, #24]
 800d15a:	1ab6      	subs	r6, r6, r2
 800d15c:	1a8a      	subs	r2, r1, r2
 800d15e:	9206      	str	r2, [sp, #24]
 800d160:	b1fb      	cbz	r3, 800d1a2 <_dtoa_r+0x6b2>
 800d162:	9a08      	ldr	r2, [sp, #32]
 800d164:	2a00      	cmp	r2, #0
 800d166:	f000 80bc 	beq.w	800d2e2 <_dtoa_r+0x7f2>
 800d16a:	b19c      	cbz	r4, 800d194 <_dtoa_r+0x6a4>
 800d16c:	4629      	mov	r1, r5
 800d16e:	4622      	mov	r2, r4
 800d170:	4648      	mov	r0, r9
 800d172:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d174:	f000 fc10 	bl	800d998 <__pow5mult>
 800d178:	9a01      	ldr	r2, [sp, #4]
 800d17a:	4601      	mov	r1, r0
 800d17c:	4605      	mov	r5, r0
 800d17e:	4648      	mov	r0, r9
 800d180:	f000 fb60 	bl	800d844 <__multiply>
 800d184:	9901      	ldr	r1, [sp, #4]
 800d186:	9004      	str	r0, [sp, #16]
 800d188:	4648      	mov	r0, r9
 800d18a:	f000 fa91 	bl	800d6b0 <_Bfree>
 800d18e:	9a04      	ldr	r2, [sp, #16]
 800d190:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d192:	9201      	str	r2, [sp, #4]
 800d194:	1b1a      	subs	r2, r3, r4
 800d196:	d004      	beq.n	800d1a2 <_dtoa_r+0x6b2>
 800d198:	9901      	ldr	r1, [sp, #4]
 800d19a:	4648      	mov	r0, r9
 800d19c:	f000 fbfc 	bl	800d998 <__pow5mult>
 800d1a0:	9001      	str	r0, [sp, #4]
 800d1a2:	2101      	movs	r1, #1
 800d1a4:	4648      	mov	r0, r9
 800d1a6:	f000 fb37 	bl	800d818 <__i2b>
 800d1aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d1ac:	4604      	mov	r4, r0
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	f000 81d0 	beq.w	800d554 <_dtoa_r+0xa64>
 800d1b4:	461a      	mov	r2, r3
 800d1b6:	4601      	mov	r1, r0
 800d1b8:	4648      	mov	r0, r9
 800d1ba:	f000 fbed 	bl	800d998 <__pow5mult>
 800d1be:	9b07      	ldr	r3, [sp, #28]
 800d1c0:	2b01      	cmp	r3, #1
 800d1c2:	4604      	mov	r4, r0
 800d1c4:	f300 8095 	bgt.w	800d2f2 <_dtoa_r+0x802>
 800d1c8:	9b02      	ldr	r3, [sp, #8]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	f040 808b 	bne.w	800d2e6 <_dtoa_r+0x7f6>
 800d1d0:	9b03      	ldr	r3, [sp, #12]
 800d1d2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800d1d6:	2a00      	cmp	r2, #0
 800d1d8:	f040 8087 	bne.w	800d2ea <_dtoa_r+0x7fa>
 800d1dc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800d1e0:	0d12      	lsrs	r2, r2, #20
 800d1e2:	0512      	lsls	r2, r2, #20
 800d1e4:	2a00      	cmp	r2, #0
 800d1e6:	f000 8082 	beq.w	800d2ee <_dtoa_r+0x7fe>
 800d1ea:	9b05      	ldr	r3, [sp, #20]
 800d1ec:	3301      	adds	r3, #1
 800d1ee:	9305      	str	r3, [sp, #20]
 800d1f0:	9b06      	ldr	r3, [sp, #24]
 800d1f2:	3301      	adds	r3, #1
 800d1f4:	9306      	str	r3, [sp, #24]
 800d1f6:	2301      	movs	r3, #1
 800d1f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d1fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	f000 81af 	beq.w	800d560 <_dtoa_r+0xa70>
 800d202:	6922      	ldr	r2, [r4, #16]
 800d204:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d208:	6910      	ldr	r0, [r2, #16]
 800d20a:	f000 fab9 	bl	800d780 <__hi0bits>
 800d20e:	f1c0 0020 	rsb	r0, r0, #32
 800d212:	9b06      	ldr	r3, [sp, #24]
 800d214:	4418      	add	r0, r3
 800d216:	f010 001f 	ands.w	r0, r0, #31
 800d21a:	d076      	beq.n	800d30a <_dtoa_r+0x81a>
 800d21c:	f1c0 0220 	rsb	r2, r0, #32
 800d220:	2a04      	cmp	r2, #4
 800d222:	dd69      	ble.n	800d2f8 <_dtoa_r+0x808>
 800d224:	9b05      	ldr	r3, [sp, #20]
 800d226:	f1c0 001c 	rsb	r0, r0, #28
 800d22a:	4403      	add	r3, r0
 800d22c:	9305      	str	r3, [sp, #20]
 800d22e:	9b06      	ldr	r3, [sp, #24]
 800d230:	4406      	add	r6, r0
 800d232:	4403      	add	r3, r0
 800d234:	9306      	str	r3, [sp, #24]
 800d236:	9b05      	ldr	r3, [sp, #20]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	dd05      	ble.n	800d248 <_dtoa_r+0x758>
 800d23c:	9901      	ldr	r1, [sp, #4]
 800d23e:	461a      	mov	r2, r3
 800d240:	4648      	mov	r0, r9
 800d242:	f000 fc03 	bl	800da4c <__lshift>
 800d246:	9001      	str	r0, [sp, #4]
 800d248:	9b06      	ldr	r3, [sp, #24]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	dd05      	ble.n	800d25a <_dtoa_r+0x76a>
 800d24e:	4621      	mov	r1, r4
 800d250:	461a      	mov	r2, r3
 800d252:	4648      	mov	r0, r9
 800d254:	f000 fbfa 	bl	800da4c <__lshift>
 800d258:	4604      	mov	r4, r0
 800d25a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d056      	beq.n	800d30e <_dtoa_r+0x81e>
 800d260:	9801      	ldr	r0, [sp, #4]
 800d262:	4621      	mov	r1, r4
 800d264:	f000 fc5e 	bl	800db24 <__mcmp>
 800d268:	2800      	cmp	r0, #0
 800d26a:	da50      	bge.n	800d30e <_dtoa_r+0x81e>
 800d26c:	f108 33ff 	add.w	r3, r8, #4294967295
 800d270:	9304      	str	r3, [sp, #16]
 800d272:	9901      	ldr	r1, [sp, #4]
 800d274:	2300      	movs	r3, #0
 800d276:	220a      	movs	r2, #10
 800d278:	4648      	mov	r0, r9
 800d27a:	f000 fa3b 	bl	800d6f4 <__multadd>
 800d27e:	9b08      	ldr	r3, [sp, #32]
 800d280:	9001      	str	r0, [sp, #4]
 800d282:	2b00      	cmp	r3, #0
 800d284:	f000 816e 	beq.w	800d564 <_dtoa_r+0xa74>
 800d288:	4629      	mov	r1, r5
 800d28a:	2300      	movs	r3, #0
 800d28c:	220a      	movs	r2, #10
 800d28e:	4648      	mov	r0, r9
 800d290:	f000 fa30 	bl	800d6f4 <__multadd>
 800d294:	f1bb 0f00 	cmp.w	fp, #0
 800d298:	4605      	mov	r5, r0
 800d29a:	dc64      	bgt.n	800d366 <_dtoa_r+0x876>
 800d29c:	9b07      	ldr	r3, [sp, #28]
 800d29e:	2b02      	cmp	r3, #2
 800d2a0:	dc3e      	bgt.n	800d320 <_dtoa_r+0x830>
 800d2a2:	e060      	b.n	800d366 <_dtoa_r+0x876>
 800d2a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d2a6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d2aa:	e73c      	b.n	800d126 <_dtoa_r+0x636>
 800d2ac:	f10a 34ff 	add.w	r4, sl, #4294967295
 800d2b0:	42a3      	cmp	r3, r4
 800d2b2:	bfbf      	itttt	lt
 800d2b4:	1ae2      	sublt	r2, r4, r3
 800d2b6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d2b8:	189b      	addlt	r3, r3, r2
 800d2ba:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800d2bc:	bfae      	itee	ge
 800d2be:	1b1c      	subge	r4, r3, r4
 800d2c0:	4623      	movlt	r3, r4
 800d2c2:	2400      	movlt	r4, #0
 800d2c4:	f1ba 0f00 	cmp.w	sl, #0
 800d2c8:	bfb5      	itete	lt
 800d2ca:	9a05      	ldrlt	r2, [sp, #20]
 800d2cc:	9e05      	ldrge	r6, [sp, #20]
 800d2ce:	eba2 060a 	sublt.w	r6, r2, sl
 800d2d2:	4652      	movge	r2, sl
 800d2d4:	bfb8      	it	lt
 800d2d6:	2200      	movlt	r2, #0
 800d2d8:	e727      	b.n	800d12a <_dtoa_r+0x63a>
 800d2da:	9e05      	ldr	r6, [sp, #20]
 800d2dc:	9d08      	ldr	r5, [sp, #32]
 800d2de:	461c      	mov	r4, r3
 800d2e0:	e730      	b.n	800d144 <_dtoa_r+0x654>
 800d2e2:	461a      	mov	r2, r3
 800d2e4:	e758      	b.n	800d198 <_dtoa_r+0x6a8>
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	e786      	b.n	800d1f8 <_dtoa_r+0x708>
 800d2ea:	9b02      	ldr	r3, [sp, #8]
 800d2ec:	e784      	b.n	800d1f8 <_dtoa_r+0x708>
 800d2ee:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d2f0:	e783      	b.n	800d1fa <_dtoa_r+0x70a>
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d2f6:	e784      	b.n	800d202 <_dtoa_r+0x712>
 800d2f8:	d09d      	beq.n	800d236 <_dtoa_r+0x746>
 800d2fa:	9b05      	ldr	r3, [sp, #20]
 800d2fc:	321c      	adds	r2, #28
 800d2fe:	4413      	add	r3, r2
 800d300:	9305      	str	r3, [sp, #20]
 800d302:	9b06      	ldr	r3, [sp, #24]
 800d304:	4416      	add	r6, r2
 800d306:	4413      	add	r3, r2
 800d308:	e794      	b.n	800d234 <_dtoa_r+0x744>
 800d30a:	4602      	mov	r2, r0
 800d30c:	e7f5      	b.n	800d2fa <_dtoa_r+0x80a>
 800d30e:	f1ba 0f00 	cmp.w	sl, #0
 800d312:	f8cd 8010 	str.w	r8, [sp, #16]
 800d316:	46d3      	mov	fp, sl
 800d318:	dc21      	bgt.n	800d35e <_dtoa_r+0x86e>
 800d31a:	9b07      	ldr	r3, [sp, #28]
 800d31c:	2b02      	cmp	r3, #2
 800d31e:	dd1e      	ble.n	800d35e <_dtoa_r+0x86e>
 800d320:	f1bb 0f00 	cmp.w	fp, #0
 800d324:	f47f aeb7 	bne.w	800d096 <_dtoa_r+0x5a6>
 800d328:	4621      	mov	r1, r4
 800d32a:	465b      	mov	r3, fp
 800d32c:	2205      	movs	r2, #5
 800d32e:	4648      	mov	r0, r9
 800d330:	f000 f9e0 	bl	800d6f4 <__multadd>
 800d334:	4601      	mov	r1, r0
 800d336:	4604      	mov	r4, r0
 800d338:	9801      	ldr	r0, [sp, #4]
 800d33a:	f000 fbf3 	bl	800db24 <__mcmp>
 800d33e:	2800      	cmp	r0, #0
 800d340:	f77f aea9 	ble.w	800d096 <_dtoa_r+0x5a6>
 800d344:	463e      	mov	r6, r7
 800d346:	2331      	movs	r3, #49	@ 0x31
 800d348:	f806 3b01 	strb.w	r3, [r6], #1
 800d34c:	9b04      	ldr	r3, [sp, #16]
 800d34e:	3301      	adds	r3, #1
 800d350:	9304      	str	r3, [sp, #16]
 800d352:	e6a4      	b.n	800d09e <_dtoa_r+0x5ae>
 800d354:	f8cd 8010 	str.w	r8, [sp, #16]
 800d358:	4654      	mov	r4, sl
 800d35a:	4625      	mov	r5, r4
 800d35c:	e7f2      	b.n	800d344 <_dtoa_r+0x854>
 800d35e:	9b08      	ldr	r3, [sp, #32]
 800d360:	2b00      	cmp	r3, #0
 800d362:	f000 8103 	beq.w	800d56c <_dtoa_r+0xa7c>
 800d366:	2e00      	cmp	r6, #0
 800d368:	dd05      	ble.n	800d376 <_dtoa_r+0x886>
 800d36a:	4629      	mov	r1, r5
 800d36c:	4632      	mov	r2, r6
 800d36e:	4648      	mov	r0, r9
 800d370:	f000 fb6c 	bl	800da4c <__lshift>
 800d374:	4605      	mov	r5, r0
 800d376:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d058      	beq.n	800d42e <_dtoa_r+0x93e>
 800d37c:	6869      	ldr	r1, [r5, #4]
 800d37e:	4648      	mov	r0, r9
 800d380:	f000 f956 	bl	800d630 <_Balloc>
 800d384:	4606      	mov	r6, r0
 800d386:	b928      	cbnz	r0, 800d394 <_dtoa_r+0x8a4>
 800d388:	4b82      	ldr	r3, [pc, #520]	@ (800d594 <_dtoa_r+0xaa4>)
 800d38a:	4602      	mov	r2, r0
 800d38c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d390:	f7ff bbc7 	b.w	800cb22 <_dtoa_r+0x32>
 800d394:	692a      	ldr	r2, [r5, #16]
 800d396:	3202      	adds	r2, #2
 800d398:	0092      	lsls	r2, r2, #2
 800d39a:	f105 010c 	add.w	r1, r5, #12
 800d39e:	300c      	adds	r0, #12
 800d3a0:	f7ff fb0f 	bl	800c9c2 <memcpy>
 800d3a4:	2201      	movs	r2, #1
 800d3a6:	4631      	mov	r1, r6
 800d3a8:	4648      	mov	r0, r9
 800d3aa:	f000 fb4f 	bl	800da4c <__lshift>
 800d3ae:	1c7b      	adds	r3, r7, #1
 800d3b0:	9305      	str	r3, [sp, #20]
 800d3b2:	eb07 030b 	add.w	r3, r7, fp
 800d3b6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3b8:	9b02      	ldr	r3, [sp, #8]
 800d3ba:	f003 0301 	and.w	r3, r3, #1
 800d3be:	46a8      	mov	r8, r5
 800d3c0:	9308      	str	r3, [sp, #32]
 800d3c2:	4605      	mov	r5, r0
 800d3c4:	9b05      	ldr	r3, [sp, #20]
 800d3c6:	9801      	ldr	r0, [sp, #4]
 800d3c8:	4621      	mov	r1, r4
 800d3ca:	f103 3bff 	add.w	fp, r3, #4294967295
 800d3ce:	f7ff fb06 	bl	800c9de <quorem>
 800d3d2:	4641      	mov	r1, r8
 800d3d4:	9002      	str	r0, [sp, #8]
 800d3d6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800d3da:	9801      	ldr	r0, [sp, #4]
 800d3dc:	f000 fba2 	bl	800db24 <__mcmp>
 800d3e0:	462a      	mov	r2, r5
 800d3e2:	9006      	str	r0, [sp, #24]
 800d3e4:	4621      	mov	r1, r4
 800d3e6:	4648      	mov	r0, r9
 800d3e8:	f000 fbb8 	bl	800db5c <__mdiff>
 800d3ec:	68c2      	ldr	r2, [r0, #12]
 800d3ee:	4606      	mov	r6, r0
 800d3f0:	b9fa      	cbnz	r2, 800d432 <_dtoa_r+0x942>
 800d3f2:	4601      	mov	r1, r0
 800d3f4:	9801      	ldr	r0, [sp, #4]
 800d3f6:	f000 fb95 	bl	800db24 <__mcmp>
 800d3fa:	4602      	mov	r2, r0
 800d3fc:	4631      	mov	r1, r6
 800d3fe:	4648      	mov	r0, r9
 800d400:	920a      	str	r2, [sp, #40]	@ 0x28
 800d402:	f000 f955 	bl	800d6b0 <_Bfree>
 800d406:	9b07      	ldr	r3, [sp, #28]
 800d408:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d40a:	9e05      	ldr	r6, [sp, #20]
 800d40c:	ea43 0102 	orr.w	r1, r3, r2
 800d410:	9b08      	ldr	r3, [sp, #32]
 800d412:	4319      	orrs	r1, r3
 800d414:	d10f      	bne.n	800d436 <_dtoa_r+0x946>
 800d416:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d41a:	d028      	beq.n	800d46e <_dtoa_r+0x97e>
 800d41c:	9b06      	ldr	r3, [sp, #24]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	dd02      	ble.n	800d428 <_dtoa_r+0x938>
 800d422:	9b02      	ldr	r3, [sp, #8]
 800d424:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800d428:	f88b a000 	strb.w	sl, [fp]
 800d42c:	e639      	b.n	800d0a2 <_dtoa_r+0x5b2>
 800d42e:	4628      	mov	r0, r5
 800d430:	e7bd      	b.n	800d3ae <_dtoa_r+0x8be>
 800d432:	2201      	movs	r2, #1
 800d434:	e7e2      	b.n	800d3fc <_dtoa_r+0x90c>
 800d436:	9b06      	ldr	r3, [sp, #24]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	db04      	blt.n	800d446 <_dtoa_r+0x956>
 800d43c:	9907      	ldr	r1, [sp, #28]
 800d43e:	430b      	orrs	r3, r1
 800d440:	9908      	ldr	r1, [sp, #32]
 800d442:	430b      	orrs	r3, r1
 800d444:	d120      	bne.n	800d488 <_dtoa_r+0x998>
 800d446:	2a00      	cmp	r2, #0
 800d448:	ddee      	ble.n	800d428 <_dtoa_r+0x938>
 800d44a:	9901      	ldr	r1, [sp, #4]
 800d44c:	2201      	movs	r2, #1
 800d44e:	4648      	mov	r0, r9
 800d450:	f000 fafc 	bl	800da4c <__lshift>
 800d454:	4621      	mov	r1, r4
 800d456:	9001      	str	r0, [sp, #4]
 800d458:	f000 fb64 	bl	800db24 <__mcmp>
 800d45c:	2800      	cmp	r0, #0
 800d45e:	dc03      	bgt.n	800d468 <_dtoa_r+0x978>
 800d460:	d1e2      	bne.n	800d428 <_dtoa_r+0x938>
 800d462:	f01a 0f01 	tst.w	sl, #1
 800d466:	d0df      	beq.n	800d428 <_dtoa_r+0x938>
 800d468:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d46c:	d1d9      	bne.n	800d422 <_dtoa_r+0x932>
 800d46e:	2339      	movs	r3, #57	@ 0x39
 800d470:	f88b 3000 	strb.w	r3, [fp]
 800d474:	4633      	mov	r3, r6
 800d476:	461e      	mov	r6, r3
 800d478:	3b01      	subs	r3, #1
 800d47a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d47e:	2a39      	cmp	r2, #57	@ 0x39
 800d480:	d053      	beq.n	800d52a <_dtoa_r+0xa3a>
 800d482:	3201      	adds	r2, #1
 800d484:	701a      	strb	r2, [r3, #0]
 800d486:	e60c      	b.n	800d0a2 <_dtoa_r+0x5b2>
 800d488:	2a00      	cmp	r2, #0
 800d48a:	dd07      	ble.n	800d49c <_dtoa_r+0x9ac>
 800d48c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d490:	d0ed      	beq.n	800d46e <_dtoa_r+0x97e>
 800d492:	f10a 0301 	add.w	r3, sl, #1
 800d496:	f88b 3000 	strb.w	r3, [fp]
 800d49a:	e602      	b.n	800d0a2 <_dtoa_r+0x5b2>
 800d49c:	9b05      	ldr	r3, [sp, #20]
 800d49e:	9a05      	ldr	r2, [sp, #20]
 800d4a0:	f803 ac01 	strb.w	sl, [r3, #-1]
 800d4a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4a6:	4293      	cmp	r3, r2
 800d4a8:	d029      	beq.n	800d4fe <_dtoa_r+0xa0e>
 800d4aa:	9901      	ldr	r1, [sp, #4]
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	220a      	movs	r2, #10
 800d4b0:	4648      	mov	r0, r9
 800d4b2:	f000 f91f 	bl	800d6f4 <__multadd>
 800d4b6:	45a8      	cmp	r8, r5
 800d4b8:	9001      	str	r0, [sp, #4]
 800d4ba:	f04f 0300 	mov.w	r3, #0
 800d4be:	f04f 020a 	mov.w	r2, #10
 800d4c2:	4641      	mov	r1, r8
 800d4c4:	4648      	mov	r0, r9
 800d4c6:	d107      	bne.n	800d4d8 <_dtoa_r+0x9e8>
 800d4c8:	f000 f914 	bl	800d6f4 <__multadd>
 800d4cc:	4680      	mov	r8, r0
 800d4ce:	4605      	mov	r5, r0
 800d4d0:	9b05      	ldr	r3, [sp, #20]
 800d4d2:	3301      	adds	r3, #1
 800d4d4:	9305      	str	r3, [sp, #20]
 800d4d6:	e775      	b.n	800d3c4 <_dtoa_r+0x8d4>
 800d4d8:	f000 f90c 	bl	800d6f4 <__multadd>
 800d4dc:	4629      	mov	r1, r5
 800d4de:	4680      	mov	r8, r0
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	220a      	movs	r2, #10
 800d4e4:	4648      	mov	r0, r9
 800d4e6:	f000 f905 	bl	800d6f4 <__multadd>
 800d4ea:	4605      	mov	r5, r0
 800d4ec:	e7f0      	b.n	800d4d0 <_dtoa_r+0x9e0>
 800d4ee:	f1bb 0f00 	cmp.w	fp, #0
 800d4f2:	bfcc      	ite	gt
 800d4f4:	465e      	movgt	r6, fp
 800d4f6:	2601      	movle	r6, #1
 800d4f8:	443e      	add	r6, r7
 800d4fa:	f04f 0800 	mov.w	r8, #0
 800d4fe:	9901      	ldr	r1, [sp, #4]
 800d500:	2201      	movs	r2, #1
 800d502:	4648      	mov	r0, r9
 800d504:	f000 faa2 	bl	800da4c <__lshift>
 800d508:	4621      	mov	r1, r4
 800d50a:	9001      	str	r0, [sp, #4]
 800d50c:	f000 fb0a 	bl	800db24 <__mcmp>
 800d510:	2800      	cmp	r0, #0
 800d512:	dcaf      	bgt.n	800d474 <_dtoa_r+0x984>
 800d514:	d102      	bne.n	800d51c <_dtoa_r+0xa2c>
 800d516:	f01a 0f01 	tst.w	sl, #1
 800d51a:	d1ab      	bne.n	800d474 <_dtoa_r+0x984>
 800d51c:	4633      	mov	r3, r6
 800d51e:	461e      	mov	r6, r3
 800d520:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d524:	2a30      	cmp	r2, #48	@ 0x30
 800d526:	d0fa      	beq.n	800d51e <_dtoa_r+0xa2e>
 800d528:	e5bb      	b.n	800d0a2 <_dtoa_r+0x5b2>
 800d52a:	429f      	cmp	r7, r3
 800d52c:	d1a3      	bne.n	800d476 <_dtoa_r+0x986>
 800d52e:	9b04      	ldr	r3, [sp, #16]
 800d530:	3301      	adds	r3, #1
 800d532:	9304      	str	r3, [sp, #16]
 800d534:	2331      	movs	r3, #49	@ 0x31
 800d536:	703b      	strb	r3, [r7, #0]
 800d538:	e5b3      	b.n	800d0a2 <_dtoa_r+0x5b2>
 800d53a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d53c:	4f16      	ldr	r7, [pc, #88]	@ (800d598 <_dtoa_r+0xaa8>)
 800d53e:	b11b      	cbz	r3, 800d548 <_dtoa_r+0xa58>
 800d540:	f107 0308 	add.w	r3, r7, #8
 800d544:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800d546:	6013      	str	r3, [r2, #0]
 800d548:	4638      	mov	r0, r7
 800d54a:	b011      	add	sp, #68	@ 0x44
 800d54c:	ecbd 8b02 	vpop	{d8}
 800d550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d554:	9b07      	ldr	r3, [sp, #28]
 800d556:	2b01      	cmp	r3, #1
 800d558:	f77f ae36 	ble.w	800d1c8 <_dtoa_r+0x6d8>
 800d55c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d55e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d560:	2001      	movs	r0, #1
 800d562:	e656      	b.n	800d212 <_dtoa_r+0x722>
 800d564:	f1bb 0f00 	cmp.w	fp, #0
 800d568:	f77f aed7 	ble.w	800d31a <_dtoa_r+0x82a>
 800d56c:	463e      	mov	r6, r7
 800d56e:	9801      	ldr	r0, [sp, #4]
 800d570:	4621      	mov	r1, r4
 800d572:	f7ff fa34 	bl	800c9de <quorem>
 800d576:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800d57a:	f806 ab01 	strb.w	sl, [r6], #1
 800d57e:	1bf2      	subs	r2, r6, r7
 800d580:	4593      	cmp	fp, r2
 800d582:	ddb4      	ble.n	800d4ee <_dtoa_r+0x9fe>
 800d584:	9901      	ldr	r1, [sp, #4]
 800d586:	2300      	movs	r3, #0
 800d588:	220a      	movs	r2, #10
 800d58a:	4648      	mov	r0, r9
 800d58c:	f000 f8b2 	bl	800d6f4 <__multadd>
 800d590:	9001      	str	r0, [sp, #4]
 800d592:	e7ec      	b.n	800d56e <_dtoa_r+0xa7e>
 800d594:	0806d338 	.word	0x0806d338
 800d598:	0806d2bc 	.word	0x0806d2bc

0800d59c <_free_r>:
 800d59c:	b538      	push	{r3, r4, r5, lr}
 800d59e:	4605      	mov	r5, r0
 800d5a0:	2900      	cmp	r1, #0
 800d5a2:	d041      	beq.n	800d628 <_free_r+0x8c>
 800d5a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d5a8:	1f0c      	subs	r4, r1, #4
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	bfb8      	it	lt
 800d5ae:	18e4      	addlt	r4, r4, r3
 800d5b0:	f7fe fbb0 	bl	800bd14 <__malloc_lock>
 800d5b4:	4a1d      	ldr	r2, [pc, #116]	@ (800d62c <_free_r+0x90>)
 800d5b6:	6813      	ldr	r3, [r2, #0]
 800d5b8:	b933      	cbnz	r3, 800d5c8 <_free_r+0x2c>
 800d5ba:	6063      	str	r3, [r4, #4]
 800d5bc:	6014      	str	r4, [r2, #0]
 800d5be:	4628      	mov	r0, r5
 800d5c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d5c4:	f7fe bbac 	b.w	800bd20 <__malloc_unlock>
 800d5c8:	42a3      	cmp	r3, r4
 800d5ca:	d908      	bls.n	800d5de <_free_r+0x42>
 800d5cc:	6820      	ldr	r0, [r4, #0]
 800d5ce:	1821      	adds	r1, r4, r0
 800d5d0:	428b      	cmp	r3, r1
 800d5d2:	bf01      	itttt	eq
 800d5d4:	6819      	ldreq	r1, [r3, #0]
 800d5d6:	685b      	ldreq	r3, [r3, #4]
 800d5d8:	1809      	addeq	r1, r1, r0
 800d5da:	6021      	streq	r1, [r4, #0]
 800d5dc:	e7ed      	b.n	800d5ba <_free_r+0x1e>
 800d5de:	461a      	mov	r2, r3
 800d5e0:	685b      	ldr	r3, [r3, #4]
 800d5e2:	b10b      	cbz	r3, 800d5e8 <_free_r+0x4c>
 800d5e4:	42a3      	cmp	r3, r4
 800d5e6:	d9fa      	bls.n	800d5de <_free_r+0x42>
 800d5e8:	6811      	ldr	r1, [r2, #0]
 800d5ea:	1850      	adds	r0, r2, r1
 800d5ec:	42a0      	cmp	r0, r4
 800d5ee:	d10b      	bne.n	800d608 <_free_r+0x6c>
 800d5f0:	6820      	ldr	r0, [r4, #0]
 800d5f2:	4401      	add	r1, r0
 800d5f4:	1850      	adds	r0, r2, r1
 800d5f6:	4283      	cmp	r3, r0
 800d5f8:	6011      	str	r1, [r2, #0]
 800d5fa:	d1e0      	bne.n	800d5be <_free_r+0x22>
 800d5fc:	6818      	ldr	r0, [r3, #0]
 800d5fe:	685b      	ldr	r3, [r3, #4]
 800d600:	6053      	str	r3, [r2, #4]
 800d602:	4408      	add	r0, r1
 800d604:	6010      	str	r0, [r2, #0]
 800d606:	e7da      	b.n	800d5be <_free_r+0x22>
 800d608:	d902      	bls.n	800d610 <_free_r+0x74>
 800d60a:	230c      	movs	r3, #12
 800d60c:	602b      	str	r3, [r5, #0]
 800d60e:	e7d6      	b.n	800d5be <_free_r+0x22>
 800d610:	6820      	ldr	r0, [r4, #0]
 800d612:	1821      	adds	r1, r4, r0
 800d614:	428b      	cmp	r3, r1
 800d616:	bf04      	itt	eq
 800d618:	6819      	ldreq	r1, [r3, #0]
 800d61a:	685b      	ldreq	r3, [r3, #4]
 800d61c:	6063      	str	r3, [r4, #4]
 800d61e:	bf04      	itt	eq
 800d620:	1809      	addeq	r1, r1, r0
 800d622:	6021      	streq	r1, [r4, #0]
 800d624:	6054      	str	r4, [r2, #4]
 800d626:	e7ca      	b.n	800d5be <_free_r+0x22>
 800d628:	bd38      	pop	{r3, r4, r5, pc}
 800d62a:	bf00      	nop
 800d62c:	240691a8 	.word	0x240691a8

0800d630 <_Balloc>:
 800d630:	b570      	push	{r4, r5, r6, lr}
 800d632:	69c6      	ldr	r6, [r0, #28]
 800d634:	4604      	mov	r4, r0
 800d636:	460d      	mov	r5, r1
 800d638:	b976      	cbnz	r6, 800d658 <_Balloc+0x28>
 800d63a:	2010      	movs	r0, #16
 800d63c:	f7fe fac0 	bl	800bbc0 <malloc>
 800d640:	4602      	mov	r2, r0
 800d642:	61e0      	str	r0, [r4, #28]
 800d644:	b920      	cbnz	r0, 800d650 <_Balloc+0x20>
 800d646:	4b18      	ldr	r3, [pc, #96]	@ (800d6a8 <_Balloc+0x78>)
 800d648:	4818      	ldr	r0, [pc, #96]	@ (800d6ac <_Balloc+0x7c>)
 800d64a:	216b      	movs	r1, #107	@ 0x6b
 800d64c:	f000 fd7e 	bl	800e14c <__assert_func>
 800d650:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d654:	6006      	str	r6, [r0, #0]
 800d656:	60c6      	str	r6, [r0, #12]
 800d658:	69e6      	ldr	r6, [r4, #28]
 800d65a:	68f3      	ldr	r3, [r6, #12]
 800d65c:	b183      	cbz	r3, 800d680 <_Balloc+0x50>
 800d65e:	69e3      	ldr	r3, [r4, #28]
 800d660:	68db      	ldr	r3, [r3, #12]
 800d662:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d666:	b9b8      	cbnz	r0, 800d698 <_Balloc+0x68>
 800d668:	2101      	movs	r1, #1
 800d66a:	fa01 f605 	lsl.w	r6, r1, r5
 800d66e:	1d72      	adds	r2, r6, #5
 800d670:	0092      	lsls	r2, r2, #2
 800d672:	4620      	mov	r0, r4
 800d674:	f000 fd88 	bl	800e188 <_calloc_r>
 800d678:	b160      	cbz	r0, 800d694 <_Balloc+0x64>
 800d67a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d67e:	e00e      	b.n	800d69e <_Balloc+0x6e>
 800d680:	2221      	movs	r2, #33	@ 0x21
 800d682:	2104      	movs	r1, #4
 800d684:	4620      	mov	r0, r4
 800d686:	f000 fd7f 	bl	800e188 <_calloc_r>
 800d68a:	69e3      	ldr	r3, [r4, #28]
 800d68c:	60f0      	str	r0, [r6, #12]
 800d68e:	68db      	ldr	r3, [r3, #12]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d1e4      	bne.n	800d65e <_Balloc+0x2e>
 800d694:	2000      	movs	r0, #0
 800d696:	bd70      	pop	{r4, r5, r6, pc}
 800d698:	6802      	ldr	r2, [r0, #0]
 800d69a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d69e:	2300      	movs	r3, #0
 800d6a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d6a4:	e7f7      	b.n	800d696 <_Balloc+0x66>
 800d6a6:	bf00      	nop
 800d6a8:	0806d2c9 	.word	0x0806d2c9
 800d6ac:	0806d349 	.word	0x0806d349

0800d6b0 <_Bfree>:
 800d6b0:	b570      	push	{r4, r5, r6, lr}
 800d6b2:	69c6      	ldr	r6, [r0, #28]
 800d6b4:	4605      	mov	r5, r0
 800d6b6:	460c      	mov	r4, r1
 800d6b8:	b976      	cbnz	r6, 800d6d8 <_Bfree+0x28>
 800d6ba:	2010      	movs	r0, #16
 800d6bc:	f7fe fa80 	bl	800bbc0 <malloc>
 800d6c0:	4602      	mov	r2, r0
 800d6c2:	61e8      	str	r0, [r5, #28]
 800d6c4:	b920      	cbnz	r0, 800d6d0 <_Bfree+0x20>
 800d6c6:	4b09      	ldr	r3, [pc, #36]	@ (800d6ec <_Bfree+0x3c>)
 800d6c8:	4809      	ldr	r0, [pc, #36]	@ (800d6f0 <_Bfree+0x40>)
 800d6ca:	218f      	movs	r1, #143	@ 0x8f
 800d6cc:	f000 fd3e 	bl	800e14c <__assert_func>
 800d6d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d6d4:	6006      	str	r6, [r0, #0]
 800d6d6:	60c6      	str	r6, [r0, #12]
 800d6d8:	b13c      	cbz	r4, 800d6ea <_Bfree+0x3a>
 800d6da:	69eb      	ldr	r3, [r5, #28]
 800d6dc:	6862      	ldr	r2, [r4, #4]
 800d6de:	68db      	ldr	r3, [r3, #12]
 800d6e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d6e4:	6021      	str	r1, [r4, #0]
 800d6e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d6ea:	bd70      	pop	{r4, r5, r6, pc}
 800d6ec:	0806d2c9 	.word	0x0806d2c9
 800d6f0:	0806d349 	.word	0x0806d349

0800d6f4 <__multadd>:
 800d6f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6f8:	690d      	ldr	r5, [r1, #16]
 800d6fa:	4607      	mov	r7, r0
 800d6fc:	460c      	mov	r4, r1
 800d6fe:	461e      	mov	r6, r3
 800d700:	f101 0c14 	add.w	ip, r1, #20
 800d704:	2000      	movs	r0, #0
 800d706:	f8dc 3000 	ldr.w	r3, [ip]
 800d70a:	b299      	uxth	r1, r3
 800d70c:	fb02 6101 	mla	r1, r2, r1, r6
 800d710:	0c1e      	lsrs	r6, r3, #16
 800d712:	0c0b      	lsrs	r3, r1, #16
 800d714:	fb02 3306 	mla	r3, r2, r6, r3
 800d718:	b289      	uxth	r1, r1
 800d71a:	3001      	adds	r0, #1
 800d71c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d720:	4285      	cmp	r5, r0
 800d722:	f84c 1b04 	str.w	r1, [ip], #4
 800d726:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d72a:	dcec      	bgt.n	800d706 <__multadd+0x12>
 800d72c:	b30e      	cbz	r6, 800d772 <__multadd+0x7e>
 800d72e:	68a3      	ldr	r3, [r4, #8]
 800d730:	42ab      	cmp	r3, r5
 800d732:	dc19      	bgt.n	800d768 <__multadd+0x74>
 800d734:	6861      	ldr	r1, [r4, #4]
 800d736:	4638      	mov	r0, r7
 800d738:	3101      	adds	r1, #1
 800d73a:	f7ff ff79 	bl	800d630 <_Balloc>
 800d73e:	4680      	mov	r8, r0
 800d740:	b928      	cbnz	r0, 800d74e <__multadd+0x5a>
 800d742:	4602      	mov	r2, r0
 800d744:	4b0c      	ldr	r3, [pc, #48]	@ (800d778 <__multadd+0x84>)
 800d746:	480d      	ldr	r0, [pc, #52]	@ (800d77c <__multadd+0x88>)
 800d748:	21ba      	movs	r1, #186	@ 0xba
 800d74a:	f000 fcff 	bl	800e14c <__assert_func>
 800d74e:	6922      	ldr	r2, [r4, #16]
 800d750:	3202      	adds	r2, #2
 800d752:	f104 010c 	add.w	r1, r4, #12
 800d756:	0092      	lsls	r2, r2, #2
 800d758:	300c      	adds	r0, #12
 800d75a:	f7ff f932 	bl	800c9c2 <memcpy>
 800d75e:	4621      	mov	r1, r4
 800d760:	4638      	mov	r0, r7
 800d762:	f7ff ffa5 	bl	800d6b0 <_Bfree>
 800d766:	4644      	mov	r4, r8
 800d768:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d76c:	3501      	adds	r5, #1
 800d76e:	615e      	str	r6, [r3, #20]
 800d770:	6125      	str	r5, [r4, #16]
 800d772:	4620      	mov	r0, r4
 800d774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d778:	0806d338 	.word	0x0806d338
 800d77c:	0806d349 	.word	0x0806d349

0800d780 <__hi0bits>:
 800d780:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d784:	4603      	mov	r3, r0
 800d786:	bf36      	itet	cc
 800d788:	0403      	lslcc	r3, r0, #16
 800d78a:	2000      	movcs	r0, #0
 800d78c:	2010      	movcc	r0, #16
 800d78e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d792:	bf3c      	itt	cc
 800d794:	021b      	lslcc	r3, r3, #8
 800d796:	3008      	addcc	r0, #8
 800d798:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d79c:	bf3c      	itt	cc
 800d79e:	011b      	lslcc	r3, r3, #4
 800d7a0:	3004      	addcc	r0, #4
 800d7a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d7a6:	bf3c      	itt	cc
 800d7a8:	009b      	lslcc	r3, r3, #2
 800d7aa:	3002      	addcc	r0, #2
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	db05      	blt.n	800d7bc <__hi0bits+0x3c>
 800d7b0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d7b4:	f100 0001 	add.w	r0, r0, #1
 800d7b8:	bf08      	it	eq
 800d7ba:	2020      	moveq	r0, #32
 800d7bc:	4770      	bx	lr

0800d7be <__lo0bits>:
 800d7be:	6803      	ldr	r3, [r0, #0]
 800d7c0:	4602      	mov	r2, r0
 800d7c2:	f013 0007 	ands.w	r0, r3, #7
 800d7c6:	d00b      	beq.n	800d7e0 <__lo0bits+0x22>
 800d7c8:	07d9      	lsls	r1, r3, #31
 800d7ca:	d421      	bmi.n	800d810 <__lo0bits+0x52>
 800d7cc:	0798      	lsls	r0, r3, #30
 800d7ce:	bf49      	itett	mi
 800d7d0:	085b      	lsrmi	r3, r3, #1
 800d7d2:	089b      	lsrpl	r3, r3, #2
 800d7d4:	2001      	movmi	r0, #1
 800d7d6:	6013      	strmi	r3, [r2, #0]
 800d7d8:	bf5c      	itt	pl
 800d7da:	6013      	strpl	r3, [r2, #0]
 800d7dc:	2002      	movpl	r0, #2
 800d7de:	4770      	bx	lr
 800d7e0:	b299      	uxth	r1, r3
 800d7e2:	b909      	cbnz	r1, 800d7e8 <__lo0bits+0x2a>
 800d7e4:	0c1b      	lsrs	r3, r3, #16
 800d7e6:	2010      	movs	r0, #16
 800d7e8:	b2d9      	uxtb	r1, r3
 800d7ea:	b909      	cbnz	r1, 800d7f0 <__lo0bits+0x32>
 800d7ec:	3008      	adds	r0, #8
 800d7ee:	0a1b      	lsrs	r3, r3, #8
 800d7f0:	0719      	lsls	r1, r3, #28
 800d7f2:	bf04      	itt	eq
 800d7f4:	091b      	lsreq	r3, r3, #4
 800d7f6:	3004      	addeq	r0, #4
 800d7f8:	0799      	lsls	r1, r3, #30
 800d7fa:	bf04      	itt	eq
 800d7fc:	089b      	lsreq	r3, r3, #2
 800d7fe:	3002      	addeq	r0, #2
 800d800:	07d9      	lsls	r1, r3, #31
 800d802:	d403      	bmi.n	800d80c <__lo0bits+0x4e>
 800d804:	085b      	lsrs	r3, r3, #1
 800d806:	f100 0001 	add.w	r0, r0, #1
 800d80a:	d003      	beq.n	800d814 <__lo0bits+0x56>
 800d80c:	6013      	str	r3, [r2, #0]
 800d80e:	4770      	bx	lr
 800d810:	2000      	movs	r0, #0
 800d812:	4770      	bx	lr
 800d814:	2020      	movs	r0, #32
 800d816:	4770      	bx	lr

0800d818 <__i2b>:
 800d818:	b510      	push	{r4, lr}
 800d81a:	460c      	mov	r4, r1
 800d81c:	2101      	movs	r1, #1
 800d81e:	f7ff ff07 	bl	800d630 <_Balloc>
 800d822:	4602      	mov	r2, r0
 800d824:	b928      	cbnz	r0, 800d832 <__i2b+0x1a>
 800d826:	4b05      	ldr	r3, [pc, #20]	@ (800d83c <__i2b+0x24>)
 800d828:	4805      	ldr	r0, [pc, #20]	@ (800d840 <__i2b+0x28>)
 800d82a:	f240 1145 	movw	r1, #325	@ 0x145
 800d82e:	f000 fc8d 	bl	800e14c <__assert_func>
 800d832:	2301      	movs	r3, #1
 800d834:	6144      	str	r4, [r0, #20]
 800d836:	6103      	str	r3, [r0, #16]
 800d838:	bd10      	pop	{r4, pc}
 800d83a:	bf00      	nop
 800d83c:	0806d338 	.word	0x0806d338
 800d840:	0806d349 	.word	0x0806d349

0800d844 <__multiply>:
 800d844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d848:	4614      	mov	r4, r2
 800d84a:	690a      	ldr	r2, [r1, #16]
 800d84c:	6923      	ldr	r3, [r4, #16]
 800d84e:	429a      	cmp	r2, r3
 800d850:	bfa8      	it	ge
 800d852:	4623      	movge	r3, r4
 800d854:	460f      	mov	r7, r1
 800d856:	bfa4      	itt	ge
 800d858:	460c      	movge	r4, r1
 800d85a:	461f      	movge	r7, r3
 800d85c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d860:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d864:	68a3      	ldr	r3, [r4, #8]
 800d866:	6861      	ldr	r1, [r4, #4]
 800d868:	eb0a 0609 	add.w	r6, sl, r9
 800d86c:	42b3      	cmp	r3, r6
 800d86e:	b085      	sub	sp, #20
 800d870:	bfb8      	it	lt
 800d872:	3101      	addlt	r1, #1
 800d874:	f7ff fedc 	bl	800d630 <_Balloc>
 800d878:	b930      	cbnz	r0, 800d888 <__multiply+0x44>
 800d87a:	4602      	mov	r2, r0
 800d87c:	4b44      	ldr	r3, [pc, #272]	@ (800d990 <__multiply+0x14c>)
 800d87e:	4845      	ldr	r0, [pc, #276]	@ (800d994 <__multiply+0x150>)
 800d880:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d884:	f000 fc62 	bl	800e14c <__assert_func>
 800d888:	f100 0514 	add.w	r5, r0, #20
 800d88c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d890:	462b      	mov	r3, r5
 800d892:	2200      	movs	r2, #0
 800d894:	4543      	cmp	r3, r8
 800d896:	d321      	bcc.n	800d8dc <__multiply+0x98>
 800d898:	f107 0114 	add.w	r1, r7, #20
 800d89c:	f104 0214 	add.w	r2, r4, #20
 800d8a0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d8a4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d8a8:	9302      	str	r3, [sp, #8]
 800d8aa:	1b13      	subs	r3, r2, r4
 800d8ac:	3b15      	subs	r3, #21
 800d8ae:	f023 0303 	bic.w	r3, r3, #3
 800d8b2:	3304      	adds	r3, #4
 800d8b4:	f104 0715 	add.w	r7, r4, #21
 800d8b8:	42ba      	cmp	r2, r7
 800d8ba:	bf38      	it	cc
 800d8bc:	2304      	movcc	r3, #4
 800d8be:	9301      	str	r3, [sp, #4]
 800d8c0:	9b02      	ldr	r3, [sp, #8]
 800d8c2:	9103      	str	r1, [sp, #12]
 800d8c4:	428b      	cmp	r3, r1
 800d8c6:	d80c      	bhi.n	800d8e2 <__multiply+0x9e>
 800d8c8:	2e00      	cmp	r6, #0
 800d8ca:	dd03      	ble.n	800d8d4 <__multiply+0x90>
 800d8cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d05b      	beq.n	800d98c <__multiply+0x148>
 800d8d4:	6106      	str	r6, [r0, #16]
 800d8d6:	b005      	add	sp, #20
 800d8d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8dc:	f843 2b04 	str.w	r2, [r3], #4
 800d8e0:	e7d8      	b.n	800d894 <__multiply+0x50>
 800d8e2:	f8b1 a000 	ldrh.w	sl, [r1]
 800d8e6:	f1ba 0f00 	cmp.w	sl, #0
 800d8ea:	d024      	beq.n	800d936 <__multiply+0xf2>
 800d8ec:	f104 0e14 	add.w	lr, r4, #20
 800d8f0:	46a9      	mov	r9, r5
 800d8f2:	f04f 0c00 	mov.w	ip, #0
 800d8f6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d8fa:	f8d9 3000 	ldr.w	r3, [r9]
 800d8fe:	fa1f fb87 	uxth.w	fp, r7
 800d902:	b29b      	uxth	r3, r3
 800d904:	fb0a 330b 	mla	r3, sl, fp, r3
 800d908:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d90c:	f8d9 7000 	ldr.w	r7, [r9]
 800d910:	4463      	add	r3, ip
 800d912:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d916:	fb0a c70b 	mla	r7, sl, fp, ip
 800d91a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d91e:	b29b      	uxth	r3, r3
 800d920:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d924:	4572      	cmp	r2, lr
 800d926:	f849 3b04 	str.w	r3, [r9], #4
 800d92a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d92e:	d8e2      	bhi.n	800d8f6 <__multiply+0xb2>
 800d930:	9b01      	ldr	r3, [sp, #4]
 800d932:	f845 c003 	str.w	ip, [r5, r3]
 800d936:	9b03      	ldr	r3, [sp, #12]
 800d938:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d93c:	3104      	adds	r1, #4
 800d93e:	f1b9 0f00 	cmp.w	r9, #0
 800d942:	d021      	beq.n	800d988 <__multiply+0x144>
 800d944:	682b      	ldr	r3, [r5, #0]
 800d946:	f104 0c14 	add.w	ip, r4, #20
 800d94a:	46ae      	mov	lr, r5
 800d94c:	f04f 0a00 	mov.w	sl, #0
 800d950:	f8bc b000 	ldrh.w	fp, [ip]
 800d954:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d958:	fb09 770b 	mla	r7, r9, fp, r7
 800d95c:	4457      	add	r7, sl
 800d95e:	b29b      	uxth	r3, r3
 800d960:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d964:	f84e 3b04 	str.w	r3, [lr], #4
 800d968:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d96c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d970:	f8be 3000 	ldrh.w	r3, [lr]
 800d974:	fb09 330a 	mla	r3, r9, sl, r3
 800d978:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d97c:	4562      	cmp	r2, ip
 800d97e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d982:	d8e5      	bhi.n	800d950 <__multiply+0x10c>
 800d984:	9f01      	ldr	r7, [sp, #4]
 800d986:	51eb      	str	r3, [r5, r7]
 800d988:	3504      	adds	r5, #4
 800d98a:	e799      	b.n	800d8c0 <__multiply+0x7c>
 800d98c:	3e01      	subs	r6, #1
 800d98e:	e79b      	b.n	800d8c8 <__multiply+0x84>
 800d990:	0806d338 	.word	0x0806d338
 800d994:	0806d349 	.word	0x0806d349

0800d998 <__pow5mult>:
 800d998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d99c:	4615      	mov	r5, r2
 800d99e:	f012 0203 	ands.w	r2, r2, #3
 800d9a2:	4607      	mov	r7, r0
 800d9a4:	460e      	mov	r6, r1
 800d9a6:	d007      	beq.n	800d9b8 <__pow5mult+0x20>
 800d9a8:	4c25      	ldr	r4, [pc, #148]	@ (800da40 <__pow5mult+0xa8>)
 800d9aa:	3a01      	subs	r2, #1
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d9b2:	f7ff fe9f 	bl	800d6f4 <__multadd>
 800d9b6:	4606      	mov	r6, r0
 800d9b8:	10ad      	asrs	r5, r5, #2
 800d9ba:	d03d      	beq.n	800da38 <__pow5mult+0xa0>
 800d9bc:	69fc      	ldr	r4, [r7, #28]
 800d9be:	b97c      	cbnz	r4, 800d9e0 <__pow5mult+0x48>
 800d9c0:	2010      	movs	r0, #16
 800d9c2:	f7fe f8fd 	bl	800bbc0 <malloc>
 800d9c6:	4602      	mov	r2, r0
 800d9c8:	61f8      	str	r0, [r7, #28]
 800d9ca:	b928      	cbnz	r0, 800d9d8 <__pow5mult+0x40>
 800d9cc:	4b1d      	ldr	r3, [pc, #116]	@ (800da44 <__pow5mult+0xac>)
 800d9ce:	481e      	ldr	r0, [pc, #120]	@ (800da48 <__pow5mult+0xb0>)
 800d9d0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d9d4:	f000 fbba 	bl	800e14c <__assert_func>
 800d9d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d9dc:	6004      	str	r4, [r0, #0]
 800d9de:	60c4      	str	r4, [r0, #12]
 800d9e0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d9e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d9e8:	b94c      	cbnz	r4, 800d9fe <__pow5mult+0x66>
 800d9ea:	f240 2171 	movw	r1, #625	@ 0x271
 800d9ee:	4638      	mov	r0, r7
 800d9f0:	f7ff ff12 	bl	800d818 <__i2b>
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	f8c8 0008 	str.w	r0, [r8, #8]
 800d9fa:	4604      	mov	r4, r0
 800d9fc:	6003      	str	r3, [r0, #0]
 800d9fe:	f04f 0900 	mov.w	r9, #0
 800da02:	07eb      	lsls	r3, r5, #31
 800da04:	d50a      	bpl.n	800da1c <__pow5mult+0x84>
 800da06:	4631      	mov	r1, r6
 800da08:	4622      	mov	r2, r4
 800da0a:	4638      	mov	r0, r7
 800da0c:	f7ff ff1a 	bl	800d844 <__multiply>
 800da10:	4631      	mov	r1, r6
 800da12:	4680      	mov	r8, r0
 800da14:	4638      	mov	r0, r7
 800da16:	f7ff fe4b 	bl	800d6b0 <_Bfree>
 800da1a:	4646      	mov	r6, r8
 800da1c:	106d      	asrs	r5, r5, #1
 800da1e:	d00b      	beq.n	800da38 <__pow5mult+0xa0>
 800da20:	6820      	ldr	r0, [r4, #0]
 800da22:	b938      	cbnz	r0, 800da34 <__pow5mult+0x9c>
 800da24:	4622      	mov	r2, r4
 800da26:	4621      	mov	r1, r4
 800da28:	4638      	mov	r0, r7
 800da2a:	f7ff ff0b 	bl	800d844 <__multiply>
 800da2e:	6020      	str	r0, [r4, #0]
 800da30:	f8c0 9000 	str.w	r9, [r0]
 800da34:	4604      	mov	r4, r0
 800da36:	e7e4      	b.n	800da02 <__pow5mult+0x6a>
 800da38:	4630      	mov	r0, r6
 800da3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da3e:	bf00      	nop
 800da40:	0806d3a4 	.word	0x0806d3a4
 800da44:	0806d2c9 	.word	0x0806d2c9
 800da48:	0806d349 	.word	0x0806d349

0800da4c <__lshift>:
 800da4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da50:	460c      	mov	r4, r1
 800da52:	6849      	ldr	r1, [r1, #4]
 800da54:	6923      	ldr	r3, [r4, #16]
 800da56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800da5a:	68a3      	ldr	r3, [r4, #8]
 800da5c:	4607      	mov	r7, r0
 800da5e:	4691      	mov	r9, r2
 800da60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800da64:	f108 0601 	add.w	r6, r8, #1
 800da68:	42b3      	cmp	r3, r6
 800da6a:	db0b      	blt.n	800da84 <__lshift+0x38>
 800da6c:	4638      	mov	r0, r7
 800da6e:	f7ff fddf 	bl	800d630 <_Balloc>
 800da72:	4605      	mov	r5, r0
 800da74:	b948      	cbnz	r0, 800da8a <__lshift+0x3e>
 800da76:	4602      	mov	r2, r0
 800da78:	4b28      	ldr	r3, [pc, #160]	@ (800db1c <__lshift+0xd0>)
 800da7a:	4829      	ldr	r0, [pc, #164]	@ (800db20 <__lshift+0xd4>)
 800da7c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800da80:	f000 fb64 	bl	800e14c <__assert_func>
 800da84:	3101      	adds	r1, #1
 800da86:	005b      	lsls	r3, r3, #1
 800da88:	e7ee      	b.n	800da68 <__lshift+0x1c>
 800da8a:	2300      	movs	r3, #0
 800da8c:	f100 0114 	add.w	r1, r0, #20
 800da90:	f100 0210 	add.w	r2, r0, #16
 800da94:	4618      	mov	r0, r3
 800da96:	4553      	cmp	r3, sl
 800da98:	db33      	blt.n	800db02 <__lshift+0xb6>
 800da9a:	6920      	ldr	r0, [r4, #16]
 800da9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800daa0:	f104 0314 	add.w	r3, r4, #20
 800daa4:	f019 091f 	ands.w	r9, r9, #31
 800daa8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800daac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dab0:	d02b      	beq.n	800db0a <__lshift+0xbe>
 800dab2:	f1c9 0e20 	rsb	lr, r9, #32
 800dab6:	468a      	mov	sl, r1
 800dab8:	2200      	movs	r2, #0
 800daba:	6818      	ldr	r0, [r3, #0]
 800dabc:	fa00 f009 	lsl.w	r0, r0, r9
 800dac0:	4310      	orrs	r0, r2
 800dac2:	f84a 0b04 	str.w	r0, [sl], #4
 800dac6:	f853 2b04 	ldr.w	r2, [r3], #4
 800daca:	459c      	cmp	ip, r3
 800dacc:	fa22 f20e 	lsr.w	r2, r2, lr
 800dad0:	d8f3      	bhi.n	800daba <__lshift+0x6e>
 800dad2:	ebac 0304 	sub.w	r3, ip, r4
 800dad6:	3b15      	subs	r3, #21
 800dad8:	f023 0303 	bic.w	r3, r3, #3
 800dadc:	3304      	adds	r3, #4
 800dade:	f104 0015 	add.w	r0, r4, #21
 800dae2:	4584      	cmp	ip, r0
 800dae4:	bf38      	it	cc
 800dae6:	2304      	movcc	r3, #4
 800dae8:	50ca      	str	r2, [r1, r3]
 800daea:	b10a      	cbz	r2, 800daf0 <__lshift+0xa4>
 800daec:	f108 0602 	add.w	r6, r8, #2
 800daf0:	3e01      	subs	r6, #1
 800daf2:	4638      	mov	r0, r7
 800daf4:	612e      	str	r6, [r5, #16]
 800daf6:	4621      	mov	r1, r4
 800daf8:	f7ff fdda 	bl	800d6b0 <_Bfree>
 800dafc:	4628      	mov	r0, r5
 800dafe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db02:	f842 0f04 	str.w	r0, [r2, #4]!
 800db06:	3301      	adds	r3, #1
 800db08:	e7c5      	b.n	800da96 <__lshift+0x4a>
 800db0a:	3904      	subs	r1, #4
 800db0c:	f853 2b04 	ldr.w	r2, [r3], #4
 800db10:	f841 2f04 	str.w	r2, [r1, #4]!
 800db14:	459c      	cmp	ip, r3
 800db16:	d8f9      	bhi.n	800db0c <__lshift+0xc0>
 800db18:	e7ea      	b.n	800daf0 <__lshift+0xa4>
 800db1a:	bf00      	nop
 800db1c:	0806d338 	.word	0x0806d338
 800db20:	0806d349 	.word	0x0806d349

0800db24 <__mcmp>:
 800db24:	690a      	ldr	r2, [r1, #16]
 800db26:	4603      	mov	r3, r0
 800db28:	6900      	ldr	r0, [r0, #16]
 800db2a:	1a80      	subs	r0, r0, r2
 800db2c:	b530      	push	{r4, r5, lr}
 800db2e:	d10e      	bne.n	800db4e <__mcmp+0x2a>
 800db30:	3314      	adds	r3, #20
 800db32:	3114      	adds	r1, #20
 800db34:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800db38:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800db3c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800db40:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800db44:	4295      	cmp	r5, r2
 800db46:	d003      	beq.n	800db50 <__mcmp+0x2c>
 800db48:	d205      	bcs.n	800db56 <__mcmp+0x32>
 800db4a:	f04f 30ff 	mov.w	r0, #4294967295
 800db4e:	bd30      	pop	{r4, r5, pc}
 800db50:	42a3      	cmp	r3, r4
 800db52:	d3f3      	bcc.n	800db3c <__mcmp+0x18>
 800db54:	e7fb      	b.n	800db4e <__mcmp+0x2a>
 800db56:	2001      	movs	r0, #1
 800db58:	e7f9      	b.n	800db4e <__mcmp+0x2a>
	...

0800db5c <__mdiff>:
 800db5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db60:	4689      	mov	r9, r1
 800db62:	4606      	mov	r6, r0
 800db64:	4611      	mov	r1, r2
 800db66:	4648      	mov	r0, r9
 800db68:	4614      	mov	r4, r2
 800db6a:	f7ff ffdb 	bl	800db24 <__mcmp>
 800db6e:	1e05      	subs	r5, r0, #0
 800db70:	d112      	bne.n	800db98 <__mdiff+0x3c>
 800db72:	4629      	mov	r1, r5
 800db74:	4630      	mov	r0, r6
 800db76:	f7ff fd5b 	bl	800d630 <_Balloc>
 800db7a:	4602      	mov	r2, r0
 800db7c:	b928      	cbnz	r0, 800db8a <__mdiff+0x2e>
 800db7e:	4b3f      	ldr	r3, [pc, #252]	@ (800dc7c <__mdiff+0x120>)
 800db80:	f240 2137 	movw	r1, #567	@ 0x237
 800db84:	483e      	ldr	r0, [pc, #248]	@ (800dc80 <__mdiff+0x124>)
 800db86:	f000 fae1 	bl	800e14c <__assert_func>
 800db8a:	2301      	movs	r3, #1
 800db8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800db90:	4610      	mov	r0, r2
 800db92:	b003      	add	sp, #12
 800db94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db98:	bfbc      	itt	lt
 800db9a:	464b      	movlt	r3, r9
 800db9c:	46a1      	movlt	r9, r4
 800db9e:	4630      	mov	r0, r6
 800dba0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800dba4:	bfba      	itte	lt
 800dba6:	461c      	movlt	r4, r3
 800dba8:	2501      	movlt	r5, #1
 800dbaa:	2500      	movge	r5, #0
 800dbac:	f7ff fd40 	bl	800d630 <_Balloc>
 800dbb0:	4602      	mov	r2, r0
 800dbb2:	b918      	cbnz	r0, 800dbbc <__mdiff+0x60>
 800dbb4:	4b31      	ldr	r3, [pc, #196]	@ (800dc7c <__mdiff+0x120>)
 800dbb6:	f240 2145 	movw	r1, #581	@ 0x245
 800dbba:	e7e3      	b.n	800db84 <__mdiff+0x28>
 800dbbc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800dbc0:	6926      	ldr	r6, [r4, #16]
 800dbc2:	60c5      	str	r5, [r0, #12]
 800dbc4:	f109 0310 	add.w	r3, r9, #16
 800dbc8:	f109 0514 	add.w	r5, r9, #20
 800dbcc:	f104 0e14 	add.w	lr, r4, #20
 800dbd0:	f100 0b14 	add.w	fp, r0, #20
 800dbd4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800dbd8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800dbdc:	9301      	str	r3, [sp, #4]
 800dbde:	46d9      	mov	r9, fp
 800dbe0:	f04f 0c00 	mov.w	ip, #0
 800dbe4:	9b01      	ldr	r3, [sp, #4]
 800dbe6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800dbea:	f853 af04 	ldr.w	sl, [r3, #4]!
 800dbee:	9301      	str	r3, [sp, #4]
 800dbf0:	fa1f f38a 	uxth.w	r3, sl
 800dbf4:	4619      	mov	r1, r3
 800dbf6:	b283      	uxth	r3, r0
 800dbf8:	1acb      	subs	r3, r1, r3
 800dbfa:	0c00      	lsrs	r0, r0, #16
 800dbfc:	4463      	add	r3, ip
 800dbfe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800dc02:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800dc06:	b29b      	uxth	r3, r3
 800dc08:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800dc0c:	4576      	cmp	r6, lr
 800dc0e:	f849 3b04 	str.w	r3, [r9], #4
 800dc12:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dc16:	d8e5      	bhi.n	800dbe4 <__mdiff+0x88>
 800dc18:	1b33      	subs	r3, r6, r4
 800dc1a:	3b15      	subs	r3, #21
 800dc1c:	f023 0303 	bic.w	r3, r3, #3
 800dc20:	3415      	adds	r4, #21
 800dc22:	3304      	adds	r3, #4
 800dc24:	42a6      	cmp	r6, r4
 800dc26:	bf38      	it	cc
 800dc28:	2304      	movcc	r3, #4
 800dc2a:	441d      	add	r5, r3
 800dc2c:	445b      	add	r3, fp
 800dc2e:	461e      	mov	r6, r3
 800dc30:	462c      	mov	r4, r5
 800dc32:	4544      	cmp	r4, r8
 800dc34:	d30e      	bcc.n	800dc54 <__mdiff+0xf8>
 800dc36:	f108 0103 	add.w	r1, r8, #3
 800dc3a:	1b49      	subs	r1, r1, r5
 800dc3c:	f021 0103 	bic.w	r1, r1, #3
 800dc40:	3d03      	subs	r5, #3
 800dc42:	45a8      	cmp	r8, r5
 800dc44:	bf38      	it	cc
 800dc46:	2100      	movcc	r1, #0
 800dc48:	440b      	add	r3, r1
 800dc4a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dc4e:	b191      	cbz	r1, 800dc76 <__mdiff+0x11a>
 800dc50:	6117      	str	r7, [r2, #16]
 800dc52:	e79d      	b.n	800db90 <__mdiff+0x34>
 800dc54:	f854 1b04 	ldr.w	r1, [r4], #4
 800dc58:	46e6      	mov	lr, ip
 800dc5a:	0c08      	lsrs	r0, r1, #16
 800dc5c:	fa1c fc81 	uxtah	ip, ip, r1
 800dc60:	4471      	add	r1, lr
 800dc62:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800dc66:	b289      	uxth	r1, r1
 800dc68:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800dc6c:	f846 1b04 	str.w	r1, [r6], #4
 800dc70:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dc74:	e7dd      	b.n	800dc32 <__mdiff+0xd6>
 800dc76:	3f01      	subs	r7, #1
 800dc78:	e7e7      	b.n	800dc4a <__mdiff+0xee>
 800dc7a:	bf00      	nop
 800dc7c:	0806d338 	.word	0x0806d338
 800dc80:	0806d349 	.word	0x0806d349

0800dc84 <__d2b>:
 800dc84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dc88:	460f      	mov	r7, r1
 800dc8a:	2101      	movs	r1, #1
 800dc8c:	ec59 8b10 	vmov	r8, r9, d0
 800dc90:	4616      	mov	r6, r2
 800dc92:	f7ff fccd 	bl	800d630 <_Balloc>
 800dc96:	4604      	mov	r4, r0
 800dc98:	b930      	cbnz	r0, 800dca8 <__d2b+0x24>
 800dc9a:	4602      	mov	r2, r0
 800dc9c:	4b23      	ldr	r3, [pc, #140]	@ (800dd2c <__d2b+0xa8>)
 800dc9e:	4824      	ldr	r0, [pc, #144]	@ (800dd30 <__d2b+0xac>)
 800dca0:	f240 310f 	movw	r1, #783	@ 0x30f
 800dca4:	f000 fa52 	bl	800e14c <__assert_func>
 800dca8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dcac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dcb0:	b10d      	cbz	r5, 800dcb6 <__d2b+0x32>
 800dcb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dcb6:	9301      	str	r3, [sp, #4]
 800dcb8:	f1b8 0300 	subs.w	r3, r8, #0
 800dcbc:	d023      	beq.n	800dd06 <__d2b+0x82>
 800dcbe:	4668      	mov	r0, sp
 800dcc0:	9300      	str	r3, [sp, #0]
 800dcc2:	f7ff fd7c 	bl	800d7be <__lo0bits>
 800dcc6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dcca:	b1d0      	cbz	r0, 800dd02 <__d2b+0x7e>
 800dccc:	f1c0 0320 	rsb	r3, r0, #32
 800dcd0:	fa02 f303 	lsl.w	r3, r2, r3
 800dcd4:	430b      	orrs	r3, r1
 800dcd6:	40c2      	lsrs	r2, r0
 800dcd8:	6163      	str	r3, [r4, #20]
 800dcda:	9201      	str	r2, [sp, #4]
 800dcdc:	9b01      	ldr	r3, [sp, #4]
 800dcde:	61a3      	str	r3, [r4, #24]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	bf0c      	ite	eq
 800dce4:	2201      	moveq	r2, #1
 800dce6:	2202      	movne	r2, #2
 800dce8:	6122      	str	r2, [r4, #16]
 800dcea:	b1a5      	cbz	r5, 800dd16 <__d2b+0x92>
 800dcec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800dcf0:	4405      	add	r5, r0
 800dcf2:	603d      	str	r5, [r7, #0]
 800dcf4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800dcf8:	6030      	str	r0, [r6, #0]
 800dcfa:	4620      	mov	r0, r4
 800dcfc:	b003      	add	sp, #12
 800dcfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd02:	6161      	str	r1, [r4, #20]
 800dd04:	e7ea      	b.n	800dcdc <__d2b+0x58>
 800dd06:	a801      	add	r0, sp, #4
 800dd08:	f7ff fd59 	bl	800d7be <__lo0bits>
 800dd0c:	9b01      	ldr	r3, [sp, #4]
 800dd0e:	6163      	str	r3, [r4, #20]
 800dd10:	3020      	adds	r0, #32
 800dd12:	2201      	movs	r2, #1
 800dd14:	e7e8      	b.n	800dce8 <__d2b+0x64>
 800dd16:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dd1a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800dd1e:	6038      	str	r0, [r7, #0]
 800dd20:	6918      	ldr	r0, [r3, #16]
 800dd22:	f7ff fd2d 	bl	800d780 <__hi0bits>
 800dd26:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dd2a:	e7e5      	b.n	800dcf8 <__d2b+0x74>
 800dd2c:	0806d338 	.word	0x0806d338
 800dd30:	0806d349 	.word	0x0806d349

0800dd34 <_malloc_usable_size_r>:
 800dd34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd38:	1f18      	subs	r0, r3, #4
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	bfbc      	itt	lt
 800dd3e:	580b      	ldrlt	r3, [r1, r0]
 800dd40:	18c0      	addlt	r0, r0, r3
 800dd42:	4770      	bx	lr

0800dd44 <__ssputs_r>:
 800dd44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd48:	688e      	ldr	r6, [r1, #8]
 800dd4a:	461f      	mov	r7, r3
 800dd4c:	42be      	cmp	r6, r7
 800dd4e:	680b      	ldr	r3, [r1, #0]
 800dd50:	4682      	mov	sl, r0
 800dd52:	460c      	mov	r4, r1
 800dd54:	4690      	mov	r8, r2
 800dd56:	d82d      	bhi.n	800ddb4 <__ssputs_r+0x70>
 800dd58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dd5c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800dd60:	d026      	beq.n	800ddb0 <__ssputs_r+0x6c>
 800dd62:	6965      	ldr	r5, [r4, #20]
 800dd64:	6909      	ldr	r1, [r1, #16]
 800dd66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dd6a:	eba3 0901 	sub.w	r9, r3, r1
 800dd6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dd72:	1c7b      	adds	r3, r7, #1
 800dd74:	444b      	add	r3, r9
 800dd76:	106d      	asrs	r5, r5, #1
 800dd78:	429d      	cmp	r5, r3
 800dd7a:	bf38      	it	cc
 800dd7c:	461d      	movcc	r5, r3
 800dd7e:	0553      	lsls	r3, r2, #21
 800dd80:	d527      	bpl.n	800ddd2 <__ssputs_r+0x8e>
 800dd82:	4629      	mov	r1, r5
 800dd84:	f7fd ff46 	bl	800bc14 <_malloc_r>
 800dd88:	4606      	mov	r6, r0
 800dd8a:	b360      	cbz	r0, 800dde6 <__ssputs_r+0xa2>
 800dd8c:	6921      	ldr	r1, [r4, #16]
 800dd8e:	464a      	mov	r2, r9
 800dd90:	f7fe fe17 	bl	800c9c2 <memcpy>
 800dd94:	89a3      	ldrh	r3, [r4, #12]
 800dd96:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800dd9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd9e:	81a3      	strh	r3, [r4, #12]
 800dda0:	6126      	str	r6, [r4, #16]
 800dda2:	6165      	str	r5, [r4, #20]
 800dda4:	444e      	add	r6, r9
 800dda6:	eba5 0509 	sub.w	r5, r5, r9
 800ddaa:	6026      	str	r6, [r4, #0]
 800ddac:	60a5      	str	r5, [r4, #8]
 800ddae:	463e      	mov	r6, r7
 800ddb0:	42be      	cmp	r6, r7
 800ddb2:	d900      	bls.n	800ddb6 <__ssputs_r+0x72>
 800ddb4:	463e      	mov	r6, r7
 800ddb6:	6820      	ldr	r0, [r4, #0]
 800ddb8:	4632      	mov	r2, r6
 800ddba:	4641      	mov	r1, r8
 800ddbc:	f7fe fd41 	bl	800c842 <memmove>
 800ddc0:	68a3      	ldr	r3, [r4, #8]
 800ddc2:	1b9b      	subs	r3, r3, r6
 800ddc4:	60a3      	str	r3, [r4, #8]
 800ddc6:	6823      	ldr	r3, [r4, #0]
 800ddc8:	4433      	add	r3, r6
 800ddca:	6023      	str	r3, [r4, #0]
 800ddcc:	2000      	movs	r0, #0
 800ddce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddd2:	462a      	mov	r2, r5
 800ddd4:	f7fd ffaa 	bl	800bd2c <_realloc_r>
 800ddd8:	4606      	mov	r6, r0
 800ddda:	2800      	cmp	r0, #0
 800dddc:	d1e0      	bne.n	800dda0 <__ssputs_r+0x5c>
 800ddde:	6921      	ldr	r1, [r4, #16]
 800dde0:	4650      	mov	r0, sl
 800dde2:	f7ff fbdb 	bl	800d59c <_free_r>
 800dde6:	230c      	movs	r3, #12
 800dde8:	f8ca 3000 	str.w	r3, [sl]
 800ddec:	89a3      	ldrh	r3, [r4, #12]
 800ddee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ddf2:	81a3      	strh	r3, [r4, #12]
 800ddf4:	f04f 30ff 	mov.w	r0, #4294967295
 800ddf8:	e7e9      	b.n	800ddce <__ssputs_r+0x8a>
	...

0800ddfc <_svfiprintf_r>:
 800ddfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de00:	4698      	mov	r8, r3
 800de02:	898b      	ldrh	r3, [r1, #12]
 800de04:	061b      	lsls	r3, r3, #24
 800de06:	b09d      	sub	sp, #116	@ 0x74
 800de08:	4607      	mov	r7, r0
 800de0a:	460d      	mov	r5, r1
 800de0c:	4614      	mov	r4, r2
 800de0e:	d510      	bpl.n	800de32 <_svfiprintf_r+0x36>
 800de10:	690b      	ldr	r3, [r1, #16]
 800de12:	b973      	cbnz	r3, 800de32 <_svfiprintf_r+0x36>
 800de14:	2140      	movs	r1, #64	@ 0x40
 800de16:	f7fd fefd 	bl	800bc14 <_malloc_r>
 800de1a:	6028      	str	r0, [r5, #0]
 800de1c:	6128      	str	r0, [r5, #16]
 800de1e:	b930      	cbnz	r0, 800de2e <_svfiprintf_r+0x32>
 800de20:	230c      	movs	r3, #12
 800de22:	603b      	str	r3, [r7, #0]
 800de24:	f04f 30ff 	mov.w	r0, #4294967295
 800de28:	b01d      	add	sp, #116	@ 0x74
 800de2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de2e:	2340      	movs	r3, #64	@ 0x40
 800de30:	616b      	str	r3, [r5, #20]
 800de32:	2300      	movs	r3, #0
 800de34:	9309      	str	r3, [sp, #36]	@ 0x24
 800de36:	2320      	movs	r3, #32
 800de38:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800de3c:	f8cd 800c 	str.w	r8, [sp, #12]
 800de40:	2330      	movs	r3, #48	@ 0x30
 800de42:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800dfe0 <_svfiprintf_r+0x1e4>
 800de46:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800de4a:	f04f 0901 	mov.w	r9, #1
 800de4e:	4623      	mov	r3, r4
 800de50:	469a      	mov	sl, r3
 800de52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de56:	b10a      	cbz	r2, 800de5c <_svfiprintf_r+0x60>
 800de58:	2a25      	cmp	r2, #37	@ 0x25
 800de5a:	d1f9      	bne.n	800de50 <_svfiprintf_r+0x54>
 800de5c:	ebba 0b04 	subs.w	fp, sl, r4
 800de60:	d00b      	beq.n	800de7a <_svfiprintf_r+0x7e>
 800de62:	465b      	mov	r3, fp
 800de64:	4622      	mov	r2, r4
 800de66:	4629      	mov	r1, r5
 800de68:	4638      	mov	r0, r7
 800de6a:	f7ff ff6b 	bl	800dd44 <__ssputs_r>
 800de6e:	3001      	adds	r0, #1
 800de70:	f000 80a7 	beq.w	800dfc2 <_svfiprintf_r+0x1c6>
 800de74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800de76:	445a      	add	r2, fp
 800de78:	9209      	str	r2, [sp, #36]	@ 0x24
 800de7a:	f89a 3000 	ldrb.w	r3, [sl]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	f000 809f 	beq.w	800dfc2 <_svfiprintf_r+0x1c6>
 800de84:	2300      	movs	r3, #0
 800de86:	f04f 32ff 	mov.w	r2, #4294967295
 800de8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de8e:	f10a 0a01 	add.w	sl, sl, #1
 800de92:	9304      	str	r3, [sp, #16]
 800de94:	9307      	str	r3, [sp, #28]
 800de96:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800de9a:	931a      	str	r3, [sp, #104]	@ 0x68
 800de9c:	4654      	mov	r4, sl
 800de9e:	2205      	movs	r2, #5
 800dea0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dea4:	484e      	ldr	r0, [pc, #312]	@ (800dfe0 <_svfiprintf_r+0x1e4>)
 800dea6:	f7f2 fa1b 	bl	80002e0 <memchr>
 800deaa:	9a04      	ldr	r2, [sp, #16]
 800deac:	b9d8      	cbnz	r0, 800dee6 <_svfiprintf_r+0xea>
 800deae:	06d0      	lsls	r0, r2, #27
 800deb0:	bf44      	itt	mi
 800deb2:	2320      	movmi	r3, #32
 800deb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800deb8:	0711      	lsls	r1, r2, #28
 800deba:	bf44      	itt	mi
 800debc:	232b      	movmi	r3, #43	@ 0x2b
 800debe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dec2:	f89a 3000 	ldrb.w	r3, [sl]
 800dec6:	2b2a      	cmp	r3, #42	@ 0x2a
 800dec8:	d015      	beq.n	800def6 <_svfiprintf_r+0xfa>
 800deca:	9a07      	ldr	r2, [sp, #28]
 800decc:	4654      	mov	r4, sl
 800dece:	2000      	movs	r0, #0
 800ded0:	f04f 0c0a 	mov.w	ip, #10
 800ded4:	4621      	mov	r1, r4
 800ded6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800deda:	3b30      	subs	r3, #48	@ 0x30
 800dedc:	2b09      	cmp	r3, #9
 800dede:	d94b      	bls.n	800df78 <_svfiprintf_r+0x17c>
 800dee0:	b1b0      	cbz	r0, 800df10 <_svfiprintf_r+0x114>
 800dee2:	9207      	str	r2, [sp, #28]
 800dee4:	e014      	b.n	800df10 <_svfiprintf_r+0x114>
 800dee6:	eba0 0308 	sub.w	r3, r0, r8
 800deea:	fa09 f303 	lsl.w	r3, r9, r3
 800deee:	4313      	orrs	r3, r2
 800def0:	9304      	str	r3, [sp, #16]
 800def2:	46a2      	mov	sl, r4
 800def4:	e7d2      	b.n	800de9c <_svfiprintf_r+0xa0>
 800def6:	9b03      	ldr	r3, [sp, #12]
 800def8:	1d19      	adds	r1, r3, #4
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	9103      	str	r1, [sp, #12]
 800defe:	2b00      	cmp	r3, #0
 800df00:	bfbb      	ittet	lt
 800df02:	425b      	neglt	r3, r3
 800df04:	f042 0202 	orrlt.w	r2, r2, #2
 800df08:	9307      	strge	r3, [sp, #28]
 800df0a:	9307      	strlt	r3, [sp, #28]
 800df0c:	bfb8      	it	lt
 800df0e:	9204      	strlt	r2, [sp, #16]
 800df10:	7823      	ldrb	r3, [r4, #0]
 800df12:	2b2e      	cmp	r3, #46	@ 0x2e
 800df14:	d10a      	bne.n	800df2c <_svfiprintf_r+0x130>
 800df16:	7863      	ldrb	r3, [r4, #1]
 800df18:	2b2a      	cmp	r3, #42	@ 0x2a
 800df1a:	d132      	bne.n	800df82 <_svfiprintf_r+0x186>
 800df1c:	9b03      	ldr	r3, [sp, #12]
 800df1e:	1d1a      	adds	r2, r3, #4
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	9203      	str	r2, [sp, #12]
 800df24:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800df28:	3402      	adds	r4, #2
 800df2a:	9305      	str	r3, [sp, #20]
 800df2c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800dff0 <_svfiprintf_r+0x1f4>
 800df30:	7821      	ldrb	r1, [r4, #0]
 800df32:	2203      	movs	r2, #3
 800df34:	4650      	mov	r0, sl
 800df36:	f7f2 f9d3 	bl	80002e0 <memchr>
 800df3a:	b138      	cbz	r0, 800df4c <_svfiprintf_r+0x150>
 800df3c:	9b04      	ldr	r3, [sp, #16]
 800df3e:	eba0 000a 	sub.w	r0, r0, sl
 800df42:	2240      	movs	r2, #64	@ 0x40
 800df44:	4082      	lsls	r2, r0
 800df46:	4313      	orrs	r3, r2
 800df48:	3401      	adds	r4, #1
 800df4a:	9304      	str	r3, [sp, #16]
 800df4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df50:	4824      	ldr	r0, [pc, #144]	@ (800dfe4 <_svfiprintf_r+0x1e8>)
 800df52:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800df56:	2206      	movs	r2, #6
 800df58:	f7f2 f9c2 	bl	80002e0 <memchr>
 800df5c:	2800      	cmp	r0, #0
 800df5e:	d036      	beq.n	800dfce <_svfiprintf_r+0x1d2>
 800df60:	4b21      	ldr	r3, [pc, #132]	@ (800dfe8 <_svfiprintf_r+0x1ec>)
 800df62:	bb1b      	cbnz	r3, 800dfac <_svfiprintf_r+0x1b0>
 800df64:	9b03      	ldr	r3, [sp, #12]
 800df66:	3307      	adds	r3, #7
 800df68:	f023 0307 	bic.w	r3, r3, #7
 800df6c:	3308      	adds	r3, #8
 800df6e:	9303      	str	r3, [sp, #12]
 800df70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df72:	4433      	add	r3, r6
 800df74:	9309      	str	r3, [sp, #36]	@ 0x24
 800df76:	e76a      	b.n	800de4e <_svfiprintf_r+0x52>
 800df78:	fb0c 3202 	mla	r2, ip, r2, r3
 800df7c:	460c      	mov	r4, r1
 800df7e:	2001      	movs	r0, #1
 800df80:	e7a8      	b.n	800ded4 <_svfiprintf_r+0xd8>
 800df82:	2300      	movs	r3, #0
 800df84:	3401      	adds	r4, #1
 800df86:	9305      	str	r3, [sp, #20]
 800df88:	4619      	mov	r1, r3
 800df8a:	f04f 0c0a 	mov.w	ip, #10
 800df8e:	4620      	mov	r0, r4
 800df90:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df94:	3a30      	subs	r2, #48	@ 0x30
 800df96:	2a09      	cmp	r2, #9
 800df98:	d903      	bls.n	800dfa2 <_svfiprintf_r+0x1a6>
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d0c6      	beq.n	800df2c <_svfiprintf_r+0x130>
 800df9e:	9105      	str	r1, [sp, #20]
 800dfa0:	e7c4      	b.n	800df2c <_svfiprintf_r+0x130>
 800dfa2:	fb0c 2101 	mla	r1, ip, r1, r2
 800dfa6:	4604      	mov	r4, r0
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	e7f0      	b.n	800df8e <_svfiprintf_r+0x192>
 800dfac:	ab03      	add	r3, sp, #12
 800dfae:	9300      	str	r3, [sp, #0]
 800dfb0:	462a      	mov	r2, r5
 800dfb2:	4b0e      	ldr	r3, [pc, #56]	@ (800dfec <_svfiprintf_r+0x1f0>)
 800dfb4:	a904      	add	r1, sp, #16
 800dfb6:	4638      	mov	r0, r7
 800dfb8:	f7fd ff76 	bl	800bea8 <_printf_float>
 800dfbc:	1c42      	adds	r2, r0, #1
 800dfbe:	4606      	mov	r6, r0
 800dfc0:	d1d6      	bne.n	800df70 <_svfiprintf_r+0x174>
 800dfc2:	89ab      	ldrh	r3, [r5, #12]
 800dfc4:	065b      	lsls	r3, r3, #25
 800dfc6:	f53f af2d 	bmi.w	800de24 <_svfiprintf_r+0x28>
 800dfca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dfcc:	e72c      	b.n	800de28 <_svfiprintf_r+0x2c>
 800dfce:	ab03      	add	r3, sp, #12
 800dfd0:	9300      	str	r3, [sp, #0]
 800dfd2:	462a      	mov	r2, r5
 800dfd4:	4b05      	ldr	r3, [pc, #20]	@ (800dfec <_svfiprintf_r+0x1f0>)
 800dfd6:	a904      	add	r1, sp, #16
 800dfd8:	4638      	mov	r0, r7
 800dfda:	f7fe f9ed 	bl	800c3b8 <_printf_i>
 800dfde:	e7ed      	b.n	800dfbc <_svfiprintf_r+0x1c0>
 800dfe0:	0806d4a0 	.word	0x0806d4a0
 800dfe4:	0806d4aa 	.word	0x0806d4aa
 800dfe8:	0800bea9 	.word	0x0800bea9
 800dfec:	0800dd45 	.word	0x0800dd45
 800dff0:	0806d4a6 	.word	0x0806d4a6

0800dff4 <__sflush_r>:
 800dff4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dffc:	0716      	lsls	r6, r2, #28
 800dffe:	4605      	mov	r5, r0
 800e000:	460c      	mov	r4, r1
 800e002:	d454      	bmi.n	800e0ae <__sflush_r+0xba>
 800e004:	684b      	ldr	r3, [r1, #4]
 800e006:	2b00      	cmp	r3, #0
 800e008:	dc02      	bgt.n	800e010 <__sflush_r+0x1c>
 800e00a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	dd48      	ble.n	800e0a2 <__sflush_r+0xae>
 800e010:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e012:	2e00      	cmp	r6, #0
 800e014:	d045      	beq.n	800e0a2 <__sflush_r+0xae>
 800e016:	2300      	movs	r3, #0
 800e018:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e01c:	682f      	ldr	r7, [r5, #0]
 800e01e:	6a21      	ldr	r1, [r4, #32]
 800e020:	602b      	str	r3, [r5, #0]
 800e022:	d030      	beq.n	800e086 <__sflush_r+0x92>
 800e024:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e026:	89a3      	ldrh	r3, [r4, #12]
 800e028:	0759      	lsls	r1, r3, #29
 800e02a:	d505      	bpl.n	800e038 <__sflush_r+0x44>
 800e02c:	6863      	ldr	r3, [r4, #4]
 800e02e:	1ad2      	subs	r2, r2, r3
 800e030:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e032:	b10b      	cbz	r3, 800e038 <__sflush_r+0x44>
 800e034:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e036:	1ad2      	subs	r2, r2, r3
 800e038:	2300      	movs	r3, #0
 800e03a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e03c:	6a21      	ldr	r1, [r4, #32]
 800e03e:	4628      	mov	r0, r5
 800e040:	47b0      	blx	r6
 800e042:	1c43      	adds	r3, r0, #1
 800e044:	89a3      	ldrh	r3, [r4, #12]
 800e046:	d106      	bne.n	800e056 <__sflush_r+0x62>
 800e048:	6829      	ldr	r1, [r5, #0]
 800e04a:	291d      	cmp	r1, #29
 800e04c:	d82b      	bhi.n	800e0a6 <__sflush_r+0xb2>
 800e04e:	4a2a      	ldr	r2, [pc, #168]	@ (800e0f8 <__sflush_r+0x104>)
 800e050:	410a      	asrs	r2, r1
 800e052:	07d6      	lsls	r6, r2, #31
 800e054:	d427      	bmi.n	800e0a6 <__sflush_r+0xb2>
 800e056:	2200      	movs	r2, #0
 800e058:	6062      	str	r2, [r4, #4]
 800e05a:	04d9      	lsls	r1, r3, #19
 800e05c:	6922      	ldr	r2, [r4, #16]
 800e05e:	6022      	str	r2, [r4, #0]
 800e060:	d504      	bpl.n	800e06c <__sflush_r+0x78>
 800e062:	1c42      	adds	r2, r0, #1
 800e064:	d101      	bne.n	800e06a <__sflush_r+0x76>
 800e066:	682b      	ldr	r3, [r5, #0]
 800e068:	b903      	cbnz	r3, 800e06c <__sflush_r+0x78>
 800e06a:	6560      	str	r0, [r4, #84]	@ 0x54
 800e06c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e06e:	602f      	str	r7, [r5, #0]
 800e070:	b1b9      	cbz	r1, 800e0a2 <__sflush_r+0xae>
 800e072:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e076:	4299      	cmp	r1, r3
 800e078:	d002      	beq.n	800e080 <__sflush_r+0x8c>
 800e07a:	4628      	mov	r0, r5
 800e07c:	f7ff fa8e 	bl	800d59c <_free_r>
 800e080:	2300      	movs	r3, #0
 800e082:	6363      	str	r3, [r4, #52]	@ 0x34
 800e084:	e00d      	b.n	800e0a2 <__sflush_r+0xae>
 800e086:	2301      	movs	r3, #1
 800e088:	4628      	mov	r0, r5
 800e08a:	47b0      	blx	r6
 800e08c:	4602      	mov	r2, r0
 800e08e:	1c50      	adds	r0, r2, #1
 800e090:	d1c9      	bne.n	800e026 <__sflush_r+0x32>
 800e092:	682b      	ldr	r3, [r5, #0]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d0c6      	beq.n	800e026 <__sflush_r+0x32>
 800e098:	2b1d      	cmp	r3, #29
 800e09a:	d001      	beq.n	800e0a0 <__sflush_r+0xac>
 800e09c:	2b16      	cmp	r3, #22
 800e09e:	d11e      	bne.n	800e0de <__sflush_r+0xea>
 800e0a0:	602f      	str	r7, [r5, #0]
 800e0a2:	2000      	movs	r0, #0
 800e0a4:	e022      	b.n	800e0ec <__sflush_r+0xf8>
 800e0a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e0aa:	b21b      	sxth	r3, r3
 800e0ac:	e01b      	b.n	800e0e6 <__sflush_r+0xf2>
 800e0ae:	690f      	ldr	r7, [r1, #16]
 800e0b0:	2f00      	cmp	r7, #0
 800e0b2:	d0f6      	beq.n	800e0a2 <__sflush_r+0xae>
 800e0b4:	0793      	lsls	r3, r2, #30
 800e0b6:	680e      	ldr	r6, [r1, #0]
 800e0b8:	bf08      	it	eq
 800e0ba:	694b      	ldreq	r3, [r1, #20]
 800e0bc:	600f      	str	r7, [r1, #0]
 800e0be:	bf18      	it	ne
 800e0c0:	2300      	movne	r3, #0
 800e0c2:	eba6 0807 	sub.w	r8, r6, r7
 800e0c6:	608b      	str	r3, [r1, #8]
 800e0c8:	f1b8 0f00 	cmp.w	r8, #0
 800e0cc:	dde9      	ble.n	800e0a2 <__sflush_r+0xae>
 800e0ce:	6a21      	ldr	r1, [r4, #32]
 800e0d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e0d2:	4643      	mov	r3, r8
 800e0d4:	463a      	mov	r2, r7
 800e0d6:	4628      	mov	r0, r5
 800e0d8:	47b0      	blx	r6
 800e0da:	2800      	cmp	r0, #0
 800e0dc:	dc08      	bgt.n	800e0f0 <__sflush_r+0xfc>
 800e0de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e0e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e0e6:	81a3      	strh	r3, [r4, #12]
 800e0e8:	f04f 30ff 	mov.w	r0, #4294967295
 800e0ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0f0:	4407      	add	r7, r0
 800e0f2:	eba8 0800 	sub.w	r8, r8, r0
 800e0f6:	e7e7      	b.n	800e0c8 <__sflush_r+0xd4>
 800e0f8:	dfbffffe 	.word	0xdfbffffe

0800e0fc <_fflush_r>:
 800e0fc:	b538      	push	{r3, r4, r5, lr}
 800e0fe:	690b      	ldr	r3, [r1, #16]
 800e100:	4605      	mov	r5, r0
 800e102:	460c      	mov	r4, r1
 800e104:	b913      	cbnz	r3, 800e10c <_fflush_r+0x10>
 800e106:	2500      	movs	r5, #0
 800e108:	4628      	mov	r0, r5
 800e10a:	bd38      	pop	{r3, r4, r5, pc}
 800e10c:	b118      	cbz	r0, 800e116 <_fflush_r+0x1a>
 800e10e:	6a03      	ldr	r3, [r0, #32]
 800e110:	b90b      	cbnz	r3, 800e116 <_fflush_r+0x1a>
 800e112:	f7fe fafd 	bl	800c710 <__sinit>
 800e116:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d0f3      	beq.n	800e106 <_fflush_r+0xa>
 800e11e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e120:	07d0      	lsls	r0, r2, #31
 800e122:	d404      	bmi.n	800e12e <_fflush_r+0x32>
 800e124:	0599      	lsls	r1, r3, #22
 800e126:	d402      	bmi.n	800e12e <_fflush_r+0x32>
 800e128:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e12a:	f7fe fc40 	bl	800c9ae <__retarget_lock_acquire_recursive>
 800e12e:	4628      	mov	r0, r5
 800e130:	4621      	mov	r1, r4
 800e132:	f7ff ff5f 	bl	800dff4 <__sflush_r>
 800e136:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e138:	07da      	lsls	r2, r3, #31
 800e13a:	4605      	mov	r5, r0
 800e13c:	d4e4      	bmi.n	800e108 <_fflush_r+0xc>
 800e13e:	89a3      	ldrh	r3, [r4, #12]
 800e140:	059b      	lsls	r3, r3, #22
 800e142:	d4e1      	bmi.n	800e108 <_fflush_r+0xc>
 800e144:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e146:	f7fe fc33 	bl	800c9b0 <__retarget_lock_release_recursive>
 800e14a:	e7dd      	b.n	800e108 <_fflush_r+0xc>

0800e14c <__assert_func>:
 800e14c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e14e:	4614      	mov	r4, r2
 800e150:	461a      	mov	r2, r3
 800e152:	4b09      	ldr	r3, [pc, #36]	@ (800e178 <__assert_func+0x2c>)
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	4605      	mov	r5, r0
 800e158:	68d8      	ldr	r0, [r3, #12]
 800e15a:	b954      	cbnz	r4, 800e172 <__assert_func+0x26>
 800e15c:	4b07      	ldr	r3, [pc, #28]	@ (800e17c <__assert_func+0x30>)
 800e15e:	461c      	mov	r4, r3
 800e160:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e164:	9100      	str	r1, [sp, #0]
 800e166:	462b      	mov	r3, r5
 800e168:	4905      	ldr	r1, [pc, #20]	@ (800e180 <__assert_func+0x34>)
 800e16a:	f000 f841 	bl	800e1f0 <fiprintf>
 800e16e:	f000 f851 	bl	800e214 <abort>
 800e172:	4b04      	ldr	r3, [pc, #16]	@ (800e184 <__assert_func+0x38>)
 800e174:	e7f4      	b.n	800e160 <__assert_func+0x14>
 800e176:	bf00      	nop
 800e178:	24000b5c 	.word	0x24000b5c
 800e17c:	0800ecf3 	.word	0x0800ecf3
 800e180:	0806d4c6 	.word	0x0806d4c6
 800e184:	0806d4b9 	.word	0x0806d4b9

0800e188 <_calloc_r>:
 800e188:	b570      	push	{r4, r5, r6, lr}
 800e18a:	fba1 5402 	umull	r5, r4, r1, r2
 800e18e:	b93c      	cbnz	r4, 800e1a0 <_calloc_r+0x18>
 800e190:	4629      	mov	r1, r5
 800e192:	f7fd fd3f 	bl	800bc14 <_malloc_r>
 800e196:	4606      	mov	r6, r0
 800e198:	b928      	cbnz	r0, 800e1a6 <_calloc_r+0x1e>
 800e19a:	2600      	movs	r6, #0
 800e19c:	4630      	mov	r0, r6
 800e19e:	bd70      	pop	{r4, r5, r6, pc}
 800e1a0:	220c      	movs	r2, #12
 800e1a2:	6002      	str	r2, [r0, #0]
 800e1a4:	e7f9      	b.n	800e19a <_calloc_r+0x12>
 800e1a6:	462a      	mov	r2, r5
 800e1a8:	4621      	mov	r1, r4
 800e1aa:	f7fe fb64 	bl	800c876 <memset>
 800e1ae:	e7f5      	b.n	800e19c <_calloc_r+0x14>

0800e1b0 <__ascii_mbtowc>:
 800e1b0:	b082      	sub	sp, #8
 800e1b2:	b901      	cbnz	r1, 800e1b6 <__ascii_mbtowc+0x6>
 800e1b4:	a901      	add	r1, sp, #4
 800e1b6:	b142      	cbz	r2, 800e1ca <__ascii_mbtowc+0x1a>
 800e1b8:	b14b      	cbz	r3, 800e1ce <__ascii_mbtowc+0x1e>
 800e1ba:	7813      	ldrb	r3, [r2, #0]
 800e1bc:	600b      	str	r3, [r1, #0]
 800e1be:	7812      	ldrb	r2, [r2, #0]
 800e1c0:	1e10      	subs	r0, r2, #0
 800e1c2:	bf18      	it	ne
 800e1c4:	2001      	movne	r0, #1
 800e1c6:	b002      	add	sp, #8
 800e1c8:	4770      	bx	lr
 800e1ca:	4610      	mov	r0, r2
 800e1cc:	e7fb      	b.n	800e1c6 <__ascii_mbtowc+0x16>
 800e1ce:	f06f 0001 	mvn.w	r0, #1
 800e1d2:	e7f8      	b.n	800e1c6 <__ascii_mbtowc+0x16>

0800e1d4 <__ascii_wctomb>:
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	4608      	mov	r0, r1
 800e1d8:	b141      	cbz	r1, 800e1ec <__ascii_wctomb+0x18>
 800e1da:	2aff      	cmp	r2, #255	@ 0xff
 800e1dc:	d904      	bls.n	800e1e8 <__ascii_wctomb+0x14>
 800e1de:	228a      	movs	r2, #138	@ 0x8a
 800e1e0:	601a      	str	r2, [r3, #0]
 800e1e2:	f04f 30ff 	mov.w	r0, #4294967295
 800e1e6:	4770      	bx	lr
 800e1e8:	700a      	strb	r2, [r1, #0]
 800e1ea:	2001      	movs	r0, #1
 800e1ec:	4770      	bx	lr
	...

0800e1f0 <fiprintf>:
 800e1f0:	b40e      	push	{r1, r2, r3}
 800e1f2:	b503      	push	{r0, r1, lr}
 800e1f4:	4601      	mov	r1, r0
 800e1f6:	ab03      	add	r3, sp, #12
 800e1f8:	4805      	ldr	r0, [pc, #20]	@ (800e210 <fiprintf+0x20>)
 800e1fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1fe:	6800      	ldr	r0, [r0, #0]
 800e200:	9301      	str	r3, [sp, #4]
 800e202:	f000 f837 	bl	800e274 <_vfiprintf_r>
 800e206:	b002      	add	sp, #8
 800e208:	f85d eb04 	ldr.w	lr, [sp], #4
 800e20c:	b003      	add	sp, #12
 800e20e:	4770      	bx	lr
 800e210:	24000b5c 	.word	0x24000b5c

0800e214 <abort>:
 800e214:	b508      	push	{r3, lr}
 800e216:	2006      	movs	r0, #6
 800e218:	f000 fa00 	bl	800e61c <raise>
 800e21c:	2001      	movs	r0, #1
 800e21e:	f000 fca5 	bl	800eb6c <_exit>

0800e222 <__sfputc_r>:
 800e222:	6893      	ldr	r3, [r2, #8]
 800e224:	3b01      	subs	r3, #1
 800e226:	2b00      	cmp	r3, #0
 800e228:	b410      	push	{r4}
 800e22a:	6093      	str	r3, [r2, #8]
 800e22c:	da08      	bge.n	800e240 <__sfputc_r+0x1e>
 800e22e:	6994      	ldr	r4, [r2, #24]
 800e230:	42a3      	cmp	r3, r4
 800e232:	db01      	blt.n	800e238 <__sfputc_r+0x16>
 800e234:	290a      	cmp	r1, #10
 800e236:	d103      	bne.n	800e240 <__sfputc_r+0x1e>
 800e238:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e23c:	f000 b932 	b.w	800e4a4 <__swbuf_r>
 800e240:	6813      	ldr	r3, [r2, #0]
 800e242:	1c58      	adds	r0, r3, #1
 800e244:	6010      	str	r0, [r2, #0]
 800e246:	7019      	strb	r1, [r3, #0]
 800e248:	4608      	mov	r0, r1
 800e24a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e24e:	4770      	bx	lr

0800e250 <__sfputs_r>:
 800e250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e252:	4606      	mov	r6, r0
 800e254:	460f      	mov	r7, r1
 800e256:	4614      	mov	r4, r2
 800e258:	18d5      	adds	r5, r2, r3
 800e25a:	42ac      	cmp	r4, r5
 800e25c:	d101      	bne.n	800e262 <__sfputs_r+0x12>
 800e25e:	2000      	movs	r0, #0
 800e260:	e007      	b.n	800e272 <__sfputs_r+0x22>
 800e262:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e266:	463a      	mov	r2, r7
 800e268:	4630      	mov	r0, r6
 800e26a:	f7ff ffda 	bl	800e222 <__sfputc_r>
 800e26e:	1c43      	adds	r3, r0, #1
 800e270:	d1f3      	bne.n	800e25a <__sfputs_r+0xa>
 800e272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e274 <_vfiprintf_r>:
 800e274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e278:	460d      	mov	r5, r1
 800e27a:	b09d      	sub	sp, #116	@ 0x74
 800e27c:	4614      	mov	r4, r2
 800e27e:	4698      	mov	r8, r3
 800e280:	4606      	mov	r6, r0
 800e282:	b118      	cbz	r0, 800e28c <_vfiprintf_r+0x18>
 800e284:	6a03      	ldr	r3, [r0, #32]
 800e286:	b90b      	cbnz	r3, 800e28c <_vfiprintf_r+0x18>
 800e288:	f7fe fa42 	bl	800c710 <__sinit>
 800e28c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e28e:	07d9      	lsls	r1, r3, #31
 800e290:	d405      	bmi.n	800e29e <_vfiprintf_r+0x2a>
 800e292:	89ab      	ldrh	r3, [r5, #12]
 800e294:	059a      	lsls	r2, r3, #22
 800e296:	d402      	bmi.n	800e29e <_vfiprintf_r+0x2a>
 800e298:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e29a:	f7fe fb88 	bl	800c9ae <__retarget_lock_acquire_recursive>
 800e29e:	89ab      	ldrh	r3, [r5, #12]
 800e2a0:	071b      	lsls	r3, r3, #28
 800e2a2:	d501      	bpl.n	800e2a8 <_vfiprintf_r+0x34>
 800e2a4:	692b      	ldr	r3, [r5, #16]
 800e2a6:	b99b      	cbnz	r3, 800e2d0 <_vfiprintf_r+0x5c>
 800e2a8:	4629      	mov	r1, r5
 800e2aa:	4630      	mov	r0, r6
 800e2ac:	f000 f938 	bl	800e520 <__swsetup_r>
 800e2b0:	b170      	cbz	r0, 800e2d0 <_vfiprintf_r+0x5c>
 800e2b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e2b4:	07dc      	lsls	r4, r3, #31
 800e2b6:	d504      	bpl.n	800e2c2 <_vfiprintf_r+0x4e>
 800e2b8:	f04f 30ff 	mov.w	r0, #4294967295
 800e2bc:	b01d      	add	sp, #116	@ 0x74
 800e2be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2c2:	89ab      	ldrh	r3, [r5, #12]
 800e2c4:	0598      	lsls	r0, r3, #22
 800e2c6:	d4f7      	bmi.n	800e2b8 <_vfiprintf_r+0x44>
 800e2c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e2ca:	f7fe fb71 	bl	800c9b0 <__retarget_lock_release_recursive>
 800e2ce:	e7f3      	b.n	800e2b8 <_vfiprintf_r+0x44>
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800e2d4:	2320      	movs	r3, #32
 800e2d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e2da:	f8cd 800c 	str.w	r8, [sp, #12]
 800e2de:	2330      	movs	r3, #48	@ 0x30
 800e2e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e490 <_vfiprintf_r+0x21c>
 800e2e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e2e8:	f04f 0901 	mov.w	r9, #1
 800e2ec:	4623      	mov	r3, r4
 800e2ee:	469a      	mov	sl, r3
 800e2f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e2f4:	b10a      	cbz	r2, 800e2fa <_vfiprintf_r+0x86>
 800e2f6:	2a25      	cmp	r2, #37	@ 0x25
 800e2f8:	d1f9      	bne.n	800e2ee <_vfiprintf_r+0x7a>
 800e2fa:	ebba 0b04 	subs.w	fp, sl, r4
 800e2fe:	d00b      	beq.n	800e318 <_vfiprintf_r+0xa4>
 800e300:	465b      	mov	r3, fp
 800e302:	4622      	mov	r2, r4
 800e304:	4629      	mov	r1, r5
 800e306:	4630      	mov	r0, r6
 800e308:	f7ff ffa2 	bl	800e250 <__sfputs_r>
 800e30c:	3001      	adds	r0, #1
 800e30e:	f000 80a7 	beq.w	800e460 <_vfiprintf_r+0x1ec>
 800e312:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e314:	445a      	add	r2, fp
 800e316:	9209      	str	r2, [sp, #36]	@ 0x24
 800e318:	f89a 3000 	ldrb.w	r3, [sl]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	f000 809f 	beq.w	800e460 <_vfiprintf_r+0x1ec>
 800e322:	2300      	movs	r3, #0
 800e324:	f04f 32ff 	mov.w	r2, #4294967295
 800e328:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e32c:	f10a 0a01 	add.w	sl, sl, #1
 800e330:	9304      	str	r3, [sp, #16]
 800e332:	9307      	str	r3, [sp, #28]
 800e334:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e338:	931a      	str	r3, [sp, #104]	@ 0x68
 800e33a:	4654      	mov	r4, sl
 800e33c:	2205      	movs	r2, #5
 800e33e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e342:	4853      	ldr	r0, [pc, #332]	@ (800e490 <_vfiprintf_r+0x21c>)
 800e344:	f7f1 ffcc 	bl	80002e0 <memchr>
 800e348:	9a04      	ldr	r2, [sp, #16]
 800e34a:	b9d8      	cbnz	r0, 800e384 <_vfiprintf_r+0x110>
 800e34c:	06d1      	lsls	r1, r2, #27
 800e34e:	bf44      	itt	mi
 800e350:	2320      	movmi	r3, #32
 800e352:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e356:	0713      	lsls	r3, r2, #28
 800e358:	bf44      	itt	mi
 800e35a:	232b      	movmi	r3, #43	@ 0x2b
 800e35c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e360:	f89a 3000 	ldrb.w	r3, [sl]
 800e364:	2b2a      	cmp	r3, #42	@ 0x2a
 800e366:	d015      	beq.n	800e394 <_vfiprintf_r+0x120>
 800e368:	9a07      	ldr	r2, [sp, #28]
 800e36a:	4654      	mov	r4, sl
 800e36c:	2000      	movs	r0, #0
 800e36e:	f04f 0c0a 	mov.w	ip, #10
 800e372:	4621      	mov	r1, r4
 800e374:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e378:	3b30      	subs	r3, #48	@ 0x30
 800e37a:	2b09      	cmp	r3, #9
 800e37c:	d94b      	bls.n	800e416 <_vfiprintf_r+0x1a2>
 800e37e:	b1b0      	cbz	r0, 800e3ae <_vfiprintf_r+0x13a>
 800e380:	9207      	str	r2, [sp, #28]
 800e382:	e014      	b.n	800e3ae <_vfiprintf_r+0x13a>
 800e384:	eba0 0308 	sub.w	r3, r0, r8
 800e388:	fa09 f303 	lsl.w	r3, r9, r3
 800e38c:	4313      	orrs	r3, r2
 800e38e:	9304      	str	r3, [sp, #16]
 800e390:	46a2      	mov	sl, r4
 800e392:	e7d2      	b.n	800e33a <_vfiprintf_r+0xc6>
 800e394:	9b03      	ldr	r3, [sp, #12]
 800e396:	1d19      	adds	r1, r3, #4
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	9103      	str	r1, [sp, #12]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	bfbb      	ittet	lt
 800e3a0:	425b      	neglt	r3, r3
 800e3a2:	f042 0202 	orrlt.w	r2, r2, #2
 800e3a6:	9307      	strge	r3, [sp, #28]
 800e3a8:	9307      	strlt	r3, [sp, #28]
 800e3aa:	bfb8      	it	lt
 800e3ac:	9204      	strlt	r2, [sp, #16]
 800e3ae:	7823      	ldrb	r3, [r4, #0]
 800e3b0:	2b2e      	cmp	r3, #46	@ 0x2e
 800e3b2:	d10a      	bne.n	800e3ca <_vfiprintf_r+0x156>
 800e3b4:	7863      	ldrb	r3, [r4, #1]
 800e3b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800e3b8:	d132      	bne.n	800e420 <_vfiprintf_r+0x1ac>
 800e3ba:	9b03      	ldr	r3, [sp, #12]
 800e3bc:	1d1a      	adds	r2, r3, #4
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	9203      	str	r2, [sp, #12]
 800e3c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e3c6:	3402      	adds	r4, #2
 800e3c8:	9305      	str	r3, [sp, #20]
 800e3ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e4a0 <_vfiprintf_r+0x22c>
 800e3ce:	7821      	ldrb	r1, [r4, #0]
 800e3d0:	2203      	movs	r2, #3
 800e3d2:	4650      	mov	r0, sl
 800e3d4:	f7f1 ff84 	bl	80002e0 <memchr>
 800e3d8:	b138      	cbz	r0, 800e3ea <_vfiprintf_r+0x176>
 800e3da:	9b04      	ldr	r3, [sp, #16]
 800e3dc:	eba0 000a 	sub.w	r0, r0, sl
 800e3e0:	2240      	movs	r2, #64	@ 0x40
 800e3e2:	4082      	lsls	r2, r0
 800e3e4:	4313      	orrs	r3, r2
 800e3e6:	3401      	adds	r4, #1
 800e3e8:	9304      	str	r3, [sp, #16]
 800e3ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3ee:	4829      	ldr	r0, [pc, #164]	@ (800e494 <_vfiprintf_r+0x220>)
 800e3f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e3f4:	2206      	movs	r2, #6
 800e3f6:	f7f1 ff73 	bl	80002e0 <memchr>
 800e3fa:	2800      	cmp	r0, #0
 800e3fc:	d03f      	beq.n	800e47e <_vfiprintf_r+0x20a>
 800e3fe:	4b26      	ldr	r3, [pc, #152]	@ (800e498 <_vfiprintf_r+0x224>)
 800e400:	bb1b      	cbnz	r3, 800e44a <_vfiprintf_r+0x1d6>
 800e402:	9b03      	ldr	r3, [sp, #12]
 800e404:	3307      	adds	r3, #7
 800e406:	f023 0307 	bic.w	r3, r3, #7
 800e40a:	3308      	adds	r3, #8
 800e40c:	9303      	str	r3, [sp, #12]
 800e40e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e410:	443b      	add	r3, r7
 800e412:	9309      	str	r3, [sp, #36]	@ 0x24
 800e414:	e76a      	b.n	800e2ec <_vfiprintf_r+0x78>
 800e416:	fb0c 3202 	mla	r2, ip, r2, r3
 800e41a:	460c      	mov	r4, r1
 800e41c:	2001      	movs	r0, #1
 800e41e:	e7a8      	b.n	800e372 <_vfiprintf_r+0xfe>
 800e420:	2300      	movs	r3, #0
 800e422:	3401      	adds	r4, #1
 800e424:	9305      	str	r3, [sp, #20]
 800e426:	4619      	mov	r1, r3
 800e428:	f04f 0c0a 	mov.w	ip, #10
 800e42c:	4620      	mov	r0, r4
 800e42e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e432:	3a30      	subs	r2, #48	@ 0x30
 800e434:	2a09      	cmp	r2, #9
 800e436:	d903      	bls.n	800e440 <_vfiprintf_r+0x1cc>
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d0c6      	beq.n	800e3ca <_vfiprintf_r+0x156>
 800e43c:	9105      	str	r1, [sp, #20]
 800e43e:	e7c4      	b.n	800e3ca <_vfiprintf_r+0x156>
 800e440:	fb0c 2101 	mla	r1, ip, r1, r2
 800e444:	4604      	mov	r4, r0
 800e446:	2301      	movs	r3, #1
 800e448:	e7f0      	b.n	800e42c <_vfiprintf_r+0x1b8>
 800e44a:	ab03      	add	r3, sp, #12
 800e44c:	9300      	str	r3, [sp, #0]
 800e44e:	462a      	mov	r2, r5
 800e450:	4b12      	ldr	r3, [pc, #72]	@ (800e49c <_vfiprintf_r+0x228>)
 800e452:	a904      	add	r1, sp, #16
 800e454:	4630      	mov	r0, r6
 800e456:	f7fd fd27 	bl	800bea8 <_printf_float>
 800e45a:	4607      	mov	r7, r0
 800e45c:	1c78      	adds	r0, r7, #1
 800e45e:	d1d6      	bne.n	800e40e <_vfiprintf_r+0x19a>
 800e460:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e462:	07d9      	lsls	r1, r3, #31
 800e464:	d405      	bmi.n	800e472 <_vfiprintf_r+0x1fe>
 800e466:	89ab      	ldrh	r3, [r5, #12]
 800e468:	059a      	lsls	r2, r3, #22
 800e46a:	d402      	bmi.n	800e472 <_vfiprintf_r+0x1fe>
 800e46c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e46e:	f7fe fa9f 	bl	800c9b0 <__retarget_lock_release_recursive>
 800e472:	89ab      	ldrh	r3, [r5, #12]
 800e474:	065b      	lsls	r3, r3, #25
 800e476:	f53f af1f 	bmi.w	800e2b8 <_vfiprintf_r+0x44>
 800e47a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e47c:	e71e      	b.n	800e2bc <_vfiprintf_r+0x48>
 800e47e:	ab03      	add	r3, sp, #12
 800e480:	9300      	str	r3, [sp, #0]
 800e482:	462a      	mov	r2, r5
 800e484:	4b05      	ldr	r3, [pc, #20]	@ (800e49c <_vfiprintf_r+0x228>)
 800e486:	a904      	add	r1, sp, #16
 800e488:	4630      	mov	r0, r6
 800e48a:	f7fd ff95 	bl	800c3b8 <_printf_i>
 800e48e:	e7e4      	b.n	800e45a <_vfiprintf_r+0x1e6>
 800e490:	0806d4a0 	.word	0x0806d4a0
 800e494:	0806d4aa 	.word	0x0806d4aa
 800e498:	0800bea9 	.word	0x0800bea9
 800e49c:	0800e251 	.word	0x0800e251
 800e4a0:	0806d4a6 	.word	0x0806d4a6

0800e4a4 <__swbuf_r>:
 800e4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4a6:	460e      	mov	r6, r1
 800e4a8:	4614      	mov	r4, r2
 800e4aa:	4605      	mov	r5, r0
 800e4ac:	b118      	cbz	r0, 800e4b6 <__swbuf_r+0x12>
 800e4ae:	6a03      	ldr	r3, [r0, #32]
 800e4b0:	b90b      	cbnz	r3, 800e4b6 <__swbuf_r+0x12>
 800e4b2:	f7fe f92d 	bl	800c710 <__sinit>
 800e4b6:	69a3      	ldr	r3, [r4, #24]
 800e4b8:	60a3      	str	r3, [r4, #8]
 800e4ba:	89a3      	ldrh	r3, [r4, #12]
 800e4bc:	071a      	lsls	r2, r3, #28
 800e4be:	d501      	bpl.n	800e4c4 <__swbuf_r+0x20>
 800e4c0:	6923      	ldr	r3, [r4, #16]
 800e4c2:	b943      	cbnz	r3, 800e4d6 <__swbuf_r+0x32>
 800e4c4:	4621      	mov	r1, r4
 800e4c6:	4628      	mov	r0, r5
 800e4c8:	f000 f82a 	bl	800e520 <__swsetup_r>
 800e4cc:	b118      	cbz	r0, 800e4d6 <__swbuf_r+0x32>
 800e4ce:	f04f 37ff 	mov.w	r7, #4294967295
 800e4d2:	4638      	mov	r0, r7
 800e4d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4d6:	6823      	ldr	r3, [r4, #0]
 800e4d8:	6922      	ldr	r2, [r4, #16]
 800e4da:	1a98      	subs	r0, r3, r2
 800e4dc:	6963      	ldr	r3, [r4, #20]
 800e4de:	b2f6      	uxtb	r6, r6
 800e4e0:	4283      	cmp	r3, r0
 800e4e2:	4637      	mov	r7, r6
 800e4e4:	dc05      	bgt.n	800e4f2 <__swbuf_r+0x4e>
 800e4e6:	4621      	mov	r1, r4
 800e4e8:	4628      	mov	r0, r5
 800e4ea:	f7ff fe07 	bl	800e0fc <_fflush_r>
 800e4ee:	2800      	cmp	r0, #0
 800e4f0:	d1ed      	bne.n	800e4ce <__swbuf_r+0x2a>
 800e4f2:	68a3      	ldr	r3, [r4, #8]
 800e4f4:	3b01      	subs	r3, #1
 800e4f6:	60a3      	str	r3, [r4, #8]
 800e4f8:	6823      	ldr	r3, [r4, #0]
 800e4fa:	1c5a      	adds	r2, r3, #1
 800e4fc:	6022      	str	r2, [r4, #0]
 800e4fe:	701e      	strb	r6, [r3, #0]
 800e500:	6962      	ldr	r2, [r4, #20]
 800e502:	1c43      	adds	r3, r0, #1
 800e504:	429a      	cmp	r2, r3
 800e506:	d004      	beq.n	800e512 <__swbuf_r+0x6e>
 800e508:	89a3      	ldrh	r3, [r4, #12]
 800e50a:	07db      	lsls	r3, r3, #31
 800e50c:	d5e1      	bpl.n	800e4d2 <__swbuf_r+0x2e>
 800e50e:	2e0a      	cmp	r6, #10
 800e510:	d1df      	bne.n	800e4d2 <__swbuf_r+0x2e>
 800e512:	4621      	mov	r1, r4
 800e514:	4628      	mov	r0, r5
 800e516:	f7ff fdf1 	bl	800e0fc <_fflush_r>
 800e51a:	2800      	cmp	r0, #0
 800e51c:	d0d9      	beq.n	800e4d2 <__swbuf_r+0x2e>
 800e51e:	e7d6      	b.n	800e4ce <__swbuf_r+0x2a>

0800e520 <__swsetup_r>:
 800e520:	b538      	push	{r3, r4, r5, lr}
 800e522:	4b29      	ldr	r3, [pc, #164]	@ (800e5c8 <__swsetup_r+0xa8>)
 800e524:	4605      	mov	r5, r0
 800e526:	6818      	ldr	r0, [r3, #0]
 800e528:	460c      	mov	r4, r1
 800e52a:	b118      	cbz	r0, 800e534 <__swsetup_r+0x14>
 800e52c:	6a03      	ldr	r3, [r0, #32]
 800e52e:	b90b      	cbnz	r3, 800e534 <__swsetup_r+0x14>
 800e530:	f7fe f8ee 	bl	800c710 <__sinit>
 800e534:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e538:	0719      	lsls	r1, r3, #28
 800e53a:	d422      	bmi.n	800e582 <__swsetup_r+0x62>
 800e53c:	06da      	lsls	r2, r3, #27
 800e53e:	d407      	bmi.n	800e550 <__swsetup_r+0x30>
 800e540:	2209      	movs	r2, #9
 800e542:	602a      	str	r2, [r5, #0]
 800e544:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e548:	81a3      	strh	r3, [r4, #12]
 800e54a:	f04f 30ff 	mov.w	r0, #4294967295
 800e54e:	e033      	b.n	800e5b8 <__swsetup_r+0x98>
 800e550:	0758      	lsls	r0, r3, #29
 800e552:	d512      	bpl.n	800e57a <__swsetup_r+0x5a>
 800e554:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e556:	b141      	cbz	r1, 800e56a <__swsetup_r+0x4a>
 800e558:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e55c:	4299      	cmp	r1, r3
 800e55e:	d002      	beq.n	800e566 <__swsetup_r+0x46>
 800e560:	4628      	mov	r0, r5
 800e562:	f7ff f81b 	bl	800d59c <_free_r>
 800e566:	2300      	movs	r3, #0
 800e568:	6363      	str	r3, [r4, #52]	@ 0x34
 800e56a:	89a3      	ldrh	r3, [r4, #12]
 800e56c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e570:	81a3      	strh	r3, [r4, #12]
 800e572:	2300      	movs	r3, #0
 800e574:	6063      	str	r3, [r4, #4]
 800e576:	6923      	ldr	r3, [r4, #16]
 800e578:	6023      	str	r3, [r4, #0]
 800e57a:	89a3      	ldrh	r3, [r4, #12]
 800e57c:	f043 0308 	orr.w	r3, r3, #8
 800e580:	81a3      	strh	r3, [r4, #12]
 800e582:	6923      	ldr	r3, [r4, #16]
 800e584:	b94b      	cbnz	r3, 800e59a <__swsetup_r+0x7a>
 800e586:	89a3      	ldrh	r3, [r4, #12]
 800e588:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e58c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e590:	d003      	beq.n	800e59a <__swsetup_r+0x7a>
 800e592:	4621      	mov	r1, r4
 800e594:	4628      	mov	r0, r5
 800e596:	f000 f883 	bl	800e6a0 <__smakebuf_r>
 800e59a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e59e:	f013 0201 	ands.w	r2, r3, #1
 800e5a2:	d00a      	beq.n	800e5ba <__swsetup_r+0x9a>
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	60a2      	str	r2, [r4, #8]
 800e5a8:	6962      	ldr	r2, [r4, #20]
 800e5aa:	4252      	negs	r2, r2
 800e5ac:	61a2      	str	r2, [r4, #24]
 800e5ae:	6922      	ldr	r2, [r4, #16]
 800e5b0:	b942      	cbnz	r2, 800e5c4 <__swsetup_r+0xa4>
 800e5b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e5b6:	d1c5      	bne.n	800e544 <__swsetup_r+0x24>
 800e5b8:	bd38      	pop	{r3, r4, r5, pc}
 800e5ba:	0799      	lsls	r1, r3, #30
 800e5bc:	bf58      	it	pl
 800e5be:	6962      	ldrpl	r2, [r4, #20]
 800e5c0:	60a2      	str	r2, [r4, #8]
 800e5c2:	e7f4      	b.n	800e5ae <__swsetup_r+0x8e>
 800e5c4:	2000      	movs	r0, #0
 800e5c6:	e7f7      	b.n	800e5b8 <__swsetup_r+0x98>
 800e5c8:	24000b5c 	.word	0x24000b5c

0800e5cc <_raise_r>:
 800e5cc:	291f      	cmp	r1, #31
 800e5ce:	b538      	push	{r3, r4, r5, lr}
 800e5d0:	4605      	mov	r5, r0
 800e5d2:	460c      	mov	r4, r1
 800e5d4:	d904      	bls.n	800e5e0 <_raise_r+0x14>
 800e5d6:	2316      	movs	r3, #22
 800e5d8:	6003      	str	r3, [r0, #0]
 800e5da:	f04f 30ff 	mov.w	r0, #4294967295
 800e5de:	bd38      	pop	{r3, r4, r5, pc}
 800e5e0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e5e2:	b112      	cbz	r2, 800e5ea <_raise_r+0x1e>
 800e5e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e5e8:	b94b      	cbnz	r3, 800e5fe <_raise_r+0x32>
 800e5ea:	4628      	mov	r0, r5
 800e5ec:	f000 f830 	bl	800e650 <_getpid_r>
 800e5f0:	4622      	mov	r2, r4
 800e5f2:	4601      	mov	r1, r0
 800e5f4:	4628      	mov	r0, r5
 800e5f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e5fa:	f000 b817 	b.w	800e62c <_kill_r>
 800e5fe:	2b01      	cmp	r3, #1
 800e600:	d00a      	beq.n	800e618 <_raise_r+0x4c>
 800e602:	1c59      	adds	r1, r3, #1
 800e604:	d103      	bne.n	800e60e <_raise_r+0x42>
 800e606:	2316      	movs	r3, #22
 800e608:	6003      	str	r3, [r0, #0]
 800e60a:	2001      	movs	r0, #1
 800e60c:	e7e7      	b.n	800e5de <_raise_r+0x12>
 800e60e:	2100      	movs	r1, #0
 800e610:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e614:	4620      	mov	r0, r4
 800e616:	4798      	blx	r3
 800e618:	2000      	movs	r0, #0
 800e61a:	e7e0      	b.n	800e5de <_raise_r+0x12>

0800e61c <raise>:
 800e61c:	4b02      	ldr	r3, [pc, #8]	@ (800e628 <raise+0xc>)
 800e61e:	4601      	mov	r1, r0
 800e620:	6818      	ldr	r0, [r3, #0]
 800e622:	f7ff bfd3 	b.w	800e5cc <_raise_r>
 800e626:	bf00      	nop
 800e628:	24000b5c 	.word	0x24000b5c

0800e62c <_kill_r>:
 800e62c:	b538      	push	{r3, r4, r5, lr}
 800e62e:	4d07      	ldr	r5, [pc, #28]	@ (800e64c <_kill_r+0x20>)
 800e630:	2300      	movs	r3, #0
 800e632:	4604      	mov	r4, r0
 800e634:	4608      	mov	r0, r1
 800e636:	4611      	mov	r1, r2
 800e638:	602b      	str	r3, [r5, #0]
 800e63a:	f000 fa77 	bl	800eb2c <_kill>
 800e63e:	1c43      	adds	r3, r0, #1
 800e640:	d102      	bne.n	800e648 <_kill_r+0x1c>
 800e642:	682b      	ldr	r3, [r5, #0]
 800e644:	b103      	cbz	r3, 800e648 <_kill_r+0x1c>
 800e646:	6023      	str	r3, [r4, #0]
 800e648:	bd38      	pop	{r3, r4, r5, pc}
 800e64a:	bf00      	nop
 800e64c:	240692e8 	.word	0x240692e8

0800e650 <_getpid_r>:
 800e650:	f000 ba5c 	b.w	800eb0c <_getpid>

0800e654 <__swhatbuf_r>:
 800e654:	b570      	push	{r4, r5, r6, lr}
 800e656:	460c      	mov	r4, r1
 800e658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e65c:	2900      	cmp	r1, #0
 800e65e:	b096      	sub	sp, #88	@ 0x58
 800e660:	4615      	mov	r5, r2
 800e662:	461e      	mov	r6, r3
 800e664:	da0d      	bge.n	800e682 <__swhatbuf_r+0x2e>
 800e666:	89a3      	ldrh	r3, [r4, #12]
 800e668:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e66c:	f04f 0100 	mov.w	r1, #0
 800e670:	bf14      	ite	ne
 800e672:	2340      	movne	r3, #64	@ 0x40
 800e674:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e678:	2000      	movs	r0, #0
 800e67a:	6031      	str	r1, [r6, #0]
 800e67c:	602b      	str	r3, [r5, #0]
 800e67e:	b016      	add	sp, #88	@ 0x58
 800e680:	bd70      	pop	{r4, r5, r6, pc}
 800e682:	466a      	mov	r2, sp
 800e684:	f000 f848 	bl	800e718 <_fstat_r>
 800e688:	2800      	cmp	r0, #0
 800e68a:	dbec      	blt.n	800e666 <__swhatbuf_r+0x12>
 800e68c:	9901      	ldr	r1, [sp, #4]
 800e68e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e692:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e696:	4259      	negs	r1, r3
 800e698:	4159      	adcs	r1, r3
 800e69a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e69e:	e7eb      	b.n	800e678 <__swhatbuf_r+0x24>

0800e6a0 <__smakebuf_r>:
 800e6a0:	898b      	ldrh	r3, [r1, #12]
 800e6a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e6a4:	079d      	lsls	r5, r3, #30
 800e6a6:	4606      	mov	r6, r0
 800e6a8:	460c      	mov	r4, r1
 800e6aa:	d507      	bpl.n	800e6bc <__smakebuf_r+0x1c>
 800e6ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e6b0:	6023      	str	r3, [r4, #0]
 800e6b2:	6123      	str	r3, [r4, #16]
 800e6b4:	2301      	movs	r3, #1
 800e6b6:	6163      	str	r3, [r4, #20]
 800e6b8:	b003      	add	sp, #12
 800e6ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6bc:	ab01      	add	r3, sp, #4
 800e6be:	466a      	mov	r2, sp
 800e6c0:	f7ff ffc8 	bl	800e654 <__swhatbuf_r>
 800e6c4:	9f00      	ldr	r7, [sp, #0]
 800e6c6:	4605      	mov	r5, r0
 800e6c8:	4639      	mov	r1, r7
 800e6ca:	4630      	mov	r0, r6
 800e6cc:	f7fd faa2 	bl	800bc14 <_malloc_r>
 800e6d0:	b948      	cbnz	r0, 800e6e6 <__smakebuf_r+0x46>
 800e6d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6d6:	059a      	lsls	r2, r3, #22
 800e6d8:	d4ee      	bmi.n	800e6b8 <__smakebuf_r+0x18>
 800e6da:	f023 0303 	bic.w	r3, r3, #3
 800e6de:	f043 0302 	orr.w	r3, r3, #2
 800e6e2:	81a3      	strh	r3, [r4, #12]
 800e6e4:	e7e2      	b.n	800e6ac <__smakebuf_r+0xc>
 800e6e6:	89a3      	ldrh	r3, [r4, #12]
 800e6e8:	6020      	str	r0, [r4, #0]
 800e6ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e6ee:	81a3      	strh	r3, [r4, #12]
 800e6f0:	9b01      	ldr	r3, [sp, #4]
 800e6f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e6f6:	b15b      	cbz	r3, 800e710 <__smakebuf_r+0x70>
 800e6f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e6fc:	4630      	mov	r0, r6
 800e6fe:	f000 f81d 	bl	800e73c <_isatty_r>
 800e702:	b128      	cbz	r0, 800e710 <__smakebuf_r+0x70>
 800e704:	89a3      	ldrh	r3, [r4, #12]
 800e706:	f023 0303 	bic.w	r3, r3, #3
 800e70a:	f043 0301 	orr.w	r3, r3, #1
 800e70e:	81a3      	strh	r3, [r4, #12]
 800e710:	89a3      	ldrh	r3, [r4, #12]
 800e712:	431d      	orrs	r5, r3
 800e714:	81a5      	strh	r5, [r4, #12]
 800e716:	e7cf      	b.n	800e6b8 <__smakebuf_r+0x18>

0800e718 <_fstat_r>:
 800e718:	b538      	push	{r3, r4, r5, lr}
 800e71a:	4d07      	ldr	r5, [pc, #28]	@ (800e738 <_fstat_r+0x20>)
 800e71c:	2300      	movs	r3, #0
 800e71e:	4604      	mov	r4, r0
 800e720:	4608      	mov	r0, r1
 800e722:	4611      	mov	r1, r2
 800e724:	602b      	str	r3, [r5, #0]
 800e726:	f000 f9e9 	bl	800eafc <_fstat>
 800e72a:	1c43      	adds	r3, r0, #1
 800e72c:	d102      	bne.n	800e734 <_fstat_r+0x1c>
 800e72e:	682b      	ldr	r3, [r5, #0]
 800e730:	b103      	cbz	r3, 800e734 <_fstat_r+0x1c>
 800e732:	6023      	str	r3, [r4, #0]
 800e734:	bd38      	pop	{r3, r4, r5, pc}
 800e736:	bf00      	nop
 800e738:	240692e8 	.word	0x240692e8

0800e73c <_isatty_r>:
 800e73c:	b538      	push	{r3, r4, r5, lr}
 800e73e:	4d06      	ldr	r5, [pc, #24]	@ (800e758 <_isatty_r+0x1c>)
 800e740:	2300      	movs	r3, #0
 800e742:	4604      	mov	r4, r0
 800e744:	4608      	mov	r0, r1
 800e746:	602b      	str	r3, [r5, #0]
 800e748:	f000 f9e8 	bl	800eb1c <_isatty>
 800e74c:	1c43      	adds	r3, r0, #1
 800e74e:	d102      	bne.n	800e756 <_isatty_r+0x1a>
 800e750:	682b      	ldr	r3, [r5, #0]
 800e752:	b103      	cbz	r3, 800e756 <_isatty_r+0x1a>
 800e754:	6023      	str	r3, [r4, #0]
 800e756:	bd38      	pop	{r3, r4, r5, pc}
 800e758:	240692e8 	.word	0x240692e8

0800e75c <checkint>:
 800e75c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800e760:	2b7e      	cmp	r3, #126	@ 0x7e
 800e762:	d910      	bls.n	800e786 <checkint+0x2a>
 800e764:	2b96      	cmp	r3, #150	@ 0x96
 800e766:	d80c      	bhi.n	800e782 <checkint+0x26>
 800e768:	2201      	movs	r2, #1
 800e76a:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800e76e:	fa02 f303 	lsl.w	r3, r2, r3
 800e772:	1e5a      	subs	r2, r3, #1
 800e774:	4202      	tst	r2, r0
 800e776:	d106      	bne.n	800e786 <checkint+0x2a>
 800e778:	4203      	tst	r3, r0
 800e77a:	bf0c      	ite	eq
 800e77c:	2002      	moveq	r0, #2
 800e77e:	2001      	movne	r0, #1
 800e780:	4770      	bx	lr
 800e782:	2002      	movs	r0, #2
 800e784:	4770      	bx	lr
 800e786:	2000      	movs	r0, #0
 800e788:	4770      	bx	lr
 800e78a:	0000      	movs	r0, r0
 800e78c:	0000      	movs	r0, r0
	...

0800e790 <powf>:
 800e790:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e792:	ee10 1a10 	vmov	r1, s0
 800e796:	ee10 4a90 	vmov	r4, s1
 800e79a:	f5a1 0200 	sub.w	r2, r1, #8388608	@ 0x800000
 800e79e:	0063      	lsls	r3, r4, #1
 800e7a0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800e7a4:	eef0 7a40 	vmov.f32	s15, s0
 800e7a8:	eeb0 7a60 	vmov.f32	s14, s1
 800e7ac:	f103 30ff 	add.w	r0, r3, #4294967295
 800e7b0:	f06f 7280 	mvn.w	r2, #16777216	@ 0x1000000
 800e7b4:	d252      	bcs.n	800e85c <powf+0xcc>
 800e7b6:	4290      	cmp	r0, r2
 800e7b8:	d258      	bcs.n	800e86c <powf+0xdc>
 800e7ba:	2000      	movs	r0, #0
 800e7bc:	f101 4340 	add.w	r3, r1, #3221225472	@ 0xc0000000
 800e7c0:	f503 034d 	add.w	r3, r3, #13434880	@ 0xcd0000
 800e7c4:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 800e7c8:	0ddb      	lsrs	r3, r3, #23
 800e7ca:	4a9d      	ldr	r2, [pc, #628]	@ (800ea40 <powf+0x2b0>)
 800e7cc:	eebf 2b00 	vmov.f64	d2, #240	@ 0xbf800000 -1.0
 800e7d0:	05db      	lsls	r3, r3, #23
 800e7d2:	1ac9      	subs	r1, r1, r3
 800e7d4:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 800e7d8:	ee07 1a90 	vmov	s15, r1
 800e7dc:	ed94 5b02 	vldr	d5, [r4, #8]
 800e7e0:	ed94 4b00 	vldr	d4, [r4]
 800e7e4:	15db      	asrs	r3, r3, #23
 800e7e6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800e7ea:	ee07 3a90 	vmov	s15, r3
 800e7ee:	eea4 2b06 	vfma.f64	d2, d4, d6
 800e7f2:	ed92 1b42 	vldr	d1, [r2, #264]	@ 0x108
 800e7f6:	ee22 4b02 	vmul.f64	d4, d2, d2
 800e7fa:	ee24 0b04 	vmul.f64	d0, d4, d4
 800e7fe:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800e802:	ee36 6b05 	vadd.f64	d6, d6, d5
 800e806:	ed92 5b40 	vldr	d5, [r2, #256]	@ 0x100
 800e80a:	ed92 3b44 	vldr	d3, [r2, #272]	@ 0x110
 800e80e:	eea2 1b05 	vfma.f64	d1, d2, d5
 800e812:	ed92 5b46 	vldr	d5, [r2, #280]	@ 0x118
 800e816:	eea2 5b03 	vfma.f64	d5, d2, d3
 800e81a:	ed92 3b48 	vldr	d3, [r2, #288]	@ 0x120
 800e81e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800e822:	eea2 6b03 	vfma.f64	d6, d2, d3
 800e826:	eea4 6b05 	vfma.f64	d6, d4, d5
 800e82a:	eea1 6b00 	vfma.f64	d6, d1, d0
 800e82e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e832:	ee17 3a90 	vmov	r3, s15
 800e836:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 800e83a:	f248 03bf 	movw	r3, #32959	@ 0x80bf
 800e83e:	429a      	cmp	r2, r3
 800e840:	f0c0 80b8 	bcc.w	800e9b4 <powf+0x224>
 800e844:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 800ea20 <powf+0x290>
 800e848:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e84c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e850:	dd79      	ble.n	800e946 <powf+0x1b6>
 800e852:	b003      	add	sp, #12
 800e854:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e858:	f000 b920 	b.w	800ea9c <__math_oflowf>
 800e85c:	4290      	cmp	r0, r2
 800e85e:	d330      	bcc.n	800e8c2 <powf+0x132>
 800e860:	b12b      	cbz	r3, 800e86e <powf+0xde>
 800e862:	0049      	lsls	r1, r1, #1
 800e864:	f1b1 4f7f 	cmp.w	r1, #4278190080	@ 0xff000000
 800e868:	d808      	bhi.n	800e87c <powf+0xec>
 800e86a:	e015      	b.n	800e898 <powf+0x108>
 800e86c:	b953      	cbnz	r3, 800e884 <powf+0xf4>
 800e86e:	f481 0180 	eor.w	r1, r1, #4194304	@ 0x400000
 800e872:	0049      	lsls	r1, r1, #1
 800e874:	f511 0f00 	cmn.w	r1, #8388608	@ 0x800000
 800e878:	f240 80ca 	bls.w	800ea10 <powf+0x280>
 800e87c:	ee37 0a87 	vadd.f32	s0, s15, s14
 800e880:	b003      	add	sp, #12
 800e882:	bd30      	pop	{r4, r5, pc}
 800e884:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 800e888:	d105      	bne.n	800e896 <powf+0x106>
 800e88a:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800e88e:	0064      	lsls	r4, r4, #1
 800e890:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800e894:	e7f0      	b.n	800e878 <powf+0xe8>
 800e896:	0049      	lsls	r1, r1, #1
 800e898:	f1b3 4f7f 	cmp.w	r3, #4278190080	@ 0xff000000
 800e89c:	d1ee      	bne.n	800e87c <powf+0xec>
 800e89e:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 800e8a2:	f000 80b5 	beq.w	800ea10 <powf+0x280>
 800e8a6:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 800e8aa:	ea6f 0404 	mvn.w	r4, r4
 800e8ae:	bf34      	ite	cc
 800e8b0:	2100      	movcc	r1, #0
 800e8b2:	2101      	movcs	r1, #1
 800e8b4:	0fe4      	lsrs	r4, r4, #31
 800e8b6:	42a1      	cmp	r1, r4
 800e8b8:	f040 80ad 	bne.w	800ea16 <powf+0x286>
 800e8bc:	ee27 0a07 	vmul.f32	s0, s14, s14
 800e8c0:	e7de      	b.n	800e880 <powf+0xf0>
 800e8c2:	004d      	lsls	r5, r1, #1
 800e8c4:	1e6b      	subs	r3, r5, #1
 800e8c6:	4293      	cmp	r3, r2
 800e8c8:	d31b      	bcc.n	800e902 <powf+0x172>
 800e8ca:	2900      	cmp	r1, #0
 800e8cc:	ee20 0a00 	vmul.f32	s0, s0, s0
 800e8d0:	da0e      	bge.n	800e8f0 <powf+0x160>
 800e8d2:	4620      	mov	r0, r4
 800e8d4:	f7ff ff42 	bl	800e75c <checkint>
 800e8d8:	2801      	cmp	r0, #1
 800e8da:	d109      	bne.n	800e8f0 <powf+0x160>
 800e8dc:	eeb1 0a40 	vneg.f32	s0, s0
 800e8e0:	b945      	cbnz	r5, 800e8f4 <powf+0x164>
 800e8e2:	2c00      	cmp	r4, #0
 800e8e4:	dacc      	bge.n	800e880 <powf+0xf0>
 800e8e6:	b003      	add	sp, #12
 800e8e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e8ec:	f000 b8dc 	b.w	800eaa8 <__math_divzerof>
 800e8f0:	2000      	movs	r0, #0
 800e8f2:	e7f5      	b.n	800e8e0 <powf+0x150>
 800e8f4:	2c00      	cmp	r4, #0
 800e8f6:	dac3      	bge.n	800e880 <powf+0xf0>
 800e8f8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800e8fc:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800e900:	e7be      	b.n	800e880 <powf+0xf0>
 800e902:	2900      	cmp	r1, #0
 800e904:	da1d      	bge.n	800e942 <powf+0x1b2>
 800e906:	4620      	mov	r0, r4
 800e908:	f7ff ff28 	bl	800e75c <checkint>
 800e90c:	b920      	cbnz	r0, 800e918 <powf+0x188>
 800e90e:	b003      	add	sp, #12
 800e910:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e914:	f000 b8da 	b.w	800eacc <__math_invalidf>
 800e918:	1e43      	subs	r3, r0, #1
 800e91a:	4258      	negs	r0, r3
 800e91c:	4158      	adcs	r0, r3
 800e91e:	0400      	lsls	r0, r0, #16
 800e920:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800e924:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800e928:	f4bf af48 	bcs.w	800e7bc <powf+0x2c>
 800e92c:	eddf 6a45 	vldr	s13, [pc, #276]	@ 800ea44 <powf+0x2b4>
 800e930:	ee27 0aa6 	vmul.f32	s0, s15, s13
 800e934:	ee10 3a10 	vmov	r3, s0
 800e938:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e93c:	f1a3 6138 	sub.w	r1, r3, #192937984	@ 0xb800000
 800e940:	e73c      	b.n	800e7bc <powf+0x2c>
 800e942:	2000      	movs	r0, #0
 800e944:	e7ee      	b.n	800e924 <powf+0x194>
 800e946:	ed9f 6b38 	vldr	d6, [pc, #224]	@ 800ea28 <powf+0x298>
 800e94a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e94e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e952:	dd0f      	ble.n	800e974 <powf+0x1e4>
 800e954:	f04f 534c 	mov.w	r3, #855638016	@ 0x33000000
 800e958:	b1c0      	cbz	r0, 800e98c <powf+0x1fc>
 800e95a:	9301      	str	r3, [sp, #4]
 800e95c:	eddd 6a01 	vldr	s13, [sp, #4]
 800e960:	eebf 6a00 	vmov.f32	s12, #240	@ 0xbf800000 -1.0
 800e964:	ee76 6a66 	vsub.f32	s13, s12, s13
 800e968:	eef4 6a46 	vcmp.f32	s13, s12
 800e96c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e970:	f47f af6f 	bne.w	800e852 <powf+0xc2>
 800e974:	ed9f 6b2e 	vldr	d6, [pc, #184]	@ 800ea30 <powf+0x2a0>
 800e978:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e97c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e980:	d80c      	bhi.n	800e99c <powf+0x20c>
 800e982:	b003      	add	sp, #12
 800e984:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e988:	f000 b87c 	b.w	800ea84 <__math_uflowf>
 800e98c:	9300      	str	r3, [sp, #0]
 800e98e:	eddd 6a00 	vldr	s13, [sp]
 800e992:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800e996:	ee76 6a86 	vadd.f32	s13, s13, s12
 800e99a:	e7e5      	b.n	800e968 <powf+0x1d8>
 800e99c:	ed9f 6b26 	vldr	d6, [pc, #152]	@ 800ea38 <powf+0x2a8>
 800e9a0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e9a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9a8:	d504      	bpl.n	800e9b4 <powf+0x224>
 800e9aa:	b003      	add	sp, #12
 800e9ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e9b0:	f000 b86e 	b.w	800ea90 <__math_may_uflowf>
 800e9b4:	4b24      	ldr	r3, [pc, #144]	@ (800ea48 <powf+0x2b8>)
 800e9b6:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800e9ba:	ed93 5b40 	vldr	d5, [r3, #256]	@ 0x100
 800e9be:	ee37 6b05 	vadd.f64	d6, d7, d5
 800e9c2:	ee16 2a10 	vmov	r2, s12
 800e9c6:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e9ca:	f002 011f 	and.w	r1, r2, #31
 800e9ce:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e9d2:	ed93 5b42 	vldr	d5, [r3, #264]	@ 0x108
 800e9d6:	ee27 4b07 	vmul.f64	d4, d7, d7
 800e9da:	ed93 6b44 	vldr	d6, [r3, #272]	@ 0x110
 800e9de:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 800e9e2:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 800e9e6:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e9ea:	686d      	ldr	r5, [r5, #4]
 800e9ec:	ed93 5b46 	vldr	d5, [r3, #280]	@ 0x118
 800e9f0:	1880      	adds	r0, r0, r2
 800e9f2:	2100      	movs	r1, #0
 800e9f4:	190a      	adds	r2, r1, r4
 800e9f6:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 800e9fa:	eea7 0b05 	vfma.f64	d0, d7, d5
 800e9fe:	ec43 2b17 	vmov	d7, r2, r3
 800ea02:	eea6 0b04 	vfma.f64	d0, d6, d4
 800ea06:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ea0a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800ea0e:	e737      	b.n	800e880 <powf+0xf0>
 800ea10:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ea14:	e734      	b.n	800e880 <powf+0xf0>
 800ea16:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 800ea4c <powf+0x2bc>
 800ea1a:	e731      	b.n	800e880 <powf+0xf0>
 800ea1c:	f3af 8000 	nop.w
 800ea20:	ffd1d571 	.word	0xffd1d571
 800ea24:	405fffff 	.word	0x405fffff
 800ea28:	ffa3aae2 	.word	0xffa3aae2
 800ea2c:	405fffff 	.word	0x405fffff
 800ea30:	00000000 	.word	0x00000000
 800ea34:	c062c000 	.word	0xc062c000
 800ea38:	00000000 	.word	0x00000000
 800ea3c:	c062a000 	.word	0xc062a000
 800ea40:	0806d740 	.word	0x0806d740
 800ea44:	4b000000 	.word	0x4b000000
 800ea48:	0806d5f8 	.word	0x0806d5f8
 800ea4c:	00000000 	.word	0x00000000

0800ea50 <with_errnof>:
 800ea50:	b510      	push	{r4, lr}
 800ea52:	ed2d 8b02 	vpush	{d8}
 800ea56:	eeb0 8a40 	vmov.f32	s16, s0
 800ea5a:	4604      	mov	r4, r0
 800ea5c:	f7fd ff7c 	bl	800c958 <__errno>
 800ea60:	eeb0 0a48 	vmov.f32	s0, s16
 800ea64:	ecbd 8b02 	vpop	{d8}
 800ea68:	6004      	str	r4, [r0, #0]
 800ea6a:	bd10      	pop	{r4, pc}

0800ea6c <xflowf>:
 800ea6c:	b130      	cbz	r0, 800ea7c <xflowf+0x10>
 800ea6e:	eef1 7a40 	vneg.f32	s15, s0
 800ea72:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ea76:	2022      	movs	r0, #34	@ 0x22
 800ea78:	f7ff bfea 	b.w	800ea50 <with_errnof>
 800ea7c:	eef0 7a40 	vmov.f32	s15, s0
 800ea80:	e7f7      	b.n	800ea72 <xflowf+0x6>
	...

0800ea84 <__math_uflowf>:
 800ea84:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ea8c <__math_uflowf+0x8>
 800ea88:	f7ff bff0 	b.w	800ea6c <xflowf>
 800ea8c:	10000000 	.word	0x10000000

0800ea90 <__math_may_uflowf>:
 800ea90:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ea98 <__math_may_uflowf+0x8>
 800ea94:	f7ff bfea 	b.w	800ea6c <xflowf>
 800ea98:	1a200000 	.word	0x1a200000

0800ea9c <__math_oflowf>:
 800ea9c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800eaa4 <__math_oflowf+0x8>
 800eaa0:	f7ff bfe4 	b.w	800ea6c <xflowf>
 800eaa4:	70000000 	.word	0x70000000

0800eaa8 <__math_divzerof>:
 800eaa8:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 800eac8 <__math_divzerof+0x20>
 800eaac:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800eab0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800eab4:	2800      	cmp	r0, #0
 800eab6:	f04f 0022 	mov.w	r0, #34	@ 0x22
 800eaba:	fe47 7a87 	vseleq.f32	s15, s15, s14
 800eabe:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800eac2:	f7ff bfc5 	b.w	800ea50 <with_errnof>
 800eac6:	bf00      	nop
 800eac8:	00000000 	.word	0x00000000

0800eacc <__math_invalidf>:
 800eacc:	eef0 7a40 	vmov.f32	s15, s0
 800ead0:	ee30 7a40 	vsub.f32	s14, s0, s0
 800ead4:	eef4 7a67 	vcmp.f32	s15, s15
 800ead8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eadc:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800eae0:	d602      	bvs.n	800eae8 <__math_invalidf+0x1c>
 800eae2:	2021      	movs	r0, #33	@ 0x21
 800eae4:	f7ff bfb4 	b.w	800ea50 <with_errnof>
 800eae8:	4770      	bx	lr
	...

0800eaec <_close>:
 800eaec:	4b02      	ldr	r3, [pc, #8]	@ (800eaf8 <_close+0xc>)
 800eaee:	2258      	movs	r2, #88	@ 0x58
 800eaf0:	601a      	str	r2, [r3, #0]
 800eaf2:	f04f 30ff 	mov.w	r0, #4294967295
 800eaf6:	4770      	bx	lr
 800eaf8:	240692e8 	.word	0x240692e8

0800eafc <_fstat>:
 800eafc:	4b02      	ldr	r3, [pc, #8]	@ (800eb08 <_fstat+0xc>)
 800eafe:	2258      	movs	r2, #88	@ 0x58
 800eb00:	601a      	str	r2, [r3, #0]
 800eb02:	f04f 30ff 	mov.w	r0, #4294967295
 800eb06:	4770      	bx	lr
 800eb08:	240692e8 	.word	0x240692e8

0800eb0c <_getpid>:
 800eb0c:	4b02      	ldr	r3, [pc, #8]	@ (800eb18 <_getpid+0xc>)
 800eb0e:	2258      	movs	r2, #88	@ 0x58
 800eb10:	601a      	str	r2, [r3, #0]
 800eb12:	f04f 30ff 	mov.w	r0, #4294967295
 800eb16:	4770      	bx	lr
 800eb18:	240692e8 	.word	0x240692e8

0800eb1c <_isatty>:
 800eb1c:	4b02      	ldr	r3, [pc, #8]	@ (800eb28 <_isatty+0xc>)
 800eb1e:	2258      	movs	r2, #88	@ 0x58
 800eb20:	601a      	str	r2, [r3, #0]
 800eb22:	2000      	movs	r0, #0
 800eb24:	4770      	bx	lr
 800eb26:	bf00      	nop
 800eb28:	240692e8 	.word	0x240692e8

0800eb2c <_kill>:
 800eb2c:	4b02      	ldr	r3, [pc, #8]	@ (800eb38 <_kill+0xc>)
 800eb2e:	2258      	movs	r2, #88	@ 0x58
 800eb30:	601a      	str	r2, [r3, #0]
 800eb32:	f04f 30ff 	mov.w	r0, #4294967295
 800eb36:	4770      	bx	lr
 800eb38:	240692e8 	.word	0x240692e8

0800eb3c <_lseek>:
 800eb3c:	4b02      	ldr	r3, [pc, #8]	@ (800eb48 <_lseek+0xc>)
 800eb3e:	2258      	movs	r2, #88	@ 0x58
 800eb40:	601a      	str	r2, [r3, #0]
 800eb42:	f04f 30ff 	mov.w	r0, #4294967295
 800eb46:	4770      	bx	lr
 800eb48:	240692e8 	.word	0x240692e8

0800eb4c <_read>:
 800eb4c:	4b02      	ldr	r3, [pc, #8]	@ (800eb58 <_read+0xc>)
 800eb4e:	2258      	movs	r2, #88	@ 0x58
 800eb50:	601a      	str	r2, [r3, #0]
 800eb52:	f04f 30ff 	mov.w	r0, #4294967295
 800eb56:	4770      	bx	lr
 800eb58:	240692e8 	.word	0x240692e8

0800eb5c <_write>:
 800eb5c:	4b02      	ldr	r3, [pc, #8]	@ (800eb68 <_write+0xc>)
 800eb5e:	2258      	movs	r2, #88	@ 0x58
 800eb60:	601a      	str	r2, [r3, #0]
 800eb62:	f04f 30ff 	mov.w	r0, #4294967295
 800eb66:	4770      	bx	lr
 800eb68:	240692e8 	.word	0x240692e8

0800eb6c <_exit>:
 800eb6c:	e7fe      	b.n	800eb6c <_exit>
	...

0800eb70 <_init>:
 800eb70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb72:	bf00      	nop
 800eb74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb76:	bc08      	pop	{r3}
 800eb78:	469e      	mov	lr, r3
 800eb7a:	4770      	bx	lr

0800eb7c <_fini>:
 800eb7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb7e:	bf00      	nop
 800eb80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb82:	bc08      	pop	{r3}
 800eb84:	469e      	mov	lr, r3
 800eb86:	4770      	bx	lr
