
CardClassifier.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e8a8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0005ec88  0800eb60  0800eb60  0000fb60  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0806d7e8  0806d7e8  0006e7e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0806d7f0  0806d7f0  0006e7f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0806d7f4  0806d7f4  0006e7f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000d18  24000000  0806d7f8  0006f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000685d0  24000d20  0806e510  0006fd20  2**5
                  ALLOC
  8 ._user_heap_stack 00001000  20000000  20000000  00070000  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0006fd18  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002290e  00000000  00000000  0006fd46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000046bf  00000000  00000000  00092654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 0000ab55  00000000  00000000  00096d13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001090  00000000  00000000  000a1868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000f5a  00000000  00000000  000a28f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00039dab  00000000  00000000  000a3852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000237ef  00000000  00000000  000dd5fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00166695  00000000  00000000  00100dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000093  00000000  00000000  00267481  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003dcc  00000000  00000000  00267514  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000073  00000000  00000000  0026b2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000d20 	.word	0x24000d20
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800eb30 	.word	0x0800eb30

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000d24 	.word	0x24000d24
 80002dc:	0800eb30 	.word	0x0800eb30

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b99e 	b.w	80006e4 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f83a 	bl	8000428 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__aeabi_f2lz>:
 80003c0:	ee07 0a90 	vmov	s15, r0
 80003c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80003c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003cc:	d401      	bmi.n	80003d2 <__aeabi_f2lz+0x12>
 80003ce:	f000 b80b 	b.w	80003e8 <__aeabi_f2ulz>
 80003d2:	eef1 7a67 	vneg.f32	s15, s15
 80003d6:	b508      	push	{r3, lr}
 80003d8:	ee17 0a90 	vmov	r0, s15
 80003dc:	f000 f804 	bl	80003e8 <__aeabi_f2ulz>
 80003e0:	4240      	negs	r0, r0
 80003e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003e6:	bd08      	pop	{r3, pc}

080003e8 <__aeabi_f2ulz>:
 80003e8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000418 <__aeabi_f2ulz+0x30>
 80003ec:	ee07 0a10 	vmov	s14, r0
 80003f0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000420 <__aeabi_f2ulz+0x38>
 80003f4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80003f8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80003fc:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 8000400:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000404:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000408:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800040c:	ee16 1a10 	vmov	r1, s12
 8000410:	ee17 0a90 	vmov	r0, s15
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	00000000 	.word	0x00000000
 800041c:	3df00000 	.word	0x3df00000
 8000420:	00000000 	.word	0x00000000
 8000424:	41f00000 	.word	0x41f00000

08000428 <__udivmoddi4>:
 8000428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800042c:	9d08      	ldr	r5, [sp, #32]
 800042e:	460c      	mov	r4, r1
 8000430:	2b00      	cmp	r3, #0
 8000432:	d14e      	bne.n	80004d2 <__udivmoddi4+0xaa>
 8000434:	4694      	mov	ip, r2
 8000436:	458c      	cmp	ip, r1
 8000438:	4686      	mov	lr, r0
 800043a:	fab2 f282 	clz	r2, r2
 800043e:	d962      	bls.n	8000506 <__udivmoddi4+0xde>
 8000440:	b14a      	cbz	r2, 8000456 <__udivmoddi4+0x2e>
 8000442:	f1c2 0320 	rsb	r3, r2, #32
 8000446:	4091      	lsls	r1, r2
 8000448:	fa20 f303 	lsr.w	r3, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	4319      	orrs	r1, r3
 8000452:	fa00 fe02 	lsl.w	lr, r0, r2
 8000456:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045a:	fa1f f68c 	uxth.w	r6, ip
 800045e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000462:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000466:	fb07 1114 	mls	r1, r7, r4, r1
 800046a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046e:	fb04 f106 	mul.w	r1, r4, r6
 8000472:	4299      	cmp	r1, r3
 8000474:	d90a      	bls.n	800048c <__udivmoddi4+0x64>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f104 30ff 	add.w	r0, r4, #4294967295
 800047e:	f080 8112 	bcs.w	80006a6 <__udivmoddi4+0x27e>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 810f 	bls.w	80006a6 <__udivmoddi4+0x27e>
 8000488:	3c02      	subs	r4, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a59      	subs	r1, r3, r1
 800048e:	fa1f f38e 	uxth.w	r3, lr
 8000492:	fbb1 f0f7 	udiv	r0, r1, r7
 8000496:	fb07 1110 	mls	r1, r7, r0, r1
 800049a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049e:	fb00 f606 	mul.w	r6, r0, r6
 80004a2:	429e      	cmp	r6, r3
 80004a4:	d90a      	bls.n	80004bc <__udivmoddi4+0x94>
 80004a6:	eb1c 0303 	adds.w	r3, ip, r3
 80004aa:	f100 31ff 	add.w	r1, r0, #4294967295
 80004ae:	f080 80fc 	bcs.w	80006aa <__udivmoddi4+0x282>
 80004b2:	429e      	cmp	r6, r3
 80004b4:	f240 80f9 	bls.w	80006aa <__udivmoddi4+0x282>
 80004b8:	4463      	add	r3, ip
 80004ba:	3802      	subs	r0, #2
 80004bc:	1b9b      	subs	r3, r3, r6
 80004be:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80004c2:	2100      	movs	r1, #0
 80004c4:	b11d      	cbz	r5, 80004ce <__udivmoddi4+0xa6>
 80004c6:	40d3      	lsrs	r3, r2
 80004c8:	2200      	movs	r2, #0
 80004ca:	e9c5 3200 	strd	r3, r2, [r5]
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d905      	bls.n	80004e2 <__udivmoddi4+0xba>
 80004d6:	b10d      	cbz	r5, 80004dc <__udivmoddi4+0xb4>
 80004d8:	e9c5 0100 	strd	r0, r1, [r5]
 80004dc:	2100      	movs	r1, #0
 80004de:	4608      	mov	r0, r1
 80004e0:	e7f5      	b.n	80004ce <__udivmoddi4+0xa6>
 80004e2:	fab3 f183 	clz	r1, r3
 80004e6:	2900      	cmp	r1, #0
 80004e8:	d146      	bne.n	8000578 <__udivmoddi4+0x150>
 80004ea:	42a3      	cmp	r3, r4
 80004ec:	d302      	bcc.n	80004f4 <__udivmoddi4+0xcc>
 80004ee:	4290      	cmp	r0, r2
 80004f0:	f0c0 80f0 	bcc.w	80006d4 <__udivmoddi4+0x2ac>
 80004f4:	1a86      	subs	r6, r0, r2
 80004f6:	eb64 0303 	sbc.w	r3, r4, r3
 80004fa:	2001      	movs	r0, #1
 80004fc:	2d00      	cmp	r5, #0
 80004fe:	d0e6      	beq.n	80004ce <__udivmoddi4+0xa6>
 8000500:	e9c5 6300 	strd	r6, r3, [r5]
 8000504:	e7e3      	b.n	80004ce <__udivmoddi4+0xa6>
 8000506:	2a00      	cmp	r2, #0
 8000508:	f040 8090 	bne.w	800062c <__udivmoddi4+0x204>
 800050c:	eba1 040c 	sub.w	r4, r1, ip
 8000510:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000514:	fa1f f78c 	uxth.w	r7, ip
 8000518:	2101      	movs	r1, #1
 800051a:	fbb4 f6f8 	udiv	r6, r4, r8
 800051e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000522:	fb08 4416 	mls	r4, r8, r6, r4
 8000526:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800052a:	fb07 f006 	mul.w	r0, r7, r6
 800052e:	4298      	cmp	r0, r3
 8000530:	d908      	bls.n	8000544 <__udivmoddi4+0x11c>
 8000532:	eb1c 0303 	adds.w	r3, ip, r3
 8000536:	f106 34ff 	add.w	r4, r6, #4294967295
 800053a:	d202      	bcs.n	8000542 <__udivmoddi4+0x11a>
 800053c:	4298      	cmp	r0, r3
 800053e:	f200 80cd 	bhi.w	80006dc <__udivmoddi4+0x2b4>
 8000542:	4626      	mov	r6, r4
 8000544:	1a1c      	subs	r4, r3, r0
 8000546:	fa1f f38e 	uxth.w	r3, lr
 800054a:	fbb4 f0f8 	udiv	r0, r4, r8
 800054e:	fb08 4410 	mls	r4, r8, r0, r4
 8000552:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000556:	fb00 f707 	mul.w	r7, r0, r7
 800055a:	429f      	cmp	r7, r3
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x148>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 34ff 	add.w	r4, r0, #4294967295
 8000566:	d202      	bcs.n	800056e <__udivmoddi4+0x146>
 8000568:	429f      	cmp	r7, r3
 800056a:	f200 80b0 	bhi.w	80006ce <__udivmoddi4+0x2a6>
 800056e:	4620      	mov	r0, r4
 8000570:	1bdb      	subs	r3, r3, r7
 8000572:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000576:	e7a5      	b.n	80004c4 <__udivmoddi4+0x9c>
 8000578:	f1c1 0620 	rsb	r6, r1, #32
 800057c:	408b      	lsls	r3, r1
 800057e:	fa22 f706 	lsr.w	r7, r2, r6
 8000582:	431f      	orrs	r7, r3
 8000584:	fa20 fc06 	lsr.w	ip, r0, r6
 8000588:	fa04 f301 	lsl.w	r3, r4, r1
 800058c:	ea43 030c 	orr.w	r3, r3, ip
 8000590:	40f4      	lsrs	r4, r6
 8000592:	fa00 f801 	lsl.w	r8, r0, r1
 8000596:	0c38      	lsrs	r0, r7, #16
 8000598:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800059c:	fbb4 fef0 	udiv	lr, r4, r0
 80005a0:	fa1f fc87 	uxth.w	ip, r7
 80005a4:	fb00 441e 	mls	r4, r0, lr, r4
 80005a8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005ac:	fb0e f90c 	mul.w	r9, lr, ip
 80005b0:	45a1      	cmp	r9, r4
 80005b2:	fa02 f201 	lsl.w	r2, r2, r1
 80005b6:	d90a      	bls.n	80005ce <__udivmoddi4+0x1a6>
 80005b8:	193c      	adds	r4, r7, r4
 80005ba:	f10e 3aff 	add.w	sl, lr, #4294967295
 80005be:	f080 8084 	bcs.w	80006ca <__udivmoddi4+0x2a2>
 80005c2:	45a1      	cmp	r9, r4
 80005c4:	f240 8081 	bls.w	80006ca <__udivmoddi4+0x2a2>
 80005c8:	f1ae 0e02 	sub.w	lr, lr, #2
 80005cc:	443c      	add	r4, r7
 80005ce:	eba4 0409 	sub.w	r4, r4, r9
 80005d2:	fa1f f983 	uxth.w	r9, r3
 80005d6:	fbb4 f3f0 	udiv	r3, r4, r0
 80005da:	fb00 4413 	mls	r4, r0, r3, r4
 80005de:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005e2:	fb03 fc0c 	mul.w	ip, r3, ip
 80005e6:	45a4      	cmp	ip, r4
 80005e8:	d907      	bls.n	80005fa <__udivmoddi4+0x1d2>
 80005ea:	193c      	adds	r4, r7, r4
 80005ec:	f103 30ff 	add.w	r0, r3, #4294967295
 80005f0:	d267      	bcs.n	80006c2 <__udivmoddi4+0x29a>
 80005f2:	45a4      	cmp	ip, r4
 80005f4:	d965      	bls.n	80006c2 <__udivmoddi4+0x29a>
 80005f6:	3b02      	subs	r3, #2
 80005f8:	443c      	add	r4, r7
 80005fa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005fe:	fba0 9302 	umull	r9, r3, r0, r2
 8000602:	eba4 040c 	sub.w	r4, r4, ip
 8000606:	429c      	cmp	r4, r3
 8000608:	46ce      	mov	lr, r9
 800060a:	469c      	mov	ip, r3
 800060c:	d351      	bcc.n	80006b2 <__udivmoddi4+0x28a>
 800060e:	d04e      	beq.n	80006ae <__udivmoddi4+0x286>
 8000610:	b155      	cbz	r5, 8000628 <__udivmoddi4+0x200>
 8000612:	ebb8 030e 	subs.w	r3, r8, lr
 8000616:	eb64 040c 	sbc.w	r4, r4, ip
 800061a:	fa04 f606 	lsl.w	r6, r4, r6
 800061e:	40cb      	lsrs	r3, r1
 8000620:	431e      	orrs	r6, r3
 8000622:	40cc      	lsrs	r4, r1
 8000624:	e9c5 6400 	strd	r6, r4, [r5]
 8000628:	2100      	movs	r1, #0
 800062a:	e750      	b.n	80004ce <__udivmoddi4+0xa6>
 800062c:	f1c2 0320 	rsb	r3, r2, #32
 8000630:	fa20 f103 	lsr.w	r1, r0, r3
 8000634:	fa0c fc02 	lsl.w	ip, ip, r2
 8000638:	fa24 f303 	lsr.w	r3, r4, r3
 800063c:	4094      	lsls	r4, r2
 800063e:	430c      	orrs	r4, r1
 8000640:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000644:	fa00 fe02 	lsl.w	lr, r0, r2
 8000648:	fa1f f78c 	uxth.w	r7, ip
 800064c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000650:	fb08 3110 	mls	r1, r8, r0, r3
 8000654:	0c23      	lsrs	r3, r4, #16
 8000656:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800065a:	fb00 f107 	mul.w	r1, r0, r7
 800065e:	4299      	cmp	r1, r3
 8000660:	d908      	bls.n	8000674 <__udivmoddi4+0x24c>
 8000662:	eb1c 0303 	adds.w	r3, ip, r3
 8000666:	f100 36ff 	add.w	r6, r0, #4294967295
 800066a:	d22c      	bcs.n	80006c6 <__udivmoddi4+0x29e>
 800066c:	4299      	cmp	r1, r3
 800066e:	d92a      	bls.n	80006c6 <__udivmoddi4+0x29e>
 8000670:	3802      	subs	r0, #2
 8000672:	4463      	add	r3, ip
 8000674:	1a5b      	subs	r3, r3, r1
 8000676:	b2a4      	uxth	r4, r4
 8000678:	fbb3 f1f8 	udiv	r1, r3, r8
 800067c:	fb08 3311 	mls	r3, r8, r1, r3
 8000680:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000684:	fb01 f307 	mul.w	r3, r1, r7
 8000688:	42a3      	cmp	r3, r4
 800068a:	d908      	bls.n	800069e <__udivmoddi4+0x276>
 800068c:	eb1c 0404 	adds.w	r4, ip, r4
 8000690:	f101 36ff 	add.w	r6, r1, #4294967295
 8000694:	d213      	bcs.n	80006be <__udivmoddi4+0x296>
 8000696:	42a3      	cmp	r3, r4
 8000698:	d911      	bls.n	80006be <__udivmoddi4+0x296>
 800069a:	3902      	subs	r1, #2
 800069c:	4464      	add	r4, ip
 800069e:	1ae4      	subs	r4, r4, r3
 80006a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80006a4:	e739      	b.n	800051a <__udivmoddi4+0xf2>
 80006a6:	4604      	mov	r4, r0
 80006a8:	e6f0      	b.n	800048c <__udivmoddi4+0x64>
 80006aa:	4608      	mov	r0, r1
 80006ac:	e706      	b.n	80004bc <__udivmoddi4+0x94>
 80006ae:	45c8      	cmp	r8, r9
 80006b0:	d2ae      	bcs.n	8000610 <__udivmoddi4+0x1e8>
 80006b2:	ebb9 0e02 	subs.w	lr, r9, r2
 80006b6:	eb63 0c07 	sbc.w	ip, r3, r7
 80006ba:	3801      	subs	r0, #1
 80006bc:	e7a8      	b.n	8000610 <__udivmoddi4+0x1e8>
 80006be:	4631      	mov	r1, r6
 80006c0:	e7ed      	b.n	800069e <__udivmoddi4+0x276>
 80006c2:	4603      	mov	r3, r0
 80006c4:	e799      	b.n	80005fa <__udivmoddi4+0x1d2>
 80006c6:	4630      	mov	r0, r6
 80006c8:	e7d4      	b.n	8000674 <__udivmoddi4+0x24c>
 80006ca:	46d6      	mov	lr, sl
 80006cc:	e77f      	b.n	80005ce <__udivmoddi4+0x1a6>
 80006ce:	4463      	add	r3, ip
 80006d0:	3802      	subs	r0, #2
 80006d2:	e74d      	b.n	8000570 <__udivmoddi4+0x148>
 80006d4:	4606      	mov	r6, r0
 80006d6:	4623      	mov	r3, r4
 80006d8:	4608      	mov	r0, r1
 80006da:	e70f      	b.n	80004fc <__udivmoddi4+0xd4>
 80006dc:	3e02      	subs	r6, #2
 80006de:	4463      	add	r3, ip
 80006e0:	e730      	b.n	8000544 <__udivmoddi4+0x11c>
 80006e2:	bf00      	nop

080006e4 <__aeabi_idiv0>:
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop

080006e8 <ov7670_write>:
//DCMI_HandleTypeDef *sp_hdcmi;
//DMA_HandleTypeDef  *sp_hdma_dcmi;
I2C_HandleTypeDef  *sp_hi2c;
uint32_t    s_destAddressForContiuousMode;
uint32_t ov7670_write(uint8_t regAddr, uint8_t data)
{
 80006e8:	b530      	push	{r4, r5, lr}
 80006ea:	b09d      	sub	sp, #116	@ 0x74
  uint16_t SLAVE_ADDR = 0x42;
  HAL_StatusTypeDef ret;
  uint8_t buffer[2] = {regAddr, data};
  ret = HAL_I2C_Master_Transmit(sp_hi2c, 0x42, &buffer, 2, HAL_MAX_DELAY);
 80006ec:	f04f 33ff 	mov.w	r3, #4294967295
  char temp[100];
  sprintf(temp, "Write Status: %d\r\n", ret);
  HAL_UART_Transmit(&huart4,temp,strlen(temp),10);
 80006f0:	4d13      	ldr	r5, [pc, #76]	@ (8000740 <ov7670_write+0x58>)
  uint8_t buffer[2] = {regAddr, data};
 80006f2:	f88d 0008 	strb.w	r0, [sp, #8]
  ret = HAL_I2C_Master_Transmit(sp_hi2c, 0x42, &buffer, 2, HAL_MAX_DELAY);
 80006f6:	aa02      	add	r2, sp, #8
 80006f8:	4812      	ldr	r0, [pc, #72]	@ (8000744 <ov7670_write+0x5c>)
 80006fa:	9300      	str	r3, [sp, #0]
 80006fc:	2302      	movs	r3, #2
  uint8_t buffer[2] = {regAddr, data};
 80006fe:	f88d 1009 	strb.w	r1, [sp, #9]
  ret = HAL_I2C_Master_Transmit(sp_hi2c, 0x42, &buffer, 2, HAL_MAX_DELAY);
 8000702:	2142      	movs	r1, #66	@ 0x42
 8000704:	6800      	ldr	r0, [r0, #0]
 8000706:	f002 ffb9 	bl	800367c <HAL_I2C_Master_Transmit>
  sprintf(temp, "Write Status: %d\r\n", ret);
 800070a:	490f      	ldr	r1, [pc, #60]	@ (8000748 <ov7670_write+0x60>)
 800070c:	4602      	mov	r2, r0
  ret = HAL_I2C_Master_Transmit(sp_hi2c, 0x42, &buffer, 2, HAL_MAX_DELAY);
 800070e:	4604      	mov	r4, r0
  sprintf(temp, "Write Status: %d\r\n", ret);
 8000710:	a803      	add	r0, sp, #12
 8000712:	f00c f813 	bl	800c73c <siprintf>
  HAL_UART_Transmit(&huart4,temp,strlen(temp),10);
 8000716:	a803      	add	r0, sp, #12
 8000718:	f7ff fe32 	bl	8000380 <strlen>
 800071c:	a903      	add	r1, sp, #12
 800071e:	b282      	uxth	r2, r0
 8000720:	230a      	movs	r3, #10
 8000722:	4628      	mov	r0, r5
 8000724:	f005 f803 	bl	800572e <HAL_UART_Transmit>
//  sprintf(temp, "Data: %x is now written into address: %x\r\n",data, regAddr);
  HAL_UART_Transmit(&huart4,temp,strlen(temp),10);
 8000728:	a803      	add	r0, sp, #12
 800072a:	f7ff fe29 	bl	8000380 <strlen>
 800072e:	230a      	movs	r3, #10
 8000730:	b282      	uxth	r2, r0
 8000732:	a903      	add	r1, sp, #12
 8000734:	4628      	mov	r0, r5
 8000736:	f004 fffa 	bl	800572e <HAL_UART_Transmit>
  return ret;
}
 800073a:	4620      	mov	r0, r4
 800073c:	b01d      	add	sp, #116	@ 0x74
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	24008d48 	.word	0x24008d48
 8000744:	24000d40 	.word	0x24000d40
 8000748:	0800eb70 	.word	0x0800eb70

0800074c <ov7670_read>:

uint32_t ov7670_read(uint8_t regAddr, uint8_t *data)
{
 800074c:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret;
  uint16_t SLAVE_ADDR = 0x42;
  ret = HAL_I2C_Master_Transmit(sp_hi2c, 0x43, &regAddr, 1, HAL_MAX_DELAY);
 800074e:	4c23      	ldr	r4, [pc, #140]	@ (80007dc <ov7670_read+0x90>)
{
 8000750:	b09f      	sub	sp, #124	@ 0x7c
  ret = HAL_I2C_Master_Transmit(sp_hi2c, 0x43, &regAddr, 1, HAL_MAX_DELAY);
 8000752:	f04f 37ff 	mov.w	r7, #4294967295
{
 8000756:	460d      	mov	r5, r1
  ret = HAL_I2C_Master_Transmit(sp_hi2c, 0x43, &regAddr, 1, HAL_MAX_DELAY);
 8000758:	2301      	movs	r3, #1
 800075a:	f10d 020f 	add.w	r2, sp, #15
{
 800075e:	f88d 000f 	strb.w	r0, [sp, #15]
  ret = HAL_I2C_Master_Transmit(sp_hi2c, 0x43, &regAddr, 1, HAL_MAX_DELAY);
 8000762:	2143      	movs	r1, #67	@ 0x43
 8000764:	9700      	str	r7, [sp, #0]
 8000766:	6820      	ldr	r0, [r4, #0]
 8000768:	f002 ff88 	bl	800367c <HAL_I2C_Master_Transmit>
  char buffer [100];
  sprintf(buffer, "Read_Transmit Status: %d\r\n", ret);
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 800076c:	4e1c      	ldr	r6, [pc, #112]	@ (80007e0 <ov7670_read+0x94>)
  ret = HAL_I2C_Master_Transmit(sp_hi2c, 0x43, &regAddr, 1, HAL_MAX_DELAY);
 800076e:	4602      	mov	r2, r0
  sprintf(buffer, "Read_Transmit Status: %d\r\n", ret);
 8000770:	491c      	ldr	r1, [pc, #112]	@ (80007e4 <ov7670_read+0x98>)
 8000772:	a805      	add	r0, sp, #20
 8000774:	f00b ffe2 	bl	800c73c <siprintf>
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8000778:	a805      	add	r0, sp, #20
 800077a:	f7ff fe01 	bl	8000380 <strlen>
 800077e:	a905      	add	r1, sp, #20
 8000780:	b282      	uxth	r2, r0
 8000782:	230a      	movs	r3, #10
 8000784:	4630      	mov	r0, r6
 8000786:	f004 ffd2 	bl	800572e <HAL_UART_Transmit>
  ret = HAL_I2C_Master_Receive(sp_hi2c, 0x43, data, 1, HAL_MAX_DELAY);
 800078a:	2301      	movs	r3, #1
 800078c:	462a      	mov	r2, r5
 800078e:	9700      	str	r7, [sp, #0]
 8000790:	2143      	movs	r1, #67	@ 0x43
 8000792:	6820      	ldr	r0, [r4, #0]
 8000794:	f003 f81e 	bl	80037d4 <HAL_I2C_Master_Receive>
  sprintf(buffer, "Read_Receive Status: %d\r\n", ret);
 8000798:	4913      	ldr	r1, [pc, #76]	@ (80007e8 <ov7670_read+0x9c>)
 800079a:	4602      	mov	r2, r0
  ret = HAL_I2C_Master_Receive(sp_hi2c, 0x43, data, 1, HAL_MAX_DELAY);
 800079c:	4604      	mov	r4, r0
  sprintf(buffer, "Read_Receive Status: %d\r\n", ret);
 800079e:	a805      	add	r0, sp, #20
 80007a0:	f00b ffcc 	bl	800c73c <siprintf>
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 80007a4:	a805      	add	r0, sp, #20
 80007a6:	f7ff fdeb 	bl	8000380 <strlen>
 80007aa:	a905      	add	r1, sp, #20
 80007ac:	b282      	uxth	r2, r0
 80007ae:	230a      	movs	r3, #10
 80007b0:	4630      	mov	r0, r6
 80007b2:	f004 ffbc 	bl	800572e <HAL_UART_Transmit>
  sprintf(buffer, "Address: %x; Data: %x\r\n", regAddr, *data);
 80007b6:	782b      	ldrb	r3, [r5, #0]
 80007b8:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80007bc:	a805      	add	r0, sp, #20
 80007be:	490b      	ldr	r1, [pc, #44]	@ (80007ec <ov7670_read+0xa0>)
 80007c0:	f00b ffbc 	bl	800c73c <siprintf>
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 80007c4:	a805      	add	r0, sp, #20
 80007c6:	f7ff fddb 	bl	8000380 <strlen>
 80007ca:	230a      	movs	r3, #10
 80007cc:	b282      	uxth	r2, r0
 80007ce:	a905      	add	r1, sp, #20
 80007d0:	4630      	mov	r0, r6
 80007d2:	f004 ffac 	bl	800572e <HAL_UART_Transmit>
  return ret;
}
 80007d6:	4620      	mov	r0, r4
 80007d8:	b01f      	add	sp, #124	@ 0x7c
 80007da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007dc:	24000d40 	.word	0x24000d40
 80007e0:	24008d48 	.word	0x24008d48
 80007e4:	0800eb83 	.word	0x0800eb83
 80007e8:	0800eb9e 	.word	0x0800eb9e
 80007ec:	0800ebb8 	.word	0x0800ebb8

080007f0 <ov7670_init>:

uint32_t ov7670_init(I2C_HandleTypeDef *p_hi2c)
{
 80007f0:	b510      	push	{r4, lr}
//  sp_hdcmi     = p_hdcmi;
//  sp_hdma_dcmi = p_hdma_dcmi;
  sp_hi2c      = p_hi2c;
 80007f2:	4b1a      	ldr	r3, [pc, #104]	@ (800085c <ov7670_init+0x6c>)
{
 80007f4:	b09a      	sub	sp, #104	@ 0x68
 // s_destAddressForContiuousMode = 0;

  HAL_GPIO_WritePin(CAM_RST_GPIO_Port, CAM_RST_Pin, GPIO_PIN_RESET);
 80007f6:	4c1a      	ldr	r4, [pc, #104]	@ (8000860 <ov7670_init+0x70>)
 80007f8:	2200      	movs	r2, #0
  sp_hi2c      = p_hi2c;
 80007fa:	6018      	str	r0, [r3, #0]
  HAL_GPIO_WritePin(CAM_RST_GPIO_Port, CAM_RST_Pin, GPIO_PIN_RESET);
 80007fc:	2120      	movs	r1, #32
 80007fe:	4620      	mov	r0, r4
 8000800:	f002 fd52 	bl	80032a8 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000804:	2064      	movs	r0, #100	@ 0x64
 8000806:	f000 fe79 	bl	80014fc <HAL_Delay>
  HAL_GPIO_WritePin(CAM_RST_GPIO_Port, CAM_RST_Pin, GPIO_PIN_SET);
 800080a:	2201      	movs	r2, #1
 800080c:	2120      	movs	r1, #32
 800080e:	4620      	mov	r0, r4
 8000810:	f002 fd4a 	bl	80032a8 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000814:	2064      	movs	r0, #100	@ 0x64
 8000816:	f000 fe71 	bl	80014fc <HAL_Delay>
  char temp[100];
  sprintf(temp, "Initializing OV7670...\r\n");
 800081a:	4912      	ldr	r1, [pc, #72]	@ (8000864 <ov7670_init+0x74>)
 800081c:	a801      	add	r0, sp, #4
 800081e:	f00c f8a8 	bl	800c972 <strcpy>
  ov7670_write(0x12, 0x80);  // RESET
 8000822:	2180      	movs	r1, #128	@ 0x80
 8000824:	2012      	movs	r0, #18
 8000826:	f7ff ff5f 	bl	80006e8 <ov7670_write>
  HAL_Delay(100);
 800082a:	2064      	movs	r0, #100	@ 0x64
 800082c:	f000 fe66 	bl	80014fc <HAL_Delay>
  HAL_UART_Transmit(&huart4,temp,strlen(temp),10);
 8000830:	a801      	add	r0, sp, #4
 8000832:	f7ff fda5 	bl	8000380 <strlen>
 8000836:	230a      	movs	r3, #10
 8000838:	b282      	uxth	r2, r0
 800083a:	a901      	add	r1, sp, #4
 800083c:	480a      	ldr	r0, [pc, #40]	@ (8000868 <ov7670_init+0x78>)
 800083e:	f004 ff76 	bl	800572e <HAL_UART_Transmit>
  HAL_Delay(100);
 8000842:	2064      	movs	r0, #100	@ 0x64
 8000844:	f000 fe5a 	bl	80014fc <HAL_Delay>
  uint8_t buffer[4];
  ov7670_read(0x0F, buffer);
 8000848:	4669      	mov	r1, sp
 800084a:	200f      	movs	r0, #15
 800084c:	f7ff ff7e 	bl	800074c <ov7670_read>
  HAL_Delay(100);
 8000850:	2064      	movs	r0, #100	@ 0x64
 8000852:	f000 fe53 	bl	80014fc <HAL_Delay>


  return 1;
}
 8000856:	2001      	movs	r0, #1
 8000858:	b01a      	add	sp, #104	@ 0x68
 800085a:	bd10      	pop	{r4, pc}
 800085c:	24000d40 	.word	0x24000d40
 8000860:	58020800 	.word	0x58020800
 8000864:	0800ebd0 	.word	0x0800ebd0
 8000868:	24008d48 	.word	0x24008d48

0800086c <ov7670_stopCap>:

//DCMI Data Transfer
static uint32_t s_dstAddress;

uint32_t ov7670_stopCap()
{
 800086c:	b508      	push	{r3, lr}
  char buffer [100];
  HAL_StatusTypeDef ret;
  ret = HAL_DCMI_Stop(sp_hdcmi);
 800086e:	4b04      	ldr	r3, [pc, #16]	@ (8000880 <ov7670_stopCap+0x14>)
 8000870:	6818      	ldr	r0, [r3, #0]
 8000872:	f001 f815 	bl	80018a0 <HAL_DCMI_Stop>
  s_dstAddress = 0;
 8000876:	2000      	movs	r0, #0
 8000878:	4b02      	ldr	r3, [pc, #8]	@ (8000884 <ov7670_stopCap+0x18>)
 800087a:	6018      	str	r0, [r3, #0]
  return 0;
}
 800087c:	bd08      	pop	{r3, pc}
 800087e:	bf00      	nop
 8000880:	24000000 	.word	0x24000000
 8000884:	24000d3c 	.word	0x24000d3c

08000888 <ov7670_startCap>:

uint32_t ov7670_startCap(uint32_t destAddress)
{
 8000888:	b510      	push	{r4, lr}
 800088a:	b09a      	sub	sp, #104	@ 0x68
 800088c:	4604      	mov	r4, r0
  HAL_StatusTypeDef ret;
  ov7670_stopCap();
 800088e:	f7ff ffed 	bl	800086c <ov7670_stopCap>
  /* note: continuous mode automatically invokes DCMI, but DMA needs to be invoked manually */
  s_dstAddress = destAddress;
 8000892:	4b0f      	ldr	r3, [pc, #60]	@ (80008d0 <ov7670_startCap+0x48>)
  ret = HAL_DCMI_Start_DMA(sp_hdcmi,1, destAddress, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT / 2); //mode 1 for single frame
 8000894:	480f      	ldr	r0, [pc, #60]	@ (80008d4 <ov7670_startCap+0x4c>)
 8000896:	4622      	mov	r2, r4
 8000898:	2101      	movs	r1, #1
  s_dstAddress = destAddress;
 800089a:	601c      	str	r4, [r3, #0]
  ret = HAL_DCMI_Start_DMA(sp_hdcmi,1, destAddress, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT / 2); //mode 1 for single frame
 800089c:	6800      	ldr	r0, [r0, #0]
 800089e:	f44f 5346 	mov.w	r3, #12672	@ 0x3180
 80008a2:	f000 ff91 	bl	80017c8 <HAL_DCMI_Start_DMA>
 80008a6:	4604      	mov	r4, r0
  ov7670_stopCap();
 80008a8:	f7ff ffe0 	bl	800086c <ov7670_stopCap>
  char buffer [100];
  sprintf(buffer, "Return code: %d\r\n", ret);
 80008ac:	490a      	ldr	r1, [pc, #40]	@ (80008d8 <ov7670_startCap+0x50>)
 80008ae:	4622      	mov	r2, r4
 80008b0:	a801      	add	r0, sp, #4
 80008b2:	f00b ff43 	bl	800c73c <siprintf>
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 80008b6:	a801      	add	r0, sp, #4
 80008b8:	f7ff fd62 	bl	8000380 <strlen>
 80008bc:	230a      	movs	r3, #10
 80008be:	b282      	uxth	r2, r0
 80008c0:	a901      	add	r1, sp, #4
 80008c2:	4806      	ldr	r0, [pc, #24]	@ (80008dc <ov7670_startCap+0x54>)
 80008c4:	f004 ff33 	bl	800572e <HAL_UART_Transmit>
  return 0;
}
 80008c8:	2000      	movs	r0, #0
 80008ca:	b01a      	add	sp, #104	@ 0x68
 80008cc:	bd10      	pop	{r4, pc}
 80008ce:	bf00      	nop
 80008d0:	24000d3c 	.word	0x24000d3c
 80008d4:	24000000 	.word	0x24000000
 80008d8:	0800ebe9 	.word	0x0800ebe9
 80008dc:	24008d48 	.word	0x24008d48

080008e0 <Resize_to_128>:

void Resize_to_128(uint32_t* inputImg, uint32_t* outputImg) {
 80008e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    float factor_y = 148.0 / 128.0;

    for (int i = 0; i < 128; i++) {
        for (int j = 0; j < 128; j+=2) { // Increment by 2 since each inputImg element handles 2 pixels
            int col = (int)(j * factor_x); // Calculate the column in the input image
            int row = (int)(i * factor_y); // Calculate the row in the input image
 80008e2:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000940 <Resize_to_128+0x60>
    for (int i = 0; i < 128; i++) {
 80008e6:	2500      	movs	r5, #0

            // Calculate the position in the input image
            // Considering that each uint32_t has two RGB565 pixels packed
            int inputIndex = (row * 172 + col) / 2;
 80008e8:	27ac      	movs	r7, #172	@ 0xac
            int col = (int)(j * factor_x); // Calculate the column in the input image
 80008ea:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8000944 <Resize_to_128+0x64>
            int row = (int)(i * factor_y); // Calculate the row in the input image
 80008ee:	ee07 5a90 	vmov	s15, r5
 80008f2:	01ee      	lsls	r6, r5, #7
        for (int j = 0; j < 128; j+=2) { // Increment by 2 since each inputImg element handles 2 pixels
 80008f4:	2400      	movs	r4, #0
            int row = (int)(i * factor_y); // Calculate the row in the input image
 80008f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000902:	ee17 2a90 	vmov	r2, s15
            int inputIndex = (row * 172 + col) / 2;
 8000906:	437a      	muls	r2, r7
            int col = (int)(j * factor_x); // Calculate the column in the input image
 8000908:	ee07 4a90 	vmov	s15, r4
 800090c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000910:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000914:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000918:	ee17 3a90 	vmov	r3, s15
            int inputIndex = (row * 172 + col) / 2;
 800091c:	4413      	add	r3, r2
 800091e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8000922:	105b      	asrs	r3, r3, #1

            uint32_t Pixel = inputImg[inputIndex];
 8000924:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
            // Place the processed pixels in the output image
            outputImg[(i * 128 + j) / 2] = Pixel;
 8000928:	19a3      	adds	r3, r4, r6
        for (int j = 0; j < 128; j+=2) { // Increment by 2 since each inputImg element handles 2 pixels
 800092a:	3402      	adds	r4, #2
            outputImg[(i * 128 + j) / 2] = Pixel;
 800092c:	105b      	asrs	r3, r3, #1
        for (int j = 0; j < 128; j+=2) { // Increment by 2 since each inputImg element handles 2 pixels
 800092e:	2c80      	cmp	r4, #128	@ 0x80
            outputImg[(i * 128 + j) / 2] = Pixel;
 8000930:	f841 c023 	str.w	ip, [r1, r3, lsl #2]
        for (int j = 0; j < 128; j+=2) { // Increment by 2 since each inputImg element handles 2 pixels
 8000934:	d1e8      	bne.n	8000908 <Resize_to_128+0x28>
    for (int i = 0; i < 128; i++) {
 8000936:	3501      	adds	r5, #1
 8000938:	2d80      	cmp	r5, #128	@ 0x80
 800093a:	d1d8      	bne.n	80008ee <Resize_to_128+0xe>
        }
    }
}
 800093c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800093e:	bf00      	nop
 8000940:	3f940000 	.word	0x3f940000
 8000944:	3fac0000 	.word	0x3fac0000

08000948 <HAL_DCMI_FrameEventCallback>:


void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
  if(s_dstAddress != 0) {
 8000948:	4b05      	ldr	r3, [pc, #20]	@ (8000960 <HAL_DCMI_FrameEventCallback+0x18>)
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	b132      	cbz	r2, 800095c <HAL_DCMI_FrameEventCallback+0x14>
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, s_dstAddress, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT / 2);
 800094e:	6801      	ldr	r1, [r0, #0]
 8000950:	f44f 5346 	mov.w	r3, #12672	@ 0x3180
 8000954:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8000956:	3128      	adds	r1, #40	@ 0x28
 8000958:	f001 bb8e 	b.w	8002078 <HAL_DMA_Start_IT>
  }
}
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	24000d3c 	.word	0x24000d3c

08000964 <lcd_send_cmd>:
#include "lcd.h"
#include "main.h"
I2C_HandleTypeDef  *lcd_sp_hi2c;
uint16_t SLAVE_ADDRESS_LCD = 0x4E;
void lcd_send_cmd (char cmd)
{
 8000964:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000966:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
	data_l = ((cmd<<4)&0xf0);
 800096a:	0100      	lsls	r0, r0, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
	data_t[1] = data_u|0x08;  //en=0, rs=0
	data_t[2] = data_l|0x0C;  //en=1, rs=0
	data_t[3] = data_l|0x08;  //en=0, rs=0
	uint16_t ret = HAL_I2C_Master_Transmit (lcd_sp_hi2c, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800096c:	490e      	ldr	r1, [pc, #56]	@ (80009a8 <lcd_send_cmd+0x44>)
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800096e:	f043 020c 	orr.w	r2, r3, #12
	data_l = ((cmd<<4)&0xf0);
 8000972:	b2c0      	uxtb	r0, r0
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000974:	f043 0308 	orr.w	r3, r3, #8
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000978:	f88d 200c 	strb.w	r2, [sp, #12]
	uint16_t ret = HAL_I2C_Master_Transmit (lcd_sp_hi2c, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800097c:	aa03      	add	r2, sp, #12
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800097e:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000982:	f040 030c 	orr.w	r3, r0, #12
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000986:	f040 0008 	orr.w	r0, r0, #8
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800098a:	f88d 300e 	strb.w	r3, [sp, #14]
	uint16_t ret = HAL_I2C_Master_Transmit (lcd_sp_hi2c, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800098e:	2364      	movs	r3, #100	@ 0x64
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000990:	f88d 000f 	strb.w	r0, [sp, #15]
	uint16_t ret = HAL_I2C_Master_Transmit (lcd_sp_hi2c, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000994:	4805      	ldr	r0, [pc, #20]	@ (80009ac <lcd_send_cmd+0x48>)
 8000996:	9300      	str	r3, [sp, #0]
 8000998:	2304      	movs	r3, #4
 800099a:	8809      	ldrh	r1, [r1, #0]
 800099c:	6800      	ldr	r0, [r0, #0]
 800099e:	f002 fe6d 	bl	800367c <HAL_I2C_Master_Transmit>
}
 80009a2:	b005      	add	sp, #20
 80009a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80009a8:	24000004 	.word	0x24000004
 80009ac:	24000d44 	.word	0x24000d44

080009b0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80009b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80009b2:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
	data_l = ((data<<4)&0xf0);
 80009b6:	0100      	lsls	r0, r0, #4
	data_t[0] = data_u|0x0D;  //en=1, rs=1
	data_t[1] = data_u|0x09;  //en=0, rs=1
	data_t[2] = data_l|0x0D;  //en=1, rs=1
	data_t[3] = data_l|0x09;  //en=0, rs=1
	HAL_I2C_Master_Transmit (lcd_sp_hi2c, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80009b8:	490e      	ldr	r1, [pc, #56]	@ (80009f4 <lcd_send_data+0x44>)
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 80009ba:	f043 020d 	orr.w	r2, r3, #13
	data_l = ((data<<4)&0xf0);
 80009be:	b2c0      	uxtb	r0, r0
	data_t[1] = data_u|0x09;  //en=0, rs=1
 80009c0:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 80009c4:	f88d 200c 	strb.w	r2, [sp, #12]
	HAL_I2C_Master_Transmit (lcd_sp_hi2c, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80009c8:	aa03      	add	r2, sp, #12
	data_t[1] = data_u|0x09;  //en=0, rs=1
 80009ca:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 80009ce:	f040 030d 	orr.w	r3, r0, #13
	data_t[3] = data_l|0x09;  //en=0, rs=1
 80009d2:	f040 0009 	orr.w	r0, r0, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 80009d6:	f88d 300e 	strb.w	r3, [sp, #14]
	HAL_I2C_Master_Transmit (lcd_sp_hi2c, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80009da:	2364      	movs	r3, #100	@ 0x64
	data_t[3] = data_l|0x09;  //en=0, rs=1
 80009dc:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (lcd_sp_hi2c, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80009e0:	4805      	ldr	r0, [pc, #20]	@ (80009f8 <lcd_send_data+0x48>)
 80009e2:	9300      	str	r3, [sp, #0]
 80009e4:	2304      	movs	r3, #4
 80009e6:	8809      	ldrh	r1, [r1, #0]
 80009e8:	6800      	ldr	r0, [r0, #0]
 80009ea:	f002 fe47 	bl	800367c <HAL_I2C_Master_Transmit>
}
 80009ee:	b005      	add	sp, #20
 80009f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80009f4:	24000004 	.word	0x24000004
 80009f8:	24000d44 	.word	0x24000d44

080009fc <lcd_send_string>:
void lcd_send_string (char *str)
{
 80009fc:	b510      	push	{r4, lr}
 80009fe:	1e44      	subs	r4, r0, #1
	while (*str) {
 8000a00:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8000a04:	b903      	cbnz	r3, 8000a08 <lcd_send_string+0xc>
		HAL_Delay(10);
		lcd_send_data (*str++);
	}
}
 8000a06:	bd10      	pop	{r4, pc}
		HAL_Delay(10);
 8000a08:	200a      	movs	r0, #10
 8000a0a:	f000 fd77 	bl	80014fc <HAL_Delay>
		lcd_send_data (*str++);
 8000a0e:	7820      	ldrb	r0, [r4, #0]
 8000a10:	f7ff ffce 	bl	80009b0 <lcd_send_data>
 8000a14:	e7f4      	b.n	8000a00 <lcd_send_string+0x4>
	...

08000a18 <lcd_init>:

void lcd_init (I2C_HandleTypeDef* p_hi2c)
{
 8000a18:	b508      	push	{r3, lr}
	lcd_sp_hi2c = p_hi2c;
 8000a1a:	4b20      	ldr	r3, [pc, #128]	@ (8000a9c <lcd_init+0x84>)
 8000a1c:	6018      	str	r0, [r3, #0]
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000a1e:	2032      	movs	r0, #50	@ 0x32
 8000a20:	f000 fd6c 	bl	80014fc <HAL_Delay>
	lcd_send_cmd (0x30);
 8000a24:	2030      	movs	r0, #48	@ 0x30
 8000a26:	f7ff ff9d 	bl	8000964 <lcd_send_cmd>
	HAL_Delay(50);  // wait for >4.1ms
 8000a2a:	2032      	movs	r0, #50	@ 0x32
 8000a2c:	f000 fd66 	bl	80014fc <HAL_Delay>
	lcd_send_cmd (0x30);
 8000a30:	2030      	movs	r0, #48	@ 0x30
 8000a32:	f7ff ff97 	bl	8000964 <lcd_send_cmd>
	HAL_Delay(50);  // wait for >100us
 8000a36:	2032      	movs	r0, #50	@ 0x32
 8000a38:	f000 fd60 	bl	80014fc <HAL_Delay>
	lcd_send_cmd (0x30);
 8000a3c:	2030      	movs	r0, #48	@ 0x30
 8000a3e:	f7ff ff91 	bl	8000964 <lcd_send_cmd>
	HAL_Delay(50);
 8000a42:	2032      	movs	r0, #50	@ 0x32
 8000a44:	f000 fd5a 	bl	80014fc <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000a48:	2020      	movs	r0, #32
 8000a4a:	f7ff ff8b 	bl	8000964 <lcd_send_cmd>
	HAL_Delay(50);
 8000a4e:	2032      	movs	r0, #50	@ 0x32
 8000a50:	f000 fd54 	bl	80014fc <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000a54:	2028      	movs	r0, #40	@ 0x28
 8000a56:	f7ff ff85 	bl	8000964 <lcd_send_cmd>
	HAL_Delay(50);
 8000a5a:	2032      	movs	r0, #50	@ 0x32
 8000a5c:	f000 fd4e 	bl	80014fc <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000a60:	2008      	movs	r0, #8
 8000a62:	f7ff ff7f 	bl	8000964 <lcd_send_cmd>
	HAL_Delay(50);
 8000a66:	2032      	movs	r0, #50	@ 0x32
 8000a68:	f000 fd48 	bl	80014fc <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	f7ff ff79 	bl	8000964 <lcd_send_cmd>
	HAL_Delay(50);
 8000a72:	2032      	movs	r0, #50	@ 0x32
 8000a74:	f000 fd42 	bl	80014fc <HAL_Delay>
	HAL_Delay(50);
 8000a78:	2032      	movs	r0, #50	@ 0x32
 8000a7a:	f000 fd3f 	bl	80014fc <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000a7e:	2006      	movs	r0, #6
 8000a80:	f7ff ff70 	bl	8000964 <lcd_send_cmd>
	HAL_Delay(50);
 8000a84:	2032      	movs	r0, #50	@ 0x32
 8000a86:	f000 fd39 	bl	80014fc <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000a8a:	200c      	movs	r0, #12
 8000a8c:	f7ff ff6a 	bl	8000964 <lcd_send_cmd>
	lcd_send_string("");
 8000a90:	4803      	ldr	r0, [pc, #12]	@ (8000aa0 <lcd_init+0x88>)
}
 8000a92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lcd_send_string("");
 8000a96:	f7ff bfb1 	b.w	80009fc <lcd_send_string>
 8000a9a:	bf00      	nop
 8000a9c:	24000d44 	.word	0x24000d44
 8000aa0:	0800ec7e 	.word	0x0800ec7e

08000aa4 <lcd_clear>:

void lcd_clear() {
 8000aa4:	b508      	push	{r3, lr}
	HAL_Delay(500);
 8000aa6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000aaa:	f000 fd27 	bl	80014fc <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000aae:	2001      	movs	r0, #1
 8000ab0:	f7ff ff58 	bl	8000964 <lcd_send_cmd>
	HAL_Delay(1);
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	f000 fd21 	bl	80014fc <HAL_Delay>
	lcd_send_string("");
 8000aba:	4804      	ldr	r0, [pc, #16]	@ (8000acc <lcd_clear+0x28>)
 8000abc:	f7ff ff9e 	bl	80009fc <lcd_send_string>
	HAL_Delay(500);
 8000ac0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
}
 8000ac4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(500);
 8000ac8:	f000 bd18 	b.w	80014fc <HAL_Delay>
 8000acc:	0800ec7e 	.word	0x0800ec7e

08000ad0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad0:	b530      	push	{r4, r5, lr}
 8000ad2:	b09d      	sub	sp, #116	@ 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ad4:	224c      	movs	r2, #76	@ 0x4c
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	a809      	add	r0, sp, #36	@ 0x24
 8000ada:	f00b feac 	bl	800c836 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ade:	2220      	movs	r2, #32
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	a801      	add	r0, sp, #4
 8000ae4:	f00b fea7 	bl	800c836 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ae8:	2002      	movs	r0, #2
 8000aea:	f002 ff57 	bl	800399c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000aee:	2300      	movs	r3, #0
 8000af0:	9300      	str	r3, [sp, #0]
 8000af2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b6c <SystemClock_Config+0x9c>)
 8000af4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000af6:	f022 0201 	bic.w	r2, r2, #1
 8000afa:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000afe:	4a1c      	ldr	r2, [pc, #112]	@ (8000b70 <SystemClock_Config+0xa0>)
 8000b00:	f003 0301 	and.w	r3, r3, #1
 8000b04:	9300      	str	r3, [sp, #0]
 8000b06:	6993      	ldr	r3, [r2, #24]
 8000b08:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b10:	6193      	str	r3, [r2, #24]
 8000b12:	6993      	ldr	r3, [r2, #24]
 8000b14:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b18:	9300      	str	r3, [sp, #0]
 8000b1a:	9b00      	ldr	r3, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b1c:	6993      	ldr	r3, [r2, #24]
 8000b1e:	049b      	lsls	r3, r3, #18
 8000b20:	d5fc      	bpl.n	8000b1c <SystemClock_Config+0x4c>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b22:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b24:	2401      	movs	r4, #1
 8000b26:	2540      	movs	r5, #64	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b28:	a809      	add	r0, sp, #36	@ 0x24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b2a:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b2c:	2300      	movs	r3, #0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b2e:	e9cd 450c 	strd	r4, r5, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b32:	9312      	str	r3, [sp, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b34:	f002 ff56 	bl	80039e4 <HAL_RCC_OscConfig>
 8000b38:	b108      	cbz	r0, 8000b3e <SystemClock_Config+0x6e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b3a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <SystemClock_Config+0x6c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b3e:	233f      	movs	r3, #63	@ 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b40:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b42:	e9cd 3001 	strd	r3, r0, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b46:	e9cd 0003 	strd	r0, r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b4a:	e9cd 0505 	strd	r0, r5, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b4e:	e9cd 0007 	strd	r0, r0, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b52:	a801      	add	r0, sp, #4
 8000b54:	f003 fae2 	bl	800411c <HAL_RCC_ClockConfig>
 8000b58:	4601      	mov	r1, r0
 8000b5a:	b108      	cbz	r0, 8000b60 <SystemClock_Config+0x90>
 8000b5c:	b672      	cpsid	i
  while (1)
 8000b5e:	e7fe      	b.n	8000b5e <SystemClock_Config+0x8e>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_3);
 8000b60:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000b64:	f003 f9ea 	bl	8003f3c <HAL_RCC_MCOConfig>
}
 8000b68:	b01d      	add	sp, #116	@ 0x74
 8000b6a:	bd30      	pop	{r4, r5, pc}
 8000b6c:	58000400 	.word	0x58000400
 8000b70:	58024800 	.word	0x58024800

08000b74 <main>:
{
 8000b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b76:	f5ad 4d46 	sub.w	sp, sp, #50688	@ 0xc600
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b7a:	4d9f      	ldr	r5, [pc, #636]	@ (8000df8 <main+0x284>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7e:	2601      	movs	r6, #1
{
 8000b80:	b0bb      	sub	sp, #236	@ 0xec
  GPIO_InitStruct.Pin = CAM_RST_Pin;
 8000b82:	2720      	movs	r7, #32
  HAL_Init();
 8000b84:	f000 fc7a 	bl	800147c <HAL_Init>
  SystemClock_Config();
 8000b88:	f7ff ffa2 	bl	8000ad0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	2214      	movs	r2, #20
 8000b8e:	2100      	movs	r1, #0
 8000b90:	a83a      	add	r0, sp, #232	@ 0xe8
 8000b92:	f00b fe50 	bl	800c836 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b96:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000b9a:	aa02      	add	r2, sp, #8
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8000b9c:	2104      	movs	r1, #4
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b9e:	f043 0310 	orr.w	r3, r3, #16
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8000ba2:	4896      	ldr	r0, [pc, #600]	@ (8000dfc <main+0x288>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ba4:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000ba8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000bac:	f003 0310 	and.w	r3, r3, #16
 8000bb0:	6013      	str	r3, [r2, #0]
 8000bb2:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bb4:	aa03      	add	r2, sp, #12
 8000bb6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000bba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bbe:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000bc2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bca:	6013      	str	r3, [r2, #0]
 8000bcc:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	aa04      	add	r2, sp, #16
 8000bd0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000bdc:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000be0:	f003 0301 	and.w	r3, r3, #1
 8000be4:	6013      	str	r3, [r2, #0]
 8000be6:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be8:	aa05      	add	r2, sp, #20
 8000bea:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000bee:	f043 0304 	orr.w	r3, r3, #4
 8000bf2:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000bf6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000bfa:	f003 0304 	and.w	r3, r3, #4
 8000bfe:	6013      	str	r3, [r2, #0]
 8000c00:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	aa06      	add	r2, sp, #24
 8000c04:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000c08:	f043 0302 	orr.w	r3, r3, #2
 8000c0c:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000c10:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000c14:	f003 0302 	and.w	r3, r3, #2
 8000c18:	6013      	str	r3, [r2, #0]
 8000c1a:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c1c:	aa07      	add	r2, sp, #28
 8000c1e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000c22:	f043 0308 	orr.w	r3, r3, #8
 8000c26:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000c2a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000c2e:	f003 0308 	and.w	r3, r3, #8
 8000c32:	6013      	str	r3, [r2, #0]
 8000c34:	6813      	ldr	r3, [r2, #0]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	f002 fb36 	bl	80032a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CAM_RST_GPIO_Port, CAM_RST_Pin, GPIO_PIN_RESET);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2120      	movs	r1, #32
 8000c40:	486f      	ldr	r0, [pc, #444]	@ (8000e00 <main+0x28c>)
 8000c42:	f002 fb31 	bl	80032a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PWDN_GPIO_Port, PWDN_Pin, GPIO_PIN_SET);
 8000c46:	2201      	movs	r2, #1
 8000c48:	486e      	ldr	r0, [pc, #440]	@ (8000e04 <main+0x290>)
 8000c4a:	4611      	mov	r1, r2
 8000c4c:	f002 fb2c 	bl	80032a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, CAPTURE_Pin|LED_Pin, GPIO_PIN_RESET);
 8000c50:	2200      	movs	r2, #0
 8000c52:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8000c56:	486c      	ldr	r0, [pc, #432]	@ (8000e08 <main+0x294>)
 8000c58:	f002 fb26 	bl	80032a8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5c:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c5e:	a93a      	add	r1, sp, #232	@ 0xe8
 8000c60:	4866      	ldr	r0, [pc, #408]	@ (8000dfc <main+0x288>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c62:	e9cd 363a 	strd	r3, r6, [sp, #232]	@ 0xe8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c66:	e9cd 443c 	strd	r4, r4, [sp, #240]	@ 0xf0
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c6a:	f002 fa35 	bl	80030d8 <HAL_GPIO_Init>
  HAL_GPIO_Init(CAM_RST_GPIO_Port, &GPIO_InitStruct);
 8000c6e:	a93a      	add	r1, sp, #232	@ 0xe8
 8000c70:	4863      	ldr	r0, [pc, #396]	@ (8000e00 <main+0x28c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c72:	e9cd 763a 	strd	r7, r6, [sp, #232]	@ 0xe8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c76:	e9cd 443c 	strd	r4, r4, [sp, #240]	@ 0xf0
  HAL_GPIO_Init(CAM_RST_GPIO_Port, &GPIO_InitStruct);
 8000c7a:	f002 fa2d 	bl	80030d8 <HAL_GPIO_Init>
  HAL_GPIO_Init(PWDN_GPIO_Port, &GPIO_InitStruct);
 8000c7e:	a93a      	add	r1, sp, #232	@ 0xe8
 8000c80:	4860      	ldr	r0, [pc, #384]	@ (8000e04 <main+0x290>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c82:	e9cd 663a 	strd	r6, r6, [sp, #232]	@ 0xe8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	e9cd 443c 	strd	r4, r4, [sp, #240]	@ 0xf0
  HAL_GPIO_Init(PWDN_GPIO_Port, &GPIO_InitStruct);
 8000c8a:	f002 fa25 	bl	80030d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CAPTURE_Pin|LED_Pin;
 8000c8e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c92:	a93a      	add	r1, sp, #232	@ 0xe8
 8000c94:	485c      	ldr	r0, [pc, #368]	@ (8000e08 <main+0x294>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c96:	e9cd 363a 	strd	r3, r6, [sp, #232]	@ 0xe8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	e9cd 443c 	strd	r4, r4, [sp, #240]	@ 0xf0
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c9e:	f002 fa1b 	bl	80030d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	f44f 7180 	mov.w	r1, #256	@ 0x100
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca8:	4858      	ldr	r0, [pc, #352]	@ (8000e0c <main+0x298>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000caa:	943e      	str	r4, [sp, #248]	@ 0xf8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	e9cd 133a 	strd	r1, r3, [sp, #232]	@ 0xe8
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb0:	a93a      	add	r1, sp, #232	@ 0xe8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb2:	e9cd 443c 	strd	r4, r4, [sp, #240]	@ 0xf0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb6:	f002 fa0f 	bl	80030d8 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cba:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
 8000cbe:	aa01      	add	r2, sp, #4
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000cc0:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cc2:	4333      	orrs	r3, r6
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000cc4:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cc6:	f8c5 30d8 	str.w	r3, [r5, #216]	@ 0xd8
 8000cca:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
 8000cce:	4033      	ands	r3, r6
 8000cd0:	6013      	str	r3, [r2, #0]
 8000cd2:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000cd4:	4622      	mov	r2, r4
 8000cd6:	f000 fc3b 	bl	8001550 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000cda:	200b      	movs	r0, #11
 8000cdc:	f000 fc6a 	bl	80015b4 <HAL_NVIC_EnableIRQ>
  hdcmi.Instance = DCMI;
 8000ce0:	484b      	ldr	r0, [pc, #300]	@ (8000e10 <main+0x29c>)
 8000ce2:	4b4c      	ldr	r3, [pc, #304]	@ (8000e14 <main+0x2a0>)
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000ce4:	6087      	str	r7, [r0, #8]
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000ce6:	6304      	str	r4, [r0, #48]	@ 0x30
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000ce8:	e9c0 3400 	strd	r3, r4, [r0]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000cec:	2380      	movs	r3, #128	@ 0x80
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000cee:	e9c0 4405 	strd	r4, r4, [r0, #20]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000cf2:	e9c0 3403 	strd	r3, r4, [r0, #12]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000cf6:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000cfa:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000cfe:	f000 fd1b 	bl	8001738 <HAL_DCMI_Init>
 8000d02:	b108      	cbz	r0, 8000d08 <main+0x194>
 8000d04:	b672      	cpsid	i
  while (1)
 8000d06:	e7fe      	b.n	8000d06 <main+0x192>
  hi2c1.Instance = I2C1;
 8000d08:	4c43      	ldr	r4, [pc, #268]	@ (8000e18 <main+0x2a4>)
  hi2c1.Init.Timing = 0x00707CBB;
 8000d0a:	4b44      	ldr	r3, [pc, #272]	@ (8000e1c <main+0x2a8>)
 8000d0c:	4d44      	ldr	r5, [pc, #272]	@ (8000e20 <main+0x2ac>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d0e:	6220      	str	r0, [r4, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d10:	e9c4 0602 	strd	r0, r6, [r4, #8]
  hi2c1.Init.OwnAddress2 = 0;
 8000d14:	e9c4 0004 	strd	r0, r0, [r4, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d18:	e9c4 0006 	strd	r0, r0, [r4, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d1c:	4620      	mov	r0, r4
  hi2c1.Init.Timing = 0x00707CBB;
 8000d1e:	e9c4 3500 	strd	r3, r5, [r4]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d22:	f002 fc55 	bl	80035d0 <HAL_I2C_Init>
 8000d26:	4601      	mov	r1, r0
 8000d28:	b108      	cbz	r0, 8000d2e <main+0x1ba>
 8000d2a:	b672      	cpsid	i
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <main+0x1b8>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d2e:	4620      	mov	r0, r4
 8000d30:	f002 fde8 	bl	8003904 <HAL_I2CEx_ConfigAnalogFilter>
 8000d34:	4601      	mov	r1, r0
 8000d36:	b108      	cbz	r0, 8000d3c <main+0x1c8>
 8000d38:	b672      	cpsid	i
  while (1)
 8000d3a:	e7fe      	b.n	8000d3a <main+0x1c6>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d3c:	4620      	mov	r0, r4
 8000d3e:	f002 fe07 	bl	8003950 <HAL_I2CEx_ConfigDigitalFilter>
 8000d42:	b108      	cbz	r0, 8000d48 <main+0x1d4>
 8000d44:	b672      	cpsid	i
  while (1)
 8000d46:	e7fe      	b.n	8000d46 <main+0x1d2>
  hi2c2.Instance = I2C2;
 8000d48:	4c36      	ldr	r4, [pc, #216]	@ (8000e24 <main+0x2b0>)
 8000d4a:	4b37      	ldr	r3, [pc, #220]	@ (8000e28 <main+0x2b4>)
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d4c:	6220      	str	r0, [r4, #32]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d4e:	e9c4 0602 	strd	r0, r6, [r4, #8]
  hi2c2.Init.OwnAddress2 = 0;
 8000d52:	e9c4 0004 	strd	r0, r0, [r4, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d56:	e9c4 0006 	strd	r0, r0, [r4, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d5a:	4620      	mov	r0, r4
  hi2c2.Init.Timing = 0x00707CBB;
 8000d5c:	e9c4 3500 	strd	r3, r5, [r4]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d60:	f002 fc36 	bl	80035d0 <HAL_I2C_Init>
 8000d64:	4601      	mov	r1, r0
 8000d66:	b108      	cbz	r0, 8000d6c <main+0x1f8>
 8000d68:	b672      	cpsid	i
  while (1)
 8000d6a:	e7fe      	b.n	8000d6a <main+0x1f6>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d6c:	4620      	mov	r0, r4
 8000d6e:	f002 fdc9 	bl	8003904 <HAL_I2CEx_ConfigAnalogFilter>
 8000d72:	4601      	mov	r1, r0
 8000d74:	b108      	cbz	r0, 8000d7a <main+0x206>
 8000d76:	b672      	cpsid	i
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <main+0x204>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000d7a:	4620      	mov	r0, r4
 8000d7c:	f002 fde8 	bl	8003950 <HAL_I2CEx_ConfigDigitalFilter>
 8000d80:	b108      	cbz	r0, 8000d86 <main+0x212>
 8000d82:	b672      	cpsid	i
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <main+0x210>
  huart4.Instance = UART4;
 8000d86:	4c29      	ldr	r4, [pc, #164]	@ (8000e2c <main+0x2b8>)
  huart4.Init.BaudRate = 115200;
 8000d88:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000d8c:	4a28      	ldr	r2, [pc, #160]	@ (8000e30 <main+0x2bc>)
  huart4.Init.Parity = UART_PARITY_NONE;
 8000d8e:	6120      	str	r0, [r4, #16]
  huart4.Init.BaudRate = 115200;
 8000d90:	e9c4 2300 	strd	r2, r3, [r4]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000d94:	230c      	movs	r3, #12
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000d96:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d9a:	e9c4 3005 	strd	r3, r0, [r4, #20]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d9e:	e9c4 0007 	strd	r0, r0, [r4, #28]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000da2:	e9c4 0009 	strd	r0, r0, [r4, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000da6:	4620      	mov	r0, r4
 8000da8:	f004 fd71 	bl	800588e <HAL_UART_Init>
 8000dac:	4601      	mov	r1, r0
 8000dae:	b108      	cbz	r0, 8000db4 <main+0x240>
 8000db0:	b672      	cpsid	i
  while (1)
 8000db2:	e7fe      	b.n	8000db2 <main+0x23e>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000db4:	4620      	mov	r0, r4
 8000db6:	f004 fdd8 	bl	800596a <HAL_UARTEx_SetTxFifoThreshold>
 8000dba:	4601      	mov	r1, r0
 8000dbc:	b108      	cbz	r0, 8000dc2 <main+0x24e>
 8000dbe:	b672      	cpsid	i
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <main+0x24c>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dc2:	4620      	mov	r0, r4
 8000dc4:	f004 fdf1 	bl	80059aa <HAL_UARTEx_SetRxFifoThreshold>
 8000dc8:	b108      	cbz	r0, 8000dce <main+0x25a>
 8000dca:	b672      	cpsid	i
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <main+0x258>
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000dce:	4817      	ldr	r0, [pc, #92]	@ (8000e2c <main+0x2b8>)
 8000dd0:	f004 fdb0 	bl	8005934 <HAL_UARTEx_DisableFifoMode>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	b108      	cbz	r0, 8000ddc <main+0x268>
 8000dd8:	b672      	cpsid	i
  while (1)
 8000dda:	e7fe      	b.n	8000dda <main+0x266>
  hcrc.Instance = CRC;
 8000ddc:	4815      	ldr	r0, [pc, #84]	@ (8000e34 <main+0x2c0>)
 8000dde:	4a16      	ldr	r2, [pc, #88]	@ (8000e38 <main+0x2c4>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000de0:	8083      	strh	r3, [r0, #4]
  hcrc.Instance = CRC;
 8000de2:	6002      	str	r2, [r0, #0]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000de4:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000de8:	2301      	movs	r3, #1
 8000dea:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000dec:	f000 fc04 	bl	80015f8 <HAL_CRC_Init>
 8000df0:	4604      	mov	r4, r0
 8000df2:	b318      	cbz	r0, 8000e3c <main+0x2c8>
 8000df4:	b672      	cpsid	i
  while (1)
 8000df6:	e7fe      	b.n	8000df6 <main+0x282>
 8000df8:	58024400 	.word	0x58024400
 8000dfc:	58021000 	.word	0x58021000
 8000e00:	58020800 	.word	0x58020800
 8000e04:	58020400 	.word	0x58020400
 8000e08:	58020c00 	.word	0x58020c00
 8000e0c:	58020000 	.word	0x58020000
 8000e10:	24008efc 	.word	0x24008efc
 8000e14:	48020000 	.word	0x48020000
 8000e18:	24008e30 	.word	0x24008e30
 8000e1c:	40005400 	.word	0x40005400
 8000e20:	00707cbb 	.word	0x00707cbb
 8000e24:	24008ddc 	.word	0x24008ddc
 8000e28:	40005800 	.word	0x40005800
 8000e2c:	24008d48 	.word	0x24008d48
 8000e30:	40004c00 	.word	0x40004c00
 8000e34:	24008f4c 	.word	0x24008f4c
 8000e38:	58024c00 	.word	0x58024c00
  MX_X_CUBE_AI_Init();
 8000e3c:	f004 ff62 	bl	8005d04 <MX_X_CUBE_AI_Init>
  lcd_init(&hi2c2);
 8000e40:	4833      	ldr	r0, [pc, #204]	@ (8000f10 <main+0x39c>)
 8000e42:	f7ff fde9 	bl	8000a18 <lcd_init>
  lcd_clear();
 8000e46:	f7ff fe2d 	bl	8000aa4 <lcd_clear>
  lcd_send_string("Processing...");
 8000e4a:	4832      	ldr	r0, [pc, #200]	@ (8000f14 <main+0x3a0>)
 8000e4c:	f7ff fdd6 	bl	80009fc <lcd_send_string>
  ov7670_read(0x15,data);
 8000e50:	a908      	add	r1, sp, #32
 8000e52:	2015      	movs	r0, #21
 8000e54:	f7ff fc7a 	bl	800074c <ov7670_read>
  sprintf(buffer, "Addr:0x15; D:%x;", *data);
 8000e58:	492f      	ldr	r1, [pc, #188]	@ (8000f18 <main+0x3a4>)
 8000e5a:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8000e5e:	a821      	add	r0, sp, #132	@ 0x84
 8000e60:	ab08      	add	r3, sp, #32
 8000e62:	f00b fc6b 	bl	800c73c <siprintf>
  ov7670_init(&hi2c1);
 8000e66:	482d      	ldr	r0, [pc, #180]	@ (8000f1c <main+0x3a8>)
 8000e68:	f7ff fcc2 	bl	80007f0 <ov7670_init>
  ov7670_write(0x12,0x0C);
 8000e6c:	210c      	movs	r1, #12
 8000e6e:	2012      	movs	r0, #18
 8000e70:	f7ff fc3a 	bl	80006e8 <ov7670_write>
  ov7670_write(0x40,0xD0); //Enable RGB
 8000e74:	21d0      	movs	r1, #208	@ 0xd0
 8000e76:	2040      	movs	r0, #64	@ 0x40
 8000e78:	f7ff fc36 	bl	80006e8 <ov7670_write>
  ov7670_write(0x13,0x20);// Enable banding filter
 8000e7c:	2120      	movs	r1, #32
 8000e7e:	2013      	movs	r0, #19
 8000e80:	f7ff fc32 	bl	80006e8 <ov7670_write>
  ov7670_write(0x3B,0x12);// Banding filter settings
 8000e84:	2112      	movs	r1, #18
 8000e86:	203b      	movs	r0, #59	@ 0x3b
 8000e88:	f7ff fc2e 	bl	80006e8 <ov7670_write>
  ov7670_write(0x4f,0x80);
 8000e8c:	2180      	movs	r1, #128	@ 0x80
 8000e8e:	204f      	movs	r0, #79	@ 0x4f
 8000e90:	f7ff fc2a 	bl	80006e8 <ov7670_write>
  ov7670_write(0x50,0x80);
 8000e94:	2180      	movs	r1, #128	@ 0x80
 8000e96:	2050      	movs	r0, #80	@ 0x50
 8000e98:	f7ff fc26 	bl	80006e8 <ov7670_write>
  ov7670_write(0x51,0x00);
 8000e9c:	4621      	mov	r1, r4
 8000e9e:	2051      	movs	r0, #81	@ 0x51
 8000ea0:	f7ff fc22 	bl	80006e8 <ov7670_write>
  ov7670_write(0x52,0x22);
 8000ea4:	2122      	movs	r1, #34	@ 0x22
 8000ea6:	2052      	movs	r0, #82	@ 0x52
 8000ea8:	f7ff fc1e 	bl	80006e8 <ov7670_write>
  ov7670_write(0x53,0x5E);
 8000eac:	215e      	movs	r1, #94	@ 0x5e
 8000eae:	2053      	movs	r0, #83	@ 0x53
 8000eb0:	f7ff fc1a 	bl	80006e8 <ov7670_write>
  ov7670_write(0x54,0x80);
 8000eb4:	2180      	movs	r1, #128	@ 0x80
 8000eb6:	2054      	movs	r0, #84	@ 0x54
 8000eb8:	f7ff fc16 	bl	80006e8 <ov7670_write>
  ov7670_write(0x58,0x9E);
 8000ebc:	219e      	movs	r1, #158	@ 0x9e
 8000ebe:	2058      	movs	r0, #88	@ 0x58
 8000ec0:	f7ff fc12 	bl	80006e8 <ov7670_write>
  HAL_GPIO_TogglePin (GPIOD, GPIO_PIN_11);
 8000ec4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ec8:	4815      	ldr	r0, [pc, #84]	@ (8000f20 <main+0x3ac>)
 8000eca:	f002 f9f2 	bl	80032b2 <HAL_GPIO_TogglePin>
    imagedata[i] = 0;
 8000ece:	f44f 4246 	mov.w	r2, #50688	@ 0xc600
 8000ed2:	4621      	mov	r1, r4
 8000ed4:	a83a      	add	r0, sp, #232	@ 0xe8
 8000ed6:	f00b fcae 	bl	800c836 <memset>
  sprintf(buffer, "imagedata address: %x\r\n", imagedata); //24073924
 8000eda:	aa3a      	add	r2, sp, #232	@ 0xe8
 8000edc:	4911      	ldr	r1, [pc, #68]	@ (8000f24 <main+0x3b0>)
 8000ede:	a821      	add	r0, sp, #132	@ 0x84
 8000ee0:	f00b fc2c 	bl	800c73c <siprintf>
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8000ee4:	a821      	add	r0, sp, #132	@ 0x84
 8000ee6:	f7ff fa4b 	bl	8000380 <strlen>
 8000eea:	a921      	add	r1, sp, #132	@ 0x84
 8000eec:	b282      	uxth	r2, r0
 8000eee:	230a      	movs	r3, #10
 8000ef0:	480d      	ldr	r0, [pc, #52]	@ (8000f28 <main+0x3b4>)
 8000ef2:	f004 fc1c 	bl	800572e <HAL_UART_Transmit>
  imagedata[0] = 0xFF; // Check if index 0 properly overwritten
 8000ef6:	23ff      	movs	r3, #255	@ 0xff
  ov7670_startCap(imagedata);
 8000ef8:	a83a      	add	r0, sp, #232	@ 0xe8
  imagedata[0] = 0xFF; // Check if index 0 properly overwritten
 8000efa:	933a      	str	r3, [sp, #232]	@ 0xe8
  ov7670_startCap(imagedata);
 8000efc:	f7ff fcc4 	bl	8000888 <ov7670_startCap>
  Resize_to_128(imagedata, imagedata128);
 8000f00:	490a      	ldr	r1, [pc, #40]	@ (8000f2c <main+0x3b8>)
 8000f02:	a83a      	add	r0, sp, #232	@ 0xe8
 8000f04:	f7ff fcec 	bl	80008e0 <Resize_to_128>
   MX_X_CUBE_AI_Process();
 8000f08:	f004 ff44 	bl	8005d94 <MX_X_CUBE_AI_Process>
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <main+0x398>
 8000f0e:	bf00      	nop
 8000f10:	24008ddc 	.word	0x24008ddc
 8000f14:	0800ebfb 	.word	0x0800ebfb
 8000f18:	0800ec09 	.word	0x0800ec09
 8000f1c:	24008e30 	.word	0x24008e30
 8000f20:	58020c00 	.word	0x58020c00
 8000f24:	0800ec1a 	.word	0x0800ec1a
 8000f28:	24008d48 	.word	0x24008d48
 8000f2c:	24000d48 	.word	0x24000d48

08000f30 <Error_Handler>:
 8000f30:	b672      	cpsid	i
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <Error_Handler+0x2>

08000f34 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f34:	4b07      	ldr	r3, [pc, #28]	@ (8000f54 <HAL_MspInit+0x20>)
{
 8000f36:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f38:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8000f3c:	f042 0202 	orr.w	r2, r2, #2
 8000f40:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8000f44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f48:	f003 0302 	and.w	r3, r3, #2
 8000f4c:	9301      	str	r3, [sp, #4]
 8000f4e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f50:	b002      	add	sp, #8
 8000f52:	4770      	bx	lr
 8000f54:	58024400 	.word	0x58024400

08000f58 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8000f58:	6802      	ldr	r2, [r0, #0]
{
 8000f5a:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8000f5c:	4b09      	ldr	r3, [pc, #36]	@ (8000f84 <HAL_CRC_MspInit+0x2c>)
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d10d      	bne.n	8000f7e <HAL_CRC_MspInit+0x26>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f62:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000f66:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000f6a:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8000f6e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f76:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000f7a:	9301      	str	r3, [sp, #4]
 8000f7c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000f7e:	b002      	add	sp, #8
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	58024c00 	.word	0x58024c00

08000f88 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8000f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f8a:	b08d      	sub	sp, #52	@ 0x34
 8000f8c:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8e:	2214      	movs	r2, #20
 8000f90:	2100      	movs	r1, #0
 8000f92:	a807      	add	r0, sp, #28
 8000f94:	f00b fc4f 	bl	800c836 <memset>
  if(hdcmi->Instance==DCMI)
 8000f98:	682a      	ldr	r2, [r5, #0]
 8000f9a:	4b55      	ldr	r3, [pc, #340]	@ (80010f0 <HAL_DCMI_MspInit+0x168>)
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	f040 80a5 	bne.w	80010ec <HAL_DCMI_MspInit+0x164>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000fa2:	4b54      	ldr	r3, [pc, #336]	@ (80010f4 <HAL_DCMI_MspInit+0x16c>)
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa4:	2402      	movs	r4, #2
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000fa6:	2703      	movs	r7, #3
 8000fa8:	260d      	movs	r6, #13
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000faa:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fae:	a907      	add	r1, sp, #28
 8000fb0:	4851      	ldr	r0, [pc, #324]	@ (80010f8 <HAL_DCMI_MspInit+0x170>)
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000fb2:	f042 0201 	orr.w	r2, r2, #1
 8000fb6:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
 8000fba:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 8000fbe:	f002 0201 	and.w	r2, r2, #1
 8000fc2:	9201      	str	r2, [sp, #4]
 8000fc4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fc6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000fca:	f042 0210 	orr.w	r2, r2, #16
 8000fce:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000fd2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000fd6:	f002 0210 	and.w	r2, r2, #16
 8000fda:	9202      	str	r2, [sp, #8]
 8000fdc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fde:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000fe2:	f042 0201 	orr.w	r2, r2, #1
 8000fe6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000fea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000fee:	f002 0201 	and.w	r2, r2, #1
 8000ff2:	9203      	str	r2, [sp, #12]
 8000ff4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000ffa:	f042 0204 	orr.w	r2, r2, #4
 8000ffe:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001002:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001006:	f002 0204 	and.w	r2, r2, #4
 800100a:	9204      	str	r2, [sp, #16]
 800100c:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800100e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001012:	f042 0208 	orr.w	r2, r2, #8
 8001016:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800101a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800101e:	f002 0208 	and.w	r2, r2, #8
 8001022:	9205      	str	r2, [sp, #20]
 8001024:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001026:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800102a:	f042 0202 	orr.w	r2, r2, #2
 800102e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	9306      	str	r3, [sp, #24]
 800103c:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	2370      	movs	r3, #112	@ 0x70
 8001040:	e9cd 3407 	strd	r3, r4, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001044:	9409      	str	r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001046:	e9cd 760a 	strd	r7, r6, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800104a:	f002 f845 	bl	80030d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800104e:	2350      	movs	r3, #80	@ 0x50
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001050:	a907      	add	r1, sp, #28
 8001052:	482a      	ldr	r0, [pc, #168]	@ (80010fc <HAL_DCMI_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001054:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	e9cd 3407 	strd	r3, r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105a:	e9cd 4709 	strd	r4, r7, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105e:	f002 f83b 	bl	80030d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001062:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001066:	a907      	add	r1, sp, #28
 8001068:	4825      	ldr	r0, [pc, #148]	@ (8001100 <HAL_DCMI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800106a:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106c:	e9cd 3407 	strd	r3, r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001070:	e9cd 4709 	strd	r4, r7, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001074:	f002 f830 	bl	80030d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001078:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800107a:	a907      	add	r1, sp, #28
 800107c:	4821      	ldr	r0, [pc, #132]	@ (8001104 <HAL_DCMI_MspInit+0x17c>)
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800107e:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001080:	e9cd 3407 	strd	r3, r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001084:	e9cd 4709 	strd	r4, r7, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001088:	f002 f826 	bl	80030d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800108c:	2380      	movs	r3, #128	@ 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108e:	a907      	add	r1, sp, #28
 8001090:	481d      	ldr	r0, [pc, #116]	@ (8001108 <HAL_DCMI_MspInit+0x180>)
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001092:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	e9cd 3407 	strd	r3, r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001098:	e9cd 4709 	strd	r4, r7, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109c:	f002 f81c 	bl	80030d8 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 80010a0:	4c1a      	ldr	r4, [pc, #104]	@ (800110c <HAL_DCMI_MspInit+0x184>)
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 80010a2:	4a1b      	ldr	r2, [pc, #108]	@ (8001110 <HAL_DCMI_MspInit+0x188>)
 80010a4:	234b      	movs	r3, #75	@ 0x4b
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010a6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_dcmi.Init.Mode = DMA_NORMAL;
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80010aa:	4620      	mov	r0, r4
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 80010ac:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010b0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010b4:	2300      	movs	r3, #0
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010b6:	e9c4 1204 	strd	r1, r2, [r4, #16]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80010ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 80010be:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80010c2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80010c6:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010ca:	e9c4 2308 	strd	r2, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80010ce:	f000 fe13 	bl	8001cf8 <HAL_DMA_Init>
 80010d2:	b108      	cbz	r0, 80010d8 <HAL_DCMI_MspInit+0x150>
    {
      Error_Handler();
 80010d4:	f7ff ff2c 	bl	8000f30 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 80010d8:	2200      	movs	r2, #0
 80010da:	204e      	movs	r0, #78	@ 0x4e
    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 80010dc:	64ac      	str	r4, [r5, #72]	@ 0x48
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 80010de:	4611      	mov	r1, r2
    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 80010e0:	63a5      	str	r5, [r4, #56]	@ 0x38
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 80010e2:	f000 fa35 	bl	8001550 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80010e6:	204e      	movs	r0, #78	@ 0x4e
 80010e8:	f000 fa64 	bl	80015b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80010ec:	b00d      	add	sp, #52	@ 0x34
 80010ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010f0:	48020000 	.word	0x48020000
 80010f4:	58024400 	.word	0x58024400
 80010f8:	58021000 	.word	0x58021000
 80010fc:	58020000 	.word	0x58020000
 8001100:	58020800 	.word	0x58020800
 8001104:	58020c00 	.word	0x58020c00
 8001108:	58020400 	.word	0x58020400
 800110c:	24008e84 	.word	0x24008e84
 8001110:	40020010 	.word	0x40020010

08001114 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001114:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001116:	2214      	movs	r2, #20
{
 8001118:	b0ba      	sub	sp, #232	@ 0xe8
 800111a:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	2100      	movs	r1, #0
 800111e:	eb0d 0002 	add.w	r0, sp, r2
 8001122:	f00b fb88 	bl	800c836 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001126:	22c0      	movs	r2, #192	@ 0xc0
 8001128:	2100      	movs	r1, #0
 800112a:	a80a      	add	r0, sp, #40	@ 0x28
 800112c:	f00b fb83 	bl	800c836 <memset>
  if(hi2c->Instance==I2C1)
 8001130:	6823      	ldr	r3, [r4, #0]
 8001132:	4a36      	ldr	r2, [pc, #216]	@ (800120c <HAL_I2C_MspInit+0xf8>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d133      	bne.n	80011a0 <HAL_I2C_MspInit+0x8c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001138:	2208      	movs	r2, #8
 800113a:	2300      	movs	r3, #0
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800113c:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800113e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001142:	f003 fa47 	bl	80045d4 <HAL_RCCEx_PeriphCLKConfig>
 8001146:	b108      	cbz	r0, 800114c <HAL_I2C_MspInit+0x38>
    {
      Error_Handler();
 8001148:	f7ff fef2 	bl	8000f30 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800114c:	4c30      	ldr	r4, [pc, #192]	@ (8001210 <HAL_I2C_MspInit+0xfc>)
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800114e:	f44f 7140 	mov.w	r1, #768	@ 0x300
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001152:	2001      	movs	r0, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001154:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001158:	f043 0302 	orr.w	r3, r3, #2
 800115c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8001160:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001164:	f003 0302 	and.w	r3, r3, #2
 8001168:	9301      	str	r3, [sp, #4]
 800116a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800116c:	2312      	movs	r3, #18
 800116e:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	2300      	movs	r3, #0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001174:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	e9cd 0307 	strd	r0, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800117a:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117c:	4825      	ldr	r0, [pc, #148]	@ (8001214 <HAL_I2C_MspInit+0x100>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800117e:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001180:	f001 ffaa 	bl	80030d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001184:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
 8001188:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800118c:	f8c4 30e8 	str.w	r3, [r4, #232]	@ 0xe8
 8001190:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
 8001194:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001198:	9302      	str	r3, [sp, #8]
 800119a:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800119c:	b03a      	add	sp, #232	@ 0xe8
 800119e:	bd10      	pop	{r4, pc}
  else if(hi2c->Instance==I2C2)
 80011a0:	4a1d      	ldr	r2, [pc, #116]	@ (8001218 <HAL_I2C_MspInit+0x104>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d1fa      	bne.n	800119c <HAL_I2C_MspInit+0x88>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80011a6:	2208      	movs	r2, #8
 80011a8:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011aa:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80011ac:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011b0:	f003 fa10 	bl	80045d4 <HAL_RCCEx_PeriphCLKConfig>
 80011b4:	b108      	cbz	r0, 80011ba <HAL_I2C_MspInit+0xa6>
      Error_Handler();
 80011b6:	f7ff febb 	bl	8000f30 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ba:	4c15      	ldr	r4, [pc, #84]	@ (8001210 <HAL_I2C_MspInit+0xfc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011bc:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c0:	a905      	add	r1, sp, #20
 80011c2:	4814      	ldr	r0, [pc, #80]	@ (8001214 <HAL_I2C_MspInit+0x100>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80011c8:	f043 0302 	orr.w	r3, r3, #2
 80011cc:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80011d0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80011d4:	f003 0302 	and.w	r3, r3, #2
 80011d8:	9303      	str	r3, [sp, #12]
 80011da:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011dc:	2312      	movs	r3, #18
 80011de:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	e9cd 3307 	strd	r3, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011e8:	2304      	movs	r3, #4
 80011ea:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ec:	f001 ff74 	bl	80030d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011f0:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
 80011f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011f8:	f8c4 30e8 	str.w	r3, [r4, #232]	@ 0xe8
 80011fc:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
 8001200:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001204:	9304      	str	r3, [sp, #16]
 8001206:	9b04      	ldr	r3, [sp, #16]
}
 8001208:	e7c8      	b.n	800119c <HAL_I2C_MspInit+0x88>
 800120a:	bf00      	nop
 800120c:	40005400 	.word	0x40005400
 8001210:	58024400 	.word	0x58024400
 8001214:	58020400 	.word	0x58020400
 8001218:	40005800 	.word	0x40005800

0800121c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800121c:	b510      	push	{r4, lr}
 800121e:	b0b8      	sub	sp, #224	@ 0xe0
 8001220:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001222:	2214      	movs	r2, #20
 8001224:	2100      	movs	r1, #0
 8001226:	a803      	add	r0, sp, #12
 8001228:	f00b fb05 	bl	800c836 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800122c:	22c0      	movs	r2, #192	@ 0xc0
 800122e:	2100      	movs	r1, #0
 8001230:	a808      	add	r0, sp, #32
 8001232:	f00b fb00 	bl	800c836 <memset>
  if(huart->Instance==UART4)
 8001236:	6822      	ldr	r2, [r4, #0]
 8001238:	4b1a      	ldr	r3, [pc, #104]	@ (80012a4 <HAL_UART_MspInit+0x88>)
 800123a:	429a      	cmp	r2, r3
 800123c:	d12f      	bne.n	800129e <HAL_UART_MspInit+0x82>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800123e:	2202      	movs	r2, #2
 8001240:	2300      	movs	r3, #0
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001242:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001244:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001248:	f003 f9c4 	bl	80045d4 <HAL_RCCEx_PeriphCLKConfig>
 800124c:	b108      	cbz	r0, 8001252 <HAL_UART_MspInit+0x36>
    {
      Error_Handler();
 800124e:	f7ff fe6f 	bl	8000f30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001252:	4b15      	ldr	r3, [pc, #84]	@ (80012a8 <HAL_UART_MspInit+0x8c>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001254:	a903      	add	r1, sp, #12
 8001256:	4815      	ldr	r0, [pc, #84]	@ (80012ac <HAL_UART_MspInit+0x90>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8001258:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800125c:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8001260:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8001264:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001268:	f402 2200 	and.w	r2, r2, #524288	@ 0x80000
 800126c:	9201      	str	r2, [sp, #4]
 800126e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001270:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001274:	f042 0201 	orr.w	r2, r2, #1
 8001278:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127c:	2203      	movs	r2, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	9302      	str	r3, [sp, #8]
 8001288:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128a:	2302      	movs	r3, #2
 800128c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001292:	e9cd 3305 	strd	r3, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001296:	2308      	movs	r3, #8
 8001298:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129a:	f001 ff1d 	bl	80030d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800129e:	b038      	add	sp, #224	@ 0xe0
 80012a0:	bd10      	pop	{r4, pc}
 80012a2:	bf00      	nop
 80012a4:	40004c00 	.word	0x40004c00
 80012a8:	58024400 	.word	0x58024400
 80012ac:	58020000 	.word	0x58020000

080012b0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012b0:	e7fe      	b.n	80012b0 <NMI_Handler>

080012b2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b2:	e7fe      	b.n	80012b2 <HardFault_Handler>

080012b4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b4:	e7fe      	b.n	80012b4 <MemManage_Handler>

080012b6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b6:	e7fe      	b.n	80012b6 <BusFault_Handler>

080012b8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <UsageFault_Handler>

080012ba <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ba:	4770      	bx	lr

080012bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80012bc:	4770      	bx	lr

080012be <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80012be:	4770      	bx	lr

080012c0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012c0:	f000 b90a 	b.w	80014d8 <HAL_IncTick>

080012c4 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 80012c4:	4801      	ldr	r0, [pc, #4]	@ (80012cc <DMA1_Stream0_IRQHandler+0x8>)
 80012c6:	f001 ba27 	b.w	8002718 <HAL_DMA_IRQHandler>
 80012ca:	bf00      	nop
 80012cc:	24008e84 	.word	0x24008e84

080012d0 <DCMI_IRQHandler>:
void DCMI_IRQHandler(void)
{
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80012d0:	4801      	ldr	r0, [pc, #4]	@ (80012d8 <DCMI_IRQHandler+0x8>)
 80012d2:	f000 bb33 	b.w	800193c <HAL_DCMI_IRQHandler>
 80012d6:	bf00      	nop
 80012d8:	24008efc 	.word	0x24008efc

080012dc <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012dc:	4a0b      	ldr	r2, [pc, #44]	@ (800130c <_sbrk+0x30>)
{
 80012de:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80012e0:	6811      	ldr	r1, [r2, #0]
{
 80012e2:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80012e4:	b909      	cbnz	r1, 80012ea <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80012e6:	490a      	ldr	r1, [pc, #40]	@ (8001310 <_sbrk+0x34>)
 80012e8:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ea:	6810      	ldr	r0, [r2, #0]
 80012ec:	4909      	ldr	r1, [pc, #36]	@ (8001314 <_sbrk+0x38>)
 80012ee:	4c0a      	ldr	r4, [pc, #40]	@ (8001318 <_sbrk+0x3c>)
 80012f0:	4403      	add	r3, r0
 80012f2:	1b09      	subs	r1, r1, r4
 80012f4:	428b      	cmp	r3, r1
 80012f6:	d906      	bls.n	8001306 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80012f8:	f00b fb0e 	bl	800c918 <__errno>
 80012fc:	230c      	movs	r3, #12
 80012fe:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001300:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001304:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001306:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001308:	e7fc      	b.n	8001304 <_sbrk+0x28>
 800130a:	bf00      	nop
 800130c:	24008f70 	.word	0x24008f70
 8001310:	20000000 	.word	0x20000000
 8001314:	24080000 	.word	0x24080000
 8001318:	00000800 	.word	0x00000800

0800131c <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800131c:	4a25      	ldr	r2, [pc, #148]	@ (80013b4 <SystemInit+0x98>)
 800131e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001322:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001326:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800132a:	4a23      	ldr	r2, [pc, #140]	@ (80013b8 <SystemInit+0x9c>)
 800132c:	6813      	ldr	r3, [r2, #0]
 800132e:	f003 030f 	and.w	r3, r3, #15
 8001332:	2b06      	cmp	r3, #6
 8001334:	d805      	bhi.n	8001342 <SystemInit+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001336:	6813      	ldr	r3, [r2, #0]
 8001338:	f023 030f 	bic.w	r3, r3, #15
 800133c:	f043 0307 	orr.w	r3, r3, #7
 8001340:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001342:	4b1e      	ldr	r3, [pc, #120]	@ (80013bc <SystemInit+0xa0>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	f042 0201 	orr.w	r2, r2, #1
 800134a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800134c:	2200      	movs	r2, #0
 800134e:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001350:	4a1b      	ldr	r2, [pc, #108]	@ (80013c0 <SystemInit+0xa4>)
 8001352:	6819      	ldr	r1, [r3, #0]
 8001354:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001356:	4918      	ldr	r1, [pc, #96]	@ (80013b8 <SystemInit+0x9c>)
  RCC->CR &= 0xEAF6ED7FU;
 8001358:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800135a:	680a      	ldr	r2, [r1, #0]
 800135c:	0712      	lsls	r2, r2, #28
 800135e:	d505      	bpl.n	800136c <SystemInit+0x50>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001360:	680a      	ldr	r2, [r1, #0]
 8001362:	f022 020f 	bic.w	r2, r2, #15
 8001366:	f042 0207 	orr.w	r2, r2, #7
 800136a:	600a      	str	r2, [r1, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800136c:	2200      	movs	r2, #0

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800136e:	4915      	ldr	r1, [pc, #84]	@ (80013c4 <SystemInit+0xa8>)
  RCC->D1CFGR = 0x00000000;
 8001370:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8001372:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8001374:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8001376:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001378:	4913      	ldr	r1, [pc, #76]	@ (80013c8 <SystemInit+0xac>)
 800137a:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800137c:	4913      	ldr	r1, [pc, #76]	@ (80013cc <SystemInit+0xb0>)
 800137e:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001380:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001382:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001384:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001386:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001388:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800138a:	6819      	ldr	r1, [r3, #0]
 800138c:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8001390:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001392:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001394:	4b0e      	ldr	r3, [pc, #56]	@ (80013d0 <SystemInit+0xb4>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	0c1b      	lsrs	r3, r3, #16
 800139a:	041b      	lsls	r3, r3, #16
 800139c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80013a0:	d203      	bcs.n	80013aa <SystemInit+0x8e>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80013a2:	4b0c      	ldr	r3, [pc, #48]	@ (80013d4 <SystemInit+0xb8>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80013aa:	4b0b      	ldr	r3, [pc, #44]	@ (80013d8 <SystemInit+0xbc>)
 80013ac:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80013b0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80013b2:	4770      	bx	lr
 80013b4:	e000ed00 	.word	0xe000ed00
 80013b8:	52002000 	.word	0x52002000
 80013bc:	58024400 	.word	0x58024400
 80013c0:	eaf6ed7f 	.word	0xeaf6ed7f
 80013c4:	02020200 	.word	0x02020200
 80013c8:	01ff0000 	.word	0x01ff0000
 80013cc:	01010280 	.word	0x01010280
 80013d0:	5c001000 	.word	0x5c001000
 80013d4:	51008000 	.word	0x51008000
 80013d8:	52004000 	.word	0x52004000

080013dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80013dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001414 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013e0:	f7ff ff9c 	bl	800131c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013e4:	480c      	ldr	r0, [pc, #48]	@ (8001418 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013e6:	490d      	ldr	r1, [pc, #52]	@ (800141c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001420 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013ec:	e002      	b.n	80013f4 <LoopCopyDataInit>

080013ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013f2:	3304      	adds	r3, #4

080013f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f8:	d3f9      	bcc.n	80013ee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001424 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001428 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001400:	e001      	b.n	8001406 <LoopFillZerobss>

08001402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001404:	3204      	adds	r2, #4

08001406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001408:	d3fb      	bcc.n	8001402 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800140a:	f00b fa8b 	bl	800c924 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800140e:	f7ff fbb1 	bl	8000b74 <main>
  bx  lr
 8001412:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001414:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001418:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800141c:	24000d18 	.word	0x24000d18
  ldr r2, =_sidata
 8001420:	0806d7f8 	.word	0x0806d7f8
  ldr r2, =_sbss
 8001424:	24000d20 	.word	0x24000d20
  ldr r4, =_ebss
 8001428:	240692f0 	.word	0x240692f0

0800142c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800142c:	e7fe      	b.n	800142c <ADC3_IRQHandler>
	...

08001430 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001430:	b538      	push	{r3, r4, r5, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001432:	4b0f      	ldr	r3, [pc, #60]	@ (8001470 <HAL_InitTick+0x40>)
{
 8001434:	4605      	mov	r5, r0
  if((uint32_t)uwTickFreq == 0UL)
 8001436:	781a      	ldrb	r2, [r3, #0]
 8001438:	b90a      	cbnz	r2, 800143e <HAL_InitTick+0xe>
  {
    return HAL_ERROR;
 800143a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800143c:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800143e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001442:	fbb3 f3f2 	udiv	r3, r3, r2
 8001446:	4a0b      	ldr	r2, [pc, #44]	@ (8001474 <HAL_InitTick+0x44>)
 8001448:	6810      	ldr	r0, [r2, #0]
 800144a:	fbb0 f0f3 	udiv	r0, r0, r3
 800144e:	f000 f8bf 	bl	80015d0 <HAL_SYSTICK_Config>
 8001452:	4604      	mov	r4, r0
 8001454:	2800      	cmp	r0, #0
 8001456:	d1f0      	bne.n	800143a <HAL_InitTick+0xa>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001458:	2d0f      	cmp	r5, #15
 800145a:	d8ee      	bhi.n	800143a <HAL_InitTick+0xa>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800145c:	4602      	mov	r2, r0
 800145e:	4629      	mov	r1, r5
 8001460:	f04f 30ff 	mov.w	r0, #4294967295
 8001464:	f000 f874 	bl	8001550 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001468:	4b03      	ldr	r3, [pc, #12]	@ (8001478 <HAL_InitTick+0x48>)
 800146a:	4620      	mov	r0, r4
 800146c:	601d      	str	r5, [r3, #0]
  return HAL_OK;
 800146e:	e7e5      	b.n	800143c <HAL_InitTick+0xc>
 8001470:	24000010 	.word	0x24000010
 8001474:	2400000c 	.word	0x2400000c
 8001478:	24000014 	.word	0x24000014

0800147c <HAL_Init>:
{
 800147c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800147e:	2003      	movs	r0, #3
 8001480:	f000 f854 	bl	800152c <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001484:	f002 fda8 	bl	8003fd8 <HAL_RCC_GetSysClockFreq>
 8001488:	490f      	ldr	r1, [pc, #60]	@ (80014c8 <HAL_Init+0x4c>)
 800148a:	4a10      	ldr	r2, [pc, #64]	@ (80014cc <HAL_Init+0x50>)
 800148c:	698b      	ldr	r3, [r1, #24]
 800148e:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8001492:	5cd3      	ldrb	r3, [r2, r3]
 8001494:	f003 031f 	and.w	r3, r3, #31
 8001498:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800149a:	698b      	ldr	r3, [r1, #24]
 800149c:	f003 030f 	and.w	r3, r3, #15
 80014a0:	5cd3      	ldrb	r3, [r2, r3]
 80014a2:	4a0b      	ldr	r2, [pc, #44]	@ (80014d0 <HAL_Init+0x54>)
 80014a4:	f003 031f 	and.w	r3, r3, #31
 80014a8:	fa20 f303 	lsr.w	r3, r0, r3
 80014ac:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 80014ae:	4b09      	ldr	r3, [pc, #36]	@ (80014d4 <HAL_Init+0x58>)
 80014b0:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014b2:	200f      	movs	r0, #15
 80014b4:	f7ff ffbc 	bl	8001430 <HAL_InitTick>
 80014b8:	4604      	mov	r4, r0
 80014ba:	b918      	cbnz	r0, 80014c4 <HAL_Init+0x48>
  HAL_MspInit();
 80014bc:	f7ff fd3a 	bl	8000f34 <HAL_MspInit>
}
 80014c0:	4620      	mov	r0, r4
 80014c2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80014c4:	2401      	movs	r4, #1
 80014c6:	e7fb      	b.n	80014c0 <HAL_Init+0x44>
 80014c8:	58024400 	.word	0x58024400
 80014cc:	0800ec32 	.word	0x0800ec32
 80014d0:	24000008 	.word	0x24000008
 80014d4:	2400000c 	.word	0x2400000c

080014d8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80014d8:	4a03      	ldr	r2, [pc, #12]	@ (80014e8 <HAL_IncTick+0x10>)
 80014da:	4b04      	ldr	r3, [pc, #16]	@ (80014ec <HAL_IncTick+0x14>)
 80014dc:	6811      	ldr	r1, [r2, #0]
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	440b      	add	r3, r1
 80014e2:	6013      	str	r3, [r2, #0]
}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	24008f74 	.word	0x24008f74
 80014ec:	24000010 	.word	0x24000010

080014f0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80014f0:	4b01      	ldr	r3, [pc, #4]	@ (80014f8 <HAL_GetTick+0x8>)
 80014f2:	6818      	ldr	r0, [r3, #0]
}
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	24008f74 	.word	0x24008f74

080014fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014fc:	b538      	push	{r3, r4, r5, lr}
 80014fe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001500:	f7ff fff6 	bl	80014f0 <HAL_GetTick>
 8001504:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001506:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001508:	bf1e      	ittt	ne
 800150a:	4b04      	ldrne	r3, [pc, #16]	@ (800151c <HAL_Delay+0x20>)
 800150c:	781b      	ldrbne	r3, [r3, #0]
 800150e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001510:	f7ff ffee 	bl	80014f0 <HAL_GetTick>
 8001514:	1b43      	subs	r3, r0, r5
 8001516:	42a3      	cmp	r3, r4
 8001518:	d3fa      	bcc.n	8001510 <HAL_Delay+0x14>
  {
  }
}
 800151a:	bd38      	pop	{r3, r4, r5, pc}
 800151c:	24000010 	.word	0x24000010

08001520 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8001520:	4b01      	ldr	r3, [pc, #4]	@ (8001528 <HAL_GetREVID+0x8>)
 8001522:	6818      	ldr	r0, [r3, #0]
}
 8001524:	0c00      	lsrs	r0, r0, #16
 8001526:	4770      	bx	lr
 8001528:	5c001000 	.word	0x5c001000

0800152c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800152c:	4907      	ldr	r1, [pc, #28]	@ (800154c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800152e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001530:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001532:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001536:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800153a:	0412      	lsls	r2, r2, #16
 800153c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800153e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001540:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001544:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001548:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800154a:	4770      	bx	lr
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001550:	4b16      	ldr	r3, [pc, #88]	@ (80015ac <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001552:	b530      	push	{r4, r5, lr}
 8001554:	68dc      	ldr	r4, [r3, #12]
 8001556:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800155a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800155e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001560:	2b04      	cmp	r3, #4
 8001562:	bf28      	it	cs
 8001564:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001566:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001568:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800156c:	bf8c      	ite	hi
 800156e:	3c03      	subhi	r4, #3
 8001570:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001572:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 8001576:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001578:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800157c:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001580:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001584:	fa03 f304 	lsl.w	r3, r3, r4
 8001588:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001590:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8001592:	db06      	blt.n	80015a2 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001594:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001598:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 800159c:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80015a0:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a2:	f000 000f 	and.w	r0, r0, #15
 80015a6:	4a02      	ldr	r2, [pc, #8]	@ (80015b0 <HAL_NVIC_SetPriority+0x60>)
 80015a8:	5413      	strb	r3, [r2, r0]
 80015aa:	e7f9      	b.n	80015a0 <HAL_NVIC_SetPriority+0x50>
 80015ac:	e000ed00 	.word	0xe000ed00
 80015b0:	e000ed14 	.word	0xe000ed14

080015b4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80015b4:	2800      	cmp	r0, #0
 80015b6:	db07      	blt.n	80015c8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015b8:	2301      	movs	r3, #1
 80015ba:	0941      	lsrs	r1, r0, #5
 80015bc:	f000 001f 	and.w	r0, r0, #31
 80015c0:	4a02      	ldr	r2, [pc, #8]	@ (80015cc <HAL_NVIC_EnableIRQ+0x18>)
 80015c2:	4083      	lsls	r3, r0
 80015c4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	e000e100 	.word	0xe000e100

080015d0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d0:	3801      	subs	r0, #1
 80015d2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80015d6:	d20b      	bcs.n	80015f0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015d8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015dc:	4a05      	ldr	r2, [pc, #20]	@ (80015f4 <HAL_SYSTICK_Config+0x24>)
 80015de:	21f0      	movs	r1, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015e0:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015e2:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e4:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015e8:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015ea:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ec:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015ee:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80015f0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80015f2:	4770      	bx	lr
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80015f8:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80015fa:	4604      	mov	r4, r0
 80015fc:	b908      	cbnz	r0, 8001602 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 80015fe:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8001600:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001602:	7f43      	ldrb	r3, [r0, #29]
 8001604:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001608:	b913      	cbnz	r3, 8001610 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 800160a:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800160c:	f7ff fca4 	bl	8000f58 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001610:	2302      	movs	r3, #2
 8001612:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001614:	7923      	ldrb	r3, [r4, #4]
 8001616:	b9e3      	cbnz	r3, 8001652 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001618:	6823      	ldr	r3, [r4, #0]
 800161a:	4a13      	ldr	r2, [pc, #76]	@ (8001668 <HAL_CRC_Init+0x70>)
 800161c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	f022 0218 	bic.w	r2, r2, #24
 8001624:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001626:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001628:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800162a:	b9d2      	cbnz	r2, 8001662 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800162c:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001630:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8001632:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001634:	689a      	ldr	r2, [r3, #8]
 8001636:	6961      	ldr	r1, [r4, #20]
 8001638:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800163c:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800163e:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001640:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001648:	430a      	orrs	r2, r1
 800164a:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800164c:	2301      	movs	r3, #1
 800164e:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8001650:	e7d6      	b.n	8001600 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001652:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8001656:	4620      	mov	r0, r4
 8001658:	f000 f808 	bl	800166c <HAL_CRCEx_Polynomial_Set>
 800165c:	2800      	cmp	r0, #0
 800165e:	d0e2      	beq.n	8001626 <HAL_CRC_Init+0x2e>
 8001660:	e7cd      	b.n	80015fe <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001662:	6922      	ldr	r2, [r4, #16]
 8001664:	e7e4      	b.n	8001630 <HAL_CRC_Init+0x38>
 8001666:	bf00      	nop
 8001668:	04c11db7 	.word	0x04c11db7

0800166c <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800166c:	07cb      	lsls	r3, r1, #31
{
 800166e:	b510      	push	{r4, lr}
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8001670:	d50d      	bpl.n	800168e <HAL_CRCEx_Polynomial_Set+0x22>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001672:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001674:	3b01      	subs	r3, #1
 8001676:	d31d      	bcc.n	80016b4 <HAL_CRCEx_Polynomial_Set+0x48>
 8001678:	fa21 f403 	lsr.w	r4, r1, r3
 800167c:	07e4      	lsls	r4, r4, #31
 800167e:	d5f9      	bpl.n	8001674 <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 8001680:	2a10      	cmp	r2, #16
 8001682:	d013      	beq.n	80016ac <HAL_CRCEx_Polynomial_Set+0x40>
 8001684:	2a10      	cmp	r2, #16
 8001686:	d804      	bhi.n	8001692 <HAL_CRCEx_Polynomial_Set+0x26>
 8001688:	b13a      	cbz	r2, 800169a <HAL_CRCEx_Polynomial_Set+0x2e>
 800168a:	2a08      	cmp	r2, #8
 800168c:	d010      	beq.n	80016b0 <HAL_CRCEx_Polynomial_Set+0x44>
 800168e:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8001690:	e00b      	b.n	80016aa <HAL_CRCEx_Polynomial_Set+0x3e>
    switch (PolyLength)
 8001692:	2a18      	cmp	r2, #24
 8001694:	d1fb      	bne.n	800168e <HAL_CRCEx_Polynomial_Set+0x22>
        if (msb >= HAL_CRC_LENGTH_7B)
 8001696:	2b06      	cmp	r3, #6
        if (msb >= HAL_CRC_LENGTH_16B)
 8001698:	d8f9      	bhi.n	800168e <HAL_CRCEx_Polynomial_Set+0x22>
    WRITE_REG(hcrc->Instance->POL, Pol);
 800169a:	6800      	ldr	r0, [r0, #0]
 800169c:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800169e:	6883      	ldr	r3, [r0, #8]
 80016a0:	f023 0318 	bic.w	r3, r3, #24
 80016a4:	4313      	orrs	r3, r2
 80016a6:	6083      	str	r3, [r0, #8]
 80016a8:	2000      	movs	r0, #0
}
 80016aa:	bd10      	pop	{r4, pc}
        if (msb >= HAL_CRC_LENGTH_8B)
 80016ac:	2b07      	cmp	r3, #7
 80016ae:	e7f3      	b.n	8001698 <HAL_CRCEx_Polynomial_Set+0x2c>
        if (msb >= HAL_CRC_LENGTH_16B)
 80016b0:	2b0f      	cmp	r3, #15
 80016b2:	e7f1      	b.n	8001698 <HAL_CRCEx_Polynomial_Set+0x2c>
    switch (PolyLength)
 80016b4:	2a10      	cmp	r2, #16
 80016b6:	d1e5      	bne.n	8001684 <HAL_CRCEx_Polynomial_Set+0x18>
 80016b8:	e7e9      	b.n	800168e <HAL_CRCEx_Polynomial_Set+0x22>

080016ba <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80016ba:	b510      	push	{r4, lr}
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016bc:	6b84      	ldr	r4, [r0, #56]	@ 0x38

  if (hdcmi->XferCount != 0U)
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 80016be:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
  if (hdcmi->XferCount != 0U)
 80016c0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 80016c2:	6803      	ldr	r3, [r0, #0]
  if (hdcmi->XferCount != 0U)
 80016c4:	b332      	cbz	r2, 8001714 <DCMI_DMAXferCplt+0x5a>
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 80016c6:	6819      	ldr	r1, [r3, #0]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 80016c8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80016ca:	f012 0201 	ands.w	r2, r2, #1
 80016ce:	d11a      	bne.n	8001706 <DCMI_DMAXferCplt+0x4c>
 80016d0:	0309      	lsls	r1, r1, #12
 80016d2:	d518      	bpl.n	8001706 <DCMI_DMAXferCplt+0x4c>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 80016d4:	68db      	ldr	r3, [r3, #12]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 80016d6:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 80016d8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80016dc:	f001 fcd0 	bl	8003080 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80016e0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80016e2:	3b01      	subs	r3, #1
 80016e4:	63a3      	str	r3, [r4, #56]	@ 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 80016e6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80016e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d10a      	bne.n	8001704 <DCMI_DMAXferCplt+0x4a>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80016ee:	6823      	ldr	r3, [r4, #0]
 80016f0:	68da      	ldr	r2, [r3, #12]
 80016f2:	f042 0201 	orr.w	r2, r2, #1
 80016f6:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	079b      	lsls	r3, r3, #30
 80016fc:	d502      	bpl.n	8001704 <DCMI_DMAXferCplt+0x4a>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 80016fe:	2301      	movs	r3, #1
 8001700:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    }
  }
}
 8001704:	bd10      	pop	{r4, pc}
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	0312      	lsls	r2, r2, #12
 800170a:	d4ec      	bmi.n	80016e6 <DCMI_DMAXferCplt+0x2c>
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 800170c:	691b      	ldr	r3, [r3, #16]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 800170e:	2201      	movs	r2, #1
 8001710:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8001712:	e7e1      	b.n	80016d8 <DCMI_DMAXferCplt+0x1e>
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 8001714:	681a      	ldr	r2, [r3, #0]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8001716:	6c21      	ldr	r1, [r4, #64]	@ 0x40
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 8001718:	0310      	lsls	r0, r2, #12
 800171a:	d502      	bpl.n	8001722 <DCMI_DMAXferCplt+0x68>
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 800171c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800171e:	60da      	str	r2, [r3, #12]
 8001720:	e7e1      	b.n	80016e6 <DCMI_DMAXferCplt+0x2c>
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	0312      	lsls	r2, r2, #12
 8001726:	d4de      	bmi.n	80016e6 <DCMI_DMAXferCplt+0x2c>
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 8001728:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800172a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800172c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8001730:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8001732:	63a1      	str	r1, [r4, #56]	@ 0x38
 8001734:	e7d7      	b.n	80016e6 <DCMI_DMAXferCplt+0x2c>
	...

08001738 <HAL_DCMI_Init>:
{
 8001738:	b538      	push	{r3, r4, r5, lr}
  if (hdcmi == NULL)
 800173a:	4604      	mov	r4, r0
 800173c:	2800      	cmp	r0, #0
 800173e:	d03f      	beq.n	80017c0 <HAL_DCMI_Init+0x88>
  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8001740:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8001744:	b90b      	cbnz	r3, 800174a <HAL_DCMI_Init+0x12>
    HAL_DCMI_MspInit(hdcmi);
 8001746:	f7ff fc1f 	bl	8000f88 <HAL_DCMI_MspInit>
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800174a:	2302      	movs	r3, #2
 800174c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8001750:	69a3      	ldr	r3, [r4, #24]
 8001752:	b10b      	cbz	r3, 8001758 <HAL_DCMI_Init+0x20>
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8001754:	2200      	movs	r2, #0
 8001756:	6262      	str	r2, [r4, #36]	@ 0x24
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8001758:	6822      	ldr	r2, [r4, #0]
 800175a:	491a      	ldr	r1, [pc, #104]	@ (80017c4 <HAL_DCMI_Init+0x8c>)
 800175c:	6810      	ldr	r0, [r2, #0]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800175e:	6965      	ldr	r5, [r4, #20]
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8001760:	4001      	ands	r1, r0
 8001762:	6011      	str	r1, [r2, #0]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001764:	6861      	ldr	r1, [r4, #4]
 8001766:	6810      	ldr	r0, [r2, #0]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001768:	430b      	orrs	r3, r1
  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800176a:	2910      	cmp	r1, #16
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800176c:	ea43 0305 	orr.w	r3, r3, r5
 8001770:	68e5      	ldr	r5, [r4, #12]
 8001772:	ea43 0305 	orr.w	r3, r3, r5
 8001776:	6925      	ldr	r5, [r4, #16]
 8001778:	ea43 0305 	orr.w	r3, r3, r5
 800177c:	68a5      	ldr	r5, [r4, #8]
 800177e:	ea43 0305 	orr.w	r3, r3, r5
 8001782:	6a25      	ldr	r5, [r4, #32]
 8001784:	ea43 0305 	orr.w	r3, r3, r5
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001788:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800178a:	ea43 0305 	orr.w	r3, r3, r5
 800178e:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8001790:	ea43 0305 	orr.w	r3, r3, r5
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001794:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8001796:	ea43 0305 	orr.w	r3, r3, r5
 800179a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800179c:	ea43 0305 	orr.w	r3, r3, r5
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80017a0:	ea43 0300 	orr.w	r3, r3, r0
 80017a4:	6013      	str	r3, [r2, #0]
  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80017a6:	d101      	bne.n	80017ac <HAL_DCMI_Init+0x74>
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80017a8:	69e3      	ldr	r3, [r4, #28]
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80017aa:	6193      	str	r3, [r2, #24]
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80017ac:	68d3      	ldr	r3, [r2, #12]
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80017ae:	2000      	movs	r0, #0
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80017b0:	f043 031e 	orr.w	r3, r3, #30
 80017b4:	60d3      	str	r3, [r2, #12]
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80017b6:	2301      	movs	r3, #1
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80017b8:	64e0      	str	r0, [r4, #76]	@ 0x4c
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80017ba:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
}
 80017be:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80017c0:	2001      	movs	r0, #1
 80017c2:	e7fc      	b.n	80017be <HAL_DCMI_Init+0x86>
 80017c4:	ffe0f007 	.word	0xffe0f007

080017c8 <HAL_DCMI_Start_DMA>:
{
 80017c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80017ca:	4604      	mov	r4, r0
  __HAL_LOCK(hdcmi);
 80017cc:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
{
 80017d0:	4615      	mov	r5, r2
  __HAL_LOCK(hdcmi);
 80017d2:	2801      	cmp	r0, #1
 80017d4:	f04f 0002 	mov.w	r0, #2
 80017d8:	d02f      	beq.n	800183a <HAL_DCMI_Start_DMA+0x72>
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80017da:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
  __HAL_LOCK(hdcmi);
 80017de:	2701      	movs	r7, #1
  __HAL_DCMI_ENABLE(hdcmi);
 80017e0:	6820      	ldr	r0, [r4, #0]
  if (Length <= 0xFFFFU)
 80017e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
  __HAL_LOCK(hdcmi);
 80017e6:	f884 7034 	strb.w	r7, [r4, #52]	@ 0x34
  __HAL_DCMI_ENABLE(hdcmi);
 80017ea:	6806      	ldr	r6, [r0, #0]
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80017ec:	f8df e0ac 	ldr.w	lr, [pc, #172]	@ 800189c <HAL_DCMI_Start_DMA+0xd4>
  __HAL_DCMI_ENABLE(hdcmi);
 80017f0:	f446 4680 	orr.w	r6, r6, #16384	@ 0x4000
 80017f4:	6006      	str	r6, [r0, #0]
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 80017f6:	6806      	ldr	r6, [r0, #0]
 80017f8:	f026 0602 	bic.w	r6, r6, #2
 80017fc:	6006      	str	r6, [r0, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 80017fe:	6806      	ldr	r6, [r0, #0]
 8001800:	ea46 0601 	orr.w	r6, r6, r1
 8001804:	4601      	mov	r1, r0
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8001806:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8001808:	f841 6b28 	str.w	r6, [r1], #40
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 800180c:	4e22      	ldr	r6, [pc, #136]	@ (8001898 <HAL_DCMI_Start_DMA+0xd0>)
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 800180e:	f8c0 e03c 	str.w	lr, [r0, #60]	@ 0x3c
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8001812:	64c6      	str	r6, [r0, #76]	@ 0x4c
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8001814:	f04f 0600 	mov.w	r6, #0
 8001818:	6506      	str	r6, [r0, #80]	@ 0x50
  hdcmi->XferCount = 0;
 800181a:	63a6      	str	r6, [r4, #56]	@ 0x38
  hdcmi->XferTransferNumber = 0;
 800181c:	6426      	str	r6, [r4, #64]	@ 0x40
  hdcmi->XferSize = 0;
 800181e:	63e6      	str	r6, [r4, #60]	@ 0x3c
  hdcmi->pBuffPtr = 0;
 8001820:	6466      	str	r6, [r4, #68]	@ 0x44
  if (Length <= 0xFFFFU)
 8001822:	d20c      	bcs.n	800183e <HAL_DCMI_Start_DMA+0x76>
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8001824:	f000 fc28 	bl	8002078 <HAL_DMA_Start_IT>
 8001828:	b368      	cbz	r0, 8001886 <HAL_DCMI_Start_DMA+0xbe>
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 800182a:	2340      	movs	r3, #64	@ 0x40
 800182c:	64e3      	str	r3, [r4, #76]	@ 0x4c
      hdcmi->State = HAL_DCMI_STATE_READY;
 800182e:	f884 7035 	strb.w	r7, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdcmi);
 8001832:	2300      	movs	r3, #0
      return HAL_ERROR;
 8001834:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdcmi);
 8001836:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 800183a:	b003      	add	sp, #12
 800183c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 800183e:	f8c0 e044 	str.w	lr, [r0, #68]	@ 0x44
    hdcmi->XferCount = 1;
 8001842:	63a7      	str	r7, [r4, #56]	@ 0x38
    hdcmi->pBuffPtr = pData;
 8001844:	6462      	str	r2, [r4, #68]	@ 0x44
    hdcmi->XferSize = Length;
 8001846:	63e3      	str	r3, [r4, #60]	@ 0x3c
    while (hdcmi->XferSize > 0xFFFFU)
 8001848:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800184a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800184e:	d213      	bcs.n	8001878 <HAL_DCMI_Start_DMA+0xb0>
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8001850:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001852:	3b02      	subs	r3, #2
 8001854:	63a3      	str	r3, [r4, #56]	@ 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8001856:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001858:	6423      	str	r3, [r4, #64]	@ 0x40
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 800185a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 800185c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800185e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001862:	9200      	str	r2, [sp, #0]
 8001864:	462a      	mov	r2, r5
 8001866:	f001 fa2b 	bl	8002cc0 <HAL_DMAEx_MultiBufferStart_IT>
 800186a:	b160      	cbz	r0, 8001886 <HAL_DCMI_Start_DMA+0xbe>
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 800186c:	2340      	movs	r3, #64	@ 0x40
 800186e:	64e3      	str	r3, [r4, #76]	@ 0x4c
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001870:	2301      	movs	r3, #1
 8001872:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      return HAL_ERROR;
 8001876:	e7dc      	b.n	8001832 <HAL_DCMI_Start_DMA+0x6a>
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8001878:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800187a:	085b      	lsrs	r3, r3, #1
 800187c:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 800187e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	63a3      	str	r3, [r4, #56]	@ 0x38
 8001884:	e7e0      	b.n	8001848 <HAL_DCMI_Start_DMA+0x80>
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001886:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdcmi);
 8001888:	2000      	movs	r0, #0
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 800188a:	6813      	ldr	r3, [r2, #0]
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hdcmi);
 8001892:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  return HAL_OK;
 8001896:	e7d0      	b.n	800183a <HAL_DCMI_Start_DMA+0x72>
 8001898:	08001917 	.word	0x08001917
 800189c:	080016bb 	.word	0x080016bb

080018a0 <HAL_DCMI_Stop>:
{
 80018a0:	b538      	push	{r3, r4, r5, lr}
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 80018a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001910 <HAL_DCMI_Stop+0x70>)
 80018a4:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
{
 80018a8:	4604      	mov	r4, r0
 80018aa:	2502      	movs	r5, #2
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80018b2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80018b6:	4353      	muls	r3, r2
  __HAL_LOCK(hdcmi);
 80018b8:	f890 2034 	ldrb.w	r2, [r0, #52]	@ 0x34
 80018bc:	2a01      	cmp	r2, #1
 80018be:	d01f      	beq.n	8001900 <HAL_DCMI_Stop+0x60>
 80018c0:	2201      	movs	r2, #1
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80018c2:	f880 5035 	strb.w	r5, [r0, #53]	@ 0x35
  __HAL_LOCK(hdcmi);
 80018c6:	f880 2034 	strb.w	r2, [r0, #52]	@ 0x34
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 80018ca:	6802      	ldr	r2, [r0, #0]
 80018cc:	6811      	ldr	r1, [r2, #0]
 80018ce:	f021 0101 	bic.w	r1, r1, #1
 80018d2:	6011      	str	r1, [r2, #0]
    if (count == 0U)
 80018d4:	3b01      	subs	r3, #1
 80018d6:	d115      	bne.n	8001904 <HAL_DCMI_Stop+0x64>
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 80018d8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
      status = HAL_TIMEOUT;
 80018da:	2503      	movs	r5, #3
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 80018dc:	f043 0320 	orr.w	r3, r3, #32
 80018e0:	64e3      	str	r3, [r4, #76]	@ 0x4c
  __HAL_DCMI_DISABLE(hdcmi);
 80018e2:	6813      	ldr	r3, [r2, #0]
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 80018e4:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
  __HAL_DCMI_DISABLE(hdcmi);
 80018e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80018ea:	6013      	str	r3, [r2, #0]
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 80018ec:	f000 fcde 	bl	80022ac <HAL_DMA_Abort>
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 80018f0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80018f2:	64e3      	str	r3, [r4, #76]	@ 0x4c
  hdcmi->State = HAL_DCMI_STATE_READY;
 80018f4:	2301      	movs	r3, #1
 80018f6:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdcmi);
 80018fa:	2300      	movs	r3, #0
 80018fc:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8001900:	4628      	mov	r0, r5
 8001902:	bd38      	pop	{r3, r4, r5, pc}
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8001904:	6815      	ldr	r5, [r2, #0]
 8001906:	f015 0501 	ands.w	r5, r5, #1
 800190a:	d1e3      	bne.n	80018d4 <HAL_DCMI_Stop+0x34>
 800190c:	e7e9      	b.n	80018e2 <HAL_DCMI_Stop+0x42>
 800190e:	bf00      	nop
 8001910:	2400000c 	.word	0x2400000c

08001914 <HAL_DCMI_ErrorCallback>:
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
 8001914:	4770      	bx	lr

08001916 <DCMI_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001916:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8001918:	b508      	push	{r3, lr}

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 800191a:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 800191c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800191e:	2b02      	cmp	r3, #2
 8001920:	d006      	beq.n	8001930 <DCMI_DMAError+0x1a>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8001922:	2301      	movs	r3, #1
 8001924:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8001928:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800192a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800192e:	64c3      	str	r3, [r0, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8001930:	f7ff fff0 	bl	8001914 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8001934:	bd08      	pop	{r3, pc}

08001936 <HAL_DCMI_LineEventCallback>:
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
 8001936:	4770      	bx	lr

08001938 <HAL_DCMI_VsyncEventCallback>:
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
 8001938:	4770      	bx	lr
	...

0800193c <HAL_DCMI_IRQHandler>:
{
 800193c:	b538      	push	{r3, r4, r5, lr}
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 800193e:	6803      	ldr	r3, [r0, #0]
{
 8001940:	4604      	mov	r4, r0
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8001942:	691d      	ldr	r5, [r3, #16]
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8001944:	0769      	lsls	r1, r5, #29
 8001946:	d50c      	bpl.n	8001962 <HAL_DCMI_IRQHandler+0x26>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8001948:	2204      	movs	r2, #4
 800194a:	615a      	str	r2, [r3, #20]
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 800194c:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800194e:	f043 0302 	orr.w	r3, r3, #2
 8001952:	64c3      	str	r3, [r0, #76]	@ 0x4c
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001954:	4b1d      	ldr	r3, [pc, #116]	@ (80019cc <HAL_DCMI_IRQHandler+0x90>)
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001956:	f880 2035 	strb.w	r2, [r0, #53]	@ 0x35
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800195a:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 800195c:	6503      	str	r3, [r0, #80]	@ 0x50
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800195e:	f000 fe4b 	bl	80025f8 <HAL_DMA_Abort_IT>
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8001962:	07aa      	lsls	r2, r5, #30
 8001964:	d50e      	bpl.n	8001984 <HAL_DCMI_IRQHandler+0x48>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8001966:	6823      	ldr	r3, [r4, #0]
 8001968:	2202      	movs	r2, #2
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800196a:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 800196c:	615a      	str	r2, [r3, #20]
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 800196e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	64e3      	str	r3, [r4, #76]	@ 0x4c
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001976:	2304      	movs	r3, #4
 8001978:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800197c:	4b13      	ldr	r3, [pc, #76]	@ (80019cc <HAL_DCMI_IRQHandler+0x90>)
 800197e:	6503      	str	r3, [r0, #80]	@ 0x50
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001980:	f000 fe3a 	bl	80025f8 <HAL_DMA_Abort_IT>
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8001984:	06eb      	lsls	r3, r5, #27
 8001986:	d505      	bpl.n	8001994 <HAL_DCMI_IRQHandler+0x58>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8001988:	6823      	ldr	r3, [r4, #0]
 800198a:	2210      	movs	r2, #16
    HAL_DCMI_LineEventCallback(hdcmi);
 800198c:	4620      	mov	r0, r4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800198e:	615a      	str	r2, [r3, #20]
    HAL_DCMI_LineEventCallback(hdcmi);
 8001990:	f7ff ffd1 	bl	8001936 <HAL_DCMI_LineEventCallback>
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8001994:	0728      	lsls	r0, r5, #28
 8001996:	d505      	bpl.n	80019a4 <HAL_DCMI_IRQHandler+0x68>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8001998:	6823      	ldr	r3, [r4, #0]
 800199a:	2208      	movs	r2, #8
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800199c:	4620      	mov	r0, r4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800199e:	615a      	str	r2, [r3, #20]
    HAL_DCMI_VsyncEventCallback(hdcmi);
 80019a0:	f7ff ffca 	bl	8001938 <HAL_DCMI_VsyncEventCallback>
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 80019a4:	07e9      	lsls	r1, r5, #31
 80019a6:	d510      	bpl.n	80019ca <HAL_DCMI_IRQHandler+0x8e>
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80019a8:	6823      	ldr	r3, [r4, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	0792      	lsls	r2, r2, #30
 80019ae:	d503      	bpl.n	80019b8 <HAL_DCMI_IRQHandler+0x7c>
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80019b0:	68da      	ldr	r2, [r3, #12]
 80019b2:	f022 021e 	bic.w	r2, r2, #30
 80019b6:	60da      	str	r2, [r3, #12]
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 80019b8:	68da      	ldr	r2, [r3, #12]
    HAL_DCMI_FrameEventCallback(hdcmi);
 80019ba:	4620      	mov	r0, r4
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 80019bc:	f022 0201 	bic.w	r2, r2, #1
 80019c0:	60da      	str	r2, [r3, #12]
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 80019c2:	2201      	movs	r2, #1
 80019c4:	615a      	str	r2, [r3, #20]
    HAL_DCMI_FrameEventCallback(hdcmi);
 80019c6:	f7fe ffbf 	bl	8000948 <HAL_DCMI_FrameEventCallback>
}
 80019ca:	bd38      	pop	{r3, r4, r5, pc}
 80019cc:	08001917 	.word	0x08001917

080019d0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80019d2:	f8df c17c 	ldr.w	ip, [pc, #380]	@ 8001b50 <DMA_SetConfig+0x180>
 80019d6:	6804      	ldr	r4, [r0, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019d8:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80019da:	4564      	cmp	r4, ip
 80019dc:	d045      	beq.n	8001a6a <DMA_SetConfig+0x9a>
 80019de:	4d59      	ldr	r5, [pc, #356]	@ (8001b44 <DMA_SetConfig+0x174>)
 80019e0:	42ac      	cmp	r4, r5
 80019e2:	d042      	beq.n	8001a6a <DMA_SetConfig+0x9a>
 80019e4:	3518      	adds	r5, #24
 80019e6:	42ac      	cmp	r4, r5
 80019e8:	d03f      	beq.n	8001a6a <DMA_SetConfig+0x9a>
 80019ea:	3518      	adds	r5, #24
 80019ec:	42ac      	cmp	r4, r5
 80019ee:	d03c      	beq.n	8001a6a <DMA_SetConfig+0x9a>
 80019f0:	3518      	adds	r5, #24
 80019f2:	42ac      	cmp	r4, r5
 80019f4:	d039      	beq.n	8001a6a <DMA_SetConfig+0x9a>
 80019f6:	3518      	adds	r5, #24
 80019f8:	42ac      	cmp	r4, r5
 80019fa:	d036      	beq.n	8001a6a <DMA_SetConfig+0x9a>
 80019fc:	3518      	adds	r5, #24
 80019fe:	42ac      	cmp	r4, r5
 8001a00:	d033      	beq.n	8001a6a <DMA_SetConfig+0x9a>
 8001a02:	3518      	adds	r5, #24
 8001a04:	42ac      	cmp	r4, r5
 8001a06:	d030      	beq.n	8001a6a <DMA_SetConfig+0x9a>
 8001a08:	f505 7556 	add.w	r5, r5, #856	@ 0x358
 8001a0c:	42ac      	cmp	r4, r5
 8001a0e:	d02c      	beq.n	8001a6a <DMA_SetConfig+0x9a>
 8001a10:	3518      	adds	r5, #24
 8001a12:	42ac      	cmp	r4, r5
 8001a14:	d029      	beq.n	8001a6a <DMA_SetConfig+0x9a>
 8001a16:	3518      	adds	r5, #24
 8001a18:	42ac      	cmp	r4, r5
 8001a1a:	d026      	beq.n	8001a6a <DMA_SetConfig+0x9a>
 8001a1c:	3518      	adds	r5, #24
 8001a1e:	42ac      	cmp	r4, r5
 8001a20:	d023      	beq.n	8001a6a <DMA_SetConfig+0x9a>
 8001a22:	3518      	adds	r5, #24
 8001a24:	42ac      	cmp	r4, r5
 8001a26:	d020      	beq.n	8001a6a <DMA_SetConfig+0x9a>
 8001a28:	3518      	adds	r5, #24
 8001a2a:	42ac      	cmp	r4, r5
 8001a2c:	d01d      	beq.n	8001a6a <DMA_SetConfig+0x9a>
 8001a2e:	3518      	adds	r5, #24
 8001a30:	42ac      	cmp	r4, r5
 8001a32:	d01a      	beq.n	8001a6a <DMA_SetConfig+0x9a>
 8001a34:	3518      	adds	r5, #24
 8001a36:	42ac      	cmp	r4, r5
 8001a38:	d017      	beq.n	8001a6a <DMA_SetConfig+0x9a>
 8001a3a:	4d43      	ldr	r5, [pc, #268]	@ (8001b48 <DMA_SetConfig+0x178>)
 8001a3c:	42ac      	cmp	r4, r5
 8001a3e:	d014      	beq.n	8001a6a <DMA_SetConfig+0x9a>
 8001a40:	3514      	adds	r5, #20
 8001a42:	42ac      	cmp	r4, r5
 8001a44:	d011      	beq.n	8001a6a <DMA_SetConfig+0x9a>
 8001a46:	3514      	adds	r5, #20
 8001a48:	42ac      	cmp	r4, r5
 8001a4a:	d00e      	beq.n	8001a6a <DMA_SetConfig+0x9a>
 8001a4c:	3514      	adds	r5, #20
 8001a4e:	42ac      	cmp	r4, r5
 8001a50:	d00b      	beq.n	8001a6a <DMA_SetConfig+0x9a>
 8001a52:	3514      	adds	r5, #20
 8001a54:	42ac      	cmp	r4, r5
 8001a56:	d008      	beq.n	8001a6a <DMA_SetConfig+0x9a>
 8001a58:	3514      	adds	r5, #20
 8001a5a:	42ac      	cmp	r4, r5
 8001a5c:	d005      	beq.n	8001a6a <DMA_SetConfig+0x9a>
 8001a5e:	3514      	adds	r5, #20
 8001a60:	42ac      	cmp	r4, r5
 8001a62:	d002      	beq.n	8001a6a <DMA_SetConfig+0x9a>
 8001a64:	3514      	adds	r5, #20
 8001a66:	42ac      	cmp	r4, r5
 8001a68:	d167      	bne.n	8001b3a <DMA_SetConfig+0x16a>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a6a:	e9d0 5619 	ldrd	r5, r6, [r0, #100]	@ 0x64
 8001a6e:	606e      	str	r6, [r5, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001a70:	6ec5      	ldr	r5, [r0, #108]	@ 0x6c
 8001a72:	b115      	cbz	r5, 8001a7a <DMA_SetConfig+0xaa>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a74:	e9d0 561c 	ldrd	r5, r6, [r0, #112]	@ 0x70
 8001a78:	606e      	str	r6, [r5, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a7a:	4564      	cmp	r4, ip
 8001a7c:	d037      	beq.n	8001aee <DMA_SetConfig+0x11e>
 8001a7e:	4d31      	ldr	r5, [pc, #196]	@ (8001b44 <DMA_SetConfig+0x174>)
 8001a80:	42ac      	cmp	r4, r5
 8001a82:	d034      	beq.n	8001aee <DMA_SetConfig+0x11e>
 8001a84:	3518      	adds	r5, #24
 8001a86:	42ac      	cmp	r4, r5
 8001a88:	d031      	beq.n	8001aee <DMA_SetConfig+0x11e>
 8001a8a:	3518      	adds	r5, #24
 8001a8c:	42ac      	cmp	r4, r5
 8001a8e:	d02e      	beq.n	8001aee <DMA_SetConfig+0x11e>
 8001a90:	3518      	adds	r5, #24
 8001a92:	42ac      	cmp	r4, r5
 8001a94:	d02b      	beq.n	8001aee <DMA_SetConfig+0x11e>
 8001a96:	3518      	adds	r5, #24
 8001a98:	42ac      	cmp	r4, r5
 8001a9a:	d028      	beq.n	8001aee <DMA_SetConfig+0x11e>
 8001a9c:	3518      	adds	r5, #24
 8001a9e:	42ac      	cmp	r4, r5
 8001aa0:	d025      	beq.n	8001aee <DMA_SetConfig+0x11e>
 8001aa2:	3518      	adds	r5, #24
 8001aa4:	42ac      	cmp	r4, r5
 8001aa6:	d022      	beq.n	8001aee <DMA_SetConfig+0x11e>
 8001aa8:	f505 7556 	add.w	r5, r5, #856	@ 0x358
 8001aac:	42ac      	cmp	r4, r5
 8001aae:	d01e      	beq.n	8001aee <DMA_SetConfig+0x11e>
 8001ab0:	3518      	adds	r5, #24
 8001ab2:	42ac      	cmp	r4, r5
 8001ab4:	d01b      	beq.n	8001aee <DMA_SetConfig+0x11e>
 8001ab6:	3518      	adds	r5, #24
 8001ab8:	42ac      	cmp	r4, r5
 8001aba:	d018      	beq.n	8001aee <DMA_SetConfig+0x11e>
 8001abc:	3518      	adds	r5, #24
 8001abe:	42ac      	cmp	r4, r5
 8001ac0:	d015      	beq.n	8001aee <DMA_SetConfig+0x11e>
 8001ac2:	3518      	adds	r5, #24
 8001ac4:	42ac      	cmp	r4, r5
 8001ac6:	d012      	beq.n	8001aee <DMA_SetConfig+0x11e>
 8001ac8:	3518      	adds	r5, #24
 8001aca:	42ac      	cmp	r4, r5
 8001acc:	d00f      	beq.n	8001aee <DMA_SetConfig+0x11e>
 8001ace:	3518      	adds	r5, #24
 8001ad0:	42ac      	cmp	r4, r5
 8001ad2:	d00c      	beq.n	8001aee <DMA_SetConfig+0x11e>
 8001ad4:	3518      	adds	r5, #24
 8001ad6:	42ac      	cmp	r4, r5
 8001ad8:	d009      	beq.n	8001aee <DMA_SetConfig+0x11e>

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001ada:	4d1b      	ldr	r5, [pc, #108]	@ (8001b48 <DMA_SetConfig+0x178>)
 8001adc:	42ac      	cmp	r4, r5
 8001ade:	d117      	bne.n	8001b10 <DMA_SetConfig+0x140>
  {
    /* Clear all flags */
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8001ae0:	6dc5      	ldr	r5, [r0, #92]	@ 0x5c
 8001ae2:	f005 061f 	and.w	r6, r5, #31
 8001ae6:	2501      	movs	r5, #1
 8001ae8:	40b5      	lsls	r5, r6
 8001aea:	607d      	str	r5, [r7, #4]
 8001aec:	e009      	b.n	8001b02 <DMA_SetConfig+0x132>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001aee:	6dc5      	ldr	r5, [r0, #92]	@ 0x5c
 8001af0:	f005 061f 	and.w	r6, r5, #31
 8001af4:	253f      	movs	r5, #63	@ 0x3f
 8001af6:	40b5      	lsls	r5, r6
 8001af8:	60bd      	str	r5, [r7, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001afa:	6825      	ldr	r5, [r4, #0]
 8001afc:	f425 2580 	bic.w	r5, r5, #262144	@ 0x40000
 8001b00:	6025      	str	r5, [r4, #0]

    /* Configure DMA Channel data length */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8001b02:	6063      	str	r3, [r4, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b04:	6883      	ldr	r3, [r0, #8]
 8001b06:	2b40      	cmp	r3, #64	@ 0x40
 8001b08:	d118      	bne.n	8001b3c <DMA_SetConfig+0x16c>
    {
      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8001b0a:	60a2      	str	r2, [r4, #8]

      /* Configure DMA Channel source address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8001b0c:	60e1      	str	r1, [r4, #12]
 8001b0e:	e014      	b.n	8001b3a <DMA_SetConfig+0x16a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001b10:	4d0e      	ldr	r5, [pc, #56]	@ (8001b4c <DMA_SetConfig+0x17c>)
 8001b12:	42ac      	cmp	r4, r5
 8001b14:	d0e4      	beq.n	8001ae0 <DMA_SetConfig+0x110>
 8001b16:	3514      	adds	r5, #20
 8001b18:	42ac      	cmp	r4, r5
 8001b1a:	d0e1      	beq.n	8001ae0 <DMA_SetConfig+0x110>
 8001b1c:	3514      	adds	r5, #20
 8001b1e:	42ac      	cmp	r4, r5
 8001b20:	d0de      	beq.n	8001ae0 <DMA_SetConfig+0x110>
 8001b22:	3514      	adds	r5, #20
 8001b24:	42ac      	cmp	r4, r5
 8001b26:	d0db      	beq.n	8001ae0 <DMA_SetConfig+0x110>
 8001b28:	3514      	adds	r5, #20
 8001b2a:	42ac      	cmp	r4, r5
 8001b2c:	d0d8      	beq.n	8001ae0 <DMA_SetConfig+0x110>
 8001b2e:	3514      	adds	r5, #20
 8001b30:	42ac      	cmp	r4, r5
 8001b32:	d0d5      	beq.n	8001ae0 <DMA_SetConfig+0x110>
 8001b34:	3514      	adds	r5, #20
 8001b36:	42ac      	cmp	r4, r5
 8001b38:	d0d2      	beq.n	8001ae0 <DMA_SetConfig+0x110>
  }
  else
  {
    /* Nothing To Do */
  }
}
 8001b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8001b3c:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8001b3e:	60e2      	str	r2, [r4, #12]
}
 8001b40:	e7fb      	b.n	8001b3a <DMA_SetConfig+0x16a>
 8001b42:	bf00      	nop
 8001b44:	40020028 	.word	0x40020028
 8001b48:	58025408 	.word	0x58025408
 8001b4c:	5802541c 	.word	0x5802541c
 8001b50:	40020010 	.word	0x40020010

08001b54 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b54:	6803      	ldr	r3, [r0, #0]
{
 8001b56:	4602      	mov	r2, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b58:	4923      	ldr	r1, [pc, #140]	@ (8001be8 <DMA_CalcBaseAndBitshift+0x94>)
 8001b5a:	428b      	cmp	r3, r1
{
 8001b5c:	b510      	push	{r4, lr}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b5e:	d031      	beq.n	8001bc4 <DMA_CalcBaseAndBitshift+0x70>
 8001b60:	3118      	adds	r1, #24
 8001b62:	428b      	cmp	r3, r1
 8001b64:	d02e      	beq.n	8001bc4 <DMA_CalcBaseAndBitshift+0x70>
 8001b66:	3118      	adds	r1, #24
 8001b68:	428b      	cmp	r3, r1
 8001b6a:	d02b      	beq.n	8001bc4 <DMA_CalcBaseAndBitshift+0x70>
 8001b6c:	3118      	adds	r1, #24
 8001b6e:	428b      	cmp	r3, r1
 8001b70:	d028      	beq.n	8001bc4 <DMA_CalcBaseAndBitshift+0x70>
 8001b72:	3118      	adds	r1, #24
 8001b74:	428b      	cmp	r3, r1
 8001b76:	d025      	beq.n	8001bc4 <DMA_CalcBaseAndBitshift+0x70>
 8001b78:	3118      	adds	r1, #24
 8001b7a:	428b      	cmp	r3, r1
 8001b7c:	d022      	beq.n	8001bc4 <DMA_CalcBaseAndBitshift+0x70>
 8001b7e:	3118      	adds	r1, #24
 8001b80:	428b      	cmp	r3, r1
 8001b82:	d01f      	beq.n	8001bc4 <DMA_CalcBaseAndBitshift+0x70>
 8001b84:	3118      	adds	r1, #24
 8001b86:	428b      	cmp	r3, r1
 8001b88:	d01c      	beq.n	8001bc4 <DMA_CalcBaseAndBitshift+0x70>
 8001b8a:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8001b8e:	428b      	cmp	r3, r1
 8001b90:	d018      	beq.n	8001bc4 <DMA_CalcBaseAndBitshift+0x70>
 8001b92:	3118      	adds	r1, #24
 8001b94:	428b      	cmp	r3, r1
 8001b96:	d015      	beq.n	8001bc4 <DMA_CalcBaseAndBitshift+0x70>
 8001b98:	3118      	adds	r1, #24
 8001b9a:	428b      	cmp	r3, r1
 8001b9c:	d012      	beq.n	8001bc4 <DMA_CalcBaseAndBitshift+0x70>
 8001b9e:	3118      	adds	r1, #24
 8001ba0:	428b      	cmp	r3, r1
 8001ba2:	d00f      	beq.n	8001bc4 <DMA_CalcBaseAndBitshift+0x70>
 8001ba4:	3118      	adds	r1, #24
 8001ba6:	428b      	cmp	r3, r1
 8001ba8:	d00c      	beq.n	8001bc4 <DMA_CalcBaseAndBitshift+0x70>
 8001baa:	3118      	adds	r1, #24
 8001bac:	428b      	cmp	r3, r1
 8001bae:	d009      	beq.n	8001bc4 <DMA_CalcBaseAndBitshift+0x70>
 8001bb0:	3118      	adds	r1, #24
 8001bb2:	428b      	cmp	r3, r1
 8001bb4:	d006      	beq.n	8001bc4 <DMA_CalcBaseAndBitshift+0x70>
 8001bb6:	3118      	adds	r1, #24
 8001bb8:	428b      	cmp	r3, r1
 8001bba:	d003      	beq.n	8001bc4 <DMA_CalcBaseAndBitshift+0x70>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8001bbc:	f023 00ff 	bic.w	r0, r3, #255	@ 0xff
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8001bc0:	6590      	str	r0, [r2, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
}
 8001bc2:	bd10      	pop	{r4, pc}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001bc4:	b2dc      	uxtb	r4, r3
 8001bc6:	2118      	movs	r1, #24
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8001bc8:	4808      	ldr	r0, [pc, #32]	@ (8001bec <DMA_CalcBaseAndBitshift+0x98>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001bca:	3c10      	subs	r4, #16
 8001bcc:	fbb4 f1f1 	udiv	r1, r4, r1
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8001bd0:	f001 0107 	and.w	r1, r1, #7
    if (stream_number > 3U)
 8001bd4:	2c5f      	cmp	r4, #95	@ 0x5f
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8001bd6:	5c41      	ldrb	r1, [r0, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8001bd8:	f423 707f 	bic.w	r0, r3, #1020	@ 0x3fc
 8001bdc:	f020 0003 	bic.w	r0, r0, #3
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8001be0:	65d1      	str	r1, [r2, #92]	@ 0x5c
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8001be2:	bf88      	it	hi
 8001be4:	3004      	addhi	r0, #4
 8001be6:	e7eb      	b.n	8001bc0 <DMA_CalcBaseAndBitshift+0x6c>
 8001be8:	40020010 	.word	0x40020010
 8001bec:	0800ec42 	.word	0x0800ec42

08001bf0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8001bf0:	6802      	ldr	r2, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001bf2:	4921      	ldr	r1, [pc, #132]	@ (8001c78 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001bf4:	b2d3      	uxtb	r3, r2
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001bf6:	428a      	cmp	r2, r1
 8001bf8:	d028      	beq.n	8001c4c <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 8001bfa:	3114      	adds	r1, #20
 8001bfc:	428a      	cmp	r2, r1
 8001bfe:	d025      	beq.n	8001c4c <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 8001c00:	3114      	adds	r1, #20
 8001c02:	428a      	cmp	r2, r1
 8001c04:	d022      	beq.n	8001c4c <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 8001c06:	3114      	adds	r1, #20
 8001c08:	428a      	cmp	r2, r1
 8001c0a:	d01f      	beq.n	8001c4c <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 8001c0c:	3114      	adds	r1, #20
 8001c0e:	428a      	cmp	r2, r1
 8001c10:	d01c      	beq.n	8001c4c <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 8001c12:	3114      	adds	r1, #20
 8001c14:	428a      	cmp	r2, r1
 8001c16:	d019      	beq.n	8001c4c <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 8001c18:	3114      	adds	r1, #20
 8001c1a:	428a      	cmp	r2, r1
 8001c1c:	d016      	beq.n	8001c4c <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 8001c1e:	3114      	adds	r1, #20
 8001c20:	428a      	cmp	r2, r1
 8001c22:	d013      	beq.n	8001c4c <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001c24:	2118      	movs	r1, #24
 8001c26:	3b10      	subs	r3, #16
 8001c28:	fbb3 f3f1 	udiv	r3, r3, r1

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8001c2c:	4913      	ldr	r1, [pc, #76]	@ (8001c7c <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8001c2e:	4411      	add	r1, r2
 8001c30:	29a8      	cmp	r1, #168	@ 0xa8
 8001c32:	d91e      	bls.n	8001c72 <DMA_CalcDMAMUXChannelBaseAndMask+0x82>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8001c34:	f103 5280 	add.w	r2, r3, #268435456	@ 0x10000000
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001c38:	2101      	movs	r1, #1
 8001c3a:	f003 031f 	and.w	r3, r3, #31
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8001c3e:	f502 4202 	add.w	r2, r2, #33280	@ 0x8200
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001c42:	fa01 f303 	lsl.w	r3, r1, r3
 8001c46:	490e      	ldr	r1, [pc, #56]	@ (8001c80 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8001c48:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001c4a:	e00e      	b.n	8001c6a <DMA_CalcDMAMUXChannelBaseAndMask+0x7a>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8001c4c:	2214      	movs	r2, #20
 8001c4e:	3b08      	subs	r3, #8
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001c50:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8001c52:	fbb3 f3f2 	udiv	r3, r3, r2
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001c56:	f103 52b0 	add.w	r2, r3, #369098752	@ 0x16000000
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001c5a:	f003 031f 	and.w	r3, r3, #31
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001c5e:	f502 4216 	add.w	r2, r2, #38400	@ 0x9600
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001c62:	fa01 f303 	lsl.w	r3, r1, r3
 8001c66:	4907      	ldr	r1, [pc, #28]	@ (8001c84 <DMA_CalcDMAMUXChannelBaseAndMask+0x94>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001c68:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001c6a:	6683      	str	r3, [r0, #104]	@ 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8001c6c:	e9c0 2118 	strd	r2, r1, [r0, #96]	@ 0x60
  }
}
 8001c70:	4770      	bx	lr
      stream_number += 8U;
 8001c72:	3308      	adds	r3, #8
 8001c74:	e7de      	b.n	8001c34 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>
 8001c76:	bf00      	nop
 8001c78:	58025408 	.word	0x58025408
 8001c7c:	bffdfbf0 	.word	0xbffdfbf0
 8001c80:	40020880 	.word	0x40020880
 8001c84:	58025880 	.word	0x58025880

08001c88 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001c88:	7902      	ldrb	r2, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8001c8a:	1e51      	subs	r1, r2, #1
 8001c8c:	2907      	cmp	r1, #7
{
 8001c8e:	b510      	push	{r4, lr}
  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8001c90:	d821      	bhi.n	8001cd6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4e>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001c92:	6803      	ldr	r3, [r0, #0]
 8001c94:	4c13      	ldr	r4, [pc, #76]	@ (8001ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x5c>)
 8001c96:	42a3      	cmp	r3, r4
 8001c98:	d01e      	beq.n	8001cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8001c9a:	3414      	adds	r4, #20
 8001c9c:	42a3      	cmp	r3, r4
 8001c9e:	d01b      	beq.n	8001cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8001ca0:	3414      	adds	r4, #20
 8001ca2:	42a3      	cmp	r3, r4
 8001ca4:	d018      	beq.n	8001cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8001ca6:	3414      	adds	r4, #20
 8001ca8:	42a3      	cmp	r3, r4
 8001caa:	d015      	beq.n	8001cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8001cac:	3414      	adds	r4, #20
 8001cae:	42a3      	cmp	r3, r4
 8001cb0:	d012      	beq.n	8001cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8001cb2:	3414      	adds	r4, #20
 8001cb4:	42a3      	cmp	r3, r4
 8001cb6:	d00f      	beq.n	8001cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8001cb8:	3414      	adds	r4, #20
 8001cba:	42a3      	cmp	r3, r4
 8001cbc:	d00c      	beq.n	8001cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8001cbe:	3414      	adds	r4, #20
 8001cc0:	42a3      	cmp	r3, r4
 8001cc2:	d009      	beq.n	8001cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001cc4:	4b08      	ldr	r3, [pc, #32]	@ (8001ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x60>)
 8001cc6:	4413      	add	r3, r2
 8001cc8:	4a08      	ldr	r2, [pc, #32]	@ (8001cec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x64>)
 8001cca:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8001ccc:	e9c0 321b 	strd	r3, r2, [r0, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	408b      	lsls	r3, r1
 8001cd4:	6743      	str	r3, [r0, #116]	@ 0x74
  }
}
 8001cd6:	bd10      	pop	{r4, pc}
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8001cd8:	4b05      	ldr	r3, [pc, #20]	@ (8001cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>)
 8001cda:	4413      	add	r3, r2
 8001cdc:	4a05      	ldr	r2, [pc, #20]	@ (8001cf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>)
 8001cde:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8001ce0:	e7f4      	b.n	8001ccc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>
 8001ce2:	bf00      	nop
 8001ce4:	58025408 	.word	0x58025408
 8001ce8:	1000823f 	.word	0x1000823f
 8001cec:	40020940 	.word	0x40020940
 8001cf0:	1600963f 	.word	0x1600963f
 8001cf4:	58025940 	.word	0x58025940

08001cf8 <HAL_DMA_Init>:
{
 8001cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cfa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001cfc:	f7ff fbf8 	bl	80014f0 <HAL_GetTick>
 8001d00:	4606      	mov	r6, r0
  if(hdma == NULL)
 8001d02:	2c00      	cmp	r4, #0
 8001d04:	f000 80ee 	beq.w	8001ee4 <HAL_DMA_Init+0x1ec>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001d08:	6823      	ldr	r3, [r4, #0]
 8001d0a:	4d83      	ldr	r5, [pc, #524]	@ (8001f18 <HAL_DMA_Init+0x220>)
 8001d0c:	42ab      	cmp	r3, r5
 8001d0e:	d06a      	beq.n	8001de6 <HAL_DMA_Init+0xee>
 8001d10:	4a82      	ldr	r2, [pc, #520]	@ (8001f1c <HAL_DMA_Init+0x224>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d067      	beq.n	8001de6 <HAL_DMA_Init+0xee>
 8001d16:	3218      	adds	r2, #24
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d064      	beq.n	8001de6 <HAL_DMA_Init+0xee>
 8001d1c:	3218      	adds	r2, #24
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d061      	beq.n	8001de6 <HAL_DMA_Init+0xee>
 8001d22:	3218      	adds	r2, #24
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d05e      	beq.n	8001de6 <HAL_DMA_Init+0xee>
 8001d28:	3218      	adds	r2, #24
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d05b      	beq.n	8001de6 <HAL_DMA_Init+0xee>
 8001d2e:	3218      	adds	r2, #24
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d058      	beq.n	8001de6 <HAL_DMA_Init+0xee>
 8001d34:	3218      	adds	r2, #24
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d055      	beq.n	8001de6 <HAL_DMA_Init+0xee>
 8001d3a:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d051      	beq.n	8001de6 <HAL_DMA_Init+0xee>
 8001d42:	3218      	adds	r2, #24
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d04e      	beq.n	8001de6 <HAL_DMA_Init+0xee>
 8001d48:	3218      	adds	r2, #24
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d04b      	beq.n	8001de6 <HAL_DMA_Init+0xee>
 8001d4e:	3218      	adds	r2, #24
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d048      	beq.n	8001de6 <HAL_DMA_Init+0xee>
 8001d54:	3218      	adds	r2, #24
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d045      	beq.n	8001de6 <HAL_DMA_Init+0xee>
 8001d5a:	3218      	adds	r2, #24
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d042      	beq.n	8001de6 <HAL_DMA_Init+0xee>
 8001d60:	3218      	adds	r2, #24
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d03f      	beq.n	8001de6 <HAL_DMA_Init+0xee>
 8001d66:	3218      	adds	r2, #24
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d03c      	beq.n	8001de6 <HAL_DMA_Init+0xee>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001d6c:	4a6c      	ldr	r2, [pc, #432]	@ (8001f20 <HAL_DMA_Init+0x228>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	f040 8157 	bne.w	8002022 <HAL_DMA_Init+0x32a>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d74:	2202      	movs	r2, #2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d76:	68a1      	ldr	r1, [r4, #8]
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d78:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8001d7c:	2200      	movs	r2, #0
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d7e:	2940      	cmp	r1, #64	@ 0x40
    __HAL_UNLOCK(hdma);
 8001d80:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001d84:	6818      	ldr	r0, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001d86:	f420 30ff 	bic.w	r0, r0, #130560	@ 0x1fe00
 8001d8a:	f420 70f8 	bic.w	r0, r0, #496	@ 0x1f0
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d8e:	f000 8166 	beq.w	800205e <HAL_DMA_Init+0x366>
 8001d92:	f1a1 0280 	sub.w	r2, r1, #128	@ 0x80
 8001d96:	4251      	negs	r1, r2
 8001d98:	4151      	adcs	r1, r2
 8001d9a:	0389      	lsls	r1, r1, #14
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001d9c:	e9d4 6203 	ldrd	r6, r2, [r4, #12]
 8001da0:	08d2      	lsrs	r2, r2, #3
 8001da2:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001da6:	6966      	ldr	r6, [r4, #20]
 8001da8:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001dac:	69a6      	ldr	r6, [r4, #24]
 8001dae:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001db2:	69e6      	ldr	r6, [r4, #28]
 8001db4:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001db8:	6a26      	ldr	r6, [r4, #32]
 8001dba:	ea42 1216 	orr.w	r2, r2, r6, lsr #4
 8001dbe:	4302      	orrs	r2, r0
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001dc0:	4620      	mov	r0, r4
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001dc2:	4311      	orrs	r1, r2
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001dc4:	4a57      	ldr	r2, [pc, #348]	@ (8001f24 <HAL_DMA_Init+0x22c>)
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001dc6:	6019      	str	r1, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001dc8:	441a      	add	r2, r3
 8001dca:	2314      	movs	r3, #20
 8001dcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dd0:	0092      	lsls	r2, r2, #2
 8001dd2:	65e2      	str	r2, [r4, #92]	@ 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001dd4:	f7ff febe 	bl	8001b54 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001dd8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001dda:	f003 021f 	and.w	r2, r3, #31
 8001dde:	2301      	movs	r3, #1
 8001de0:	4093      	lsls	r3, r2
 8001de2:	6043      	str	r3, [r0, #4]
 8001de4:	e0b4      	b.n	8001f50 <HAL_DMA_Init+0x258>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001de6:	2202      	movs	r2, #2
    __HAL_DMA_DISABLE(hdma);
 8001de8:	42ab      	cmp	r3, r5
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dea:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8001dee:	f04f 0200 	mov.w	r2, #0
 8001df2:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
    __HAL_DMA_DISABLE(hdma);
 8001df6:	d01e      	beq.n	8001e36 <HAL_DMA_Init+0x13e>
 8001df8:	4a48      	ldr	r2, [pc, #288]	@ (8001f1c <HAL_DMA_Init+0x224>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d01b      	beq.n	8001e36 <HAL_DMA_Init+0x13e>
 8001dfe:	3218      	adds	r2, #24
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d018      	beq.n	8001e36 <HAL_DMA_Init+0x13e>
 8001e04:	3218      	adds	r2, #24
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d015      	beq.n	8001e36 <HAL_DMA_Init+0x13e>
 8001e0a:	3218      	adds	r2, #24
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d012      	beq.n	8001e36 <HAL_DMA_Init+0x13e>
 8001e10:	3218      	adds	r2, #24
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d00f      	beq.n	8001e36 <HAL_DMA_Init+0x13e>
 8001e16:	3218      	adds	r2, #24
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d00c      	beq.n	8001e36 <HAL_DMA_Init+0x13e>
 8001e1c:	3218      	adds	r2, #24
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d009      	beq.n	8001e36 <HAL_DMA_Init+0x13e>
 8001e22:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d005      	beq.n	8001e36 <HAL_DMA_Init+0x13e>
 8001e2a:	3218      	adds	r2, #24
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d002      	beq.n	8001e36 <HAL_DMA_Init+0x13e>
 8001e30:	3218      	adds	r2, #24
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d0ff      	beq.n	8001e36 <HAL_DMA_Init+0x13e>
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	f022 0201 	bic.w	r2, r2, #1
 8001e3c:	601a      	str	r2, [r3, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001e3e:	6822      	ldr	r2, [r4, #0]
 8001e40:	6813      	ldr	r3, [r2, #0]
 8001e42:	07df      	lsls	r7, r3, #31
 8001e44:	d444      	bmi.n	8001ed0 <HAL_DMA_Init+0x1d8>
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001e46:	6813      	ldr	r3, [r2, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e48:	4837      	ldr	r0, [pc, #220]	@ (8001f28 <HAL_DMA_Init+0x230>)
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e4a:	69a1      	ldr	r1, [r4, #24]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e4c:	4018      	ands	r0, r3
    registerValue |=  hdma->Init.Direction           |
 8001e4e:	e9d4 3602 	ldrd	r3, r6, [r4, #8]
 8001e52:	4333      	orrs	r3, r6
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e54:	6926      	ldr	r6, [r4, #16]
 8001e56:	4333      	orrs	r3, r6
 8001e58:	6966      	ldr	r6, [r4, #20]
 8001e5a:	4333      	orrs	r3, r6
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e5c:	69e6      	ldr	r6, [r4, #28]
 8001e5e:	430b      	orrs	r3, r1
 8001e60:	4333      	orrs	r3, r6
            hdma->Init.Mode                | hdma->Init.Priority;
 8001e62:	6a26      	ldr	r6, [r4, #32]
 8001e64:	4333      	orrs	r3, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e66:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8001e68:	2e04      	cmp	r6, #4
    registerValue |=  hdma->Init.Direction           |
 8001e6a:	ea43 0300 	orr.w	r3, r3, r0
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e6e:	bf02      	ittt	eq
 8001e70:	e9d4 070b 	ldrdeq	r0, r7, [r4, #44]	@ 0x2c
 8001e74:	4338      	orreq	r0, r7
 8001e76:	4303      	orreq	r3, r0
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001e78:	482c      	ldr	r0, [pc, #176]	@ (8001f2c <HAL_DMA_Init+0x234>)
 8001e7a:	6800      	ldr	r0, [r0, #0]
 8001e7c:	0c00      	lsrs	r0, r0, #16
 8001e7e:	0400      	lsls	r0, r0, #16
 8001e80:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 8001e84:	d30e      	bcc.n	8001ea4 <HAL_DMA_Init+0x1ac>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001e86:	6860      	ldr	r0, [r4, #4]
 8001e88:	f1a0 0729 	sub.w	r7, r0, #41	@ 0x29
 8001e8c:	2f05      	cmp	r7, #5
 8001e8e:	d907      	bls.n	8001ea0 <HAL_DMA_Init+0x1a8>
 8001e90:	383f      	subs	r0, #63	@ 0x3f
 8001e92:	2813      	cmp	r0, #19
 8001e94:	d806      	bhi.n	8001ea4 <HAL_DMA_Init+0x1ac>
 8001e96:	4f26      	ldr	r7, [pc, #152]	@ (8001f30 <HAL_DMA_Init+0x238>)
 8001e98:	fa27 f000 	lsr.w	r0, r7, r0
 8001e9c:	07c0      	lsls	r0, r0, #31
 8001e9e:	d501      	bpl.n	8001ea4 <HAL_DMA_Init+0x1ac>
        registerValue |= DMA_SxCR_TRBUFF;
 8001ea0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001ea4:	6013      	str	r3, [r2, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ea6:	2e04      	cmp	r6, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001ea8:	6953      	ldr	r3, [r2, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001eaa:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8001eae:	ea43 0306 	orr.w	r3, r3, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001eb2:	d143      	bne.n	8001f3c <HAL_DMA_Init+0x244>
      registerValue |= hdma->Init.FIFOThreshold;
 8001eb4:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001eb6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 8001eb8:	4303      	orrs	r3, r0
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001eba:	2e00      	cmp	r6, #0
 8001ebc:	d03e      	beq.n	8001f3c <HAL_DMA_Init+0x244>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001ebe:	b999      	cbnz	r1, 8001ee8 <HAL_DMA_Init+0x1f0>
    switch (hdma->Init.FIFOThreshold)
 8001ec0:	2801      	cmp	r0, #1
 8001ec2:	d021      	beq.n	8001f08 <HAL_DMA_Init+0x210>
 8001ec4:	f030 0102 	bics.w	r1, r0, #2
 8001ec8:	d138      	bne.n	8001f3c <HAL_DMA_Init+0x244>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001eca:	01f1      	lsls	r1, r6, #7
 8001ecc:	d536      	bpl.n	8001f3c <HAL_DMA_Init+0x244>
 8001ece:	e01e      	b.n	8001f0e <HAL_DMA_Init+0x216>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ed0:	f7ff fb0e 	bl	80014f0 <HAL_GetTick>
 8001ed4:	1b80      	subs	r0, r0, r6
 8001ed6:	2805      	cmp	r0, #5
 8001ed8:	d9b1      	bls.n	8001e3e <HAL_DMA_Init+0x146>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001eda:	2320      	movs	r3, #32
 8001edc:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 8001ee4:	2001      	movs	r0, #1
}
 8001ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ee8:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8001eec:	d122      	bne.n	8001f34 <HAL_DMA_Init+0x23c>
    switch (hdma->Init.FIFOThreshold)
 8001eee:	2803      	cmp	r0, #3
 8001ef0:	d824      	bhi.n	8001f3c <HAL_DMA_Init+0x244>
 8001ef2:	a101      	add	r1, pc, #4	@ (adr r1, 8001ef8 <HAL_DMA_Init+0x200>)
 8001ef4:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 8001ef8:	08001f0f 	.word	0x08001f0f
 8001efc:	08001ecb 	.word	0x08001ecb
 8001f00:	08001f0f 	.word	0x08001f0f
 8001f04:	08001f09 	.word	0x08001f09
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f08:	f1b6 7fc0 	cmp.w	r6, #25165824	@ 0x1800000
 8001f0c:	d116      	bne.n	8001f3c <HAL_DMA_Init+0x244>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f0e:	2340      	movs	r3, #64	@ 0x40
 8001f10:	6563      	str	r3, [r4, #84]	@ 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e7e4      	b.n	8001ee0 <HAL_DMA_Init+0x1e8>
 8001f16:	bf00      	nop
 8001f18:	40020010 	.word	0x40020010
 8001f1c:	40020028 	.word	0x40020028
 8001f20:	58025408 	.word	0x58025408
 8001f24:	a7fdabf8 	.word	0xa7fdabf8
 8001f28:	fe10803f 	.word	0xfe10803f
 8001f2c:	5c001000 	.word	0x5c001000
 8001f30:	000f030f 	.word	0x000f030f
    switch (hdma->Init.FIFOThreshold)
 8001f34:	2802      	cmp	r0, #2
 8001f36:	d9ea      	bls.n	8001f0e <HAL_DMA_Init+0x216>
 8001f38:	2803      	cmp	r0, #3
 8001f3a:	d0c6      	beq.n	8001eca <HAL_DMA_Init+0x1d2>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001f3c:	6153      	str	r3, [r2, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f3e:	4620      	mov	r0, r4
 8001f40:	f7ff fe08 	bl	8001b54 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001f44:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001f46:	f003 021f 	and.w	r2, r3, #31
 8001f4a:	233f      	movs	r3, #63	@ 0x3f
 8001f4c:	4093      	lsls	r3, r2
 8001f4e:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f50:	6823      	ldr	r3, [r4, #0]
 8001f52:	42ab      	cmp	r3, r5
 8001f54:	d045      	beq.n	8001fe2 <HAL_DMA_Init+0x2ea>
 8001f56:	4a45      	ldr	r2, [pc, #276]	@ (800206c <HAL_DMA_Init+0x374>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d042      	beq.n	8001fe2 <HAL_DMA_Init+0x2ea>
 8001f5c:	3218      	adds	r2, #24
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d03f      	beq.n	8001fe2 <HAL_DMA_Init+0x2ea>
 8001f62:	3218      	adds	r2, #24
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d03c      	beq.n	8001fe2 <HAL_DMA_Init+0x2ea>
 8001f68:	3218      	adds	r2, #24
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d039      	beq.n	8001fe2 <HAL_DMA_Init+0x2ea>
 8001f6e:	3218      	adds	r2, #24
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d036      	beq.n	8001fe2 <HAL_DMA_Init+0x2ea>
 8001f74:	3218      	adds	r2, #24
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d033      	beq.n	8001fe2 <HAL_DMA_Init+0x2ea>
 8001f7a:	3218      	adds	r2, #24
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d030      	beq.n	8001fe2 <HAL_DMA_Init+0x2ea>
 8001f80:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d02c      	beq.n	8001fe2 <HAL_DMA_Init+0x2ea>
 8001f88:	3218      	adds	r2, #24
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d029      	beq.n	8001fe2 <HAL_DMA_Init+0x2ea>
 8001f8e:	3218      	adds	r2, #24
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d026      	beq.n	8001fe2 <HAL_DMA_Init+0x2ea>
 8001f94:	3218      	adds	r2, #24
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d023      	beq.n	8001fe2 <HAL_DMA_Init+0x2ea>
 8001f9a:	3218      	adds	r2, #24
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d020      	beq.n	8001fe2 <HAL_DMA_Init+0x2ea>
 8001fa0:	3218      	adds	r2, #24
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d01d      	beq.n	8001fe2 <HAL_DMA_Init+0x2ea>
 8001fa6:	3218      	adds	r2, #24
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d01a      	beq.n	8001fe2 <HAL_DMA_Init+0x2ea>
 8001fac:	3218      	adds	r2, #24
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d017      	beq.n	8001fe2 <HAL_DMA_Init+0x2ea>
 8001fb2:	4a2f      	ldr	r2, [pc, #188]	@ (8002070 <HAL_DMA_Init+0x378>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d014      	beq.n	8001fe2 <HAL_DMA_Init+0x2ea>
 8001fb8:	3214      	adds	r2, #20
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d011      	beq.n	8001fe2 <HAL_DMA_Init+0x2ea>
 8001fbe:	3214      	adds	r2, #20
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d00e      	beq.n	8001fe2 <HAL_DMA_Init+0x2ea>
 8001fc4:	3214      	adds	r2, #20
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d00b      	beq.n	8001fe2 <HAL_DMA_Init+0x2ea>
 8001fca:	3214      	adds	r2, #20
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d008      	beq.n	8001fe2 <HAL_DMA_Init+0x2ea>
 8001fd0:	3214      	adds	r2, #20
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d005      	beq.n	8001fe2 <HAL_DMA_Init+0x2ea>
 8001fd6:	3214      	adds	r2, #20
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d002      	beq.n	8001fe2 <HAL_DMA_Init+0x2ea>
 8001fdc:	3214      	adds	r2, #20
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d119      	bne.n	8002016 <HAL_DMA_Init+0x31e>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001fe2:	4620      	mov	r0, r4
 8001fe4:	2500      	movs	r5, #0
 8001fe6:	f7ff fe03 	bl	8001bf0 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001fea:	68a3      	ldr	r3, [r4, #8]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001fec:	6e22      	ldr	r2, [r4, #96]	@ 0x60
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001fee:	2b80      	cmp	r3, #128	@ 0x80
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001ff0:	bf04      	itt	eq
 8001ff2:	2300      	moveq	r3, #0
 8001ff4:	6063      	streq	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001ff6:	6863      	ldr	r3, [r4, #4]
 8001ff8:	b2d9      	uxtb	r1, r3
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001ffa:	3b01      	subs	r3, #1
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001ffc:	6011      	str	r1, [r2, #0]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001ffe:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002000:	e9d4 2119 	ldrd	r2, r1, [r4, #100]	@ 0x64
 8002004:	6051      	str	r1, [r2, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002006:	d82c      	bhi.n	8002062 <HAL_DMA_Init+0x36a>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002008:	f7ff fe3e 	bl	8001c88 <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800200c:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800200e:	601d      	str	r5, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002010:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	@ 0x70
 8002014:	605a      	str	r2, [r3, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002016:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002018:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800201a:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800201c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8002020:	e761      	b.n	8001ee6 <HAL_DMA_Init+0x1ee>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002022:	4a14      	ldr	r2, [pc, #80]	@ (8002074 <HAL_DMA_Init+0x37c>)
 8002024:	4293      	cmp	r3, r2
 8002026:	f43f aea5 	beq.w	8001d74 <HAL_DMA_Init+0x7c>
 800202a:	3214      	adds	r2, #20
 800202c:	4293      	cmp	r3, r2
 800202e:	f43f aea1 	beq.w	8001d74 <HAL_DMA_Init+0x7c>
 8002032:	3214      	adds	r2, #20
 8002034:	4293      	cmp	r3, r2
 8002036:	f43f ae9d 	beq.w	8001d74 <HAL_DMA_Init+0x7c>
 800203a:	3214      	adds	r2, #20
 800203c:	4293      	cmp	r3, r2
 800203e:	f43f ae99 	beq.w	8001d74 <HAL_DMA_Init+0x7c>
 8002042:	3214      	adds	r2, #20
 8002044:	4293      	cmp	r3, r2
 8002046:	f43f ae95 	beq.w	8001d74 <HAL_DMA_Init+0x7c>
 800204a:	3214      	adds	r2, #20
 800204c:	4293      	cmp	r3, r2
 800204e:	f43f ae91 	beq.w	8001d74 <HAL_DMA_Init+0x7c>
 8002052:	3214      	adds	r2, #20
 8002054:	4293      	cmp	r3, r2
 8002056:	f43f ae8d 	beq.w	8001d74 <HAL_DMA_Init+0x7c>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800205a:	2340      	movs	r3, #64	@ 0x40
 800205c:	e73e      	b.n	8001edc <HAL_DMA_Init+0x1e4>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800205e:	2110      	movs	r1, #16
 8002060:	e69c      	b.n	8001d9c <HAL_DMA_Init+0xa4>
      hdma->DMAmuxRequestGenStatus = 0U;
 8002062:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002066:	6765      	str	r5, [r4, #116]	@ 0x74
 8002068:	e7d5      	b.n	8002016 <HAL_DMA_Init+0x31e>
 800206a:	bf00      	nop
 800206c:	40020028 	.word	0x40020028
 8002070:	58025408 	.word	0x58025408
 8002074:	5802541c 	.word	0x5802541c

08002078 <HAL_DMA_Start_IT>:
{
 8002078:	b570      	push	{r4, r5, r6, lr}
  if(hdma == NULL)
 800207a:	2800      	cmp	r0, #0
 800207c:	f000 810a 	beq.w	8002294 <HAL_DMA_Start_IT+0x21c>
  __HAL_LOCK(hdma);
 8002080:	f890 4034 	ldrb.w	r4, [r0, #52]	@ 0x34
 8002084:	2c01      	cmp	r4, #1
 8002086:	f000 8107 	beq.w	8002298 <HAL_DMA_Start_IT+0x220>
 800208a:	2401      	movs	r4, #1
 800208c:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002090:	f890 4035 	ldrb.w	r4, [r0, #53]	@ 0x35
 8002094:	2c01      	cmp	r4, #1
 8002096:	f04f 0400 	mov.w	r4, #0
 800209a:	f040 80f6 	bne.w	800228a <HAL_DMA_Start_IT+0x212>
    hdma->State = HAL_DMA_STATE_BUSY;
 800209e:	2502      	movs	r5, #2
 80020a0:	f880 5035 	strb.w	r5, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 80020a4:	4d7d      	ldr	r5, [pc, #500]	@ (800229c <HAL_DMA_Start_IT+0x224>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020a6:	6544      	str	r4, [r0, #84]	@ 0x54
    __HAL_DMA_DISABLE(hdma);
 80020a8:	6804      	ldr	r4, [r0, #0]
 80020aa:	42ac      	cmp	r4, r5
 80020ac:	d01e      	beq.n	80020ec <HAL_DMA_Start_IT+0x74>
 80020ae:	4e7c      	ldr	r6, [pc, #496]	@ (80022a0 <HAL_DMA_Start_IT+0x228>)
 80020b0:	42b4      	cmp	r4, r6
 80020b2:	d01b      	beq.n	80020ec <HAL_DMA_Start_IT+0x74>
 80020b4:	3618      	adds	r6, #24
 80020b6:	42b4      	cmp	r4, r6
 80020b8:	d018      	beq.n	80020ec <HAL_DMA_Start_IT+0x74>
 80020ba:	3618      	adds	r6, #24
 80020bc:	42b4      	cmp	r4, r6
 80020be:	d015      	beq.n	80020ec <HAL_DMA_Start_IT+0x74>
 80020c0:	3618      	adds	r6, #24
 80020c2:	42b4      	cmp	r4, r6
 80020c4:	d012      	beq.n	80020ec <HAL_DMA_Start_IT+0x74>
 80020c6:	3618      	adds	r6, #24
 80020c8:	42b4      	cmp	r4, r6
 80020ca:	d00f      	beq.n	80020ec <HAL_DMA_Start_IT+0x74>
 80020cc:	3618      	adds	r6, #24
 80020ce:	42b4      	cmp	r4, r6
 80020d0:	d00c      	beq.n	80020ec <HAL_DMA_Start_IT+0x74>
 80020d2:	3618      	adds	r6, #24
 80020d4:	42b4      	cmp	r4, r6
 80020d6:	d009      	beq.n	80020ec <HAL_DMA_Start_IT+0x74>
 80020d8:	f506 7656 	add.w	r6, r6, #856	@ 0x358
 80020dc:	42b4      	cmp	r4, r6
 80020de:	d005      	beq.n	80020ec <HAL_DMA_Start_IT+0x74>
 80020e0:	3618      	adds	r6, #24
 80020e2:	42b4      	cmp	r4, r6
 80020e4:	d002      	beq.n	80020ec <HAL_DMA_Start_IT+0x74>
 80020e6:	3618      	adds	r6, #24
 80020e8:	42b4      	cmp	r4, r6
 80020ea:	d0ff      	beq.n	80020ec <HAL_DMA_Start_IT+0x74>
 80020ec:	6826      	ldr	r6, [r4, #0]
 80020ee:	f026 0601 	bic.w	r6, r6, #1
 80020f2:	6026      	str	r6, [r4, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020f4:	f7ff fc6c 	bl	80019d0 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80020f8:	42ac      	cmp	r4, r5
 80020fa:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80020fc:	d053      	beq.n	80021a6 <HAL_DMA_Start_IT+0x12e>
 80020fe:	4b68      	ldr	r3, [pc, #416]	@ (80022a0 <HAL_DMA_Start_IT+0x228>)
 8002100:	429c      	cmp	r4, r3
 8002102:	d050      	beq.n	80021a6 <HAL_DMA_Start_IT+0x12e>
 8002104:	3318      	adds	r3, #24
 8002106:	429c      	cmp	r4, r3
 8002108:	d04d      	beq.n	80021a6 <HAL_DMA_Start_IT+0x12e>
 800210a:	3318      	adds	r3, #24
 800210c:	429c      	cmp	r4, r3
 800210e:	d04a      	beq.n	80021a6 <HAL_DMA_Start_IT+0x12e>
 8002110:	3318      	adds	r3, #24
 8002112:	429c      	cmp	r4, r3
 8002114:	d047      	beq.n	80021a6 <HAL_DMA_Start_IT+0x12e>
 8002116:	3318      	adds	r3, #24
 8002118:	429c      	cmp	r4, r3
 800211a:	d044      	beq.n	80021a6 <HAL_DMA_Start_IT+0x12e>
 800211c:	3318      	adds	r3, #24
 800211e:	429c      	cmp	r4, r3
 8002120:	d041      	beq.n	80021a6 <HAL_DMA_Start_IT+0x12e>
 8002122:	3318      	adds	r3, #24
 8002124:	429c      	cmp	r4, r3
 8002126:	d03e      	beq.n	80021a6 <HAL_DMA_Start_IT+0x12e>
 8002128:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800212c:	429c      	cmp	r4, r3
 800212e:	d03a      	beq.n	80021a6 <HAL_DMA_Start_IT+0x12e>
 8002130:	3318      	adds	r3, #24
 8002132:	429c      	cmp	r4, r3
 8002134:	d037      	beq.n	80021a6 <HAL_DMA_Start_IT+0x12e>
 8002136:	3318      	adds	r3, #24
 8002138:	429c      	cmp	r4, r3
 800213a:	d034      	beq.n	80021a6 <HAL_DMA_Start_IT+0x12e>
 800213c:	3318      	adds	r3, #24
 800213e:	429c      	cmp	r4, r3
 8002140:	d031      	beq.n	80021a6 <HAL_DMA_Start_IT+0x12e>
 8002142:	3318      	adds	r3, #24
 8002144:	429c      	cmp	r4, r3
 8002146:	d02e      	beq.n	80021a6 <HAL_DMA_Start_IT+0x12e>
 8002148:	3318      	adds	r3, #24
 800214a:	429c      	cmp	r4, r3
 800214c:	d02b      	beq.n	80021a6 <HAL_DMA_Start_IT+0x12e>
 800214e:	3318      	adds	r3, #24
 8002150:	429c      	cmp	r4, r3
 8002152:	d028      	beq.n	80021a6 <HAL_DMA_Start_IT+0x12e>
 8002154:	3318      	adds	r3, #24
 8002156:	429c      	cmp	r4, r3
 8002158:	d025      	beq.n	80021a6 <HAL_DMA_Start_IT+0x12e>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800215a:	6823      	ldr	r3, [r4, #0]
 800215c:	f023 030e 	bic.w	r3, r3, #14
 8002160:	f043 030a 	orr.w	r3, r3, #10
 8002164:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8002166:	2a00      	cmp	r2, #0
 8002168:	d156      	bne.n	8002218 <HAL_DMA_Start_IT+0x1a0>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800216a:	4b4e      	ldr	r3, [pc, #312]	@ (80022a4 <HAL_DMA_Start_IT+0x22c>)
 800216c:	429c      	cmp	r4, r3
 800216e:	d027      	beq.n	80021c0 <HAL_DMA_Start_IT+0x148>
 8002170:	4b4d      	ldr	r3, [pc, #308]	@ (80022a8 <HAL_DMA_Start_IT+0x230>)
 8002172:	429c      	cmp	r4, r3
 8002174:	d024      	beq.n	80021c0 <HAL_DMA_Start_IT+0x148>
 8002176:	3314      	adds	r3, #20
 8002178:	429c      	cmp	r4, r3
 800217a:	d021      	beq.n	80021c0 <HAL_DMA_Start_IT+0x148>
 800217c:	3314      	adds	r3, #20
 800217e:	429c      	cmp	r4, r3
 8002180:	d01e      	beq.n	80021c0 <HAL_DMA_Start_IT+0x148>
 8002182:	3314      	adds	r3, #20
 8002184:	429c      	cmp	r4, r3
 8002186:	d01b      	beq.n	80021c0 <HAL_DMA_Start_IT+0x148>
 8002188:	3314      	adds	r3, #20
 800218a:	429c      	cmp	r4, r3
 800218c:	d018      	beq.n	80021c0 <HAL_DMA_Start_IT+0x148>
 800218e:	3314      	adds	r3, #20
 8002190:	429c      	cmp	r4, r3
 8002192:	d015      	beq.n	80021c0 <HAL_DMA_Start_IT+0x148>
 8002194:	3314      	adds	r3, #20
 8002196:	429c      	cmp	r4, r3
 8002198:	d012      	beq.n	80021c0 <HAL_DMA_Start_IT+0x148>
    __HAL_DMA_ENABLE(hdma);
 800219a:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800219c:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800219e:	f043 0301 	orr.w	r3, r3, #1
 80021a2:	6023      	str	r3, [r4, #0]
}
 80021a4:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80021a6:	6823      	ldr	r3, [r4, #0]
 80021a8:	f023 031e 	bic.w	r3, r3, #30
 80021ac:	f043 0316 	orr.w	r3, r3, #22
 80021b0:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80021b2:	b11a      	cbz	r2, 80021bc <HAL_DMA_Start_IT+0x144>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80021b4:	6823      	ldr	r3, [r4, #0]
 80021b6:	f043 0308 	orr.w	r3, r3, #8
 80021ba:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021bc:	42ac      	cmp	r4, r5
 80021be:	d130      	bne.n	8002222 <HAL_DMA_Start_IT+0x1aa>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80021c0:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	03d2      	lsls	r2, r2, #15
 80021c6:	d45b      	bmi.n	8002280 <HAL_DMA_Start_IT+0x208>
      if(hdma->DMAmuxRequestGen != 0U)
 80021c8:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80021ca:	b11b      	cbz	r3, 80021d4 <HAL_DMA_Start_IT+0x15c>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021d2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80021d4:	42ac      	cmp	r4, r5
 80021d6:	d0e0      	beq.n	800219a <HAL_DMA_Start_IT+0x122>
 80021d8:	4b31      	ldr	r3, [pc, #196]	@ (80022a0 <HAL_DMA_Start_IT+0x228>)
 80021da:	429c      	cmp	r4, r3
 80021dc:	d0dd      	beq.n	800219a <HAL_DMA_Start_IT+0x122>
 80021de:	3318      	adds	r3, #24
 80021e0:	429c      	cmp	r4, r3
 80021e2:	d0da      	beq.n	800219a <HAL_DMA_Start_IT+0x122>
 80021e4:	3318      	adds	r3, #24
 80021e6:	429c      	cmp	r4, r3
 80021e8:	d0d7      	beq.n	800219a <HAL_DMA_Start_IT+0x122>
 80021ea:	3318      	adds	r3, #24
 80021ec:	429c      	cmp	r4, r3
 80021ee:	d0d4      	beq.n	800219a <HAL_DMA_Start_IT+0x122>
 80021f0:	3318      	adds	r3, #24
 80021f2:	429c      	cmp	r4, r3
 80021f4:	d0d1      	beq.n	800219a <HAL_DMA_Start_IT+0x122>
 80021f6:	3318      	adds	r3, #24
 80021f8:	429c      	cmp	r4, r3
 80021fa:	d0ce      	beq.n	800219a <HAL_DMA_Start_IT+0x122>
 80021fc:	3318      	adds	r3, #24
 80021fe:	429c      	cmp	r4, r3
 8002200:	d0cb      	beq.n	800219a <HAL_DMA_Start_IT+0x122>
 8002202:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8002206:	429c      	cmp	r4, r3
 8002208:	d0c7      	beq.n	800219a <HAL_DMA_Start_IT+0x122>
 800220a:	3318      	adds	r3, #24
 800220c:	429c      	cmp	r4, r3
 800220e:	d0c4      	beq.n	800219a <HAL_DMA_Start_IT+0x122>
 8002210:	3318      	adds	r3, #24
 8002212:	429c      	cmp	r4, r3
 8002214:	d0c1      	beq.n	800219a <HAL_DMA_Start_IT+0x122>
 8002216:	e7c0      	b.n	800219a <HAL_DMA_Start_IT+0x122>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002218:	6823      	ldr	r3, [r4, #0]
 800221a:	f043 0304 	orr.w	r3, r3, #4
 800221e:	6023      	str	r3, [r4, #0]
 8002220:	e7a3      	b.n	800216a <HAL_DMA_Start_IT+0xf2>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002222:	4b1f      	ldr	r3, [pc, #124]	@ (80022a0 <HAL_DMA_Start_IT+0x228>)
 8002224:	429c      	cmp	r4, r3
 8002226:	d0cb      	beq.n	80021c0 <HAL_DMA_Start_IT+0x148>
 8002228:	3318      	adds	r3, #24
 800222a:	429c      	cmp	r4, r3
 800222c:	d0c8      	beq.n	80021c0 <HAL_DMA_Start_IT+0x148>
 800222e:	3318      	adds	r3, #24
 8002230:	429c      	cmp	r4, r3
 8002232:	d0c5      	beq.n	80021c0 <HAL_DMA_Start_IT+0x148>
 8002234:	3318      	adds	r3, #24
 8002236:	429c      	cmp	r4, r3
 8002238:	d0c2      	beq.n	80021c0 <HAL_DMA_Start_IT+0x148>
 800223a:	3318      	adds	r3, #24
 800223c:	429c      	cmp	r4, r3
 800223e:	d0bf      	beq.n	80021c0 <HAL_DMA_Start_IT+0x148>
 8002240:	3318      	adds	r3, #24
 8002242:	429c      	cmp	r4, r3
 8002244:	d0bc      	beq.n	80021c0 <HAL_DMA_Start_IT+0x148>
 8002246:	3318      	adds	r3, #24
 8002248:	429c      	cmp	r4, r3
 800224a:	d0b9      	beq.n	80021c0 <HAL_DMA_Start_IT+0x148>
 800224c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8002250:	429c      	cmp	r4, r3
 8002252:	d0b5      	beq.n	80021c0 <HAL_DMA_Start_IT+0x148>
 8002254:	3318      	adds	r3, #24
 8002256:	429c      	cmp	r4, r3
 8002258:	d0b2      	beq.n	80021c0 <HAL_DMA_Start_IT+0x148>
 800225a:	3318      	adds	r3, #24
 800225c:	429c      	cmp	r4, r3
 800225e:	d0af      	beq.n	80021c0 <HAL_DMA_Start_IT+0x148>
 8002260:	3318      	adds	r3, #24
 8002262:	429c      	cmp	r4, r3
 8002264:	d0ac      	beq.n	80021c0 <HAL_DMA_Start_IT+0x148>
 8002266:	3318      	adds	r3, #24
 8002268:	429c      	cmp	r4, r3
 800226a:	d0a9      	beq.n	80021c0 <HAL_DMA_Start_IT+0x148>
 800226c:	3318      	adds	r3, #24
 800226e:	429c      	cmp	r4, r3
 8002270:	d0a6      	beq.n	80021c0 <HAL_DMA_Start_IT+0x148>
 8002272:	3318      	adds	r3, #24
 8002274:	429c      	cmp	r4, r3
 8002276:	d0a3      	beq.n	80021c0 <HAL_DMA_Start_IT+0x148>
 8002278:	3318      	adds	r3, #24
 800227a:	429c      	cmp	r4, r3
 800227c:	d0a0      	beq.n	80021c0 <HAL_DMA_Start_IT+0x148>
 800227e:	e774      	b.n	800216a <HAL_DMA_Start_IT+0xf2>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	e79e      	b.n	80021c8 <HAL_DMA_Start_IT+0x150>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800228a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    __HAL_UNLOCK(hdma);
 800228e:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002292:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8002294:	2001      	movs	r0, #1
 8002296:	e785      	b.n	80021a4 <HAL_DMA_Start_IT+0x12c>
  __HAL_LOCK(hdma);
 8002298:	2002      	movs	r0, #2
 800229a:	e783      	b.n	80021a4 <HAL_DMA_Start_IT+0x12c>
 800229c:	40020010 	.word	0x40020010
 80022a0:	40020028 	.word	0x40020028
 80022a4:	58025408 	.word	0x58025408
 80022a8:	5802541c 	.word	0x5802541c

080022ac <HAL_DMA_Abort>:
{
 80022ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ae:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 80022b0:	f7ff f91e 	bl	80014f0 <HAL_GetTick>
 80022b4:	4607      	mov	r7, r0
  if(hdma == NULL)
 80022b6:	b145      	cbz	r5, 80022ca <HAL_DMA_Abort+0x1e>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022b8:	f895 3035 	ldrb.w	r3, [r5, #53]	@ 0x35
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d006      	beq.n	80022ce <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022c0:	2380      	movs	r3, #128	@ 0x80
 80022c2:	656b      	str	r3, [r5, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 80022c4:	2300      	movs	r3, #0
 80022c6:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    return HAL_ERROR;
 80022ca:	2001      	movs	r0, #1
}
 80022cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022ce:	682c      	ldr	r4, [r5, #0]
 80022d0:	4ea9      	ldr	r6, [pc, #676]	@ (8002578 <HAL_DMA_Abort+0x2cc>)
 80022d2:	42b4      	cmp	r4, r6
 80022d4:	d04a      	beq.n	800236c <HAL_DMA_Abort+0xc0>
 80022d6:	4ba9      	ldr	r3, [pc, #676]	@ (800257c <HAL_DMA_Abort+0x2d0>)
 80022d8:	429c      	cmp	r4, r3
 80022da:	d047      	beq.n	800236c <HAL_DMA_Abort+0xc0>
 80022dc:	3318      	adds	r3, #24
 80022de:	429c      	cmp	r4, r3
 80022e0:	d044      	beq.n	800236c <HAL_DMA_Abort+0xc0>
 80022e2:	3318      	adds	r3, #24
 80022e4:	429c      	cmp	r4, r3
 80022e6:	d041      	beq.n	800236c <HAL_DMA_Abort+0xc0>
 80022e8:	3318      	adds	r3, #24
 80022ea:	429c      	cmp	r4, r3
 80022ec:	d03e      	beq.n	800236c <HAL_DMA_Abort+0xc0>
 80022ee:	3318      	adds	r3, #24
 80022f0:	429c      	cmp	r4, r3
 80022f2:	d03b      	beq.n	800236c <HAL_DMA_Abort+0xc0>
 80022f4:	3318      	adds	r3, #24
 80022f6:	429c      	cmp	r4, r3
 80022f8:	d038      	beq.n	800236c <HAL_DMA_Abort+0xc0>
 80022fa:	3318      	adds	r3, #24
 80022fc:	429c      	cmp	r4, r3
 80022fe:	d035      	beq.n	800236c <HAL_DMA_Abort+0xc0>
 8002300:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8002304:	429c      	cmp	r4, r3
 8002306:	d031      	beq.n	800236c <HAL_DMA_Abort+0xc0>
 8002308:	3318      	adds	r3, #24
 800230a:	429c      	cmp	r4, r3
 800230c:	d02e      	beq.n	800236c <HAL_DMA_Abort+0xc0>
 800230e:	3318      	adds	r3, #24
 8002310:	429c      	cmp	r4, r3
 8002312:	d02b      	beq.n	800236c <HAL_DMA_Abort+0xc0>
 8002314:	3318      	adds	r3, #24
 8002316:	429c      	cmp	r4, r3
 8002318:	d028      	beq.n	800236c <HAL_DMA_Abort+0xc0>
 800231a:	3318      	adds	r3, #24
 800231c:	429c      	cmp	r4, r3
 800231e:	d025      	beq.n	800236c <HAL_DMA_Abort+0xc0>
 8002320:	3318      	adds	r3, #24
 8002322:	429c      	cmp	r4, r3
 8002324:	d022      	beq.n	800236c <HAL_DMA_Abort+0xc0>
 8002326:	3318      	adds	r3, #24
 8002328:	429c      	cmp	r4, r3
 800232a:	d01f      	beq.n	800236c <HAL_DMA_Abort+0xc0>
 800232c:	3318      	adds	r3, #24
 800232e:	429c      	cmp	r4, r3
 8002330:	d01c      	beq.n	800236c <HAL_DMA_Abort+0xc0>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002332:	6823      	ldr	r3, [r4, #0]
 8002334:	f023 030e 	bic.w	r3, r3, #14
 8002338:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800233a:	4b91      	ldr	r3, [pc, #580]	@ (8002580 <HAL_DMA_Abort+0x2d4>)
 800233c:	429c      	cmp	r4, r3
 800233e:	d01f      	beq.n	8002380 <HAL_DMA_Abort+0xd4>
 8002340:	3314      	adds	r3, #20
 8002342:	429c      	cmp	r4, r3
 8002344:	d01c      	beq.n	8002380 <HAL_DMA_Abort+0xd4>
 8002346:	3314      	adds	r3, #20
 8002348:	429c      	cmp	r4, r3
 800234a:	d019      	beq.n	8002380 <HAL_DMA_Abort+0xd4>
 800234c:	3314      	adds	r3, #20
 800234e:	429c      	cmp	r4, r3
 8002350:	d016      	beq.n	8002380 <HAL_DMA_Abort+0xd4>
 8002352:	3314      	adds	r3, #20
 8002354:	429c      	cmp	r4, r3
 8002356:	d013      	beq.n	8002380 <HAL_DMA_Abort+0xd4>
 8002358:	3314      	adds	r3, #20
 800235a:	429c      	cmp	r4, r3
 800235c:	d010      	beq.n	8002380 <HAL_DMA_Abort+0xd4>
 800235e:	3314      	adds	r3, #20
 8002360:	429c      	cmp	r4, r3
 8002362:	d00d      	beq.n	8002380 <HAL_DMA_Abort+0xd4>
 8002364:	3314      	adds	r3, #20
 8002366:	429c      	cmp	r4, r3
 8002368:	d112      	bne.n	8002390 <HAL_DMA_Abort+0xe4>
 800236a:	e009      	b.n	8002380 <HAL_DMA_Abort+0xd4>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800236c:	6823      	ldr	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800236e:	42b4      	cmp	r4, r6
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002370:	f023 031e 	bic.w	r3, r3, #30
 8002374:	6023      	str	r3, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002376:	6963      	ldr	r3, [r4, #20]
 8002378:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800237c:	6163      	str	r3, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800237e:	d176      	bne.n	800246e <HAL_DMA_Abort+0x1c2>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002380:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
    __HAL_DMA_DISABLE(hdma);
 8002382:	42b4      	cmp	r4, r6
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002384:	6813      	ldr	r3, [r2, #0]
 8002386:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800238a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800238c:	f040 80ab 	bne.w	80024e6 <HAL_DMA_Abort+0x23a>
 8002390:	6823      	ldr	r3, [r4, #0]
 8002392:	f023 0301 	bic.w	r3, r3, #1
 8002396:	6023      	str	r3, [r4, #0]
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002398:	6823      	ldr	r3, [r4, #0]
 800239a:	07db      	lsls	r3, r3, #31
 800239c:	f100 80cd 	bmi.w	800253a <HAL_DMA_Abort+0x28e>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80023a0:	682b      	ldr	r3, [r5, #0]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80023a2:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80023a4:	42b3      	cmp	r3, r6
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80023a6:	6da8      	ldr	r0, [r5, #88]	@ 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80023a8:	f002 021f 	and.w	r2, r2, #31
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80023ac:	f000 80d1 	beq.w	8002552 <HAL_DMA_Abort+0x2a6>
 80023b0:	4972      	ldr	r1, [pc, #456]	@ (800257c <HAL_DMA_Abort+0x2d0>)
 80023b2:	428b      	cmp	r3, r1
 80023b4:	f000 80cd 	beq.w	8002552 <HAL_DMA_Abort+0x2a6>
 80023b8:	3118      	adds	r1, #24
 80023ba:	428b      	cmp	r3, r1
 80023bc:	f000 80c9 	beq.w	8002552 <HAL_DMA_Abort+0x2a6>
 80023c0:	3118      	adds	r1, #24
 80023c2:	428b      	cmp	r3, r1
 80023c4:	f000 80c5 	beq.w	8002552 <HAL_DMA_Abort+0x2a6>
 80023c8:	3118      	adds	r1, #24
 80023ca:	428b      	cmp	r3, r1
 80023cc:	f000 80c1 	beq.w	8002552 <HAL_DMA_Abort+0x2a6>
 80023d0:	3118      	adds	r1, #24
 80023d2:	428b      	cmp	r3, r1
 80023d4:	f000 80bd 	beq.w	8002552 <HAL_DMA_Abort+0x2a6>
 80023d8:	3118      	adds	r1, #24
 80023da:	428b      	cmp	r3, r1
 80023dc:	f000 80b9 	beq.w	8002552 <HAL_DMA_Abort+0x2a6>
 80023e0:	3118      	adds	r1, #24
 80023e2:	428b      	cmp	r3, r1
 80023e4:	f000 80b5 	beq.w	8002552 <HAL_DMA_Abort+0x2a6>
 80023e8:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 80023ec:	428b      	cmp	r3, r1
 80023ee:	f000 80b0 	beq.w	8002552 <HAL_DMA_Abort+0x2a6>
 80023f2:	3118      	adds	r1, #24
 80023f4:	428b      	cmp	r3, r1
 80023f6:	f000 80ac 	beq.w	8002552 <HAL_DMA_Abort+0x2a6>
 80023fa:	3118      	adds	r1, #24
 80023fc:	428b      	cmp	r3, r1
 80023fe:	f000 80a8 	beq.w	8002552 <HAL_DMA_Abort+0x2a6>
 8002402:	3118      	adds	r1, #24
 8002404:	428b      	cmp	r3, r1
 8002406:	f000 80a4 	beq.w	8002552 <HAL_DMA_Abort+0x2a6>
 800240a:	3118      	adds	r1, #24
 800240c:	428b      	cmp	r3, r1
 800240e:	f000 80a0 	beq.w	8002552 <HAL_DMA_Abort+0x2a6>
 8002412:	3118      	adds	r1, #24
 8002414:	428b      	cmp	r3, r1
 8002416:	f000 809c 	beq.w	8002552 <HAL_DMA_Abort+0x2a6>
 800241a:	3118      	adds	r1, #24
 800241c:	428b      	cmp	r3, r1
 800241e:	f000 8098 	beq.w	8002552 <HAL_DMA_Abort+0x2a6>
 8002422:	3118      	adds	r1, #24
 8002424:	428b      	cmp	r3, r1
 8002426:	f000 8094 	beq.w	8002552 <HAL_DMA_Abort+0x2a6>
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800242a:	2101      	movs	r1, #1
 800242c:	fa01 f202 	lsl.w	r2, r1, r2
 8002430:	6042      	str	r2, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002432:	4a53      	ldr	r2, [pc, #332]	@ (8002580 <HAL_DMA_Abort+0x2d4>)
 8002434:	4293      	cmp	r3, r2
 8002436:	f000 8092 	beq.w	800255e <HAL_DMA_Abort+0x2b2>
 800243a:	3214      	adds	r2, #20
 800243c:	4293      	cmp	r3, r2
 800243e:	f000 808e 	beq.w	800255e <HAL_DMA_Abort+0x2b2>
 8002442:	3214      	adds	r2, #20
 8002444:	4293      	cmp	r3, r2
 8002446:	f000 808a 	beq.w	800255e <HAL_DMA_Abort+0x2b2>
 800244a:	3214      	adds	r2, #20
 800244c:	4293      	cmp	r3, r2
 800244e:	f000 8086 	beq.w	800255e <HAL_DMA_Abort+0x2b2>
 8002452:	3214      	adds	r2, #20
 8002454:	4293      	cmp	r3, r2
 8002456:	f000 8082 	beq.w	800255e <HAL_DMA_Abort+0x2b2>
 800245a:	3214      	adds	r2, #20
 800245c:	4293      	cmp	r3, r2
 800245e:	d07e      	beq.n	800255e <HAL_DMA_Abort+0x2b2>
 8002460:	3214      	adds	r2, #20
 8002462:	4293      	cmp	r3, r2
 8002464:	d07b      	beq.n	800255e <HAL_DMA_Abort+0x2b2>
 8002466:	3214      	adds	r2, #20
 8002468:	4293      	cmp	r3, r2
 800246a:	d17e      	bne.n	800256a <HAL_DMA_Abort+0x2be>
 800246c:	e077      	b.n	800255e <HAL_DMA_Abort+0x2b2>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800246e:	4b43      	ldr	r3, [pc, #268]	@ (800257c <HAL_DMA_Abort+0x2d0>)
 8002470:	429c      	cmp	r4, r3
 8002472:	d085      	beq.n	8002380 <HAL_DMA_Abort+0xd4>
 8002474:	3318      	adds	r3, #24
 8002476:	429c      	cmp	r4, r3
 8002478:	d082      	beq.n	8002380 <HAL_DMA_Abort+0xd4>
 800247a:	3318      	adds	r3, #24
 800247c:	429c      	cmp	r4, r3
 800247e:	f43f af7f 	beq.w	8002380 <HAL_DMA_Abort+0xd4>
 8002482:	3318      	adds	r3, #24
 8002484:	429c      	cmp	r4, r3
 8002486:	f43f af7b 	beq.w	8002380 <HAL_DMA_Abort+0xd4>
 800248a:	3318      	adds	r3, #24
 800248c:	429c      	cmp	r4, r3
 800248e:	f43f af77 	beq.w	8002380 <HAL_DMA_Abort+0xd4>
 8002492:	3318      	adds	r3, #24
 8002494:	429c      	cmp	r4, r3
 8002496:	f43f af73 	beq.w	8002380 <HAL_DMA_Abort+0xd4>
 800249a:	3318      	adds	r3, #24
 800249c:	429c      	cmp	r4, r3
 800249e:	f43f af6f 	beq.w	8002380 <HAL_DMA_Abort+0xd4>
 80024a2:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80024a6:	429c      	cmp	r4, r3
 80024a8:	f43f af6a 	beq.w	8002380 <HAL_DMA_Abort+0xd4>
 80024ac:	3318      	adds	r3, #24
 80024ae:	429c      	cmp	r4, r3
 80024b0:	f43f af66 	beq.w	8002380 <HAL_DMA_Abort+0xd4>
 80024b4:	3318      	adds	r3, #24
 80024b6:	429c      	cmp	r4, r3
 80024b8:	f43f af62 	beq.w	8002380 <HAL_DMA_Abort+0xd4>
 80024bc:	3318      	adds	r3, #24
 80024be:	429c      	cmp	r4, r3
 80024c0:	f43f af5e 	beq.w	8002380 <HAL_DMA_Abort+0xd4>
 80024c4:	3318      	adds	r3, #24
 80024c6:	429c      	cmp	r4, r3
 80024c8:	f43f af5a 	beq.w	8002380 <HAL_DMA_Abort+0xd4>
 80024cc:	3318      	adds	r3, #24
 80024ce:	429c      	cmp	r4, r3
 80024d0:	f43f af56 	beq.w	8002380 <HAL_DMA_Abort+0xd4>
 80024d4:	3318      	adds	r3, #24
 80024d6:	429c      	cmp	r4, r3
 80024d8:	f43f af52 	beq.w	8002380 <HAL_DMA_Abort+0xd4>
 80024dc:	3318      	adds	r3, #24
 80024de:	429c      	cmp	r4, r3
 80024e0:	f43f af4e 	beq.w	8002380 <HAL_DMA_Abort+0xd4>
 80024e4:	e729      	b.n	800233a <HAL_DMA_Abort+0x8e>
    __HAL_DMA_DISABLE(hdma);
 80024e6:	4b25      	ldr	r3, [pc, #148]	@ (800257c <HAL_DMA_Abort+0x2d0>)
 80024e8:	429c      	cmp	r4, r3
 80024ea:	f43f af51 	beq.w	8002390 <HAL_DMA_Abort+0xe4>
 80024ee:	3318      	adds	r3, #24
 80024f0:	429c      	cmp	r4, r3
 80024f2:	f43f af4d 	beq.w	8002390 <HAL_DMA_Abort+0xe4>
 80024f6:	3318      	adds	r3, #24
 80024f8:	429c      	cmp	r4, r3
 80024fa:	f43f af49 	beq.w	8002390 <HAL_DMA_Abort+0xe4>
 80024fe:	3318      	adds	r3, #24
 8002500:	429c      	cmp	r4, r3
 8002502:	f43f af45 	beq.w	8002390 <HAL_DMA_Abort+0xe4>
 8002506:	3318      	adds	r3, #24
 8002508:	429c      	cmp	r4, r3
 800250a:	f43f af41 	beq.w	8002390 <HAL_DMA_Abort+0xe4>
 800250e:	3318      	adds	r3, #24
 8002510:	429c      	cmp	r4, r3
 8002512:	f43f af3d 	beq.w	8002390 <HAL_DMA_Abort+0xe4>
 8002516:	3318      	adds	r3, #24
 8002518:	429c      	cmp	r4, r3
 800251a:	f43f af39 	beq.w	8002390 <HAL_DMA_Abort+0xe4>
 800251e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8002522:	429c      	cmp	r4, r3
 8002524:	f43f af34 	beq.w	8002390 <HAL_DMA_Abort+0xe4>
 8002528:	3318      	adds	r3, #24
 800252a:	429c      	cmp	r4, r3
 800252c:	f43f af30 	beq.w	8002390 <HAL_DMA_Abort+0xe4>
 8002530:	3318      	adds	r3, #24
 8002532:	429c      	cmp	r4, r3
 8002534:	f43f af2c 	beq.w	8002390 <HAL_DMA_Abort+0xe4>
 8002538:	e72a      	b.n	8002390 <HAL_DMA_Abort+0xe4>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800253a:	f7fe ffd9 	bl	80014f0 <HAL_GetTick>
 800253e:	1bc0      	subs	r0, r0, r7
 8002540:	2805      	cmp	r0, #5
 8002542:	f67f af29 	bls.w	8002398 <HAL_DMA_Abort+0xec>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002546:	2320      	movs	r3, #32
 8002548:	656b      	str	r3, [r5, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 800254a:	2303      	movs	r3, #3
 800254c:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8002550:	e6b8      	b.n	80022c4 <HAL_DMA_Abort+0x18>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002552:	213f      	movs	r1, #63	@ 0x3f
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002554:	42b3      	cmp	r3, r6
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002556:	fa01 f202 	lsl.w	r2, r1, r2
 800255a:	6082      	str	r2, [r0, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800255c:	d112      	bne.n	8002584 <HAL_DMA_Abort+0x2d8>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800255e:	e9d5 3219 	ldrd	r3, r2, [r5, #100]	@ 0x64
 8002562:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8002564:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 8002566:	2b00      	cmp	r3, #0
 8002568:	d13b      	bne.n	80025e2 <HAL_DMA_Abort+0x336>
    hdma->State = HAL_DMA_STATE_READY;
 800256a:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 800256c:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 800256e:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8002572:	f885 0034 	strb.w	r0, [r5, #52]	@ 0x34
  return HAL_OK;
 8002576:	e6a9      	b.n	80022cc <HAL_DMA_Abort+0x20>
 8002578:	40020010 	.word	0x40020010
 800257c:	40020028 	.word	0x40020028
 8002580:	58025408 	.word	0x58025408
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002584:	4a1b      	ldr	r2, [pc, #108]	@ (80025f4 <HAL_DMA_Abort+0x348>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d0e9      	beq.n	800255e <HAL_DMA_Abort+0x2b2>
 800258a:	3218      	adds	r2, #24
 800258c:	4293      	cmp	r3, r2
 800258e:	d0e6      	beq.n	800255e <HAL_DMA_Abort+0x2b2>
 8002590:	3218      	adds	r2, #24
 8002592:	4293      	cmp	r3, r2
 8002594:	d0e3      	beq.n	800255e <HAL_DMA_Abort+0x2b2>
 8002596:	3218      	adds	r2, #24
 8002598:	4293      	cmp	r3, r2
 800259a:	d0e0      	beq.n	800255e <HAL_DMA_Abort+0x2b2>
 800259c:	3218      	adds	r2, #24
 800259e:	4293      	cmp	r3, r2
 80025a0:	d0dd      	beq.n	800255e <HAL_DMA_Abort+0x2b2>
 80025a2:	3218      	adds	r2, #24
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d0da      	beq.n	800255e <HAL_DMA_Abort+0x2b2>
 80025a8:	3218      	adds	r2, #24
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d0d7      	beq.n	800255e <HAL_DMA_Abort+0x2b2>
 80025ae:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d0d3      	beq.n	800255e <HAL_DMA_Abort+0x2b2>
 80025b6:	3218      	adds	r2, #24
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d0d0      	beq.n	800255e <HAL_DMA_Abort+0x2b2>
 80025bc:	3218      	adds	r2, #24
 80025be:	4293      	cmp	r3, r2
 80025c0:	d0cd      	beq.n	800255e <HAL_DMA_Abort+0x2b2>
 80025c2:	3218      	adds	r2, #24
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d0ca      	beq.n	800255e <HAL_DMA_Abort+0x2b2>
 80025c8:	3218      	adds	r2, #24
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d0c7      	beq.n	800255e <HAL_DMA_Abort+0x2b2>
 80025ce:	3218      	adds	r2, #24
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d0c4      	beq.n	800255e <HAL_DMA_Abort+0x2b2>
 80025d4:	3218      	adds	r2, #24
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d0c1      	beq.n	800255e <HAL_DMA_Abort+0x2b2>
 80025da:	3218      	adds	r2, #24
 80025dc:	4293      	cmp	r3, r2
 80025de:	d0be      	beq.n	800255e <HAL_DMA_Abort+0x2b2>
 80025e0:	e727      	b.n	8002432 <HAL_DMA_Abort+0x186>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80025e8:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025ea:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	@ 0x70
 80025ee:	605a      	str	r2, [r3, #4]
 80025f0:	e7bb      	b.n	800256a <HAL_DMA_Abort+0x2be>
 80025f2:	bf00      	nop
 80025f4:	40020028 	.word	0x40020028

080025f8 <HAL_DMA_Abort_IT>:
{
 80025f8:	b508      	push	{r3, lr}
  if(hdma == NULL)
 80025fa:	b128      	cbz	r0, 8002608 <HAL_DMA_Abort_IT+0x10>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025fc:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8002600:	2b02      	cmp	r3, #2
 8002602:	d003      	beq.n	800260c <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002604:	2380      	movs	r3, #128	@ 0x80
 8002606:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8002608:	2001      	movs	r0, #1
 800260a:	e05d      	b.n	80026c8 <HAL_DMA_Abort_IT+0xd0>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800260c:	6803      	ldr	r3, [r0, #0]
 800260e:	4a3f      	ldr	r2, [pc, #252]	@ (800270c <HAL_DMA_Abort_IT+0x114>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d051      	beq.n	80026b8 <HAL_DMA_Abort_IT+0xc0>
 8002614:	3218      	adds	r2, #24
 8002616:	4293      	cmp	r3, r2
 8002618:	d04e      	beq.n	80026b8 <HAL_DMA_Abort_IT+0xc0>
 800261a:	3218      	adds	r2, #24
 800261c:	4293      	cmp	r3, r2
 800261e:	d04b      	beq.n	80026b8 <HAL_DMA_Abort_IT+0xc0>
 8002620:	3218      	adds	r2, #24
 8002622:	4293      	cmp	r3, r2
 8002624:	d048      	beq.n	80026b8 <HAL_DMA_Abort_IT+0xc0>
 8002626:	3218      	adds	r2, #24
 8002628:	4293      	cmp	r3, r2
 800262a:	d045      	beq.n	80026b8 <HAL_DMA_Abort_IT+0xc0>
 800262c:	3218      	adds	r2, #24
 800262e:	4293      	cmp	r3, r2
 8002630:	d042      	beq.n	80026b8 <HAL_DMA_Abort_IT+0xc0>
 8002632:	3218      	adds	r2, #24
 8002634:	4293      	cmp	r3, r2
 8002636:	d03f      	beq.n	80026b8 <HAL_DMA_Abort_IT+0xc0>
 8002638:	3218      	adds	r2, #24
 800263a:	4293      	cmp	r3, r2
 800263c:	d03c      	beq.n	80026b8 <HAL_DMA_Abort_IT+0xc0>
 800263e:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8002642:	4293      	cmp	r3, r2
 8002644:	d038      	beq.n	80026b8 <HAL_DMA_Abort_IT+0xc0>
 8002646:	3218      	adds	r2, #24
 8002648:	4293      	cmp	r3, r2
 800264a:	d035      	beq.n	80026b8 <HAL_DMA_Abort_IT+0xc0>
 800264c:	3218      	adds	r2, #24
 800264e:	4293      	cmp	r3, r2
 8002650:	d032      	beq.n	80026b8 <HAL_DMA_Abort_IT+0xc0>
 8002652:	3218      	adds	r2, #24
 8002654:	4293      	cmp	r3, r2
 8002656:	d02f      	beq.n	80026b8 <HAL_DMA_Abort_IT+0xc0>
 8002658:	3218      	adds	r2, #24
 800265a:	4293      	cmp	r3, r2
 800265c:	d02c      	beq.n	80026b8 <HAL_DMA_Abort_IT+0xc0>
 800265e:	3218      	adds	r2, #24
 8002660:	4293      	cmp	r3, r2
 8002662:	d029      	beq.n	80026b8 <HAL_DMA_Abort_IT+0xc0>
 8002664:	3218      	adds	r2, #24
 8002666:	4293      	cmp	r3, r2
 8002668:	d026      	beq.n	80026b8 <HAL_DMA_Abort_IT+0xc0>
 800266a:	3218      	adds	r2, #24
 800266c:	4293      	cmp	r3, r2
 800266e:	d023      	beq.n	80026b8 <HAL_DMA_Abort_IT+0xc0>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	f022 020e 	bic.w	r2, r2, #14
 8002676:	601a      	str	r2, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	f022 0201 	bic.w	r2, r2, #1
 800267e:	601a      	str	r2, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002680:	4a23      	ldr	r2, [pc, #140]	@ (8002710 <HAL_DMA_Abort_IT+0x118>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d121      	bne.n	80026ca <HAL_DMA_Abort_IT+0xd2>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002686:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8002688:	6813      	ldr	r3, [r2, #0]
 800268a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800268e:	6013      	str	r3, [r2, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002690:	e9d0 1316 	ldrd	r1, r3, [r0, #88]	@ 0x58
 8002694:	f003 021f 	and.w	r2, r3, #31
 8002698:	2301      	movs	r3, #1
 800269a:	4093      	lsls	r3, r2
 800269c:	604b      	str	r3, [r1, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800269e:	e9d0 3219 	ldrd	r3, r2, [r0, #100]	@ 0x64
 80026a2:	605a      	str	r2, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 80026a4:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80026a6:	b32b      	cbz	r3, 80026f4 <HAL_DMA_Abort_IT+0xfc>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026ae:	601a      	str	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026b0:	e9d0 321c 	ldrd	r3, r2, [r0, #112]	@ 0x70
 80026b4:	605a      	str	r2, [r3, #4]
 80026b6:	e01d      	b.n	80026f4 <HAL_DMA_Abort_IT+0xfc>
      hdma->State = HAL_DMA_STATE_ABORT;
 80026b8:	2204      	movs	r2, #4
 80026ba:	f880 2035 	strb.w	r2, [r0, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	f022 0201 	bic.w	r2, r2, #1
 80026c4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80026c6:	2000      	movs	r0, #0
}
 80026c8:	bd08      	pop	{r3, pc}
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80026ca:	4a12      	ldr	r2, [pc, #72]	@ (8002714 <HAL_DMA_Abort_IT+0x11c>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d0da      	beq.n	8002686 <HAL_DMA_Abort_IT+0x8e>
 80026d0:	3214      	adds	r2, #20
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d0d7      	beq.n	8002686 <HAL_DMA_Abort_IT+0x8e>
 80026d6:	3214      	adds	r2, #20
 80026d8:	4293      	cmp	r3, r2
 80026da:	d0d4      	beq.n	8002686 <HAL_DMA_Abort_IT+0x8e>
 80026dc:	3214      	adds	r2, #20
 80026de:	4293      	cmp	r3, r2
 80026e0:	d0d1      	beq.n	8002686 <HAL_DMA_Abort_IT+0x8e>
 80026e2:	3214      	adds	r2, #20
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d0ce      	beq.n	8002686 <HAL_DMA_Abort_IT+0x8e>
 80026e8:	3214      	adds	r2, #20
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d0cb      	beq.n	8002686 <HAL_DMA_Abort_IT+0x8e>
 80026ee:	3214      	adds	r2, #20
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d0c8      	beq.n	8002686 <HAL_DMA_Abort_IT+0x8e>
      hdma->State = HAL_DMA_STATE_READY;
 80026f4:	2301      	movs	r3, #1
 80026f6:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 80026fa:	2300      	movs	r3, #0
 80026fc:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
      if(hdma->XferAbortCallback != NULL)
 8002700:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0df      	beq.n	80026c6 <HAL_DMA_Abort_IT+0xce>
        hdma->XferAbortCallback(hdma);
 8002706:	4798      	blx	r3
 8002708:	e7dd      	b.n	80026c6 <HAL_DMA_Abort_IT+0xce>
 800270a:	bf00      	nop
 800270c:	40020010 	.word	0x40020010
 8002710:	58025408 	.word	0x58025408
 8002714:	5802541c 	.word	0x5802541c

08002718 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0U;
 8002718:	2300      	movs	r3, #0
{
 800271a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0U;
 800271e:	9301      	str	r3, [sp, #4]
{
 8002720:	4604      	mov	r4, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 8002722:	4b29      	ldr	r3, [pc, #164]	@ (80027c8 <HAL_DMA_IRQHandler+0xb0>)
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002724:	4e29      	ldr	r6, [pc, #164]	@ (80027cc <HAL_DMA_IRQHandler+0xb4>)
  uint32_t timeout = SystemCoreClock / 9600U;
 8002726:	681f      	ldr	r7, [r3, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002728:	6803      	ldr	r3, [r0, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800272a:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800272c:	42b3      	cmp	r3, r6
  tmpisr_dma  = regs_dma->ISR;
 800272e:	f8d5 8000 	ldr.w	r8, [r5]
  tmpisr_bdma = regs_bdma->ISR;
 8002732:	f8d5 c000 	ldr.w	ip, [r5]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002736:	d04f      	beq.n	80027d8 <HAL_DMA_IRQHandler+0xc0>
 8002738:	4a25      	ldr	r2, [pc, #148]	@ (80027d0 <HAL_DMA_IRQHandler+0xb8>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d04c      	beq.n	80027d8 <HAL_DMA_IRQHandler+0xc0>
 800273e:	3218      	adds	r2, #24
 8002740:	4293      	cmp	r3, r2
 8002742:	d049      	beq.n	80027d8 <HAL_DMA_IRQHandler+0xc0>
 8002744:	3218      	adds	r2, #24
 8002746:	4293      	cmp	r3, r2
 8002748:	d046      	beq.n	80027d8 <HAL_DMA_IRQHandler+0xc0>
 800274a:	3218      	adds	r2, #24
 800274c:	4293      	cmp	r3, r2
 800274e:	d043      	beq.n	80027d8 <HAL_DMA_IRQHandler+0xc0>
 8002750:	3218      	adds	r2, #24
 8002752:	4293      	cmp	r3, r2
 8002754:	d040      	beq.n	80027d8 <HAL_DMA_IRQHandler+0xc0>
 8002756:	3218      	adds	r2, #24
 8002758:	4293      	cmp	r3, r2
 800275a:	d03d      	beq.n	80027d8 <HAL_DMA_IRQHandler+0xc0>
 800275c:	3218      	adds	r2, #24
 800275e:	4293      	cmp	r3, r2
 8002760:	d03a      	beq.n	80027d8 <HAL_DMA_IRQHandler+0xc0>
 8002762:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8002766:	4293      	cmp	r3, r2
 8002768:	d036      	beq.n	80027d8 <HAL_DMA_IRQHandler+0xc0>
 800276a:	3218      	adds	r2, #24
 800276c:	4293      	cmp	r3, r2
 800276e:	d033      	beq.n	80027d8 <HAL_DMA_IRQHandler+0xc0>
 8002770:	3218      	adds	r2, #24
 8002772:	4293      	cmp	r3, r2
 8002774:	d030      	beq.n	80027d8 <HAL_DMA_IRQHandler+0xc0>
 8002776:	3218      	adds	r2, #24
 8002778:	4293      	cmp	r3, r2
 800277a:	d02d      	beq.n	80027d8 <HAL_DMA_IRQHandler+0xc0>
 800277c:	3218      	adds	r2, #24
 800277e:	4293      	cmp	r3, r2
 8002780:	d02a      	beq.n	80027d8 <HAL_DMA_IRQHandler+0xc0>
 8002782:	3218      	adds	r2, #24
 8002784:	4293      	cmp	r3, r2
 8002786:	d027      	beq.n	80027d8 <HAL_DMA_IRQHandler+0xc0>
 8002788:	3218      	adds	r2, #24
 800278a:	4293      	cmp	r3, r2
 800278c:	d024      	beq.n	80027d8 <HAL_DMA_IRQHandler+0xc0>
 800278e:	3218      	adds	r2, #24
 8002790:	4293      	cmp	r3, r2
 8002792:	d021      	beq.n	80027d8 <HAL_DMA_IRQHandler+0xc0>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002794:	4a0f      	ldr	r2, [pc, #60]	@ (80027d4 <HAL_DMA_IRQHandler+0xbc>)
 8002796:	4293      	cmp	r3, r2
 8002798:	f040 8209 	bne.w	8002bae <HAL_DMA_IRQHandler+0x496>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800279c:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 800279e:	2004      	movs	r0, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80027a0:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80027a2:	f001 011f 	and.w	r1, r1, #31
 80027a6:	4088      	lsls	r0, r1
 80027a8:	ea10 0f0c 	tst.w	r0, ip
 80027ac:	f000 8226 	beq.w	8002bfc <HAL_DMA_IRQHandler+0x4e4>
 80027b0:	0756      	lsls	r6, r2, #29
 80027b2:	f140 8223 	bpl.w	8002bfc <HAL_DMA_IRQHandler+0x4e4>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80027b6:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80027b8:	6068      	str	r0, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80027ba:	f140 8217 	bpl.w	8002bec <HAL_DMA_IRQHandler+0x4d4>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80027be:	03d3      	lsls	r3, r2, #15
 80027c0:	f100 821a 	bmi.w	8002bf8 <HAL_DMA_IRQHandler+0x4e0>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027c4:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80027c6:	e17e      	b.n	8002ac6 <HAL_DMA_IRQHandler+0x3ae>
 80027c8:	2400000c 	.word	0x2400000c
 80027cc:	40020010 	.word	0x40020010
 80027d0:	40020028 	.word	0x40020028
 80027d4:	58025408 	.word	0x58025408
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80027d8:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80027da:	2008      	movs	r0, #8
 80027dc:	f002 021f 	and.w	r2, r2, #31
 80027e0:	4090      	lsls	r0, r2
 80027e2:	ea10 0f08 	tst.w	r0, r8
 80027e6:	d03d      	beq.n	8002864 <HAL_DMA_IRQHandler+0x14c>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80027e8:	42b3      	cmp	r3, r6
 80027ea:	d02e      	beq.n	800284a <HAL_DMA_IRQHandler+0x132>
 80027ec:	4984      	ldr	r1, [pc, #528]	@ (8002a00 <HAL_DMA_IRQHandler+0x2e8>)
 80027ee:	428b      	cmp	r3, r1
 80027f0:	d02b      	beq.n	800284a <HAL_DMA_IRQHandler+0x132>
 80027f2:	3118      	adds	r1, #24
 80027f4:	428b      	cmp	r3, r1
 80027f6:	d028      	beq.n	800284a <HAL_DMA_IRQHandler+0x132>
 80027f8:	3118      	adds	r1, #24
 80027fa:	428b      	cmp	r3, r1
 80027fc:	d025      	beq.n	800284a <HAL_DMA_IRQHandler+0x132>
 80027fe:	3118      	adds	r1, #24
 8002800:	428b      	cmp	r3, r1
 8002802:	d022      	beq.n	800284a <HAL_DMA_IRQHandler+0x132>
 8002804:	3118      	adds	r1, #24
 8002806:	428b      	cmp	r3, r1
 8002808:	d01f      	beq.n	800284a <HAL_DMA_IRQHandler+0x132>
 800280a:	3118      	adds	r1, #24
 800280c:	428b      	cmp	r3, r1
 800280e:	d01c      	beq.n	800284a <HAL_DMA_IRQHandler+0x132>
 8002810:	3118      	adds	r1, #24
 8002812:	428b      	cmp	r3, r1
 8002814:	d019      	beq.n	800284a <HAL_DMA_IRQHandler+0x132>
 8002816:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 800281a:	428b      	cmp	r3, r1
 800281c:	d015      	beq.n	800284a <HAL_DMA_IRQHandler+0x132>
 800281e:	3118      	adds	r1, #24
 8002820:	428b      	cmp	r3, r1
 8002822:	d012      	beq.n	800284a <HAL_DMA_IRQHandler+0x132>
 8002824:	3118      	adds	r1, #24
 8002826:	428b      	cmp	r3, r1
 8002828:	d00f      	beq.n	800284a <HAL_DMA_IRQHandler+0x132>
 800282a:	3118      	adds	r1, #24
 800282c:	428b      	cmp	r3, r1
 800282e:	d00c      	beq.n	800284a <HAL_DMA_IRQHandler+0x132>
 8002830:	3118      	adds	r1, #24
 8002832:	428b      	cmp	r3, r1
 8002834:	d009      	beq.n	800284a <HAL_DMA_IRQHandler+0x132>
 8002836:	3118      	adds	r1, #24
 8002838:	428b      	cmp	r3, r1
 800283a:	d006      	beq.n	800284a <HAL_DMA_IRQHandler+0x132>
 800283c:	3118      	adds	r1, #24
 800283e:	428b      	cmp	r3, r1
 8002840:	d003      	beq.n	800284a <HAL_DMA_IRQHandler+0x132>
 8002842:	3118      	adds	r1, #24
 8002844:	428b      	cmp	r3, r1
 8002846:	f040 80c1 	bne.w	80029cc <HAL_DMA_IRQHandler+0x2b4>
 800284a:	6819      	ldr	r1, [r3, #0]
 800284c:	f3c1 0180 	ubfx	r1, r1, #2, #1
 8002850:	b141      	cbz	r1, 8002864 <HAL_DMA_IRQHandler+0x14c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002852:	6819      	ldr	r1, [r3, #0]
 8002854:	f021 0104 	bic.w	r1, r1, #4
 8002858:	6019      	str	r1, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800285a:	60a8      	str	r0, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800285c:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800285e:	f041 0101 	orr.w	r1, r1, #1
 8002862:	6561      	str	r1, [r4, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002864:	fa28 f102 	lsr.w	r1, r8, r2
 8002868:	07c8      	lsls	r0, r1, #31
 800286a:	d534      	bpl.n	80028d6 <HAL_DMA_IRQHandler+0x1be>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800286c:	42b3      	cmp	r3, r6
 800286e:	d02e      	beq.n	80028ce <HAL_DMA_IRQHandler+0x1b6>
 8002870:	4963      	ldr	r1, [pc, #396]	@ (8002a00 <HAL_DMA_IRQHandler+0x2e8>)
 8002872:	428b      	cmp	r3, r1
 8002874:	d02b      	beq.n	80028ce <HAL_DMA_IRQHandler+0x1b6>
 8002876:	3118      	adds	r1, #24
 8002878:	428b      	cmp	r3, r1
 800287a:	d028      	beq.n	80028ce <HAL_DMA_IRQHandler+0x1b6>
 800287c:	3118      	adds	r1, #24
 800287e:	428b      	cmp	r3, r1
 8002880:	d025      	beq.n	80028ce <HAL_DMA_IRQHandler+0x1b6>
 8002882:	3118      	adds	r1, #24
 8002884:	428b      	cmp	r3, r1
 8002886:	d022      	beq.n	80028ce <HAL_DMA_IRQHandler+0x1b6>
 8002888:	3118      	adds	r1, #24
 800288a:	428b      	cmp	r3, r1
 800288c:	d01f      	beq.n	80028ce <HAL_DMA_IRQHandler+0x1b6>
 800288e:	3118      	adds	r1, #24
 8002890:	428b      	cmp	r3, r1
 8002892:	d01c      	beq.n	80028ce <HAL_DMA_IRQHandler+0x1b6>
 8002894:	3118      	adds	r1, #24
 8002896:	428b      	cmp	r3, r1
 8002898:	d019      	beq.n	80028ce <HAL_DMA_IRQHandler+0x1b6>
 800289a:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 800289e:	428b      	cmp	r3, r1
 80028a0:	d015      	beq.n	80028ce <HAL_DMA_IRQHandler+0x1b6>
 80028a2:	3118      	adds	r1, #24
 80028a4:	428b      	cmp	r3, r1
 80028a6:	d012      	beq.n	80028ce <HAL_DMA_IRQHandler+0x1b6>
 80028a8:	3118      	adds	r1, #24
 80028aa:	428b      	cmp	r3, r1
 80028ac:	d00f      	beq.n	80028ce <HAL_DMA_IRQHandler+0x1b6>
 80028ae:	3118      	adds	r1, #24
 80028b0:	428b      	cmp	r3, r1
 80028b2:	d00c      	beq.n	80028ce <HAL_DMA_IRQHandler+0x1b6>
 80028b4:	3118      	adds	r1, #24
 80028b6:	428b      	cmp	r3, r1
 80028b8:	d009      	beq.n	80028ce <HAL_DMA_IRQHandler+0x1b6>
 80028ba:	3118      	adds	r1, #24
 80028bc:	428b      	cmp	r3, r1
 80028be:	d006      	beq.n	80028ce <HAL_DMA_IRQHandler+0x1b6>
 80028c0:	3118      	adds	r1, #24
 80028c2:	428b      	cmp	r3, r1
 80028c4:	d003      	beq.n	80028ce <HAL_DMA_IRQHandler+0x1b6>
 80028c6:	3118      	adds	r1, #24
 80028c8:	428b      	cmp	r3, r1
 80028ca:	f040 8083 	bne.w	80029d4 <HAL_DMA_IRQHandler+0x2bc>
 80028ce:	6959      	ldr	r1, [r3, #20]
 80028d0:	0609      	lsls	r1, r1, #24
 80028d2:	f100 8081 	bmi.w	80029d8 <HAL_DMA_IRQHandler+0x2c0>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80028d6:	2104      	movs	r1, #4
 80028d8:	4091      	lsls	r1, r2
 80028da:	ea11 0f08 	tst.w	r1, r8
 80028de:	d032      	beq.n	8002946 <HAL_DMA_IRQHandler+0x22e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80028e0:	42b3      	cmp	r3, r6
 80028e2:	d02d      	beq.n	8002940 <HAL_DMA_IRQHandler+0x228>
 80028e4:	4846      	ldr	r0, [pc, #280]	@ (8002a00 <HAL_DMA_IRQHandler+0x2e8>)
 80028e6:	4283      	cmp	r3, r0
 80028e8:	d02a      	beq.n	8002940 <HAL_DMA_IRQHandler+0x228>
 80028ea:	3018      	adds	r0, #24
 80028ec:	4283      	cmp	r3, r0
 80028ee:	d027      	beq.n	8002940 <HAL_DMA_IRQHandler+0x228>
 80028f0:	3018      	adds	r0, #24
 80028f2:	4283      	cmp	r3, r0
 80028f4:	d024      	beq.n	8002940 <HAL_DMA_IRQHandler+0x228>
 80028f6:	3018      	adds	r0, #24
 80028f8:	4283      	cmp	r3, r0
 80028fa:	d021      	beq.n	8002940 <HAL_DMA_IRQHandler+0x228>
 80028fc:	3018      	adds	r0, #24
 80028fe:	4283      	cmp	r3, r0
 8002900:	d01e      	beq.n	8002940 <HAL_DMA_IRQHandler+0x228>
 8002902:	3018      	adds	r0, #24
 8002904:	4283      	cmp	r3, r0
 8002906:	d01b      	beq.n	8002940 <HAL_DMA_IRQHandler+0x228>
 8002908:	3018      	adds	r0, #24
 800290a:	4283      	cmp	r3, r0
 800290c:	d018      	beq.n	8002940 <HAL_DMA_IRQHandler+0x228>
 800290e:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 8002912:	4283      	cmp	r3, r0
 8002914:	d014      	beq.n	8002940 <HAL_DMA_IRQHandler+0x228>
 8002916:	3018      	adds	r0, #24
 8002918:	4283      	cmp	r3, r0
 800291a:	d011      	beq.n	8002940 <HAL_DMA_IRQHandler+0x228>
 800291c:	3018      	adds	r0, #24
 800291e:	4283      	cmp	r3, r0
 8002920:	d00e      	beq.n	8002940 <HAL_DMA_IRQHandler+0x228>
 8002922:	3018      	adds	r0, #24
 8002924:	4283      	cmp	r3, r0
 8002926:	d00b      	beq.n	8002940 <HAL_DMA_IRQHandler+0x228>
 8002928:	3018      	adds	r0, #24
 800292a:	4283      	cmp	r3, r0
 800292c:	d008      	beq.n	8002940 <HAL_DMA_IRQHandler+0x228>
 800292e:	3018      	adds	r0, #24
 8002930:	4283      	cmp	r3, r0
 8002932:	d005      	beq.n	8002940 <HAL_DMA_IRQHandler+0x228>
 8002934:	3018      	adds	r0, #24
 8002936:	4283      	cmp	r3, r0
 8002938:	d002      	beq.n	8002940 <HAL_DMA_IRQHandler+0x228>
 800293a:	3018      	adds	r0, #24
 800293c:	4283      	cmp	r3, r0
 800293e:	d153      	bne.n	80029e8 <HAL_DMA_IRQHandler+0x2d0>
 8002940:	6818      	ldr	r0, [r3, #0]
 8002942:	0780      	lsls	r0, r0, #30
 8002944:	d452      	bmi.n	80029ec <HAL_DMA_IRQHandler+0x2d4>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002946:	2110      	movs	r1, #16
 8002948:	4091      	lsls	r1, r2
 800294a:	ea11 0f08 	tst.w	r1, r8
 800294e:	d05d      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x2f4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002950:	42b3      	cmp	r3, r6
 8002952:	d02d      	beq.n	80029b0 <HAL_DMA_IRQHandler+0x298>
 8002954:	4a2a      	ldr	r2, [pc, #168]	@ (8002a00 <HAL_DMA_IRQHandler+0x2e8>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d02a      	beq.n	80029b0 <HAL_DMA_IRQHandler+0x298>
 800295a:	3218      	adds	r2, #24
 800295c:	4293      	cmp	r3, r2
 800295e:	d027      	beq.n	80029b0 <HAL_DMA_IRQHandler+0x298>
 8002960:	3218      	adds	r2, #24
 8002962:	4293      	cmp	r3, r2
 8002964:	d024      	beq.n	80029b0 <HAL_DMA_IRQHandler+0x298>
 8002966:	3218      	adds	r2, #24
 8002968:	4293      	cmp	r3, r2
 800296a:	d021      	beq.n	80029b0 <HAL_DMA_IRQHandler+0x298>
 800296c:	3218      	adds	r2, #24
 800296e:	4293      	cmp	r3, r2
 8002970:	d01e      	beq.n	80029b0 <HAL_DMA_IRQHandler+0x298>
 8002972:	3218      	adds	r2, #24
 8002974:	4293      	cmp	r3, r2
 8002976:	d01b      	beq.n	80029b0 <HAL_DMA_IRQHandler+0x298>
 8002978:	3218      	adds	r2, #24
 800297a:	4293      	cmp	r3, r2
 800297c:	d018      	beq.n	80029b0 <HAL_DMA_IRQHandler+0x298>
 800297e:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8002982:	4293      	cmp	r3, r2
 8002984:	d014      	beq.n	80029b0 <HAL_DMA_IRQHandler+0x298>
 8002986:	3218      	adds	r2, #24
 8002988:	4293      	cmp	r3, r2
 800298a:	d011      	beq.n	80029b0 <HAL_DMA_IRQHandler+0x298>
 800298c:	3218      	adds	r2, #24
 800298e:	4293      	cmp	r3, r2
 8002990:	d00e      	beq.n	80029b0 <HAL_DMA_IRQHandler+0x298>
 8002992:	3218      	adds	r2, #24
 8002994:	4293      	cmp	r3, r2
 8002996:	d00b      	beq.n	80029b0 <HAL_DMA_IRQHandler+0x298>
 8002998:	3218      	adds	r2, #24
 800299a:	4293      	cmp	r3, r2
 800299c:	d008      	beq.n	80029b0 <HAL_DMA_IRQHandler+0x298>
 800299e:	3218      	adds	r2, #24
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d005      	beq.n	80029b0 <HAL_DMA_IRQHandler+0x298>
 80029a4:	3218      	adds	r2, #24
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d002      	beq.n	80029b0 <HAL_DMA_IRQHandler+0x298>
 80029aa:	3218      	adds	r2, #24
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d123      	bne.n	80029f8 <HAL_DMA_IRQHandler+0x2e0>
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 80029b6:	b34a      	cbz	r2, 8002a0c <HAL_DMA_IRQHandler+0x2f4>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80029b8:	60a9      	str	r1, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	0350      	lsls	r0, r2, #13
 80029be:	f140 808a 	bpl.w	8002ad6 <HAL_DMA_IRQHandler+0x3be>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	0319      	lsls	r1, r3, #12
 80029c6:	d41d      	bmi.n	8002a04 <HAL_DMA_IRQHandler+0x2ec>
          if(hdma->XferHalfCpltCallback != NULL)
 80029c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80029ca:	e01c      	b.n	8002a06 <HAL_DMA_IRQHandler+0x2ee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80029cc:	6819      	ldr	r1, [r3, #0]
 80029ce:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 80029d2:	e73d      	b.n	8002850 <HAL_DMA_IRQHandler+0x138>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80029d4:	6819      	ldr	r1, [r3, #0]
 80029d6:	e77e      	b.n	80028d6 <HAL_DMA_IRQHandler+0x1be>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80029d8:	2101      	movs	r1, #1
 80029da:	4091      	lsls	r1, r2
 80029dc:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029de:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80029e0:	f041 0102 	orr.w	r1, r1, #2
 80029e4:	6561      	str	r1, [r4, #84]	@ 0x54
 80029e6:	e776      	b.n	80028d6 <HAL_DMA_IRQHandler+0x1be>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80029e8:	6819      	ldr	r1, [r3, #0]
 80029ea:	e7ac      	b.n	8002946 <HAL_DMA_IRQHandler+0x22e>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80029ec:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029ee:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80029f0:	f041 0104 	orr.w	r1, r1, #4
 80029f4:	6561      	str	r1, [r4, #84]	@ 0x54
 80029f6:	e7a6      	b.n	8002946 <HAL_DMA_IRQHandler+0x22e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	f3c2 0280 	ubfx	r2, r2, #2, #1
 80029fe:	e7da      	b.n	80029b6 <HAL_DMA_IRQHandler+0x29e>
 8002a00:	40020028 	.word	0x40020028
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002a04:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
          if(hdma->XferHalfCpltCallback != NULL)
 8002a06:	b10b      	cbz	r3, 8002a0c <HAL_DMA_IRQHandler+0x2f4>
            hdma->XferHalfCpltCallback(hdma);
 8002a08:	4620      	mov	r0, r4
 8002a0a:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002a0c:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8002a0e:	2020      	movs	r0, #32
 8002a10:	f001 011f 	and.w	r1, r1, #31
 8002a14:	4088      	lsls	r0, r1
 8002a16:	ea10 0f08 	tst.w	r0, r8
 8002a1a:	d072      	beq.n	8002b02 <HAL_DMA_IRQHandler+0x3ea>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002a1c:	6823      	ldr	r3, [r4, #0]
 8002a1e:	42b3      	cmp	r3, r6
 8002a20:	d02d      	beq.n	8002a7e <HAL_DMA_IRQHandler+0x366>
 8002a22:	4a8d      	ldr	r2, [pc, #564]	@ (8002c58 <HAL_DMA_IRQHandler+0x540>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d02a      	beq.n	8002a7e <HAL_DMA_IRQHandler+0x366>
 8002a28:	3218      	adds	r2, #24
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d027      	beq.n	8002a7e <HAL_DMA_IRQHandler+0x366>
 8002a2e:	3218      	adds	r2, #24
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d024      	beq.n	8002a7e <HAL_DMA_IRQHandler+0x366>
 8002a34:	3218      	adds	r2, #24
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d021      	beq.n	8002a7e <HAL_DMA_IRQHandler+0x366>
 8002a3a:	3218      	adds	r2, #24
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d01e      	beq.n	8002a7e <HAL_DMA_IRQHandler+0x366>
 8002a40:	3218      	adds	r2, #24
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d01b      	beq.n	8002a7e <HAL_DMA_IRQHandler+0x366>
 8002a46:	3218      	adds	r2, #24
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d018      	beq.n	8002a7e <HAL_DMA_IRQHandler+0x366>
 8002a4c:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d014      	beq.n	8002a7e <HAL_DMA_IRQHandler+0x366>
 8002a54:	3218      	adds	r2, #24
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d011      	beq.n	8002a7e <HAL_DMA_IRQHandler+0x366>
 8002a5a:	3218      	adds	r2, #24
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d00e      	beq.n	8002a7e <HAL_DMA_IRQHandler+0x366>
 8002a60:	3218      	adds	r2, #24
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d00b      	beq.n	8002a7e <HAL_DMA_IRQHandler+0x366>
 8002a66:	3218      	adds	r2, #24
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d008      	beq.n	8002a7e <HAL_DMA_IRQHandler+0x366>
 8002a6c:	3218      	adds	r2, #24
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d005      	beq.n	8002a7e <HAL_DMA_IRQHandler+0x366>
 8002a72:	3218      	adds	r2, #24
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d002      	beq.n	8002a7e <HAL_DMA_IRQHandler+0x366>
 8002a78:	3218      	adds	r2, #24
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d134      	bne.n	8002ae8 <HAL_DMA_IRQHandler+0x3d0>
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8002a84:	2a00      	cmp	r2, #0
 8002a86:	d03c      	beq.n	8002b02 <HAL_DMA_IRQHandler+0x3ea>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002a88:	60a8      	str	r0, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a8a:	f894 2035 	ldrb.w	r2, [r4, #53]	@ 0x35
 8002a8e:	2a04      	cmp	r2, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a90:	681a      	ldr	r2, [r3, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a92:	d12d      	bne.n	8002af0 <HAL_DMA_IRQHandler+0x3d8>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a94:	f022 0216 	bic.w	r2, r2, #22
 8002a98:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002a9a:	695a      	ldr	r2, [r3, #20]
 8002a9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002aa0:	615a      	str	r2, [r3, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002aa2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002aa4:	b90a      	cbnz	r2, 8002aaa <HAL_DMA_IRQHandler+0x392>
 8002aa6:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8002aa8:	b11a      	cbz	r2, 8002ab2 <HAL_DMA_IRQHandler+0x39a>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	f022 0208 	bic.w	r2, r2, #8
 8002ab0:	601a      	str	r2, [r3, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002ab2:	233f      	movs	r3, #63	@ 0x3f
 8002ab4:	408b      	lsls	r3, r1
 8002ab6:	60ab      	str	r3, [r5, #8]
          hdma->State = HAL_DMA_STATE_READY;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8002abe:	2300      	movs	r3, #0
 8002ac0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
          if(hdma->XferAbortCallback != NULL)
 8002ac4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
      if (hdma->XferErrorCallback != NULL)
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 808d 	beq.w	8002be6 <HAL_DMA_IRQHandler+0x4ce>
        hdma->XferErrorCallback(hdma);
 8002acc:	4620      	mov	r0, r4
}
 8002ace:	b002      	add	sp, #8
 8002ad0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
 8002ad4:	4718      	bx	r3
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	05d2      	lsls	r2, r2, #23
 8002ada:	f53f af75 	bmi.w	80029c8 <HAL_DMA_IRQHandler+0x2b0>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	f022 0208 	bic.w	r2, r2, #8
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	e76f      	b.n	80029c8 <HAL_DMA_IRQHandler+0x2b0>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8002aee:	e7c9      	b.n	8002a84 <HAL_DMA_IRQHandler+0x36c>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002af0:	0355      	lsls	r5, r2, #13
 8002af2:	d54d      	bpl.n	8002b90 <HAL_DMA_IRQHandler+0x478>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	0318      	lsls	r0, r3, #12
 8002af8:	d457      	bmi.n	8002baa <HAL_DMA_IRQHandler+0x492>
            if(hdma->XferM1CpltCallback != NULL)
 8002afa:	6c63      	ldr	r3, [r4, #68]	@ 0x44
          if(hdma->XferCpltCallback != NULL)
 8002afc:	b10b      	cbz	r3, 8002b02 <HAL_DMA_IRQHandler+0x3ea>
            hdma->XferCpltCallback(hdma);
 8002afe:	4620      	mov	r0, r4
 8002b00:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b02:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d06e      	beq.n	8002be6 <HAL_DMA_IRQHandler+0x4ce>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002b08:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002b0a:	07d9      	lsls	r1, r3, #31
 8002b0c:	d53e      	bpl.n	8002b8c <HAL_DMA_IRQHandler+0x474>
        hdma->State = HAL_DMA_STATE_ABORT;
 8002b0e:	2304      	movs	r3, #4
 8002b10:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_DMA_DISABLE(hdma);
 8002b14:	6823      	ldr	r3, [r4, #0]
 8002b16:	42b3      	cmp	r3, r6
 8002b18:	d01e      	beq.n	8002b58 <HAL_DMA_IRQHandler+0x440>
 8002b1a:	4a4f      	ldr	r2, [pc, #316]	@ (8002c58 <HAL_DMA_IRQHandler+0x540>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d01b      	beq.n	8002b58 <HAL_DMA_IRQHandler+0x440>
 8002b20:	3218      	adds	r2, #24
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d018      	beq.n	8002b58 <HAL_DMA_IRQHandler+0x440>
 8002b26:	3218      	adds	r2, #24
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d015      	beq.n	8002b58 <HAL_DMA_IRQHandler+0x440>
 8002b2c:	3218      	adds	r2, #24
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d012      	beq.n	8002b58 <HAL_DMA_IRQHandler+0x440>
 8002b32:	3218      	adds	r2, #24
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d00f      	beq.n	8002b58 <HAL_DMA_IRQHandler+0x440>
 8002b38:	3218      	adds	r2, #24
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d00c      	beq.n	8002b58 <HAL_DMA_IRQHandler+0x440>
 8002b3e:	3218      	adds	r2, #24
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d009      	beq.n	8002b58 <HAL_DMA_IRQHandler+0x440>
 8002b44:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d005      	beq.n	8002b58 <HAL_DMA_IRQHandler+0x440>
 8002b4c:	3218      	adds	r2, #24
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d002      	beq.n	8002b58 <HAL_DMA_IRQHandler+0x440>
 8002b52:	3218      	adds	r2, #24
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d0ff      	beq.n	8002b58 <HAL_DMA_IRQHandler+0x440>
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b58:	f44f 5116 	mov.w	r1, #9600	@ 0x2580
        __HAL_DMA_DISABLE(hdma);
 8002b5c:	681a      	ldr	r2, [r3, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b5e:	fbb7 f1f1 	udiv	r1, r7, r1
        __HAL_DMA_DISABLE(hdma);
 8002b62:	f022 0201 	bic.w	r2, r2, #1
 8002b66:	601a      	str	r2, [r3, #0]
          if (++count > timeout)
 8002b68:	9a01      	ldr	r2, [sp, #4]
 8002b6a:	3201      	adds	r2, #1
 8002b6c:	428a      	cmp	r2, r1
 8002b6e:	9201      	str	r2, [sp, #4]
 8002b70:	d802      	bhi.n	8002b78 <HAL_DMA_IRQHandler+0x460>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	07d2      	lsls	r2, r2, #31
 8002b76:	d4f7      	bmi.n	8002b68 <HAL_DMA_IRQHandler+0x450>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	07df      	lsls	r7, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8002b7c:	bf4c      	ite	mi
 8002b7e:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8002b80:	2301      	movpl	r3, #1
      hdma->State = HAL_DMA_STATE_READY;
 8002b82:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8002b86:	2300      	movs	r3, #0
 8002b88:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      if (hdma->XferErrorCallback != NULL)
 8002b8c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8002b8e:	e79a      	b.n	8002ac6 <HAL_DMA_IRQHandler+0x3ae>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	f412 7280 	ands.w	r2, r2, #256	@ 0x100
 8002b96:	d108      	bne.n	8002baa <HAL_DMA_IRQHandler+0x492>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002b98:	6819      	ldr	r1, [r3, #0]
 8002b9a:	f021 0110 	bic.w	r1, r1, #16
 8002b9e:	6019      	str	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8002ba0:	2301      	movs	r3, #1
            __HAL_UNLOCK(hdma);
 8002ba2:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8002ba6:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          if(hdma->XferCpltCallback != NULL)
 8002baa:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002bac:	e7a6      	b.n	8002afc <HAL_DMA_IRQHandler+0x3e4>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002bae:	4a2b      	ldr	r2, [pc, #172]	@ (8002c5c <HAL_DMA_IRQHandler+0x544>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	f43f adf3 	beq.w	800279c <HAL_DMA_IRQHandler+0x84>
 8002bb6:	3214      	adds	r2, #20
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	f43f adef 	beq.w	800279c <HAL_DMA_IRQHandler+0x84>
 8002bbe:	3214      	adds	r2, #20
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	f43f adeb 	beq.w	800279c <HAL_DMA_IRQHandler+0x84>
 8002bc6:	3214      	adds	r2, #20
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	f43f ade7 	beq.w	800279c <HAL_DMA_IRQHandler+0x84>
 8002bce:	3214      	adds	r2, #20
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	f43f ade3 	beq.w	800279c <HAL_DMA_IRQHandler+0x84>
 8002bd6:	3214      	adds	r2, #20
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	f43f addf 	beq.w	800279c <HAL_DMA_IRQHandler+0x84>
 8002bde:	3214      	adds	r2, #20
 8002be0:	4293      	cmp	r3, r2
 8002be2:	f43f addb 	beq.w	800279c <HAL_DMA_IRQHandler+0x84>
}
 8002be6:	b002      	add	sp, #8
 8002be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002bec:	0697      	lsls	r7, r2, #26
 8002bee:	d403      	bmi.n	8002bf8 <HAL_DMA_IRQHandler+0x4e0>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	f022 0204 	bic.w	r2, r2, #4
 8002bf6:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8002bf8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002bfa:	e764      	b.n	8002ac6 <HAL_DMA_IRQHandler+0x3ae>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002bfc:	2002      	movs	r0, #2
 8002bfe:	4088      	lsls	r0, r1
 8002c00:	ea10 0f0c 	tst.w	r0, ip
 8002c04:	d016      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x51c>
 8002c06:	0796      	lsls	r6, r2, #30
 8002c08:	d514      	bpl.n	8002c34 <HAL_DMA_IRQHandler+0x51c>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002c0a:	6068      	str	r0, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c0c:	0410      	lsls	r0, r2, #16
 8002c0e:	d503      	bpl.n	8002c18 <HAL_DMA_IRQHandler+0x500>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002c10:	03d1      	lsls	r1, r2, #15
 8002c12:	d40d      	bmi.n	8002c30 <HAL_DMA_IRQHandler+0x518>
          if(hdma->XferM1CpltCallback != NULL)
 8002c14:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002c16:	e756      	b.n	8002ac6 <HAL_DMA_IRQHandler+0x3ae>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002c18:	f012 0220 	ands.w	r2, r2, #32
 8002c1c:	d108      	bne.n	8002c30 <HAL_DMA_IRQHandler+0x518>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002c1e:	6819      	ldr	r1, [r3, #0]
 8002c20:	f021 010a 	bic.w	r1, r1, #10
 8002c24:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002c26:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8002c28:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8002c2c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        if(hdma->XferCpltCallback != NULL)
 8002c30:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002c32:	e748      	b.n	8002ac6 <HAL_DMA_IRQHandler+0x3ae>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002c34:	2008      	movs	r0, #8
 8002c36:	4088      	lsls	r0, r1
 8002c38:	ea10 0f0c 	tst.w	r0, ip
 8002c3c:	d0d3      	beq.n	8002be6 <HAL_DMA_IRQHandler+0x4ce>
 8002c3e:	0712      	lsls	r2, r2, #28
 8002c40:	d5d1      	bpl.n	8002be6 <HAL_DMA_IRQHandler+0x4ce>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	f022 020e 	bic.w	r2, r2, #14
 8002c48:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	fa03 f101 	lsl.w	r1, r3, r1
 8002c50:	6069      	str	r1, [r5, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c52:	6563      	str	r3, [r4, #84]	@ 0x54
 8002c54:	e795      	b.n	8002b82 <HAL_DMA_IRQHandler+0x46a>
 8002c56:	bf00      	nop
 8002c58:	40020028 	.word	0x40020028
 8002c5c:	5802541c 	.word	0x5802541c

08002c60 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c60:	b530      	push	{r4, r5, lr}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c62:	6804      	ldr	r4, [r0, #0]
 8002c64:	4d15      	ldr	r5, [pc, #84]	@ (8002cbc <DMA_MultiBufferSetConfig+0x5c>)
  {
    /* Configure DMA Stream data length */
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c66:	6880      	ldr	r0, [r0, #8]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c68:	42ac      	cmp	r4, r5
 8002c6a:	d01e      	beq.n	8002caa <DMA_MultiBufferSetConfig+0x4a>
 8002c6c:	3518      	adds	r5, #24
 8002c6e:	42ac      	cmp	r4, r5
 8002c70:	d01b      	beq.n	8002caa <DMA_MultiBufferSetConfig+0x4a>
 8002c72:	3518      	adds	r5, #24
 8002c74:	42ac      	cmp	r4, r5
 8002c76:	d018      	beq.n	8002caa <DMA_MultiBufferSetConfig+0x4a>
 8002c78:	3518      	adds	r5, #24
 8002c7a:	42ac      	cmp	r4, r5
 8002c7c:	d015      	beq.n	8002caa <DMA_MultiBufferSetConfig+0x4a>
 8002c7e:	3518      	adds	r5, #24
 8002c80:	42ac      	cmp	r4, r5
 8002c82:	d012      	beq.n	8002caa <DMA_MultiBufferSetConfig+0x4a>
 8002c84:	3518      	adds	r5, #24
 8002c86:	42ac      	cmp	r4, r5
 8002c88:	d00f      	beq.n	8002caa <DMA_MultiBufferSetConfig+0x4a>
 8002c8a:	3518      	adds	r5, #24
 8002c8c:	42ac      	cmp	r4, r5
 8002c8e:	d00c      	beq.n	8002caa <DMA_MultiBufferSetConfig+0x4a>
 8002c90:	3518      	adds	r5, #24
 8002c92:	42ac      	cmp	r4, r5
 8002c94:	d009      	beq.n	8002caa <DMA_MultiBufferSetConfig+0x4a>
 8002c96:	f505 7556 	add.w	r5, r5, #856	@ 0x358
 8002c9a:	42ac      	cmp	r4, r5
 8002c9c:	d005      	beq.n	8002caa <DMA_MultiBufferSetConfig+0x4a>
 8002c9e:	3518      	adds	r5, #24
 8002ca0:	42ac      	cmp	r4, r5
 8002ca2:	d002      	beq.n	8002caa <DMA_MultiBufferSetConfig+0x4a>
 8002ca4:	3518      	adds	r5, #24
 8002ca6:	42ac      	cmp	r4, r5
 8002ca8:	d0ff      	beq.n	8002caa <DMA_MultiBufferSetConfig+0x4a>
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002caa:	2840      	cmp	r0, #64	@ 0x40
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8002cac:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cae:	d102      	bne.n	8002cb6 <DMA_MultiBufferSetConfig+0x56>
    {
      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8002cb0:	60a2      	str	r2, [r4, #8]

      /* Configure DMA Stream source address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8002cb2:	60e1      	str	r1, [r4, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8002cb4:	bd30      	pop	{r4, r5, pc}
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 8002cb6:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 8002cb8:	60e2      	str	r2, [r4, #12]
}
 8002cba:	e7fb      	b.n	8002cb4 <DMA_MultiBufferSetConfig+0x54>
 8002cbc:	40020010 	.word	0x40020010

08002cc0 <HAL_DMAEx_MultiBufferStart_IT>:
{
 8002cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cc2:	4605      	mov	r5, r0
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002cc4:	6880      	ldr	r0, [r0, #8]
 8002cc6:	2880      	cmp	r0, #128	@ 0x80
 8002cc8:	d104      	bne.n	8002cd4 <HAL_DMAEx_MultiBufferStart_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002cca:	f44f 7380 	mov.w	r3, #256	@ 0x100
    return HAL_ERROR;
 8002cce:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002cd0:	656b      	str	r3, [r5, #84]	@ 0x54
    status = HAL_ERROR;
 8002cd2:	e1c5      	b.n	8003060 <HAL_DMAEx_MultiBufferStart_IT+0x3a0>
  __HAL_LOCK(hdma);
 8002cd4:	f895 0034 	ldrb.w	r0, [r5, #52]	@ 0x34
 8002cd8:	2801      	cmp	r0, #1
 8002cda:	f000 81ca 	beq.w	8003072 <HAL_DMAEx_MultiBufferStart_IT+0x3b2>
 8002cde:	2001      	movs	r0, #1
 8002ce0:	f885 0034 	strb.w	r0, [r5, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ce4:	f895 0035 	ldrb.w	r0, [r5, #53]	@ 0x35
 8002ce8:	2801      	cmp	r0, #1
 8002cea:	f040 81bf 	bne.w	800306c <HAL_DMAEx_MultiBufferStart_IT+0x3ac>
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cee:	2002      	movs	r0, #2
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002cf0:	682c      	ldr	r4, [r5, #0]
 8002cf2:	4e7f      	ldr	r6, [pc, #508]	@ (8002ef0 <HAL_DMAEx_MultiBufferStart_IT+0x230>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cf4:	f885 0035 	strb.w	r0, [r5, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cf8:	2000      	movs	r0, #0
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002cfa:	42b4      	cmp	r4, r6
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cfc:	6568      	str	r0, [r5, #84]	@ 0x54
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002cfe:	e9d5 c716 	ldrd	ip, r7, [r5, #88]	@ 0x58
 8002d02:	f007 071f 	and.w	r7, r7, #31
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d06:	f000 80e9 	beq.w	8002edc <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002d0a:	487a      	ldr	r0, [pc, #488]	@ (8002ef4 <HAL_DMAEx_MultiBufferStart_IT+0x234>)
 8002d0c:	4284      	cmp	r4, r0
 8002d0e:	f000 80e5 	beq.w	8002edc <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002d12:	3018      	adds	r0, #24
 8002d14:	4284      	cmp	r4, r0
 8002d16:	f000 80e1 	beq.w	8002edc <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002d1a:	3018      	adds	r0, #24
 8002d1c:	4284      	cmp	r4, r0
 8002d1e:	f000 80dd 	beq.w	8002edc <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002d22:	3018      	adds	r0, #24
 8002d24:	4284      	cmp	r4, r0
 8002d26:	f000 80d9 	beq.w	8002edc <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002d2a:	3018      	adds	r0, #24
 8002d2c:	4284      	cmp	r4, r0
 8002d2e:	f000 80d5 	beq.w	8002edc <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002d32:	3018      	adds	r0, #24
 8002d34:	4284      	cmp	r4, r0
 8002d36:	f000 80d1 	beq.w	8002edc <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002d3a:	3018      	adds	r0, #24
 8002d3c:	4284      	cmp	r4, r0
 8002d3e:	f000 80cd 	beq.w	8002edc <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002d42:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 8002d46:	4284      	cmp	r4, r0
 8002d48:	f000 80c8 	beq.w	8002edc <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002d4c:	3018      	adds	r0, #24
 8002d4e:	4284      	cmp	r4, r0
 8002d50:	f000 80c4 	beq.w	8002edc <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002d54:	3018      	adds	r0, #24
 8002d56:	4284      	cmp	r4, r0
 8002d58:	f000 80c0 	beq.w	8002edc <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002d5c:	3018      	adds	r0, #24
 8002d5e:	4284      	cmp	r4, r0
 8002d60:	f000 80bc 	beq.w	8002edc <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002d64:	3018      	adds	r0, #24
 8002d66:	4284      	cmp	r4, r0
 8002d68:	f000 80b8 	beq.w	8002edc <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002d6c:	3018      	adds	r0, #24
 8002d6e:	4284      	cmp	r4, r0
 8002d70:	f000 80b4 	beq.w	8002edc <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002d74:	3018      	adds	r0, #24
 8002d76:	4284      	cmp	r4, r0
 8002d78:	f000 80b0 	beq.w	8002edc <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8002d7c:	3018      	adds	r0, #24
 8002d7e:	4284      	cmp	r4, r0
 8002d80:	f000 80ac 	beq.w	8002edc <HAL_DMAEx_MultiBufferStart_IT+0x21c>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8002d84:	6820      	ldr	r0, [r4, #0]
 8002d86:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 8002d8a:	f040 0020 	orr.w	r0, r0, #32
 8002d8e:	6020      	str	r0, [r4, #0]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 8002d90:	6123      	str	r3, [r4, #16]
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002d92:	2301      	movs	r3, #1
 8002d94:	40bb      	lsls	r3, r7
 8002d96:	f8cc 3004 	str.w	r3, [ip, #4]
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d9a:	9b06      	ldr	r3, [sp, #24]
 8002d9c:	4628      	mov	r0, r5
 8002d9e:	f7ff ff5f 	bl	8002c60 <DMA_MultiBufferSetConfig>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002da2:	42b4      	cmp	r4, r6
 8002da4:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8002da6:	f000 80a9 	beq.w	8002efc <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002daa:	4b52      	ldr	r3, [pc, #328]	@ (8002ef4 <HAL_DMAEx_MultiBufferStart_IT+0x234>)
 8002dac:	429c      	cmp	r4, r3
 8002dae:	f000 80a5 	beq.w	8002efc <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002db2:	3318      	adds	r3, #24
 8002db4:	429c      	cmp	r4, r3
 8002db6:	f000 80a1 	beq.w	8002efc <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002dba:	3318      	adds	r3, #24
 8002dbc:	429c      	cmp	r4, r3
 8002dbe:	f000 809d 	beq.w	8002efc <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002dc2:	3318      	adds	r3, #24
 8002dc4:	429c      	cmp	r4, r3
 8002dc6:	f000 8099 	beq.w	8002efc <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002dca:	3318      	adds	r3, #24
 8002dcc:	429c      	cmp	r4, r3
 8002dce:	f000 8095 	beq.w	8002efc <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002dd2:	3318      	adds	r3, #24
 8002dd4:	429c      	cmp	r4, r3
 8002dd6:	f000 8091 	beq.w	8002efc <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002dda:	3318      	adds	r3, #24
 8002ddc:	429c      	cmp	r4, r3
 8002dde:	f000 808d 	beq.w	8002efc <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002de2:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8002de6:	429c      	cmp	r4, r3
 8002de8:	f000 8088 	beq.w	8002efc <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002dec:	3318      	adds	r3, #24
 8002dee:	429c      	cmp	r4, r3
 8002df0:	f000 8084 	beq.w	8002efc <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002df4:	3318      	adds	r3, #24
 8002df6:	429c      	cmp	r4, r3
 8002df8:	f000 8080 	beq.w	8002efc <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002dfc:	3318      	adds	r3, #24
 8002dfe:	429c      	cmp	r4, r3
 8002e00:	d07c      	beq.n	8002efc <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e02:	3318      	adds	r3, #24
 8002e04:	429c      	cmp	r4, r3
 8002e06:	d079      	beq.n	8002efc <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e08:	3318      	adds	r3, #24
 8002e0a:	429c      	cmp	r4, r3
 8002e0c:	d076      	beq.n	8002efc <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e0e:	3318      	adds	r3, #24
 8002e10:	429c      	cmp	r4, r3
 8002e12:	d073      	beq.n	8002efc <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e14:	3318      	adds	r3, #24
 8002e16:	429c      	cmp	r4, r3
 8002e18:	d070      	beq.n	8002efc <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e1a:	4b37      	ldr	r3, [pc, #220]	@ (8002ef8 <HAL_DMAEx_MultiBufferStart_IT+0x238>)
 8002e1c:	429c      	cmp	r4, r3
 8002e1e:	d06d      	beq.n	8002efc <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e20:	3314      	adds	r3, #20
 8002e22:	429c      	cmp	r4, r3
 8002e24:	d06a      	beq.n	8002efc <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e26:	3314      	adds	r3, #20
 8002e28:	429c      	cmp	r4, r3
 8002e2a:	d067      	beq.n	8002efc <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e2c:	3314      	adds	r3, #20
 8002e2e:	429c      	cmp	r4, r3
 8002e30:	d064      	beq.n	8002efc <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e32:	3314      	adds	r3, #20
 8002e34:	429c      	cmp	r4, r3
 8002e36:	d061      	beq.n	8002efc <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e38:	3314      	adds	r3, #20
 8002e3a:	429c      	cmp	r4, r3
 8002e3c:	d05e      	beq.n	8002efc <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e3e:	3314      	adds	r3, #20
 8002e40:	429c      	cmp	r4, r3
 8002e42:	d05b      	beq.n	8002efc <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 8002e44:	3314      	adds	r3, #20
 8002e46:	429c      	cmp	r4, r3
 8002e48:	d058      	beq.n	8002efc <HAL_DMAEx_MultiBufferStart_IT+0x23c>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002e4a:	6823      	ldr	r3, [r4, #0]
 8002e4c:	f023 030e 	bic.w	r3, r3, #14
 8002e50:	f043 030a 	orr.w	r3, r3, #10
 8002e54:	6023      	str	r3, [r4, #0]
      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e56:	2a00      	cmp	r2, #0
 8002e58:	f040 80d9 	bne.w	800300e <HAL_DMAEx_MultiBufferStart_IT+0x34e>
 8002e5c:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f040 80d5 	bne.w	800300e <HAL_DMAEx_MultiBufferStart_IT+0x34e>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e64:	4b24      	ldr	r3, [pc, #144]	@ (8002ef8 <HAL_DMAEx_MultiBufferStart_IT+0x238>)
 8002e66:	429c      	cmp	r4, r3
 8002e68:	f040 80d9 	bne.w	800301e <HAL_DMAEx_MultiBufferStart_IT+0x35e>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002e6c:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	03d2      	lsls	r2, r2, #15
 8002e72:	f100 80f6 	bmi.w	8003062 <HAL_DMAEx_MultiBufferStart_IT+0x3a2>
      if(hdma->DMAmuxRequestGen != 0U)
 8002e76:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 8002e78:	b11b      	cbz	r3, 8002e82 <HAL_DMAEx_MultiBufferStart_IT+0x1c2>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e80:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8002e82:	42b4      	cmp	r4, r6
 8002e84:	f000 80e7 	beq.w	8003056 <HAL_DMAEx_MultiBufferStart_IT+0x396>
 8002e88:	4b1a      	ldr	r3, [pc, #104]	@ (8002ef4 <HAL_DMAEx_MultiBufferStart_IT+0x234>)
 8002e8a:	429c      	cmp	r4, r3
 8002e8c:	f000 80e3 	beq.w	8003056 <HAL_DMAEx_MultiBufferStart_IT+0x396>
 8002e90:	3318      	adds	r3, #24
 8002e92:	429c      	cmp	r4, r3
 8002e94:	f000 80df 	beq.w	8003056 <HAL_DMAEx_MultiBufferStart_IT+0x396>
 8002e98:	3318      	adds	r3, #24
 8002e9a:	429c      	cmp	r4, r3
 8002e9c:	f000 80db 	beq.w	8003056 <HAL_DMAEx_MultiBufferStart_IT+0x396>
 8002ea0:	3318      	adds	r3, #24
 8002ea2:	429c      	cmp	r4, r3
 8002ea4:	f000 80d7 	beq.w	8003056 <HAL_DMAEx_MultiBufferStart_IT+0x396>
 8002ea8:	3318      	adds	r3, #24
 8002eaa:	429c      	cmp	r4, r3
 8002eac:	f000 80d3 	beq.w	8003056 <HAL_DMAEx_MultiBufferStart_IT+0x396>
 8002eb0:	3318      	adds	r3, #24
 8002eb2:	429c      	cmp	r4, r3
 8002eb4:	f000 80cf 	beq.w	8003056 <HAL_DMAEx_MultiBufferStart_IT+0x396>
 8002eb8:	3318      	adds	r3, #24
 8002eba:	429c      	cmp	r4, r3
 8002ebc:	f000 80cb 	beq.w	8003056 <HAL_DMAEx_MultiBufferStart_IT+0x396>
 8002ec0:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8002ec4:	429c      	cmp	r4, r3
 8002ec6:	f000 80c6 	beq.w	8003056 <HAL_DMAEx_MultiBufferStart_IT+0x396>
 8002eca:	3318      	adds	r3, #24
 8002ecc:	429c      	cmp	r4, r3
 8002ece:	f000 80c2 	beq.w	8003056 <HAL_DMAEx_MultiBufferStart_IT+0x396>
 8002ed2:	3318      	adds	r3, #24
 8002ed4:	429c      	cmp	r4, r3
 8002ed6:	f000 80be 	beq.w	8003056 <HAL_DMAEx_MultiBufferStart_IT+0x396>
 8002eda:	e0bc      	b.n	8003056 <HAL_DMAEx_MultiBufferStart_IT+0x396>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8002edc:	6820      	ldr	r0, [r4, #0]
 8002ede:	f440 2080 	orr.w	r0, r0, #262144	@ 0x40000
 8002ee2:	6020      	str	r0, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8002ee4:	6123      	str	r3, [r4, #16]
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002ee6:	233f      	movs	r3, #63	@ 0x3f
 8002ee8:	40bb      	lsls	r3, r7
 8002eea:	f8cc 3008 	str.w	r3, [ip, #8]
 8002eee:	e754      	b.n	8002d9a <HAL_DMAEx_MultiBufferStart_IT+0xda>
 8002ef0:	40020010 	.word	0x40020010
 8002ef4:	40020028 	.word	0x40020028
 8002ef8:	58025408 	.word	0x58025408
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002efc:	e9d5 3119 	ldrd	r3, r1, [r5, #100]	@ 0x64
 8002f00:	6059      	str	r1, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8002f02:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 8002f04:	b113      	cbz	r3, 8002f0c <HAL_DMAEx_MultiBufferStart_IT+0x24c>
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f06:	e9d5 311c 	ldrd	r3, r1, [r5, #112]	@ 0x70
 8002f0a:	6059      	str	r1, [r3, #4]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f0c:	42b4      	cmp	r4, r6
 8002f0e:	d02e      	beq.n	8002f6e <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002f10:	4b59      	ldr	r3, [pc, #356]	@ (8003078 <HAL_DMAEx_MultiBufferStart_IT+0x3b8>)
 8002f12:	429c      	cmp	r4, r3
 8002f14:	d02b      	beq.n	8002f6e <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002f16:	3318      	adds	r3, #24
 8002f18:	429c      	cmp	r4, r3
 8002f1a:	d028      	beq.n	8002f6e <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002f1c:	3318      	adds	r3, #24
 8002f1e:	429c      	cmp	r4, r3
 8002f20:	d025      	beq.n	8002f6e <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002f22:	3318      	adds	r3, #24
 8002f24:	429c      	cmp	r4, r3
 8002f26:	d022      	beq.n	8002f6e <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002f28:	3318      	adds	r3, #24
 8002f2a:	429c      	cmp	r4, r3
 8002f2c:	d01f      	beq.n	8002f6e <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002f2e:	3318      	adds	r3, #24
 8002f30:	429c      	cmp	r4, r3
 8002f32:	d01c      	beq.n	8002f6e <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002f34:	3318      	adds	r3, #24
 8002f36:	429c      	cmp	r4, r3
 8002f38:	d019      	beq.n	8002f6e <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002f3a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8002f3e:	429c      	cmp	r4, r3
 8002f40:	d015      	beq.n	8002f6e <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002f42:	3318      	adds	r3, #24
 8002f44:	429c      	cmp	r4, r3
 8002f46:	d012      	beq.n	8002f6e <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002f48:	3318      	adds	r3, #24
 8002f4a:	429c      	cmp	r4, r3
 8002f4c:	d00f      	beq.n	8002f6e <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002f4e:	3318      	adds	r3, #24
 8002f50:	429c      	cmp	r4, r3
 8002f52:	d00c      	beq.n	8002f6e <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002f54:	3318      	adds	r3, #24
 8002f56:	429c      	cmp	r4, r3
 8002f58:	d009      	beq.n	8002f6e <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002f5a:	3318      	adds	r3, #24
 8002f5c:	429c      	cmp	r4, r3
 8002f5e:	d006      	beq.n	8002f6e <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002f60:	3318      	adds	r3, #24
 8002f62:	429c      	cmp	r4, r3
 8002f64:	d003      	beq.n	8002f6e <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002f66:	3318      	adds	r3, #24
 8002f68:	429c      	cmp	r4, r3
 8002f6a:	f47f af6e 	bne.w	8002e4a <HAL_DMAEx_MultiBufferStart_IT+0x18a>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002f6e:	6823      	ldr	r3, [r4, #0]
 8002f70:	f023 031e 	bic.w	r3, r3, #30
 8002f74:	f043 0316 	orr.w	r3, r3, #22
 8002f78:	6023      	str	r3, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8002f7a:	6963      	ldr	r3, [r4, #20]
 8002f7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f80:	6163      	str	r3, [r4, #20]
      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f82:	b90a      	cbnz	r2, 8002f88 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 8002f84:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8002f86:	b11b      	cbz	r3, 8002f90 <HAL_DMAEx_MultiBufferStart_IT+0x2d0>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002f88:	6823      	ldr	r3, [r4, #0]
 8002f8a:	f043 0308 	orr.w	r3, r3, #8
 8002f8e:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f90:	42b4      	cmp	r4, r6
 8002f92:	f43f af6b 	beq.w	8002e6c <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8002f96:	4b38      	ldr	r3, [pc, #224]	@ (8003078 <HAL_DMAEx_MultiBufferStart_IT+0x3b8>)
 8002f98:	429c      	cmp	r4, r3
 8002f9a:	f43f af67 	beq.w	8002e6c <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8002f9e:	3318      	adds	r3, #24
 8002fa0:	429c      	cmp	r4, r3
 8002fa2:	f43f af63 	beq.w	8002e6c <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8002fa6:	3318      	adds	r3, #24
 8002fa8:	429c      	cmp	r4, r3
 8002faa:	f43f af5f 	beq.w	8002e6c <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8002fae:	3318      	adds	r3, #24
 8002fb0:	429c      	cmp	r4, r3
 8002fb2:	f43f af5b 	beq.w	8002e6c <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8002fb6:	3318      	adds	r3, #24
 8002fb8:	429c      	cmp	r4, r3
 8002fba:	f43f af57 	beq.w	8002e6c <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8002fbe:	3318      	adds	r3, #24
 8002fc0:	429c      	cmp	r4, r3
 8002fc2:	f43f af53 	beq.w	8002e6c <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8002fc6:	3318      	adds	r3, #24
 8002fc8:	429c      	cmp	r4, r3
 8002fca:	f43f af4f 	beq.w	8002e6c <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8002fce:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8002fd2:	429c      	cmp	r4, r3
 8002fd4:	f43f af4a 	beq.w	8002e6c <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8002fd8:	3318      	adds	r3, #24
 8002fda:	429c      	cmp	r4, r3
 8002fdc:	f43f af46 	beq.w	8002e6c <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8002fe0:	3318      	adds	r3, #24
 8002fe2:	429c      	cmp	r4, r3
 8002fe4:	f43f af42 	beq.w	8002e6c <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8002fe8:	3318      	adds	r3, #24
 8002fea:	429c      	cmp	r4, r3
 8002fec:	f43f af3e 	beq.w	8002e6c <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8002ff0:	3318      	adds	r3, #24
 8002ff2:	429c      	cmp	r4, r3
 8002ff4:	f43f af3a 	beq.w	8002e6c <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8002ff8:	3318      	adds	r3, #24
 8002ffa:	429c      	cmp	r4, r3
 8002ffc:	f43f af36 	beq.w	8002e6c <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8003000:	3318      	adds	r3, #24
 8003002:	429c      	cmp	r4, r3
 8003004:	f43f af32 	beq.w	8002e6c <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8003008:	3318      	adds	r3, #24
 800300a:	429c      	cmp	r4, r3
 800300c:	e004      	b.n	8003018 <HAL_DMAEx_MultiBufferStart_IT+0x358>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800300e:	6823      	ldr	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003010:	42b4      	cmp	r4, r6
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003012:	f043 0304 	orr.w	r3, r3, #4
 8003016:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003018:	f47f af24 	bne.w	8002e64 <HAL_DMAEx_MultiBufferStart_IT+0x1a4>
 800301c:	e726      	b.n	8002e6c <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 800301e:	4b17      	ldr	r3, [pc, #92]	@ (800307c <HAL_DMAEx_MultiBufferStart_IT+0x3bc>)
 8003020:	429c      	cmp	r4, r3
 8003022:	f43f af23 	beq.w	8002e6c <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8003026:	3314      	adds	r3, #20
 8003028:	429c      	cmp	r4, r3
 800302a:	f43f af1f 	beq.w	8002e6c <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 800302e:	3314      	adds	r3, #20
 8003030:	429c      	cmp	r4, r3
 8003032:	f43f af1b 	beq.w	8002e6c <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8003036:	3314      	adds	r3, #20
 8003038:	429c      	cmp	r4, r3
 800303a:	f43f af17 	beq.w	8002e6c <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 800303e:	3314      	adds	r3, #20
 8003040:	429c      	cmp	r4, r3
 8003042:	f43f af13 	beq.w	8002e6c <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 8003046:	3314      	adds	r3, #20
 8003048:	429c      	cmp	r4, r3
 800304a:	f43f af0f 	beq.w	8002e6c <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
 800304e:	3314      	adds	r3, #20
 8003050:	429c      	cmp	r4, r3
 8003052:	f43f af0b 	beq.w	8002e6c <HAL_DMAEx_MultiBufferStart_IT+0x1ac>
    __HAL_DMA_ENABLE(hdma);
 8003056:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003058:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800305a:	f043 0301 	orr.w	r3, r3, #1
 800305e:	6023      	str	r3, [r4, #0]
}
 8003060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003068:	601a      	str	r2, [r3, #0]
 800306a:	e704      	b.n	8002e76 <HAL_DMAEx_MultiBufferStart_IT+0x1b6>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800306c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003070:	e62d      	b.n	8002cce <HAL_DMAEx_MultiBufferStart_IT+0xe>
  __HAL_LOCK(hdma);
 8003072:	2002      	movs	r0, #2
 8003074:	e7f4      	b.n	8003060 <HAL_DMAEx_MultiBufferStart_IT+0x3a0>
 8003076:	bf00      	nop
 8003078:	40020028 	.word	0x40020028
 800307c:	5802541c 	.word	0x5802541c

08003080 <HAL_DMAEx_ChangeMemory>:
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003080:	6803      	ldr	r3, [r0, #0]
 8003082:	4814      	ldr	r0, [pc, #80]	@ (80030d4 <HAL_DMAEx_ChangeMemory+0x54>)
 8003084:	4283      	cmp	r3, r0
 8003086:	d01e      	beq.n	80030c6 <HAL_DMAEx_ChangeMemory+0x46>
 8003088:	3018      	adds	r0, #24
 800308a:	4283      	cmp	r3, r0
 800308c:	d01b      	beq.n	80030c6 <HAL_DMAEx_ChangeMemory+0x46>
 800308e:	3018      	adds	r0, #24
 8003090:	4283      	cmp	r3, r0
 8003092:	d018      	beq.n	80030c6 <HAL_DMAEx_ChangeMemory+0x46>
 8003094:	3018      	adds	r0, #24
 8003096:	4283      	cmp	r3, r0
 8003098:	d015      	beq.n	80030c6 <HAL_DMAEx_ChangeMemory+0x46>
 800309a:	3018      	adds	r0, #24
 800309c:	4283      	cmp	r3, r0
 800309e:	d012      	beq.n	80030c6 <HAL_DMAEx_ChangeMemory+0x46>
 80030a0:	3018      	adds	r0, #24
 80030a2:	4283      	cmp	r3, r0
 80030a4:	d00f      	beq.n	80030c6 <HAL_DMAEx_ChangeMemory+0x46>
 80030a6:	3018      	adds	r0, #24
 80030a8:	4283      	cmp	r3, r0
 80030aa:	d00c      	beq.n	80030c6 <HAL_DMAEx_ChangeMemory+0x46>
 80030ac:	3018      	adds	r0, #24
 80030ae:	4283      	cmp	r3, r0
 80030b0:	d009      	beq.n	80030c6 <HAL_DMAEx_ChangeMemory+0x46>
 80030b2:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 80030b6:	4283      	cmp	r3, r0
 80030b8:	d005      	beq.n	80030c6 <HAL_DMAEx_ChangeMemory+0x46>
 80030ba:	3018      	adds	r0, #24
 80030bc:	4283      	cmp	r3, r0
 80030be:	d002      	beq.n	80030c6 <HAL_DMAEx_ChangeMemory+0x46>
 80030c0:	3018      	adds	r0, #24
 80030c2:	4283      	cmp	r3, r0
 80030c4:	d0ff      	beq.n	80030c6 <HAL_DMAEx_ChangeMemory+0x46>
    if(memory == MEMORY0)
 80030c6:	b912      	cbnz	r2, 80030ce <HAL_DMAEx_ChangeMemory+0x4e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 80030c8:	60d9      	str	r1, [r3, #12]
}
 80030ca:	2000      	movs	r0, #0
 80030cc:	4770      	bx	lr
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 80030ce:	6119      	str	r1, [r3, #16]
 80030d0:	e7fb      	b.n	80030ca <HAL_DMAEx_ChangeMemory+0x4a>
 80030d2:	bf00      	nop
 80030d4:	40020010 	.word	0x40020010

080030d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 80030dc:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030de:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 80032a4 <HAL_GPIO_Init+0x1cc>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030e2:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80030e6:	680a      	ldr	r2, [r1, #0]
 80030e8:	fa32 f503 	lsrs.w	r5, r2, r3
 80030ec:	d102      	bne.n	80030f4 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 80030ee:	b003      	add	sp, #12
 80030f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80030f4:	2501      	movs	r5, #1
 80030f6:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00U)
 80030fa:	ea18 0202 	ands.w	r2, r8, r2
 80030fe:	f000 80bb 	beq.w	8003278 <HAL_GPIO_Init+0x1a0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003102:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003104:	2703      	movs	r7, #3
 8003106:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800310a:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800310e:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003112:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003114:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003118:	2f01      	cmp	r7, #1
 800311a:	d834      	bhi.n	8003186 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 800311c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800311e:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003122:	68cf      	ldr	r7, [r1, #12]
 8003124:	fa07 f70e 	lsl.w	r7, r7, lr
 8003128:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800312c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800312e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003130:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003134:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8003138:	409f      	lsls	r7, r3
 800313a:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 800313e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8003140:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003142:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003144:	ea07 080c 	and.w	r8, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003148:	688f      	ldr	r7, [r1, #8]
 800314a:	fa07 f70e 	lsl.w	r7, r7, lr
 800314e:	ea47 0708 	orr.w	r7, r7, r8
      GPIOx->PUPDR = temp;
 8003152:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003154:	d119      	bne.n	800318a <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 8003156:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800315a:	f003 0a07 	and.w	sl, r3, #7
 800315e:	f04f 0b0f 	mov.w	fp, #15
 8003162:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8003166:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 800316a:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800316e:	fa0b fb0a 	lsl.w	fp, fp, sl
 8003172:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003176:	690f      	ldr	r7, [r1, #16]
 8003178:	fa07 f70a 	lsl.w	r7, r7, sl
 800317c:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3U] = temp;
 8003180:	f8c8 7020 	str.w	r7, [r8, #32]
 8003184:	e001      	b.n	800318a <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003186:	2d03      	cmp	r5, #3
 8003188:	d1da      	bne.n	8003140 <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 800318a:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800318c:	fa05 f50e 	lsl.w	r5, r5, lr
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003190:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003194:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003198:	ea45 0507 	orr.w	r5, r5, r7
      GPIOx->MODER = temp;
 800319c:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800319e:	d06b      	beq.n	8003278 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031a0:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
 80031a4:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80031a8:	f003 0c03 	and.w	ip, r3, #3
 80031ac:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031b0:	f045 0502 	orr.w	r5, r5, #2
 80031b4:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80031b8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031bc:	f8c9 50f4 	str.w	r5, [r9, #244]	@ 0xf4
 80031c0:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 80031c4:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80031c8:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031cc:	f005 0502 	and.w	r5, r5, #2
 80031d0:	9501      	str	r5, [sp, #4]
 80031d2:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80031d4:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80031d6:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80031da:	4d31      	ldr	r5, [pc, #196]	@ (80032a0 <HAL_GPIO_Init+0x1c8>)
 80031dc:	42a8      	cmp	r0, r5
 80031de:	d04d      	beq.n	800327c <HAL_GPIO_Init+0x1a4>
 80031e0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80031e4:	42a8      	cmp	r0, r5
 80031e6:	d04b      	beq.n	8003280 <HAL_GPIO_Init+0x1a8>
 80031e8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80031ec:	42a8      	cmp	r0, r5
 80031ee:	d049      	beq.n	8003284 <HAL_GPIO_Init+0x1ac>
 80031f0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80031f4:	42a8      	cmp	r0, r5
 80031f6:	d047      	beq.n	8003288 <HAL_GPIO_Init+0x1b0>
 80031f8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80031fc:	42a8      	cmp	r0, r5
 80031fe:	d045      	beq.n	800328c <HAL_GPIO_Init+0x1b4>
 8003200:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003204:	42a8      	cmp	r0, r5
 8003206:	d043      	beq.n	8003290 <HAL_GPIO_Init+0x1b8>
 8003208:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800320c:	42a8      	cmp	r0, r5
 800320e:	d041      	beq.n	8003294 <HAL_GPIO_Init+0x1bc>
 8003210:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003214:	42a8      	cmp	r0, r5
 8003216:	d03f      	beq.n	8003298 <HAL_GPIO_Init+0x1c0>
 8003218:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800321c:	42a8      	cmp	r0, r5
 800321e:	d03d      	beq.n	800329c <HAL_GPIO_Init+0x1c4>
 8003220:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003224:	42a8      	cmp	r0, r5
 8003226:	bf14      	ite	ne
 8003228:	250a      	movne	r5, #10
 800322a:	2509      	moveq	r5, #9
 800322c:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003230:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003234:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003238:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 800323a:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 800323e:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8003240:	bf0c      	ite	eq
 8003242:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8003244:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003246:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        EXTI->RTSR1 = temp;
 800324a:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 800324c:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 800324e:	bf0c      	ite	eq
 8003250:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8003252:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003254:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        EXTI->FTSR1 = temp;
 8003258:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 800325a:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
        temp &= ~(iocurrent);
 800325e:	bf0c      	ite	eq
 8003260:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8003262:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003264:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8003266:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 800326a:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
        temp &= ~(iocurrent);
 800326e:	bf54      	ite	pl
 8003270:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8003272:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8003274:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
    position++;
 8003278:	3301      	adds	r3, #1
 800327a:	e734      	b.n	80030e6 <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800327c:	2500      	movs	r5, #0
 800327e:	e7d5      	b.n	800322c <HAL_GPIO_Init+0x154>
 8003280:	2501      	movs	r5, #1
 8003282:	e7d3      	b.n	800322c <HAL_GPIO_Init+0x154>
 8003284:	2502      	movs	r5, #2
 8003286:	e7d1      	b.n	800322c <HAL_GPIO_Init+0x154>
 8003288:	2503      	movs	r5, #3
 800328a:	e7cf      	b.n	800322c <HAL_GPIO_Init+0x154>
 800328c:	2504      	movs	r5, #4
 800328e:	e7cd      	b.n	800322c <HAL_GPIO_Init+0x154>
 8003290:	2505      	movs	r5, #5
 8003292:	e7cb      	b.n	800322c <HAL_GPIO_Init+0x154>
 8003294:	2506      	movs	r5, #6
 8003296:	e7c9      	b.n	800322c <HAL_GPIO_Init+0x154>
 8003298:	2507      	movs	r5, #7
 800329a:	e7c7      	b.n	800322c <HAL_GPIO_Init+0x154>
 800329c:	2508      	movs	r5, #8
 800329e:	e7c5      	b.n	800322c <HAL_GPIO_Init+0x154>
 80032a0:	58020000 	.word	0x58020000
 80032a4:	58024400 	.word	0x58024400

080032a8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032a8:	b10a      	cbz	r2, 80032ae <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80032aa:	6181      	str	r1, [r0, #24]
  }
}
 80032ac:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80032ae:	0409      	lsls	r1, r1, #16
 80032b0:	e7fb      	b.n	80032aa <HAL_GPIO_WritePin+0x2>

080032b2 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80032b2:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032b4:	ea01 0203 	and.w	r2, r1, r3
 80032b8:	ea21 0103 	bic.w	r1, r1, r3
 80032bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80032c0:	6181      	str	r1, [r0, #24]
}
 80032c2:	4770      	bx	lr

080032c4 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80032c4:	6803      	ldr	r3, [r0, #0]
 80032c6:	699a      	ldr	r2, [r3, #24]
 80032c8:	0791      	lsls	r1, r2, #30
 80032ca:	d501      	bpl.n	80032d0 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80032cc:	2200      	movs	r2, #0
 80032ce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032d0:	699a      	ldr	r2, [r3, #24]
 80032d2:	07d2      	lsls	r2, r2, #31
 80032d4:	d403      	bmi.n	80032de <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80032d6:	699a      	ldr	r2, [r3, #24]
 80032d8:	f042 0201 	orr.w	r2, r2, #1
 80032dc:	619a      	str	r2, [r3, #24]
  }
}
 80032de:	4770      	bx	lr

080032e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80032e0:	b530      	push	{r4, r5, lr}
 80032e2:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032e4:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80032e8:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032ea:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 80032ec:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 80032f2:	4a05      	ldr	r2, [pc, #20]	@ (8003308 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032f4:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 80032f6:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 80032fe:	ea20 0002 	bic.w	r0, r0, r2
 8003302:	4303      	orrs	r3, r0
 8003304:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003306:	bd30      	pop	{r4, r5, pc}
 8003308:	03ff63ff 	.word	0x03ff63ff

0800330c <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 800330c:	6803      	ldr	r3, [r0, #0]
{
 800330e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8003312:	699c      	ldr	r4, [r3, #24]
{
 8003314:	4605      	mov	r5, r0
 8003316:	460f      	mov	r7, r1
 8003318:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800331a:	f014 0410 	ands.w	r4, r4, #16
 800331e:	d06f      	beq.n	8003400 <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 8003320:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003322:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8003324:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003326:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003328:	682b      	ldr	r3, [r5, #0]
 800332a:	699a      	ldr	r2, [r3, #24]
 800332c:	0690      	lsls	r0, r2, #26
 800332e:	d461      	bmi.n	80033f4 <I2C_IsErrorOccurred+0xe8>
 8003330:	f1b8 0f00 	cmp.w	r8, #0
 8003334:	d035      	beq.n	80033a2 <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 8003336:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 800333a:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 800333c:	682e      	ldr	r6, [r5, #0]
 800333e:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003340:	05d9      	lsls	r1, r3, #23
 8003342:	d505      	bpl.n	8003350 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003344:	f44f 7280 	mov.w	r2, #256	@ 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8003348:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 800334c:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800334e:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003350:	055a      	lsls	r2, r3, #21
 8003352:	d505      	bpl.n	8003360 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003354:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8003358:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 800335c:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800335e:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003360:	059b      	lsls	r3, r3, #22
 8003362:	d54f      	bpl.n	8003404 <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003364:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8003368:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800336c:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 800336e:	4628      	mov	r0, r5
 8003370:	f7ff ffa8 	bl	80032c4 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8003374:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 8003376:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8003378:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 800337c:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8003380:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8003384:	f023 0301 	bic.w	r3, r3, #1
 8003388:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 800338a:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800338c:	4323      	orrs	r3, r4
 800338e:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003390:	2320      	movs	r3, #32
 8003392:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003396:	2300      	movs	r3, #0
 8003398:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 800339c:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 80033a0:	e032      	b.n	8003408 <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 80033a2:	1c7a      	adds	r2, r7, #1
 80033a4:	d0c1      	beq.n	800332a <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80033a6:	f7fe f8a3 	bl	80014f0 <HAL_GetTick>
 80033aa:	1b80      	subs	r0, r0, r6
 80033ac:	42b8      	cmp	r0, r7
 80033ae:	d801      	bhi.n	80033b4 <I2C_IsErrorOccurred+0xa8>
 80033b0:	2f00      	cmp	r7, #0
 80033b2:	d1b9      	bne.n	8003328 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80033b4:	682b      	ldr	r3, [r5, #0]
 80033b6:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 80033b8:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80033bc:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 80033be:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80033c0:	0400      	lsls	r0, r0, #16
 80033c2:	d50a      	bpl.n	80033da <I2C_IsErrorOccurred+0xce>
 80033c4:	0449      	lsls	r1, r1, #17
 80033c6:	d408      	bmi.n	80033da <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 80033c8:	2a20      	cmp	r2, #32
 80033ca:	d006      	beq.n	80033da <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80033d2:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 80033d4:	f7fe f88c 	bl	80014f0 <HAL_GetTick>
 80033d8:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033da:	682b      	ldr	r3, [r5, #0]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	069b      	lsls	r3, r3, #26
 80033e0:	d4a2      	bmi.n	8003328 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80033e2:	f7fe f885 	bl	80014f0 <HAL_GetTick>
 80033e6:	1b80      	subs	r0, r0, r6
 80033e8:	2819      	cmp	r0, #25
 80033ea:	d9f6      	bls.n	80033da <I2C_IsErrorOccurred+0xce>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80033ec:	2420      	movs	r4, #32
              status = HAL_ERROR;
 80033ee:	f04f 0801 	mov.w	r8, #1
 80033f2:	e799      	b.n	8003328 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 80033f4:	f1b8 0f00 	cmp.w	r8, #0
 80033f8:	d19d      	bne.n	8003336 <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033fa:	2220      	movs	r2, #32
 80033fc:	61da      	str	r2, [r3, #28]
 80033fe:	e79a      	b.n	8003336 <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 8003400:	4620      	mov	r0, r4
 8003402:	e79b      	b.n	800333c <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 8003404:	2800      	cmp	r0, #0
 8003406:	d1b2      	bne.n	800336e <I2C_IsErrorOccurred+0x62>
}
 8003408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800340c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800340c:	b570      	push	{r4, r5, r6, lr}
 800340e:	4604      	mov	r4, r0
 8003410:	460d      	mov	r5, r1
 8003412:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003414:	6823      	ldr	r3, [r4, #0]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	079b      	lsls	r3, r3, #30
 800341a:	d501      	bpl.n	8003420 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 800341c:	2000      	movs	r0, #0
 800341e:	e01f      	b.n	8003460 <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003420:	4632      	mov	r2, r6
 8003422:	4629      	mov	r1, r5
 8003424:	4620      	mov	r0, r4
 8003426:	f7ff ff71 	bl	800330c <I2C_IsErrorOccurred>
 800342a:	b9c0      	cbnz	r0, 800345e <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 800342c:	1c6a      	adds	r2, r5, #1
 800342e:	d0f1      	beq.n	8003414 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003430:	f7fe f85e 	bl	80014f0 <HAL_GetTick>
 8003434:	1b80      	subs	r0, r0, r6
 8003436:	42a8      	cmp	r0, r5
 8003438:	d801      	bhi.n	800343e <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800343a:	2d00      	cmp	r5, #0
 800343c:	d1ea      	bne.n	8003414 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800343e:	6823      	ldr	r3, [r4, #0]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	f013 0302 	ands.w	r3, r3, #2
 8003446:	d1e5      	bne.n	8003414 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003448:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 800344a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800344e:	f042 0220 	orr.w	r2, r2, #32
 8003452:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003454:	2220      	movs	r2, #32
 8003456:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800345a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 800345e:	2001      	movs	r0, #1
}
 8003460:	bd70      	pop	{r4, r5, r6, pc}

08003462 <I2C_WaitOnFlagUntilTimeout>:
{
 8003462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003466:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800346a:	4604      	mov	r4, r0
 800346c:	460f      	mov	r7, r1
 800346e:	4616      	mov	r6, r2
 8003470:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003472:	6823      	ldr	r3, [r4, #0]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	ea37 0303 	bics.w	r3, r7, r3
 800347a:	bf0c      	ite	eq
 800347c:	2301      	moveq	r3, #1
 800347e:	2300      	movne	r3, #0
 8003480:	42b3      	cmp	r3, r6
 8003482:	d001      	beq.n	8003488 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8003484:	2000      	movs	r0, #0
 8003486:	e025      	b.n	80034d4 <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003488:	4642      	mov	r2, r8
 800348a:	4629      	mov	r1, r5
 800348c:	4620      	mov	r0, r4
 800348e:	f7ff ff3d 	bl	800330c <I2C_IsErrorOccurred>
 8003492:	b9f0      	cbnz	r0, 80034d2 <I2C_WaitOnFlagUntilTimeout+0x70>
    if (Timeout != HAL_MAX_DELAY)
 8003494:	1c6b      	adds	r3, r5, #1
 8003496:	d0ec      	beq.n	8003472 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003498:	f7fe f82a 	bl	80014f0 <HAL_GetTick>
 800349c:	eba0 0008 	sub.w	r0, r0, r8
 80034a0:	42a8      	cmp	r0, r5
 80034a2:	d801      	bhi.n	80034a8 <I2C_WaitOnFlagUntilTimeout+0x46>
 80034a4:	2d00      	cmp	r5, #0
 80034a6:	d1e4      	bne.n	8003472 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80034a8:	6823      	ldr	r3, [r4, #0]
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	ea37 0303 	bics.w	r3, r7, r3
 80034b0:	bf0c      	ite	eq
 80034b2:	2301      	moveq	r3, #1
 80034b4:	2300      	movne	r3, #0
 80034b6:	42b3      	cmp	r3, r6
 80034b8:	d1db      	bne.n	8003472 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034ba:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80034bc:	f043 0320 	orr.w	r3, r3, #32
 80034c0:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80034c2:	2320      	movs	r3, #32
 80034c4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c8:	2300      	movs	r3, #0
 80034ca:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 80034ce:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80034d2:	2001      	movs	r0, #1
}
 80034d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080034d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80034d8:	b570      	push	{r4, r5, r6, lr}
 80034da:	4604      	mov	r4, r0
 80034dc:	460d      	mov	r5, r1
 80034de:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034e0:	6823      	ldr	r3, [r4, #0]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	069b      	lsls	r3, r3, #26
 80034e6:	d501      	bpl.n	80034ec <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 80034e8:	2000      	movs	r0, #0
 80034ea:	e01d      	b.n	8003528 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034ec:	4632      	mov	r2, r6
 80034ee:	4629      	mov	r1, r5
 80034f0:	4620      	mov	r0, r4
 80034f2:	f7ff ff0b 	bl	800330c <I2C_IsErrorOccurred>
 80034f6:	b9b0      	cbnz	r0, 8003526 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034f8:	f7fd fffa 	bl	80014f0 <HAL_GetTick>
 80034fc:	1b80      	subs	r0, r0, r6
 80034fe:	42a8      	cmp	r0, r5
 8003500:	d801      	bhi.n	8003506 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8003502:	2d00      	cmp	r5, #0
 8003504:	d1ec      	bne.n	80034e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003506:	6823      	ldr	r3, [r4, #0]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	f013 0320 	ands.w	r3, r3, #32
 800350e:	d1e7      	bne.n	80034e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003510:	6c62      	ldr	r2, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8003512:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003516:	f042 0220 	orr.w	r2, r2, #32
 800351a:	6462      	str	r2, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800351c:	2220      	movs	r2, #32
 800351e:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003522:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 8003526:	2001      	movs	r0, #1
}
 8003528:	bd70      	pop	{r4, r5, r6, pc}
	...

0800352c <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800352c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003530:	4605      	mov	r5, r0
 8003532:	460e      	mov	r6, r1
 8003534:	4617      	mov	r7, r2
  HAL_StatusTypeDef status = HAL_OK;
 8003536:	2400      	movs	r4, #0
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003538:	f04f 0810 	mov.w	r8, #16
        I2C_RESET_CR2(hi2c);
 800353c:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 80035cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003540:	682b      	ldr	r3, [r5, #0]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	075b      	lsls	r3, r3, #29
 8003546:	d400      	bmi.n	800354a <I2C_WaitOnRXNEFlagUntilTimeout+0x1e>
 8003548:	b114      	cbz	r4, 8003550 <I2C_WaitOnRXNEFlagUntilTimeout+0x24>
}
 800354a:	4620      	mov	r0, r4
 800354c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003550:	463a      	mov	r2, r7
 8003552:	4631      	mov	r1, r6
 8003554:	4628      	mov	r0, r5
 8003556:	f7ff fed9 	bl	800330c <I2C_IsErrorOccurred>
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800355a:	682b      	ldr	r3, [r5, #0]
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800355c:	4604      	mov	r4, r0
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800355e:	699a      	ldr	r2, [r3, #24]
 8003560:	0690      	lsls	r0, r2, #26
 8003562:	d40c      	bmi.n	800357e <I2C_WaitOnRXNEFlagUntilTimeout+0x52>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003564:	3c00      	subs	r4, #0
 8003566:	bf18      	it	ne
 8003568:	2401      	movne	r4, #1
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800356a:	f7fd ffc1 	bl	80014f0 <HAL_GetTick>
 800356e:	1bc0      	subs	r0, r0, r7
 8003570:	42b0      	cmp	r0, r6
 8003572:	d801      	bhi.n	8003578 <I2C_WaitOnRXNEFlagUntilTimeout+0x4c>
 8003574:	2e00      	cmp	r6, #0
 8003576:	d1e3      	bne.n	8003540 <I2C_WaitOnRXNEFlagUntilTimeout+0x14>
 8003578:	b1d4      	cbz	r4, 80035b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
{
 800357a:	2401      	movs	r4, #1
 800357c:	e7e0      	b.n	8003540 <I2C_WaitOnRXNEFlagUntilTimeout+0x14>
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800357e:	b99c      	cbnz	r4, 80035a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003580:	699a      	ldr	r2, [r3, #24]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003582:	699a      	ldr	r2, [r3, #24]
 8003584:	06d1      	lsls	r1, r2, #27
 8003586:	d511      	bpl.n	80035ac <I2C_WaitOnRXNEFlagUntilTimeout+0x80>
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003588:	2204      	movs	r2, #4
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800358a:	2120      	movs	r1, #32
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800358c:	f8c3 801c 	str.w	r8, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003590:	646a      	str	r2, [r5, #68]	@ 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003592:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	ea02 0209 	and.w	r2, r2, r9
 800359a:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 800359c:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
        __HAL_UNLOCK(hi2c);
 80035a0:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035a4:	f885 4042 	strb.w	r4, [r5, #66]	@ 0x42
{
 80035a8:	2401      	movs	r4, #1
 80035aa:	e7de      	b.n	800356a <I2C_WaitOnRXNEFlagUntilTimeout+0x3e>
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035ac:	646c      	str	r4, [r5, #68]	@ 0x44
 80035ae:	e7dc      	b.n	800356a <I2C_WaitOnRXNEFlagUntilTimeout+0x3e>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80035b0:	682b      	ldr	r3, [r5, #0]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	075a      	lsls	r2, r3, #29
 80035b6:	d4c3      	bmi.n	8003540 <I2C_WaitOnRXNEFlagUntilTimeout+0x14>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035b8:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80035ba:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035be:	f043 0320 	orr.w	r3, r3, #32
 80035c2:	646b      	str	r3, [r5, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035c4:	2320      	movs	r3, #32
 80035c6:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
        status = HAL_ERROR;
 80035ca:	e7d6      	b.n	800357a <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
 80035cc:	fe00e800 	.word	0xfe00e800

080035d0 <HAL_I2C_Init>:
{
 80035d0:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80035d2:	4604      	mov	r4, r0
 80035d4:	2800      	cmp	r0, #0
 80035d6:	d04e      	beq.n	8003676 <HAL_I2C_Init+0xa6>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035d8:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80035dc:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80035e0:	b91b      	cbnz	r3, 80035ea <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80035e2:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 80035e6:	f7fd fd95 	bl	8001114 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80035ea:	2324      	movs	r3, #36	@ 0x24
 80035ec:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 80035f0:	6823      	ldr	r3, [r4, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	f022 0201 	bic.w	r2, r2, #1
 80035f8:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80035fa:	6862      	ldr	r2, [r4, #4]
 80035fc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003600:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003608:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800360a:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800360e:	2901      	cmp	r1, #1
 8003610:	d106      	bne.n	8003620 <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003612:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003616:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003618:	685a      	ldr	r2, [r3, #4]
 800361a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800361e:	e007      	b.n	8003630 <HAL_I2C_Init+0x60>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003620:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003624:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003626:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003628:	d1f6      	bne.n	8003618 <HAL_I2C_Init+0x48>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800362a:	685a      	ldr	r2, [r3, #4]
 800362c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003630:	605a      	str	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003632:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 800363a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800363e:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003640:	68da      	ldr	r2, [r3, #12]
 8003642:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003646:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003648:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 800364c:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 800364e:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003650:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003654:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003656:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 800365a:	430a      	orrs	r2, r1
 800365c:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	f042 0201 	orr.w	r2, r2, #1
 8003664:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8003666:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003668:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800366a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800366e:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003670:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8003674:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003676:	2001      	movs	r0, #1
 8003678:	e7fc      	b.n	8003674 <HAL_I2C_Init+0xa4>
	...

0800367c <HAL_I2C_Master_Transmit>:
{
 800367c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8003680:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003682:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8003686:	4604      	mov	r4, r0
 8003688:	460e      	mov	r6, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800368a:	2b20      	cmp	r3, #32
{
 800368c:	4690      	mov	r8, r2
 800368e:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003690:	f040 809b 	bne.w	80037ca <HAL_I2C_Master_Transmit+0x14e>
    __HAL_LOCK(hi2c);
 8003694:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8003698:	2b01      	cmp	r3, #1
 800369a:	f000 8096 	beq.w	80037ca <HAL_I2C_Master_Transmit+0x14e>
 800369e:	f04f 0a01 	mov.w	sl, #1
 80036a2:	f880 a040 	strb.w	sl, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 80036a6:	f7fd ff23 	bl	80014f0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036aa:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 80036ac:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036ae:	9000      	str	r0, [sp, #0]
 80036b0:	4652      	mov	r2, sl
 80036b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80036b6:	4620      	mov	r0, r4
 80036b8:	f7ff fed3 	bl	8003462 <I2C_WaitOnFlagUntilTimeout>
 80036bc:	b118      	cbz	r0, 80036c6 <HAL_I2C_Master_Transmit+0x4a>
      return HAL_ERROR;
 80036be:	2001      	movs	r0, #1
}
 80036c0:	b002      	add	sp, #8
 80036c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036c6:	2321      	movs	r3, #33	@ 0x21
    hi2c->pBuffPtr  = pData;
 80036c8:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
    hi2c->XferISR   = NULL;
 80036cc:	6360      	str	r0, [r4, #52]	@ 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036ce:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80036d2:	2310      	movs	r3, #16
 80036d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036d8:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 80036da:	f8a4 902a 	strh.w	r9, [r4, #42]	@ 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036de:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	2bff      	cmp	r3, #255	@ 0xff
 80036e4:	d818      	bhi.n	8003718 <HAL_I2C_Master_Transmit+0x9c>
      hi2c->XferSize = hi2c->XferCount;
 80036e6:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      xfermode = I2C_AUTOEND_MODE;
 80036e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 80036ec:	b292      	uxth	r2, r2
      xfermode = I2C_AUTOEND_MODE;
 80036ee:	8522      	strh	r2, [r4, #40]	@ 0x28
    if (hi2c->XferSize > 0U)
 80036f0:	b1b2      	cbz	r2, 8003720 <HAL_I2C_Master_Transmit+0xa4>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80036f2:	46c4      	mov	ip, r8
 80036f4:	6821      	ldr	r1, [r4, #0]
      hi2c->XferSize--;
 80036f6:	3a01      	subs	r2, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80036f8:	f81c 0b01 	ldrb.w	r0, [ip], #1
      hi2c->XferSize--;
 80036fc:	b292      	uxth	r2, r2
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80036fe:	6288      	str	r0, [r1, #40]	@ 0x28
      hi2c->XferCount--;
 8003700:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8003702:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003704:	3201      	adds	r2, #1
      hi2c->XferCount--;
 8003706:	3901      	subs	r1, #1
      hi2c->pBuffPtr++;
 8003708:	f8c4 c024 	str.w	ip, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800370c:	b289      	uxth	r1, r1
 800370e:	8561      	strh	r1, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003710:	492f      	ldr	r1, [pc, #188]	@ (80037d0 <HAL_I2C_Master_Transmit+0x154>)
 8003712:	9100      	str	r1, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003714:	b2d2      	uxtb	r2, r2
 8003716:	e005      	b.n	8003724 <HAL_I2C_Master_Transmit+0xa8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003718:	22ff      	movs	r2, #255	@ 0xff
      xfermode = I2C_RELOAD_MODE;
 800371a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800371e:	e7e6      	b.n	80036ee <HAL_I2C_Master_Transmit+0x72>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003720:	492b      	ldr	r1, [pc, #172]	@ (80037d0 <HAL_I2C_Master_Transmit+0x154>)
 8003722:	9100      	str	r1, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003724:	4631      	mov	r1, r6
 8003726:	4620      	mov	r0, r4
 8003728:	f7ff fdda 	bl	80032e0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800372c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800372e:	462a      	mov	r2, r5
 8003730:	4639      	mov	r1, r7
 8003732:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8003734:	b29b      	uxth	r3, r3
 8003736:	b9bb      	cbnz	r3, 8003768 <HAL_I2C_Master_Transmit+0xec>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003738:	f7ff fece 	bl	80034d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800373c:	2800      	cmp	r0, #0
 800373e:	d1be      	bne.n	80036be <HAL_I2C_Master_Transmit+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003740:	6823      	ldr	r3, [r4, #0]
 8003742:	2120      	movs	r1, #32
 8003744:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 800374c:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8003750:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8003754:	f022 0201 	bic.w	r2, r2, #1
 8003758:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800375a:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800375e:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003762:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8003766:	e7ab      	b.n	80036c0 <HAL_I2C_Master_Transmit+0x44>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003768:	f7ff fe50 	bl	800340c <I2C_WaitOnTXISFlagUntilTimeout>
 800376c:	2800      	cmp	r0, #0
 800376e:	d1a6      	bne.n	80036be <HAL_I2C_Master_Transmit+0x42>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003770:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003772:	6822      	ldr	r2, [r4, #0]
 8003774:	f813 1b01 	ldrb.w	r1, [r3], #1
 8003778:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800377a:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800377c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800377e:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8003780:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8003782:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8003784:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8003786:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8003788:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800378a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800378c:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800378e:	b29b      	uxth	r3, r3
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0cb      	beq.n	800372c <HAL_I2C_Master_Transmit+0xb0>
 8003794:	2a00      	cmp	r2, #0
 8003796:	d1c9      	bne.n	800372c <HAL_I2C_Master_Transmit+0xb0>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003798:	463b      	mov	r3, r7
 800379a:	2180      	movs	r1, #128	@ 0x80
 800379c:	4620      	mov	r0, r4
 800379e:	9500      	str	r5, [sp, #0]
 80037a0:	f7ff fe5f 	bl	8003462 <I2C_WaitOnFlagUntilTimeout>
 80037a4:	2800      	cmp	r0, #0
 80037a6:	d18a      	bne.n	80036be <HAL_I2C_Master_Transmit+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037a8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	2bff      	cmp	r3, #255	@ 0xff
 80037ae:	d905      	bls.n	80037bc <HAL_I2C_Master_Transmit+0x140>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80037b0:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037b2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80037b6:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037b8:	9000      	str	r0, [sp, #0]
 80037ba:	e7b3      	b.n	8003724 <HAL_I2C_Master_Transmit+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 80037bc:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 80037c2:	b292      	uxth	r2, r2
 80037c4:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037c6:	9000      	str	r0, [sp, #0]
 80037c8:	e7a4      	b.n	8003714 <HAL_I2C_Master_Transmit+0x98>
    __HAL_LOCK(hi2c);
 80037ca:	2002      	movs	r0, #2
 80037cc:	e778      	b.n	80036c0 <HAL_I2C_Master_Transmit+0x44>
 80037ce:	bf00      	nop
 80037d0:	80002000 	.word	0x80002000

080037d4 <HAL_I2C_Master_Receive>:
{
 80037d4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80037d8:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80037da:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 80037de:	4604      	mov	r4, r0
 80037e0:	460e      	mov	r6, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 80037e2:	2b20      	cmp	r3, #32
{
 80037e4:	4691      	mov	r9, r2
 80037e6:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80037e8:	f040 8087 	bne.w	80038fa <HAL_I2C_Master_Receive+0x126>
    __HAL_LOCK(hi2c);
 80037ec:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	f000 8082 	beq.w	80038fa <HAL_I2C_Master_Receive+0x126>
 80037f6:	f04f 0a01 	mov.w	sl, #1
 80037fa:	f880 a040 	strb.w	sl, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 80037fe:	f7fd fe77 	bl	80014f0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003802:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8003804:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003806:	9000      	str	r0, [sp, #0]
 8003808:	4652      	mov	r2, sl
 800380a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800380e:	4620      	mov	r0, r4
 8003810:	f7ff fe27 	bl	8003462 <I2C_WaitOnFlagUntilTimeout>
 8003814:	b118      	cbz	r0, 800381e <HAL_I2C_Master_Receive+0x4a>
      return HAL_ERROR;
 8003816:	2001      	movs	r0, #1
}
 8003818:	b002      	add	sp, #8
 800381a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800381e:	2322      	movs	r3, #34	@ 0x22
    hi2c->pBuffPtr  = pData;
 8003820:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    hi2c->XferISR   = NULL;
 8003824:	6360      	str	r0, [r4, #52]	@ 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003826:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800382a:	2310      	movs	r3, #16
 800382c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003830:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 8003832:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003836:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003838:	b29b      	uxth	r3, r3
 800383a:	2bff      	cmp	r3, #255	@ 0xff
 800383c:	4b30      	ldr	r3, [pc, #192]	@ (8003900 <HAL_I2C_Master_Receive+0x12c>)
 800383e:	d926      	bls.n	800388e <HAL_I2C_Master_Receive+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003840:	22ff      	movs	r2, #255	@ 0xff
 8003842:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003844:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003846:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800384a:	4631      	mov	r1, r6
 800384c:	4620      	mov	r0, r4
 800384e:	f7ff fd47 	bl	80032e0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003852:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003854:	462a      	mov	r2, r5
 8003856:	4639      	mov	r1, r7
 8003858:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800385a:	b29b      	uxth	r3, r3
 800385c:	b9fb      	cbnz	r3, 800389e <HAL_I2C_Master_Receive+0xca>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800385e:	f7ff fe3b 	bl	80034d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003862:	2800      	cmp	r0, #0
 8003864:	d1d7      	bne.n	8003816 <HAL_I2C_Master_Receive+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003866:	6823      	ldr	r3, [r4, #0]
 8003868:	2120      	movs	r1, #32
 800386a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8003872:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8003876:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 800387a:	f022 0201 	bic.w	r2, r2, #1
 800387e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003880:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8003884:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003888:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 800388c:	e7c4      	b.n	8003818 <HAL_I2C_Master_Receive+0x44>
      hi2c->XferSize = hi2c->XferCount;
 800388e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003890:	b292      	uxth	r2, r2
 8003892:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003894:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003896:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800389a:	b2d2      	uxtb	r2, r2
 800389c:	e7d5      	b.n	800384a <HAL_I2C_Master_Receive+0x76>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800389e:	f7ff fe45 	bl	800352c <I2C_WaitOnRXNEFlagUntilTimeout>
 80038a2:	2800      	cmp	r0, #0
 80038a4:	d1b7      	bne.n	8003816 <HAL_I2C_Master_Receive+0x42>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80038a6:	6823      	ldr	r3, [r4, #0]
 80038a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80038aa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80038ac:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80038ae:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 80038b0:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 80038b2:	3301      	adds	r3, #1
      hi2c->XferSize--;
 80038b4:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 80038b6:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80038b8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80038ba:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80038bc:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80038be:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038c4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d0c2      	beq.n	8003852 <HAL_I2C_Master_Receive+0x7e>
 80038cc:	2a00      	cmp	r2, #0
 80038ce:	d1c0      	bne.n	8003852 <HAL_I2C_Master_Receive+0x7e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038d0:	463b      	mov	r3, r7
 80038d2:	2180      	movs	r1, #128	@ 0x80
 80038d4:	4620      	mov	r0, r4
 80038d6:	9500      	str	r5, [sp, #0]
 80038d8:	f7ff fdc3 	bl	8003462 <I2C_WaitOnFlagUntilTimeout>
 80038dc:	2800      	cmp	r0, #0
 80038de:	d19a      	bne.n	8003816 <HAL_I2C_Master_Receive+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038e0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	2bff      	cmp	r3, #255	@ 0xff
 80038e6:	d903      	bls.n	80038f0 <HAL_I2C_Master_Receive+0x11c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038e8:	22ff      	movs	r2, #255	@ 0xff
 80038ea:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038ec:	9000      	str	r0, [sp, #0]
 80038ee:	e7aa      	b.n	8003846 <HAL_I2C_Master_Receive+0x72>
          hi2c->XferSize = hi2c->XferCount;
 80038f0:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80038f2:	b292      	uxth	r2, r2
 80038f4:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038f6:	9000      	str	r0, [sp, #0]
 80038f8:	e7cd      	b.n	8003896 <HAL_I2C_Master_Receive+0xc2>
    __HAL_LOCK(hi2c);
 80038fa:	2002      	movs	r0, #2
 80038fc:	e78c      	b.n	8003818 <HAL_I2C_Master_Receive+0x44>
 80038fe:	bf00      	nop
 8003900:	80002400 	.word	0x80002400

08003904 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003904:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003906:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 800390a:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800390c:	2a20      	cmp	r2, #32
 800390e:	b2d4      	uxtb	r4, r2
 8003910:	d11c      	bne.n	800394c <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003912:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8003916:	2a01      	cmp	r2, #1
 8003918:	d018      	beq.n	800394c <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800391a:	2224      	movs	r2, #36	@ 0x24
 800391c:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003920:	6802      	ldr	r2, [r0, #0]
 8003922:	6810      	ldr	r0, [r2, #0]
 8003924:	f020 0001 	bic.w	r0, r0, #1
 8003928:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800392a:	6810      	ldr	r0, [r2, #0]
 800392c:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8003930:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003932:	6810      	ldr	r0, [r2, #0]
 8003934:	4301      	orrs	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003936:	2000      	movs	r0, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 8003938:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800393a:	6811      	ldr	r1, [r2, #0]
 800393c:	f041 0101 	orr.w	r1, r1, #1
 8003940:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003942:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8003946:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800394a:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 800394c:	2002      	movs	r0, #2
 800394e:	e7fc      	b.n	800394a <HAL_I2CEx_ConfigAnalogFilter+0x46>

08003950 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003950:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003952:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 8003956:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003958:	2a20      	cmp	r2, #32
 800395a:	b2d4      	uxtb	r4, r2
 800395c:	d11b      	bne.n	8003996 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800395e:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8003962:	2a01      	cmp	r2, #1
 8003964:	d017      	beq.n	8003996 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003966:	2224      	movs	r2, #36	@ 0x24
 8003968:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800396c:	6802      	ldr	r2, [r0, #0]
 800396e:	6810      	ldr	r0, [r2, #0]
 8003970:	f020 0001 	bic.w	r0, r0, #1
 8003974:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003976:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003978:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800397c:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003980:	2000      	movs	r0, #0
    hi2c->Instance->CR1 = tmpreg;
 8003982:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003984:	6811      	ldr	r1, [r2, #0]
 8003986:	f041 0101 	orr.w	r1, r1, #1
 800398a:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800398c:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8003990:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003994:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 8003996:	2002      	movs	r0, #2
 8003998:	e7fc      	b.n	8003994 <HAL_I2CEx_ConfigDigitalFilter+0x44>
	...

0800399c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800399c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800399e:	4c10      	ldr	r4, [pc, #64]	@ (80039e0 <HAL_PWREx_ConfigSupply+0x44>)
 80039a0:	68e3      	ldr	r3, [r4, #12]
 80039a2:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80039a6:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80039a8:	d105      	bne.n	80039b6 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80039aa:	f003 0307 	and.w	r3, r3, #7
 80039ae:	1a18      	subs	r0, r3, r0
 80039b0:	bf18      	it	ne
 80039b2:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 80039b4:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80039b6:	f023 0307 	bic.w	r3, r3, #7
 80039ba:	4318      	orrs	r0, r3
 80039bc:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 80039be:	f7fd fd97 	bl	80014f0 <HAL_GetTick>
 80039c2:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80039c4:	6863      	ldr	r3, [r4, #4]
 80039c6:	049b      	lsls	r3, r3, #18
 80039c8:	d501      	bpl.n	80039ce <HAL_PWREx_ConfigSupply+0x32>
      return HAL_OK;
 80039ca:	2000      	movs	r0, #0
 80039cc:	e7f2      	b.n	80039b4 <HAL_PWREx_ConfigSupply+0x18>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80039ce:	f7fd fd8f 	bl	80014f0 <HAL_GetTick>
 80039d2:	1b40      	subs	r0, r0, r5
 80039d4:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80039d8:	d9f4      	bls.n	80039c4 <HAL_PWREx_ConfigSupply+0x28>
      return HAL_ERROR;
 80039da:	2001      	movs	r0, #1
 80039dc:	e7ea      	b.n	80039b4 <HAL_PWREx_ConfigSupply+0x18>
 80039de:	bf00      	nop
 80039e0:	58024800 	.word	0x58024800

080039e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039e6:	4604      	mov	r4, r0
 80039e8:	2800      	cmp	r0, #0
 80039ea:	d074      	beq.n	8003ad6 <HAL_RCC_OscConfig+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ec:	6803      	ldr	r3, [r0, #0]
 80039ee:	07d8      	lsls	r0, r3, #31
 80039f0:	d45e      	bmi.n	8003ab0 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039f2:	6823      	ldr	r3, [r4, #0]
 80039f4:	0799      	lsls	r1, r3, #30
 80039f6:	f100 80ad 	bmi.w	8003b54 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80039fa:	6823      	ldr	r3, [r4, #0]
 80039fc:	06da      	lsls	r2, r3, #27
 80039fe:	d527      	bpl.n	8003a50 <HAL_RCC_OscConfig+0x6c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a00:	4a9c      	ldr	r2, [pc, #624]	@ (8003c74 <HAL_RCC_OscConfig+0x290>)
 8003a02:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a04:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003a0a:	2b08      	cmp	r3, #8
 8003a0c:	d007      	beq.n	8003a1e <HAL_RCC_OscConfig+0x3a>
 8003a0e:	2b18      	cmp	r3, #24
 8003a10:	f040 8103 	bne.w	8003c1a <HAL_RCC_OscConfig+0x236>
 8003a14:	f001 0303 	and.w	r3, r1, #3
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	f040 80fe 	bne.w	8003c1a <HAL_RCC_OscConfig+0x236>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a1e:	6813      	ldr	r3, [r2, #0]
 8003a20:	05db      	lsls	r3, r3, #23
 8003a22:	d502      	bpl.n	8003a2a <HAL_RCC_OscConfig+0x46>
 8003a24:	69e3      	ldr	r3, [r4, #28]
 8003a26:	2b80      	cmp	r3, #128	@ 0x80
 8003a28:	d155      	bne.n	8003ad6 <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a2a:	f7fd fd79 	bl	8001520 <HAL_GetREVID>
 8003a2e:	f241 0303 	movw	r3, #4099	@ 0x1003
 8003a32:	6a21      	ldr	r1, [r4, #32]
 8003a34:	4298      	cmp	r0, r3
 8003a36:	4b8f      	ldr	r3, [pc, #572]	@ (8003c74 <HAL_RCC_OscConfig+0x290>)
 8003a38:	f200 80e8 	bhi.w	8003c0c <HAL_RCC_OscConfig+0x228>
 8003a3c:	685a      	ldr	r2, [r3, #4]
 8003a3e:	2920      	cmp	r1, #32
 8003a40:	f022 42f8 	bic.w	r2, r2, #2080374784	@ 0x7c000000
 8003a44:	bf0c      	ite	eq
 8003a46:	f042 4280 	orreq.w	r2, r2, #1073741824	@ 0x40000000
 8003a4a:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 8003a4e:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a50:	6823      	ldr	r3, [r4, #0]
 8003a52:	0719      	lsls	r1, r3, #28
 8003a54:	f100 8123 	bmi.w	8003c9e <HAL_RCC_OscConfig+0x2ba>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a58:	6823      	ldr	r3, [r4, #0]
 8003a5a:	069a      	lsls	r2, r3, #26
 8003a5c:	f100 8144 	bmi.w	8003ce8 <HAL_RCC_OscConfig+0x304>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a60:	6823      	ldr	r3, [r4, #0]
 8003a62:	075d      	lsls	r5, r3, #29
 8003a64:	d51e      	bpl.n	8003aa4 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003a66:	4d84      	ldr	r5, [pc, #528]	@ (8003c78 <HAL_RCC_OscConfig+0x294>)
 8003a68:	682b      	ldr	r3, [r5, #0]
 8003a6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a6e:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a70:	f7fd fd3e 	bl	80014f0 <HAL_GetTick>
 8003a74:	4606      	mov	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a76:	682b      	ldr	r3, [r5, #0]
 8003a78:	05da      	lsls	r2, r3, #23
 8003a7a:	f140 815a 	bpl.w	8003d32 <HAL_RCC_OscConfig+0x34e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a7e:	68a3      	ldr	r3, [r4, #8]
 8003a80:	4d7c      	ldr	r5, [pc, #496]	@ (8003c74 <HAL_RCC_OscConfig+0x290>)
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	f040 815c 	bne.w	8003d40 <HAL_RCC_OscConfig+0x35c>
 8003a88:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003a8a:	f043 0301 	orr.w	r3, r3, #1
 8003a8e:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a90:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8003a94:	f7fd fd2c 	bl	80014f0 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a98:	4e76      	ldr	r6, [pc, #472]	@ (8003c74 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 8003a9a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a9c:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8003a9e:	079b      	lsls	r3, r3, #30
 8003aa0:	f140 8174 	bpl.w	8003d8c <HAL_RCC_OscConfig+0x3a8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003aa4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003aa6:	2900      	cmp	r1, #0
 8003aa8:	f040 8177 	bne.w	8003d9a <HAL_RCC_OscConfig+0x3b6>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 8003aac:	2000      	movs	r0, #0
 8003aae:	e02b      	b.n	8003b08 <HAL_RCC_OscConfig+0x124>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ab0:	4a70      	ldr	r2, [pc, #448]	@ (8003c74 <HAL_RCC_OscConfig+0x290>)
 8003ab2:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ab4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ab6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003aba:	2b10      	cmp	r3, #16
 8003abc:	d005      	beq.n	8003aca <HAL_RCC_OscConfig+0xe6>
 8003abe:	2b18      	cmp	r3, #24
 8003ac0:	d10b      	bne.n	8003ada <HAL_RCC_OscConfig+0xf6>
 8003ac2:	f001 0303 	and.w	r3, r1, #3
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d107      	bne.n	8003ada <HAL_RCC_OscConfig+0xf6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aca:	6813      	ldr	r3, [r2, #0]
 8003acc:	039a      	lsls	r2, r3, #14
 8003ace:	d590      	bpl.n	80039f2 <HAL_RCC_OscConfig+0xe>
 8003ad0:	6863      	ldr	r3, [r4, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d18d      	bne.n	80039f2 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8003ad6:	2001      	movs	r0, #1
 8003ad8:	e016      	b.n	8003b08 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ada:	6863      	ldr	r3, [r4, #4]
 8003adc:	4d65      	ldr	r5, [pc, #404]	@ (8003c74 <HAL_RCC_OscConfig+0x290>)
 8003ade:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ae2:	d112      	bne.n	8003b0a <HAL_RCC_OscConfig+0x126>
 8003ae4:	682b      	ldr	r3, [r5, #0]
 8003ae6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aea:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003aec:	f7fd fd00 	bl	80014f0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003af0:	4e60      	ldr	r6, [pc, #384]	@ (8003c74 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 8003af2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003af4:	6833      	ldr	r3, [r6, #0]
 8003af6:	039b      	lsls	r3, r3, #14
 8003af8:	f53f af7b 	bmi.w	80039f2 <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003afc:	f7fd fcf8 	bl	80014f0 <HAL_GetTick>
 8003b00:	1b40      	subs	r0, r0, r5
 8003b02:	2864      	cmp	r0, #100	@ 0x64
 8003b04:	d9f6      	bls.n	8003af4 <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 8003b06:	2003      	movs	r0, #3
}
 8003b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b0a:	b9a3      	cbnz	r3, 8003b36 <HAL_RCC_OscConfig+0x152>
 8003b0c:	682b      	ldr	r3, [r5, #0]
 8003b0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b12:	602b      	str	r3, [r5, #0]
 8003b14:	682b      	ldr	r3, [r5, #0]
 8003b16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b1a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003b1c:	f7fd fce8 	bl	80014f0 <HAL_GetTick>
 8003b20:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b22:	682b      	ldr	r3, [r5, #0]
 8003b24:	039f      	lsls	r7, r3, #14
 8003b26:	f57f af64 	bpl.w	80039f2 <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b2a:	f7fd fce1 	bl	80014f0 <HAL_GetTick>
 8003b2e:	1b80      	subs	r0, r0, r6
 8003b30:	2864      	cmp	r0, #100	@ 0x64
 8003b32:	d9f6      	bls.n	8003b22 <HAL_RCC_OscConfig+0x13e>
 8003b34:	e7e7      	b.n	8003b06 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b36:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b3a:	682b      	ldr	r3, [r5, #0]
 8003b3c:	d103      	bne.n	8003b46 <HAL_RCC_OscConfig+0x162>
 8003b3e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b42:	602b      	str	r3, [r5, #0]
 8003b44:	e7ce      	b.n	8003ae4 <HAL_RCC_OscConfig+0x100>
 8003b46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b4a:	602b      	str	r3, [r5, #0]
 8003b4c:	682b      	ldr	r3, [r5, #0]
 8003b4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b52:	e7ca      	b.n	8003aea <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b54:	4947      	ldr	r1, [pc, #284]	@ (8003c74 <HAL_RCC_OscConfig+0x290>)
 8003b56:	68e2      	ldr	r2, [r4, #12]
 8003b58:	690b      	ldr	r3, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b5a:	6a88      	ldr	r0, [r1, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003b5c:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 8003b60:	d003      	beq.n	8003b6a <HAL_RCC_OscConfig+0x186>
 8003b62:	2b18      	cmp	r3, #24
 8003b64:	d12a      	bne.n	8003bbc <HAL_RCC_OscConfig+0x1d8>
 8003b66:	0780      	lsls	r0, r0, #30
 8003b68:	d128      	bne.n	8003bbc <HAL_RCC_OscConfig+0x1d8>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b6a:	680b      	ldr	r3, [r1, #0]
 8003b6c:	075b      	lsls	r3, r3, #29
 8003b6e:	d501      	bpl.n	8003b74 <HAL_RCC_OscConfig+0x190>
 8003b70:	2a00      	cmp	r2, #0
 8003b72:	d0b0      	beq.n	8003ad6 <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b74:	4d3f      	ldr	r5, [pc, #252]	@ (8003c74 <HAL_RCC_OscConfig+0x290>)
 8003b76:	682b      	ldr	r3, [r5, #0]
 8003b78:	f023 0319 	bic.w	r3, r3, #25
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003b80:	f7fd fcb6 	bl	80014f0 <HAL_GetTick>
 8003b84:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b86:	682b      	ldr	r3, [r5, #0]
 8003b88:	075f      	lsls	r7, r3, #29
 8003b8a:	d511      	bpl.n	8003bb0 <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b8c:	f7fd fcc8 	bl	8001520 <HAL_GetREVID>
 8003b90:	f241 0303 	movw	r3, #4099	@ 0x1003
 8003b94:	6922      	ldr	r2, [r4, #16]
 8003b96:	4298      	cmp	r0, r3
 8003b98:	686b      	ldr	r3, [r5, #4]
 8003b9a:	d822      	bhi.n	8003be2 <HAL_RCC_OscConfig+0x1fe>
 8003b9c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003ba0:	2a40      	cmp	r2, #64	@ 0x40
 8003ba2:	bf0c      	ite	eq
 8003ba4:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 8003ba8:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8003bac:	606b      	str	r3, [r5, #4]
 8003bae:	e724      	b.n	80039fa <HAL_RCC_OscConfig+0x16>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bb0:	f7fd fc9e 	bl	80014f0 <HAL_GetTick>
 8003bb4:	1b80      	subs	r0, r0, r6
 8003bb6:	2802      	cmp	r0, #2
 8003bb8:	d9e5      	bls.n	8003b86 <HAL_RCC_OscConfig+0x1a2>
 8003bba:	e7a4      	b.n	8003b06 <HAL_RCC_OscConfig+0x122>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003bbc:	4d2d      	ldr	r5, [pc, #180]	@ (8003c74 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003bbe:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003bc0:	b1a2      	cbz	r2, 8003bec <HAL_RCC_OscConfig+0x208>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003bc2:	f023 0319 	bic.w	r3, r3, #25
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003bca:	f7fd fc91 	bl	80014f0 <HAL_GetTick>
 8003bce:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bd0:	682b      	ldr	r3, [r5, #0]
 8003bd2:	0758      	lsls	r0, r3, #29
 8003bd4:	d4da      	bmi.n	8003b8c <HAL_RCC_OscConfig+0x1a8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bd6:	f7fd fc8b 	bl	80014f0 <HAL_GetTick>
 8003bda:	1b80      	subs	r0, r0, r6
 8003bdc:	2802      	cmp	r0, #2
 8003bde:	d9f7      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x1ec>
 8003be0:	e791      	b.n	8003b06 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003be2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003be6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003bea:	e7df      	b.n	8003bac <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_DISABLE();
 8003bec:	f023 0301 	bic.w	r3, r3, #1
 8003bf0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003bf2:	f7fd fc7d 	bl	80014f0 <HAL_GetTick>
 8003bf6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003bf8:	682b      	ldr	r3, [r5, #0]
 8003bfa:	0759      	lsls	r1, r3, #29
 8003bfc:	f57f aefd 	bpl.w	80039fa <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c00:	f7fd fc76 	bl	80014f0 <HAL_GetTick>
 8003c04:	1b80      	subs	r0, r0, r6
 8003c06:	2802      	cmp	r0, #2
 8003c08:	d9f6      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x214>
 8003c0a:	e77c      	b.n	8003b06 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c0c:	68da      	ldr	r2, [r3, #12]
 8003c0e:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
 8003c12:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003c16:	60da      	str	r2, [r3, #12]
 8003c18:	e71a      	b.n	8003a50 <HAL_RCC_OscConfig+0x6c>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003c1a:	69e3      	ldr	r3, [r4, #28]
 8003c1c:	4d15      	ldr	r5, [pc, #84]	@ (8003c74 <HAL_RCC_OscConfig+0x290>)
 8003c1e:	b36b      	cbz	r3, 8003c7c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_CSI_ENABLE();
 8003c20:	682b      	ldr	r3, [r5, #0]
 8003c22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c26:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003c28:	f7fd fc62 	bl	80014f0 <HAL_GetTick>
 8003c2c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c2e:	682b      	ldr	r3, [r5, #0]
 8003c30:	05df      	lsls	r7, r3, #23
 8003c32:	d511      	bpl.n	8003c58 <HAL_RCC_OscConfig+0x274>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c34:	f7fd fc74 	bl	8001520 <HAL_GetREVID>
 8003c38:	f241 0303 	movw	r3, #4099	@ 0x1003
 8003c3c:	6a22      	ldr	r2, [r4, #32]
 8003c3e:	4298      	cmp	r0, r3
 8003c40:	d810      	bhi.n	8003c64 <HAL_RCC_OscConfig+0x280>
 8003c42:	686b      	ldr	r3, [r5, #4]
 8003c44:	2a20      	cmp	r2, #32
 8003c46:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003c4a:	bf0c      	ite	eq
 8003c4c:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 8003c50:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8003c54:	606b      	str	r3, [r5, #4]
 8003c56:	e6fb      	b.n	8003a50 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003c58:	f7fd fc4a 	bl	80014f0 <HAL_GetTick>
 8003c5c:	1b80      	subs	r0, r0, r6
 8003c5e:	2802      	cmp	r0, #2
 8003c60:	d9e5      	bls.n	8003c2e <HAL_RCC_OscConfig+0x24a>
 8003c62:	e750      	b.n	8003b06 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c64:	68eb      	ldr	r3, [r5, #12]
 8003c66:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8003c6a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003c6e:	60eb      	str	r3, [r5, #12]
 8003c70:	e6ee      	b.n	8003a50 <HAL_RCC_OscConfig+0x6c>
 8003c72:	bf00      	nop
 8003c74:	58024400 	.word	0x58024400
 8003c78:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 8003c7c:	682b      	ldr	r3, [r5, #0]
 8003c7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c82:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003c84:	f7fd fc34 	bl	80014f0 <HAL_GetTick>
 8003c88:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c8a:	682b      	ldr	r3, [r5, #0]
 8003c8c:	05d8      	lsls	r0, r3, #23
 8003c8e:	f57f aedf 	bpl.w	8003a50 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003c92:	f7fd fc2d 	bl	80014f0 <HAL_GetTick>
 8003c96:	1b80      	subs	r0, r0, r6
 8003c98:	2802      	cmp	r0, #2
 8003c9a:	d9f6      	bls.n	8003c8a <HAL_RCC_OscConfig+0x2a6>
 8003c9c:	e733      	b.n	8003b06 <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c9e:	6963      	ldr	r3, [r4, #20]
 8003ca0:	4da5      	ldr	r5, [pc, #660]	@ (8003f38 <HAL_RCC_OscConfig+0x554>)
 8003ca2:	b183      	cbz	r3, 8003cc6 <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_LSI_ENABLE();
 8003ca4:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8003ca6:	f043 0301 	orr.w	r3, r3, #1
 8003caa:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8003cac:	f7fd fc20 	bl	80014f0 <HAL_GetTick>
 8003cb0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003cb2:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8003cb4:	079b      	lsls	r3, r3, #30
 8003cb6:	f53f aecf 	bmi.w	8003a58 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cba:	f7fd fc19 	bl	80014f0 <HAL_GetTick>
 8003cbe:	1b80      	subs	r0, r0, r6
 8003cc0:	2802      	cmp	r0, #2
 8003cc2:	d9f6      	bls.n	8003cb2 <HAL_RCC_OscConfig+0x2ce>
 8003cc4:	e71f      	b.n	8003b06 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 8003cc6:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8003cc8:	f023 0301 	bic.w	r3, r3, #1
 8003ccc:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8003cce:	f7fd fc0f 	bl	80014f0 <HAL_GetTick>
 8003cd2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003cd4:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8003cd6:	079f      	lsls	r7, r3, #30
 8003cd8:	f57f aebe 	bpl.w	8003a58 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cdc:	f7fd fc08 	bl	80014f0 <HAL_GetTick>
 8003ce0:	1b80      	subs	r0, r0, r6
 8003ce2:	2802      	cmp	r0, #2
 8003ce4:	d9f6      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x2f0>
 8003ce6:	e70e      	b.n	8003b06 <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003ce8:	69a3      	ldr	r3, [r4, #24]
 8003cea:	4d93      	ldr	r5, [pc, #588]	@ (8003f38 <HAL_RCC_OscConfig+0x554>)
 8003cec:	b183      	cbz	r3, 8003d10 <HAL_RCC_OscConfig+0x32c>
      __HAL_RCC_HSI48_ENABLE();
 8003cee:	682b      	ldr	r3, [r5, #0]
 8003cf0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003cf4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003cf6:	f7fd fbfb 	bl	80014f0 <HAL_GetTick>
 8003cfa:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003cfc:	682b      	ldr	r3, [r5, #0]
 8003cfe:	0498      	lsls	r0, r3, #18
 8003d00:	f53f aeae 	bmi.w	8003a60 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d04:	f7fd fbf4 	bl	80014f0 <HAL_GetTick>
 8003d08:	1b80      	subs	r0, r0, r6
 8003d0a:	2802      	cmp	r0, #2
 8003d0c:	d9f6      	bls.n	8003cfc <HAL_RCC_OscConfig+0x318>
 8003d0e:	e6fa      	b.n	8003b06 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 8003d10:	682b      	ldr	r3, [r5, #0]
 8003d12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d16:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003d18:	f7fd fbea 	bl	80014f0 <HAL_GetTick>
 8003d1c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d1e:	682b      	ldr	r3, [r5, #0]
 8003d20:	0499      	lsls	r1, r3, #18
 8003d22:	f57f ae9d 	bpl.w	8003a60 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d26:	f7fd fbe3 	bl	80014f0 <HAL_GetTick>
 8003d2a:	1b80      	subs	r0, r0, r6
 8003d2c:	2802      	cmp	r0, #2
 8003d2e:	d9f6      	bls.n	8003d1e <HAL_RCC_OscConfig+0x33a>
 8003d30:	e6e9      	b.n	8003b06 <HAL_RCC_OscConfig+0x122>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d32:	f7fd fbdd 	bl	80014f0 <HAL_GetTick>
 8003d36:	1b80      	subs	r0, r0, r6
 8003d38:	2864      	cmp	r0, #100	@ 0x64
 8003d3a:	f67f ae9c 	bls.w	8003a76 <HAL_RCC_OscConfig+0x92>
 8003d3e:	e6e2      	b.n	8003b06 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d40:	b9b3      	cbnz	r3, 8003d70 <HAL_RCC_OscConfig+0x38c>
 8003d42:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d44:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d48:	f023 0301 	bic.w	r3, r3, #1
 8003d4c:	672b      	str	r3, [r5, #112]	@ 0x70
 8003d4e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003d50:	f023 0304 	bic.w	r3, r3, #4
 8003d54:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8003d56:	f7fd fbcb 	bl	80014f0 <HAL_GetTick>
 8003d5a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d5c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003d5e:	0798      	lsls	r0, r3, #30
 8003d60:	f57f aea0 	bpl.w	8003aa4 <HAL_RCC_OscConfig+0xc0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d64:	f7fd fbc4 	bl	80014f0 <HAL_GetTick>
 8003d68:	1b80      	subs	r0, r0, r6
 8003d6a:	42b8      	cmp	r0, r7
 8003d6c:	d9f6      	bls.n	8003d5c <HAL_RCC_OscConfig+0x378>
 8003d6e:	e6ca      	b.n	8003b06 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d70:	2b05      	cmp	r3, #5
 8003d72:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003d74:	d103      	bne.n	8003d7e <HAL_RCC_OscConfig+0x39a>
 8003d76:	f043 0304 	orr.w	r3, r3, #4
 8003d7a:	672b      	str	r3, [r5, #112]	@ 0x70
 8003d7c:	e684      	b.n	8003a88 <HAL_RCC_OscConfig+0xa4>
 8003d7e:	f023 0301 	bic.w	r3, r3, #1
 8003d82:	672b      	str	r3, [r5, #112]	@ 0x70
 8003d84:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003d86:	f023 0304 	bic.w	r3, r3, #4
 8003d8a:	e680      	b.n	8003a8e <HAL_RCC_OscConfig+0xaa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d8c:	f7fd fbb0 	bl	80014f0 <HAL_GetTick>
 8003d90:	1b40      	subs	r0, r0, r5
 8003d92:	42b8      	cmp	r0, r7
 8003d94:	f67f ae82 	bls.w	8003a9c <HAL_RCC_OscConfig+0xb8>
 8003d98:	e6b5      	b.n	8003b06 <HAL_RCC_OscConfig+0x122>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003d9a:	4d67      	ldr	r5, [pc, #412]	@ (8003f38 <HAL_RCC_OscConfig+0x554>)
 8003d9c:	692b      	ldr	r3, [r5, #16]
 8003d9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003da2:	2b18      	cmp	r3, #24
 8003da4:	d07a      	beq.n	8003e9c <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
 8003da6:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003da8:	2902      	cmp	r1, #2
        __HAL_RCC_PLL_DISABLE();
 8003daa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003dae:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003db0:	d167      	bne.n	8003e82 <HAL_RCC_OscConfig+0x49e>
        tickstart = HAL_GetTick();
 8003db2:	f7fd fb9d 	bl	80014f0 <HAL_GetTick>
 8003db6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003db8:	682b      	ldr	r3, [r5, #0]
 8003dba:	0199      	lsls	r1, r3, #6
 8003dbc:	d45b      	bmi.n	8003e76 <HAL_RCC_OscConfig+0x492>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dbe:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8003dc0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003dc2:	f423 737c 	bic.w	r3, r3, #1008	@ 0x3f0
 8003dc6:	f023 0303 	bic.w	r3, r3, #3
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003dce:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003dd2:	62ab      	str	r3, [r5, #40]	@ 0x28
 8003dd4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003dd6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	3a01      	subs	r2, #1
 8003ddc:	025b      	lsls	r3, r3, #9
 8003dde:	0412      	lsls	r2, r2, #16
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8003de6:	4313      	orrs	r3, r2
 8003de8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003dea:	3a01      	subs	r2, #1
 8003dec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003df0:	4313      	orrs	r3, r2
 8003df2:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003df4:	3a01      	subs	r2, #1
 8003df6:	0612      	lsls	r2, r2, #24
 8003df8:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8003e00:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003e02:	f023 0301 	bic.w	r3, r3, #1
 8003e06:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003e08:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8003e0a:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8003e0c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e10:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003e14:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003e18:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003e1a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003e1c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003e1e:	f023 030c 	bic.w	r3, r3, #12
 8003e22:	4313      	orrs	r3, r2
 8003e24:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003e26:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003e28:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003e2a:	f023 0302 	bic.w	r3, r3, #2
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003e32:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003e34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e38:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e3a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003e3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e40:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003e42:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003e44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e48:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8003e4a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003e4c:	f043 0301 	orr.w	r3, r3, #1
 8003e50:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 8003e52:	682b      	ldr	r3, [r5, #0]
 8003e54:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e58:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003e5a:	f7fd fb49 	bl	80014f0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e5e:	4d36      	ldr	r5, [pc, #216]	@ (8003f38 <HAL_RCC_OscConfig+0x554>)
        tickstart = HAL_GetTick();
 8003e60:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e62:	682b      	ldr	r3, [r5, #0]
 8003e64:	019a      	lsls	r2, r3, #6
 8003e66:	f53f ae21 	bmi.w	8003aac <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e6a:	f7fd fb41 	bl	80014f0 <HAL_GetTick>
 8003e6e:	1b00      	subs	r0, r0, r4
 8003e70:	2802      	cmp	r0, #2
 8003e72:	d9f6      	bls.n	8003e62 <HAL_RCC_OscConfig+0x47e>
 8003e74:	e647      	b.n	8003b06 <HAL_RCC_OscConfig+0x122>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e76:	f7fd fb3b 	bl	80014f0 <HAL_GetTick>
 8003e7a:	1b80      	subs	r0, r0, r6
 8003e7c:	2802      	cmp	r0, #2
 8003e7e:	d99b      	bls.n	8003db8 <HAL_RCC_OscConfig+0x3d4>
 8003e80:	e641      	b.n	8003b06 <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 8003e82:	f7fd fb35 	bl	80014f0 <HAL_GetTick>
 8003e86:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e88:	682b      	ldr	r3, [r5, #0]
 8003e8a:	019b      	lsls	r3, r3, #6
 8003e8c:	f57f ae0e 	bpl.w	8003aac <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e90:	f7fd fb2e 	bl	80014f0 <HAL_GetTick>
 8003e94:	1b00      	subs	r0, r0, r4
 8003e96:	2802      	cmp	r0, #2
 8003e98:	d9f6      	bls.n	8003e88 <HAL_RCC_OscConfig+0x4a4>
 8003e9a:	e634      	b.n	8003b06 <HAL_RCC_OscConfig+0x122>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e9c:	2901      	cmp	r1, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003e9e:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003ea0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ea2:	f43f ae18 	beq.w	8003ad6 <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ea6:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eaa:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003eac:	4281      	cmp	r1, r0
 8003eae:	f47f ae12 	bne.w	8003ad6 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003eb2:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eb6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003eb8:	428a      	cmp	r2, r1
 8003eba:	f47f ae0c 	bne.w	8003ad6 <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ebe:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003ec0:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8003ec4:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ec6:	4291      	cmp	r1, r2
 8003ec8:	f47f ae05 	bne.w	8003ad6 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ecc:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8003ece:	f3c3 2146 	ubfx	r1, r3, #9, #7
 8003ed2:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ed4:	4291      	cmp	r1, r2
 8003ed6:	f47f adfe 	bne.w	8003ad6 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003eda:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003edc:	f3c3 4106 	ubfx	r1, r3, #16, #7
 8003ee0:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ee2:	4291      	cmp	r1, r2
 8003ee4:	f47f adf7 	bne.w	8003ad6 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003ee8:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003eea:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8003eee:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	f47f adf0 	bne.w	8003ad6 <HAL_RCC_OscConfig+0xf2>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003ef6:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003ef8:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003efa:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003efe:	429a      	cmp	r2, r3
 8003f00:	f43f add4 	beq.w	8003aac <HAL_RCC_OscConfig+0xc8>
          __HAL_RCC_PLLFRACN_DISABLE();
 8003f04:	4d0c      	ldr	r5, [pc, #48]	@ (8003f38 <HAL_RCC_OscConfig+0x554>)
 8003f06:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003f08:	f023 0301 	bic.w	r3, r3, #1
 8003f0c:	62eb      	str	r3, [r5, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 8003f0e:	f7fd faef 	bl	80014f0 <HAL_GetTick>
 8003f12:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003f14:	f7fd faec 	bl	80014f0 <HAL_GetTick>
 8003f18:	42b0      	cmp	r0, r6
 8003f1a:	d0fb      	beq.n	8003f14 <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f1c:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8003f1e:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8003f20:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f24:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003f28:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003f2c:	636b      	str	r3, [r5, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8003f2e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003f30:	f043 0301 	orr.w	r3, r3, #1
 8003f34:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8003f36:	e5b9      	b.n	8003aac <HAL_RCC_OscConfig+0xc8>
 8003f38:	58024400 	.word	0x58024400

08003f3c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003f3c:	b570      	push	{r4, r5, r6, lr}
 8003f3e:	4c23      	ldr	r4, [pc, #140]	@ (8003fcc <HAL_RCC_MCOConfig+0x90>)
 8003f40:	b088      	sub	sp, #32
 8003f42:	460e      	mov	r6, r1
 8003f44:	4615      	mov	r5, r2
  if (RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8003f46:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  if (RCC_MCOx == RCC_MCO1)
 8003f4a:	b9f8      	cbnz	r0, 8003f8c <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 8003f4c:	f043 0301 	orr.w	r3, r3, #1

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f50:	f44f 7c80 	mov.w	ip, #256	@ 0x100
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8003f54:	a903      	add	r1, sp, #12
    MCO1_CLK_ENABLE();
 8003f56:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8003f5a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003f5e:	9007      	str	r0, [sp, #28]
    MCO1_CLK_ENABLE();
 8003f60:	f003 0301 	and.w	r3, r3, #1
 8003f64:	9301      	str	r3, [sp, #4]
 8003f66:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f68:	2302      	movs	r3, #2
 8003f6a:	e9cd c303 	strd	ip, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f6e:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f70:	e9cd 0305 	strd	r0, r3, [sp, #20]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8003f74:	4816      	ldr	r0, [pc, #88]	@ (8003fd0 <HAL_RCC_MCOConfig+0x94>)
 8003f76:	f7ff f8af 	bl	80030d8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8003f7a:	6923      	ldr	r3, [r4, #16]
 8003f7c:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 8003f80:	ea43 0106 	orr.w	r1, r3, r6
 8003f84:	4329      	orrs	r1, r5
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8003f86:	6121      	str	r1, [r4, #16]
  }
}
 8003f88:	b008      	add	sp, #32
 8003f8a:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 8003f8c:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f90:	f44f 7200 	mov.w	r2, #512	@ 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f94:	2103      	movs	r1, #3
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003f96:	480f      	ldr	r0, [pc, #60]	@ (8003fd4 <HAL_RCC_MCOConfig+0x98>)
    MCO2_CLK_ENABLE();
 8003f98:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8003f9c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8003fa0:	f003 0304 	and.w	r3, r3, #4
 8003fa4:	9302      	str	r3, [sp, #8]
 8003fa6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fa8:	2302      	movs	r3, #2
 8003faa:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	e9cd 3105 	strd	r3, r1, [sp, #20]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003fb4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003fb6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003fb8:	f7ff f88e 	bl	80030d8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8003fbc:	6923      	ldr	r3, [r4, #16]
 8003fbe:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8003fc2:	ea43 0106 	orr.w	r1, r3, r6
 8003fc6:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
 8003fca:	e7dc      	b.n	8003f86 <HAL_RCC_MCOConfig+0x4a>
 8003fcc:	58024400 	.word	0x58024400
 8003fd0:	58020000 	.word	0x58020000
 8003fd4:	58020800 	.word	0x58020800

08003fd8 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fd8:	4b49      	ldr	r3, [pc, #292]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x128>)
 8003fda:	691a      	ldr	r2, [r3, #16]
 8003fdc:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8003fe0:	2a10      	cmp	r2, #16
{
 8003fe2:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fe4:	f000 8088 	beq.w	80040f8 <HAL_RCC_GetSysClockFreq+0x120>
 8003fe8:	2a18      	cmp	r2, #24
 8003fea:	d00c      	beq.n	8004006 <HAL_RCC_GetSysClockFreq+0x2e>
 8003fec:	2a00      	cmp	r2, #0
 8003fee:	f040 8085 	bne.w	80040fc <HAL_RCC_GetSysClockFreq+0x124>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	4843      	ldr	r0, [pc, #268]	@ (8004104 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003ff6:	f012 0f20 	tst.w	r2, #32
 8003ffa:	d003      	beq.n	8004004 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004002:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8004004:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004006:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004008:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800400a:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
      if (pllm != 0U)
 800400c:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004010:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004014:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      if (pllm != 0U)
 8004016:	d0f5      	beq.n	8004004 <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004018:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800401c:	f004 0401 	and.w	r4, r4, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004020:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004024:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004028:	4362      	muls	r2, r4
 800402a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800402e:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004030:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004034:	ee06 2a90 	vmov	s13, r2
 8004038:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 800403c:	d04e      	beq.n	80040dc <HAL_RCC_GetSysClockFreq+0x104>
 800403e:	2902      	cmp	r1, #2
 8004040:	d03e      	beq.n	80040c0 <HAL_RCC_GetSysClockFreq+0xe8>
 8004042:	2900      	cmp	r1, #0
 8004044:	d14a      	bne.n	80040dc <HAL_RCC_GetSysClockFreq+0x104>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	0692      	lsls	r2, r2, #26
 800404a:	d527      	bpl.n	800409c <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800404c:	6819      	ldr	r1, [r3, #0]
 800404e:	4a2d      	ldr	r2, [pc, #180]	@ (8004104 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004050:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004056:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800405c:	ee07 2a90 	vmov	s15, r2
 8004060:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8004064:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8004068:	ee07 3a10 	vmov	s14, r3
 800406c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004070:	ee37 7a26 	vadd.f32	s14, s14, s13
 8004074:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004078:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800407c:	4b20      	ldr	r3, [pc, #128]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x128>)
 800407e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004080:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004084:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004086:	ee07 3a10 	vmov	s14, r3
 800408a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800408e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004092:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8004096:	ee17 0a90 	vmov	r0, s15
 800409a:	e7b3      	b.n	8004004 <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800409c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800409e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040a2:	ee07 3a90 	vmov	s15, r3
 80040a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040ae:	ee77 7a86 	vadd.f32	s15, s15, s12
 80040b2:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8004108 <HAL_RCC_GetSysClockFreq+0x130>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80040b6:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80040ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
            break;
 80040be:	e7dd      	b.n	800407c <HAL_RCC_GetSysClockFreq+0xa4>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80040c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040c6:	ee07 3a90 	vmov	s15, r3
 80040ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040d2:	ee77 7a86 	vadd.f32	s15, s15, s12
 80040d6:	ed9f 6a0d 	vldr	s12, [pc, #52]	@ 800410c <HAL_RCC_GetSysClockFreq+0x134>
 80040da:	e7ec      	b.n	80040b6 <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80040dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040e2:	ee07 3a90 	vmov	s15, r3
 80040e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040ee:	ee77 7a86 	vadd.f32	s15, s15, s12
 80040f2:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 8004110 <HAL_RCC_GetSysClockFreq+0x138>
 80040f6:	e7de      	b.n	80040b6 <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040f8:	4806      	ldr	r0, [pc, #24]	@ (8004114 <HAL_RCC_GetSysClockFreq+0x13c>)
 80040fa:	e783      	b.n	8004004 <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 80040fc:	4806      	ldr	r0, [pc, #24]	@ (8004118 <HAL_RCC_GetSysClockFreq+0x140>)
 80040fe:	e781      	b.n	8004004 <HAL_RCC_GetSysClockFreq+0x2c>
 8004100:	58024400 	.word	0x58024400
 8004104:	03d09000 	.word	0x03d09000
 8004108:	4c742400 	.word	0x4c742400
 800410c:	4af42400 	.word	0x4af42400
 8004110:	4a742400 	.word	0x4a742400
 8004114:	007a1200 	.word	0x007a1200
 8004118:	003d0900 	.word	0x003d0900

0800411c <HAL_RCC_ClockConfig>:
{
 800411c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004120:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8004122:	4604      	mov	r4, r0
 8004124:	b910      	cbnz	r0, 800412c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8004126:	2001      	movs	r0, #1
}
 8004128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800412c:	4a88      	ldr	r2, [pc, #544]	@ (8004350 <HAL_RCC_ClockConfig+0x234>)
 800412e:	6813      	ldr	r3, [r2, #0]
 8004130:	f003 030f 	and.w	r3, r3, #15
 8004134:	428b      	cmp	r3, r1
 8004136:	f0c0 8093 	bcc.w	8004260 <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800413a:	6823      	ldr	r3, [r4, #0]
 800413c:	075f      	lsls	r7, r3, #29
 800413e:	f100 809b 	bmi.w	8004278 <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004142:	071e      	lsls	r6, r3, #28
 8004144:	d50b      	bpl.n	800415e <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004146:	4983      	ldr	r1, [pc, #524]	@ (8004354 <HAL_RCC_ClockConfig+0x238>)
 8004148:	6960      	ldr	r0, [r4, #20]
 800414a:	69ca      	ldr	r2, [r1, #28]
 800414c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8004150:	4290      	cmp	r0, r2
 8004152:	d904      	bls.n	800415e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004154:	69ca      	ldr	r2, [r1, #28]
 8004156:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800415a:	4302      	orrs	r2, r0
 800415c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800415e:	06d8      	lsls	r0, r3, #27
 8004160:	d50b      	bpl.n	800417a <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004162:	497c      	ldr	r1, [pc, #496]	@ (8004354 <HAL_RCC_ClockConfig+0x238>)
 8004164:	69a0      	ldr	r0, [r4, #24]
 8004166:	69ca      	ldr	r2, [r1, #28]
 8004168:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800416c:	4290      	cmp	r0, r2
 800416e:	d904      	bls.n	800417a <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004170:	69ca      	ldr	r2, [r1, #28]
 8004172:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004176:	4302      	orrs	r2, r0
 8004178:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800417a:	0699      	lsls	r1, r3, #26
 800417c:	d50b      	bpl.n	8004196 <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800417e:	4975      	ldr	r1, [pc, #468]	@ (8004354 <HAL_RCC_ClockConfig+0x238>)
 8004180:	69e0      	ldr	r0, [r4, #28]
 8004182:	6a0a      	ldr	r2, [r1, #32]
 8004184:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8004188:	4290      	cmp	r0, r2
 800418a:	d904      	bls.n	8004196 <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800418c:	6a0a      	ldr	r2, [r1, #32]
 800418e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004192:	4302      	orrs	r2, r0
 8004194:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004196:	079a      	lsls	r2, r3, #30
 8004198:	d50b      	bpl.n	80041b2 <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800419a:	496e      	ldr	r1, [pc, #440]	@ (8004354 <HAL_RCC_ClockConfig+0x238>)
 800419c:	68e0      	ldr	r0, [r4, #12]
 800419e:	698a      	ldr	r2, [r1, #24]
 80041a0:	f002 020f 	and.w	r2, r2, #15
 80041a4:	4290      	cmp	r0, r2
 80041a6:	d904      	bls.n	80041b2 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041a8:	698a      	ldr	r2, [r1, #24]
 80041aa:	f022 020f 	bic.w	r2, r2, #15
 80041ae:	4302      	orrs	r2, r0
 80041b0:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041b2:	07df      	lsls	r7, r3, #31
 80041b4:	d46e      	bmi.n	8004294 <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041b6:	6823      	ldr	r3, [r4, #0]
 80041b8:	079e      	lsls	r6, r3, #30
 80041ba:	f100 80a1 	bmi.w	8004300 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041be:	4964      	ldr	r1, [pc, #400]	@ (8004350 <HAL_RCC_ClockConfig+0x234>)
 80041c0:	680a      	ldr	r2, [r1, #0]
 80041c2:	f002 020f 	and.w	r2, r2, #15
 80041c6:	42aa      	cmp	r2, r5
 80041c8:	f200 80a8 	bhi.w	800431c <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80041cc:	0758      	lsls	r0, r3, #29
 80041ce:	f100 80b1 	bmi.w	8004334 <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041d2:	0719      	lsls	r1, r3, #28
 80041d4:	d50b      	bpl.n	80041ee <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80041d6:	495f      	ldr	r1, [pc, #380]	@ (8004354 <HAL_RCC_ClockConfig+0x238>)
 80041d8:	6960      	ldr	r0, [r4, #20]
 80041da:	69ca      	ldr	r2, [r1, #28]
 80041dc:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80041e0:	4290      	cmp	r0, r2
 80041e2:	d204      	bcs.n	80041ee <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80041e4:	69ca      	ldr	r2, [r1, #28]
 80041e6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80041ea:	4302      	orrs	r2, r0
 80041ec:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ee:	06da      	lsls	r2, r3, #27
 80041f0:	d50b      	bpl.n	800420a <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80041f2:	4958      	ldr	r1, [pc, #352]	@ (8004354 <HAL_RCC_ClockConfig+0x238>)
 80041f4:	69a0      	ldr	r0, [r4, #24]
 80041f6:	69ca      	ldr	r2, [r1, #28]
 80041f8:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 80041fc:	4290      	cmp	r0, r2
 80041fe:	d204      	bcs.n	800420a <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004200:	69ca      	ldr	r2, [r1, #28]
 8004202:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004206:	4302      	orrs	r2, r0
 8004208:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800420a:	069b      	lsls	r3, r3, #26
 800420c:	d50b      	bpl.n	8004226 <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800420e:	4a51      	ldr	r2, [pc, #324]	@ (8004354 <HAL_RCC_ClockConfig+0x238>)
 8004210:	69e1      	ldr	r1, [r4, #28]
 8004212:	6a13      	ldr	r3, [r2, #32]
 8004214:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004218:	4299      	cmp	r1, r3
 800421a:	d204      	bcs.n	8004226 <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800421c:	6a13      	ldr	r3, [r2, #32]
 800421e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004222:	430b      	orrs	r3, r1
 8004224:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004226:	f7ff fed7 	bl	8003fd8 <HAL_RCC_GetSysClockFreq>
 800422a:	494a      	ldr	r1, [pc, #296]	@ (8004354 <HAL_RCC_ClockConfig+0x238>)
 800422c:	4a4a      	ldr	r2, [pc, #296]	@ (8004358 <HAL_RCC_ClockConfig+0x23c>)
 800422e:	698b      	ldr	r3, [r1, #24]
 8004230:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8004234:	5cd3      	ldrb	r3, [r2, r3]
 8004236:	f003 031f 	and.w	r3, r3, #31
 800423a:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800423c:	698b      	ldr	r3, [r1, #24]
 800423e:	f003 030f 	and.w	r3, r3, #15
 8004242:	5cd3      	ldrb	r3, [r2, r3]
 8004244:	4a45      	ldr	r2, [pc, #276]	@ (800435c <HAL_RCC_ClockConfig+0x240>)
 8004246:	f003 031f 	and.w	r3, r3, #31
 800424a:	fa20 f303 	lsr.w	r3, r0, r3
 800424e:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8004250:	4b43      	ldr	r3, [pc, #268]	@ (8004360 <HAL_RCC_ClockConfig+0x244>)
 8004252:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 8004254:	4b43      	ldr	r3, [pc, #268]	@ (8004364 <HAL_RCC_ClockConfig+0x248>)
}
 8004256:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800425a:	6818      	ldr	r0, [r3, #0]
 800425c:	f7fd b8e8 	b.w	8001430 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004260:	6813      	ldr	r3, [r2, #0]
 8004262:	f023 030f 	bic.w	r3, r3, #15
 8004266:	430b      	orrs	r3, r1
 8004268:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800426a:	6813      	ldr	r3, [r2, #0]
 800426c:	f003 030f 	and.w	r3, r3, #15
 8004270:	428b      	cmp	r3, r1
 8004272:	f47f af58 	bne.w	8004126 <HAL_RCC_ClockConfig+0xa>
 8004276:	e760      	b.n	800413a <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004278:	4936      	ldr	r1, [pc, #216]	@ (8004354 <HAL_RCC_ClockConfig+0x238>)
 800427a:	6920      	ldr	r0, [r4, #16]
 800427c:	698a      	ldr	r2, [r1, #24]
 800427e:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8004282:	4290      	cmp	r0, r2
 8004284:	f67f af5d 	bls.w	8004142 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004288:	698a      	ldr	r2, [r1, #24]
 800428a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800428e:	4302      	orrs	r2, r0
 8004290:	618a      	str	r2, [r1, #24]
 8004292:	e756      	b.n	8004142 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004294:	4b2f      	ldr	r3, [pc, #188]	@ (8004354 <HAL_RCC_ClockConfig+0x238>)
 8004296:	68a1      	ldr	r1, [r4, #8]
 8004298:	699a      	ldr	r2, [r3, #24]
 800429a:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 800429e:	430a      	orrs	r2, r1
 80042a0:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042a2:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80042a4:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042a6:	2902      	cmp	r1, #2
 80042a8:	d11d      	bne.n	80042e6 <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80042aa:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042ae:	f43f af3a 	beq.w	8004126 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042b2:	691a      	ldr	r2, [r3, #16]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042b4:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042b8:	4f26      	ldr	r7, [pc, #152]	@ (8004354 <HAL_RCC_ClockConfig+0x238>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042ba:	f022 0207 	bic.w	r2, r2, #7
 80042be:	430a      	orrs	r2, r1
 80042c0:	611a      	str	r2, [r3, #16]
    tickstart = HAL_GetTick();
 80042c2:	f7fd f915 	bl	80014f0 <HAL_GetTick>
 80042c6:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	6862      	ldr	r2, [r4, #4]
 80042cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042d0:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80042d4:	f43f af6f 	beq.w	80041b6 <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042d8:	f7fd f90a 	bl	80014f0 <HAL_GetTick>
 80042dc:	1b80      	subs	r0, r0, r6
 80042de:	4540      	cmp	r0, r8
 80042e0:	d9f2      	bls.n	80042c8 <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 80042e2:	2003      	movs	r0, #3
 80042e4:	e720      	b.n	8004128 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042e6:	2903      	cmp	r1, #3
 80042e8:	d102      	bne.n	80042f0 <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80042ea:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80042ee:	e7de      	b.n	80042ae <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80042f0:	2901      	cmp	r1, #1
 80042f2:	d102      	bne.n	80042fa <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80042f4:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80042f8:	e7d9      	b.n	80042ae <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042fa:	f012 0f04 	tst.w	r2, #4
 80042fe:	e7d6      	b.n	80042ae <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004300:	4914      	ldr	r1, [pc, #80]	@ (8004354 <HAL_RCC_ClockConfig+0x238>)
 8004302:	68e0      	ldr	r0, [r4, #12]
 8004304:	698a      	ldr	r2, [r1, #24]
 8004306:	f002 020f 	and.w	r2, r2, #15
 800430a:	4290      	cmp	r0, r2
 800430c:	f4bf af57 	bcs.w	80041be <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004310:	698a      	ldr	r2, [r1, #24]
 8004312:	f022 020f 	bic.w	r2, r2, #15
 8004316:	4302      	orrs	r2, r0
 8004318:	618a      	str	r2, [r1, #24]
 800431a:	e750      	b.n	80041be <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800431c:	680a      	ldr	r2, [r1, #0]
 800431e:	f022 020f 	bic.w	r2, r2, #15
 8004322:	432a      	orrs	r2, r5
 8004324:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004326:	680a      	ldr	r2, [r1, #0]
 8004328:	f002 020f 	and.w	r2, r2, #15
 800432c:	42aa      	cmp	r2, r5
 800432e:	f47f aefa 	bne.w	8004126 <HAL_RCC_ClockConfig+0xa>
 8004332:	e74b      	b.n	80041cc <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004334:	4907      	ldr	r1, [pc, #28]	@ (8004354 <HAL_RCC_ClockConfig+0x238>)
 8004336:	6920      	ldr	r0, [r4, #16]
 8004338:	698a      	ldr	r2, [r1, #24]
 800433a:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800433e:	4290      	cmp	r0, r2
 8004340:	f4bf af47 	bcs.w	80041d2 <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004344:	698a      	ldr	r2, [r1, #24]
 8004346:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800434a:	4302      	orrs	r2, r0
 800434c:	618a      	str	r2, [r1, #24]
 800434e:	e740      	b.n	80041d2 <HAL_RCC_ClockConfig+0xb6>
 8004350:	52002000 	.word	0x52002000
 8004354:	58024400 	.word	0x58024400
 8004358:	0800ec32 	.word	0x0800ec32
 800435c:	24000008 	.word	0x24000008
 8004360:	2400000c 	.word	0x2400000c
 8004364:	24000014 	.word	0x24000014

08004368 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004368:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800436a:	f7ff fe35 	bl	8003fd8 <HAL_RCC_GetSysClockFreq>
 800436e:	4a0b      	ldr	r2, [pc, #44]	@ (800439c <HAL_RCC_GetHCLKFreq+0x34>)
 8004370:	490b      	ldr	r1, [pc, #44]	@ (80043a0 <HAL_RCC_GetHCLKFreq+0x38>)
 8004372:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004374:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004376:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800437a:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800437e:	5ccb      	ldrb	r3, [r1, r3]
 8004380:	f003 031f 	and.w	r3, r3, #31
 8004384:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004388:	5c88      	ldrb	r0, [r1, r2]
 800438a:	4a06      	ldr	r2, [pc, #24]	@ (80043a4 <HAL_RCC_GetHCLKFreq+0x3c>)
 800438c:	f000 001f 	and.w	r0, r0, #31
 8004390:	fa23 f000 	lsr.w	r0, r3, r0
 8004394:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004396:	4a04      	ldr	r2, [pc, #16]	@ (80043a8 <HAL_RCC_GetHCLKFreq+0x40>)
 8004398:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800439a:	bd08      	pop	{r3, pc}
 800439c:	58024400 	.word	0x58024400
 80043a0:	0800ec32 	.word	0x0800ec32
 80043a4:	24000008 	.word	0x24000008
 80043a8:	2400000c 	.word	0x2400000c

080043ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043ac:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80043ae:	f7ff ffdb 	bl	8004368 <HAL_RCC_GetHCLKFreq>
 80043b2:	4b05      	ldr	r3, [pc, #20]	@ (80043c8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80043b4:	4a05      	ldr	r2, [pc, #20]	@ (80043cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80043b6:	69db      	ldr	r3, [r3, #28]
 80043b8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80043bc:	5cd3      	ldrb	r3, [r2, r3]
 80043be:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80043c2:	40d8      	lsrs	r0, r3
 80043c4:	bd08      	pop	{r3, pc}
 80043c6:	bf00      	nop
 80043c8:	58024400 	.word	0x58024400
 80043cc:	0800ec32 	.word	0x0800ec32

080043d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043d0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80043d2:	f7ff ffc9 	bl	8004368 <HAL_RCC_GetHCLKFreq>
 80043d6:	4b05      	ldr	r3, [pc, #20]	@ (80043ec <HAL_RCC_GetPCLK2Freq+0x1c>)
 80043d8:	4a05      	ldr	r2, [pc, #20]	@ (80043f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043da:	69db      	ldr	r3, [r3, #28]
 80043dc:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80043e0:	5cd3      	ldrb	r3, [r2, r3]
 80043e2:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80043e6:	40d8      	lsrs	r0, r3
 80043e8:	bd08      	pop	{r3, pc}
 80043ea:	bf00      	nop
 80043ec:	58024400 	.word	0x58024400
 80043f0:	0800ec32 	.word	0x0800ec32

080043f4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80043f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80043f6:	4c3a      	ldr	r4, [pc, #232]	@ (80044e0 <RCCEx_PLL2_Config+0xec>)
{
 80043f8:	4606      	mov	r6, r0
 80043fa:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80043fc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80043fe:	f003 0303 	and.w	r3, r3, #3
 8004402:	2b03      	cmp	r3, #3
 8004404:	d069      	beq.n	80044da <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004406:	6823      	ldr	r3, [r4, #0]
 8004408:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800440c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800440e:	f7fd f86f 	bl	80014f0 <HAL_GetTick>
 8004412:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004414:	6823      	ldr	r3, [r4, #0]
 8004416:	011a      	lsls	r2, r3, #4
 8004418:	d44b      	bmi.n	80044b2 <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800441a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800441c:	6832      	ldr	r2, [r6, #0]
 800441e:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004422:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8004426:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004428:	68b3      	ldr	r3, [r6, #8]
 800442a:	68f2      	ldr	r2, [r6, #12]
 800442c:	3b01      	subs	r3, #1
 800442e:	3a01      	subs	r2, #1
 8004430:	025b      	lsls	r3, r3, #9
 8004432:	0412      	lsls	r2, r2, #16
 8004434:	b29b      	uxth	r3, r3
 8004436:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800443a:	4313      	orrs	r3, r2
 800443c:	6872      	ldr	r2, [r6, #4]
 800443e:	3a01      	subs	r2, #1
 8004440:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004444:	4313      	orrs	r3, r2
 8004446:	6932      	ldr	r2, [r6, #16]
 8004448:	3a01      	subs	r2, #1
 800444a:	0612      	lsls	r2, r2, #24
 800444c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004450:	4313      	orrs	r3, r2
 8004452:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004454:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004456:	6972      	ldr	r2, [r6, #20]
 8004458:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800445c:	4313      	orrs	r3, r2
 800445e:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004460:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004462:	69b2      	ldr	r2, [r6, #24]
 8004464:	f023 0320 	bic.w	r3, r3, #32
 8004468:	4313      	orrs	r3, r2
 800446a:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800446c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800446e:	f023 0310 	bic.w	r3, r3, #16
 8004472:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004474:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004476:	69f2      	ldr	r2, [r6, #28]
 8004478:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800447c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004480:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004484:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004486:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004488:	f043 0310 	orr.w	r3, r3, #16
 800448c:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800448e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8004490:	b9b5      	cbnz	r5, 80044c0 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004492:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004496:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004498:	4c11      	ldr	r4, [pc, #68]	@ (80044e0 <RCCEx_PLL2_Config+0xec>)
 800449a:	6823      	ldr	r3, [r4, #0]
 800449c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80044a0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044a2:	f7fd f825 	bl	80014f0 <HAL_GetTick>
 80044a6:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80044a8:	6823      	ldr	r3, [r4, #0]
 80044aa:	011b      	lsls	r3, r3, #4
 80044ac:	d50f      	bpl.n	80044ce <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 80044ae:	2000      	movs	r0, #0
 80044b0:	e005      	b.n	80044be <RCCEx_PLL2_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80044b2:	f7fd f81d 	bl	80014f0 <HAL_GetTick>
 80044b6:	1bc0      	subs	r0, r0, r7
 80044b8:	2802      	cmp	r0, #2
 80044ba:	d9ab      	bls.n	8004414 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 80044bc:	2003      	movs	r0, #3
}
 80044be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 80044c0:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80044c2:	bf0c      	ite	eq
 80044c4:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80044c8:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 80044cc:	e7e3      	b.n	8004496 <RCCEx_PLL2_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80044ce:	f7fd f80f 	bl	80014f0 <HAL_GetTick>
 80044d2:	1b40      	subs	r0, r0, r5
 80044d4:	2802      	cmp	r0, #2
 80044d6:	d9e7      	bls.n	80044a8 <RCCEx_PLL2_Config+0xb4>
 80044d8:	e7f0      	b.n	80044bc <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 80044da:	2001      	movs	r0, #1
 80044dc:	e7ef      	b.n	80044be <RCCEx_PLL2_Config+0xca>
 80044de:	bf00      	nop
 80044e0:	58024400 	.word	0x58024400

080044e4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80044e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80044e6:	4c3a      	ldr	r4, [pc, #232]	@ (80045d0 <RCCEx_PLL3_Config+0xec>)
{
 80044e8:	4606      	mov	r6, r0
 80044ea:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80044ec:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80044ee:	f003 0303 	and.w	r3, r3, #3
 80044f2:	2b03      	cmp	r3, #3
 80044f4:	d069      	beq.n	80045ca <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80044f6:	6823      	ldr	r3, [r4, #0]
 80044f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044fc:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044fe:	f7fc fff7 	bl	80014f0 <HAL_GetTick>
 8004502:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004504:	6823      	ldr	r3, [r4, #0]
 8004506:	009a      	lsls	r2, r3, #2
 8004508:	d44b      	bmi.n	80045a2 <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800450a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800450c:	6832      	ldr	r2, [r6, #0]
 800450e:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8004512:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8004516:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004518:	68b3      	ldr	r3, [r6, #8]
 800451a:	68f2      	ldr	r2, [r6, #12]
 800451c:	3b01      	subs	r3, #1
 800451e:	3a01      	subs	r2, #1
 8004520:	025b      	lsls	r3, r3, #9
 8004522:	0412      	lsls	r2, r2, #16
 8004524:	b29b      	uxth	r3, r3
 8004526:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800452a:	4313      	orrs	r3, r2
 800452c:	6872      	ldr	r2, [r6, #4]
 800452e:	3a01      	subs	r2, #1
 8004530:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004534:	4313      	orrs	r3, r2
 8004536:	6932      	ldr	r2, [r6, #16]
 8004538:	3a01      	subs	r2, #1
 800453a:	0612      	lsls	r2, r2, #24
 800453c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004540:	4313      	orrs	r3, r2
 8004542:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004544:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004546:	6972      	ldr	r2, [r6, #20]
 8004548:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800454c:	4313      	orrs	r3, r2
 800454e:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004550:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004552:	69b2      	ldr	r2, [r6, #24]
 8004554:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004558:	4313      	orrs	r3, r2
 800455a:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800455c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800455e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004562:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004564:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004566:	69f2      	ldr	r2, [r6, #28]
 8004568:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800456c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004570:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004574:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004576:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004578:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800457c:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800457e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8004580:	b9b5      	cbnz	r5, 80045b0 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004582:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004586:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004588:	4c11      	ldr	r4, [pc, #68]	@ (80045d0 <RCCEx_PLL3_Config+0xec>)
 800458a:	6823      	ldr	r3, [r4, #0]
 800458c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004590:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004592:	f7fc ffad 	bl	80014f0 <HAL_GetTick>
 8004596:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004598:	6823      	ldr	r3, [r4, #0]
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	d50f      	bpl.n	80045be <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 800459e:	2000      	movs	r0, #0
 80045a0:	e005      	b.n	80045ae <RCCEx_PLL3_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80045a2:	f7fc ffa5 	bl	80014f0 <HAL_GetTick>
 80045a6:	1bc0      	subs	r0, r0, r7
 80045a8:	2802      	cmp	r0, #2
 80045aa:	d9ab      	bls.n	8004504 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 80045ac:	2003      	movs	r0, #3
}
 80045ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 80045b0:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80045b2:	bf0c      	ite	eq
 80045b4:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80045b8:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 80045bc:	e7e3      	b.n	8004586 <RCCEx_PLL3_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80045be:	f7fc ff97 	bl	80014f0 <HAL_GetTick>
 80045c2:	1b40      	subs	r0, r0, r5
 80045c4:	2802      	cmp	r0, #2
 80045c6:	d9e7      	bls.n	8004598 <RCCEx_PLL3_Config+0xb4>
 80045c8:	e7f0      	b.n	80045ac <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 80045ca:	2001      	movs	r0, #1
 80045cc:	e7ef      	b.n	80045ae <RCCEx_PLL3_Config+0xca>
 80045ce:	bf00      	nop
 80045d0:	58024400 	.word	0x58024400

080045d4 <HAL_RCCEx_PeriphCLKConfig>:
{
 80045d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80045d8:	6803      	ldr	r3, [r0, #0]
{
 80045da:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80045dc:	0118      	lsls	r0, r3, #4
 80045de:	d51e      	bpl.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 80045e0:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 80045e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80045e6:	d02b      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 80045e8:	d80f      	bhi.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x36>
 80045ea:	b1d3      	cbz	r3, 8004622 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80045ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045f0:	d01d      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x5a>
 80045f2:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80045f4:	682b      	ldr	r3, [r5, #0]
 80045f6:	05d9      	lsls	r1, r3, #23
 80045f8:	d551      	bpl.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xca>
    switch (PeriphClkInit->Sai1ClockSelection)
 80045fa:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80045fc:	2b04      	cmp	r3, #4
 80045fe:	d84d      	bhi.n	800469c <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8004600:	e8df f003 	tbb	[pc, r3]
 8004604:	29463f24 	.word	0x29463f24
 8004608:	29          	.byte	0x29
 8004609:	00          	.byte	0x00
    switch (PeriphClkInit->SpdifrxClockSelection)
 800460a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800460e:	d1f0      	bne.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004610:	4a85      	ldr	r2, [pc, #532]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004612:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 8004614:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8004616:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800461a:	430b      	orrs	r3, r1
 800461c:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800461e:	2600      	movs	r6, #0
 8004620:	e7e8      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x20>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004622:	4a81      	ldr	r2, [pc, #516]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004624:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004626:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800462a:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800462c:	e7f0      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800462e:	2102      	movs	r1, #2
 8004630:	f105 0008 	add.w	r0, r5, #8
 8004634:	f7ff fede 	bl	80043f4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004638:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800463a:	2800      	cmp	r0, #0
 800463c:	d1da      	bne.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x20>
 800463e:	e7e7      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004640:	2102      	movs	r1, #2
 8004642:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004646:	f7ff ff4d 	bl	80044e4 <RCCEx_PLL3_Config>
 800464a:	e7f5      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x64>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800464c:	4a76      	ldr	r2, [pc, #472]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800464e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004650:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004654:	62d3      	str	r3, [r2, #44]	@ 0x2c
    switch (PeriphClkInit->SpdifrxClockSelection)
 8004656:	4634      	mov	r4, r6
    if (ret == HAL_OK)
 8004658:	bb1c      	cbnz	r4, 80046a2 <HAL_RCCEx_PeriphCLKConfig+0xce>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800465a:	4a73      	ldr	r2, [pc, #460]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800465c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800465e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8004660:	f023 0307 	bic.w	r3, r3, #7
 8004664:	430b      	orrs	r3, r1
 8004666:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004668:	682b      	ldr	r3, [r5, #0]
 800466a:	059a      	lsls	r2, r3, #22
 800466c:	d528      	bpl.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    switch (PeriphClkInit->Sai23ClockSelection)
 800466e:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8004670:	2b80      	cmp	r3, #128	@ 0x80
 8004672:	d043      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x128>
 8004674:	d817      	bhi.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
 8004676:	b3a3      	cbz	r3, 80046e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8004678:	2b40      	cmp	r3, #64	@ 0x40
 800467a:	d038      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x11a>
 800467c:	2601      	movs	r6, #1
 800467e:	4634      	mov	r4, r6
 8004680:	e01e      	b.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0xec>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004682:	2100      	movs	r1, #0
 8004684:	f105 0008 	add.w	r0, r5, #8
 8004688:	f7ff feb4 	bl	80043f4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800468c:	4604      	mov	r4, r0
        break;
 800468e:	e7e3      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x84>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004690:	2100      	movs	r1, #0
 8004692:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004696:	f7ff ff25 	bl	80044e4 <RCCEx_PLL3_Config>
 800469a:	e7f7      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    switch (PeriphClkInit->Sai1ClockSelection)
 800469c:	2601      	movs	r6, #1
 800469e:	4634      	mov	r4, r6
 80046a0:	e7e2      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x94>
 80046a2:	4626      	mov	r6, r4
 80046a4:	e7e0      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch (PeriphClkInit->Sai23ClockSelection)
 80046a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80046a8:	d002      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80046aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046ae:	d1e5      	bne.n	800467c <HAL_RCCEx_PeriphCLKConfig+0xa8>
    if (ret == HAL_OK)
 80046b0:	bb54      	cbnz	r4, 8004708 <HAL_RCCEx_PeriphCLKConfig+0x134>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80046b2:	4a5d      	ldr	r2, [pc, #372]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80046b4:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 80046b6:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80046b8:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 80046bc:	430b      	orrs	r3, r1
 80046be:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80046c0:	682b      	ldr	r3, [r5, #0]
 80046c2:	055b      	lsls	r3, r3, #21
 80046c4:	d531      	bpl.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x156>
    switch (PeriphClkInit->Sai4AClockSelection)
 80046c6:	f8d5 30a8 	ldr.w	r3, [r5, #168]	@ 0xa8
 80046ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046ce:	d049      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80046d0:	d81c      	bhi.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x138>
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d039      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x176>
 80046d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046da:	d03c      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x182>
 80046dc:	2601      	movs	r6, #1
 80046de:	4634      	mov	r4, r6
 80046e0:	e023      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x156>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046e2:	4a51      	ldr	r2, [pc, #324]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80046e4:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80046e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 80046ec:	e7e0      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046ee:	2100      	movs	r1, #0
 80046f0:	f105 0008 	add.w	r0, r5, #8
 80046f4:	f7ff fe7e 	bl	80043f4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046f8:	4604      	mov	r4, r0
        break;
 80046fa:	e7d9      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046fc:	2100      	movs	r1, #0
 80046fe:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004702:	f7ff feef 	bl	80044e4 <RCCEx_PLL3_Config>
 8004706:	e7f7      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x124>
 8004708:	4626      	mov	r6, r4
 800470a:	e7d9      	b.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    switch (PeriphClkInit->Sai4AClockSelection)
 800470c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004710:	d002      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x144>
 8004712:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004716:	d1e1      	bne.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x108>
    if (ret == HAL_OK)
 8004718:	bb54      	cbnz	r4, 8004770 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800471a:	4a43      	ldr	r2, [pc, #268]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800471c:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 8004720:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004722:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 8004726:	430b      	orrs	r3, r1
 8004728:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800472a:	682b      	ldr	r3, [r5, #0]
 800472c:	051f      	lsls	r7, r3, #20
 800472e:	d530      	bpl.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    switch (PeriphClkInit->Sai4BClockSelection)
 8004730:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 8004734:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004738:	d045      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 800473a:	d81b      	bhi.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 800473c:	b3b3      	cbz	r3, 80047ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800473e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004742:	d039      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8004744:	2601      	movs	r6, #1
 8004746:	4634      	mov	r4, r6
 8004748:	e023      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800474a:	4a37      	ldr	r2, [pc, #220]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800474c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800474e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004752:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8004754:	e7e0      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x144>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004756:	2100      	movs	r1, #0
 8004758:	f105 0008 	add.w	r0, r5, #8
 800475c:	f7ff fe4a 	bl	80043f4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004760:	4604      	mov	r4, r0
        break;
 8004762:	e7d9      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x144>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004764:	2100      	movs	r1, #0
 8004766:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800476a:	f7ff febb 	bl	80044e4 <RCCEx_PLL3_Config>
 800476e:	e7f7      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004770:	4626      	mov	r6, r4
 8004772:	e7da      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x156>
    switch (PeriphClkInit->Sai4BClockSelection)
 8004774:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004778:	d002      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 800477a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800477e:	d1e1      	bne.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x170>
    if (ret == HAL_OK)
 8004780:	bb3c      	cbnz	r4, 80047d2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004782:	4a29      	ldr	r2, [pc, #164]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004784:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 8004788:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800478a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800478e:	430b      	orrs	r3, r1
 8004790:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004792:	682b      	ldr	r3, [r5, #0]
 8004794:	0198      	lsls	r0, r3, #6
 8004796:	d528      	bpl.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x216>
    switch (PeriphClkInit->QspiClockSelection)
 8004798:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800479a:	2b20      	cmp	r3, #32
 800479c:	d03b      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x242>
 800479e:	d81a      	bhi.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80047a0:	b1db      	cbz	r3, 80047da <HAL_RCCEx_PeriphCLKConfig+0x206>
 80047a2:	2b10      	cmp	r3, #16
 80047a4:	d031      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x236>
 80047a6:	2601      	movs	r6, #1
 80047a8:	4634      	mov	r4, r6
 80047aa:	e01e      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x216>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047ac:	4a1e      	ldr	r2, [pc, #120]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80047ae:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80047b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 80047b6:	e7e3      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047b8:	2100      	movs	r1, #0
 80047ba:	f105 0008 	add.w	r0, r5, #8
 80047be:	f7ff fe19 	bl	80043f4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047c2:	4604      	mov	r4, r0
        break;
 80047c4:	e7dc      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047c6:	2100      	movs	r1, #0
 80047c8:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 80047cc:	f7ff fe8a 	bl	80044e4 <RCCEx_PLL3_Config>
 80047d0:	e7f7      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80047d2:	4626      	mov	r6, r4
 80047d4:	e7dd      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    switch (PeriphClkInit->QspiClockSelection)
 80047d6:	2b30      	cmp	r3, #48	@ 0x30
 80047d8:	d1e5      	bne.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    if (ret == HAL_OK)
 80047da:	bb1c      	cbnz	r4, 8004824 <HAL_RCCEx_PeriphCLKConfig+0x250>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80047dc:	4a12      	ldr	r2, [pc, #72]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80047de:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80047e0:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80047e2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80047e6:	430b      	orrs	r3, r1
 80047e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80047ea:	682b      	ldr	r3, [r5, #0]
 80047ec:	04d9      	lsls	r1, r3, #19
 80047ee:	d52c      	bpl.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x276>
    switch (PeriphClkInit->Spi123ClockSelection)
 80047f0:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 80047f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047f6:	d076      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80047f8:	d818      	bhi.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x258>
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d066      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 80047fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004802:	d069      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8004804:	2601      	movs	r6, #1
 8004806:	4634      	mov	r4, r6
 8004808:	e01f      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x276>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800480a:	4a07      	ldr	r2, [pc, #28]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800480c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800480e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004812:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8004814:	e7e1      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x206>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004816:	2102      	movs	r1, #2
 8004818:	f105 0008 	add.w	r0, r5, #8
 800481c:	f7ff fdea 	bl	80043f4 <RCCEx_PLL2_Config>
 8004820:	4604      	mov	r4, r0
        break;
 8004822:	e7da      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004824:	4626      	mov	r6, r4
 8004826:	e7e0      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x216>
 8004828:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi123ClockSelection)
 800482c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004830:	d002      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004832:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004836:	d1e5      	bne.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x230>
    if (ret == HAL_OK)
 8004838:	2c00      	cmp	r4, #0
 800483a:	d15a      	bne.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800483c:	4a9e      	ldr	r2, [pc, #632]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800483e:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8004840:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8004842:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004846:	430b      	orrs	r3, r1
 8004848:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800484a:	682b      	ldr	r3, [r5, #0]
 800484c:	049a      	lsls	r2, r3, #18
 800484e:	d50b      	bpl.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x294>
    switch (PeriphClkInit->Spi45ClockSelection)
 8004850:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004852:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004856:	d066      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8004858:	d84d      	bhi.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x322>
 800485a:	2b00      	cmp	r3, #0
 800485c:	d053      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800485e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004862:	d059      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004864:	2601      	movs	r6, #1
 8004866:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004868:	682b      	ldr	r3, [r5, #0]
 800486a:	045b      	lsls	r3, r3, #17
 800486c:	d50c      	bpl.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    switch (PeriphClkInit->Spi6ClockSelection)
 800486e:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 8004872:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004876:	d077      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x394>
 8004878:	d85d      	bhi.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800487a:	2b00      	cmp	r3, #0
 800487c:	d063      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800487e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004882:	d06a      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x386>
 8004884:	2601      	movs	r6, #1
 8004886:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004888:	682b      	ldr	r3, [r5, #0]
 800488a:	041f      	lsls	r7, r3, #16
 800488c:	d511      	bpl.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    switch (PeriphClkInit->FdcanClockSelection)
 800488e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8004890:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004894:	d070      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8004896:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800489a:	d073      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800489c:	2b00      	cmp	r3, #0
 800489e:	d178      	bne.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x3be>
    if (ret == HAL_OK)
 80048a0:	2c00      	cmp	r4, #0
 80048a2:	d179      	bne.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80048a4:	4a84      	ldr	r2, [pc, #528]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048a6:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 80048a8:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80048aa:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80048ae:	430b      	orrs	r3, r1
 80048b0:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80048b2:	682b      	ldr	r3, [r5, #0]
 80048b4:	01d8      	lsls	r0, r3, #7
 80048b6:	d57f      	bpl.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    switch (PeriphClkInit->FmcClockSelection)
 80048b8:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 80048ba:	2b03      	cmp	r3, #3
 80048bc:	f200 80d8 	bhi.w	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80048c0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80048c4:	006c0071 	.word	0x006c0071
 80048c8:	007100cf 	.word	0x007100cf
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048cc:	4a7a      	ldr	r2, [pc, #488]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048ce:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80048d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 80048d6:	e7af      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x264>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048d8:	2100      	movs	r1, #0
 80048da:	f105 0008 	add.w	r0, r5, #8
 80048de:	f7ff fd89 	bl	80043f4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80048e2:	4604      	mov	r4, r0
        break;
 80048e4:	e7a8      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x264>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80048e6:	2100      	movs	r1, #0
 80048e8:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 80048ec:	f7ff fdfa 	bl	80044e4 <RCCEx_PLL3_Config>
 80048f0:	e7f7      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 80048f2:	4626      	mov	r6, r4
 80048f4:	e7a9      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x276>
    switch (PeriphClkInit->Spi45ClockSelection)
 80048f6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80048fa:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 80048fe:	d002      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004900:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004904:	d1ae      	bne.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x290>
    if (ret == HAL_OK)
 8004906:	b9a4      	cbnz	r4, 8004932 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004908:	4a6b      	ldr	r2, [pc, #428]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800490a:	6e69      	ldr	r1, [r5, #100]	@ 0x64
 800490c:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800490e:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004912:	430b      	orrs	r3, r1
 8004914:	6513      	str	r3, [r2, #80]	@ 0x50
 8004916:	e7a7      	b.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x294>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004918:	2101      	movs	r1, #1
 800491a:	f105 0008 	add.w	r0, r5, #8
 800491e:	f7ff fd69 	bl	80043f4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004922:	4604      	mov	r4, r0
        break;
 8004924:	e7ef      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x332>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004926:	2101      	movs	r1, #1
 8004928:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800492c:	f7ff fdda 	bl	80044e4 <RCCEx_PLL3_Config>
 8004930:	e7f7      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004932:	4626      	mov	r6, r4
 8004934:	e798      	b.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x294>
    switch (PeriphClkInit->Spi6ClockSelection)
 8004936:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800493a:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800493e:	d002      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004940:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004944:	d19e      	bne.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    if (ret == HAL_OK)
 8004946:	b9ac      	cbnz	r4, 8004974 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004948:	4a5b      	ldr	r2, [pc, #364]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800494a:	f8d5 10b0 	ldr.w	r1, [r5, #176]	@ 0xb0
 800494e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004950:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 8004954:	430b      	orrs	r3, r1
 8004956:	6593      	str	r3, [r2, #88]	@ 0x58
 8004958:	e796      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800495a:	2101      	movs	r1, #1
 800495c:	f105 0008 	add.w	r0, r5, #8
 8004960:	f7ff fd48 	bl	80043f4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004964:	4604      	mov	r4, r0
        break;
 8004966:	e7ee      	b.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x372>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004968:	2101      	movs	r1, #1
 800496a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800496e:	f7ff fdb9 	bl	80044e4 <RCCEx_PLL3_Config>
 8004972:	e7f7      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x390>
 8004974:	4626      	mov	r6, r4
 8004976:	e787      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004978:	4a4f      	ldr	r2, [pc, #316]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800497a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800497c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004980:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8004982:	e78d      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004984:	2101      	movs	r1, #1
 8004986:	f105 0008 	add.w	r0, r5, #8
 800498a:	f7ff fd33 	bl	80043f4 <RCCEx_PLL2_Config>
 800498e:	4604      	mov	r4, r0
        break;
 8004990:	e786      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    switch (PeriphClkInit->FdcanClockSelection)
 8004992:	2601      	movs	r6, #1
 8004994:	4634      	mov	r4, r6
 8004996:	e78c      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8004998:	4626      	mov	r6, r4
 800499a:	e78a      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800499c:	4a46      	ldr	r2, [pc, #280]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800499e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80049a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 80049a6:	2c00      	cmp	r4, #0
 80049a8:	d165      	bne.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80049aa:	4a43      	ldr	r2, [pc, #268]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049ac:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 80049ae:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80049b0:	f023 0303 	bic.w	r3, r3, #3
 80049b4:	430b      	orrs	r3, r1
 80049b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049b8:	682b      	ldr	r3, [r5, #0]
 80049ba:	0259      	lsls	r1, r3, #9
 80049bc:	d539      	bpl.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049be:	4f3f      	ldr	r7, [pc, #252]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049c6:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 80049c8:	f7fc fd92 	bl	80014f0 <HAL_GetTick>
 80049cc:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	05da      	lsls	r2, r3, #23
 80049d2:	d552      	bpl.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    if (ret == HAL_OK)
 80049d4:	2c00      	cmp	r4, #0
 80049d6:	d175      	bne.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80049d8:	4b37      	ldr	r3, [pc, #220]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049da:	f8d5 00b4 	ldr.w	r0, [r5, #180]	@ 0xb4
 80049de:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80049e0:	4042      	eors	r2, r0
 80049e2:	f412 7f40 	tst.w	r2, #768	@ 0x300
 80049e6:	d00b      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x42c>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049e8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 80049ea:	6f19      	ldr	r1, [r3, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049ec:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80049f0:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 80049f4:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049f6:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80049f8:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 80049fc:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 80049fe:	671a      	str	r2, [r3, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004a00:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8004a04:	d042      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a06:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8004a0a:	492b      	ldr	r1, [pc, #172]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a0c:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8004a10:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8004a14:	d14b      	bne.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004a16:	6908      	ldr	r0, [r1, #16]
 8004a18:	4a29      	ldr	r2, [pc, #164]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a1a:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
 8004a1e:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8004a22:	4302      	orrs	r2, r0
 8004a24:	610a      	str	r2, [r1, #16]
 8004a26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a2a:	4a23      	ldr	r2, [pc, #140]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a2c:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8004a2e:	430b      	orrs	r3, r1
 8004a30:	6713      	str	r3, [r2, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004a32:	682b      	ldr	r3, [r5, #0]
 8004a34:	07d8      	lsls	r0, r3, #31
 8004a36:	d509      	bpl.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x478>
    switch (PeriphClkInit->Usart16ClockSelection)
 8004a38:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 8004a3a:	2b10      	cmp	r3, #16
 8004a3c:	d05a      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8004a3e:	d843      	bhi.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d047      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8004a44:	2b08      	cmp	r3, #8
 8004a46:	d04e      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x512>
 8004a48:	2601      	movs	r6, #1
 8004a4a:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004a4c:	682b      	ldr	r3, [r5, #0]
 8004a4e:	0799      	lsls	r1, r3, #30
 8004a50:	d566      	bpl.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004a52:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 8004a54:	2b05      	cmp	r3, #5
 8004a56:	d879      	bhi.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x578>
 8004a58:	e8df f003 	tbb	[pc, r3]
 8004a5c:	5a72545a 	.word	0x5a72545a
 8004a60:	5a5a      	.short	0x5a5a
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a62:	2102      	movs	r1, #2
 8004a64:	f105 0008 	add.w	r0, r5, #8
 8004a68:	f7ff fcc4 	bl	80043f4 <RCCEx_PLL2_Config>
 8004a6c:	4604      	mov	r4, r0
        break;
 8004a6e:	e79a      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    switch (PeriphClkInit->FmcClockSelection)
 8004a70:	2601      	movs	r6, #1
 8004a72:	4634      	mov	r4, r6
 8004a74:	e7a0      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004a76:	4626      	mov	r6, r4
 8004a78:	e79e      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a7a:	f7fc fd39 	bl	80014f0 <HAL_GetTick>
 8004a7e:	eba0 0008 	sub.w	r0, r0, r8
 8004a82:	2864      	cmp	r0, #100	@ 0x64
 8004a84:	d9a3      	bls.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x3fa>
        ret = HAL_TIMEOUT;
 8004a86:	2603      	movs	r6, #3
 8004a88:	4634      	mov	r4, r6
 8004a8a:	e7d2      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        tickstart = HAL_GetTick();
 8004a8c:	f7fc fd30 	bl	80014f0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a90:	f8df 8024 	ldr.w	r8, [pc, #36]	@ 8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        tickstart = HAL_GetTick();
 8004a94:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a96:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a9a:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8004a9e:	079b      	lsls	r3, r3, #30
 8004aa0:	d4b1      	bmi.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x432>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aa2:	f7fc fd25 	bl	80014f0 <HAL_GetTick>
 8004aa6:	1bc0      	subs	r0, r0, r7
 8004aa8:	4548      	cmp	r0, r9
 8004aaa:	d9f6      	bls.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8004aac:	e7eb      	b.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004aae:	690a      	ldr	r2, [r1, #16]
 8004ab0:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8004ab4:	e7b6      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x450>
 8004ab6:	bf00      	nop
 8004ab8:	58024400 	.word	0x58024400
 8004abc:	58024800 	.word	0x58024800
 8004ac0:	00ffffcf 	.word	0x00ffffcf
 8004ac4:	4626      	mov	r6, r4
 8004ac6:	e7b4      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    switch (PeriphClkInit->Usart16ClockSelection)
 8004ac8:	f023 0208 	bic.w	r2, r3, #8
 8004acc:	2a20      	cmp	r2, #32
 8004ace:	d001      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8004ad0:	2b18      	cmp	r3, #24
 8004ad2:	d1b9      	bne.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x474>
    if (ret == HAL_OK)
 8004ad4:	b9a4      	cbnz	r4, 8004b00 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004ad6:	4a20      	ldr	r2, [pc, #128]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8004ad8:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
 8004ada:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004adc:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8004ae0:	430b      	orrs	r3, r1
 8004ae2:	6553      	str	r3, [r2, #84]	@ 0x54
 8004ae4:	e7b2      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x478>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ae6:	2101      	movs	r1, #1
 8004ae8:	f105 0008 	add.w	r0, r5, #8
 8004aec:	f7ff fc82 	bl	80043f4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004af0:	4604      	mov	r4, r0
        break;
 8004af2:	e7ef      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x500>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004af4:	2101      	movs	r1, #1
 8004af6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004afa:	f7ff fcf3 	bl	80044e4 <RCCEx_PLL3_Config>
 8004afe:	e7f7      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 8004b00:	4626      	mov	r6, r4
 8004b02:	e7a3      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x478>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b04:	2101      	movs	r1, #1
 8004b06:	f105 0008 	add.w	r0, r5, #8
 8004b0a:	f7ff fc73 	bl	80043f4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b0e:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8004b10:	b9fc      	cbnz	r4, 8004b52 <HAL_RCCEx_PeriphCLKConfig+0x57e>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004b12:	4a11      	ldr	r2, [pc, #68]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8004b14:	6fa9      	ldr	r1, [r5, #120]	@ 0x78
 8004b16:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004b18:	f023 0307 	bic.w	r3, r3, #7
 8004b1c:	430b      	orrs	r3, r1
 8004b1e:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b20:	682b      	ldr	r3, [r5, #0]
 8004b22:	075a      	lsls	r2, r3, #29
 8004b24:	d52b      	bpl.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004b26:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8004b2a:	2b05      	cmp	r3, #5
 8004b2c:	f200 816e 	bhi.w	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x838>
 8004b30:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004b34:	0014001a 	.word	0x0014001a
 8004b38:	001a0166 	.word	0x001a0166
 8004b3c:	001a001a 	.word	0x001a001a
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b40:	2101      	movs	r1, #1
 8004b42:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004b46:	f7ff fccd 	bl	80044e4 <RCCEx_PLL3_Config>
 8004b4a:	e7e0      	b.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x53a>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004b4c:	2601      	movs	r6, #1
 8004b4e:	4634      	mov	r4, r6
 8004b50:	e7e6      	b.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x54c>
 8004b52:	4626      	mov	r6, r4
 8004b54:	e7e4      	b.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x54c>
 8004b56:	bf00      	nop
 8004b58:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b5c:	2101      	movs	r1, #1
 8004b5e:	f105 0008 	add.w	r0, r5, #8
 8004b62:	f7ff fc47 	bl	80043f4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b66:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8004b68:	2c00      	cmp	r4, #0
 8004b6a:	f040 8152 	bne.w	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x83e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b6e:	4aaa      	ldr	r2, [pc, #680]	@ (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004b70:	f8d5 1094 	ldr.w	r1, [r5, #148]	@ 0x94
 8004b74:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004b76:	f023 0307 	bic.w	r3, r3, #7
 8004b7a:	430b      	orrs	r3, r1
 8004b7c:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b7e:	682b      	ldr	r3, [r5, #0]
 8004b80:	069b      	lsls	r3, r3, #26
 8004b82:	d510      	bpl.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004b84:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8004b88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b8c:	f000 8160 	beq.w	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x87c>
 8004b90:	f200 8144 	bhi.w	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x848>
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	f000 814a 	beq.w	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x85a>
 8004b9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b9e:	f000 8150 	beq.w	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x86e>
 8004ba2:	2601      	movs	r6, #1
 8004ba4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004ba6:	682b      	ldr	r3, [r5, #0]
 8004ba8:	065f      	lsls	r7, r3, #25
 8004baa:	d510      	bpl.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x5fa>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004bac:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 8004bb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bb4:	f000 816e 	beq.w	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8004bb8:	f200 8152 	bhi.w	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f000 8158 	beq.w	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x89e>
 8004bc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bc6:	f000 815e 	beq.w	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
 8004bca:	2601      	movs	r6, #1
 8004bcc:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004bce:	682b      	ldr	r3, [r5, #0]
 8004bd0:	0618      	lsls	r0, r3, #24
 8004bd2:	d510      	bpl.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004bd4:	f8d5 30a0 	ldr.w	r3, [r5, #160]	@ 0xa0
 8004bd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004bdc:	f000 817c 	beq.w	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x904>
 8004be0:	f200 8160 	bhi.w	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f000 8166 	beq.w	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004bea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bee:	f000 816c 	beq.w	8004eca <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8004bf2:	2601      	movs	r6, #1
 8004bf4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004bf6:	682b      	ldr	r3, [r5, #0]
 8004bf8:	0719      	lsls	r1, r3, #28
 8004bfa:	d514      	bpl.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x652>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004bfc:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
 8004c00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c04:	d107      	bne.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x642>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004c06:	2102      	movs	r1, #2
 8004c08:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004c0c:	f7ff fc6a 	bl	80044e4 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8004c10:	2800      	cmp	r0, #0
 8004c12:	bf18      	it	ne
 8004c14:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004c16:	4a80      	ldr	r2, [pc, #512]	@ (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004c18:	f8d5 1084 	ldr.w	r1, [r5, #132]	@ 0x84
 8004c1c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004c1e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004c22:	430b      	orrs	r3, r1
 8004c24:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c26:	682b      	ldr	r3, [r5, #0]
 8004c28:	06da      	lsls	r2, r3, #27
 8004c2a:	d514      	bpl.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x682>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004c2c:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8004c30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c34:	d107      	bne.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x672>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004c36:	2102      	movs	r1, #2
 8004c38:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004c3c:	f7ff fc52 	bl	80044e4 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8004c40:	2800      	cmp	r0, #0
 8004c42:	bf18      	it	ne
 8004c44:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c46:	4a74      	ldr	r2, [pc, #464]	@ (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004c48:	f8d5 1098 	ldr.w	r1, [r5, #152]	@ 0x98
 8004c4c:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004c4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c52:	430b      	orrs	r3, r1
 8004c54:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c56:	682b      	ldr	r3, [r5, #0]
 8004c58:	031b      	lsls	r3, r3, #12
 8004c5a:	d51b      	bpl.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    switch (PeriphClkInit->AdcClockSelection)
 8004c5c:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 8004c60:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8004c64:	f000 8140 	beq.w	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x914>
 8004c68:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8004c6c:	d007      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8004c6e:	2900      	cmp	r1, #0
 8004c70:	f040 8140 	bne.w	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x920>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c74:	f105 0008 	add.w	r0, r5, #8
 8004c78:	f7ff fbbc 	bl	80043f4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c7c:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8004c7e:	2c00      	cmp	r4, #0
 8004c80:	f040 813b 	bne.w	8004efa <HAL_RCCEx_PeriphCLKConfig+0x926>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c84:	4a64      	ldr	r2, [pc, #400]	@ (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004c86:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 8004c8a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004c8c:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8004c90:	430b      	orrs	r3, r1
 8004c92:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c94:	682b      	ldr	r3, [r5, #0]
 8004c96:	035f      	lsls	r7, r3, #13
 8004c98:	d50f      	bpl.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    switch (PeriphClkInit->UsbClockSelection)
 8004c9a:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
 8004c9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ca2:	f000 813b 	beq.w	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x948>
 8004ca6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004caa:	f000 812d 	beq.w	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8004cae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cb2:	f000 8124 	beq.w	8004efe <HAL_RCCEx_PeriphCLKConfig+0x92a>
 8004cb6:	2601      	movs	r6, #1
 8004cb8:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004cba:	682b      	ldr	r3, [r5, #0]
 8004cbc:	03d8      	lsls	r0, r3, #15
 8004cbe:	d509      	bpl.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    switch (PeriphClkInit->SdmmcClockSelection)
 8004cc0:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f000 8133 	beq.w	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004cc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ccc:	f000 813d 	beq.w	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8004cd0:	2601      	movs	r6, #1
 8004cd2:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004cd4:	682b      	ldr	r3, [r5, #0]
 8004cd6:	0099      	lsls	r1, r3, #2
 8004cd8:	d507      	bpl.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x716>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004cda:	2102      	movs	r1, #2
 8004cdc:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004ce0:	f7ff fc00 	bl	80044e4 <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 8004ce4:	2800      	cmp	r0, #0
 8004ce6:	bf18      	it	ne
 8004ce8:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004cea:	e9d5 3100 	ldrd	r3, r1, [r5]
 8004cee:	039a      	lsls	r2, r3, #14
 8004cf0:	f140 8143 	bpl.w	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    switch (PeriphClkInit->RngClockSelection)
 8004cf4:	f8d5 0080 	ldr.w	r0, [r5, #128]	@ 0x80
 8004cf8:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8004cfc:	f000 813f 	beq.w	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
 8004d00:	f200 812c 	bhi.w	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x988>
 8004d04:	2800      	cmp	r0, #0
 8004d06:	f000 812f 	beq.w	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x994>
 8004d0a:	2401      	movs	r4, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d0c:	02df      	lsls	r7, r3, #11
 8004d0e:	d506      	bpl.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x74a>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d10:	4841      	ldr	r0, [pc, #260]	@ (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004d12:	6f6e      	ldr	r6, [r5, #116]	@ 0x74
 8004d14:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8004d16:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004d1a:	4332      	orrs	r2, r6
 8004d1c:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004d1e:	00de      	lsls	r6, r3, #3
 8004d20:	d507      	bpl.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x75e>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004d22:	483d      	ldr	r0, [pc, #244]	@ (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004d24:	f8d5 60b8 	ldr.w	r6, [r5, #184]	@ 0xb8
 8004d28:	6902      	ldr	r2, [r0, #16]
 8004d2a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004d2e:	4332      	orrs	r2, r6
 8004d30:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d32:	0298      	lsls	r0, r3, #10
 8004d34:	d506      	bpl.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x770>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d36:	4838      	ldr	r0, [pc, #224]	@ (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004d38:	6eee      	ldr	r6, [r5, #108]	@ 0x6c
 8004d3a:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8004d3c:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8004d40:	4332      	orrs	r2, r6
 8004d42:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004d44:	005a      	lsls	r2, r3, #1
 8004d46:	d509      	bpl.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x788>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d48:	4a33      	ldr	r2, [pc, #204]	@ (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004d4a:	6910      	ldr	r0, [r2, #16]
 8004d4c:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 8004d50:	6110      	str	r0, [r2, #16]
 8004d52:	6910      	ldr	r0, [r2, #16]
 8004d54:	f8d5 60bc 	ldr.w	r6, [r5, #188]	@ 0xbc
 8004d58:	4330      	orrs	r0, r6
 8004d5a:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	da06      	bge.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x79a>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004d60:	482d      	ldr	r0, [pc, #180]	@ (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004d62:	6d6e      	ldr	r6, [r5, #84]	@ 0x54
 8004d64:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8004d66:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004d6a:	4332      	orrs	r2, r6
 8004d6c:	64c2      	str	r2, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d6e:	021f      	lsls	r7, r3, #8
 8004d70:	d507      	bpl.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d72:	4a29      	ldr	r2, [pc, #164]	@ (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004d74:	f8d5 008c 	ldr.w	r0, [r5, #140]	@ 0x8c
 8004d78:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004d7a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004d7e:	4303      	orrs	r3, r0
 8004d80:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004d82:	07ce      	lsls	r6, r1, #31
 8004d84:	d506      	bpl.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d86:	2100      	movs	r1, #0
 8004d88:	f105 0008 	add.w	r0, r5, #8
 8004d8c:	f7ff fb32 	bl	80043f4 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8004d90:	4607      	mov	r7, r0
 8004d92:	b900      	cbnz	r0, 8004d96 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    switch (PeriphClkInit->RngClockSelection)
 8004d94:	4627      	mov	r7, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004d96:	686b      	ldr	r3, [r5, #4]
 8004d98:	079c      	lsls	r4, r3, #30
 8004d9a:	d506      	bpl.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x7d6>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d9c:	2101      	movs	r1, #1
 8004d9e:	f105 0008 	add.w	r0, r5, #8
 8004da2:	f7ff fb27 	bl	80043f4 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8004da6:	4606      	mov	r6, r0
 8004da8:	b900      	cbnz	r0, 8004dac <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    switch (PeriphClkInit->RngClockSelection)
 8004daa:	463e      	mov	r6, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004dac:	686b      	ldr	r3, [r5, #4]
 8004dae:	0758      	lsls	r0, r3, #29
 8004db0:	d506      	bpl.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004db2:	2102      	movs	r1, #2
 8004db4:	f105 0008 	add.w	r0, r5, #8
 8004db8:	f7ff fb1c 	bl	80043f4 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8004dbc:	4604      	mov	r4, r0
 8004dbe:	b900      	cbnz	r0, 8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x7ee>
    switch (PeriphClkInit->RngClockSelection)
 8004dc0:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004dc2:	686b      	ldr	r3, [r5, #4]
 8004dc4:	0719      	lsls	r1, r3, #28
 8004dc6:	d506      	bpl.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x802>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004dc8:	2100      	movs	r1, #0
 8004dca:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004dce:	f7ff fb89 	bl	80044e4 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8004dd2:	4606      	mov	r6, r0
 8004dd4:	b900      	cbnz	r0, 8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x804>
    switch (PeriphClkInit->RngClockSelection)
 8004dd6:	4626      	mov	r6, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004dd8:	686b      	ldr	r3, [r5, #4]
 8004dda:	06da      	lsls	r2, r3, #27
 8004ddc:	d506      	bpl.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x818>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004dde:	2101      	movs	r1, #1
 8004de0:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004de4:	f7ff fb7e 	bl	80044e4 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8004de8:	4604      	mov	r4, r0
 8004dea:	b900      	cbnz	r0, 8004dee <HAL_RCCEx_PeriphCLKConfig+0x81a>
    switch (PeriphClkInit->RngClockSelection)
 8004dec:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004dee:	686b      	ldr	r3, [r5, #4]
 8004df0:	069b      	lsls	r3, r3, #26
 8004df2:	f100 80ca 	bmi.w	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  if (status == HAL_OK)
 8004df6:	1e20      	subs	r0, r4, #0
 8004df8:	bf18      	it	ne
 8004dfa:	2001      	movne	r0, #1
}
 8004dfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e00:	2101      	movs	r1, #1
 8004e02:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004e06:	f7ff fb6d 	bl	80044e4 <RCCEx_PLL3_Config>
 8004e0a:	e6ac      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x592>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004e0c:	2601      	movs	r6, #1
 8004e0e:	4634      	mov	r4, r6
 8004e10:	e6b5      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8004e12:	4626      	mov	r6, r4
 8004e14:	e6b3      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8004e16:	bf00      	nop
 8004e18:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004e1c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004e20:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8004e24:	d003      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x85a>
 8004e26:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004e2a:	f47f aeba 	bne.w	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    if (ret == HAL_OK)
 8004e2e:	b9ac      	cbnz	r4, 8004e5c <HAL_RCCEx_PeriphCLKConfig+0x888>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e30:	4a5b      	ldr	r2, [pc, #364]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8004e32:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
 8004e36:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004e38:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 8004e3c:	430b      	orrs	r3, r1
 8004e3e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004e40:	e6b1      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e42:	2100      	movs	r1, #0
 8004e44:	f105 0008 	add.w	r0, r5, #8
 8004e48:	f7ff fad4 	bl	80043f4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e4c:	4604      	mov	r4, r0
        break;
 8004e4e:	e7ee      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x85a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e50:	2102      	movs	r1, #2
 8004e52:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004e56:	f7ff fb45 	bl	80044e4 <RCCEx_PLL3_Config>
 8004e5a:	e7f7      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x878>
 8004e5c:	4626      	mov	r6, r4
 8004e5e:	e6a2      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004e60:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004e64:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 8004e68:	d003      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x89e>
 8004e6a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004e6e:	f47f aeac 	bne.w	8004bca <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    if (ret == HAL_OK)
 8004e72:	b9ac      	cbnz	r4, 8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e74:	4a4a      	ldr	r2, [pc, #296]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8004e76:	f8d5 109c 	ldr.w	r1, [r5, #156]	@ 0x9c
 8004e7a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004e7c:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8004e80:	430b      	orrs	r3, r1
 8004e82:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e84:	e6a3      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x5fa>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e86:	2100      	movs	r1, #0
 8004e88:	f105 0008 	add.w	r0, r5, #8
 8004e8c:	f7ff fab2 	bl	80043f4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e90:	4604      	mov	r4, r0
        break;
 8004e92:	e7ee      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e94:	2102      	movs	r1, #2
 8004e96:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004e9a:	f7ff fb23 	bl	80044e4 <RCCEx_PLL3_Config>
 8004e9e:	e7f7      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8004ea0:	4626      	mov	r6, r4
 8004ea2:	e694      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x5fa>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004ea4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004ea8:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8004eac:	d003      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004eae:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004eb2:	f47f ae9e 	bne.w	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    if (ret == HAL_OK)
 8004eb6:	b9ac      	cbnz	r4, 8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x910>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004eb8:	4a39      	ldr	r2, [pc, #228]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8004eba:	f8d5 10a0 	ldr.w	r1, [r5, #160]	@ 0xa0
 8004ebe:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004ec0:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8004ec4:	430b      	orrs	r3, r1
 8004ec6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ec8:	e695      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x622>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004eca:	2100      	movs	r1, #0
 8004ecc:	f105 0008 	add.w	r0, r5, #8
 8004ed0:	f7ff fa90 	bl	80043f4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ed4:	4604      	mov	r4, r0
        break;
 8004ed6:	e7ee      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ed8:	2102      	movs	r1, #2
 8004eda:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004ede:	f7ff fb01 	bl	80044e4 <RCCEx_PLL3_Config>
 8004ee2:	e7f7      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x900>
 8004ee4:	4626      	mov	r6, r4
 8004ee6:	e686      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x622>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ee8:	2102      	movs	r1, #2
 8004eea:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004eee:	f7ff faf9 	bl	80044e4 <RCCEx_PLL3_Config>
 8004ef2:	e6c3      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x6a8>
    switch (PeriphClkInit->AdcClockSelection)
 8004ef4:	2601      	movs	r6, #1
 8004ef6:	4634      	mov	r4, r6
 8004ef8:	e6cc      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 8004efa:	4626      	mov	r6, r4
 8004efc:	e6ca      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004efe:	4a28      	ldr	r2, [pc, #160]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8004f00:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004f02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f06:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8004f08:	b97c      	cbnz	r4, 8004f2a <HAL_RCCEx_PeriphCLKConfig+0x956>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f0a:	4a25      	ldr	r2, [pc, #148]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8004f0c:	f8d5 1088 	ldr.w	r1, [r5, #136]	@ 0x88
 8004f10:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004f12:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004f16:	430b      	orrs	r3, r1
 8004f18:	6553      	str	r3, [r2, #84]	@ 0x54
 8004f1a:	e6ce      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x6e6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f1c:	2101      	movs	r1, #1
 8004f1e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004f22:	f7ff fadf 	bl	80044e4 <RCCEx_PLL3_Config>
 8004f26:	4604      	mov	r4, r0
        break;
 8004f28:	e7ee      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8004f2a:	4626      	mov	r6, r4
 8004f2c:	e6c5      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x6e6>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f2e:	4a1c      	ldr	r2, [pc, #112]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8004f30:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004f32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f36:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8004f38:	b974      	cbnz	r4, 8004f58 <HAL_RCCEx_PeriphCLKConfig+0x984>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004f3a:	4a19      	ldr	r2, [pc, #100]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8004f3c:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 8004f3e:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8004f40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f44:	430b      	orrs	r3, r1
 8004f46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f48:	e6c4      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x700>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f4a:	2102      	movs	r1, #2
 8004f4c:	f105 0008 	add.w	r0, r5, #8
 8004f50:	f7ff fa50 	bl	80043f4 <RCCEx_PLL2_Config>
 8004f54:	4604      	mov	r4, r0
        break;
 8004f56:	e7ef      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8004f58:	4626      	mov	r6, r4
 8004f5a:	e6bb      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    switch (PeriphClkInit->RngClockSelection)
 8004f5c:	f420 7280 	bic.w	r2, r0, #256	@ 0x100
 8004f60:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8004f64:	f47f aed1 	bne.w	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x736>
    if (ret == HAL_OK)
 8004f68:	2c00      	cmp	r4, #0
 8004f6a:	f47f aecf 	bne.w	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x738>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f6e:	4c0c      	ldr	r4, [pc, #48]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8004f70:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004f72:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004f76:	4302      	orrs	r2, r0
 8004f78:	6562      	str	r2, [r4, #84]	@ 0x54
      status = HAL_ERROR;
 8004f7a:	4634      	mov	r4, r6
 8004f7c:	e6c6      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x738>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f7e:	4f08      	ldr	r7, [pc, #32]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8004f80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f82:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004f86:	62fa      	str	r2, [r7, #44]	@ 0x2c
        break;
 8004f88:	e7ee      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x994>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f8a:	2102      	movs	r1, #2
 8004f8c:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004f90:	f7ff faa8 	bl	80044e4 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8004f94:	2800      	cmp	r0, #0
 8004f96:	f43f af2e 	beq.w	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x822>
  return HAL_ERROR;
 8004f9a:	2001      	movs	r0, #1
 8004f9c:	e72e      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x828>
 8004f9e:	bf00      	nop
 8004fa0:	58024400 	.word	0x58024400

08004fa4 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8004fa4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004fa6:	f7ff f9df 	bl	8004368 <HAL_RCC_GetHCLKFreq>
 8004faa:	4b05      	ldr	r3, [pc, #20]	@ (8004fc0 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8004fac:	4a05      	ldr	r2, [pc, #20]	@ (8004fc4 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8004fae:	6a1b      	ldr	r3, [r3, #32]
 8004fb0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004fb4:	5cd3      	ldrb	r3, [r2, r3]
 8004fb6:	f003 031f 	and.w	r3, r3, #31
}
 8004fba:	40d8      	lsrs	r0, r3
 8004fbc:	bd08      	pop	{r3, pc}
 8004fbe:	bf00      	nop
 8004fc0:	58024400 	.word	0x58024400
 8004fc4:	0800ec32 	.word	0x0800ec32

08004fc8 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004fc8:	494f      	ldr	r1, [pc, #316]	@ (8005108 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 8004fca:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004fcc:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004fce:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004fd0:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (pll2m != 0U)
 8004fd2:	f416 3f7c 	tst.w	r6, #258048	@ 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004fd6:	f3c6 3305 	ubfx	r3, r6, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004fda:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
  if (pll2m != 0U)
 8004fdc:	f000 8090 	beq.w	8005100 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004fe0:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004fe4:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004fe8:	f3c5 1200 	ubfx	r2, r5, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004fec:	f004 0403 	and.w	r4, r4, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ff0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004ff4:	4353      	muls	r3, r2
    switch (pllsource)
 8004ff6:	2c01      	cmp	r4, #1
 8004ff8:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ffc:	ee06 3a90 	vmov	s13, r3
 8005000:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8005004:	d06e      	beq.n	80050e4 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
 8005006:	2c02      	cmp	r4, #2
 8005008:	d05e      	beq.n	80050c8 <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 800500a:	2c00      	cmp	r4, #0
 800500c:	d16a      	bne.n	80050e4 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800500e:	680b      	ldr	r3, [r1, #0]
 8005010:	069b      	lsls	r3, r3, #26
 8005012:	d547      	bpl.n	80050a4 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005014:	680a      	ldr	r2, [r1, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005016:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005018:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 800501c:	4a3b      	ldr	r2, [pc, #236]	@ (800510c <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800501e:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005022:	40ca      	lsrs	r2, r1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005024:	ee07 2a90 	vmov	s15, r2
 8005028:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800502c:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8005030:	ee07 3a10 	vmov	s14, r3
 8005034:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005038:	ee37 7a26 	vadd.f32	s14, s14, s13
 800503c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005040:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005044:	4a30      	ldr	r2, [pc, #192]	@ (8005108 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 8005046:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8005048:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800504c:	ee07 3a10 	vmov	s14, r3
 8005050:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005054:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005058:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800505c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005060:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005064:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8005066:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800506a:	ee07 3a10 	vmov	s14, r3
 800506e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005072:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005076:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800507a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800507e:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005082:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8005084:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005088:	ee06 3a90 	vmov	s13, r3
 800508c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005090:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005094:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005098:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800509c:	ee17 3a90 	vmov	r3, s15
 80050a0:	6083      	str	r3, [r0, #8]
}
 80050a2:	bd70      	pop	{r4, r5, r6, pc}
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80050a4:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 80050a6:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 8005110 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 80050aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ae:	ee07 3a90 	vmov	s15, r3
 80050b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ba:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80050be:	eec5 6a87 	vdiv.f32	s13, s11, s14
 80050c2:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 80050c6:	e7bd      	b.n	8005044 <HAL_RCCEx_GetPLL2ClockFreq+0x7c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80050c8:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 80050ca:	eddf 5a12 	vldr	s11, [pc, #72]	@ 8005114 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 80050ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050d2:	ee07 3a90 	vmov	s15, r3
 80050d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050de:	ee77 7a86 	vadd.f32	s15, s15, s12
 80050e2:	e7ec      	b.n	80050be <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80050e4:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 80050e6:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 8005118 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 80050ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ee:	ee07 3a90 	vmov	s15, r3
 80050f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050fa:	ee77 7a86 	vadd.f32	s15, s15, s12
 80050fe:	e7de      	b.n	80050be <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005100:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005104:	e7cc      	b.n	80050a0 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 8005106:	bf00      	nop
 8005108:	58024400 	.word	0x58024400
 800510c:	03d09000 	.word	0x03d09000
 8005110:	4c742400 	.word	0x4c742400
 8005114:	4af42400 	.word	0x4af42400
 8005118:	4a742400 	.word	0x4a742400

0800511c <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800511c:	494f      	ldr	r1, [pc, #316]	@ (800525c <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 800511e:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005120:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005122:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005124:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (pll3m != 0U)
 8005126:	f016 7f7c 	tst.w	r6, #66060288	@ 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800512a:	f3c6 5305 	ubfx	r3, r6, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800512e:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
  if (pll3m != 0U)
 8005130:	f000 8090 	beq.w	8005254 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005134:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005138:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800513c:	f3c5 2200 	ubfx	r2, r5, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005140:	f004 0403 	and.w	r4, r4, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005144:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005148:	4353      	muls	r3, r2
    switch (pllsource)
 800514a:	2c01      	cmp	r4, #1
 800514c:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005150:	ee06 3a90 	vmov	s13, r3
 8005154:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8005158:	d06e      	beq.n	8005238 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
 800515a:	2c02      	cmp	r4, #2
 800515c:	d05e      	beq.n	800521c <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 800515e:	2c00      	cmp	r4, #0
 8005160:	d16a      	bne.n	8005238 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005162:	680b      	ldr	r3, [r1, #0]
 8005164:	069b      	lsls	r3, r3, #26
 8005166:	d547      	bpl.n	80051f8 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005168:	680a      	ldr	r2, [r1, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800516a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800516c:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 8005170:	4a3b      	ldr	r2, [pc, #236]	@ (8005260 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005172:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005176:	40ca      	lsrs	r2, r1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005178:	ee07 2a90 	vmov	s15, r2
 800517c:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8005180:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8005184:	ee07 3a10 	vmov	s14, r3
 8005188:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800518c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005190:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005194:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005198:	4a30      	ldr	r2, [pc, #192]	@ (800525c <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 800519a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800519c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80051a0:	ee07 3a10 	vmov	s14, r3
 80051a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80051a8:	ee37 7a06 	vadd.f32	s14, s14, s12
 80051ac:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80051b0:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80051b4:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80051b8:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80051ba:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80051be:	ee07 3a10 	vmov	s14, r3
 80051c2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80051c6:	ee37 7a06 	vadd.f32	s14, s14, s12
 80051ca:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80051ce:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80051d2:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80051d6:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80051d8:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80051dc:	ee06 3a90 	vmov	s13, r3
 80051e0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80051e4:	ee76 6a86 	vadd.f32	s13, s13, s12
 80051e8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80051ec:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80051f0:	ee17 3a90 	vmov	r3, s15
 80051f4:	6083      	str	r3, [r0, #8]
}
 80051f6:	bd70      	pop	{r4, r5, r6, pc}
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80051f8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80051fa:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 8005264 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 80051fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005202:	ee07 3a90 	vmov	s15, r3
 8005206:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800520a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800520e:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005212:	eec5 6a87 	vdiv.f32	s13, s11, s14
 8005216:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 800521a:	e7bd      	b.n	8005198 <HAL_RCCEx_GetPLL3ClockFreq+0x7c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800521c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800521e:	eddf 5a12 	vldr	s11, [pc, #72]	@ 8005268 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8005222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005226:	ee07 3a90 	vmov	s15, r3
 800522a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800522e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005232:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005236:	e7ec      	b.n	8005212 <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005238:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800523a:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 800526c <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 800523e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005242:	ee07 3a90 	vmov	s15, r3
 8005246:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800524a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800524e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005252:	e7de      	b.n	8005212 <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005254:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005258:	e7cc      	b.n	80051f4 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 800525a:	bf00      	nop
 800525c:	58024400 	.word	0x58024400
 8005260:	03d09000 	.word	0x03d09000
 8005264:	4c742400 	.word	0x4c742400
 8005268:	4af42400 	.word	0x4af42400
 800526c:	4a742400 	.word	0x4a742400

08005270 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005270:	b510      	push	{r4, lr}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005272:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005274:	e852 3f00 	ldrex	r3, [r2]
 8005278:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527c:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8005280:	6802      	ldr	r2, [r0, #0]
 8005282:	2900      	cmp	r1, #0
 8005284:	d1f5      	bne.n	8005272 <UART_EndRxTransfer+0x2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005286:	4c0f      	ldr	r4, [pc, #60]	@ (80052c4 <UART_EndRxTransfer+0x54>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005288:	f102 0308 	add.w	r3, r2, #8
 800528c:	e853 3f00 	ldrex	r3, [r3]
 8005290:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005292:	f102 0c08 	add.w	ip, r2, #8
 8005296:	e84c 3100 	strex	r1, r3, [ip]
 800529a:	2900      	cmp	r1, #0
 800529c:	d1f4      	bne.n	8005288 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800529e:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d107      	bne.n	80052b4 <UART_EndRxTransfer+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a4:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052a8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ac:	e842 3100 	strex	r1, r3, [r2]
 80052b0:	2900      	cmp	r1, #0
 80052b2:	d1f7      	bne.n	80052a4 <UART_EndRxTransfer+0x34>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052b4:	2320      	movs	r3, #32
 80052b6:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ba:	2300      	movs	r3, #0
 80052bc:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052be:	6743      	str	r3, [r0, #116]	@ 0x74
}
 80052c0:	bd10      	pop	{r4, pc}
 80052c2:	bf00      	nop
 80052c4:	effffffe 	.word	0xeffffffe

080052c8 <UART_SetConfig>:
{
 80052c8:	b530      	push	{r4, r5, lr}
 80052ca:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 80052cc:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052ce:	69c0      	ldr	r0, [r0, #28]
{
 80052d0:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052d2:	6921      	ldr	r1, [r4, #16]
 80052d4:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052d6:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052d8:	430a      	orrs	r2, r1
 80052da:	6961      	ldr	r1, [r4, #20]
 80052dc:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052de:	499c      	ldr	r1, [pc, #624]	@ (8005550 <UART_SetConfig+0x288>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052e0:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052e2:	4029      	ands	r1, r5
 80052e4:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052e6:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052e8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052ea:	685a      	ldr	r2, [r3, #4]
 80052ec:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80052f0:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052f2:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052f4:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80052f6:	4a97      	ldr	r2, [pc, #604]	@ (8005554 <UART_SetConfig+0x28c>)
 80052f8:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 80052fa:	bf1c      	itt	ne
 80052fc:	6a22      	ldrne	r2, [r4, #32]
 80052fe:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005300:	689a      	ldr	r2, [r3, #8]
 8005302:	f022 426e 	bic.w	r2, r2, #3992977408	@ 0xee000000
 8005306:	f422 6230 	bic.w	r2, r2, #2816	@ 0xb00
 800530a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800530c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800530e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005310:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005312:	f022 020f 	bic.w	r2, r2, #15
 8005316:	430a      	orrs	r2, r1
 8005318:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800531a:	4a8f      	ldr	r2, [pc, #572]	@ (8005558 <UART_SetConfig+0x290>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d128      	bne.n	8005372 <UART_SetConfig+0xaa>
 8005320:	4b8e      	ldr	r3, [pc, #568]	@ (800555c <UART_SetConfig+0x294>)
 8005322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005324:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005328:	2b18      	cmp	r3, #24
 800532a:	f000 812f 	beq.w	800558c <UART_SetConfig+0x2c4>
 800532e:	d814      	bhi.n	800535a <UART_SetConfig+0x92>
 8005330:	2b08      	cmp	r3, #8
 8005332:	f000 8154 	beq.w	80055de <UART_SetConfig+0x316>
 8005336:	2b10      	cmp	r3, #16
 8005338:	f000 8102 	beq.w	8005540 <UART_SetConfig+0x278>
 800533c:	2b00      	cmp	r3, #0
 800533e:	f000 80f9 	beq.w	8005534 <UART_SetConfig+0x26c>
 8005342:	2380      	movs	r3, #128	@ 0x80
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005344:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005348:	f040 80b4 	bne.w	80054b4 <UART_SetConfig+0x1ec>
    switch (clocksource)
 800534c:	2b08      	cmp	r3, #8
 800534e:	d846      	bhi.n	80053de <UART_SetConfig+0x116>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005350:	4668      	mov	r0, sp
 8005352:	f7ff fe39 	bl	8004fc8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005356:	9801      	ldr	r0, [sp, #4]
        break;
 8005358:	e0e9      	b.n	800552e <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800535a:	2b20      	cmp	r3, #32
 800535c:	f000 80dd 	beq.w	800551a <UART_SetConfig+0x252>
 8005360:	2b28      	cmp	r3, #40	@ 0x28
 8005362:	d1ee      	bne.n	8005342 <UART_SetConfig+0x7a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005364:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005368:	f000 811d 	beq.w	80055a6 <UART_SetConfig+0x2de>
        pclk = (uint32_t) LSE_VALUE;
 800536c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8005370:	e0be      	b.n	80054f0 <UART_SetConfig+0x228>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005372:	4a7b      	ldr	r2, [pc, #492]	@ (8005560 <UART_SetConfig+0x298>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d115      	bne.n	80053a4 <UART_SetConfig+0xdc>
 8005378:	4b78      	ldr	r3, [pc, #480]	@ (800555c <UART_SetConfig+0x294>)
 800537a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800537c:	f003 0307 	and.w	r3, r3, #7
 8005380:	2b05      	cmp	r3, #5
 8005382:	d82c      	bhi.n	80053de <UART_SetConfig+0x116>
 8005384:	a201      	add	r2, pc, #4	@ (adr r2, 800538c <UART_SetConfig+0xc4>)
 8005386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538a:	bf00      	nop
 800538c:	08005525 	.word	0x08005525
 8005390:	080054b1 	.word	0x080054b1
 8005394:	08005541 	.word	0x08005541
 8005398:	0800558d 	.word	0x0800558d
 800539c:	0800551b 	.word	0x0800551b
 80053a0:	08005365 	.word	0x08005365
 80053a4:	4a6f      	ldr	r2, [pc, #444]	@ (8005564 <UART_SetConfig+0x29c>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d0e6      	beq.n	8005378 <UART_SetConfig+0xb0>
 80053aa:	4a6f      	ldr	r2, [pc, #444]	@ (8005568 <UART_SetConfig+0x2a0>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d0e3      	beq.n	8005378 <UART_SetConfig+0xb0>
 80053b0:	4a6e      	ldr	r2, [pc, #440]	@ (800556c <UART_SetConfig+0x2a4>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d0e0      	beq.n	8005378 <UART_SetConfig+0xb0>
 80053b6:	4a6e      	ldr	r2, [pc, #440]	@ (8005570 <UART_SetConfig+0x2a8>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d118      	bne.n	80053ee <UART_SetConfig+0x126>
 80053bc:	4b67      	ldr	r3, [pc, #412]	@ (800555c <UART_SetConfig+0x294>)
 80053be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80053c4:	2b18      	cmp	r3, #24
 80053c6:	f000 80e1 	beq.w	800558c <UART_SetConfig+0x2c4>
 80053ca:	d80a      	bhi.n	80053e2 <UART_SetConfig+0x11a>
 80053cc:	2b08      	cmp	r3, #8
 80053ce:	f000 8106 	beq.w	80055de <UART_SetConfig+0x316>
 80053d2:	2b10      	cmp	r3, #16
 80053d4:	f000 80b4 	beq.w	8005540 <UART_SetConfig+0x278>
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f000 80ab 	beq.w	8005534 <UART_SetConfig+0x26c>
        pclk = (uint32_t) CSI_VALUE;
 80053de:	2001      	movs	r0, #1
 80053e0:	e049      	b.n	8005476 <UART_SetConfig+0x1ae>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053e2:	2b20      	cmp	r3, #32
 80053e4:	f000 8099 	beq.w	800551a <UART_SetConfig+0x252>
 80053e8:	2b28      	cmp	r3, #40	@ 0x28
 80053ea:	d0bb      	beq.n	8005364 <UART_SetConfig+0x9c>
 80053ec:	e7f7      	b.n	80053de <UART_SetConfig+0x116>
 80053ee:	4a61      	ldr	r2, [pc, #388]	@ (8005574 <UART_SetConfig+0x2ac>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d0c1      	beq.n	8005378 <UART_SetConfig+0xb0>
 80053f4:	4a60      	ldr	r2, [pc, #384]	@ (8005578 <UART_SetConfig+0x2b0>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d0be      	beq.n	8005378 <UART_SetConfig+0xb0>
 80053fa:	4a56      	ldr	r2, [pc, #344]	@ (8005554 <UART_SetConfig+0x28c>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d1ee      	bne.n	80053de <UART_SetConfig+0x116>
 8005400:	f502 320e 	add.w	r2, r2, #145408	@ 0x23800
 8005404:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8005406:	f003 0307 	and.w	r3, r3, #7
 800540a:	2b05      	cmp	r3, #5
 800540c:	d8e7      	bhi.n	80053de <UART_SetConfig+0x116>
 800540e:	e8df f003 	tbb	[pc, r3]
 8005412:	2b49      	.short	0x2b49
 8005414:	4c033f3a 	.word	0x4c033f3a
        pclk = (uint32_t) CSI_VALUE;
 8005418:	4858      	ldr	r0, [pc, #352]	@ (800557c <UART_SetConfig+0x2b4>)
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800541a:	4b59      	ldr	r3, [pc, #356]	@ (8005580 <UART_SetConfig+0x2b8>)
 800541c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800541e:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005420:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005424:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005428:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800542c:	4299      	cmp	r1, r3
 800542e:	d8d6      	bhi.n	80053de <UART_SetConfig+0x116>
 8005430:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8005434:	d8d3      	bhi.n	80053de <UART_SetConfig+0x116>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005436:	2300      	movs	r3, #0
 8005438:	4619      	mov	r1, r3
 800543a:	f7fa ffa9 	bl	8000390 <__aeabi_uldivmod>
 800543e:	462a      	mov	r2, r5
 8005440:	0209      	lsls	r1, r1, #8
 8005442:	086b      	lsrs	r3, r5, #1
 8005444:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8005448:	0200      	lsls	r0, r0, #8
 800544a:	18c0      	adds	r0, r0, r3
 800544c:	f04f 0300 	mov.w	r3, #0
 8005450:	f141 0100 	adc.w	r1, r1, #0
 8005454:	f7fa ff9c 	bl	8000390 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005458:	4b4a      	ldr	r3, [pc, #296]	@ (8005584 <UART_SetConfig+0x2bc>)
 800545a:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 800545e:	429a      	cmp	r2, r3
 8005460:	d8bd      	bhi.n	80053de <UART_SetConfig+0x116>
          huart->Instance->BRR = usartdiv;
 8005462:	6823      	ldr	r3, [r4, #0]
 8005464:	60d8      	str	r0, [r3, #12]
 8005466:	e005      	b.n	8005474 <UART_SetConfig+0x1ac>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005468:	4668      	mov	r0, sp
 800546a:	f7ff fdad 	bl	8004fc8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800546e:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 8005470:	2800      	cmp	r0, #0
 8005472:	d1d2      	bne.n	800541a <UART_SetConfig+0x152>
        pclk = (uint32_t) CSI_VALUE;
 8005474:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 8005476:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 800547a:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 800547c:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800547e:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
}
 8005482:	b007      	add	sp, #28
 8005484:	bd30      	pop	{r4, r5, pc}
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005486:	a803      	add	r0, sp, #12
 8005488:	f7ff fe48 	bl	800511c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800548c:	9804      	ldr	r0, [sp, #16]
        break;
 800548e:	e7ef      	b.n	8005470 <UART_SetConfig+0x1a8>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005490:	6813      	ldr	r3, [r2, #0]
 8005492:	483d      	ldr	r0, [pc, #244]	@ (8005588 <UART_SetConfig+0x2c0>)
 8005494:	f013 0f20 	tst.w	r3, #32
 8005498:	d0bf      	beq.n	800541a <UART_SetConfig+0x152>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800549a:	6813      	ldr	r3, [r2, #0]
 800549c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80054a0:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 80054a2:	e7ba      	b.n	800541a <UART_SetConfig+0x152>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80054a4:	f7ff fd7e 	bl	8004fa4 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 80054a8:	e7e2      	b.n	8005470 <UART_SetConfig+0x1a8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054aa:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80054ae:	e7b4      	b.n	800541a <UART_SetConfig+0x152>
 80054b0:	2304      	movs	r3, #4
 80054b2:	e747      	b.n	8005344 <UART_SetConfig+0x7c>
    switch (clocksource)
 80054b4:	2b08      	cmp	r3, #8
 80054b6:	d892      	bhi.n	80053de <UART_SetConfig+0x116>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054b8:	4668      	mov	r0, sp
 80054ba:	f7ff fd85 	bl	8004fc8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80054be:	9801      	ldr	r0, [sp, #4]
        break;
 80054c0:	e001      	b.n	80054c6 <UART_SetConfig+0x1fe>
        pclk = HAL_RCC_GetPCLK1Freq();
 80054c2:	f7fe ff73 	bl	80043ac <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80054c6:	2800      	cmp	r0, #0
 80054c8:	d0d4      	beq.n	8005474 <UART_SetConfig+0x1ac>
 80054ca:	e011      	b.n	80054f0 <UART_SetConfig+0x228>
        pclk = HAL_RCC_GetPCLK2Freq();
 80054cc:	f7fe ff80 	bl	80043d0 <HAL_RCC_GetPCLK2Freq>
        break;
 80054d0:	e7f9      	b.n	80054c6 <UART_SetConfig+0x1fe>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054d2:	a803      	add	r0, sp, #12
 80054d4:	f7ff fe22 	bl	800511c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80054d8:	9804      	ldr	r0, [sp, #16]
        break;
 80054da:	e7f4      	b.n	80054c6 <UART_SetConfig+0x1fe>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054dc:	4b1f      	ldr	r3, [pc, #124]	@ (800555c <UART_SetConfig+0x294>)
 80054de:	482a      	ldr	r0, [pc, #168]	@ (8005588 <UART_SetConfig+0x2c0>)
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	f012 0f20 	tst.w	r2, #32
 80054e6:	d003      	beq.n	80054f0 <UART_SetConfig+0x228>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80054ee:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054f0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80054f2:	4b23      	ldr	r3, [pc, #140]	@ (8005580 <UART_SetConfig+0x2b8>)
 80054f4:	6862      	ldr	r2, [r4, #4]
 80054f6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80054fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80054fe:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8005502:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005506:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 800550a:	f1a3 0110 	sub.w	r1, r3, #16
 800550e:	4291      	cmp	r1, r2
 8005510:	f63f af65 	bhi.w	80053de <UART_SetConfig+0x116>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005514:	6822      	ldr	r2, [r4, #0]
 8005516:	60d3      	str	r3, [r2, #12]
 8005518:	e7ac      	b.n	8005474 <UART_SetConfig+0x1ac>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800551a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800551e:	4817      	ldr	r0, [pc, #92]	@ (800557c <UART_SetConfig+0x2b4>)
 8005520:	d1e6      	bne.n	80054f0 <UART_SetConfig+0x228>
 8005522:	e040      	b.n	80055a6 <UART_SetConfig+0x2de>
 8005524:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005528:	d1cb      	bne.n	80054c2 <UART_SetConfig+0x1fa>
        pclk = HAL_RCC_GetPCLK1Freq();
 800552a:	f7fe ff3f 	bl	80043ac <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800552e:	2800      	cmp	r0, #0
 8005530:	d0a0      	beq.n	8005474 <UART_SetConfig+0x1ac>
 8005532:	e038      	b.n	80055a6 <UART_SetConfig+0x2de>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005534:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005538:	d1c8      	bne.n	80054cc <UART_SetConfig+0x204>
        pclk = HAL_RCC_GetPCLK2Freq();
 800553a:	f7fe ff49 	bl	80043d0 <HAL_RCC_GetPCLK2Freq>
        break;
 800553e:	e7f6      	b.n	800552e <UART_SetConfig+0x266>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005540:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005544:	d1c5      	bne.n	80054d2 <UART_SetConfig+0x20a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005546:	a803      	add	r0, sp, #12
 8005548:	f7ff fde8 	bl	800511c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800554c:	9804      	ldr	r0, [sp, #16]
        break;
 800554e:	e7ee      	b.n	800552e <UART_SetConfig+0x266>
 8005550:	cfff69f3 	.word	0xcfff69f3
 8005554:	58000c00 	.word	0x58000c00
 8005558:	40011000 	.word	0x40011000
 800555c:	58024400 	.word	0x58024400
 8005560:	40004400 	.word	0x40004400
 8005564:	40004800 	.word	0x40004800
 8005568:	40004c00 	.word	0x40004c00
 800556c:	40005000 	.word	0x40005000
 8005570:	40011400 	.word	0x40011400
 8005574:	40007800 	.word	0x40007800
 8005578:	40007c00 	.word	0x40007c00
 800557c:	003d0900 	.word	0x003d0900
 8005580:	0800ec4a 	.word	0x0800ec4a
 8005584:	000ffcff 	.word	0x000ffcff
 8005588:	03d09000 	.word	0x03d09000
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800558c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005590:	d1a4      	bne.n	80054dc <UART_SetConfig+0x214>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005592:	4b15      	ldr	r3, [pc, #84]	@ (80055e8 <UART_SetConfig+0x320>)
 8005594:	4815      	ldr	r0, [pc, #84]	@ (80055ec <UART_SetConfig+0x324>)
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	f012 0f20 	tst.w	r2, #32
 800559c:	d003      	beq.n	80055a6 <UART_SetConfig+0x2de>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80055a4:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055a6:	4b12      	ldr	r3, [pc, #72]	@ (80055f0 <UART_SetConfig+0x328>)
 80055a8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80055aa:	6861      	ldr	r1, [r4, #4]
 80055ac:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80055b0:	084b      	lsrs	r3, r1, #1
 80055b2:	fbb0 f2f2 	udiv	r2, r0, r2
 80055b6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055ba:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055be:	fbb3 f3f1 	udiv	r3, r3, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055c2:	f1a3 0110 	sub.w	r1, r3, #16
 80055c6:	4291      	cmp	r1, r2
 80055c8:	f63f af09 	bhi.w	80053de <UART_SetConfig+0x116>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055cc:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055d0:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 80055d4:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055d6:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 80055d8:	4313      	orrs	r3, r2
 80055da:	60cb      	str	r3, [r1, #12]
 80055dc:	e74a      	b.n	8005474 <UART_SetConfig+0x1ac>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055de:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80055e2:	f47f af69 	bne.w	80054b8 <UART_SetConfig+0x1f0>
 80055e6:	e6b3      	b.n	8005350 <UART_SetConfig+0x88>
 80055e8:	58024400 	.word	0x58024400
 80055ec:	03d09000 	.word	0x03d09000
 80055f0:	0800ec4a 	.word	0x0800ec4a

080055f4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055f4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80055f6:	071a      	lsls	r2, r3, #28
{
 80055f8:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055fa:	d506      	bpl.n	800560a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055fc:	6801      	ldr	r1, [r0, #0]
 80055fe:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8005600:	684a      	ldr	r2, [r1, #4]
 8005602:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005606:	4322      	orrs	r2, r4
 8005608:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800560a:	07dc      	lsls	r4, r3, #31
 800560c:	d506      	bpl.n	800561c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800560e:	6801      	ldr	r1, [r0, #0]
 8005610:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8005612:	684a      	ldr	r2, [r1, #4]
 8005614:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005618:	4322      	orrs	r2, r4
 800561a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800561c:	0799      	lsls	r1, r3, #30
 800561e:	d506      	bpl.n	800562e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005620:	6801      	ldr	r1, [r0, #0]
 8005622:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8005624:	684a      	ldr	r2, [r1, #4]
 8005626:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800562a:	4322      	orrs	r2, r4
 800562c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800562e:	075a      	lsls	r2, r3, #29
 8005630:	d506      	bpl.n	8005640 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005632:	6801      	ldr	r1, [r0, #0]
 8005634:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8005636:	684a      	ldr	r2, [r1, #4]
 8005638:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800563c:	4322      	orrs	r2, r4
 800563e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005640:	06dc      	lsls	r4, r3, #27
 8005642:	d506      	bpl.n	8005652 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005644:	6801      	ldr	r1, [r0, #0]
 8005646:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8005648:	688a      	ldr	r2, [r1, #8]
 800564a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800564e:	4322      	orrs	r2, r4
 8005650:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005652:	0699      	lsls	r1, r3, #26
 8005654:	d506      	bpl.n	8005664 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005656:	6801      	ldr	r1, [r0, #0]
 8005658:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 800565a:	688a      	ldr	r2, [r1, #8]
 800565c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005660:	4322      	orrs	r2, r4
 8005662:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005664:	065a      	lsls	r2, r3, #25
 8005666:	d510      	bpl.n	800568a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005668:	6801      	ldr	r1, [r0, #0]
 800566a:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800566c:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800566e:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005672:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8005676:	ea42 0204 	orr.w	r2, r2, r4
 800567a:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800567c:	d105      	bne.n	800568a <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800567e:	684a      	ldr	r2, [r1, #4]
 8005680:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8005682:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8005686:	4322      	orrs	r2, r4
 8005688:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800568a:	061b      	lsls	r3, r3, #24
 800568c:	d506      	bpl.n	800569c <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800568e:	6802      	ldr	r2, [r0, #0]
 8005690:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8005692:	6853      	ldr	r3, [r2, #4]
 8005694:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8005698:	430b      	orrs	r3, r1
 800569a:	6053      	str	r3, [r2, #4]
}
 800569c:	bd10      	pop	{r4, pc}

0800569e <UART_WaitOnFlagUntilTimeout>:
{
 800569e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056a2:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80056a6:	4604      	mov	r4, r0
 80056a8:	460d      	mov	r5, r1
 80056aa:	4617      	mov	r7, r2
 80056ac:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056ae:	6822      	ldr	r2, [r4, #0]
 80056b0:	69d3      	ldr	r3, [r2, #28]
 80056b2:	ea35 0303 	bics.w	r3, r5, r3
 80056b6:	bf0c      	ite	eq
 80056b8:	2301      	moveq	r3, #1
 80056ba:	2300      	movne	r3, #0
 80056bc:	42bb      	cmp	r3, r7
 80056be:	d001      	beq.n	80056c4 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80056c0:	2000      	movs	r0, #0
 80056c2:	e022      	b.n	800570a <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 80056c4:	f1b9 3fff 	cmp.w	r9, #4294967295
 80056c8:	d0f2      	beq.n	80056b0 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ca:	f7fb ff11 	bl	80014f0 <HAL_GetTick>
 80056ce:	eba0 0008 	sub.w	r0, r0, r8
 80056d2:	4548      	cmp	r0, r9
 80056d4:	d829      	bhi.n	800572a <UART_WaitOnFlagUntilTimeout+0x8c>
 80056d6:	f1b9 0f00 	cmp.w	r9, #0
 80056da:	d026      	beq.n	800572a <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80056dc:	6821      	ldr	r1, [r4, #0]
 80056de:	680b      	ldr	r3, [r1, #0]
 80056e0:	075a      	lsls	r2, r3, #29
 80056e2:	d5e4      	bpl.n	80056ae <UART_WaitOnFlagUntilTimeout+0x10>
 80056e4:	2d80      	cmp	r5, #128	@ 0x80
 80056e6:	d0e2      	beq.n	80056ae <UART_WaitOnFlagUntilTimeout+0x10>
 80056e8:	2d40      	cmp	r5, #64	@ 0x40
 80056ea:	d0e0      	beq.n	80056ae <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80056ec:	69ce      	ldr	r6, [r1, #28]
 80056ee:	f016 0608 	ands.w	r6, r6, #8
 80056f2:	d00c      	beq.n	800570e <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056f4:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
 80056f6:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056f8:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
 80056fa:	f7ff fdb9 	bl	8005270 <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 80056fe:	2300      	movs	r3, #0
          return HAL_ERROR;
 8005700:	2001      	movs	r0, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005702:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 8005706:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 800570a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800570e:	69cb      	ldr	r3, [r1, #28]
 8005710:	051b      	lsls	r3, r3, #20
 8005712:	d5cc      	bpl.n	80056ae <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005714:	f44f 6300 	mov.w	r3, #2048	@ 0x800
          UART_EndRxTransfer(huart);
 8005718:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800571a:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 800571c:	f7ff fda8 	bl	8005270 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005720:	2320      	movs	r3, #32
          __HAL_UNLOCK(huart);
 8005722:	f884 6084 	strb.w	r6, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005726:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        return HAL_TIMEOUT;
 800572a:	2003      	movs	r0, #3
 800572c:	e7ed      	b.n	800570a <UART_WaitOnFlagUntilTimeout+0x6c>

0800572e <HAL_UART_Transmit>:
{
 800572e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005732:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8005734:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 8005738:	4604      	mov	r4, r0
 800573a:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 800573c:	2b20      	cmp	r3, #32
{
 800573e:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8005740:	d146      	bne.n	80057d0 <HAL_UART_Transmit+0xa2>
    if ((pData == NULL) || (Size == 0U))
 8005742:	2900      	cmp	r1, #0
 8005744:	d046      	beq.n	80057d4 <HAL_UART_Transmit+0xa6>
 8005746:	2a00      	cmp	r2, #0
 8005748:	d044      	beq.n	80057d4 <HAL_UART_Transmit+0xa6>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800574a:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800574c:	2500      	movs	r5, #0
 800574e:	f8c0 5090 	str.w	r5, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005752:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    tickstart = HAL_GetTick();
 8005756:	f7fb fecb 	bl	80014f0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800575a:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800575c:	4681      	mov	r9, r0
    huart->TxXferSize  = Size;
 800575e:	f8a4 7054 	strh.w	r7, [r4, #84]	@ 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005762:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 8005766:	f8a4 7056 	strh.w	r7, [r4, #86]	@ 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800576a:	d103      	bne.n	8005774 <HAL_UART_Transmit+0x46>
 800576c:	6923      	ldr	r3, [r4, #16]
 800576e:	b90b      	cbnz	r3, 8005774 <HAL_UART_Transmit+0x46>
 8005770:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8005772:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8005774:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005778:	464b      	mov	r3, r9
 800577a:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 800577e:	b292      	uxth	r2, r2
 8005780:	b942      	cbnz	r2, 8005794 <HAL_UART_Transmit+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005782:	2140      	movs	r1, #64	@ 0x40
 8005784:	4620      	mov	r0, r4
 8005786:	f7ff ff8a 	bl	800569e <UART_WaitOnFlagUntilTimeout>
 800578a:	2320      	movs	r3, #32
 800578c:	b948      	cbnz	r0, 80057a2 <HAL_UART_Transmit+0x74>
    huart->gState = HAL_UART_STATE_READY;
 800578e:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    return HAL_OK;
 8005792:	e009      	b.n	80057a8 <HAL_UART_Transmit+0x7a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005794:	2200      	movs	r2, #0
 8005796:	2180      	movs	r1, #128	@ 0x80
 8005798:	4620      	mov	r0, r4
 800579a:	f7ff ff80 	bl	800569e <UART_WaitOnFlagUntilTimeout>
 800579e:	b130      	cbz	r0, 80057ae <HAL_UART_Transmit+0x80>
        huart->gState = HAL_UART_STATE_READY;
 80057a0:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 80057a2:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 80057a4:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
}
 80057a8:	b003      	add	sp, #12
 80057aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057ae:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80057b0:	b95e      	cbnz	r6, 80057ca <HAL_UART_Transmit+0x9c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057b2:	f835 3b02 	ldrh.w	r3, [r5], #2
 80057b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80057ba:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 80057bc:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 80057c0:	3a01      	subs	r2, #1
 80057c2:	b292      	uxth	r2, r2
 80057c4:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
 80057c8:	e7d4      	b.n	8005774 <HAL_UART_Transmit+0x46>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80057ca:	f816 3b01 	ldrb.w	r3, [r6], #1
 80057ce:	e7f4      	b.n	80057ba <HAL_UART_Transmit+0x8c>
    return HAL_BUSY;
 80057d0:	2002      	movs	r0, #2
 80057d2:	e7e9      	b.n	80057a8 <HAL_UART_Transmit+0x7a>
      return  HAL_ERROR;
 80057d4:	2001      	movs	r0, #1
 80057d6:	e7e7      	b.n	80057a8 <HAL_UART_Transmit+0x7a>

080057d8 <UART_CheckIdleState>:
{
 80057d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057da:	2600      	movs	r6, #0
{
 80057dc:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057de:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 80057e2:	f7fb fe85 	bl	80014f0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057e6:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80057e8:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	071a      	lsls	r2, r3, #28
 80057ee:	d51c      	bpl.n	800582a <UART_CheckIdleState+0x52>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80057f4:	4632      	mov	r2, r6
 80057f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80057fa:	9300      	str	r3, [sp, #0]
 80057fc:	4603      	mov	r3, r0
 80057fe:	4620      	mov	r0, r4
 8005800:	f7ff ff4d 	bl	800569e <UART_WaitOnFlagUntilTimeout>
 8005804:	b188      	cbz	r0, 800582a <UART_CheckIdleState+0x52>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005806:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005808:	e852 3f00 	ldrex	r3, [r2]
 800580c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005810:	e842 3100 	strex	r1, r3, [r2]
 8005814:	2900      	cmp	r1, #0
 8005816:	d1f6      	bne.n	8005806 <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
 8005818:	2320      	movs	r3, #32
 800581a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 800581e:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8005820:	2300      	movs	r3, #0
 8005822:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8005826:	b002      	add	sp, #8
 8005828:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800582a:	6823      	ldr	r3, [r4, #0]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	075b      	lsls	r3, r3, #29
 8005830:	d524      	bpl.n	800587c <UART_CheckIdleState+0xa4>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005832:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005836:	2200      	movs	r2, #0
 8005838:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800583c:	4620      	mov	r0, r4
 800583e:	9300      	str	r3, [sp, #0]
 8005840:	462b      	mov	r3, r5
 8005842:	f7ff ff2c 	bl	800569e <UART_WaitOnFlagUntilTimeout>
 8005846:	b1c8      	cbz	r0, 800587c <UART_CheckIdleState+0xa4>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005848:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584a:	e852 3f00 	ldrex	r3, [r2]
 800584e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005852:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8005856:	6822      	ldr	r2, [r4, #0]
 8005858:	2900      	cmp	r1, #0
 800585a:	d1f5      	bne.n	8005848 <UART_CheckIdleState+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585c:	f102 0308 	add.w	r3, r2, #8
 8005860:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005864:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005868:	f102 0008 	add.w	r0, r2, #8
 800586c:	e840 3100 	strex	r1, r3, [r0]
 8005870:	2900      	cmp	r1, #0
 8005872:	d1f3      	bne.n	800585c <UART_CheckIdleState+0x84>
      huart->RxState = HAL_UART_STATE_READY;
 8005874:	2320      	movs	r3, #32
 8005876:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 800587a:	e7d0      	b.n	800581e <UART_CheckIdleState+0x46>
  huart->gState = HAL_UART_STATE_READY;
 800587c:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800587e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8005880:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005884:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005888:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800588a:	6720      	str	r0, [r4, #112]	@ 0x70
  return HAL_OK;
 800588c:	e7c8      	b.n	8005820 <UART_CheckIdleState+0x48>

0800588e <HAL_UART_Init>:
{
 800588e:	b510      	push	{r4, lr}
  if (huart == NULL)
 8005890:	4604      	mov	r4, r0
 8005892:	b350      	cbz	r0, 80058ea <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8005894:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8005898:	b91b      	cbnz	r3, 80058a2 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 800589a:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 800589e:	f7fb fcbd 	bl	800121c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80058a2:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 80058a4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80058a6:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 80058aa:	6813      	ldr	r3, [r2, #0]
 80058ac:	f023 0301 	bic.w	r3, r3, #1
 80058b0:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058b2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80058b4:	b113      	cbz	r3, 80058bc <HAL_UART_Init+0x2e>
    UART_AdvFeatureConfig(huart);
 80058b6:	4620      	mov	r0, r4
 80058b8:	f7ff fe9c 	bl	80055f4 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058bc:	4620      	mov	r0, r4
 80058be:	f7ff fd03 	bl	80052c8 <UART_SetConfig>
 80058c2:	2801      	cmp	r0, #1
 80058c4:	d011      	beq.n	80058ea <HAL_UART_Init+0x5c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058c6:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 80058c8:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058ca:	685a      	ldr	r2, [r3, #4]
 80058cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80058d0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058d2:	689a      	ldr	r2, [r3, #8]
 80058d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80058d8:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	f042 0201 	orr.w	r2, r2, #1
}
 80058e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 80058e4:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80058e6:	f7ff bf77 	b.w	80057d8 <UART_CheckIdleState>
}
 80058ea:	2001      	movs	r0, #1
 80058ec:	bd10      	pop	{r4, pc}
	...

080058f0 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80058f0:	6e43      	ldr	r3, [r0, #100]	@ 0x64
{
 80058f2:	b530      	push	{r4, r5, lr}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80058f4:	b92b      	cbnz	r3, 8005902 <UARTEx_SetNbDataToProcess+0x12>
  {
    huart->NbTxDataToProcess = 1U;
 80058f6:	2301      	movs	r3, #1
 80058f8:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80058fc:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005900:	bd30      	pop	{r4, r5, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005902:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005904:	4d09      	ldr	r5, [pc, #36]	@ (800592c <UARTEx_SetNbDataToProcess+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005906:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005908:	6899      	ldr	r1, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 800590a:	4c09      	ldr	r4, [pc, #36]	@ (8005930 <UARTEx_SetNbDataToProcess+0x40>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800590c:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005910:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005912:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 8005914:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005916:	011b      	lsls	r3, r3, #4
 8005918:	fbb3 f3f1 	udiv	r3, r3, r1
 800591c:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005920:	5cab      	ldrb	r3, [r5, r2]
                               (uint16_t)denominator[rx_fifo_threshold];
 8005922:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005924:	011b      	lsls	r3, r3, #4
 8005926:	fbb3 f3f2 	udiv	r3, r3, r2
}
 800592a:	e7e7      	b.n	80058fc <UARTEx_SetNbDataToProcess+0xc>
 800592c:	0800ec6a 	.word	0x0800ec6a
 8005930:	0800ec62 	.word	0x0800ec62

08005934 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8005934:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8005938:	2b01      	cmp	r3, #1
 800593a:	d014      	beq.n	8005966 <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800593c:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800593e:	2324      	movs	r3, #36	@ 0x24
 8005940:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005944:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8005946:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005948:	f021 5100 	bic.w	r1, r1, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 800594c:	f023 0301 	bic.w	r3, r3, #1
 8005950:	6013      	str	r3, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005952:	2300      	movs	r3, #0
 8005954:	6643      	str	r3, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005956:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005958:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 800595a:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_READY;
 800595e:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  return HAL_OK;
 8005962:	4618      	mov	r0, r3
 8005964:	4770      	bx	lr
  __HAL_LOCK(huart);
 8005966:	2002      	movs	r0, #2
}
 8005968:	4770      	bx	lr

0800596a <HAL_UARTEx_SetTxFifoThreshold>:
{
 800596a:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 800596c:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
{
 8005970:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8005972:	2b01      	cmp	r3, #1
 8005974:	d017      	beq.n	80059a6 <HAL_UARTEx_SetTxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005976:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005978:	2324      	movs	r3, #36	@ 0x24
 800597a:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800597e:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8005980:	682b      	ldr	r3, [r5, #0]
 8005982:	f023 0301 	bic.w	r3, r3, #1
 8005986:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005988:	68ab      	ldr	r3, [r5, #8]
 800598a:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 800598e:	4319      	orrs	r1, r3
 8005990:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 8005992:	f7ff ffad 	bl	80058f0 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8005996:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005998:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 800599a:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 800599e:	2000      	movs	r0, #0
 80059a0:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 80059a4:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 80059a6:	2002      	movs	r0, #2
 80059a8:	e7fc      	b.n	80059a4 <HAL_UARTEx_SetTxFifoThreshold+0x3a>

080059aa <HAL_UARTEx_SetRxFifoThreshold>:
{
 80059aa:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 80059ac:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
{
 80059b0:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d017      	beq.n	80059e6 <HAL_UARTEx_SetRxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059b6:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80059b8:	2324      	movs	r3, #36	@ 0x24
 80059ba:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059be:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 80059c0:	682b      	ldr	r3, [r5, #0]
 80059c2:	f023 0301 	bic.w	r3, r3, #1
 80059c6:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80059c8:	68ab      	ldr	r3, [r5, #8]
 80059ca:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 80059ce:	4319      	orrs	r1, r3
 80059d0:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 80059d2:	f7ff ff8d 	bl	80058f0 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 80059d6:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059d8:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 80059da:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 80059de:	2000      	movs	r0, #0
 80059e0:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 80059e4:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 80059e6:	2002      	movs	r0, #2
 80059e8:	e7fc      	b.n	80059e4 <HAL_UARTEx_SetRxFifoThreshold+0x3a>
	...

080059ec <acquire_and_process_data>:
  return 0;
}

/* USER CODE BEGIN 2 */
int acquire_and_process_data(void)
{
 80059ec:	b570      	push	{r4, r5, r6, lr}
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 80059ee:	483b      	ldr	r0, [pc, #236]	@ (8005adc <acquire_and_process_data+0xf0>)
  HAL_Delay(20);
  extern uint32_t imagedata128[128 * 128 /2];
  for (int i = 0; i < 128 * 128 / 2; ++i) {
 80059f0:	2400      	movs	r4, #0
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 80059f2:	f7fa fcc5 	bl	8000380 <strlen>
 80059f6:	4939      	ldr	r1, [pc, #228]	@ (8005adc <acquire_and_process_data+0xf0>)
 80059f8:	b282      	uxth	r2, r0
 80059fa:	230a      	movs	r3, #10
 80059fc:	4838      	ldr	r0, [pc, #224]	@ (8005ae0 <acquire_and_process_data+0xf4>)
          uint8_t red1_8bit = (red1 * 255) / 31;
          uint8_t green1_8bit = (green1 * 255) / 63;
          uint8_t blue1_8bit = (blue1 * 255) / 31;

          uint8_t red2_8bit = (red2 * 255) / 31;
          uint8_t green2_8bit = (green2 * 255) / 63;
 80059fe:	253f      	movs	r5, #63	@ 0x3f
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8005a00:	f7ff fe95 	bl	800572e <HAL_UART_Transmit>
  HAL_Delay(20);
 8005a04:	2014      	movs	r0, #20
 8005a06:	f7fb fd79 	bl	80014fc <HAL_Delay>
  for (int i = 0; i < 128 * 128 / 2; ++i) {
 8005a0a:	4e36      	ldr	r6, [pc, #216]	@ (8005ae4 <acquire_and_process_data+0xf8>)
 8005a0c:	4936      	ldr	r1, [pc, #216]	@ (8005ae8 <acquire_and_process_data+0xfc>)
          uint8_t blue2_8bit = (blue2 * 255) / 31;
 8005a0e:	201f      	movs	r0, #31

          // Place the 8-bit components in the AI input buffer
          // Assuming the AI expects RGB values in separate consecutive bytes

          // Store first pixel
          data_in_1[6*i] = (float) green2_8bit / 255;
 8005a10:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8005aec <acquire_and_process_data+0x100>
          uint32_t pixels = imagedata128[i];
 8005a14:	f856 3b04 	ldr.w	r3, [r6], #4
  for (int i = 0; i < 128 * 128 / 2; ++i) {
 8005a18:	3401      	adds	r4, #1
 8005a1a:	3118      	adds	r1, #24
          uint8_t green2_8bit = (green2 * 255) / 63;
 8005a1c:	f3c3 1245 	ubfx	r2, r3, #5, #6
  for (int i = 0; i < 128 * 128 / 2; ++i) {
 8005a20:	f5b4 5f00 	cmp.w	r4, #8192	@ 0x2000
          uint8_t green2_8bit = (green2 * 255) / 63;
 8005a24:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 8005a28:	fbb2 f2f5 	udiv	r2, r2, r5
          data_in_1[6*i] = (float) green2_8bit / 255;
 8005a2c:	b2d2      	uxtb	r2, r2
 8005a2e:	ee07 2a90 	vmov	s15, r2
          uint8_t blue2_8bit = (blue2 * 255) / 31;
 8005a32:	f003 021f 	and.w	r2, r3, #31
          data_in_1[6*i] = (float) green2_8bit / 255;
 8005a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
          uint8_t blue2_8bit = (blue2 * 255) / 31;
 8005a3a:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 8005a3e:	fbb2 f2f0 	udiv	r2, r2, r0
          data_in_1[6*i] = (float) green2_8bit / 255;
 8005a42:	eec7 6a87 	vdiv.f32	s13, s15, s14
          data_in_1[6*i+1] = (float) blue2_8bit / 255;
 8005a46:	b2d2      	uxtb	r2, r2
 8005a48:	ee07 2a90 	vmov	s15, r2
          uint8_t red2_8bit = (red2 * 255) / 31;
 8005a4c:	f3c3 22c4 	ubfx	r2, r3, #11, #5
 8005a50:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
          data_in_1[6*i+1] = (float) blue2_8bit / 255;
 8005a54:	eef8 7a67 	vcvt.f32.u32	s15, s15
          uint8_t red2_8bit = (red2 * 255) / 31;
 8005a58:	fbb2 f2f0 	udiv	r2, r2, r0
          data_in_1[6*i+2] = (float) red2_8bit / 255;
 8005a5c:	b2d2      	uxtb	r2, r2
          data_in_1[6*i] = (float) green2_8bit / 255;
 8005a5e:	ed41 6a06 	vstr	s13, [r1, #-24]	@ 0xffffffe8
          data_in_1[6*i+1] = (float) blue2_8bit / 255;
 8005a62:	eec7 6a87 	vdiv.f32	s13, s15, s14
          data_in_1[6*i+2] = (float) red2_8bit / 255;
 8005a66:	ee07 2a90 	vmov	s15, r2
          uint8_t green1_8bit = (green1 * 255) / 63;
 8005a6a:	f3c3 5245 	ubfx	r2, r3, #21, #6
 8005a6e:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
          data_in_1[6*i+2] = (float) red2_8bit / 255;
 8005a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
          uint8_t green1_8bit = (green1 * 255) / 63;
 8005a76:	fbb2 f2f5 	udiv	r2, r2, r5
          data_in_1[6*i+3] = (float) green1_8bit / 255;
 8005a7a:	b2d2      	uxtb	r2, r2
          data_in_1[6*i+1] = (float) blue2_8bit / 255;
 8005a7c:	ed41 6a05 	vstr	s13, [r1, #-20]	@ 0xffffffec
          data_in_1[6*i+2] = (float) red2_8bit / 255;
 8005a80:	eec7 6a87 	vdiv.f32	s13, s15, s14
          data_in_1[6*i+3] = (float) green1_8bit / 255;
 8005a84:	ee07 2a90 	vmov	s15, r2
          uint8_t blue1_8bit = (blue1 * 255) / 31;
 8005a88:	f3c3 4204 	ubfx	r2, r3, #16, #5
          uint8_t red1 = (pixels >> 27) & 0x1F;
 8005a8c:	ea4f 63d3 	mov.w	r3, r3, lsr #27
          uint8_t blue1_8bit = (blue1 * 255) / 31;
 8005a90:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
          uint8_t red1_8bit = (red1 * 255) / 31;
 8005a94:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
          data_in_1[6*i+3] = (float) green1_8bit / 255;
 8005a98:	eef8 7a67 	vcvt.f32.u32	s15, s15
          uint8_t blue1_8bit = (blue1 * 255) / 31;
 8005a9c:	fbb2 f2f0 	udiv	r2, r2, r0
          data_in_1[6*i+4] = (float) blue1_8bit / 255;
 8005aa0:	b2d2      	uxtb	r2, r2
          uint8_t red1_8bit = (red1 * 255) / 31;
 8005aa2:	fbb3 f3f0 	udiv	r3, r3, r0
          data_in_1[6*i+2] = (float) red2_8bit / 255;
 8005aa6:	ed41 6a04 	vstr	s13, [r1, #-16]
          data_in_1[6*i+3] = (float) green1_8bit / 255;
 8005aaa:	eec7 6a87 	vdiv.f32	s13, s15, s14
          data_in_1[6*i+4] = (float) blue1_8bit / 255;
 8005aae:	ee07 2a90 	vmov	s15, r2
          data_in_1[6*i+5] = (float) red1_8bit /255;
 8005ab2:	b2db      	uxtb	r3, r3
          data_in_1[6*i+4] = (float) blue1_8bit / 255;
 8005ab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
          data_in_1[6*i+3] = (float) green1_8bit / 255;
 8005ab8:	ed41 6a03 	vstr	s13, [r1, #-12]
          data_in_1[6*i+4] = (float) blue1_8bit / 255;
 8005abc:	eec7 6a87 	vdiv.f32	s13, s15, s14
          data_in_1[6*i+5] = (float) red1_8bit /255;
 8005ac0:	ee07 3a90 	vmov	s15, r3
 8005ac4:	eef8 7a67 	vcvt.f32.u32	s15, s15
          data_in_1[6*i+4] = (float) blue1_8bit / 255;
 8005ac8:	ed41 6a02 	vstr	s13, [r1, #-8]
          data_in_1[6*i+5] = (float) red1_8bit /255;
 8005acc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005ad0:	ed41 6a01 	vstr	s13, [r1, #-4]
  for (int i = 0; i < 128 * 128 / 2; ++i) {
 8005ad4:	d19e      	bne.n	8005a14 <acquire_and_process_data+0x28>
  }
  return 0;
}
 8005ad6:	2000      	movs	r0, #0
 8005ad8:	bd70      	pop	{r4, r5, r6, pc}
 8005ada:	bf00      	nop
 8005adc:	24038fa0 	.word	0x24038fa0
 8005ae0:	24008d48 	.word	0x24008d48
 8005ae4:	24000d48 	.word	0x24000d48
 8005ae8:	240390dc 	.word	0x240390dc
 8005aec:	437f0000 	.word	0x437f0000

08005af0 <indexlargest>:
  	HAL_Delay(20);
  return 0;
}

int indexlargest(const float *arr, int n) { //Find the index of the largest element of an array
    if (n <= 0) return -1; // Return -1 for an empty array
 8005af0:	2900      	cmp	r1, #0
int indexlargest(const float *arr, int n) { //Find the index of the largest element of an array
 8005af2:	4603      	mov	r3, r0
    if (n <= 0) return -1; // Return -1 for an empty array
 8005af4:	dd16      	ble.n	8005b24 <indexlargest+0x34>

    int maxIndex = 0; // Start with the first element as the largest
    int max = arr[0];
 8005af6:	ecf3 7a01 	vldmia	r3!, {s15}
    for (int i = 1; i < n; i++) {
 8005afa:	2201      	movs	r2, #1
    int maxIndex = 0; // Start with the first element as the largest
 8005afc:	2000      	movs	r0, #0
    int max = arr[0];
 8005afe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    for (int i = 1; i < n; i++) {
 8005b02:	428a      	cmp	r2, r1
 8005b04:	d100      	bne.n	8005b08 <indexlargest+0x18>
 8005b06:	4770      	bx	lr
        if (arr[i] > max) {
 8005b08:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005b0c:	ecb3 7a01 	vldmia	r3!, {s14}
 8005b10:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8005b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            max = arr[i];
 8005b18:	bfc4      	itt	gt
 8005b1a:	4610      	movgt	r0, r2
 8005b1c:	eefd 7ac7 	vcvtgt.s32.f32	s15, s14
    for (int i = 1; i < n; i++) {
 8005b20:	3201      	adds	r2, #1
 8005b22:	e7ee      	b.n	8005b02 <indexlargest+0x12>
    if (n <= 0) return -1; // Return -1 for an empty array
 8005b24:	f04f 30ff 	mov.w	r0, #4294967295
            maxIndex = i; // Update maxIndex to the current index
        }
    }
    return maxIndex;
}
 8005b28:	4770      	bx	lr
	...

08005b2c <post_process>:
{
 8005b2c:	b530      	push	{r4, r5, lr}
 8005b2e:	b0e5      	sub	sp, #404	@ 0x194
  	HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8005b30:	4668      	mov	r0, sp
 8005b32:	f7fa fc25 	bl	8000380 <strlen>
 8005b36:	230a      	movs	r3, #10
 8005b38:	b282      	uxth	r2, r0
 8005b3a:	4669      	mov	r1, sp
 8005b3c:	485a      	ldr	r0, [pc, #360]	@ (8005ca8 <post_process+0x17c>)
 8005b3e:	f7ff fdf6 	bl	800572e <HAL_UART_Transmit>
  	HAL_Delay(20);
 8005b42:	2014      	movs	r0, #20
 8005b44:	f7fb fcda 	bl	80014fc <HAL_Delay>
  	int index = indexlargest(data_out_1, 54);
 8005b48:	2136      	movs	r1, #54	@ 0x36
 8005b4a:	4858      	ldr	r0, [pc, #352]	@ (8005cac <post_process+0x180>)
 8005b4c:	f7ff ffd0 	bl	8005af0 <indexlargest>
  	sprintf(buffer, "index :%d \r\n", index);
 8005b50:	4957      	ldr	r1, [pc, #348]	@ (8005cb0 <post_process+0x184>)
 8005b52:	4602      	mov	r2, r0
  	int index = indexlargest(data_out_1, 54);
 8005b54:	4604      	mov	r4, r0
  	sprintf(buffer, "index :%d \r\n", index);
 8005b56:	4668      	mov	r0, sp
 8005b58:	f006 fdf0 	bl	800c73c <siprintf>
  	HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8005b5c:	4668      	mov	r0, sp
 8005b5e:	f7fa fc0f 	bl	8000380 <strlen>
  	if (index >= 1 && index <= 13) {
 8005b62:	1e65      	subs	r5, r4, #1
  	HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8005b64:	b282      	uxth	r2, r0
 8005b66:	230a      	movs	r3, #10
 8005b68:	4669      	mov	r1, sp
 8005b6a:	484f      	ldr	r0, [pc, #316]	@ (8005ca8 <post_process+0x17c>)
 8005b6c:	f7ff fddf 	bl	800572e <HAL_UART_Transmit>
  	HAL_Delay(20);
 8005b70:	2014      	movs	r0, #20
 8005b72:	f7fb fcc3 	bl	80014fc <HAL_Delay>
  	if (index >= 1 && index <= 13) {
 8005b76:	2d0c      	cmp	r5, #12
 8005b78:	d813      	bhi.n	8005ba2 <post_process+0x76>
  		strcpy(suit, "Clubs");
 8005b7a:	494e      	ldr	r1, [pc, #312]	@ (8005cb4 <post_process+0x188>)
  		strcpy(suit, "Spades");
 8005b7c:	a832      	add	r0, sp, #200	@ 0xc8
 8005b7e:	f006 fef8 	bl	800c972 <strcpy>
  	int ranknum = (index + offset) % 13;
 8005b82:	230d      	movs	r3, #13
 8005b84:	fb95 f2f3 	sdiv	r2, r5, r3
 8005b88:	fb03 5512 	mls	r5, r3, r2, r5
  	switch(ranknum) {
 8005b8c:	2d0c      	cmp	r5, #12
 8005b8e:	d82b      	bhi.n	8005be8 <post_process+0xbc>
 8005b90:	e8df f005 	tbb	[pc, r5]
 8005b94:	76747226 	.word	0x76747226
 8005b98:	7e7c7a78 	.word	0x7e7c7a78
 8005b9c:	86848280 	.word	0x86848280
 8005ba0:	88          	.byte	0x88
 8005ba1:	00          	.byte	0x00
  	} else if (index >= 14 && index <= 26) {
 8005ba2:	f1a4 030e 	sub.w	r3, r4, #14
 8005ba6:	2b0c      	cmp	r3, #12
 8005ba8:	d801      	bhi.n	8005bae <post_process+0x82>
  		strcpy(suit, "Diamonds");
 8005baa:	4943      	ldr	r1, [pc, #268]	@ (8005cb8 <post_process+0x18c>)
 8005bac:	e7e6      	b.n	8005b7c <post_process+0x50>
  	} else if (index >= 27 && index <= 39) {
 8005bae:	f1a4 031b 	sub.w	r3, r4, #27
 8005bb2:	2b0c      	cmp	r3, #12
 8005bb4:	d801      	bhi.n	8005bba <post_process+0x8e>
  		strcpy(suit, "Hearts");
 8005bb6:	4941      	ldr	r1, [pc, #260]	@ (8005cbc <post_process+0x190>)
 8005bb8:	e7e0      	b.n	8005b7c <post_process+0x50>
  	} else if (index >= 40 && index <= 52) {
 8005bba:	f1a4 0328 	sub.w	r3, r4, #40	@ 0x28
 8005bbe:	2b0c      	cmp	r3, #12
 8005bc0:	d801      	bhi.n	8005bc6 <post_process+0x9a>
  		strcpy(suit, "Spades");
 8005bc2:	493f      	ldr	r1, [pc, #252]	@ (8005cc0 <post_process+0x194>)
 8005bc4:	e7da      	b.n	8005b7c <post_process+0x50>
  	} else if (index == 0) {
 8005bc6:	b93c      	cbnz	r4, 8005bd8 <post_process+0xac>
  	  lcd_clear();
 8005bc8:	f7fa ff6c 	bl	8000aa4 <lcd_clear>
  	  lcd_send_string("Black Joker");
 8005bcc:	483d      	ldr	r0, [pc, #244]	@ (8005cc4 <post_process+0x198>)
    	lcd_send_string("Nothing");
 8005bce:	f7fa ff15 	bl	80009fc <lcd_send_string>
}
 8005bd2:	2000      	movs	r0, #0
 8005bd4:	b065      	add	sp, #404	@ 0x194
 8005bd6:	bd30      	pop	{r4, r5, pc}
  		lcd_clear();
 8005bd8:	f7fa ff64 	bl	8000aa4 <lcd_clear>
    	lcd_send_string("Nothing");
 8005bdc:	483a      	ldr	r0, [pc, #232]	@ (8005cc8 <post_process+0x19c>)
 8005bde:	e7f6      	b.n	8005bce <post_process+0xa2>
  		strcpy(rank, "Two");
 8005be0:	493a      	ldr	r1, [pc, #232]	@ (8005ccc <post_process+0x1a0>)
  		strcpy(rank, "Ten");
 8005be2:	a819      	add	r0, sp, #100	@ 0x64
 8005be4:	f006 fec5 	bl	800c972 <strcpy>
  	sprintf(buffer, rank);
 8005be8:	a919      	add	r1, sp, #100	@ 0x64
 8005bea:	4668      	mov	r0, sp
 8005bec:	f006 fda6 	bl	800c73c <siprintf>
  	HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8005bf0:	4668      	mov	r0, sp
 8005bf2:	f7fa fbc5 	bl	8000380 <strlen>
 8005bf6:	230a      	movs	r3, #10
 8005bf8:	b282      	uxth	r2, r0
 8005bfa:	4669      	mov	r1, sp
 8005bfc:	482a      	ldr	r0, [pc, #168]	@ (8005ca8 <post_process+0x17c>)
 8005bfe:	f7ff fd96 	bl	800572e <HAL_UART_Transmit>
  	HAL_Delay(20);
 8005c02:	2014      	movs	r0, #20
 8005c04:	f7fb fc7a 	bl	80014fc <HAL_Delay>
  	sprintf(buffer, suit);
 8005c08:	a932      	add	r1, sp, #200	@ 0xc8
 8005c0a:	4668      	mov	r0, sp
 8005c0c:	f006 fd96 	bl	800c73c <siprintf>
  	HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8005c10:	4668      	mov	r0, sp
 8005c12:	f7fa fbb5 	bl	8000380 <strlen>
 8005c16:	230a      	movs	r3, #10
 8005c18:	b282      	uxth	r2, r0
 8005c1a:	4669      	mov	r1, sp
 8005c1c:	4822      	ldr	r0, [pc, #136]	@ (8005ca8 <post_process+0x17c>)
 8005c1e:	f7ff fd86 	bl	800572e <HAL_UART_Transmit>
  	HAL_Delay(20);
 8005c22:	2014      	movs	r0, #20
 8005c24:	f7fb fc6a 	bl	80014fc <HAL_Delay>
  	char temp1[100] = "";
 8005c28:	2100      	movs	r1, #0
 8005c2a:	2260      	movs	r2, #96	@ 0x60
 8005c2c:	a84c      	add	r0, sp, #304	@ 0x130
 8005c2e:	914b      	str	r1, [sp, #300]	@ 0x12c
 8005c30:	f006 fe01 	bl	800c836 <memset>
  	strcat(temp1, rank);
 8005c34:	a919      	add	r1, sp, #100	@ 0x64
 8005c36:	a84b      	add	r0, sp, #300	@ 0x12c
 8005c38:	f006 fe05 	bl	800c846 <strcat>
  	strcat(temp1, " of ");
 8005c3c:	4924      	ldr	r1, [pc, #144]	@ (8005cd0 <post_process+0x1a4>)
 8005c3e:	a84b      	add	r0, sp, #300	@ 0x12c
 8005c40:	f006 fe01 	bl	800c846 <strcat>
  	strcat(temp1, suit);
 8005c44:	a932      	add	r1, sp, #200	@ 0xc8
 8005c46:	a84b      	add	r0, sp, #300	@ 0x12c
 8005c48:	f006 fdfd 	bl	800c846 <strcat>
	lcd_clear();
 8005c4c:	f7fa ff2a 	bl	8000aa4 <lcd_clear>
	lcd_send_string(temp1);
 8005c50:	a84b      	add	r0, sp, #300	@ 0x12c
 8005c52:	f7fa fed3 	bl	80009fc <lcd_send_string>
  	sprintf(buffer, temp1);
 8005c56:	a94b      	add	r1, sp, #300	@ 0x12c
 8005c58:	4668      	mov	r0, sp
 8005c5a:	f006 fd6f 	bl	800c73c <siprintf>
  	HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8005c5e:	4668      	mov	r0, sp
 8005c60:	f7fa fb8e 	bl	8000380 <strlen>
 8005c64:	230a      	movs	r3, #10
 8005c66:	b282      	uxth	r2, r0
 8005c68:	4669      	mov	r1, sp
 8005c6a:	480f      	ldr	r0, [pc, #60]	@ (8005ca8 <post_process+0x17c>)
 8005c6c:	f7ff fd5f 	bl	800572e <HAL_UART_Transmit>
  	HAL_Delay(20);
 8005c70:	2014      	movs	r0, #20
 8005c72:	f7fb fc43 	bl	80014fc <HAL_Delay>
  return 0;
 8005c76:	e7ac      	b.n	8005bd2 <post_process+0xa6>
  		strcpy(rank, "Three");
 8005c78:	4916      	ldr	r1, [pc, #88]	@ (8005cd4 <post_process+0x1a8>)
 8005c7a:	e7b2      	b.n	8005be2 <post_process+0xb6>
  		strcpy(rank, "Four");
 8005c7c:	4916      	ldr	r1, [pc, #88]	@ (8005cd8 <post_process+0x1ac>)
 8005c7e:	e7b0      	b.n	8005be2 <post_process+0xb6>
  		strcpy(rank, "Five");
 8005c80:	4916      	ldr	r1, [pc, #88]	@ (8005cdc <post_process+0x1b0>)
 8005c82:	e7ae      	b.n	8005be2 <post_process+0xb6>
  		strcpy(rank, "Six");
 8005c84:	4916      	ldr	r1, [pc, #88]	@ (8005ce0 <post_process+0x1b4>)
 8005c86:	e7ac      	b.n	8005be2 <post_process+0xb6>
  		strcpy(rank, "Seven");
 8005c88:	4916      	ldr	r1, [pc, #88]	@ (8005ce4 <post_process+0x1b8>)
 8005c8a:	e7aa      	b.n	8005be2 <post_process+0xb6>
  		strcpy(rank, "Eight");
 8005c8c:	4916      	ldr	r1, [pc, #88]	@ (8005ce8 <post_process+0x1bc>)
 8005c8e:	e7a8      	b.n	8005be2 <post_process+0xb6>
  		strcpy(rank, "Nine");
 8005c90:	4916      	ldr	r1, [pc, #88]	@ (8005cec <post_process+0x1c0>)
 8005c92:	e7a6      	b.n	8005be2 <post_process+0xb6>
  		strcpy(rank, "Ace");
 8005c94:	4916      	ldr	r1, [pc, #88]	@ (8005cf0 <post_process+0x1c4>)
 8005c96:	e7a4      	b.n	8005be2 <post_process+0xb6>
  		strcpy(rank, "Jack");
 8005c98:	4916      	ldr	r1, [pc, #88]	@ (8005cf4 <post_process+0x1c8>)
 8005c9a:	e7a2      	b.n	8005be2 <post_process+0xb6>
  		strcpy(rank, "King");
 8005c9c:	4916      	ldr	r1, [pc, #88]	@ (8005cf8 <post_process+0x1cc>)
 8005c9e:	e7a0      	b.n	8005be2 <post_process+0xb6>
  		strcpy(rank, "Queen");
 8005ca0:	4916      	ldr	r1, [pc, #88]	@ (8005cfc <post_process+0x1d0>)
 8005ca2:	e79e      	b.n	8005be2 <post_process+0xb6>
  		strcpy(rank, "Ten");
 8005ca4:	4916      	ldr	r1, [pc, #88]	@ (8005d00 <post_process+0x1d4>)
 8005ca6:	e79c      	b.n	8005be2 <post_process+0xb6>
 8005ca8:	24008d48 	.word	0x24008d48
 8005cac:	24039004 	.word	0x24039004
 8005cb0:	0800ec72 	.word	0x0800ec72
 8005cb4:	0800ec7f 	.word	0x0800ec7f
 8005cb8:	0800ec85 	.word	0x0800ec85
 8005cbc:	0800ec8e 	.word	0x0800ec8e
 8005cc0:	0800ec95 	.word	0x0800ec95
 8005cc4:	0800ec9c 	.word	0x0800ec9c
 8005cc8:	0800eca8 	.word	0x0800eca8
 8005ccc:	0800ecb0 	.word	0x0800ecb0
 8005cd0:	0800ecf1 	.word	0x0800ecf1
 8005cd4:	0800ecb4 	.word	0x0800ecb4
 8005cd8:	0800ecba 	.word	0x0800ecba
 8005cdc:	0800ecbf 	.word	0x0800ecbf
 8005ce0:	0800ecc4 	.word	0x0800ecc4
 8005ce4:	0800ecc8 	.word	0x0800ecc8
 8005ce8:	0800ecce 	.word	0x0800ecce
 8005cec:	0800ecd4 	.word	0x0800ecd4
 8005cf0:	0800ecd9 	.word	0x0800ecd9
 8005cf4:	0800ecdd 	.word	0x0800ecdd
 8005cf8:	0800ece2 	.word	0x0800ece2
 8005cfc:	0800ece7 	.word	0x0800ece7
 8005d00:	0800eced 	.word	0x0800eced

08005d04 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 8005d04:	b537      	push	{r0, r1, r2, r4, r5, lr}
  err = ai_network_create_and_init(&network, act_addr, NULL);
 8005d06:	4d1a      	ldr	r5, [pc, #104]	@ (8005d70 <MX_X_CUBE_AI_Init+0x6c>)
 8005d08:	2200      	movs	r2, #0
 8005d0a:	491a      	ldr	r1, [pc, #104]	@ (8005d74 <MX_X_CUBE_AI_Init+0x70>)
 8005d0c:	4628      	mov	r0, r5
 8005d0e:	f000 fa0f 	bl	8006130 <ai_network_create_and_init>
  if (err.type != AI_ERROR_NONE) {
 8005d12:	f010 04ff 	ands.w	r4, r0, #255	@ 0xff
 8005d16:	d015      	beq.n	8005d44 <MX_X_CUBE_AI_Init+0x40>
    {sprintf(buffer, "TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8005d18:	f3c0 2017 	ubfx	r0, r0, #8, #24
 8005d1c:	4623      	mov	r3, r4
 8005d1e:	4a16      	ldr	r2, [pc, #88]	@ (8005d78 <MX_X_CUBE_AI_Init+0x74>)
 8005d20:	4916      	ldr	r1, [pc, #88]	@ (8005d7c <MX_X_CUBE_AI_Init+0x78>)
 8005d22:	9000      	str	r0, [sp, #0]
 8005d24:	4816      	ldr	r0, [pc, #88]	@ (8005d80 <MX_X_CUBE_AI_Init+0x7c>)
 8005d26:	f006 fd09 	bl	800c73c <siprintf>
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8005d2a:	4815      	ldr	r0, [pc, #84]	@ (8005d80 <MX_X_CUBE_AI_Init+0x7c>)
 8005d2c:	f7fa fb28 	bl	8000380 <strlen>
 8005d30:	230a      	movs	r3, #10
 8005d32:	b282      	uxth	r2, r0
 8005d34:	4912      	ldr	r1, [pc, #72]	@ (8005d80 <MX_X_CUBE_AI_Init+0x7c>)
 8005d36:	4813      	ldr	r0, [pc, #76]	@ (8005d84 <MX_X_CUBE_AI_Init+0x80>)
 8005d38:	f7ff fcf9 	bl	800572e <HAL_UART_Transmit>
  HAL_Delay(20);
 8005d3c:	2014      	movs	r0, #20
 8005d3e:	f7fb fbdd 	bl	80014fc <HAL_Delay>
  do {} while (1);
 8005d42:	e7fe      	b.n	8005d42 <MX_X_CUBE_AI_Init+0x3e>
  ai_input = ai_network_inputs_get(network, NULL);
 8005d44:	4621      	mov	r1, r4
 8005d46:	6828      	ldr	r0, [r5, #0]
 8005d48:	f000 f8f2 	bl	8005f30 <ai_network_inputs_get>
 8005d4c:	4b0e      	ldr	r3, [pc, #56]	@ (8005d88 <MX_X_CUBE_AI_Init+0x84>)
  ai_output = ai_network_outputs_get(network, NULL);
 8005d4e:	4621      	mov	r1, r4
  ai_input = ai_network_inputs_get(network, NULL);
 8005d50:	6018      	str	r0, [r3, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 8005d52:	6828      	ldr	r0, [r5, #0]
 8005d54:	f000 f8f6 	bl	8005f44 <ai_network_outputs_get>
 8005d58:	4b0c      	ldr	r3, [pc, #48]	@ (8005d8c <MX_X_CUBE_AI_Init+0x88>)
	  data_out_1[i] = 0;
 8005d5a:	f44f 7258 	mov.w	r2, #864	@ 0x360
 8005d5e:	4621      	mov	r1, r4
  ai_output = ai_network_outputs_get(network, NULL);
 8005d60:	6018      	str	r0, [r3, #0]
	  data_out_1[i] = 0;
 8005d62:	480b      	ldr	r0, [pc, #44]	@ (8005d90 <MX_X_CUBE_AI_Init+0x8c>)
    /* USER CODE BEGIN 5 */

  ai_boostrap(data_activations0);
    /* USER CODE END 5 */
}
 8005d64:	b003      	add	sp, #12
 8005d66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  data_out_1[i] = 0;
 8005d6a:	f006 bd64 	b.w	800c836 <memset>
 8005d6e:	bf00      	nop
 8005d70:	24008f80 	.word	0x24008f80
 8005d74:	24000018 	.word	0x24000018
 8005d78:	0800ecf6 	.word	0x0800ecf6
 8005d7c:	0800ed11 	.word	0x0800ed11
 8005d80:	24038fa0 	.word	0x24038fa0
 8005d84:	24008d48 	.word	0x24008d48
 8005d88:	24008f7c 	.word	0x24008f7c
 8005d8c:	24008f78 	.word	0x24008f78
 8005d90:	24039004 	.word	0x24039004

08005d94 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 8005d94:	b530      	push	{r4, r5, lr}
    /* USER CODE BEGIN 6 */
  int res = -1;
  extern UART_HandleTypeDef huart4;
  char buffer [100];
  sprintf(buffer, "AI Process Starts, AI_NETWORK_IN_NUM: %d, data_out_size: %d, data_in_size: %d\r\n", AI_NETWORK_IN_NUM, sizeof(data_out_1), sizeof(data_in_1));
 8005d96:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
{
 8005d9a:	b09d      	sub	sp, #116	@ 0x74
  sprintf(buffer, "AI Process Starts, AI_NETWORK_IN_NUM: %d, data_out_size: %d, data_in_size: %d\r\n", AI_NETWORK_IN_NUM, sizeof(data_out_1), sizeof(data_in_1));
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	494d      	ldr	r1, [pc, #308]	@ (8005ed4 <MX_X_CUBE_AI_Process+0x140>)
 8005da0:	9300      	str	r3, [sp, #0]
 8005da2:	a803      	add	r0, sp, #12
 8005da4:	23d8      	movs	r3, #216	@ 0xd8
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
  HAL_Delay(20);
  if (network) {
 8005da6:	4c4c      	ldr	r4, [pc, #304]	@ (8005ed8 <MX_X_CUBE_AI_Process+0x144>)
  sprintf(buffer, "AI Process Starts, AI_NETWORK_IN_NUM: %d, data_out_size: %d, data_in_size: %d\r\n", AI_NETWORK_IN_NUM, sizeof(data_out_1), sizeof(data_in_1));
 8005da8:	f006 fcc8 	bl	800c73c <siprintf>
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8005dac:	a803      	add	r0, sp, #12
 8005dae:	f7fa fae7 	bl	8000380 <strlen>
 8005db2:	230a      	movs	r3, #10
 8005db4:	b282      	uxth	r2, r0
 8005db6:	a903      	add	r1, sp, #12
 8005db8:	4848      	ldr	r0, [pc, #288]	@ (8005edc <MX_X_CUBE_AI_Process+0x148>)
 8005dba:	f7ff fcb8 	bl	800572e <HAL_UART_Transmit>
  HAL_Delay(20);
 8005dbe:	2014      	movs	r0, #20
 8005dc0:	f7fb fb9c 	bl	80014fc <HAL_Delay>
  if (network) {
 8005dc4:	6823      	ldr	r3, [r4, #0]
 8005dc6:	b98b      	cbnz	r3, 8005dec <MX_X_CUBE_AI_Process+0x58>
	  	HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
	  	HAL_Delay(20);
//      }
  }
  if (res) {
	  sprintf(buffer, "AI Failed!\r\n");
 8005dc8:	4945      	ldr	r1, [pc, #276]	@ (8005ee0 <MX_X_CUBE_AI_Process+0x14c>)
 8005dca:	a803      	add	r0, sp, #12
 8005dcc:	f006 fdd1 	bl	800c972 <strcpy>
	  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8005dd0:	a803      	add	r0, sp, #12
 8005dd2:	f7fa fad5 	bl	8000380 <strlen>
 8005dd6:	230a      	movs	r3, #10
 8005dd8:	b282      	uxth	r2, r0
 8005dda:	a903      	add	r1, sp, #12
 8005ddc:	483f      	ldr	r0, [pc, #252]	@ (8005edc <MX_X_CUBE_AI_Process+0x148>)
 8005dde:	f7ff fca6 	bl	800572e <HAL_UART_Transmit>
	  HAL_Delay(20);
 8005de2:	2014      	movs	r0, #20
 8005de4:	f7fb fb8a 	bl	80014fc <HAL_Delay>
  }
    /* USER CODE END 6 */
}
 8005de8:	b01d      	add	sp, #116	@ 0x74
 8005dea:	bd30      	pop	{r4, r5, pc}
      res = acquire_and_process_data();
 8005dec:	f7ff fdfe 	bl	80059ec <acquire_and_process_data>
	  sprintf(buffer, "data acquired passed\r\n");
 8005df0:	493c      	ldr	r1, [pc, #240]	@ (8005ee4 <MX_X_CUBE_AI_Process+0x150>)
      res = acquire_and_process_data();
 8005df2:	4605      	mov	r5, r0
	  sprintf(buffer, "data acquired passed\r\n");
 8005df4:	a803      	add	r0, sp, #12
 8005df6:	f006 fdbc 	bl	800c972 <strcpy>
	  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8005dfa:	a803      	add	r0, sp, #12
 8005dfc:	f7fa fac0 	bl	8000380 <strlen>
 8005e00:	230a      	movs	r3, #10
 8005e02:	b282      	uxth	r2, r0
 8005e04:	a903      	add	r1, sp, #12
 8005e06:	4835      	ldr	r0, [pc, #212]	@ (8005edc <MX_X_CUBE_AI_Process+0x148>)
 8005e08:	f7ff fc91 	bl	800572e <HAL_UART_Transmit>
	  HAL_Delay(20);
 8005e0c:	2014      	movs	r0, #20
 8005e0e:	f7fb fb75 	bl	80014fc <HAL_Delay>
      if (res == 0) {
 8005e12:	2d00      	cmp	r5, #0
 8005e14:	d146      	bne.n	8005ea4 <MX_X_CUBE_AI_Process+0x110>
  ai_input[0].data = AI_HANDLE_PTR(in_data);
 8005e16:	4b34      	ldr	r3, [pc, #208]	@ (8005ee8 <MX_X_CUBE_AI_Process+0x154>)
  batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 8005e18:	6820      	ldr	r0, [r4, #0]
  ai_input[0].data = AI_HANDLE_PTR(in_data);
 8005e1a:	6819      	ldr	r1, [r3, #0]
 8005e1c:	4b33      	ldr	r3, [pc, #204]	@ (8005eec <MX_X_CUBE_AI_Process+0x158>)
 8005e1e:	604b      	str	r3, [r1, #4]
  ai_output[0].data = AI_HANDLE_PTR(out_data);
 8005e20:	4b33      	ldr	r3, [pc, #204]	@ (8005ef0 <MX_X_CUBE_AI_Process+0x15c>)
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	4b33      	ldr	r3, [pc, #204]	@ (8005ef4 <MX_X_CUBE_AI_Process+0x160>)
 8005e26:	6053      	str	r3, [r2, #4]
  batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 8005e28:	f000 f9c9 	bl	80061be <ai_network_run>
  if (batch != 1) {
 8005e2c:	2801      	cmp	r0, #1
  batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 8005e2e:	4602      	mov	r2, r0
  if (batch != 1) {
 8005e30:	d028      	beq.n	8005e84 <MX_X_CUBE_AI_Process+0xf0>
	  	sprintf(buffer, "Batch Mismatch! Batch number rn is: %d",batch);
 8005e32:	4931      	ldr	r1, [pc, #196]	@ (8005ef8 <MX_X_CUBE_AI_Process+0x164>)
 8005e34:	4831      	ldr	r0, [pc, #196]	@ (8005efc <MX_X_CUBE_AI_Process+0x168>)
 8005e36:	f006 fc81 	bl	800c73c <siprintf>
	  	HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8005e3a:	4830      	ldr	r0, [pc, #192]	@ (8005efc <MX_X_CUBE_AI_Process+0x168>)
 8005e3c:	f7fa faa0 	bl	8000380 <strlen>
 8005e40:	230a      	movs	r3, #10
 8005e42:	b282      	uxth	r2, r0
 8005e44:	492d      	ldr	r1, [pc, #180]	@ (8005efc <MX_X_CUBE_AI_Process+0x168>)
 8005e46:	4825      	ldr	r0, [pc, #148]	@ (8005edc <MX_X_CUBE_AI_Process+0x148>)
 8005e48:	f7ff fc71 	bl	800572e <HAL_UART_Transmit>
	  	HAL_Delay(20);
 8005e4c:	2014      	movs	r0, #20
 8005e4e:	f7fb fb55 	bl	80014fc <HAL_Delay>
    ai_log_err(ai_network_get_error(network),
 8005e52:	6820      	ldr	r0, [r4, #0]
 8005e54:	f000 f85c 	bl	8005f10 <ai_network_get_error>
    {sprintf(buffer, "TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8005e58:	f3c0 2317 	ubfx	r3, r0, #8, #24
 8005e5c:	4a28      	ldr	r2, [pc, #160]	@ (8005f00 <MX_X_CUBE_AI_Process+0x16c>)
 8005e5e:	4929      	ldr	r1, [pc, #164]	@ (8005f04 <MX_X_CUBE_AI_Process+0x170>)
 8005e60:	9300      	str	r3, [sp, #0]
 8005e62:	b2c3      	uxtb	r3, r0
 8005e64:	4825      	ldr	r0, [pc, #148]	@ (8005efc <MX_X_CUBE_AI_Process+0x168>)
 8005e66:	f006 fc69 	bl	800c73c <siprintf>
  HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8005e6a:	4824      	ldr	r0, [pc, #144]	@ (8005efc <MX_X_CUBE_AI_Process+0x168>)
 8005e6c:	f7fa fa88 	bl	8000380 <strlen>
 8005e70:	230a      	movs	r3, #10
 8005e72:	b282      	uxth	r2, r0
 8005e74:	4921      	ldr	r1, [pc, #132]	@ (8005efc <MX_X_CUBE_AI_Process+0x168>)
 8005e76:	4819      	ldr	r0, [pc, #100]	@ (8005edc <MX_X_CUBE_AI_Process+0x148>)
 8005e78:	f7ff fc59 	bl	800572e <HAL_UART_Transmit>
  HAL_Delay(20);
 8005e7c:	2014      	movs	r0, #20
 8005e7e:	f7fb fb3d 	bl	80014fc <HAL_Delay>
  do {} while (1);
 8005e82:	e7fe      	b.n	8005e82 <MX_X_CUBE_AI_Process+0xee>
  	  	sprintf(buffer, "ai_run passed:\r\n");
 8005e84:	4920      	ldr	r1, [pc, #128]	@ (8005f08 <MX_X_CUBE_AI_Process+0x174>)
 8005e86:	a803      	add	r0, sp, #12
 8005e88:	f006 fd73 	bl	800c972 <strcpy>
  	  	HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8005e8c:	a803      	add	r0, sp, #12
 8005e8e:	f7fa fa77 	bl	8000380 <strlen>
 8005e92:	230a      	movs	r3, #10
 8005e94:	b282      	uxth	r2, r0
 8005e96:	a903      	add	r1, sp, #12
 8005e98:	4810      	ldr	r0, [pc, #64]	@ (8005edc <MX_X_CUBE_AI_Process+0x148>)
 8005e9a:	f7ff fc48 	bl	800572e <HAL_UART_Transmit>
  	  	HAL_Delay(20);
 8005e9e:	2014      	movs	r0, #20
 8005ea0:	f7fb fb2c 	bl	80014fc <HAL_Delay>
        res = post_process();
 8005ea4:	f7ff fe42 	bl	8005b2c <post_process>
	  	sprintf(buffer, "post process passed\r\n");
 8005ea8:	4918      	ldr	r1, [pc, #96]	@ (8005f0c <MX_X_CUBE_AI_Process+0x178>)
        res = post_process();
 8005eaa:	4604      	mov	r4, r0
	  	sprintf(buffer, "post process passed\r\n");
 8005eac:	a803      	add	r0, sp, #12
 8005eae:	f006 fd60 	bl	800c972 <strcpy>
	  	HAL_UART_Transmit(&huart4,buffer,strlen(buffer),10);
 8005eb2:	a803      	add	r0, sp, #12
 8005eb4:	f7fa fa64 	bl	8000380 <strlen>
 8005eb8:	230a      	movs	r3, #10
 8005eba:	b282      	uxth	r2, r0
 8005ebc:	a903      	add	r1, sp, #12
 8005ebe:	4807      	ldr	r0, [pc, #28]	@ (8005edc <MX_X_CUBE_AI_Process+0x148>)
 8005ec0:	f7ff fc35 	bl	800572e <HAL_UART_Transmit>
	  	HAL_Delay(20);
 8005ec4:	2014      	movs	r0, #20
 8005ec6:	f7fb fb19 	bl	80014fc <HAL_Delay>
  if (res) {
 8005eca:	2c00      	cmp	r4, #0
 8005ecc:	f47f af7c 	bne.w	8005dc8 <MX_X_CUBE_AI_Process+0x34>
 8005ed0:	e78a      	b.n	8005de8 <MX_X_CUBE_AI_Process+0x54>
 8005ed2:	bf00      	nop
 8005ed4:	0800ed43 	.word	0x0800ed43
 8005ed8:	24008f80 	.word	0x24008f80
 8005edc:	24008d48 	.word	0x24008d48
 8005ee0:	0800ed93 	.word	0x0800ed93
 8005ee4:	0800eda0 	.word	0x0800eda0
 8005ee8:	24008f7c 	.word	0x24008f7c
 8005eec:	240390dc 	.word	0x240390dc
 8005ef0:	24008f78 	.word	0x24008f78
 8005ef4:	24039004 	.word	0x24039004
 8005ef8:	0800edb7 	.word	0x0800edb7
 8005efc:	24038fa0 	.word	0x24038fa0
 8005f00:	0800edde 	.word	0x0800edde
 8005f04:	0800ed11 	.word	0x0800ed11
 8005f08:	0800eded 	.word	0x0800eded
 8005f0c:	0800edfe 	.word	0x0800edfe

08005f10 <ai_network_get_error>:
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 8005f10:	f000 ba8c 	b.w	800642c <ai_platform_network_get_error>

08005f14 <ai_network_create>:
}

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8005f14:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 8005f16:	2305      	movs	r3, #5
 8005f18:	2200      	movs	r2, #0
 8005f1a:	e9cd 3200 	strd	r3, r2, [sp]
 8005f1e:	2301      	movs	r3, #1
 8005f20:	4a02      	ldr	r2, [pc, #8]	@ (8005f2c <ai_network_create+0x18>)
 8005f22:	f000 fea9 	bl	8006c78 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8005f26:	b003      	add	sp, #12
 8005f28:	f85d fb04 	ldr.w	pc, [sp], #4
 8005f2c:	2400001c 	.word	0x2400001c

08005f30 <ai_network_inputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 8005f30:	b910      	cbnz	r0, 8005f38 <ai_network_inputs_get+0x8>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8005f32:	4802      	ldr	r0, [pc, #8]	@ (8005f3c <ai_network_inputs_get+0xc>)
 8005f34:	4b02      	ldr	r3, [pc, #8]	@ (8005f40 <ai_network_inputs_get+0x10>)
 8005f36:	6003      	str	r3, [r0, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8005f38:	f000 bb8a 	b.w	8006650 <ai_platform_inputs_get>
 8005f3c:	2400001c 	.word	0x2400001c
 8005f40:	a1c00100 	.word	0xa1c00100

08005f44 <ai_network_outputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 8005f44:	b910      	cbnz	r0, 8005f4c <ai_network_outputs_get+0x8>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8005f46:	4802      	ldr	r0, [pc, #8]	@ (8005f50 <ai_network_outputs_get+0xc>)
 8005f48:	4b02      	ldr	r3, [pc, #8]	@ (8005f54 <ai_network_outputs_get+0x10>)
 8005f4a:	6003      	str	r3, [r0, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8005f4c:	f000 bd0c 	b.w	8006968 <ai_platform_outputs_get>
 8005f50:	2400001c 	.word	0x2400001c
 8005f54:	a1c00100 	.word	0xa1c00100

08005f58 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8005f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f5c:	4607      	mov	r7, r0
 8005f5e:	4688      	mov	r8, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8005f60:	f001 f864 	bl	800702c <ai_platform_network_init>
  if (!net_ctx) return false;
 8005f64:	4604      	mov	r4, r0
 8005f66:	2800      	cmp	r0, #0
 8005f68:	f000 80a4 	beq.w	80060b4 <ai_network_init+0x15c>
  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 8005f6c:	4e58      	ldr	r6, [pc, #352]	@ (80060d0 <ai_network_init+0x178>)
 8005f6e:	4642      	mov	r2, r8
 8005f70:	2101      	movs	r1, #1
 8005f72:	4630      	mov	r0, r6
 8005f74:	f000 f990 	bl	8006298 <ai_platform_get_weights_map>
 8005f78:	4605      	mov	r5, r0
 8005f7a:	2800      	cmp	r0, #0
 8005f7c:	f000 809c 	beq.w	80060b8 <ai_network_init+0x160>
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8005f80:	4a54      	ldr	r2, [pc, #336]	@ (80060d4 <ai_network_init+0x17c>)
 8005f82:	6813      	ldr	r3, [r2, #0]
 8005f84:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f88:	6013      	str	r3, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8005f8a:	6833      	ldr	r3, [r6, #0]
    conv2d_1_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8005f8c:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8005f90:	4a51      	ldr	r2, [pc, #324]	@ (80060d8 <ai_network_init+0x180>)
    gemm_7_bias_array.data = AI_PTR(g_network_weights_map[0] + 378396);
 8005f92:	f503 26b8 	add.w	r6, r3, #376832	@ 0x5c000
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8005f96:	6811      	ldr	r1, [r2, #0]
 8005f98:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8005f9c:	6011      	str	r1, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 452);
 8005f9e:	f503 71e2 	add.w	r1, r3, #452	@ 0x1c4
    conv2d_1_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 452);
 8005fa2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8005fa6:	4a4d      	ldr	r2, [pc, #308]	@ (80060dc <ai_network_init+0x184>)
 8005fa8:	6811      	ldr	r1, [r2, #0]
 8005faa:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8005fae:	6011      	str	r1, [r2, #0]
    conv2d_3_weights_array.data = AI_PTR(g_network_weights_map[0] + 476);
 8005fb0:	f503 71ee 	add.w	r1, r3, #476	@ 0x1dc
    conv2d_3_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 476);
 8005fb4:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8005fb8:	4a49      	ldr	r2, [pc, #292]	@ (80060e0 <ai_network_init+0x188>)
 8005fba:	6811      	ldr	r1, [r2, #0]
 8005fbc:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8005fc0:	6011      	str	r1, [r2, #0]
    conv2d_3_bias_array.data = AI_PTR(g_network_weights_map[0] + 2012);
 8005fc2:	f203 71dc 	addw	r1, r3, #2012	@ 0x7dc
    conv2d_3_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 2012);
 8005fc6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_7_weights_array.format |= AI_FMT_FLAG_CONST;
 8005fca:	4a46      	ldr	r2, [pc, #280]	@ (80060e4 <ai_network_init+0x18c>)
 8005fcc:	6811      	ldr	r1, [r2, #0]
 8005fce:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8005fd2:	6011      	str	r1, [r2, #0]
    gemm_7_weights_array.data = AI_PTR(g_network_weights_map[0] + 2076);
 8005fd4:	f603 011c 	addw	r1, r3, #2076	@ 0x81c
    gemm_8_bias_array.data = AI_PTR(g_network_weights_map[0] + 385356);
 8005fd8:	f503 23bc 	add.w	r3, r3, #385024	@ 0x5e000
    gemm_7_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 2076);
 8005fdc:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8005fe0:	4a41      	ldr	r2, [pc, #260]	@ (80060e8 <ai_network_init+0x190>)
    gemm_8_bias_array.data = AI_PTR(g_network_weights_map[0] + 385356);
 8005fe2:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
    gemm_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8005fe6:	6811      	ldr	r1, [r2, #0]
 8005fe8:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8005fec:	6011      	str	r1, [r2, #0]
    gemm_7_bias_array.data = AI_PTR(g_network_weights_map[0] + 378396);
 8005fee:	f206 611c 	addw	r1, r6, #1564	@ 0x61c
    gemm_8_weights_array.data = AI_PTR(g_network_weights_map[0] + 378876);
 8005ff2:	f206 76fc 	addw	r6, r6, #2044	@ 0x7fc
    gemm_7_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 378396);
 8005ff6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_8_weights_array.format |= AI_FMT_FLAG_CONST;
 8005ffa:	4a3c      	ldr	r2, [pc, #240]	@ (80060ec <ai_network_init+0x194>)
 8005ffc:	6811      	ldr	r1, [r2, #0]
 8005ffe:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
    gemm_8_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 378876);
 8006002:	e9c2 6602 	strd	r6, r6, [r2, #8]
    gemm_8_weights_array.format |= AI_FMT_FLAG_CONST;
 8006006:	6011      	str	r1, [r2, #0]
    gemm_8_bias_array.format |= AI_FMT_FLAG_CONST;
 8006008:	4a39      	ldr	r2, [pc, #228]	@ (80060f0 <ai_network_init+0x198>)
 800600a:	6811      	ldr	r1, [r2, #0]
 800600c:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8006010:	6011      	str	r1, [r2, #0]
    gemm_8_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 385356);
 8006012:	e9c2 3302 	strd	r3, r3, [r2, #8]
  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 8006016:	f8df 9114 	ldr.w	r9, [pc, #276]	@ 800612c <ai_network_init+0x1d4>
 800601a:	4642      	mov	r2, r8
 800601c:	2101      	movs	r1, #1
 800601e:	4648      	mov	r0, r9
 8006020:	f000 f992 	bl	8006348 <ai_platform_get_activations_map>
 8006024:	4606      	mov	r6, r0
 8006026:	2800      	cmp	r0, #0
 8006028:	d04c      	beq.n	80060c4 <ai_network_init+0x16c>
    serving_default_input_10_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800602a:	f8d9 3000 	ldr.w	r3, [r9]
 800602e:	4a31      	ldr	r2, [pc, #196]	@ (80060f4 <ai_network_init+0x19c>)
    conv2d_1_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 49156);
 8006030:	4931      	ldr	r1, [pc, #196]	@ (80060f8 <ai_network_init+0x1a0>)
    serving_default_input_10_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8006032:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conversion_0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8006036:	4a31      	ldr	r2, [pc, #196]	@ (80060fc <ai_network_init+0x1a4>)
    conversion_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8006038:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_1_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 49156);
 800603c:	f503 4240 	add.w	r2, r3, #49152	@ 0xc000
 8006040:	3204      	adds	r2, #4
    conv2d_1_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 49156);
 8006042:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_1_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 50440);
 8006046:	f503 4245 	add.w	r2, r3, #50432	@ 0xc500
 800604a:	492d      	ldr	r1, [pc, #180]	@ (8006100 <ai_network_init+0x1a8>)
 800604c:	3208      	adds	r2, #8
    conv2d_1_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 50440);
 800604e:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_1_output_array.data = AI_PTR(g_network_activations_map[0] + 51184);
 8006052:	f503 4247 	add.w	r2, r3, #50944	@ 0xc700
 8006056:	492b      	ldr	r1, [pc, #172]	@ (8006104 <ai_network_init+0x1ac>)
 8006058:	32f0      	adds	r2, #240	@ 0xf0
    conv2d_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 51184);
 800605a:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_3_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800605e:	4a2a      	ldr	r2, [pc, #168]	@ (8006108 <ai_network_init+0x1b0>)
    conv2d_3_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 3680);
 8006060:	f503 6166 	add.w	r1, r3, #3680	@ 0xe60
    conv2d_3_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8006064:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_3_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 3680);
 8006068:	4a28      	ldr	r2, [pc, #160]	@ (800610c <ai_network_init+0x1b4>)
    conv2d_3_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 3680);
 800606a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_3_output_array.data = AI_PTR(g_network_activations_map[0] + 4576);
 800606e:	f503 518f 	add.w	r1, r3, #4576	@ 0x11e0
 8006072:	4a27      	ldr	r2, [pc, #156]	@ (8006110 <ai_network_init+0x1b8>)
    conv2d_3_output_array.data_start = AI_PTR(g_network_activations_map[0] + 4576);
 8006074:	e9c2 1102 	strd	r1, r1, [r2, #8]
    transpose_5_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8006078:	4a26      	ldr	r2, [pc, #152]	@ (8006114 <ai_network_init+0x1bc>)
    gemm_7_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 3136);
 800607a:	f503 6144 	add.w	r1, r3, #3136	@ 0xc40
    transpose_5_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800607e:	e9c2 3302 	strd	r3, r3, [r2, #8]
    gemm_7_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 3136);
 8006082:	4a25      	ldr	r2, [pc, #148]	@ (8006118 <ai_network_init+0x1c0>)
    gemm_7_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 3136);
 8006084:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_7_output_array.data = AI_PTR(g_network_activations_map[0] + 9408);
 8006088:	f503 5113 	add.w	r1, r3, #9408	@ 0x24c0
 800608c:	4a23      	ldr	r2, [pc, #140]	@ (800611c <ai_network_init+0x1c4>)
    gemm_7_output_array.data_start = AI_PTR(g_network_activations_map[0] + 9408);
 800608e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_8_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8006092:	4a23      	ldr	r2, [pc, #140]	@ (8006120 <ai_network_init+0x1c8>)
    gemm_8_output_array.data = AI_PTR(g_network_activations_map[0] + 240);
 8006094:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
    gemm_8_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8006098:	e9c2 3302 	strd	r3, r3, [r2, #8]
    gemm_8_output_array.data = AI_PTR(g_network_activations_map[0] + 240);
 800609c:	4a21      	ldr	r2, [pc, #132]	@ (8006124 <ai_network_init+0x1cc>)
    gemm_8_output_array.data_start = AI_PTR(g_network_activations_map[0] + 240);
 800609e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conversion_9_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80060a2:	4a21      	ldr	r2, [pc, #132]	@ (8006128 <ai_network_init+0x1d0>)
    conversion_9_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80060a4:	e9c2 3302 	strd	r3, r3, [r2, #8]

  ai_bool ok = true;
  ok &= network_configure_weights(net_ctx, params);
  ok &= network_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 80060a8:	4638      	mov	r0, r7
 80060aa:	f001 f95b 	bl	8007364 <ai_platform_network_post_init>
 80060ae:	4030      	ands	r0, r6
 80060b0:	4005      	ands	r5, r0
 80060b2:	b2e8      	uxtb	r0, r5

  return ok;
}
 80060b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 80060b8:	2212      	movs	r2, #18
 80060ba:	2130      	movs	r1, #48	@ 0x30
 80060bc:	4620      	mov	r0, r4
 80060be:	f000 fac1 	bl	8006644 <ai_platform_network_set_error>
  return false;
 80060c2:	e7a8      	b.n	8006016 <ai_network_init+0xbe>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 80060c4:	2213      	movs	r2, #19
 80060c6:	2130      	movs	r1, #48	@ 0x30
 80060c8:	4620      	mov	r0, r4
 80060ca:	f000 fabb 	bl	8006644 <ai_platform_network_set_error>
  return false;
 80060ce:	e7eb      	b.n	80060a8 <ai_network_init+0x150>
 80060d0:	2406919c 	.word	0x2406919c
 80060d4:	24000ad8 	.word	0x24000ad8
 80060d8:	24000ac8 	.word	0x24000ac8
 80060dc:	24000ab8 	.word	0x24000ab8
 80060e0:	24000aa8 	.word	0x24000aa8
 80060e4:	24000a98 	.word	0x24000a98
 80060e8:	24000a88 	.word	0x24000a88
 80060ec:	24000a78 	.word	0x24000a78
 80060f0:	24000a68 	.word	0x24000a68
 80060f4:	240009f8 	.word	0x240009f8
 80060f8:	24000a58 	.word	0x24000a58
 80060fc:	240009e8 	.word	0x240009e8
 8006100:	24000a48 	.word	0x24000a48
 8006104:	240009d8 	.word	0x240009d8
 8006108:	24000a38 	.word	0x24000a38
 800610c:	24000a28 	.word	0x24000a28
 8006110:	240009c8 	.word	0x240009c8
 8006114:	240009b8 	.word	0x240009b8
 8006118:	24000a18 	.word	0x24000a18
 800611c:	240009a8 	.word	0x240009a8
 8006120:	24000a08 	.word	0x24000a08
 8006124:	24000998 	.word	0x24000998
 8006128:	24000ae8 	.word	0x24000ae8
 800612c:	240691a0 	.word	0x240691a0

08006130 <ai_network_create_and_init>:
{
 8006130:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006134:	4688      	mov	r8, r1
 8006136:	b08f      	sub	sp, #60	@ 0x3c
    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8006138:	2100      	movs	r1, #0
{
 800613a:	4606      	mov	r6, r0
 800613c:	4617      	mov	r7, r2
    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 800613e:	f7ff fee9 	bl	8005f14 <ai_network_create>
    if (err.type != AI_ERROR_NONE)
 8006142:	f010 09ff 	ands.w	r9, r0, #255	@ 0xff
    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8006146:	4604      	mov	r4, r0
    if (err.type != AI_ERROR_NONE)
 8006148:	d107      	bne.n	800615a <ai_network_create_and_init+0x2a>
    if (ai_network_data_params_get(&params) != true) {
 800614a:	4668      	mov	r0, sp
 800614c:	f000 f83a 	bl	80061c4 <ai_network_data_params_get>
 8006150:	b938      	cbnz	r0, 8006162 <ai_network_create_and_init+0x32>
  return ai_platform_network_get_error(network);
 8006152:	6830      	ldr	r0, [r6, #0]
 8006154:	f000 f96a 	bl	800642c <ai_platform_network_get_error>
 8006158:	4604      	mov	r4, r0
}
 800615a:	4620      	mov	r0, r4
 800615c:	b00f      	add	sp, #60	@ 0x3c
 800615e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (activations) {
 8006162:	f1b8 0f00 	cmp.w	r8, #0
 8006166:	d11a      	bne.n	800619e <ai_network_create_and_init+0x6e>
    if (weights) {
 8006168:	bb3f      	cbnz	r7, 80061ba <ai_network_create_and_init+0x8a>
    if (ai_network_init(*network, &params) != true) {
 800616a:	4669      	mov	r1, sp
 800616c:	6830      	ldr	r0, [r6, #0]
 800616e:	f7ff fef3 	bl	8005f58 <ai_network_init>
 8006172:	b928      	cbnz	r0, 8006180 <ai_network_create_and_init+0x50>
  return ai_platform_network_get_error(network);
 8006174:	6830      	ldr	r0, [r6, #0]
 8006176:	f000 f959 	bl	800642c <ai_platform_network_get_error>
 800617a:	4604      	mov	r4, r0
 800617c:	fa5f f980 	uxtb.w	r9, r0
    return err;
 8006180:	f369 0407 	bfi	r4, r9, #0, #8
 8006184:	e7e9      	b.n	800615a <ai_network_create_and_init+0x2a>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8006186:	f858 2025 	ldr.w	r2, [r8, r5, lsl #2]
 800618a:	4629      	mov	r1, r5
        for (int idx=0;idx<params.map_activations.size;idx++)
 800618c:	3501      	adds	r5, #1
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 800618e:	a803      	add	r0, sp, #12
 8006190:	f000 f86e 	bl	8006270 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8006194:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8006198:	42ab      	cmp	r3, r5
 800619a:	dcf4      	bgt.n	8006186 <ai_network_create_and_init+0x56>
 800619c:	e7e4      	b.n	8006168 <ai_network_create_and_init+0x38>
 800619e:	464d      	mov	r5, r9
 80061a0:	e7f8      	b.n	8006194 <ai_network_create_and_init+0x64>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 80061a2:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
 80061a6:	4629      	mov	r1, r5
        for (int idx=0;idx<params.map_weights.size;idx++)
 80061a8:	3501      	adds	r5, #1
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 80061aa:	a801      	add	r0, sp, #4
 80061ac:	f000 f860 	bl	8006270 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 80061b0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80061b4:	42ab      	cmp	r3, r5
 80061b6:	dcf4      	bgt.n	80061a2 <ai_network_create_and_init+0x72>
 80061b8:	e7d7      	b.n	800616a <ai_network_create_and_init+0x3a>
 80061ba:	2500      	movs	r5, #0
 80061bc:	e7f8      	b.n	80061b0 <ai_network_create_and_init+0x80>

080061be <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 80061be:	f001 b9fb 	b.w	80075b8 <ai_platform_network_process>
	...

080061c4 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 80061c4:	b530      	push	{r4, r5, lr}
  if (!params) return false;
 80061c6:	4603      	mov	r3, r0
{
 80061c8:	b085      	sub	sp, #20
  if (!params) return false;
 80061ca:	b170      	cbz	r0, 80061ea <ai_network_data_params_get+0x26>
  
  const ai_buffer_array map_activations = 
 80061cc:	4c08      	ldr	r4, [pc, #32]	@ (80061f0 <ai_network_data_params_get+0x2c>)
 80061ce:	466a      	mov	r2, sp
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 80061d0:	ad02      	add	r5, sp, #8
  const ai_buffer_array map_activations = 
 80061d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80061d6:	e882 0003 	stmia.w	r2, {r0, r1}
  const ai_buffer_array map_weights = 
 80061da:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 80061de:	e885 0003 	stmia.w	r5, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 80061e2:	4629      	mov	r1, r5
 80061e4:	4618      	mov	r0, r3
 80061e6:	f000 f907 	bl	80063f8 <ai_platform_bind_network_params>
}
 80061ea:	b005      	add	sp, #20
 80061ec:	bd30      	pop	{r4, r5, pc}
 80061ee:	bf00      	nop
 80061f0:	0800eb60 	.word	0x0800eb60

080061f4 <ai_buffer_get_size>:
 80061f4:	b368      	cbz	r0, 8006252 <ai_buffer_get_size+0x5e>
 80061f6:	4b17      	ldr	r3, [pc, #92]	@ (8006254 <ai_buffer_get_size+0x60>)
 80061f8:	4a17      	ldr	r2, [pc, #92]	@ (8006258 <ai_buffer_get_size+0x64>)
 80061fa:	b410      	push	{r4}
 80061fc:	6804      	ldr	r4, [r0, #0]
 80061fe:	4023      	ands	r3, r4
 8006200:	4293      	cmp	r3, r2
 8006202:	d123      	bne.n	800624c <ai_buffer_get_size+0x58>
 8006204:	b311      	cbz	r1, 800624c <ai_buffer_get_size+0x58>
 8006206:	6984      	ldr	r4, [r0, #24]
 8006208:	6862      	ldr	r2, [r4, #4]
 800620a:	321f      	adds	r2, #31
 800620c:	f022 021f 	bic.w	r2, r2, #31
 8006210:	7d03      	ldrb	r3, [r0, #20]
 8006212:	6941      	ldr	r1, [r0, #20]
 8006214:	f1a3 0301 	sub.w	r3, r3, #1
 8006218:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800621c:	fab3 f383 	clz	r3, r3
 8006220:	095b      	lsrs	r3, r3, #5
 8006222:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8006226:	da0c      	bge.n	8006242 <ai_buffer_get_size+0x4e>
 8006228:	2b01      	cmp	r3, #1
 800622a:	d103      	bne.n	8006234 <ai_buffer_get_size+0x40>
 800622c:	2802      	cmp	r0, #2
 800622e:	f04f 0302 	mov.w	r3, #2
 8006232:	d006      	beq.n	8006242 <ai_buffer_get_size+0x4e>
 8006234:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8006238:	3301      	adds	r3, #1
 800623a:	4298      	cmp	r0, r3
 800623c:	fb01 f202 	mul.w	r2, r1, r2
 8006240:	d1f2      	bne.n	8006228 <ai_buffer_get_size+0x34>
 8006242:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8006246:	f85d 4b04 	ldr.w	r4, [sp], #4
 800624a:	4770      	bx	lr
 800624c:	6984      	ldr	r4, [r0, #24]
 800624e:	6862      	ldr	r2, [r4, #4]
 8006250:	e7de      	b.n	8006210 <ai_buffer_get_size+0x1c>
 8006252:	4770      	bx	lr
 8006254:	017fffff 	.word	0x017fffff
 8006258:	000400c0 	.word	0x000400c0

0800625c <ai_buffer_array_sane>:
 800625c:	b138      	cbz	r0, 800626e <ai_buffer_array_sane+0x12>
 800625e:	6843      	ldr	r3, [r0, #4]
 8006260:	b123      	cbz	r3, 800626c <ai_buffer_array_sane+0x10>
 8006262:	8840      	ldrh	r0, [r0, #2]
 8006264:	3800      	subs	r0, #0
 8006266:	bf18      	it	ne
 8006268:	2001      	movne	r0, #1
 800626a:	4770      	bx	lr
 800626c:	4618      	mov	r0, r3
 800626e:	4770      	bx	lr

08006270 <ai_buffer_array_item_set_address>:
 8006270:	b150      	cbz	r0, 8006288 <ai_buffer_array_item_set_address+0x18>
 8006272:	6843      	ldr	r3, [r0, #4]
 8006274:	b14b      	cbz	r3, 800628a <ai_buffer_array_item_set_address+0x1a>
 8006276:	8840      	ldrh	r0, [r0, #2]
 8006278:	b900      	cbnz	r0, 800627c <ai_buffer_array_item_set_address+0xc>
 800627a:	4770      	bx	lr
 800627c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8006280:	2001      	movs	r0, #1
 8006282:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006286:	604a      	str	r2, [r1, #4]
 8006288:	4770      	bx	lr
 800628a:	4618      	mov	r0, r3
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop

08006290 <_ai_platform_acquire_crc>:
 8006290:	2001      	movs	r0, #1
 8006292:	4770      	bx	lr

08006294 <_ai_platform_release_crc>:
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop

08006298 <ai_platform_get_weights_map>:
 8006298:	2900      	cmp	r1, #0
 800629a:	bf18      	it	ne
 800629c:	2800      	cmpne	r0, #0
 800629e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062a0:	bf0c      	ite	eq
 80062a2:	2401      	moveq	r4, #1
 80062a4:	2400      	movne	r4, #0
 80062a6:	2a00      	cmp	r2, #0
 80062a8:	bf08      	it	eq
 80062aa:	f044 0401 	orreq.w	r4, r4, #1
 80062ae:	b114      	cbz	r4, 80062b6 <ai_platform_get_weights_map+0x1e>
 80062b0:	2400      	movs	r4, #0
 80062b2:	4620      	mov	r0, r4
 80062b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062b6:	4616      	mov	r6, r2
 80062b8:	4b22      	ldr	r3, [pc, #136]	@ (8006344 <ai_platform_get_weights_map+0xac>)
 80062ba:	6812      	ldr	r2, [r2, #0]
 80062bc:	4605      	mov	r5, r0
 80062be:	460f      	mov	r7, r1
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d022      	beq.n	800630a <ai_platform_get_weights_map+0x72>
 80062c4:	6870      	ldr	r0, [r6, #4]
 80062c6:	2800      	cmp	r0, #0
 80062c8:	d0f2      	beq.n	80062b0 <ai_platform_get_weights_map+0x18>
 80062ca:	6806      	ldr	r6, [r0, #0]
 80062cc:	429e      	cmp	r6, r3
 80062ce:	d006      	beq.n	80062de <ai_platform_get_weights_map+0x46>
 80062d0:	f1a1 0401 	sub.w	r4, r1, #1
 80062d4:	6028      	str	r0, [r5, #0]
 80062d6:	fab4 f484 	clz	r4, r4
 80062da:	0964      	lsrs	r4, r4, #5
 80062dc:	e7e9      	b.n	80062b2 <ai_platform_get_weights_map+0x1a>
 80062de:	3d04      	subs	r5, #4
 80062e0:	4602      	mov	r2, r0
 80062e2:	4621      	mov	r1, r4
 80062e4:	e000      	b.n	80062e8 <ai_platform_get_weights_map+0x50>
 80062e6:	4619      	mov	r1, r3
 80062e8:	f852 3f04 	ldr.w	r3, [r2, #4]!
 80062ec:	42b3      	cmp	r3, r6
 80062ee:	d025      	beq.n	800633c <ai_platform_get_weights_map+0xa4>
 80062f0:	f845 3f04 	str.w	r3, [r5, #4]!
 80062f4:	1c4b      	adds	r3, r1, #1
 80062f6:	429f      	cmp	r7, r3
 80062f8:	d8f5      	bhi.n	80062e6 <ai_platform_get_weights_map+0x4e>
 80062fa:	d1da      	bne.n	80062b2 <ai_platform_get_weights_map+0x1a>
 80062fc:	3102      	adds	r1, #2
 80062fe:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8006302:	42b3      	cmp	r3, r6
 8006304:	d1d5      	bne.n	80062b2 <ai_platform_get_weights_map+0x1a>
 8006306:	2401      	movs	r4, #1
 8006308:	e7d3      	b.n	80062b2 <ai_platform_get_weights_map+0x1a>
 800630a:	1d30      	adds	r0, r6, #4
 800630c:	f7ff ffa6 	bl	800625c <ai_buffer_array_sane>
 8006310:	2800      	cmp	r0, #0
 8006312:	d0cd      	beq.n	80062b0 <ai_platform_get_weights_map+0x18>
 8006314:	88f3      	ldrh	r3, [r6, #6]
 8006316:	429f      	cmp	r7, r3
 8006318:	d1ca      	bne.n	80062b0 <ai_platform_get_weights_map+0x18>
 800631a:	3d04      	subs	r5, #4
 800631c:	4622      	mov	r2, r4
 800631e:	68b3      	ldr	r3, [r6, #8]
 8006320:	4423      	add	r3, r4
 8006322:	341c      	adds	r4, #28
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	b123      	cbz	r3, 8006332 <ai_platform_get_weights_map+0x9a>
 8006328:	3201      	adds	r2, #1
 800632a:	f845 3f04 	str.w	r3, [r5, #4]!
 800632e:	4297      	cmp	r7, r2
 8006330:	d8f5      	bhi.n	800631e <ai_platform_get_weights_map+0x86>
 8006332:	1abc      	subs	r4, r7, r2
 8006334:	fab4 f484 	clz	r4, r4
 8006338:	0964      	lsrs	r4, r4, #5
 800633a:	e7ba      	b.n	80062b2 <ai_platform_get_weights_map+0x1a>
 800633c:	428f      	cmp	r7, r1
 800633e:	d1b8      	bne.n	80062b2 <ai_platform_get_weights_map+0x1a>
 8006340:	e7e1      	b.n	8006306 <ai_platform_get_weights_map+0x6e>
 8006342:	bf00      	nop
 8006344:	a1facade 	.word	0xa1facade

08006348 <ai_platform_get_activations_map>:
 8006348:	2900      	cmp	r1, #0
 800634a:	bf18      	it	ne
 800634c:	2800      	cmpne	r0, #0
 800634e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006350:	bf0c      	ite	eq
 8006352:	2401      	moveq	r4, #1
 8006354:	2400      	movne	r4, #0
 8006356:	2a00      	cmp	r2, #0
 8006358:	bf08      	it	eq
 800635a:	f044 0401 	orreq.w	r4, r4, #1
 800635e:	b114      	cbz	r4, 8006366 <ai_platform_get_activations_map+0x1e>
 8006360:	2400      	movs	r4, #0
 8006362:	4620      	mov	r0, r4
 8006364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006366:	4616      	mov	r6, r2
 8006368:	4b22      	ldr	r3, [pc, #136]	@ (80063f4 <ai_platform_get_activations_map+0xac>)
 800636a:	6812      	ldr	r2, [r2, #0]
 800636c:	4605      	mov	r5, r0
 800636e:	460f      	mov	r7, r1
 8006370:	429a      	cmp	r2, r3
 8006372:	d022      	beq.n	80063ba <ai_platform_get_activations_map+0x72>
 8006374:	6a30      	ldr	r0, [r6, #32]
 8006376:	2800      	cmp	r0, #0
 8006378:	d0f2      	beq.n	8006360 <ai_platform_get_activations_map+0x18>
 800637a:	6806      	ldr	r6, [r0, #0]
 800637c:	429e      	cmp	r6, r3
 800637e:	d006      	beq.n	800638e <ai_platform_get_activations_map+0x46>
 8006380:	f1a1 0401 	sub.w	r4, r1, #1
 8006384:	6028      	str	r0, [r5, #0]
 8006386:	fab4 f484 	clz	r4, r4
 800638a:	0964      	lsrs	r4, r4, #5
 800638c:	e7e9      	b.n	8006362 <ai_platform_get_activations_map+0x1a>
 800638e:	3d04      	subs	r5, #4
 8006390:	4602      	mov	r2, r0
 8006392:	4621      	mov	r1, r4
 8006394:	e000      	b.n	8006398 <ai_platform_get_activations_map+0x50>
 8006396:	4619      	mov	r1, r3
 8006398:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800639c:	42b3      	cmp	r3, r6
 800639e:	d026      	beq.n	80063ee <ai_platform_get_activations_map+0xa6>
 80063a0:	f845 3f04 	str.w	r3, [r5, #4]!
 80063a4:	1c4b      	adds	r3, r1, #1
 80063a6:	429f      	cmp	r7, r3
 80063a8:	d8f5      	bhi.n	8006396 <ai_platform_get_activations_map+0x4e>
 80063aa:	d1da      	bne.n	8006362 <ai_platform_get_activations_map+0x1a>
 80063ac:	3102      	adds	r1, #2
 80063ae:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 80063b2:	42b3      	cmp	r3, r6
 80063b4:	d1d5      	bne.n	8006362 <ai_platform_get_activations_map+0x1a>
 80063b6:	2401      	movs	r4, #1
 80063b8:	e7d3      	b.n	8006362 <ai_platform_get_activations_map+0x1a>
 80063ba:	f106 000c 	add.w	r0, r6, #12
 80063be:	f7ff ff4d 	bl	800625c <ai_buffer_array_sane>
 80063c2:	2800      	cmp	r0, #0
 80063c4:	d0cc      	beq.n	8006360 <ai_platform_get_activations_map+0x18>
 80063c6:	89f3      	ldrh	r3, [r6, #14]
 80063c8:	429f      	cmp	r7, r3
 80063ca:	d1c9      	bne.n	8006360 <ai_platform_get_activations_map+0x18>
 80063cc:	3d04      	subs	r5, #4
 80063ce:	4622      	mov	r2, r4
 80063d0:	6933      	ldr	r3, [r6, #16]
 80063d2:	4423      	add	r3, r4
 80063d4:	341c      	adds	r4, #28
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	b123      	cbz	r3, 80063e4 <ai_platform_get_activations_map+0x9c>
 80063da:	3201      	adds	r2, #1
 80063dc:	f845 3f04 	str.w	r3, [r5, #4]!
 80063e0:	4297      	cmp	r7, r2
 80063e2:	d8f5      	bhi.n	80063d0 <ai_platform_get_activations_map+0x88>
 80063e4:	1abc      	subs	r4, r7, r2
 80063e6:	fab4 f484 	clz	r4, r4
 80063ea:	0964      	lsrs	r4, r4, #5
 80063ec:	e7b9      	b.n	8006362 <ai_platform_get_activations_map+0x1a>
 80063ee:	428f      	cmp	r7, r1
 80063f0:	d1b7      	bne.n	8006362 <ai_platform_get_activations_map+0x1a>
 80063f2:	e7e0      	b.n	80063b6 <ai_platform_get_activations_map+0x6e>
 80063f4:	a1facade 	.word	0xa1facade

080063f8 <ai_platform_bind_network_params>:
 80063f8:	2a00      	cmp	r2, #0
 80063fa:	bf18      	it	ne
 80063fc:	2900      	cmpne	r1, #0
 80063fe:	d010      	beq.n	8006422 <ai_platform_bind_network_params+0x2a>
 8006400:	b178      	cbz	r0, 8006422 <ai_platform_bind_network_params+0x2a>
 8006402:	4603      	mov	r3, r0
 8006404:	4808      	ldr	r0, [pc, #32]	@ (8006428 <ai_platform_bind_network_params+0x30>)
 8006406:	f103 0c0c 	add.w	ip, r3, #12
 800640a:	f843 0b04 	str.w	r0, [r3], #4
 800640e:	c903      	ldmia	r1, {r0, r1}
 8006410:	e883 0003 	stmia.w	r3, {r0, r1}
 8006414:	2301      	movs	r3, #1
 8006416:	e892 0003 	ldmia.w	r2, {r0, r1}
 800641a:	e88c 0003 	stmia.w	ip, {r0, r1}
 800641e:	4618      	mov	r0, r3
 8006420:	4770      	bx	lr
 8006422:	2300      	movs	r3, #0
 8006424:	4618      	mov	r0, r3
 8006426:	4770      	bx	lr
 8006428:	a1facade 	.word	0xa1facade

0800642c <ai_platform_network_get_error>:
 800642c:	b510      	push	{r4, lr}
 800642e:	2800      	cmp	r0, #0
 8006430:	d03f      	beq.n	80064b2 <ai_platform_network_get_error+0x86>
 8006432:	4b7d      	ldr	r3, [pc, #500]	@ (8006628 <ai_platform_network_get_error+0x1fc>)
 8006434:	4604      	mov	r4, r0
 8006436:	6802      	ldr	r2, [r0, #0]
 8006438:	429a      	cmp	r2, r3
 800643a:	d13a      	bne.n	80064b2 <ai_platform_network_get_error+0x86>
 800643c:	f7ff ff28 	bl	8006290 <_ai_platform_acquire_crc>
 8006440:	4b7a      	ldr	r3, [pc, #488]	@ (800662c <ai_platform_network_get_error+0x200>)
 8006442:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800644c:	189a      	adds	r2, r3, r2
 800644e:	2a01      	cmp	r2, #1
 8006450:	f240 8086 	bls.w	8006560 <ai_platform_network_get_error+0x134>
 8006454:	f240 4249 	movw	r2, #1097	@ 0x449
 8006458:	4293      	cmp	r3, r2
 800645a:	f000 8081 	beq.w	8006560 <ai_platform_network_get_error+0x134>
 800645e:	4a74      	ldr	r2, [pc, #464]	@ (8006630 <ai_platform_network_get_error+0x204>)
 8006460:	6813      	ldr	r3, [r2, #0]
 8006462:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006466:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 800646a:	f000 8087 	beq.w	800657c <ai_platform_network_get_error+0x150>
 800646e:	6813      	ldr	r3, [r2, #0]
 8006470:	f240 4183 	movw	r1, #1155	@ 0x483
 8006474:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006478:	428b      	cmp	r3, r1
 800647a:	f000 80a9 	beq.w	80065d0 <ai_platform_network_get_error+0x1a4>
 800647e:	6813      	ldr	r3, [r2, #0]
 8006480:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006484:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8006488:	f000 80c0 	beq.w	800660c <ai_platform_network_get_error+0x1e0>
 800648c:	6813      	ldr	r3, [r2, #0]
 800648e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006492:	2b00      	cmp	r3, #0
 8006494:	f040 8082 	bne.w	800659c <ai_platform_network_get_error+0x170>
 8006498:	4a66      	ldr	r2, [pc, #408]	@ (8006634 <ai_platform_network_get_error+0x208>)
 800649a:	2301      	movs	r3, #1
 800649c:	6093      	str	r3, [r2, #8]
 800649e:	6893      	ldr	r3, [r2, #8]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d1fc      	bne.n	800649e <ai_platform_network_get_error+0x72>
 80064a4:	4964      	ldr	r1, [pc, #400]	@ (8006638 <ai_platform_network_get_error+0x20c>)
 80064a6:	4b65      	ldr	r3, [pc, #404]	@ (800663c <ai_platform_network_get_error+0x210>)
 80064a8:	6011      	str	r1, [r2, #0]
 80064aa:	6812      	ldr	r2, [r2, #0]
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d075      	beq.n	800659c <ai_platform_network_get_error+0x170>
 80064b0:	e7fe      	b.n	80064b0 <ai_platform_network_get_error+0x84>
 80064b2:	f7ff feed 	bl	8006290 <_ai_platform_acquire_crc>
 80064b6:	4b5d      	ldr	r3, [pc, #372]	@ (800662c <ai_platform_network_get_error+0x200>)
 80064b8:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80064c2:	185a      	adds	r2, r3, r1
 80064c4:	2a01      	cmp	r2, #1
 80064c6:	d929      	bls.n	800651c <ai_platform_network_get_error+0xf0>
 80064c8:	f240 4249 	movw	r2, #1097	@ 0x449
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d025      	beq.n	800651c <ai_platform_network_get_error+0xf0>
 80064d0:	4a57      	ldr	r2, [pc, #348]	@ (8006630 <ai_platform_network_get_error+0x204>)
 80064d2:	6813      	ldr	r3, [r2, #0]
 80064d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80064d8:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 80064dc:	d02b      	beq.n	8006536 <ai_platform_network_get_error+0x10a>
 80064de:	6813      	ldr	r3, [r2, #0]
 80064e0:	f240 4183 	movw	r1, #1155	@ 0x483
 80064e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80064e8:	428b      	cmp	r3, r1
 80064ea:	d060      	beq.n	80065ae <ai_platform_network_get_error+0x182>
 80064ec:	6813      	ldr	r3, [r2, #0]
 80064ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80064f2:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 80064f6:	d07c      	beq.n	80065f2 <ai_platform_network_get_error+0x1c6>
 80064f8:	6813      	ldr	r3, [r2, #0]
 80064fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d129      	bne.n	8006556 <ai_platform_network_get_error+0x12a>
 8006502:	4a4c      	ldr	r2, [pc, #304]	@ (8006634 <ai_platform_network_get_error+0x208>)
 8006504:	2301      	movs	r3, #1
 8006506:	6093      	str	r3, [r2, #8]
 8006508:	6893      	ldr	r3, [r2, #8]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1fc      	bne.n	8006508 <ai_platform_network_get_error+0xdc>
 800650e:	494a      	ldr	r1, [pc, #296]	@ (8006638 <ai_platform_network_get_error+0x20c>)
 8006510:	4b4a      	ldr	r3, [pc, #296]	@ (800663c <ai_platform_network_get_error+0x210>)
 8006512:	6011      	str	r1, [r2, #0]
 8006514:	6812      	ldr	r2, [r2, #0]
 8006516:	429a      	cmp	r2, r3
 8006518:	d01d      	beq.n	8006556 <ai_platform_network_get_error+0x12a>
 800651a:	e7fe      	b.n	800651a <ai_platform_network_get_error+0xee>
 800651c:	4a45      	ldr	r2, [pc, #276]	@ (8006634 <ai_platform_network_get_error+0x208>)
 800651e:	2301      	movs	r3, #1
 8006520:	6093      	str	r3, [r2, #8]
 8006522:	6893      	ldr	r3, [r2, #8]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d1fc      	bne.n	8006522 <ai_platform_network_get_error+0xf6>
 8006528:	4943      	ldr	r1, [pc, #268]	@ (8006638 <ai_platform_network_get_error+0x20c>)
 800652a:	4b44      	ldr	r3, [pc, #272]	@ (800663c <ai_platform_network_get_error+0x210>)
 800652c:	6011      	str	r1, [r2, #0]
 800652e:	6812      	ldr	r2, [r2, #0]
 8006530:	429a      	cmp	r2, r3
 8006532:	d010      	beq.n	8006556 <ai_platform_network_get_error+0x12a>
 8006534:	e7fe      	b.n	8006534 <ai_platform_network_get_error+0x108>
 8006536:	4a42      	ldr	r2, [pc, #264]	@ (8006640 <ai_platform_network_get_error+0x214>)
 8006538:	2301      	movs	r3, #1
 800653a:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800653e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1fb      	bne.n	800653e <ai_platform_network_get_error+0x112>
 8006546:	493c      	ldr	r1, [pc, #240]	@ (8006638 <ai_platform_network_get_error+0x20c>)
 8006548:	4b3c      	ldr	r3, [pc, #240]	@ (800663c <ai_platform_network_get_error+0x210>)
 800654a:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 800654e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006552:	429a      	cmp	r2, r3
 8006554:	d111      	bne.n	800657a <ai_platform_network_get_error+0x14e>
 8006556:	f7ff fe9d 	bl	8006294 <_ai_platform_release_crc>
 800655a:	f241 0010 	movw	r0, #4112	@ 0x1010
 800655e:	bd10      	pop	{r4, pc}
 8006560:	4a34      	ldr	r2, [pc, #208]	@ (8006634 <ai_platform_network_get_error+0x208>)
 8006562:	2301      	movs	r3, #1
 8006564:	6093      	str	r3, [r2, #8]
 8006566:	6893      	ldr	r3, [r2, #8]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d1fc      	bne.n	8006566 <ai_platform_network_get_error+0x13a>
 800656c:	4932      	ldr	r1, [pc, #200]	@ (8006638 <ai_platform_network_get_error+0x20c>)
 800656e:	4b33      	ldr	r3, [pc, #204]	@ (800663c <ai_platform_network_get_error+0x210>)
 8006570:	6011      	str	r1, [r2, #0]
 8006572:	6812      	ldr	r2, [r2, #0]
 8006574:	429a      	cmp	r2, r3
 8006576:	d011      	beq.n	800659c <ai_platform_network_get_error+0x170>
 8006578:	e7fe      	b.n	8006578 <ai_platform_network_get_error+0x14c>
 800657a:	e7fe      	b.n	800657a <ai_platform_network_get_error+0x14e>
 800657c:	4a30      	ldr	r2, [pc, #192]	@ (8006640 <ai_platform_network_get_error+0x214>)
 800657e:	2301      	movs	r3, #1
 8006580:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006584:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1fb      	bne.n	8006584 <ai_platform_network_get_error+0x158>
 800658c:	492a      	ldr	r1, [pc, #168]	@ (8006638 <ai_platform_network_get_error+0x20c>)
 800658e:	4b2b      	ldr	r3, [pc, #172]	@ (800663c <ai_platform_network_get_error+0x210>)
 8006590:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8006594:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006598:	429a      	cmp	r2, r3
 800659a:	d107      	bne.n	80065ac <ai_platform_network_get_error+0x180>
 800659c:	f7ff fe7a 	bl	8006294 <_ai_platform_release_crc>
 80065a0:	f104 0010 	add.w	r0, r4, #16
 80065a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065a8:	f001 bae4 	b.w	8007b74 <core_get_error>
 80065ac:	e7fe      	b.n	80065ac <ai_platform_network_get_error+0x180>
 80065ae:	4a24      	ldr	r2, [pc, #144]	@ (8006640 <ai_platform_network_get_error+0x214>)
 80065b0:	2301      	movs	r3, #1
 80065b2:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80065b6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d1fb      	bne.n	80065b6 <ai_platform_network_get_error+0x18a>
 80065be:	491e      	ldr	r1, [pc, #120]	@ (8006638 <ai_platform_network_get_error+0x20c>)
 80065c0:	4b1e      	ldr	r3, [pc, #120]	@ (800663c <ai_platform_network_get_error+0x210>)
 80065c2:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 80065c6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d0c3      	beq.n	8006556 <ai_platform_network_get_error+0x12a>
 80065ce:	e7fe      	b.n	80065ce <ai_platform_network_get_error+0x1a2>
 80065d0:	4a1b      	ldr	r2, [pc, #108]	@ (8006640 <ai_platform_network_get_error+0x214>)
 80065d2:	2301      	movs	r3, #1
 80065d4:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80065d8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1fb      	bne.n	80065d8 <ai_platform_network_get_error+0x1ac>
 80065e0:	4915      	ldr	r1, [pc, #84]	@ (8006638 <ai_platform_network_get_error+0x20c>)
 80065e2:	4b16      	ldr	r3, [pc, #88]	@ (800663c <ai_platform_network_get_error+0x210>)
 80065e4:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 80065e8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d0d5      	beq.n	800659c <ai_platform_network_get_error+0x170>
 80065f0:	e7fe      	b.n	80065f0 <ai_platform_network_get_error+0x1c4>
 80065f2:	4a10      	ldr	r2, [pc, #64]	@ (8006634 <ai_platform_network_get_error+0x208>)
 80065f4:	2301      	movs	r3, #1
 80065f6:	6093      	str	r3, [r2, #8]
 80065f8:	6893      	ldr	r3, [r2, #8]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d1fc      	bne.n	80065f8 <ai_platform_network_get_error+0x1cc>
 80065fe:	490e      	ldr	r1, [pc, #56]	@ (8006638 <ai_platform_network_get_error+0x20c>)
 8006600:	4b0e      	ldr	r3, [pc, #56]	@ (800663c <ai_platform_network_get_error+0x210>)
 8006602:	6011      	str	r1, [r2, #0]
 8006604:	6812      	ldr	r2, [r2, #0]
 8006606:	429a      	cmp	r2, r3
 8006608:	d0a5      	beq.n	8006556 <ai_platform_network_get_error+0x12a>
 800660a:	e7fe      	b.n	800660a <ai_platform_network_get_error+0x1de>
 800660c:	4a09      	ldr	r2, [pc, #36]	@ (8006634 <ai_platform_network_get_error+0x208>)
 800660e:	2301      	movs	r3, #1
 8006610:	6093      	str	r3, [r2, #8]
 8006612:	6893      	ldr	r3, [r2, #8]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d1fc      	bne.n	8006612 <ai_platform_network_get_error+0x1e6>
 8006618:	4907      	ldr	r1, [pc, #28]	@ (8006638 <ai_platform_network_get_error+0x20c>)
 800661a:	4b08      	ldr	r3, [pc, #32]	@ (800663c <ai_platform_network_get_error+0x210>)
 800661c:	6011      	str	r1, [r2, #0]
 800661e:	6812      	ldr	r2, [r2, #0]
 8006620:	429a      	cmp	r2, r3
 8006622:	d0bb      	beq.n	800659c <ai_platform_network_get_error+0x170>
 8006624:	e7fe      	b.n	8006624 <ai_platform_network_get_error+0x1f8>
 8006626:	bf00      	nop
 8006628:	a1c00100 	.word	0xa1c00100
 800662c:	e0042000 	.word	0xe0042000
 8006630:	5c001000 	.word	0x5c001000
 8006634:	40023000 	.word	0x40023000
 8006638:	f407a5c2 	.word	0xf407a5c2
 800663c:	b5e8b5cd 	.word	0xb5e8b5cd
 8006640:	58024000 	.word	0x58024000

08006644 <ai_platform_network_set_error>:
 8006644:	b110      	cbz	r0, 800664c <ai_platform_network_set_error+0x8>
 8006646:	3010      	adds	r0, #16
 8006648:	f001 ba9a 	b.w	8007b80 <core_set_error>
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop

08006650 <ai_platform_inputs_get>:
 8006650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006654:	b085      	sub	sp, #20
 8006656:	9102      	str	r1, [sp, #8]
 8006658:	2800      	cmp	r0, #0
 800665a:	f000 8093 	beq.w	8006784 <ai_platform_inputs_get+0x134>
 800665e:	4baa      	ldr	r3, [pc, #680]	@ (8006908 <ai_platform_inputs_get+0x2b8>)
 8006660:	4681      	mov	r9, r0
 8006662:	6802      	ldr	r2, [r0, #0]
 8006664:	429a      	cmp	r2, r3
 8006666:	f040 808d 	bne.w	8006784 <ai_platform_inputs_get+0x134>
 800666a:	f7ff fe11 	bl	8006290 <_ai_platform_acquire_crc>
 800666e:	4ba7      	ldr	r3, [pc, #668]	@ (800690c <ai_platform_inputs_get+0x2bc>)
 8006670:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800667a:	189a      	adds	r2, r3, r2
 800667c:	2a01      	cmp	r2, #1
 800667e:	f240 80da 	bls.w	8006836 <ai_platform_inputs_get+0x1e6>
 8006682:	f240 4249 	movw	r2, #1097	@ 0x449
 8006686:	4293      	cmp	r3, r2
 8006688:	f000 80d5 	beq.w	8006836 <ai_platform_inputs_get+0x1e6>
 800668c:	4aa0      	ldr	r2, [pc, #640]	@ (8006910 <ai_platform_inputs_get+0x2c0>)
 800668e:	6813      	ldr	r3, [r2, #0]
 8006690:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006694:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8006698:	f000 80dc 	beq.w	8006854 <ai_platform_inputs_get+0x204>
 800669c:	6813      	ldr	r3, [r2, #0]
 800669e:	f240 4183 	movw	r1, #1155	@ 0x483
 80066a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066a6:	428b      	cmp	r3, r1
 80066a8:	f000 810e 	beq.w	80068c8 <ai_platform_inputs_get+0x278>
 80066ac:	6813      	ldr	r3, [r2, #0]
 80066ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066b2:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 80066b6:	f000 8143 	beq.w	8006940 <ai_platform_inputs_get+0x2f0>
 80066ba:	6813      	ldr	r3, [r2, #0]
 80066bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	f000 8113 	beq.w	80068ec <ai_platform_inputs_get+0x29c>
 80066c6:	f7ff fde5 	bl	8006294 <_ai_platform_release_crc>
 80066ca:	f8b9 302c 	ldrh.w	r3, [r9, #44]	@ 0x2c
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f000 80d2 	beq.w	8006878 <ai_platform_inputs_get+0x228>
 80066d4:	f8d9 a030 	ldr.w	sl, [r9, #48]	@ 0x30
 80066d8:	f1ba 0f00 	cmp.w	sl, #0
 80066dc:	f000 80cc 	beq.w	8006878 <ai_platform_inputs_get+0x228>
 80066e0:	2100      	movs	r1, #0
 80066e2:	f8cd 900c 	str.w	r9, [sp, #12]
 80066e6:	460d      	mov	r5, r1
 80066e8:	4689      	mov	r9, r1
 80066ea:	e016      	b.n	800671a <ai_platform_inputs_get+0xca>
 80066ec:	9a01      	ldr	r2, [sp, #4]
 80066ee:	2301      	movs	r3, #1
 80066f0:	f848 3002 	str.w	r3, [r8, r2]
 80066f4:	69b2      	ldr	r2, [r6, #24]
 80066f6:	f04f 0301 	mov.w	r3, #1
 80066fa:	6856      	ldr	r6, [r2, #4]
 80066fc:	3501      	adds	r5, #1
 80066fe:	f109 091c 	add.w	r9, r9, #28
 8006702:	7523      	strb	r3, [r4, #20]
 8006704:	2300      	movs	r3, #0
 8006706:	6962      	ldr	r2, [r4, #20]
 8006708:	60a7      	str	r7, [r4, #8]
 800670a:	f36b 221f 	bfi	r2, fp, #8, #24
 800670e:	6126      	str	r6, [r4, #16]
 8006710:	61a1      	str	r1, [r4, #24]
 8006712:	60e3      	str	r3, [r4, #12]
 8006714:	6162      	str	r2, [r4, #20]
 8006716:	e9c4 0c00 	strd	r0, ip, [r4]
 800671a:	f8ba 3000 	ldrh.w	r3, [sl]
 800671e:	b2ac      	uxth	r4, r5
 8006720:	42ab      	cmp	r3, r5
 8006722:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 8006726:	9301      	str	r3, [sp, #4]
 8006728:	f240 80b5 	bls.w	8006896 <ai_platform_inputs_get+0x246>
 800672c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006730:	2b00      	cmp	r3, #0
 8006732:	f000 80b0 	beq.w	8006896 <ai_platform_inputs_get+0x246>
 8006736:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800673a:	2e00      	cmp	r6, #0
 800673c:	f000 80ab 	beq.w	8006896 <ai_platform_inputs_get+0x246>
 8006740:	f8da 3008 	ldr.w	r3, [sl, #8]
 8006744:	69b2      	ldr	r2, [r6, #24]
 8006746:	68f1      	ldr	r1, [r6, #12]
 8006748:	6810      	ldr	r0, [r2, #0]
 800674a:	9100      	str	r1, [sp, #0]
 800674c:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 8006750:	68b3      	ldr	r3, [r6, #8]
 8006752:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8006756:	444c      	add	r4, r9
 8006758:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800675c:	f005 f918 	bl	800b990 <ai_array_to_buffer_fmt>
 8006760:	69b2      	ldr	r2, [r6, #24]
 8006762:	9900      	ldr	r1, [sp, #0]
 8006764:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8006768:	2f00      	cmp	r7, #0
 800676a:	d0c4      	beq.n	80066f6 <ai_platform_inputs_get+0xa6>
 800676c:	2200      	movs	r2, #0
 800676e:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 8006772:	6832      	ldr	r2, [r6, #0]
 8006774:	607a      	str	r2, [r7, #4]
 8006776:	b112      	cbz	r2, 800677e <ai_platform_inputs_get+0x12e>
 8006778:	8852      	ldrh	r2, [r2, #2]
 800677a:	2a00      	cmp	r2, #0
 800677c:	d1b6      	bne.n	80066ec <ai_platform_inputs_get+0x9c>
 800677e:	69b2      	ldr	r2, [r6, #24]
 8006780:	2700      	movs	r7, #0
 8006782:	e7b8      	b.n	80066f6 <ai_platform_inputs_get+0xa6>
 8006784:	f7ff fd84 	bl	8006290 <_ai_platform_acquire_crc>
 8006788:	4b60      	ldr	r3, [pc, #384]	@ (800690c <ai_platform_inputs_get+0x2bc>)
 800678a:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006794:	185a      	adds	r2, r3, r1
 8006796:	2a01      	cmp	r2, #1
 8006798:	d92a      	bls.n	80067f0 <ai_platform_inputs_get+0x1a0>
 800679a:	f240 4249 	movw	r2, #1097	@ 0x449
 800679e:	4293      	cmp	r3, r2
 80067a0:	d026      	beq.n	80067f0 <ai_platform_inputs_get+0x1a0>
 80067a2:	4a5b      	ldr	r2, [pc, #364]	@ (8006910 <ai_platform_inputs_get+0x2c0>)
 80067a4:	6813      	ldr	r3, [r2, #0]
 80067a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80067aa:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 80067ae:	d02c      	beq.n	800680a <ai_platform_inputs_get+0x1ba>
 80067b0:	6813      	ldr	r3, [r2, #0]
 80067b2:	f240 4183 	movw	r1, #1155	@ 0x483
 80067b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80067ba:	428b      	cmp	r3, r1
 80067bc:	d073      	beq.n	80068a6 <ai_platform_inputs_get+0x256>
 80067be:	6813      	ldr	r3, [r2, #0]
 80067c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80067c4:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 80067c8:	f000 80ac 	beq.w	8006924 <ai_platform_inputs_get+0x2d4>
 80067cc:	6813      	ldr	r3, [r2, #0]
 80067ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d129      	bne.n	800682a <ai_platform_inputs_get+0x1da>
 80067d6:	4a4f      	ldr	r2, [pc, #316]	@ (8006914 <ai_platform_inputs_get+0x2c4>)
 80067d8:	2301      	movs	r3, #1
 80067da:	6093      	str	r3, [r2, #8]
 80067dc:	6893      	ldr	r3, [r2, #8]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d1fc      	bne.n	80067dc <ai_platform_inputs_get+0x18c>
 80067e2:	494d      	ldr	r1, [pc, #308]	@ (8006918 <ai_platform_inputs_get+0x2c8>)
 80067e4:	4b4d      	ldr	r3, [pc, #308]	@ (800691c <ai_platform_inputs_get+0x2cc>)
 80067e6:	6011      	str	r1, [r2, #0]
 80067e8:	6812      	ldr	r2, [r2, #0]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d01d      	beq.n	800682a <ai_platform_inputs_get+0x1da>
 80067ee:	e7fe      	b.n	80067ee <ai_platform_inputs_get+0x19e>
 80067f0:	4a48      	ldr	r2, [pc, #288]	@ (8006914 <ai_platform_inputs_get+0x2c4>)
 80067f2:	2301      	movs	r3, #1
 80067f4:	6093      	str	r3, [r2, #8]
 80067f6:	6893      	ldr	r3, [r2, #8]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d1fc      	bne.n	80067f6 <ai_platform_inputs_get+0x1a6>
 80067fc:	4946      	ldr	r1, [pc, #280]	@ (8006918 <ai_platform_inputs_get+0x2c8>)
 80067fe:	4b47      	ldr	r3, [pc, #284]	@ (800691c <ai_platform_inputs_get+0x2cc>)
 8006800:	6011      	str	r1, [r2, #0]
 8006802:	6812      	ldr	r2, [r2, #0]
 8006804:	429a      	cmp	r2, r3
 8006806:	d010      	beq.n	800682a <ai_platform_inputs_get+0x1da>
 8006808:	e7fe      	b.n	8006808 <ai_platform_inputs_get+0x1b8>
 800680a:	4a45      	ldr	r2, [pc, #276]	@ (8006920 <ai_platform_inputs_get+0x2d0>)
 800680c:	2301      	movs	r3, #1
 800680e:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006812:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006816:	2b00      	cmp	r3, #0
 8006818:	d1fb      	bne.n	8006812 <ai_platform_inputs_get+0x1c2>
 800681a:	493f      	ldr	r1, [pc, #252]	@ (8006918 <ai_platform_inputs_get+0x2c8>)
 800681c:	4b3f      	ldr	r3, [pc, #252]	@ (800691c <ai_platform_inputs_get+0x2cc>)
 800681e:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8006822:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006826:	429a      	cmp	r2, r3
 8006828:	d113      	bne.n	8006852 <ai_platform_inputs_get+0x202>
 800682a:	f7ff fd33 	bl	8006294 <_ai_platform_release_crc>
 800682e:	2000      	movs	r0, #0
 8006830:	b005      	add	sp, #20
 8006832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006836:	4a37      	ldr	r2, [pc, #220]	@ (8006914 <ai_platform_inputs_get+0x2c4>)
 8006838:	2301      	movs	r3, #1
 800683a:	6093      	str	r3, [r2, #8]
 800683c:	6893      	ldr	r3, [r2, #8]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d1fc      	bne.n	800683c <ai_platform_inputs_get+0x1ec>
 8006842:	4b35      	ldr	r3, [pc, #212]	@ (8006918 <ai_platform_inputs_get+0x2c8>)
 8006844:	6013      	str	r3, [r2, #0]
 8006846:	4b35      	ldr	r3, [pc, #212]	@ (800691c <ai_platform_inputs_get+0x2cc>)
 8006848:	6812      	ldr	r2, [r2, #0]
 800684a:	429a      	cmp	r2, r3
 800684c:	f43f af3b 	beq.w	80066c6 <ai_platform_inputs_get+0x76>
 8006850:	e7fe      	b.n	8006850 <ai_platform_inputs_get+0x200>
 8006852:	e7fe      	b.n	8006852 <ai_platform_inputs_get+0x202>
 8006854:	4a32      	ldr	r2, [pc, #200]	@ (8006920 <ai_platform_inputs_get+0x2d0>)
 8006856:	2301      	movs	r3, #1
 8006858:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800685c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006860:	2b00      	cmp	r3, #0
 8006862:	d1fb      	bne.n	800685c <ai_platform_inputs_get+0x20c>
 8006864:	4b2c      	ldr	r3, [pc, #176]	@ (8006918 <ai_platform_inputs_get+0x2c8>)
 8006866:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 800686a:	4b2c      	ldr	r3, [pc, #176]	@ (800691c <ai_platform_inputs_get+0x2cc>)
 800686c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006870:	429a      	cmp	r2, r3
 8006872:	f43f af28 	beq.w	80066c6 <ai_platform_inputs_get+0x76>
 8006876:	e7fe      	b.n	8006876 <ai_platform_inputs_get+0x226>
 8006878:	2400      	movs	r4, #0
 800687a:	2218      	movs	r2, #24
 800687c:	2111      	movs	r1, #17
 800687e:	f109 0010 	add.w	r0, r9, #16
 8006882:	f001 f97d 	bl	8007b80 <core_set_error>
 8006886:	4620      	mov	r0, r4
 8006888:	9b02      	ldr	r3, [sp, #8]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d0d0      	beq.n	8006830 <ai_platform_inputs_get+0x1e0>
 800688e:	801c      	strh	r4, [r3, #0]
 8006890:	b005      	add	sp, #20
 8006892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006896:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800689a:	2c00      	cmp	r4, #0
 800689c:	d0ec      	beq.n	8006878 <ai_platform_inputs_get+0x228>
 800689e:	f8da 3008 	ldr.w	r3, [sl, #8]
 80068a2:	6858      	ldr	r0, [r3, #4]
 80068a4:	e7f0      	b.n	8006888 <ai_platform_inputs_get+0x238>
 80068a6:	4a1e      	ldr	r2, [pc, #120]	@ (8006920 <ai_platform_inputs_get+0x2d0>)
 80068a8:	2301      	movs	r3, #1
 80068aa:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80068ae:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1fb      	bne.n	80068ae <ai_platform_inputs_get+0x25e>
 80068b6:	4918      	ldr	r1, [pc, #96]	@ (8006918 <ai_platform_inputs_get+0x2c8>)
 80068b8:	4b18      	ldr	r3, [pc, #96]	@ (800691c <ai_platform_inputs_get+0x2cc>)
 80068ba:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 80068be:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d0b1      	beq.n	800682a <ai_platform_inputs_get+0x1da>
 80068c6:	e7fe      	b.n	80068c6 <ai_platform_inputs_get+0x276>
 80068c8:	4a15      	ldr	r2, [pc, #84]	@ (8006920 <ai_platform_inputs_get+0x2d0>)
 80068ca:	2301      	movs	r3, #1
 80068cc:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80068d0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d1fb      	bne.n	80068d0 <ai_platform_inputs_get+0x280>
 80068d8:	4b0f      	ldr	r3, [pc, #60]	@ (8006918 <ai_platform_inputs_get+0x2c8>)
 80068da:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 80068de:	4b0f      	ldr	r3, [pc, #60]	@ (800691c <ai_platform_inputs_get+0x2cc>)
 80068e0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 80068e4:	429a      	cmp	r2, r3
 80068e6:	f43f aeee 	beq.w	80066c6 <ai_platform_inputs_get+0x76>
 80068ea:	e7fe      	b.n	80068ea <ai_platform_inputs_get+0x29a>
 80068ec:	4a09      	ldr	r2, [pc, #36]	@ (8006914 <ai_platform_inputs_get+0x2c4>)
 80068ee:	2301      	movs	r3, #1
 80068f0:	6093      	str	r3, [r2, #8]
 80068f2:	6893      	ldr	r3, [r2, #8]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d1fc      	bne.n	80068f2 <ai_platform_inputs_get+0x2a2>
 80068f8:	4b07      	ldr	r3, [pc, #28]	@ (8006918 <ai_platform_inputs_get+0x2c8>)
 80068fa:	6013      	str	r3, [r2, #0]
 80068fc:	4b07      	ldr	r3, [pc, #28]	@ (800691c <ai_platform_inputs_get+0x2cc>)
 80068fe:	6812      	ldr	r2, [r2, #0]
 8006900:	429a      	cmp	r2, r3
 8006902:	f43f aee0 	beq.w	80066c6 <ai_platform_inputs_get+0x76>
 8006906:	e7fe      	b.n	8006906 <ai_platform_inputs_get+0x2b6>
 8006908:	a1c00100 	.word	0xa1c00100
 800690c:	e0042000 	.word	0xe0042000
 8006910:	5c001000 	.word	0x5c001000
 8006914:	40023000 	.word	0x40023000
 8006918:	f407a5c2 	.word	0xf407a5c2
 800691c:	b5e8b5cd 	.word	0xb5e8b5cd
 8006920:	58024000 	.word	0x58024000
 8006924:	4a0d      	ldr	r2, [pc, #52]	@ (800695c <ai_platform_inputs_get+0x30c>)
 8006926:	2301      	movs	r3, #1
 8006928:	6093      	str	r3, [r2, #8]
 800692a:	6893      	ldr	r3, [r2, #8]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d1fc      	bne.n	800692a <ai_platform_inputs_get+0x2da>
 8006930:	490b      	ldr	r1, [pc, #44]	@ (8006960 <ai_platform_inputs_get+0x310>)
 8006932:	4b0c      	ldr	r3, [pc, #48]	@ (8006964 <ai_platform_inputs_get+0x314>)
 8006934:	6011      	str	r1, [r2, #0]
 8006936:	6812      	ldr	r2, [r2, #0]
 8006938:	429a      	cmp	r2, r3
 800693a:	f43f af76 	beq.w	800682a <ai_platform_inputs_get+0x1da>
 800693e:	e7fe      	b.n	800693e <ai_platform_inputs_get+0x2ee>
 8006940:	4a06      	ldr	r2, [pc, #24]	@ (800695c <ai_platform_inputs_get+0x30c>)
 8006942:	2301      	movs	r3, #1
 8006944:	6093      	str	r3, [r2, #8]
 8006946:	6893      	ldr	r3, [r2, #8]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1fc      	bne.n	8006946 <ai_platform_inputs_get+0x2f6>
 800694c:	4b04      	ldr	r3, [pc, #16]	@ (8006960 <ai_platform_inputs_get+0x310>)
 800694e:	6013      	str	r3, [r2, #0]
 8006950:	4b04      	ldr	r3, [pc, #16]	@ (8006964 <ai_platform_inputs_get+0x314>)
 8006952:	6812      	ldr	r2, [r2, #0]
 8006954:	429a      	cmp	r2, r3
 8006956:	f43f aeb6 	beq.w	80066c6 <ai_platform_inputs_get+0x76>
 800695a:	e7fe      	b.n	800695a <ai_platform_inputs_get+0x30a>
 800695c:	40023000 	.word	0x40023000
 8006960:	f407a5c2 	.word	0xf407a5c2
 8006964:	b5e8b5cd 	.word	0xb5e8b5cd

08006968 <ai_platform_outputs_get>:
 8006968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800696c:	b085      	sub	sp, #20
 800696e:	9102      	str	r1, [sp, #8]
 8006970:	2800      	cmp	r0, #0
 8006972:	f000 808f 	beq.w	8006a94 <ai_platform_outputs_get+0x12c>
 8006976:	4ba8      	ldr	r3, [pc, #672]	@ (8006c18 <ai_platform_outputs_get+0x2b0>)
 8006978:	4681      	mov	r9, r0
 800697a:	6802      	ldr	r2, [r0, #0]
 800697c:	429a      	cmp	r2, r3
 800697e:	f040 8089 	bne.w	8006a94 <ai_platform_outputs_get+0x12c>
 8006982:	f7ff fc85 	bl	8006290 <_ai_platform_acquire_crc>
 8006986:	4ba5      	ldr	r3, [pc, #660]	@ (8006c1c <ai_platform_outputs_get+0x2b4>)
 8006988:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006992:	189a      	adds	r2, r3, r2
 8006994:	2a01      	cmp	r2, #1
 8006996:	f240 80d6 	bls.w	8006b46 <ai_platform_outputs_get+0x1de>
 800699a:	f240 4249 	movw	r2, #1097	@ 0x449
 800699e:	4293      	cmp	r3, r2
 80069a0:	f000 80d1 	beq.w	8006b46 <ai_platform_outputs_get+0x1de>
 80069a4:	4a9e      	ldr	r2, [pc, #632]	@ (8006c20 <ai_platform_outputs_get+0x2b8>)
 80069a6:	6813      	ldr	r3, [r2, #0]
 80069a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80069ac:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 80069b0:	f000 80d8 	beq.w	8006b64 <ai_platform_outputs_get+0x1fc>
 80069b4:	6813      	ldr	r3, [r2, #0]
 80069b6:	f240 4183 	movw	r1, #1155	@ 0x483
 80069ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80069be:	428b      	cmp	r3, r1
 80069c0:	f000 8109 	beq.w	8006bd6 <ai_platform_outputs_get+0x26e>
 80069c4:	6813      	ldr	r3, [r2, #0]
 80069c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80069ca:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 80069ce:	f000 813f 	beq.w	8006c50 <ai_platform_outputs_get+0x2e8>
 80069d2:	6813      	ldr	r3, [r2, #0]
 80069d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f000 810e 	beq.w	8006bfa <ai_platform_outputs_get+0x292>
 80069de:	f7ff fc59 	bl	8006294 <_ai_platform_release_crc>
 80069e2:	f8b9 302c 	ldrh.w	r3, [r9, #44]	@ 0x2c
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	f240 80db 	bls.w	8006ba2 <ai_platform_outputs_get+0x23a>
 80069ec:	2100      	movs	r1, #0
 80069ee:	f8d9 a030 	ldr.w	sl, [r9, #48]	@ 0x30
 80069f2:	f8cd 900c 	str.w	r9, [sp, #12]
 80069f6:	460d      	mov	r5, r1
 80069f8:	4689      	mov	r9, r1
 80069fa:	e016      	b.n	8006a2a <ai_platform_outputs_get+0xc2>
 80069fc:	9a01      	ldr	r2, [sp, #4]
 80069fe:	2301      	movs	r3, #1
 8006a00:	f848 3002 	str.w	r3, [r8, r2]
 8006a04:	69b2      	ldr	r2, [r6, #24]
 8006a06:	f04f 0301 	mov.w	r3, #1
 8006a0a:	6856      	ldr	r6, [r2, #4]
 8006a0c:	3501      	adds	r5, #1
 8006a0e:	f109 091c 	add.w	r9, r9, #28
 8006a12:	7523      	strb	r3, [r4, #20]
 8006a14:	2300      	movs	r3, #0
 8006a16:	6962      	ldr	r2, [r4, #20]
 8006a18:	60a7      	str	r7, [r4, #8]
 8006a1a:	f36b 221f 	bfi	r2, fp, #8, #24
 8006a1e:	6126      	str	r6, [r4, #16]
 8006a20:	61a1      	str	r1, [r4, #24]
 8006a22:	60e3      	str	r3, [r4, #12]
 8006a24:	6162      	str	r2, [r4, #20]
 8006a26:	e9c4 0c00 	strd	r0, ip, [r4]
 8006a2a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8006a2e:	b2ac      	uxth	r4, r5
 8006a30:	42ab      	cmp	r3, r5
 8006a32:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 8006a36:	9301      	str	r3, [sp, #4]
 8006a38:	f240 80a6 	bls.w	8006b88 <ai_platform_outputs_get+0x220>
 8006a3c:	f8da 3010 	ldr.w	r3, [sl, #16]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	f000 80a1 	beq.w	8006b88 <ai_platform_outputs_get+0x220>
 8006a46:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8006a4a:	2e00      	cmp	r6, #0
 8006a4c:	f000 809c 	beq.w	8006b88 <ai_platform_outputs_get+0x220>
 8006a50:	f8da 3014 	ldr.w	r3, [sl, #20]
 8006a54:	69b2      	ldr	r2, [r6, #24]
 8006a56:	68f1      	ldr	r1, [r6, #12]
 8006a58:	6810      	ldr	r0, [r2, #0]
 8006a5a:	9100      	str	r1, [sp, #0]
 8006a5c:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 8006a60:	68b3      	ldr	r3, [r6, #8]
 8006a62:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8006a66:	444c      	add	r4, r9
 8006a68:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 8006a6c:	f004 ff90 	bl	800b990 <ai_array_to_buffer_fmt>
 8006a70:	69b2      	ldr	r2, [r6, #24]
 8006a72:	9900      	ldr	r1, [sp, #0]
 8006a74:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8006a78:	2f00      	cmp	r7, #0
 8006a7a:	d0c4      	beq.n	8006a06 <ai_platform_outputs_get+0x9e>
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 8006a82:	6832      	ldr	r2, [r6, #0]
 8006a84:	607a      	str	r2, [r7, #4]
 8006a86:	b112      	cbz	r2, 8006a8e <ai_platform_outputs_get+0x126>
 8006a88:	8852      	ldrh	r2, [r2, #2]
 8006a8a:	2a00      	cmp	r2, #0
 8006a8c:	d1b6      	bne.n	80069fc <ai_platform_outputs_get+0x94>
 8006a8e:	69b2      	ldr	r2, [r6, #24]
 8006a90:	2700      	movs	r7, #0
 8006a92:	e7b8      	b.n	8006a06 <ai_platform_outputs_get+0x9e>
 8006a94:	f7ff fbfc 	bl	8006290 <_ai_platform_acquire_crc>
 8006a98:	4b60      	ldr	r3, [pc, #384]	@ (8006c1c <ai_platform_outputs_get+0x2b4>)
 8006a9a:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006aa4:	185a      	adds	r2, r3, r1
 8006aa6:	2a01      	cmp	r2, #1
 8006aa8:	d92a      	bls.n	8006b00 <ai_platform_outputs_get+0x198>
 8006aaa:	f240 4249 	movw	r2, #1097	@ 0x449
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d026      	beq.n	8006b00 <ai_platform_outputs_get+0x198>
 8006ab2:	4a5b      	ldr	r2, [pc, #364]	@ (8006c20 <ai_platform_outputs_get+0x2b8>)
 8006ab4:	6813      	ldr	r3, [r2, #0]
 8006ab6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006aba:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8006abe:	d02c      	beq.n	8006b1a <ai_platform_outputs_get+0x1b2>
 8006ac0:	6813      	ldr	r3, [r2, #0]
 8006ac2:	f240 4183 	movw	r1, #1155	@ 0x483
 8006ac6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006aca:	428b      	cmp	r3, r1
 8006acc:	d072      	beq.n	8006bb4 <ai_platform_outputs_get+0x24c>
 8006ace:	6813      	ldr	r3, [r2, #0]
 8006ad0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ad4:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8006ad8:	f000 80ac 	beq.w	8006c34 <ai_platform_outputs_get+0x2cc>
 8006adc:	6813      	ldr	r3, [r2, #0]
 8006ade:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d129      	bne.n	8006b3a <ai_platform_outputs_get+0x1d2>
 8006ae6:	4a4f      	ldr	r2, [pc, #316]	@ (8006c24 <ai_platform_outputs_get+0x2bc>)
 8006ae8:	2301      	movs	r3, #1
 8006aea:	6093      	str	r3, [r2, #8]
 8006aec:	6893      	ldr	r3, [r2, #8]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1fc      	bne.n	8006aec <ai_platform_outputs_get+0x184>
 8006af2:	494d      	ldr	r1, [pc, #308]	@ (8006c28 <ai_platform_outputs_get+0x2c0>)
 8006af4:	4b4d      	ldr	r3, [pc, #308]	@ (8006c2c <ai_platform_outputs_get+0x2c4>)
 8006af6:	6011      	str	r1, [r2, #0]
 8006af8:	6812      	ldr	r2, [r2, #0]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d01d      	beq.n	8006b3a <ai_platform_outputs_get+0x1d2>
 8006afe:	e7fe      	b.n	8006afe <ai_platform_outputs_get+0x196>
 8006b00:	4a48      	ldr	r2, [pc, #288]	@ (8006c24 <ai_platform_outputs_get+0x2bc>)
 8006b02:	2301      	movs	r3, #1
 8006b04:	6093      	str	r3, [r2, #8]
 8006b06:	6893      	ldr	r3, [r2, #8]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1fc      	bne.n	8006b06 <ai_platform_outputs_get+0x19e>
 8006b0c:	4946      	ldr	r1, [pc, #280]	@ (8006c28 <ai_platform_outputs_get+0x2c0>)
 8006b0e:	4b47      	ldr	r3, [pc, #284]	@ (8006c2c <ai_platform_outputs_get+0x2c4>)
 8006b10:	6011      	str	r1, [r2, #0]
 8006b12:	6812      	ldr	r2, [r2, #0]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d010      	beq.n	8006b3a <ai_platform_outputs_get+0x1d2>
 8006b18:	e7fe      	b.n	8006b18 <ai_platform_outputs_get+0x1b0>
 8006b1a:	4a45      	ldr	r2, [pc, #276]	@ (8006c30 <ai_platform_outputs_get+0x2c8>)
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006b22:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d1fb      	bne.n	8006b22 <ai_platform_outputs_get+0x1ba>
 8006b2a:	493f      	ldr	r1, [pc, #252]	@ (8006c28 <ai_platform_outputs_get+0x2c0>)
 8006b2c:	4b3f      	ldr	r3, [pc, #252]	@ (8006c2c <ai_platform_outputs_get+0x2c4>)
 8006b2e:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8006b32:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d113      	bne.n	8006b62 <ai_platform_outputs_get+0x1fa>
 8006b3a:	f7ff fbab 	bl	8006294 <_ai_platform_release_crc>
 8006b3e:	2000      	movs	r0, #0
 8006b40:	b005      	add	sp, #20
 8006b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b46:	4a37      	ldr	r2, [pc, #220]	@ (8006c24 <ai_platform_outputs_get+0x2bc>)
 8006b48:	2301      	movs	r3, #1
 8006b4a:	6093      	str	r3, [r2, #8]
 8006b4c:	6893      	ldr	r3, [r2, #8]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1fc      	bne.n	8006b4c <ai_platform_outputs_get+0x1e4>
 8006b52:	4b35      	ldr	r3, [pc, #212]	@ (8006c28 <ai_platform_outputs_get+0x2c0>)
 8006b54:	6013      	str	r3, [r2, #0]
 8006b56:	4b35      	ldr	r3, [pc, #212]	@ (8006c2c <ai_platform_outputs_get+0x2c4>)
 8006b58:	6812      	ldr	r2, [r2, #0]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	f43f af3f 	beq.w	80069de <ai_platform_outputs_get+0x76>
 8006b60:	e7fe      	b.n	8006b60 <ai_platform_outputs_get+0x1f8>
 8006b62:	e7fe      	b.n	8006b62 <ai_platform_outputs_get+0x1fa>
 8006b64:	4a32      	ldr	r2, [pc, #200]	@ (8006c30 <ai_platform_outputs_get+0x2c8>)
 8006b66:	2301      	movs	r3, #1
 8006b68:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006b6c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1fb      	bne.n	8006b6c <ai_platform_outputs_get+0x204>
 8006b74:	4b2c      	ldr	r3, [pc, #176]	@ (8006c28 <ai_platform_outputs_get+0x2c0>)
 8006b76:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8006b7a:	4b2c      	ldr	r3, [pc, #176]	@ (8006c2c <ai_platform_outputs_get+0x2c4>)
 8006b7c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006b80:	429a      	cmp	r2, r3
 8006b82:	f43f af2c 	beq.w	80069de <ai_platform_outputs_get+0x76>
 8006b86:	e7fe      	b.n	8006b86 <ai_platform_outputs_get+0x21e>
 8006b88:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006b8c:	b14c      	cbz	r4, 8006ba2 <ai_platform_outputs_get+0x23a>
 8006b8e:	f8da 3014 	ldr.w	r3, [sl, #20]
 8006b92:	6858      	ldr	r0, [r3, #4]
 8006b94:	9b02      	ldr	r3, [sp, #8]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d0d2      	beq.n	8006b40 <ai_platform_outputs_get+0x1d8>
 8006b9a:	801c      	strh	r4, [r3, #0]
 8006b9c:	b005      	add	sp, #20
 8006b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ba2:	2400      	movs	r4, #0
 8006ba4:	2218      	movs	r2, #24
 8006ba6:	2111      	movs	r1, #17
 8006ba8:	f109 0010 	add.w	r0, r9, #16
 8006bac:	f000 ffe8 	bl	8007b80 <core_set_error>
 8006bb0:	4620      	mov	r0, r4
 8006bb2:	e7ef      	b.n	8006b94 <ai_platform_outputs_get+0x22c>
 8006bb4:	4a1e      	ldr	r2, [pc, #120]	@ (8006c30 <ai_platform_outputs_get+0x2c8>)
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006bbc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d1fb      	bne.n	8006bbc <ai_platform_outputs_get+0x254>
 8006bc4:	4918      	ldr	r1, [pc, #96]	@ (8006c28 <ai_platform_outputs_get+0x2c0>)
 8006bc6:	4b19      	ldr	r3, [pc, #100]	@ (8006c2c <ai_platform_outputs_get+0x2c4>)
 8006bc8:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8006bcc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d0b2      	beq.n	8006b3a <ai_platform_outputs_get+0x1d2>
 8006bd4:	e7fe      	b.n	8006bd4 <ai_platform_outputs_get+0x26c>
 8006bd6:	4a16      	ldr	r2, [pc, #88]	@ (8006c30 <ai_platform_outputs_get+0x2c8>)
 8006bd8:	2301      	movs	r3, #1
 8006bda:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006bde:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d1fb      	bne.n	8006bde <ai_platform_outputs_get+0x276>
 8006be6:	4b10      	ldr	r3, [pc, #64]	@ (8006c28 <ai_platform_outputs_get+0x2c0>)
 8006be8:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8006bec:	4b0f      	ldr	r3, [pc, #60]	@ (8006c2c <ai_platform_outputs_get+0x2c4>)
 8006bee:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	f43f aef3 	beq.w	80069de <ai_platform_outputs_get+0x76>
 8006bf8:	e7fe      	b.n	8006bf8 <ai_platform_outputs_get+0x290>
 8006bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8006c24 <ai_platform_outputs_get+0x2bc>)
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	6093      	str	r3, [r2, #8]
 8006c00:	6893      	ldr	r3, [r2, #8]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1fc      	bne.n	8006c00 <ai_platform_outputs_get+0x298>
 8006c06:	4b08      	ldr	r3, [pc, #32]	@ (8006c28 <ai_platform_outputs_get+0x2c0>)
 8006c08:	6013      	str	r3, [r2, #0]
 8006c0a:	4b08      	ldr	r3, [pc, #32]	@ (8006c2c <ai_platform_outputs_get+0x2c4>)
 8006c0c:	6812      	ldr	r2, [r2, #0]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	f43f aee5 	beq.w	80069de <ai_platform_outputs_get+0x76>
 8006c14:	e7fe      	b.n	8006c14 <ai_platform_outputs_get+0x2ac>
 8006c16:	bf00      	nop
 8006c18:	a1c00100 	.word	0xa1c00100
 8006c1c:	e0042000 	.word	0xe0042000
 8006c20:	5c001000 	.word	0x5c001000
 8006c24:	40023000 	.word	0x40023000
 8006c28:	f407a5c2 	.word	0xf407a5c2
 8006c2c:	b5e8b5cd 	.word	0xb5e8b5cd
 8006c30:	58024000 	.word	0x58024000
 8006c34:	4a0d      	ldr	r2, [pc, #52]	@ (8006c6c <ai_platform_outputs_get+0x304>)
 8006c36:	2301      	movs	r3, #1
 8006c38:	6093      	str	r3, [r2, #8]
 8006c3a:	6893      	ldr	r3, [r2, #8]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d1fc      	bne.n	8006c3a <ai_platform_outputs_get+0x2d2>
 8006c40:	490b      	ldr	r1, [pc, #44]	@ (8006c70 <ai_platform_outputs_get+0x308>)
 8006c42:	4b0c      	ldr	r3, [pc, #48]	@ (8006c74 <ai_platform_outputs_get+0x30c>)
 8006c44:	6011      	str	r1, [r2, #0]
 8006c46:	6812      	ldr	r2, [r2, #0]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	f43f af76 	beq.w	8006b3a <ai_platform_outputs_get+0x1d2>
 8006c4e:	e7fe      	b.n	8006c4e <ai_platform_outputs_get+0x2e6>
 8006c50:	4a06      	ldr	r2, [pc, #24]	@ (8006c6c <ai_platform_outputs_get+0x304>)
 8006c52:	2301      	movs	r3, #1
 8006c54:	6093      	str	r3, [r2, #8]
 8006c56:	6893      	ldr	r3, [r2, #8]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d1fc      	bne.n	8006c56 <ai_platform_outputs_get+0x2ee>
 8006c5c:	4b04      	ldr	r3, [pc, #16]	@ (8006c70 <ai_platform_outputs_get+0x308>)
 8006c5e:	6013      	str	r3, [r2, #0]
 8006c60:	4b04      	ldr	r3, [pc, #16]	@ (8006c74 <ai_platform_outputs_get+0x30c>)
 8006c62:	6812      	ldr	r2, [r2, #0]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	f43f aeba 	beq.w	80069de <ai_platform_outputs_get+0x76>
 8006c6a:	e7fe      	b.n	8006c6a <ai_platform_outputs_get+0x302>
 8006c6c:	40023000 	.word	0x40023000
 8006c70:	f407a5c2 	.word	0xf407a5c2
 8006c74:	b5e8b5cd 	.word	0xb5e8b5cd

08006c78 <ai_platform_network_create>:
 8006c78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c7c:	b083      	sub	sp, #12
 8006c7e:	4604      	mov	r4, r0
 8006c80:	4615      	mov	r5, r2
 8006c82:	461e      	mov	r6, r3
 8006c84:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 8006c88:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 8006c8c:	f7ff fb00 	bl	8006290 <_ai_platform_acquire_crc>
 8006c90:	2800      	cmp	r0, #0
 8006c92:	f000 80bd 	beq.w	8006e10 <ai_platform_network_create+0x198>
 8006c96:	4ba5      	ldr	r3, [pc, #660]	@ (8006f2c <ai_platform_network_create+0x2b4>)
 8006c98:	f46f 6c8a 	mvn.w	ip, #1104	@ 0x450
 8006c9c:	4601      	mov	r1, r0
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ca4:	eb03 020c 	add.w	r2, r3, ip
 8006ca8:	2a01      	cmp	r2, #1
 8006caa:	f240 80a8 	bls.w	8006dfe <ai_platform_network_create+0x186>
 8006cae:	f240 4249 	movw	r2, #1097	@ 0x449
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	f000 80a3 	beq.w	8006dfe <ai_platform_network_create+0x186>
 8006cb8:	4a9d      	ldr	r2, [pc, #628]	@ (8006f30 <ai_platform_network_create+0x2b8>)
 8006cba:	6813      	ldr	r3, [r2, #0]
 8006cbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006cc0:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8006cc4:	f000 80b9 	beq.w	8006e3a <ai_platform_network_create+0x1c2>
 8006cc8:	6813      	ldr	r3, [r2, #0]
 8006cca:	f240 4c83 	movw	ip, #1155	@ 0x483
 8006cce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006cd2:	4563      	cmp	r3, ip
 8006cd4:	f000 80a1 	beq.w	8006e1a <ai_platform_network_create+0x1a2>
 8006cd8:	6813      	ldr	r3, [r2, #0]
 8006cda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006cde:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8006ce2:	f000 8153 	beq.w	8006f8c <ai_platform_network_create+0x314>
 8006ce6:	6813      	ldr	r3, [r2, #0]
 8006ce8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	f040 808d 	bne.w	8006e0c <ai_platform_network_create+0x194>
 8006cf2:	4a90      	ldr	r2, [pc, #576]	@ (8006f34 <ai_platform_network_create+0x2bc>)
 8006cf4:	2318      	movs	r3, #24
 8006cf6:	6093      	str	r3, [r2, #8]
 8006cf8:	6893      	ldr	r3, [r2, #8]
 8006cfa:	2b18      	cmp	r3, #24
 8006cfc:	f040 8086 	bne.w	8006e0c <ai_platform_network_create+0x194>
 8006d00:	2301      	movs	r3, #1
 8006d02:	6093      	str	r3, [r2, #8]
 8006d04:	6893      	ldr	r3, [r2, #8]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d1fc      	bne.n	8006d04 <ai_platform_network_create+0x8c>
 8006d0a:	4608      	mov	r0, r1
 8006d0c:	f7ff fac2 	bl	8006294 <_ai_platform_release_crc>
 8006d10:	f7ff fabe 	bl	8006290 <_ai_platform_acquire_crc>
 8006d14:	4b85      	ldr	r3, [pc, #532]	@ (8006f2c <ai_platform_network_create+0x2b4>)
 8006d16:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d20:	189a      	adds	r2, r3, r2
 8006d22:	2a01      	cmp	r2, #1
 8006d24:	f240 809f 	bls.w	8006e66 <ai_platform_network_create+0x1ee>
 8006d28:	f240 4249 	movw	r2, #1097	@ 0x449
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	f000 809a 	beq.w	8006e66 <ai_platform_network_create+0x1ee>
 8006d32:	4a7f      	ldr	r2, [pc, #508]	@ (8006f30 <ai_platform_network_create+0x2b8>)
 8006d34:	6813      	ldr	r3, [r2, #0]
 8006d36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d3a:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8006d3e:	f000 80a0 	beq.w	8006e82 <ai_platform_network_create+0x20a>
 8006d42:	6813      	ldr	r3, [r2, #0]
 8006d44:	f240 4183 	movw	r1, #1155	@ 0x483
 8006d48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d4c:	428b      	cmp	r3, r1
 8006d4e:	f000 80bf 	beq.w	8006ed0 <ai_platform_network_create+0x258>
 8006d52:	6813      	ldr	r3, [r2, #0]
 8006d54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d58:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8006d5c:	f000 8123 	beq.w	8006fa6 <ai_platform_network_create+0x32e>
 8006d60:	6813      	ldr	r3, [r2, #0]
 8006d62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	f000 80c4 	beq.w	8006ef4 <ai_platform_network_create+0x27c>
 8006d6c:	f7ff fa92 	bl	8006294 <_ai_platform_release_crc>
 8006d70:	2c00      	cmp	r4, #0
 8006d72:	f000 80aa 	beq.w	8006eca <ai_platform_network_create+0x252>
 8006d76:	4b70      	ldr	r3, [pc, #448]	@ (8006f38 <ai_platform_network_create+0x2c0>)
 8006d78:	602b      	str	r3, [r5, #0]
 8006d7a:	6025      	str	r5, [r4, #0]
 8006d7c:	f000 fef8 	bl	8007b70 <core_init>
 8006d80:	2800      	cmp	r0, #0
 8006d82:	f000 8090 	beq.w	8006ea6 <ai_platform_network_create+0x22e>
 8006d86:	f7ff fa83 	bl	8006290 <_ai_platform_acquire_crc>
 8006d8a:	4b68      	ldr	r3, [pc, #416]	@ (8006f2c <ai_platform_network_create+0x2b4>)
 8006d8c:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d96:	185a      	adds	r2, r3, r1
 8006d98:	2a01      	cmp	r2, #1
 8006d9a:	f240 80b9 	bls.w	8006f10 <ai_platform_network_create+0x298>
 8006d9e:	f240 4249 	movw	r2, #1097	@ 0x449
 8006da2:	4293      	cmp	r3, r2
 8006da4:	f000 80b4 	beq.w	8006f10 <ai_platform_network_create+0x298>
 8006da8:	4a61      	ldr	r2, [pc, #388]	@ (8006f30 <ai_platform_network_create+0x2b8>)
 8006daa:	6813      	ldr	r3, [r2, #0]
 8006dac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006db0:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8006db4:	f000 80c8 	beq.w	8006f48 <ai_platform_network_create+0x2d0>
 8006db8:	6813      	ldr	r3, [r2, #0]
 8006dba:	f240 4183 	movw	r1, #1155	@ 0x483
 8006dbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006dc2:	428b      	cmp	r3, r1
 8006dc4:	f000 8107 	beq.w	8006fd6 <ai_platform_network_create+0x35e>
 8006dc8:	6813      	ldr	r3, [r2, #0]
 8006dca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006dce:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8006dd2:	f000 8111 	beq.w	8006ff8 <ai_platform_network_create+0x380>
 8006dd6:	6813      	ldr	r3, [r2, #0]
 8006dd8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f040 80c3 	bne.w	8006f68 <ai_platform_network_create+0x2f0>
 8006de2:	4b54      	ldr	r3, [pc, #336]	@ (8006f34 <ai_platform_network_create+0x2bc>)
 8006de4:	2201      	movs	r2, #1
 8006de6:	609a      	str	r2, [r3, #8]
 8006de8:	689a      	ldr	r2, [r3, #8]
 8006dea:	2a00      	cmp	r2, #0
 8006dec:	d1fc      	bne.n	8006de8 <ai_platform_network_create+0x170>
 8006dee:	4a53      	ldr	r2, [pc, #332]	@ (8006f3c <ai_platform_network_create+0x2c4>)
 8006df0:	601a      	str	r2, [r3, #0]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	4b52      	ldr	r3, [pc, #328]	@ (8006f40 <ai_platform_network_create+0x2c8>)
 8006df6:	429a      	cmp	r2, r3
 8006df8:	f000 80b6 	beq.w	8006f68 <ai_platform_network_create+0x2f0>
 8006dfc:	e7fe      	b.n	8006dfc <ai_platform_network_create+0x184>
 8006dfe:	4b4d      	ldr	r3, [pc, #308]	@ (8006f34 <ai_platform_network_create+0x2bc>)
 8006e00:	2218      	movs	r2, #24
 8006e02:	609a      	str	r2, [r3, #8]
 8006e04:	689a      	ldr	r2, [r3, #8]
 8006e06:	2a18      	cmp	r2, #24
 8006e08:	d027      	beq.n	8006e5a <ai_platform_network_create+0x1e2>
 8006e0a:	4608      	mov	r0, r1
 8006e0c:	f7ff fa42 	bl	8006294 <_ai_platform_release_crc>
 8006e10:	f244 1033 	movw	r0, #16691	@ 0x4133
 8006e14:	b003      	add	sp, #12
 8006e16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e1a:	4a4a      	ldr	r2, [pc, #296]	@ (8006f44 <ai_platform_network_create+0x2cc>)
 8006e1c:	2318      	movs	r3, #24
 8006e1e:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006e22:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006e26:	2b18      	cmp	r3, #24
 8006e28:	d1f0      	bne.n	8006e0c <ai_platform_network_create+0x194>
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006e30:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d1fb      	bne.n	8006e30 <ai_platform_network_create+0x1b8>
 8006e38:	e767      	b.n	8006d0a <ai_platform_network_create+0x92>
 8006e3a:	4a42      	ldr	r2, [pc, #264]	@ (8006f44 <ai_platform_network_create+0x2cc>)
 8006e3c:	2318      	movs	r3, #24
 8006e3e:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006e42:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006e46:	2b18      	cmp	r3, #24
 8006e48:	d1e0      	bne.n	8006e0c <ai_platform_network_create+0x194>
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006e50:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1fb      	bne.n	8006e50 <ai_platform_network_create+0x1d8>
 8006e58:	e757      	b.n	8006d0a <ai_platform_network_create+0x92>
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	609a      	str	r2, [r3, #8]
 8006e5e:	689a      	ldr	r2, [r3, #8]
 8006e60:	2a00      	cmp	r2, #0
 8006e62:	d1fc      	bne.n	8006e5e <ai_platform_network_create+0x1e6>
 8006e64:	e751      	b.n	8006d0a <ai_platform_network_create+0x92>
 8006e66:	4a33      	ldr	r2, [pc, #204]	@ (8006f34 <ai_platform_network_create+0x2bc>)
 8006e68:	2301      	movs	r3, #1
 8006e6a:	6093      	str	r3, [r2, #8]
 8006e6c:	6891      	ldr	r1, [r2, #8]
 8006e6e:	2900      	cmp	r1, #0
 8006e70:	d1fc      	bne.n	8006e6c <ai_platform_network_create+0x1f4>
 8006e72:	4b32      	ldr	r3, [pc, #200]	@ (8006f3c <ai_platform_network_create+0x2c4>)
 8006e74:	6013      	str	r3, [r2, #0]
 8006e76:	4b32      	ldr	r3, [pc, #200]	@ (8006f40 <ai_platform_network_create+0x2c8>)
 8006e78:	6812      	ldr	r2, [r2, #0]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	f43f af76 	beq.w	8006d6c <ai_platform_network_create+0xf4>
 8006e80:	e7fe      	b.n	8006e80 <ai_platform_network_create+0x208>
 8006e82:	4a30      	ldr	r2, [pc, #192]	@ (8006f44 <ai_platform_network_create+0x2cc>)
 8006e84:	2301      	movs	r3, #1
 8006e86:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006e8a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d1fb      	bne.n	8006e8a <ai_platform_network_create+0x212>
 8006e92:	4b2a      	ldr	r3, [pc, #168]	@ (8006f3c <ai_platform_network_create+0x2c4>)
 8006e94:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8006e98:	4b29      	ldr	r3, [pc, #164]	@ (8006f40 <ai_platform_network_create+0x2c8>)
 8006e9a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	f43f af64 	beq.w	8006d6c <ai_platform_network_create+0xf4>
 8006ea4:	e7fe      	b.n	8006ea4 <ai_platform_network_create+0x22c>
 8006ea6:	f04f 0930 	mov.w	r9, #48	@ 0x30
 8006eaa:	2300      	movs	r3, #0
 8006eac:	6023      	str	r3, [r4, #0]
 8006eae:	2410      	movs	r4, #16
 8006eb0:	4642      	mov	r2, r8
 8006eb2:	4639      	mov	r1, r7
 8006eb4:	4630      	mov	r0, r6
 8006eb6:	f004 fe0f 	bl	800bad8 <ai_version_get>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2000      	movs	r0, #0
 8006ebe:	64ab      	str	r3, [r5, #72]	@ 0x48
 8006ec0:	f369 0007 	bfi	r0, r9, #0, #8
 8006ec4:	f364 201f 	bfi	r0, r4, #8, #24
 8006ec8:	e7a4      	b.n	8006e14 <ai_platform_network_create+0x19c>
 8006eca:	f241 0010 	movw	r0, #4112	@ 0x1010
 8006ece:	e7a1      	b.n	8006e14 <ai_platform_network_create+0x19c>
 8006ed0:	4a1c      	ldr	r2, [pc, #112]	@ (8006f44 <ai_platform_network_create+0x2cc>)
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006ed8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d1fb      	bne.n	8006ed8 <ai_platform_network_create+0x260>
 8006ee0:	4b16      	ldr	r3, [pc, #88]	@ (8006f3c <ai_platform_network_create+0x2c4>)
 8006ee2:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8006ee6:	4b16      	ldr	r3, [pc, #88]	@ (8006f40 <ai_platform_network_create+0x2c8>)
 8006ee8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006eec:	429a      	cmp	r2, r3
 8006eee:	f43f af3d 	beq.w	8006d6c <ai_platform_network_create+0xf4>
 8006ef2:	e7fe      	b.n	8006ef2 <ai_platform_network_create+0x27a>
 8006ef4:	4a0f      	ldr	r2, [pc, #60]	@ (8006f34 <ai_platform_network_create+0x2bc>)
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	6093      	str	r3, [r2, #8]
 8006efa:	6893      	ldr	r3, [r2, #8]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d1fc      	bne.n	8006efa <ai_platform_network_create+0x282>
 8006f00:	4b0e      	ldr	r3, [pc, #56]	@ (8006f3c <ai_platform_network_create+0x2c4>)
 8006f02:	6013      	str	r3, [r2, #0]
 8006f04:	4b0e      	ldr	r3, [pc, #56]	@ (8006f40 <ai_platform_network_create+0x2c8>)
 8006f06:	6812      	ldr	r2, [r2, #0]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	f43f af2f 	beq.w	8006d6c <ai_platform_network_create+0xf4>
 8006f0e:	e7fe      	b.n	8006f0e <ai_platform_network_create+0x296>
 8006f10:	4a08      	ldr	r2, [pc, #32]	@ (8006f34 <ai_platform_network_create+0x2bc>)
 8006f12:	2301      	movs	r3, #1
 8006f14:	6093      	str	r3, [r2, #8]
 8006f16:	6893      	ldr	r3, [r2, #8]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d1fc      	bne.n	8006f16 <ai_platform_network_create+0x29e>
 8006f1c:	4b07      	ldr	r3, [pc, #28]	@ (8006f3c <ai_platform_network_create+0x2c4>)
 8006f1e:	6013      	str	r3, [r2, #0]
 8006f20:	4b07      	ldr	r3, [pc, #28]	@ (8006f40 <ai_platform_network_create+0x2c8>)
 8006f22:	6812      	ldr	r2, [r2, #0]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d01f      	beq.n	8006f68 <ai_platform_network_create+0x2f0>
 8006f28:	e7fe      	b.n	8006f28 <ai_platform_network_create+0x2b0>
 8006f2a:	bf00      	nop
 8006f2c:	e0042000 	.word	0xe0042000
 8006f30:	5c001000 	.word	0x5c001000
 8006f34:	40023000 	.word	0x40023000
 8006f38:	a1c00100 	.word	0xa1c00100
 8006f3c:	f407a5c2 	.word	0xf407a5c2
 8006f40:	b5e8b5cd 	.word	0xb5e8b5cd
 8006f44:	58024000 	.word	0x58024000
 8006f48:	4a33      	ldr	r2, [pc, #204]	@ (8007018 <ai_platform_network_create+0x3a0>)
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006f50:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d1fb      	bne.n	8006f50 <ai_platform_network_create+0x2d8>
 8006f58:	4b30      	ldr	r3, [pc, #192]	@ (800701c <ai_platform_network_create+0x3a4>)
 8006f5a:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8006f5e:	4b30      	ldr	r3, [pc, #192]	@ (8007020 <ai_platform_network_create+0x3a8>)
 8006f60:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d12c      	bne.n	8006fc2 <ai_platform_network_create+0x34a>
 8006f68:	f7ff f994 	bl	8006294 <_ai_platform_release_crc>
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	4639      	mov	r1, r7
 8006f70:	4630      	mov	r0, r6
 8006f72:	f004 fdb1 	bl	800bad8 <ai_version_get>
 8006f76:	4681      	mov	r9, r0
 8006f78:	2200      	movs	r2, #0
 8006f7a:	2105      	movs	r1, #5
 8006f7c:	2001      	movs	r0, #1
 8006f7e:	f004 fdab 	bl	800bad8 <ai_version_get>
 8006f82:	4581      	cmp	r9, r0
 8006f84:	d01e      	beq.n	8006fc4 <ai_platform_network_create+0x34c>
 8006f86:	f04f 0901 	mov.w	r9, #1
 8006f8a:	e78e      	b.n	8006eaa <ai_platform_network_create+0x232>
 8006f8c:	4b25      	ldr	r3, [pc, #148]	@ (8007024 <ai_platform_network_create+0x3ac>)
 8006f8e:	2218      	movs	r2, #24
 8006f90:	609a      	str	r2, [r3, #8]
 8006f92:	689a      	ldr	r2, [r3, #8]
 8006f94:	2a18      	cmp	r2, #24
 8006f96:	f47f af39 	bne.w	8006e0c <ai_platform_network_create+0x194>
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	609a      	str	r2, [r3, #8]
 8006f9e:	689a      	ldr	r2, [r3, #8]
 8006fa0:	2a00      	cmp	r2, #0
 8006fa2:	d1fc      	bne.n	8006f9e <ai_platform_network_create+0x326>
 8006fa4:	e6b1      	b.n	8006d0a <ai_platform_network_create+0x92>
 8006fa6:	4a1f      	ldr	r2, [pc, #124]	@ (8007024 <ai_platform_network_create+0x3ac>)
 8006fa8:	2301      	movs	r3, #1
 8006faa:	6093      	str	r3, [r2, #8]
 8006fac:	6893      	ldr	r3, [r2, #8]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d1fc      	bne.n	8006fac <ai_platform_network_create+0x334>
 8006fb2:	4b1a      	ldr	r3, [pc, #104]	@ (800701c <ai_platform_network_create+0x3a4>)
 8006fb4:	6013      	str	r3, [r2, #0]
 8006fb6:	4b1a      	ldr	r3, [pc, #104]	@ (8007020 <ai_platform_network_create+0x3a8>)
 8006fb8:	6812      	ldr	r2, [r2, #0]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	f43f aed6 	beq.w	8006d6c <ai_platform_network_create+0xf4>
 8006fc0:	e7fe      	b.n	8006fc0 <ai_platform_network_create+0x348>
 8006fc2:	e7fe      	b.n	8006fc2 <ai_platform_network_create+0x34a>
 8006fc4:	4b18      	ldr	r3, [pc, #96]	@ (8007028 <ai_platform_network_create+0x3b0>)
 8006fc6:	a801      	add	r0, sp, #4
 8006fc8:	9301      	str	r3, [sp, #4]
 8006fca:	f000 ff35 	bl	8007e38 <ai_check_custom_types>
 8006fce:	b300      	cbz	r0, 8007012 <ai_platform_network_create+0x39a>
 8006fd0:	2400      	movs	r4, #0
 8006fd2:	46a1      	mov	r9, r4
 8006fd4:	e76c      	b.n	8006eb0 <ai_platform_network_create+0x238>
 8006fd6:	4b10      	ldr	r3, [pc, #64]	@ (8007018 <ai_platform_network_create+0x3a0>)
 8006fd8:	2201      	movs	r2, #1
 8006fda:	f8c3 2c08 	str.w	r2, [r3, #3080]	@ 0xc08
 8006fde:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	@ 0xc08
 8006fe2:	2a00      	cmp	r2, #0
 8006fe4:	d1fb      	bne.n	8006fde <ai_platform_network_create+0x366>
 8006fe6:	4a0d      	ldr	r2, [pc, #52]	@ (800701c <ai_platform_network_create+0x3a4>)
 8006fe8:	f8c3 2c00 	str.w	r2, [r3, #3072]	@ 0xc00
 8006fec:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	@ 0xc00
 8006ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8007020 <ai_platform_network_create+0x3a8>)
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d0b8      	beq.n	8006f68 <ai_platform_network_create+0x2f0>
 8006ff6:	e7fe      	b.n	8006ff6 <ai_platform_network_create+0x37e>
 8006ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8007024 <ai_platform_network_create+0x3ac>)
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	609a      	str	r2, [r3, #8]
 8006ffe:	689a      	ldr	r2, [r3, #8]
 8007000:	2a00      	cmp	r2, #0
 8007002:	d1fc      	bne.n	8006ffe <ai_platform_network_create+0x386>
 8007004:	4a05      	ldr	r2, [pc, #20]	@ (800701c <ai_platform_network_create+0x3a4>)
 8007006:	601a      	str	r2, [r3, #0]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	4b05      	ldr	r3, [pc, #20]	@ (8007020 <ai_platform_network_create+0x3a8>)
 800700c:	429a      	cmp	r2, r3
 800700e:	d0ab      	beq.n	8006f68 <ai_platform_network_create+0x2f0>
 8007010:	e7fe      	b.n	8007010 <ai_platform_network_create+0x398>
 8007012:	f04f 0902 	mov.w	r9, #2
 8007016:	e748      	b.n	8006eaa <ai_platform_network_create+0x232>
 8007018:	58024000 	.word	0x58024000
 800701c:	f407a5c2 	.word	0xf407a5c2
 8007020:	b5e8b5cd 	.word	0xb5e8b5cd
 8007024:	40023000 	.word	0x40023000
 8007028:	84048403 	.word	0x84048403

0800702c <ai_platform_network_init>:
 800702c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007030:	2800      	cmp	r0, #0
 8007032:	d052      	beq.n	80070da <ai_platform_network_init+0xae>
 8007034:	4bab      	ldr	r3, [pc, #684]	@ (80072e4 <ai_platform_network_init+0x2b8>)
 8007036:	4604      	mov	r4, r0
 8007038:	6802      	ldr	r2, [r0, #0]
 800703a:	429a      	cmp	r2, r3
 800703c:	d14d      	bne.n	80070da <ai_platform_network_init+0xae>
 800703e:	460d      	mov	r5, r1
 8007040:	f7ff f926 	bl	8006290 <_ai_platform_acquire_crc>
 8007044:	4ba8      	ldr	r3, [pc, #672]	@ (80072e8 <ai_platform_network_init+0x2bc>)
 8007046:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007050:	189a      	adds	r2, r3, r2
 8007052:	2a01      	cmp	r2, #1
 8007054:	f240 809b 	bls.w	800718e <ai_platform_network_init+0x162>
 8007058:	f240 4249 	movw	r2, #1097	@ 0x449
 800705c:	4293      	cmp	r3, r2
 800705e:	f000 8096 	beq.w	800718e <ai_platform_network_init+0x162>
 8007062:	4aa2      	ldr	r2, [pc, #648]	@ (80072ec <ai_platform_network_init+0x2c0>)
 8007064:	6813      	ldr	r3, [r2, #0]
 8007066:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800706a:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 800706e:	f000 809d 	beq.w	80071ac <ai_platform_network_init+0x180>
 8007072:	6813      	ldr	r3, [r2, #0]
 8007074:	f240 4183 	movw	r1, #1155	@ 0x483
 8007078:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800707c:	428b      	cmp	r3, r1
 800707e:	f000 80e4 	beq.w	800724a <ai_platform_network_init+0x21e>
 8007082:	6813      	ldr	r3, [r2, #0]
 8007084:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007088:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 800708c:	f000 811b 	beq.w	80072c6 <ai_platform_network_init+0x29a>
 8007090:	6813      	ldr	r3, [r2, #0]
 8007092:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007096:	2b00      	cmp	r3, #0
 8007098:	f000 80f9 	beq.w	800728e <ai_platform_network_init+0x262>
 800709c:	f7ff f8fa 	bl	8006294 <_ai_platform_release_crc>
 80070a0:	2d00      	cmp	r5, #0
 80070a2:	f000 8147 	beq.w	8007334 <ai_platform_network_init+0x308>
 80070a6:	4b92      	ldr	r3, [pc, #584]	@ (80072f0 <ai_platform_network_init+0x2c4>)
 80070a8:	682a      	ldr	r2, [r5, #0]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	f040 8090 	bne.w	80071d0 <ai_platform_network_init+0x1a4>
 80070b0:	692b      	ldr	r3, [r5, #16]
 80070b2:	89ae      	ldrh	r6, [r5, #12]
 80070b4:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 80070b8:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 80070bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80070be:	e9c4 1207 	strd	r1, r2, [r4, #28]
 80070c2:	2303      	movs	r3, #3
 80070c4:	84a6      	strh	r6, [r4, #36]	@ 0x24
 80070c6:	4626      	mov	r6, r4
 80070c8:	4620      	mov	r0, r4
 80070ca:	f8a4 c026 	strh.w	ip, [r4, #38]	@ 0x26
 80070ce:	60e3      	str	r3, [r4, #12]
 80070d0:	f000 feda 	bl	8007e88 <ai_layers_init_all>
 80070d4:	4630      	mov	r0, r6
 80070d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070da:	f7ff f8d9 	bl	8006290 <_ai_platform_acquire_crc>
 80070de:	4b82      	ldr	r3, [pc, #520]	@ (80072e8 <ai_platform_network_init+0x2bc>)
 80070e0:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80070ea:	185a      	adds	r2, r3, r1
 80070ec:	2a01      	cmp	r2, #1
 80070ee:	d92b      	bls.n	8007148 <ai_platform_network_init+0x11c>
 80070f0:	f240 4249 	movw	r2, #1097	@ 0x449
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d027      	beq.n	8007148 <ai_platform_network_init+0x11c>
 80070f8:	4a7c      	ldr	r2, [pc, #496]	@ (80072ec <ai_platform_network_init+0x2c0>)
 80070fa:	6813      	ldr	r3, [r2, #0]
 80070fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007100:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8007104:	d02d      	beq.n	8007162 <ai_platform_network_init+0x136>
 8007106:	6813      	ldr	r3, [r2, #0]
 8007108:	f240 4183 	movw	r1, #1155	@ 0x483
 800710c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007110:	428b      	cmp	r3, r1
 8007112:	f000 8089 	beq.w	8007228 <ai_platform_network_init+0x1fc>
 8007116:	6813      	ldr	r3, [r2, #0]
 8007118:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800711c:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8007120:	f000 80c3 	beq.w	80072aa <ai_platform_network_init+0x27e>
 8007124:	6813      	ldr	r3, [r2, #0]
 8007126:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800712a:	2b00      	cmp	r3, #0
 800712c:	d129      	bne.n	8007182 <ai_platform_network_init+0x156>
 800712e:	4a71      	ldr	r2, [pc, #452]	@ (80072f4 <ai_platform_network_init+0x2c8>)
 8007130:	2301      	movs	r3, #1
 8007132:	6093      	str	r3, [r2, #8]
 8007134:	6893      	ldr	r3, [r2, #8]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d1fc      	bne.n	8007134 <ai_platform_network_init+0x108>
 800713a:	496f      	ldr	r1, [pc, #444]	@ (80072f8 <ai_platform_network_init+0x2cc>)
 800713c:	4b6f      	ldr	r3, [pc, #444]	@ (80072fc <ai_platform_network_init+0x2d0>)
 800713e:	6011      	str	r1, [r2, #0]
 8007140:	6812      	ldr	r2, [r2, #0]
 8007142:	429a      	cmp	r2, r3
 8007144:	d01d      	beq.n	8007182 <ai_platform_network_init+0x156>
 8007146:	e7fe      	b.n	8007146 <ai_platform_network_init+0x11a>
 8007148:	4a6a      	ldr	r2, [pc, #424]	@ (80072f4 <ai_platform_network_init+0x2c8>)
 800714a:	2301      	movs	r3, #1
 800714c:	6093      	str	r3, [r2, #8]
 800714e:	6893      	ldr	r3, [r2, #8]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1fc      	bne.n	800714e <ai_platform_network_init+0x122>
 8007154:	4968      	ldr	r1, [pc, #416]	@ (80072f8 <ai_platform_network_init+0x2cc>)
 8007156:	4b69      	ldr	r3, [pc, #420]	@ (80072fc <ai_platform_network_init+0x2d0>)
 8007158:	6011      	str	r1, [r2, #0]
 800715a:	6812      	ldr	r2, [r2, #0]
 800715c:	429a      	cmp	r2, r3
 800715e:	d010      	beq.n	8007182 <ai_platform_network_init+0x156>
 8007160:	e7fe      	b.n	8007160 <ai_platform_network_init+0x134>
 8007162:	4a67      	ldr	r2, [pc, #412]	@ (8007300 <ai_platform_network_init+0x2d4>)
 8007164:	2301      	movs	r3, #1
 8007166:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800716a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800716e:	2b00      	cmp	r3, #0
 8007170:	d1fb      	bne.n	800716a <ai_platform_network_init+0x13e>
 8007172:	4961      	ldr	r1, [pc, #388]	@ (80072f8 <ai_platform_network_init+0x2cc>)
 8007174:	4b61      	ldr	r3, [pc, #388]	@ (80072fc <ai_platform_network_init+0x2d0>)
 8007176:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 800717a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800717e:	429a      	cmp	r2, r3
 8007180:	d113      	bne.n	80071aa <ai_platform_network_init+0x17e>
 8007182:	2600      	movs	r6, #0
 8007184:	f7ff f886 	bl	8006294 <_ai_platform_release_crc>
 8007188:	4630      	mov	r0, r6
 800718a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800718e:	4a59      	ldr	r2, [pc, #356]	@ (80072f4 <ai_platform_network_init+0x2c8>)
 8007190:	2301      	movs	r3, #1
 8007192:	6093      	str	r3, [r2, #8]
 8007194:	6893      	ldr	r3, [r2, #8]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d1fc      	bne.n	8007194 <ai_platform_network_init+0x168>
 800719a:	4b57      	ldr	r3, [pc, #348]	@ (80072f8 <ai_platform_network_init+0x2cc>)
 800719c:	6013      	str	r3, [r2, #0]
 800719e:	4b57      	ldr	r3, [pc, #348]	@ (80072fc <ai_platform_network_init+0x2d0>)
 80071a0:	6812      	ldr	r2, [r2, #0]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	f43f af7a 	beq.w	800709c <ai_platform_network_init+0x70>
 80071a8:	e7fe      	b.n	80071a8 <ai_platform_network_init+0x17c>
 80071aa:	e7fe      	b.n	80071aa <ai_platform_network_init+0x17e>
 80071ac:	4a54      	ldr	r2, [pc, #336]	@ (8007300 <ai_platform_network_init+0x2d4>)
 80071ae:	2301      	movs	r3, #1
 80071b0:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80071b4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d1fb      	bne.n	80071b4 <ai_platform_network_init+0x188>
 80071bc:	4b4e      	ldr	r3, [pc, #312]	@ (80072f8 <ai_platform_network_init+0x2cc>)
 80071be:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 80071c2:	4b4e      	ldr	r3, [pc, #312]	@ (80072fc <ai_platform_network_init+0x2d0>)
 80071c4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 80071c8:	429a      	cmp	r2, r3
 80071ca:	f43f af67 	beq.w	800709c <ai_platform_network_init+0x70>
 80071ce:	e7fe      	b.n	80071ce <ai_platform_network_init+0x1a2>
 80071d0:	2101      	movs	r1, #1
 80071d2:	4628      	mov	r0, r5
 80071d4:	f105 081c 	add.w	r8, r5, #28
 80071d8:	686e      	ldr	r6, [r5, #4]
 80071da:	f7ff f80b 	bl	80061f4 <ai_buffer_get_size>
 80071de:	4607      	mov	r7, r0
 80071e0:	2101      	movs	r1, #1
 80071e2:	4640      	mov	r0, r8
 80071e4:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80071e8:	f7ff f804 	bl	80061f4 <ai_buffer_get_size>
 80071ec:	2f00      	cmp	r7, #0
 80071ee:	d13e      	bne.n	800726e <ai_platform_network_init+0x242>
 80071f0:	2800      	cmp	r0, #0
 80071f2:	f000 808e 	beq.w	8007312 <ai_platform_network_init+0x2e6>
 80071f6:	f1b9 0f00 	cmp.w	r9, #0
 80071fa:	f000 8094 	beq.w	8007326 <ai_platform_network_init+0x2fa>
 80071fe:	f04f 0c01 	mov.w	ip, #1
 8007202:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8007204:	2600      	movs	r6, #0
 8007206:	83e7      	strh	r7, [r4, #30]
 8007208:	4563      	cmp	r3, ip
 800720a:	83a6      	strh	r6, [r4, #28]
 800720c:	d37a      	bcc.n	8007304 <ai_platform_network_init+0x2d8>
 800720e:	f1bc 0f00 	cmp.w	ip, #0
 8007212:	f000 809c 	beq.w	800734e <ai_platform_network_init+0x322>
 8007216:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8007218:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 800721c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800721e:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8007222:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8007226:	e74c      	b.n	80070c2 <ai_platform_network_init+0x96>
 8007228:	4a35      	ldr	r2, [pc, #212]	@ (8007300 <ai_platform_network_init+0x2d4>)
 800722a:	2301      	movs	r3, #1
 800722c:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8007230:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8007234:	2b00      	cmp	r3, #0
 8007236:	d1fb      	bne.n	8007230 <ai_platform_network_init+0x204>
 8007238:	492f      	ldr	r1, [pc, #188]	@ (80072f8 <ai_platform_network_init+0x2cc>)
 800723a:	4b30      	ldr	r3, [pc, #192]	@ (80072fc <ai_platform_network_init+0x2d0>)
 800723c:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8007240:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8007244:	429a      	cmp	r2, r3
 8007246:	d09c      	beq.n	8007182 <ai_platform_network_init+0x156>
 8007248:	e7fe      	b.n	8007248 <ai_platform_network_init+0x21c>
 800724a:	4a2d      	ldr	r2, [pc, #180]	@ (8007300 <ai_platform_network_init+0x2d4>)
 800724c:	2301      	movs	r3, #1
 800724e:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8007252:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8007256:	2b00      	cmp	r3, #0
 8007258:	d1fb      	bne.n	8007252 <ai_platform_network_init+0x226>
 800725a:	4b27      	ldr	r3, [pc, #156]	@ (80072f8 <ai_platform_network_init+0x2cc>)
 800725c:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8007260:	4b26      	ldr	r3, [pc, #152]	@ (80072fc <ai_platform_network_init+0x2d0>)
 8007262:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8007266:	429a      	cmp	r2, r3
 8007268:	f43f af18 	beq.w	800709c <ai_platform_network_init+0x70>
 800726c:	e7fe      	b.n	800726c <ai_platform_network_init+0x240>
 800726e:	2800      	cmp	r0, #0
 8007270:	d153      	bne.n	800731a <ai_platform_network_init+0x2ee>
 8007272:	4680      	mov	r8, r0
 8007274:	4684      	mov	ip, r0
 8007276:	2e00      	cmp	r6, #0
 8007278:	d063      	beq.n	8007342 <ai_platform_network_init+0x316>
 800727a:	8be6      	ldrh	r6, [r4, #30]
 800727c:	2e00      	cmp	r6, #0
 800727e:	d168      	bne.n	8007352 <ai_platform_network_init+0x326>
 8007280:	2212      	movs	r2, #18
 8007282:	2116      	movs	r1, #22
 8007284:	f104 0010 	add.w	r0, r4, #16
 8007288:	f000 fc7a 	bl	8007b80 <core_set_error>
 800728c:	e77c      	b.n	8007188 <ai_platform_network_init+0x15c>
 800728e:	4a19      	ldr	r2, [pc, #100]	@ (80072f4 <ai_platform_network_init+0x2c8>)
 8007290:	2301      	movs	r3, #1
 8007292:	6093      	str	r3, [r2, #8]
 8007294:	6893      	ldr	r3, [r2, #8]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d1fc      	bne.n	8007294 <ai_platform_network_init+0x268>
 800729a:	4b17      	ldr	r3, [pc, #92]	@ (80072f8 <ai_platform_network_init+0x2cc>)
 800729c:	6013      	str	r3, [r2, #0]
 800729e:	4b17      	ldr	r3, [pc, #92]	@ (80072fc <ai_platform_network_init+0x2d0>)
 80072a0:	6812      	ldr	r2, [r2, #0]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	f43f aefa 	beq.w	800709c <ai_platform_network_init+0x70>
 80072a8:	e7fe      	b.n	80072a8 <ai_platform_network_init+0x27c>
 80072aa:	4a12      	ldr	r2, [pc, #72]	@ (80072f4 <ai_platform_network_init+0x2c8>)
 80072ac:	2301      	movs	r3, #1
 80072ae:	6093      	str	r3, [r2, #8]
 80072b0:	6893      	ldr	r3, [r2, #8]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d1fc      	bne.n	80072b0 <ai_platform_network_init+0x284>
 80072b6:	4910      	ldr	r1, [pc, #64]	@ (80072f8 <ai_platform_network_init+0x2cc>)
 80072b8:	4b10      	ldr	r3, [pc, #64]	@ (80072fc <ai_platform_network_init+0x2d0>)
 80072ba:	6011      	str	r1, [r2, #0]
 80072bc:	6812      	ldr	r2, [r2, #0]
 80072be:	429a      	cmp	r2, r3
 80072c0:	f43f af5f 	beq.w	8007182 <ai_platform_network_init+0x156>
 80072c4:	e7fe      	b.n	80072c4 <ai_platform_network_init+0x298>
 80072c6:	4a0b      	ldr	r2, [pc, #44]	@ (80072f4 <ai_platform_network_init+0x2c8>)
 80072c8:	2301      	movs	r3, #1
 80072ca:	6093      	str	r3, [r2, #8]
 80072cc:	6893      	ldr	r3, [r2, #8]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d1fc      	bne.n	80072cc <ai_platform_network_init+0x2a0>
 80072d2:	4b09      	ldr	r3, [pc, #36]	@ (80072f8 <ai_platform_network_init+0x2cc>)
 80072d4:	6013      	str	r3, [r2, #0]
 80072d6:	4b09      	ldr	r3, [pc, #36]	@ (80072fc <ai_platform_network_init+0x2d0>)
 80072d8:	6812      	ldr	r2, [r2, #0]
 80072da:	429a      	cmp	r2, r3
 80072dc:	f43f aede 	beq.w	800709c <ai_platform_network_init+0x70>
 80072e0:	e7fe      	b.n	80072e0 <ai_platform_network_init+0x2b4>
 80072e2:	bf00      	nop
 80072e4:	a1c00100 	.word	0xa1c00100
 80072e8:	e0042000 	.word	0xe0042000
 80072ec:	5c001000 	.word	0x5c001000
 80072f0:	a1facade 	.word	0xa1facade
 80072f4:	40023000 	.word	0x40023000
 80072f8:	f407a5c2 	.word	0xf407a5c2
 80072fc:	b5e8b5cd 	.word	0xb5e8b5cd
 8007300:	58024000 	.word	0x58024000
 8007304:	2213      	movs	r2, #19
 8007306:	2116      	movs	r1, #22
 8007308:	f104 0010 	add.w	r0, r4, #16
 800730c:	f000 fc38 	bl	8007b80 <core_set_error>
 8007310:	e73a      	b.n	8007188 <ai_platform_network_init+0x15c>
 8007312:	4607      	mov	r7, r0
 8007314:	4680      	mov	r8, r0
 8007316:	4684      	mov	ip, r0
 8007318:	e773      	b.n	8007202 <ai_platform_network_init+0x1d6>
 800731a:	f1b9 0f00 	cmp.w	r9, #0
 800731e:	d002      	beq.n	8007326 <ai_platform_network_init+0x2fa>
 8007320:	f04f 0c01 	mov.w	ip, #1
 8007324:	e7a7      	b.n	8007276 <ai_platform_network_init+0x24a>
 8007326:	2110      	movs	r1, #16
 8007328:	2213      	movs	r2, #19
 800732a:	2600      	movs	r6, #0
 800732c:	1860      	adds	r0, r4, r1
 800732e:	f000 fc27 	bl	8007b80 <core_set_error>
 8007332:	e729      	b.n	8007188 <ai_platform_network_init+0x15c>
 8007334:	2110      	movs	r1, #16
 8007336:	2211      	movs	r2, #17
 8007338:	462e      	mov	r6, r5
 800733a:	1860      	adds	r0, r4, r1
 800733c:	f000 fc20 	bl	8007b80 <core_set_error>
 8007340:	e722      	b.n	8007188 <ai_platform_network_init+0x15c>
 8007342:	2110      	movs	r1, #16
 8007344:	2212      	movs	r2, #18
 8007346:	1860      	adds	r0, r4, r1
 8007348:	f000 fc1a 	bl	8007b80 <core_set_error>
 800734c:	e71c      	b.n	8007188 <ai_platform_network_init+0x15c>
 800734e:	4666      	mov	r6, ip
 8007350:	e6b7      	b.n	80070c2 <ai_platform_network_init+0x96>
 8007352:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007354:	6a26      	ldr	r6, [r4, #32]
 8007356:	2701      	movs	r7, #1
 8007358:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800735a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800735e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8007362:	e74e      	b.n	8007202 <ai_platform_network_init+0x1d6>

08007364 <ai_platform_network_post_init>:
 8007364:	b538      	push	{r3, r4, r5, lr}
 8007366:	2800      	cmp	r0, #0
 8007368:	d04e      	beq.n	8007408 <ai_platform_network_post_init+0xa4>
 800736a:	4b8c      	ldr	r3, [pc, #560]	@ (800759c <ai_platform_network_post_init+0x238>)
 800736c:	4604      	mov	r4, r0
 800736e:	6802      	ldr	r2, [r0, #0]
 8007370:	429a      	cmp	r2, r3
 8007372:	d149      	bne.n	8007408 <ai_platform_network_post_init+0xa4>
 8007374:	f7fe ff8c 	bl	8006290 <_ai_platform_acquire_crc>
 8007378:	4b89      	ldr	r3, [pc, #548]	@ (80075a0 <ai_platform_network_post_init+0x23c>)
 800737a:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007384:	189a      	adds	r2, r3, r2
 8007386:	2a01      	cmp	r2, #1
 8007388:	f240 8095 	bls.w	80074b6 <ai_platform_network_post_init+0x152>
 800738c:	f240 4249 	movw	r2, #1097	@ 0x449
 8007390:	4293      	cmp	r3, r2
 8007392:	f000 8090 	beq.w	80074b6 <ai_platform_network_post_init+0x152>
 8007396:	4a83      	ldr	r2, [pc, #524]	@ (80075a4 <ai_platform_network_post_init+0x240>)
 8007398:	6813      	ldr	r3, [r2, #0]
 800739a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800739e:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 80073a2:	f000 8096 	beq.w	80074d2 <ai_platform_network_post_init+0x16e>
 80073a6:	6813      	ldr	r3, [r2, #0]
 80073a8:	f240 4183 	movw	r1, #1155	@ 0x483
 80073ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80073b0:	428b      	cmp	r3, r1
 80073b2:	f000 80b8 	beq.w	8007526 <ai_platform_network_post_init+0x1c2>
 80073b6:	6813      	ldr	r3, [r2, #0]
 80073b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80073bc:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 80073c0:	f000 80de 	beq.w	8007580 <ai_platform_network_post_init+0x21c>
 80073c4:	6813      	ldr	r3, [r2, #0]
 80073c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	f000 80bd 	beq.w	800754a <ai_platform_network_post_init+0x1e6>
 80073d0:	f7fe ff60 	bl	8006294 <_ai_platform_release_crc>
 80073d4:	68e3      	ldr	r3, [r4, #12]
 80073d6:	f013 0502 	ands.w	r5, r3, #2
 80073da:	f000 808c 	beq.w	80074f6 <ai_platform_network_post_init+0x192>
 80073de:	4620      	mov	r0, r4
 80073e0:	f000 fd60 	bl	8007ea4 <ai_layers_post_init_all>
 80073e4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80073e6:	b16b      	cbz	r3, 8007404 <ai_platform_network_post_init+0xa0>
 80073e8:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 80073ea:	e007      	b.n	80073fc <ai_platform_network_post_init+0x98>
 80073ec:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	@ 0x3c
 80073f0:	4798      	blx	r3
 80073f2:	692b      	ldr	r3, [r5, #16]
 80073f4:	b133      	cbz	r3, 8007404 <ai_platform_network_post_init+0xa0>
 80073f6:	42ab      	cmp	r3, r5
 80073f8:	461d      	mov	r5, r3
 80073fa:	d003      	beq.n	8007404 <ai_platform_network_post_init+0xa0>
 80073fc:	4629      	mov	r1, r5
 80073fe:	2000      	movs	r0, #0
 8007400:	2d00      	cmp	r5, #0
 8007402:	d1f3      	bne.n	80073ec <ai_platform_network_post_init+0x88>
 8007404:	2001      	movs	r0, #1
 8007406:	bd38      	pop	{r3, r4, r5, pc}
 8007408:	f7fe ff42 	bl	8006290 <_ai_platform_acquire_crc>
 800740c:	4b64      	ldr	r3, [pc, #400]	@ (80075a0 <ai_platform_network_post_init+0x23c>)
 800740e:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007418:	185a      	adds	r2, r3, r1
 800741a:	2a01      	cmp	r2, #1
 800741c:	d92a      	bls.n	8007474 <ai_platform_network_post_init+0x110>
 800741e:	f240 4249 	movw	r2, #1097	@ 0x449
 8007422:	4293      	cmp	r3, r2
 8007424:	d026      	beq.n	8007474 <ai_platform_network_post_init+0x110>
 8007426:	4a5f      	ldr	r2, [pc, #380]	@ (80075a4 <ai_platform_network_post_init+0x240>)
 8007428:	6813      	ldr	r3, [r2, #0]
 800742a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800742e:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8007432:	d02c      	beq.n	800748e <ai_platform_network_post_init+0x12a>
 8007434:	6813      	ldr	r3, [r2, #0]
 8007436:	f240 4183 	movw	r1, #1155	@ 0x483
 800743a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800743e:	428b      	cmp	r3, r1
 8007440:	d060      	beq.n	8007504 <ai_platform_network_post_init+0x1a0>
 8007442:	6813      	ldr	r3, [r2, #0]
 8007444:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007448:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 800744c:	f000 808b 	beq.w	8007566 <ai_platform_network_post_init+0x202>
 8007450:	6813      	ldr	r3, [r2, #0]
 8007452:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007456:	2b00      	cmp	r3, #0
 8007458:	d129      	bne.n	80074ae <ai_platform_network_post_init+0x14a>
 800745a:	4a53      	ldr	r2, [pc, #332]	@ (80075a8 <ai_platform_network_post_init+0x244>)
 800745c:	2301      	movs	r3, #1
 800745e:	6093      	str	r3, [r2, #8]
 8007460:	6893      	ldr	r3, [r2, #8]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d1fc      	bne.n	8007460 <ai_platform_network_post_init+0xfc>
 8007466:	4951      	ldr	r1, [pc, #324]	@ (80075ac <ai_platform_network_post_init+0x248>)
 8007468:	4b51      	ldr	r3, [pc, #324]	@ (80075b0 <ai_platform_network_post_init+0x24c>)
 800746a:	6011      	str	r1, [r2, #0]
 800746c:	6812      	ldr	r2, [r2, #0]
 800746e:	429a      	cmp	r2, r3
 8007470:	d01d      	beq.n	80074ae <ai_platform_network_post_init+0x14a>
 8007472:	e7fe      	b.n	8007472 <ai_platform_network_post_init+0x10e>
 8007474:	4a4c      	ldr	r2, [pc, #304]	@ (80075a8 <ai_platform_network_post_init+0x244>)
 8007476:	2301      	movs	r3, #1
 8007478:	6093      	str	r3, [r2, #8]
 800747a:	6893      	ldr	r3, [r2, #8]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d1fc      	bne.n	800747a <ai_platform_network_post_init+0x116>
 8007480:	494a      	ldr	r1, [pc, #296]	@ (80075ac <ai_platform_network_post_init+0x248>)
 8007482:	4b4b      	ldr	r3, [pc, #300]	@ (80075b0 <ai_platform_network_post_init+0x24c>)
 8007484:	6011      	str	r1, [r2, #0]
 8007486:	6812      	ldr	r2, [r2, #0]
 8007488:	429a      	cmp	r2, r3
 800748a:	d010      	beq.n	80074ae <ai_platform_network_post_init+0x14a>
 800748c:	e7fe      	b.n	800748c <ai_platform_network_post_init+0x128>
 800748e:	4a49      	ldr	r2, [pc, #292]	@ (80075b4 <ai_platform_network_post_init+0x250>)
 8007490:	2301      	movs	r3, #1
 8007492:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8007496:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800749a:	2b00      	cmp	r3, #0
 800749c:	d1fb      	bne.n	8007496 <ai_platform_network_post_init+0x132>
 800749e:	4943      	ldr	r1, [pc, #268]	@ (80075ac <ai_platform_network_post_init+0x248>)
 80074a0:	4b43      	ldr	r3, [pc, #268]	@ (80075b0 <ai_platform_network_post_init+0x24c>)
 80074a2:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 80074a6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d110      	bne.n	80074d0 <ai_platform_network_post_init+0x16c>
 80074ae:	f7fe fef1 	bl	8006294 <_ai_platform_release_crc>
 80074b2:	2000      	movs	r0, #0
 80074b4:	bd38      	pop	{r3, r4, r5, pc}
 80074b6:	4a3c      	ldr	r2, [pc, #240]	@ (80075a8 <ai_platform_network_post_init+0x244>)
 80074b8:	2301      	movs	r3, #1
 80074ba:	6093      	str	r3, [r2, #8]
 80074bc:	6893      	ldr	r3, [r2, #8]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1fc      	bne.n	80074bc <ai_platform_network_post_init+0x158>
 80074c2:	493a      	ldr	r1, [pc, #232]	@ (80075ac <ai_platform_network_post_init+0x248>)
 80074c4:	4b3a      	ldr	r3, [pc, #232]	@ (80075b0 <ai_platform_network_post_init+0x24c>)
 80074c6:	6011      	str	r1, [r2, #0]
 80074c8:	6812      	ldr	r2, [r2, #0]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d080      	beq.n	80073d0 <ai_platform_network_post_init+0x6c>
 80074ce:	e7fe      	b.n	80074ce <ai_platform_network_post_init+0x16a>
 80074d0:	e7fe      	b.n	80074d0 <ai_platform_network_post_init+0x16c>
 80074d2:	4a38      	ldr	r2, [pc, #224]	@ (80075b4 <ai_platform_network_post_init+0x250>)
 80074d4:	2301      	movs	r3, #1
 80074d6:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80074da:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d1fb      	bne.n	80074da <ai_platform_network_post_init+0x176>
 80074e2:	4932      	ldr	r1, [pc, #200]	@ (80075ac <ai_platform_network_post_init+0x248>)
 80074e4:	4b32      	ldr	r3, [pc, #200]	@ (80075b0 <ai_platform_network_post_init+0x24c>)
 80074e6:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 80074ea:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 80074ee:	429a      	cmp	r2, r3
 80074f0:	f43f af6e 	beq.w	80073d0 <ai_platform_network_post_init+0x6c>
 80074f4:	e7fe      	b.n	80074f4 <ai_platform_network_post_init+0x190>
 80074f6:	2210      	movs	r2, #16
 80074f8:	2111      	movs	r1, #17
 80074fa:	18a0      	adds	r0, r4, r2
 80074fc:	f000 fb40 	bl	8007b80 <core_set_error>
 8007500:	4628      	mov	r0, r5
 8007502:	bd38      	pop	{r3, r4, r5, pc}
 8007504:	4a2b      	ldr	r2, [pc, #172]	@ (80075b4 <ai_platform_network_post_init+0x250>)
 8007506:	2301      	movs	r3, #1
 8007508:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800750c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8007510:	2b00      	cmp	r3, #0
 8007512:	d1fb      	bne.n	800750c <ai_platform_network_post_init+0x1a8>
 8007514:	4925      	ldr	r1, [pc, #148]	@ (80075ac <ai_platform_network_post_init+0x248>)
 8007516:	4b26      	ldr	r3, [pc, #152]	@ (80075b0 <ai_platform_network_post_init+0x24c>)
 8007518:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 800751c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8007520:	429a      	cmp	r2, r3
 8007522:	d0c4      	beq.n	80074ae <ai_platform_network_post_init+0x14a>
 8007524:	e7fe      	b.n	8007524 <ai_platform_network_post_init+0x1c0>
 8007526:	4a23      	ldr	r2, [pc, #140]	@ (80075b4 <ai_platform_network_post_init+0x250>)
 8007528:	2301      	movs	r3, #1
 800752a:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800752e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8007532:	2b00      	cmp	r3, #0
 8007534:	d1fb      	bne.n	800752e <ai_platform_network_post_init+0x1ca>
 8007536:	491d      	ldr	r1, [pc, #116]	@ (80075ac <ai_platform_network_post_init+0x248>)
 8007538:	4b1d      	ldr	r3, [pc, #116]	@ (80075b0 <ai_platform_network_post_init+0x24c>)
 800753a:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 800753e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8007542:	429a      	cmp	r2, r3
 8007544:	f43f af44 	beq.w	80073d0 <ai_platform_network_post_init+0x6c>
 8007548:	e7fe      	b.n	8007548 <ai_platform_network_post_init+0x1e4>
 800754a:	4a17      	ldr	r2, [pc, #92]	@ (80075a8 <ai_platform_network_post_init+0x244>)
 800754c:	2301      	movs	r3, #1
 800754e:	6093      	str	r3, [r2, #8]
 8007550:	6893      	ldr	r3, [r2, #8]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d1fc      	bne.n	8007550 <ai_platform_network_post_init+0x1ec>
 8007556:	4915      	ldr	r1, [pc, #84]	@ (80075ac <ai_platform_network_post_init+0x248>)
 8007558:	4b15      	ldr	r3, [pc, #84]	@ (80075b0 <ai_platform_network_post_init+0x24c>)
 800755a:	6011      	str	r1, [r2, #0]
 800755c:	6812      	ldr	r2, [r2, #0]
 800755e:	429a      	cmp	r2, r3
 8007560:	f43f af36 	beq.w	80073d0 <ai_platform_network_post_init+0x6c>
 8007564:	e7fe      	b.n	8007564 <ai_platform_network_post_init+0x200>
 8007566:	4a10      	ldr	r2, [pc, #64]	@ (80075a8 <ai_platform_network_post_init+0x244>)
 8007568:	2301      	movs	r3, #1
 800756a:	6093      	str	r3, [r2, #8]
 800756c:	6893      	ldr	r3, [r2, #8]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d1fc      	bne.n	800756c <ai_platform_network_post_init+0x208>
 8007572:	490e      	ldr	r1, [pc, #56]	@ (80075ac <ai_platform_network_post_init+0x248>)
 8007574:	4b0e      	ldr	r3, [pc, #56]	@ (80075b0 <ai_platform_network_post_init+0x24c>)
 8007576:	6011      	str	r1, [r2, #0]
 8007578:	6812      	ldr	r2, [r2, #0]
 800757a:	429a      	cmp	r2, r3
 800757c:	d097      	beq.n	80074ae <ai_platform_network_post_init+0x14a>
 800757e:	e7fe      	b.n	800757e <ai_platform_network_post_init+0x21a>
 8007580:	4a09      	ldr	r2, [pc, #36]	@ (80075a8 <ai_platform_network_post_init+0x244>)
 8007582:	2301      	movs	r3, #1
 8007584:	6093      	str	r3, [r2, #8]
 8007586:	6893      	ldr	r3, [r2, #8]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d1fc      	bne.n	8007586 <ai_platform_network_post_init+0x222>
 800758c:	4907      	ldr	r1, [pc, #28]	@ (80075ac <ai_platform_network_post_init+0x248>)
 800758e:	4b08      	ldr	r3, [pc, #32]	@ (80075b0 <ai_platform_network_post_init+0x24c>)
 8007590:	6011      	str	r1, [r2, #0]
 8007592:	6812      	ldr	r2, [r2, #0]
 8007594:	429a      	cmp	r2, r3
 8007596:	f43f af1b 	beq.w	80073d0 <ai_platform_network_post_init+0x6c>
 800759a:	e7fe      	b.n	800759a <ai_platform_network_post_init+0x236>
 800759c:	a1c00100 	.word	0xa1c00100
 80075a0:	e0042000 	.word	0xe0042000
 80075a4:	5c001000 	.word	0x5c001000
 80075a8:	40023000 	.word	0x40023000
 80075ac:	f407a5c2 	.word	0xf407a5c2
 80075b0:	b5e8b5cd 	.word	0xb5e8b5cd
 80075b4:	58024000 	.word	0x58024000

080075b8 <ai_platform_network_process>:
 80075b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075bc:	b085      	sub	sp, #20
 80075be:	460e      	mov	r6, r1
 80075c0:	4605      	mov	r5, r0
 80075c2:	9201      	str	r2, [sp, #4]
 80075c4:	b120      	cbz	r0, 80075d0 <ai_platform_network_process+0x18>
 80075c6:	4b24      	ldr	r3, [pc, #144]	@ (8007658 <ai_platform_network_process+0xa0>)
 80075c8:	6802      	ldr	r2, [r0, #0]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	bf18      	it	ne
 80075ce:	2500      	movne	r5, #0
 80075d0:	f7fe fe5e 	bl	8006290 <_ai_platform_acquire_crc>
 80075d4:	4b21      	ldr	r3, [pc, #132]	@ (800765c <ai_platform_network_process+0xa4>)
 80075d6:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075e0:	185a      	adds	r2, r3, r1
 80075e2:	2a01      	cmp	r2, #1
 80075e4:	d92b      	bls.n	800763e <ai_platform_network_process+0x86>
 80075e6:	f240 4249 	movw	r2, #1097	@ 0x449
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d027      	beq.n	800763e <ai_platform_network_process+0x86>
 80075ee:	4a1c      	ldr	r2, [pc, #112]	@ (8007660 <ai_platform_network_process+0xa8>)
 80075f0:	6813      	ldr	r3, [r2, #0]
 80075f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075f6:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 80075fa:	d039      	beq.n	8007670 <ai_platform_network_process+0xb8>
 80075fc:	6813      	ldr	r3, [r2, #0]
 80075fe:	f240 4183 	movw	r1, #1155	@ 0x483
 8007602:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007606:	428b      	cmp	r3, r1
 8007608:	f000 819c 	beq.w	8007944 <ai_platform_network_process+0x38c>
 800760c:	6813      	ldr	r3, [r2, #0]
 800760e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007612:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8007616:	f000 8179 	beq.w	800790c <ai_platform_network_process+0x354>
 800761a:	6813      	ldr	r3, [r2, #0]
 800761c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007620:	2b00      	cmp	r3, #0
 8007622:	d136      	bne.n	8007692 <ai_platform_network_process+0xda>
 8007624:	4a0f      	ldr	r2, [pc, #60]	@ (8007664 <ai_platform_network_process+0xac>)
 8007626:	2301      	movs	r3, #1
 8007628:	6093      	str	r3, [r2, #8]
 800762a:	6893      	ldr	r3, [r2, #8]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d1fc      	bne.n	800762a <ai_platform_network_process+0x72>
 8007630:	4b0d      	ldr	r3, [pc, #52]	@ (8007668 <ai_platform_network_process+0xb0>)
 8007632:	6013      	str	r3, [r2, #0]
 8007634:	4b0d      	ldr	r3, [pc, #52]	@ (800766c <ai_platform_network_process+0xb4>)
 8007636:	6812      	ldr	r2, [r2, #0]
 8007638:	429a      	cmp	r2, r3
 800763a:	d02a      	beq.n	8007692 <ai_platform_network_process+0xda>
 800763c:	e7fe      	b.n	800763c <ai_platform_network_process+0x84>
 800763e:	4a09      	ldr	r2, [pc, #36]	@ (8007664 <ai_platform_network_process+0xac>)
 8007640:	2301      	movs	r3, #1
 8007642:	6093      	str	r3, [r2, #8]
 8007644:	6893      	ldr	r3, [r2, #8]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d1fc      	bne.n	8007644 <ai_platform_network_process+0x8c>
 800764a:	4b07      	ldr	r3, [pc, #28]	@ (8007668 <ai_platform_network_process+0xb0>)
 800764c:	6013      	str	r3, [r2, #0]
 800764e:	4b07      	ldr	r3, [pc, #28]	@ (800766c <ai_platform_network_process+0xb4>)
 8007650:	6812      	ldr	r2, [r2, #0]
 8007652:	429a      	cmp	r2, r3
 8007654:	d01d      	beq.n	8007692 <ai_platform_network_process+0xda>
 8007656:	e7fe      	b.n	8007656 <ai_platform_network_process+0x9e>
 8007658:	a1c00100 	.word	0xa1c00100
 800765c:	e0042000 	.word	0xe0042000
 8007660:	5c001000 	.word	0x5c001000
 8007664:	40023000 	.word	0x40023000
 8007668:	f407a5c2 	.word	0xf407a5c2
 800766c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007670:	4ab0      	ldr	r2, [pc, #704]	@ (8007934 <ai_platform_network_process+0x37c>)
 8007672:	2301      	movs	r3, #1
 8007674:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8007678:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800767c:	2b00      	cmp	r3, #0
 800767e:	d1fb      	bne.n	8007678 <ai_platform_network_process+0xc0>
 8007680:	4bad      	ldr	r3, [pc, #692]	@ (8007938 <ai_platform_network_process+0x380>)
 8007682:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8007686:	4bad      	ldr	r3, [pc, #692]	@ (800793c <ai_platform_network_process+0x384>)
 8007688:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800768c:	429a      	cmp	r2, r3
 800768e:	f040 812b 	bne.w	80078e8 <ai_platform_network_process+0x330>
 8007692:	f7fe fdff 	bl	8006294 <_ai_platform_release_crc>
 8007696:	2d00      	cmp	r5, #0
 8007698:	f000 8172 	beq.w	8007980 <ai_platform_network_process+0x3c8>
 800769c:	8dab      	ldrh	r3, [r5, #44]	@ 0x2c
 800769e:	2b00      	cmp	r3, #0
 80076a0:	f000 8123 	beq.w	80078ea <ai_platform_network_process+0x332>
 80076a4:	68eb      	ldr	r3, [r5, #12]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 80076ac:	f003 0303 	and.w	r3, r3, #3
 80076b0:	616a      	str	r2, [r5, #20]
 80076b2:	2b03      	cmp	r3, #3
 80076b4:	f040 811f 	bne.w	80078f6 <ai_platform_network_process+0x33e>
 80076b8:	2e00      	cmp	r6, #0
 80076ba:	f000 8156 	beq.w	800796a <ai_platform_network_process+0x3b2>
 80076be:	fab8 f788 	clz	r7, r8
 80076c2:	097f      	lsrs	r7, r7, #5
 80076c4:	f1b8 0f00 	cmp.w	r8, #0
 80076c8:	f000 814f 	beq.w	800796a <ai_platform_network_process+0x3b2>
 80076cc:	f8b8 3000 	ldrh.w	r3, [r8]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f000 814a 	beq.w	800796a <ai_platform_network_process+0x3b2>
 80076d6:	69b3      	ldr	r3, [r6, #24]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	e9cd 3502 	strd	r3, r5, [sp, #8]
 80076de:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d072      	beq.n	80077cc <ai_platform_network_process+0x214>
 80076e6:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 80076ea:	2c00      	cmp	r4, #0
 80076ec:	d06e      	beq.n	80077cc <ai_platform_network_process+0x214>
 80076ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80076f2:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80076f6:	f8d3 a000 	ldr.w	sl, [r3]
 80076fa:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 80076fe:	f000 8133 	beq.w	8007968 <ai_platform_network_process+0x3b0>
 8007702:	69a3      	ldr	r3, [r4, #24]
 8007704:	2101      	movs	r1, #1
 8007706:	4630      	mov	r0, r6
 8007708:	685d      	ldr	r5, [r3, #4]
 800770a:	f7fe fd73 	bl	80061f4 <ai_buffer_get_size>
 800770e:	4285      	cmp	r5, r0
 8007710:	f0c0 8138 	bcc.w	8007984 <ai_platform_network_process+0x3cc>
 8007714:	68e0      	ldr	r0, [r4, #12]
 8007716:	69b1      	ldr	r1, [r6, #24]
 8007718:	68c2      	ldr	r2, [r0, #12]
 800771a:	68cb      	ldr	r3, [r1, #12]
 800771c:	429a      	cmp	r2, r3
 800771e:	f040 8131 	bne.w	8007984 <ai_platform_network_process+0x3cc>
 8007722:	6882      	ldr	r2, [r0, #8]
 8007724:	688b      	ldr	r3, [r1, #8]
 8007726:	429a      	cmp	r2, r3
 8007728:	f040 812c 	bne.w	8007984 <ai_platform_network_process+0x3cc>
 800772c:	6842      	ldr	r2, [r0, #4]
 800772e:	684b      	ldr	r3, [r1, #4]
 8007730:	429a      	cmp	r2, r3
 8007732:	f040 8127 	bne.w	8007984 <ai_platform_network_process+0x3cc>
 8007736:	69a3      	ldr	r3, [r4, #24]
 8007738:	e9d3 0100 	ldrd	r0, r1, [r3]
 800773c:	f004 f9bc 	bl	800bab8 <ai_array_get_data_byte_size>
 8007740:	4605      	mov	r5, r0
 8007742:	4620      	mov	r0, r4
 8007744:	f004 f9ce 	bl	800bae4 <get_tensor_byte_size>
 8007748:	4285      	cmp	r5, r0
 800774a:	f0c0 811b 	bcc.w	8007984 <ai_platform_network_process+0x3cc>
 800774e:	69a3      	ldr	r3, [r4, #24]
 8007750:	6818      	ldr	r0, [r3, #0]
 8007752:	f004 f91d 	bl	800b990 <ai_array_to_buffer_fmt>
 8007756:	6833      	ldr	r3, [r6, #0]
 8007758:	4058      	eors	r0, r3
 800775a:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 800775e:	f040 81c8 	bne.w	8007af2 <ai_platform_network_process+0x53a>
 8007762:	6873      	ldr	r3, [r6, #4]
 8007764:	2b00      	cmp	r3, #0
 8007766:	f000 81bb 	beq.w	8007ae0 <ai_platform_network_process+0x528>
 800776a:	69b3      	ldr	r3, [r6, #24]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	f000 81c8 	beq.w	8007b04 <ai_platform_network_process+0x54c>
 8007774:	9a02      	ldr	r2, [sp, #8]
 8007776:	4620      	mov	r0, r4
 8007778:	3701      	adds	r7, #1
 800777a:	361c      	adds	r6, #28
 800777c:	429a      	cmp	r2, r3
 800777e:	bf38      	it	cc
 8007780:	461a      	movcc	r2, r3
 8007782:	9202      	str	r2, [sp, #8]
 8007784:	f004 f9ae 	bl	800bae4 <get_tensor_byte_size>
 8007788:	f8c9 0008 	str.w	r0, [r9, #8]
 800778c:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	fb00 f303 	mul.w	r3, r0, r3
 8007796:	f8c9 300c 	str.w	r3, [r9, #12]
 800779a:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800779e:	440b      	add	r3, r1
 80077a0:	f8c9 1004 	str.w	r1, [r9, #4]
 80077a4:	f84a 300b 	str.w	r3, [sl, fp]
 80077a8:	69a0      	ldr	r0, [r4, #24]
 80077aa:	6803      	ldr	r3, [r0, #0]
 80077ac:	009a      	lsls	r2, r3, #2
 80077ae:	f100 80bb 	bmi.w	8007928 <ai_platform_network_process+0x370>
 80077b2:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80077b6:	1a9b      	subs	r3, r3, r2
 80077b8:	4419      	add	r1, r3
 80077ba:	6081      	str	r1, [r0, #8]
 80077bc:	69a3      	ldr	r3, [r4, #24]
 80077be:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80077c2:	60da      	str	r2, [r3, #12]
 80077c4:	f8b8 3000 	ldrh.w	r3, [r8]
 80077c8:	42bb      	cmp	r3, r7
 80077ca:	d888      	bhi.n	80076de <ai_platform_network_process+0x126>
 80077cc:	9d03      	ldr	r5, [sp, #12]
 80077ce:	9b01      	ldr	r3, [sp, #4]
 80077d0:	8daa      	ldrh	r2, [r5, #44]	@ 0x2c
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	f000 819f 	beq.w	8007b16 <ai_platform_network_process+0x55e>
 80077d8:	2a01      	cmp	r2, #1
 80077da:	f240 8179 	bls.w	8007ad0 <ai_platform_network_process+0x518>
 80077de:	f8d5 9030 	ldr.w	r9, [r5, #48]	@ 0x30
 80077e2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	f000 8172 	beq.w	8007ad0 <ai_platform_network_process+0x518>
 80077ec:	9e01      	ldr	r6, [sp, #4]
 80077ee:	2700      	movs	r7, #0
 80077f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	f000 80d3 	beq.w	80079a0 <ai_platform_network_process+0x3e8>
 80077fa:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 80077fe:	2c00      	cmp	r4, #0
 8007800:	f000 80ce 	beq.w	80079a0 <ai_platform_network_process+0x3e8>
 8007804:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8007808:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800780c:	f8d3 8000 	ldr.w	r8, [r3]
 8007810:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8007814:	f000 819d 	beq.w	8007b52 <ai_platform_network_process+0x59a>
 8007818:	69a3      	ldr	r3, [r4, #24]
 800781a:	2101      	movs	r1, #1
 800781c:	4630      	mov	r0, r6
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	9301      	str	r3, [sp, #4]
 8007822:	f7fe fce7 	bl	80061f4 <ai_buffer_get_size>
 8007826:	9b01      	ldr	r3, [sp, #4]
 8007828:	4283      	cmp	r3, r0
 800782a:	f0c0 8151 	bcc.w	8007ad0 <ai_platform_network_process+0x518>
 800782e:	68e0      	ldr	r0, [r4, #12]
 8007830:	69b1      	ldr	r1, [r6, #24]
 8007832:	68c2      	ldr	r2, [r0, #12]
 8007834:	68cb      	ldr	r3, [r1, #12]
 8007836:	429a      	cmp	r2, r3
 8007838:	f040 814a 	bne.w	8007ad0 <ai_platform_network_process+0x518>
 800783c:	6882      	ldr	r2, [r0, #8]
 800783e:	688b      	ldr	r3, [r1, #8]
 8007840:	429a      	cmp	r2, r3
 8007842:	f040 8145 	bne.w	8007ad0 <ai_platform_network_process+0x518>
 8007846:	6842      	ldr	r2, [r0, #4]
 8007848:	684b      	ldr	r3, [r1, #4]
 800784a:	429a      	cmp	r2, r3
 800784c:	f040 8140 	bne.w	8007ad0 <ai_platform_network_process+0x518>
 8007850:	69a3      	ldr	r3, [r4, #24]
 8007852:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007856:	f004 f92f 	bl	800bab8 <ai_array_get_data_byte_size>
 800785a:	9001      	str	r0, [sp, #4]
 800785c:	4620      	mov	r0, r4
 800785e:	f004 f941 	bl	800bae4 <get_tensor_byte_size>
 8007862:	9b01      	ldr	r3, [sp, #4]
 8007864:	4283      	cmp	r3, r0
 8007866:	f0c0 8133 	bcc.w	8007ad0 <ai_platform_network_process+0x518>
 800786a:	69a3      	ldr	r3, [r4, #24]
 800786c:	6818      	ldr	r0, [r3, #0]
 800786e:	f004 f88f 	bl	800b990 <ai_array_to_buffer_fmt>
 8007872:	6833      	ldr	r3, [r6, #0]
 8007874:	4058      	eors	r0, r3
 8007876:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 800787a:	f040 815a 	bne.w	8007b32 <ai_platform_network_process+0x57a>
 800787e:	6873      	ldr	r3, [r6, #4]
 8007880:	2b00      	cmp	r3, #0
 8007882:	f000 814e 	beq.w	8007b22 <ai_platform_network_process+0x56a>
 8007886:	69b3      	ldr	r3, [r6, #24]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2b00      	cmp	r3, #0
 800788c:	f000 8159 	beq.w	8007b42 <ai_platform_network_process+0x58a>
 8007890:	9a02      	ldr	r2, [sp, #8]
 8007892:	4620      	mov	r0, r4
 8007894:	3701      	adds	r7, #1
 8007896:	361c      	adds	r6, #28
 8007898:	429a      	cmp	r2, r3
 800789a:	bf38      	it	cc
 800789c:	461a      	movcc	r2, r3
 800789e:	9202      	str	r2, [sp, #8]
 80078a0:	f004 f920 	bl	800bae4 <get_tensor_byte_size>
 80078a4:	f8ca 0008 	str.w	r0, [sl, #8]
 80078a8:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	fb00 f303 	mul.w	r3, r0, r3
 80078b2:	f8ca 300c 	str.w	r3, [sl, #12]
 80078b6:	f856 1c18 	ldr.w	r1, [r6, #-24]
 80078ba:	440b      	add	r3, r1
 80078bc:	f8ca 1004 	str.w	r1, [sl, #4]
 80078c0:	f848 300b 	str.w	r3, [r8, fp]
 80078c4:	69a0      	ldr	r0, [r4, #24]
 80078c6:	6803      	ldr	r3, [r0, #0]
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	d464      	bmi.n	8007996 <ai_platform_network_process+0x3de>
 80078cc:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80078d0:	1a9b      	subs	r3, r3, r2
 80078d2:	4419      	add	r1, r3
 80078d4:	6081      	str	r1, [r0, #8]
 80078d6:	69a3      	ldr	r3, [r4, #24]
 80078d8:	f8da 2004 	ldr.w	r2, [sl, #4]
 80078dc:	60da      	str	r2, [r3, #12]
 80078de:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80078e2:	429f      	cmp	r7, r3
 80078e4:	d384      	bcc.n	80077f0 <ai_platform_network_process+0x238>
 80078e6:	e05b      	b.n	80079a0 <ai_platform_network_process+0x3e8>
 80078e8:	e7fe      	b.n	80078e8 <ai_platform_network_process+0x330>
 80078ea:	68ea      	ldr	r2, [r5, #12]
 80078ec:	616b      	str	r3, [r5, #20]
 80078ee:	f002 0203 	and.w	r2, r2, #3
 80078f2:	2a03      	cmp	r2, #3
 80078f4:	d039      	beq.n	800796a <ai_platform_network_process+0x3b2>
 80078f6:	2230      	movs	r2, #48	@ 0x30
 80078f8:	2111      	movs	r1, #17
 80078fa:	f105 0010 	add.w	r0, r5, #16
 80078fe:	2400      	movs	r4, #0
 8007900:	f000 f93e 	bl	8007b80 <core_set_error>
 8007904:	4620      	mov	r0, r4
 8007906:	b005      	add	sp, #20
 8007908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800790c:	4a0c      	ldr	r2, [pc, #48]	@ (8007940 <ai_platform_network_process+0x388>)
 800790e:	2301      	movs	r3, #1
 8007910:	6093      	str	r3, [r2, #8]
 8007912:	6893      	ldr	r3, [r2, #8]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1fc      	bne.n	8007912 <ai_platform_network_process+0x35a>
 8007918:	4b07      	ldr	r3, [pc, #28]	@ (8007938 <ai_platform_network_process+0x380>)
 800791a:	6013      	str	r3, [r2, #0]
 800791c:	4b07      	ldr	r3, [pc, #28]	@ (800793c <ai_platform_network_process+0x384>)
 800791e:	6812      	ldr	r2, [r2, #0]
 8007920:	429a      	cmp	r2, r3
 8007922:	f43f aeb6 	beq.w	8007692 <ai_platform_network_process+0xda>
 8007926:	e7fe      	b.n	8007926 <ai_platform_network_process+0x36e>
 8007928:	f8b8 3000 	ldrh.w	r3, [r8]
 800792c:	429f      	cmp	r7, r3
 800792e:	f4ff aed6 	bcc.w	80076de <ai_platform_network_process+0x126>
 8007932:	e74b      	b.n	80077cc <ai_platform_network_process+0x214>
 8007934:	58024000 	.word	0x58024000
 8007938:	f407a5c2 	.word	0xf407a5c2
 800793c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007940:	40023000 	.word	0x40023000
 8007944:	4a87      	ldr	r2, [pc, #540]	@ (8007b64 <ai_platform_network_process+0x5ac>)
 8007946:	2301      	movs	r3, #1
 8007948:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800794c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8007950:	2b00      	cmp	r3, #0
 8007952:	d1fb      	bne.n	800794c <ai_platform_network_process+0x394>
 8007954:	4b84      	ldr	r3, [pc, #528]	@ (8007b68 <ai_platform_network_process+0x5b0>)
 8007956:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 800795a:	4b84      	ldr	r3, [pc, #528]	@ (8007b6c <ai_platform_network_process+0x5b4>)
 800795c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8007960:	429a      	cmp	r2, r3
 8007962:	f43f ae96 	beq.w	8007692 <ai_platform_network_process+0xda>
 8007966:	e7fe      	b.n	8007966 <ai_platform_network_process+0x3ae>
 8007968:	9d03      	ldr	r5, [sp, #12]
 800796a:	2400      	movs	r4, #0
 800796c:	2217      	movs	r2, #23
 800796e:	2112      	movs	r1, #18
 8007970:	f105 0010 	add.w	r0, r5, #16
 8007974:	f000 f904 	bl	8007b80 <core_set_error>
 8007978:	4620      	mov	r0, r4
 800797a:	b005      	add	sp, #20
 800797c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007980:	462c      	mov	r4, r5
 8007982:	e7bf      	b.n	8007904 <ai_platform_network_process+0x34c>
 8007984:	9d03      	ldr	r5, [sp, #12]
 8007986:	2218      	movs	r2, #24
 8007988:	2112      	movs	r1, #18
 800798a:	2400      	movs	r4, #0
 800798c:	f105 0010 	add.w	r0, r5, #16
 8007990:	f000 f8f6 	bl	8007b80 <core_set_error>
 8007994:	e7b6      	b.n	8007904 <ai_platform_network_process+0x34c>
 8007996:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800799a:	429f      	cmp	r7, r3
 800799c:	f4ff af28 	bcc.w	80077f0 <ai_platform_network_process+0x238>
 80079a0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80079a4:	8daa      	ldrh	r2, [r5, #44]	@ 0x2c
 80079a6:	82ab      	strh	r3, [r5, #20]
 80079a8:	2a00      	cmp	r2, #0
 80079aa:	f040 808b 	bne.w	8007ac4 <ai_platform_network_process+0x50c>
 80079ae:	4616      	mov	r6, r2
 80079b0:	4617      	mov	r7, r2
 80079b2:	8aec      	ldrh	r4, [r5, #22]
 80079b4:	429c      	cmp	r4, r3
 80079b6:	d2a5      	bcs.n	8007904 <ai_platform_network_process+0x34c>
 80079b8:	46ab      	mov	fp, r5
 80079ba:	2e00      	cmp	r6, #0
 80079bc:	d030      	beq.n	8007a20 <ai_platform_network_process+0x468>
 80079be:	f04f 0800 	mov.w	r8, #0
 80079c2:	e014      	b.n	80079ee <ai_platform_network_process+0x436>
 80079c4:	6882      	ldr	r2, [r0, #8]
 80079c6:	68c5      	ldr	r5, [r0, #12]
 80079c8:	6863      	ldr	r3, [r4, #4]
 80079ca:	1b52      	subs	r2, r2, r5
 80079cc:	4413      	add	r3, r2
 80079ce:	6083      	str	r3, [r0, #8]
 80079d0:	698b      	ldr	r3, [r1, #24]
 80079d2:	6862      	ldr	r2, [r4, #4]
 80079d4:	60da      	str	r2, [r3, #12]
 80079d6:	f859 200a 	ldr.w	r2, [r9, sl]
 80079da:	f108 0801 	add.w	r8, r8, #1
 80079de:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80079e2:	440b      	add	r3, r1
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d301      	bcc.n	80079ec <ai_platform_network_process+0x434>
 80079e8:	68e3      	ldr	r3, [r4, #12]
 80079ea:	1ad3      	subs	r3, r2, r3
 80079ec:	6063      	str	r3, [r4, #4]
 80079ee:	8833      	ldrh	r3, [r6, #0]
 80079f0:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 80079f4:	4543      	cmp	r3, r8
 80079f6:	d913      	bls.n	8007a20 <ai_platform_network_process+0x468>
 80079f8:	6873      	ldr	r3, [r6, #4]
 80079fa:	b18b      	cbz	r3, 8007a20 <ai_platform_network_process+0x468>
 80079fc:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8007a00:	b171      	cbz	r1, 8007a20 <ai_platform_network_process+0x468>
 8007a02:	6988      	ldr	r0, [r1, #24]
 8007a04:	68b2      	ldr	r2, [r6, #8]
 8007a06:	6803      	ldr	r3, [r0, #0]
 8007a08:	f8d2 9000 	ldr.w	r9, [r2]
 8007a0c:	009d      	lsls	r5, r3, #2
 8007a0e:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8007a12:	d5d7      	bpl.n	80079c4 <ai_platform_network_process+0x40c>
 8007a14:	6881      	ldr	r1, [r0, #8]
 8007a16:	68a2      	ldr	r2, [r4, #8]
 8007a18:	6860      	ldr	r0, [r4, #4]
 8007a1a:	f002 fb99 	bl	800a150 <st_int8_copy>
 8007a1e:	e7da      	b.n	80079d6 <ai_platform_network_process+0x41e>
 8007a20:	4658      	mov	r0, fp
 8007a22:	f000 fa53 	bl	8007ecc <ai_layers_forward_all>
 8007a26:	2f00      	cmp	r7, #0
 8007a28:	d03d      	beq.n	8007aa6 <ai_platform_network_process+0x4ee>
 8007a2a:	2400      	movs	r4, #0
 8007a2c:	e016      	b.n	8007a5c <ai_platform_network_process+0x4a4>
 8007a2e:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8007a32:	f859 100a 	ldr.w	r1, [r9, sl]
 8007a36:	4413      	add	r3, r2
 8007a38:	428b      	cmp	r3, r1
 8007a3a:	d302      	bcc.n	8007a42 <ai_platform_network_process+0x48a>
 8007a3c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007a40:	1acb      	subs	r3, r1, r3
 8007a42:	f8c8 3004 	str.w	r3, [r8, #4]
 8007a46:	6981      	ldr	r1, [r0, #24]
 8007a48:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8007a4c:	1b52      	subs	r2, r2, r5
 8007a4e:	4413      	add	r3, r2
 8007a50:	608b      	str	r3, [r1, #8]
 8007a52:	6983      	ldr	r3, [r0, #24]
 8007a54:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007a58:	60da      	str	r2, [r3, #12]
 8007a5a:	3401      	adds	r4, #1
 8007a5c:	883b      	ldrh	r3, [r7, #0]
 8007a5e:	42a3      	cmp	r3, r4
 8007a60:	d921      	bls.n	8007aa6 <ai_platform_network_process+0x4ee>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	b1fb      	cbz	r3, 8007aa6 <ai_platform_network_process+0x4ee>
 8007a66:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007a6a:	b1e0      	cbz	r0, 8007aa6 <ai_platform_network_process+0x4ee>
 8007a6c:	68ba      	ldr	r2, [r7, #8]
 8007a6e:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8007a72:	6983      	ldr	r3, [r0, #24]
 8007a74:	f8d2 9000 	ldr.w	r9, [r2]
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8007a7e:	0092      	lsls	r2, r2, #2
 8007a80:	d5d5      	bpl.n	8007a2e <ai_platform_network_process+0x476>
 8007a82:	6898      	ldr	r0, [r3, #8]
 8007a84:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8007a88:	f002 fb62 	bl	800a150 <st_int8_copy>
 8007a8c:	f859 200a 	ldr.w	r2, [r9, sl]
 8007a90:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8007a94:	440b      	add	r3, r1
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d302      	bcc.n	8007aa0 <ai_platform_network_process+0x4e8>
 8007a9a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007a9e:	1ad3      	subs	r3, r2, r3
 8007aa0:	f8c8 3004 	str.w	r3, [r8, #4]
 8007aa4:	e7d9      	b.n	8007a5a <ai_platform_network_process+0x4a2>
 8007aa6:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8007aaa:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8007aae:	3401      	adds	r4, #1
 8007ab0:	b2a4      	uxth	r4, r4
 8007ab2:	42a3      	cmp	r3, r4
 8007ab4:	f8ab 4016 	strh.w	r4, [fp, #22]
 8007ab8:	f63f af7f 	bhi.w	80079ba <ai_platform_network_process+0x402>
 8007abc:	4620      	mov	r0, r4
 8007abe:	b005      	add	sp, #20
 8007ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ac4:	2a01      	cmp	r2, #1
 8007ac6:	6b2e      	ldr	r6, [r5, #48]	@ 0x30
 8007ac8:	d029      	beq.n	8007b1e <ai_platform_network_process+0x566>
 8007aca:	f106 070c 	add.w	r7, r6, #12
 8007ace:	e770      	b.n	80079b2 <ai_platform_network_process+0x3fa>
 8007ad0:	2218      	movs	r2, #24
 8007ad2:	2113      	movs	r1, #19
 8007ad4:	f105 0010 	add.w	r0, r5, #16
 8007ad8:	2400      	movs	r4, #0
 8007ada:	f000 f851 	bl	8007b80 <core_set_error>
 8007ade:	e711      	b.n	8007904 <ai_platform_network_process+0x34c>
 8007ae0:	9d03      	ldr	r5, [sp, #12]
 8007ae2:	4604      	mov	r4, r0
 8007ae4:	2217      	movs	r2, #23
 8007ae6:	2112      	movs	r1, #18
 8007ae8:	f105 0010 	add.w	r0, r5, #16
 8007aec:	f000 f848 	bl	8007b80 <core_set_error>
 8007af0:	e708      	b.n	8007904 <ai_platform_network_process+0x34c>
 8007af2:	9d03      	ldr	r5, [sp, #12]
 8007af4:	2219      	movs	r2, #25
 8007af6:	2112      	movs	r1, #18
 8007af8:	2400      	movs	r4, #0
 8007afa:	f105 0010 	add.w	r0, r5, #16
 8007afe:	f000 f83f 	bl	8007b80 <core_set_error>
 8007b02:	e6ff      	b.n	8007904 <ai_platform_network_process+0x34c>
 8007b04:	9d03      	ldr	r5, [sp, #12]
 8007b06:	4604      	mov	r4, r0
 8007b08:	2221      	movs	r2, #33	@ 0x21
 8007b0a:	2112      	movs	r1, #18
 8007b0c:	f105 0010 	add.w	r0, r5, #16
 8007b10:	f000 f836 	bl	8007b80 <core_set_error>
 8007b14:	e6f6      	b.n	8007904 <ai_platform_network_process+0x34c>
 8007b16:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8007b1a:	82ab      	strh	r3, [r5, #20]
 8007b1c:	e744      	b.n	80079a8 <ai_platform_network_process+0x3f0>
 8007b1e:	2700      	movs	r7, #0
 8007b20:	e747      	b.n	80079b2 <ai_platform_network_process+0x3fa>
 8007b22:	4604      	mov	r4, r0
 8007b24:	2217      	movs	r2, #23
 8007b26:	2113      	movs	r1, #19
 8007b28:	f105 0010 	add.w	r0, r5, #16
 8007b2c:	f000 f828 	bl	8007b80 <core_set_error>
 8007b30:	e6e8      	b.n	8007904 <ai_platform_network_process+0x34c>
 8007b32:	2219      	movs	r2, #25
 8007b34:	2113      	movs	r1, #19
 8007b36:	f105 0010 	add.w	r0, r5, #16
 8007b3a:	2400      	movs	r4, #0
 8007b3c:	f000 f820 	bl	8007b80 <core_set_error>
 8007b40:	e6e0      	b.n	8007904 <ai_platform_network_process+0x34c>
 8007b42:	4604      	mov	r4, r0
 8007b44:	2221      	movs	r2, #33	@ 0x21
 8007b46:	2113      	movs	r1, #19
 8007b48:	f105 0010 	add.w	r0, r5, #16
 8007b4c:	f000 f818 	bl	8007b80 <core_set_error>
 8007b50:	e6d8      	b.n	8007904 <ai_platform_network_process+0x34c>
 8007b52:	2217      	movs	r2, #23
 8007b54:	2113      	movs	r1, #19
 8007b56:	f105 0010 	add.w	r0, r5, #16
 8007b5a:	4654      	mov	r4, sl
 8007b5c:	f000 f810 	bl	8007b80 <core_set_error>
 8007b60:	e6d0      	b.n	8007904 <ai_platform_network_process+0x34c>
 8007b62:	bf00      	nop
 8007b64:	58024000 	.word	0x58024000
 8007b68:	f407a5c2 	.word	0xf407a5c2
 8007b6c:	b5e8b5cd 	.word	0xb5e8b5cd

08007b70 <core_init>:
 8007b70:	2001      	movs	r0, #1
 8007b72:	4770      	bx	lr

08007b74 <core_get_error>:
 8007b74:	4603      	mov	r3, r0
 8007b76:	2200      	movs	r2, #0
 8007b78:	6800      	ldr	r0, [r0, #0]
 8007b7a:	601a      	str	r2, [r3, #0]
 8007b7c:	4770      	bx	lr
 8007b7e:	bf00      	nop

08007b80 <core_set_error>:
 8007b80:	4603      	mov	r3, r0
 8007b82:	7800      	ldrb	r0, [r0, #0]
 8007b84:	b108      	cbz	r0, 8007b8a <core_set_error+0xa>
 8007b86:	2000      	movs	r0, #0
 8007b88:	4770      	bx	lr
 8007b8a:	7019      	strb	r1, [r3, #0]
 8007b8c:	2001      	movs	r0, #1
 8007b8e:	6819      	ldr	r1, [r3, #0]
 8007b90:	f362 211f 	bfi	r1, r2, #8, #24
 8007b94:	6019      	str	r1, [r3, #0]
 8007b96:	4770      	bx	lr

08007b98 <node_convert>:
 8007b98:	6982      	ldr	r2, [r0, #24]
 8007b9a:	8813      	ldrh	r3, [r2, #0]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d04a      	beq.n	8007c36 <node_convert+0x9e>
 8007ba0:	6852      	ldr	r2, [r2, #4]
 8007ba2:	6850      	ldr	r0, [r2, #4]
 8007ba4:	b100      	cbz	r0, 8007ba8 <node_convert+0x10>
 8007ba6:	6800      	ldr	r0, [r0, #0]
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	f000 813d 	beq.w	8007e28 <node_convert+0x290>
 8007bae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bb2:	6915      	ldr	r5, [r2, #16]
 8007bb4:	b105      	cbz	r5, 8007bb8 <node_convert+0x20>
 8007bb6:	682d      	ldr	r5, [r5, #0]
 8007bb8:	6883      	ldr	r3, [r0, #8]
 8007bba:	0a1b      	lsrs	r3, r3, #8
 8007bbc:	f000 80ee 	beq.w	8007d9c <node_convert+0x204>
 8007bc0:	68c1      	ldr	r1, [r0, #12]
 8007bc2:	2401      	movs	r4, #1
 8007bc4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8007bc8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007bcc:	4299      	cmp	r1, r3
 8007bce:	fb02 f404 	mul.w	r4, r2, r4
 8007bd2:	d1f9      	bne.n	8007bc8 <node_convert+0x30>
 8007bd4:	6982      	ldr	r2, [r0, #24]
 8007bd6:	69af      	ldr	r7, [r5, #24]
 8007bd8:	6813      	ldr	r3, [r2, #0]
 8007bda:	f3c3 4143 	ubfx	r1, r3, #17, #4
 8007bde:	2901      	cmp	r1, #1
 8007be0:	d02b      	beq.n	8007c3a <node_convert+0xa2>
 8007be2:	6801      	ldr	r1, [r0, #0]
 8007be4:	68bd      	ldr	r5, [r7, #8]
 8007be6:	2900      	cmp	r1, #0
 8007be8:	d069      	beq.n	8007cbe <node_convert+0x126>
 8007bea:	684e      	ldr	r6, [r1, #4]
 8007bec:	f3c3 50c0 	ubfx	r0, r3, #23, #1
 8007bf0:	6892      	ldr	r2, [r2, #8]
 8007bf2:	2e00      	cmp	r6, #0
 8007bf4:	f000 80b8 	beq.w	8007d68 <node_convert+0x1d0>
 8007bf8:	884b      	ldrh	r3, [r1, #2]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	f000 8089 	beq.w	8007d12 <node_convert+0x17a>
 8007c00:	6833      	ldr	r3, [r6, #0]
 8007c02:	ed93 7a00 	vldr	s14, [r3]
 8007c06:	6873      	ldr	r3, [r6, #4]
 8007c08:	2800      	cmp	r0, #0
 8007c0a:	f000 80c5 	beq.w	8007d98 <node_convert+0x200>
 8007c0e:	f993 0000 	ldrsb.w	r0, [r3]
 8007c12:	b174      	cbz	r4, 8007c32 <node_convert+0x9a>
 8007c14:	4629      	mov	r1, r5
 8007c16:	4414      	add	r4, r2
 8007c18:	f912 3b01 	ldrsb.w	r3, [r2], #1
 8007c1c:	1a1b      	subs	r3, r3, r0
 8007c1e:	42a2      	cmp	r2, r4
 8007c20:	ee07 3a90 	vmov	s15, r3
 8007c24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007c2c:	ece1 7a01 	vstmia	r1!, {s15}
 8007c30:	d1f2      	bne.n	8007c18 <node_convert+0x80>
 8007c32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	deff      	udf	#255	@ 0xff
 8007c3a:	682e      	ldr	r6, [r5, #0]
 8007c3c:	6895      	ldr	r5, [r2, #8]
 8007c3e:	2e00      	cmp	r6, #0
 8007c40:	f000 80ae 	beq.w	8007da0 <node_convert+0x208>
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	6871      	ldr	r1, [r6, #4]
 8007c48:	68ba      	ldr	r2, [r7, #8]
 8007c4a:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 8007c4e:	2900      	cmp	r1, #0
 8007c50:	d064      	beq.n	8007d1c <node_convert+0x184>
 8007c52:	8870      	ldrh	r0, [r6, #2]
 8007c54:	2800      	cmp	r0, #0
 8007c56:	d067      	beq.n	8007d28 <node_convert+0x190>
 8007c58:	6808      	ldr	r0, [r1, #0]
 8007c5a:	edd0 7a00 	vldr	s15, [r0]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	f000 80d7 	beq.w	8007e12 <node_convert+0x27a>
 8007c64:	684b      	ldr	r3, [r1, #4]
 8007c66:	f993 3000 	ldrsb.w	r3, [r3]
 8007c6a:	ee06 3a90 	vmov	s13, r3
 8007c6e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007c72:	2c00      	cmp	r4, #0
 8007c74:	d0dd      	beq.n	8007c32 <node_convert+0x9a>
 8007c76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c7a:	4414      	add	r4, r2
 8007c7c:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8007c80:	ed9f 5a6b 	vldr	s10, [pc, #428]	@ 8007e30 <node_convert+0x298>
 8007c84:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8007c88:	ecb5 7a01 	vldmia	r5!, {s14}
 8007c8c:	eef0 7a66 	vmov.f32	s15, s13
 8007c90:	eee7 7a06 	vfma.f32	s15, s14, s12
 8007c94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c9c:	bfac      	ite	ge
 8007c9e:	ee77 7aa5 	vaddge.f32	s15, s15, s11
 8007ca2:	ee77 7ac5 	vsublt.f32	s15, s15, s10
 8007ca6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007caa:	ee17 3a90 	vmov	r3, s15
 8007cae:	f303 0307 	ssat	r3, #8, r3
 8007cb2:	f802 3b01 	strb.w	r3, [r2], #1
 8007cb6:	42a2      	cmp	r2, r4
 8007cb8:	d1e6      	bne.n	8007c88 <node_convert+0xf0>
 8007cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cbe:	f3c3 11c6 	ubfx	r1, r3, #7, #7
 8007cc2:	f003 067f 	and.w	r6, r3, #127	@ 0x7f
 8007cc6:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 8007cca:	6890      	ldr	r0, [r2, #8]
 8007ccc:	1b8e      	subs	r6, r1, r6
 8007cce:	2908      	cmp	r1, #8
 8007cd0:	4622      	mov	r2, r4
 8007cd2:	4629      	mov	r1, r5
 8007cd4:	f106 0640 	add.w	r6, r6, #64	@ 0x40
 8007cd8:	eba6 0603 	sub.w	r6, r6, r3
 8007cdc:	f000 808b 	beq.w	8007df6 <node_convert+0x25e>
 8007ce0:	f003 fd8c 	bl	800b7fc <arm_q15_to_float>
 8007ce4:	2e00      	cmp	r6, #0
 8007ce6:	d0a4      	beq.n	8007c32 <node_convert+0x9a>
 8007ce8:	ee07 6a90 	vmov	s15, r6
 8007cec:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8007cf0:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8007cf4:	f006 fd2c 	bl	800e750 <powf>
 8007cf8:	2c00      	cmp	r4, #0
 8007cfa:	d09a      	beq.n	8007c32 <node_convert+0x9a>
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	ecf5 7a01 	vldmia	r5!, {s15}
 8007d02:	3301      	adds	r3, #1
 8007d04:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007d08:	429c      	cmp	r4, r3
 8007d0a:	ed45 7a01 	vstr	s15, [r5, #-4]
 8007d0e:	d1f6      	bne.n	8007cfe <node_convert+0x166>
 8007d10:	e78f      	b.n	8007c32 <node_convert+0x9a>
 8007d12:	b358      	cbz	r0, 8007d6c <node_convert+0x1d4>
 8007d14:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8007e34 <node_convert+0x29c>
 8007d18:	4618      	mov	r0, r3
 8007d1a:	e77a      	b.n	8007c12 <node_convert+0x7a>
 8007d1c:	b133      	cbz	r3, 8007d2c <node_convert+0x194>
 8007d1e:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8007e34 <node_convert+0x29c>
 8007d22:	eef0 7a66 	vmov.f32	s15, s13
 8007d26:	e7a4      	b.n	8007c72 <node_convert+0xda>
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d1f8      	bne.n	8007d1e <node_convert+0x186>
 8007d2c:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8007d30:	eddf 7a40 	vldr	s15, [pc, #256]	@ 8007e34 <node_convert+0x29c>
 8007d34:	2c00      	cmp	r4, #0
 8007d36:	f43f af7c 	beq.w	8007c32 <node_convert+0x9a>
 8007d3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d3e:	4414      	add	r4, r2
 8007d40:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8007d44:	ecb5 7a01 	vldmia	r5!, {s14}
 8007d48:	eef0 7a66 	vmov.f32	s15, s13
 8007d4c:	eee7 7a06 	vfma.f32	s15, s14, s12
 8007d50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d54:	ee17 3a90 	vmov	r3, s15
 8007d58:	f383 0308 	usat	r3, #8, r3
 8007d5c:	f802 3b01 	strb.w	r3, [r2], #1
 8007d60:	42a2      	cmp	r2, r4
 8007d62:	d1ef      	bne.n	8007d44 <node_convert+0x1ac>
 8007d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d68:	2800      	cmp	r0, #0
 8007d6a:	d147      	bne.n	8007dfc <node_convert+0x264>
 8007d6c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8007e34 <node_convert+0x29c>
 8007d70:	2c00      	cmp	r4, #0
 8007d72:	f43f af5e 	beq.w	8007c32 <node_convert+0x9a>
 8007d76:	4629      	mov	r1, r5
 8007d78:	4414      	add	r4, r2
 8007d7a:	f812 3b01 	ldrb.w	r3, [r2], #1
 8007d7e:	1a1b      	subs	r3, r3, r0
 8007d80:	42a2      	cmp	r2, r4
 8007d82:	ee07 3a90 	vmov	s15, r3
 8007d86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007d8e:	ece1 7a01 	vstmia	r1!, {s15}
 8007d92:	d1f2      	bne.n	8007d7a <node_convert+0x1e2>
 8007d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d98:	7818      	ldrb	r0, [r3, #0]
 8007d9a:	e7e9      	b.n	8007d70 <node_convert+0x1d8>
 8007d9c:	2401      	movs	r4, #1
 8007d9e:	e719      	b.n	8007bd4 <node_convert+0x3c>
 8007da0:	683a      	ldr	r2, [r7, #0]
 8007da2:	f3c2 18c6 	ubfx	r8, r2, #7, #7
 8007da6:	f002 037f 	and.w	r3, r2, #127	@ 0x7f
 8007daa:	f3c2 52c0 	ubfx	r2, r2, #23, #1
 8007dae:	eba8 0303 	sub.w	r3, r8, r3
 8007db2:	3340      	adds	r3, #64	@ 0x40
 8007db4:	1a9b      	subs	r3, r3, r2
 8007db6:	d014      	beq.n	8007de2 <node_convert+0x24a>
 8007db8:	425b      	negs	r3, r3
 8007dba:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8007dbe:	ee00 3a90 	vmov	s1, r3
 8007dc2:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8007dc6:	f006 fcc3 	bl	800e750 <powf>
 8007dca:	b154      	cbz	r4, 8007de2 <node_convert+0x24a>
 8007dcc:	4633      	mov	r3, r6
 8007dce:	462a      	mov	r2, r5
 8007dd0:	ecf2 7a01 	vldmia	r2!, {s15}
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007dda:	42a3      	cmp	r3, r4
 8007ddc:	ed42 7a01 	vstr	s15, [r2, #-4]
 8007de0:	d1f6      	bne.n	8007dd0 <node_convert+0x238>
 8007de2:	f1b8 0f08 	cmp.w	r8, #8
 8007de6:	d00d      	beq.n	8007e04 <node_convert+0x26c>
 8007de8:	4622      	mov	r2, r4
 8007dea:	68b9      	ldr	r1, [r7, #8]
 8007dec:	4628      	mov	r0, r5
 8007dee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007df2:	f003 bb81 	b.w	800b4f8 <arm_float_to_q15>
 8007df6:	f003 fd67 	bl	800b8c8 <arm_q7_to_float>
 8007dfa:	e773      	b.n	8007ce4 <node_convert+0x14c>
 8007dfc:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8007e34 <node_convert+0x29c>
 8007e00:	4630      	mov	r0, r6
 8007e02:	e706      	b.n	8007c12 <node_convert+0x7a>
 8007e04:	4622      	mov	r2, r4
 8007e06:	68b9      	ldr	r1, [r7, #8]
 8007e08:	4628      	mov	r0, r5
 8007e0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e0e:	f003 bc29 	b.w	800b664 <arm_float_to_q7>
 8007e12:	684b      	ldr	r3, [r1, #4]
 8007e14:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	ee06 3a90 	vmov	s13, r3
 8007e1e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007e22:	ee76 6a87 	vadd.f32	s13, s13, s14
 8007e26:	e785      	b.n	8007d34 <node_convert+0x19c>
 8007e28:	2300      	movs	r3, #0
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	deff      	udf	#255	@ 0xff
 8007e2e:	bf00      	nop
 8007e30:	3efffffc 	.word	0x3efffffc
 8007e34:	00000000 	.word	0x00000000

08007e38 <ai_check_custom_types>:
 8007e38:	b082      	sub	sp, #8
 8007e3a:	4b12      	ldr	r3, [pc, #72]	@ (8007e84 <ai_check_custom_types+0x4c>)
 8007e3c:	9301      	str	r3, [sp, #4]
 8007e3e:	b118      	cbz	r0, 8007e48 <ai_check_custom_types+0x10>
 8007e40:	7803      	ldrb	r3, [r0, #0]
 8007e42:	2b03      	cmp	r3, #3
 8007e44:	d002      	beq.n	8007e4c <ai_check_custom_types+0x14>
 8007e46:	2000      	movs	r0, #0
 8007e48:	b002      	add	sp, #8
 8007e4a:	4770      	bx	lr
 8007e4c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d004      	beq.n	8007e5e <ai_check_custom_types+0x26>
 8007e54:	2001      	movs	r0, #1
 8007e56:	f080 0001 	eor.w	r0, r0, #1
 8007e5a:	b002      	add	sp, #8
 8007e5c:	4770      	bx	lr
 8007e5e:	7842      	ldrb	r2, [r0, #1]
 8007e60:	3001      	adds	r0, #1
 8007e62:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d1f4      	bne.n	8007e54 <ai_check_custom_types+0x1c>
 8007e6a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8007e6e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d1ee      	bne.n	8007e54 <ai_check_custom_types+0x1c>
 8007e76:	7842      	ldrb	r2, [r0, #1]
 8007e78:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d1e9      	bne.n	8007e54 <ai_check_custom_types+0x1c>
 8007e80:	2000      	movs	r0, #0
 8007e82:	e7e8      	b.n	8007e56 <ai_check_custom_types+0x1e>
 8007e84:	84048403 	.word	0x84048403

08007e88 <ai_layers_init_all>:
 8007e88:	2100      	movs	r1, #0
 8007e8a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8007e8c:	b13b      	cbz	r3, 8007e9e <ai_layers_init_all+0x16>
 8007e8e:	691a      	ldr	r2, [r3, #16]
 8007e90:	3101      	adds	r1, #1
 8007e92:	60d8      	str	r0, [r3, #12]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	4613      	mov	r3, r2
 8007e98:	d001      	beq.n	8007e9e <ai_layers_init_all+0x16>
 8007e9a:	2a00      	cmp	r2, #0
 8007e9c:	d1f6      	bne.n	8007e8c <ai_layers_init_all+0x4>
 8007e9e:	4608      	mov	r0, r1
 8007ea0:	4770      	bx	lr
 8007ea2:	bf00      	nop

08007ea4 <ai_layers_post_init_all>:
 8007ea4:	b538      	push	{r3, r4, r5, lr}
 8007ea6:	2500      	movs	r5, #0
 8007ea8:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8007eaa:	b16c      	cbz	r4, 8007ec8 <ai_layers_post_init_all+0x24>
 8007eac:	6863      	ldr	r3, [r4, #4]
 8007eae:	07db      	lsls	r3, r3, #31
 8007eb0:	d504      	bpl.n	8007ebc <ai_layers_post_init_all+0x18>
 8007eb2:	6a23      	ldr	r3, [r4, #32]
 8007eb4:	4620      	mov	r0, r4
 8007eb6:	b10b      	cbz	r3, 8007ebc <ai_layers_post_init_all+0x18>
 8007eb8:	3501      	adds	r5, #1
 8007eba:	4798      	blx	r3
 8007ebc:	6923      	ldr	r3, [r4, #16]
 8007ebe:	42a3      	cmp	r3, r4
 8007ec0:	461c      	mov	r4, r3
 8007ec2:	d001      	beq.n	8007ec8 <ai_layers_post_init_all+0x24>
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d1f0      	bne.n	8007eaa <ai_layers_post_init_all+0x6>
 8007ec8:	4628      	mov	r0, r5
 8007eca:	bd38      	pop	{r3, r4, r5, pc}

08007ecc <ai_layers_forward_all>:
 8007ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ed0:	f8d0 803c 	ldr.w	r8, [r0, #60]	@ 0x3c
 8007ed4:	4604      	mov	r4, r0
 8007ed6:	f1b8 0f00 	cmp.w	r8, #0
 8007eda:	d02a      	beq.n	8007f32 <ai_layers_forward_all+0x66>
 8007edc:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8007ede:	6381      	str	r1, [r0, #56]	@ 0x38
 8007ee0:	b319      	cbz	r1, 8007f2a <ai_layers_forward_all+0x5e>
 8007ee2:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8007ee4:	2001      	movs	r0, #1
 8007ee6:	47c0      	blx	r8
 8007ee8:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8007eea:	b1f6      	cbz	r6, 8007f2a <ai_layers_forward_all+0x5e>
 8007eec:	2700      	movs	r7, #0
 8007eee:	4631      	mov	r1, r6
 8007ef0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8007ef2:	2002      	movs	r0, #2
 8007ef4:	47c0      	blx	r8
 8007ef6:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8007ef8:	4628      	mov	r0, r5
 8007efa:	696b      	ldr	r3, [r5, #20]
 8007efc:	4798      	blx	r3
 8007efe:	692e      	ldr	r6, [r5, #16]
 8007f00:	2003      	movs	r0, #3
 8007f02:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8007f04:	42b5      	cmp	r5, r6
 8007f06:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007f08:	d007      	beq.n	8007f1a <ai_layers_forward_all+0x4e>
 8007f0a:	47c0      	blx	r8
 8007f0c:	3701      	adds	r7, #1
 8007f0e:	63a6      	str	r6, [r4, #56]	@ 0x38
 8007f10:	2e00      	cmp	r6, #0
 8007f12:	d1ec      	bne.n	8007eee <ai_layers_forward_all+0x22>
 8007f14:	4638      	mov	r0, r7
 8007f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f1a:	2003      	movs	r0, #3
 8007f1c:	3701      	adds	r7, #1
 8007f1e:	47c0      	blx	r8
 8007f20:	2300      	movs	r3, #0
 8007f22:	4638      	mov	r0, r7
 8007f24:	63a3      	str	r3, [r4, #56]	@ 0x38
 8007f26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f2a:	2700      	movs	r7, #0
 8007f2c:	4638      	mov	r0, r7
 8007f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f32:	6b45      	ldr	r5, [r0, #52]	@ 0x34
 8007f34:	6385      	str	r5, [r0, #56]	@ 0x38
 8007f36:	2d00      	cmp	r5, #0
 8007f38:	d0f7      	beq.n	8007f2a <ai_layers_forward_all+0x5e>
 8007f3a:	4647      	mov	r7, r8
 8007f3c:	696b      	ldr	r3, [r5, #20]
 8007f3e:	4628      	mov	r0, r5
 8007f40:	4798      	blx	r3
 8007f42:	462b      	mov	r3, r5
 8007f44:	692d      	ldr	r5, [r5, #16]
 8007f46:	429d      	cmp	r5, r3
 8007f48:	d004      	beq.n	8007f54 <ai_layers_forward_all+0x88>
 8007f4a:	3701      	adds	r7, #1
 8007f4c:	63a5      	str	r5, [r4, #56]	@ 0x38
 8007f4e:	2d00      	cmp	r5, #0
 8007f50:	d1f4      	bne.n	8007f3c <ai_layers_forward_all+0x70>
 8007f52:	e7df      	b.n	8007f14 <ai_layers_forward_all+0x48>
 8007f54:	2300      	movs	r3, #0
 8007f56:	3701      	adds	r7, #1
 8007f58:	63a3      	str	r3, [r4, #56]	@ 0x38
 8007f5a:	e7db      	b.n	8007f14 <ai_layers_forward_all+0x48>

08007f5c <func_dummy>:
 8007f5c:	4770      	bx	lr
 8007f5e:	bf00      	nop

08007f60 <forward_conv2d_sssa8_ch_nl_pool>:
 8007f60:	6982      	ldr	r2, [r0, #24]
 8007f62:	8813      	ldrh	r3, [r2, #0]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	f000 823f 	beq.w	80083e8 <forward_conv2d_sssa8_ch_nl_pool+0x488>
 8007f6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f6e:	ed2d 8b04 	vpush	{d8-d9}
 8007f72:	6852      	ldr	r2, [r2, #4]
 8007f74:	b0cf      	sub	sp, #316	@ 0x13c
 8007f76:	4681      	mov	r9, r0
 8007f78:	f8d2 a004 	ldr.w	sl, [r2, #4]
 8007f7c:	f1ba 0f00 	cmp.w	sl, #0
 8007f80:	d001      	beq.n	8007f86 <forward_conv2d_sssa8_ch_nl_pool+0x26>
 8007f82:	f8da a000 	ldr.w	sl, [sl]
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	f000 8285 	beq.w	8008496 <forward_conv2d_sssa8_ch_nl_pool+0x536>
 8007f8c:	6911      	ldr	r1, [r2, #16]
 8007f8e:	911b      	str	r1, [sp, #108]	@ 0x6c
 8007f90:	b109      	cbz	r1, 8007f96 <forward_conv2d_sssa8_ch_nl_pool+0x36>
 8007f92:	6809      	ldr	r1, [r1, #0]
 8007f94:	911b      	str	r1, [sp, #108]	@ 0x6c
 8007f96:	2b02      	cmp	r3, #2
 8007f98:	f000 8223 	beq.w	80083e2 <forward_conv2d_sssa8_ch_nl_pool+0x482>
 8007f9c:	69d1      	ldr	r1, [r2, #28]
 8007f9e:	2900      	cmp	r1, #0
 8007fa0:	f000 8274 	beq.w	800848c <forward_conv2d_sssa8_ch_nl_pool+0x52c>
 8007fa4:	8b10      	ldrh	r0, [r2, #24]
 8007fa6:	680c      	ldr	r4, [r1, #0]
 8007fa8:	2801      	cmp	r0, #1
 8007faa:	9415      	str	r4, [sp, #84]	@ 0x54
 8007fac:	f200 821e 	bhi.w	80083ec <forward_conv2d_sssa8_ch_nl_pool+0x48c>
 8007fb0:	2000      	movs	r0, #0
 8007fb2:	9018      	str	r0, [sp, #96]	@ 0x60
 8007fb4:	2b03      	cmp	r3, #3
 8007fb6:	f000 8271 	beq.w	800849c <forward_conv2d_sssa8_ch_nl_pool+0x53c>
 8007fba:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	f000 8268 	beq.w	8008492 <forward_conv2d_sssa8_ch_nl_pool+0x532>
 8007fc2:	f8d9 2024 	ldr.w	r2, [r9, #36]	@ 0x24
 8007fc6:	6818      	ldr	r0, [r3, #0]
 8007fc8:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8007fcc:	922e      	str	r2, [sp, #184]	@ 0xb8
 8007fce:	9026      	str	r0, [sp, #152]	@ 0x98
 8007fd0:	2a00      	cmp	r2, #0
 8007fd2:	f000 8255 	beq.w	8008480 <forward_conv2d_sssa8_ch_nl_pool+0x520>
 8007fd6:	f8d3 b008 	ldr.w	fp, [r3, #8]
 8007fda:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8007fde:	f8da 600c 	ldr.w	r6, [sl, #12]
 8007fe2:	6852      	ldr	r2, [r2, #4]
 8007fe4:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8007fe6:	4615      	mov	r5, r2
 8007fe8:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8007fea:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8007fee:	b2ad      	uxth	r5, r5
 8007ff0:	6874      	ldr	r4, [r6, #4]
 8007ff2:	68c0      	ldr	r0, [r0, #12]
 8007ff4:	9417      	str	r4, [sp, #92]	@ 0x5c
 8007ff6:	951e      	str	r5, [sp, #120]	@ 0x78
 8007ff8:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 8007ffc:	f8d9 303c 	ldr.w	r3, [r9, #60]	@ 0x3c
 8008000:	ee09 5a90 	vmov	s19, r5
 8008004:	68c5      	ldr	r5, [r0, #12]
 8008006:	6880      	ldr	r0, [r0, #8]
 8008008:	9520      	str	r5, [sp, #128]	@ 0x80
 800800a:	9034      	str	r0, [sp, #208]	@ 0xd0
 800800c:	f8d9 402c 	ldr.w	r4, [r9, #44]	@ 0x2c
 8008010:	921f      	str	r2, [sp, #124]	@ 0x7c
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	f8d9 7058 	ldr.w	r7, [r9, #88]	@ 0x58
 8008018:	e9d6 5002 	ldrd	r5, r0, [r6, #8]
 800801c:	9538      	str	r5, [sp, #224]	@ 0xe0
 800801e:	f8b9 5028 	ldrh.w	r5, [r9, #40]	@ 0x28
 8008022:	952f      	str	r5, [sp, #188]	@ 0xbc
 8008024:	b2a5      	uxth	r5, r4
 8008026:	9530      	str	r5, [sp, #192]	@ 0xc0
 8008028:	b295      	uxth	r5, r2
 800802a:	9516      	str	r5, [sp, #88]	@ 0x58
 800802c:	889d      	ldrh	r5, [r3, #4]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	9531      	str	r5, [sp, #196]	@ 0xc4
 8008032:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8008036:	9524      	str	r5, [sp, #144]	@ 0x90
 8008038:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800803c:	9532      	str	r5, [sp, #200]	@ 0xc8
 800803e:	f8d9 5044 	ldr.w	r5, [r9, #68]	@ 0x44
 8008042:	9535      	str	r5, [sp, #212]	@ 0xd4
 8008044:	f8d9 504c 	ldr.w	r5, [r9, #76]	@ 0x4c
 8008048:	9536      	str	r5, [sp, #216]	@ 0xd8
 800804a:	f8d9 5050 	ldr.w	r5, [r9, #80]	@ 0x50
 800804e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008050:	683d      	ldr	r5, [r7, #0]
 8008052:	9527      	str	r5, [sp, #156]	@ 0x9c
 8008054:	687d      	ldr	r5, [r7, #4]
 8008056:	9537      	str	r5, [sp, #220]	@ 0xdc
 8008058:	2900      	cmp	r1, #0
 800805a:	f000 8204 	beq.w	8008466 <forward_conv2d_sssa8_ch_nl_pool+0x506>
 800805e:	6889      	ldr	r1, [r1, #8]
 8008060:	2900      	cmp	r1, #0
 8008062:	f000 8200 	beq.w	8008466 <forward_conv2d_sssa8_ch_nl_pool+0x506>
 8008066:	698d      	ldr	r5, [r1, #24]
 8008068:	2d00      	cmp	r5, #0
 800806a:	bf08      	it	eq
 800806c:	4629      	moveq	r1, r5
 800806e:	ee08 1a90 	vmov	s17, r1
 8008072:	b292      	uxth	r2, r2
 8008074:	f8db 6018 	ldr.w	r6, [fp, #24]
 8008078:	b2a1      	uxth	r1, r4
 800807a:	f8d8 5018 	ldr.w	r5, [r8, #24]
 800807e:	fa12 f783 	uxtah	r7, r2, r3
 8008082:	1813      	adds	r3, r2, r0
 8008084:	aa3f      	add	r2, sp, #252	@ 0xfc
 8008086:	9123      	str	r1, [sp, #140]	@ 0x8c
 8008088:	4407      	add	r7, r0
 800808a:	931d      	str	r3, [sp, #116]	@ 0x74
 800808c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800808e:	f10d 0cec 	add.w	ip, sp, #236	@ 0xec
 8008092:	924c      	str	r2, [sp, #304]	@ 0x130
 8008094:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008098:	1aff      	subs	r7, r7, r3
 800809a:	ac43      	add	r4, sp, #268	@ 0x10c
 800809c:	a847      	add	r0, sp, #284	@ 0x11c
 800809e:	f8cd c128 	str.w	ip, [sp, #296]	@ 0x128
 80080a2:	fbb7 f3f1 	udiv	r3, r7, r1
 80080a6:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 80080a8:	f240 4101 	movw	r1, #1025	@ 0x401
 80080ac:	9313      	str	r3, [sp, #76]	@ 0x4c
 80080ae:	2300      	movs	r3, #0
 80080b0:	69bf      	ldr	r7, [r7, #24]
 80080b2:	9347      	str	r3, [sp, #284]	@ 0x11c
 80080b4:	933b      	str	r3, [sp, #236]	@ 0xec
 80080b6:	933f      	str	r3, [sp, #252]	@ 0xfc
 80080b8:	933e      	str	r3, [sp, #248]	@ 0xf8
 80080ba:	9342      	str	r3, [sp, #264]	@ 0x108
 80080bc:	934d      	str	r3, [sp, #308]	@ 0x134
 80080be:	9728      	str	r7, [sp, #160]	@ 0xa0
 80080c0:	e9cd 333c 	strd	r3, r3, [sp, #240]	@ 0xf0
 80080c4:	e9cd 3340 	strd	r3, r3, [sp, #256]	@ 0x100
 80080c8:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 80080cc:	e9cd 2148 	strd	r2, r1, [sp, #288]	@ 0x120
 80080d0:	f240 4102 	movw	r1, #1026	@ 0x402
 80080d4:	9322      	str	r3, [sp, #136]	@ 0x88
 80080d6:	f8d9 305c 	ldr.w	r3, [r9, #92]	@ 0x5c
 80080da:	914b      	str	r1, [sp, #300]	@ 0x12c
 80080dc:	4659      	mov	r1, fp
 80080de:	9333      	str	r3, [sp, #204]	@ 0xcc
 80080e0:	f003 fd16 	bl	800bb10 <core_tensor_clone>
 80080e4:	4631      	mov	r1, r6
 80080e6:	4620      	mov	r0, r4
 80080e8:	f003 fd44 	bl	800bb74 <core_array_clone>
 80080ec:	944d      	str	r4, [sp, #308]	@ 0x134
 80080ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80080f2:	9915      	ldr	r1, [sp, #84]	@ 0x54
 80080f4:	689b      	ldr	r3, [r3, #8]
 80080f6:	6809      	ldr	r1, [r1, #0]
 80080f8:	931c      	str	r3, [sp, #112]	@ 0x70
 80080fa:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80080fc:	f8da 2000 	ldr.w	r2, [sl]
 8008100:	f8d3 e018 	ldr.w	lr, [r3, #24]
 8008104:	f9bd 409c 	ldrsh.w	r4, [sp, #156]	@ 0x9c
 8008108:	f8de 3008 	ldr.w	r3, [lr, #8]
 800810c:	9114      	str	r1, [sp, #80]	@ 0x50
 800810e:	9325      	str	r3, [sp, #148]	@ 0x94
 8008110:	f8d8 3000 	ldr.w	r3, [r8]
 8008114:	2a00      	cmp	r2, #0
 8008116:	f000 818e 	beq.w	8008436 <forward_conv2d_sssa8_ch_nl_pool+0x4d6>
 800811a:	6851      	ldr	r1, [r2, #4]
 800811c:	2900      	cmp	r1, #0
 800811e:	f000 818a 	beq.w	8008436 <forward_conv2d_sssa8_ch_nl_pool+0x4d6>
 8008122:	8850      	ldrh	r0, [r2, #2]
 8008124:	2800      	cmp	r0, #0
 8008126:	f000 8186 	beq.w	8008436 <forward_conv2d_sssa8_ch_nl_pool+0x4d6>
 800812a:	6809      	ldr	r1, [r1, #0]
 800812c:	ed91 0a00 	vldr	s0, [r1]
 8008130:	2b00      	cmp	r3, #0
 8008132:	f000 817d 	beq.w	8008430 <forward_conv2d_sssa8_ch_nl_pool+0x4d0>
 8008136:	6859      	ldr	r1, [r3, #4]
 8008138:	2900      	cmp	r1, #0
 800813a:	f000 8179 	beq.w	8008430 <forward_conv2d_sssa8_ch_nl_pool+0x4d0>
 800813e:	8858      	ldrh	r0, [r3, #2]
 8008140:	2800      	cmp	r0, #0
 8008142:	f000 8175 	beq.w	8008430 <forward_conv2d_sssa8_ch_nl_pool+0x4d0>
 8008146:	6809      	ldr	r1, [r1, #0]
 8008148:	edd1 0a00 	vldr	s1, [r1]
 800814c:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800814e:	f8da c018 	ldr.w	ip, [sl, #24]
 8008152:	6988      	ldr	r0, [r1, #24]
 8008154:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8008156:	f8dc 7008 	ldr.w	r7, [ip, #8]
 800815a:	6989      	ldr	r1, [r1, #24]
 800815c:	6880      	ldr	r0, [r0, #8]
 800815e:	6889      	ldr	r1, [r1, #8]
 8008160:	9718      	str	r7, [sp, #96]	@ 0x60
 8008162:	912d      	str	r1, [sp, #180]	@ 0xb4
 8008164:	f899 1041 	ldrb.w	r1, [r9, #65]	@ 0x41
 8008168:	902c      	str	r0, [sp, #176]	@ 0xb0
 800816a:	912b      	str	r1, [sp, #172]	@ 0xac
 800816c:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800816e:	b121      	cbz	r1, 800817a <forward_conv2d_sssa8_ch_nl_pool+0x21a>
 8008170:	6849      	ldr	r1, [r1, #4]
 8008172:	9114      	str	r1, [sp, #80]	@ 0x50
 8008174:	b109      	cbz	r1, 800817a <forward_conv2d_sssa8_ch_nl_pool+0x21a>
 8008176:	6809      	ldr	r1, [r1, #0]
 8008178:	9114      	str	r1, [sp, #80]	@ 0x50
 800817a:	2a00      	cmp	r2, #0
 800817c:	f000 8171 	beq.w	8008462 <forward_conv2d_sssa8_ch_nl_pool+0x502>
 8008180:	6851      	ldr	r1, [r2, #4]
 8008182:	2900      	cmp	r1, #0
 8008184:	f000 817a 	beq.w	800847c <forward_conv2d_sssa8_ch_nl_pool+0x51c>
 8008188:	8852      	ldrh	r2, [r2, #2]
 800818a:	2a00      	cmp	r2, #0
 800818c:	f000 8169 	beq.w	8008462 <forward_conv2d_sssa8_ch_nl_pool+0x502>
 8008190:	684a      	ldr	r2, [r1, #4]
 8008192:	f992 2000 	ldrsb.w	r2, [r2]
 8008196:	9229      	str	r2, [sp, #164]	@ 0xa4
 8008198:	2b00      	cmp	r3, #0
 800819a:	f000 8160 	beq.w	800845e <forward_conv2d_sssa8_ch_nl_pool+0x4fe>
 800819e:	685a      	ldr	r2, [r3, #4]
 80081a0:	2a00      	cmp	r2, #0
 80081a2:	f000 8171 	beq.w	8008488 <forward_conv2d_sssa8_ch_nl_pool+0x528>
 80081a6:	885b      	ldrh	r3, [r3, #2]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	f000 8158 	beq.w	800845e <forward_conv2d_sssa8_ch_nl_pool+0x4fe>
 80081ae:	6853      	ldr	r3, [r2, #4]
 80081b0:	f993 3000 	ldrsb.w	r3, [r3]
 80081b4:	932a      	str	r3, [sp, #168]	@ 0xa8
 80081b6:	f8bd a07c 	ldrh.w	sl, [sp, #124]	@ 0x7c
 80081ba:	edcd 0a1a 	vstr	s1, [sp, #104]	@ 0x68
 80081be:	ed8d 0a15 	vstr	s0, [sp, #84]	@ 0x54
 80081c2:	e9de 0100 	ldrd	r0, r1, [lr]
 80081c6:	f003 fc4f 	bl	800ba68 <ai_array_get_byte_size>
 80081ca:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 80081cc:	eba0 034a 	sub.w	r3, r0, sl, lsl #1
 80081d0:	eddd 0a1a 	vldr	s1, [sp, #104]	@ 0x68
 80081d4:	ed9d 0a15 	vldr	s0, [sp, #84]	@ 0x54
 80081d8:	4413      	add	r3, r2
 80081da:	9814      	ldr	r0, [sp, #80]	@ 0x50
 80081dc:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80081de:	f001 fc03 	bl	80099e8 <align_factor_ch>
 80081e2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	f000 8117 	beq.w	8008418 <forward_conv2d_sssa8_ch_nl_pool+0x4b8>
 80081ea:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80081ec:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 80081f0:	fb02 f10a 	mul.w	r1, r2, sl
 80081f4:	b292      	uxth	r2, r2
 80081f6:	f04f 0a00 	mov.w	sl, #0
 80081fa:	9417      	str	r4, [sp, #92]	@ 0x5c
 80081fc:	ee08 1a10 	vmov	s16, r1
 8008200:	9221      	str	r2, [sp, #132]	@ 0x84
 8008202:	9938      	ldr	r1, [sp, #224]	@ 0xe0
 8008204:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008206:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
 800820a:	fb01 f202 	mul.w	r2, r1, r2
 800820e:	fb03 f202 	mul.w	r2, r3, r2
 8008212:	fb01 f303 	mul.w	r3, r1, r3
 8008216:	9238      	str	r2, [sp, #224]	@ 0xe0
 8008218:	9339      	str	r3, [sp, #228]	@ 0xe4
 800821a:	b28b      	uxth	r3, r1
 800821c:	ee09 3a10 	vmov	s18, r3
 8008220:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	@ 0x88
 8008224:	931c      	str	r3, [sp, #112]	@ 0x70
 8008226:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008228:	931f      	str	r3, [sp, #124]	@ 0x7c
 800822a:	e0b8      	b.n	800839e <forward_conv2d_sssa8_ch_nl_pool+0x43e>
 800822c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800822e:	68aa      	ldr	r2, [r5, #8]
 8008230:	699b      	ldr	r3, [r3, #24]
 8008232:	9214      	str	r2, [sp, #80]	@ 0x50
 8008234:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008238:	f003 fc16 	bl	800ba68 <ai_array_get_byte_size>
 800823c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800823e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008240:	ee19 1a10 	vmov	r1, s18
 8008244:	930d      	str	r3, [sp, #52]	@ 0x34
 8008246:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8008248:	920c      	str	r2, [sp, #48]	@ 0x30
 800824a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800824c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800824e:	9010      	str	r0, [sp, #64]	@ 0x40
 8008250:	930a      	str	r3, [sp, #40]	@ 0x28
 8008252:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8008254:	9309      	str	r3, [sp, #36]	@ 0x24
 8008256:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8008258:	9308      	str	r3, [sp, #32]
 800825a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800825c:	9307      	str	r3, [sp, #28]
 800825e:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8008260:	9306      	str	r3, [sp, #24]
 8008262:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8008264:	9305      	str	r3, [sp, #20]
 8008266:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8008268:	9304      	str	r3, [sp, #16]
 800826a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800826c:	9301      	str	r3, [sp, #4]
 800826e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8008270:	9300      	str	r3, [sp, #0]
 8008272:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8008274:	9311      	str	r3, [sp, #68]	@ 0x44
 8008276:	2301      	movs	r3, #1
 8008278:	930e      	str	r3, [sp, #56]	@ 0x38
 800827a:	f8bd 3090 	ldrh.w	r3, [sp, #144]	@ 0x90
 800827e:	9303      	str	r3, [sp, #12]
 8008280:	f8bd 30c8 	ldrh.w	r3, [sp, #200]	@ 0xc8
 8008284:	9302      	str	r3, [sp, #8]
 8008286:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8008288:	9f1f      	ldr	r7, [sp, #124]	@ 0x7c
 800828a:	429c      	cmp	r4, r3
 800828c:	bf08      	it	eq
 800828e:	f1ba 0f00 	cmpeq.w	sl, #0
 8008292:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8008294:	b2ba      	uxth	r2, r7
 8008296:	bf0c      	ite	eq
 8008298:	2301      	moveq	r3, #1
 800829a:	2300      	movne	r3, #0
 800829c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800829e:	ee19 3a90 	vmov	r3, s19
 80082a2:	f000 fc1d 	bl	8008ae0 <forward_lite_conv2d_sssa8_ch>
 80082a6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80082a8:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80082aa:	4293      	cmp	r3, r2
 80082ac:	f000 80b0 	beq.w	8008410 <forward_conv2d_sssa8_ch_nl_pool+0x4b0>
 80082b0:	1ad3      	subs	r3, r2, r3
 80082b2:	463a      	mov	r2, r7
 80082b4:	429f      	cmp	r7, r3
 80082b6:	931d      	str	r3, [sp, #116]	@ 0x74
 80082b8:	bf28      	it	cs
 80082ba:	461a      	movcs	r2, r3
 80082bc:	921f      	str	r2, [sp, #124]	@ 0x7c
 80082be:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	f040 8096 	bne.w	80083f2 <forward_conv2d_sssa8_ch_nl_pool+0x492>
 80082c6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80082c8:	9a38      	ldr	r2, [sp, #224]	@ 0xe0
 80082ca:	4413      	add	r3, r2
 80082cc:	9318      	str	r3, [sp, #96]	@ 0x60
 80082ce:	3401      	adds	r4, #1
 80082d0:	ee18 3a90 	vmov	r3, s17
 80082d4:	ee18 2a10 	vmov	r2, s16
 80082d8:	4641      	mov	r1, r8
 80082da:	b224      	sxth	r4, r4
 80082dc:	4658      	mov	r0, fp
 80082de:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 80082e0:	47b8      	blx	r7
 80082e2:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80082e4:	429c      	cmp	r4, r3
 80082e6:	db32      	blt.n	800834e <forward_conv2d_sssa8_ch_nl_pool+0x3ee>
 80082e8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80082ea:	2201      	movs	r2, #1
 80082ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80082ee:	a847      	add	r0, sp, #284	@ 0x11c
 80082f0:	9308      	str	r3, [sp, #32]
 80082f2:	4492      	add	sl, r2
 80082f4:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 80082f8:	9207      	str	r2, [sp, #28]
 80082fa:	1ae4      	subs	r4, r4, r3
 80082fc:	9305      	str	r3, [sp, #20]
 80082fe:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 8008302:	f8bd 2088 	ldrh.w	r2, [sp, #136]	@ 0x88
 8008306:	b224      	sxth	r4, r4
 8008308:	9303      	str	r3, [sp, #12]
 800830a:	f8bd 30d0 	ldrh.w	r3, [sp, #208]	@ 0xd0
 800830e:	9201      	str	r2, [sp, #4]
 8008310:	1a52      	subs	r2, r2, r1
 8008312:	9306      	str	r3, [sp, #24]
 8008314:	f8bd 30d8 	ldrh.w	r3, [sp, #216]	@ 0xd8
 8008318:	b292      	uxth	r2, r2
 800831a:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800831c:	9304      	str	r3, [sp, #16]
 800831e:	f8bd 30dc 	ldrh.w	r3, [sp, #220]	@ 0xdc
 8008322:	9f33      	ldr	r7, [sp, #204]	@ 0xcc
 8008324:	9302      	str	r3, [sp, #8]
 8008326:	f8bd 30d4 	ldrh.w	r3, [sp, #212]	@ 0xd4
 800832a:	9300      	str	r3, [sp, #0]
 800832c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800832e:	47b8      	blx	r7
 8008330:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008332:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 8008336:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8008338:	1ad3      	subs	r3, r2, r3
 800833a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800833e:	b21a      	sxth	r2, r3
 8008340:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8008342:	695b      	ldr	r3, [r3, #20]
 8008344:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008346:	68da      	ldr	r2, [r3, #12]
 8008348:	688b      	ldr	r3, [r1, #8]
 800834a:	4413      	add	r3, r2
 800834c:	608b      	str	r3, [r1, #8]
 800834e:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8008352:	68aa      	ldr	r2, [r5, #8]
 8008354:	68db      	ldr	r3, [r3, #12]
 8008356:	4413      	add	r3, r2
 8008358:	60ab      	str	r3, [r5, #8]
 800835a:	f8d9 2024 	ldr.w	r2, [r9, #36]	@ 0x24
 800835e:	b132      	cbz	r2, 800836e <forward_conv2d_sssa8_ch_nl_pool+0x40e>
 8008360:	f8db 3014 	ldr.w	r3, [fp, #20]
 8008364:	68da      	ldr	r2, [r3, #12]
 8008366:	68b3      	ldr	r3, [r6, #8]
 8008368:	4413      	add	r3, r2
 800836a:	60b3      	str	r3, [r6, #8]
 800836c:	68ab      	ldr	r3, [r5, #8]
 800836e:	68ea      	ldr	r2, [r5, #12]
 8008370:	4640      	mov	r0, r8
 8008372:	9315      	str	r3, [sp, #84]	@ 0x54
 8008374:	9214      	str	r2, [sp, #80]	@ 0x50
 8008376:	f003 fbb5 	bl	800bae4 <get_tensor_byte_size>
 800837a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800837c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800837e:	4410      	add	r0, r2
 8008380:	4283      	cmp	r3, r0
 8008382:	d306      	bcc.n	8008392 <forward_conv2d_sssa8_ch_nl_pool+0x432>
 8008384:	68eb      	ldr	r3, [r5, #12]
 8008386:	60ab      	str	r3, [r5, #8]
 8008388:	f8d9 3024 	ldr.w	r3, [r9, #36]	@ 0x24
 800838c:	b10b      	cbz	r3, 8008392 <forward_conv2d_sssa8_ch_nl_pool+0x432>
 800838e:	68f3      	ldr	r3, [r6, #12]
 8008390:	60b3      	str	r3, [r6, #8]
 8008392:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008394:	3b01      	subs	r3, #1
 8008396:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008398:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800839a:	459a      	cmp	sl, r3
 800839c:	d23c      	bcs.n	8008418 <forward_conv2d_sssa8_ch_nl_pool+0x4b8>
 800839e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80083a0:	3301      	adds	r3, #1
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	f73f af42 	bgt.w	800822c <forward_conv2d_sssa8_ch_nl_pool+0x2cc>
 80083a8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	da99      	bge.n	80082e2 <forward_conv2d_sssa8_ch_nl_pool+0x382>
 80083ae:	ee18 3a10 	vmov	r3, s16
 80083b2:	e9d6 1202 	ldrd	r1, r2, [r6, #8]
 80083b6:	fb03 1314 	mls	r3, r3, r4, r1
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d901      	bls.n	80083c2 <forward_conv2d_sssa8_ch_nl_pool+0x462>
 80083be:	6870      	ldr	r0, [r6, #4]
 80083c0:	4403      	add	r3, r0
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d202      	bcs.n	80083cc <forward_conv2d_sssa8_ch_nl_pool+0x46c>
 80083c6:	981c      	ldr	r0, [sp, #112]	@ 0x70
 80083c8:	42a0      	cmp	r0, r4
 80083ca:	d137      	bne.n	800843c <forward_conv2d_sssa8_ch_nl_pool+0x4dc>
 80083cc:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80083ce:	b2a4      	uxth	r4, r4
 80083d0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80083d2:	4413      	add	r3, r2
 80083d4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80083d6:	1b1b      	subs	r3, r3, r4
 80083d8:	4414      	add	r4, r2
 80083da:	b21b      	sxth	r3, r3
 80083dc:	b224      	sxth	r4, r4
 80083de:	931a      	str	r3, [sp, #104]	@ 0x68
 80083e0:	e77f      	b.n	80082e2 <forward_conv2d_sssa8_ch_nl_pool+0x382>
 80083e2:	2300      	movs	r3, #0
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	deff      	udf	#255	@ 0xff
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	deff      	udf	#255	@ 0xff
 80083ec:	6848      	ldr	r0, [r1, #4]
 80083ee:	9018      	str	r0, [sp, #96]	@ 0x60
 80083f0:	e5e0      	b.n	8007fb4 <forward_conv2d_sssa8_ch_nl_pool+0x54>
 80083f2:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 80083f4:	461a      	mov	r2, r3
 80083f6:	1a5b      	subs	r3, r3, r1
 80083f8:	d505      	bpl.n	8008406 <forward_conv2d_sssa8_ch_nl_pool+0x4a6>
 80083fa:	1a8a      	subs	r2, r1, r2
 80083fc:	9839      	ldr	r0, [sp, #228]	@ 0xe4
 80083fe:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8008400:	fb00 1202 	mla	r2, r0, r2, r1
 8008404:	9218      	str	r2, [sp, #96]	@ 0x60
 8008406:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800840a:	b29b      	uxth	r3, r3
 800840c:	9316      	str	r3, [sp, #88]	@ 0x58
 800840e:	e75e      	b.n	80082ce <forward_conv2d_sssa8_ch_nl_pool+0x36e>
 8008410:	2300      	movs	r3, #0
 8008412:	931f      	str	r3, [sp, #124]	@ 0x7c
 8008414:	931d      	str	r3, [sp, #116]	@ 0x74
 8008416:	e752      	b.n	80082be <forward_conv2d_sssa8_ch_nl_pool+0x35e>
 8008418:	68eb      	ldr	r3, [r5, #12]
 800841a:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 800841c:	60ab      	str	r3, [r5, #8]
 800841e:	68f3      	ldr	r3, [r6, #12]
 8008420:	60b3      	str	r3, [r6, #8]
 8008422:	68d3      	ldr	r3, [r2, #12]
 8008424:	6093      	str	r3, [r2, #8]
 8008426:	b04f      	add	sp, #316	@ 0x13c
 8008428:	ecbd 8b04 	vpop	{d8-d9}
 800842c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008430:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 80084a4 <forward_conv2d_sssa8_ch_nl_pool+0x544>
 8008434:	e68a      	b.n	800814c <forward_conv2d_sssa8_ch_nl_pool+0x1ec>
 8008436:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 80084a4 <forward_conv2d_sssa8_ch_nl_pool+0x544>
 800843a:	e679      	b.n	8008130 <forward_conv2d_sssa8_ch_nl_pool+0x1d0>
 800843c:	6870      	ldr	r0, [r6, #4]
 800843e:	4402      	add	r2, r0
 8008440:	4293      	cmp	r3, r2
 8008442:	d2c3      	bcs.n	80083cc <forward_conv2d_sssa8_ch_nl_pool+0x46c>
 8008444:	3901      	subs	r1, #1
 8008446:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8008448:	f813 2b01 	ldrb.w	r2, [r3], #1
 800844c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008450:	68f2      	ldr	r2, [r6, #12]
 8008452:	6870      	ldr	r0, [r6, #4]
 8008454:	4402      	add	r2, r0
 8008456:	4293      	cmp	r3, r2
 8008458:	d3f6      	bcc.n	8008448 <forward_conv2d_sssa8_ch_nl_pool+0x4e8>
 800845a:	9713      	str	r7, [sp, #76]	@ 0x4c
 800845c:	e7b6      	b.n	80083cc <forward_conv2d_sssa8_ch_nl_pool+0x46c>
 800845e:	932a      	str	r3, [sp, #168]	@ 0xa8
 8008460:	e6a9      	b.n	80081b6 <forward_conv2d_sssa8_ch_nl_pool+0x256>
 8008462:	9229      	str	r2, [sp, #164]	@ 0xa4
 8008464:	e698      	b.n	8008198 <forward_conv2d_sssa8_ch_nl_pool+0x238>
 8008466:	f8d9 1020 	ldr.w	r1, [r9, #32]
 800846a:	ee08 1a90 	vmov	s17, r1
 800846e:	2900      	cmp	r1, #0
 8008470:	f43f adff 	beq.w	8008072 <forward_conv2d_sssa8_ch_nl_pool+0x112>
 8008474:	6889      	ldr	r1, [r1, #8]
 8008476:	ee08 1a90 	vmov	s17, r1
 800847a:	e5fa      	b.n	8008072 <forward_conv2d_sssa8_ch_nl_pool+0x112>
 800847c:	9129      	str	r1, [sp, #164]	@ 0xa4
 800847e:	e68b      	b.n	8008198 <forward_conv2d_sssa8_ch_nl_pool+0x238>
 8008480:	4b09      	ldr	r3, [pc, #36]	@ (80084a8 <forward_conv2d_sssa8_ch_nl_pool+0x548>)
 8008482:	46c3      	mov	fp, r8
 8008484:	932e      	str	r3, [sp, #184]	@ 0xb8
 8008486:	e5a8      	b.n	8007fda <forward_conv2d_sssa8_ch_nl_pool+0x7a>
 8008488:	922a      	str	r2, [sp, #168]	@ 0xa8
 800848a:	e694      	b.n	80081b6 <forward_conv2d_sssa8_ch_nl_pool+0x256>
 800848c:	9115      	str	r1, [sp, #84]	@ 0x54
 800848e:	9118      	str	r1, [sp, #96]	@ 0x60
 8008490:	e590      	b.n	8007fb4 <forward_conv2d_sssa8_ch_nl_pool+0x54>
 8008492:	68db      	ldr	r3, [r3, #12]
 8008494:	deff      	udf	#255	@ 0xff
 8008496:	2300      	movs	r3, #0
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	deff      	udf	#255	@ 0xff
 800849c:	2300      	movs	r3, #0
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	deff      	udf	#255	@ 0xff
 80084a2:	bf00      	nop
 80084a4:	00000000 	.word	0x00000000
 80084a8:	08007f5d 	.word	0x08007f5d

080084ac <forward_dense_integer_SSSA>:
 80084ac:	6982      	ldr	r2, [r0, #24]
 80084ae:	8813      	ldrh	r3, [r2, #0]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	f000 80c8 	beq.w	8008646 <forward_dense_integer_SSSA+0x19a>
 80084b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ba:	6852      	ldr	r2, [r2, #4]
 80084bc:	b093      	sub	sp, #76	@ 0x4c
 80084be:	6854      	ldr	r4, [r2, #4]
 80084c0:	b104      	cbz	r4, 80084c4 <forward_dense_integer_SSSA+0x18>
 80084c2:	6824      	ldr	r4, [r4, #0]
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	f000 8161 	beq.w	800878c <forward_dense_integer_SSSA+0x2e0>
 80084ca:	6911      	ldr	r1, [r2, #16]
 80084cc:	b101      	cbz	r1, 80084d0 <forward_dense_integer_SSSA+0x24>
 80084ce:	6809      	ldr	r1, [r1, #0]
 80084d0:	2b02      	cmp	r3, #2
 80084d2:	f000 815e 	beq.w	8008792 <forward_dense_integer_SSSA+0x2e6>
 80084d6:	69d5      	ldr	r5, [r2, #28]
 80084d8:	2d00      	cmp	r5, #0
 80084da:	f000 8108 	beq.w	80086ee <forward_dense_integer_SSSA+0x242>
 80084de:	8b16      	ldrh	r6, [r2, #24]
 80084e0:	6828      	ldr	r0, [r5, #0]
 80084e2:	2e01      	cmp	r6, #1
 80084e4:	f240 812d 	bls.w	8008742 <forward_dense_integer_SSSA+0x296>
 80084e8:	686d      	ldr	r5, [r5, #4]
 80084ea:	2b03      	cmp	r3, #3
 80084ec:	f000 8154 	beq.w	8008798 <forward_dense_integer_SSSA+0x2ec>
 80084f0:	f8d2 9028 	ldr.w	r9, [r2, #40]	@ 0x28
 80084f4:	69ab      	ldr	r3, [r5, #24]
 80084f6:	f1b9 0f00 	cmp.w	r9, #0
 80084fa:	f000 810f 	beq.w	800871c <forward_dense_integer_SSSA+0x270>
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	68e2      	ldr	r2, [r4, #12]
 8008502:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008504:	68cb      	ldr	r3, [r1, #12]
 8008506:	6856      	ldr	r6, [r2, #4]
 8008508:	f8d9 9000 	ldr.w	r9, [r9]
 800850c:	f8d4 e018 	ldr.w	lr, [r4, #24]
 8008510:	698d      	ldr	r5, [r1, #24]
 8008512:	960f      	str	r6, [sp, #60]	@ 0x3c
 8008514:	e9d3 a201 	ldrd	sl, r2, [r3, #4]
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	fb03 f302 	mul.w	r3, r3, r2
 800851e:	b2b2      	uxth	r2, r6
 8008520:	930c      	str	r3, [sp, #48]	@ 0x30
 8008522:	fa1f f38a 	uxth.w	r3, sl
 8008526:	f1b9 0f00 	cmp.w	r9, #0
 800852a:	d003      	beq.n	8008534 <forward_dense_integer_SSSA+0x88>
 800852c:	f8d9 6018 	ldr.w	r6, [r9, #24]
 8008530:	f8d6 9008 	ldr.w	r9, [r6, #8]
 8008534:	6827      	ldr	r7, [r4, #0]
 8008536:	f8d0 b000 	ldr.w	fp, [r0]
 800853a:	680c      	ldr	r4, [r1, #0]
 800853c:	6981      	ldr	r1, [r0, #24]
 800853e:	2f00      	cmp	r7, #0
 8008540:	f000 8083 	beq.w	800864a <forward_dense_integer_SSSA+0x19e>
 8008544:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8008548:	f1bc 0f00 	cmp.w	ip, #0
 800854c:	f000 80b1 	beq.w	80086b2 <forward_dense_integer_SSSA+0x206>
 8008550:	8878      	ldrh	r0, [r7, #2]
 8008552:	2800      	cmp	r0, #0
 8008554:	f000 809c 	beq.w	8008690 <forward_dense_integer_SSSA+0x1e4>
 8008558:	f8dc 6000 	ldr.w	r6, [ip]
 800855c:	edd6 7a00 	vldr	s15, [r6]
 8008560:	2c00      	cmp	r4, #0
 8008562:	f000 809a 	beq.w	800869a <forward_dense_integer_SSSA+0x1ee>
 8008566:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800856a:	f1b8 0f00 	cmp.w	r8, #0
 800856e:	f000 80a9 	beq.w	80086c4 <forward_dense_integer_SSSA+0x218>
 8008572:	8860      	ldrh	r0, [r4, #2]
 8008574:	2800      	cmp	r0, #0
 8008576:	d074      	beq.n	8008662 <forward_dense_integer_SSSA+0x1b6>
 8008578:	68ae      	ldr	r6, [r5, #8]
 800857a:	f8de 5008 	ldr.w	r5, [lr, #8]
 800857e:	6889      	ldr	r1, [r1, #8]
 8008580:	950d      	str	r5, [sp, #52]	@ 0x34
 8008582:	f8d8 5000 	ldr.w	r5, [r8]
 8008586:	ed95 0a00 	vldr	s0, [r5]
 800858a:	f1bc 0f00 	cmp.w	ip, #0
 800858e:	d076      	beq.n	800867e <forward_dense_integer_SSSA+0x1d2>
 8008590:	8878      	ldrh	r0, [r7, #2]
 8008592:	2800      	cmp	r0, #0
 8008594:	f000 80a3 	beq.w	80086de <forward_dense_integer_SSSA+0x232>
 8008598:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800859c:	f990 7000 	ldrsb.w	r7, [r0]
 80085a0:	2c00      	cmp	r4, #0
 80085a2:	f000 80eb 	beq.w	800877c <forward_dense_integer_SSSA+0x2d0>
 80085a6:	f1b8 0f00 	cmp.w	r8, #0
 80085aa:	f000 809d 	beq.w	80086e8 <forward_dense_integer_SSSA+0x23c>
 80085ae:	8860      	ldrh	r0, [r4, #2]
 80085b0:	2800      	cmp	r0, #0
 80085b2:	d167      	bne.n	8008684 <forward_dense_integer_SSSA+0x1d8>
 80085b4:	900a      	str	r0, [sp, #40]	@ 0x28
 80085b6:	910e      	str	r1, [sp, #56]	@ 0x38
 80085b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80085bc:	f1bb 0f00 	cmp.w	fp, #0
 80085c0:	f000 80de 	beq.w	8008780 <forward_dense_integer_SSSA+0x2d4>
 80085c4:	f8db 0004 	ldr.w	r0, [fp, #4]
 80085c8:	2800      	cmp	r0, #0
 80085ca:	f000 80d9 	beq.w	8008780 <forward_dense_integer_SSSA+0x2d4>
 80085ce:	6800      	ldr	r0, [r0, #0]
 80085d0:	2400      	movs	r4, #0
 80085d2:	f10d 0842 	add.w	r8, sp, #66	@ 0x42
 80085d6:	f8ad 4042 	strh.w	r4, [sp, #66]	@ 0x42
 80085da:	9411      	str	r4, [sp, #68]	@ 0x44
 80085dc:	ed90 7a00 	vldr	s14, [r0]
 80085e0:	4640      	mov	r0, r8
 80085e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80085e6:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80085ea:	f001 f9ab 	bl	8009944 <align_factor>
 80085ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80085f0:	9011      	str	r0, [sp, #68]	@ 0x44
 80085f2:	b32b      	cbz	r3, 8008640 <forward_dense_integer_SSSA+0x194>
 80085f4:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 80085f8:	4699      	mov	r9, r3
 80085fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085fc:	fa1f fa8a 	uxth.w	sl, sl
 8008600:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8008602:	f8bd b03c 	ldrh.w	fp, [sp, #60]	@ 0x3c
 8008606:	970d      	str	r7, [sp, #52]	@ 0x34
 8008608:	461f      	mov	r7, r3
 800860a:	9a08      	ldr	r2, [sp, #32]
 800860c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800860e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008610:	3401      	adds	r4, #1
 8008612:	4628      	mov	r0, r5
 8008614:	9605      	str	r6, [sp, #20]
 8008616:	9306      	str	r3, [sp, #24]
 8008618:	4456      	add	r6, sl
 800861a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800861c:	445d      	add	r5, fp
 800861e:	9304      	str	r3, [sp, #16]
 8008620:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008622:	9303      	str	r3, [sp, #12]
 8008624:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008626:	e9cd 8301 	strd	r8, r3, [sp, #4]
 800862a:	ab11      	add	r3, sp, #68	@ 0x44
 800862c:	9300      	str	r3, [sp, #0]
 800862e:	463b      	mov	r3, r7
 8008630:	e9cd 1208 	strd	r1, r2, [sp, #32]
 8008634:	f001 fa92 	bl	8009b5c <st_sssa8_fully_connected>
 8008638:	454c      	cmp	r4, r9
 800863a:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800863e:	d1e6      	bne.n	800860e <forward_dense_integer_SSSA+0x162>
 8008640:	b013      	add	sp, #76	@ 0x4c
 8008642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	deff      	udf	#255	@ 0xff
 800864a:	2c00      	cmp	r4, #0
 800864c:	d056      	beq.n	80086fc <forward_dense_integer_SSSA+0x250>
 800864e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8008652:	f1b8 0f00 	cmp.w	r8, #0
 8008656:	d05d      	beq.n	8008714 <forward_dense_integer_SSSA+0x268>
 8008658:	8860      	ldrh	r0, [r4, #2]
 800865a:	2800      	cmp	r0, #0
 800865c:	d173      	bne.n	8008746 <forward_dense_integer_SSSA+0x29a>
 800865e:	eddf 7a50 	vldr	s15, [pc, #320]	@ 80087a0 <forward_dense_integer_SSSA+0x2f4>
 8008662:	68ae      	ldr	r6, [r5, #8]
 8008664:	f8de 5008 	ldr.w	r5, [lr, #8]
 8008668:	6889      	ldr	r1, [r1, #8]
 800866a:	950d      	str	r5, [sp, #52]	@ 0x34
 800866c:	2f00      	cmp	r7, #0
 800866e:	d041      	beq.n	80086f4 <forward_dense_integer_SSSA+0x248>
 8008670:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8008674:	ed9f 0a4a 	vldr	s0, [pc, #296]	@ 80087a0 <forward_dense_integer_SSSA+0x2f4>
 8008678:	f1bc 0f00 	cmp.w	ip, #0
 800867c:	d188      	bne.n	8008590 <forward_dense_integer_SSSA+0xe4>
 800867e:	4667      	mov	r7, ip
 8008680:	2800      	cmp	r0, #0
 8008682:	d097      	beq.n	80085b4 <forward_dense_integer_SSSA+0x108>
 8008684:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008688:	f990 0000 	ldrsb.w	r0, [r0]
 800868c:	900a      	str	r0, [sp, #40]	@ 0x28
 800868e:	e792      	b.n	80085b6 <forward_dense_integer_SSSA+0x10a>
 8008690:	eddf 7a43 	vldr	s15, [pc, #268]	@ 80087a0 <forward_dense_integer_SSSA+0x2f4>
 8008694:	2c00      	cmp	r4, #0
 8008696:	f47f af66 	bne.w	8008566 <forward_dense_integer_SSSA+0xba>
 800869a:	68ae      	ldr	r6, [r5, #8]
 800869c:	f8de 5008 	ldr.w	r5, [lr, #8]
 80086a0:	6889      	ldr	r1, [r1, #8]
 80086a2:	950d      	str	r5, [sp, #52]	@ 0x34
 80086a4:	2800      	cmp	r0, #0
 80086a6:	d15a      	bne.n	800875e <forward_dense_integer_SSSA+0x2b2>
 80086a8:	4607      	mov	r7, r0
 80086aa:	ed9f 0a3d 	vldr	s0, [pc, #244]	@ 80087a0 <forward_dense_integer_SSSA+0x2f4>
 80086ae:	900a      	str	r0, [sp, #40]	@ 0x28
 80086b0:	e781      	b.n	80085b6 <forward_dense_integer_SSSA+0x10a>
 80086b2:	b31c      	cbz	r4, 80086fc <forward_dense_integer_SSSA+0x250>
 80086b4:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80086b8:	eddf 7a39 	vldr	s15, [pc, #228]	@ 80087a0 <forward_dense_integer_SSSA+0x2f4>
 80086bc:	f1b8 0f00 	cmp.w	r8, #0
 80086c0:	f47f af57 	bne.w	8008572 <forward_dense_integer_SSSA+0xc6>
 80086c4:	f8de 0008 	ldr.w	r0, [lr, #8]
 80086c8:	68ae      	ldr	r6, [r5, #8]
 80086ca:	6889      	ldr	r1, [r1, #8]
 80086cc:	900d      	str	r0, [sp, #52]	@ 0x34
 80086ce:	f1bc 0f00 	cmp.w	ip, #0
 80086d2:	d00e      	beq.n	80086f2 <forward_dense_integer_SSSA+0x246>
 80086d4:	8878      	ldrh	r0, [r7, #2]
 80086d6:	2800      	cmp	r0, #0
 80086d8:	d149      	bne.n	800876e <forward_dense_integer_SSSA+0x2c2>
 80086da:	ed9f 0a31 	vldr	s0, [pc, #196]	@ 80087a0 <forward_dense_integer_SSSA+0x2f4>
 80086de:	2700      	movs	r7, #0
 80086e0:	f1b8 0f00 	cmp.w	r8, #0
 80086e4:	f47f af63 	bne.w	80085ae <forward_dense_integer_SSSA+0x102>
 80086e8:	2000      	movs	r0, #0
 80086ea:	900a      	str	r0, [sp, #40]	@ 0x28
 80086ec:	e763      	b.n	80085b6 <forward_dense_integer_SSSA+0x10a>
 80086ee:	4628      	mov	r0, r5
 80086f0:	e6fb      	b.n	80084ea <forward_dense_integer_SSSA+0x3e>
 80086f2:	4667      	mov	r7, ip
 80086f4:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 80087a0 <forward_dense_integer_SSSA+0x2f4>
 80086f8:	970a      	str	r7, [sp, #40]	@ 0x28
 80086fa:	e75c      	b.n	80085b6 <forward_dense_integer_SSSA+0x10a>
 80086fc:	eddf 7a28 	vldr	s15, [pc, #160]	@ 80087a0 <forward_dense_integer_SSSA+0x2f4>
 8008700:	4627      	mov	r7, r4
 8008702:	f8de 0008 	ldr.w	r0, [lr, #8]
 8008706:	eeb0 0a67 	vmov.f32	s0, s15
 800870a:	68ae      	ldr	r6, [r5, #8]
 800870c:	6889      	ldr	r1, [r1, #8]
 800870e:	900d      	str	r0, [sp, #52]	@ 0x34
 8008710:	970a      	str	r7, [sp, #40]	@ 0x28
 8008712:	e750      	b.n	80085b6 <forward_dense_integer_SSSA+0x10a>
 8008714:	eddf 7a22 	vldr	s15, [pc, #136]	@ 80087a0 <forward_dense_integer_SSSA+0x2f4>
 8008718:	4647      	mov	r7, r8
 800871a:	e7f2      	b.n	8008702 <forward_dense_integer_SSSA+0x256>
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	68e2      	ldr	r2, [r4, #12]
 8008720:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008722:	68cb      	ldr	r3, [r1, #12]
 8008724:	6856      	ldr	r6, [r2, #4]
 8008726:	f8d4 e018 	ldr.w	lr, [r4, #24]
 800872a:	698d      	ldr	r5, [r1, #24]
 800872c:	960f      	str	r6, [sp, #60]	@ 0x3c
 800872e:	e9d3 a201 	ldrd	sl, r2, [r3, #4]
 8008732:	68db      	ldr	r3, [r3, #12]
 8008734:	fb03 f302 	mul.w	r3, r3, r2
 8008738:	b2b2      	uxth	r2, r6
 800873a:	930c      	str	r3, [sp, #48]	@ 0x30
 800873c:	fa1f f38a 	uxth.w	r3, sl
 8008740:	e6f8      	b.n	8008534 <forward_dense_integer_SSSA+0x88>
 8008742:	2500      	movs	r5, #0
 8008744:	e6d1      	b.n	80084ea <forward_dense_integer_SSSA+0x3e>
 8008746:	f8de 0008 	ldr.w	r0, [lr, #8]
 800874a:	68ae      	ldr	r6, [r5, #8]
 800874c:	900d      	str	r0, [sp, #52]	@ 0x34
 800874e:	f8d8 0000 	ldr.w	r0, [r8]
 8008752:	6889      	ldr	r1, [r1, #8]
 8008754:	eddf 7a12 	vldr	s15, [pc, #72]	@ 80087a0 <forward_dense_integer_SSSA+0x2f4>
 8008758:	ed90 0a00 	vldr	s0, [r0]
 800875c:	e792      	b.n	8008684 <forward_dense_integer_SSSA+0x1d8>
 800875e:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8008762:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 80087a0 <forward_dense_integer_SSSA+0x2f4>
 8008766:	f990 7000 	ldrsb.w	r7, [r0]
 800876a:	940a      	str	r4, [sp, #40]	@ 0x28
 800876c:	e723      	b.n	80085b6 <forward_dense_integer_SSSA+0x10a>
 800876e:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8008772:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 80087a0 <forward_dense_integer_SSSA+0x2f4>
 8008776:	f990 7000 	ldrsb.w	r7, [r0]
 800877a:	e7b5      	b.n	80086e8 <forward_dense_integer_SSSA+0x23c>
 800877c:	940a      	str	r4, [sp, #40]	@ 0x28
 800877e:	e71a      	b.n	80085b6 <forward_dense_integer_SSSA+0x10a>
 8008780:	2300      	movs	r3, #0
 8008782:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 8008786:	9311      	str	r3, [sp, #68]	@ 0x44
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	deff      	udf	#255	@ 0xff
 800878c:	2300      	movs	r3, #0
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	deff      	udf	#255	@ 0xff
 8008792:	2300      	movs	r3, #0
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	deff      	udf	#255	@ 0xff
 8008798:	2300      	movs	r3, #0
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	deff      	udf	#255	@ 0xff
 800879e:	bf00      	nop
 80087a0:	00000000 	.word	0x00000000

080087a4 <forward_transpose>:
 80087a4:	6983      	ldr	r3, [r0, #24]
 80087a6:	881a      	ldrh	r2, [r3, #0]
 80087a8:	2a00      	cmp	r2, #0
 80087aa:	d035      	beq.n	8008818 <forward_transpose+0x74>
 80087ac:	6859      	ldr	r1, [r3, #4]
 80087ae:	684b      	ldr	r3, [r1, #4]
 80087b0:	b103      	cbz	r3, 80087b4 <forward_transpose+0x10>
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	2a01      	cmp	r2, #1
 80087b6:	f000 80a3 	beq.w	8008900 <forward_transpose+0x15c>
 80087ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087be:	690c      	ldr	r4, [r1, #16]
 80087c0:	b08b      	sub	sp, #44	@ 0x2c
 80087c2:	b104      	cbz	r4, 80087c6 <forward_transpose+0x22>
 80087c4:	6824      	ldr	r4, [r4, #0]
 80087c6:	6a05      	ldr	r5, [r0, #32]
 80087c8:	e9d3 6204 	ldrd	r6, r2, [r3, #16]
 80087cc:	6869      	ldr	r1, [r5, #4]
 80087ce:	f5b6 6fa0 	cmp.w	r6, #1280	@ 0x500
 80087d2:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80087d6:	9100      	str	r1, [sp, #0]
 80087d8:	68a9      	ldr	r1, [r5, #8]
 80087da:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80087de:	9106      	str	r1, [sp, #24]
 80087e0:	68e9      	ldr	r1, [r5, #12]
 80087e2:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80087e6:	9107      	str	r1, [sp, #28]
 80087e8:	d318      	bcc.n	800881c <forward_transpose+0x78>
 80087ea:	69c1      	ldr	r1, [r0, #28]
 80087ec:	f5b1 6fa0 	cmp.w	r1, #1280	@ 0x500
 80087f0:	f0c0 8082 	bcc.w	80088f8 <forward_transpose+0x154>
 80087f4:	6929      	ldr	r1, [r5, #16]
 80087f6:	0089      	lsls	r1, r1, #2
 80087f8:	f026 06ff 	bic.w	r6, r6, #255	@ 0xff
 80087fc:	5851      	ldr	r1, [r2, r1]
 80087fe:	f5b6 6fc0 	cmp.w	r6, #1536	@ 0x600
 8008802:	9102      	str	r1, [sp, #8]
 8008804:	d111      	bne.n	800882a <forward_transpose+0x86>
 8008806:	69c1      	ldr	r1, [r0, #28]
 8008808:	f5b1 6fc0 	cmp.w	r1, #1536	@ 0x600
 800880c:	d376      	bcc.n	80088fc <forward_transpose+0x158>
 800880e:	6969      	ldr	r1, [r5, #20]
 8008810:	0089      	lsls	r1, r1, #2
 8008812:	5852      	ldr	r2, [r2, r1]
 8008814:	9203      	str	r2, [sp, #12]
 8008816:	e00a      	b.n	800882e <forward_transpose+0x8a>
 8008818:	6853      	ldr	r3, [r2, #4]
 800881a:	deff      	udf	#255	@ 0xff
 800881c:	f026 06ff 	bic.w	r6, r6, #255	@ 0xff
 8008820:	2100      	movs	r1, #0
 8008822:	f5b6 6fc0 	cmp.w	r6, #1536	@ 0x600
 8008826:	9102      	str	r1, [sp, #8]
 8008828:	d0ed      	beq.n	8008806 <forward_transpose+0x62>
 800882a:	2200      	movs	r2, #0
 800882c:	9203      	str	r2, [sp, #12]
 800882e:	699b      	ldr	r3, [r3, #24]
 8008830:	69a2      	ldr	r2, [r4, #24]
 8008832:	68e1      	ldr	r1, [r4, #12]
 8008834:	6896      	ldr	r6, [r2, #8]
 8008836:	681a      	ldr	r2, [r3, #0]
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	f3c2 2283 	ubfx	r2, r2, #10, #4
 800883e:	9301      	str	r3, [sp, #4]
 8008840:	68cb      	ldr	r3, [r1, #12]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d055      	beq.n	80088f2 <forward_transpose+0x14e>
 8008846:	2300      	movs	r3, #0
 8008848:	6888      	ldr	r0, [r1, #8]
 800884a:	9305      	str	r3, [sp, #20]
 800884c:	2800      	cmp	r0, #0
 800884e:	d050      	beq.n	80088f2 <forward_transpose+0x14e>
 8008850:	68a5      	ldr	r5, [r4, #8]
 8008852:	2000      	movs	r0, #0
 8008854:	4692      	mov	sl, r2
 8008856:	9308      	str	r3, [sp, #32]
 8008858:	f3c5 2517 	ubfx	r5, r5, #8, #24
 800885c:	9004      	str	r0, [sp, #16]
 800885e:	469b      	mov	fp, r3
 8008860:	f04f 0800 	mov.w	r8, #0
 8008864:	9309      	str	r3, [sp, #36]	@ 0x24
 8008866:	2d04      	cmp	r5, #4
 8008868:	bf8c      	ite	hi
 800886a:	690b      	ldrhi	r3, [r1, #16]
 800886c:	2301      	movls	r3, #1
 800886e:	4598      	cmp	r8, r3
 8008870:	d229      	bcs.n	80088c6 <forward_transpose+0x122>
 8008872:	2d05      	cmp	r5, #5
 8008874:	46d9      	mov	r9, fp
 8008876:	f04f 0700 	mov.w	r7, #0
 800887a:	d91d      	bls.n	80088b8 <forward_transpose+0x114>
 800887c:	694a      	ldr	r2, [r1, #20]
 800887e:	4297      	cmp	r7, r2
 8008880:	d21c      	bcs.n	80088bc <forward_transpose+0x118>
 8008882:	684a      	ldr	r2, [r1, #4]
 8008884:	b192      	cbz	r2, 80088ac <forward_transpose+0x108>
 8008886:	2500      	movs	r5, #0
 8008888:	9b00      	ldr	r3, [sp, #0]
 800888a:	4631      	mov	r1, r6
 800888c:	4652      	mov	r2, sl
 800888e:	4456      	add	r6, sl
 8008890:	fb03 9005 	mla	r0, r3, r5, r9
 8008894:	9b01      	ldr	r3, [sp, #4]
 8008896:	3501      	adds	r5, #1
 8008898:	4418      	add	r0, r3
 800889a:	f001 fc59 	bl	800a150 <st_int8_copy>
 800889e:	68e1      	ldr	r1, [r4, #12]
 80088a0:	684b      	ldr	r3, [r1, #4]
 80088a2:	429d      	cmp	r5, r3
 80088a4:	d3f0      	bcc.n	8008888 <forward_transpose+0xe4>
 80088a6:	68a3      	ldr	r3, [r4, #8]
 80088a8:	f3c3 2517 	ubfx	r5, r3, #8, #24
 80088ac:	9b03      	ldr	r3, [sp, #12]
 80088ae:	2d05      	cmp	r5, #5
 80088b0:	f107 0701 	add.w	r7, r7, #1
 80088b4:	4499      	add	r9, r3
 80088b6:	d8e1      	bhi.n	800887c <forward_transpose+0xd8>
 80088b8:	2f00      	cmp	r7, #0
 80088ba:	d0e2      	beq.n	8008882 <forward_transpose+0xde>
 80088bc:	9b02      	ldr	r3, [sp, #8]
 80088be:	f108 0801 	add.w	r8, r8, #1
 80088c2:	449b      	add	fp, r3
 80088c4:	e7cf      	b.n	8008866 <forward_transpose+0xc2>
 80088c6:	9a04      	ldr	r2, [sp, #16]
 80088c8:	9806      	ldr	r0, [sp, #24]
 80088ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088cc:	3201      	adds	r2, #1
 80088ce:	4403      	add	r3, r0
 80088d0:	6888      	ldr	r0, [r1, #8]
 80088d2:	9204      	str	r2, [sp, #16]
 80088d4:	4282      	cmp	r2, r0
 80088d6:	d3c2      	bcc.n	800885e <forward_transpose+0xba>
 80088d8:	9d05      	ldr	r5, [sp, #20]
 80088da:	4652      	mov	r2, sl
 80088dc:	9b08      	ldr	r3, [sp, #32]
 80088de:	3501      	adds	r5, #1
 80088e0:	462f      	mov	r7, r5
 80088e2:	9505      	str	r5, [sp, #20]
 80088e4:	68cd      	ldr	r5, [r1, #12]
 80088e6:	42af      	cmp	r7, r5
 80088e8:	d203      	bcs.n	80088f2 <forward_transpose+0x14e>
 80088ea:	9d07      	ldr	r5, [sp, #28]
 80088ec:	442b      	add	r3, r5
 80088ee:	2800      	cmp	r0, #0
 80088f0:	d1ae      	bne.n	8008850 <forward_transpose+0xac>
 80088f2:	b00b      	add	sp, #44	@ 0x2c
 80088f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088f8:	2104      	movs	r1, #4
 80088fa:	e77d      	b.n	80087f8 <forward_transpose+0x54>
 80088fc:	2104      	movs	r1, #4
 80088fe:	e788      	b.n	8008812 <forward_transpose+0x6e>
 8008900:	2300      	movs	r3, #0
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	deff      	udf	#255	@ 0xff
 8008906:	bf00      	nop

08008908 <pool_func_mp_array_integer_INT8>:
 8008908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800890c:	b093      	sub	sp, #76	@ 0x4c
 800890e:	468c      	mov	ip, r1
 8008910:	469a      	mov	sl, r3
 8008912:	6804      	ldr	r4, [r0, #0]
 8008914:	f8bd 1074 	ldrh.w	r1, [sp, #116]	@ 0x74
 8008918:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 800891c:	910e      	str	r1, [sp, #56]	@ 0x38
 800891e:	f8bd 1078 	ldrh.w	r1, [sp, #120]	@ 0x78
 8008922:	930d      	str	r3, [sp, #52]	@ 0x34
 8008924:	910f      	str	r1, [sp, #60]	@ 0x3c
 8008926:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008928:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 800892c:	6980      	ldr	r0, [r0, #24]
 800892e:	9110      	str	r1, [sp, #64]	@ 0x40
 8008930:	f8bd b080 	ldrh.w	fp, [sp, #128]	@ 0x80
 8008934:	f8bd 7084 	ldrh.w	r7, [sp, #132]	@ 0x84
 8008938:	f8bd e088 	ldrh.w	lr, [sp, #136]	@ 0x88
 800893c:	f8bd 808c 	ldrh.w	r8, [sp, #140]	@ 0x8c
 8008940:	6999      	ldr	r1, [r3, #24]
 8008942:	681d      	ldr	r5, [r3, #0]
 8008944:	2c00      	cmp	r4, #0
 8008946:	d068      	beq.n	8008a1a <pool_func_mp_array_integer_INT8+0x112>
 8008948:	6866      	ldr	r6, [r4, #4]
 800894a:	2e00      	cmp	r6, #0
 800894c:	d04c      	beq.n	80089e8 <pool_func_mp_array_integer_INT8+0xe0>
 800894e:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 8008952:	f1b9 0f00 	cmp.w	r9, #0
 8008956:	d07a      	beq.n	8008a4e <pool_func_mp_array_integer_INT8+0x146>
 8008958:	6833      	ldr	r3, [r6, #0]
 800895a:	edd3 7a00 	vldr	s15, [r3]
 800895e:	2d00      	cmp	r5, #0
 8008960:	d079      	beq.n	8008a56 <pool_func_mp_array_integer_INT8+0x14e>
 8008962:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8008966:	f1b9 0f00 	cmp.w	r9, #0
 800896a:	d046      	beq.n	80089fa <pool_func_mp_array_integer_INT8+0xf2>
 800896c:	886b      	ldrh	r3, [r5, #2]
 800896e:	9311      	str	r3, [sp, #68]	@ 0x44
 8008970:	2b00      	cmp	r3, #0
 8008972:	d05f      	beq.n	8008a34 <pool_func_mp_array_integer_INT8+0x12c>
 8008974:	f8d9 3000 	ldr.w	r3, [r9]
 8008978:	6880      	ldr	r0, [r0, #8]
 800897a:	ed93 7a00 	vldr	s14, [r3]
 800897e:	6889      	ldr	r1, [r1, #8]
 8008980:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8008984:	2e00      	cmp	r6, #0
 8008986:	d060      	beq.n	8008a4a <pool_func_mp_array_integer_INT8+0x142>
 8008988:	8863      	ldrh	r3, [r4, #2]
 800898a:	2b00      	cmp	r3, #0
 800898c:	f000 808c 	beq.w	8008aa8 <pool_func_mp_array_integer_INT8+0x1a0>
 8008990:	6873      	ldr	r3, [r6, #4]
 8008992:	f993 4000 	ldrsb.w	r4, [r3]
 8008996:	2d00      	cmp	r5, #0
 8008998:	d03d      	beq.n	8008a16 <pool_func_mp_array_integer_INT8+0x10e>
 800899a:	f1b9 0f00 	cmp.w	r9, #0
 800899e:	d03a      	beq.n	8008a16 <pool_func_mp_array_integer_INT8+0x10e>
 80089a0:	886b      	ldrh	r3, [r5, #2]
 80089a2:	9311      	str	r3, [sp, #68]	@ 0x44
 80089a4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80089a6:	b11b      	cbz	r3, 80089b0 <pool_func_mp_array_integer_INT8+0xa8>
 80089a8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80089ac:	f993 3000 	ldrsb.w	r3, [r3]
 80089b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80089b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089b8:	da5f      	bge.n	8008a7a <pool_func_mp_array_integer_INT8+0x172>
 80089ba:	f8cd a000 	str.w	sl, [sp]
 80089be:	e9cd 4309 	strd	r4, r3, [sp, #36]	@ 0x24
 80089c2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80089c4:	9304      	str	r3, [sp, #16]
 80089c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089c8:	9303      	str	r3, [sp, #12]
 80089ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089cc:	9302      	str	r3, [sp, #8]
 80089ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80089d0:	9301      	str	r3, [sp, #4]
 80089d2:	4613      	mov	r3, r2
 80089d4:	4662      	mov	r2, ip
 80089d6:	e9cd e807 	strd	lr, r8, [sp, #28]
 80089da:	e9cd b705 	strd	fp, r7, [sp, #20]
 80089de:	f000 fed1 	bl	8009784 <forward_lite_maxpool_is8os8_scaleneg>
 80089e2:	b013      	add	sp, #76	@ 0x4c
 80089e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089e8:	2d00      	cmp	r5, #0
 80089ea:	d040      	beq.n	8008a6e <pool_func_mp_array_integer_INT8+0x166>
 80089ec:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80089f0:	eddf 7a39 	vldr	s15, [pc, #228]	@ 8008ad8 <pool_func_mp_array_integer_INT8+0x1d0>
 80089f4:	f1b9 0f00 	cmp.w	r9, #0
 80089f8:	d1b8      	bne.n	800896c <pool_func_mp_array_integer_INT8+0x64>
 80089fa:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8008ad8 <pool_func_mp_array_integer_INT8+0x1d0>
 80089fe:	6880      	ldr	r0, [r0, #8]
 8008a00:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8008a04:	6889      	ldr	r1, [r1, #8]
 8008a06:	2e00      	cmp	r6, #0
 8008a08:	d063      	beq.n	8008ad2 <pool_func_mp_array_integer_INT8+0x1ca>
 8008a0a:	8863      	ldrh	r3, [r4, #2]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d04b      	beq.n	8008aa8 <pool_func_mp_array_integer_INT8+0x1a0>
 8008a10:	6873      	ldr	r3, [r6, #4]
 8008a12:	f993 4000 	ldrsb.w	r4, [r3]
 8008a16:	2300      	movs	r3, #0
 8008a18:	e7ca      	b.n	80089b0 <pool_func_mp_array_integer_INT8+0xa8>
 8008a1a:	2d00      	cmp	r5, #0
 8008a1c:	d046      	beq.n	8008aac <pool_func_mp_array_integer_INT8+0x1a4>
 8008a1e:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8008a22:	f1b9 0f00 	cmp.w	r9, #0
 8008a26:	d022      	beq.n	8008a6e <pool_func_mp_array_integer_INT8+0x166>
 8008a28:	886b      	ldrh	r3, [r5, #2]
 8008a2a:	9311      	str	r3, [sp, #68]	@ 0x44
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d144      	bne.n	8008aba <pool_func_mp_array_integer_INT8+0x1b2>
 8008a30:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8008ad8 <pool_func_mp_array_integer_INT8+0x1d0>
 8008a34:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8008ad8 <pool_func_mp_array_integer_INT8+0x1d0>
 8008a38:	6880      	ldr	r0, [r0, #8]
 8008a3a:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8008a3e:	6889      	ldr	r1, [r1, #8]
 8008a40:	2c00      	cmp	r4, #0
 8008a42:	d0e8      	beq.n	8008a16 <pool_func_mp_array_integer_INT8+0x10e>
 8008a44:	6866      	ldr	r6, [r4, #4]
 8008a46:	2e00      	cmp	r6, #0
 8008a48:	d19e      	bne.n	8008988 <pool_func_mp_array_integer_INT8+0x80>
 8008a4a:	4634      	mov	r4, r6
 8008a4c:	e7aa      	b.n	80089a4 <pool_func_mp_array_integer_INT8+0x9c>
 8008a4e:	eddf 7a22 	vldr	s15, [pc, #136]	@ 8008ad8 <pool_func_mp_array_integer_INT8+0x1d0>
 8008a52:	2d00      	cmp	r5, #0
 8008a54:	d185      	bne.n	8008962 <pool_func_mp_array_integer_INT8+0x5a>
 8008a56:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8008ad8 <pool_func_mp_array_integer_INT8+0x1d0>
 8008a5a:	6880      	ldr	r0, [r0, #8]
 8008a5c:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8008a60:	6889      	ldr	r1, [r1, #8]
 8008a62:	f1b9 0f00 	cmp.w	r9, #0
 8008a66:	d12f      	bne.n	8008ac8 <pool_func_mp_array_integer_INT8+0x1c0>
 8008a68:	464c      	mov	r4, r9
 8008a6a:	464b      	mov	r3, r9
 8008a6c:	e7a0      	b.n	80089b0 <pool_func_mp_array_integer_INT8+0xa8>
 8008a6e:	2400      	movs	r4, #0
 8008a70:	6880      	ldr	r0, [r0, #8]
 8008a72:	6889      	ldr	r1, [r1, #8]
 8008a74:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8008adc <pool_func_mp_array_integer_INT8+0x1d4>
 8008a78:	4623      	mov	r3, r4
 8008a7a:	f8cd a000 	str.w	sl, [sp]
 8008a7e:	e9cd 4309 	strd	r4, r3, [sp, #36]	@ 0x24
 8008a82:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008a84:	9304      	str	r3, [sp, #16]
 8008a86:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a88:	9303      	str	r3, [sp, #12]
 8008a8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a8c:	9302      	str	r3, [sp, #8]
 8008a8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008a90:	9301      	str	r3, [sp, #4]
 8008a92:	4613      	mov	r3, r2
 8008a94:	4662      	mov	r2, ip
 8008a96:	e9cd e807 	strd	lr, r8, [sp, #28]
 8008a9a:	e9cd b705 	strd	fp, r7, [sp, #20]
 8008a9e:	f000 fd8f 	bl	80095c0 <forward_lite_maxpool_is8os8_scalepos>
 8008aa2:	b013      	add	sp, #76	@ 0x4c
 8008aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aa8:	2400      	movs	r4, #0
 8008aaa:	e776      	b.n	800899a <pool_func_mp_array_integer_INT8+0x92>
 8008aac:	462c      	mov	r4, r5
 8008aae:	6880      	ldr	r0, [r0, #8]
 8008ab0:	6889      	ldr	r1, [r1, #8]
 8008ab2:	462b      	mov	r3, r5
 8008ab4:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8008adc <pool_func_mp_array_integer_INT8+0x1d4>
 8008ab8:	e7df      	b.n	8008a7a <pool_func_mp_array_integer_INT8+0x172>
 8008aba:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8008ad8 <pool_func_mp_array_integer_INT8+0x1d0>
 8008abe:	6880      	ldr	r0, [r0, #8]
 8008ac0:	eef0 7a40 	vmov.f32	s15, s0
 8008ac4:	6889      	ldr	r1, [r1, #8]
 8008ac6:	e76f      	b.n	80089a8 <pool_func_mp_array_integer_INT8+0xa0>
 8008ac8:	6874      	ldr	r4, [r6, #4]
 8008aca:	462b      	mov	r3, r5
 8008acc:	f994 4000 	ldrsb.w	r4, [r4]
 8008ad0:	e76e      	b.n	80089b0 <pool_func_mp_array_integer_INT8+0xa8>
 8008ad2:	4634      	mov	r4, r6
 8008ad4:	4633      	mov	r3, r6
 8008ad6:	e76b      	b.n	80089b0 <pool_func_mp_array_integer_INT8+0xa8>
 8008ad8:	00000000 	.word	0x00000000
 8008adc:	7fc00000 	.word	0x7fc00000

08008ae0 <forward_lite_conv2d_sssa8_ch>:
 8008ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae4:	ed2d 8b08 	vpush	{d8-d11}
 8008ae8:	b0d5      	sub	sp, #340	@ 0x154
 8008aea:	469a      	mov	sl, r3
 8008aec:	4689      	mov	r9, r1
 8008aee:	f8bd 319c 	ldrh.w	r3, [sp, #412]	@ 0x19c
 8008af2:	f8dd b1d8 	ldr.w	fp, [sp, #472]	@ 0x1d8
 8008af6:	9213      	str	r2, [sp, #76]	@ 0x4c
 8008af8:	ee09 3a10 	vmov	s18, r3
 8008afc:	f8bd 21a0 	ldrh.w	r2, [sp, #416]	@ 0x1a0
 8008b00:	ebab 0543 	sub.w	r5, fp, r3, lsl #1
 8008b04:	f89d 11c4 	ldrb.w	r1, [sp, #452]	@ 0x1c4
 8008b08:	9225      	str	r2, [sp, #148]	@ 0x94
 8008b0a:	9a77      	ldr	r2, [sp, #476]	@ 0x1dc
 8008b0c:	f8bd 61d0 	ldrh.w	r6, [sp, #464]	@ 0x1d0
 8008b10:	4415      	add	r5, r2
 8008b12:	f8bd 21a4 	ldrh.w	r2, [sp, #420]	@ 0x1a4
 8008b16:	9011      	str	r0, [sp, #68]	@ 0x44
 8008b18:	922a      	str	r2, [sp, #168]	@ 0xa8
 8008b1a:	f8bd 21a8 	ldrh.w	r2, [sp, #424]	@ 0x1a8
 8008b1e:	f8bd 01cc 	ldrh.w	r0, [sp, #460]	@ 0x1cc
 8008b22:	9214      	str	r2, [sp, #80]	@ 0x50
 8008b24:	f8bd 21ac 	ldrh.w	r2, [sp, #428]	@ 0x1ac
 8008b28:	9629      	str	r6, [sp, #164]	@ 0xa4
 8008b2a:	005e      	lsls	r6, r3, #1
 8008b2c:	9224      	str	r2, [sp, #144]	@ 0x90
 8008b2e:	07cb      	lsls	r3, r1, #31
 8008b30:	f8bd 21b0 	ldrh.w	r2, [sp, #432]	@ 0x1b0
 8008b34:	f99d 81bc 	ldrsb.w	r8, [sp, #444]	@ 0x1bc
 8008b38:	9220      	str	r2, [sp, #128]	@ 0x80
 8008b3a:	f8bd 21b4 	ldrh.w	r2, [sp, #436]	@ 0x1b4
 8008b3e:	f99d 41c0 	ldrsb.w	r4, [sp, #448]	@ 0x1c0
 8008b42:	922b      	str	r2, [sp, #172]	@ 0xac
 8008b44:	f8bd 71d4 	ldrh.w	r7, [sp, #468]	@ 0x1d4
 8008b48:	9a6e      	ldr	r2, [sp, #440]	@ 0x1b8
 8008b4a:	9126      	str	r1, [sp, #152]	@ 0x98
 8008b4c:	9012      	str	r0, [sp, #72]	@ 0x48
 8008b4e:	f140 8429 	bpl.w	80093a4 <forward_lite_conv2d_sssa8_ch+0x8c4>
 8008b52:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 8008b54:	1c83      	adds	r3, r0, #2
 8008b56:	3102      	adds	r1, #2
 8008b58:	fb01 f303 	mul.w	r3, r1, r3
 8008b5c:	931d      	str	r3, [sp, #116]	@ 0x74
 8008b5e:	9b77      	ldr	r3, [sp, #476]	@ 0x1dc
 8008b60:	4650      	mov	r0, sl
 8008b62:	9966      	ldr	r1, [sp, #408]	@ 0x198
 8008b64:	9201      	str	r2, [sp, #4]
 8008b66:	ee19 2a10 	vmov	r2, s18
 8008b6a:	e9cd 8302 	strd	r8, r3, [sp, #8]
 8008b6e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8008b70:	9300      	str	r3, [sp, #0]
 8008b72:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8008b74:	f000 ff68 	bl	8009a48 <st_sssa8_ch_convolve_rank1upd>
 8008b78:	ee19 2a10 	vmov	r2, s18
 8008b7c:	9977      	ldr	r1, [sp, #476]	@ 0x1dc
 8008b7e:	18b3      	adds	r3, r6, r2
 8008b80:	9825      	ldr	r0, [sp, #148]	@ 0x94
 8008b82:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8008b86:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8008b88:	fb10 f303 	smulbb	r3, r0, r3
 8008b8c:	9119      	str	r1, [sp, #100]	@ 0x64
 8008b8e:	fb13 f30a 	smulbb	r3, r3, sl
 8008b92:	b29b      	uxth	r3, r3
 8008b94:	931c      	str	r3, [sp, #112]	@ 0x70
 8008b96:	ebc2 7342 	rsb	r3, r2, r2, lsl #29
 8008b9a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8008b9e:	ee0a 3a10 	vmov	s20, r3
 8008ba2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8008ba6:	9323      	str	r3, [sp, #140]	@ 0x8c
 8008ba8:	b1d2      	cbz	r2, 8008be0 <forward_lite_conv2d_sssa8_ch+0x100>
 8008baa:	1d19      	adds	r1, r3, #4
 8008bac:	f04f 0c01 	mov.w	ip, #1
 8008bb0:	eb05 0e06 	add.w	lr, r5, r6
 8008bb4:	f935 3b02 	ldrsh.w	r3, [r5], #2
 8008bb8:	1e5a      	subs	r2, r3, #1
 8008bba:	fa0c f003 	lsl.w	r0, ip, r3
 8008bbe:	fa04 f303 	lsl.w	r3, r4, r3
 8008bc2:	b292      	uxth	r2, r2
 8008bc4:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8008bc8:	2a14      	cmp	r2, #20
 8008bca:	f200 8184 	bhi.w	8008ed6 <forward_lite_conv2d_sssa8_ch+0x3f6>
 8008bce:	45ae      	cmp	lr, r5
 8008bd0:	f841 3c04 	str.w	r3, [r1, #-4]
 8008bd4:	f101 0104 	add.w	r1, r1, #4
 8008bd8:	d1ec      	bne.n	8008bb4 <forward_lite_conv2d_sssa8_ch+0xd4>
 8008bda:	9b77      	ldr	r3, [sp, #476]	@ 0x1dc
 8008bdc:	eb03 050b 	add.w	r5, r3, fp
 8008be0:	1bab      	subs	r3, r5, r6
 8008be2:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8008be4:	9e2a      	ldr	r6, [sp, #168]	@ 0xa8
 8008be6:	aa34      	add	r2, sp, #208	@ 0xd0
 8008be8:	9322      	str	r3, [sp, #136]	@ 0x88
 8008bea:	a94a      	add	r1, sp, #296	@ 0x128
 8008bec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008bee:	fb06 f504 	mul.w	r5, r6, r4
 8008bf2:	a840      	add	r0, sp, #256	@ 0x100
 8008bf4:	fb0a fb04 	mul.w	fp, sl, r4
 8008bf8:	9335      	str	r3, [sp, #212]	@ 0xd4
 8008bfa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008bfc:	943e      	str	r4, [sp, #248]	@ 0xf8
 8008bfe:	933a      	str	r3, [sp, #232]	@ 0xe8
 8008c00:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8008c02:	fb0a f405 	mul.w	r4, sl, r5
 8008c06:	f8cd 90d8 	str.w	r9, [sp, #216]	@ 0xd8
 8008c0a:	9339      	str	r3, [sp, #228]	@ 0xe4
 8008c0c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008c0e:	963d      	str	r6, [sp, #244]	@ 0xf4
 8008c10:	934c      	str	r3, [sp, #304]	@ 0x130
 8008c12:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008c14:	934d      	str	r3, [sp, #308]	@ 0x134
 8008c16:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008c18:	934e      	str	r3, [sp, #312]	@ 0x138
 8008c1a:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8008c1c:	934f      	str	r3, [sp, #316]	@ 0x13c
 8008c1e:	ab3c      	add	r3, sp, #240	@ 0xf0
 8008c20:	9300      	str	r3, [sp, #0]
 8008c22:	ab38      	add	r3, sp, #224	@ 0xe0
 8008c24:	f001 fd9e 	bl	800a764 <ai_padding_opt_init>
 8008c28:	ee19 3a10 	vmov	r3, s18
 8008c2c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008c2e:	fb03 f404 	mul.w	r4, r3, r4
 8008c32:	fb0b f306 	mul.w	r3, fp, r6
 8008c36:	f5b4 6f20 	cmp.w	r4, #2560	@ 0xa00
 8008c3a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008c3e:	bfa8      	it	ge
 8008c40:	f44f 6420 	movge.w	r4, #2560	@ 0xa00
 8008c44:	2f01      	cmp	r7, #1
 8008c46:	ee09 3a90 	vmov	s19, r3
 8008c4a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8008c4c:	f003 0202 	and.w	r2, r3, #2
 8008c50:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008c54:	9230      	str	r2, [sp, #192]	@ 0xc0
 8008c56:	931e      	str	r3, [sp, #120]	@ 0x78
 8008c58:	f000 838f 	beq.w	800937a <forward_lite_conv2d_sssa8_ch+0x89a>
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	932e      	str	r3, [sp, #184]	@ 0xb8
 8008c60:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	f240 824c 	bls.w	8009100 <forward_lite_conv2d_sssa8_ch+0x620>
 8008c68:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8008c6a:	ee19 2a10 	vmov	r2, s18
 8008c6e:	fbb4 f3f3 	udiv	r3, r4, r3
 8008c72:	b29b      	uxth	r3, r3
 8008c74:	4293      	cmp	r3, r2
 8008c76:	4619      	mov	r1, r3
 8008c78:	bf28      	it	cs
 8008c7a:	4611      	movcs	r1, r2
 8008c7c:	fbb2 f3f1 	udiv	r3, r2, r1
 8008c80:	fb01 2213 	mls	r2, r1, r3, r2
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	911f      	str	r1, [sp, #124]	@ 0x7c
 8008c88:	b292      	uxth	r2, r2
 8008c8a:	2a00      	cmp	r2, #0
 8008c8c:	f040 812b 	bne.w	8008ee6 <forward_lite_conv2d_sssa8_ch+0x406>
 8008c90:	1e5a      	subs	r2, r3, #1
 8008c92:	b292      	uxth	r2, r2
 8008c94:	922d      	str	r2, [sp, #180]	@ 0xb4
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	f000 8219 	beq.w	80090ce <forward_lite_conv2d_sssa8_ch+0x5ee>
 8008c9c:	fb0a f505 	mul.w	r5, sl, r5
 8008ca0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008ca2:	fa0f f688 	sxth.w	r6, r8
 8008ca6:	ed8d 9a2f 	vstr	s18, [sp, #188]	@ 0xbc
 8008caa:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8008cae:	ea4f 084a 	mov.w	r8, sl, lsl #1
 8008cb2:	ee0a 6a90 	vmov	s21, r6
 8008cb6:	9318      	str	r3, [sp, #96]	@ 0x60
 8008cb8:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8008cba:	f8cd 80b0 	str.w	r8, [sp, #176]	@ 0xb0
 8008cbe:	46d0      	mov	r8, sl
 8008cc0:	f1a3 0303 	sub.w	r3, r3, #3
 8008cc4:	fab3 f383 	clz	r3, r3
 8008cc8:	095b      	lsrs	r3, r3, #5
 8008cca:	9328      	str	r3, [sp, #160]	@ 0xa0
 8008ccc:	f00a 0303 	and.w	r3, sl, #3
 8008cd0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008cd2:	ea4f 034b 	mov.w	r3, fp, lsl #1
 8008cd6:	931a      	str	r3, [sp, #104]	@ 0x68
 8008cd8:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8008cda:	b953      	cbnz	r3, 8008cf2 <forward_lite_conv2d_sssa8_ch+0x212>
 8008cdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	f040 8206 	bne.w	80090f0 <forward_lite_conv2d_sssa8_ch+0x610>
 8008ce4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8008ce6:	ee19 1a90 	vmov	r1, s19
 8008cea:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008cec:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8008cee:	f001 fc7f 	bl	800a5f0 <st_int8_to16_dual_interleaved>
 8008cf2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8008cf4:	2b03      	cmp	r3, #3
 8008cf6:	f000 81ef 	beq.w	80090d8 <forward_lite_conv2d_sssa8_ch+0x5f8>
 8008cfa:	9b72      	ldr	r3, [sp, #456]	@ 0x1c8
 8008cfc:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008cfe:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	f000 80b3 	beq.w	8008e6c <forward_lite_conv2d_sssa8_ch+0x38c>
 8008d06:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8008d08:	2400      	movs	r4, #0
 8008d0a:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008d0c:	ee08 ba90 	vmov	s17, fp
 8008d10:	425b      	negs	r3, r3
 8008d12:	4626      	mov	r6, r4
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	9321      	str	r3, [sp, #132]	@ 0x84
 8008d18:	a840      	add	r0, sp, #256	@ 0x100
 8008d1a:	f001 fd7d 	bl	800a818 <ai_padding_opt_phase1>
 8008d1e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	f000 81ca 	beq.w	80090ba <forward_lite_conv2d_sssa8_ch+0x5da>
 8008d26:	b2a3      	uxth	r3, r4
 8008d28:	9327      	str	r3, [sp, #156]	@ 0x9c
 8008d2a:	e9dd 322a 	ldrd	r3, r2, [sp, #168]	@ 0xa8
 8008d2e:	1a9b      	subs	r3, r3, r2
 8008d30:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008d32:	fb06 3302 	mla	r3, r6, r2, r3
 8008d36:	f9bd 2084 	ldrsh.w	r2, [sp, #132]	@ 0x84
 8008d3a:	930d      	str	r3, [sp, #52]	@ 0x34
 8008d3c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008d3e:	425b      	negs	r3, r3
 8008d40:	b29b      	uxth	r3, r3
 8008d42:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d44:	2300      	movs	r3, #0
 8008d46:	930c      	str	r3, [sp, #48]	@ 0x30
 8008d48:	e9cd 3216 	strd	r3, r2, [sp, #88]	@ 0x58
 8008d4c:	9b40      	ldr	r3, [sp, #256]	@ 0x100
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	f000 80e6 	beq.w	8008f20 <forward_lite_conv2d_sssa8_ch+0x440>
 8008d54:	3b01      	subs	r3, #1
 8008d56:	9340      	str	r3, [sp, #256]	@ 0x100
 8008d58:	2301      	movs	r3, #1
 8008d5a:	f8ad 3126 	strh.w	r3, [sp, #294]	@ 0x126
 8008d5e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008d60:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008d62:	4293      	cmp	r3, r2
 8008d64:	f280 80ea 	bge.w	8008f3c <forward_lite_conv2d_sssa8_ch+0x45c>
 8008d68:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8008d6a:	46c3      	mov	fp, r8
 8008d6c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008d6e:	ee1a 7a90 	vmov	r7, s21
 8008d72:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8008d74:	f8dd a0b0 	ldr.w	sl, [sp, #176]	@ 0xb0
 8008d78:	fb01 3402 	mla	r4, r1, r2, r3
 8008d7c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008d7e:	1ae4      	subs	r4, r4, r3
 8008d80:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 8008d84:	9310      	str	r3, [sp, #64]	@ 0x40
 8008d86:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8008d8a:	930e      	str	r3, [sp, #56]	@ 0x38
 8008d8c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008d8e:	461a      	mov	r2, r3
 8008d90:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d94:	42a3      	cmp	r3, r4
 8008d96:	da25      	bge.n	8008de4 <forward_lite_conv2d_sssa8_ch+0x304>
 8008d98:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008d9a:	ea4f 78d1 	mov.w	r8, r1, lsr #31
 8008d9e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008da0:	4291      	cmp	r1, r2
 8008da2:	bfd8      	it	le
 8008da4:	f048 0801 	orrle.w	r8, r8, #1
 8008da8:	fb09 f202 	mul.w	r2, r9, r2
 8008dac:	9215      	str	r2, [sp, #84]	@ 0x54
 8008dae:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008db0:	2a00      	cmp	r2, #0
 8008db2:	f000 809c 	beq.w	8008eee <forward_lite_conv2d_sssa8_ch+0x40e>
 8008db6:	461e      	mov	r6, r3
 8008db8:	469e      	mov	lr, r3
 8008dba:	0ff3      	lsrs	r3, r6, #31
 8008dbc:	4629      	mov	r1, r5
 8008dbe:	465a      	mov	r2, fp
 8008dc0:	4638      	mov	r0, r7
 8008dc2:	45f1      	cmp	r9, lr
 8008dc4:	bfd8      	it	le
 8008dc6:	f043 0301 	orrle.w	r3, r3, #1
 8008dca:	b91b      	cbnz	r3, 8008dd4 <forward_lite_conv2d_sssa8_ch+0x2f4>
 8008dcc:	f1b8 0f00 	cmp.w	r8, #0
 8008dd0:	f000 8144 	beq.w	800905c <forward_lite_conv2d_sssa8_ch+0x57c>
 8008dd4:	f002 fb62 	bl	800b49c <arm_fill_q15>
 8008dd8:	3601      	adds	r6, #1
 8008dda:	4455      	add	r5, sl
 8008ddc:	b236      	sxth	r6, r6
 8008dde:	42a6      	cmp	r6, r4
 8008de0:	46b6      	mov	lr, r6
 8008de2:	dbea      	blt.n	8008dba <forward_lite_conv2d_sssa8_ch+0x2da>
 8008de4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008de6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008de8:	3201      	adds	r2, #1
 8008dea:	b213      	sxth	r3, r2
 8008dec:	428b      	cmp	r3, r1
 8008dee:	461a      	mov	r2, r3
 8008df0:	930a      	str	r3, [sp, #40]	@ 0x28
 8008df2:	dbce      	blt.n	8008d92 <forward_lite_conv2d_sssa8_ch+0x2b2>
 8008df4:	46d8      	mov	r8, fp
 8008df6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8008df8:	42ab      	cmp	r3, r5
 8008dfa:	f000 80a6 	beq.w	8008f4a <forward_lite_conv2d_sssa8_ch+0x46a>
 8008dfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e00:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8008e02:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8008e04:	440b      	add	r3, r1
 8008e06:	3201      	adds	r2, #1
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	b212      	sxth	r2, r2
 8008e0c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008e0e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008e10:	920c      	str	r2, [sp, #48]	@ 0x30
 8008e12:	429a      	cmp	r2, r3
 8008e14:	9216      	str	r2, [sp, #88]	@ 0x58
 8008e16:	db99      	blt.n	8008d4c <forward_lite_conv2d_sssa8_ch+0x26c>
 8008e18:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008e1a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008e1c:	9c27      	ldr	r4, [sp, #156]	@ 0x9c
 8008e1e:	4413      	add	r3, r2
 8008e20:	3401      	adds	r4, #1
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	b224      	sxth	r4, r4
 8008e26:	9321      	str	r3, [sp, #132]	@ 0x84
 8008e28:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8008e2a:	4626      	mov	r6, r4
 8008e2c:	429c      	cmp	r4, r3
 8008e2e:	f6ff af73 	blt.w	8008d18 <forward_lite_conv2d_sssa8_ch+0x238>
 8008e32:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8008e34:	ee18 ba90 	vmov	fp, s17
 8008e38:	42a9      	cmp	r1, r5
 8008e3a:	d017      	beq.n	8008e6c <forward_lite_conv2d_sssa8_ch+0x38c>
 8008e3c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8008e3e:	ee1a 2a10 	vmov	r2, s20
 8008e42:	ee19 0a90 	vmov	r0, s19
 8008e46:	9307      	str	r3, [sp, #28]
 8008e48:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8008e4a:	9306      	str	r3, [sp, #24]
 8008e4c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008e4e:	9305      	str	r3, [sp, #20]
 8008e50:	9b77      	ldr	r3, [sp, #476]	@ 0x1dc
 8008e52:	9304      	str	r3, [sp, #16]
 8008e54:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008e56:	9303      	str	r3, [sp, #12]
 8008e58:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8008e5a:	9302      	str	r3, [sp, #8]
 8008e5c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8008e5e:	9301      	str	r3, [sp, #4]
 8008e60:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008e62:	9300      	str	r3, [sp, #0]
 8008e64:	ee19 3a10 	vmov	r3, s18
 8008e68:	f002 f8da 	bl	800b020 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 8008e6c:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8008e6e:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8008e70:	1a9b      	subs	r3, r3, r2
 8008e72:	b299      	uxth	r1, r3
 8008e74:	4613      	mov	r3, r2
 8008e76:	428a      	cmp	r2, r1
 8008e78:	912f      	str	r1, [sp, #188]	@ 0xbc
 8008e7a:	bf28      	it	cs
 8008e7c:	460b      	movcs	r3, r1
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	f000 811e 	beq.w	80090c0 <forward_lite_conv2d_sssa8_ch+0x5e0>
 8008e84:	9966      	ldr	r1, [sp, #408]	@ 0x198
 8008e86:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8008e88:	fb00 1102 	mla	r1, r0, r2, r1
 8008e8c:	9166      	str	r1, [sp, #408]	@ 0x198
 8008e8e:	ee1a 1a10 	vmov	r1, s20
 8008e92:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008e96:	ee0a 1a10 	vmov	s20, r1
 8008e9a:	9922      	ldr	r1, [sp, #136]	@ 0x88
 8008e9c:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8008ea0:	9122      	str	r1, [sp, #136]	@ 0x88
 8008ea2:	9977      	ldr	r1, [sp, #476]	@ 0x1dc
 8008ea4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008ea8:	9177      	str	r1, [sp, #476]	@ 0x1dc
 8008eaa:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8008eac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008eb0:	9123      	str	r1, [sp, #140]	@ 0x8c
 8008eb2:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 8008eb4:	2900      	cmp	r1, #0
 8008eb6:	f000 8115 	beq.w	80090e4 <forward_lite_conv2d_sssa8_ch+0x604>
 8008eba:	9972      	ldr	r1, [sp, #456]	@ 0x1c8
 8008ebc:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8008ebe:	931f      	str	r3, [sp, #124]	@ 0x7c
 8008ec0:	fb00 1202 	mla	r2, r0, r2, r1
 8008ec4:	9272      	str	r2, [sp, #456]	@ 0x1c8
 8008ec6:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8008ec8:	1e53      	subs	r3, r2, #1
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	2a00      	cmp	r2, #0
 8008ece:	f000 80fe 	beq.w	80090ce <forward_lite_conv2d_sssa8_ch+0x5ee>
 8008ed2:	932d      	str	r3, [sp, #180]	@ 0xb4
 8008ed4:	e700      	b.n	8008cd8 <forward_lite_conv2d_sssa8_ch+0x1f8>
 8008ed6:	45ae      	cmp	lr, r5
 8008ed8:	f841 4c04 	str.w	r4, [r1, #-4]
 8008edc:	f101 0104 	add.w	r1, r1, #4
 8008ee0:	f47f ae68 	bne.w	8008bb4 <forward_lite_conv2d_sssa8_ch+0xd4>
 8008ee4:	e679      	b.n	8008bda <forward_lite_conv2d_sssa8_ch+0xfa>
 8008ee6:	1c5a      	adds	r2, r3, #1
 8008ee8:	932d      	str	r3, [sp, #180]	@ 0xb4
 8008eea:	b293      	uxth	r3, r2
 8008eec:	e6d3      	b.n	8008c96 <forward_lite_conv2d_sssa8_ch+0x1b6>
 8008eee:	469c      	mov	ip, r3
 8008ef0:	461e      	mov	r6, r3
 8008ef2:	45e1      	cmp	r9, ip
 8008ef4:	465a      	mov	r2, fp
 8008ef6:	4629      	mov	r1, r5
 8008ef8:	4638      	mov	r0, r7
 8008efa:	bfcc      	ite	gt
 8008efc:	2300      	movgt	r3, #0
 8008efe:	2301      	movle	r3, #1
 8008f00:	ea53 73d6 	orrs.w	r3, r3, r6, lsr #31
 8008f04:	d103      	bne.n	8008f0e <forward_lite_conv2d_sssa8_ch+0x42e>
 8008f06:	f1b8 0f00 	cmp.w	r8, #0
 8008f0a:	f000 809e 	beq.w	800904a <forward_lite_conv2d_sssa8_ch+0x56a>
 8008f0e:	f002 fac5 	bl	800b49c <arm_fill_q15>
 8008f12:	3601      	adds	r6, #1
 8008f14:	4455      	add	r5, sl
 8008f16:	b236      	sxth	r6, r6
 8008f18:	42a6      	cmp	r6, r4
 8008f1a:	46b4      	mov	ip, r6
 8008f1c:	dbe9      	blt.n	8008ef2 <forward_lite_conv2d_sssa8_ch+0x412>
 8008f1e:	e761      	b.n	8008de4 <forward_lite_conv2d_sssa8_ch+0x304>
 8008f20:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d13d      	bne.n	8008fa2 <forward_lite_conv2d_sssa8_ch+0x4c2>
 8008f26:	9b42      	ldr	r3, [sp, #264]	@ 0x108
 8008f28:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008f2a:	3b01      	subs	r3, #1
 8008f2c:	9342      	str	r3, [sp, #264]	@ 0x108
 8008f2e:	2301      	movs	r3, #1
 8008f30:	f8ad 3126 	strh.w	r3, [sp, #294]	@ 0x126
 8008f34:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008f36:	4293      	cmp	r3, r2
 8008f38:	f6ff af16 	blt.w	8008d68 <forward_lite_conv2d_sssa8_ch+0x288>
 8008f3c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 8008f40:	9310      	str	r3, [sp, #64]	@ 0x40
 8008f42:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8008f44:	42ab      	cmp	r3, r5
 8008f46:	f47f af5a 	bne.w	8008dfe <forward_lite_conv2d_sssa8_ch+0x31e>
 8008f4a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	f040 808e 	bne.w	800906e <forward_lite_conv2d_sssa8_ch+0x58e>
 8008f52:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	f000 808a 	beq.w	800906e <forward_lite_conv2d_sssa8_ch+0x58e>
 8008f5a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8008f5c:	ee1a 2a10 	vmov	r2, s20
 8008f60:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8008f62:	ee19 0a90 	vmov	r0, s19
 8008f66:	9308      	str	r3, [sp, #32]
 8008f68:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8008f6a:	9307      	str	r3, [sp, #28]
 8008f6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008f6e:	9306      	str	r3, [sp, #24]
 8008f70:	9b77      	ldr	r3, [sp, #476]	@ 0x1dc
 8008f72:	9305      	str	r3, [sp, #20]
 8008f74:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008f76:	9304      	str	r3, [sp, #16]
 8008f78:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8008f7a:	9303      	str	r3, [sp, #12]
 8008f7c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8008f7e:	9302      	str	r3, [sp, #8]
 8008f80:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008f82:	9300      	str	r3, [sp, #0]
 8008f84:	2302      	movs	r3, #2
 8008f86:	9301      	str	r3, [sp, #4]
 8008f88:	ee19 3a10 	vmov	r3, s18
 8008f8c:	f001 fc5e 	bl	800a84c <st_sssa8_ch_nn_mat_mult_kernel_opt>
 8008f90:	901b      	str	r0, [sp, #108]	@ 0x6c
 8008f92:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008f94:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008f96:	3b01      	subs	r3, #1
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	f000 8089 	beq.w	80090b0 <forward_lite_conv2d_sssa8_ch+0x5d0>
 8008f9e:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008fa0:	e72d      	b.n	8008dfe <forward_lite_conv2d_sssa8_ch+0x31e>
 8008fa2:	3b01      	subs	r3, #1
 8008fa4:	9341      	str	r3, [sp, #260]	@ 0x104
 8008fa6:	f8bd 3124 	ldrh.w	r3, [sp, #292]	@ 0x124
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	f8ad 3126 	strh.w	r3, [sp, #294]	@ 0x126
 8008fb0:	f43f aed5 	beq.w	8008d5e <forward_lite_conv2d_sssa8_ch+0x27e>
 8008fb4:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 8008fb8:	f9bd 402c 	ldrsh.w	r4, [sp, #44]	@ 0x2c
 8008fbc:	9310      	str	r3, [sp, #64]	@ 0x40
 8008fbe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008fc0:	bb0b      	cbnz	r3, 8009006 <forward_lite_conv2d_sssa8_ch+0x526>
 8008fc2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008fc4:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008fc6:	428b      	cmp	r3, r1
 8008fc8:	f6bf af15 	bge.w	8008df6 <forward_lite_conv2d_sssa8_ch+0x316>
 8008fcc:	46ab      	mov	fp, r5
 8008fce:	464f      	mov	r7, r9
 8008fd0:	4625      	mov	r5, r4
 8008fd2:	461e      	mov	r6, r3
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	ee18 2a90 	vmov	r2, s17
 8008fda:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8008fdc:	4689      	mov	r9, r1
 8008fde:	f8dd a044 	ldr.w	sl, [sp, #68]	@ 0x44
 8008fe2:	3601      	adds	r6, #1
 8008fe4:	fb00 5007 	mla	r0, r0, r7, r5
 8008fe8:	4659      	mov	r1, fp
 8008fea:	920a      	str	r2, [sp, #40]	@ 0x28
 8008fec:	b236      	sxth	r6, r6
 8008fee:	fb08 a000 	mla	r0, r8, r0, sl
 8008ff2:	f001 f9cf 	bl	800a394 <st_int8_to16_no_shift_interleaved>
 8008ff6:	44a3      	add	fp, r4
 8008ff8:	454e      	cmp	r6, r9
 8008ffa:	4630      	mov	r0, r6
 8008ffc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008ffe:	dbf0      	blt.n	8008fe2 <forward_lite_conv2d_sssa8_ch+0x502>
 8009000:	465d      	mov	r5, fp
 8009002:	46b9      	mov	r9, r7
 8009004:	e6f7      	b.n	8008df6 <forward_lite_conv2d_sssa8_ch+0x316>
 8009006:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009008:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800900a:	428b      	cmp	r3, r1
 800900c:	f6bf aef3 	bge.w	8008df6 <forward_lite_conv2d_sssa8_ch+0x316>
 8009010:	46ab      	mov	fp, r5
 8009012:	464f      	mov	r7, r9
 8009014:	4625      	mov	r5, r4
 8009016:	461e      	mov	r6, r3
 8009018:	4618      	mov	r0, r3
 800901a:	ee18 2a90 	vmov	r2, s17
 800901e:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8009020:	4689      	mov	r9, r1
 8009022:	f8dd a044 	ldr.w	sl, [sp, #68]	@ 0x44
 8009026:	3601      	adds	r6, #1
 8009028:	fb00 5007 	mla	r0, r0, r7, r5
 800902c:	4659      	mov	r1, fp
 800902e:	920a      	str	r2, [sp, #40]	@ 0x28
 8009030:	b236      	sxth	r6, r6
 8009032:	fb08 a000 	mla	r0, r8, r0, sl
 8009036:	f001 f94b 	bl	800a2d0 <st_int8_to16_no_shift>
 800903a:	44a3      	add	fp, r4
 800903c:	454e      	cmp	r6, r9
 800903e:	4630      	mov	r0, r6
 8009040:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009042:	dbf0      	blt.n	8009026 <forward_lite_conv2d_sssa8_ch+0x546>
 8009044:	465d      	mov	r5, fp
 8009046:	46b9      	mov	r9, r7
 8009048:	e6d5      	b.n	8008df6 <forward_lite_conv2d_sssa8_ch+0x316>
 800904a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800904c:	eb03 000c 	add.w	r0, r3, ip
 8009050:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009052:	fb0b 3000 	mla	r0, fp, r0, r3
 8009056:	f001 f99d 	bl	800a394 <st_int8_to16_no_shift_interleaved>
 800905a:	e75a      	b.n	8008f12 <forward_lite_conv2d_sssa8_ch+0x432>
 800905c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800905e:	eb03 000e 	add.w	r0, r3, lr
 8009062:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009064:	fb0b 3000 	mla	r0, fp, r0, r3
 8009068:	f001 f932 	bl	800a2d0 <st_int8_to16_no_shift>
 800906c:	e6b4      	b.n	8008dd8 <forward_lite_conv2d_sssa8_ch+0x2f8>
 800906e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8009070:	ee1a 2a10 	vmov	r2, s20
 8009074:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8009076:	ee19 0a90 	vmov	r0, s19
 800907a:	9308      	str	r3, [sp, #32]
 800907c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800907e:	9307      	str	r3, [sp, #28]
 8009080:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009082:	9306      	str	r3, [sp, #24]
 8009084:	9b77      	ldr	r3, [sp, #476]	@ 0x1dc
 8009086:	9305      	str	r3, [sp, #20]
 8009088:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800908a:	9304      	str	r3, [sp, #16]
 800908c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800908e:	9303      	str	r3, [sp, #12]
 8009090:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8009092:	9302      	str	r3, [sp, #8]
 8009094:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009096:	9300      	str	r3, [sp, #0]
 8009098:	2300      	movs	r3, #0
 800909a:	9301      	str	r3, [sp, #4]
 800909c:	ee19 3a10 	vmov	r3, s18
 80090a0:	f001 fbd4 	bl	800a84c <st_sssa8_ch_nn_mat_mult_kernel_opt>
 80090a4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80090a6:	901b      	str	r0, [sp, #108]	@ 0x6c
 80090a8:	2b03      	cmp	r3, #3
 80090aa:	f47f af78 	bne.w	8008f9e <forward_lite_conv2d_sssa8_ch+0x4be>
 80090ae:	e770      	b.n	8008f92 <forward_lite_conv2d_sssa8_ch+0x4b2>
 80090b0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80090b2:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80090b4:	3302      	adds	r3, #2
 80090b6:	931b      	str	r3, [sp, #108]	@ 0x6c
 80090b8:	e6a1      	b.n	8008dfe <forward_lite_conv2d_sssa8_ch+0x31e>
 80090ba:	b2a3      	uxth	r3, r4
 80090bc:	9327      	str	r3, [sp, #156]	@ 0x9c
 80090be:	e6ab      	b.n	8008e18 <forward_lite_conv2d_sssa8_ch+0x338>
 80090c0:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 80090c2:	931f      	str	r3, [sp, #124]	@ 0x7c
 80090c4:	1e53      	subs	r3, r2, #1
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	2a00      	cmp	r2, #0
 80090ca:	f47f af02 	bne.w	8008ed2 <forward_lite_conv2d_sssa8_ch+0x3f2>
 80090ce:	b055      	add	sp, #340	@ 0x154
 80090d0:	ecbd 8b08 	vpop	{d8-d11}
 80090d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090d8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80090da:	9a72      	ldr	r2, [sp, #456]	@ 0x1c8
 80090dc:	3303      	adds	r3, #3
 80090de:	18d3      	adds	r3, r2, r3
 80090e0:	931b      	str	r3, [sp, #108]	@ 0x6c
 80090e2:	e60c      	b.n	8008cfe <forward_lite_conv2d_sssa8_ch+0x21e>
 80090e4:	4611      	mov	r1, r2
 80090e6:	9a72      	ldr	r2, [sp, #456]	@ 0x1c8
 80090e8:	931f      	str	r3, [sp, #124]	@ 0x7c
 80090ea:	440a      	add	r2, r1
 80090ec:	9272      	str	r2, [sp, #456]	@ 0x1c8
 80090ee:	e6ea      	b.n	8008ec6 <forward_lite_conv2d_sssa8_ch+0x3e6>
 80090f0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80090f2:	ee19 1a90 	vmov	r1, s19
 80090f6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80090f8:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80090fa:	f001 f98f 	bl	800a41c <st_int8_to16_dual>
 80090fe:	e5f8      	b.n	8008cf2 <forward_lite_conv2d_sssa8_ch+0x212>
 8009100:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009102:	ee19 1a10 	vmov	r1, s18
 8009106:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8009108:	fb02 f303 	mul.w	r3, r2, r3
 800910c:	9a72      	ldr	r2, [sp, #456]	@ 0x1c8
 800910e:	fb01 2303 	mla	r3, r1, r3, r2
 8009112:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009114:	429a      	cmp	r2, r3
 8009116:	f4bf ada7 	bcs.w	8008c68 <forward_lite_conv2d_sssa8_ch+0x188>
 800911a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800911c:	fb03 f309 	mul.w	r3, r3, r9
 8009120:	fb0a 2303 	mla	r3, sl, r3, r2
 8009124:	9a72      	ldr	r2, [sp, #456]	@ 0x1c8
 8009126:	429a      	cmp	r2, r3
 8009128:	f4bf ad9e 	bcs.w	8008c68 <forward_lite_conv2d_sssa8_ch+0x188>
 800912c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800912e:	fbb4 f3f3 	udiv	r3, r4, r3
 8009132:	b29b      	uxth	r3, r3
 8009134:	4619      	mov	r1, r3
 8009136:	ee19 3a10 	vmov	r3, s18
 800913a:	4299      	cmp	r1, r3
 800913c:	bf28      	it	cs
 800913e:	4619      	movcs	r1, r3
 8009140:	fbb3 f2f1 	udiv	r2, r3, r1
 8009144:	fb01 3312 	mls	r3, r1, r2, r3
 8009148:	b292      	uxth	r2, r2
 800914a:	9131      	str	r1, [sp, #196]	@ 0xc4
 800914c:	b29b      	uxth	r3, r3
 800914e:	922f      	str	r2, [sp, #188]	@ 0xbc
 8009150:	b11b      	cbz	r3, 800915a <forward_lite_conv2d_sssa8_ch+0x67a>
 8009152:	4613      	mov	r3, r2
 8009154:	3301      	adds	r3, #1
 8009156:	b29b      	uxth	r3, r3
 8009158:	932f      	str	r3, [sp, #188]	@ 0xbc
 800915a:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800915c:	2b00      	cmp	r3, #0
 800915e:	d0b6      	beq.n	80090ce <forward_lite_conv2d_sssa8_ch+0x5ee>
 8009160:	fb0a f505 	mul.w	r5, sl, r5
 8009164:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009166:	fa0f f788 	sxth.w	r7, r8
 800916a:	2400      	movs	r4, #0
 800916c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8009170:	ea4f 084a 	mov.w	r8, sl, lsl #1
 8009174:	4625      	mov	r5, r4
 8009176:	9316      	str	r3, [sp, #88]	@ 0x58
 8009178:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 800917a:	f8cd 80b0 	str.w	r8, [sp, #176]	@ 0xb0
 800917e:	46d0      	mov	r8, sl
 8009180:	3b01      	subs	r3, #1
 8009182:	b29b      	uxth	r3, r3
 8009184:	9333      	str	r3, [sp, #204]	@ 0xcc
 8009186:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8009188:	425b      	negs	r3, r3
 800918a:	b29b      	uxth	r3, r3
 800918c:	9330      	str	r3, [sp, #192]	@ 0xc0
 800918e:	f00a 0303 	and.w	r3, sl, #3
 8009192:	930d      	str	r3, [sp, #52]	@ 0x34
 8009194:	ea4f 034b 	mov.w	r3, fp, lsl #1
 8009198:	9317      	str	r3, [sp, #92]	@ 0x5c
 800919a:	a840      	add	r0, sp, #256	@ 0x100
 800919c:	f001 fb3c 	bl	800a818 <ai_padding_opt_phase1>
 80091a0:	ee19 3a10 	vmov	r3, s18
 80091a4:	9a72      	ldr	r2, [sp, #456]	@ 0x1c8
 80091a6:	fb05 f303 	mul.w	r3, r5, r3
 80091aa:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80091ac:	fb01 2303 	mla	r3, r1, r3, r2
 80091b0:	931b      	str	r3, [sp, #108]	@ 0x6c
 80091b2:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80091b4:	b953      	cbnz	r3, 80091cc <forward_lite_conv2d_sssa8_ch+0x6ec>
 80091b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	f040 81ea 	bne.w	8009592 <forward_lite_conv2d_sssa8_ch+0xab2>
 80091be:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 80091c0:	ee19 1a90 	vmov	r1, s19
 80091c4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80091c6:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80091c8:	f001 fa12 	bl	800a5f0 <st_int8_to16_dual_interleaved>
 80091cc:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	f000 81ea 	beq.w	80095a8 <forward_lite_conv2d_sssa8_ch+0xac8>
 80091d4:	b2a3      	uxth	r3, r4
 80091d6:	eef0 aa4a 	vmov.f32	s21, s20
 80091da:	ee08 ba90 	vmov	s17, fp
 80091de:	ee0b 7a10 	vmov	s22, r7
 80091e2:	9332      	str	r3, [sp, #200]	@ 0xc8
 80091e4:	ed8d 9a28 	vstr	s18, [sp, #160]	@ 0xa0
 80091e8:	e9dd 322a 	ldrd	r3, r2, [sp, #168]	@ 0xa8
 80091ec:	1a9b      	subs	r3, r3, r2
 80091ee:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80091f0:	fb05 3302 	mla	r3, r5, r2, r3
 80091f4:	930c      	str	r3, [sp, #48]	@ 0x30
 80091f6:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	@ 0xc0
 80091fa:	9315      	str	r3, [sp, #84]	@ 0x54
 80091fc:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 80091fe:	9327      	str	r3, [sp, #156]	@ 0x9c
 8009200:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8009202:	931a      	str	r3, [sp, #104]	@ 0x68
 8009204:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8009206:	932d      	str	r3, [sp, #180]	@ 0xb4
 8009208:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800920a:	931f      	str	r3, [sp, #124]	@ 0x7c
 800920c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800920e:	9326      	str	r3, [sp, #152]	@ 0x98
 8009210:	9b77      	ldr	r3, [sp, #476]	@ 0x1dc
 8009212:	9321      	str	r3, [sp, #132]	@ 0x84
 8009214:	9a44      	ldr	r2, [sp, #272]	@ 0x110
 8009216:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8009218:	9241      	str	r2, [sp, #260]	@ 0x104
 800921a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800921c:	9340      	str	r3, [sp, #256]	@ 0x100
 800921e:	9242      	str	r2, [sp, #264]	@ 0x108
 8009220:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009222:	2a00      	cmp	r2, #0
 8009224:	f000 815e 	beq.w	80094e4 <forward_lite_conv2d_sssa8_ch+0xa04>
 8009228:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800922a:	2100      	movs	r1, #0
 800922c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800922e:	4252      	negs	r2, r2
 8009230:	b292      	uxth	r2, r2
 8009232:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009234:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009236:	9218      	str	r2, [sp, #96]	@ 0x60
 8009238:	460a      	mov	r2, r1
 800923a:	2b00      	cmp	r3, #0
 800923c:	d060      	beq.n	8009300 <forward_lite_conv2d_sssa8_ch+0x820>
 800923e:	3b01      	subs	r3, #1
 8009240:	9340      	str	r3, [sp, #256]	@ 0x100
 8009242:	2301      	movs	r3, #1
 8009244:	f8ad 3126 	strh.w	r3, [sp, #294]	@ 0x126
 8009248:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800924a:	9815      	ldr	r0, [sp, #84]	@ 0x54
 800924c:	4283      	cmp	r3, r0
 800924e:	dd64      	ble.n	800931a <forward_lite_conv2d_sssa8_ch+0x83a>
 8009250:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8009252:	46c3      	mov	fp, r8
 8009254:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8009256:	ee1b 7a10 	vmov	r7, s22
 800925a:	f8dd a0b0 	ldr.w	sl, [sp, #176]	@ 0xb0
 800925e:	fb02 3200 	mla	r2, r2, r0, r3
 8009262:	b28b      	uxth	r3, r1
 8009264:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009266:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009268:	1ad5      	subs	r5, r2, r3
 800926a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 800926e:	930e      	str	r3, [sp, #56]	@ 0x38
 8009270:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009272:	461a      	mov	r2, r3
 8009274:	930a      	str	r3, [sp, #40]	@ 0x28
 8009276:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009278:	429d      	cmp	r5, r3
 800927a:	dd25      	ble.n	80092c8 <forward_lite_conv2d_sssa8_ch+0x7e8>
 800927c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800927e:	ea4f 78d1 	mov.w	r8, r1, lsr #31
 8009282:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009284:	4291      	cmp	r1, r2
 8009286:	bfd8      	it	le
 8009288:	f048 0801 	orrle.w	r8, r8, #1
 800928c:	fb02 f209 	mul.w	r2, r2, r9
 8009290:	9210      	str	r2, [sp, #64]	@ 0x40
 8009292:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009294:	2a00      	cmp	r2, #0
 8009296:	f000 808c 	beq.w	80093b2 <forward_lite_conv2d_sssa8_ch+0x8d2>
 800929a:	461e      	mov	r6, r3
 800929c:	469e      	mov	lr, r3
 800929e:	0ff3      	lsrs	r3, r6, #31
 80092a0:	4621      	mov	r1, r4
 80092a2:	465a      	mov	r2, fp
 80092a4:	4638      	mov	r0, r7
 80092a6:	45f1      	cmp	r9, lr
 80092a8:	bfd8      	it	le
 80092aa:	f043 0301 	orrle.w	r3, r3, #1
 80092ae:	b91b      	cbnz	r3, 80092b8 <forward_lite_conv2d_sssa8_ch+0x7d8>
 80092b0:	f1b8 0f00 	cmp.w	r8, #0
 80092b4:	f000 80e8 	beq.w	8009488 <forward_lite_conv2d_sssa8_ch+0x9a8>
 80092b8:	f002 f8f0 	bl	800b49c <arm_fill_q15>
 80092bc:	3601      	adds	r6, #1
 80092be:	4454      	add	r4, sl
 80092c0:	b236      	sxth	r6, r6
 80092c2:	42b5      	cmp	r5, r6
 80092c4:	46b6      	mov	lr, r6
 80092c6:	dcea      	bgt.n	800929e <forward_lite_conv2d_sssa8_ch+0x7be>
 80092c8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80092ca:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80092cc:	3201      	adds	r2, #1
 80092ce:	b213      	sxth	r3, r2
 80092d0:	428b      	cmp	r3, r1
 80092d2:	461a      	mov	r2, r3
 80092d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80092d6:	dbce      	blt.n	8009276 <forward_lite_conv2d_sssa8_ch+0x796>
 80092d8:	46d8      	mov	r8, fp
 80092da:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80092dc:	42a3      	cmp	r3, r4
 80092de:	d021      	beq.n	8009324 <forward_lite_conv2d_sssa8_ch+0x844>
 80092e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092e2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80092e4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80092e6:	4413      	add	r3, r2
 80092e8:	3101      	adds	r1, #1
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	b209      	sxth	r1, r1
 80092ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 80092f0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80092f2:	460a      	mov	r2, r1
 80092f4:	4299      	cmp	r1, r3
 80092f6:	f280 80d9 	bge.w	80094ac <forward_lite_conv2d_sssa8_ch+0x9cc>
 80092fa:	9b40      	ldr	r3, [sp, #256]	@ 0x100
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d19e      	bne.n	800923e <forward_lite_conv2d_sssa8_ch+0x75e>
 8009300:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009302:	2b00      	cmp	r3, #0
 8009304:	d16d      	bne.n	80093e2 <forward_lite_conv2d_sssa8_ch+0x902>
 8009306:	9b42      	ldr	r3, [sp, #264]	@ 0x108
 8009308:	9815      	ldr	r0, [sp, #84]	@ 0x54
 800930a:	3b01      	subs	r3, #1
 800930c:	9342      	str	r3, [sp, #264]	@ 0x108
 800930e:	2301      	movs	r3, #1
 8009310:	f8ad 3126 	strh.w	r3, [sp, #294]	@ 0x126
 8009314:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009316:	4283      	cmp	r3, r0
 8009318:	dc9a      	bgt.n	8009250 <forward_lite_conv2d_sssa8_ch+0x770>
 800931a:	b28b      	uxth	r3, r1
 800931c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800931e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009320:	42a3      	cmp	r3, r4
 8009322:	d1dd      	bne.n	80092e0 <forward_lite_conv2d_sssa8_ch+0x800>
 8009324:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8009326:	ee1a 2a90 	vmov	r2, s21
 800932a:	9919      	ldr	r1, [sp, #100]	@ 0x64
 800932c:	ee19 0a90 	vmov	r0, s19
 8009330:	9308      	str	r3, [sp, #32]
 8009332:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8009334:	9307      	str	r3, [sp, #28]
 8009336:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8009338:	9306      	str	r3, [sp, #24]
 800933a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800933c:	9305      	str	r3, [sp, #20]
 800933e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8009340:	9304      	str	r3, [sp, #16]
 8009342:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8009344:	9303      	str	r3, [sp, #12]
 8009346:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8009348:	9302      	str	r3, [sp, #8]
 800934a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800934c:	9300      	str	r3, [sp, #0]
 800934e:	2300      	movs	r3, #0
 8009350:	9301      	str	r3, [sp, #4]
 8009352:	ee19 3a10 	vmov	r3, s18
 8009356:	f001 fa79 	bl	800a84c <st_sssa8_ch_nn_mat_mult_kernel_opt>
 800935a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800935c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800935e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009360:	4413      	add	r3, r2
 8009362:	9018      	str	r0, [sp, #96]	@ 0x60
 8009364:	3101      	adds	r1, #1
 8009366:	b29b      	uxth	r3, r3
 8009368:	b209      	sxth	r1, r1
 800936a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800936c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800936e:	460a      	mov	r2, r1
 8009370:	428b      	cmp	r3, r1
 8009372:	f340 80b7 	ble.w	80094e4 <forward_lite_conv2d_sssa8_ch+0xa04>
 8009376:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009378:	e7bf      	b.n	80092fa <forward_lite_conv2d_sssa8_ch+0x81a>
 800937a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800937c:	ee19 1a10 	vmov	r1, s18
 8009380:	fb01 f302 	mul.w	r3, r1, r2
 8009384:	42a3      	cmp	r3, r4
 8009386:	f73f ac69 	bgt.w	8008c5c <forward_lite_conv2d_sssa8_ch+0x17c>
 800938a:	f01a 0f03 	tst.w	sl, #3
 800938e:	972e      	str	r7, [sp, #184]	@ 0xb8
 8009390:	f040 810d 	bne.w	80095ae <forward_lite_conv2d_sssa8_ch+0xace>
 8009394:	ee19 3a10 	vmov	r3, s18
 8009398:	ee19 1a90 	vmov	r1, s19
 800939c:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800939e:	f001 f927 	bl	800a5f0 <st_int8_to16_dual_interleaved>
 80093a2:	e45d      	b.n	8008c60 <forward_lite_conv2d_sssa8_ch+0x180>
 80093a4:	4603      	mov	r3, r0
 80093a6:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 80093a8:	fb01 f303 	mul.w	r3, r1, r3
 80093ac:	931d      	str	r3, [sp, #116]	@ 0x74
 80093ae:	f7ff bbd6 	b.w	8008b5e <forward_lite_conv2d_sssa8_ch+0x7e>
 80093b2:	469c      	mov	ip, r3
 80093b4:	461e      	mov	r6, r3
 80093b6:	45e1      	cmp	r9, ip
 80093b8:	465a      	mov	r2, fp
 80093ba:	4621      	mov	r1, r4
 80093bc:	4638      	mov	r0, r7
 80093be:	bfcc      	ite	gt
 80093c0:	2300      	movgt	r3, #0
 80093c2:	2301      	movle	r3, #1
 80093c4:	ea53 73d6 	orrs.w	r3, r3, r6, lsr #31
 80093c8:	d102      	bne.n	80093d0 <forward_lite_conv2d_sssa8_ch+0x8f0>
 80093ca:	f1b8 0f00 	cmp.w	r8, #0
 80093ce:	d064      	beq.n	800949a <forward_lite_conv2d_sssa8_ch+0x9ba>
 80093d0:	f002 f864 	bl	800b49c <arm_fill_q15>
 80093d4:	3601      	adds	r6, #1
 80093d6:	4454      	add	r4, sl
 80093d8:	b236      	sxth	r6, r6
 80093da:	42ae      	cmp	r6, r5
 80093dc:	46b4      	mov	ip, r6
 80093de:	dbea      	blt.n	80093b6 <forward_lite_conv2d_sssa8_ch+0x8d6>
 80093e0:	e772      	b.n	80092c8 <forward_lite_conv2d_sssa8_ch+0x7e8>
 80093e2:	3b01      	subs	r3, #1
 80093e4:	9341      	str	r3, [sp, #260]	@ 0x104
 80093e6:	f8bd 3124 	ldrh.w	r3, [sp, #292]	@ 0x124
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	f8ad 3126 	strh.w	r3, [sp, #294]	@ 0x126
 80093f0:	f43f af2a 	beq.w	8009248 <forward_lite_conv2d_sssa8_ch+0x768>
 80093f4:	b28b      	uxth	r3, r1
 80093f6:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	@ 0x2c
 80093fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80093fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80093fe:	bb0b      	cbnz	r3, 8009444 <forward_lite_conv2d_sssa8_ch+0x964>
 8009400:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009402:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009404:	4293      	cmp	r3, r2
 8009406:	f77f af68 	ble.w	80092da <forward_lite_conv2d_sssa8_ch+0x7fa>
 800940a:	4616      	mov	r6, r2
 800940c:	4610      	mov	r0, r2
 800940e:	46a3      	mov	fp, r4
 8009410:	464f      	mov	r7, r9
 8009412:	462c      	mov	r4, r5
 8009414:	ee18 2a90 	vmov	r2, s17
 8009418:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 800941a:	4699      	mov	r9, r3
 800941c:	f8dd a044 	ldr.w	sl, [sp, #68]	@ 0x44
 8009420:	3601      	adds	r6, #1
 8009422:	fb00 4007 	mla	r0, r0, r7, r4
 8009426:	4659      	mov	r1, fp
 8009428:	920a      	str	r2, [sp, #40]	@ 0x28
 800942a:	b236      	sxth	r6, r6
 800942c:	fb08 a000 	mla	r0, r8, r0, sl
 8009430:	f000 ffb0 	bl	800a394 <st_int8_to16_no_shift_interleaved>
 8009434:	44ab      	add	fp, r5
 8009436:	454e      	cmp	r6, r9
 8009438:	4630      	mov	r0, r6
 800943a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800943c:	dbf0      	blt.n	8009420 <forward_lite_conv2d_sssa8_ch+0x940>
 800943e:	465c      	mov	r4, fp
 8009440:	46b9      	mov	r9, r7
 8009442:	e74a      	b.n	80092da <forward_lite_conv2d_sssa8_ch+0x7fa>
 8009444:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009446:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009448:	4293      	cmp	r3, r2
 800944a:	f77f af46 	ble.w	80092da <forward_lite_conv2d_sssa8_ch+0x7fa>
 800944e:	4616      	mov	r6, r2
 8009450:	4610      	mov	r0, r2
 8009452:	46a3      	mov	fp, r4
 8009454:	464f      	mov	r7, r9
 8009456:	462c      	mov	r4, r5
 8009458:	ee18 2a90 	vmov	r2, s17
 800945c:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 800945e:	4699      	mov	r9, r3
 8009460:	f8dd a044 	ldr.w	sl, [sp, #68]	@ 0x44
 8009464:	3601      	adds	r6, #1
 8009466:	fb00 4007 	mla	r0, r0, r7, r4
 800946a:	4659      	mov	r1, fp
 800946c:	920a      	str	r2, [sp, #40]	@ 0x28
 800946e:	b236      	sxth	r6, r6
 8009470:	fb08 a000 	mla	r0, r8, r0, sl
 8009474:	f000 ff2c 	bl	800a2d0 <st_int8_to16_no_shift>
 8009478:	44ab      	add	fp, r5
 800947a:	454e      	cmp	r6, r9
 800947c:	4630      	mov	r0, r6
 800947e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009480:	dbf0      	blt.n	8009464 <forward_lite_conv2d_sssa8_ch+0x984>
 8009482:	465c      	mov	r4, fp
 8009484:	46b9      	mov	r9, r7
 8009486:	e728      	b.n	80092da <forward_lite_conv2d_sssa8_ch+0x7fa>
 8009488:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800948a:	eb03 000e 	add.w	r0, r3, lr
 800948e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009490:	fb0b 3000 	mla	r0, fp, r0, r3
 8009494:	f000 ff1c 	bl	800a2d0 <st_int8_to16_no_shift>
 8009498:	e710      	b.n	80092bc <forward_lite_conv2d_sssa8_ch+0x7dc>
 800949a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800949c:	eb03 000c 	add.w	r0, r3, ip
 80094a0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80094a2:	fb0b 3000 	mla	r0, fp, r0, r3
 80094a6:	f000 ff75 	bl	800a394 <st_int8_to16_no_shift_interleaved>
 80094aa:	e793      	b.n	80093d4 <forward_lite_conv2d_sssa8_ch+0x8f4>
 80094ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80094ae:	429c      	cmp	r4, r3
 80094b0:	d018      	beq.n	80094e4 <forward_lite_conv2d_sssa8_ch+0xa04>
 80094b2:	4619      	mov	r1, r3
 80094b4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80094b6:	ee1a 2a90 	vmov	r2, s21
 80094ba:	ee19 0a90 	vmov	r0, s19
 80094be:	9307      	str	r3, [sp, #28]
 80094c0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80094c2:	9306      	str	r3, [sp, #24]
 80094c4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80094c6:	9305      	str	r3, [sp, #20]
 80094c8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80094ca:	9304      	str	r3, [sp, #16]
 80094cc:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80094ce:	9303      	str	r3, [sp, #12]
 80094d0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80094d2:	9302      	str	r3, [sp, #8]
 80094d4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80094d6:	9301      	str	r3, [sp, #4]
 80094d8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80094da:	9300      	str	r3, [sp, #0]
 80094dc:	ee19 3a10 	vmov	r3, s18
 80094e0:	f001 fd9e 	bl	800b020 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 80094e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80094e6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80094e8:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 80094ea:	1a9b      	subs	r3, r3, r2
 80094ec:	4411      	add	r1, r2
 80094ee:	911b      	str	r1, [sp, #108]	@ 0x6c
 80094f0:	b299      	uxth	r1, r3
 80094f2:	4613      	mov	r3, r2
 80094f4:	428a      	cmp	r2, r1
 80094f6:	9128      	str	r1, [sp, #160]	@ 0xa0
 80094f8:	bf28      	it	cs
 80094fa:	460b      	movcs	r3, r1
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d03e      	beq.n	8009580 <forward_lite_conv2d_sssa8_ch+0xaa0>
 8009502:	ee1a 4a90 	vmov	r4, s21
 8009506:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 8009508:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800950a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800950e:	fb01 0002 	mla	r0, r1, r2, r0
 8009512:	ee0a 4a90 	vmov	s21, r4
 8009516:	9c26      	ldr	r4, [sp, #152]	@ 0x98
 8009518:	902d      	str	r0, [sp, #180]	@ 0xb4
 800951a:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 800951e:	9426      	str	r4, [sp, #152]	@ 0x98
 8009520:	9c21      	ldr	r4, [sp, #132]	@ 0x84
 8009522:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8009526:	9421      	str	r4, [sp, #132]	@ 0x84
 8009528:	9c1f      	ldr	r4, [sp, #124]	@ 0x7c
 800952a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800952e:	921f      	str	r2, [sp, #124]	@ 0x7c
 8009530:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009532:	bb3a      	cbnz	r2, 8009584 <forward_lite_conv2d_sssa8_ch+0xaa4>
 8009534:	460a      	mov	r2, r1
 8009536:	ee19 1a90 	vmov	r1, s19
 800953a:	931a      	str	r3, [sp, #104]	@ 0x68
 800953c:	f001 f858 	bl	800a5f0 <st_int8_to16_dual_interleaved>
 8009540:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8009542:	3b01      	subs	r3, #1
 8009544:	b29b      	uxth	r3, r3
 8009546:	461a      	mov	r2, r3
 8009548:	9327      	str	r3, [sp, #156]	@ 0x9c
 800954a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800954e:	429a      	cmp	r2, r3
 8009550:	f47f ae60 	bne.w	8009214 <forward_lite_conv2d_sssa8_ch+0x734>
 8009554:	ee18 ba90 	vmov	fp, s17
 8009558:	ee1b 7a10 	vmov	r7, s22
 800955c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 800955e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009560:	9c32      	ldr	r4, [sp, #200]	@ 0xc8
 8009562:	4413      	add	r3, r2
 8009564:	3401      	adds	r4, #1
 8009566:	b29b      	uxth	r3, r3
 8009568:	b224      	sxth	r4, r4
 800956a:	9330      	str	r3, [sp, #192]	@ 0xc0
 800956c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800956e:	4625      	mov	r5, r4
 8009570:	429c      	cmp	r4, r3
 8009572:	f6ff ae12 	blt.w	800919a <forward_lite_conv2d_sssa8_ch+0x6ba>
 8009576:	b055      	add	sp, #340	@ 0x154
 8009578:	ecbd 8b08 	vpop	{d8-d11}
 800957c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009580:	931a      	str	r3, [sp, #104]	@ 0x68
 8009582:	e7dd      	b.n	8009540 <forward_lite_conv2d_sssa8_ch+0xa60>
 8009584:	460a      	mov	r2, r1
 8009586:	ee19 1a90 	vmov	r1, s19
 800958a:	931a      	str	r3, [sp, #104]	@ 0x68
 800958c:	f000 ff46 	bl	800a41c <st_int8_to16_dual>
 8009590:	e7d6      	b.n	8009540 <forward_lite_conv2d_sssa8_ch+0xa60>
 8009592:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8009594:	ee19 1a90 	vmov	r1, s19
 8009598:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800959a:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800959c:	f000 ff3e 	bl	800a41c <st_int8_to16_dual>
 80095a0:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	f47f ae16 	bne.w	80091d4 <forward_lite_conv2d_sssa8_ch+0x6f4>
 80095a8:	b2a3      	uxth	r3, r4
 80095aa:	9332      	str	r3, [sp, #200]	@ 0xc8
 80095ac:	e7d6      	b.n	800955c <forward_lite_conv2d_sssa8_ch+0xa7c>
 80095ae:	ee19 3a10 	vmov	r3, s18
 80095b2:	ee19 1a90 	vmov	r1, s19
 80095b6:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80095b8:	f000 ff30 	bl	800a41c <st_int8_to16_dual>
 80095bc:	f7ff bb50 	b.w	8008c60 <forward_lite_conv2d_sssa8_ch+0x180>

080095c0 <forward_lite_maxpool_is8os8_scalepos>:
 80095c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095c4:	b095      	sub	sp, #84	@ 0x54
 80095c6:	4614      	mov	r4, r2
 80095c8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80095cc:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 80095d0:	f99d 009c 	ldrsb.w	r0, [sp, #156]	@ 0x9c
 80095d4:	910d      	str	r1, [sp, #52]	@ 0x34
 80095d6:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 80095da:	930c      	str	r3, [sp, #48]	@ 0x30
 80095dc:	910e      	str	r1, [sp, #56]	@ 0x38
 80095de:	f8bd 1084 	ldrh.w	r1, [sp, #132]	@ 0x84
 80095e2:	f8bd 3098 	ldrh.w	r3, [sp, #152]	@ 0x98
 80095e6:	910f      	str	r1, [sp, #60]	@ 0x3c
 80095e8:	f8bd 1088 	ldrh.w	r1, [sp, #136]	@ 0x88
 80095ec:	9206      	str	r2, [sp, #24]
 80095ee:	9110      	str	r1, [sp, #64]	@ 0x40
 80095f0:	f8bd 108c 	ldrh.w	r1, [sp, #140]	@ 0x8c
 80095f4:	f8bd a078 	ldrh.w	sl, [sp, #120]	@ 0x78
 80095f8:	9111      	str	r1, [sp, #68]	@ 0x44
 80095fa:	f8bd 1090 	ldrh.w	r1, [sp, #144]	@ 0x90
 80095fe:	f99d 20a0 	ldrsb.w	r2, [sp, #160]	@ 0xa0
 8009602:	9112      	str	r1, [sp, #72]	@ 0x48
 8009604:	f8bd 1094 	ldrh.w	r1, [sp, #148]	@ 0x94
 8009608:	9313      	str	r3, [sp, #76]	@ 0x4c
 800960a:	9107      	str	r1, [sp, #28]
 800960c:	9003      	str	r0, [sp, #12]
 800960e:	2b00      	cmp	r3, #0
 8009610:	f000 8094 	beq.w	800973c <forward_lite_maxpool_is8os8_scalepos+0x17c>
 8009614:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009618:	eeb4 0a67 	vcmp.f32	s0, s15
 800961c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009620:	bf0c      	ite	eq
 8009622:	2301      	moveq	r3, #1
 8009624:	2300      	movne	r3, #0
 8009626:	4290      	cmp	r0, r2
 8009628:	bf14      	ite	ne
 800962a:	2300      	movne	r3, #0
 800962c:	f003 0301 	andeq.w	r3, r3, #1
 8009630:	9301      	str	r3, [sp, #4]
 8009632:	2900      	cmp	r1, #0
 8009634:	f000 8082 	beq.w	800973c <forward_lite_maxpool_is8os8_scalepos+0x17c>
 8009638:	f1ba 0f00 	cmp.w	sl, #0
 800963c:	d07e      	beq.n	800973c <forward_lite_maxpool_is8os8_scalepos+0x17c>
 800963e:	ee07 2a90 	vmov	s15, r2
 8009642:	2300      	movs	r3, #0
 8009644:	ed9f 6a4e 	vldr	s12, [pc, #312]	@ 8009780 <forward_lite_maxpool_is8os8_scalepos+0x1c0>
 8009648:	fb04 fb0a 	mul.w	fp, r4, sl
 800964c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009650:	9304      	str	r3, [sp, #16]
 8009652:	9b04      	ldr	r3, [sp, #16]
 8009654:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8009658:	9907      	ldr	r1, [sp, #28]
 800965a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800965c:	fb03 f202 	mul.w	r2, r3, r2
 8009660:	fb03 f301 	mul.w	r3, r3, r1
 8009664:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8009666:	9308      	str	r3, [sp, #32]
 8009668:	2300      	movs	r3, #0
 800966a:	9305      	str	r3, [sp, #20]
 800966c:	1a53      	subs	r3, r2, r1
 800966e:	1a8a      	subs	r2, r1, r2
 8009670:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009672:	2b00      	cmp	r3, #0
 8009674:	eb02 0c01 	add.w	ip, r2, r1
 8009678:	bfd8      	it	le
 800967a:	4691      	movle	r9, r2
 800967c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800967e:	bfc8      	it	gt
 8009680:	f04f 0900 	movgt.w	r9, #0
 8009684:	4594      	cmp	ip, r2
 8009686:	444b      	add	r3, r9
 8009688:	bfa8      	it	ge
 800968a:	4694      	movge	ip, r2
 800968c:	9a06      	ldr	r2, [sp, #24]
 800968e:	fb02 f303 	mul.w	r3, r2, r3
 8009692:	9309      	str	r3, [sp, #36]	@ 0x24
 8009694:	9a05      	ldr	r2, [sp, #20]
 8009696:	f04f 0e00 	mov.w	lr, #0
 800969a:	9908      	ldr	r1, [sp, #32]
 800969c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800969e:	eb02 0801 	add.w	r8, r2, r1
 80096a2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80096a4:	fb03 f302 	mul.w	r3, r3, r2
 80096a8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80096aa:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80096ac:	fb0a 2808 	mla	r8, sl, r8, r2
 80096b0:	1a5a      	subs	r2, r3, r1
 80096b2:	1acb      	subs	r3, r1, r3
 80096b4:	9906      	ldr	r1, [sp, #24]
 80096b6:	2a00      	cmp	r2, #0
 80096b8:	bfd8      	it	le
 80096ba:	461f      	movle	r7, r3
 80096bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096be:	bfc8      	it	gt
 80096c0:	2700      	movgt	r7, #0
 80096c2:	18d3      	adds	r3, r2, r3
 80096c4:	1a8a      	subs	r2, r1, r2
 80096c6:	4294      	cmp	r4, r2
 80096c8:	443b      	add	r3, r7
 80096ca:	bfa8      	it	ge
 80096cc:	4614      	movge	r4, r2
 80096ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80096d0:	fb0a 2303 	mla	r3, sl, r3, r2
 80096d4:	9302      	str	r3, [sp, #8]
 80096d6:	45e1      	cmp	r9, ip
 80096d8:	da4e      	bge.n	8009778 <forward_lite_maxpool_is8os8_scalepos+0x1b8>
 80096da:	9b02      	ldr	r3, [sp, #8]
 80096dc:	464d      	mov	r5, r9
 80096de:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 80096e2:	eb03 060e 	add.w	r6, r3, lr
 80096e6:	42a7      	cmp	r7, r4
 80096e8:	da0a      	bge.n	8009700 <forward_lite_maxpool_is8os8_scalepos+0x140>
 80096ea:	4632      	mov	r2, r6
 80096ec:	463b      	mov	r3, r7
 80096ee:	f992 0000 	ldrsb.w	r0, [r2]
 80096f2:	3301      	adds	r3, #1
 80096f4:	4452      	add	r2, sl
 80096f6:	4281      	cmp	r1, r0
 80096f8:	bfb8      	it	lt
 80096fa:	4601      	movlt	r1, r0
 80096fc:	429c      	cmp	r4, r3
 80096fe:	d1f6      	bne.n	80096ee <forward_lite_maxpool_is8os8_scalepos+0x12e>
 8009700:	3501      	adds	r5, #1
 8009702:	445e      	add	r6, fp
 8009704:	45ac      	cmp	ip, r5
 8009706:	d1ee      	bne.n	80096e6 <forward_lite_maxpool_is8os8_scalepos+0x126>
 8009708:	9b01      	ldr	r3, [sp, #4]
 800970a:	b1d3      	cbz	r3, 8009742 <forward_lite_maxpool_is8os8_scalepos+0x182>
 800970c:	f888 1000 	strb.w	r1, [r8]
 8009710:	f10e 0e01 	add.w	lr, lr, #1
 8009714:	f108 0801 	add.w	r8, r8, #1
 8009718:	fa1f f38e 	uxth.w	r3, lr
 800971c:	459a      	cmp	sl, r3
 800971e:	d8da      	bhi.n	80096d6 <forward_lite_maxpool_is8os8_scalepos+0x116>
 8009720:	9b05      	ldr	r3, [sp, #20]
 8009722:	9a07      	ldr	r2, [sp, #28]
 8009724:	3301      	adds	r3, #1
 8009726:	b29b      	uxth	r3, r3
 8009728:	429a      	cmp	r2, r3
 800972a:	9305      	str	r3, [sp, #20]
 800972c:	d8b2      	bhi.n	8009694 <forward_lite_maxpool_is8os8_scalepos+0xd4>
 800972e:	9b04      	ldr	r3, [sp, #16]
 8009730:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009732:	3301      	adds	r3, #1
 8009734:	b29b      	uxth	r3, r3
 8009736:	429a      	cmp	r2, r3
 8009738:	9304      	str	r3, [sp, #16]
 800973a:	d88a      	bhi.n	8009652 <forward_lite_maxpool_is8os8_scalepos+0x92>
 800973c:	b015      	add	sp, #84	@ 0x54
 800973e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009742:	9b03      	ldr	r3, [sp, #12]
 8009744:	eeb0 7a66 	vmov.f32	s14, s13
 8009748:	1ac9      	subs	r1, r1, r3
 800974a:	ee07 1a90 	vmov	s15, r1
 800974e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009752:	eea7 7a80 	vfma.f32	s14, s15, s0
 8009756:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800975a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800975e:	fe65 7a86 	vselge.f32	s15, s11, s12
 8009762:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009766:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800976a:	ee17 3a90 	vmov	r3, s15
 800976e:	f303 0307 	ssat	r3, #8, r3
 8009772:	f888 3000 	strb.w	r3, [r8]
 8009776:	e7cb      	b.n	8009710 <forward_lite_maxpool_is8os8_scalepos+0x150>
 8009778:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 800977c:	e7c4      	b.n	8009708 <forward_lite_maxpool_is8os8_scalepos+0x148>
 800977e:	bf00      	nop
 8009780:	befffffc 	.word	0xbefffffc

08009784 <forward_lite_maxpool_is8os8_scaleneg>:
 8009784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009788:	b095      	sub	sp, #84	@ 0x54
 800978a:	4614      	mov	r4, r2
 800978c:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8009790:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 8009794:	f99d 009c 	ldrsb.w	r0, [sp, #156]	@ 0x9c
 8009798:	910d      	str	r1, [sp, #52]	@ 0x34
 800979a:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 800979e:	930c      	str	r3, [sp, #48]	@ 0x30
 80097a0:	910e      	str	r1, [sp, #56]	@ 0x38
 80097a2:	f8bd 1084 	ldrh.w	r1, [sp, #132]	@ 0x84
 80097a6:	f8bd 3098 	ldrh.w	r3, [sp, #152]	@ 0x98
 80097aa:	910f      	str	r1, [sp, #60]	@ 0x3c
 80097ac:	f8bd 1088 	ldrh.w	r1, [sp, #136]	@ 0x88
 80097b0:	9206      	str	r2, [sp, #24]
 80097b2:	9110      	str	r1, [sp, #64]	@ 0x40
 80097b4:	f8bd 108c 	ldrh.w	r1, [sp, #140]	@ 0x8c
 80097b8:	f8bd a078 	ldrh.w	sl, [sp, #120]	@ 0x78
 80097bc:	9111      	str	r1, [sp, #68]	@ 0x44
 80097be:	f8bd 1090 	ldrh.w	r1, [sp, #144]	@ 0x90
 80097c2:	f99d 20a0 	ldrsb.w	r2, [sp, #160]	@ 0xa0
 80097c6:	9112      	str	r1, [sp, #72]	@ 0x48
 80097c8:	f8bd 1094 	ldrh.w	r1, [sp, #148]	@ 0x94
 80097cc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80097ce:	9107      	str	r1, [sp, #28]
 80097d0:	9003      	str	r0, [sp, #12]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	f000 8093 	beq.w	80098fe <forward_lite_maxpool_is8os8_scaleneg+0x17a>
 80097d8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80097dc:	eeb4 0a67 	vcmp.f32	s0, s15
 80097e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097e4:	bf0c      	ite	eq
 80097e6:	2301      	moveq	r3, #1
 80097e8:	2300      	movne	r3, #0
 80097ea:	4290      	cmp	r0, r2
 80097ec:	bf14      	ite	ne
 80097ee:	2300      	movne	r3, #0
 80097f0:	f003 0301 	andeq.w	r3, r3, #1
 80097f4:	9301      	str	r3, [sp, #4]
 80097f6:	2900      	cmp	r1, #0
 80097f8:	f000 8081 	beq.w	80098fe <forward_lite_maxpool_is8os8_scaleneg+0x17a>
 80097fc:	f1ba 0f00 	cmp.w	sl, #0
 8009800:	d07d      	beq.n	80098fe <forward_lite_maxpool_is8os8_scaleneg+0x17a>
 8009802:	ee07 2a90 	vmov	s15, r2
 8009806:	2300      	movs	r3, #0
 8009808:	ed9f 6a4d 	vldr	s12, [pc, #308]	@ 8009940 <forward_lite_maxpool_is8os8_scaleneg+0x1bc>
 800980c:	fb04 fb0a 	mul.w	fp, r4, sl
 8009810:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009814:	9304      	str	r3, [sp, #16]
 8009816:	9b04      	ldr	r3, [sp, #16]
 8009818:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 800981c:	9907      	ldr	r1, [sp, #28]
 800981e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009820:	fb03 f202 	mul.w	r2, r3, r2
 8009824:	fb03 f301 	mul.w	r3, r3, r1
 8009828:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800982a:	9308      	str	r3, [sp, #32]
 800982c:	2300      	movs	r3, #0
 800982e:	9305      	str	r3, [sp, #20]
 8009830:	1a53      	subs	r3, r2, r1
 8009832:	1a8a      	subs	r2, r1, r2
 8009834:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009836:	2b00      	cmp	r3, #0
 8009838:	eb02 0c01 	add.w	ip, r2, r1
 800983c:	bfd8      	it	le
 800983e:	4691      	movle	r9, r2
 8009840:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009842:	bfc8      	it	gt
 8009844:	f04f 0900 	movgt.w	r9, #0
 8009848:	4594      	cmp	ip, r2
 800984a:	444b      	add	r3, r9
 800984c:	bfa8      	it	ge
 800984e:	4694      	movge	ip, r2
 8009850:	9a06      	ldr	r2, [sp, #24]
 8009852:	fb02 f303 	mul.w	r3, r2, r3
 8009856:	9309      	str	r3, [sp, #36]	@ 0x24
 8009858:	9a05      	ldr	r2, [sp, #20]
 800985a:	f04f 0e00 	mov.w	lr, #0
 800985e:	9908      	ldr	r1, [sp, #32]
 8009860:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009862:	eb02 0801 	add.w	r8, r2, r1
 8009866:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009868:	fb03 f302 	mul.w	r3, r3, r2
 800986c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800986e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8009870:	fb0a 2808 	mla	r8, sl, r8, r2
 8009874:	1a5a      	subs	r2, r3, r1
 8009876:	1acb      	subs	r3, r1, r3
 8009878:	9906      	ldr	r1, [sp, #24]
 800987a:	2a00      	cmp	r2, #0
 800987c:	bfd8      	it	le
 800987e:	461f      	movle	r7, r3
 8009880:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009882:	bfc8      	it	gt
 8009884:	2700      	movgt	r7, #0
 8009886:	18d3      	adds	r3, r2, r3
 8009888:	1a8a      	subs	r2, r1, r2
 800988a:	4294      	cmp	r4, r2
 800988c:	443b      	add	r3, r7
 800988e:	bfa8      	it	ge
 8009890:	4614      	movge	r4, r2
 8009892:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009894:	fb0a 2303 	mla	r3, sl, r3, r2
 8009898:	9302      	str	r3, [sp, #8]
 800989a:	45e1      	cmp	r9, ip
 800989c:	da4d      	bge.n	800993a <forward_lite_maxpool_is8os8_scaleneg+0x1b6>
 800989e:	9b02      	ldr	r3, [sp, #8]
 80098a0:	464d      	mov	r5, r9
 80098a2:	217f      	movs	r1, #127	@ 0x7f
 80098a4:	eb03 060e 	add.w	r6, r3, lr
 80098a8:	42a7      	cmp	r7, r4
 80098aa:	da0a      	bge.n	80098c2 <forward_lite_maxpool_is8os8_scaleneg+0x13e>
 80098ac:	4632      	mov	r2, r6
 80098ae:	463b      	mov	r3, r7
 80098b0:	f992 0000 	ldrsb.w	r0, [r2]
 80098b4:	3301      	adds	r3, #1
 80098b6:	4452      	add	r2, sl
 80098b8:	4281      	cmp	r1, r0
 80098ba:	bfa8      	it	ge
 80098bc:	4601      	movge	r1, r0
 80098be:	429c      	cmp	r4, r3
 80098c0:	d1f6      	bne.n	80098b0 <forward_lite_maxpool_is8os8_scaleneg+0x12c>
 80098c2:	3501      	adds	r5, #1
 80098c4:	445e      	add	r6, fp
 80098c6:	45ac      	cmp	ip, r5
 80098c8:	d1ee      	bne.n	80098a8 <forward_lite_maxpool_is8os8_scaleneg+0x124>
 80098ca:	9b01      	ldr	r3, [sp, #4]
 80098cc:	b1d3      	cbz	r3, 8009904 <forward_lite_maxpool_is8os8_scaleneg+0x180>
 80098ce:	f888 1000 	strb.w	r1, [r8]
 80098d2:	f10e 0e01 	add.w	lr, lr, #1
 80098d6:	f108 0801 	add.w	r8, r8, #1
 80098da:	fa1f f38e 	uxth.w	r3, lr
 80098de:	459a      	cmp	sl, r3
 80098e0:	d8db      	bhi.n	800989a <forward_lite_maxpool_is8os8_scaleneg+0x116>
 80098e2:	9b05      	ldr	r3, [sp, #20]
 80098e4:	9a07      	ldr	r2, [sp, #28]
 80098e6:	3301      	adds	r3, #1
 80098e8:	b29b      	uxth	r3, r3
 80098ea:	429a      	cmp	r2, r3
 80098ec:	9305      	str	r3, [sp, #20]
 80098ee:	d8b3      	bhi.n	8009858 <forward_lite_maxpool_is8os8_scaleneg+0xd4>
 80098f0:	9b04      	ldr	r3, [sp, #16]
 80098f2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80098f4:	3301      	adds	r3, #1
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	429a      	cmp	r2, r3
 80098fa:	9304      	str	r3, [sp, #16]
 80098fc:	d88b      	bhi.n	8009816 <forward_lite_maxpool_is8os8_scaleneg+0x92>
 80098fe:	b015      	add	sp, #84	@ 0x54
 8009900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009904:	9b03      	ldr	r3, [sp, #12]
 8009906:	eeb0 7a66 	vmov.f32	s14, s13
 800990a:	1ac9      	subs	r1, r1, r3
 800990c:	ee07 1a90 	vmov	s15, r1
 8009910:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009914:	eea7 7a80 	vfma.f32	s14, s15, s0
 8009918:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800991c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009920:	fe65 7a86 	vselge.f32	s15, s11, s12
 8009924:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009928:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800992c:	ee17 3a90 	vmov	r3, s15
 8009930:	f303 0307 	ssat	r3, #8, r3
 8009934:	f888 3000 	strb.w	r3, [r8]
 8009938:	e7cb      	b.n	80098d2 <forward_lite_maxpool_is8os8_scaleneg+0x14e>
 800993a:	217f      	movs	r1, #127	@ 0x7f
 800993c:	e7c5      	b.n	80098ca <forward_lite_maxpool_is8os8_scaleneg+0x146>
 800993e:	bf00      	nop
 8009940:	befffffc 	.word	0xbefffffc

08009944 <align_factor>:
 8009944:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009948:	4602      	mov	r2, r0
 800994a:	b508      	push	{r3, lr}
 800994c:	eeb4 0a67 	vcmp.f32	s0, s15
 8009950:	2300      	movs	r3, #0
 8009952:	8003      	strh	r3, [r0, #0]
 8009954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009958:	d524      	bpl.n	80099a4 <align_factor+0x60>
 800995a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800995e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009962:	dd1f      	ble.n	80099a4 <align_factor+0x60>
 8009964:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8009968:	2301      	movs	r3, #1
 800996a:	e005      	b.n	8009978 <align_factor+0x34>
 800996c:	8013      	strh	r3, [r2, #0]
 800996e:	b28b      	uxth	r3, r1
 8009970:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009974:	2b21      	cmp	r3, #33	@ 0x21
 8009976:	d02b      	beq.n	80099d0 <align_factor+0x8c>
 8009978:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800997c:	1c59      	adds	r1, r3, #1
 800997e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009982:	d4f3      	bmi.n	800996c <align_factor+0x28>
 8009984:	eddf 7a17 	vldr	s15, [pc, #92]	@ 80099e4 <align_factor+0xa0>
 8009988:	ee60 7a27 	vmul.f32	s15, s0, s15
 800998c:	ee17 0a90 	vmov	r0, s15
 8009990:	f7f6 fd16 	bl	80003c0 <__aeabi_f2lz>
 8009994:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 8009998:	d003      	beq.n	80099a2 <align_factor+0x5e>
 800999a:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 800999e:	ea80 70e1 	eor.w	r0, r0, r1, asr #31
 80099a2:	bd08      	pop	{r3, pc}
 80099a4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80099a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80099ac:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80099b0:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 80099b4:	e005      	b.n	80099c2 <align_factor+0x7e>
 80099b6:	8013      	strh	r3, [r2, #0]
 80099b8:	b28b      	uxth	r3, r1
 80099ba:	ee20 0a07 	vmul.f32	s0, s0, s14
 80099be:	4283      	cmp	r3, r0
 80099c0:	d00a      	beq.n	80099d8 <align_factor+0x94>
 80099c2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80099c6:	1e59      	subs	r1, r3, #1
 80099c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099cc:	dcf3      	bgt.n	80099b6 <align_factor+0x72>
 80099ce:	e7d9      	b.n	8009984 <align_factor+0x40>
 80099d0:	2300      	movs	r3, #0
 80099d2:	4618      	mov	r0, r3
 80099d4:	8013      	strh	r3, [r2, #0]
 80099d6:	bd08      	pop	{r3, pc}
 80099d8:	f64f 73e2 	movw	r3, #65506	@ 0xffe2
 80099dc:	ee30 0a00 	vadd.f32	s0, s0, s0
 80099e0:	8013      	strh	r3, [r2, #0]
 80099e2:	e7cf      	b.n	8009984 <align_factor+0x40>
 80099e4:	4f000000 	.word	0x4f000000

080099e8 <align_factor_ch>:
 80099e8:	b361      	cbz	r1, 8009a44 <align_factor_ch+0x5c>
 80099ea:	ee80 7a20 	vdiv.f32	s14, s0, s1
 80099ee:	f1a2 0c04 	sub.w	ip, r2, #4
 80099f2:	b530      	push	{r4, r5, lr}
 80099f4:	f1a3 0e02 	sub.w	lr, r3, #2
 80099f8:	eb00 0481 	add.w	r4, r0, r1, lsl #2
 80099fc:	2500      	movs	r5, #0
 80099fe:	ecf0 7a01 	vldmia	r0!, {s15}
 8009a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a06:	ee17 2a90 	vmov	r2, s15
 8009a0a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8009a0e:	f3c2 0316 	ubfx	r3, r2, #0, #23
 8009a12:	2a00      	cmp	r2, #0
 8009a14:	f503 0300 	add.w	r3, r3, #8388608	@ 0x800000
 8009a18:	f1c1 017e 	rsb	r1, r1, #126	@ 0x7e
 8009a1c:	bfb8      	it	lt
 8009a1e:	425b      	neglt	r3, r3
 8009a20:	291f      	cmp	r1, #31
 8009a22:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 8009a26:	dc06      	bgt.n	8009a36 <align_factor_ch+0x4e>
 8009a28:	4284      	cmp	r4, r0
 8009a2a:	f82e 1f02 	strh.w	r1, [lr, #2]!
 8009a2e:	f84c 3f04 	str.w	r3, [ip, #4]!
 8009a32:	d1e4      	bne.n	80099fe <align_factor_ch+0x16>
 8009a34:	bd30      	pop	{r4, r5, pc}
 8009a36:	4284      	cmp	r4, r0
 8009a38:	f82e 5f02 	strh.w	r5, [lr, #2]!
 8009a3c:	f84c 5f04 	str.w	r5, [ip, #4]!
 8009a40:	d1dd      	bne.n	80099fe <align_factor_ch+0x16>
 8009a42:	bd30      	pop	{r4, r5, pc}
 8009a44:	4770      	bx	lr
 8009a46:	bf00      	nop

08009a48 <st_sssa8_ch_convolve_rank1upd>:
 8009a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a4c:	b085      	sub	sp, #20
 8009a4e:	f8bd 4038 	ldrh.w	r4, [sp, #56]	@ 0x38
 8009a52:	f99d b040 	ldrsb.w	fp, [sp, #64]	@ 0x40
 8009a56:	fb13 f304 	smulbb	r3, r3, r4
 8009a5a:	460c      	mov	r4, r1
 8009a5c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009a5e:	fb13 f500 	smulbb	r5, r3, r0
 8009a62:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009a64:	2a00      	cmp	r2, #0
 8009a66:	d070      	beq.n	8009b4a <st_sssa8_ch_convolve_rank1upd+0x102>
 8009a68:	b2ad      	uxth	r5, r5
 8009a6a:	f1a1 0904 	sub.w	r9, r1, #4
 8009a6e:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
 8009a72:	08af      	lsrs	r7, r5, #2
 8009a74:	f005 0503 	and.w	r5, r5, #3
 8009a78:	eb03 08c2 	add.w	r8, r3, r2, lsl #3
 8009a7c:	1e69      	subs	r1, r5, #1
 8009a7e:	f1a7 0381 	sub.w	r3, r7, #129	@ 0x81
 8009a82:	f1a7 0280 	sub.w	r2, r7, #128	@ 0x80
 8009a86:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8009a8a:	b289      	uxth	r1, r1
 8009a8c:	9100      	str	r1, [sp, #0]
 8009a8e:	ebc3 2143 	rsb	r1, r3, r3, lsl #9
 8009a92:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
 8009a96:	b292      	uxth	r2, r2
 8009a98:	9202      	str	r2, [sp, #8]
 8009a9a:	025a      	lsls	r2, r3, #9
 8009a9c:	3301      	adds	r3, #1
 8009a9e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009aa2:	025b      	lsls	r3, r3, #9
 8009aa4:	9203      	str	r2, [sp, #12]
 8009aa6:	9301      	str	r3, [sp, #4]
 8009aa8:	2f80      	cmp	r7, #128	@ 0x80
 8009aaa:	d953      	bls.n	8009b54 <st_sssa8_ch_convolve_rank1upd+0x10c>
 8009aac:	9b03      	ldr	r3, [sp, #12]
 8009aae:	f504 7000 	add.w	r0, r4, #512	@ 0x200
 8009ab2:	2600      	movs	r6, #0
 8009ab4:	eb04 0c03 	add.w	ip, r4, r3
 8009ab8:	f5a0 7100 	sub.w	r1, r0, #512	@ 0x200
 8009abc:	2200      	movs	r2, #0
 8009abe:	f851 3b04 	ldr.w	r3, [r1], #4
 8009ac2:	fa2f fe83 	sxtb16	lr, r3
 8009ac6:	4281      	cmp	r1, r0
 8009ac8:	ea4f 2333 	mov.w	r3, r3, ror #8
 8009acc:	fa92 f21e 	qadd16	r2, r2, lr
 8009ad0:	fa2f f383 	sxtb16	r3, r3
 8009ad4:	fa92 f213 	qadd16	r2, r2, r3
 8009ad8:	d1f1      	bne.n	8009abe <st_sssa8_ch_convolve_rank1upd+0x76>
 8009ada:	f501 7000 	add.w	r0, r1, #512	@ 0x200
 8009ade:	b213      	sxth	r3, r2
 8009ae0:	4560      	cmp	r0, ip
 8009ae2:	eb03 4222 	add.w	r2, r3, r2, asr #16
 8009ae6:	4416      	add	r6, r2
 8009ae8:	d1e6      	bne.n	8009ab8 <st_sssa8_ch_convolve_rank1upd+0x70>
 8009aea:	9b01      	ldr	r3, [sp, #4]
 8009aec:	18e1      	adds	r1, r4, r3
 8009aee:	9c02      	ldr	r4, [sp, #8]
 8009af0:	b374      	cbz	r4, 8009b50 <st_sssa8_ch_convolve_rank1upd+0x108>
 8009af2:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8009af6:	2200      	movs	r2, #0
 8009af8:	f851 3b04 	ldr.w	r3, [r1], #4
 8009afc:	fa2f f083 	sxtb16	r0, r3
 8009b00:	428c      	cmp	r4, r1
 8009b02:	ea4f 2333 	mov.w	r3, r3, ror #8
 8009b06:	fa92 f210 	qadd16	r2, r2, r0
 8009b0a:	fa2f f383 	sxtb16	r3, r3
 8009b0e:	fa92 f213 	qadd16	r2, r2, r3
 8009b12:	d1f1      	bne.n	8009af8 <st_sssa8_ch_convolve_rank1upd+0xb0>
 8009b14:	b213      	sxth	r3, r2
 8009b16:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8009b1a:	441e      	add	r6, r3
 8009b1c:	b16d      	cbz	r5, 8009b3a <st_sssa8_ch_convolve_rank1upd+0xf2>
 8009b1e:	f994 3000 	ldrsb.w	r3, [r4]
 8009b22:	441e      	add	r6, r3
 8009b24:	9b00      	ldr	r3, [sp, #0]
 8009b26:	b13b      	cbz	r3, 8009b38 <st_sssa8_ch_convolve_rank1upd+0xf0>
 8009b28:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8009b2c:	2d02      	cmp	r5, #2
 8009b2e:	441e      	add	r6, r3
 8009b30:	d002      	beq.n	8009b38 <st_sssa8_ch_convolve_rank1upd+0xf0>
 8009b32:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8009b36:	441e      	add	r6, r3
 8009b38:	442c      	add	r4, r5
 8009b3a:	f859 3f04 	ldr.w	r3, [r9, #4]!
 8009b3e:	fb0b 3616 	mls	r6, fp, r6, r3
 8009b42:	f84a 6b04 	str.w	r6, [sl], #4
 8009b46:	45c2      	cmp	sl, r8
 8009b48:	d1ae      	bne.n	8009aa8 <st_sssa8_ch_convolve_rank1upd+0x60>
 8009b4a:	b005      	add	sp, #20
 8009b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b50:	460c      	mov	r4, r1
 8009b52:	e7e3      	b.n	8009b1c <st_sssa8_ch_convolve_rank1upd+0xd4>
 8009b54:	4621      	mov	r1, r4
 8009b56:	2600      	movs	r6, #0
 8009b58:	463c      	mov	r4, r7
 8009b5a:	e7c9      	b.n	8009af0 <st_sssa8_ch_convolve_rank1upd+0xa8>

08009b5c <st_sssa8_fully_connected>:
 8009b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b60:	b097      	sub	sp, #92	@ 0x5c
 8009b62:	460d      	mov	r5, r1
 8009b64:	4683      	mov	fp, r0
 8009b66:	9c20      	ldr	r4, [sp, #128]	@ 0x80
 8009b68:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009b6a:	6823      	ldr	r3, [r4, #0]
 8009b6c:	9203      	str	r2, [sp, #12]
 8009b6e:	9307      	str	r3, [sp, #28]
 8009b70:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009b72:	f99d 6088 	ldrsb.w	r6, [sp, #136]	@ 0x88
 8009b76:	f9b3 1000 	ldrsh.w	r1, [r3]
 8009b7a:	f99d 308c 	ldrsb.w	r3, [sp, #140]	@ 0x8c
 8009b7e:	1e4a      	subs	r2, r1, #1
 8009b80:	9104      	str	r1, [sp, #16]
 8009b82:	920d      	str	r2, [sp, #52]	@ 0x34
 8009b84:	b292      	uxth	r2, r2
 8009b86:	2a14      	cmp	r2, #20
 8009b88:	f200 81b3 	bhi.w	8009ef2 <st_sssa8_fully_connected+0x396>
 8009b8c:	2201      	movs	r2, #1
 8009b8e:	408b      	lsls	r3, r1
 8009b90:	408a      	lsls	r2, r1
 8009b92:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8009b96:	9308      	str	r3, [sp, #32]
 8009b98:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	f000 81ae 	beq.w	8009efc <st_sssa8_fully_connected+0x3a0>
 8009ba0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009ba2:	b2b3      	uxth	r3, r6
 8009ba4:	9600      	str	r6, [sp, #0]
 8009ba6:	4658      	mov	r0, fp
 8009ba8:	0851      	lsrs	r1, r2, #1
 8009baa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8009bae:	9e03      	ldr	r6, [sp, #12]
 8009bb0:	460c      	mov	r4, r1
 8009bb2:	9115      	str	r1, [sp, #84]	@ 0x54
 8009bb4:	4632      	mov	r2, r6
 8009bb6:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8009bb8:	f000 fb52 	bl	800a260 <st_int8_reordered_no_shift_zero>
 8009bbc:	4621      	mov	r1, r4
 8009bbe:	2c00      	cmp	r4, #0
 8009bc0:	f000 8145 	beq.w	8009e4e <st_sssa8_fully_connected+0x2f2>
 8009bc4:	4634      	mov	r4, r6
 8009bc6:	f1a6 0310 	sub.w	r3, r6, #16
 8009bca:	9e04      	ldr	r6, [sp, #16]
 8009bcc:	1e4a      	subs	r2, r1, #1
 8009bce:	2001      	movs	r0, #1
 8009bd0:	091b      	lsrs	r3, r3, #4
 8009bd2:	1eb1      	subs	r1, r6, #2
 8009bd4:	b292      	uxth	r2, r2
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	fa00 f101 	lsl.w	r1, r0, r1
 8009bdc:	9112      	str	r1, [sp, #72]	@ 0x48
 8009bde:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8009be0:	3110      	adds	r1, #16
 8009be2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8009be6:	920e      	str	r2, [sp, #56]	@ 0x38
 8009be8:	1ee2      	subs	r2, r4, #3
 8009bea:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009bec:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009bee:	3208      	adds	r2, #8
 8009bf0:	9205      	str	r2, [sp, #20]
 8009bf2:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8009bf4:	3202      	adds	r2, #2
 8009bf6:	9206      	str	r2, [sp, #24]
 8009bf8:	011a      	lsls	r2, r3, #4
 8009bfa:	9209      	str	r2, [sp, #36]	@ 0x24
 8009bfc:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8009bfe:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8009c02:	9310      	str	r3, [sp, #64]	@ 0x40
 8009c04:	1f23      	subs	r3, r4, #4
 8009c06:	9311      	str	r3, [sp, #68]	@ 0x44
 8009c08:	1b83      	subs	r3, r0, r6
 8009c0a:	9314      	str	r3, [sp, #80]	@ 0x50
 8009c0c:	9a03      	ldr	r2, [sp, #12]
 8009c0e:	9b05      	ldr	r3, [sp, #20]
 8009c10:	2a0f      	cmp	r2, #15
 8009c12:	eb05 0b02 	add.w	fp, r5, r2
 8009c16:	e953 1302 	ldrd	r1, r3, [r3, #-8]
 8009c1a:	f340 8260 	ble.w	800a0de <st_sssa8_fully_connected+0x582>
 8009c1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c20:	465c      	mov	r4, fp
 8009c22:	18ae      	adds	r6, r5, r2
 8009c24:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8009c26:	682f      	ldr	r7, [r5, #0]
 8009c28:	f8d4 a000 	ldr.w	sl, [r4]
 8009c2c:	ea4f 2037 	mov.w	r0, r7, ror #8
 8009c30:	f8d2 9000 	ldr.w	r9, [r2]
 8009c34:	ea4f 2e3a 	mov.w	lr, sl, ror #8
 8009c38:	fa2f f080 	sxtb16	r0, r0
 8009c3c:	fa2f fc8e 	sxtb16	ip, lr
 8009c40:	fa2f f787 	sxtb16	r7, r7
 8009c44:	fa2f fe8a 	sxtb16	lr, sl
 8009c48:	fb29 1107 	smlad	r1, r9, r7, r1
 8009c4c:	fb29 390e 	smlad	r9, r9, lr, r3
 8009c50:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8009c54:	fb28 1100 	smlad	r1, r8, r0, r1
 8009c58:	fb28 9e0c 	smlad	lr, r8, ip, r9
 8009c5c:	6868      	ldr	r0, [r5, #4]
 8009c5e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8009c62:	ea4f 2330 	mov.w	r3, r0, ror #8
 8009c66:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8009c6a:	ea4f 2a39 	mov.w	sl, r9, ror #8
 8009c6e:	fa2f f383 	sxtb16	r3, r3
 8009c72:	fa2f f78a 	sxtb16	r7, sl
 8009c76:	fa2f f080 	sxtb16	r0, r0
 8009c7a:	fa2f fa89 	sxtb16	sl, r9
 8009c7e:	fb28 1000 	smlad	r0, r8, r0, r1
 8009c82:	fb28 e80a 	smlad	r8, r8, sl, lr
 8009c86:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 8009c8a:	fb2c 0003 	smlad	r0, ip, r3, r0
 8009c8e:	fb2c 8a07 	smlad	sl, ip, r7, r8
 8009c92:	68ab      	ldr	r3, [r5, #8]
 8009c94:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8009c98:	ea4f 2133 	mov.w	r1, r3, ror #8
 8009c9c:	f8d2 c010 	ldr.w	ip, [r2, #16]
 8009ca0:	ea4f 2e38 	mov.w	lr, r8, ror #8
 8009ca4:	fa2f f181 	sxtb16	r1, r1
 8009ca8:	fa2f f98e 	sxtb16	r9, lr
 8009cac:	fa2f f383 	sxtb16	r3, r3
 8009cb0:	fa2f fe88 	sxtb16	lr, r8
 8009cb4:	fb2c 0303 	smlad	r3, ip, r3, r0
 8009cb8:	fb2c ac0e 	smlad	ip, ip, lr, sl
 8009cbc:	6957      	ldr	r7, [r2, #20]
 8009cbe:	fb27 3301 	smlad	r3, r7, r1, r3
 8009cc2:	fb27 ce09 	smlad	lr, r7, r9, ip
 8009cc6:	68e8      	ldr	r0, [r5, #12]
 8009cc8:	3410      	adds	r4, #16
 8009cca:	f854 cc04 	ldr.w	ip, [r4, #-4]
 8009cce:	3510      	adds	r5, #16
 8009cd0:	ea4f 2130 	mov.w	r1, r0, ror #8
 8009cd4:	6997      	ldr	r7, [r2, #24]
 8009cd6:	fa2f f881 	sxtb16	r8, r1
 8009cda:	fa2f f180 	sxtb16	r1, r0
 8009cde:	ea4f 203c 	mov.w	r0, ip, ror #8
 8009ce2:	fa2f fc8c 	sxtb16	ip, ip
 8009ce6:	fa2f f080 	sxtb16	r0, r0
 8009cea:	fb27 3101 	smlad	r1, r7, r1, r3
 8009cee:	fb27 e70c 	smlad	r7, r7, ip, lr
 8009cf2:	69d3      	ldr	r3, [r2, #28]
 8009cf4:	3220      	adds	r2, #32
 8009cf6:	fb23 1108 	smlad	r1, r3, r8, r1
 8009cfa:	fb23 7300 	smlad	r3, r3, r0, r7
 8009cfe:	42b5      	cmp	r5, r6
 8009d00:	d191      	bne.n	8009c26 <st_sssa8_fully_connected+0xca>
 8009d02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d04:	f8dd a040 	ldr.w	sl, [sp, #64]	@ 0x40
 8009d08:	4493      	add	fp, r2
 8009d0a:	4691      	mov	r9, r2
 8009d0c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009d0e:	4591      	cmp	r9, r2
 8009d10:	f280 81e3 	bge.w	800a0da <st_sssa8_fully_connected+0x57e>
 8009d14:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009d16:	4657      	mov	r7, sl
 8009d18:	46d8      	mov	r8, fp
 8009d1a:	eba2 0209 	sub.w	r2, r2, r9
 8009d1e:	0892      	lsrs	r2, r2, #2
 8009d20:	920c      	str	r2, [sp, #48]	@ 0x30
 8009d22:	3201      	adds	r2, #1
 8009d24:	0090      	lsls	r0, r2, #2
 8009d26:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009d28:	eb06 0482 	add.w	r4, r6, r2, lsl #2
 8009d2c:	900a      	str	r0, [sp, #40]	@ 0x28
 8009d2e:	f856 eb04 	ldr.w	lr, [r6], #4
 8009d32:	f858 0b04 	ldr.w	r0, [r8], #4
 8009d36:	ea4f 2c3e 	mov.w	ip, lr, ror #8
 8009d3a:	683a      	ldr	r2, [r7, #0]
 8009d3c:	ea4f 2530 	mov.w	r5, r0, ror #8
 8009d40:	fa2f fc8c 	sxtb16	ip, ip
 8009d44:	fa2f fe8e 	sxtb16	lr, lr
 8009d48:	fa2f f585 	sxtb16	r5, r5
 8009d4c:	fa2f f080 	sxtb16	r0, r0
 8009d50:	fb22 110e 	smlad	r1, r2, lr, r1
 8009d54:	fb22 3300 	smlad	r3, r2, r0, r3
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	3708      	adds	r7, #8
 8009d5c:	fb22 110c 	smlad	r1, r2, ip, r1
 8009d60:	fb22 3305 	smlad	r3, r2, r5, r3
 8009d64:	42a6      	cmp	r6, r4
 8009d66:	d1e2      	bne.n	8009d2e <st_sssa8_fully_connected+0x1d2>
 8009d68:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009d6a:	f109 0904 	add.w	r9, r9, #4
 8009d6e:	eb0a 0ac2 	add.w	sl, sl, r2, lsl #3
 8009d72:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009d74:	4493      	add	fp, r2
 8009d76:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009d78:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 8009d7c:	9d03      	ldr	r5, [sp, #12]
 8009d7e:	454d      	cmp	r5, r9
 8009d80:	dd37      	ble.n	8009df2 <st_sssa8_fully_connected+0x296>
 8009d82:	f9ba 2000 	ldrsh.w	r2, [sl]
 8009d86:	f994 0000 	ldrsb.w	r0, [r4]
 8009d8a:	fb12 1100 	smlabb	r1, r2, r0, r1
 8009d8e:	f99b 0000 	ldrsb.w	r0, [fp]
 8009d92:	fb12 3300 	smlabb	r3, r2, r0, r3
 8009d96:	f109 0201 	add.w	r2, r9, #1
 8009d9a:	42aa      	cmp	r2, r5
 8009d9c:	da25      	bge.n	8009dea <st_sssa8_fully_connected+0x28e>
 8009d9e:	f9ba 2002 	ldrsh.w	r2, [sl, #2]
 8009da2:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8009da6:	fb12 1100 	smlabb	r1, r2, r0, r1
 8009daa:	f99b 0001 	ldrsb.w	r0, [fp, #1]
 8009dae:	fb12 3300 	smlabb	r3, r2, r0, r3
 8009db2:	f109 0202 	add.w	r2, r9, #2
 8009db6:	42aa      	cmp	r2, r5
 8009db8:	da17      	bge.n	8009dea <st_sssa8_fully_connected+0x28e>
 8009dba:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 8009dbe:	f994 0002 	ldrsb.w	r0, [r4, #2]
 8009dc2:	fb12 1100 	smlabb	r1, r2, r0, r1
 8009dc6:	f99b 0002 	ldrsb.w	r0, [fp, #2]
 8009dca:	fb12 3300 	smlabb	r3, r2, r0, r3
 8009dce:	f109 0203 	add.w	r2, r9, #3
 8009dd2:	4295      	cmp	r5, r2
 8009dd4:	dd09      	ble.n	8009dea <st_sssa8_fully_connected+0x28e>
 8009dd6:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
 8009dda:	f99b 0003 	ldrsb.w	r0, [fp, #3]
 8009dde:	fb12 3300 	smlabb	r3, r2, r0, r3
 8009de2:	f994 0003 	ldrsb.w	r0, [r4, #3]
 8009de6:	fb12 1100 	smlabb	r1, r2, r0, r1
 8009dea:	9a03      	ldr	r2, [sp, #12]
 8009dec:	eba2 0909 	sub.w	r9, r2, r9
 8009df0:	444c      	add	r4, r9
 8009df2:	9a04      	ldr	r2, [sp, #16]
 8009df4:	2a15      	cmp	r2, #21
 8009df6:	f340 8140 	ble.w	800a07a <st_sssa8_fully_connected+0x51e>
 8009dfa:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8009dfc:	9a07      	ldr	r2, [sp, #28]
 8009dfe:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8009e00:	fb51 0102 	smmla	r1, r1, r2, r0
 8009e04:	fb53 0302 	smmla	r3, r3, r2, r0
 8009e08:	4129      	asrs	r1, r5
 8009e0a:	9a08      	ldr	r2, [sp, #32]
 8009e0c:	4411      	add	r1, r2
 8009e0e:	f301 0107 	ssat	r1, #8, r1
 8009e12:	9806      	ldr	r0, [sp, #24]
 8009e14:	412b      	asrs	r3, r5
 8009e16:	f800 1c02 	strb.w	r1, [r0, #-2]
 8009e1a:	4413      	add	r3, r2
 8009e1c:	f303 0307 	ssat	r3, #8, r3
 8009e20:	f800 3c01 	strb.w	r3, [r0, #-1]
 8009e24:	9a03      	ldr	r2, [sp, #12]
 8009e26:	9b05      	ldr	r3, [sp, #20]
 8009e28:	18a5      	adds	r5, r4, r2
 8009e2a:	9a06      	ldr	r2, [sp, #24]
 8009e2c:	3308      	adds	r3, #8
 8009e2e:	3202      	adds	r2, #2
 8009e30:	9305      	str	r3, [sp, #20]
 8009e32:	9206      	str	r2, [sp, #24]
 8009e34:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e36:	4293      	cmp	r3, r2
 8009e38:	f47f aee8 	bne.w	8009c0c <st_sssa8_fully_connected+0xb0>
 8009e3c:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8009e3e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009e40:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8009e44:	9225      	str	r2, [sp, #148]	@ 0x94
 8009e46:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009e48:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009e4c:	9324      	str	r3, [sp, #144]	@ 0x90
 8009e4e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009e50:	07db      	lsls	r3, r3, #31
 8009e52:	d54a      	bpl.n	8009eea <st_sssa8_fully_connected+0x38e>
 8009e54:	9a03      	ldr	r2, [sp, #12]
 8009e56:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009e58:	0897      	lsrs	r7, r2, #2
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f000 8175 	beq.w	800a14a <st_sssa8_fully_connected+0x5ee>
 8009e60:	eb05 0687 	add.w	r6, r5, r7, lsl #2
 8009e64:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8009e66:	f855 2b04 	ldr.w	r2, [r5], #4
 8009e6a:	6801      	ldr	r1, [r0, #0]
 8009e6c:	fa2f f482 	sxtb16	r4, r2
 8009e70:	ea4f 2232 	mov.w	r2, r2, ror #8
 8009e74:	fa2f f282 	sxtb16	r2, r2
 8009e78:	fb21 3304 	smlad	r3, r1, r4, r3
 8009e7c:	6841      	ldr	r1, [r0, #4]
 8009e7e:	3008      	adds	r0, #8
 8009e80:	fb21 3302 	smlad	r3, r1, r2, r3
 8009e84:	42b5      	cmp	r5, r6
 8009e86:	d1ee      	bne.n	8009e66 <st_sssa8_fully_connected+0x30a>
 8009e88:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8009e8a:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
 8009e8e:	9226      	str	r2, [sp, #152]	@ 0x98
 8009e90:	9a03      	ldr	r2, [sp, #12]
 8009e92:	f012 0203 	ands.w	r2, r2, #3
 8009e96:	d016      	beq.n	8009ec6 <st_sssa8_fully_connected+0x36a>
 8009e98:	3a01      	subs	r2, #1
 8009e9a:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8009e9c:	f996 1000 	ldrsb.w	r1, [r6]
 8009ea0:	8800      	ldrh	r0, [r0, #0]
 8009ea2:	b292      	uxth	r2, r2
 8009ea4:	fb10 3301 	smlabb	r3, r0, r1, r3
 8009ea8:	b16a      	cbz	r2, 8009ec6 <st_sssa8_fully_connected+0x36a>
 8009eaa:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8009eac:	2a01      	cmp	r2, #1
 8009eae:	f996 1001 	ldrsb.w	r1, [r6, #1]
 8009eb2:	8840      	ldrh	r0, [r0, #2]
 8009eb4:	fb10 3301 	smlabb	r3, r0, r1, r3
 8009eb8:	d005      	beq.n	8009ec6 <st_sssa8_fully_connected+0x36a>
 8009eba:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8009ebc:	f996 2002 	ldrsb.w	r2, [r6, #2]
 8009ec0:	8889      	ldrh	r1, [r1, #4]
 8009ec2:	fb11 3302 	smlabb	r3, r1, r2, r3
 8009ec6:	9a04      	ldr	r2, [sp, #16]
 8009ec8:	2a15      	cmp	r2, #21
 8009eca:	f340 811c 	ble.w	800a106 <st_sssa8_fully_connected+0x5aa>
 8009ece:	1e91      	subs	r1, r2, #2
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	408a      	lsls	r2, r1
 8009ed4:	9907      	ldr	r1, [sp, #28]
 8009ed6:	fb53 2301 	smmla	r3, r3, r1, r2
 8009eda:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009edc:	4113      	asrs	r3, r2
 8009ede:	9a08      	ldr	r2, [sp, #32]
 8009ee0:	4413      	add	r3, r2
 8009ee2:	f303 0307 	ssat	r3, #8, r3
 8009ee6:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8009ee8:	7013      	strb	r3, [r2, #0]
 8009eea:	2000      	movs	r0, #0
 8009eec:	b017      	add	sp, #92	@ 0x5c
 8009eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ef2:	9308      	str	r3, [sp, #32]
 8009ef4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	f47f ae52 	bne.w	8009ba0 <st_sssa8_fully_connected+0x44>
 8009efc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009efe:	4270      	negs	r0, r6
 8009f00:	eac0 4000 	pkhbt	r0, r0, r0, lsl #16
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d0f0      	beq.n	8009eea <st_sssa8_fully_connected+0x38e>
 8009f08:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8009f0a:	3301      	adds	r3, #1
 8009f0c:	9903      	ldr	r1, [sp, #12]
 8009f0e:	b236      	sxth	r6, r6
 8009f10:	18d3      	adds	r3, r2, r3
 8009f12:	9c04      	ldr	r4, [sp, #16]
 8009f14:	f1a1 0810 	sub.w	r8, r1, #16
 8009f18:	f102 0e01 	add.w	lr, r2, #1
 8009f1c:	9305      	str	r3, [sp, #20]
 8009f1e:	2201      	movs	r2, #1
 8009f20:	f028 080f 	bic.w	r8, r8, #15
 8009f24:	1ea3      	subs	r3, r4, #2
 8009f26:	468c      	mov	ip, r1
 8009f28:	f8dd 9090 	ldr.w	r9, [sp, #144]	@ 0x90
 8009f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8009f30:	f108 0810 	add.w	r8, r8, #16
 8009f34:	f1bc 0f0f 	cmp.w	ip, #15
 8009f38:	f8cd b00c 	str.w	fp, [sp, #12]
 8009f3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f3e:	eb0b 0308 	add.w	r3, fp, r8
 8009f42:	9306      	str	r3, [sp, #24]
 8009f44:	eba2 0304 	sub.w	r3, r2, r4
 8009f48:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f4a:	f859 3b04 	ldr.w	r3, [r9], #4
 8009f4e:	dd7e      	ble.n	800a04e <st_sssa8_fully_connected+0x4f2>
 8009f50:	eb05 0708 	add.w	r7, r5, r8
 8009f54:	462a      	mov	r2, r5
 8009f56:	9d03      	ldr	r5, [sp, #12]
 8009f58:	6811      	ldr	r1, [r2, #0]
 8009f5a:	682c      	ldr	r4, [r5, #0]
 8009f5c:	fa2f fb81 	sxtb16	fp, r1
 8009f60:	ea4f 2a34 	mov.w	sl, r4, ror #8
 8009f64:	ea4f 2131 	mov.w	r1, r1, ror #8
 8009f68:	fa20 fa8a 	sxtab16	sl, r0, sl
 8009f6c:	fa2f f181 	sxtb16	r1, r1
 8009f70:	fa20 f484 	sxtab16	r4, r0, r4
 8009f74:	fb24 340b 	smlad	r4, r4, fp, r3
 8009f78:	fb2a 4b01 	smlad	fp, sl, r1, r4
 8009f7c:	6851      	ldr	r1, [r2, #4]
 8009f7e:	f8d5 a004 	ldr.w	sl, [r5, #4]
 8009f82:	fa2f f481 	sxtb16	r4, r1
 8009f86:	ea4f 233a 	mov.w	r3, sl, ror #8
 8009f8a:	ea4f 2131 	mov.w	r1, r1, ror #8
 8009f8e:	fa20 f383 	sxtab16	r3, r0, r3
 8009f92:	fa2f f181 	sxtb16	r1, r1
 8009f96:	fa20 fa8a 	sxtab16	sl, r0, sl
 8009f9a:	fb2a ba04 	smlad	sl, sl, r4, fp
 8009f9e:	fb23 a401 	smlad	r4, r3, r1, sl
 8009fa2:	6891      	ldr	r1, [r2, #8]
 8009fa4:	68ab      	ldr	r3, [r5, #8]
 8009fa6:	fa2f fb81 	sxtb16	fp, r1
 8009faa:	ea4f 2a33 	mov.w	sl, r3, ror #8
 8009fae:	ea4f 2131 	mov.w	r1, r1, ror #8
 8009fb2:	fa20 fa8a 	sxtab16	sl, r0, sl
 8009fb6:	fa2f f181 	sxtb16	r1, r1
 8009fba:	fa20 f383 	sxtab16	r3, r0, r3
 8009fbe:	fb23 430b 	smlad	r3, r3, fp, r4
 8009fc2:	fb2a 3301 	smlad	r3, sl, r1, r3
 8009fc6:	f8d2 a00c 	ldr.w	sl, [r2, #12]
 8009fca:	3510      	adds	r5, #16
 8009fcc:	f855 1c04 	ldr.w	r1, [r5, #-4]
 8009fd0:	3210      	adds	r2, #16
 8009fd2:	ea4f 2b3a 	mov.w	fp, sl, ror #8
 8009fd6:	ea4f 2431 	mov.w	r4, r1, ror #8
 8009fda:	fa2f fa8a 	sxtb16	sl, sl
 8009fde:	fa2f fb8b 	sxtb16	fp, fp
 8009fe2:	fa20 f181 	sxtab16	r1, r0, r1
 8009fe6:	fa20 f484 	sxtab16	r4, r0, r4
 8009fea:	fb21 330a 	smlad	r3, r1, sl, r3
 8009fee:	fb24 330b 	smlad	r3, r4, fp, r3
 8009ff2:	4297      	cmp	r7, r2
 8009ff4:	d1b0      	bne.n	8009f58 <st_sssa8_fully_connected+0x3fc>
 8009ff6:	4645      	mov	r5, r8
 8009ff8:	9f06      	ldr	r7, [sp, #24]
 8009ffa:	45ac      	cmp	ip, r5
 8009ffc:	dd2c      	ble.n	800a058 <st_sssa8_fully_connected+0x4fc>
 8009ffe:	ebac 0505 	sub.w	r5, ip, r5
 800a002:	4415      	add	r5, r2
 800a004:	4611      	mov	r1, r2
 800a006:	f917 4b01 	ldrsb.w	r4, [r7], #1
 800a00a:	3201      	adds	r2, #1
 800a00c:	7809      	ldrb	r1, [r1, #0]
 800a00e:	1ba4      	subs	r4, r4, r6
 800a010:	42aa      	cmp	r2, r5
 800a012:	b249      	sxtb	r1, r1
 800a014:	fb14 3301 	smlabb	r3, r4, r1, r3
 800a018:	d1f4      	bne.n	800a004 <st_sssa8_fully_connected+0x4a8>
 800a01a:	9a04      	ldr	r2, [sp, #16]
 800a01c:	2a15      	cmp	r2, #21
 800a01e:	dd1f      	ble.n	800a060 <st_sssa8_fully_connected+0x504>
 800a020:	9a07      	ldr	r2, [sp, #28]
 800a022:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a024:	fb53 1302 	smmla	r3, r3, r2, r1
 800a028:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a02a:	4113      	asrs	r3, r2
 800a02c:	9a08      	ldr	r2, [sp, #32]
 800a02e:	4413      	add	r3, r2
 800a030:	f303 0307 	ssat	r3, #8, r3
 800a034:	f80e 3c01 	strb.w	r3, [lr, #-1]
 800a038:	f10e 0e01 	add.w	lr, lr, #1
 800a03c:	9b05      	ldr	r3, [sp, #20]
 800a03e:	459e      	cmp	lr, r3
 800a040:	f43f af53 	beq.w	8009eea <st_sssa8_fully_connected+0x38e>
 800a044:	f1bc 0f0f 	cmp.w	ip, #15
 800a048:	f859 3b04 	ldr.w	r3, [r9], #4
 800a04c:	dc80      	bgt.n	8009f50 <st_sssa8_fully_connected+0x3f4>
 800a04e:	462a      	mov	r2, r5
 800a050:	2500      	movs	r5, #0
 800a052:	9f03      	ldr	r7, [sp, #12]
 800a054:	45ac      	cmp	ip, r5
 800a056:	dcd2      	bgt.n	8009ffe <st_sssa8_fully_connected+0x4a2>
 800a058:	4615      	mov	r5, r2
 800a05a:	9a04      	ldr	r2, [sp, #16]
 800a05c:	2a15      	cmp	r2, #21
 800a05e:	dcdf      	bgt.n	800a020 <st_sssa8_fully_connected+0x4c4>
 800a060:	2a00      	cmp	r2, #0
 800a062:	dd42      	ble.n	800a0ea <st_sssa8_fully_connected+0x58e>
 800a064:	005b      	lsls	r3, r3, #1
 800a066:	e9dd 1407 	ldrd	r1, r4, [sp, #28]
 800a06a:	fb53 4301 	smmla	r3, r3, r1, r4
 800a06e:	4113      	asrs	r3, r2
 800a070:	f303 0307 	ssat	r3, #8, r3
 800a074:	f80e 3c01 	strb.w	r3, [lr, #-1]
 800a078:	e7de      	b.n	800a038 <st_sssa8_fully_connected+0x4dc>
 800a07a:	2a00      	cmp	r2, #0
 800a07c:	dd13      	ble.n	800a0a6 <st_sssa8_fully_connected+0x54a>
 800a07e:	0049      	lsls	r1, r1, #1
 800a080:	005b      	lsls	r3, r3, #1
 800a082:	e9dd 0507 	ldrd	r0, r5, [sp, #28]
 800a086:	fb51 5100 	smmla	r1, r1, r0, r5
 800a08a:	fb53 5300 	smmla	r3, r3, r0, r5
 800a08e:	4111      	asrs	r1, r2
 800a090:	f301 0107 	ssat	r1, #8, r1
 800a094:	9806      	ldr	r0, [sp, #24]
 800a096:	4113      	asrs	r3, r2
 800a098:	f800 1c02 	strb.w	r1, [r0, #-2]
 800a09c:	f303 0307 	ssat	r3, #8, r3
 800a0a0:	f800 3c01 	strb.w	r3, [r0, #-1]
 800a0a4:	e6be      	b.n	8009e24 <st_sssa8_fully_connected+0x2c8>
 800a0a6:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800a0a8:	fa01 f200 	lsl.w	r2, r1, r0
 800a0ac:	f302 021f 	ssat	r2, #32, r2
 800a0b0:	9907      	ldr	r1, [sp, #28]
 800a0b2:	fb52 f211 	smmulr	r2, r2, r1
 800a0b6:	4083      	lsls	r3, r0
 800a0b8:	f303 031f 	ssat	r3, #32, r3
 800a0bc:	fb53 f311 	smmulr	r3, r3, r1
 800a0c0:	9908      	ldr	r1, [sp, #32]
 800a0c2:	440a      	add	r2, r1
 800a0c4:	f302 0207 	ssat	r2, #8, r2
 800a0c8:	9806      	ldr	r0, [sp, #24]
 800a0ca:	440b      	add	r3, r1
 800a0cc:	f800 2c02 	strb.w	r2, [r0, #-2]
 800a0d0:	f303 0307 	ssat	r3, #8, r3
 800a0d4:	f800 3c01 	strb.w	r3, [r0, #-1]
 800a0d8:	e6a4      	b.n	8009e24 <st_sssa8_fully_connected+0x2c8>
 800a0da:	4634      	mov	r4, r6
 800a0dc:	e64e      	b.n	8009d7c <st_sssa8_fully_connected+0x220>
 800a0de:	462e      	mov	r6, r5
 800a0e0:	f8dd a098 	ldr.w	sl, [sp, #152]	@ 0x98
 800a0e4:	f04f 0900 	mov.w	r9, #0
 800a0e8:	e610      	b.n	8009d0c <st_sssa8_fully_connected+0x1b0>
 800a0ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a0ec:	4093      	lsls	r3, r2
 800a0ee:	f303 031f 	ssat	r3, #32, r3
 800a0f2:	9a07      	ldr	r2, [sp, #28]
 800a0f4:	fb53 f312 	smmulr	r3, r3, r2
 800a0f8:	9a08      	ldr	r2, [sp, #32]
 800a0fa:	4413      	add	r3, r2
 800a0fc:	f303 0307 	ssat	r3, #8, r3
 800a100:	f80e 3c01 	strb.w	r3, [lr, #-1]
 800a104:	e798      	b.n	800a038 <st_sssa8_fully_connected+0x4dc>
 800a106:	2a00      	cmp	r2, #0
 800a108:	dd0d      	ble.n	800a126 <st_sssa8_fully_connected+0x5ca>
 800a10a:	005b      	lsls	r3, r3, #1
 800a10c:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
 800a110:	fb53 0301 	smmla	r3, r3, r1, r0
 800a114:	4113      	asrs	r3, r2
 800a116:	f303 0307 	ssat	r3, #8, r3
 800a11a:	2000      	movs	r0, #0
 800a11c:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 800a11e:	7013      	strb	r3, [r2, #0]
 800a120:	b017      	add	sp, #92	@ 0x5c
 800a122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a126:	f1c2 0201 	rsb	r2, r2, #1
 800a12a:	4093      	lsls	r3, r2
 800a12c:	f303 031f 	ssat	r3, #32, r3
 800a130:	9a07      	ldr	r2, [sp, #28]
 800a132:	fb53 f312 	smmulr	r3, r3, r2
 800a136:	9a08      	ldr	r2, [sp, #32]
 800a138:	441a      	add	r2, r3
 800a13a:	f302 0307 	ssat	r3, #8, r2
 800a13e:	2000      	movs	r0, #0
 800a140:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 800a142:	7013      	strb	r3, [r2, #0]
 800a144:	b017      	add	sp, #92	@ 0x5c
 800a146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a14a:	462e      	mov	r6, r5
 800a14c:	e6a0      	b.n	8009e90 <st_sssa8_fully_connected+0x334>
 800a14e:	bf00      	nop

0800a150 <st_int8_copy>:
 800a150:	4288      	cmp	r0, r1
 800a152:	d010      	beq.n	800a176 <st_int8_copy+0x26>
 800a154:	b17a      	cbz	r2, 800a176 <st_int8_copy+0x26>
 800a156:	4288      	cmp	r0, r1
 800a158:	eb00 0302 	add.w	r3, r0, r2
 800a15c:	d20c      	bcs.n	800a178 <st_int8_copy+0x28>
 800a15e:	428b      	cmp	r3, r1
 800a160:	d90a      	bls.n	800a178 <st_int8_copy+0x28>
 800a162:	4283      	cmp	r3, r0
 800a164:	440a      	add	r2, r1
 800a166:	d906      	bls.n	800a176 <st_int8_copy+0x26>
 800a168:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 800a16c:	4283      	cmp	r3, r0
 800a16e:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800a172:	d1f9      	bne.n	800a168 <st_int8_copy+0x18>
 800a174:	4770      	bx	lr
 800a176:	4770      	bx	lr
 800a178:	078b      	lsls	r3, r1, #30
 800a17a:	d102      	bne.n	800a182 <st_int8_copy+0x32>
 800a17c:	e008      	b.n	800a190 <st_int8_copy+0x40>
 800a17e:	2a00      	cmp	r2, #0
 800a180:	d04d      	beq.n	800a21e <st_int8_copy+0xce>
 800a182:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800a186:	3a01      	subs	r2, #1
 800a188:	f801 3b01 	strb.w	r3, [r1], #1
 800a18c:	078b      	lsls	r3, r1, #30
 800a18e:	d1f6      	bne.n	800a17e <st_int8_copy+0x2e>
 800a190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a194:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 800a198:	d05e      	beq.n	800a258 <st_int8_copy+0x108>
 800a19a:	ea40 0301 	orr.w	r3, r0, r1
 800a19e:	075b      	lsls	r3, r3, #29
 800a1a0:	d13e      	bne.n	800a220 <st_int8_copy+0xd0>
 800a1a2:	f10e 33ff 	add.w	r3, lr, #4294967295
 800a1a6:	2b01      	cmp	r3, #1
 800a1a8:	d93a      	bls.n	800a220 <st_int8_copy+0xd0>
 800a1aa:	f100 0310 	add.w	r3, r0, #16
 800a1ae:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800a1b2:	f101 0c10 	add.w	ip, r1, #16
 800a1b6:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 800a1ba:	3310      	adds	r3, #16
 800a1bc:	f10c 0c10 	add.w	ip, ip, #16
 800a1c0:	ed13 6b08 	vldr	d6, [r3, #-32]	@ 0xffffffe0
 800a1c4:	ed13 7b06 	vldr	d7, [r3, #-24]	@ 0xffffffe8
 800a1c8:	4573      	cmp	r3, lr
 800a1ca:	ed0c 6b08 	vstr	d6, [ip, #-32]	@ 0xffffffe0
 800a1ce:	ed0c 7b06 	vstr	d7, [ip, #-24]	@ 0xffffffe8
 800a1d2:	d1f2      	bne.n	800a1ba <st_int8_copy+0x6a>
 800a1d4:	f3c2 0381 	ubfx	r3, r2, #2, #2
 800a1d8:	4421      	add	r1, r4
 800a1da:	4420      	add	r0, r4
 800a1dc:	f002 0203 	and.w	r2, r2, #3
 800a1e0:	b16b      	cbz	r3, 800a1fe <st_int8_copy+0xae>
 800a1e2:	6804      	ldr	r4, [r0, #0]
 800a1e4:	600c      	str	r4, [r1, #0]
 800a1e6:	1e5c      	subs	r4, r3, #1
 800a1e8:	d005      	beq.n	800a1f6 <st_int8_copy+0xa6>
 800a1ea:	6845      	ldr	r5, [r0, #4]
 800a1ec:	2c01      	cmp	r4, #1
 800a1ee:	604d      	str	r5, [r1, #4]
 800a1f0:	d001      	beq.n	800a1f6 <st_int8_copy+0xa6>
 800a1f2:	6884      	ldr	r4, [r0, #8]
 800a1f4:	608c      	str	r4, [r1, #8]
 800a1f6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800a1fa:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800a1fe:	b162      	cbz	r2, 800a21a <st_int8_copy+0xca>
 800a200:	f990 3000 	ldrsb.w	r3, [r0]
 800a204:	3a01      	subs	r2, #1
 800a206:	700b      	strb	r3, [r1, #0]
 800a208:	d007      	beq.n	800a21a <st_int8_copy+0xca>
 800a20a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800a20e:	2a01      	cmp	r2, #1
 800a210:	704b      	strb	r3, [r1, #1]
 800a212:	d002      	beq.n	800a21a <st_int8_copy+0xca>
 800a214:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800a218:	708b      	strb	r3, [r1, #2]
 800a21a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a21e:	4770      	bx	lr
 800a220:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800a224:	460b      	mov	r3, r1
 800a226:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 800a22a:	4684      	mov	ip, r0
 800a22c:	f8dc 8000 	ldr.w	r8, [ip]
 800a230:	3310      	adds	r3, #16
 800a232:	f8dc 7004 	ldr.w	r7, [ip, #4]
 800a236:	f10c 0c10 	add.w	ip, ip, #16
 800a23a:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 800a23e:	f85c 5c04 	ldr.w	r5, [ip, #-4]
 800a242:	f843 8c10 	str.w	r8, [r3, #-16]
 800a246:	f843 7c0c 	str.w	r7, [r3, #-12]
 800a24a:	f843 6c08 	str.w	r6, [r3, #-8]
 800a24e:	f843 5c04 	str.w	r5, [r3, #-4]
 800a252:	459e      	cmp	lr, r3
 800a254:	d1ea      	bne.n	800a22c <st_int8_copy+0xdc>
 800a256:	e7bd      	b.n	800a1d4 <st_int8_copy+0x84>
 800a258:	0893      	lsrs	r3, r2, #2
 800a25a:	f002 0203 	and.w	r2, r2, #3
 800a25e:	e7bf      	b.n	800a1e0 <st_int8_copy+0x90>

0800a260 <st_int8_reordered_no_shift_zero>:
 800a260:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a262:	0897      	lsrs	r7, r2, #2
 800a264:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 800a268:	d02f      	beq.n	800a2ca <st_int8_reordered_no_shift_zero+0x6a>
 800a26a:	eb00 0587 	add.w	r5, r0, r7, lsl #2
 800a26e:	460c      	mov	r4, r1
 800a270:	f850 cb04 	ldr.w	ip, [r0], #4
 800a274:	ea4f 2e3c 	mov.w	lr, ip, ror #8
 800a278:	fa2f fe8e 	sxtb16	lr, lr
 800a27c:	fade fe03 	ssub16	lr, lr, r3
 800a280:	fa2f fc8c 	sxtb16	ip, ip
 800a284:	fadc fc03 	ssub16	ip, ip, r3
 800a288:	42a8      	cmp	r0, r5
 800a28a:	f8c4 c000 	str.w	ip, [r4]
 800a28e:	f8c4 e004 	str.w	lr, [r4, #4]
 800a292:	f104 0408 	add.w	r4, r4, #8
 800a296:	d1eb      	bne.n	800a270 <st_int8_reordered_no_shift_zero+0x10>
 800a298:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800a29c:	f012 0203 	ands.w	r2, r2, #3
 800a2a0:	d012      	beq.n	800a2c8 <st_int8_reordered_no_shift_zero+0x68>
 800a2a2:	f995 0000 	ldrsb.w	r0, [r5]
 800a2a6:	b273      	sxtb	r3, r6
 800a2a8:	3a01      	subs	r2, #1
 800a2aa:	eba0 0003 	sub.w	r0, r0, r3
 800a2ae:	8008      	strh	r0, [r1, #0]
 800a2b0:	d00a      	beq.n	800a2c8 <st_int8_reordered_no_shift_zero+0x68>
 800a2b2:	f995 0001 	ldrsb.w	r0, [r5, #1]
 800a2b6:	2a01      	cmp	r2, #1
 800a2b8:	eba0 0003 	sub.w	r0, r0, r3
 800a2bc:	8048      	strh	r0, [r1, #2]
 800a2be:	d003      	beq.n	800a2c8 <st_int8_reordered_no_shift_zero+0x68>
 800a2c0:	f995 2002 	ldrsb.w	r2, [r5, #2]
 800a2c4:	1ad3      	subs	r3, r2, r3
 800a2c6:	808b      	strh	r3, [r1, #4]
 800a2c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2ca:	4605      	mov	r5, r0
 800a2cc:	e7e6      	b.n	800a29c <st_int8_reordered_no_shift_zero+0x3c>
 800a2ce:	bf00      	nop

0800a2d0 <st_int8_to16_no_shift>:
 800a2d0:	b570      	push	{r4, r5, r6, lr}
 800a2d2:	f1b2 0410 	subs.w	r4, r2, #16
 800a2d6:	f04f 0e00 	mov.w	lr, #0
 800a2da:	d438      	bmi.n	800a34e <st_int8_to16_no_shift+0x7e>
 800a2dc:	f8d0 c000 	ldr.w	ip, [r0]
 800a2e0:	6843      	ldr	r3, [r0, #4]
 800a2e2:	fa2f f59c 	sxtb16	r5, ip, ror #8
 800a2e6:	fa2f fc8c 	sxtb16	ip, ip
 800a2ea:	eac5 462c 	pkhtb	r6, r5, ip, asr #16
 800a2ee:	eacc 4c05 	pkhbt	ip, ip, r5, lsl #16
 800a2f2:	fa2f f593 	sxtb16	r5, r3, ror #8
 800a2f6:	3010      	adds	r0, #16
 800a2f8:	604e      	str	r6, [r1, #4]
 800a2fa:	f8c1 c000 	str.w	ip, [r1]
 800a2fe:	fa2f f383 	sxtb16	r3, r3
 800a302:	eac5 4623 	pkhtb	r6, r5, r3, asr #16
 800a306:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 800a30a:	60ce      	str	r6, [r1, #12]
 800a30c:	608b      	str	r3, [r1, #8]
 800a30e:	f850 cc08 	ldr.w	ip, [r0, #-8]
 800a312:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800a316:	fa2f f59c 	sxtb16	r5, ip, ror #8
 800a31a:	fa2f fc8c 	sxtb16	ip, ip
 800a31e:	eac5 462c 	pkhtb	r6, r5, ip, asr #16
 800a322:	eacc 4c05 	pkhbt	ip, ip, r5, lsl #16
 800a326:	fa2f f593 	sxtb16	r5, r3, ror #8
 800a32a:	f10e 0e10 	add.w	lr, lr, #16
 800a32e:	f8c1 c010 	str.w	ip, [r1, #16]
 800a332:	614e      	str	r6, [r1, #20]
 800a334:	3120      	adds	r1, #32
 800a336:	45a6      	cmp	lr, r4
 800a338:	fa2f f383 	sxtb16	r3, r3
 800a33c:	eac5 4c23 	pkhtb	ip, r5, r3, asr #16
 800a340:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 800a344:	f841 cc04 	str.w	ip, [r1, #-4]
 800a348:	f841 3c08 	str.w	r3, [r1, #-8]
 800a34c:	ddc6      	ble.n	800a2dc <st_int8_to16_no_shift+0xc>
 800a34e:	1f16      	subs	r6, r2, #4
 800a350:	4576      	cmp	r6, lr
 800a352:	db12      	blt.n	800a37a <st_int8_to16_no_shift+0xaa>
 800a354:	f850 3b04 	ldr.w	r3, [r0], #4
 800a358:	fa2f f493 	sxtb16	r4, r3, ror #8
 800a35c:	f10e 0e04 	add.w	lr, lr, #4
 800a360:	3108      	adds	r1, #8
 800a362:	fa2f f383 	sxtb16	r3, r3
 800a366:	45b6      	cmp	lr, r6
 800a368:	eac4 4523 	pkhtb	r5, r4, r3, asr #16
 800a36c:	eac3 4304 	pkhbt	r3, r3, r4, lsl #16
 800a370:	f841 5c04 	str.w	r5, [r1, #-4]
 800a374:	f841 3c08 	str.w	r3, [r1, #-8]
 800a378:	ddec      	ble.n	800a354 <st_int8_to16_no_shift+0x84>
 800a37a:	4572      	cmp	r2, lr
 800a37c:	dd08      	ble.n	800a390 <st_int8_to16_no_shift+0xc0>
 800a37e:	eba2 020e 	sub.w	r2, r2, lr
 800a382:	4402      	add	r2, r0
 800a384:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800a388:	4290      	cmp	r0, r2
 800a38a:	f821 3b02 	strh.w	r3, [r1], #2
 800a38e:	d1f9      	bne.n	800a384 <st_int8_to16_no_shift+0xb4>
 800a390:	bd70      	pop	{r4, r5, r6, pc}
 800a392:	bf00      	nop

0800a394 <st_int8_to16_no_shift_interleaved>:
 800a394:	b570      	push	{r4, r5, r6, lr}
 800a396:	f1b2 0510 	subs.w	r5, r2, #16
 800a39a:	f04f 0e00 	mov.w	lr, #0
 800a39e:	d428      	bmi.n	800a3f2 <st_int8_to16_no_shift_interleaved+0x5e>
 800a3a0:	f8d0 c000 	ldr.w	ip, [r0]
 800a3a4:	6843      	ldr	r3, [r0, #4]
 800a3a6:	fa2f f69c 	sxtb16	r6, ip, ror #8
 800a3aa:	fa2f fc8c 	sxtb16	ip, ip
 800a3ae:	fa2f f493 	sxtb16	r4, r3, ror #8
 800a3b2:	3010      	adds	r0, #16
 800a3b4:	600e      	str	r6, [r1, #0]
 800a3b6:	f8c1 c004 	str.w	ip, [r1, #4]
 800a3ba:	608c      	str	r4, [r1, #8]
 800a3bc:	fa2f f383 	sxtb16	r3, r3
 800a3c0:	60cb      	str	r3, [r1, #12]
 800a3c2:	f850 cc08 	ldr.w	ip, [r0, #-8]
 800a3c6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800a3ca:	fa2f f69c 	sxtb16	r6, ip, ror #8
 800a3ce:	fa2f fc8c 	sxtb16	ip, ip
 800a3d2:	fa2f f493 	sxtb16	r4, r3, ror #8
 800a3d6:	f10e 0e10 	add.w	lr, lr, #16
 800a3da:	610e      	str	r6, [r1, #16]
 800a3dc:	f8c1 c014 	str.w	ip, [r1, #20]
 800a3e0:	3120      	adds	r1, #32
 800a3e2:	45ae      	cmp	lr, r5
 800a3e4:	f841 4c08 	str.w	r4, [r1, #-8]
 800a3e8:	fa2f f383 	sxtb16	r3, r3
 800a3ec:	f841 3c04 	str.w	r3, [r1, #-4]
 800a3f0:	ddd6      	ble.n	800a3a0 <st_int8_to16_no_shift_interleaved+0xc>
 800a3f2:	1f14      	subs	r4, r2, #4
 800a3f4:	4574      	cmp	r4, lr
 800a3f6:	db10      	blt.n	800a41a <st_int8_to16_no_shift_interleaved+0x86>
 800a3f8:	ebae 0e00 	sub.w	lr, lr, r0
 800a3fc:	f850 3b04 	ldr.w	r3, [r0], #4
 800a400:	fa2f fc93 	sxtb16	ip, r3, ror #8
 800a404:	eb00 020e 	add.w	r2, r0, lr
 800a408:	f8c1 c000 	str.w	ip, [r1]
 800a40c:	3108      	adds	r1, #8
 800a40e:	4294      	cmp	r4, r2
 800a410:	fa2f f383 	sxtb16	r3, r3
 800a414:	f841 3c04 	str.w	r3, [r1, #-4]
 800a418:	daf0      	bge.n	800a3fc <st_int8_to16_no_shift_interleaved+0x68>
 800a41a:	bd70      	pop	{r4, r5, r6, pc}

0800a41c <st_int8_to16_dual>:
 800a41c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a420:	4698      	mov	r8, r3
 800a422:	085b      	lsrs	r3, r3, #1
 800a424:	eb00 0c02 	add.w	ip, r0, r2
 800a428:	f000 80b9 	beq.w	800a59e <st_int8_to16_dual+0x182>
 800a42c:	f1a2 0710 	sub.w	r7, r2, #16
 800a430:	1f16      	subs	r6, r2, #4
 800a432:	2f00      	cmp	r7, #0
 800a434:	f04f 0500 	mov.w	r5, #0
 800a438:	db73      	blt.n	800a522 <st_int8_to16_dual+0x106>
 800a43a:	f8d0 e000 	ldr.w	lr, [r0]
 800a43e:	f8dc 4000 	ldr.w	r4, [ip]
 800a442:	fa2f f99e 	sxtb16	r9, lr, ror #8
 800a446:	fa2f fe8e 	sxtb16	lr, lr
 800a44a:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 800a44e:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 800a452:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a456:	f8c1 e000 	str.w	lr, [r1]
 800a45a:	f8c1 a008 	str.w	sl, [r1, #8]
 800a45e:	fa2f f484 	sxtb16	r4, r4
 800a462:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 800a466:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 800a46a:	f8c1 e00c 	str.w	lr, [r1, #12]
 800a46e:	604c      	str	r4, [r1, #4]
 800a470:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800a474:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800a478:	fa2f f99e 	sxtb16	r9, lr, ror #8
 800a47c:	fa2f fe8e 	sxtb16	lr, lr
 800a480:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 800a484:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 800a488:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a48c:	f8c1 e010 	str.w	lr, [r1, #16]
 800a490:	f8c1 a018 	str.w	sl, [r1, #24]
 800a494:	fa2f f484 	sxtb16	r4, r4
 800a498:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 800a49c:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 800a4a0:	f8c1 e01c 	str.w	lr, [r1, #28]
 800a4a4:	614c      	str	r4, [r1, #20]
 800a4a6:	f8d0 e008 	ldr.w	lr, [r0, #8]
 800a4aa:	f8dc 4008 	ldr.w	r4, [ip, #8]
 800a4ae:	fa2f f99e 	sxtb16	r9, lr, ror #8
 800a4b2:	fa2f fe8e 	sxtb16	lr, lr
 800a4b6:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 800a4ba:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 800a4be:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a4c2:	3010      	adds	r0, #16
 800a4c4:	f10c 0c10 	add.w	ip, ip, #16
 800a4c8:	f8c1 e020 	str.w	lr, [r1, #32]
 800a4cc:	f8c1 a028 	str.w	sl, [r1, #40]	@ 0x28
 800a4d0:	fa2f f484 	sxtb16	r4, r4
 800a4d4:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 800a4d8:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 800a4dc:	f8c1 e02c 	str.w	lr, [r1, #44]	@ 0x2c
 800a4e0:	624c      	str	r4, [r1, #36]	@ 0x24
 800a4e2:	f850 ec04 	ldr.w	lr, [r0, #-4]
 800a4e6:	f85c 4c04 	ldr.w	r4, [ip, #-4]
 800a4ea:	fa2f fa9e 	sxtb16	sl, lr, ror #8
 800a4ee:	fa2f fe8e 	sxtb16	lr, lr
 800a4f2:	eaca 492e 	pkhtb	r9, sl, lr, asr #16
 800a4f6:	eace 4e0a 	pkhbt	lr, lr, sl, lsl #16
 800a4fa:	fa2f fa94 	sxtb16	sl, r4, ror #8
 800a4fe:	3510      	adds	r5, #16
 800a500:	f8c1 e030 	str.w	lr, [r1, #48]	@ 0x30
 800a504:	f8c1 9038 	str.w	r9, [r1, #56]	@ 0x38
 800a508:	3140      	adds	r1, #64	@ 0x40
 800a50a:	42bd      	cmp	r5, r7
 800a50c:	fa2f f484 	sxtb16	r4, r4
 800a510:	eaca 4e24 	pkhtb	lr, sl, r4, asr #16
 800a514:	eac4 440a 	pkhbt	r4, r4, sl, lsl #16
 800a518:	f841 ec04 	str.w	lr, [r1, #-4]
 800a51c:	f841 4c0c 	str.w	r4, [r1, #-12]
 800a520:	dd8b      	ble.n	800a43a <st_int8_to16_dual+0x1e>
 800a522:	42ae      	cmp	r6, r5
 800a524:	db1e      	blt.n	800a564 <st_int8_to16_dual+0x148>
 800a526:	f850 4b04 	ldr.w	r4, [r0], #4
 800a52a:	f85c eb04 	ldr.w	lr, [ip], #4
 800a52e:	fa2f fa94 	sxtb16	sl, r4, ror #8
 800a532:	fa2f f484 	sxtb16	r4, r4
 800a536:	eaca 4924 	pkhtb	r9, sl, r4, asr #16
 800a53a:	eac4 440a 	pkhbt	r4, r4, sl, lsl #16
 800a53e:	fa2f fa9e 	sxtb16	sl, lr, ror #8
 800a542:	3504      	adds	r5, #4
 800a544:	600c      	str	r4, [r1, #0]
 800a546:	f8c1 9008 	str.w	r9, [r1, #8]
 800a54a:	3110      	adds	r1, #16
 800a54c:	42b5      	cmp	r5, r6
 800a54e:	fa2f fe8e 	sxtb16	lr, lr
 800a552:	eaca 442e 	pkhtb	r4, sl, lr, asr #16
 800a556:	eace 4e0a 	pkhbt	lr, lr, sl, lsl #16
 800a55a:	f841 4c04 	str.w	r4, [r1, #-4]
 800a55e:	f841 ec0c 	str.w	lr, [r1, #-12]
 800a562:	dde0      	ble.n	800a526 <st_int8_to16_dual+0x10a>
 800a564:	42aa      	cmp	r2, r5
 800a566:	dd40      	ble.n	800a5ea <st_int8_to16_dual+0x1ce>
 800a568:	1b55      	subs	r5, r2, r5
 800a56a:	1d0c      	adds	r4, r1, #4
 800a56c:	46e6      	mov	lr, ip
 800a56e:	eb00 0a05 	add.w	sl, r0, r5
 800a572:	f910 9b01 	ldrsb.w	r9, [r0], #1
 800a576:	3404      	adds	r4, #4
 800a578:	f824 9c08 	strh.w	r9, [r4, #-8]
 800a57c:	4550      	cmp	r0, sl
 800a57e:	f91e 9b01 	ldrsb.w	r9, [lr], #1
 800a582:	f824 9c06 	strh.w	r9, [r4, #-6]
 800a586:	d1f4      	bne.n	800a572 <st_int8_to16_dual+0x156>
 800a588:	44ac      	add	ip, r5
 800a58a:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800a58e:	3b01      	subs	r3, #1
 800a590:	eb0a 0002 	add.w	r0, sl, r2
 800a594:	4494      	add	ip, r2
 800a596:	b29b      	uxth	r3, r3
 800a598:	2b00      	cmp	r3, #0
 800a59a:	f47f af4a 	bne.w	800a432 <st_int8_to16_dual+0x16>
 800a59e:	f018 0f01 	tst.w	r8, #1
 800a5a2:	d020      	beq.n	800a5e6 <st_int8_to16_dual+0x1ca>
 800a5a4:	1f17      	subs	r7, r2, #4
 800a5a6:	f04f 0400 	mov.w	r4, #0
 800a5aa:	d411      	bmi.n	800a5d0 <st_int8_to16_dual+0x1b4>
 800a5ac:	f850 3b04 	ldr.w	r3, [r0], #4
 800a5b0:	fa2f f593 	sxtb16	r5, r3, ror #8
 800a5b4:	3404      	adds	r4, #4
 800a5b6:	3108      	adds	r1, #8
 800a5b8:	fa2f f383 	sxtb16	r3, r3
 800a5bc:	42a7      	cmp	r7, r4
 800a5be:	eac5 4623 	pkhtb	r6, r5, r3, asr #16
 800a5c2:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 800a5c6:	f841 6c04 	str.w	r6, [r1, #-4]
 800a5ca:	f841 3c08 	str.w	r3, [r1, #-8]
 800a5ce:	daed      	bge.n	800a5ac <st_int8_to16_dual+0x190>
 800a5d0:	42a2      	cmp	r2, r4
 800a5d2:	dd08      	ble.n	800a5e6 <st_int8_to16_dual+0x1ca>
 800a5d4:	1b13      	subs	r3, r2, r4
 800a5d6:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800a5da:	f910 2b01 	ldrsb.w	r2, [r0], #1
 800a5de:	f821 2b02 	strh.w	r2, [r1], #2
 800a5e2:	428b      	cmp	r3, r1
 800a5e4:	d1f9      	bne.n	800a5da <st_int8_to16_dual+0x1be>
 800a5e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5ea:	4682      	mov	sl, r0
 800a5ec:	e7cf      	b.n	800a58e <st_int8_to16_dual+0x172>
 800a5ee:	bf00      	nop

0800a5f0 <st_int8_to16_dual_interleaved>:
 800a5f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5f4:	4698      	mov	r8, r3
 800a5f6:	085b      	lsrs	r3, r3, #1
 800a5f8:	eb00 0c02 	add.w	ip, r0, r2
 800a5fc:	f000 808f 	beq.w	800a71e <st_int8_to16_dual_interleaved+0x12e>
 800a600:	f1a2 0710 	sub.w	r7, r2, #16
 800a604:	1f16      	subs	r6, r2, #4
 800a606:	2f00      	cmp	r7, #0
 800a608:	f04f 0e00 	mov.w	lr, #0
 800a60c:	db4e      	blt.n	800a6ac <st_int8_to16_dual_interleaved+0xbc>
 800a60e:	6805      	ldr	r5, [r0, #0]
 800a610:	f8dc 4000 	ldr.w	r4, [ip]
 800a614:	fa2f fa95 	sxtb16	sl, r5, ror #8
 800a618:	fa2f f585 	sxtb16	r5, r5
 800a61c:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a620:	f8c1 a000 	str.w	sl, [r1]
 800a624:	f8c1 9004 	str.w	r9, [r1, #4]
 800a628:	608d      	str	r5, [r1, #8]
 800a62a:	fa2f f484 	sxtb16	r4, r4
 800a62e:	60cc      	str	r4, [r1, #12]
 800a630:	6845      	ldr	r5, [r0, #4]
 800a632:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800a636:	fa2f fa95 	sxtb16	sl, r5, ror #8
 800a63a:	fa2f f585 	sxtb16	r5, r5
 800a63e:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a642:	f8c1 a010 	str.w	sl, [r1, #16]
 800a646:	f8c1 9014 	str.w	r9, [r1, #20]
 800a64a:	618d      	str	r5, [r1, #24]
 800a64c:	fa2f f484 	sxtb16	r4, r4
 800a650:	61cc      	str	r4, [r1, #28]
 800a652:	6885      	ldr	r5, [r0, #8]
 800a654:	f8dc 4008 	ldr.w	r4, [ip, #8]
 800a658:	fa2f fa95 	sxtb16	sl, r5, ror #8
 800a65c:	fa2f f585 	sxtb16	r5, r5
 800a660:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a664:	3010      	adds	r0, #16
 800a666:	f10c 0c10 	add.w	ip, ip, #16
 800a66a:	f8c1 a020 	str.w	sl, [r1, #32]
 800a66e:	f8c1 9024 	str.w	r9, [r1, #36]	@ 0x24
 800a672:	628d      	str	r5, [r1, #40]	@ 0x28
 800a674:	fa2f f484 	sxtb16	r4, r4
 800a678:	62cc      	str	r4, [r1, #44]	@ 0x2c
 800a67a:	f850 5c04 	ldr.w	r5, [r0, #-4]
 800a67e:	f85c 4c04 	ldr.w	r4, [ip, #-4]
 800a682:	fa2f fa95 	sxtb16	sl, r5, ror #8
 800a686:	fa2f f585 	sxtb16	r5, r5
 800a68a:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a68e:	f10e 0e10 	add.w	lr, lr, #16
 800a692:	f8c1 a030 	str.w	sl, [r1, #48]	@ 0x30
 800a696:	f8c1 9034 	str.w	r9, [r1, #52]	@ 0x34
 800a69a:	3140      	adds	r1, #64	@ 0x40
 800a69c:	45be      	cmp	lr, r7
 800a69e:	f841 5c08 	str.w	r5, [r1, #-8]
 800a6a2:	fa2f f484 	sxtb16	r4, r4
 800a6a6:	f841 4c04 	str.w	r4, [r1, #-4]
 800a6aa:	ddb0      	ble.n	800a60e <st_int8_to16_dual_interleaved+0x1e>
 800a6ac:	4576      	cmp	r6, lr
 800a6ae:	db18      	blt.n	800a6e2 <st_int8_to16_dual_interleaved+0xf2>
 800a6b0:	f850 5b04 	ldr.w	r5, [r0], #4
 800a6b4:	f85c 4b04 	ldr.w	r4, [ip], #4
 800a6b8:	fa2f fa95 	sxtb16	sl, r5, ror #8
 800a6bc:	fa2f f585 	sxtb16	r5, r5
 800a6c0:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a6c4:	f10e 0e04 	add.w	lr, lr, #4
 800a6c8:	f8c1 a000 	str.w	sl, [r1]
 800a6cc:	f8c1 9004 	str.w	r9, [r1, #4]
 800a6d0:	3110      	adds	r1, #16
 800a6d2:	45b6      	cmp	lr, r6
 800a6d4:	f841 5c08 	str.w	r5, [r1, #-8]
 800a6d8:	fa2f f484 	sxtb16	r4, r4
 800a6dc:	f841 4c04 	str.w	r4, [r1, #-4]
 800a6e0:	dde6      	ble.n	800a6b0 <st_int8_to16_dual_interleaved+0xc0>
 800a6e2:	4572      	cmp	r2, lr
 800a6e4:	dd3c      	ble.n	800a760 <st_int8_to16_dual_interleaved+0x170>
 800a6e6:	eba2 0e0e 	sub.w	lr, r2, lr
 800a6ea:	1d0c      	adds	r4, r1, #4
 800a6ec:	4665      	mov	r5, ip
 800a6ee:	eb00 0a0e 	add.w	sl, r0, lr
 800a6f2:	f910 9b01 	ldrsb.w	r9, [r0], #1
 800a6f6:	3404      	adds	r4, #4
 800a6f8:	f824 9c08 	strh.w	r9, [r4, #-8]
 800a6fc:	4550      	cmp	r0, sl
 800a6fe:	f915 9b01 	ldrsb.w	r9, [r5], #1
 800a702:	f824 9c06 	strh.w	r9, [r4, #-6]
 800a706:	d1f4      	bne.n	800a6f2 <st_int8_to16_dual_interleaved+0x102>
 800a708:	44f4      	add	ip, lr
 800a70a:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 800a70e:	3b01      	subs	r3, #1
 800a710:	eb0a 0002 	add.w	r0, sl, r2
 800a714:	4494      	add	ip, r2
 800a716:	b29b      	uxth	r3, r3
 800a718:	2b00      	cmp	r3, #0
 800a71a:	f47f af74 	bne.w	800a606 <st_int8_to16_dual_interleaved+0x16>
 800a71e:	f018 0f01 	tst.w	r8, #1
 800a722:	d01b      	beq.n	800a75c <st_int8_to16_dual_interleaved+0x16c>
 800a724:	1f16      	subs	r6, r2, #4
 800a726:	f04f 0400 	mov.w	r4, #0
 800a72a:	d40c      	bmi.n	800a746 <st_int8_to16_dual_interleaved+0x156>
 800a72c:	f850 3b04 	ldr.w	r3, [r0], #4
 800a730:	fa2f f593 	sxtb16	r5, r3, ror #8
 800a734:	3404      	adds	r4, #4
 800a736:	600d      	str	r5, [r1, #0]
 800a738:	3108      	adds	r1, #8
 800a73a:	42a6      	cmp	r6, r4
 800a73c:	fa2f f383 	sxtb16	r3, r3
 800a740:	f841 3c04 	str.w	r3, [r1, #-4]
 800a744:	daf2      	bge.n	800a72c <st_int8_to16_dual_interleaved+0x13c>
 800a746:	42a2      	cmp	r2, r4
 800a748:	dd08      	ble.n	800a75c <st_int8_to16_dual_interleaved+0x16c>
 800a74a:	1b13      	subs	r3, r2, r4
 800a74c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800a750:	f910 2b01 	ldrsb.w	r2, [r0], #1
 800a754:	f821 2b02 	strh.w	r2, [r1], #2
 800a758:	428b      	cmp	r3, r1
 800a75a:	d1f9      	bne.n	800a750 <st_int8_to16_dual_interleaved+0x160>
 800a75c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a760:	4682      	mov	sl, r0
 800a762:	e7d4      	b.n	800a70e <st_int8_to16_dual_interleaved+0x11e>

0800a764 <ai_padding_opt_init>:
 800a764:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a768:	2700      	movs	r7, #0
 800a76a:	9c07      	ldr	r4, [sp, #28]
 800a76c:	e9c0 7700 	strd	r7, r7, [r0]
 800a770:	6087      	str	r7, [r0, #8]
 800a772:	46b9      	mov	r9, r7
 800a774:	690d      	ldr	r5, [r1, #16]
 800a776:	f1c5 0c00 	rsb	ip, r5, #0
 800a77a:	689d      	ldr	r5, [r3, #8]
 800a77c:	42bd      	cmp	r5, r7
 800a77e:	dd1c      	ble.n	800a7ba <ai_padding_opt_init+0x56>
 800a780:	463e      	mov	r6, r7
 800a782:	46be      	mov	lr, r7
 800a784:	e010      	b.n	800a7a8 <ai_padding_opt_init+0x44>
 800a786:	6895      	ldr	r5, [r2, #8]
 800a788:	eba5 080c 	sub.w	r8, r5, ip
 800a78c:	68a5      	ldr	r5, [r4, #8]
 800a78e:	45a8      	cmp	r8, r5
 800a790:	da10      	bge.n	800a7b4 <ai_padding_opt_init+0x50>
 800a792:	f109 0901 	add.w	r9, r9, #1
 800a796:	f8c0 9008 	str.w	r9, [r0, #8]
 800a79a:	688d      	ldr	r5, [r1, #8]
 800a79c:	f10e 0e01 	add.w	lr, lr, #1
 800a7a0:	44ac      	add	ip, r5
 800a7a2:	689d      	ldr	r5, [r3, #8]
 800a7a4:	4575      	cmp	r5, lr
 800a7a6:	dd09      	ble.n	800a7bc <ai_padding_opt_init+0x58>
 800a7a8:	f1bc 0f00 	cmp.w	ip, #0
 800a7ac:	daeb      	bge.n	800a786 <ai_padding_opt_init+0x22>
 800a7ae:	3601      	adds	r6, #1
 800a7b0:	6006      	str	r6, [r0, #0]
 800a7b2:	e7f2      	b.n	800a79a <ai_padding_opt_init+0x36>
 800a7b4:	3701      	adds	r7, #1
 800a7b6:	6047      	str	r7, [r0, #4]
 800a7b8:	e7ef      	b.n	800a79a <ai_padding_opt_init+0x36>
 800a7ba:	463e      	mov	r6, r7
 800a7bc:	2500      	movs	r5, #0
 800a7be:	f8c0 9014 	str.w	r9, [r0, #20]
 800a7c2:	e9c0 6703 	strd	r6, r7, [r0, #12]
 800a7c6:	e9c0 5506 	strd	r5, r5, [r0, #24]
 800a7ca:	6205      	str	r5, [r0, #32]
 800a7cc:	694e      	ldr	r6, [r1, #20]
 800a7ce:	f1c6 0c00 	rsb	ip, r6, #0
 800a7d2:	685e      	ldr	r6, [r3, #4]
 800a7d4:	42ae      	cmp	r6, r5
 800a7d6:	dd1c      	ble.n	800a812 <ai_padding_opt_init+0xae>
 800a7d8:	46ae      	mov	lr, r5
 800a7da:	e00f      	b.n	800a7fc <ai_padding_opt_init+0x98>
 800a7dc:	6855      	ldr	r5, [r2, #4]
 800a7de:	6866      	ldr	r6, [r4, #4]
 800a7e0:	eba5 050c 	sub.w	r5, r5, ip
 800a7e4:	42b5      	cmp	r5, r6
 800a7e6:	da10      	bge.n	800a80a <ai_padding_opt_init+0xa6>
 800a7e8:	6a05      	ldr	r5, [r0, #32]
 800a7ea:	3501      	adds	r5, #1
 800a7ec:	6205      	str	r5, [r0, #32]
 800a7ee:	68cd      	ldr	r5, [r1, #12]
 800a7f0:	f10e 0e01 	add.w	lr, lr, #1
 800a7f4:	44ac      	add	ip, r5
 800a7f6:	685d      	ldr	r5, [r3, #4]
 800a7f8:	4575      	cmp	r5, lr
 800a7fa:	dd0a      	ble.n	800a812 <ai_padding_opt_init+0xae>
 800a7fc:	f1bc 0f00 	cmp.w	ip, #0
 800a800:	daec      	bge.n	800a7dc <ai_padding_opt_init+0x78>
 800a802:	6985      	ldr	r5, [r0, #24]
 800a804:	3501      	adds	r5, #1
 800a806:	6185      	str	r5, [r0, #24]
 800a808:	e7f1      	b.n	800a7ee <ai_padding_opt_init+0x8a>
 800a80a:	69c5      	ldr	r5, [r0, #28]
 800a80c:	3501      	adds	r5, #1
 800a80e:	61c5      	str	r5, [r0, #28]
 800a810:	e7ed      	b.n	800a7ee <ai_padding_opt_init+0x8a>
 800a812:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a816:	bf00      	nop

0800a818 <ai_padding_opt_phase1>:
 800a818:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 800a81c:	b923      	cbnz	r3, 800a828 <ai_padding_opt_phase1+0x10>
 800a81e:	b17a      	cbz	r2, 800a840 <ai_padding_opt_phase1+0x28>
 800a820:	3a01      	subs	r2, #1
 800a822:	8483      	strh	r3, [r0, #36]	@ 0x24
 800a824:	61c2      	str	r2, [r0, #28]
 800a826:	e004      	b.n	800a832 <ai_padding_opt_phase1+0x1a>
 800a828:	b152      	cbz	r2, 800a840 <ai_padding_opt_phase1+0x28>
 800a82a:	2201      	movs	r2, #1
 800a82c:	3b01      	subs	r3, #1
 800a82e:	8482      	strh	r2, [r0, #36]	@ 0x24
 800a830:	6183      	str	r3, [r0, #24]
 800a832:	68c3      	ldr	r3, [r0, #12]
 800a834:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
 800a838:	6003      	str	r3, [r0, #0]
 800a83a:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800a83e:	4770      	bx	lr
 800a840:	6a03      	ldr	r3, [r0, #32]
 800a842:	2201      	movs	r2, #1
 800a844:	3b01      	subs	r3, #1
 800a846:	8482      	strh	r2, [r0, #36]	@ 0x24
 800a848:	6203      	str	r3, [r0, #32]
 800a84a:	e7f2      	b.n	800a832 <ai_padding_opt_phase1+0x1a>

0800a84c <st_sssa8_ch_nn_mat_mult_kernel_opt>:
 800a84c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a850:	b09b      	sub	sp, #108	@ 0x6c
 800a852:	4683      	mov	fp, r0
 800a854:	f89d 00ac 	ldrb.w	r0, [sp, #172]	@ 0xac
 800a858:	9317      	str	r3, [sp, #92]	@ 0x5c
 800a85a:	2800      	cmp	r0, #0
 800a85c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a85e:	9825      	ldr	r0, [sp, #148]	@ 0x94
 800a860:	bf18      	it	ne
 800a862:	2301      	movne	r3, #1
 800a864:	f8bd 4098 	ldrh.w	r4, [sp, #152]	@ 0x98
 800a868:	910c      	str	r1, [sp, #48]	@ 0x30
 800a86a:	fb00 3303 	mla	r3, r0, r3, r3
 800a86e:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 800a870:	9414      	str	r4, [sp, #80]	@ 0x50
 800a872:	0864      	lsrs	r4, r4, #1
 800a874:	4403      	add	r3, r0
 800a876:	f8bd 009c 	ldrh.w	r0, [sp, #156]	@ 0x9c
 800a87a:	9205      	str	r2, [sp, #20]
 800a87c:	9302      	str	r3, [sp, #8]
 800a87e:	9006      	str	r0, [sp, #24]
 800a880:	9415      	str	r4, [sp, #84]	@ 0x54
 800a882:	f000 81c6 	beq.w	800ac12 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3c6>
 800a886:	460d      	mov	r5, r1
 800a888:	4601      	mov	r1, r0
 800a88a:	f1a0 0310 	sub.w	r3, r0, #16
 800a88e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800a892:	1ece      	subs	r6, r1, #3
 800a894:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 800a898:	091b      	lsrs	r3, r3, #4
 800a89a:	920e      	str	r2, [sp, #56]	@ 0x38
 800a89c:	960d      	str	r6, [sp, #52]	@ 0x34
 800a89e:	46d9      	mov	r9, fp
 800a8a0:	9e28      	ldr	r6, [sp, #160]	@ 0xa0
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	900f      	str	r0, [sp, #60]	@ 0x3c
 800a8a6:	3604      	adds	r6, #4
 800a8a8:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 800a8ac:	9601      	str	r6, [sp, #4]
 800a8ae:	9e29      	ldr	r6, [sp, #164]	@ 0xa4
 800a8b0:	9207      	str	r2, [sp, #28]
 800a8b2:	011a      	lsls	r2, r3, #4
 800a8b4:	3608      	adds	r6, #8
 800a8b6:	9212      	str	r2, [sp, #72]	@ 0x48
 800a8b8:	019a      	lsls	r2, r3, #6
 800a8ba:	9604      	str	r6, [sp, #16]
 800a8bc:	eb05 1343 	add.w	r3, r5, r3, lsl #5
 800a8c0:	9e2a      	ldr	r6, [sp, #168]	@ 0xa8
 800a8c2:	9311      	str	r3, [sp, #68]	@ 0x44
 800a8c4:	1f0b      	subs	r3, r1, #4
 800a8c6:	3608      	adds	r6, #8
 800a8c8:	9210      	str	r2, [sp, #64]	@ 0x40
 800a8ca:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a8cc:	9603      	str	r6, [sp, #12]
 800a8ce:	00e6      	lsls	r6, r4, #3
 800a8d0:	9616      	str	r6, [sp, #88]	@ 0x58
 800a8d2:	9905      	ldr	r1, [sp, #20]
 800a8d4:	9c06      	ldr	r4, [sp, #24]
 800a8d6:	680b      	ldr	r3, [r1, #0]
 800a8d8:	3108      	adds	r1, #8
 800a8da:	2c0f      	cmp	r4, #15
 800a8dc:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800a8de:	9319      	str	r3, [sp, #100]	@ 0x64
 800a8e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a8e2:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a8e4:	f851 2c04 	ldr.w	r2, [r1, #-4]
 800a8e8:	9105      	str	r1, [sp, #20]
 800a8ea:	9219      	str	r2, [sp, #100]	@ 0x64
 800a8ec:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a8ee:	9919      	ldr	r1, [sp, #100]	@ 0x64
 800a8f0:	f340 82c1 	ble.w	800ae76 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x62a>
 800a8f4:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 800a8f6:	464c      	mov	r4, r9
 800a8f8:	9e07      	ldr	r6, [sp, #28]
 800a8fa:	f8d7 e000 	ldr.w	lr, [r7]
 800a8fe:	f8d5 a000 	ldr.w	sl, [r5]
 800a902:	f8d4 c000 	ldr.w	ip, [r4]
 800a906:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800a90a:	fb2c 330e 	smlad	r3, ip, lr, r3
 800a90e:	fb2c 000a 	smlad	r0, ip, sl, r0
 800a912:	fb28 2e0e 	smlad	lr, r8, lr, r2
 800a916:	fb28 110a 	smlad	r1, r8, sl, r1
 800a91a:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800a91e:	f8d5 8004 	ldr.w	r8, [r5, #4]
 800a922:	68a2      	ldr	r2, [r4, #8]
 800a924:	f8d4 b00c 	ldr.w	fp, [r4, #12]
 800a928:	fb22 330c 	smlad	r3, r2, ip, r3
 800a92c:	fb22 0008 	smlad	r0, r2, r8, r0
 800a930:	fb2b ee0c 	smlad	lr, fp, ip, lr
 800a934:	fb2b 1808 	smlad	r8, fp, r8, r1
 800a938:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800a93c:	f8d5 b008 	ldr.w	fp, [r5, #8]
 800a940:	6922      	ldr	r2, [r4, #16]
 800a942:	f8d4 a014 	ldr.w	sl, [r4, #20]
 800a946:	fb22 330c 	smlad	r3, r2, ip, r3
 800a94a:	fb22 000b 	smlad	r0, r2, fp, r0
 800a94e:	fb2a ee0c 	smlad	lr, sl, ip, lr
 800a952:	fb2a 8b0b 	smlad	fp, sl, fp, r8
 800a956:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800a95a:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800a95e:	f8d4 8018 	ldr.w	r8, [r4, #24]
 800a962:	69e1      	ldr	r1, [r4, #28]
 800a964:	fb28 330c 	smlad	r3, r8, ip, r3
 800a968:	fb28 000a 	smlad	r0, r8, sl, r0
 800a96c:	fb21 ec0c 	smlad	ip, r1, ip, lr
 800a970:	fb21 ba0a 	smlad	sl, r1, sl, fp
 800a974:	f8d7 e010 	ldr.w	lr, [r7, #16]
 800a978:	6929      	ldr	r1, [r5, #16]
 800a97a:	f8d4 8020 	ldr.w	r8, [r4, #32]
 800a97e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800a980:	fb28 330e 	smlad	r3, r8, lr, r3
 800a984:	fb28 0001 	smlad	r0, r8, r1, r0
 800a988:	fb22 cc0e 	smlad	ip, r2, lr, ip
 800a98c:	fb22 a101 	smlad	r1, r2, r1, sl
 800a990:	f8d7 e014 	ldr.w	lr, [r7, #20]
 800a994:	f8d5 a014 	ldr.w	sl, [r5, #20]
 800a998:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
 800a99c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a99e:	fb28 330e 	smlad	r3, r8, lr, r3
 800a9a2:	fb28 000a 	smlad	r0, r8, sl, r0
 800a9a6:	fb22 cc0e 	smlad	ip, r2, lr, ip
 800a9aa:	fb22 120a 	smlad	r2, r2, sl, r1
 800a9ae:	f8d7 e018 	ldr.w	lr, [r7, #24]
 800a9b2:	f8d5 b018 	ldr.w	fp, [r5, #24]
 800a9b6:	f8d4 8030 	ldr.w	r8, [r4, #48]	@ 0x30
 800a9ba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a9bc:	fb28 330e 	smlad	r3, r8, lr, r3
 800a9c0:	fb28 080b 	smlad	r8, r8, fp, r0
 800a9c4:	fb21 ce0e 	smlad	lr, r1, lr, ip
 800a9c8:	fb21 210b 	smlad	r1, r1, fp, r2
 800a9cc:	69fa      	ldr	r2, [r7, #28]
 800a9ce:	3520      	adds	r5, #32
 800a9d0:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800a9d2:	3720      	adds	r7, #32
 800a9d4:	f8d4 c03c 	ldr.w	ip, [r4, #60]	@ 0x3c
 800a9d8:	3440      	adds	r4, #64	@ 0x40
 800a9da:	f855 bc04 	ldr.w	fp, [r5, #-4]
 800a9de:	fb20 3302 	smlad	r3, r0, r2, r3
 800a9e2:	fb20 800b 	smlad	r0, r0, fp, r8
 800a9e6:	fb2c e202 	smlad	r2, ip, r2, lr
 800a9ea:	fb2c 110b 	smlad	r1, ip, fp, r1
 800a9ee:	42b5      	cmp	r5, r6
 800a9f0:	d183      	bne.n	800a8fa <st_sssa8_ch_nn_mat_mult_kernel_opt+0xae>
 800a9f2:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800a9f4:	f8dd b048 	ldr.w	fp, [sp, #72]	@ 0x48
 800a9f8:	44a1      	add	r9, r4
 800a9fa:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800a9fc:	9d07      	ldr	r5, [sp, #28]
 800a9fe:	9400      	str	r4, [sp, #0]
 800aa00:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 800aa02:	45a3      	cmp	fp, r4
 800aa04:	f280 823f 	bge.w	800ae86 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x63a>
 800aa08:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800aa0a:	f8dd c000 	ldr.w	ip, [sp]
 800aa0e:	eba4 040b 	sub.w	r4, r4, fp
 800aa12:	08a4      	lsrs	r4, r4, #2
 800aa14:	4626      	mov	r6, r4
 800aa16:	940a      	str	r4, [sp, #40]	@ 0x28
 800aa18:	464c      	mov	r4, r9
 800aa1a:	3601      	adds	r6, #1
 800aa1c:	00f7      	lsls	r7, r6, #3
 800aa1e:	9609      	str	r6, [sp, #36]	@ 0x24
 800aa20:	eb05 08c6 	add.w	r8, r5, r6, lsl #3
 800aa24:	9708      	str	r7, [sp, #32]
 800aa26:	f8dc e000 	ldr.w	lr, [ip]
 800aa2a:	682f      	ldr	r7, [r5, #0]
 800aa2c:	f8d4 a000 	ldr.w	sl, [r4]
 800aa30:	6866      	ldr	r6, [r4, #4]
 800aa32:	fb2a 330e 	smlad	r3, sl, lr, r3
 800aa36:	fb2a 0007 	smlad	r0, sl, r7, r0
 800aa3a:	fb26 220e 	smlad	r2, r6, lr, r2
 800aa3e:	fb26 1107 	smlad	r1, r6, r7, r1
 800aa42:	f8dc 7004 	ldr.w	r7, [ip, #4]
 800aa46:	3508      	adds	r5, #8
 800aa48:	68a6      	ldr	r6, [r4, #8]
 800aa4a:	f10c 0c08 	add.w	ip, ip, #8
 800aa4e:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 800aa52:	3410      	adds	r4, #16
 800aa54:	f855 ac04 	ldr.w	sl, [r5, #-4]
 800aa58:	fb26 3307 	smlad	r3, r6, r7, r3
 800aa5c:	fb26 000a 	smlad	r0, r6, sl, r0
 800aa60:	fb2e 2207 	smlad	r2, lr, r7, r2
 800aa64:	fb2e 110a 	smlad	r1, lr, sl, r1
 800aa68:	4545      	cmp	r5, r8
 800aa6a:	d1dc      	bne.n	800aa26 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1da>
 800aa6c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800aa6e:	f10b 0b04 	add.w	fp, fp, #4
 800aa72:	9d08      	ldr	r5, [sp, #32]
 800aa74:	eb09 1904 	add.w	r9, r9, r4, lsl #4
 800aa78:	9c00      	ldr	r4, [sp, #0]
 800aa7a:	442c      	add	r4, r5
 800aa7c:	9400      	str	r4, [sp, #0]
 800aa7e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800aa80:	eb0b 0b84 	add.w	fp, fp, r4, lsl #2
 800aa84:	9f06      	ldr	r7, [sp, #24]
 800aa86:	455f      	cmp	r7, fp
 800aa88:	dd54      	ble.n	800ab34 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2e8>
 800aa8a:	9c00      	ldr	r4, [sp, #0]
 800aa8c:	f9b9 6000 	ldrsh.w	r6, [r9]
 800aa90:	f9b4 4000 	ldrsh.w	r4, [r4]
 800aa94:	f9b9 5002 	ldrsh.w	r5, [r9, #2]
 800aa98:	fb04 3306 	mla	r3, r4, r6, r3
 800aa9c:	fb05 2204 	mla	r2, r5, r4, r2
 800aaa0:	f9b8 4000 	ldrsh.w	r4, [r8]
 800aaa4:	fb04 0006 	mla	r0, r4, r6, r0
 800aaa8:	fb05 1104 	mla	r1, r5, r4, r1
 800aaac:	f10b 0401 	add.w	r4, fp, #1
 800aab0:	42bc      	cmp	r4, r7
 800aab2:	da3a      	bge.n	800ab2a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2de>
 800aab4:	9c00      	ldr	r4, [sp, #0]
 800aab6:	f9b9 6004 	ldrsh.w	r6, [r9, #4]
 800aaba:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
 800aabe:	f9b9 4006 	ldrsh.w	r4, [r9, #6]
 800aac2:	fb05 3306 	mla	r3, r5, r6, r3
 800aac6:	fb05 2204 	mla	r2, r5, r4, r2
 800aaca:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 800aace:	fb05 1104 	mla	r1, r5, r4, r1
 800aad2:	f10b 0402 	add.w	r4, fp, #2
 800aad6:	fb06 0005 	mla	r0, r6, r5, r0
 800aada:	42a7      	cmp	r7, r4
 800aadc:	dd25      	ble.n	800ab2a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2de>
 800aade:	9c00      	ldr	r4, [sp, #0]
 800aae0:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 800aae4:	f9b4 5004 	ldrsh.w	r5, [r4, #4]
 800aae8:	f9b9 400a 	ldrsh.w	r4, [r9, #10]
 800aaec:	fb06 3305 	mla	r3, r6, r5, r3
 800aaf0:	fb05 2204 	mla	r2, r5, r4, r2
 800aaf4:	f9b8 5004 	ldrsh.w	r5, [r8, #4]
 800aaf8:	fb05 1104 	mla	r1, r5, r4, r1
 800aafc:	f10b 0403 	add.w	r4, fp, #3
 800ab00:	fb06 0005 	mla	r0, r6, r5, r0
 800ab04:	42a7      	cmp	r7, r4
 800ab06:	dd10      	ble.n	800ab2a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2de>
 800ab08:	9c00      	ldr	r4, [sp, #0]
 800ab0a:	f9b8 6006 	ldrsh.w	r6, [r8, #6]
 800ab0e:	f9b4 5006 	ldrsh.w	r5, [r4, #6]
 800ab12:	f9b9 400c 	ldrsh.w	r4, [r9, #12]
 800ab16:	fb04 3305 	mla	r3, r4, r5, r3
 800ab1a:	fb04 0006 	mla	r0, r4, r6, r0
 800ab1e:	f9b9 400e 	ldrsh.w	r4, [r9, #14]
 800ab22:	fb05 2204 	mla	r2, r5, r4, r2
 800ab26:	fb06 1104 	mla	r1, r6, r4, r1
 800ab2a:	9c06      	ldr	r4, [sp, #24]
 800ab2c:	eba4 0b0b 	sub.w	fp, r4, fp
 800ab30:	eb09 098b 	add.w	r9, r9, fp, lsl #2
 800ab34:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800ab36:	2c00      	cmp	r4, #0
 800ab38:	f000 80f2 	beq.w	800ad20 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4d4>
 800ab3c:	9c01      	ldr	r4, [sp, #4]
 800ab3e:	f934 4c04 	ldrsh.w	r4, [r4, #-4]
 800ab42:	2c15      	cmp	r4, #21
 800ab44:	f340 8147 	ble.w	800add6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x58a>
 800ab48:	1ea5      	subs	r5, r4, #2
 800ab4a:	2601      	movs	r6, #1
 800ab4c:	3c01      	subs	r4, #1
 800ab4e:	fa06 f505 	lsl.w	r5, r6, r5
 800ab52:	9e04      	ldr	r6, [sp, #16]
 800ab54:	f856 6c08 	ldr.w	r6, [r6, #-8]
 800ab58:	fb53 5306 	smmla	r3, r3, r6, r5
 800ab5c:	fb50 5006 	smmla	r0, r0, r6, r5
 800ab60:	9d03      	ldr	r5, [sp, #12]
 800ab62:	4123      	asrs	r3, r4
 800ab64:	9e04      	ldr	r6, [sp, #16]
 800ab66:	f855 7c08 	ldr.w	r7, [r5, #-8]
 800ab6a:	1f35      	subs	r5, r6, #4
 800ab6c:	9e03      	ldr	r6, [sp, #12]
 800ab6e:	443b      	add	r3, r7
 800ab70:	3e04      	subs	r6, #4
 800ab72:	f303 0307 	ssat	r3, #8, r3
 800ab76:	4120      	asrs	r0, r4
 800ab78:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 800ab7a:	4438      	add	r0, r7
 800ab7c:	7023      	strb	r3, [r4, #0]
 800ab7e:	f300 0007 	ssat	r0, #8, r0
 800ab82:	9b02      	ldr	r3, [sp, #8]
 800ab84:	7018      	strb	r0, [r3, #0]
 800ab86:	4620      	mov	r0, r4
 800ab88:	9b01      	ldr	r3, [sp, #4]
 800ab8a:	9c24      	ldr	r4, [sp, #144]	@ 0x90
 800ab8c:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
 800ab90:	1904      	adds	r4, r0, r4
 800ab92:	9f24      	ldr	r7, [sp, #144]	@ 0x90
 800ab94:	9802      	ldr	r0, [sp, #8]
 800ab96:	2b15      	cmp	r3, #21
 800ab98:	4438      	add	r0, r7
 800ab9a:	f340 8109 	ble.w	800adb0 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x564>
 800ab9e:	682f      	ldr	r7, [r5, #0]
 800aba0:	f04f 0c01 	mov.w	ip, #1
 800aba4:	1e9d      	subs	r5, r3, #2
 800aba6:	3b01      	subs	r3, #1
 800aba8:	6836      	ldr	r6, [r6, #0]
 800abaa:	fa0c f505 	lsl.w	r5, ip, r5
 800abae:	fb52 5207 	smmla	r2, r2, r7, r5
 800abb2:	411a      	asrs	r2, r3
 800abb4:	fb51 5107 	smmla	r1, r1, r7, r5
 800abb8:	4432      	add	r2, r6
 800abba:	f302 0207 	ssat	r2, #8, r2
 800abbe:	9d2c      	ldr	r5, [sp, #176]	@ 0xb0
 800abc0:	4119      	asrs	r1, r3
 800abc2:	9f24      	ldr	r7, [sp, #144]	@ 0x90
 800abc4:	4431      	add	r1, r6
 800abc6:	55ea      	strb	r2, [r5, r7]
 800abc8:	f301 0107 	ssat	r1, #8, r1
 800abcc:	9b02      	ldr	r3, [sp, #8]
 800abce:	55d9      	strb	r1, [r3, r7]
 800abd0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800abd2:	18e3      	adds	r3, r4, r3
 800abd4:	932c      	str	r3, [sp, #176]	@ 0xb0
 800abd6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800abd8:	18c3      	adds	r3, r0, r3
 800abda:	9302      	str	r3, [sp, #8]
 800abdc:	9b01      	ldr	r3, [sp, #4]
 800abde:	9a05      	ldr	r2, [sp, #20]
 800abe0:	3304      	adds	r3, #4
 800abe2:	9301      	str	r3, [sp, #4]
 800abe4:	9b04      	ldr	r3, [sp, #16]
 800abe6:	3308      	adds	r3, #8
 800abe8:	9304      	str	r3, [sp, #16]
 800abea:	9b03      	ldr	r3, [sp, #12]
 800abec:	3308      	adds	r3, #8
 800abee:	9303      	str	r3, [sp, #12]
 800abf0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800abf2:	4293      	cmp	r3, r2
 800abf4:	f47f ae6d 	bne.w	800a8d2 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x86>
 800abf8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800abfa:	46cb      	mov	fp, r9
 800abfc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800abfe:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800ac02:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ac04:	9328      	str	r3, [sp, #160]	@ 0xa0
 800ac06:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800ac08:	4413      	add	r3, r2
 800ac0a:	9329      	str	r3, [sp, #164]	@ 0xa4
 800ac0c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800ac0e:	4413      	add	r3, r2
 800ac10:	932a      	str	r3, [sp, #168]	@ 0xa8
 800ac12:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ac14:	07db      	lsls	r3, r3, #31
 800ac16:	f140 81b1 	bpl.w	800af7c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x730>
 800ac1a:	9a06      	ldr	r2, [sp, #24]
 800ac1c:	9b05      	ldr	r3, [sp, #20]
 800ac1e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ac20:	0896      	lsrs	r6, r2, #2
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	eb01 0e42 	add.w	lr, r1, r2, lsl #1
 800ac28:	f000 81f6 	beq.w	800b018 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x7cc>
 800ac2c:	00f7      	lsls	r7, r6, #3
 800ac2e:	4674      	mov	r4, lr
 800ac30:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800ac34:	4658      	mov	r0, fp
 800ac36:	461a      	mov	r2, r3
 800ac38:	f8d0 c000 	ldr.w	ip, [r0]
 800ac3c:	3008      	adds	r0, #8
 800ac3e:	f850 5c04 	ldr.w	r5, [r0, #-4]
 800ac42:	f8d1 8000 	ldr.w	r8, [r1]
 800ac46:	fb2c 3308 	smlad	r3, ip, r8, r3
 800ac4a:	f8d4 8000 	ldr.w	r8, [r4]
 800ac4e:	fb2c 2208 	smlad	r2, ip, r8, r2
 800ac52:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800ac56:	3408      	adds	r4, #8
 800ac58:	f854 cc04 	ldr.w	ip, [r4, #-4]
 800ac5c:	3108      	adds	r1, #8
 800ac5e:	fb25 3308 	smlad	r3, r5, r8, r3
 800ac62:	fb25 220c 	smlad	r2, r5, ip, r2
 800ac66:	42b1      	cmp	r1, r6
 800ac68:	d1e6      	bne.n	800ac38 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3ec>
 800ac6a:	44bb      	add	fp, r7
 800ac6c:	44be      	add	lr, r7
 800ac6e:	9906      	ldr	r1, [sp, #24]
 800ac70:	f011 0103 	ands.w	r1, r1, #3
 800ac74:	d01f      	beq.n	800acb6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x46a>
 800ac76:	f9bb 0000 	ldrsh.w	r0, [fp]
 800ac7a:	3901      	subs	r1, #1
 800ac7c:	8834      	ldrh	r4, [r6, #0]
 800ac7e:	b289      	uxth	r1, r1
 800ac80:	fb14 3300 	smlabb	r3, r4, r0, r3
 800ac84:	f8be 4000 	ldrh.w	r4, [lr]
 800ac88:	fb14 2200 	smlabb	r2, r4, r0, r2
 800ac8c:	b199      	cbz	r1, 800acb6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x46a>
 800ac8e:	f9bb 0002 	ldrsh.w	r0, [fp, #2]
 800ac92:	2901      	cmp	r1, #1
 800ac94:	8874      	ldrh	r4, [r6, #2]
 800ac96:	fb14 3300 	smlabb	r3, r4, r0, r3
 800ac9a:	f8be 4002 	ldrh.w	r4, [lr, #2]
 800ac9e:	fb14 2200 	smlabb	r2, r4, r0, r2
 800aca2:	d008      	beq.n	800acb6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x46a>
 800aca4:	f9bb 1004 	ldrsh.w	r1, [fp, #4]
 800aca8:	88b0      	ldrh	r0, [r6, #4]
 800acaa:	fb11 3300 	smlabb	r3, r1, r0, r3
 800acae:	f8be 0004 	ldrh.w	r0, [lr, #4]
 800acb2:	fb11 2200 	smlabb	r2, r1, r0, r2
 800acb6:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 800acb8:	f9b1 0000 	ldrsh.w	r0, [r1]
 800acbc:	2815      	cmp	r0, #21
 800acbe:	f340 816c 	ble.w	800af9a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x74e>
 800acc2:	1e85      	subs	r5, r0, #2
 800acc4:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 800acc6:	9c2a      	ldr	r4, [sp, #168]	@ 0xa8
 800acc8:	3801      	subs	r0, #1
 800acca:	2601      	movs	r6, #1
 800accc:	6809      	ldr	r1, [r1, #0]
 800acce:	6824      	ldr	r4, [r4, #0]
 800acd0:	40ae      	lsls	r6, r5
 800acd2:	fb53 6501 	smmla	r5, r3, r1, r6
 800acd6:	fb52 6301 	smmla	r3, r2, r1, r6
 800acda:	fa45 f200 	asr.w	r2, r5, r0
 800acde:	4422      	add	r2, r4
 800ace0:	f302 0207 	ssat	r2, #8, r2
 800ace4:	4103      	asrs	r3, r0
 800ace6:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 800ace8:	4423      	add	r3, r4
 800acea:	f801 2b01 	strb.w	r2, [r1], #1
 800acee:	f303 0307 	ssat	r3, #8, r3
 800acf2:	9a02      	ldr	r2, [sp, #8]
 800acf4:	912c      	str	r1, [sp, #176]	@ 0xb0
 800acf6:	7013      	strb	r3, [r2, #0]
 800acf8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	f000 8142 	beq.w	800af84 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x738>
 800ad00:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ad02:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 800ad04:	3b01      	subs	r3, #1
 800ad06:	441a      	add	r2, r3
 800ad08:	922c      	str	r2, [sp, #176]	@ 0xb0
 800ad0a:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800ad0c:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800ad0e:	1c98      	adds	r0, r3, #2
 800ad10:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ad12:	fb02 0013 	mls	r0, r2, r3, r0
 800ad16:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 800ad18:	4418      	add	r0, r3
 800ad1a:	b01b      	add	sp, #108	@ 0x6c
 800ad1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad20:	9c01      	ldr	r4, [sp, #4]
 800ad22:	f934 4c04 	ldrsh.w	r4, [r4, #-4]
 800ad26:	2c15      	cmp	r4, #21
 800ad28:	f340 8089 	ble.w	800ae3e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5f2>
 800ad2c:	9f04      	ldr	r7, [sp, #16]
 800ad2e:	1ea5      	subs	r5, r4, #2
 800ad30:	2601      	movs	r6, #1
 800ad32:	3c01      	subs	r4, #1
 800ad34:	fa06 f505 	lsl.w	r5, r6, r5
 800ad38:	f857 6c08 	ldr.w	r6, [r7, #-8]
 800ad3c:	fb53 5306 	smmla	r3, r3, r6, r5
 800ad40:	fb50 5006 	smmla	r0, r0, r6, r5
 800ad44:	9d03      	ldr	r5, [sp, #12]
 800ad46:	4123      	asrs	r3, r4
 800ad48:	f855 6c08 	ldr.w	r6, [r5, #-8]
 800ad4c:	1f3d      	subs	r5, r7, #4
 800ad4e:	9f03      	ldr	r7, [sp, #12]
 800ad50:	4433      	add	r3, r6
 800ad52:	3f04      	subs	r7, #4
 800ad54:	f303 0307 	ssat	r3, #8, r3
 800ad58:	4120      	asrs	r0, r4
 800ad5a:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 800ad5c:	4430      	add	r0, r6
 800ad5e:	7023      	strb	r3, [r4, #0]
 800ad60:	f300 0007 	ssat	r0, #8, r0
 800ad64:	9b02      	ldr	r3, [sp, #8]
 800ad66:	7018      	strb	r0, [r3, #0]
 800ad68:	9b01      	ldr	r3, [sp, #4]
 800ad6a:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
 800ad6e:	2b15      	cmp	r3, #21
 800ad70:	dd4f      	ble.n	800ae12 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5c6>
 800ad72:	1e98      	subs	r0, r3, #2
 800ad74:	2601      	movs	r6, #1
 800ad76:	3b01      	subs	r3, #1
 800ad78:	682c      	ldr	r4, [r5, #0]
 800ad7a:	fa06 f000 	lsl.w	r0, r6, r0
 800ad7e:	683d      	ldr	r5, [r7, #0]
 800ad80:	fb52 0204 	smmla	r2, r2, r4, r0
 800ad84:	411a      	asrs	r2, r3
 800ad86:	fb51 0104 	smmla	r1, r1, r4, r0
 800ad8a:	442a      	add	r2, r5
 800ad8c:	f302 0207 	ssat	r2, #8, r2
 800ad90:	fa41 f303 	asr.w	r3, r1, r3
 800ad94:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 800ad96:	442b      	add	r3, r5
 800ad98:	704a      	strb	r2, [r1, #1]
 800ad9a:	f303 0307 	ssat	r3, #8, r3
 800ad9e:	9a02      	ldr	r2, [sp, #8]
 800ada0:	7053      	strb	r3, [r2, #1]
 800ada2:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 800ada4:	3302      	adds	r3, #2
 800ada6:	932c      	str	r3, [sp, #176]	@ 0xb0
 800ada8:	9b02      	ldr	r3, [sp, #8]
 800adaa:	3302      	adds	r3, #2
 800adac:	9302      	str	r3, [sp, #8]
 800adae:	e715      	b.n	800abdc <st_sssa8_ch_nn_mat_mult_kernel_opt+0x390>
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	dd6a      	ble.n	800ae8a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x63e>
 800adb4:	682d      	ldr	r5, [r5, #0]
 800adb6:	0052      	lsls	r2, r2, #1
 800adb8:	6837      	ldr	r7, [r6, #0]
 800adba:	0049      	lsls	r1, r1, #1
 800adbc:	fb52 7205 	smmla	r2, r2, r5, r7
 800adc0:	fb51 7105 	smmla	r1, r1, r5, r7
 800adc4:	411a      	asrs	r2, r3
 800adc6:	f302 0207 	ssat	r2, #8, r2
 800adca:	4119      	asrs	r1, r3
 800adcc:	7022      	strb	r2, [r4, #0]
 800adce:	f301 0107 	ssat	r1, #8, r1
 800add2:	7001      	strb	r1, [r0, #0]
 800add4:	e6fc      	b.n	800abd0 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x384>
 800add6:	2c00      	cmp	r4, #0
 800add8:	f340 8092 	ble.w	800af00 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x6b4>
 800addc:	9f04      	ldr	r7, [sp, #16]
 800adde:	005b      	lsls	r3, r3, #1
 800ade0:	9e03      	ldr	r6, [sp, #12]
 800ade2:	0040      	lsls	r0, r0, #1
 800ade4:	f857 5c08 	ldr.w	r5, [r7, #-8]
 800ade8:	f856 6c08 	ldr.w	r6, [r6, #-8]
 800adec:	fb53 6305 	smmla	r3, r3, r5, r6
 800adf0:	fb50 6005 	smmla	r0, r0, r5, r6
 800adf4:	9e03      	ldr	r6, [sp, #12]
 800adf6:	4123      	asrs	r3, r4
 800adf8:	1f3d      	subs	r5, r7, #4
 800adfa:	3e04      	subs	r6, #4
 800adfc:	f303 0307 	ssat	r3, #8, r3
 800ae00:	4120      	asrs	r0, r4
 800ae02:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 800ae04:	7023      	strb	r3, [r4, #0]
 800ae06:	f300 0007 	ssat	r0, #8, r0
 800ae0a:	9b02      	ldr	r3, [sp, #8]
 800ae0c:	7018      	strb	r0, [r3, #0]
 800ae0e:	4620      	mov	r0, r4
 800ae10:	e6ba      	b.n	800ab88 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x33c>
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	f340 8097 	ble.w	800af46 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x6fa>
 800ae18:	6828      	ldr	r0, [r5, #0]
 800ae1a:	0052      	lsls	r2, r2, #1
 800ae1c:	683c      	ldr	r4, [r7, #0]
 800ae1e:	0049      	lsls	r1, r1, #1
 800ae20:	fb52 4200 	smmla	r2, r2, r0, r4
 800ae24:	fb51 4100 	smmla	r1, r1, r0, r4
 800ae28:	411a      	asrs	r2, r3
 800ae2a:	f302 0207 	ssat	r2, #8, r2
 800ae2e:	4119      	asrs	r1, r3
 800ae30:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 800ae32:	705a      	strb	r2, [r3, #1]
 800ae34:	f301 0107 	ssat	r1, #8, r1
 800ae38:	9b02      	ldr	r3, [sp, #8]
 800ae3a:	7059      	strb	r1, [r3, #1]
 800ae3c:	e7b1      	b.n	800ada2 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x556>
 800ae3e:	2c00      	cmp	r4, #0
 800ae40:	dd3c      	ble.n	800aebc <st_sssa8_ch_nn_mat_mult_kernel_opt+0x670>
 800ae42:	9f04      	ldr	r7, [sp, #16]
 800ae44:	005b      	lsls	r3, r3, #1
 800ae46:	9e03      	ldr	r6, [sp, #12]
 800ae48:	0040      	lsls	r0, r0, #1
 800ae4a:	f857 5c08 	ldr.w	r5, [r7, #-8]
 800ae4e:	f856 6c08 	ldr.w	r6, [r6, #-8]
 800ae52:	fb53 6305 	smmla	r3, r3, r5, r6
 800ae56:	fb50 6005 	smmla	r0, r0, r5, r6
 800ae5a:	9e03      	ldr	r6, [sp, #12]
 800ae5c:	1f3d      	subs	r5, r7, #4
 800ae5e:	4123      	asrs	r3, r4
 800ae60:	1f37      	subs	r7, r6, #4
 800ae62:	f303 0307 	ssat	r3, #8, r3
 800ae66:	4120      	asrs	r0, r4
 800ae68:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 800ae6a:	7023      	strb	r3, [r4, #0]
 800ae6c:	f300 0007 	ssat	r0, #8, r0
 800ae70:	9b02      	ldr	r3, [sp, #8]
 800ae72:	7018      	strb	r0, [r3, #0]
 800ae74:	e778      	b.n	800ad68 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x51c>
 800ae76:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800ae78:	f04f 0b00 	mov.w	fp, #0
 800ae7c:	9400      	str	r4, [sp, #0]
 800ae7e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 800ae80:	45a3      	cmp	fp, r4
 800ae82:	f6ff adc1 	blt.w	800aa08 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1bc>
 800ae86:	46a8      	mov	r8, r5
 800ae88:	e5fc      	b.n	800aa84 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x238>
 800ae8a:	f1c3 0301 	rsb	r3, r3, #1
 800ae8e:	409a      	lsls	r2, r3
 800ae90:	f302 021f 	ssat	r2, #32, r2
 800ae94:	682d      	ldr	r5, [r5, #0]
 800ae96:	fb52 f215 	smmulr	r2, r2, r5
 800ae9a:	fa01 f303 	lsl.w	r3, r1, r3
 800ae9e:	f303 031f 	ssat	r3, #32, r3
 800aea2:	fb53 f515 	smmulr	r5, r3, r5
 800aea6:	6833      	ldr	r3, [r6, #0]
 800aea8:	4413      	add	r3, r2
 800aeaa:	f303 0307 	ssat	r3, #8, r3
 800aeae:	7023      	strb	r3, [r4, #0]
 800aeb0:	6833      	ldr	r3, [r6, #0]
 800aeb2:	442b      	add	r3, r5
 800aeb4:	f303 0307 	ssat	r3, #8, r3
 800aeb8:	7003      	strb	r3, [r0, #0]
 800aeba:	e689      	b.n	800abd0 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x384>
 800aebc:	f1c4 0501 	rsb	r5, r4, #1
 800aec0:	fa03 f405 	lsl.w	r4, r3, r5
 800aec4:	f304 041f 	ssat	r4, #32, r4
 800aec8:	9e04      	ldr	r6, [sp, #16]
 800aeca:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800aece:	fb54 f413 	smmulr	r4, r4, r3
 800aed2:	40a8      	lsls	r0, r5
 800aed4:	f300 001f 	ssat	r0, #32, r0
 800aed8:	1f35      	subs	r5, r6, #4
 800aeda:	fb50 f013 	smmulr	r0, r0, r3
 800aede:	9e03      	ldr	r6, [sp, #12]
 800aee0:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800aee4:	4423      	add	r3, r4
 800aee6:	f303 0307 	ssat	r3, #8, r3
 800aeea:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 800aeec:	1f37      	subs	r7, r6, #4
 800aeee:	7023      	strb	r3, [r4, #0]
 800aef0:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800aef4:	4403      	add	r3, r0
 800aef6:	f303 0307 	ssat	r3, #8, r3
 800aefa:	9802      	ldr	r0, [sp, #8]
 800aefc:	7003      	strb	r3, [r0, #0]
 800aefe:	e733      	b.n	800ad68 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x51c>
 800af00:	f1c4 0401 	rsb	r4, r4, #1
 800af04:	fa03 f604 	lsl.w	r6, r3, r4
 800af08:	f306 061f 	ssat	r6, #32, r6
 800af0c:	9d04      	ldr	r5, [sp, #16]
 800af0e:	f855 3c08 	ldr.w	r3, [r5, #-8]
 800af12:	fb56 f613 	smmulr	r6, r6, r3
 800af16:	40a0      	lsls	r0, r4
 800af18:	f300 001f 	ssat	r0, #32, r0
 800af1c:	3d04      	subs	r5, #4
 800af1e:	fb50 f013 	smmulr	r0, r0, r3
 800af22:	9c03      	ldr	r4, [sp, #12]
 800af24:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800af28:	4433      	add	r3, r6
 800af2a:	f303 0307 	ssat	r3, #8, r3
 800af2e:	9e2c      	ldr	r6, [sp, #176]	@ 0xb0
 800af30:	7033      	strb	r3, [r6, #0]
 800af32:	1f26      	subs	r6, r4, #4
 800af34:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800af38:	4403      	add	r3, r0
 800af3a:	f303 0307 	ssat	r3, #8, r3
 800af3e:	9802      	ldr	r0, [sp, #8]
 800af40:	7003      	strb	r3, [r0, #0]
 800af42:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 800af44:	e620      	b.n	800ab88 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x33c>
 800af46:	f1c3 0301 	rsb	r3, r3, #1
 800af4a:	409a      	lsls	r2, r3
 800af4c:	f302 021f 	ssat	r2, #32, r2
 800af50:	6828      	ldr	r0, [r5, #0]
 800af52:	fb52 f210 	smmulr	r2, r2, r0
 800af56:	fa01 f303 	lsl.w	r3, r1, r3
 800af5a:	f303 031f 	ssat	r3, #32, r3
 800af5e:	fb53 f010 	smmulr	r0, r3, r0
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	4413      	add	r3, r2
 800af66:	f303 0307 	ssat	r3, #8, r3
 800af6a:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 800af6c:	7053      	strb	r3, [r2, #1]
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	4403      	add	r3, r0
 800af72:	f303 0307 	ssat	r3, #8, r3
 800af76:	9a02      	ldr	r2, [sp, #8]
 800af78:	7053      	strb	r3, [r2, #1]
 800af7a:	e712      	b.n	800ada2 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x556>
 800af7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af7e:	2b00      	cmp	r3, #0
 800af80:	f47f aec3 	bne.w	800ad0a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4be>
 800af84:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 800af86:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800af88:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800af8a:	3302      	adds	r3, #2
 800af8c:	1a50      	subs	r0, r2, r1
 800af8e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800af90:	fb02 0003 	mla	r0, r2, r3, r0
 800af94:	b01b      	add	sp, #108	@ 0x6c
 800af96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af9a:	2800      	cmp	r0, #0
 800af9c:	dd1b      	ble.n	800afd6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x78a>
 800af9e:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 800afa0:	0052      	lsls	r2, r2, #1
 800afa2:	9c2a      	ldr	r4, [sp, #168]	@ 0xa8
 800afa4:	005b      	lsls	r3, r3, #1
 800afa6:	6809      	ldr	r1, [r1, #0]
 800afa8:	6824      	ldr	r4, [r4, #0]
 800afaa:	fb53 4301 	smmla	r3, r3, r1, r4
 800afae:	fb52 4101 	smmla	r1, r2, r1, r4
 800afb2:	fa43 f000 	asr.w	r0, r3, r0
 800afb6:	f300 0307 	ssat	r3, #8, r0
 800afba:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 800afbc:	f802 3b01 	strb.w	r3, [r2], #1
 800afc0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800afc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800afc6:	fa41 f303 	asr.w	r3, r1, r3
 800afca:	f303 0307 	ssat	r3, #8, r3
 800afce:	9902      	ldr	r1, [sp, #8]
 800afd0:	922c      	str	r2, [sp, #176]	@ 0xb0
 800afd2:	700b      	strb	r3, [r1, #0]
 800afd4:	e690      	b.n	800acf8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4ac>
 800afd6:	f1c0 0001 	rsb	r0, r0, #1
 800afda:	fa03 f100 	lsl.w	r1, r3, r0
 800afde:	f301 011f 	ssat	r1, #32, r1
 800afe2:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800afe4:	681c      	ldr	r4, [r3, #0]
 800afe6:	fb51 f114 	smmulr	r1, r1, r4
 800afea:	fa02 f300 	lsl.w	r3, r2, r0
 800afee:	f303 031f 	ssat	r3, #32, r3
 800aff2:	fb53 f414 	smmulr	r4, r3, r4
 800aff6:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	440b      	add	r3, r1
 800affc:	f303 0307 	ssat	r3, #8, r3
 800b000:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 800b002:	f802 3b01 	strb.w	r3, [r2], #1
 800b006:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	4423      	add	r3, r4
 800b00c:	f303 0307 	ssat	r3, #8, r3
 800b010:	9902      	ldr	r1, [sp, #8]
 800b012:	922c      	str	r2, [sp, #176]	@ 0xb0
 800b014:	700b      	strb	r3, [r1, #0]
 800b016:	e66f      	b.n	800acf8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4ac>
 800b018:	460e      	mov	r6, r1
 800b01a:	461a      	mov	r2, r3
 800b01c:	e627      	b.n	800ac6e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x422>
 800b01e:	bf00      	nop

0800b020 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>:
 800b020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b024:	b095      	sub	sp, #84	@ 0x54
 800b026:	f8bd 407c 	ldrh.w	r4, [sp, #124]	@ 0x7c
 800b02a:	920d      	str	r2, [sp, #52]	@ 0x34
 800b02c:	f8bd 2080 	ldrh.w	r2, [sp, #128]	@ 0x80
 800b030:	9311      	str	r3, [sp, #68]	@ 0x44
 800b032:	9204      	str	r2, [sp, #16]
 800b034:	0862      	lsrs	r2, r4, #1
 800b036:	f89d 3090 	ldrb.w	r3, [sp, #144]	@ 0x90
 800b03a:	940f      	str	r4, [sp, #60]	@ 0x3c
 800b03c:	9106      	str	r1, [sp, #24]
 800b03e:	9310      	str	r3, [sp, #64]	@ 0x40
 800b040:	920e      	str	r2, [sp, #56]	@ 0x38
 800b042:	2b00      	cmp	r3, #0
 800b044:	f000 81fb 	beq.w	800b43e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x41e>
 800b048:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b04a:	b29c      	uxth	r4, r3
 800b04c:	2a00      	cmp	r2, #0
 800b04e:	f000 8144 	beq.w	800b2da <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2ba>
 800b052:	1c61      	adds	r1, r4, #1
 800b054:	0064      	lsls	r4, r4, #1
 800b056:	3a01      	subs	r2, #1
 800b058:	9d04      	ldr	r5, [sp, #16]
 800b05a:	9407      	str	r4, [sp, #28]
 800b05c:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 800b05e:	b292      	uxth	r2, r2
 800b060:	f1a5 0310 	sub.w	r3, r5, #16
 800b064:	1861      	adds	r1, r4, r1
 800b066:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 800b068:	091b      	lsrs	r3, r3, #4
 800b06a:	9102      	str	r1, [sp, #8]
 800b06c:	f104 0110 	add.w	r1, r4, #16
 800b070:	3301      	adds	r3, #1
 800b072:	f104 0908 	add.w	r9, r4, #8
 800b076:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800b07a:	1ee9      	subs	r1, r5, #3
 800b07c:	9108      	str	r1, [sp, #32]
 800b07e:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800b080:	9209      	str	r2, [sp, #36]	@ 0x24
 800b082:	3104      	adds	r1, #4
 800b084:	9100      	str	r1, [sp, #0]
 800b086:	9922      	ldr	r1, [sp, #136]	@ 0x88
 800b088:	3108      	adds	r1, #8
 800b08a:	9101      	str	r1, [sp, #4]
 800b08c:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 800b08e:	f101 0b08 	add.w	fp, r1, #8
 800b092:	9925      	ldr	r1, [sp, #148]	@ 0x94
 800b094:	3101      	adds	r1, #1
 800b096:	9103      	str	r1, [sp, #12]
 800b098:	9906      	ldr	r1, [sp, #24]
 800b09a:	eb01 1743 	add.w	r7, r1, r3, lsl #5
 800b09e:	0119      	lsls	r1, r3, #4
 800b0a0:	019b      	lsls	r3, r3, #6
 800b0a2:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b0a4:	930a      	str	r3, [sp, #40]	@ 0x28
 800b0a6:	1f2b      	subs	r3, r5, #4
 800b0a8:	930c      	str	r3, [sp, #48]	@ 0x30
 800b0aa:	f859 3c08 	ldr.w	r3, [r9, #-8]
 800b0ae:	9904      	ldr	r1, [sp, #16]
 800b0b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b0b2:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800b0b6:	290f      	cmp	r1, #15
 800b0b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b0ba:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b0bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b0be:	9c06      	ldr	r4, [sp, #24]
 800b0c0:	f340 81ba 	ble.w	800b438 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x418>
 800b0c4:	4601      	mov	r1, r0
 800b0c6:	f8d4 c000 	ldr.w	ip, [r4]
 800b0ca:	680e      	ldr	r6, [r1, #0]
 800b0cc:	fb26 220c 	smlad	r2, r6, ip, r2
 800b0d0:	684d      	ldr	r5, [r1, #4]
 800b0d2:	fb25 330c 	smlad	r3, r5, ip, r3
 800b0d6:	f8d4 c004 	ldr.w	ip, [r4, #4]
 800b0da:	688e      	ldr	r6, [r1, #8]
 800b0dc:	fb26 260c 	smlad	r6, r6, ip, r2
 800b0e0:	68cd      	ldr	r5, [r1, #12]
 800b0e2:	fb25 350c 	smlad	r5, r5, ip, r3
 800b0e6:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800b0ea:	690a      	ldr	r2, [r1, #16]
 800b0ec:	fb22 660c 	smlad	r6, r2, ip, r6
 800b0f0:	694b      	ldr	r3, [r1, #20]
 800b0f2:	fb23 550c 	smlad	r5, r3, ip, r5
 800b0f6:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800b0fa:	698a      	ldr	r2, [r1, #24]
 800b0fc:	fb22 620c 	smlad	r2, r2, ip, r6
 800b100:	69cb      	ldr	r3, [r1, #28]
 800b102:	fb23 530c 	smlad	r3, r3, ip, r5
 800b106:	f8d4 c010 	ldr.w	ip, [r4, #16]
 800b10a:	6a0e      	ldr	r6, [r1, #32]
 800b10c:	fb26 220c 	smlad	r2, r6, ip, r2
 800b110:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 800b112:	fb25 330c 	smlad	r3, r5, ip, r3
 800b116:	f8d4 c014 	ldr.w	ip, [r4, #20]
 800b11a:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
 800b11c:	fb26 260c 	smlad	r6, r6, ip, r2
 800b120:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
 800b122:	fb25 350c 	smlad	r5, r5, ip, r3
 800b126:	f8d4 c018 	ldr.w	ip, [r4, #24]
 800b12a:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800b12c:	fb22 660c 	smlad	r6, r2, ip, r6
 800b130:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800b132:	fb23 550c 	smlad	r5, r3, ip, r5
 800b136:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 800b13a:	3140      	adds	r1, #64	@ 0x40
 800b13c:	f851 2c08 	ldr.w	r2, [r1, #-8]
 800b140:	3420      	adds	r4, #32
 800b142:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b146:	fb22 620c 	smlad	r2, r2, ip, r6
 800b14a:	fb23 530c 	smlad	r3, r3, ip, r5
 800b14e:	42bc      	cmp	r4, r7
 800b150:	d1b9      	bne.n	800b0c6 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0xa6>
 800b152:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b154:	463c      	mov	r4, r7
 800b156:	f8dd e02c 	ldr.w	lr, [sp, #44]	@ 0x2c
 800b15a:	4408      	add	r0, r1
 800b15c:	9908      	ldr	r1, [sp, #32]
 800b15e:	458e      	cmp	lr, r1
 800b160:	da25      	bge.n	800b1ae <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x18e>
 800b162:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b164:	eba1 0a0e 	sub.w	sl, r1, lr
 800b168:	4601      	mov	r1, r0
 800b16a:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
 800b16e:	f10a 0501 	add.w	r5, sl, #1
 800b172:	eb04 08c5 	add.w	r8, r4, r5, lsl #3
 800b176:	9505      	str	r5, [sp, #20]
 800b178:	6825      	ldr	r5, [r4, #0]
 800b17a:	680e      	ldr	r6, [r1, #0]
 800b17c:	fb26 2205 	smlad	r2, r6, r5, r2
 800b180:	684e      	ldr	r6, [r1, #4]
 800b182:	fb26 3505 	smlad	r5, r6, r5, r3
 800b186:	6866      	ldr	r6, [r4, #4]
 800b188:	3110      	adds	r1, #16
 800b18a:	f851 cc08 	ldr.w	ip, [r1, #-8]
 800b18e:	3408      	adds	r4, #8
 800b190:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b194:	fb2c 2206 	smlad	r2, ip, r6, r2
 800b198:	fb23 5306 	smlad	r3, r3, r6, r5
 800b19c:	45a0      	cmp	r8, r4
 800b19e:	d1eb      	bne.n	800b178 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x158>
 800b1a0:	9905      	ldr	r1, [sp, #20]
 800b1a2:	f10e 0e04 	add.w	lr, lr, #4
 800b1a6:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 800b1aa:	eb0e 0e8a 	add.w	lr, lr, sl, lsl #2
 800b1ae:	9e04      	ldr	r6, [sp, #16]
 800b1b0:	4576      	cmp	r6, lr
 800b1b2:	dd30      	ble.n	800b216 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1f6>
 800b1b4:	f9b4 1000 	ldrsh.w	r1, [r4]
 800b1b8:	8805      	ldrh	r5, [r0, #0]
 800b1ba:	fb15 2201 	smlabb	r2, r5, r1, r2
 800b1be:	8845      	ldrh	r5, [r0, #2]
 800b1c0:	fb11 3305 	smlabb	r3, r1, r5, r3
 800b1c4:	f10e 0101 	add.w	r1, lr, #1
 800b1c8:	428e      	cmp	r6, r1
 800b1ca:	dd1f      	ble.n	800b20c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1ec>
 800b1cc:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800b1d0:	8885      	ldrh	r5, [r0, #4]
 800b1d2:	fb15 2201 	smlabb	r2, r5, r1, r2
 800b1d6:	88c5      	ldrh	r5, [r0, #6]
 800b1d8:	fb11 3305 	smlabb	r3, r1, r5, r3
 800b1dc:	f10e 0102 	add.w	r1, lr, #2
 800b1e0:	428e      	cmp	r6, r1
 800b1e2:	dd13      	ble.n	800b20c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1ec>
 800b1e4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800b1e8:	8905      	ldrh	r5, [r0, #8]
 800b1ea:	fb15 2201 	smlabb	r2, r5, r1, r2
 800b1ee:	8945      	ldrh	r5, [r0, #10]
 800b1f0:	fb11 3305 	smlabb	r3, r1, r5, r3
 800b1f4:	f10e 0103 	add.w	r1, lr, #3
 800b1f8:	428e      	cmp	r6, r1
 800b1fa:	dd07      	ble.n	800b20c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1ec>
 800b1fc:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 800b200:	8984      	ldrh	r4, [r0, #12]
 800b202:	fb14 2201 	smlabb	r2, r4, r1, r2
 800b206:	89c4      	ldrh	r4, [r0, #14]
 800b208:	fb11 3304 	smlabb	r3, r1, r4, r3
 800b20c:	9904      	ldr	r1, [sp, #16]
 800b20e:	eba1 0e0e 	sub.w	lr, r1, lr
 800b212:	eb00 008e 	add.w	r0, r0, lr, lsl #2
 800b216:	9e00      	ldr	r6, [sp, #0]
 800b218:	f936 5c04 	ldrsh.w	r5, [r6, #-4]
 800b21c:	2d15      	cmp	r5, #21
 800b21e:	f340 80b4 	ble.w	800b38a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x36a>
 800b222:	1eac      	subs	r4, r5, #2
 800b224:	2101      	movs	r1, #1
 800b226:	3d01      	subs	r5, #1
 800b228:	f1a6 0c02 	sub.w	ip, r6, #2
 800b22c:	fa01 f404 	lsl.w	r4, r1, r4
 800b230:	9901      	ldr	r1, [sp, #4]
 800b232:	f1ab 0604 	sub.w	r6, fp, #4
 800b236:	f851 1c08 	ldr.w	r1, [r1, #-8]
 800b23a:	fb52 4401 	smmla	r4, r2, r1, r4
 800b23e:	9901      	ldr	r1, [sp, #4]
 800b240:	fa44 f505 	asr.w	r5, r4, r5
 800b244:	f85b 4c08 	ldr.w	r4, [fp, #-8]
 800b248:	f1a1 0e04 	sub.w	lr, r1, #4
 800b24c:	442c      	add	r4, r5
 800b24e:	f304 0407 	ssat	r4, #8, r4
 800b252:	9a03      	ldr	r2, [sp, #12]
 800b254:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b258:	f9bc 2000 	ldrsh.w	r2, [ip]
 800b25c:	2a15      	cmp	r2, #21
 800b25e:	f340 80b1 	ble.w	800b3c4 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3a4>
 800b262:	1e94      	subs	r4, r2, #2
 800b264:	2501      	movs	r5, #1
 800b266:	3a01      	subs	r2, #1
 800b268:	6836      	ldr	r6, [r6, #0]
 800b26a:	f8de 1000 	ldr.w	r1, [lr]
 800b26e:	fa05 f404 	lsl.w	r4, r5, r4
 800b272:	fb53 4301 	smmla	r3, r3, r1, r4
 800b276:	4113      	asrs	r3, r2
 800b278:	4433      	add	r3, r6
 800b27a:	f303 0307 	ssat	r3, #8, r3
 800b27e:	9a02      	ldr	r2, [sp, #8]
 800b280:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b284:	9b00      	ldr	r3, [sp, #0]
 800b286:	f109 0908 	add.w	r9, r9, #8
 800b28a:	9a07      	ldr	r2, [sp, #28]
 800b28c:	f10b 0b08 	add.w	fp, fp, #8
 800b290:	3304      	adds	r3, #4
 800b292:	9300      	str	r3, [sp, #0]
 800b294:	9b01      	ldr	r3, [sp, #4]
 800b296:	3308      	adds	r3, #8
 800b298:	9301      	str	r3, [sp, #4]
 800b29a:	9b02      	ldr	r3, [sp, #8]
 800b29c:	4413      	add	r3, r2
 800b29e:	9302      	str	r3, [sp, #8]
 800b2a0:	9b03      	ldr	r3, [sp, #12]
 800b2a2:	4413      	add	r3, r2
 800b2a4:	9303      	str	r3, [sp, #12]
 800b2a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2a8:	4599      	cmp	r9, r3
 800b2aa:	f47f aefe 	bne.w	800b0aa <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x8a>
 800b2ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2b0:	4611      	mov	r1, r2
 800b2b2:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 800b2b4:	fb03 2201 	mla	r2, r3, r1, r2
 800b2b8:	9225      	str	r2, [sp, #148]	@ 0x94
 800b2ba:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b2bc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800b2c0:	920d      	str	r2, [sp, #52]	@ 0x34
 800b2c2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b2c4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b2c8:	9221      	str	r2, [sp, #132]	@ 0x84
 800b2ca:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b2cc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800b2d0:	9222      	str	r2, [sp, #136]	@ 0x88
 800b2d2:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b2d4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b2d8:	9323      	str	r3, [sp, #140]	@ 0x8c
 800b2da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2dc:	07db      	lsls	r3, r3, #31
 800b2de:	d546      	bpl.n	800b36e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x34e>
 800b2e0:	9a04      	ldr	r2, [sp, #16]
 800b2e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b2e4:	0896      	lsrs	r6, r2, #2
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	d013      	beq.n	800b312 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2f2>
 800b2ea:	00f7      	lsls	r7, r6, #3
 800b2ec:	9906      	ldr	r1, [sp, #24]
 800b2ee:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800b2f2:	6804      	ldr	r4, [r0, #0]
 800b2f4:	3008      	adds	r0, #8
 800b2f6:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800b2fa:	680d      	ldr	r5, [r1, #0]
 800b2fc:	fb24 3305 	smlad	r3, r4, r5, r3
 800b300:	684c      	ldr	r4, [r1, #4]
 800b302:	3108      	adds	r1, #8
 800b304:	fb22 3304 	smlad	r3, r2, r4, r3
 800b308:	4286      	cmp	r6, r0
 800b30a:	d1f2      	bne.n	800b2f2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2d2>
 800b30c:	9a06      	ldr	r2, [sp, #24]
 800b30e:	443a      	add	r2, r7
 800b310:	9206      	str	r2, [sp, #24]
 800b312:	9a04      	ldr	r2, [sp, #16]
 800b314:	f012 0203 	ands.w	r2, r2, #3
 800b318:	d011      	beq.n	800b33e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x31e>
 800b31a:	3a01      	subs	r2, #1
 800b31c:	9d06      	ldr	r5, [sp, #24]
 800b31e:	8801      	ldrh	r1, [r0, #0]
 800b320:	882c      	ldrh	r4, [r5, #0]
 800b322:	b292      	uxth	r2, r2
 800b324:	fb14 3301 	smlabb	r3, r4, r1, r3
 800b328:	b14a      	cbz	r2, 800b33e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x31e>
 800b32a:	886c      	ldrh	r4, [r5, #2]
 800b32c:	2a01      	cmp	r2, #1
 800b32e:	8841      	ldrh	r1, [r0, #2]
 800b330:	fb14 3301 	smlabb	r3, r4, r1, r3
 800b334:	d003      	beq.n	800b33e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x31e>
 800b336:	8881      	ldrh	r1, [r0, #4]
 800b338:	88aa      	ldrh	r2, [r5, #4]
 800b33a:	fb11 3302 	smlabb	r3, r1, r2, r3
 800b33e:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b340:	f9b2 2000 	ldrsh.w	r2, [r2]
 800b344:	2a15      	cmp	r2, #21
 800b346:	f340 8084 	ble.w	800b452 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x432>
 800b34a:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 800b34c:	1e95      	subs	r5, r2, #2
 800b34e:	9922      	ldr	r1, [sp, #136]	@ 0x88
 800b350:	3a01      	subs	r2, #1
 800b352:	6804      	ldr	r4, [r0, #0]
 800b354:	2001      	movs	r0, #1
 800b356:	6809      	ldr	r1, [r1, #0]
 800b358:	40a8      	lsls	r0, r5
 800b35a:	fb53 0301 	smmla	r3, r3, r1, r0
 800b35e:	4113      	asrs	r3, r2
 800b360:	4423      	add	r3, r4
 800b362:	f303 0307 	ssat	r3, #8, r3
 800b366:	9825      	ldr	r0, [sp, #148]	@ 0x94
 800b368:	f800 3b01 	strb.w	r3, [r0], #1
 800b36c:	9025      	str	r0, [sp, #148]	@ 0x94
 800b36e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b370:	2b00      	cmp	r3, #0
 800b372:	d066      	beq.n	800b442 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x422>
 800b374:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b376:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800b378:	fb03 f000 	mul.w	r0, r3, r0
 800b37c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800b37e:	f1c0 0001 	rsb	r0, r0, #1
 800b382:	4418      	add	r0, r3
 800b384:	b015      	add	sp, #84	@ 0x54
 800b386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b38a:	2d00      	cmp	r5, #0
 800b38c:	dd29      	ble.n	800b3e2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3c2>
 800b38e:	9e01      	ldr	r6, [sp, #4]
 800b390:	0052      	lsls	r2, r2, #1
 800b392:	f85b 4c08 	ldr.w	r4, [fp, #-8]
 800b396:	f856 1c08 	ldr.w	r1, [r6, #-8]
 800b39a:	f1a6 0e04 	sub.w	lr, r6, #4
 800b39e:	fb52 4201 	smmla	r2, r2, r1, r4
 800b3a2:	fa42 f505 	asr.w	r5, r2, r5
 800b3a6:	9a00      	ldr	r2, [sp, #0]
 800b3a8:	f1ab 0604 	sub.w	r6, fp, #4
 800b3ac:	f1a2 0c02 	sub.w	ip, r2, #2
 800b3b0:	f305 0507 	ssat	r5, #8, r5
 800b3b4:	9a03      	ldr	r2, [sp, #12]
 800b3b6:	f802 5c01 	strb.w	r5, [r2, #-1]
 800b3ba:	f9bc 2000 	ldrsh.w	r2, [ip]
 800b3be:	2a15      	cmp	r2, #21
 800b3c0:	f73f af4f 	bgt.w	800b262 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x242>
 800b3c4:	2a00      	cmp	r2, #0
 800b3c6:	dd25      	ble.n	800b414 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3f4>
 800b3c8:	f8de 1000 	ldr.w	r1, [lr]
 800b3cc:	005b      	lsls	r3, r3, #1
 800b3ce:	6834      	ldr	r4, [r6, #0]
 800b3d0:	fb53 4301 	smmla	r3, r3, r1, r4
 800b3d4:	4113      	asrs	r3, r2
 800b3d6:	f303 0307 	ssat	r3, #8, r3
 800b3da:	9a02      	ldr	r2, [sp, #8]
 800b3dc:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b3e0:	e750      	b.n	800b284 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x264>
 800b3e2:	f1c5 0501 	rsb	r5, r5, #1
 800b3e6:	f1a6 0c02 	sub.w	ip, r6, #2
 800b3ea:	40aa      	lsls	r2, r5
 800b3ec:	f302 021f 	ssat	r2, #32, r2
 800b3f0:	9901      	ldr	r1, [sp, #4]
 800b3f2:	f1a1 0e04 	sub.w	lr, r1, #4
 800b3f6:	f851 1c08 	ldr.w	r1, [r1, #-8]
 800b3fa:	fb52 f111 	smmulr	r1, r2, r1
 800b3fe:	f85b 2c08 	ldr.w	r2, [fp, #-8]
 800b402:	f1ab 0604 	sub.w	r6, fp, #4
 800b406:	440a      	add	r2, r1
 800b408:	f302 0207 	ssat	r2, #8, r2
 800b40c:	9903      	ldr	r1, [sp, #12]
 800b40e:	f801 2c01 	strb.w	r2, [r1, #-1]
 800b412:	e721      	b.n	800b258 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x238>
 800b414:	f1c2 0201 	rsb	r2, r2, #1
 800b418:	fa03 f202 	lsl.w	r2, r3, r2
 800b41c:	f302 021f 	ssat	r2, #32, r2
 800b420:	f8de 3000 	ldr.w	r3, [lr]
 800b424:	fb52 f313 	smmulr	r3, r2, r3
 800b428:	6832      	ldr	r2, [r6, #0]
 800b42a:	4413      	add	r3, r2
 800b42c:	f303 0307 	ssat	r3, #8, r3
 800b430:	9a02      	ldr	r2, [sp, #8]
 800b432:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b436:	e725      	b.n	800b284 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x264>
 800b438:	f04f 0e00 	mov.w	lr, #0
 800b43c:	e68e      	b.n	800b15c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x13c>
 800b43e:	2401      	movs	r4, #1
 800b440:	e604      	b.n	800b04c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2c>
 800b442:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b444:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b446:	1a98      	subs	r0, r3, r2
 800b448:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800b44a:	4418      	add	r0, r3
 800b44c:	b015      	add	sp, #84	@ 0x54
 800b44e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b452:	2a00      	cmp	r2, #0
 800b454:	dd0e      	ble.n	800b474 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x454>
 800b456:	9922      	ldr	r1, [sp, #136]	@ 0x88
 800b458:	005b      	lsls	r3, r3, #1
 800b45a:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 800b45c:	6809      	ldr	r1, [r1, #0]
 800b45e:	6800      	ldr	r0, [r0, #0]
 800b460:	fb53 0301 	smmla	r3, r3, r1, r0
 800b464:	4113      	asrs	r3, r2
 800b466:	f303 0307 	ssat	r3, #8, r3
 800b46a:	9825      	ldr	r0, [sp, #148]	@ 0x94
 800b46c:	f800 3b01 	strb.w	r3, [r0], #1
 800b470:	9025      	str	r0, [sp, #148]	@ 0x94
 800b472:	e77c      	b.n	800b36e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x34e>
 800b474:	f1c2 0201 	rsb	r2, r2, #1
 800b478:	4093      	lsls	r3, r2
 800b47a:	f303 031f 	ssat	r3, #32, r3
 800b47e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b480:	6812      	ldr	r2, [r2, #0]
 800b482:	fb53 f312 	smmulr	r3, r3, r2
 800b486:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b488:	6812      	ldr	r2, [r2, #0]
 800b48a:	4413      	add	r3, r2
 800b48c:	f303 0307 	ssat	r3, #8, r3
 800b490:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 800b492:	f802 3b01 	strb.w	r3, [r2], #1
 800b496:	9225      	str	r2, [sp, #148]	@ 0x94
 800b498:	e769      	b.n	800b36e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x34e>
 800b49a:	bf00      	nop

0800b49c <arm_fill_q15>:
 800b49c:	b510      	push	{r4, lr}
 800b49e:	eac0 4400 	pkhbt	r4, r0, r0, lsl #16
 800b4a2:	ea5f 0e92 	movs.w	lr, r2, lsr #2
 800b4a6:	d013      	beq.n	800b4d0 <arm_fill_q15+0x34>
 800b4a8:	f10e 33ff 	add.w	r3, lr, #4294967295
 800b4ac:	2b09      	cmp	r3, #9
 800b4ae:	460b      	mov	r3, r1
 800b4b0:	d919      	bls.n	800b4e6 <arm_fill_q15+0x4a>
 800b4b2:	f011 0f07 	tst.w	r1, #7
 800b4b6:	d116      	bne.n	800b4e6 <arm_fill_q15+0x4a>
 800b4b8:	f04f 0c00 	mov.w	ip, #0
 800b4bc:	f10c 0c01 	add.w	ip, ip, #1
 800b4c0:	45e6      	cmp	lr, ip
 800b4c2:	e9c3 4400 	strd	r4, r4, [r3]
 800b4c6:	f103 0308 	add.w	r3, r3, #8
 800b4ca:	d1f7      	bne.n	800b4bc <arm_fill_q15+0x20>
 800b4cc:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
 800b4d0:	f012 0203 	ands.w	r2, r2, #3
 800b4d4:	d006      	beq.n	800b4e4 <arm_fill_q15+0x48>
 800b4d6:	3a01      	subs	r2, #1
 800b4d8:	8008      	strh	r0, [r1, #0]
 800b4da:	d003      	beq.n	800b4e4 <arm_fill_q15+0x48>
 800b4dc:	2a01      	cmp	r2, #1
 800b4de:	8048      	strh	r0, [r1, #2]
 800b4e0:	bf18      	it	ne
 800b4e2:	8088      	strhne	r0, [r1, #4]
 800b4e4:	bd10      	pop	{r4, pc}
 800b4e6:	46f4      	mov	ip, lr
 800b4e8:	f1bc 0c01 	subs.w	ip, ip, #1
 800b4ec:	601c      	str	r4, [r3, #0]
 800b4ee:	605c      	str	r4, [r3, #4]
 800b4f0:	f103 0308 	add.w	r3, r3, #8
 800b4f4:	d1f8      	bne.n	800b4e8 <arm_fill_q15+0x4c>
 800b4f6:	e7e9      	b.n	800b4cc <arm_fill_q15+0x30>

0800b4f8 <arm_float_to_q15>:
 800b4f8:	b530      	push	{r4, r5, lr}
 800b4fa:	0895      	lsrs	r5, r2, #2
 800b4fc:	d069      	beq.n	800b5d2 <arm_float_to_q15+0xda>
 800b4fe:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800b502:	f100 0c10 	add.w	ip, r0, #16
 800b506:	eefe 5a00 	vmov.f32	s11, #224	@ 0xbf000000 -0.5
 800b50a:	ed9f 6a55 	vldr	s12, [pc, #340]	@ 800b660 <arm_float_to_q15+0x168>
 800b50e:	f101 0e08 	add.w	lr, r1, #8
 800b512:	462c      	mov	r4, r5
 800b514:	ed5c 7a04 	vldr	s15, [ip, #-16]
 800b518:	ee67 6a86 	vmul.f32	s13, s15, s12
 800b51c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800b520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b524:	fe77 7a25 	vselgt.f32	s15, s14, s11
 800b528:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b52c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b530:	ee17 3a90 	vmov	r3, s15
 800b534:	f303 030f 	ssat	r3, #16, r3
 800b538:	f82e 3c08 	strh.w	r3, [lr, #-8]
 800b53c:	ed5c 7a03 	vldr	s15, [ip, #-12]
 800b540:	ee67 6a86 	vmul.f32	s13, s15, s12
 800b544:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800b548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b54c:	fe77 7a25 	vselgt.f32	s15, s14, s11
 800b550:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b554:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b558:	ee17 3a90 	vmov	r3, s15
 800b55c:	f303 030f 	ssat	r3, #16, r3
 800b560:	f82e 3c06 	strh.w	r3, [lr, #-6]
 800b564:	ed5c 7a02 	vldr	s15, [ip, #-8]
 800b568:	ee67 6a86 	vmul.f32	s13, s15, s12
 800b56c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800b570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b574:	fe77 7a25 	vselgt.f32	s15, s14, s11
 800b578:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b57c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b580:	ee17 3a90 	vmov	r3, s15
 800b584:	f303 030f 	ssat	r3, #16, r3
 800b588:	f82e 3c04 	strh.w	r3, [lr, #-4]
 800b58c:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800b590:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b594:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b598:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b59c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b5a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5a4:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800b5a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b5ac:	bfcc      	ite	gt
 800b5ae:	ee16 3a90 	vmovgt	r3, s13
 800b5b2:	ee17 3a90 	vmovle	r3, s15
 800b5b6:	f303 030f 	ssat	r3, #16, r3
 800b5ba:	3c01      	subs	r4, #1
 800b5bc:	f82e 3c02 	strh.w	r3, [lr, #-2]
 800b5c0:	f10c 0c10 	add.w	ip, ip, #16
 800b5c4:	f10e 0e08 	add.w	lr, lr, #8
 800b5c8:	d1a4      	bne.n	800b514 <arm_float_to_q15+0x1c>
 800b5ca:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800b5ce:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800b5d2:	f012 0203 	ands.w	r2, r2, #3
 800b5d6:	d042      	beq.n	800b65e <arm_float_to_q15+0x166>
 800b5d8:	edd0 7a00 	vldr	s15, [r0]
 800b5dc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800b5e0:	eddf 5a1f 	vldr	s11, [pc, #124]	@ 800b660 <arm_float_to_q15+0x168>
 800b5e4:	eebe 6a00 	vmov.f32	s12, #224	@ 0xbf000000 -0.5
 800b5e8:	ee67 6aa5 	vmul.f32	s13, s15, s11
 800b5ec:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800b5f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5f4:	fe77 7a06 	vselgt.f32	s15, s14, s12
 800b5f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b600:	ee17 3a90 	vmov	r3, s15
 800b604:	f303 030f 	ssat	r3, #16, r3
 800b608:	3a01      	subs	r2, #1
 800b60a:	800b      	strh	r3, [r1, #0]
 800b60c:	d027      	beq.n	800b65e <arm_float_to_q15+0x166>
 800b60e:	edd0 7a01 	vldr	s15, [r0, #4]
 800b612:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b616:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b61a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b61e:	fe77 6a06 	vselgt.f32	s13, s14, s12
 800b622:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b626:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b62a:	ee17 3a90 	vmov	r3, s15
 800b62e:	f303 030f 	ssat	r3, #16, r3
 800b632:	2a01      	cmp	r2, #1
 800b634:	804b      	strh	r3, [r1, #2]
 800b636:	d012      	beq.n	800b65e <arm_float_to_q15+0x166>
 800b638:	edd0 7a02 	vldr	s15, [r0, #8]
 800b63c:	ee67 5aa5 	vmul.f32	s11, s15, s11
 800b640:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 800b644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b648:	fe37 7a06 	vselgt.f32	s14, s14, s12
 800b64c:	ee37 7a25 	vadd.f32	s14, s14, s11
 800b650:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800b654:	ee17 3a10 	vmov	r3, s14
 800b658:	f303 030f 	ssat	r3, #16, r3
 800b65c:	808b      	strh	r3, [r1, #4]
 800b65e:	bd30      	pop	{r4, r5, pc}
 800b660:	47000000 	.word	0x47000000

0800b664 <arm_float_to_q7>:
 800b664:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b666:	0895      	lsrs	r5, r2, #2
 800b668:	d06f      	beq.n	800b74a <arm_float_to_q7+0xe6>
 800b66a:	f101 0c04 	add.w	ip, r1, #4
 800b66e:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800b672:	eebe 5a00 	vmov.f32	s10, #224	@ 0xbf000000 -0.5
 800b676:	f100 0e10 	add.w	lr, r0, #16
 800b67a:	eddf 5a5f 	vldr	s11, [pc, #380]	@ 800b7f8 <arm_float_to_q7+0x194>
 800b67e:	00ae      	lsls	r6, r5, #2
 800b680:	eb0c 0485 	add.w	r4, ip, r5, lsl #2
 800b684:	ed5e 7a04 	vldr	s15, [lr, #-16]
 800b688:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800b68c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800b690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b694:	fe76 7a05 	vselgt.f32	s15, s12, s10
 800b698:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b69c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b6a0:	ee17 3a90 	vmov	r3, s15
 800b6a4:	b21b      	sxth	r3, r3
 800b6a6:	f303 0307 	ssat	r3, #8, r3
 800b6aa:	f80c 3c04 	strb.w	r3, [ip, #-4]
 800b6ae:	ed5e 7a03 	vldr	s15, [lr, #-12]
 800b6b2:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800b6b6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800b6ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6be:	fe76 7a05 	vselgt.f32	s15, s12, s10
 800b6c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b6c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b6ca:	ee17 3a90 	vmov	r3, s15
 800b6ce:	b21b      	sxth	r3, r3
 800b6d0:	f303 0307 	ssat	r3, #8, r3
 800b6d4:	f80c 3c03 	strb.w	r3, [ip, #-3]
 800b6d8:	ed5e 7a02 	vldr	s15, [lr, #-8]
 800b6dc:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800b6e0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800b6e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6e8:	fe76 7a05 	vselgt.f32	s15, s12, s10
 800b6ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b6f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b6f4:	ee17 3a90 	vmov	r3, s15
 800b6f8:	b21b      	sxth	r3, r3
 800b6fa:	f303 0307 	ssat	r3, #8, r3
 800b6fe:	f80c 3c02 	strb.w	r3, [ip, #-2]
 800b702:	ed5e 6a01 	vldr	s13, [lr, #-4]
 800b706:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800b70a:	ee76 7a86 	vadd.f32	s15, s13, s12
 800b70e:	ee36 7ac6 	vsub.f32	s14, s13, s12
 800b712:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800b716:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b71a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800b71e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b722:	ee17 3a90 	vmov	r3, s15
 800b726:	ee17 7a10 	vmov	r7, s14
 800b72a:	b21b      	sxth	r3, r3
 800b72c:	b23f      	sxth	r7, r7
 800b72e:	dd56      	ble.n	800b7de <arm_float_to_q7+0x17a>
 800b730:	f303 0307 	ssat	r3, #8, r3
 800b734:	f80c 3c01 	strb.w	r3, [ip, #-1]
 800b738:	f10c 0c04 	add.w	ip, ip, #4
 800b73c:	f10e 0e10 	add.w	lr, lr, #16
 800b740:	4564      	cmp	r4, ip
 800b742:	d19f      	bne.n	800b684 <arm_float_to_q7+0x20>
 800b744:	4431      	add	r1, r6
 800b746:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800b74a:	f012 0203 	ands.w	r2, r2, #3
 800b74e:	d045      	beq.n	800b7dc <arm_float_to_q7+0x178>
 800b750:	edd0 7a00 	vldr	s15, [r0]
 800b754:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800b758:	ed9f 5a27 	vldr	s10, [pc, #156]	@ 800b7f8 <arm_float_to_q7+0x194>
 800b75c:	eefe 5a00 	vmov.f32	s11, #224	@ 0xbf000000 -0.5
 800b760:	ee67 6a85 	vmul.f32	s13, s15, s10
 800b764:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800b768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b76c:	fe77 7a25 	vselgt.f32	s15, s14, s11
 800b770:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b774:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b778:	ee17 3a90 	vmov	r3, s15
 800b77c:	b21b      	sxth	r3, r3
 800b77e:	f303 0307 	ssat	r3, #8, r3
 800b782:	3a01      	subs	r2, #1
 800b784:	700b      	strb	r3, [r1, #0]
 800b786:	d029      	beq.n	800b7dc <arm_float_to_q7+0x178>
 800b788:	edd0 6a01 	vldr	s13, [r0, #4]
 800b78c:	ee26 6a85 	vmul.f32	s12, s13, s10
 800b790:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 800b794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b798:	fe77 6a25 	vselgt.f32	s13, s14, s11
 800b79c:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b7a0:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800b7a4:	ee16 3a90 	vmov	r3, s13
 800b7a8:	b21b      	sxth	r3, r3
 800b7aa:	f303 0307 	ssat	r3, #8, r3
 800b7ae:	2a01      	cmp	r2, #1
 800b7b0:	704b      	strb	r3, [r1, #1]
 800b7b2:	d013      	beq.n	800b7dc <arm_float_to_q7+0x178>
 800b7b4:	edd0 7a02 	vldr	s15, [r0, #8]
 800b7b8:	ee27 5a85 	vmul.f32	s10, s15, s10
 800b7bc:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 800b7c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7c4:	fe77 7a25 	vselgt.f32	s15, s14, s11
 800b7c8:	ee77 7a85 	vadd.f32	s15, s15, s10
 800b7cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b7d0:	ee17 3a90 	vmov	r3, s15
 800b7d4:	b21b      	sxth	r3, r3
 800b7d6:	f303 0307 	ssat	r3, #8, r3
 800b7da:	708b      	strb	r3, [r1, #2]
 800b7dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7de:	f307 0707 	ssat	r7, #8, r7
 800b7e2:	f80c 7c01 	strb.w	r7, [ip, #-1]
 800b7e6:	f10c 0c04 	add.w	ip, ip, #4
 800b7ea:	f10e 0e10 	add.w	lr, lr, #16
 800b7ee:	45a4      	cmp	ip, r4
 800b7f0:	f47f af48 	bne.w	800b684 <arm_float_to_q7+0x20>
 800b7f4:	e7a6      	b.n	800b744 <arm_float_to_q7+0xe0>
 800b7f6:	bf00      	nop
 800b7f8:	43000000 	.word	0x43000000

0800b7fc <arm_q15_to_float>:
 800b7fc:	b530      	push	{r4, r5, lr}
 800b7fe:	0894      	lsrs	r4, r2, #2
 800b800:	d038      	beq.n	800b874 <arm_q15_to_float+0x78>
 800b802:	f100 0c08 	add.w	ip, r0, #8
 800b806:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800b8c4 <arm_q15_to_float+0xc8>
 800b80a:	f101 0310 	add.w	r3, r1, #16
 800b80e:	46a6      	mov	lr, r4
 800b810:	f93c 5c08 	ldrsh.w	r5, [ip, #-8]
 800b814:	3310      	adds	r3, #16
 800b816:	f10c 0c08 	add.w	ip, ip, #8
 800b81a:	f1be 0e01 	subs.w	lr, lr, #1
 800b81e:	ee07 5a90 	vmov	s15, r5
 800b822:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b826:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b82a:	ed43 7a08 	vstr	s15, [r3, #-32]	@ 0xffffffe0
 800b82e:	f93c 5c0e 	ldrsh.w	r5, [ip, #-14]
 800b832:	ee07 5a90 	vmov	s15, r5
 800b836:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b83a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b83e:	ed43 7a07 	vstr	s15, [r3, #-28]	@ 0xffffffe4
 800b842:	f93c 5c0c 	ldrsh.w	r5, [ip, #-12]
 800b846:	ee07 5a90 	vmov	s15, r5
 800b84a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b84e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b852:	ed43 7a06 	vstr	s15, [r3, #-24]	@ 0xffffffe8
 800b856:	f93c 5c0a 	ldrsh.w	r5, [ip, #-10]
 800b85a:	ee07 5a90 	vmov	s15, r5
 800b85e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b862:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b866:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 800b86a:	d1d1      	bne.n	800b810 <arm_q15_to_float+0x14>
 800b86c:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 800b870:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800b874:	f012 0203 	ands.w	r2, r2, #3
 800b878:	d023      	beq.n	800b8c2 <arm_q15_to_float+0xc6>
 800b87a:	f9b0 3000 	ldrsh.w	r3, [r0]
 800b87e:	3a01      	subs	r2, #1
 800b880:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800b8c4 <arm_q15_to_float+0xc8>
 800b884:	ee07 3a90 	vmov	s15, r3
 800b888:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b88c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b890:	edc1 7a00 	vstr	s15, [r1]
 800b894:	d015      	beq.n	800b8c2 <arm_q15_to_float+0xc6>
 800b896:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800b89a:	2a01      	cmp	r2, #1
 800b89c:	ee07 3a90 	vmov	s15, r3
 800b8a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b8a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b8a8:	edc1 7a01 	vstr	s15, [r1, #4]
 800b8ac:	d009      	beq.n	800b8c2 <arm_q15_to_float+0xc6>
 800b8ae:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800b8b2:	ee07 3a90 	vmov	s15, r3
 800b8b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b8ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b8be:	edc1 7a02 	vstr	s15, [r1, #8]
 800b8c2:	bd30      	pop	{r4, r5, pc}
 800b8c4:	38000000 	.word	0x38000000

0800b8c8 <arm_q7_to_float>:
 800b8c8:	b530      	push	{r4, r5, lr}
 800b8ca:	0894      	lsrs	r4, r2, #2
 800b8cc:	d036      	beq.n	800b93c <arm_q7_to_float+0x74>
 800b8ce:	1d03      	adds	r3, r0, #4
 800b8d0:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800b8d4:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 800b98c <arm_q7_to_float+0xc4>
 800b8d8:	f101 0010 	add.w	r0, r1, #16
 800b8dc:	f913 ec04 	ldrsb.w	lr, [r3, #-4]
 800b8e0:	3010      	adds	r0, #16
 800b8e2:	ee07 ea90 	vmov	s15, lr
 800b8e6:	469e      	mov	lr, r3
 800b8e8:	3304      	adds	r3, #4
 800b8ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b8ee:	45e6      	cmp	lr, ip
 800b8f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b8f4:	ed40 7a08 	vstr	s15, [r0, #-32]	@ 0xffffffe0
 800b8f8:	f913 5c07 	ldrsb.w	r5, [r3, #-7]
 800b8fc:	ee07 5a90 	vmov	s15, r5
 800b900:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b904:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b908:	ed40 7a07 	vstr	s15, [r0, #-28]	@ 0xffffffe4
 800b90c:	f913 5c06 	ldrsb.w	r5, [r3, #-6]
 800b910:	ee07 5a90 	vmov	s15, r5
 800b914:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b918:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b91c:	ed40 7a06 	vstr	s15, [r0, #-24]	@ 0xffffffe8
 800b920:	f913 5c05 	ldrsb.w	r5, [r3, #-5]
 800b924:	ee07 5a90 	vmov	s15, r5
 800b928:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b92c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b930:	ed40 7a05 	vstr	s15, [r0, #-20]	@ 0xffffffec
 800b934:	d1d2      	bne.n	800b8dc <arm_q7_to_float+0x14>
 800b936:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 800b93a:	4660      	mov	r0, ip
 800b93c:	f012 0203 	ands.w	r2, r2, #3
 800b940:	d023      	beq.n	800b98a <arm_q7_to_float+0xc2>
 800b942:	f990 3000 	ldrsb.w	r3, [r0]
 800b946:	3a01      	subs	r2, #1
 800b948:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800b98c <arm_q7_to_float+0xc4>
 800b94c:	ee07 3a90 	vmov	s15, r3
 800b950:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b954:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b958:	edc1 7a00 	vstr	s15, [r1]
 800b95c:	d015      	beq.n	800b98a <arm_q7_to_float+0xc2>
 800b95e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800b962:	2a01      	cmp	r2, #1
 800b964:	ee07 3a90 	vmov	s15, r3
 800b968:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b96c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b970:	edc1 7a01 	vstr	s15, [r1, #4]
 800b974:	d009      	beq.n	800b98a <arm_q7_to_float+0xc2>
 800b976:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800b97a:	ee07 3a90 	vmov	s15, r3
 800b97e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b982:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b986:	edc1 7a02 	vstr	s15, [r1, #8]
 800b98a:	bd30      	pop	{r4, r5, pc}
 800b98c:	3c000000 	.word	0x3c000000

0800b990 <ai_array_to_buffer_fmt>:
 800b990:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800b994:	2b02      	cmp	r3, #2
 800b996:	d050      	beq.n	800ba3a <ai_array_to_buffer_fmt+0xaa>
 800b998:	f020 427e 	bic.w	r2, r0, #4261412864	@ 0xfe000000
 800b99c:	4b29      	ldr	r3, [pc, #164]	@ (800ba44 <ai_array_to_buffer_fmt+0xb4>)
 800b99e:	429a      	cmp	r2, r3
 800b9a0:	d00b      	beq.n	800b9ba <ai_array_to_buffer_fmt+0x2a>
 800b9a2:	dc1c      	bgt.n	800b9de <ai_array_to_buffer_fmt+0x4e>
 800b9a4:	4b28      	ldr	r3, [pc, #160]	@ (800ba48 <ai_array_to_buffer_fmt+0xb8>)
 800b9a6:	429a      	cmp	r2, r3
 800b9a8:	d007      	beq.n	800b9ba <ai_array_to_buffer_fmt+0x2a>
 800b9aa:	dd0b      	ble.n	800b9c4 <ai_array_to_buffer_fmt+0x34>
 800b9ac:	4b27      	ldr	r3, [pc, #156]	@ (800ba4c <ai_array_to_buffer_fmt+0xbc>)
 800b9ae:	429a      	cmp	r2, r3
 800b9b0:	d003      	beq.n	800b9ba <ai_array_to_buffer_fmt+0x2a>
 800b9b2:	f503 33fa 	add.w	r3, r3, #128000	@ 0x1f400
 800b9b6:	429a      	cmp	r2, r3
 800b9b8:	d131      	bne.n	800ba1e <ai_array_to_buffer_fmt+0x8e>
 800b9ba:	4613      	mov	r3, r2
 800b9bc:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800b9c0:	4318      	orrs	r0, r3
 800b9c2:	4770      	bx	lr
 800b9c4:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800b9c8:	429a      	cmp	r2, r3
 800b9ca:	d0f6      	beq.n	800b9ba <ai_array_to_buffer_fmt+0x2a>
 800b9cc:	dd2c      	ble.n	800ba28 <ai_array_to_buffer_fmt+0x98>
 800b9ce:	4b20      	ldr	r3, [pc, #128]	@ (800ba50 <ai_array_to_buffer_fmt+0xc0>)
 800b9d0:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	bf18      	it	ne
 800b9d8:	2340      	movne	r3, #64	@ 0x40
 800b9da:	4318      	orrs	r0, r3
 800b9dc:	4770      	bx	lr
 800b9de:	4b1d      	ldr	r3, [pc, #116]	@ (800ba54 <ai_array_to_buffer_fmt+0xc4>)
 800b9e0:	429a      	cmp	r2, r3
 800b9e2:	d0ea      	beq.n	800b9ba <ai_array_to_buffer_fmt+0x2a>
 800b9e4:	dd0e      	ble.n	800ba04 <ai_array_to_buffer_fmt+0x74>
 800b9e6:	4b1c      	ldr	r3, [pc, #112]	@ (800ba58 <ai_array_to_buffer_fmt+0xc8>)
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	d0e6      	beq.n	800b9ba <ai_array_to_buffer_fmt+0x2a>
 800b9ec:	f503 037e 	add.w	r3, r3, #16646144	@ 0xfe0000
 800b9f0:	429a      	cmp	r2, r3
 800b9f2:	d0e2      	beq.n	800b9ba <ai_array_to_buffer_fmt+0x2a>
 800b9f4:	4b19      	ldr	r3, [pc, #100]	@ (800ba5c <ai_array_to_buffer_fmt+0xcc>)
 800b9f6:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800b9fa:	429a      	cmp	r2, r3
 800b9fc:	bf18      	it	ne
 800b9fe:	2340      	movne	r3, #64	@ 0x40
 800ba00:	4318      	orrs	r0, r3
 800ba02:	4770      	bx	lr
 800ba04:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800ba08:	429a      	cmp	r2, r3
 800ba0a:	d0d6      	beq.n	800b9ba <ai_array_to_buffer_fmt+0x2a>
 800ba0c:	3307      	adds	r3, #7
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	d0d3      	beq.n	800b9ba <ai_array_to_buffer_fmt+0x2a>
 800ba12:	f2a3 3387 	subw	r3, r3, #903	@ 0x387
 800ba16:	429a      	cmp	r2, r3
 800ba18:	bf18      	it	ne
 800ba1a:	2340      	movne	r3, #64	@ 0x40
 800ba1c:	e7ce      	b.n	800b9bc <ai_array_to_buffer_fmt+0x2c>
 800ba1e:	4b10      	ldr	r3, [pc, #64]	@ (800ba60 <ai_array_to_buffer_fmt+0xd0>)
 800ba20:	429a      	cmp	r2, r3
 800ba22:	bf18      	it	ne
 800ba24:	2340      	movne	r3, #64	@ 0x40
 800ba26:	e7c9      	b.n	800b9bc <ai_array_to_buffer_fmt+0x2c>
 800ba28:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800ba2c:	429a      	cmp	r2, r3
 800ba2e:	d0c4      	beq.n	800b9ba <ai_array_to_buffer_fmt+0x2a>
 800ba30:	3380      	adds	r3, #128	@ 0x80
 800ba32:	429a      	cmp	r2, r3
 800ba34:	bf18      	it	ne
 800ba36:	2340      	movne	r3, #64	@ 0x40
 800ba38:	e7c0      	b.n	800b9bc <ai_array_to_buffer_fmt+0x2c>
 800ba3a:	4b0a      	ldr	r3, [pc, #40]	@ (800ba64 <ai_array_to_buffer_fmt+0xd4>)
 800ba3c:	4003      	ands	r3, r0
 800ba3e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ba42:	e7bb      	b.n	800b9bc <ai_array_to_buffer_fmt+0x2c>
 800ba44:	00840040 	.word	0x00840040
 800ba48:	00040840 	.word	0x00040840
 800ba4c:	00041040 	.word	0x00041040
 800ba50:	00040447 	.word	0x00040447
 800ba54:	00840840 	.word	0x00840840
 800ba58:	00841040 	.word	0x00841040
 800ba5c:	0084084f 	.word	0x0084084f
 800ba60:	0004084f 	.word	0x0004084f
 800ba64:	00803fff 	.word	0x00803fff

0800ba68 <ai_array_get_byte_size>:
 800ba68:	b319      	cbz	r1, 800bab2 <ai_array_get_byte_size+0x4a>
 800ba6a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800ba6e:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800ba72:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 800ba76:	11c0      	asrs	r0, r0, #7
 800ba78:	fb03 f101 	mul.w	r1, r3, r1
 800ba7c:	2a04      	cmp	r2, #4
 800ba7e:	f101 0107 	add.w	r1, r1, #7
 800ba82:	f021 0107 	bic.w	r1, r1, #7
 800ba86:	fa21 f10c 	lsr.w	r1, r1, ip
 800ba8a:	d00b      	beq.n	800baa4 <ai_array_get_byte_size+0x3c>
 800ba8c:	2a08      	cmp	r2, #8
 800ba8e:	d002      	beq.n	800ba96 <ai_array_get_byte_size+0x2e>
 800ba90:	3107      	adds	r1, #7
 800ba92:	08c8      	lsrs	r0, r1, #3
 800ba94:	4770      	bx	lr
 800ba96:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 800ba9a:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800ba9e:	3107      	adds	r1, #7
 800baa0:	08c8      	lsrs	r0, r1, #3
 800baa2:	4770      	bx	lr
 800baa4:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 800baa8:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 800baac:	3107      	adds	r1, #7
 800baae:	08c8      	lsrs	r0, r1, #3
 800bab0:	4770      	bx	lr
 800bab2:	4608      	mov	r0, r1
 800bab4:	4770      	bx	lr
 800bab6:	bf00      	nop

0800bab8 <ai_array_get_data_byte_size>:
 800bab8:	b161      	cbz	r1, 800bad4 <ai_array_get_data_byte_size+0x1c>
 800baba:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800babe:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800bac2:	fb03 f101 	mul.w	r1, r3, r1
 800bac6:	1dc8      	adds	r0, r1, #7
 800bac8:	f020 0007 	bic.w	r0, r0, #7
 800bacc:	40d0      	lsrs	r0, r2
 800bace:	3007      	adds	r0, #7
 800bad0:	08c0      	lsrs	r0, r0, #3
 800bad2:	4770      	bx	lr
 800bad4:	4608      	mov	r0, r1
 800bad6:	4770      	bx	lr

0800bad8 <ai_version_get>:
 800bad8:	0212      	lsls	r2, r2, #8
 800bada:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800bade:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800bae2:	4770      	bx	lr

0800bae4 <get_tensor_byte_size>:
 800bae4:	b430      	push	{r4, r5}
 800bae6:	6985      	ldr	r5, [r0, #24]
 800bae8:	68c4      	ldr	r4, [r0, #12]
 800baea:	6941      	ldr	r1, [r0, #20]
 800baec:	4b06      	ldr	r3, [pc, #24]	@ (800bb08 <get_tensor_byte_size+0x24>)
 800baee:	6828      	ldr	r0, [r5, #0]
 800baf0:	4a06      	ldr	r2, [pc, #24]	@ (800bb0c <get_tensor_byte_size+0x28>)
 800baf2:	4003      	ands	r3, r0
 800baf4:	68c9      	ldr	r1, [r1, #12]
 800baf6:	68e0      	ldr	r0, [r4, #12]
 800baf8:	4293      	cmp	r3, r2
 800bafa:	fb01 f000 	mul.w	r0, r1, r0
 800bafe:	d101      	bne.n	800bb04 <get_tensor_byte_size+0x20>
 800bb00:	3007      	adds	r0, #7
 800bb02:	08c0      	lsrs	r0, r0, #3
 800bb04:	bc30      	pop	{r4, r5}
 800bb06:	4770      	bx	lr
 800bb08:	017fffff 	.word	0x017fffff
 800bb0c:	000400c0 	.word	0x000400c0

0800bb10 <core_tensor_clone>:
 800bb10:	680b      	ldr	r3, [r1, #0]
 800bb12:	6882      	ldr	r2, [r0, #8]
 800bb14:	6003      	str	r3, [r0, #0]
 800bb16:	684b      	ldr	r3, [r1, #4]
 800bb18:	6043      	str	r3, [r0, #4]
 800bb1a:	698b      	ldr	r3, [r1, #24]
 800bb1c:	6183      	str	r3, [r0, #24]
 800bb1e:	688b      	ldr	r3, [r1, #8]
 800bb20:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800bb24:	f363 221f 	bfi	r2, r3, #8, #24
 800bb28:	b410      	push	{r4}
 800bb2a:	6082      	str	r2, [r0, #8]
 800bb2c:	b15b      	cbz	r3, 800bb46 <core_tensor_clone+0x36>
 800bb2e:	2300      	movs	r3, #0
 800bb30:	68cc      	ldr	r4, [r1, #12]
 800bb32:	68c2      	ldr	r2, [r0, #12]
 800bb34:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 800bb38:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 800bb3c:	3301      	adds	r3, #1
 800bb3e:	6882      	ldr	r2, [r0, #8]
 800bb40:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 800bb44:	d3f4      	bcc.n	800bb30 <core_tensor_clone+0x20>
 800bb46:	690b      	ldr	r3, [r1, #16]
 800bb48:	6902      	ldr	r2, [r0, #16]
 800bb4a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800bb4e:	f363 221f 	bfi	r2, r3, #8, #24
 800bb52:	6102      	str	r2, [r0, #16]
 800bb54:	b15b      	cbz	r3, 800bb6e <core_tensor_clone+0x5e>
 800bb56:	2300      	movs	r3, #0
 800bb58:	694c      	ldr	r4, [r1, #20]
 800bb5a:	6942      	ldr	r2, [r0, #20]
 800bb5c:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 800bb60:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 800bb64:	3301      	adds	r3, #1
 800bb66:	6902      	ldr	r2, [r0, #16]
 800bb68:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 800bb6c:	d3f4      	bcc.n	800bb58 <core_tensor_clone+0x48>
 800bb6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb72:	4770      	bx	lr

0800bb74 <core_array_clone>:
 800bb74:	4684      	mov	ip, r0
 800bb76:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 800bb78:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800bb7c:	4770      	bx	lr
 800bb7e:	bf00      	nop

0800bb80 <malloc>:
 800bb80:	4b02      	ldr	r3, [pc, #8]	@ (800bb8c <malloc+0xc>)
 800bb82:	4601      	mov	r1, r0
 800bb84:	6818      	ldr	r0, [r3, #0]
 800bb86:	f000 b825 	b.w	800bbd4 <_malloc_r>
 800bb8a:	bf00      	nop
 800bb8c:	24000b5c 	.word	0x24000b5c

0800bb90 <sbrk_aligned>:
 800bb90:	b570      	push	{r4, r5, r6, lr}
 800bb92:	4e0f      	ldr	r6, [pc, #60]	@ (800bbd0 <sbrk_aligned+0x40>)
 800bb94:	460c      	mov	r4, r1
 800bb96:	6831      	ldr	r1, [r6, #0]
 800bb98:	4605      	mov	r5, r0
 800bb9a:	b911      	cbnz	r1, 800bba2 <sbrk_aligned+0x12>
 800bb9c:	f000 fe9a 	bl	800c8d4 <_sbrk_r>
 800bba0:	6030      	str	r0, [r6, #0]
 800bba2:	4621      	mov	r1, r4
 800bba4:	4628      	mov	r0, r5
 800bba6:	f000 fe95 	bl	800c8d4 <_sbrk_r>
 800bbaa:	1c43      	adds	r3, r0, #1
 800bbac:	d103      	bne.n	800bbb6 <sbrk_aligned+0x26>
 800bbae:	f04f 34ff 	mov.w	r4, #4294967295
 800bbb2:	4620      	mov	r0, r4
 800bbb4:	bd70      	pop	{r4, r5, r6, pc}
 800bbb6:	1cc4      	adds	r4, r0, #3
 800bbb8:	f024 0403 	bic.w	r4, r4, #3
 800bbbc:	42a0      	cmp	r0, r4
 800bbbe:	d0f8      	beq.n	800bbb2 <sbrk_aligned+0x22>
 800bbc0:	1a21      	subs	r1, r4, r0
 800bbc2:	4628      	mov	r0, r5
 800bbc4:	f000 fe86 	bl	800c8d4 <_sbrk_r>
 800bbc8:	3001      	adds	r0, #1
 800bbca:	d1f2      	bne.n	800bbb2 <sbrk_aligned+0x22>
 800bbcc:	e7ef      	b.n	800bbae <sbrk_aligned+0x1e>
 800bbce:	bf00      	nop
 800bbd0:	240691a4 	.word	0x240691a4

0800bbd4 <_malloc_r>:
 800bbd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbd8:	1ccd      	adds	r5, r1, #3
 800bbda:	f025 0503 	bic.w	r5, r5, #3
 800bbde:	3508      	adds	r5, #8
 800bbe0:	2d0c      	cmp	r5, #12
 800bbe2:	bf38      	it	cc
 800bbe4:	250c      	movcc	r5, #12
 800bbe6:	2d00      	cmp	r5, #0
 800bbe8:	4606      	mov	r6, r0
 800bbea:	db01      	blt.n	800bbf0 <_malloc_r+0x1c>
 800bbec:	42a9      	cmp	r1, r5
 800bbee:	d904      	bls.n	800bbfa <_malloc_r+0x26>
 800bbf0:	230c      	movs	r3, #12
 800bbf2:	6033      	str	r3, [r6, #0]
 800bbf4:	2000      	movs	r0, #0
 800bbf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbfa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bcd0 <_malloc_r+0xfc>
 800bbfe:	f000 f869 	bl	800bcd4 <__malloc_lock>
 800bc02:	f8d8 3000 	ldr.w	r3, [r8]
 800bc06:	461c      	mov	r4, r3
 800bc08:	bb44      	cbnz	r4, 800bc5c <_malloc_r+0x88>
 800bc0a:	4629      	mov	r1, r5
 800bc0c:	4630      	mov	r0, r6
 800bc0e:	f7ff ffbf 	bl	800bb90 <sbrk_aligned>
 800bc12:	1c43      	adds	r3, r0, #1
 800bc14:	4604      	mov	r4, r0
 800bc16:	d158      	bne.n	800bcca <_malloc_r+0xf6>
 800bc18:	f8d8 4000 	ldr.w	r4, [r8]
 800bc1c:	4627      	mov	r7, r4
 800bc1e:	2f00      	cmp	r7, #0
 800bc20:	d143      	bne.n	800bcaa <_malloc_r+0xd6>
 800bc22:	2c00      	cmp	r4, #0
 800bc24:	d04b      	beq.n	800bcbe <_malloc_r+0xea>
 800bc26:	6823      	ldr	r3, [r4, #0]
 800bc28:	4639      	mov	r1, r7
 800bc2a:	4630      	mov	r0, r6
 800bc2c:	eb04 0903 	add.w	r9, r4, r3
 800bc30:	f000 fe50 	bl	800c8d4 <_sbrk_r>
 800bc34:	4581      	cmp	r9, r0
 800bc36:	d142      	bne.n	800bcbe <_malloc_r+0xea>
 800bc38:	6821      	ldr	r1, [r4, #0]
 800bc3a:	1a6d      	subs	r5, r5, r1
 800bc3c:	4629      	mov	r1, r5
 800bc3e:	4630      	mov	r0, r6
 800bc40:	f7ff ffa6 	bl	800bb90 <sbrk_aligned>
 800bc44:	3001      	adds	r0, #1
 800bc46:	d03a      	beq.n	800bcbe <_malloc_r+0xea>
 800bc48:	6823      	ldr	r3, [r4, #0]
 800bc4a:	442b      	add	r3, r5
 800bc4c:	6023      	str	r3, [r4, #0]
 800bc4e:	f8d8 3000 	ldr.w	r3, [r8]
 800bc52:	685a      	ldr	r2, [r3, #4]
 800bc54:	bb62      	cbnz	r2, 800bcb0 <_malloc_r+0xdc>
 800bc56:	f8c8 7000 	str.w	r7, [r8]
 800bc5a:	e00f      	b.n	800bc7c <_malloc_r+0xa8>
 800bc5c:	6822      	ldr	r2, [r4, #0]
 800bc5e:	1b52      	subs	r2, r2, r5
 800bc60:	d420      	bmi.n	800bca4 <_malloc_r+0xd0>
 800bc62:	2a0b      	cmp	r2, #11
 800bc64:	d917      	bls.n	800bc96 <_malloc_r+0xc2>
 800bc66:	1961      	adds	r1, r4, r5
 800bc68:	42a3      	cmp	r3, r4
 800bc6a:	6025      	str	r5, [r4, #0]
 800bc6c:	bf18      	it	ne
 800bc6e:	6059      	strne	r1, [r3, #4]
 800bc70:	6863      	ldr	r3, [r4, #4]
 800bc72:	bf08      	it	eq
 800bc74:	f8c8 1000 	streq.w	r1, [r8]
 800bc78:	5162      	str	r2, [r4, r5]
 800bc7a:	604b      	str	r3, [r1, #4]
 800bc7c:	4630      	mov	r0, r6
 800bc7e:	f000 f82f 	bl	800bce0 <__malloc_unlock>
 800bc82:	f104 000b 	add.w	r0, r4, #11
 800bc86:	1d23      	adds	r3, r4, #4
 800bc88:	f020 0007 	bic.w	r0, r0, #7
 800bc8c:	1ac2      	subs	r2, r0, r3
 800bc8e:	bf1c      	itt	ne
 800bc90:	1a1b      	subne	r3, r3, r0
 800bc92:	50a3      	strne	r3, [r4, r2]
 800bc94:	e7af      	b.n	800bbf6 <_malloc_r+0x22>
 800bc96:	6862      	ldr	r2, [r4, #4]
 800bc98:	42a3      	cmp	r3, r4
 800bc9a:	bf0c      	ite	eq
 800bc9c:	f8c8 2000 	streq.w	r2, [r8]
 800bca0:	605a      	strne	r2, [r3, #4]
 800bca2:	e7eb      	b.n	800bc7c <_malloc_r+0xa8>
 800bca4:	4623      	mov	r3, r4
 800bca6:	6864      	ldr	r4, [r4, #4]
 800bca8:	e7ae      	b.n	800bc08 <_malloc_r+0x34>
 800bcaa:	463c      	mov	r4, r7
 800bcac:	687f      	ldr	r7, [r7, #4]
 800bcae:	e7b6      	b.n	800bc1e <_malloc_r+0x4a>
 800bcb0:	461a      	mov	r2, r3
 800bcb2:	685b      	ldr	r3, [r3, #4]
 800bcb4:	42a3      	cmp	r3, r4
 800bcb6:	d1fb      	bne.n	800bcb0 <_malloc_r+0xdc>
 800bcb8:	2300      	movs	r3, #0
 800bcba:	6053      	str	r3, [r2, #4]
 800bcbc:	e7de      	b.n	800bc7c <_malloc_r+0xa8>
 800bcbe:	230c      	movs	r3, #12
 800bcc0:	6033      	str	r3, [r6, #0]
 800bcc2:	4630      	mov	r0, r6
 800bcc4:	f000 f80c 	bl	800bce0 <__malloc_unlock>
 800bcc8:	e794      	b.n	800bbf4 <_malloc_r+0x20>
 800bcca:	6005      	str	r5, [r0, #0]
 800bccc:	e7d6      	b.n	800bc7c <_malloc_r+0xa8>
 800bcce:	bf00      	nop
 800bcd0:	240691a8 	.word	0x240691a8

0800bcd4 <__malloc_lock>:
 800bcd4:	4801      	ldr	r0, [pc, #4]	@ (800bcdc <__malloc_lock+0x8>)
 800bcd6:	f000 be4a 	b.w	800c96e <__retarget_lock_acquire_recursive>
 800bcda:	bf00      	nop
 800bcdc:	240692ec 	.word	0x240692ec

0800bce0 <__malloc_unlock>:
 800bce0:	4801      	ldr	r0, [pc, #4]	@ (800bce8 <__malloc_unlock+0x8>)
 800bce2:	f000 be45 	b.w	800c970 <__retarget_lock_release_recursive>
 800bce6:	bf00      	nop
 800bce8:	240692ec 	.word	0x240692ec

0800bcec <_realloc_r>:
 800bcec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcf0:	4680      	mov	r8, r0
 800bcf2:	4615      	mov	r5, r2
 800bcf4:	460c      	mov	r4, r1
 800bcf6:	b921      	cbnz	r1, 800bd02 <_realloc_r+0x16>
 800bcf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bcfc:	4611      	mov	r1, r2
 800bcfe:	f7ff bf69 	b.w	800bbd4 <_malloc_r>
 800bd02:	b92a      	cbnz	r2, 800bd10 <_realloc_r+0x24>
 800bd04:	f001 fc2a 	bl	800d55c <_free_r>
 800bd08:	2400      	movs	r4, #0
 800bd0a:	4620      	mov	r0, r4
 800bd0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd10:	f001 fff0 	bl	800dcf4 <_malloc_usable_size_r>
 800bd14:	4285      	cmp	r5, r0
 800bd16:	4606      	mov	r6, r0
 800bd18:	d802      	bhi.n	800bd20 <_realloc_r+0x34>
 800bd1a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bd1e:	d8f4      	bhi.n	800bd0a <_realloc_r+0x1e>
 800bd20:	4629      	mov	r1, r5
 800bd22:	4640      	mov	r0, r8
 800bd24:	f7ff ff56 	bl	800bbd4 <_malloc_r>
 800bd28:	4607      	mov	r7, r0
 800bd2a:	2800      	cmp	r0, #0
 800bd2c:	d0ec      	beq.n	800bd08 <_realloc_r+0x1c>
 800bd2e:	42b5      	cmp	r5, r6
 800bd30:	462a      	mov	r2, r5
 800bd32:	4621      	mov	r1, r4
 800bd34:	bf28      	it	cs
 800bd36:	4632      	movcs	r2, r6
 800bd38:	f000 fe23 	bl	800c982 <memcpy>
 800bd3c:	4621      	mov	r1, r4
 800bd3e:	4640      	mov	r0, r8
 800bd40:	f001 fc0c 	bl	800d55c <_free_r>
 800bd44:	463c      	mov	r4, r7
 800bd46:	e7e0      	b.n	800bd0a <_realloc_r+0x1e>

0800bd48 <__cvt>:
 800bd48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd4a:	ed2d 8b02 	vpush	{d8}
 800bd4e:	eeb0 8b40 	vmov.f64	d8, d0
 800bd52:	b085      	sub	sp, #20
 800bd54:	4617      	mov	r7, r2
 800bd56:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800bd58:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bd5a:	ee18 2a90 	vmov	r2, s17
 800bd5e:	f025 0520 	bic.w	r5, r5, #32
 800bd62:	2a00      	cmp	r2, #0
 800bd64:	bfb6      	itet	lt
 800bd66:	222d      	movlt	r2, #45	@ 0x2d
 800bd68:	2200      	movge	r2, #0
 800bd6a:	eeb1 8b40 	vneglt.f64	d8, d0
 800bd6e:	2d46      	cmp	r5, #70	@ 0x46
 800bd70:	460c      	mov	r4, r1
 800bd72:	701a      	strb	r2, [r3, #0]
 800bd74:	d004      	beq.n	800bd80 <__cvt+0x38>
 800bd76:	2d45      	cmp	r5, #69	@ 0x45
 800bd78:	d100      	bne.n	800bd7c <__cvt+0x34>
 800bd7a:	3401      	adds	r4, #1
 800bd7c:	2102      	movs	r1, #2
 800bd7e:	e000      	b.n	800bd82 <__cvt+0x3a>
 800bd80:	2103      	movs	r1, #3
 800bd82:	ab03      	add	r3, sp, #12
 800bd84:	9301      	str	r3, [sp, #4]
 800bd86:	ab02      	add	r3, sp, #8
 800bd88:	9300      	str	r3, [sp, #0]
 800bd8a:	4622      	mov	r2, r4
 800bd8c:	4633      	mov	r3, r6
 800bd8e:	eeb0 0b48 	vmov.f64	d0, d8
 800bd92:	f000 fe8d 	bl	800cab0 <_dtoa_r>
 800bd96:	2d47      	cmp	r5, #71	@ 0x47
 800bd98:	d114      	bne.n	800bdc4 <__cvt+0x7c>
 800bd9a:	07fb      	lsls	r3, r7, #31
 800bd9c:	d50a      	bpl.n	800bdb4 <__cvt+0x6c>
 800bd9e:	1902      	adds	r2, r0, r4
 800bda0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bda4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bda8:	bf08      	it	eq
 800bdaa:	9203      	streq	r2, [sp, #12]
 800bdac:	2130      	movs	r1, #48	@ 0x30
 800bdae:	9b03      	ldr	r3, [sp, #12]
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d319      	bcc.n	800bde8 <__cvt+0xa0>
 800bdb4:	9b03      	ldr	r3, [sp, #12]
 800bdb6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bdb8:	1a1b      	subs	r3, r3, r0
 800bdba:	6013      	str	r3, [r2, #0]
 800bdbc:	b005      	add	sp, #20
 800bdbe:	ecbd 8b02 	vpop	{d8}
 800bdc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdc4:	2d46      	cmp	r5, #70	@ 0x46
 800bdc6:	eb00 0204 	add.w	r2, r0, r4
 800bdca:	d1e9      	bne.n	800bda0 <__cvt+0x58>
 800bdcc:	7803      	ldrb	r3, [r0, #0]
 800bdce:	2b30      	cmp	r3, #48	@ 0x30
 800bdd0:	d107      	bne.n	800bde2 <__cvt+0x9a>
 800bdd2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bdd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdda:	bf1c      	itt	ne
 800bddc:	f1c4 0401 	rsbne	r4, r4, #1
 800bde0:	6034      	strne	r4, [r6, #0]
 800bde2:	6833      	ldr	r3, [r6, #0]
 800bde4:	441a      	add	r2, r3
 800bde6:	e7db      	b.n	800bda0 <__cvt+0x58>
 800bde8:	1c5c      	adds	r4, r3, #1
 800bdea:	9403      	str	r4, [sp, #12]
 800bdec:	7019      	strb	r1, [r3, #0]
 800bdee:	e7de      	b.n	800bdae <__cvt+0x66>

0800bdf0 <__exponent>:
 800bdf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bdf2:	2900      	cmp	r1, #0
 800bdf4:	bfba      	itte	lt
 800bdf6:	4249      	neglt	r1, r1
 800bdf8:	232d      	movlt	r3, #45	@ 0x2d
 800bdfa:	232b      	movge	r3, #43	@ 0x2b
 800bdfc:	2909      	cmp	r1, #9
 800bdfe:	7002      	strb	r2, [r0, #0]
 800be00:	7043      	strb	r3, [r0, #1]
 800be02:	dd29      	ble.n	800be58 <__exponent+0x68>
 800be04:	f10d 0307 	add.w	r3, sp, #7
 800be08:	461d      	mov	r5, r3
 800be0a:	270a      	movs	r7, #10
 800be0c:	461a      	mov	r2, r3
 800be0e:	fbb1 f6f7 	udiv	r6, r1, r7
 800be12:	fb07 1416 	mls	r4, r7, r6, r1
 800be16:	3430      	adds	r4, #48	@ 0x30
 800be18:	f802 4c01 	strb.w	r4, [r2, #-1]
 800be1c:	460c      	mov	r4, r1
 800be1e:	2c63      	cmp	r4, #99	@ 0x63
 800be20:	f103 33ff 	add.w	r3, r3, #4294967295
 800be24:	4631      	mov	r1, r6
 800be26:	dcf1      	bgt.n	800be0c <__exponent+0x1c>
 800be28:	3130      	adds	r1, #48	@ 0x30
 800be2a:	1e94      	subs	r4, r2, #2
 800be2c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800be30:	1c41      	adds	r1, r0, #1
 800be32:	4623      	mov	r3, r4
 800be34:	42ab      	cmp	r3, r5
 800be36:	d30a      	bcc.n	800be4e <__exponent+0x5e>
 800be38:	f10d 0309 	add.w	r3, sp, #9
 800be3c:	1a9b      	subs	r3, r3, r2
 800be3e:	42ac      	cmp	r4, r5
 800be40:	bf88      	it	hi
 800be42:	2300      	movhi	r3, #0
 800be44:	3302      	adds	r3, #2
 800be46:	4403      	add	r3, r0
 800be48:	1a18      	subs	r0, r3, r0
 800be4a:	b003      	add	sp, #12
 800be4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be4e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800be52:	f801 6f01 	strb.w	r6, [r1, #1]!
 800be56:	e7ed      	b.n	800be34 <__exponent+0x44>
 800be58:	2330      	movs	r3, #48	@ 0x30
 800be5a:	3130      	adds	r1, #48	@ 0x30
 800be5c:	7083      	strb	r3, [r0, #2]
 800be5e:	70c1      	strb	r1, [r0, #3]
 800be60:	1d03      	adds	r3, r0, #4
 800be62:	e7f1      	b.n	800be48 <__exponent+0x58>
 800be64:	0000      	movs	r0, r0
	...

0800be68 <_printf_float>:
 800be68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be6c:	b08d      	sub	sp, #52	@ 0x34
 800be6e:	460c      	mov	r4, r1
 800be70:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800be74:	4616      	mov	r6, r2
 800be76:	461f      	mov	r7, r3
 800be78:	4605      	mov	r5, r0
 800be7a:	f000 fcf3 	bl	800c864 <_localeconv_r>
 800be7e:	f8d0 b000 	ldr.w	fp, [r0]
 800be82:	4658      	mov	r0, fp
 800be84:	f7f4 fa7c 	bl	8000380 <strlen>
 800be88:	2300      	movs	r3, #0
 800be8a:	930a      	str	r3, [sp, #40]	@ 0x28
 800be8c:	f8d8 3000 	ldr.w	r3, [r8]
 800be90:	f894 9018 	ldrb.w	r9, [r4, #24]
 800be94:	6822      	ldr	r2, [r4, #0]
 800be96:	9005      	str	r0, [sp, #20]
 800be98:	3307      	adds	r3, #7
 800be9a:	f023 0307 	bic.w	r3, r3, #7
 800be9e:	f103 0108 	add.w	r1, r3, #8
 800bea2:	f8c8 1000 	str.w	r1, [r8]
 800bea6:	ed93 0b00 	vldr	d0, [r3]
 800beaa:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800c108 <_printf_float+0x2a0>
 800beae:	eeb0 7bc0 	vabs.f64	d7, d0
 800beb2:	eeb4 7b46 	vcmp.f64	d7, d6
 800beb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800beba:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800bebe:	dd24      	ble.n	800bf0a <_printf_float+0xa2>
 800bec0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800bec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bec8:	d502      	bpl.n	800bed0 <_printf_float+0x68>
 800beca:	232d      	movs	r3, #45	@ 0x2d
 800becc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bed0:	498f      	ldr	r1, [pc, #572]	@ (800c110 <_printf_float+0x2a8>)
 800bed2:	4b90      	ldr	r3, [pc, #576]	@ (800c114 <_printf_float+0x2ac>)
 800bed4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800bed8:	bf94      	ite	ls
 800beda:	4688      	movls	r8, r1
 800bedc:	4698      	movhi	r8, r3
 800bede:	f022 0204 	bic.w	r2, r2, #4
 800bee2:	2303      	movs	r3, #3
 800bee4:	6123      	str	r3, [r4, #16]
 800bee6:	6022      	str	r2, [r4, #0]
 800bee8:	f04f 0a00 	mov.w	sl, #0
 800beec:	9700      	str	r7, [sp, #0]
 800beee:	4633      	mov	r3, r6
 800bef0:	aa0b      	add	r2, sp, #44	@ 0x2c
 800bef2:	4621      	mov	r1, r4
 800bef4:	4628      	mov	r0, r5
 800bef6:	f000 f9d1 	bl	800c29c <_printf_common>
 800befa:	3001      	adds	r0, #1
 800befc:	f040 8089 	bne.w	800c012 <_printf_float+0x1aa>
 800bf00:	f04f 30ff 	mov.w	r0, #4294967295
 800bf04:	b00d      	add	sp, #52	@ 0x34
 800bf06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf0a:	eeb4 0b40 	vcmp.f64	d0, d0
 800bf0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf12:	d709      	bvc.n	800bf28 <_printf_float+0xc0>
 800bf14:	ee10 3a90 	vmov	r3, s1
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	bfbc      	itt	lt
 800bf1c:	232d      	movlt	r3, #45	@ 0x2d
 800bf1e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bf22:	497d      	ldr	r1, [pc, #500]	@ (800c118 <_printf_float+0x2b0>)
 800bf24:	4b7d      	ldr	r3, [pc, #500]	@ (800c11c <_printf_float+0x2b4>)
 800bf26:	e7d5      	b.n	800bed4 <_printf_float+0x6c>
 800bf28:	6863      	ldr	r3, [r4, #4]
 800bf2a:	1c59      	adds	r1, r3, #1
 800bf2c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800bf30:	d139      	bne.n	800bfa6 <_printf_float+0x13e>
 800bf32:	2306      	movs	r3, #6
 800bf34:	6063      	str	r3, [r4, #4]
 800bf36:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	6022      	str	r2, [r4, #0]
 800bf3e:	9303      	str	r3, [sp, #12]
 800bf40:	ab0a      	add	r3, sp, #40	@ 0x28
 800bf42:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800bf46:	ab09      	add	r3, sp, #36	@ 0x24
 800bf48:	9300      	str	r3, [sp, #0]
 800bf4a:	6861      	ldr	r1, [r4, #4]
 800bf4c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800bf50:	4628      	mov	r0, r5
 800bf52:	f7ff fef9 	bl	800bd48 <__cvt>
 800bf56:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bf5a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bf5c:	4680      	mov	r8, r0
 800bf5e:	d129      	bne.n	800bfb4 <_printf_float+0x14c>
 800bf60:	1cc8      	adds	r0, r1, #3
 800bf62:	db02      	blt.n	800bf6a <_printf_float+0x102>
 800bf64:	6863      	ldr	r3, [r4, #4]
 800bf66:	4299      	cmp	r1, r3
 800bf68:	dd41      	ble.n	800bfee <_printf_float+0x186>
 800bf6a:	f1a9 0902 	sub.w	r9, r9, #2
 800bf6e:	fa5f f989 	uxtb.w	r9, r9
 800bf72:	3901      	subs	r1, #1
 800bf74:	464a      	mov	r2, r9
 800bf76:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bf7a:	9109      	str	r1, [sp, #36]	@ 0x24
 800bf7c:	f7ff ff38 	bl	800bdf0 <__exponent>
 800bf80:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bf82:	1813      	adds	r3, r2, r0
 800bf84:	2a01      	cmp	r2, #1
 800bf86:	4682      	mov	sl, r0
 800bf88:	6123      	str	r3, [r4, #16]
 800bf8a:	dc02      	bgt.n	800bf92 <_printf_float+0x12a>
 800bf8c:	6822      	ldr	r2, [r4, #0]
 800bf8e:	07d2      	lsls	r2, r2, #31
 800bf90:	d501      	bpl.n	800bf96 <_printf_float+0x12e>
 800bf92:	3301      	adds	r3, #1
 800bf94:	6123      	str	r3, [r4, #16]
 800bf96:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d0a6      	beq.n	800beec <_printf_float+0x84>
 800bf9e:	232d      	movs	r3, #45	@ 0x2d
 800bfa0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bfa4:	e7a2      	b.n	800beec <_printf_float+0x84>
 800bfa6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bfaa:	d1c4      	bne.n	800bf36 <_printf_float+0xce>
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d1c2      	bne.n	800bf36 <_printf_float+0xce>
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	e7bf      	b.n	800bf34 <_printf_float+0xcc>
 800bfb4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800bfb8:	d9db      	bls.n	800bf72 <_printf_float+0x10a>
 800bfba:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800bfbe:	d118      	bne.n	800bff2 <_printf_float+0x18a>
 800bfc0:	2900      	cmp	r1, #0
 800bfc2:	6863      	ldr	r3, [r4, #4]
 800bfc4:	dd0b      	ble.n	800bfde <_printf_float+0x176>
 800bfc6:	6121      	str	r1, [r4, #16]
 800bfc8:	b913      	cbnz	r3, 800bfd0 <_printf_float+0x168>
 800bfca:	6822      	ldr	r2, [r4, #0]
 800bfcc:	07d0      	lsls	r0, r2, #31
 800bfce:	d502      	bpl.n	800bfd6 <_printf_float+0x16e>
 800bfd0:	3301      	adds	r3, #1
 800bfd2:	440b      	add	r3, r1
 800bfd4:	6123      	str	r3, [r4, #16]
 800bfd6:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bfd8:	f04f 0a00 	mov.w	sl, #0
 800bfdc:	e7db      	b.n	800bf96 <_printf_float+0x12e>
 800bfde:	b913      	cbnz	r3, 800bfe6 <_printf_float+0x17e>
 800bfe0:	6822      	ldr	r2, [r4, #0]
 800bfe2:	07d2      	lsls	r2, r2, #31
 800bfe4:	d501      	bpl.n	800bfea <_printf_float+0x182>
 800bfe6:	3302      	adds	r3, #2
 800bfe8:	e7f4      	b.n	800bfd4 <_printf_float+0x16c>
 800bfea:	2301      	movs	r3, #1
 800bfec:	e7f2      	b.n	800bfd4 <_printf_float+0x16c>
 800bfee:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800bff2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bff4:	4299      	cmp	r1, r3
 800bff6:	db05      	blt.n	800c004 <_printf_float+0x19c>
 800bff8:	6823      	ldr	r3, [r4, #0]
 800bffa:	6121      	str	r1, [r4, #16]
 800bffc:	07d8      	lsls	r0, r3, #31
 800bffe:	d5ea      	bpl.n	800bfd6 <_printf_float+0x16e>
 800c000:	1c4b      	adds	r3, r1, #1
 800c002:	e7e7      	b.n	800bfd4 <_printf_float+0x16c>
 800c004:	2900      	cmp	r1, #0
 800c006:	bfd4      	ite	le
 800c008:	f1c1 0202 	rsble	r2, r1, #2
 800c00c:	2201      	movgt	r2, #1
 800c00e:	4413      	add	r3, r2
 800c010:	e7e0      	b.n	800bfd4 <_printf_float+0x16c>
 800c012:	6823      	ldr	r3, [r4, #0]
 800c014:	055a      	lsls	r2, r3, #21
 800c016:	d407      	bmi.n	800c028 <_printf_float+0x1c0>
 800c018:	6923      	ldr	r3, [r4, #16]
 800c01a:	4642      	mov	r2, r8
 800c01c:	4631      	mov	r1, r6
 800c01e:	4628      	mov	r0, r5
 800c020:	47b8      	blx	r7
 800c022:	3001      	adds	r0, #1
 800c024:	d12a      	bne.n	800c07c <_printf_float+0x214>
 800c026:	e76b      	b.n	800bf00 <_printf_float+0x98>
 800c028:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800c02c:	f240 80e0 	bls.w	800c1f0 <_printf_float+0x388>
 800c030:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800c034:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c03c:	d133      	bne.n	800c0a6 <_printf_float+0x23e>
 800c03e:	4a38      	ldr	r2, [pc, #224]	@ (800c120 <_printf_float+0x2b8>)
 800c040:	2301      	movs	r3, #1
 800c042:	4631      	mov	r1, r6
 800c044:	4628      	mov	r0, r5
 800c046:	47b8      	blx	r7
 800c048:	3001      	adds	r0, #1
 800c04a:	f43f af59 	beq.w	800bf00 <_printf_float+0x98>
 800c04e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c052:	4543      	cmp	r3, r8
 800c054:	db02      	blt.n	800c05c <_printf_float+0x1f4>
 800c056:	6823      	ldr	r3, [r4, #0]
 800c058:	07d8      	lsls	r0, r3, #31
 800c05a:	d50f      	bpl.n	800c07c <_printf_float+0x214>
 800c05c:	9b05      	ldr	r3, [sp, #20]
 800c05e:	465a      	mov	r2, fp
 800c060:	4631      	mov	r1, r6
 800c062:	4628      	mov	r0, r5
 800c064:	47b8      	blx	r7
 800c066:	3001      	adds	r0, #1
 800c068:	f43f af4a 	beq.w	800bf00 <_printf_float+0x98>
 800c06c:	f04f 0900 	mov.w	r9, #0
 800c070:	f108 38ff 	add.w	r8, r8, #4294967295
 800c074:	f104 0a1a 	add.w	sl, r4, #26
 800c078:	45c8      	cmp	r8, r9
 800c07a:	dc09      	bgt.n	800c090 <_printf_float+0x228>
 800c07c:	6823      	ldr	r3, [r4, #0]
 800c07e:	079b      	lsls	r3, r3, #30
 800c080:	f100 8107 	bmi.w	800c292 <_printf_float+0x42a>
 800c084:	68e0      	ldr	r0, [r4, #12]
 800c086:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c088:	4298      	cmp	r0, r3
 800c08a:	bfb8      	it	lt
 800c08c:	4618      	movlt	r0, r3
 800c08e:	e739      	b.n	800bf04 <_printf_float+0x9c>
 800c090:	2301      	movs	r3, #1
 800c092:	4652      	mov	r2, sl
 800c094:	4631      	mov	r1, r6
 800c096:	4628      	mov	r0, r5
 800c098:	47b8      	blx	r7
 800c09a:	3001      	adds	r0, #1
 800c09c:	f43f af30 	beq.w	800bf00 <_printf_float+0x98>
 800c0a0:	f109 0901 	add.w	r9, r9, #1
 800c0a4:	e7e8      	b.n	800c078 <_printf_float+0x210>
 800c0a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	dc3b      	bgt.n	800c124 <_printf_float+0x2bc>
 800c0ac:	4a1c      	ldr	r2, [pc, #112]	@ (800c120 <_printf_float+0x2b8>)
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	4631      	mov	r1, r6
 800c0b2:	4628      	mov	r0, r5
 800c0b4:	47b8      	blx	r7
 800c0b6:	3001      	adds	r0, #1
 800c0b8:	f43f af22 	beq.w	800bf00 <_printf_float+0x98>
 800c0bc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c0c0:	ea59 0303 	orrs.w	r3, r9, r3
 800c0c4:	d102      	bne.n	800c0cc <_printf_float+0x264>
 800c0c6:	6823      	ldr	r3, [r4, #0]
 800c0c8:	07d9      	lsls	r1, r3, #31
 800c0ca:	d5d7      	bpl.n	800c07c <_printf_float+0x214>
 800c0cc:	9b05      	ldr	r3, [sp, #20]
 800c0ce:	465a      	mov	r2, fp
 800c0d0:	4631      	mov	r1, r6
 800c0d2:	4628      	mov	r0, r5
 800c0d4:	47b8      	blx	r7
 800c0d6:	3001      	adds	r0, #1
 800c0d8:	f43f af12 	beq.w	800bf00 <_printf_float+0x98>
 800c0dc:	f04f 0a00 	mov.w	sl, #0
 800c0e0:	f104 0b1a 	add.w	fp, r4, #26
 800c0e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0e6:	425b      	negs	r3, r3
 800c0e8:	4553      	cmp	r3, sl
 800c0ea:	dc01      	bgt.n	800c0f0 <_printf_float+0x288>
 800c0ec:	464b      	mov	r3, r9
 800c0ee:	e794      	b.n	800c01a <_printf_float+0x1b2>
 800c0f0:	2301      	movs	r3, #1
 800c0f2:	465a      	mov	r2, fp
 800c0f4:	4631      	mov	r1, r6
 800c0f6:	4628      	mov	r0, r5
 800c0f8:	47b8      	blx	r7
 800c0fa:	3001      	adds	r0, #1
 800c0fc:	f43f af00 	beq.w	800bf00 <_printf_float+0x98>
 800c100:	f10a 0a01 	add.w	sl, sl, #1
 800c104:	e7ee      	b.n	800c0e4 <_printf_float+0x27c>
 800c106:	bf00      	nop
 800c108:	ffffffff 	.word	0xffffffff
 800c10c:	7fefffff 	.word	0x7fefffff
 800c110:	0806d208 	.word	0x0806d208
 800c114:	0806d20c 	.word	0x0806d20c
 800c118:	0806d210 	.word	0x0806d210
 800c11c:	0806d214 	.word	0x0806d214
 800c120:	0806d218 	.word	0x0806d218
 800c124:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c126:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c12a:	4553      	cmp	r3, sl
 800c12c:	bfa8      	it	ge
 800c12e:	4653      	movge	r3, sl
 800c130:	2b00      	cmp	r3, #0
 800c132:	4699      	mov	r9, r3
 800c134:	dc37      	bgt.n	800c1a6 <_printf_float+0x33e>
 800c136:	2300      	movs	r3, #0
 800c138:	9307      	str	r3, [sp, #28]
 800c13a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c13e:	f104 021a 	add.w	r2, r4, #26
 800c142:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c144:	9907      	ldr	r1, [sp, #28]
 800c146:	9306      	str	r3, [sp, #24]
 800c148:	eba3 0309 	sub.w	r3, r3, r9
 800c14c:	428b      	cmp	r3, r1
 800c14e:	dc31      	bgt.n	800c1b4 <_printf_float+0x34c>
 800c150:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c152:	459a      	cmp	sl, r3
 800c154:	dc3b      	bgt.n	800c1ce <_printf_float+0x366>
 800c156:	6823      	ldr	r3, [r4, #0]
 800c158:	07da      	lsls	r2, r3, #31
 800c15a:	d438      	bmi.n	800c1ce <_printf_float+0x366>
 800c15c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c15e:	ebaa 0903 	sub.w	r9, sl, r3
 800c162:	9b06      	ldr	r3, [sp, #24]
 800c164:	ebaa 0303 	sub.w	r3, sl, r3
 800c168:	4599      	cmp	r9, r3
 800c16a:	bfa8      	it	ge
 800c16c:	4699      	movge	r9, r3
 800c16e:	f1b9 0f00 	cmp.w	r9, #0
 800c172:	dc34      	bgt.n	800c1de <_printf_float+0x376>
 800c174:	f04f 0800 	mov.w	r8, #0
 800c178:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c17c:	f104 0b1a 	add.w	fp, r4, #26
 800c180:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c182:	ebaa 0303 	sub.w	r3, sl, r3
 800c186:	eba3 0309 	sub.w	r3, r3, r9
 800c18a:	4543      	cmp	r3, r8
 800c18c:	f77f af76 	ble.w	800c07c <_printf_float+0x214>
 800c190:	2301      	movs	r3, #1
 800c192:	465a      	mov	r2, fp
 800c194:	4631      	mov	r1, r6
 800c196:	4628      	mov	r0, r5
 800c198:	47b8      	blx	r7
 800c19a:	3001      	adds	r0, #1
 800c19c:	f43f aeb0 	beq.w	800bf00 <_printf_float+0x98>
 800c1a0:	f108 0801 	add.w	r8, r8, #1
 800c1a4:	e7ec      	b.n	800c180 <_printf_float+0x318>
 800c1a6:	4642      	mov	r2, r8
 800c1a8:	4631      	mov	r1, r6
 800c1aa:	4628      	mov	r0, r5
 800c1ac:	47b8      	blx	r7
 800c1ae:	3001      	adds	r0, #1
 800c1b0:	d1c1      	bne.n	800c136 <_printf_float+0x2ce>
 800c1b2:	e6a5      	b.n	800bf00 <_printf_float+0x98>
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	4631      	mov	r1, r6
 800c1b8:	4628      	mov	r0, r5
 800c1ba:	9206      	str	r2, [sp, #24]
 800c1bc:	47b8      	blx	r7
 800c1be:	3001      	adds	r0, #1
 800c1c0:	f43f ae9e 	beq.w	800bf00 <_printf_float+0x98>
 800c1c4:	9b07      	ldr	r3, [sp, #28]
 800c1c6:	9a06      	ldr	r2, [sp, #24]
 800c1c8:	3301      	adds	r3, #1
 800c1ca:	9307      	str	r3, [sp, #28]
 800c1cc:	e7b9      	b.n	800c142 <_printf_float+0x2da>
 800c1ce:	9b05      	ldr	r3, [sp, #20]
 800c1d0:	465a      	mov	r2, fp
 800c1d2:	4631      	mov	r1, r6
 800c1d4:	4628      	mov	r0, r5
 800c1d6:	47b8      	blx	r7
 800c1d8:	3001      	adds	r0, #1
 800c1da:	d1bf      	bne.n	800c15c <_printf_float+0x2f4>
 800c1dc:	e690      	b.n	800bf00 <_printf_float+0x98>
 800c1de:	9a06      	ldr	r2, [sp, #24]
 800c1e0:	464b      	mov	r3, r9
 800c1e2:	4442      	add	r2, r8
 800c1e4:	4631      	mov	r1, r6
 800c1e6:	4628      	mov	r0, r5
 800c1e8:	47b8      	blx	r7
 800c1ea:	3001      	adds	r0, #1
 800c1ec:	d1c2      	bne.n	800c174 <_printf_float+0x30c>
 800c1ee:	e687      	b.n	800bf00 <_printf_float+0x98>
 800c1f0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800c1f4:	f1b9 0f01 	cmp.w	r9, #1
 800c1f8:	dc01      	bgt.n	800c1fe <_printf_float+0x396>
 800c1fa:	07db      	lsls	r3, r3, #31
 800c1fc:	d536      	bpl.n	800c26c <_printf_float+0x404>
 800c1fe:	2301      	movs	r3, #1
 800c200:	4642      	mov	r2, r8
 800c202:	4631      	mov	r1, r6
 800c204:	4628      	mov	r0, r5
 800c206:	47b8      	blx	r7
 800c208:	3001      	adds	r0, #1
 800c20a:	f43f ae79 	beq.w	800bf00 <_printf_float+0x98>
 800c20e:	9b05      	ldr	r3, [sp, #20]
 800c210:	465a      	mov	r2, fp
 800c212:	4631      	mov	r1, r6
 800c214:	4628      	mov	r0, r5
 800c216:	47b8      	blx	r7
 800c218:	3001      	adds	r0, #1
 800c21a:	f43f ae71 	beq.w	800bf00 <_printf_float+0x98>
 800c21e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800c222:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c22a:	f109 39ff 	add.w	r9, r9, #4294967295
 800c22e:	d018      	beq.n	800c262 <_printf_float+0x3fa>
 800c230:	464b      	mov	r3, r9
 800c232:	f108 0201 	add.w	r2, r8, #1
 800c236:	4631      	mov	r1, r6
 800c238:	4628      	mov	r0, r5
 800c23a:	47b8      	blx	r7
 800c23c:	3001      	adds	r0, #1
 800c23e:	d10c      	bne.n	800c25a <_printf_float+0x3f2>
 800c240:	e65e      	b.n	800bf00 <_printf_float+0x98>
 800c242:	2301      	movs	r3, #1
 800c244:	465a      	mov	r2, fp
 800c246:	4631      	mov	r1, r6
 800c248:	4628      	mov	r0, r5
 800c24a:	47b8      	blx	r7
 800c24c:	3001      	adds	r0, #1
 800c24e:	f43f ae57 	beq.w	800bf00 <_printf_float+0x98>
 800c252:	f108 0801 	add.w	r8, r8, #1
 800c256:	45c8      	cmp	r8, r9
 800c258:	dbf3      	blt.n	800c242 <_printf_float+0x3da>
 800c25a:	4653      	mov	r3, sl
 800c25c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c260:	e6dc      	b.n	800c01c <_printf_float+0x1b4>
 800c262:	f04f 0800 	mov.w	r8, #0
 800c266:	f104 0b1a 	add.w	fp, r4, #26
 800c26a:	e7f4      	b.n	800c256 <_printf_float+0x3ee>
 800c26c:	2301      	movs	r3, #1
 800c26e:	4642      	mov	r2, r8
 800c270:	e7e1      	b.n	800c236 <_printf_float+0x3ce>
 800c272:	2301      	movs	r3, #1
 800c274:	464a      	mov	r2, r9
 800c276:	4631      	mov	r1, r6
 800c278:	4628      	mov	r0, r5
 800c27a:	47b8      	blx	r7
 800c27c:	3001      	adds	r0, #1
 800c27e:	f43f ae3f 	beq.w	800bf00 <_printf_float+0x98>
 800c282:	f108 0801 	add.w	r8, r8, #1
 800c286:	68e3      	ldr	r3, [r4, #12]
 800c288:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c28a:	1a5b      	subs	r3, r3, r1
 800c28c:	4543      	cmp	r3, r8
 800c28e:	dcf0      	bgt.n	800c272 <_printf_float+0x40a>
 800c290:	e6f8      	b.n	800c084 <_printf_float+0x21c>
 800c292:	f04f 0800 	mov.w	r8, #0
 800c296:	f104 0919 	add.w	r9, r4, #25
 800c29a:	e7f4      	b.n	800c286 <_printf_float+0x41e>

0800c29c <_printf_common>:
 800c29c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2a0:	4616      	mov	r6, r2
 800c2a2:	4698      	mov	r8, r3
 800c2a4:	688a      	ldr	r2, [r1, #8]
 800c2a6:	690b      	ldr	r3, [r1, #16]
 800c2a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	bfb8      	it	lt
 800c2b0:	4613      	movlt	r3, r2
 800c2b2:	6033      	str	r3, [r6, #0]
 800c2b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c2b8:	4607      	mov	r7, r0
 800c2ba:	460c      	mov	r4, r1
 800c2bc:	b10a      	cbz	r2, 800c2c2 <_printf_common+0x26>
 800c2be:	3301      	adds	r3, #1
 800c2c0:	6033      	str	r3, [r6, #0]
 800c2c2:	6823      	ldr	r3, [r4, #0]
 800c2c4:	0699      	lsls	r1, r3, #26
 800c2c6:	bf42      	ittt	mi
 800c2c8:	6833      	ldrmi	r3, [r6, #0]
 800c2ca:	3302      	addmi	r3, #2
 800c2cc:	6033      	strmi	r3, [r6, #0]
 800c2ce:	6825      	ldr	r5, [r4, #0]
 800c2d0:	f015 0506 	ands.w	r5, r5, #6
 800c2d4:	d106      	bne.n	800c2e4 <_printf_common+0x48>
 800c2d6:	f104 0a19 	add.w	sl, r4, #25
 800c2da:	68e3      	ldr	r3, [r4, #12]
 800c2dc:	6832      	ldr	r2, [r6, #0]
 800c2de:	1a9b      	subs	r3, r3, r2
 800c2e0:	42ab      	cmp	r3, r5
 800c2e2:	dc26      	bgt.n	800c332 <_printf_common+0x96>
 800c2e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c2e8:	6822      	ldr	r2, [r4, #0]
 800c2ea:	3b00      	subs	r3, #0
 800c2ec:	bf18      	it	ne
 800c2ee:	2301      	movne	r3, #1
 800c2f0:	0692      	lsls	r2, r2, #26
 800c2f2:	d42b      	bmi.n	800c34c <_printf_common+0xb0>
 800c2f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c2f8:	4641      	mov	r1, r8
 800c2fa:	4638      	mov	r0, r7
 800c2fc:	47c8      	blx	r9
 800c2fe:	3001      	adds	r0, #1
 800c300:	d01e      	beq.n	800c340 <_printf_common+0xa4>
 800c302:	6823      	ldr	r3, [r4, #0]
 800c304:	6922      	ldr	r2, [r4, #16]
 800c306:	f003 0306 	and.w	r3, r3, #6
 800c30a:	2b04      	cmp	r3, #4
 800c30c:	bf02      	ittt	eq
 800c30e:	68e5      	ldreq	r5, [r4, #12]
 800c310:	6833      	ldreq	r3, [r6, #0]
 800c312:	1aed      	subeq	r5, r5, r3
 800c314:	68a3      	ldr	r3, [r4, #8]
 800c316:	bf0c      	ite	eq
 800c318:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c31c:	2500      	movne	r5, #0
 800c31e:	4293      	cmp	r3, r2
 800c320:	bfc4      	itt	gt
 800c322:	1a9b      	subgt	r3, r3, r2
 800c324:	18ed      	addgt	r5, r5, r3
 800c326:	2600      	movs	r6, #0
 800c328:	341a      	adds	r4, #26
 800c32a:	42b5      	cmp	r5, r6
 800c32c:	d11a      	bne.n	800c364 <_printf_common+0xc8>
 800c32e:	2000      	movs	r0, #0
 800c330:	e008      	b.n	800c344 <_printf_common+0xa8>
 800c332:	2301      	movs	r3, #1
 800c334:	4652      	mov	r2, sl
 800c336:	4641      	mov	r1, r8
 800c338:	4638      	mov	r0, r7
 800c33a:	47c8      	blx	r9
 800c33c:	3001      	adds	r0, #1
 800c33e:	d103      	bne.n	800c348 <_printf_common+0xac>
 800c340:	f04f 30ff 	mov.w	r0, #4294967295
 800c344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c348:	3501      	adds	r5, #1
 800c34a:	e7c6      	b.n	800c2da <_printf_common+0x3e>
 800c34c:	18e1      	adds	r1, r4, r3
 800c34e:	1c5a      	adds	r2, r3, #1
 800c350:	2030      	movs	r0, #48	@ 0x30
 800c352:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c356:	4422      	add	r2, r4
 800c358:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c35c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c360:	3302      	adds	r3, #2
 800c362:	e7c7      	b.n	800c2f4 <_printf_common+0x58>
 800c364:	2301      	movs	r3, #1
 800c366:	4622      	mov	r2, r4
 800c368:	4641      	mov	r1, r8
 800c36a:	4638      	mov	r0, r7
 800c36c:	47c8      	blx	r9
 800c36e:	3001      	adds	r0, #1
 800c370:	d0e6      	beq.n	800c340 <_printf_common+0xa4>
 800c372:	3601      	adds	r6, #1
 800c374:	e7d9      	b.n	800c32a <_printf_common+0x8e>
	...

0800c378 <_printf_i>:
 800c378:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c37c:	7e0f      	ldrb	r7, [r1, #24]
 800c37e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c380:	2f78      	cmp	r7, #120	@ 0x78
 800c382:	4691      	mov	r9, r2
 800c384:	4680      	mov	r8, r0
 800c386:	460c      	mov	r4, r1
 800c388:	469a      	mov	sl, r3
 800c38a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c38e:	d807      	bhi.n	800c3a0 <_printf_i+0x28>
 800c390:	2f62      	cmp	r7, #98	@ 0x62
 800c392:	d80a      	bhi.n	800c3aa <_printf_i+0x32>
 800c394:	2f00      	cmp	r7, #0
 800c396:	f000 80d2 	beq.w	800c53e <_printf_i+0x1c6>
 800c39a:	2f58      	cmp	r7, #88	@ 0x58
 800c39c:	f000 80b9 	beq.w	800c512 <_printf_i+0x19a>
 800c3a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c3a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c3a8:	e03a      	b.n	800c420 <_printf_i+0xa8>
 800c3aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c3ae:	2b15      	cmp	r3, #21
 800c3b0:	d8f6      	bhi.n	800c3a0 <_printf_i+0x28>
 800c3b2:	a101      	add	r1, pc, #4	@ (adr r1, 800c3b8 <_printf_i+0x40>)
 800c3b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c3b8:	0800c411 	.word	0x0800c411
 800c3bc:	0800c425 	.word	0x0800c425
 800c3c0:	0800c3a1 	.word	0x0800c3a1
 800c3c4:	0800c3a1 	.word	0x0800c3a1
 800c3c8:	0800c3a1 	.word	0x0800c3a1
 800c3cc:	0800c3a1 	.word	0x0800c3a1
 800c3d0:	0800c425 	.word	0x0800c425
 800c3d4:	0800c3a1 	.word	0x0800c3a1
 800c3d8:	0800c3a1 	.word	0x0800c3a1
 800c3dc:	0800c3a1 	.word	0x0800c3a1
 800c3e0:	0800c3a1 	.word	0x0800c3a1
 800c3e4:	0800c525 	.word	0x0800c525
 800c3e8:	0800c44f 	.word	0x0800c44f
 800c3ec:	0800c4df 	.word	0x0800c4df
 800c3f0:	0800c3a1 	.word	0x0800c3a1
 800c3f4:	0800c3a1 	.word	0x0800c3a1
 800c3f8:	0800c547 	.word	0x0800c547
 800c3fc:	0800c3a1 	.word	0x0800c3a1
 800c400:	0800c44f 	.word	0x0800c44f
 800c404:	0800c3a1 	.word	0x0800c3a1
 800c408:	0800c3a1 	.word	0x0800c3a1
 800c40c:	0800c4e7 	.word	0x0800c4e7
 800c410:	6833      	ldr	r3, [r6, #0]
 800c412:	1d1a      	adds	r2, r3, #4
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	6032      	str	r2, [r6, #0]
 800c418:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c41c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c420:	2301      	movs	r3, #1
 800c422:	e09d      	b.n	800c560 <_printf_i+0x1e8>
 800c424:	6833      	ldr	r3, [r6, #0]
 800c426:	6820      	ldr	r0, [r4, #0]
 800c428:	1d19      	adds	r1, r3, #4
 800c42a:	6031      	str	r1, [r6, #0]
 800c42c:	0606      	lsls	r6, r0, #24
 800c42e:	d501      	bpl.n	800c434 <_printf_i+0xbc>
 800c430:	681d      	ldr	r5, [r3, #0]
 800c432:	e003      	b.n	800c43c <_printf_i+0xc4>
 800c434:	0645      	lsls	r5, r0, #25
 800c436:	d5fb      	bpl.n	800c430 <_printf_i+0xb8>
 800c438:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c43c:	2d00      	cmp	r5, #0
 800c43e:	da03      	bge.n	800c448 <_printf_i+0xd0>
 800c440:	232d      	movs	r3, #45	@ 0x2d
 800c442:	426d      	negs	r5, r5
 800c444:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c448:	4859      	ldr	r0, [pc, #356]	@ (800c5b0 <_printf_i+0x238>)
 800c44a:	230a      	movs	r3, #10
 800c44c:	e011      	b.n	800c472 <_printf_i+0xfa>
 800c44e:	6821      	ldr	r1, [r4, #0]
 800c450:	6833      	ldr	r3, [r6, #0]
 800c452:	0608      	lsls	r0, r1, #24
 800c454:	f853 5b04 	ldr.w	r5, [r3], #4
 800c458:	d402      	bmi.n	800c460 <_printf_i+0xe8>
 800c45a:	0649      	lsls	r1, r1, #25
 800c45c:	bf48      	it	mi
 800c45e:	b2ad      	uxthmi	r5, r5
 800c460:	2f6f      	cmp	r7, #111	@ 0x6f
 800c462:	4853      	ldr	r0, [pc, #332]	@ (800c5b0 <_printf_i+0x238>)
 800c464:	6033      	str	r3, [r6, #0]
 800c466:	bf14      	ite	ne
 800c468:	230a      	movne	r3, #10
 800c46a:	2308      	moveq	r3, #8
 800c46c:	2100      	movs	r1, #0
 800c46e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c472:	6866      	ldr	r6, [r4, #4]
 800c474:	60a6      	str	r6, [r4, #8]
 800c476:	2e00      	cmp	r6, #0
 800c478:	bfa2      	ittt	ge
 800c47a:	6821      	ldrge	r1, [r4, #0]
 800c47c:	f021 0104 	bicge.w	r1, r1, #4
 800c480:	6021      	strge	r1, [r4, #0]
 800c482:	b90d      	cbnz	r5, 800c488 <_printf_i+0x110>
 800c484:	2e00      	cmp	r6, #0
 800c486:	d04b      	beq.n	800c520 <_printf_i+0x1a8>
 800c488:	4616      	mov	r6, r2
 800c48a:	fbb5 f1f3 	udiv	r1, r5, r3
 800c48e:	fb03 5711 	mls	r7, r3, r1, r5
 800c492:	5dc7      	ldrb	r7, [r0, r7]
 800c494:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c498:	462f      	mov	r7, r5
 800c49a:	42bb      	cmp	r3, r7
 800c49c:	460d      	mov	r5, r1
 800c49e:	d9f4      	bls.n	800c48a <_printf_i+0x112>
 800c4a0:	2b08      	cmp	r3, #8
 800c4a2:	d10b      	bne.n	800c4bc <_printf_i+0x144>
 800c4a4:	6823      	ldr	r3, [r4, #0]
 800c4a6:	07df      	lsls	r7, r3, #31
 800c4a8:	d508      	bpl.n	800c4bc <_printf_i+0x144>
 800c4aa:	6923      	ldr	r3, [r4, #16]
 800c4ac:	6861      	ldr	r1, [r4, #4]
 800c4ae:	4299      	cmp	r1, r3
 800c4b0:	bfde      	ittt	le
 800c4b2:	2330      	movle	r3, #48	@ 0x30
 800c4b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c4b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c4bc:	1b92      	subs	r2, r2, r6
 800c4be:	6122      	str	r2, [r4, #16]
 800c4c0:	f8cd a000 	str.w	sl, [sp]
 800c4c4:	464b      	mov	r3, r9
 800c4c6:	aa03      	add	r2, sp, #12
 800c4c8:	4621      	mov	r1, r4
 800c4ca:	4640      	mov	r0, r8
 800c4cc:	f7ff fee6 	bl	800c29c <_printf_common>
 800c4d0:	3001      	adds	r0, #1
 800c4d2:	d14a      	bne.n	800c56a <_printf_i+0x1f2>
 800c4d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c4d8:	b004      	add	sp, #16
 800c4da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4de:	6823      	ldr	r3, [r4, #0]
 800c4e0:	f043 0320 	orr.w	r3, r3, #32
 800c4e4:	6023      	str	r3, [r4, #0]
 800c4e6:	4833      	ldr	r0, [pc, #204]	@ (800c5b4 <_printf_i+0x23c>)
 800c4e8:	2778      	movs	r7, #120	@ 0x78
 800c4ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c4ee:	6823      	ldr	r3, [r4, #0]
 800c4f0:	6831      	ldr	r1, [r6, #0]
 800c4f2:	061f      	lsls	r7, r3, #24
 800c4f4:	f851 5b04 	ldr.w	r5, [r1], #4
 800c4f8:	d402      	bmi.n	800c500 <_printf_i+0x188>
 800c4fa:	065f      	lsls	r7, r3, #25
 800c4fc:	bf48      	it	mi
 800c4fe:	b2ad      	uxthmi	r5, r5
 800c500:	6031      	str	r1, [r6, #0]
 800c502:	07d9      	lsls	r1, r3, #31
 800c504:	bf44      	itt	mi
 800c506:	f043 0320 	orrmi.w	r3, r3, #32
 800c50a:	6023      	strmi	r3, [r4, #0]
 800c50c:	b11d      	cbz	r5, 800c516 <_printf_i+0x19e>
 800c50e:	2310      	movs	r3, #16
 800c510:	e7ac      	b.n	800c46c <_printf_i+0xf4>
 800c512:	4827      	ldr	r0, [pc, #156]	@ (800c5b0 <_printf_i+0x238>)
 800c514:	e7e9      	b.n	800c4ea <_printf_i+0x172>
 800c516:	6823      	ldr	r3, [r4, #0]
 800c518:	f023 0320 	bic.w	r3, r3, #32
 800c51c:	6023      	str	r3, [r4, #0]
 800c51e:	e7f6      	b.n	800c50e <_printf_i+0x196>
 800c520:	4616      	mov	r6, r2
 800c522:	e7bd      	b.n	800c4a0 <_printf_i+0x128>
 800c524:	6833      	ldr	r3, [r6, #0]
 800c526:	6825      	ldr	r5, [r4, #0]
 800c528:	6961      	ldr	r1, [r4, #20]
 800c52a:	1d18      	adds	r0, r3, #4
 800c52c:	6030      	str	r0, [r6, #0]
 800c52e:	062e      	lsls	r6, r5, #24
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	d501      	bpl.n	800c538 <_printf_i+0x1c0>
 800c534:	6019      	str	r1, [r3, #0]
 800c536:	e002      	b.n	800c53e <_printf_i+0x1c6>
 800c538:	0668      	lsls	r0, r5, #25
 800c53a:	d5fb      	bpl.n	800c534 <_printf_i+0x1bc>
 800c53c:	8019      	strh	r1, [r3, #0]
 800c53e:	2300      	movs	r3, #0
 800c540:	6123      	str	r3, [r4, #16]
 800c542:	4616      	mov	r6, r2
 800c544:	e7bc      	b.n	800c4c0 <_printf_i+0x148>
 800c546:	6833      	ldr	r3, [r6, #0]
 800c548:	1d1a      	adds	r2, r3, #4
 800c54a:	6032      	str	r2, [r6, #0]
 800c54c:	681e      	ldr	r6, [r3, #0]
 800c54e:	6862      	ldr	r2, [r4, #4]
 800c550:	2100      	movs	r1, #0
 800c552:	4630      	mov	r0, r6
 800c554:	f7f3 fec4 	bl	80002e0 <memchr>
 800c558:	b108      	cbz	r0, 800c55e <_printf_i+0x1e6>
 800c55a:	1b80      	subs	r0, r0, r6
 800c55c:	6060      	str	r0, [r4, #4]
 800c55e:	6863      	ldr	r3, [r4, #4]
 800c560:	6123      	str	r3, [r4, #16]
 800c562:	2300      	movs	r3, #0
 800c564:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c568:	e7aa      	b.n	800c4c0 <_printf_i+0x148>
 800c56a:	6923      	ldr	r3, [r4, #16]
 800c56c:	4632      	mov	r2, r6
 800c56e:	4649      	mov	r1, r9
 800c570:	4640      	mov	r0, r8
 800c572:	47d0      	blx	sl
 800c574:	3001      	adds	r0, #1
 800c576:	d0ad      	beq.n	800c4d4 <_printf_i+0x15c>
 800c578:	6823      	ldr	r3, [r4, #0]
 800c57a:	079b      	lsls	r3, r3, #30
 800c57c:	d413      	bmi.n	800c5a6 <_printf_i+0x22e>
 800c57e:	68e0      	ldr	r0, [r4, #12]
 800c580:	9b03      	ldr	r3, [sp, #12]
 800c582:	4298      	cmp	r0, r3
 800c584:	bfb8      	it	lt
 800c586:	4618      	movlt	r0, r3
 800c588:	e7a6      	b.n	800c4d8 <_printf_i+0x160>
 800c58a:	2301      	movs	r3, #1
 800c58c:	4632      	mov	r2, r6
 800c58e:	4649      	mov	r1, r9
 800c590:	4640      	mov	r0, r8
 800c592:	47d0      	blx	sl
 800c594:	3001      	adds	r0, #1
 800c596:	d09d      	beq.n	800c4d4 <_printf_i+0x15c>
 800c598:	3501      	adds	r5, #1
 800c59a:	68e3      	ldr	r3, [r4, #12]
 800c59c:	9903      	ldr	r1, [sp, #12]
 800c59e:	1a5b      	subs	r3, r3, r1
 800c5a0:	42ab      	cmp	r3, r5
 800c5a2:	dcf2      	bgt.n	800c58a <_printf_i+0x212>
 800c5a4:	e7eb      	b.n	800c57e <_printf_i+0x206>
 800c5a6:	2500      	movs	r5, #0
 800c5a8:	f104 0619 	add.w	r6, r4, #25
 800c5ac:	e7f5      	b.n	800c59a <_printf_i+0x222>
 800c5ae:	bf00      	nop
 800c5b0:	0806d21a 	.word	0x0806d21a
 800c5b4:	0806d22b 	.word	0x0806d22b

0800c5b8 <std>:
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	b510      	push	{r4, lr}
 800c5bc:	4604      	mov	r4, r0
 800c5be:	e9c0 3300 	strd	r3, r3, [r0]
 800c5c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c5c6:	6083      	str	r3, [r0, #8]
 800c5c8:	8181      	strh	r1, [r0, #12]
 800c5ca:	6643      	str	r3, [r0, #100]	@ 0x64
 800c5cc:	81c2      	strh	r2, [r0, #14]
 800c5ce:	6183      	str	r3, [r0, #24]
 800c5d0:	4619      	mov	r1, r3
 800c5d2:	2208      	movs	r2, #8
 800c5d4:	305c      	adds	r0, #92	@ 0x5c
 800c5d6:	f000 f92e 	bl	800c836 <memset>
 800c5da:	4b0d      	ldr	r3, [pc, #52]	@ (800c610 <std+0x58>)
 800c5dc:	6263      	str	r3, [r4, #36]	@ 0x24
 800c5de:	4b0d      	ldr	r3, [pc, #52]	@ (800c614 <std+0x5c>)
 800c5e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c5e2:	4b0d      	ldr	r3, [pc, #52]	@ (800c618 <std+0x60>)
 800c5e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c5e6:	4b0d      	ldr	r3, [pc, #52]	@ (800c61c <std+0x64>)
 800c5e8:	6323      	str	r3, [r4, #48]	@ 0x30
 800c5ea:	4b0d      	ldr	r3, [pc, #52]	@ (800c620 <std+0x68>)
 800c5ec:	6224      	str	r4, [r4, #32]
 800c5ee:	429c      	cmp	r4, r3
 800c5f0:	d006      	beq.n	800c600 <std+0x48>
 800c5f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c5f6:	4294      	cmp	r4, r2
 800c5f8:	d002      	beq.n	800c600 <std+0x48>
 800c5fa:	33d0      	adds	r3, #208	@ 0xd0
 800c5fc:	429c      	cmp	r4, r3
 800c5fe:	d105      	bne.n	800c60c <std+0x54>
 800c600:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c608:	f000 b9b0 	b.w	800c96c <__retarget_lock_init_recursive>
 800c60c:	bd10      	pop	{r4, pc}
 800c60e:	bf00      	nop
 800c610:	0800c77d 	.word	0x0800c77d
 800c614:	0800c79f 	.word	0x0800c79f
 800c618:	0800c7d7 	.word	0x0800c7d7
 800c61c:	0800c7fb 	.word	0x0800c7fb
 800c620:	240691ac 	.word	0x240691ac

0800c624 <stdio_exit_handler>:
 800c624:	4a02      	ldr	r2, [pc, #8]	@ (800c630 <stdio_exit_handler+0xc>)
 800c626:	4903      	ldr	r1, [pc, #12]	@ (800c634 <stdio_exit_handler+0x10>)
 800c628:	4803      	ldr	r0, [pc, #12]	@ (800c638 <stdio_exit_handler+0x14>)
 800c62a:	f000 b869 	b.w	800c700 <_fwalk_sglue>
 800c62e:	bf00      	nop
 800c630:	24000b50 	.word	0x24000b50
 800c634:	0800e0bd 	.word	0x0800e0bd
 800c638:	24000b60 	.word	0x24000b60

0800c63c <cleanup_stdio>:
 800c63c:	6841      	ldr	r1, [r0, #4]
 800c63e:	4b0c      	ldr	r3, [pc, #48]	@ (800c670 <cleanup_stdio+0x34>)
 800c640:	4299      	cmp	r1, r3
 800c642:	b510      	push	{r4, lr}
 800c644:	4604      	mov	r4, r0
 800c646:	d001      	beq.n	800c64c <cleanup_stdio+0x10>
 800c648:	f001 fd38 	bl	800e0bc <_fflush_r>
 800c64c:	68a1      	ldr	r1, [r4, #8]
 800c64e:	4b09      	ldr	r3, [pc, #36]	@ (800c674 <cleanup_stdio+0x38>)
 800c650:	4299      	cmp	r1, r3
 800c652:	d002      	beq.n	800c65a <cleanup_stdio+0x1e>
 800c654:	4620      	mov	r0, r4
 800c656:	f001 fd31 	bl	800e0bc <_fflush_r>
 800c65a:	68e1      	ldr	r1, [r4, #12]
 800c65c:	4b06      	ldr	r3, [pc, #24]	@ (800c678 <cleanup_stdio+0x3c>)
 800c65e:	4299      	cmp	r1, r3
 800c660:	d004      	beq.n	800c66c <cleanup_stdio+0x30>
 800c662:	4620      	mov	r0, r4
 800c664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c668:	f001 bd28 	b.w	800e0bc <_fflush_r>
 800c66c:	bd10      	pop	{r4, pc}
 800c66e:	bf00      	nop
 800c670:	240691ac 	.word	0x240691ac
 800c674:	24069214 	.word	0x24069214
 800c678:	2406927c 	.word	0x2406927c

0800c67c <global_stdio_init.part.0>:
 800c67c:	b510      	push	{r4, lr}
 800c67e:	4b0b      	ldr	r3, [pc, #44]	@ (800c6ac <global_stdio_init.part.0+0x30>)
 800c680:	4c0b      	ldr	r4, [pc, #44]	@ (800c6b0 <global_stdio_init.part.0+0x34>)
 800c682:	4a0c      	ldr	r2, [pc, #48]	@ (800c6b4 <global_stdio_init.part.0+0x38>)
 800c684:	601a      	str	r2, [r3, #0]
 800c686:	4620      	mov	r0, r4
 800c688:	2200      	movs	r2, #0
 800c68a:	2104      	movs	r1, #4
 800c68c:	f7ff ff94 	bl	800c5b8 <std>
 800c690:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c694:	2201      	movs	r2, #1
 800c696:	2109      	movs	r1, #9
 800c698:	f7ff ff8e 	bl	800c5b8 <std>
 800c69c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c6a0:	2202      	movs	r2, #2
 800c6a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6a6:	2112      	movs	r1, #18
 800c6a8:	f7ff bf86 	b.w	800c5b8 <std>
 800c6ac:	240692e4 	.word	0x240692e4
 800c6b0:	240691ac 	.word	0x240691ac
 800c6b4:	0800c625 	.word	0x0800c625

0800c6b8 <__sfp_lock_acquire>:
 800c6b8:	4801      	ldr	r0, [pc, #4]	@ (800c6c0 <__sfp_lock_acquire+0x8>)
 800c6ba:	f000 b958 	b.w	800c96e <__retarget_lock_acquire_recursive>
 800c6be:	bf00      	nop
 800c6c0:	240692ed 	.word	0x240692ed

0800c6c4 <__sfp_lock_release>:
 800c6c4:	4801      	ldr	r0, [pc, #4]	@ (800c6cc <__sfp_lock_release+0x8>)
 800c6c6:	f000 b953 	b.w	800c970 <__retarget_lock_release_recursive>
 800c6ca:	bf00      	nop
 800c6cc:	240692ed 	.word	0x240692ed

0800c6d0 <__sinit>:
 800c6d0:	b510      	push	{r4, lr}
 800c6d2:	4604      	mov	r4, r0
 800c6d4:	f7ff fff0 	bl	800c6b8 <__sfp_lock_acquire>
 800c6d8:	6a23      	ldr	r3, [r4, #32]
 800c6da:	b11b      	cbz	r3, 800c6e4 <__sinit+0x14>
 800c6dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6e0:	f7ff bff0 	b.w	800c6c4 <__sfp_lock_release>
 800c6e4:	4b04      	ldr	r3, [pc, #16]	@ (800c6f8 <__sinit+0x28>)
 800c6e6:	6223      	str	r3, [r4, #32]
 800c6e8:	4b04      	ldr	r3, [pc, #16]	@ (800c6fc <__sinit+0x2c>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d1f5      	bne.n	800c6dc <__sinit+0xc>
 800c6f0:	f7ff ffc4 	bl	800c67c <global_stdio_init.part.0>
 800c6f4:	e7f2      	b.n	800c6dc <__sinit+0xc>
 800c6f6:	bf00      	nop
 800c6f8:	0800c63d 	.word	0x0800c63d
 800c6fc:	240692e4 	.word	0x240692e4

0800c700 <_fwalk_sglue>:
 800c700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c704:	4607      	mov	r7, r0
 800c706:	4688      	mov	r8, r1
 800c708:	4614      	mov	r4, r2
 800c70a:	2600      	movs	r6, #0
 800c70c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c710:	f1b9 0901 	subs.w	r9, r9, #1
 800c714:	d505      	bpl.n	800c722 <_fwalk_sglue+0x22>
 800c716:	6824      	ldr	r4, [r4, #0]
 800c718:	2c00      	cmp	r4, #0
 800c71a:	d1f7      	bne.n	800c70c <_fwalk_sglue+0xc>
 800c71c:	4630      	mov	r0, r6
 800c71e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c722:	89ab      	ldrh	r3, [r5, #12]
 800c724:	2b01      	cmp	r3, #1
 800c726:	d907      	bls.n	800c738 <_fwalk_sglue+0x38>
 800c728:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c72c:	3301      	adds	r3, #1
 800c72e:	d003      	beq.n	800c738 <_fwalk_sglue+0x38>
 800c730:	4629      	mov	r1, r5
 800c732:	4638      	mov	r0, r7
 800c734:	47c0      	blx	r8
 800c736:	4306      	orrs	r6, r0
 800c738:	3568      	adds	r5, #104	@ 0x68
 800c73a:	e7e9      	b.n	800c710 <_fwalk_sglue+0x10>

0800c73c <siprintf>:
 800c73c:	b40e      	push	{r1, r2, r3}
 800c73e:	b500      	push	{lr}
 800c740:	b09c      	sub	sp, #112	@ 0x70
 800c742:	ab1d      	add	r3, sp, #116	@ 0x74
 800c744:	9002      	str	r0, [sp, #8]
 800c746:	9006      	str	r0, [sp, #24]
 800c748:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c74c:	4809      	ldr	r0, [pc, #36]	@ (800c774 <siprintf+0x38>)
 800c74e:	9107      	str	r1, [sp, #28]
 800c750:	9104      	str	r1, [sp, #16]
 800c752:	4909      	ldr	r1, [pc, #36]	@ (800c778 <siprintf+0x3c>)
 800c754:	f853 2b04 	ldr.w	r2, [r3], #4
 800c758:	9105      	str	r1, [sp, #20]
 800c75a:	6800      	ldr	r0, [r0, #0]
 800c75c:	9301      	str	r3, [sp, #4]
 800c75e:	a902      	add	r1, sp, #8
 800c760:	f001 fb2c 	bl	800ddbc <_svfiprintf_r>
 800c764:	9b02      	ldr	r3, [sp, #8]
 800c766:	2200      	movs	r2, #0
 800c768:	701a      	strb	r2, [r3, #0]
 800c76a:	b01c      	add	sp, #112	@ 0x70
 800c76c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c770:	b003      	add	sp, #12
 800c772:	4770      	bx	lr
 800c774:	24000b5c 	.word	0x24000b5c
 800c778:	ffff0208 	.word	0xffff0208

0800c77c <__sread>:
 800c77c:	b510      	push	{r4, lr}
 800c77e:	460c      	mov	r4, r1
 800c780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c784:	f000 f894 	bl	800c8b0 <_read_r>
 800c788:	2800      	cmp	r0, #0
 800c78a:	bfab      	itete	ge
 800c78c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c78e:	89a3      	ldrhlt	r3, [r4, #12]
 800c790:	181b      	addge	r3, r3, r0
 800c792:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c796:	bfac      	ite	ge
 800c798:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c79a:	81a3      	strhlt	r3, [r4, #12]
 800c79c:	bd10      	pop	{r4, pc}

0800c79e <__swrite>:
 800c79e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7a2:	461f      	mov	r7, r3
 800c7a4:	898b      	ldrh	r3, [r1, #12]
 800c7a6:	05db      	lsls	r3, r3, #23
 800c7a8:	4605      	mov	r5, r0
 800c7aa:	460c      	mov	r4, r1
 800c7ac:	4616      	mov	r6, r2
 800c7ae:	d505      	bpl.n	800c7bc <__swrite+0x1e>
 800c7b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7b4:	2302      	movs	r3, #2
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	f000 f868 	bl	800c88c <_lseek_r>
 800c7bc:	89a3      	ldrh	r3, [r4, #12]
 800c7be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c7c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c7c6:	81a3      	strh	r3, [r4, #12]
 800c7c8:	4632      	mov	r2, r6
 800c7ca:	463b      	mov	r3, r7
 800c7cc:	4628      	mov	r0, r5
 800c7ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7d2:	f000 b88f 	b.w	800c8f4 <_write_r>

0800c7d6 <__sseek>:
 800c7d6:	b510      	push	{r4, lr}
 800c7d8:	460c      	mov	r4, r1
 800c7da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7de:	f000 f855 	bl	800c88c <_lseek_r>
 800c7e2:	1c43      	adds	r3, r0, #1
 800c7e4:	89a3      	ldrh	r3, [r4, #12]
 800c7e6:	bf15      	itete	ne
 800c7e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c7ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c7ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c7f2:	81a3      	strheq	r3, [r4, #12]
 800c7f4:	bf18      	it	ne
 800c7f6:	81a3      	strhne	r3, [r4, #12]
 800c7f8:	bd10      	pop	{r4, pc}

0800c7fa <__sclose>:
 800c7fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7fe:	f000 b835 	b.w	800c86c <_close_r>

0800c802 <memmove>:
 800c802:	4288      	cmp	r0, r1
 800c804:	b510      	push	{r4, lr}
 800c806:	eb01 0402 	add.w	r4, r1, r2
 800c80a:	d902      	bls.n	800c812 <memmove+0x10>
 800c80c:	4284      	cmp	r4, r0
 800c80e:	4623      	mov	r3, r4
 800c810:	d807      	bhi.n	800c822 <memmove+0x20>
 800c812:	1e43      	subs	r3, r0, #1
 800c814:	42a1      	cmp	r1, r4
 800c816:	d008      	beq.n	800c82a <memmove+0x28>
 800c818:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c81c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c820:	e7f8      	b.n	800c814 <memmove+0x12>
 800c822:	4402      	add	r2, r0
 800c824:	4601      	mov	r1, r0
 800c826:	428a      	cmp	r2, r1
 800c828:	d100      	bne.n	800c82c <memmove+0x2a>
 800c82a:	bd10      	pop	{r4, pc}
 800c82c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c830:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c834:	e7f7      	b.n	800c826 <memmove+0x24>

0800c836 <memset>:
 800c836:	4402      	add	r2, r0
 800c838:	4603      	mov	r3, r0
 800c83a:	4293      	cmp	r3, r2
 800c83c:	d100      	bne.n	800c840 <memset+0xa>
 800c83e:	4770      	bx	lr
 800c840:	f803 1b01 	strb.w	r1, [r3], #1
 800c844:	e7f9      	b.n	800c83a <memset+0x4>

0800c846 <strcat>:
 800c846:	b510      	push	{r4, lr}
 800c848:	4602      	mov	r2, r0
 800c84a:	7814      	ldrb	r4, [r2, #0]
 800c84c:	4613      	mov	r3, r2
 800c84e:	3201      	adds	r2, #1
 800c850:	2c00      	cmp	r4, #0
 800c852:	d1fa      	bne.n	800c84a <strcat+0x4>
 800c854:	3b01      	subs	r3, #1
 800c856:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c85a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c85e:	2a00      	cmp	r2, #0
 800c860:	d1f9      	bne.n	800c856 <strcat+0x10>
 800c862:	bd10      	pop	{r4, pc}

0800c864 <_localeconv_r>:
 800c864:	4800      	ldr	r0, [pc, #0]	@ (800c868 <_localeconv_r+0x4>)
 800c866:	4770      	bx	lr
 800c868:	24000c9c 	.word	0x24000c9c

0800c86c <_close_r>:
 800c86c:	b538      	push	{r3, r4, r5, lr}
 800c86e:	4d06      	ldr	r5, [pc, #24]	@ (800c888 <_close_r+0x1c>)
 800c870:	2300      	movs	r3, #0
 800c872:	4604      	mov	r4, r0
 800c874:	4608      	mov	r0, r1
 800c876:	602b      	str	r3, [r5, #0]
 800c878:	f002 f918 	bl	800eaac <_close>
 800c87c:	1c43      	adds	r3, r0, #1
 800c87e:	d102      	bne.n	800c886 <_close_r+0x1a>
 800c880:	682b      	ldr	r3, [r5, #0]
 800c882:	b103      	cbz	r3, 800c886 <_close_r+0x1a>
 800c884:	6023      	str	r3, [r4, #0]
 800c886:	bd38      	pop	{r3, r4, r5, pc}
 800c888:	240692e8 	.word	0x240692e8

0800c88c <_lseek_r>:
 800c88c:	b538      	push	{r3, r4, r5, lr}
 800c88e:	4d07      	ldr	r5, [pc, #28]	@ (800c8ac <_lseek_r+0x20>)
 800c890:	4604      	mov	r4, r0
 800c892:	4608      	mov	r0, r1
 800c894:	4611      	mov	r1, r2
 800c896:	2200      	movs	r2, #0
 800c898:	602a      	str	r2, [r5, #0]
 800c89a:	461a      	mov	r2, r3
 800c89c:	f002 f92e 	bl	800eafc <_lseek>
 800c8a0:	1c43      	adds	r3, r0, #1
 800c8a2:	d102      	bne.n	800c8aa <_lseek_r+0x1e>
 800c8a4:	682b      	ldr	r3, [r5, #0]
 800c8a6:	b103      	cbz	r3, 800c8aa <_lseek_r+0x1e>
 800c8a8:	6023      	str	r3, [r4, #0]
 800c8aa:	bd38      	pop	{r3, r4, r5, pc}
 800c8ac:	240692e8 	.word	0x240692e8

0800c8b0 <_read_r>:
 800c8b0:	b538      	push	{r3, r4, r5, lr}
 800c8b2:	4d07      	ldr	r5, [pc, #28]	@ (800c8d0 <_read_r+0x20>)
 800c8b4:	4604      	mov	r4, r0
 800c8b6:	4608      	mov	r0, r1
 800c8b8:	4611      	mov	r1, r2
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	602a      	str	r2, [r5, #0]
 800c8be:	461a      	mov	r2, r3
 800c8c0:	f002 f924 	bl	800eb0c <_read>
 800c8c4:	1c43      	adds	r3, r0, #1
 800c8c6:	d102      	bne.n	800c8ce <_read_r+0x1e>
 800c8c8:	682b      	ldr	r3, [r5, #0]
 800c8ca:	b103      	cbz	r3, 800c8ce <_read_r+0x1e>
 800c8cc:	6023      	str	r3, [r4, #0]
 800c8ce:	bd38      	pop	{r3, r4, r5, pc}
 800c8d0:	240692e8 	.word	0x240692e8

0800c8d4 <_sbrk_r>:
 800c8d4:	b538      	push	{r3, r4, r5, lr}
 800c8d6:	4d06      	ldr	r5, [pc, #24]	@ (800c8f0 <_sbrk_r+0x1c>)
 800c8d8:	2300      	movs	r3, #0
 800c8da:	4604      	mov	r4, r0
 800c8dc:	4608      	mov	r0, r1
 800c8de:	602b      	str	r3, [r5, #0]
 800c8e0:	f7f4 fcfc 	bl	80012dc <_sbrk>
 800c8e4:	1c43      	adds	r3, r0, #1
 800c8e6:	d102      	bne.n	800c8ee <_sbrk_r+0x1a>
 800c8e8:	682b      	ldr	r3, [r5, #0]
 800c8ea:	b103      	cbz	r3, 800c8ee <_sbrk_r+0x1a>
 800c8ec:	6023      	str	r3, [r4, #0]
 800c8ee:	bd38      	pop	{r3, r4, r5, pc}
 800c8f0:	240692e8 	.word	0x240692e8

0800c8f4 <_write_r>:
 800c8f4:	b538      	push	{r3, r4, r5, lr}
 800c8f6:	4d07      	ldr	r5, [pc, #28]	@ (800c914 <_write_r+0x20>)
 800c8f8:	4604      	mov	r4, r0
 800c8fa:	4608      	mov	r0, r1
 800c8fc:	4611      	mov	r1, r2
 800c8fe:	2200      	movs	r2, #0
 800c900:	602a      	str	r2, [r5, #0]
 800c902:	461a      	mov	r2, r3
 800c904:	f002 f90a 	bl	800eb1c <_write>
 800c908:	1c43      	adds	r3, r0, #1
 800c90a:	d102      	bne.n	800c912 <_write_r+0x1e>
 800c90c:	682b      	ldr	r3, [r5, #0]
 800c90e:	b103      	cbz	r3, 800c912 <_write_r+0x1e>
 800c910:	6023      	str	r3, [r4, #0]
 800c912:	bd38      	pop	{r3, r4, r5, pc}
 800c914:	240692e8 	.word	0x240692e8

0800c918 <__errno>:
 800c918:	4b01      	ldr	r3, [pc, #4]	@ (800c920 <__errno+0x8>)
 800c91a:	6818      	ldr	r0, [r3, #0]
 800c91c:	4770      	bx	lr
 800c91e:	bf00      	nop
 800c920:	24000b5c 	.word	0x24000b5c

0800c924 <__libc_init_array>:
 800c924:	b570      	push	{r4, r5, r6, lr}
 800c926:	4d0d      	ldr	r5, [pc, #52]	@ (800c95c <__libc_init_array+0x38>)
 800c928:	4c0d      	ldr	r4, [pc, #52]	@ (800c960 <__libc_init_array+0x3c>)
 800c92a:	1b64      	subs	r4, r4, r5
 800c92c:	10a4      	asrs	r4, r4, #2
 800c92e:	2600      	movs	r6, #0
 800c930:	42a6      	cmp	r6, r4
 800c932:	d109      	bne.n	800c948 <__libc_init_array+0x24>
 800c934:	4d0b      	ldr	r5, [pc, #44]	@ (800c964 <__libc_init_array+0x40>)
 800c936:	4c0c      	ldr	r4, [pc, #48]	@ (800c968 <__libc_init_array+0x44>)
 800c938:	f002 f8fa 	bl	800eb30 <_init>
 800c93c:	1b64      	subs	r4, r4, r5
 800c93e:	10a4      	asrs	r4, r4, #2
 800c940:	2600      	movs	r6, #0
 800c942:	42a6      	cmp	r6, r4
 800c944:	d105      	bne.n	800c952 <__libc_init_array+0x2e>
 800c946:	bd70      	pop	{r4, r5, r6, pc}
 800c948:	f855 3b04 	ldr.w	r3, [r5], #4
 800c94c:	4798      	blx	r3
 800c94e:	3601      	adds	r6, #1
 800c950:	e7ee      	b.n	800c930 <__libc_init_array+0xc>
 800c952:	f855 3b04 	ldr.w	r3, [r5], #4
 800c956:	4798      	blx	r3
 800c958:	3601      	adds	r6, #1
 800c95a:	e7f2      	b.n	800c942 <__libc_init_array+0x1e>
 800c95c:	0806d7f0 	.word	0x0806d7f0
 800c960:	0806d7f0 	.word	0x0806d7f0
 800c964:	0806d7f0 	.word	0x0806d7f0
 800c968:	0806d7f4 	.word	0x0806d7f4

0800c96c <__retarget_lock_init_recursive>:
 800c96c:	4770      	bx	lr

0800c96e <__retarget_lock_acquire_recursive>:
 800c96e:	4770      	bx	lr

0800c970 <__retarget_lock_release_recursive>:
 800c970:	4770      	bx	lr

0800c972 <strcpy>:
 800c972:	4603      	mov	r3, r0
 800c974:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c978:	f803 2b01 	strb.w	r2, [r3], #1
 800c97c:	2a00      	cmp	r2, #0
 800c97e:	d1f9      	bne.n	800c974 <strcpy+0x2>
 800c980:	4770      	bx	lr

0800c982 <memcpy>:
 800c982:	440a      	add	r2, r1
 800c984:	4291      	cmp	r1, r2
 800c986:	f100 33ff 	add.w	r3, r0, #4294967295
 800c98a:	d100      	bne.n	800c98e <memcpy+0xc>
 800c98c:	4770      	bx	lr
 800c98e:	b510      	push	{r4, lr}
 800c990:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c994:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c998:	4291      	cmp	r1, r2
 800c99a:	d1f9      	bne.n	800c990 <memcpy+0xe>
 800c99c:	bd10      	pop	{r4, pc}

0800c99e <quorem>:
 800c99e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9a2:	6903      	ldr	r3, [r0, #16]
 800c9a4:	690c      	ldr	r4, [r1, #16]
 800c9a6:	42a3      	cmp	r3, r4
 800c9a8:	4607      	mov	r7, r0
 800c9aa:	db7e      	blt.n	800caaa <quorem+0x10c>
 800c9ac:	3c01      	subs	r4, #1
 800c9ae:	f101 0814 	add.w	r8, r1, #20
 800c9b2:	00a3      	lsls	r3, r4, #2
 800c9b4:	f100 0514 	add.w	r5, r0, #20
 800c9b8:	9300      	str	r3, [sp, #0]
 800c9ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c9be:	9301      	str	r3, [sp, #4]
 800c9c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c9c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c9c8:	3301      	adds	r3, #1
 800c9ca:	429a      	cmp	r2, r3
 800c9cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c9d0:	fbb2 f6f3 	udiv	r6, r2, r3
 800c9d4:	d32e      	bcc.n	800ca34 <quorem+0x96>
 800c9d6:	f04f 0a00 	mov.w	sl, #0
 800c9da:	46c4      	mov	ip, r8
 800c9dc:	46ae      	mov	lr, r5
 800c9de:	46d3      	mov	fp, sl
 800c9e0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c9e4:	b298      	uxth	r0, r3
 800c9e6:	fb06 a000 	mla	r0, r6, r0, sl
 800c9ea:	0c02      	lsrs	r2, r0, #16
 800c9ec:	0c1b      	lsrs	r3, r3, #16
 800c9ee:	fb06 2303 	mla	r3, r6, r3, r2
 800c9f2:	f8de 2000 	ldr.w	r2, [lr]
 800c9f6:	b280      	uxth	r0, r0
 800c9f8:	b292      	uxth	r2, r2
 800c9fa:	1a12      	subs	r2, r2, r0
 800c9fc:	445a      	add	r2, fp
 800c9fe:	f8de 0000 	ldr.w	r0, [lr]
 800ca02:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ca06:	b29b      	uxth	r3, r3
 800ca08:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ca0c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ca10:	b292      	uxth	r2, r2
 800ca12:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ca16:	45e1      	cmp	r9, ip
 800ca18:	f84e 2b04 	str.w	r2, [lr], #4
 800ca1c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ca20:	d2de      	bcs.n	800c9e0 <quorem+0x42>
 800ca22:	9b00      	ldr	r3, [sp, #0]
 800ca24:	58eb      	ldr	r3, [r5, r3]
 800ca26:	b92b      	cbnz	r3, 800ca34 <quorem+0x96>
 800ca28:	9b01      	ldr	r3, [sp, #4]
 800ca2a:	3b04      	subs	r3, #4
 800ca2c:	429d      	cmp	r5, r3
 800ca2e:	461a      	mov	r2, r3
 800ca30:	d32f      	bcc.n	800ca92 <quorem+0xf4>
 800ca32:	613c      	str	r4, [r7, #16]
 800ca34:	4638      	mov	r0, r7
 800ca36:	f001 f855 	bl	800dae4 <__mcmp>
 800ca3a:	2800      	cmp	r0, #0
 800ca3c:	db25      	blt.n	800ca8a <quorem+0xec>
 800ca3e:	4629      	mov	r1, r5
 800ca40:	2000      	movs	r0, #0
 800ca42:	f858 2b04 	ldr.w	r2, [r8], #4
 800ca46:	f8d1 c000 	ldr.w	ip, [r1]
 800ca4a:	fa1f fe82 	uxth.w	lr, r2
 800ca4e:	fa1f f38c 	uxth.w	r3, ip
 800ca52:	eba3 030e 	sub.w	r3, r3, lr
 800ca56:	4403      	add	r3, r0
 800ca58:	0c12      	lsrs	r2, r2, #16
 800ca5a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ca5e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ca62:	b29b      	uxth	r3, r3
 800ca64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ca68:	45c1      	cmp	r9, r8
 800ca6a:	f841 3b04 	str.w	r3, [r1], #4
 800ca6e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ca72:	d2e6      	bcs.n	800ca42 <quorem+0xa4>
 800ca74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ca78:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ca7c:	b922      	cbnz	r2, 800ca88 <quorem+0xea>
 800ca7e:	3b04      	subs	r3, #4
 800ca80:	429d      	cmp	r5, r3
 800ca82:	461a      	mov	r2, r3
 800ca84:	d30b      	bcc.n	800ca9e <quorem+0x100>
 800ca86:	613c      	str	r4, [r7, #16]
 800ca88:	3601      	adds	r6, #1
 800ca8a:	4630      	mov	r0, r6
 800ca8c:	b003      	add	sp, #12
 800ca8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca92:	6812      	ldr	r2, [r2, #0]
 800ca94:	3b04      	subs	r3, #4
 800ca96:	2a00      	cmp	r2, #0
 800ca98:	d1cb      	bne.n	800ca32 <quorem+0x94>
 800ca9a:	3c01      	subs	r4, #1
 800ca9c:	e7c6      	b.n	800ca2c <quorem+0x8e>
 800ca9e:	6812      	ldr	r2, [r2, #0]
 800caa0:	3b04      	subs	r3, #4
 800caa2:	2a00      	cmp	r2, #0
 800caa4:	d1ef      	bne.n	800ca86 <quorem+0xe8>
 800caa6:	3c01      	subs	r4, #1
 800caa8:	e7ea      	b.n	800ca80 <quorem+0xe2>
 800caaa:	2000      	movs	r0, #0
 800caac:	e7ee      	b.n	800ca8c <quorem+0xee>
	...

0800cab0 <_dtoa_r>:
 800cab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cab4:	ed2d 8b02 	vpush	{d8}
 800cab8:	69c7      	ldr	r7, [r0, #28]
 800caba:	b091      	sub	sp, #68	@ 0x44
 800cabc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800cac0:	ec55 4b10 	vmov	r4, r5, d0
 800cac4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800cac6:	9107      	str	r1, [sp, #28]
 800cac8:	4681      	mov	r9, r0
 800caca:	9209      	str	r2, [sp, #36]	@ 0x24
 800cacc:	930d      	str	r3, [sp, #52]	@ 0x34
 800cace:	b97f      	cbnz	r7, 800caf0 <_dtoa_r+0x40>
 800cad0:	2010      	movs	r0, #16
 800cad2:	f7ff f855 	bl	800bb80 <malloc>
 800cad6:	4602      	mov	r2, r0
 800cad8:	f8c9 001c 	str.w	r0, [r9, #28]
 800cadc:	b920      	cbnz	r0, 800cae8 <_dtoa_r+0x38>
 800cade:	4ba0      	ldr	r3, [pc, #640]	@ (800cd60 <_dtoa_r+0x2b0>)
 800cae0:	21ef      	movs	r1, #239	@ 0xef
 800cae2:	48a0      	ldr	r0, [pc, #640]	@ (800cd64 <_dtoa_r+0x2b4>)
 800cae4:	f001 fb12 	bl	800e10c <__assert_func>
 800cae8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800caec:	6007      	str	r7, [r0, #0]
 800caee:	60c7      	str	r7, [r0, #12]
 800caf0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800caf4:	6819      	ldr	r1, [r3, #0]
 800caf6:	b159      	cbz	r1, 800cb10 <_dtoa_r+0x60>
 800caf8:	685a      	ldr	r2, [r3, #4]
 800cafa:	604a      	str	r2, [r1, #4]
 800cafc:	2301      	movs	r3, #1
 800cafe:	4093      	lsls	r3, r2
 800cb00:	608b      	str	r3, [r1, #8]
 800cb02:	4648      	mov	r0, r9
 800cb04:	f000 fdb4 	bl	800d670 <_Bfree>
 800cb08:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	601a      	str	r2, [r3, #0]
 800cb10:	1e2b      	subs	r3, r5, #0
 800cb12:	bfbb      	ittet	lt
 800cb14:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cb18:	9303      	strlt	r3, [sp, #12]
 800cb1a:	2300      	movge	r3, #0
 800cb1c:	2201      	movlt	r2, #1
 800cb1e:	bfac      	ite	ge
 800cb20:	6033      	strge	r3, [r6, #0]
 800cb22:	6032      	strlt	r2, [r6, #0]
 800cb24:	4b90      	ldr	r3, [pc, #576]	@ (800cd68 <_dtoa_r+0x2b8>)
 800cb26:	9e03      	ldr	r6, [sp, #12]
 800cb28:	43b3      	bics	r3, r6
 800cb2a:	d110      	bne.n	800cb4e <_dtoa_r+0x9e>
 800cb2c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cb2e:	f242 730f 	movw	r3, #9999	@ 0x270f
 800cb32:	6013      	str	r3, [r2, #0]
 800cb34:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800cb38:	4323      	orrs	r3, r4
 800cb3a:	f000 84de 	beq.w	800d4fa <_dtoa_r+0xa4a>
 800cb3e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cb40:	4f8a      	ldr	r7, [pc, #552]	@ (800cd6c <_dtoa_r+0x2bc>)
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	f000 84e0 	beq.w	800d508 <_dtoa_r+0xa58>
 800cb48:	1cfb      	adds	r3, r7, #3
 800cb4a:	f000 bcdb 	b.w	800d504 <_dtoa_r+0xa54>
 800cb4e:	ed9d 8b02 	vldr	d8, [sp, #8]
 800cb52:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800cb56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb5a:	d10a      	bne.n	800cb72 <_dtoa_r+0xc2>
 800cb5c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cb5e:	2301      	movs	r3, #1
 800cb60:	6013      	str	r3, [r2, #0]
 800cb62:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cb64:	b113      	cbz	r3, 800cb6c <_dtoa_r+0xbc>
 800cb66:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800cb68:	4b81      	ldr	r3, [pc, #516]	@ (800cd70 <_dtoa_r+0x2c0>)
 800cb6a:	6013      	str	r3, [r2, #0]
 800cb6c:	4f81      	ldr	r7, [pc, #516]	@ (800cd74 <_dtoa_r+0x2c4>)
 800cb6e:	f000 bccb 	b.w	800d508 <_dtoa_r+0xa58>
 800cb72:	aa0e      	add	r2, sp, #56	@ 0x38
 800cb74:	a90f      	add	r1, sp, #60	@ 0x3c
 800cb76:	4648      	mov	r0, r9
 800cb78:	eeb0 0b48 	vmov.f64	d0, d8
 800cb7c:	f001 f862 	bl	800dc44 <__d2b>
 800cb80:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800cb84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cb86:	9001      	str	r0, [sp, #4]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d045      	beq.n	800cc18 <_dtoa_r+0x168>
 800cb8c:	eeb0 7b48 	vmov.f64	d7, d8
 800cb90:	ee18 1a90 	vmov	r1, s17
 800cb94:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800cb98:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800cb9c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800cba0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800cba4:	2500      	movs	r5, #0
 800cba6:	ee07 1a90 	vmov	s15, r1
 800cbaa:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800cbae:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800cd48 <_dtoa_r+0x298>
 800cbb2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800cbb6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800cd50 <_dtoa_r+0x2a0>
 800cbba:	eea7 6b05 	vfma.f64	d6, d7, d5
 800cbbe:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800cd58 <_dtoa_r+0x2a8>
 800cbc2:	ee07 3a90 	vmov	s15, r3
 800cbc6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800cbca:	eeb0 7b46 	vmov.f64	d7, d6
 800cbce:	eea4 7b05 	vfma.f64	d7, d4, d5
 800cbd2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800cbd6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800cbda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbde:	ee16 8a90 	vmov	r8, s13
 800cbe2:	d508      	bpl.n	800cbf6 <_dtoa_r+0x146>
 800cbe4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800cbe8:	eeb4 6b47 	vcmp.f64	d6, d7
 800cbec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbf0:	bf18      	it	ne
 800cbf2:	f108 38ff 	addne.w	r8, r8, #4294967295
 800cbf6:	f1b8 0f16 	cmp.w	r8, #22
 800cbfa:	d82b      	bhi.n	800cc54 <_dtoa_r+0x1a4>
 800cbfc:	495e      	ldr	r1, [pc, #376]	@ (800cd78 <_dtoa_r+0x2c8>)
 800cbfe:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800cc02:	ed91 7b00 	vldr	d7, [r1]
 800cc06:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800cc0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc0e:	d501      	bpl.n	800cc14 <_dtoa_r+0x164>
 800cc10:	f108 38ff 	add.w	r8, r8, #4294967295
 800cc14:	2100      	movs	r1, #0
 800cc16:	e01e      	b.n	800cc56 <_dtoa_r+0x1a6>
 800cc18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc1a:	4413      	add	r3, r2
 800cc1c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800cc20:	2920      	cmp	r1, #32
 800cc22:	bfc1      	itttt	gt
 800cc24:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800cc28:	408e      	lslgt	r6, r1
 800cc2a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800cc2e:	fa24 f101 	lsrgt.w	r1, r4, r1
 800cc32:	bfd6      	itet	le
 800cc34:	f1c1 0120 	rsble	r1, r1, #32
 800cc38:	4331      	orrgt	r1, r6
 800cc3a:	fa04 f101 	lslle.w	r1, r4, r1
 800cc3e:	ee07 1a90 	vmov	s15, r1
 800cc42:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800cc46:	3b01      	subs	r3, #1
 800cc48:	ee17 1a90 	vmov	r1, s15
 800cc4c:	2501      	movs	r5, #1
 800cc4e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800cc52:	e7a8      	b.n	800cba6 <_dtoa_r+0xf6>
 800cc54:	2101      	movs	r1, #1
 800cc56:	1ad2      	subs	r2, r2, r3
 800cc58:	1e53      	subs	r3, r2, #1
 800cc5a:	9306      	str	r3, [sp, #24]
 800cc5c:	bf45      	ittet	mi
 800cc5e:	f1c2 0301 	rsbmi	r3, r2, #1
 800cc62:	9305      	strmi	r3, [sp, #20]
 800cc64:	2300      	movpl	r3, #0
 800cc66:	2300      	movmi	r3, #0
 800cc68:	bf4c      	ite	mi
 800cc6a:	9306      	strmi	r3, [sp, #24]
 800cc6c:	9305      	strpl	r3, [sp, #20]
 800cc6e:	f1b8 0f00 	cmp.w	r8, #0
 800cc72:	910c      	str	r1, [sp, #48]	@ 0x30
 800cc74:	db18      	blt.n	800cca8 <_dtoa_r+0x1f8>
 800cc76:	9b06      	ldr	r3, [sp, #24]
 800cc78:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800cc7c:	4443      	add	r3, r8
 800cc7e:	9306      	str	r3, [sp, #24]
 800cc80:	2300      	movs	r3, #0
 800cc82:	9a07      	ldr	r2, [sp, #28]
 800cc84:	2a09      	cmp	r2, #9
 800cc86:	d849      	bhi.n	800cd1c <_dtoa_r+0x26c>
 800cc88:	2a05      	cmp	r2, #5
 800cc8a:	bfc4      	itt	gt
 800cc8c:	3a04      	subgt	r2, #4
 800cc8e:	9207      	strgt	r2, [sp, #28]
 800cc90:	9a07      	ldr	r2, [sp, #28]
 800cc92:	f1a2 0202 	sub.w	r2, r2, #2
 800cc96:	bfcc      	ite	gt
 800cc98:	2400      	movgt	r4, #0
 800cc9a:	2401      	movle	r4, #1
 800cc9c:	2a03      	cmp	r2, #3
 800cc9e:	d848      	bhi.n	800cd32 <_dtoa_r+0x282>
 800cca0:	e8df f002 	tbb	[pc, r2]
 800cca4:	3a2c2e0b 	.word	0x3a2c2e0b
 800cca8:	9b05      	ldr	r3, [sp, #20]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	eba3 0308 	sub.w	r3, r3, r8
 800ccb0:	9305      	str	r3, [sp, #20]
 800ccb2:	920a      	str	r2, [sp, #40]	@ 0x28
 800ccb4:	f1c8 0300 	rsb	r3, r8, #0
 800ccb8:	e7e3      	b.n	800cc82 <_dtoa_r+0x1d2>
 800ccba:	2200      	movs	r2, #0
 800ccbc:	9208      	str	r2, [sp, #32]
 800ccbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ccc0:	2a00      	cmp	r2, #0
 800ccc2:	dc39      	bgt.n	800cd38 <_dtoa_r+0x288>
 800ccc4:	f04f 0b01 	mov.w	fp, #1
 800ccc8:	46da      	mov	sl, fp
 800ccca:	465a      	mov	r2, fp
 800cccc:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800ccd0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800ccd4:	2100      	movs	r1, #0
 800ccd6:	2004      	movs	r0, #4
 800ccd8:	f100 0614 	add.w	r6, r0, #20
 800ccdc:	4296      	cmp	r6, r2
 800ccde:	d930      	bls.n	800cd42 <_dtoa_r+0x292>
 800cce0:	6079      	str	r1, [r7, #4]
 800cce2:	4648      	mov	r0, r9
 800cce4:	9304      	str	r3, [sp, #16]
 800cce6:	f000 fc83 	bl	800d5f0 <_Balloc>
 800ccea:	9b04      	ldr	r3, [sp, #16]
 800ccec:	4607      	mov	r7, r0
 800ccee:	2800      	cmp	r0, #0
 800ccf0:	d146      	bne.n	800cd80 <_dtoa_r+0x2d0>
 800ccf2:	4b22      	ldr	r3, [pc, #136]	@ (800cd7c <_dtoa_r+0x2cc>)
 800ccf4:	4602      	mov	r2, r0
 800ccf6:	f240 11af 	movw	r1, #431	@ 0x1af
 800ccfa:	e6f2      	b.n	800cae2 <_dtoa_r+0x32>
 800ccfc:	2201      	movs	r2, #1
 800ccfe:	e7dd      	b.n	800ccbc <_dtoa_r+0x20c>
 800cd00:	2200      	movs	r2, #0
 800cd02:	9208      	str	r2, [sp, #32]
 800cd04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd06:	eb08 0b02 	add.w	fp, r8, r2
 800cd0a:	f10b 0a01 	add.w	sl, fp, #1
 800cd0e:	4652      	mov	r2, sl
 800cd10:	2a01      	cmp	r2, #1
 800cd12:	bfb8      	it	lt
 800cd14:	2201      	movlt	r2, #1
 800cd16:	e7db      	b.n	800ccd0 <_dtoa_r+0x220>
 800cd18:	2201      	movs	r2, #1
 800cd1a:	e7f2      	b.n	800cd02 <_dtoa_r+0x252>
 800cd1c:	2401      	movs	r4, #1
 800cd1e:	2200      	movs	r2, #0
 800cd20:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800cd24:	f04f 3bff 	mov.w	fp, #4294967295
 800cd28:	2100      	movs	r1, #0
 800cd2a:	46da      	mov	sl, fp
 800cd2c:	2212      	movs	r2, #18
 800cd2e:	9109      	str	r1, [sp, #36]	@ 0x24
 800cd30:	e7ce      	b.n	800ccd0 <_dtoa_r+0x220>
 800cd32:	2201      	movs	r2, #1
 800cd34:	9208      	str	r2, [sp, #32]
 800cd36:	e7f5      	b.n	800cd24 <_dtoa_r+0x274>
 800cd38:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800cd3c:	46da      	mov	sl, fp
 800cd3e:	465a      	mov	r2, fp
 800cd40:	e7c6      	b.n	800ccd0 <_dtoa_r+0x220>
 800cd42:	3101      	adds	r1, #1
 800cd44:	0040      	lsls	r0, r0, #1
 800cd46:	e7c7      	b.n	800ccd8 <_dtoa_r+0x228>
 800cd48:	636f4361 	.word	0x636f4361
 800cd4c:	3fd287a7 	.word	0x3fd287a7
 800cd50:	8b60c8b3 	.word	0x8b60c8b3
 800cd54:	3fc68a28 	.word	0x3fc68a28
 800cd58:	509f79fb 	.word	0x509f79fb
 800cd5c:	3fd34413 	.word	0x3fd34413
 800cd60:	0806d249 	.word	0x0806d249
 800cd64:	0806d260 	.word	0x0806d260
 800cd68:	7ff00000 	.word	0x7ff00000
 800cd6c:	0806d245 	.word	0x0806d245
 800cd70:	0806d219 	.word	0x0806d219
 800cd74:	0806d218 	.word	0x0806d218
 800cd78:	0806d358 	.word	0x0806d358
 800cd7c:	0806d2b8 	.word	0x0806d2b8
 800cd80:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800cd84:	f1ba 0f0e 	cmp.w	sl, #14
 800cd88:	6010      	str	r0, [r2, #0]
 800cd8a:	d86f      	bhi.n	800ce6c <_dtoa_r+0x3bc>
 800cd8c:	2c00      	cmp	r4, #0
 800cd8e:	d06d      	beq.n	800ce6c <_dtoa_r+0x3bc>
 800cd90:	f1b8 0f00 	cmp.w	r8, #0
 800cd94:	f340 80c2 	ble.w	800cf1c <_dtoa_r+0x46c>
 800cd98:	4aca      	ldr	r2, [pc, #808]	@ (800d0c4 <_dtoa_r+0x614>)
 800cd9a:	f008 010f 	and.w	r1, r8, #15
 800cd9e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800cda2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800cda6:	ed92 7b00 	vldr	d7, [r2]
 800cdaa:	ea4f 1128 	mov.w	r1, r8, asr #4
 800cdae:	f000 80a9 	beq.w	800cf04 <_dtoa_r+0x454>
 800cdb2:	4ac5      	ldr	r2, [pc, #788]	@ (800d0c8 <_dtoa_r+0x618>)
 800cdb4:	ed92 6b08 	vldr	d6, [r2, #32]
 800cdb8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800cdbc:	ed8d 6b02 	vstr	d6, [sp, #8]
 800cdc0:	f001 010f 	and.w	r1, r1, #15
 800cdc4:	2203      	movs	r2, #3
 800cdc6:	48c0      	ldr	r0, [pc, #768]	@ (800d0c8 <_dtoa_r+0x618>)
 800cdc8:	2900      	cmp	r1, #0
 800cdca:	f040 809d 	bne.w	800cf08 <_dtoa_r+0x458>
 800cdce:	ed9d 6b02 	vldr	d6, [sp, #8]
 800cdd2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800cdd6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cdda:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800cddc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cde0:	2900      	cmp	r1, #0
 800cde2:	f000 80c1 	beq.w	800cf68 <_dtoa_r+0x4b8>
 800cde6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800cdea:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800cdee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdf2:	f140 80b9 	bpl.w	800cf68 <_dtoa_r+0x4b8>
 800cdf6:	f1ba 0f00 	cmp.w	sl, #0
 800cdfa:	f000 80b5 	beq.w	800cf68 <_dtoa_r+0x4b8>
 800cdfe:	f1bb 0f00 	cmp.w	fp, #0
 800ce02:	dd31      	ble.n	800ce68 <_dtoa_r+0x3b8>
 800ce04:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800ce08:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ce0c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ce10:	f108 31ff 	add.w	r1, r8, #4294967295
 800ce14:	9104      	str	r1, [sp, #16]
 800ce16:	3201      	adds	r2, #1
 800ce18:	465c      	mov	r4, fp
 800ce1a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ce1e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800ce22:	ee07 2a90 	vmov	s15, r2
 800ce26:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ce2a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800ce2e:	ee15 2a90 	vmov	r2, s11
 800ce32:	ec51 0b15 	vmov	r0, r1, d5
 800ce36:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800ce3a:	2c00      	cmp	r4, #0
 800ce3c:	f040 8098 	bne.w	800cf70 <_dtoa_r+0x4c0>
 800ce40:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800ce44:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ce48:	ec41 0b17 	vmov	d7, r0, r1
 800ce4c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ce50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce54:	f300 8261 	bgt.w	800d31a <_dtoa_r+0x86a>
 800ce58:	eeb1 7b47 	vneg.f64	d7, d7
 800ce5c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ce60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce64:	f100 80f5 	bmi.w	800d052 <_dtoa_r+0x5a2>
 800ce68:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ce6c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ce6e:	2a00      	cmp	r2, #0
 800ce70:	f2c0 812c 	blt.w	800d0cc <_dtoa_r+0x61c>
 800ce74:	f1b8 0f0e 	cmp.w	r8, #14
 800ce78:	f300 8128 	bgt.w	800d0cc <_dtoa_r+0x61c>
 800ce7c:	4b91      	ldr	r3, [pc, #580]	@ (800d0c4 <_dtoa_r+0x614>)
 800ce7e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ce82:	ed93 6b00 	vldr	d6, [r3]
 800ce86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	da03      	bge.n	800ce94 <_dtoa_r+0x3e4>
 800ce8c:	f1ba 0f00 	cmp.w	sl, #0
 800ce90:	f340 80d2 	ble.w	800d038 <_dtoa_r+0x588>
 800ce94:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800ce98:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ce9c:	463e      	mov	r6, r7
 800ce9e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800cea2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800cea6:	ee15 3a10 	vmov	r3, s10
 800ceaa:	3330      	adds	r3, #48	@ 0x30
 800ceac:	f806 3b01 	strb.w	r3, [r6], #1
 800ceb0:	1bf3      	subs	r3, r6, r7
 800ceb2:	459a      	cmp	sl, r3
 800ceb4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800ceb8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800cebc:	f040 80f8 	bne.w	800d0b0 <_dtoa_r+0x600>
 800cec0:	ee37 7b07 	vadd.f64	d7, d7, d7
 800cec4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800cec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cecc:	f300 80dd 	bgt.w	800d08a <_dtoa_r+0x5da>
 800ced0:	eeb4 7b46 	vcmp.f64	d7, d6
 800ced4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ced8:	d104      	bne.n	800cee4 <_dtoa_r+0x434>
 800ceda:	ee15 3a10 	vmov	r3, s10
 800cede:	07db      	lsls	r3, r3, #31
 800cee0:	f100 80d3 	bmi.w	800d08a <_dtoa_r+0x5da>
 800cee4:	9901      	ldr	r1, [sp, #4]
 800cee6:	4648      	mov	r0, r9
 800cee8:	f000 fbc2 	bl	800d670 <_Bfree>
 800ceec:	2300      	movs	r3, #0
 800ceee:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cef0:	7033      	strb	r3, [r6, #0]
 800cef2:	f108 0301 	add.w	r3, r8, #1
 800cef6:	6013      	str	r3, [r2, #0]
 800cef8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	f000 8304 	beq.w	800d508 <_dtoa_r+0xa58>
 800cf00:	601e      	str	r6, [r3, #0]
 800cf02:	e301      	b.n	800d508 <_dtoa_r+0xa58>
 800cf04:	2202      	movs	r2, #2
 800cf06:	e75e      	b.n	800cdc6 <_dtoa_r+0x316>
 800cf08:	07cc      	lsls	r4, r1, #31
 800cf0a:	d504      	bpl.n	800cf16 <_dtoa_r+0x466>
 800cf0c:	ed90 6b00 	vldr	d6, [r0]
 800cf10:	3201      	adds	r2, #1
 800cf12:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cf16:	1049      	asrs	r1, r1, #1
 800cf18:	3008      	adds	r0, #8
 800cf1a:	e755      	b.n	800cdc8 <_dtoa_r+0x318>
 800cf1c:	d022      	beq.n	800cf64 <_dtoa_r+0x4b4>
 800cf1e:	f1c8 0100 	rsb	r1, r8, #0
 800cf22:	4a68      	ldr	r2, [pc, #416]	@ (800d0c4 <_dtoa_r+0x614>)
 800cf24:	f001 000f 	and.w	r0, r1, #15
 800cf28:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800cf2c:	ed92 7b00 	vldr	d7, [r2]
 800cf30:	ee28 7b07 	vmul.f64	d7, d8, d7
 800cf34:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cf38:	4863      	ldr	r0, [pc, #396]	@ (800d0c8 <_dtoa_r+0x618>)
 800cf3a:	1109      	asrs	r1, r1, #4
 800cf3c:	2400      	movs	r4, #0
 800cf3e:	2202      	movs	r2, #2
 800cf40:	b929      	cbnz	r1, 800cf4e <_dtoa_r+0x49e>
 800cf42:	2c00      	cmp	r4, #0
 800cf44:	f43f af49 	beq.w	800cdda <_dtoa_r+0x32a>
 800cf48:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cf4c:	e745      	b.n	800cdda <_dtoa_r+0x32a>
 800cf4e:	07ce      	lsls	r6, r1, #31
 800cf50:	d505      	bpl.n	800cf5e <_dtoa_r+0x4ae>
 800cf52:	ed90 6b00 	vldr	d6, [r0]
 800cf56:	3201      	adds	r2, #1
 800cf58:	2401      	movs	r4, #1
 800cf5a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cf5e:	1049      	asrs	r1, r1, #1
 800cf60:	3008      	adds	r0, #8
 800cf62:	e7ed      	b.n	800cf40 <_dtoa_r+0x490>
 800cf64:	2202      	movs	r2, #2
 800cf66:	e738      	b.n	800cdda <_dtoa_r+0x32a>
 800cf68:	f8cd 8010 	str.w	r8, [sp, #16]
 800cf6c:	4654      	mov	r4, sl
 800cf6e:	e754      	b.n	800ce1a <_dtoa_r+0x36a>
 800cf70:	4a54      	ldr	r2, [pc, #336]	@ (800d0c4 <_dtoa_r+0x614>)
 800cf72:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800cf76:	ed12 4b02 	vldr	d4, [r2, #-8]
 800cf7a:	9a08      	ldr	r2, [sp, #32]
 800cf7c:	ec41 0b17 	vmov	d7, r0, r1
 800cf80:	443c      	add	r4, r7
 800cf82:	b34a      	cbz	r2, 800cfd8 <_dtoa_r+0x528>
 800cf84:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800cf88:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800cf8c:	463e      	mov	r6, r7
 800cf8e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800cf92:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800cf96:	ee35 7b47 	vsub.f64	d7, d5, d7
 800cf9a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800cf9e:	ee14 2a90 	vmov	r2, s9
 800cfa2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800cfa6:	3230      	adds	r2, #48	@ 0x30
 800cfa8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800cfac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cfb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfb4:	f806 2b01 	strb.w	r2, [r6], #1
 800cfb8:	d438      	bmi.n	800d02c <_dtoa_r+0x57c>
 800cfba:	ee32 5b46 	vsub.f64	d5, d2, d6
 800cfbe:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800cfc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfc6:	d462      	bmi.n	800d08e <_dtoa_r+0x5de>
 800cfc8:	42a6      	cmp	r6, r4
 800cfca:	f43f af4d 	beq.w	800ce68 <_dtoa_r+0x3b8>
 800cfce:	ee27 7b03 	vmul.f64	d7, d7, d3
 800cfd2:	ee26 6b03 	vmul.f64	d6, d6, d3
 800cfd6:	e7e0      	b.n	800cf9a <_dtoa_r+0x4ea>
 800cfd8:	4621      	mov	r1, r4
 800cfda:	463e      	mov	r6, r7
 800cfdc:	ee27 7b04 	vmul.f64	d7, d7, d4
 800cfe0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800cfe4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800cfe8:	ee14 2a90 	vmov	r2, s9
 800cfec:	3230      	adds	r2, #48	@ 0x30
 800cfee:	f806 2b01 	strb.w	r2, [r6], #1
 800cff2:	42a6      	cmp	r6, r4
 800cff4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800cff8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800cffc:	d119      	bne.n	800d032 <_dtoa_r+0x582>
 800cffe:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800d002:	ee37 4b05 	vadd.f64	d4, d7, d5
 800d006:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d00a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d00e:	dc3e      	bgt.n	800d08e <_dtoa_r+0x5de>
 800d010:	ee35 5b47 	vsub.f64	d5, d5, d7
 800d014:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800d018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d01c:	f57f af24 	bpl.w	800ce68 <_dtoa_r+0x3b8>
 800d020:	460e      	mov	r6, r1
 800d022:	3901      	subs	r1, #1
 800d024:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d028:	2b30      	cmp	r3, #48	@ 0x30
 800d02a:	d0f9      	beq.n	800d020 <_dtoa_r+0x570>
 800d02c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d030:	e758      	b.n	800cee4 <_dtoa_r+0x434>
 800d032:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d036:	e7d5      	b.n	800cfe4 <_dtoa_r+0x534>
 800d038:	d10b      	bne.n	800d052 <_dtoa_r+0x5a2>
 800d03a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800d03e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d042:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d046:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d04a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d04e:	f2c0 8161 	blt.w	800d314 <_dtoa_r+0x864>
 800d052:	2400      	movs	r4, #0
 800d054:	4625      	mov	r5, r4
 800d056:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d058:	43db      	mvns	r3, r3
 800d05a:	9304      	str	r3, [sp, #16]
 800d05c:	463e      	mov	r6, r7
 800d05e:	f04f 0800 	mov.w	r8, #0
 800d062:	4621      	mov	r1, r4
 800d064:	4648      	mov	r0, r9
 800d066:	f000 fb03 	bl	800d670 <_Bfree>
 800d06a:	2d00      	cmp	r5, #0
 800d06c:	d0de      	beq.n	800d02c <_dtoa_r+0x57c>
 800d06e:	f1b8 0f00 	cmp.w	r8, #0
 800d072:	d005      	beq.n	800d080 <_dtoa_r+0x5d0>
 800d074:	45a8      	cmp	r8, r5
 800d076:	d003      	beq.n	800d080 <_dtoa_r+0x5d0>
 800d078:	4641      	mov	r1, r8
 800d07a:	4648      	mov	r0, r9
 800d07c:	f000 faf8 	bl	800d670 <_Bfree>
 800d080:	4629      	mov	r1, r5
 800d082:	4648      	mov	r0, r9
 800d084:	f000 faf4 	bl	800d670 <_Bfree>
 800d088:	e7d0      	b.n	800d02c <_dtoa_r+0x57c>
 800d08a:	f8cd 8010 	str.w	r8, [sp, #16]
 800d08e:	4633      	mov	r3, r6
 800d090:	461e      	mov	r6, r3
 800d092:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d096:	2a39      	cmp	r2, #57	@ 0x39
 800d098:	d106      	bne.n	800d0a8 <_dtoa_r+0x5f8>
 800d09a:	429f      	cmp	r7, r3
 800d09c:	d1f8      	bne.n	800d090 <_dtoa_r+0x5e0>
 800d09e:	9a04      	ldr	r2, [sp, #16]
 800d0a0:	3201      	adds	r2, #1
 800d0a2:	9204      	str	r2, [sp, #16]
 800d0a4:	2230      	movs	r2, #48	@ 0x30
 800d0a6:	703a      	strb	r2, [r7, #0]
 800d0a8:	781a      	ldrb	r2, [r3, #0]
 800d0aa:	3201      	adds	r2, #1
 800d0ac:	701a      	strb	r2, [r3, #0]
 800d0ae:	e7bd      	b.n	800d02c <_dtoa_r+0x57c>
 800d0b0:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d0b4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d0b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0bc:	f47f aeef 	bne.w	800ce9e <_dtoa_r+0x3ee>
 800d0c0:	e710      	b.n	800cee4 <_dtoa_r+0x434>
 800d0c2:	bf00      	nop
 800d0c4:	0806d358 	.word	0x0806d358
 800d0c8:	0806d330 	.word	0x0806d330
 800d0cc:	9908      	ldr	r1, [sp, #32]
 800d0ce:	2900      	cmp	r1, #0
 800d0d0:	f000 80e3 	beq.w	800d29a <_dtoa_r+0x7ea>
 800d0d4:	9907      	ldr	r1, [sp, #28]
 800d0d6:	2901      	cmp	r1, #1
 800d0d8:	f300 80c8 	bgt.w	800d26c <_dtoa_r+0x7bc>
 800d0dc:	2d00      	cmp	r5, #0
 800d0de:	f000 80c1 	beq.w	800d264 <_dtoa_r+0x7b4>
 800d0e2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d0e6:	9e05      	ldr	r6, [sp, #20]
 800d0e8:	461c      	mov	r4, r3
 800d0ea:	9304      	str	r3, [sp, #16]
 800d0ec:	9b05      	ldr	r3, [sp, #20]
 800d0ee:	4413      	add	r3, r2
 800d0f0:	9305      	str	r3, [sp, #20]
 800d0f2:	9b06      	ldr	r3, [sp, #24]
 800d0f4:	2101      	movs	r1, #1
 800d0f6:	4413      	add	r3, r2
 800d0f8:	4648      	mov	r0, r9
 800d0fa:	9306      	str	r3, [sp, #24]
 800d0fc:	f000 fb6c 	bl	800d7d8 <__i2b>
 800d100:	9b04      	ldr	r3, [sp, #16]
 800d102:	4605      	mov	r5, r0
 800d104:	b166      	cbz	r6, 800d120 <_dtoa_r+0x670>
 800d106:	9a06      	ldr	r2, [sp, #24]
 800d108:	2a00      	cmp	r2, #0
 800d10a:	dd09      	ble.n	800d120 <_dtoa_r+0x670>
 800d10c:	42b2      	cmp	r2, r6
 800d10e:	9905      	ldr	r1, [sp, #20]
 800d110:	bfa8      	it	ge
 800d112:	4632      	movge	r2, r6
 800d114:	1a89      	subs	r1, r1, r2
 800d116:	9105      	str	r1, [sp, #20]
 800d118:	9906      	ldr	r1, [sp, #24]
 800d11a:	1ab6      	subs	r6, r6, r2
 800d11c:	1a8a      	subs	r2, r1, r2
 800d11e:	9206      	str	r2, [sp, #24]
 800d120:	b1fb      	cbz	r3, 800d162 <_dtoa_r+0x6b2>
 800d122:	9a08      	ldr	r2, [sp, #32]
 800d124:	2a00      	cmp	r2, #0
 800d126:	f000 80bc 	beq.w	800d2a2 <_dtoa_r+0x7f2>
 800d12a:	b19c      	cbz	r4, 800d154 <_dtoa_r+0x6a4>
 800d12c:	4629      	mov	r1, r5
 800d12e:	4622      	mov	r2, r4
 800d130:	4648      	mov	r0, r9
 800d132:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d134:	f000 fc10 	bl	800d958 <__pow5mult>
 800d138:	9a01      	ldr	r2, [sp, #4]
 800d13a:	4601      	mov	r1, r0
 800d13c:	4605      	mov	r5, r0
 800d13e:	4648      	mov	r0, r9
 800d140:	f000 fb60 	bl	800d804 <__multiply>
 800d144:	9901      	ldr	r1, [sp, #4]
 800d146:	9004      	str	r0, [sp, #16]
 800d148:	4648      	mov	r0, r9
 800d14a:	f000 fa91 	bl	800d670 <_Bfree>
 800d14e:	9a04      	ldr	r2, [sp, #16]
 800d150:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d152:	9201      	str	r2, [sp, #4]
 800d154:	1b1a      	subs	r2, r3, r4
 800d156:	d004      	beq.n	800d162 <_dtoa_r+0x6b2>
 800d158:	9901      	ldr	r1, [sp, #4]
 800d15a:	4648      	mov	r0, r9
 800d15c:	f000 fbfc 	bl	800d958 <__pow5mult>
 800d160:	9001      	str	r0, [sp, #4]
 800d162:	2101      	movs	r1, #1
 800d164:	4648      	mov	r0, r9
 800d166:	f000 fb37 	bl	800d7d8 <__i2b>
 800d16a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d16c:	4604      	mov	r4, r0
 800d16e:	2b00      	cmp	r3, #0
 800d170:	f000 81d0 	beq.w	800d514 <_dtoa_r+0xa64>
 800d174:	461a      	mov	r2, r3
 800d176:	4601      	mov	r1, r0
 800d178:	4648      	mov	r0, r9
 800d17a:	f000 fbed 	bl	800d958 <__pow5mult>
 800d17e:	9b07      	ldr	r3, [sp, #28]
 800d180:	2b01      	cmp	r3, #1
 800d182:	4604      	mov	r4, r0
 800d184:	f300 8095 	bgt.w	800d2b2 <_dtoa_r+0x802>
 800d188:	9b02      	ldr	r3, [sp, #8]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	f040 808b 	bne.w	800d2a6 <_dtoa_r+0x7f6>
 800d190:	9b03      	ldr	r3, [sp, #12]
 800d192:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800d196:	2a00      	cmp	r2, #0
 800d198:	f040 8087 	bne.w	800d2aa <_dtoa_r+0x7fa>
 800d19c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800d1a0:	0d12      	lsrs	r2, r2, #20
 800d1a2:	0512      	lsls	r2, r2, #20
 800d1a4:	2a00      	cmp	r2, #0
 800d1a6:	f000 8082 	beq.w	800d2ae <_dtoa_r+0x7fe>
 800d1aa:	9b05      	ldr	r3, [sp, #20]
 800d1ac:	3301      	adds	r3, #1
 800d1ae:	9305      	str	r3, [sp, #20]
 800d1b0:	9b06      	ldr	r3, [sp, #24]
 800d1b2:	3301      	adds	r3, #1
 800d1b4:	9306      	str	r3, [sp, #24]
 800d1b6:	2301      	movs	r3, #1
 800d1b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d1ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	f000 81af 	beq.w	800d520 <_dtoa_r+0xa70>
 800d1c2:	6922      	ldr	r2, [r4, #16]
 800d1c4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d1c8:	6910      	ldr	r0, [r2, #16]
 800d1ca:	f000 fab9 	bl	800d740 <__hi0bits>
 800d1ce:	f1c0 0020 	rsb	r0, r0, #32
 800d1d2:	9b06      	ldr	r3, [sp, #24]
 800d1d4:	4418      	add	r0, r3
 800d1d6:	f010 001f 	ands.w	r0, r0, #31
 800d1da:	d076      	beq.n	800d2ca <_dtoa_r+0x81a>
 800d1dc:	f1c0 0220 	rsb	r2, r0, #32
 800d1e0:	2a04      	cmp	r2, #4
 800d1e2:	dd69      	ble.n	800d2b8 <_dtoa_r+0x808>
 800d1e4:	9b05      	ldr	r3, [sp, #20]
 800d1e6:	f1c0 001c 	rsb	r0, r0, #28
 800d1ea:	4403      	add	r3, r0
 800d1ec:	9305      	str	r3, [sp, #20]
 800d1ee:	9b06      	ldr	r3, [sp, #24]
 800d1f0:	4406      	add	r6, r0
 800d1f2:	4403      	add	r3, r0
 800d1f4:	9306      	str	r3, [sp, #24]
 800d1f6:	9b05      	ldr	r3, [sp, #20]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	dd05      	ble.n	800d208 <_dtoa_r+0x758>
 800d1fc:	9901      	ldr	r1, [sp, #4]
 800d1fe:	461a      	mov	r2, r3
 800d200:	4648      	mov	r0, r9
 800d202:	f000 fc03 	bl	800da0c <__lshift>
 800d206:	9001      	str	r0, [sp, #4]
 800d208:	9b06      	ldr	r3, [sp, #24]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	dd05      	ble.n	800d21a <_dtoa_r+0x76a>
 800d20e:	4621      	mov	r1, r4
 800d210:	461a      	mov	r2, r3
 800d212:	4648      	mov	r0, r9
 800d214:	f000 fbfa 	bl	800da0c <__lshift>
 800d218:	4604      	mov	r4, r0
 800d21a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d056      	beq.n	800d2ce <_dtoa_r+0x81e>
 800d220:	9801      	ldr	r0, [sp, #4]
 800d222:	4621      	mov	r1, r4
 800d224:	f000 fc5e 	bl	800dae4 <__mcmp>
 800d228:	2800      	cmp	r0, #0
 800d22a:	da50      	bge.n	800d2ce <_dtoa_r+0x81e>
 800d22c:	f108 33ff 	add.w	r3, r8, #4294967295
 800d230:	9304      	str	r3, [sp, #16]
 800d232:	9901      	ldr	r1, [sp, #4]
 800d234:	2300      	movs	r3, #0
 800d236:	220a      	movs	r2, #10
 800d238:	4648      	mov	r0, r9
 800d23a:	f000 fa3b 	bl	800d6b4 <__multadd>
 800d23e:	9b08      	ldr	r3, [sp, #32]
 800d240:	9001      	str	r0, [sp, #4]
 800d242:	2b00      	cmp	r3, #0
 800d244:	f000 816e 	beq.w	800d524 <_dtoa_r+0xa74>
 800d248:	4629      	mov	r1, r5
 800d24a:	2300      	movs	r3, #0
 800d24c:	220a      	movs	r2, #10
 800d24e:	4648      	mov	r0, r9
 800d250:	f000 fa30 	bl	800d6b4 <__multadd>
 800d254:	f1bb 0f00 	cmp.w	fp, #0
 800d258:	4605      	mov	r5, r0
 800d25a:	dc64      	bgt.n	800d326 <_dtoa_r+0x876>
 800d25c:	9b07      	ldr	r3, [sp, #28]
 800d25e:	2b02      	cmp	r3, #2
 800d260:	dc3e      	bgt.n	800d2e0 <_dtoa_r+0x830>
 800d262:	e060      	b.n	800d326 <_dtoa_r+0x876>
 800d264:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d266:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d26a:	e73c      	b.n	800d0e6 <_dtoa_r+0x636>
 800d26c:	f10a 34ff 	add.w	r4, sl, #4294967295
 800d270:	42a3      	cmp	r3, r4
 800d272:	bfbf      	itttt	lt
 800d274:	1ae2      	sublt	r2, r4, r3
 800d276:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d278:	189b      	addlt	r3, r3, r2
 800d27a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800d27c:	bfae      	itee	ge
 800d27e:	1b1c      	subge	r4, r3, r4
 800d280:	4623      	movlt	r3, r4
 800d282:	2400      	movlt	r4, #0
 800d284:	f1ba 0f00 	cmp.w	sl, #0
 800d288:	bfb5      	itete	lt
 800d28a:	9a05      	ldrlt	r2, [sp, #20]
 800d28c:	9e05      	ldrge	r6, [sp, #20]
 800d28e:	eba2 060a 	sublt.w	r6, r2, sl
 800d292:	4652      	movge	r2, sl
 800d294:	bfb8      	it	lt
 800d296:	2200      	movlt	r2, #0
 800d298:	e727      	b.n	800d0ea <_dtoa_r+0x63a>
 800d29a:	9e05      	ldr	r6, [sp, #20]
 800d29c:	9d08      	ldr	r5, [sp, #32]
 800d29e:	461c      	mov	r4, r3
 800d2a0:	e730      	b.n	800d104 <_dtoa_r+0x654>
 800d2a2:	461a      	mov	r2, r3
 800d2a4:	e758      	b.n	800d158 <_dtoa_r+0x6a8>
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	e786      	b.n	800d1b8 <_dtoa_r+0x708>
 800d2aa:	9b02      	ldr	r3, [sp, #8]
 800d2ac:	e784      	b.n	800d1b8 <_dtoa_r+0x708>
 800d2ae:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d2b0:	e783      	b.n	800d1ba <_dtoa_r+0x70a>
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d2b6:	e784      	b.n	800d1c2 <_dtoa_r+0x712>
 800d2b8:	d09d      	beq.n	800d1f6 <_dtoa_r+0x746>
 800d2ba:	9b05      	ldr	r3, [sp, #20]
 800d2bc:	321c      	adds	r2, #28
 800d2be:	4413      	add	r3, r2
 800d2c0:	9305      	str	r3, [sp, #20]
 800d2c2:	9b06      	ldr	r3, [sp, #24]
 800d2c4:	4416      	add	r6, r2
 800d2c6:	4413      	add	r3, r2
 800d2c8:	e794      	b.n	800d1f4 <_dtoa_r+0x744>
 800d2ca:	4602      	mov	r2, r0
 800d2cc:	e7f5      	b.n	800d2ba <_dtoa_r+0x80a>
 800d2ce:	f1ba 0f00 	cmp.w	sl, #0
 800d2d2:	f8cd 8010 	str.w	r8, [sp, #16]
 800d2d6:	46d3      	mov	fp, sl
 800d2d8:	dc21      	bgt.n	800d31e <_dtoa_r+0x86e>
 800d2da:	9b07      	ldr	r3, [sp, #28]
 800d2dc:	2b02      	cmp	r3, #2
 800d2de:	dd1e      	ble.n	800d31e <_dtoa_r+0x86e>
 800d2e0:	f1bb 0f00 	cmp.w	fp, #0
 800d2e4:	f47f aeb7 	bne.w	800d056 <_dtoa_r+0x5a6>
 800d2e8:	4621      	mov	r1, r4
 800d2ea:	465b      	mov	r3, fp
 800d2ec:	2205      	movs	r2, #5
 800d2ee:	4648      	mov	r0, r9
 800d2f0:	f000 f9e0 	bl	800d6b4 <__multadd>
 800d2f4:	4601      	mov	r1, r0
 800d2f6:	4604      	mov	r4, r0
 800d2f8:	9801      	ldr	r0, [sp, #4]
 800d2fa:	f000 fbf3 	bl	800dae4 <__mcmp>
 800d2fe:	2800      	cmp	r0, #0
 800d300:	f77f aea9 	ble.w	800d056 <_dtoa_r+0x5a6>
 800d304:	463e      	mov	r6, r7
 800d306:	2331      	movs	r3, #49	@ 0x31
 800d308:	f806 3b01 	strb.w	r3, [r6], #1
 800d30c:	9b04      	ldr	r3, [sp, #16]
 800d30e:	3301      	adds	r3, #1
 800d310:	9304      	str	r3, [sp, #16]
 800d312:	e6a4      	b.n	800d05e <_dtoa_r+0x5ae>
 800d314:	f8cd 8010 	str.w	r8, [sp, #16]
 800d318:	4654      	mov	r4, sl
 800d31a:	4625      	mov	r5, r4
 800d31c:	e7f2      	b.n	800d304 <_dtoa_r+0x854>
 800d31e:	9b08      	ldr	r3, [sp, #32]
 800d320:	2b00      	cmp	r3, #0
 800d322:	f000 8103 	beq.w	800d52c <_dtoa_r+0xa7c>
 800d326:	2e00      	cmp	r6, #0
 800d328:	dd05      	ble.n	800d336 <_dtoa_r+0x886>
 800d32a:	4629      	mov	r1, r5
 800d32c:	4632      	mov	r2, r6
 800d32e:	4648      	mov	r0, r9
 800d330:	f000 fb6c 	bl	800da0c <__lshift>
 800d334:	4605      	mov	r5, r0
 800d336:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d058      	beq.n	800d3ee <_dtoa_r+0x93e>
 800d33c:	6869      	ldr	r1, [r5, #4]
 800d33e:	4648      	mov	r0, r9
 800d340:	f000 f956 	bl	800d5f0 <_Balloc>
 800d344:	4606      	mov	r6, r0
 800d346:	b928      	cbnz	r0, 800d354 <_dtoa_r+0x8a4>
 800d348:	4b82      	ldr	r3, [pc, #520]	@ (800d554 <_dtoa_r+0xaa4>)
 800d34a:	4602      	mov	r2, r0
 800d34c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d350:	f7ff bbc7 	b.w	800cae2 <_dtoa_r+0x32>
 800d354:	692a      	ldr	r2, [r5, #16]
 800d356:	3202      	adds	r2, #2
 800d358:	0092      	lsls	r2, r2, #2
 800d35a:	f105 010c 	add.w	r1, r5, #12
 800d35e:	300c      	adds	r0, #12
 800d360:	f7ff fb0f 	bl	800c982 <memcpy>
 800d364:	2201      	movs	r2, #1
 800d366:	4631      	mov	r1, r6
 800d368:	4648      	mov	r0, r9
 800d36a:	f000 fb4f 	bl	800da0c <__lshift>
 800d36e:	1c7b      	adds	r3, r7, #1
 800d370:	9305      	str	r3, [sp, #20]
 800d372:	eb07 030b 	add.w	r3, r7, fp
 800d376:	9309      	str	r3, [sp, #36]	@ 0x24
 800d378:	9b02      	ldr	r3, [sp, #8]
 800d37a:	f003 0301 	and.w	r3, r3, #1
 800d37e:	46a8      	mov	r8, r5
 800d380:	9308      	str	r3, [sp, #32]
 800d382:	4605      	mov	r5, r0
 800d384:	9b05      	ldr	r3, [sp, #20]
 800d386:	9801      	ldr	r0, [sp, #4]
 800d388:	4621      	mov	r1, r4
 800d38a:	f103 3bff 	add.w	fp, r3, #4294967295
 800d38e:	f7ff fb06 	bl	800c99e <quorem>
 800d392:	4641      	mov	r1, r8
 800d394:	9002      	str	r0, [sp, #8]
 800d396:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800d39a:	9801      	ldr	r0, [sp, #4]
 800d39c:	f000 fba2 	bl	800dae4 <__mcmp>
 800d3a0:	462a      	mov	r2, r5
 800d3a2:	9006      	str	r0, [sp, #24]
 800d3a4:	4621      	mov	r1, r4
 800d3a6:	4648      	mov	r0, r9
 800d3a8:	f000 fbb8 	bl	800db1c <__mdiff>
 800d3ac:	68c2      	ldr	r2, [r0, #12]
 800d3ae:	4606      	mov	r6, r0
 800d3b0:	b9fa      	cbnz	r2, 800d3f2 <_dtoa_r+0x942>
 800d3b2:	4601      	mov	r1, r0
 800d3b4:	9801      	ldr	r0, [sp, #4]
 800d3b6:	f000 fb95 	bl	800dae4 <__mcmp>
 800d3ba:	4602      	mov	r2, r0
 800d3bc:	4631      	mov	r1, r6
 800d3be:	4648      	mov	r0, r9
 800d3c0:	920a      	str	r2, [sp, #40]	@ 0x28
 800d3c2:	f000 f955 	bl	800d670 <_Bfree>
 800d3c6:	9b07      	ldr	r3, [sp, #28]
 800d3c8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d3ca:	9e05      	ldr	r6, [sp, #20]
 800d3cc:	ea43 0102 	orr.w	r1, r3, r2
 800d3d0:	9b08      	ldr	r3, [sp, #32]
 800d3d2:	4319      	orrs	r1, r3
 800d3d4:	d10f      	bne.n	800d3f6 <_dtoa_r+0x946>
 800d3d6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d3da:	d028      	beq.n	800d42e <_dtoa_r+0x97e>
 800d3dc:	9b06      	ldr	r3, [sp, #24]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	dd02      	ble.n	800d3e8 <_dtoa_r+0x938>
 800d3e2:	9b02      	ldr	r3, [sp, #8]
 800d3e4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800d3e8:	f88b a000 	strb.w	sl, [fp]
 800d3ec:	e639      	b.n	800d062 <_dtoa_r+0x5b2>
 800d3ee:	4628      	mov	r0, r5
 800d3f0:	e7bd      	b.n	800d36e <_dtoa_r+0x8be>
 800d3f2:	2201      	movs	r2, #1
 800d3f4:	e7e2      	b.n	800d3bc <_dtoa_r+0x90c>
 800d3f6:	9b06      	ldr	r3, [sp, #24]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	db04      	blt.n	800d406 <_dtoa_r+0x956>
 800d3fc:	9907      	ldr	r1, [sp, #28]
 800d3fe:	430b      	orrs	r3, r1
 800d400:	9908      	ldr	r1, [sp, #32]
 800d402:	430b      	orrs	r3, r1
 800d404:	d120      	bne.n	800d448 <_dtoa_r+0x998>
 800d406:	2a00      	cmp	r2, #0
 800d408:	ddee      	ble.n	800d3e8 <_dtoa_r+0x938>
 800d40a:	9901      	ldr	r1, [sp, #4]
 800d40c:	2201      	movs	r2, #1
 800d40e:	4648      	mov	r0, r9
 800d410:	f000 fafc 	bl	800da0c <__lshift>
 800d414:	4621      	mov	r1, r4
 800d416:	9001      	str	r0, [sp, #4]
 800d418:	f000 fb64 	bl	800dae4 <__mcmp>
 800d41c:	2800      	cmp	r0, #0
 800d41e:	dc03      	bgt.n	800d428 <_dtoa_r+0x978>
 800d420:	d1e2      	bne.n	800d3e8 <_dtoa_r+0x938>
 800d422:	f01a 0f01 	tst.w	sl, #1
 800d426:	d0df      	beq.n	800d3e8 <_dtoa_r+0x938>
 800d428:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d42c:	d1d9      	bne.n	800d3e2 <_dtoa_r+0x932>
 800d42e:	2339      	movs	r3, #57	@ 0x39
 800d430:	f88b 3000 	strb.w	r3, [fp]
 800d434:	4633      	mov	r3, r6
 800d436:	461e      	mov	r6, r3
 800d438:	3b01      	subs	r3, #1
 800d43a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d43e:	2a39      	cmp	r2, #57	@ 0x39
 800d440:	d053      	beq.n	800d4ea <_dtoa_r+0xa3a>
 800d442:	3201      	adds	r2, #1
 800d444:	701a      	strb	r2, [r3, #0]
 800d446:	e60c      	b.n	800d062 <_dtoa_r+0x5b2>
 800d448:	2a00      	cmp	r2, #0
 800d44a:	dd07      	ble.n	800d45c <_dtoa_r+0x9ac>
 800d44c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d450:	d0ed      	beq.n	800d42e <_dtoa_r+0x97e>
 800d452:	f10a 0301 	add.w	r3, sl, #1
 800d456:	f88b 3000 	strb.w	r3, [fp]
 800d45a:	e602      	b.n	800d062 <_dtoa_r+0x5b2>
 800d45c:	9b05      	ldr	r3, [sp, #20]
 800d45e:	9a05      	ldr	r2, [sp, #20]
 800d460:	f803 ac01 	strb.w	sl, [r3, #-1]
 800d464:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d466:	4293      	cmp	r3, r2
 800d468:	d029      	beq.n	800d4be <_dtoa_r+0xa0e>
 800d46a:	9901      	ldr	r1, [sp, #4]
 800d46c:	2300      	movs	r3, #0
 800d46e:	220a      	movs	r2, #10
 800d470:	4648      	mov	r0, r9
 800d472:	f000 f91f 	bl	800d6b4 <__multadd>
 800d476:	45a8      	cmp	r8, r5
 800d478:	9001      	str	r0, [sp, #4]
 800d47a:	f04f 0300 	mov.w	r3, #0
 800d47e:	f04f 020a 	mov.w	r2, #10
 800d482:	4641      	mov	r1, r8
 800d484:	4648      	mov	r0, r9
 800d486:	d107      	bne.n	800d498 <_dtoa_r+0x9e8>
 800d488:	f000 f914 	bl	800d6b4 <__multadd>
 800d48c:	4680      	mov	r8, r0
 800d48e:	4605      	mov	r5, r0
 800d490:	9b05      	ldr	r3, [sp, #20]
 800d492:	3301      	adds	r3, #1
 800d494:	9305      	str	r3, [sp, #20]
 800d496:	e775      	b.n	800d384 <_dtoa_r+0x8d4>
 800d498:	f000 f90c 	bl	800d6b4 <__multadd>
 800d49c:	4629      	mov	r1, r5
 800d49e:	4680      	mov	r8, r0
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	220a      	movs	r2, #10
 800d4a4:	4648      	mov	r0, r9
 800d4a6:	f000 f905 	bl	800d6b4 <__multadd>
 800d4aa:	4605      	mov	r5, r0
 800d4ac:	e7f0      	b.n	800d490 <_dtoa_r+0x9e0>
 800d4ae:	f1bb 0f00 	cmp.w	fp, #0
 800d4b2:	bfcc      	ite	gt
 800d4b4:	465e      	movgt	r6, fp
 800d4b6:	2601      	movle	r6, #1
 800d4b8:	443e      	add	r6, r7
 800d4ba:	f04f 0800 	mov.w	r8, #0
 800d4be:	9901      	ldr	r1, [sp, #4]
 800d4c0:	2201      	movs	r2, #1
 800d4c2:	4648      	mov	r0, r9
 800d4c4:	f000 faa2 	bl	800da0c <__lshift>
 800d4c8:	4621      	mov	r1, r4
 800d4ca:	9001      	str	r0, [sp, #4]
 800d4cc:	f000 fb0a 	bl	800dae4 <__mcmp>
 800d4d0:	2800      	cmp	r0, #0
 800d4d2:	dcaf      	bgt.n	800d434 <_dtoa_r+0x984>
 800d4d4:	d102      	bne.n	800d4dc <_dtoa_r+0xa2c>
 800d4d6:	f01a 0f01 	tst.w	sl, #1
 800d4da:	d1ab      	bne.n	800d434 <_dtoa_r+0x984>
 800d4dc:	4633      	mov	r3, r6
 800d4de:	461e      	mov	r6, r3
 800d4e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d4e4:	2a30      	cmp	r2, #48	@ 0x30
 800d4e6:	d0fa      	beq.n	800d4de <_dtoa_r+0xa2e>
 800d4e8:	e5bb      	b.n	800d062 <_dtoa_r+0x5b2>
 800d4ea:	429f      	cmp	r7, r3
 800d4ec:	d1a3      	bne.n	800d436 <_dtoa_r+0x986>
 800d4ee:	9b04      	ldr	r3, [sp, #16]
 800d4f0:	3301      	adds	r3, #1
 800d4f2:	9304      	str	r3, [sp, #16]
 800d4f4:	2331      	movs	r3, #49	@ 0x31
 800d4f6:	703b      	strb	r3, [r7, #0]
 800d4f8:	e5b3      	b.n	800d062 <_dtoa_r+0x5b2>
 800d4fa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d4fc:	4f16      	ldr	r7, [pc, #88]	@ (800d558 <_dtoa_r+0xaa8>)
 800d4fe:	b11b      	cbz	r3, 800d508 <_dtoa_r+0xa58>
 800d500:	f107 0308 	add.w	r3, r7, #8
 800d504:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800d506:	6013      	str	r3, [r2, #0]
 800d508:	4638      	mov	r0, r7
 800d50a:	b011      	add	sp, #68	@ 0x44
 800d50c:	ecbd 8b02 	vpop	{d8}
 800d510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d514:	9b07      	ldr	r3, [sp, #28]
 800d516:	2b01      	cmp	r3, #1
 800d518:	f77f ae36 	ble.w	800d188 <_dtoa_r+0x6d8>
 800d51c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d51e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d520:	2001      	movs	r0, #1
 800d522:	e656      	b.n	800d1d2 <_dtoa_r+0x722>
 800d524:	f1bb 0f00 	cmp.w	fp, #0
 800d528:	f77f aed7 	ble.w	800d2da <_dtoa_r+0x82a>
 800d52c:	463e      	mov	r6, r7
 800d52e:	9801      	ldr	r0, [sp, #4]
 800d530:	4621      	mov	r1, r4
 800d532:	f7ff fa34 	bl	800c99e <quorem>
 800d536:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800d53a:	f806 ab01 	strb.w	sl, [r6], #1
 800d53e:	1bf2      	subs	r2, r6, r7
 800d540:	4593      	cmp	fp, r2
 800d542:	ddb4      	ble.n	800d4ae <_dtoa_r+0x9fe>
 800d544:	9901      	ldr	r1, [sp, #4]
 800d546:	2300      	movs	r3, #0
 800d548:	220a      	movs	r2, #10
 800d54a:	4648      	mov	r0, r9
 800d54c:	f000 f8b2 	bl	800d6b4 <__multadd>
 800d550:	9001      	str	r0, [sp, #4]
 800d552:	e7ec      	b.n	800d52e <_dtoa_r+0xa7e>
 800d554:	0806d2b8 	.word	0x0806d2b8
 800d558:	0806d23c 	.word	0x0806d23c

0800d55c <_free_r>:
 800d55c:	b538      	push	{r3, r4, r5, lr}
 800d55e:	4605      	mov	r5, r0
 800d560:	2900      	cmp	r1, #0
 800d562:	d041      	beq.n	800d5e8 <_free_r+0x8c>
 800d564:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d568:	1f0c      	subs	r4, r1, #4
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	bfb8      	it	lt
 800d56e:	18e4      	addlt	r4, r4, r3
 800d570:	f7fe fbb0 	bl	800bcd4 <__malloc_lock>
 800d574:	4a1d      	ldr	r2, [pc, #116]	@ (800d5ec <_free_r+0x90>)
 800d576:	6813      	ldr	r3, [r2, #0]
 800d578:	b933      	cbnz	r3, 800d588 <_free_r+0x2c>
 800d57a:	6063      	str	r3, [r4, #4]
 800d57c:	6014      	str	r4, [r2, #0]
 800d57e:	4628      	mov	r0, r5
 800d580:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d584:	f7fe bbac 	b.w	800bce0 <__malloc_unlock>
 800d588:	42a3      	cmp	r3, r4
 800d58a:	d908      	bls.n	800d59e <_free_r+0x42>
 800d58c:	6820      	ldr	r0, [r4, #0]
 800d58e:	1821      	adds	r1, r4, r0
 800d590:	428b      	cmp	r3, r1
 800d592:	bf01      	itttt	eq
 800d594:	6819      	ldreq	r1, [r3, #0]
 800d596:	685b      	ldreq	r3, [r3, #4]
 800d598:	1809      	addeq	r1, r1, r0
 800d59a:	6021      	streq	r1, [r4, #0]
 800d59c:	e7ed      	b.n	800d57a <_free_r+0x1e>
 800d59e:	461a      	mov	r2, r3
 800d5a0:	685b      	ldr	r3, [r3, #4]
 800d5a2:	b10b      	cbz	r3, 800d5a8 <_free_r+0x4c>
 800d5a4:	42a3      	cmp	r3, r4
 800d5a6:	d9fa      	bls.n	800d59e <_free_r+0x42>
 800d5a8:	6811      	ldr	r1, [r2, #0]
 800d5aa:	1850      	adds	r0, r2, r1
 800d5ac:	42a0      	cmp	r0, r4
 800d5ae:	d10b      	bne.n	800d5c8 <_free_r+0x6c>
 800d5b0:	6820      	ldr	r0, [r4, #0]
 800d5b2:	4401      	add	r1, r0
 800d5b4:	1850      	adds	r0, r2, r1
 800d5b6:	4283      	cmp	r3, r0
 800d5b8:	6011      	str	r1, [r2, #0]
 800d5ba:	d1e0      	bne.n	800d57e <_free_r+0x22>
 800d5bc:	6818      	ldr	r0, [r3, #0]
 800d5be:	685b      	ldr	r3, [r3, #4]
 800d5c0:	6053      	str	r3, [r2, #4]
 800d5c2:	4408      	add	r0, r1
 800d5c4:	6010      	str	r0, [r2, #0]
 800d5c6:	e7da      	b.n	800d57e <_free_r+0x22>
 800d5c8:	d902      	bls.n	800d5d0 <_free_r+0x74>
 800d5ca:	230c      	movs	r3, #12
 800d5cc:	602b      	str	r3, [r5, #0]
 800d5ce:	e7d6      	b.n	800d57e <_free_r+0x22>
 800d5d0:	6820      	ldr	r0, [r4, #0]
 800d5d2:	1821      	adds	r1, r4, r0
 800d5d4:	428b      	cmp	r3, r1
 800d5d6:	bf04      	itt	eq
 800d5d8:	6819      	ldreq	r1, [r3, #0]
 800d5da:	685b      	ldreq	r3, [r3, #4]
 800d5dc:	6063      	str	r3, [r4, #4]
 800d5de:	bf04      	itt	eq
 800d5e0:	1809      	addeq	r1, r1, r0
 800d5e2:	6021      	streq	r1, [r4, #0]
 800d5e4:	6054      	str	r4, [r2, #4]
 800d5e6:	e7ca      	b.n	800d57e <_free_r+0x22>
 800d5e8:	bd38      	pop	{r3, r4, r5, pc}
 800d5ea:	bf00      	nop
 800d5ec:	240691a8 	.word	0x240691a8

0800d5f0 <_Balloc>:
 800d5f0:	b570      	push	{r4, r5, r6, lr}
 800d5f2:	69c6      	ldr	r6, [r0, #28]
 800d5f4:	4604      	mov	r4, r0
 800d5f6:	460d      	mov	r5, r1
 800d5f8:	b976      	cbnz	r6, 800d618 <_Balloc+0x28>
 800d5fa:	2010      	movs	r0, #16
 800d5fc:	f7fe fac0 	bl	800bb80 <malloc>
 800d600:	4602      	mov	r2, r0
 800d602:	61e0      	str	r0, [r4, #28]
 800d604:	b920      	cbnz	r0, 800d610 <_Balloc+0x20>
 800d606:	4b18      	ldr	r3, [pc, #96]	@ (800d668 <_Balloc+0x78>)
 800d608:	4818      	ldr	r0, [pc, #96]	@ (800d66c <_Balloc+0x7c>)
 800d60a:	216b      	movs	r1, #107	@ 0x6b
 800d60c:	f000 fd7e 	bl	800e10c <__assert_func>
 800d610:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d614:	6006      	str	r6, [r0, #0]
 800d616:	60c6      	str	r6, [r0, #12]
 800d618:	69e6      	ldr	r6, [r4, #28]
 800d61a:	68f3      	ldr	r3, [r6, #12]
 800d61c:	b183      	cbz	r3, 800d640 <_Balloc+0x50>
 800d61e:	69e3      	ldr	r3, [r4, #28]
 800d620:	68db      	ldr	r3, [r3, #12]
 800d622:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d626:	b9b8      	cbnz	r0, 800d658 <_Balloc+0x68>
 800d628:	2101      	movs	r1, #1
 800d62a:	fa01 f605 	lsl.w	r6, r1, r5
 800d62e:	1d72      	adds	r2, r6, #5
 800d630:	0092      	lsls	r2, r2, #2
 800d632:	4620      	mov	r0, r4
 800d634:	f000 fd88 	bl	800e148 <_calloc_r>
 800d638:	b160      	cbz	r0, 800d654 <_Balloc+0x64>
 800d63a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d63e:	e00e      	b.n	800d65e <_Balloc+0x6e>
 800d640:	2221      	movs	r2, #33	@ 0x21
 800d642:	2104      	movs	r1, #4
 800d644:	4620      	mov	r0, r4
 800d646:	f000 fd7f 	bl	800e148 <_calloc_r>
 800d64a:	69e3      	ldr	r3, [r4, #28]
 800d64c:	60f0      	str	r0, [r6, #12]
 800d64e:	68db      	ldr	r3, [r3, #12]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d1e4      	bne.n	800d61e <_Balloc+0x2e>
 800d654:	2000      	movs	r0, #0
 800d656:	bd70      	pop	{r4, r5, r6, pc}
 800d658:	6802      	ldr	r2, [r0, #0]
 800d65a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d65e:	2300      	movs	r3, #0
 800d660:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d664:	e7f7      	b.n	800d656 <_Balloc+0x66>
 800d666:	bf00      	nop
 800d668:	0806d249 	.word	0x0806d249
 800d66c:	0806d2c9 	.word	0x0806d2c9

0800d670 <_Bfree>:
 800d670:	b570      	push	{r4, r5, r6, lr}
 800d672:	69c6      	ldr	r6, [r0, #28]
 800d674:	4605      	mov	r5, r0
 800d676:	460c      	mov	r4, r1
 800d678:	b976      	cbnz	r6, 800d698 <_Bfree+0x28>
 800d67a:	2010      	movs	r0, #16
 800d67c:	f7fe fa80 	bl	800bb80 <malloc>
 800d680:	4602      	mov	r2, r0
 800d682:	61e8      	str	r0, [r5, #28]
 800d684:	b920      	cbnz	r0, 800d690 <_Bfree+0x20>
 800d686:	4b09      	ldr	r3, [pc, #36]	@ (800d6ac <_Bfree+0x3c>)
 800d688:	4809      	ldr	r0, [pc, #36]	@ (800d6b0 <_Bfree+0x40>)
 800d68a:	218f      	movs	r1, #143	@ 0x8f
 800d68c:	f000 fd3e 	bl	800e10c <__assert_func>
 800d690:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d694:	6006      	str	r6, [r0, #0]
 800d696:	60c6      	str	r6, [r0, #12]
 800d698:	b13c      	cbz	r4, 800d6aa <_Bfree+0x3a>
 800d69a:	69eb      	ldr	r3, [r5, #28]
 800d69c:	6862      	ldr	r2, [r4, #4]
 800d69e:	68db      	ldr	r3, [r3, #12]
 800d6a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d6a4:	6021      	str	r1, [r4, #0]
 800d6a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d6aa:	bd70      	pop	{r4, r5, r6, pc}
 800d6ac:	0806d249 	.word	0x0806d249
 800d6b0:	0806d2c9 	.word	0x0806d2c9

0800d6b4 <__multadd>:
 800d6b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6b8:	690d      	ldr	r5, [r1, #16]
 800d6ba:	4607      	mov	r7, r0
 800d6bc:	460c      	mov	r4, r1
 800d6be:	461e      	mov	r6, r3
 800d6c0:	f101 0c14 	add.w	ip, r1, #20
 800d6c4:	2000      	movs	r0, #0
 800d6c6:	f8dc 3000 	ldr.w	r3, [ip]
 800d6ca:	b299      	uxth	r1, r3
 800d6cc:	fb02 6101 	mla	r1, r2, r1, r6
 800d6d0:	0c1e      	lsrs	r6, r3, #16
 800d6d2:	0c0b      	lsrs	r3, r1, #16
 800d6d4:	fb02 3306 	mla	r3, r2, r6, r3
 800d6d8:	b289      	uxth	r1, r1
 800d6da:	3001      	adds	r0, #1
 800d6dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d6e0:	4285      	cmp	r5, r0
 800d6e2:	f84c 1b04 	str.w	r1, [ip], #4
 800d6e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d6ea:	dcec      	bgt.n	800d6c6 <__multadd+0x12>
 800d6ec:	b30e      	cbz	r6, 800d732 <__multadd+0x7e>
 800d6ee:	68a3      	ldr	r3, [r4, #8]
 800d6f0:	42ab      	cmp	r3, r5
 800d6f2:	dc19      	bgt.n	800d728 <__multadd+0x74>
 800d6f4:	6861      	ldr	r1, [r4, #4]
 800d6f6:	4638      	mov	r0, r7
 800d6f8:	3101      	adds	r1, #1
 800d6fa:	f7ff ff79 	bl	800d5f0 <_Balloc>
 800d6fe:	4680      	mov	r8, r0
 800d700:	b928      	cbnz	r0, 800d70e <__multadd+0x5a>
 800d702:	4602      	mov	r2, r0
 800d704:	4b0c      	ldr	r3, [pc, #48]	@ (800d738 <__multadd+0x84>)
 800d706:	480d      	ldr	r0, [pc, #52]	@ (800d73c <__multadd+0x88>)
 800d708:	21ba      	movs	r1, #186	@ 0xba
 800d70a:	f000 fcff 	bl	800e10c <__assert_func>
 800d70e:	6922      	ldr	r2, [r4, #16]
 800d710:	3202      	adds	r2, #2
 800d712:	f104 010c 	add.w	r1, r4, #12
 800d716:	0092      	lsls	r2, r2, #2
 800d718:	300c      	adds	r0, #12
 800d71a:	f7ff f932 	bl	800c982 <memcpy>
 800d71e:	4621      	mov	r1, r4
 800d720:	4638      	mov	r0, r7
 800d722:	f7ff ffa5 	bl	800d670 <_Bfree>
 800d726:	4644      	mov	r4, r8
 800d728:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d72c:	3501      	adds	r5, #1
 800d72e:	615e      	str	r6, [r3, #20]
 800d730:	6125      	str	r5, [r4, #16]
 800d732:	4620      	mov	r0, r4
 800d734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d738:	0806d2b8 	.word	0x0806d2b8
 800d73c:	0806d2c9 	.word	0x0806d2c9

0800d740 <__hi0bits>:
 800d740:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d744:	4603      	mov	r3, r0
 800d746:	bf36      	itet	cc
 800d748:	0403      	lslcc	r3, r0, #16
 800d74a:	2000      	movcs	r0, #0
 800d74c:	2010      	movcc	r0, #16
 800d74e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d752:	bf3c      	itt	cc
 800d754:	021b      	lslcc	r3, r3, #8
 800d756:	3008      	addcc	r0, #8
 800d758:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d75c:	bf3c      	itt	cc
 800d75e:	011b      	lslcc	r3, r3, #4
 800d760:	3004      	addcc	r0, #4
 800d762:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d766:	bf3c      	itt	cc
 800d768:	009b      	lslcc	r3, r3, #2
 800d76a:	3002      	addcc	r0, #2
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	db05      	blt.n	800d77c <__hi0bits+0x3c>
 800d770:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d774:	f100 0001 	add.w	r0, r0, #1
 800d778:	bf08      	it	eq
 800d77a:	2020      	moveq	r0, #32
 800d77c:	4770      	bx	lr

0800d77e <__lo0bits>:
 800d77e:	6803      	ldr	r3, [r0, #0]
 800d780:	4602      	mov	r2, r0
 800d782:	f013 0007 	ands.w	r0, r3, #7
 800d786:	d00b      	beq.n	800d7a0 <__lo0bits+0x22>
 800d788:	07d9      	lsls	r1, r3, #31
 800d78a:	d421      	bmi.n	800d7d0 <__lo0bits+0x52>
 800d78c:	0798      	lsls	r0, r3, #30
 800d78e:	bf49      	itett	mi
 800d790:	085b      	lsrmi	r3, r3, #1
 800d792:	089b      	lsrpl	r3, r3, #2
 800d794:	2001      	movmi	r0, #1
 800d796:	6013      	strmi	r3, [r2, #0]
 800d798:	bf5c      	itt	pl
 800d79a:	6013      	strpl	r3, [r2, #0]
 800d79c:	2002      	movpl	r0, #2
 800d79e:	4770      	bx	lr
 800d7a0:	b299      	uxth	r1, r3
 800d7a2:	b909      	cbnz	r1, 800d7a8 <__lo0bits+0x2a>
 800d7a4:	0c1b      	lsrs	r3, r3, #16
 800d7a6:	2010      	movs	r0, #16
 800d7a8:	b2d9      	uxtb	r1, r3
 800d7aa:	b909      	cbnz	r1, 800d7b0 <__lo0bits+0x32>
 800d7ac:	3008      	adds	r0, #8
 800d7ae:	0a1b      	lsrs	r3, r3, #8
 800d7b0:	0719      	lsls	r1, r3, #28
 800d7b2:	bf04      	itt	eq
 800d7b4:	091b      	lsreq	r3, r3, #4
 800d7b6:	3004      	addeq	r0, #4
 800d7b8:	0799      	lsls	r1, r3, #30
 800d7ba:	bf04      	itt	eq
 800d7bc:	089b      	lsreq	r3, r3, #2
 800d7be:	3002      	addeq	r0, #2
 800d7c0:	07d9      	lsls	r1, r3, #31
 800d7c2:	d403      	bmi.n	800d7cc <__lo0bits+0x4e>
 800d7c4:	085b      	lsrs	r3, r3, #1
 800d7c6:	f100 0001 	add.w	r0, r0, #1
 800d7ca:	d003      	beq.n	800d7d4 <__lo0bits+0x56>
 800d7cc:	6013      	str	r3, [r2, #0]
 800d7ce:	4770      	bx	lr
 800d7d0:	2000      	movs	r0, #0
 800d7d2:	4770      	bx	lr
 800d7d4:	2020      	movs	r0, #32
 800d7d6:	4770      	bx	lr

0800d7d8 <__i2b>:
 800d7d8:	b510      	push	{r4, lr}
 800d7da:	460c      	mov	r4, r1
 800d7dc:	2101      	movs	r1, #1
 800d7de:	f7ff ff07 	bl	800d5f0 <_Balloc>
 800d7e2:	4602      	mov	r2, r0
 800d7e4:	b928      	cbnz	r0, 800d7f2 <__i2b+0x1a>
 800d7e6:	4b05      	ldr	r3, [pc, #20]	@ (800d7fc <__i2b+0x24>)
 800d7e8:	4805      	ldr	r0, [pc, #20]	@ (800d800 <__i2b+0x28>)
 800d7ea:	f240 1145 	movw	r1, #325	@ 0x145
 800d7ee:	f000 fc8d 	bl	800e10c <__assert_func>
 800d7f2:	2301      	movs	r3, #1
 800d7f4:	6144      	str	r4, [r0, #20]
 800d7f6:	6103      	str	r3, [r0, #16]
 800d7f8:	bd10      	pop	{r4, pc}
 800d7fa:	bf00      	nop
 800d7fc:	0806d2b8 	.word	0x0806d2b8
 800d800:	0806d2c9 	.word	0x0806d2c9

0800d804 <__multiply>:
 800d804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d808:	4614      	mov	r4, r2
 800d80a:	690a      	ldr	r2, [r1, #16]
 800d80c:	6923      	ldr	r3, [r4, #16]
 800d80e:	429a      	cmp	r2, r3
 800d810:	bfa8      	it	ge
 800d812:	4623      	movge	r3, r4
 800d814:	460f      	mov	r7, r1
 800d816:	bfa4      	itt	ge
 800d818:	460c      	movge	r4, r1
 800d81a:	461f      	movge	r7, r3
 800d81c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d820:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d824:	68a3      	ldr	r3, [r4, #8]
 800d826:	6861      	ldr	r1, [r4, #4]
 800d828:	eb0a 0609 	add.w	r6, sl, r9
 800d82c:	42b3      	cmp	r3, r6
 800d82e:	b085      	sub	sp, #20
 800d830:	bfb8      	it	lt
 800d832:	3101      	addlt	r1, #1
 800d834:	f7ff fedc 	bl	800d5f0 <_Balloc>
 800d838:	b930      	cbnz	r0, 800d848 <__multiply+0x44>
 800d83a:	4602      	mov	r2, r0
 800d83c:	4b44      	ldr	r3, [pc, #272]	@ (800d950 <__multiply+0x14c>)
 800d83e:	4845      	ldr	r0, [pc, #276]	@ (800d954 <__multiply+0x150>)
 800d840:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d844:	f000 fc62 	bl	800e10c <__assert_func>
 800d848:	f100 0514 	add.w	r5, r0, #20
 800d84c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d850:	462b      	mov	r3, r5
 800d852:	2200      	movs	r2, #0
 800d854:	4543      	cmp	r3, r8
 800d856:	d321      	bcc.n	800d89c <__multiply+0x98>
 800d858:	f107 0114 	add.w	r1, r7, #20
 800d85c:	f104 0214 	add.w	r2, r4, #20
 800d860:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d864:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d868:	9302      	str	r3, [sp, #8]
 800d86a:	1b13      	subs	r3, r2, r4
 800d86c:	3b15      	subs	r3, #21
 800d86e:	f023 0303 	bic.w	r3, r3, #3
 800d872:	3304      	adds	r3, #4
 800d874:	f104 0715 	add.w	r7, r4, #21
 800d878:	42ba      	cmp	r2, r7
 800d87a:	bf38      	it	cc
 800d87c:	2304      	movcc	r3, #4
 800d87e:	9301      	str	r3, [sp, #4]
 800d880:	9b02      	ldr	r3, [sp, #8]
 800d882:	9103      	str	r1, [sp, #12]
 800d884:	428b      	cmp	r3, r1
 800d886:	d80c      	bhi.n	800d8a2 <__multiply+0x9e>
 800d888:	2e00      	cmp	r6, #0
 800d88a:	dd03      	ble.n	800d894 <__multiply+0x90>
 800d88c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d890:	2b00      	cmp	r3, #0
 800d892:	d05b      	beq.n	800d94c <__multiply+0x148>
 800d894:	6106      	str	r6, [r0, #16]
 800d896:	b005      	add	sp, #20
 800d898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d89c:	f843 2b04 	str.w	r2, [r3], #4
 800d8a0:	e7d8      	b.n	800d854 <__multiply+0x50>
 800d8a2:	f8b1 a000 	ldrh.w	sl, [r1]
 800d8a6:	f1ba 0f00 	cmp.w	sl, #0
 800d8aa:	d024      	beq.n	800d8f6 <__multiply+0xf2>
 800d8ac:	f104 0e14 	add.w	lr, r4, #20
 800d8b0:	46a9      	mov	r9, r5
 800d8b2:	f04f 0c00 	mov.w	ip, #0
 800d8b6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d8ba:	f8d9 3000 	ldr.w	r3, [r9]
 800d8be:	fa1f fb87 	uxth.w	fp, r7
 800d8c2:	b29b      	uxth	r3, r3
 800d8c4:	fb0a 330b 	mla	r3, sl, fp, r3
 800d8c8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d8cc:	f8d9 7000 	ldr.w	r7, [r9]
 800d8d0:	4463      	add	r3, ip
 800d8d2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d8d6:	fb0a c70b 	mla	r7, sl, fp, ip
 800d8da:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d8de:	b29b      	uxth	r3, r3
 800d8e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d8e4:	4572      	cmp	r2, lr
 800d8e6:	f849 3b04 	str.w	r3, [r9], #4
 800d8ea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d8ee:	d8e2      	bhi.n	800d8b6 <__multiply+0xb2>
 800d8f0:	9b01      	ldr	r3, [sp, #4]
 800d8f2:	f845 c003 	str.w	ip, [r5, r3]
 800d8f6:	9b03      	ldr	r3, [sp, #12]
 800d8f8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d8fc:	3104      	adds	r1, #4
 800d8fe:	f1b9 0f00 	cmp.w	r9, #0
 800d902:	d021      	beq.n	800d948 <__multiply+0x144>
 800d904:	682b      	ldr	r3, [r5, #0]
 800d906:	f104 0c14 	add.w	ip, r4, #20
 800d90a:	46ae      	mov	lr, r5
 800d90c:	f04f 0a00 	mov.w	sl, #0
 800d910:	f8bc b000 	ldrh.w	fp, [ip]
 800d914:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d918:	fb09 770b 	mla	r7, r9, fp, r7
 800d91c:	4457      	add	r7, sl
 800d91e:	b29b      	uxth	r3, r3
 800d920:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d924:	f84e 3b04 	str.w	r3, [lr], #4
 800d928:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d92c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d930:	f8be 3000 	ldrh.w	r3, [lr]
 800d934:	fb09 330a 	mla	r3, r9, sl, r3
 800d938:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d93c:	4562      	cmp	r2, ip
 800d93e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d942:	d8e5      	bhi.n	800d910 <__multiply+0x10c>
 800d944:	9f01      	ldr	r7, [sp, #4]
 800d946:	51eb      	str	r3, [r5, r7]
 800d948:	3504      	adds	r5, #4
 800d94a:	e799      	b.n	800d880 <__multiply+0x7c>
 800d94c:	3e01      	subs	r6, #1
 800d94e:	e79b      	b.n	800d888 <__multiply+0x84>
 800d950:	0806d2b8 	.word	0x0806d2b8
 800d954:	0806d2c9 	.word	0x0806d2c9

0800d958 <__pow5mult>:
 800d958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d95c:	4615      	mov	r5, r2
 800d95e:	f012 0203 	ands.w	r2, r2, #3
 800d962:	4607      	mov	r7, r0
 800d964:	460e      	mov	r6, r1
 800d966:	d007      	beq.n	800d978 <__pow5mult+0x20>
 800d968:	4c25      	ldr	r4, [pc, #148]	@ (800da00 <__pow5mult+0xa8>)
 800d96a:	3a01      	subs	r2, #1
 800d96c:	2300      	movs	r3, #0
 800d96e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d972:	f7ff fe9f 	bl	800d6b4 <__multadd>
 800d976:	4606      	mov	r6, r0
 800d978:	10ad      	asrs	r5, r5, #2
 800d97a:	d03d      	beq.n	800d9f8 <__pow5mult+0xa0>
 800d97c:	69fc      	ldr	r4, [r7, #28]
 800d97e:	b97c      	cbnz	r4, 800d9a0 <__pow5mult+0x48>
 800d980:	2010      	movs	r0, #16
 800d982:	f7fe f8fd 	bl	800bb80 <malloc>
 800d986:	4602      	mov	r2, r0
 800d988:	61f8      	str	r0, [r7, #28]
 800d98a:	b928      	cbnz	r0, 800d998 <__pow5mult+0x40>
 800d98c:	4b1d      	ldr	r3, [pc, #116]	@ (800da04 <__pow5mult+0xac>)
 800d98e:	481e      	ldr	r0, [pc, #120]	@ (800da08 <__pow5mult+0xb0>)
 800d990:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d994:	f000 fbba 	bl	800e10c <__assert_func>
 800d998:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d99c:	6004      	str	r4, [r0, #0]
 800d99e:	60c4      	str	r4, [r0, #12]
 800d9a0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d9a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d9a8:	b94c      	cbnz	r4, 800d9be <__pow5mult+0x66>
 800d9aa:	f240 2171 	movw	r1, #625	@ 0x271
 800d9ae:	4638      	mov	r0, r7
 800d9b0:	f7ff ff12 	bl	800d7d8 <__i2b>
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	f8c8 0008 	str.w	r0, [r8, #8]
 800d9ba:	4604      	mov	r4, r0
 800d9bc:	6003      	str	r3, [r0, #0]
 800d9be:	f04f 0900 	mov.w	r9, #0
 800d9c2:	07eb      	lsls	r3, r5, #31
 800d9c4:	d50a      	bpl.n	800d9dc <__pow5mult+0x84>
 800d9c6:	4631      	mov	r1, r6
 800d9c8:	4622      	mov	r2, r4
 800d9ca:	4638      	mov	r0, r7
 800d9cc:	f7ff ff1a 	bl	800d804 <__multiply>
 800d9d0:	4631      	mov	r1, r6
 800d9d2:	4680      	mov	r8, r0
 800d9d4:	4638      	mov	r0, r7
 800d9d6:	f7ff fe4b 	bl	800d670 <_Bfree>
 800d9da:	4646      	mov	r6, r8
 800d9dc:	106d      	asrs	r5, r5, #1
 800d9de:	d00b      	beq.n	800d9f8 <__pow5mult+0xa0>
 800d9e0:	6820      	ldr	r0, [r4, #0]
 800d9e2:	b938      	cbnz	r0, 800d9f4 <__pow5mult+0x9c>
 800d9e4:	4622      	mov	r2, r4
 800d9e6:	4621      	mov	r1, r4
 800d9e8:	4638      	mov	r0, r7
 800d9ea:	f7ff ff0b 	bl	800d804 <__multiply>
 800d9ee:	6020      	str	r0, [r4, #0]
 800d9f0:	f8c0 9000 	str.w	r9, [r0]
 800d9f4:	4604      	mov	r4, r0
 800d9f6:	e7e4      	b.n	800d9c2 <__pow5mult+0x6a>
 800d9f8:	4630      	mov	r0, r6
 800d9fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9fe:	bf00      	nop
 800da00:	0806d324 	.word	0x0806d324
 800da04:	0806d249 	.word	0x0806d249
 800da08:	0806d2c9 	.word	0x0806d2c9

0800da0c <__lshift>:
 800da0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da10:	460c      	mov	r4, r1
 800da12:	6849      	ldr	r1, [r1, #4]
 800da14:	6923      	ldr	r3, [r4, #16]
 800da16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800da1a:	68a3      	ldr	r3, [r4, #8]
 800da1c:	4607      	mov	r7, r0
 800da1e:	4691      	mov	r9, r2
 800da20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800da24:	f108 0601 	add.w	r6, r8, #1
 800da28:	42b3      	cmp	r3, r6
 800da2a:	db0b      	blt.n	800da44 <__lshift+0x38>
 800da2c:	4638      	mov	r0, r7
 800da2e:	f7ff fddf 	bl	800d5f0 <_Balloc>
 800da32:	4605      	mov	r5, r0
 800da34:	b948      	cbnz	r0, 800da4a <__lshift+0x3e>
 800da36:	4602      	mov	r2, r0
 800da38:	4b28      	ldr	r3, [pc, #160]	@ (800dadc <__lshift+0xd0>)
 800da3a:	4829      	ldr	r0, [pc, #164]	@ (800dae0 <__lshift+0xd4>)
 800da3c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800da40:	f000 fb64 	bl	800e10c <__assert_func>
 800da44:	3101      	adds	r1, #1
 800da46:	005b      	lsls	r3, r3, #1
 800da48:	e7ee      	b.n	800da28 <__lshift+0x1c>
 800da4a:	2300      	movs	r3, #0
 800da4c:	f100 0114 	add.w	r1, r0, #20
 800da50:	f100 0210 	add.w	r2, r0, #16
 800da54:	4618      	mov	r0, r3
 800da56:	4553      	cmp	r3, sl
 800da58:	db33      	blt.n	800dac2 <__lshift+0xb6>
 800da5a:	6920      	ldr	r0, [r4, #16]
 800da5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800da60:	f104 0314 	add.w	r3, r4, #20
 800da64:	f019 091f 	ands.w	r9, r9, #31
 800da68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800da6c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800da70:	d02b      	beq.n	800daca <__lshift+0xbe>
 800da72:	f1c9 0e20 	rsb	lr, r9, #32
 800da76:	468a      	mov	sl, r1
 800da78:	2200      	movs	r2, #0
 800da7a:	6818      	ldr	r0, [r3, #0]
 800da7c:	fa00 f009 	lsl.w	r0, r0, r9
 800da80:	4310      	orrs	r0, r2
 800da82:	f84a 0b04 	str.w	r0, [sl], #4
 800da86:	f853 2b04 	ldr.w	r2, [r3], #4
 800da8a:	459c      	cmp	ip, r3
 800da8c:	fa22 f20e 	lsr.w	r2, r2, lr
 800da90:	d8f3      	bhi.n	800da7a <__lshift+0x6e>
 800da92:	ebac 0304 	sub.w	r3, ip, r4
 800da96:	3b15      	subs	r3, #21
 800da98:	f023 0303 	bic.w	r3, r3, #3
 800da9c:	3304      	adds	r3, #4
 800da9e:	f104 0015 	add.w	r0, r4, #21
 800daa2:	4584      	cmp	ip, r0
 800daa4:	bf38      	it	cc
 800daa6:	2304      	movcc	r3, #4
 800daa8:	50ca      	str	r2, [r1, r3]
 800daaa:	b10a      	cbz	r2, 800dab0 <__lshift+0xa4>
 800daac:	f108 0602 	add.w	r6, r8, #2
 800dab0:	3e01      	subs	r6, #1
 800dab2:	4638      	mov	r0, r7
 800dab4:	612e      	str	r6, [r5, #16]
 800dab6:	4621      	mov	r1, r4
 800dab8:	f7ff fdda 	bl	800d670 <_Bfree>
 800dabc:	4628      	mov	r0, r5
 800dabe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dac2:	f842 0f04 	str.w	r0, [r2, #4]!
 800dac6:	3301      	adds	r3, #1
 800dac8:	e7c5      	b.n	800da56 <__lshift+0x4a>
 800daca:	3904      	subs	r1, #4
 800dacc:	f853 2b04 	ldr.w	r2, [r3], #4
 800dad0:	f841 2f04 	str.w	r2, [r1, #4]!
 800dad4:	459c      	cmp	ip, r3
 800dad6:	d8f9      	bhi.n	800dacc <__lshift+0xc0>
 800dad8:	e7ea      	b.n	800dab0 <__lshift+0xa4>
 800dada:	bf00      	nop
 800dadc:	0806d2b8 	.word	0x0806d2b8
 800dae0:	0806d2c9 	.word	0x0806d2c9

0800dae4 <__mcmp>:
 800dae4:	690a      	ldr	r2, [r1, #16]
 800dae6:	4603      	mov	r3, r0
 800dae8:	6900      	ldr	r0, [r0, #16]
 800daea:	1a80      	subs	r0, r0, r2
 800daec:	b530      	push	{r4, r5, lr}
 800daee:	d10e      	bne.n	800db0e <__mcmp+0x2a>
 800daf0:	3314      	adds	r3, #20
 800daf2:	3114      	adds	r1, #20
 800daf4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800daf8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800dafc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800db00:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800db04:	4295      	cmp	r5, r2
 800db06:	d003      	beq.n	800db10 <__mcmp+0x2c>
 800db08:	d205      	bcs.n	800db16 <__mcmp+0x32>
 800db0a:	f04f 30ff 	mov.w	r0, #4294967295
 800db0e:	bd30      	pop	{r4, r5, pc}
 800db10:	42a3      	cmp	r3, r4
 800db12:	d3f3      	bcc.n	800dafc <__mcmp+0x18>
 800db14:	e7fb      	b.n	800db0e <__mcmp+0x2a>
 800db16:	2001      	movs	r0, #1
 800db18:	e7f9      	b.n	800db0e <__mcmp+0x2a>
	...

0800db1c <__mdiff>:
 800db1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db20:	4689      	mov	r9, r1
 800db22:	4606      	mov	r6, r0
 800db24:	4611      	mov	r1, r2
 800db26:	4648      	mov	r0, r9
 800db28:	4614      	mov	r4, r2
 800db2a:	f7ff ffdb 	bl	800dae4 <__mcmp>
 800db2e:	1e05      	subs	r5, r0, #0
 800db30:	d112      	bne.n	800db58 <__mdiff+0x3c>
 800db32:	4629      	mov	r1, r5
 800db34:	4630      	mov	r0, r6
 800db36:	f7ff fd5b 	bl	800d5f0 <_Balloc>
 800db3a:	4602      	mov	r2, r0
 800db3c:	b928      	cbnz	r0, 800db4a <__mdiff+0x2e>
 800db3e:	4b3f      	ldr	r3, [pc, #252]	@ (800dc3c <__mdiff+0x120>)
 800db40:	f240 2137 	movw	r1, #567	@ 0x237
 800db44:	483e      	ldr	r0, [pc, #248]	@ (800dc40 <__mdiff+0x124>)
 800db46:	f000 fae1 	bl	800e10c <__assert_func>
 800db4a:	2301      	movs	r3, #1
 800db4c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800db50:	4610      	mov	r0, r2
 800db52:	b003      	add	sp, #12
 800db54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db58:	bfbc      	itt	lt
 800db5a:	464b      	movlt	r3, r9
 800db5c:	46a1      	movlt	r9, r4
 800db5e:	4630      	mov	r0, r6
 800db60:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800db64:	bfba      	itte	lt
 800db66:	461c      	movlt	r4, r3
 800db68:	2501      	movlt	r5, #1
 800db6a:	2500      	movge	r5, #0
 800db6c:	f7ff fd40 	bl	800d5f0 <_Balloc>
 800db70:	4602      	mov	r2, r0
 800db72:	b918      	cbnz	r0, 800db7c <__mdiff+0x60>
 800db74:	4b31      	ldr	r3, [pc, #196]	@ (800dc3c <__mdiff+0x120>)
 800db76:	f240 2145 	movw	r1, #581	@ 0x245
 800db7a:	e7e3      	b.n	800db44 <__mdiff+0x28>
 800db7c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800db80:	6926      	ldr	r6, [r4, #16]
 800db82:	60c5      	str	r5, [r0, #12]
 800db84:	f109 0310 	add.w	r3, r9, #16
 800db88:	f109 0514 	add.w	r5, r9, #20
 800db8c:	f104 0e14 	add.w	lr, r4, #20
 800db90:	f100 0b14 	add.w	fp, r0, #20
 800db94:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800db98:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800db9c:	9301      	str	r3, [sp, #4]
 800db9e:	46d9      	mov	r9, fp
 800dba0:	f04f 0c00 	mov.w	ip, #0
 800dba4:	9b01      	ldr	r3, [sp, #4]
 800dba6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800dbaa:	f853 af04 	ldr.w	sl, [r3, #4]!
 800dbae:	9301      	str	r3, [sp, #4]
 800dbb0:	fa1f f38a 	uxth.w	r3, sl
 800dbb4:	4619      	mov	r1, r3
 800dbb6:	b283      	uxth	r3, r0
 800dbb8:	1acb      	subs	r3, r1, r3
 800dbba:	0c00      	lsrs	r0, r0, #16
 800dbbc:	4463      	add	r3, ip
 800dbbe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800dbc2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800dbc6:	b29b      	uxth	r3, r3
 800dbc8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800dbcc:	4576      	cmp	r6, lr
 800dbce:	f849 3b04 	str.w	r3, [r9], #4
 800dbd2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dbd6:	d8e5      	bhi.n	800dba4 <__mdiff+0x88>
 800dbd8:	1b33      	subs	r3, r6, r4
 800dbda:	3b15      	subs	r3, #21
 800dbdc:	f023 0303 	bic.w	r3, r3, #3
 800dbe0:	3415      	adds	r4, #21
 800dbe2:	3304      	adds	r3, #4
 800dbe4:	42a6      	cmp	r6, r4
 800dbe6:	bf38      	it	cc
 800dbe8:	2304      	movcc	r3, #4
 800dbea:	441d      	add	r5, r3
 800dbec:	445b      	add	r3, fp
 800dbee:	461e      	mov	r6, r3
 800dbf0:	462c      	mov	r4, r5
 800dbf2:	4544      	cmp	r4, r8
 800dbf4:	d30e      	bcc.n	800dc14 <__mdiff+0xf8>
 800dbf6:	f108 0103 	add.w	r1, r8, #3
 800dbfa:	1b49      	subs	r1, r1, r5
 800dbfc:	f021 0103 	bic.w	r1, r1, #3
 800dc00:	3d03      	subs	r5, #3
 800dc02:	45a8      	cmp	r8, r5
 800dc04:	bf38      	it	cc
 800dc06:	2100      	movcc	r1, #0
 800dc08:	440b      	add	r3, r1
 800dc0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dc0e:	b191      	cbz	r1, 800dc36 <__mdiff+0x11a>
 800dc10:	6117      	str	r7, [r2, #16]
 800dc12:	e79d      	b.n	800db50 <__mdiff+0x34>
 800dc14:	f854 1b04 	ldr.w	r1, [r4], #4
 800dc18:	46e6      	mov	lr, ip
 800dc1a:	0c08      	lsrs	r0, r1, #16
 800dc1c:	fa1c fc81 	uxtah	ip, ip, r1
 800dc20:	4471      	add	r1, lr
 800dc22:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800dc26:	b289      	uxth	r1, r1
 800dc28:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800dc2c:	f846 1b04 	str.w	r1, [r6], #4
 800dc30:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dc34:	e7dd      	b.n	800dbf2 <__mdiff+0xd6>
 800dc36:	3f01      	subs	r7, #1
 800dc38:	e7e7      	b.n	800dc0a <__mdiff+0xee>
 800dc3a:	bf00      	nop
 800dc3c:	0806d2b8 	.word	0x0806d2b8
 800dc40:	0806d2c9 	.word	0x0806d2c9

0800dc44 <__d2b>:
 800dc44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dc48:	460f      	mov	r7, r1
 800dc4a:	2101      	movs	r1, #1
 800dc4c:	ec59 8b10 	vmov	r8, r9, d0
 800dc50:	4616      	mov	r6, r2
 800dc52:	f7ff fccd 	bl	800d5f0 <_Balloc>
 800dc56:	4604      	mov	r4, r0
 800dc58:	b930      	cbnz	r0, 800dc68 <__d2b+0x24>
 800dc5a:	4602      	mov	r2, r0
 800dc5c:	4b23      	ldr	r3, [pc, #140]	@ (800dcec <__d2b+0xa8>)
 800dc5e:	4824      	ldr	r0, [pc, #144]	@ (800dcf0 <__d2b+0xac>)
 800dc60:	f240 310f 	movw	r1, #783	@ 0x30f
 800dc64:	f000 fa52 	bl	800e10c <__assert_func>
 800dc68:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dc6c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dc70:	b10d      	cbz	r5, 800dc76 <__d2b+0x32>
 800dc72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dc76:	9301      	str	r3, [sp, #4]
 800dc78:	f1b8 0300 	subs.w	r3, r8, #0
 800dc7c:	d023      	beq.n	800dcc6 <__d2b+0x82>
 800dc7e:	4668      	mov	r0, sp
 800dc80:	9300      	str	r3, [sp, #0]
 800dc82:	f7ff fd7c 	bl	800d77e <__lo0bits>
 800dc86:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dc8a:	b1d0      	cbz	r0, 800dcc2 <__d2b+0x7e>
 800dc8c:	f1c0 0320 	rsb	r3, r0, #32
 800dc90:	fa02 f303 	lsl.w	r3, r2, r3
 800dc94:	430b      	orrs	r3, r1
 800dc96:	40c2      	lsrs	r2, r0
 800dc98:	6163      	str	r3, [r4, #20]
 800dc9a:	9201      	str	r2, [sp, #4]
 800dc9c:	9b01      	ldr	r3, [sp, #4]
 800dc9e:	61a3      	str	r3, [r4, #24]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	bf0c      	ite	eq
 800dca4:	2201      	moveq	r2, #1
 800dca6:	2202      	movne	r2, #2
 800dca8:	6122      	str	r2, [r4, #16]
 800dcaa:	b1a5      	cbz	r5, 800dcd6 <__d2b+0x92>
 800dcac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800dcb0:	4405      	add	r5, r0
 800dcb2:	603d      	str	r5, [r7, #0]
 800dcb4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800dcb8:	6030      	str	r0, [r6, #0]
 800dcba:	4620      	mov	r0, r4
 800dcbc:	b003      	add	sp, #12
 800dcbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dcc2:	6161      	str	r1, [r4, #20]
 800dcc4:	e7ea      	b.n	800dc9c <__d2b+0x58>
 800dcc6:	a801      	add	r0, sp, #4
 800dcc8:	f7ff fd59 	bl	800d77e <__lo0bits>
 800dccc:	9b01      	ldr	r3, [sp, #4]
 800dcce:	6163      	str	r3, [r4, #20]
 800dcd0:	3020      	adds	r0, #32
 800dcd2:	2201      	movs	r2, #1
 800dcd4:	e7e8      	b.n	800dca8 <__d2b+0x64>
 800dcd6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dcda:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800dcde:	6038      	str	r0, [r7, #0]
 800dce0:	6918      	ldr	r0, [r3, #16]
 800dce2:	f7ff fd2d 	bl	800d740 <__hi0bits>
 800dce6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dcea:	e7e5      	b.n	800dcb8 <__d2b+0x74>
 800dcec:	0806d2b8 	.word	0x0806d2b8
 800dcf0:	0806d2c9 	.word	0x0806d2c9

0800dcf4 <_malloc_usable_size_r>:
 800dcf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dcf8:	1f18      	subs	r0, r3, #4
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	bfbc      	itt	lt
 800dcfe:	580b      	ldrlt	r3, [r1, r0]
 800dd00:	18c0      	addlt	r0, r0, r3
 800dd02:	4770      	bx	lr

0800dd04 <__ssputs_r>:
 800dd04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd08:	688e      	ldr	r6, [r1, #8]
 800dd0a:	461f      	mov	r7, r3
 800dd0c:	42be      	cmp	r6, r7
 800dd0e:	680b      	ldr	r3, [r1, #0]
 800dd10:	4682      	mov	sl, r0
 800dd12:	460c      	mov	r4, r1
 800dd14:	4690      	mov	r8, r2
 800dd16:	d82d      	bhi.n	800dd74 <__ssputs_r+0x70>
 800dd18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dd1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800dd20:	d026      	beq.n	800dd70 <__ssputs_r+0x6c>
 800dd22:	6965      	ldr	r5, [r4, #20]
 800dd24:	6909      	ldr	r1, [r1, #16]
 800dd26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dd2a:	eba3 0901 	sub.w	r9, r3, r1
 800dd2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dd32:	1c7b      	adds	r3, r7, #1
 800dd34:	444b      	add	r3, r9
 800dd36:	106d      	asrs	r5, r5, #1
 800dd38:	429d      	cmp	r5, r3
 800dd3a:	bf38      	it	cc
 800dd3c:	461d      	movcc	r5, r3
 800dd3e:	0553      	lsls	r3, r2, #21
 800dd40:	d527      	bpl.n	800dd92 <__ssputs_r+0x8e>
 800dd42:	4629      	mov	r1, r5
 800dd44:	f7fd ff46 	bl	800bbd4 <_malloc_r>
 800dd48:	4606      	mov	r6, r0
 800dd4a:	b360      	cbz	r0, 800dda6 <__ssputs_r+0xa2>
 800dd4c:	6921      	ldr	r1, [r4, #16]
 800dd4e:	464a      	mov	r2, r9
 800dd50:	f7fe fe17 	bl	800c982 <memcpy>
 800dd54:	89a3      	ldrh	r3, [r4, #12]
 800dd56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800dd5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd5e:	81a3      	strh	r3, [r4, #12]
 800dd60:	6126      	str	r6, [r4, #16]
 800dd62:	6165      	str	r5, [r4, #20]
 800dd64:	444e      	add	r6, r9
 800dd66:	eba5 0509 	sub.w	r5, r5, r9
 800dd6a:	6026      	str	r6, [r4, #0]
 800dd6c:	60a5      	str	r5, [r4, #8]
 800dd6e:	463e      	mov	r6, r7
 800dd70:	42be      	cmp	r6, r7
 800dd72:	d900      	bls.n	800dd76 <__ssputs_r+0x72>
 800dd74:	463e      	mov	r6, r7
 800dd76:	6820      	ldr	r0, [r4, #0]
 800dd78:	4632      	mov	r2, r6
 800dd7a:	4641      	mov	r1, r8
 800dd7c:	f7fe fd41 	bl	800c802 <memmove>
 800dd80:	68a3      	ldr	r3, [r4, #8]
 800dd82:	1b9b      	subs	r3, r3, r6
 800dd84:	60a3      	str	r3, [r4, #8]
 800dd86:	6823      	ldr	r3, [r4, #0]
 800dd88:	4433      	add	r3, r6
 800dd8a:	6023      	str	r3, [r4, #0]
 800dd8c:	2000      	movs	r0, #0
 800dd8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd92:	462a      	mov	r2, r5
 800dd94:	f7fd ffaa 	bl	800bcec <_realloc_r>
 800dd98:	4606      	mov	r6, r0
 800dd9a:	2800      	cmp	r0, #0
 800dd9c:	d1e0      	bne.n	800dd60 <__ssputs_r+0x5c>
 800dd9e:	6921      	ldr	r1, [r4, #16]
 800dda0:	4650      	mov	r0, sl
 800dda2:	f7ff fbdb 	bl	800d55c <_free_r>
 800dda6:	230c      	movs	r3, #12
 800dda8:	f8ca 3000 	str.w	r3, [sl]
 800ddac:	89a3      	ldrh	r3, [r4, #12]
 800ddae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ddb2:	81a3      	strh	r3, [r4, #12]
 800ddb4:	f04f 30ff 	mov.w	r0, #4294967295
 800ddb8:	e7e9      	b.n	800dd8e <__ssputs_r+0x8a>
	...

0800ddbc <_svfiprintf_r>:
 800ddbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddc0:	4698      	mov	r8, r3
 800ddc2:	898b      	ldrh	r3, [r1, #12]
 800ddc4:	061b      	lsls	r3, r3, #24
 800ddc6:	b09d      	sub	sp, #116	@ 0x74
 800ddc8:	4607      	mov	r7, r0
 800ddca:	460d      	mov	r5, r1
 800ddcc:	4614      	mov	r4, r2
 800ddce:	d510      	bpl.n	800ddf2 <_svfiprintf_r+0x36>
 800ddd0:	690b      	ldr	r3, [r1, #16]
 800ddd2:	b973      	cbnz	r3, 800ddf2 <_svfiprintf_r+0x36>
 800ddd4:	2140      	movs	r1, #64	@ 0x40
 800ddd6:	f7fd fefd 	bl	800bbd4 <_malloc_r>
 800ddda:	6028      	str	r0, [r5, #0]
 800dddc:	6128      	str	r0, [r5, #16]
 800ddde:	b930      	cbnz	r0, 800ddee <_svfiprintf_r+0x32>
 800dde0:	230c      	movs	r3, #12
 800dde2:	603b      	str	r3, [r7, #0]
 800dde4:	f04f 30ff 	mov.w	r0, #4294967295
 800dde8:	b01d      	add	sp, #116	@ 0x74
 800ddea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddee:	2340      	movs	r3, #64	@ 0x40
 800ddf0:	616b      	str	r3, [r5, #20]
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	9309      	str	r3, [sp, #36]	@ 0x24
 800ddf6:	2320      	movs	r3, #32
 800ddf8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ddfc:	f8cd 800c 	str.w	r8, [sp, #12]
 800de00:	2330      	movs	r3, #48	@ 0x30
 800de02:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800dfa0 <_svfiprintf_r+0x1e4>
 800de06:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800de0a:	f04f 0901 	mov.w	r9, #1
 800de0e:	4623      	mov	r3, r4
 800de10:	469a      	mov	sl, r3
 800de12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de16:	b10a      	cbz	r2, 800de1c <_svfiprintf_r+0x60>
 800de18:	2a25      	cmp	r2, #37	@ 0x25
 800de1a:	d1f9      	bne.n	800de10 <_svfiprintf_r+0x54>
 800de1c:	ebba 0b04 	subs.w	fp, sl, r4
 800de20:	d00b      	beq.n	800de3a <_svfiprintf_r+0x7e>
 800de22:	465b      	mov	r3, fp
 800de24:	4622      	mov	r2, r4
 800de26:	4629      	mov	r1, r5
 800de28:	4638      	mov	r0, r7
 800de2a:	f7ff ff6b 	bl	800dd04 <__ssputs_r>
 800de2e:	3001      	adds	r0, #1
 800de30:	f000 80a7 	beq.w	800df82 <_svfiprintf_r+0x1c6>
 800de34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800de36:	445a      	add	r2, fp
 800de38:	9209      	str	r2, [sp, #36]	@ 0x24
 800de3a:	f89a 3000 	ldrb.w	r3, [sl]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	f000 809f 	beq.w	800df82 <_svfiprintf_r+0x1c6>
 800de44:	2300      	movs	r3, #0
 800de46:	f04f 32ff 	mov.w	r2, #4294967295
 800de4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de4e:	f10a 0a01 	add.w	sl, sl, #1
 800de52:	9304      	str	r3, [sp, #16]
 800de54:	9307      	str	r3, [sp, #28]
 800de56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800de5a:	931a      	str	r3, [sp, #104]	@ 0x68
 800de5c:	4654      	mov	r4, sl
 800de5e:	2205      	movs	r2, #5
 800de60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de64:	484e      	ldr	r0, [pc, #312]	@ (800dfa0 <_svfiprintf_r+0x1e4>)
 800de66:	f7f2 fa3b 	bl	80002e0 <memchr>
 800de6a:	9a04      	ldr	r2, [sp, #16]
 800de6c:	b9d8      	cbnz	r0, 800dea6 <_svfiprintf_r+0xea>
 800de6e:	06d0      	lsls	r0, r2, #27
 800de70:	bf44      	itt	mi
 800de72:	2320      	movmi	r3, #32
 800de74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800de78:	0711      	lsls	r1, r2, #28
 800de7a:	bf44      	itt	mi
 800de7c:	232b      	movmi	r3, #43	@ 0x2b
 800de7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800de82:	f89a 3000 	ldrb.w	r3, [sl]
 800de86:	2b2a      	cmp	r3, #42	@ 0x2a
 800de88:	d015      	beq.n	800deb6 <_svfiprintf_r+0xfa>
 800de8a:	9a07      	ldr	r2, [sp, #28]
 800de8c:	4654      	mov	r4, sl
 800de8e:	2000      	movs	r0, #0
 800de90:	f04f 0c0a 	mov.w	ip, #10
 800de94:	4621      	mov	r1, r4
 800de96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de9a:	3b30      	subs	r3, #48	@ 0x30
 800de9c:	2b09      	cmp	r3, #9
 800de9e:	d94b      	bls.n	800df38 <_svfiprintf_r+0x17c>
 800dea0:	b1b0      	cbz	r0, 800ded0 <_svfiprintf_r+0x114>
 800dea2:	9207      	str	r2, [sp, #28]
 800dea4:	e014      	b.n	800ded0 <_svfiprintf_r+0x114>
 800dea6:	eba0 0308 	sub.w	r3, r0, r8
 800deaa:	fa09 f303 	lsl.w	r3, r9, r3
 800deae:	4313      	orrs	r3, r2
 800deb0:	9304      	str	r3, [sp, #16]
 800deb2:	46a2      	mov	sl, r4
 800deb4:	e7d2      	b.n	800de5c <_svfiprintf_r+0xa0>
 800deb6:	9b03      	ldr	r3, [sp, #12]
 800deb8:	1d19      	adds	r1, r3, #4
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	9103      	str	r1, [sp, #12]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	bfbb      	ittet	lt
 800dec2:	425b      	neglt	r3, r3
 800dec4:	f042 0202 	orrlt.w	r2, r2, #2
 800dec8:	9307      	strge	r3, [sp, #28]
 800deca:	9307      	strlt	r3, [sp, #28]
 800decc:	bfb8      	it	lt
 800dece:	9204      	strlt	r2, [sp, #16]
 800ded0:	7823      	ldrb	r3, [r4, #0]
 800ded2:	2b2e      	cmp	r3, #46	@ 0x2e
 800ded4:	d10a      	bne.n	800deec <_svfiprintf_r+0x130>
 800ded6:	7863      	ldrb	r3, [r4, #1]
 800ded8:	2b2a      	cmp	r3, #42	@ 0x2a
 800deda:	d132      	bne.n	800df42 <_svfiprintf_r+0x186>
 800dedc:	9b03      	ldr	r3, [sp, #12]
 800dede:	1d1a      	adds	r2, r3, #4
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	9203      	str	r2, [sp, #12]
 800dee4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dee8:	3402      	adds	r4, #2
 800deea:	9305      	str	r3, [sp, #20]
 800deec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800dfb0 <_svfiprintf_r+0x1f4>
 800def0:	7821      	ldrb	r1, [r4, #0]
 800def2:	2203      	movs	r2, #3
 800def4:	4650      	mov	r0, sl
 800def6:	f7f2 f9f3 	bl	80002e0 <memchr>
 800defa:	b138      	cbz	r0, 800df0c <_svfiprintf_r+0x150>
 800defc:	9b04      	ldr	r3, [sp, #16]
 800defe:	eba0 000a 	sub.w	r0, r0, sl
 800df02:	2240      	movs	r2, #64	@ 0x40
 800df04:	4082      	lsls	r2, r0
 800df06:	4313      	orrs	r3, r2
 800df08:	3401      	adds	r4, #1
 800df0a:	9304      	str	r3, [sp, #16]
 800df0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df10:	4824      	ldr	r0, [pc, #144]	@ (800dfa4 <_svfiprintf_r+0x1e8>)
 800df12:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800df16:	2206      	movs	r2, #6
 800df18:	f7f2 f9e2 	bl	80002e0 <memchr>
 800df1c:	2800      	cmp	r0, #0
 800df1e:	d036      	beq.n	800df8e <_svfiprintf_r+0x1d2>
 800df20:	4b21      	ldr	r3, [pc, #132]	@ (800dfa8 <_svfiprintf_r+0x1ec>)
 800df22:	bb1b      	cbnz	r3, 800df6c <_svfiprintf_r+0x1b0>
 800df24:	9b03      	ldr	r3, [sp, #12]
 800df26:	3307      	adds	r3, #7
 800df28:	f023 0307 	bic.w	r3, r3, #7
 800df2c:	3308      	adds	r3, #8
 800df2e:	9303      	str	r3, [sp, #12]
 800df30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df32:	4433      	add	r3, r6
 800df34:	9309      	str	r3, [sp, #36]	@ 0x24
 800df36:	e76a      	b.n	800de0e <_svfiprintf_r+0x52>
 800df38:	fb0c 3202 	mla	r2, ip, r2, r3
 800df3c:	460c      	mov	r4, r1
 800df3e:	2001      	movs	r0, #1
 800df40:	e7a8      	b.n	800de94 <_svfiprintf_r+0xd8>
 800df42:	2300      	movs	r3, #0
 800df44:	3401      	adds	r4, #1
 800df46:	9305      	str	r3, [sp, #20]
 800df48:	4619      	mov	r1, r3
 800df4a:	f04f 0c0a 	mov.w	ip, #10
 800df4e:	4620      	mov	r0, r4
 800df50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df54:	3a30      	subs	r2, #48	@ 0x30
 800df56:	2a09      	cmp	r2, #9
 800df58:	d903      	bls.n	800df62 <_svfiprintf_r+0x1a6>
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d0c6      	beq.n	800deec <_svfiprintf_r+0x130>
 800df5e:	9105      	str	r1, [sp, #20]
 800df60:	e7c4      	b.n	800deec <_svfiprintf_r+0x130>
 800df62:	fb0c 2101 	mla	r1, ip, r1, r2
 800df66:	4604      	mov	r4, r0
 800df68:	2301      	movs	r3, #1
 800df6a:	e7f0      	b.n	800df4e <_svfiprintf_r+0x192>
 800df6c:	ab03      	add	r3, sp, #12
 800df6e:	9300      	str	r3, [sp, #0]
 800df70:	462a      	mov	r2, r5
 800df72:	4b0e      	ldr	r3, [pc, #56]	@ (800dfac <_svfiprintf_r+0x1f0>)
 800df74:	a904      	add	r1, sp, #16
 800df76:	4638      	mov	r0, r7
 800df78:	f7fd ff76 	bl	800be68 <_printf_float>
 800df7c:	1c42      	adds	r2, r0, #1
 800df7e:	4606      	mov	r6, r0
 800df80:	d1d6      	bne.n	800df30 <_svfiprintf_r+0x174>
 800df82:	89ab      	ldrh	r3, [r5, #12]
 800df84:	065b      	lsls	r3, r3, #25
 800df86:	f53f af2d 	bmi.w	800dde4 <_svfiprintf_r+0x28>
 800df8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800df8c:	e72c      	b.n	800dde8 <_svfiprintf_r+0x2c>
 800df8e:	ab03      	add	r3, sp, #12
 800df90:	9300      	str	r3, [sp, #0]
 800df92:	462a      	mov	r2, r5
 800df94:	4b05      	ldr	r3, [pc, #20]	@ (800dfac <_svfiprintf_r+0x1f0>)
 800df96:	a904      	add	r1, sp, #16
 800df98:	4638      	mov	r0, r7
 800df9a:	f7fe f9ed 	bl	800c378 <_printf_i>
 800df9e:	e7ed      	b.n	800df7c <_svfiprintf_r+0x1c0>
 800dfa0:	0806d420 	.word	0x0806d420
 800dfa4:	0806d42a 	.word	0x0806d42a
 800dfa8:	0800be69 	.word	0x0800be69
 800dfac:	0800dd05 	.word	0x0800dd05
 800dfb0:	0806d426 	.word	0x0806d426

0800dfb4 <__sflush_r>:
 800dfb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dfb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfbc:	0716      	lsls	r6, r2, #28
 800dfbe:	4605      	mov	r5, r0
 800dfc0:	460c      	mov	r4, r1
 800dfc2:	d454      	bmi.n	800e06e <__sflush_r+0xba>
 800dfc4:	684b      	ldr	r3, [r1, #4]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	dc02      	bgt.n	800dfd0 <__sflush_r+0x1c>
 800dfca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	dd48      	ble.n	800e062 <__sflush_r+0xae>
 800dfd0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dfd2:	2e00      	cmp	r6, #0
 800dfd4:	d045      	beq.n	800e062 <__sflush_r+0xae>
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800dfdc:	682f      	ldr	r7, [r5, #0]
 800dfde:	6a21      	ldr	r1, [r4, #32]
 800dfe0:	602b      	str	r3, [r5, #0]
 800dfe2:	d030      	beq.n	800e046 <__sflush_r+0x92>
 800dfe4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dfe6:	89a3      	ldrh	r3, [r4, #12]
 800dfe8:	0759      	lsls	r1, r3, #29
 800dfea:	d505      	bpl.n	800dff8 <__sflush_r+0x44>
 800dfec:	6863      	ldr	r3, [r4, #4]
 800dfee:	1ad2      	subs	r2, r2, r3
 800dff0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dff2:	b10b      	cbz	r3, 800dff8 <__sflush_r+0x44>
 800dff4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dff6:	1ad2      	subs	r2, r2, r3
 800dff8:	2300      	movs	r3, #0
 800dffa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dffc:	6a21      	ldr	r1, [r4, #32]
 800dffe:	4628      	mov	r0, r5
 800e000:	47b0      	blx	r6
 800e002:	1c43      	adds	r3, r0, #1
 800e004:	89a3      	ldrh	r3, [r4, #12]
 800e006:	d106      	bne.n	800e016 <__sflush_r+0x62>
 800e008:	6829      	ldr	r1, [r5, #0]
 800e00a:	291d      	cmp	r1, #29
 800e00c:	d82b      	bhi.n	800e066 <__sflush_r+0xb2>
 800e00e:	4a2a      	ldr	r2, [pc, #168]	@ (800e0b8 <__sflush_r+0x104>)
 800e010:	410a      	asrs	r2, r1
 800e012:	07d6      	lsls	r6, r2, #31
 800e014:	d427      	bmi.n	800e066 <__sflush_r+0xb2>
 800e016:	2200      	movs	r2, #0
 800e018:	6062      	str	r2, [r4, #4]
 800e01a:	04d9      	lsls	r1, r3, #19
 800e01c:	6922      	ldr	r2, [r4, #16]
 800e01e:	6022      	str	r2, [r4, #0]
 800e020:	d504      	bpl.n	800e02c <__sflush_r+0x78>
 800e022:	1c42      	adds	r2, r0, #1
 800e024:	d101      	bne.n	800e02a <__sflush_r+0x76>
 800e026:	682b      	ldr	r3, [r5, #0]
 800e028:	b903      	cbnz	r3, 800e02c <__sflush_r+0x78>
 800e02a:	6560      	str	r0, [r4, #84]	@ 0x54
 800e02c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e02e:	602f      	str	r7, [r5, #0]
 800e030:	b1b9      	cbz	r1, 800e062 <__sflush_r+0xae>
 800e032:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e036:	4299      	cmp	r1, r3
 800e038:	d002      	beq.n	800e040 <__sflush_r+0x8c>
 800e03a:	4628      	mov	r0, r5
 800e03c:	f7ff fa8e 	bl	800d55c <_free_r>
 800e040:	2300      	movs	r3, #0
 800e042:	6363      	str	r3, [r4, #52]	@ 0x34
 800e044:	e00d      	b.n	800e062 <__sflush_r+0xae>
 800e046:	2301      	movs	r3, #1
 800e048:	4628      	mov	r0, r5
 800e04a:	47b0      	blx	r6
 800e04c:	4602      	mov	r2, r0
 800e04e:	1c50      	adds	r0, r2, #1
 800e050:	d1c9      	bne.n	800dfe6 <__sflush_r+0x32>
 800e052:	682b      	ldr	r3, [r5, #0]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d0c6      	beq.n	800dfe6 <__sflush_r+0x32>
 800e058:	2b1d      	cmp	r3, #29
 800e05a:	d001      	beq.n	800e060 <__sflush_r+0xac>
 800e05c:	2b16      	cmp	r3, #22
 800e05e:	d11e      	bne.n	800e09e <__sflush_r+0xea>
 800e060:	602f      	str	r7, [r5, #0]
 800e062:	2000      	movs	r0, #0
 800e064:	e022      	b.n	800e0ac <__sflush_r+0xf8>
 800e066:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e06a:	b21b      	sxth	r3, r3
 800e06c:	e01b      	b.n	800e0a6 <__sflush_r+0xf2>
 800e06e:	690f      	ldr	r7, [r1, #16]
 800e070:	2f00      	cmp	r7, #0
 800e072:	d0f6      	beq.n	800e062 <__sflush_r+0xae>
 800e074:	0793      	lsls	r3, r2, #30
 800e076:	680e      	ldr	r6, [r1, #0]
 800e078:	bf08      	it	eq
 800e07a:	694b      	ldreq	r3, [r1, #20]
 800e07c:	600f      	str	r7, [r1, #0]
 800e07e:	bf18      	it	ne
 800e080:	2300      	movne	r3, #0
 800e082:	eba6 0807 	sub.w	r8, r6, r7
 800e086:	608b      	str	r3, [r1, #8]
 800e088:	f1b8 0f00 	cmp.w	r8, #0
 800e08c:	dde9      	ble.n	800e062 <__sflush_r+0xae>
 800e08e:	6a21      	ldr	r1, [r4, #32]
 800e090:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e092:	4643      	mov	r3, r8
 800e094:	463a      	mov	r2, r7
 800e096:	4628      	mov	r0, r5
 800e098:	47b0      	blx	r6
 800e09a:	2800      	cmp	r0, #0
 800e09c:	dc08      	bgt.n	800e0b0 <__sflush_r+0xfc>
 800e09e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e0a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e0a6:	81a3      	strh	r3, [r4, #12]
 800e0a8:	f04f 30ff 	mov.w	r0, #4294967295
 800e0ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0b0:	4407      	add	r7, r0
 800e0b2:	eba8 0800 	sub.w	r8, r8, r0
 800e0b6:	e7e7      	b.n	800e088 <__sflush_r+0xd4>
 800e0b8:	dfbffffe 	.word	0xdfbffffe

0800e0bc <_fflush_r>:
 800e0bc:	b538      	push	{r3, r4, r5, lr}
 800e0be:	690b      	ldr	r3, [r1, #16]
 800e0c0:	4605      	mov	r5, r0
 800e0c2:	460c      	mov	r4, r1
 800e0c4:	b913      	cbnz	r3, 800e0cc <_fflush_r+0x10>
 800e0c6:	2500      	movs	r5, #0
 800e0c8:	4628      	mov	r0, r5
 800e0ca:	bd38      	pop	{r3, r4, r5, pc}
 800e0cc:	b118      	cbz	r0, 800e0d6 <_fflush_r+0x1a>
 800e0ce:	6a03      	ldr	r3, [r0, #32]
 800e0d0:	b90b      	cbnz	r3, 800e0d6 <_fflush_r+0x1a>
 800e0d2:	f7fe fafd 	bl	800c6d0 <__sinit>
 800e0d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d0f3      	beq.n	800e0c6 <_fflush_r+0xa>
 800e0de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e0e0:	07d0      	lsls	r0, r2, #31
 800e0e2:	d404      	bmi.n	800e0ee <_fflush_r+0x32>
 800e0e4:	0599      	lsls	r1, r3, #22
 800e0e6:	d402      	bmi.n	800e0ee <_fflush_r+0x32>
 800e0e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e0ea:	f7fe fc40 	bl	800c96e <__retarget_lock_acquire_recursive>
 800e0ee:	4628      	mov	r0, r5
 800e0f0:	4621      	mov	r1, r4
 800e0f2:	f7ff ff5f 	bl	800dfb4 <__sflush_r>
 800e0f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e0f8:	07da      	lsls	r2, r3, #31
 800e0fa:	4605      	mov	r5, r0
 800e0fc:	d4e4      	bmi.n	800e0c8 <_fflush_r+0xc>
 800e0fe:	89a3      	ldrh	r3, [r4, #12]
 800e100:	059b      	lsls	r3, r3, #22
 800e102:	d4e1      	bmi.n	800e0c8 <_fflush_r+0xc>
 800e104:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e106:	f7fe fc33 	bl	800c970 <__retarget_lock_release_recursive>
 800e10a:	e7dd      	b.n	800e0c8 <_fflush_r+0xc>

0800e10c <__assert_func>:
 800e10c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e10e:	4614      	mov	r4, r2
 800e110:	461a      	mov	r2, r3
 800e112:	4b09      	ldr	r3, [pc, #36]	@ (800e138 <__assert_func+0x2c>)
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	4605      	mov	r5, r0
 800e118:	68d8      	ldr	r0, [r3, #12]
 800e11a:	b954      	cbnz	r4, 800e132 <__assert_func+0x26>
 800e11c:	4b07      	ldr	r3, [pc, #28]	@ (800e13c <__assert_func+0x30>)
 800e11e:	461c      	mov	r4, r3
 800e120:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e124:	9100      	str	r1, [sp, #0]
 800e126:	462b      	mov	r3, r5
 800e128:	4905      	ldr	r1, [pc, #20]	@ (800e140 <__assert_func+0x34>)
 800e12a:	f000 f841 	bl	800e1b0 <fiprintf>
 800e12e:	f000 f851 	bl	800e1d4 <abort>
 800e132:	4b04      	ldr	r3, [pc, #16]	@ (800e144 <__assert_func+0x38>)
 800e134:	e7f4      	b.n	800e120 <__assert_func+0x14>
 800e136:	bf00      	nop
 800e138:	24000b5c 	.word	0x24000b5c
 800e13c:	0800ec7e 	.word	0x0800ec7e
 800e140:	0806d446 	.word	0x0806d446
 800e144:	0806d439 	.word	0x0806d439

0800e148 <_calloc_r>:
 800e148:	b570      	push	{r4, r5, r6, lr}
 800e14a:	fba1 5402 	umull	r5, r4, r1, r2
 800e14e:	b93c      	cbnz	r4, 800e160 <_calloc_r+0x18>
 800e150:	4629      	mov	r1, r5
 800e152:	f7fd fd3f 	bl	800bbd4 <_malloc_r>
 800e156:	4606      	mov	r6, r0
 800e158:	b928      	cbnz	r0, 800e166 <_calloc_r+0x1e>
 800e15a:	2600      	movs	r6, #0
 800e15c:	4630      	mov	r0, r6
 800e15e:	bd70      	pop	{r4, r5, r6, pc}
 800e160:	220c      	movs	r2, #12
 800e162:	6002      	str	r2, [r0, #0]
 800e164:	e7f9      	b.n	800e15a <_calloc_r+0x12>
 800e166:	462a      	mov	r2, r5
 800e168:	4621      	mov	r1, r4
 800e16a:	f7fe fb64 	bl	800c836 <memset>
 800e16e:	e7f5      	b.n	800e15c <_calloc_r+0x14>

0800e170 <__ascii_mbtowc>:
 800e170:	b082      	sub	sp, #8
 800e172:	b901      	cbnz	r1, 800e176 <__ascii_mbtowc+0x6>
 800e174:	a901      	add	r1, sp, #4
 800e176:	b142      	cbz	r2, 800e18a <__ascii_mbtowc+0x1a>
 800e178:	b14b      	cbz	r3, 800e18e <__ascii_mbtowc+0x1e>
 800e17a:	7813      	ldrb	r3, [r2, #0]
 800e17c:	600b      	str	r3, [r1, #0]
 800e17e:	7812      	ldrb	r2, [r2, #0]
 800e180:	1e10      	subs	r0, r2, #0
 800e182:	bf18      	it	ne
 800e184:	2001      	movne	r0, #1
 800e186:	b002      	add	sp, #8
 800e188:	4770      	bx	lr
 800e18a:	4610      	mov	r0, r2
 800e18c:	e7fb      	b.n	800e186 <__ascii_mbtowc+0x16>
 800e18e:	f06f 0001 	mvn.w	r0, #1
 800e192:	e7f8      	b.n	800e186 <__ascii_mbtowc+0x16>

0800e194 <__ascii_wctomb>:
 800e194:	4603      	mov	r3, r0
 800e196:	4608      	mov	r0, r1
 800e198:	b141      	cbz	r1, 800e1ac <__ascii_wctomb+0x18>
 800e19a:	2aff      	cmp	r2, #255	@ 0xff
 800e19c:	d904      	bls.n	800e1a8 <__ascii_wctomb+0x14>
 800e19e:	228a      	movs	r2, #138	@ 0x8a
 800e1a0:	601a      	str	r2, [r3, #0]
 800e1a2:	f04f 30ff 	mov.w	r0, #4294967295
 800e1a6:	4770      	bx	lr
 800e1a8:	700a      	strb	r2, [r1, #0]
 800e1aa:	2001      	movs	r0, #1
 800e1ac:	4770      	bx	lr
	...

0800e1b0 <fiprintf>:
 800e1b0:	b40e      	push	{r1, r2, r3}
 800e1b2:	b503      	push	{r0, r1, lr}
 800e1b4:	4601      	mov	r1, r0
 800e1b6:	ab03      	add	r3, sp, #12
 800e1b8:	4805      	ldr	r0, [pc, #20]	@ (800e1d0 <fiprintf+0x20>)
 800e1ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1be:	6800      	ldr	r0, [r0, #0]
 800e1c0:	9301      	str	r3, [sp, #4]
 800e1c2:	f000 f837 	bl	800e234 <_vfiprintf_r>
 800e1c6:	b002      	add	sp, #8
 800e1c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e1cc:	b003      	add	sp, #12
 800e1ce:	4770      	bx	lr
 800e1d0:	24000b5c 	.word	0x24000b5c

0800e1d4 <abort>:
 800e1d4:	b508      	push	{r3, lr}
 800e1d6:	2006      	movs	r0, #6
 800e1d8:	f000 fa00 	bl	800e5dc <raise>
 800e1dc:	2001      	movs	r0, #1
 800e1de:	f000 fca5 	bl	800eb2c <_exit>

0800e1e2 <__sfputc_r>:
 800e1e2:	6893      	ldr	r3, [r2, #8]
 800e1e4:	3b01      	subs	r3, #1
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	b410      	push	{r4}
 800e1ea:	6093      	str	r3, [r2, #8]
 800e1ec:	da08      	bge.n	800e200 <__sfputc_r+0x1e>
 800e1ee:	6994      	ldr	r4, [r2, #24]
 800e1f0:	42a3      	cmp	r3, r4
 800e1f2:	db01      	blt.n	800e1f8 <__sfputc_r+0x16>
 800e1f4:	290a      	cmp	r1, #10
 800e1f6:	d103      	bne.n	800e200 <__sfputc_r+0x1e>
 800e1f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e1fc:	f000 b932 	b.w	800e464 <__swbuf_r>
 800e200:	6813      	ldr	r3, [r2, #0]
 800e202:	1c58      	adds	r0, r3, #1
 800e204:	6010      	str	r0, [r2, #0]
 800e206:	7019      	strb	r1, [r3, #0]
 800e208:	4608      	mov	r0, r1
 800e20a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e20e:	4770      	bx	lr

0800e210 <__sfputs_r>:
 800e210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e212:	4606      	mov	r6, r0
 800e214:	460f      	mov	r7, r1
 800e216:	4614      	mov	r4, r2
 800e218:	18d5      	adds	r5, r2, r3
 800e21a:	42ac      	cmp	r4, r5
 800e21c:	d101      	bne.n	800e222 <__sfputs_r+0x12>
 800e21e:	2000      	movs	r0, #0
 800e220:	e007      	b.n	800e232 <__sfputs_r+0x22>
 800e222:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e226:	463a      	mov	r2, r7
 800e228:	4630      	mov	r0, r6
 800e22a:	f7ff ffda 	bl	800e1e2 <__sfputc_r>
 800e22e:	1c43      	adds	r3, r0, #1
 800e230:	d1f3      	bne.n	800e21a <__sfputs_r+0xa>
 800e232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e234 <_vfiprintf_r>:
 800e234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e238:	460d      	mov	r5, r1
 800e23a:	b09d      	sub	sp, #116	@ 0x74
 800e23c:	4614      	mov	r4, r2
 800e23e:	4698      	mov	r8, r3
 800e240:	4606      	mov	r6, r0
 800e242:	b118      	cbz	r0, 800e24c <_vfiprintf_r+0x18>
 800e244:	6a03      	ldr	r3, [r0, #32]
 800e246:	b90b      	cbnz	r3, 800e24c <_vfiprintf_r+0x18>
 800e248:	f7fe fa42 	bl	800c6d0 <__sinit>
 800e24c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e24e:	07d9      	lsls	r1, r3, #31
 800e250:	d405      	bmi.n	800e25e <_vfiprintf_r+0x2a>
 800e252:	89ab      	ldrh	r3, [r5, #12]
 800e254:	059a      	lsls	r2, r3, #22
 800e256:	d402      	bmi.n	800e25e <_vfiprintf_r+0x2a>
 800e258:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e25a:	f7fe fb88 	bl	800c96e <__retarget_lock_acquire_recursive>
 800e25e:	89ab      	ldrh	r3, [r5, #12]
 800e260:	071b      	lsls	r3, r3, #28
 800e262:	d501      	bpl.n	800e268 <_vfiprintf_r+0x34>
 800e264:	692b      	ldr	r3, [r5, #16]
 800e266:	b99b      	cbnz	r3, 800e290 <_vfiprintf_r+0x5c>
 800e268:	4629      	mov	r1, r5
 800e26a:	4630      	mov	r0, r6
 800e26c:	f000 f938 	bl	800e4e0 <__swsetup_r>
 800e270:	b170      	cbz	r0, 800e290 <_vfiprintf_r+0x5c>
 800e272:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e274:	07dc      	lsls	r4, r3, #31
 800e276:	d504      	bpl.n	800e282 <_vfiprintf_r+0x4e>
 800e278:	f04f 30ff 	mov.w	r0, #4294967295
 800e27c:	b01d      	add	sp, #116	@ 0x74
 800e27e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e282:	89ab      	ldrh	r3, [r5, #12]
 800e284:	0598      	lsls	r0, r3, #22
 800e286:	d4f7      	bmi.n	800e278 <_vfiprintf_r+0x44>
 800e288:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e28a:	f7fe fb71 	bl	800c970 <__retarget_lock_release_recursive>
 800e28e:	e7f3      	b.n	800e278 <_vfiprintf_r+0x44>
 800e290:	2300      	movs	r3, #0
 800e292:	9309      	str	r3, [sp, #36]	@ 0x24
 800e294:	2320      	movs	r3, #32
 800e296:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e29a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e29e:	2330      	movs	r3, #48	@ 0x30
 800e2a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e450 <_vfiprintf_r+0x21c>
 800e2a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e2a8:	f04f 0901 	mov.w	r9, #1
 800e2ac:	4623      	mov	r3, r4
 800e2ae:	469a      	mov	sl, r3
 800e2b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e2b4:	b10a      	cbz	r2, 800e2ba <_vfiprintf_r+0x86>
 800e2b6:	2a25      	cmp	r2, #37	@ 0x25
 800e2b8:	d1f9      	bne.n	800e2ae <_vfiprintf_r+0x7a>
 800e2ba:	ebba 0b04 	subs.w	fp, sl, r4
 800e2be:	d00b      	beq.n	800e2d8 <_vfiprintf_r+0xa4>
 800e2c0:	465b      	mov	r3, fp
 800e2c2:	4622      	mov	r2, r4
 800e2c4:	4629      	mov	r1, r5
 800e2c6:	4630      	mov	r0, r6
 800e2c8:	f7ff ffa2 	bl	800e210 <__sfputs_r>
 800e2cc:	3001      	adds	r0, #1
 800e2ce:	f000 80a7 	beq.w	800e420 <_vfiprintf_r+0x1ec>
 800e2d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e2d4:	445a      	add	r2, fp
 800e2d6:	9209      	str	r2, [sp, #36]	@ 0x24
 800e2d8:	f89a 3000 	ldrb.w	r3, [sl]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	f000 809f 	beq.w	800e420 <_vfiprintf_r+0x1ec>
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	f04f 32ff 	mov.w	r2, #4294967295
 800e2e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e2ec:	f10a 0a01 	add.w	sl, sl, #1
 800e2f0:	9304      	str	r3, [sp, #16]
 800e2f2:	9307      	str	r3, [sp, #28]
 800e2f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e2f8:	931a      	str	r3, [sp, #104]	@ 0x68
 800e2fa:	4654      	mov	r4, sl
 800e2fc:	2205      	movs	r2, #5
 800e2fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e302:	4853      	ldr	r0, [pc, #332]	@ (800e450 <_vfiprintf_r+0x21c>)
 800e304:	f7f1 ffec 	bl	80002e0 <memchr>
 800e308:	9a04      	ldr	r2, [sp, #16]
 800e30a:	b9d8      	cbnz	r0, 800e344 <_vfiprintf_r+0x110>
 800e30c:	06d1      	lsls	r1, r2, #27
 800e30e:	bf44      	itt	mi
 800e310:	2320      	movmi	r3, #32
 800e312:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e316:	0713      	lsls	r3, r2, #28
 800e318:	bf44      	itt	mi
 800e31a:	232b      	movmi	r3, #43	@ 0x2b
 800e31c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e320:	f89a 3000 	ldrb.w	r3, [sl]
 800e324:	2b2a      	cmp	r3, #42	@ 0x2a
 800e326:	d015      	beq.n	800e354 <_vfiprintf_r+0x120>
 800e328:	9a07      	ldr	r2, [sp, #28]
 800e32a:	4654      	mov	r4, sl
 800e32c:	2000      	movs	r0, #0
 800e32e:	f04f 0c0a 	mov.w	ip, #10
 800e332:	4621      	mov	r1, r4
 800e334:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e338:	3b30      	subs	r3, #48	@ 0x30
 800e33a:	2b09      	cmp	r3, #9
 800e33c:	d94b      	bls.n	800e3d6 <_vfiprintf_r+0x1a2>
 800e33e:	b1b0      	cbz	r0, 800e36e <_vfiprintf_r+0x13a>
 800e340:	9207      	str	r2, [sp, #28]
 800e342:	e014      	b.n	800e36e <_vfiprintf_r+0x13a>
 800e344:	eba0 0308 	sub.w	r3, r0, r8
 800e348:	fa09 f303 	lsl.w	r3, r9, r3
 800e34c:	4313      	orrs	r3, r2
 800e34e:	9304      	str	r3, [sp, #16]
 800e350:	46a2      	mov	sl, r4
 800e352:	e7d2      	b.n	800e2fa <_vfiprintf_r+0xc6>
 800e354:	9b03      	ldr	r3, [sp, #12]
 800e356:	1d19      	adds	r1, r3, #4
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	9103      	str	r1, [sp, #12]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	bfbb      	ittet	lt
 800e360:	425b      	neglt	r3, r3
 800e362:	f042 0202 	orrlt.w	r2, r2, #2
 800e366:	9307      	strge	r3, [sp, #28]
 800e368:	9307      	strlt	r3, [sp, #28]
 800e36a:	bfb8      	it	lt
 800e36c:	9204      	strlt	r2, [sp, #16]
 800e36e:	7823      	ldrb	r3, [r4, #0]
 800e370:	2b2e      	cmp	r3, #46	@ 0x2e
 800e372:	d10a      	bne.n	800e38a <_vfiprintf_r+0x156>
 800e374:	7863      	ldrb	r3, [r4, #1]
 800e376:	2b2a      	cmp	r3, #42	@ 0x2a
 800e378:	d132      	bne.n	800e3e0 <_vfiprintf_r+0x1ac>
 800e37a:	9b03      	ldr	r3, [sp, #12]
 800e37c:	1d1a      	adds	r2, r3, #4
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	9203      	str	r2, [sp, #12]
 800e382:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e386:	3402      	adds	r4, #2
 800e388:	9305      	str	r3, [sp, #20]
 800e38a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e460 <_vfiprintf_r+0x22c>
 800e38e:	7821      	ldrb	r1, [r4, #0]
 800e390:	2203      	movs	r2, #3
 800e392:	4650      	mov	r0, sl
 800e394:	f7f1 ffa4 	bl	80002e0 <memchr>
 800e398:	b138      	cbz	r0, 800e3aa <_vfiprintf_r+0x176>
 800e39a:	9b04      	ldr	r3, [sp, #16]
 800e39c:	eba0 000a 	sub.w	r0, r0, sl
 800e3a0:	2240      	movs	r2, #64	@ 0x40
 800e3a2:	4082      	lsls	r2, r0
 800e3a4:	4313      	orrs	r3, r2
 800e3a6:	3401      	adds	r4, #1
 800e3a8:	9304      	str	r3, [sp, #16]
 800e3aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3ae:	4829      	ldr	r0, [pc, #164]	@ (800e454 <_vfiprintf_r+0x220>)
 800e3b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e3b4:	2206      	movs	r2, #6
 800e3b6:	f7f1 ff93 	bl	80002e0 <memchr>
 800e3ba:	2800      	cmp	r0, #0
 800e3bc:	d03f      	beq.n	800e43e <_vfiprintf_r+0x20a>
 800e3be:	4b26      	ldr	r3, [pc, #152]	@ (800e458 <_vfiprintf_r+0x224>)
 800e3c0:	bb1b      	cbnz	r3, 800e40a <_vfiprintf_r+0x1d6>
 800e3c2:	9b03      	ldr	r3, [sp, #12]
 800e3c4:	3307      	adds	r3, #7
 800e3c6:	f023 0307 	bic.w	r3, r3, #7
 800e3ca:	3308      	adds	r3, #8
 800e3cc:	9303      	str	r3, [sp, #12]
 800e3ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3d0:	443b      	add	r3, r7
 800e3d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800e3d4:	e76a      	b.n	800e2ac <_vfiprintf_r+0x78>
 800e3d6:	fb0c 3202 	mla	r2, ip, r2, r3
 800e3da:	460c      	mov	r4, r1
 800e3dc:	2001      	movs	r0, #1
 800e3de:	e7a8      	b.n	800e332 <_vfiprintf_r+0xfe>
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	3401      	adds	r4, #1
 800e3e4:	9305      	str	r3, [sp, #20]
 800e3e6:	4619      	mov	r1, r3
 800e3e8:	f04f 0c0a 	mov.w	ip, #10
 800e3ec:	4620      	mov	r0, r4
 800e3ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e3f2:	3a30      	subs	r2, #48	@ 0x30
 800e3f4:	2a09      	cmp	r2, #9
 800e3f6:	d903      	bls.n	800e400 <_vfiprintf_r+0x1cc>
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d0c6      	beq.n	800e38a <_vfiprintf_r+0x156>
 800e3fc:	9105      	str	r1, [sp, #20]
 800e3fe:	e7c4      	b.n	800e38a <_vfiprintf_r+0x156>
 800e400:	fb0c 2101 	mla	r1, ip, r1, r2
 800e404:	4604      	mov	r4, r0
 800e406:	2301      	movs	r3, #1
 800e408:	e7f0      	b.n	800e3ec <_vfiprintf_r+0x1b8>
 800e40a:	ab03      	add	r3, sp, #12
 800e40c:	9300      	str	r3, [sp, #0]
 800e40e:	462a      	mov	r2, r5
 800e410:	4b12      	ldr	r3, [pc, #72]	@ (800e45c <_vfiprintf_r+0x228>)
 800e412:	a904      	add	r1, sp, #16
 800e414:	4630      	mov	r0, r6
 800e416:	f7fd fd27 	bl	800be68 <_printf_float>
 800e41a:	4607      	mov	r7, r0
 800e41c:	1c78      	adds	r0, r7, #1
 800e41e:	d1d6      	bne.n	800e3ce <_vfiprintf_r+0x19a>
 800e420:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e422:	07d9      	lsls	r1, r3, #31
 800e424:	d405      	bmi.n	800e432 <_vfiprintf_r+0x1fe>
 800e426:	89ab      	ldrh	r3, [r5, #12]
 800e428:	059a      	lsls	r2, r3, #22
 800e42a:	d402      	bmi.n	800e432 <_vfiprintf_r+0x1fe>
 800e42c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e42e:	f7fe fa9f 	bl	800c970 <__retarget_lock_release_recursive>
 800e432:	89ab      	ldrh	r3, [r5, #12]
 800e434:	065b      	lsls	r3, r3, #25
 800e436:	f53f af1f 	bmi.w	800e278 <_vfiprintf_r+0x44>
 800e43a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e43c:	e71e      	b.n	800e27c <_vfiprintf_r+0x48>
 800e43e:	ab03      	add	r3, sp, #12
 800e440:	9300      	str	r3, [sp, #0]
 800e442:	462a      	mov	r2, r5
 800e444:	4b05      	ldr	r3, [pc, #20]	@ (800e45c <_vfiprintf_r+0x228>)
 800e446:	a904      	add	r1, sp, #16
 800e448:	4630      	mov	r0, r6
 800e44a:	f7fd ff95 	bl	800c378 <_printf_i>
 800e44e:	e7e4      	b.n	800e41a <_vfiprintf_r+0x1e6>
 800e450:	0806d420 	.word	0x0806d420
 800e454:	0806d42a 	.word	0x0806d42a
 800e458:	0800be69 	.word	0x0800be69
 800e45c:	0800e211 	.word	0x0800e211
 800e460:	0806d426 	.word	0x0806d426

0800e464 <__swbuf_r>:
 800e464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e466:	460e      	mov	r6, r1
 800e468:	4614      	mov	r4, r2
 800e46a:	4605      	mov	r5, r0
 800e46c:	b118      	cbz	r0, 800e476 <__swbuf_r+0x12>
 800e46e:	6a03      	ldr	r3, [r0, #32]
 800e470:	b90b      	cbnz	r3, 800e476 <__swbuf_r+0x12>
 800e472:	f7fe f92d 	bl	800c6d0 <__sinit>
 800e476:	69a3      	ldr	r3, [r4, #24]
 800e478:	60a3      	str	r3, [r4, #8]
 800e47a:	89a3      	ldrh	r3, [r4, #12]
 800e47c:	071a      	lsls	r2, r3, #28
 800e47e:	d501      	bpl.n	800e484 <__swbuf_r+0x20>
 800e480:	6923      	ldr	r3, [r4, #16]
 800e482:	b943      	cbnz	r3, 800e496 <__swbuf_r+0x32>
 800e484:	4621      	mov	r1, r4
 800e486:	4628      	mov	r0, r5
 800e488:	f000 f82a 	bl	800e4e0 <__swsetup_r>
 800e48c:	b118      	cbz	r0, 800e496 <__swbuf_r+0x32>
 800e48e:	f04f 37ff 	mov.w	r7, #4294967295
 800e492:	4638      	mov	r0, r7
 800e494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e496:	6823      	ldr	r3, [r4, #0]
 800e498:	6922      	ldr	r2, [r4, #16]
 800e49a:	1a98      	subs	r0, r3, r2
 800e49c:	6963      	ldr	r3, [r4, #20]
 800e49e:	b2f6      	uxtb	r6, r6
 800e4a0:	4283      	cmp	r3, r0
 800e4a2:	4637      	mov	r7, r6
 800e4a4:	dc05      	bgt.n	800e4b2 <__swbuf_r+0x4e>
 800e4a6:	4621      	mov	r1, r4
 800e4a8:	4628      	mov	r0, r5
 800e4aa:	f7ff fe07 	bl	800e0bc <_fflush_r>
 800e4ae:	2800      	cmp	r0, #0
 800e4b0:	d1ed      	bne.n	800e48e <__swbuf_r+0x2a>
 800e4b2:	68a3      	ldr	r3, [r4, #8]
 800e4b4:	3b01      	subs	r3, #1
 800e4b6:	60a3      	str	r3, [r4, #8]
 800e4b8:	6823      	ldr	r3, [r4, #0]
 800e4ba:	1c5a      	adds	r2, r3, #1
 800e4bc:	6022      	str	r2, [r4, #0]
 800e4be:	701e      	strb	r6, [r3, #0]
 800e4c0:	6962      	ldr	r2, [r4, #20]
 800e4c2:	1c43      	adds	r3, r0, #1
 800e4c4:	429a      	cmp	r2, r3
 800e4c6:	d004      	beq.n	800e4d2 <__swbuf_r+0x6e>
 800e4c8:	89a3      	ldrh	r3, [r4, #12]
 800e4ca:	07db      	lsls	r3, r3, #31
 800e4cc:	d5e1      	bpl.n	800e492 <__swbuf_r+0x2e>
 800e4ce:	2e0a      	cmp	r6, #10
 800e4d0:	d1df      	bne.n	800e492 <__swbuf_r+0x2e>
 800e4d2:	4621      	mov	r1, r4
 800e4d4:	4628      	mov	r0, r5
 800e4d6:	f7ff fdf1 	bl	800e0bc <_fflush_r>
 800e4da:	2800      	cmp	r0, #0
 800e4dc:	d0d9      	beq.n	800e492 <__swbuf_r+0x2e>
 800e4de:	e7d6      	b.n	800e48e <__swbuf_r+0x2a>

0800e4e0 <__swsetup_r>:
 800e4e0:	b538      	push	{r3, r4, r5, lr}
 800e4e2:	4b29      	ldr	r3, [pc, #164]	@ (800e588 <__swsetup_r+0xa8>)
 800e4e4:	4605      	mov	r5, r0
 800e4e6:	6818      	ldr	r0, [r3, #0]
 800e4e8:	460c      	mov	r4, r1
 800e4ea:	b118      	cbz	r0, 800e4f4 <__swsetup_r+0x14>
 800e4ec:	6a03      	ldr	r3, [r0, #32]
 800e4ee:	b90b      	cbnz	r3, 800e4f4 <__swsetup_r+0x14>
 800e4f0:	f7fe f8ee 	bl	800c6d0 <__sinit>
 800e4f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4f8:	0719      	lsls	r1, r3, #28
 800e4fa:	d422      	bmi.n	800e542 <__swsetup_r+0x62>
 800e4fc:	06da      	lsls	r2, r3, #27
 800e4fe:	d407      	bmi.n	800e510 <__swsetup_r+0x30>
 800e500:	2209      	movs	r2, #9
 800e502:	602a      	str	r2, [r5, #0]
 800e504:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e508:	81a3      	strh	r3, [r4, #12]
 800e50a:	f04f 30ff 	mov.w	r0, #4294967295
 800e50e:	e033      	b.n	800e578 <__swsetup_r+0x98>
 800e510:	0758      	lsls	r0, r3, #29
 800e512:	d512      	bpl.n	800e53a <__swsetup_r+0x5a>
 800e514:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e516:	b141      	cbz	r1, 800e52a <__swsetup_r+0x4a>
 800e518:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e51c:	4299      	cmp	r1, r3
 800e51e:	d002      	beq.n	800e526 <__swsetup_r+0x46>
 800e520:	4628      	mov	r0, r5
 800e522:	f7ff f81b 	bl	800d55c <_free_r>
 800e526:	2300      	movs	r3, #0
 800e528:	6363      	str	r3, [r4, #52]	@ 0x34
 800e52a:	89a3      	ldrh	r3, [r4, #12]
 800e52c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e530:	81a3      	strh	r3, [r4, #12]
 800e532:	2300      	movs	r3, #0
 800e534:	6063      	str	r3, [r4, #4]
 800e536:	6923      	ldr	r3, [r4, #16]
 800e538:	6023      	str	r3, [r4, #0]
 800e53a:	89a3      	ldrh	r3, [r4, #12]
 800e53c:	f043 0308 	orr.w	r3, r3, #8
 800e540:	81a3      	strh	r3, [r4, #12]
 800e542:	6923      	ldr	r3, [r4, #16]
 800e544:	b94b      	cbnz	r3, 800e55a <__swsetup_r+0x7a>
 800e546:	89a3      	ldrh	r3, [r4, #12]
 800e548:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e54c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e550:	d003      	beq.n	800e55a <__swsetup_r+0x7a>
 800e552:	4621      	mov	r1, r4
 800e554:	4628      	mov	r0, r5
 800e556:	f000 f883 	bl	800e660 <__smakebuf_r>
 800e55a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e55e:	f013 0201 	ands.w	r2, r3, #1
 800e562:	d00a      	beq.n	800e57a <__swsetup_r+0x9a>
 800e564:	2200      	movs	r2, #0
 800e566:	60a2      	str	r2, [r4, #8]
 800e568:	6962      	ldr	r2, [r4, #20]
 800e56a:	4252      	negs	r2, r2
 800e56c:	61a2      	str	r2, [r4, #24]
 800e56e:	6922      	ldr	r2, [r4, #16]
 800e570:	b942      	cbnz	r2, 800e584 <__swsetup_r+0xa4>
 800e572:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e576:	d1c5      	bne.n	800e504 <__swsetup_r+0x24>
 800e578:	bd38      	pop	{r3, r4, r5, pc}
 800e57a:	0799      	lsls	r1, r3, #30
 800e57c:	bf58      	it	pl
 800e57e:	6962      	ldrpl	r2, [r4, #20]
 800e580:	60a2      	str	r2, [r4, #8]
 800e582:	e7f4      	b.n	800e56e <__swsetup_r+0x8e>
 800e584:	2000      	movs	r0, #0
 800e586:	e7f7      	b.n	800e578 <__swsetup_r+0x98>
 800e588:	24000b5c 	.word	0x24000b5c

0800e58c <_raise_r>:
 800e58c:	291f      	cmp	r1, #31
 800e58e:	b538      	push	{r3, r4, r5, lr}
 800e590:	4605      	mov	r5, r0
 800e592:	460c      	mov	r4, r1
 800e594:	d904      	bls.n	800e5a0 <_raise_r+0x14>
 800e596:	2316      	movs	r3, #22
 800e598:	6003      	str	r3, [r0, #0]
 800e59a:	f04f 30ff 	mov.w	r0, #4294967295
 800e59e:	bd38      	pop	{r3, r4, r5, pc}
 800e5a0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e5a2:	b112      	cbz	r2, 800e5aa <_raise_r+0x1e>
 800e5a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e5a8:	b94b      	cbnz	r3, 800e5be <_raise_r+0x32>
 800e5aa:	4628      	mov	r0, r5
 800e5ac:	f000 f830 	bl	800e610 <_getpid_r>
 800e5b0:	4622      	mov	r2, r4
 800e5b2:	4601      	mov	r1, r0
 800e5b4:	4628      	mov	r0, r5
 800e5b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e5ba:	f000 b817 	b.w	800e5ec <_kill_r>
 800e5be:	2b01      	cmp	r3, #1
 800e5c0:	d00a      	beq.n	800e5d8 <_raise_r+0x4c>
 800e5c2:	1c59      	adds	r1, r3, #1
 800e5c4:	d103      	bne.n	800e5ce <_raise_r+0x42>
 800e5c6:	2316      	movs	r3, #22
 800e5c8:	6003      	str	r3, [r0, #0]
 800e5ca:	2001      	movs	r0, #1
 800e5cc:	e7e7      	b.n	800e59e <_raise_r+0x12>
 800e5ce:	2100      	movs	r1, #0
 800e5d0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e5d4:	4620      	mov	r0, r4
 800e5d6:	4798      	blx	r3
 800e5d8:	2000      	movs	r0, #0
 800e5da:	e7e0      	b.n	800e59e <_raise_r+0x12>

0800e5dc <raise>:
 800e5dc:	4b02      	ldr	r3, [pc, #8]	@ (800e5e8 <raise+0xc>)
 800e5de:	4601      	mov	r1, r0
 800e5e0:	6818      	ldr	r0, [r3, #0]
 800e5e2:	f7ff bfd3 	b.w	800e58c <_raise_r>
 800e5e6:	bf00      	nop
 800e5e8:	24000b5c 	.word	0x24000b5c

0800e5ec <_kill_r>:
 800e5ec:	b538      	push	{r3, r4, r5, lr}
 800e5ee:	4d07      	ldr	r5, [pc, #28]	@ (800e60c <_kill_r+0x20>)
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	4604      	mov	r4, r0
 800e5f4:	4608      	mov	r0, r1
 800e5f6:	4611      	mov	r1, r2
 800e5f8:	602b      	str	r3, [r5, #0]
 800e5fa:	f000 fa77 	bl	800eaec <_kill>
 800e5fe:	1c43      	adds	r3, r0, #1
 800e600:	d102      	bne.n	800e608 <_kill_r+0x1c>
 800e602:	682b      	ldr	r3, [r5, #0]
 800e604:	b103      	cbz	r3, 800e608 <_kill_r+0x1c>
 800e606:	6023      	str	r3, [r4, #0]
 800e608:	bd38      	pop	{r3, r4, r5, pc}
 800e60a:	bf00      	nop
 800e60c:	240692e8 	.word	0x240692e8

0800e610 <_getpid_r>:
 800e610:	f000 ba5c 	b.w	800eacc <_getpid>

0800e614 <__swhatbuf_r>:
 800e614:	b570      	push	{r4, r5, r6, lr}
 800e616:	460c      	mov	r4, r1
 800e618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e61c:	2900      	cmp	r1, #0
 800e61e:	b096      	sub	sp, #88	@ 0x58
 800e620:	4615      	mov	r5, r2
 800e622:	461e      	mov	r6, r3
 800e624:	da0d      	bge.n	800e642 <__swhatbuf_r+0x2e>
 800e626:	89a3      	ldrh	r3, [r4, #12]
 800e628:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e62c:	f04f 0100 	mov.w	r1, #0
 800e630:	bf14      	ite	ne
 800e632:	2340      	movne	r3, #64	@ 0x40
 800e634:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e638:	2000      	movs	r0, #0
 800e63a:	6031      	str	r1, [r6, #0]
 800e63c:	602b      	str	r3, [r5, #0]
 800e63e:	b016      	add	sp, #88	@ 0x58
 800e640:	bd70      	pop	{r4, r5, r6, pc}
 800e642:	466a      	mov	r2, sp
 800e644:	f000 f848 	bl	800e6d8 <_fstat_r>
 800e648:	2800      	cmp	r0, #0
 800e64a:	dbec      	blt.n	800e626 <__swhatbuf_r+0x12>
 800e64c:	9901      	ldr	r1, [sp, #4]
 800e64e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e652:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e656:	4259      	negs	r1, r3
 800e658:	4159      	adcs	r1, r3
 800e65a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e65e:	e7eb      	b.n	800e638 <__swhatbuf_r+0x24>

0800e660 <__smakebuf_r>:
 800e660:	898b      	ldrh	r3, [r1, #12]
 800e662:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e664:	079d      	lsls	r5, r3, #30
 800e666:	4606      	mov	r6, r0
 800e668:	460c      	mov	r4, r1
 800e66a:	d507      	bpl.n	800e67c <__smakebuf_r+0x1c>
 800e66c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e670:	6023      	str	r3, [r4, #0]
 800e672:	6123      	str	r3, [r4, #16]
 800e674:	2301      	movs	r3, #1
 800e676:	6163      	str	r3, [r4, #20]
 800e678:	b003      	add	sp, #12
 800e67a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e67c:	ab01      	add	r3, sp, #4
 800e67e:	466a      	mov	r2, sp
 800e680:	f7ff ffc8 	bl	800e614 <__swhatbuf_r>
 800e684:	9f00      	ldr	r7, [sp, #0]
 800e686:	4605      	mov	r5, r0
 800e688:	4639      	mov	r1, r7
 800e68a:	4630      	mov	r0, r6
 800e68c:	f7fd faa2 	bl	800bbd4 <_malloc_r>
 800e690:	b948      	cbnz	r0, 800e6a6 <__smakebuf_r+0x46>
 800e692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e696:	059a      	lsls	r2, r3, #22
 800e698:	d4ee      	bmi.n	800e678 <__smakebuf_r+0x18>
 800e69a:	f023 0303 	bic.w	r3, r3, #3
 800e69e:	f043 0302 	orr.w	r3, r3, #2
 800e6a2:	81a3      	strh	r3, [r4, #12]
 800e6a4:	e7e2      	b.n	800e66c <__smakebuf_r+0xc>
 800e6a6:	89a3      	ldrh	r3, [r4, #12]
 800e6a8:	6020      	str	r0, [r4, #0]
 800e6aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e6ae:	81a3      	strh	r3, [r4, #12]
 800e6b0:	9b01      	ldr	r3, [sp, #4]
 800e6b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e6b6:	b15b      	cbz	r3, 800e6d0 <__smakebuf_r+0x70>
 800e6b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e6bc:	4630      	mov	r0, r6
 800e6be:	f000 f81d 	bl	800e6fc <_isatty_r>
 800e6c2:	b128      	cbz	r0, 800e6d0 <__smakebuf_r+0x70>
 800e6c4:	89a3      	ldrh	r3, [r4, #12]
 800e6c6:	f023 0303 	bic.w	r3, r3, #3
 800e6ca:	f043 0301 	orr.w	r3, r3, #1
 800e6ce:	81a3      	strh	r3, [r4, #12]
 800e6d0:	89a3      	ldrh	r3, [r4, #12]
 800e6d2:	431d      	orrs	r5, r3
 800e6d4:	81a5      	strh	r5, [r4, #12]
 800e6d6:	e7cf      	b.n	800e678 <__smakebuf_r+0x18>

0800e6d8 <_fstat_r>:
 800e6d8:	b538      	push	{r3, r4, r5, lr}
 800e6da:	4d07      	ldr	r5, [pc, #28]	@ (800e6f8 <_fstat_r+0x20>)
 800e6dc:	2300      	movs	r3, #0
 800e6de:	4604      	mov	r4, r0
 800e6e0:	4608      	mov	r0, r1
 800e6e2:	4611      	mov	r1, r2
 800e6e4:	602b      	str	r3, [r5, #0]
 800e6e6:	f000 f9e9 	bl	800eabc <_fstat>
 800e6ea:	1c43      	adds	r3, r0, #1
 800e6ec:	d102      	bne.n	800e6f4 <_fstat_r+0x1c>
 800e6ee:	682b      	ldr	r3, [r5, #0]
 800e6f0:	b103      	cbz	r3, 800e6f4 <_fstat_r+0x1c>
 800e6f2:	6023      	str	r3, [r4, #0]
 800e6f4:	bd38      	pop	{r3, r4, r5, pc}
 800e6f6:	bf00      	nop
 800e6f8:	240692e8 	.word	0x240692e8

0800e6fc <_isatty_r>:
 800e6fc:	b538      	push	{r3, r4, r5, lr}
 800e6fe:	4d06      	ldr	r5, [pc, #24]	@ (800e718 <_isatty_r+0x1c>)
 800e700:	2300      	movs	r3, #0
 800e702:	4604      	mov	r4, r0
 800e704:	4608      	mov	r0, r1
 800e706:	602b      	str	r3, [r5, #0]
 800e708:	f000 f9e8 	bl	800eadc <_isatty>
 800e70c:	1c43      	adds	r3, r0, #1
 800e70e:	d102      	bne.n	800e716 <_isatty_r+0x1a>
 800e710:	682b      	ldr	r3, [r5, #0]
 800e712:	b103      	cbz	r3, 800e716 <_isatty_r+0x1a>
 800e714:	6023      	str	r3, [r4, #0]
 800e716:	bd38      	pop	{r3, r4, r5, pc}
 800e718:	240692e8 	.word	0x240692e8

0800e71c <checkint>:
 800e71c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800e720:	2b7e      	cmp	r3, #126	@ 0x7e
 800e722:	d910      	bls.n	800e746 <checkint+0x2a>
 800e724:	2b96      	cmp	r3, #150	@ 0x96
 800e726:	d80c      	bhi.n	800e742 <checkint+0x26>
 800e728:	2201      	movs	r2, #1
 800e72a:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800e72e:	fa02 f303 	lsl.w	r3, r2, r3
 800e732:	1e5a      	subs	r2, r3, #1
 800e734:	4202      	tst	r2, r0
 800e736:	d106      	bne.n	800e746 <checkint+0x2a>
 800e738:	4203      	tst	r3, r0
 800e73a:	bf0c      	ite	eq
 800e73c:	2002      	moveq	r0, #2
 800e73e:	2001      	movne	r0, #1
 800e740:	4770      	bx	lr
 800e742:	2002      	movs	r0, #2
 800e744:	4770      	bx	lr
 800e746:	2000      	movs	r0, #0
 800e748:	4770      	bx	lr
 800e74a:	0000      	movs	r0, r0
 800e74c:	0000      	movs	r0, r0
	...

0800e750 <powf>:
 800e750:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e752:	ee10 1a10 	vmov	r1, s0
 800e756:	ee10 4a90 	vmov	r4, s1
 800e75a:	f5a1 0200 	sub.w	r2, r1, #8388608	@ 0x800000
 800e75e:	0063      	lsls	r3, r4, #1
 800e760:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800e764:	eef0 7a40 	vmov.f32	s15, s0
 800e768:	eeb0 7a60 	vmov.f32	s14, s1
 800e76c:	f103 30ff 	add.w	r0, r3, #4294967295
 800e770:	f06f 7280 	mvn.w	r2, #16777216	@ 0x1000000
 800e774:	d252      	bcs.n	800e81c <powf+0xcc>
 800e776:	4290      	cmp	r0, r2
 800e778:	d258      	bcs.n	800e82c <powf+0xdc>
 800e77a:	2000      	movs	r0, #0
 800e77c:	f101 4340 	add.w	r3, r1, #3221225472	@ 0xc0000000
 800e780:	f503 034d 	add.w	r3, r3, #13434880	@ 0xcd0000
 800e784:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 800e788:	0ddb      	lsrs	r3, r3, #23
 800e78a:	4a9d      	ldr	r2, [pc, #628]	@ (800ea00 <powf+0x2b0>)
 800e78c:	eebf 2b00 	vmov.f64	d2, #240	@ 0xbf800000 -1.0
 800e790:	05db      	lsls	r3, r3, #23
 800e792:	1ac9      	subs	r1, r1, r3
 800e794:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 800e798:	ee07 1a90 	vmov	s15, r1
 800e79c:	ed94 5b02 	vldr	d5, [r4, #8]
 800e7a0:	ed94 4b00 	vldr	d4, [r4]
 800e7a4:	15db      	asrs	r3, r3, #23
 800e7a6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800e7aa:	ee07 3a90 	vmov	s15, r3
 800e7ae:	eea4 2b06 	vfma.f64	d2, d4, d6
 800e7b2:	ed92 1b42 	vldr	d1, [r2, #264]	@ 0x108
 800e7b6:	ee22 4b02 	vmul.f64	d4, d2, d2
 800e7ba:	ee24 0b04 	vmul.f64	d0, d4, d4
 800e7be:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800e7c2:	ee36 6b05 	vadd.f64	d6, d6, d5
 800e7c6:	ed92 5b40 	vldr	d5, [r2, #256]	@ 0x100
 800e7ca:	ed92 3b44 	vldr	d3, [r2, #272]	@ 0x110
 800e7ce:	eea2 1b05 	vfma.f64	d1, d2, d5
 800e7d2:	ed92 5b46 	vldr	d5, [r2, #280]	@ 0x118
 800e7d6:	eea2 5b03 	vfma.f64	d5, d2, d3
 800e7da:	ed92 3b48 	vldr	d3, [r2, #288]	@ 0x120
 800e7de:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800e7e2:	eea2 6b03 	vfma.f64	d6, d2, d3
 800e7e6:	eea4 6b05 	vfma.f64	d6, d4, d5
 800e7ea:	eea1 6b00 	vfma.f64	d6, d1, d0
 800e7ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e7f2:	ee17 3a90 	vmov	r3, s15
 800e7f6:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 800e7fa:	f248 03bf 	movw	r3, #32959	@ 0x80bf
 800e7fe:	429a      	cmp	r2, r3
 800e800:	f0c0 80b8 	bcc.w	800e974 <powf+0x224>
 800e804:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 800e9e0 <powf+0x290>
 800e808:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e80c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e810:	dd79      	ble.n	800e906 <powf+0x1b6>
 800e812:	b003      	add	sp, #12
 800e814:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e818:	f000 b920 	b.w	800ea5c <__math_oflowf>
 800e81c:	4290      	cmp	r0, r2
 800e81e:	d330      	bcc.n	800e882 <powf+0x132>
 800e820:	b12b      	cbz	r3, 800e82e <powf+0xde>
 800e822:	0049      	lsls	r1, r1, #1
 800e824:	f1b1 4f7f 	cmp.w	r1, #4278190080	@ 0xff000000
 800e828:	d808      	bhi.n	800e83c <powf+0xec>
 800e82a:	e015      	b.n	800e858 <powf+0x108>
 800e82c:	b953      	cbnz	r3, 800e844 <powf+0xf4>
 800e82e:	f481 0180 	eor.w	r1, r1, #4194304	@ 0x400000
 800e832:	0049      	lsls	r1, r1, #1
 800e834:	f511 0f00 	cmn.w	r1, #8388608	@ 0x800000
 800e838:	f240 80ca 	bls.w	800e9d0 <powf+0x280>
 800e83c:	ee37 0a87 	vadd.f32	s0, s15, s14
 800e840:	b003      	add	sp, #12
 800e842:	bd30      	pop	{r4, r5, pc}
 800e844:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 800e848:	d105      	bne.n	800e856 <powf+0x106>
 800e84a:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800e84e:	0064      	lsls	r4, r4, #1
 800e850:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800e854:	e7f0      	b.n	800e838 <powf+0xe8>
 800e856:	0049      	lsls	r1, r1, #1
 800e858:	f1b3 4f7f 	cmp.w	r3, #4278190080	@ 0xff000000
 800e85c:	d1ee      	bne.n	800e83c <powf+0xec>
 800e85e:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 800e862:	f000 80b5 	beq.w	800e9d0 <powf+0x280>
 800e866:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 800e86a:	ea6f 0404 	mvn.w	r4, r4
 800e86e:	bf34      	ite	cc
 800e870:	2100      	movcc	r1, #0
 800e872:	2101      	movcs	r1, #1
 800e874:	0fe4      	lsrs	r4, r4, #31
 800e876:	42a1      	cmp	r1, r4
 800e878:	f040 80ad 	bne.w	800e9d6 <powf+0x286>
 800e87c:	ee27 0a07 	vmul.f32	s0, s14, s14
 800e880:	e7de      	b.n	800e840 <powf+0xf0>
 800e882:	004d      	lsls	r5, r1, #1
 800e884:	1e6b      	subs	r3, r5, #1
 800e886:	4293      	cmp	r3, r2
 800e888:	d31b      	bcc.n	800e8c2 <powf+0x172>
 800e88a:	2900      	cmp	r1, #0
 800e88c:	ee20 0a00 	vmul.f32	s0, s0, s0
 800e890:	da0e      	bge.n	800e8b0 <powf+0x160>
 800e892:	4620      	mov	r0, r4
 800e894:	f7ff ff42 	bl	800e71c <checkint>
 800e898:	2801      	cmp	r0, #1
 800e89a:	d109      	bne.n	800e8b0 <powf+0x160>
 800e89c:	eeb1 0a40 	vneg.f32	s0, s0
 800e8a0:	b945      	cbnz	r5, 800e8b4 <powf+0x164>
 800e8a2:	2c00      	cmp	r4, #0
 800e8a4:	dacc      	bge.n	800e840 <powf+0xf0>
 800e8a6:	b003      	add	sp, #12
 800e8a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e8ac:	f000 b8dc 	b.w	800ea68 <__math_divzerof>
 800e8b0:	2000      	movs	r0, #0
 800e8b2:	e7f5      	b.n	800e8a0 <powf+0x150>
 800e8b4:	2c00      	cmp	r4, #0
 800e8b6:	dac3      	bge.n	800e840 <powf+0xf0>
 800e8b8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800e8bc:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800e8c0:	e7be      	b.n	800e840 <powf+0xf0>
 800e8c2:	2900      	cmp	r1, #0
 800e8c4:	da1d      	bge.n	800e902 <powf+0x1b2>
 800e8c6:	4620      	mov	r0, r4
 800e8c8:	f7ff ff28 	bl	800e71c <checkint>
 800e8cc:	b920      	cbnz	r0, 800e8d8 <powf+0x188>
 800e8ce:	b003      	add	sp, #12
 800e8d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e8d4:	f000 b8da 	b.w	800ea8c <__math_invalidf>
 800e8d8:	1e43      	subs	r3, r0, #1
 800e8da:	4258      	negs	r0, r3
 800e8dc:	4158      	adcs	r0, r3
 800e8de:	0400      	lsls	r0, r0, #16
 800e8e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800e8e4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800e8e8:	f4bf af48 	bcs.w	800e77c <powf+0x2c>
 800e8ec:	eddf 6a45 	vldr	s13, [pc, #276]	@ 800ea04 <powf+0x2b4>
 800e8f0:	ee27 0aa6 	vmul.f32	s0, s15, s13
 800e8f4:	ee10 3a10 	vmov	r3, s0
 800e8f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e8fc:	f1a3 6138 	sub.w	r1, r3, #192937984	@ 0xb800000
 800e900:	e73c      	b.n	800e77c <powf+0x2c>
 800e902:	2000      	movs	r0, #0
 800e904:	e7ee      	b.n	800e8e4 <powf+0x194>
 800e906:	ed9f 6b38 	vldr	d6, [pc, #224]	@ 800e9e8 <powf+0x298>
 800e90a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e90e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e912:	dd0f      	ble.n	800e934 <powf+0x1e4>
 800e914:	f04f 534c 	mov.w	r3, #855638016	@ 0x33000000
 800e918:	b1c0      	cbz	r0, 800e94c <powf+0x1fc>
 800e91a:	9301      	str	r3, [sp, #4]
 800e91c:	eddd 6a01 	vldr	s13, [sp, #4]
 800e920:	eebf 6a00 	vmov.f32	s12, #240	@ 0xbf800000 -1.0
 800e924:	ee76 6a66 	vsub.f32	s13, s12, s13
 800e928:	eef4 6a46 	vcmp.f32	s13, s12
 800e92c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e930:	f47f af6f 	bne.w	800e812 <powf+0xc2>
 800e934:	ed9f 6b2e 	vldr	d6, [pc, #184]	@ 800e9f0 <powf+0x2a0>
 800e938:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e93c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e940:	d80c      	bhi.n	800e95c <powf+0x20c>
 800e942:	b003      	add	sp, #12
 800e944:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e948:	f000 b87c 	b.w	800ea44 <__math_uflowf>
 800e94c:	9300      	str	r3, [sp, #0]
 800e94e:	eddd 6a00 	vldr	s13, [sp]
 800e952:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800e956:	ee76 6a86 	vadd.f32	s13, s13, s12
 800e95a:	e7e5      	b.n	800e928 <powf+0x1d8>
 800e95c:	ed9f 6b26 	vldr	d6, [pc, #152]	@ 800e9f8 <powf+0x2a8>
 800e960:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e968:	d504      	bpl.n	800e974 <powf+0x224>
 800e96a:	b003      	add	sp, #12
 800e96c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e970:	f000 b86e 	b.w	800ea50 <__math_may_uflowf>
 800e974:	4b24      	ldr	r3, [pc, #144]	@ (800ea08 <powf+0x2b8>)
 800e976:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800e97a:	ed93 5b40 	vldr	d5, [r3, #256]	@ 0x100
 800e97e:	ee37 6b05 	vadd.f64	d6, d7, d5
 800e982:	ee16 2a10 	vmov	r2, s12
 800e986:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e98a:	f002 011f 	and.w	r1, r2, #31
 800e98e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e992:	ed93 5b42 	vldr	d5, [r3, #264]	@ 0x108
 800e996:	ee27 4b07 	vmul.f64	d4, d7, d7
 800e99a:	ed93 6b44 	vldr	d6, [r3, #272]	@ 0x110
 800e99e:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 800e9a2:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 800e9a6:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e9aa:	686d      	ldr	r5, [r5, #4]
 800e9ac:	ed93 5b46 	vldr	d5, [r3, #280]	@ 0x118
 800e9b0:	1880      	adds	r0, r0, r2
 800e9b2:	2100      	movs	r1, #0
 800e9b4:	190a      	adds	r2, r1, r4
 800e9b6:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 800e9ba:	eea7 0b05 	vfma.f64	d0, d7, d5
 800e9be:	ec43 2b17 	vmov	d7, r2, r3
 800e9c2:	eea6 0b04 	vfma.f64	d0, d6, d4
 800e9c6:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e9ca:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800e9ce:	e737      	b.n	800e840 <powf+0xf0>
 800e9d0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800e9d4:	e734      	b.n	800e840 <powf+0xf0>
 800e9d6:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 800ea0c <powf+0x2bc>
 800e9da:	e731      	b.n	800e840 <powf+0xf0>
 800e9dc:	f3af 8000 	nop.w
 800e9e0:	ffd1d571 	.word	0xffd1d571
 800e9e4:	405fffff 	.word	0x405fffff
 800e9e8:	ffa3aae2 	.word	0xffa3aae2
 800e9ec:	405fffff 	.word	0x405fffff
 800e9f0:	00000000 	.word	0x00000000
 800e9f4:	c062c000 	.word	0xc062c000
 800e9f8:	00000000 	.word	0x00000000
 800e9fc:	c062a000 	.word	0xc062a000
 800ea00:	0806d6c0 	.word	0x0806d6c0
 800ea04:	4b000000 	.word	0x4b000000
 800ea08:	0806d578 	.word	0x0806d578
 800ea0c:	00000000 	.word	0x00000000

0800ea10 <with_errnof>:
 800ea10:	b510      	push	{r4, lr}
 800ea12:	ed2d 8b02 	vpush	{d8}
 800ea16:	eeb0 8a40 	vmov.f32	s16, s0
 800ea1a:	4604      	mov	r4, r0
 800ea1c:	f7fd ff7c 	bl	800c918 <__errno>
 800ea20:	eeb0 0a48 	vmov.f32	s0, s16
 800ea24:	ecbd 8b02 	vpop	{d8}
 800ea28:	6004      	str	r4, [r0, #0]
 800ea2a:	bd10      	pop	{r4, pc}

0800ea2c <xflowf>:
 800ea2c:	b130      	cbz	r0, 800ea3c <xflowf+0x10>
 800ea2e:	eef1 7a40 	vneg.f32	s15, s0
 800ea32:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ea36:	2022      	movs	r0, #34	@ 0x22
 800ea38:	f7ff bfea 	b.w	800ea10 <with_errnof>
 800ea3c:	eef0 7a40 	vmov.f32	s15, s0
 800ea40:	e7f7      	b.n	800ea32 <xflowf+0x6>
	...

0800ea44 <__math_uflowf>:
 800ea44:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ea4c <__math_uflowf+0x8>
 800ea48:	f7ff bff0 	b.w	800ea2c <xflowf>
 800ea4c:	10000000 	.word	0x10000000

0800ea50 <__math_may_uflowf>:
 800ea50:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ea58 <__math_may_uflowf+0x8>
 800ea54:	f7ff bfea 	b.w	800ea2c <xflowf>
 800ea58:	1a200000 	.word	0x1a200000

0800ea5c <__math_oflowf>:
 800ea5c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ea64 <__math_oflowf+0x8>
 800ea60:	f7ff bfe4 	b.w	800ea2c <xflowf>
 800ea64:	70000000 	.word	0x70000000

0800ea68 <__math_divzerof>:
 800ea68:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 800ea88 <__math_divzerof+0x20>
 800ea6c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ea70:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800ea74:	2800      	cmp	r0, #0
 800ea76:	f04f 0022 	mov.w	r0, #34	@ 0x22
 800ea7a:	fe47 7a87 	vseleq.f32	s15, s15, s14
 800ea7e:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800ea82:	f7ff bfc5 	b.w	800ea10 <with_errnof>
 800ea86:	bf00      	nop
 800ea88:	00000000 	.word	0x00000000

0800ea8c <__math_invalidf>:
 800ea8c:	eef0 7a40 	vmov.f32	s15, s0
 800ea90:	ee30 7a40 	vsub.f32	s14, s0, s0
 800ea94:	eef4 7a67 	vcmp.f32	s15, s15
 800ea98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea9c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800eaa0:	d602      	bvs.n	800eaa8 <__math_invalidf+0x1c>
 800eaa2:	2021      	movs	r0, #33	@ 0x21
 800eaa4:	f7ff bfb4 	b.w	800ea10 <with_errnof>
 800eaa8:	4770      	bx	lr
	...

0800eaac <_close>:
 800eaac:	4b02      	ldr	r3, [pc, #8]	@ (800eab8 <_close+0xc>)
 800eaae:	2258      	movs	r2, #88	@ 0x58
 800eab0:	601a      	str	r2, [r3, #0]
 800eab2:	f04f 30ff 	mov.w	r0, #4294967295
 800eab6:	4770      	bx	lr
 800eab8:	240692e8 	.word	0x240692e8

0800eabc <_fstat>:
 800eabc:	4b02      	ldr	r3, [pc, #8]	@ (800eac8 <_fstat+0xc>)
 800eabe:	2258      	movs	r2, #88	@ 0x58
 800eac0:	601a      	str	r2, [r3, #0]
 800eac2:	f04f 30ff 	mov.w	r0, #4294967295
 800eac6:	4770      	bx	lr
 800eac8:	240692e8 	.word	0x240692e8

0800eacc <_getpid>:
 800eacc:	4b02      	ldr	r3, [pc, #8]	@ (800ead8 <_getpid+0xc>)
 800eace:	2258      	movs	r2, #88	@ 0x58
 800ead0:	601a      	str	r2, [r3, #0]
 800ead2:	f04f 30ff 	mov.w	r0, #4294967295
 800ead6:	4770      	bx	lr
 800ead8:	240692e8 	.word	0x240692e8

0800eadc <_isatty>:
 800eadc:	4b02      	ldr	r3, [pc, #8]	@ (800eae8 <_isatty+0xc>)
 800eade:	2258      	movs	r2, #88	@ 0x58
 800eae0:	601a      	str	r2, [r3, #0]
 800eae2:	2000      	movs	r0, #0
 800eae4:	4770      	bx	lr
 800eae6:	bf00      	nop
 800eae8:	240692e8 	.word	0x240692e8

0800eaec <_kill>:
 800eaec:	4b02      	ldr	r3, [pc, #8]	@ (800eaf8 <_kill+0xc>)
 800eaee:	2258      	movs	r2, #88	@ 0x58
 800eaf0:	601a      	str	r2, [r3, #0]
 800eaf2:	f04f 30ff 	mov.w	r0, #4294967295
 800eaf6:	4770      	bx	lr
 800eaf8:	240692e8 	.word	0x240692e8

0800eafc <_lseek>:
 800eafc:	4b02      	ldr	r3, [pc, #8]	@ (800eb08 <_lseek+0xc>)
 800eafe:	2258      	movs	r2, #88	@ 0x58
 800eb00:	601a      	str	r2, [r3, #0]
 800eb02:	f04f 30ff 	mov.w	r0, #4294967295
 800eb06:	4770      	bx	lr
 800eb08:	240692e8 	.word	0x240692e8

0800eb0c <_read>:
 800eb0c:	4b02      	ldr	r3, [pc, #8]	@ (800eb18 <_read+0xc>)
 800eb0e:	2258      	movs	r2, #88	@ 0x58
 800eb10:	601a      	str	r2, [r3, #0]
 800eb12:	f04f 30ff 	mov.w	r0, #4294967295
 800eb16:	4770      	bx	lr
 800eb18:	240692e8 	.word	0x240692e8

0800eb1c <_write>:
 800eb1c:	4b02      	ldr	r3, [pc, #8]	@ (800eb28 <_write+0xc>)
 800eb1e:	2258      	movs	r2, #88	@ 0x58
 800eb20:	601a      	str	r2, [r3, #0]
 800eb22:	f04f 30ff 	mov.w	r0, #4294967295
 800eb26:	4770      	bx	lr
 800eb28:	240692e8 	.word	0x240692e8

0800eb2c <_exit>:
 800eb2c:	e7fe      	b.n	800eb2c <_exit>
	...

0800eb30 <_init>:
 800eb30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb32:	bf00      	nop
 800eb34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb36:	bc08      	pop	{r3}
 800eb38:	469e      	mov	lr, r3
 800eb3a:	4770      	bx	lr

0800eb3c <_fini>:
 800eb3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb3e:	bf00      	nop
 800eb40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb42:	bc08      	pop	{r3}
 800eb44:	469e      	mov	lr, r3
 800eb46:	4770      	bx	lr
