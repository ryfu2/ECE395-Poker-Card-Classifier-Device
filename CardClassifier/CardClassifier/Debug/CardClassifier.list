
CardClassifier.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e74  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800410c  0800410c  0000510c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004144  08004144  00005144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08004148  08004148  00005148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000014  24000000  0800414c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000078  24000014  08004160  00006014  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400008c  08004160  0000608c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000cb8b  00000000  00000000  00006042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001cab  00000000  00000000  00012bcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000a48  00000000  00000000  00014878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000007d0  00000000  00000000  000152c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00035312  00000000  00000000  00015a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000e424  00000000  00000000  0004ada2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014fe8e  00000000  00000000  000591c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001a9054  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002964  00000000  00000000  001a9098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000073  00000000  00000000  001ab9fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000014 	.word	0x24000014
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080040f4 	.word	0x080040f4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000018 	.word	0x24000018
 80002d4:	080040f4 	.word	0x080040f4

080002d8 <lcd_send_cmd>:
#include "lcd.h"
#include "main.h"
I2C_HandleTypeDef  *lcd_sp_hi2c;
uint16_t SLAVE_ADDRESS_LCD = 0x4E;
void lcd_send_cmd (char cmd)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b086      	sub	sp, #24
 80002dc:	af02      	add	r7, sp, #8
 80002de:	4603      	mov	r3, r0
 80002e0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80002e2:	79fb      	ldrb	r3, [r7, #7]
 80002e4:	f023 030f 	bic.w	r3, r3, #15
 80002e8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	011b      	lsls	r3, r3, #4
 80002ee:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80002f0:	7bfb      	ldrb	r3, [r7, #15]
 80002f2:	f043 030c 	orr.w	r3, r3, #12
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80002fa:	7bfb      	ldrb	r3, [r7, #15]
 80002fc:	f043 0308 	orr.w	r3, r3, #8
 8000300:	b2db      	uxtb	r3, r3
 8000302:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000304:	7bbb      	ldrb	r3, [r7, #14]
 8000306:	f043 030c 	orr.w	r3, r3, #12
 800030a:	b2db      	uxtb	r3, r3
 800030c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800030e:	7bbb      	ldrb	r3, [r7, #14]
 8000310:	f043 0308 	orr.w	r3, r3, #8
 8000314:	b2db      	uxtb	r3, r3
 8000316:	72fb      	strb	r3, [r7, #11]
	uint16_t ret = HAL_I2C_Master_Transmit (lcd_sp_hi2c, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000318:	4b08      	ldr	r3, [pc, #32]	@ (800033c <lcd_send_cmd+0x64>)
 800031a:	6818      	ldr	r0, [r3, #0]
 800031c:	4b08      	ldr	r3, [pc, #32]	@ (8000340 <lcd_send_cmd+0x68>)
 800031e:	8819      	ldrh	r1, [r3, #0]
 8000320:	f107 0208 	add.w	r2, r7, #8
 8000324:	2364      	movs	r3, #100	@ 0x64
 8000326:	9300      	str	r3, [sp, #0]
 8000328:	2304      	movs	r3, #4
 800032a:	f000 ffbb 	bl	80012a4 <HAL_I2C_Master_Transmit>
 800032e:	4603      	mov	r3, r0
 8000330:	81bb      	strh	r3, [r7, #12]
}
 8000332:	bf00      	nop
 8000334:	3710      	adds	r7, #16
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	24000030 	.word	0x24000030
 8000340:	24000000 	.word	0x24000000

08000344 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b086      	sub	sp, #24
 8000348:	af02      	add	r7, sp, #8
 800034a:	4603      	mov	r3, r0
 800034c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800034e:	79fb      	ldrb	r3, [r7, #7]
 8000350:	f023 030f 	bic.w	r3, r3, #15
 8000354:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000356:	79fb      	ldrb	r3, [r7, #7]
 8000358:	011b      	lsls	r3, r3, #4
 800035a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 800035c:	7bfb      	ldrb	r3, [r7, #15]
 800035e:	f043 030d 	orr.w	r3, r3, #13
 8000362:	b2db      	uxtb	r3, r3
 8000364:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8000366:	7bfb      	ldrb	r3, [r7, #15]
 8000368:	f043 0309 	orr.w	r3, r3, #9
 800036c:	b2db      	uxtb	r3, r3
 800036e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8000370:	7bbb      	ldrb	r3, [r7, #14]
 8000372:	f043 030d 	orr.w	r3, r3, #13
 8000376:	b2db      	uxtb	r3, r3
 8000378:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 800037a:	7bbb      	ldrb	r3, [r7, #14]
 800037c:	f043 0309 	orr.w	r3, r3, #9
 8000380:	b2db      	uxtb	r3, r3
 8000382:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (lcd_sp_hi2c, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000384:	4b07      	ldr	r3, [pc, #28]	@ (80003a4 <lcd_send_data+0x60>)
 8000386:	6818      	ldr	r0, [r3, #0]
 8000388:	4b07      	ldr	r3, [pc, #28]	@ (80003a8 <lcd_send_data+0x64>)
 800038a:	8819      	ldrh	r1, [r3, #0]
 800038c:	f107 0208 	add.w	r2, r7, #8
 8000390:	2364      	movs	r3, #100	@ 0x64
 8000392:	9300      	str	r3, [sp, #0]
 8000394:	2304      	movs	r3, #4
 8000396:	f000 ff85 	bl	80012a4 <HAL_I2C_Master_Transmit>
}
 800039a:	bf00      	nop
 800039c:	3710      	adds	r7, #16
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	24000030 	.word	0x24000030
 80003a8:	24000000 	.word	0x24000000

080003ac <lcd_send_string>:
void lcd_send_string (char *str)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
	while (*str) {
 80003b4:	e009      	b.n	80003ca <lcd_send_string+0x1e>
		HAL_Delay(10);
 80003b6:	200a      	movs	r0, #10
 80003b8:	f000 fb9c 	bl	8000af4 <HAL_Delay>
		lcd_send_data (*str++);
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	1c5a      	adds	r2, r3, #1
 80003c0:	607a      	str	r2, [r7, #4]
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	4618      	mov	r0, r3
 80003c6:	f7ff ffbd 	bl	8000344 <lcd_send_data>
	while (*str) {
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d1f1      	bne.n	80003b6 <lcd_send_string+0xa>
	}
}
 80003d2:	bf00      	nop
 80003d4:	bf00      	nop
 80003d6:	3708      	adds	r7, #8
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}

080003dc <lcd_init>:

void lcd_init (I2C_HandleTypeDef* p_hi2c)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
	lcd_sp_hi2c = p_hi2c;
 80003e4:	4a21      	ldr	r2, [pc, #132]	@ (800046c <lcd_init+0x90>)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	6013      	str	r3, [r2, #0]
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80003ea:	2032      	movs	r0, #50	@ 0x32
 80003ec:	f000 fb82 	bl	8000af4 <HAL_Delay>
	lcd_send_cmd (0x30);
 80003f0:	2030      	movs	r0, #48	@ 0x30
 80003f2:	f7ff ff71 	bl	80002d8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80003f6:	2005      	movs	r0, #5
 80003f8:	f000 fb7c 	bl	8000af4 <HAL_Delay>
	lcd_send_cmd (0x30);
 80003fc:	2030      	movs	r0, #48	@ 0x30
 80003fe:	f7ff ff6b 	bl	80002d8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000402:	2001      	movs	r0, #1
 8000404:	f000 fb76 	bl	8000af4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000408:	2030      	movs	r0, #48	@ 0x30
 800040a:	f7ff ff65 	bl	80002d8 <lcd_send_cmd>
	HAL_Delay(10);
 800040e:	200a      	movs	r0, #10
 8000410:	f000 fb70 	bl	8000af4 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000414:	2020      	movs	r0, #32
 8000416:	f7ff ff5f 	bl	80002d8 <lcd_send_cmd>
	HAL_Delay(10);
 800041a:	200a      	movs	r0, #10
 800041c:	f000 fb6a 	bl	8000af4 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000420:	2028      	movs	r0, #40	@ 0x28
 8000422:	f7ff ff59 	bl	80002d8 <lcd_send_cmd>
	HAL_Delay(1);
 8000426:	2001      	movs	r0, #1
 8000428:	f000 fb64 	bl	8000af4 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800042c:	2008      	movs	r0, #8
 800042e:	f7ff ff53 	bl	80002d8 <lcd_send_cmd>
	HAL_Delay(1);
 8000432:	2001      	movs	r0, #1
 8000434:	f000 fb5e 	bl	8000af4 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000438:	2001      	movs	r0, #1
 800043a:	f7ff ff4d 	bl	80002d8 <lcd_send_cmd>
	HAL_Delay(1);
 800043e:	2001      	movs	r0, #1
 8000440:	f000 fb58 	bl	8000af4 <HAL_Delay>
	HAL_Delay(1);
 8000444:	2001      	movs	r0, #1
 8000446:	f000 fb55 	bl	8000af4 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800044a:	2006      	movs	r0, #6
 800044c:	f7ff ff44 	bl	80002d8 <lcd_send_cmd>
	HAL_Delay(1);
 8000450:	2001      	movs	r0, #1
 8000452:	f000 fb4f 	bl	8000af4 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000456:	200c      	movs	r0, #12
 8000458:	f7ff ff3e 	bl	80002d8 <lcd_send_cmd>
	lcd_send_string("");
 800045c:	4804      	ldr	r0, [pc, #16]	@ (8000470 <lcd_init+0x94>)
 800045e:	f7ff ffa5 	bl	80003ac <lcd_send_string>
}
 8000462:	bf00      	nop
 8000464:	3708      	adds	r7, #8
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	24000030 	.word	0x24000030
 8000470:	0800410c 	.word	0x0800410c

08000474 <lcd_clear>:

void lcd_clear() {
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 8000478:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800047c:	f000 fb3a 	bl	8000af4 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000480:	2001      	movs	r0, #1
 8000482:	f7ff ff29 	bl	80002d8 <lcd_send_cmd>
	HAL_Delay(1);
 8000486:	2001      	movs	r0, #1
 8000488:	f000 fb34 	bl	8000af4 <HAL_Delay>
	lcd_send_string("");
 800048c:	4804      	ldr	r0, [pc, #16]	@ (80004a0 <lcd_clear+0x2c>)
 800048e:	f7ff ff8d 	bl	80003ac <lcd_send_string>
	HAL_Delay(500);
 8000492:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000496:	f000 fb2d 	bl	8000af4 <HAL_Delay>
}
 800049a:	bf00      	nop
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	0800410c 	.word	0x0800410c

080004a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80004a8:	f000 f8fa 	bl	80006a0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 fa90 	bl	80009d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b0:	f000 f81a 	bl	80004e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b4:	f000 f8c2 	bl	800063c <MX_GPIO_Init>
  MX_I2C2_Init();
 80004b8:	f000 f880 	bl	80005bc <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  ///// START OF LCD //////

  lcd_init(&hi2c2);
 80004bc:	4807      	ldr	r0, [pc, #28]	@ (80004dc <main+0x38>)
 80004be:	f7ff ff8d 	bl	80003dc <lcd_init>
  lcd_clear();
 80004c2:	f7ff ffd7 	bl	8000474 <lcd_clear>
  lcd_send_string("Initializing...");
 80004c6:	4806      	ldr	r0, [pc, #24]	@ (80004e0 <main+0x3c>)
 80004c8:	f7ff ff70 	bl	80003ac <lcd_send_string>
  lcd_clear();
 80004cc:	f7ff ffd2 	bl	8000474 <lcd_clear>
  lcd_send_string("81 loaded to x15");
 80004d0:	4804      	ldr	r0, [pc, #16]	@ (80004e4 <main+0x40>)
 80004d2:	f7ff ff6b 	bl	80003ac <lcd_send_string>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004d6:	bf00      	nop
 80004d8:	e7fd      	b.n	80004d6 <main+0x32>
 80004da:	bf00      	nop
 80004dc:	24000034 	.word	0x24000034
 80004e0:	08004110 	.word	0x08004110
 80004e4:	08004120 	.word	0x08004120

080004e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b09c      	sub	sp, #112	@ 0x70
 80004ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004f2:	224c      	movs	r2, #76	@ 0x4c
 80004f4:	2100      	movs	r1, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f003 fdd0 	bl	800409c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fc:	1d3b      	adds	r3, r7, #4
 80004fe:	2220      	movs	r2, #32
 8000500:	2100      	movs	r1, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f003 fdca 	bl	800409c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000508:	2002      	movs	r0, #2
 800050a:	f001 fa95 	bl	8001a38 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800050e:	2300      	movs	r3, #0
 8000510:	603b      	str	r3, [r7, #0]
 8000512:	4b28      	ldr	r3, [pc, #160]	@ (80005b4 <SystemClock_Config+0xcc>)
 8000514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000516:	4a27      	ldr	r2, [pc, #156]	@ (80005b4 <SystemClock_Config+0xcc>)
 8000518:	f023 0301 	bic.w	r3, r3, #1
 800051c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800051e:	4b25      	ldr	r3, [pc, #148]	@ (80005b4 <SystemClock_Config+0xcc>)
 8000520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	603b      	str	r3, [r7, #0]
 8000528:	4b23      	ldr	r3, [pc, #140]	@ (80005b8 <SystemClock_Config+0xd0>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000530:	4a21      	ldr	r2, [pc, #132]	@ (80005b8 <SystemClock_Config+0xd0>)
 8000532:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000536:	6193      	str	r3, [r2, #24]
 8000538:	4b1f      	ldr	r3, [pc, #124]	@ (80005b8 <SystemClock_Config+0xd0>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000540:	603b      	str	r3, [r7, #0]
 8000542:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000544:	bf00      	nop
 8000546:	4b1c      	ldr	r3, [pc, #112]	@ (80005b8 <SystemClock_Config+0xd0>)
 8000548:	699b      	ldr	r3, [r3, #24]
 800054a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800054e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000552:	d1f8      	bne.n	8000546 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000554:	2302      	movs	r3, #2
 8000556:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000558:	2301      	movs	r3, #1
 800055a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800055c:	2340      	movs	r3, #64	@ 0x40
 800055e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000560:	2300      	movs	r3, #0
 8000562:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000564:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000568:	4618      	mov	r0, r3
 800056a:	f001 fa9f 	bl	8001aac <HAL_RCC_OscConfig>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000574:	f000 f8c0 	bl	80006f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000578:	233f      	movs	r3, #63	@ 0x3f
 800057a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800057c:	2300      	movs	r3, #0
 800057e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000580:	2300      	movs	r3, #0
 8000582:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000584:	2300      	movs	r3, #0
 8000586:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800058c:	2340      	movs	r3, #64	@ 0x40
 800058e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000598:	1d3b      	adds	r3, r7, #4
 800059a:	2101      	movs	r1, #1
 800059c:	4618      	mov	r0, r3
 800059e:	f001 fedf 	bl	8002360 <HAL_RCC_ClockConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005a8:	f000 f8a6 	bl	80006f8 <Error_Handler>
  }
}
 80005ac:	bf00      	nop
 80005ae:	3770      	adds	r7, #112	@ 0x70
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	58000400 	.word	0x58000400
 80005b8:	58024800 	.word	0x58024800

080005bc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80005c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000630 <MX_I2C2_Init+0x74>)
 80005c2:	4a1c      	ldr	r2, [pc, #112]	@ (8000634 <MX_I2C2_Init+0x78>)
 80005c4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 80005c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000630 <MX_I2C2_Init+0x74>)
 80005c8:	4a1b      	ldr	r2, [pc, #108]	@ (8000638 <MX_I2C2_Init+0x7c>)
 80005ca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80005cc:	4b18      	ldr	r3, [pc, #96]	@ (8000630 <MX_I2C2_Init+0x74>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005d2:	4b17      	ldr	r3, [pc, #92]	@ (8000630 <MX_I2C2_Init+0x74>)
 80005d4:	2201      	movs	r2, #1
 80005d6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005d8:	4b15      	ldr	r3, [pc, #84]	@ (8000630 <MX_I2C2_Init+0x74>)
 80005da:	2200      	movs	r2, #0
 80005dc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80005de:	4b14      	ldr	r3, [pc, #80]	@ (8000630 <MX_I2C2_Init+0x74>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005e4:	4b12      	ldr	r3, [pc, #72]	@ (8000630 <MX_I2C2_Init+0x74>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005ea:	4b11      	ldr	r3, [pc, #68]	@ (8000630 <MX_I2C2_Init+0x74>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000630 <MX_I2C2_Init+0x74>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80005f6:	480e      	ldr	r0, [pc, #56]	@ (8000630 <MX_I2C2_Init+0x74>)
 80005f8:	f000 fdb8 	bl	800116c <HAL_I2C_Init>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000602:	f000 f879 	bl	80006f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000606:	2100      	movs	r1, #0
 8000608:	4809      	ldr	r0, [pc, #36]	@ (8000630 <MX_I2C2_Init+0x74>)
 800060a:	f001 f97d 	bl	8001908 <HAL_I2CEx_ConfigAnalogFilter>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000614:	f000 f870 	bl	80006f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000618:	2100      	movs	r1, #0
 800061a:	4805      	ldr	r0, [pc, #20]	@ (8000630 <MX_I2C2_Init+0x74>)
 800061c:	f001 f9bf 	bl	800199e <HAL_I2CEx_ConfigDigitalFilter>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000626:	f000 f867 	bl	80006f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	24000034 	.word	0x24000034
 8000634:	40005800 	.word	0x40005800
 8000638:	00707cbb 	.word	0x00707cbb

0800063c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000650:	4b11      	ldr	r3, [pc, #68]	@ (8000698 <MX_GPIO_Init+0x5c>)
 8000652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000656:	4a10      	ldr	r2, [pc, #64]	@ (8000698 <MX_GPIO_Init+0x5c>)
 8000658:	f043 0302 	orr.w	r3, r3, #2
 800065c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000660:	4b0d      	ldr	r3, [pc, #52]	@ (8000698 <MX_GPIO_Init+0x5c>)
 8000662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000666:	f003 0302 	and.w	r3, r3, #2
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800066e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000672:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000674:	2312      	movs	r3, #18
 8000676:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	2300      	movs	r3, #0
 800067a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067c:	2300      	movs	r3, #0
 800067e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000680:	2304      	movs	r3, #4
 8000682:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	4619      	mov	r1, r3
 8000688:	4804      	ldr	r0, [pc, #16]	@ (800069c <MX_GPIO_Init+0x60>)
 800068a:	f000 fbbf 	bl	8000e0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800068e:	bf00      	nop
 8000690:	3718      	adds	r7, #24
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	58024400 	.word	0x58024400
 800069c:	58020400 	.word	0x58020400

080006a0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80006a6:	463b      	mov	r3, r7
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80006b2:	f000 fb33 	bl	8000d1c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80006b6:	2301      	movs	r3, #1
 80006b8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80006be:	2300      	movs	r3, #0
 80006c0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80006c2:	231f      	movs	r3, #31
 80006c4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80006c6:	2387      	movs	r3, #135	@ 0x87
 80006c8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80006ce:	2300      	movs	r3, #0
 80006d0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80006d2:	2301      	movs	r3, #1
 80006d4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80006d6:	2301      	movs	r3, #1
 80006d8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80006da:	2300      	movs	r3, #0
 80006dc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80006de:	2300      	movs	r3, #0
 80006e0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80006e2:	463b      	mov	r3, r7
 80006e4:	4618      	mov	r0, r3
 80006e6:	f000 fb51 	bl	8000d8c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80006ea:	2004      	movs	r0, #4
 80006ec:	f000 fb2e 	bl	8000d4c <HAL_MPU_Enable>

}
 80006f0:	bf00      	nop
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006fc:	b672      	cpsid	i
}
 80006fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000700:	bf00      	nop
 8000702:	e7fd      	b.n	8000700 <Error_Handler+0x8>

08000704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070a:	4b0a      	ldr	r3, [pc, #40]	@ (8000734 <HAL_MspInit+0x30>)
 800070c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000710:	4a08      	ldr	r2, [pc, #32]	@ (8000734 <HAL_MspInit+0x30>)
 8000712:	f043 0302 	orr.w	r3, r3, #2
 8000716:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800071a:	4b06      	ldr	r3, [pc, #24]	@ (8000734 <HAL_MspInit+0x30>)
 800071c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000720:	f003 0302 	and.w	r3, r3, #2
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	58024400 	.word	0x58024400

08000738 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b0ba      	sub	sp, #232	@ 0xe8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000740:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000750:	f107 0310 	add.w	r3, r7, #16
 8000754:	22c0      	movs	r2, #192	@ 0xc0
 8000756:	2100      	movs	r1, #0
 8000758:	4618      	mov	r0, r3
 800075a:	f003 fc9f 	bl	800409c <memset>
  if(hi2c->Instance==I2C2)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a27      	ldr	r2, [pc, #156]	@ (8000800 <HAL_I2C_MspInit+0xc8>)
 8000764:	4293      	cmp	r3, r2
 8000766:	d146      	bne.n	80007f6 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000768:	f04f 0208 	mov.w	r2, #8
 800076c:	f04f 0300 	mov.w	r3, #0
 8000770:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000774:	2300      	movs	r3, #0
 8000776:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800077a:	f107 0310 	add.w	r3, r7, #16
 800077e:	4618      	mov	r0, r3
 8000780:	f002 f91e 	bl	80029c0 <HAL_RCCEx_PeriphCLKConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800078a:	f7ff ffb5 	bl	80006f8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	4b1d      	ldr	r3, [pc, #116]	@ (8000804 <HAL_I2C_MspInit+0xcc>)
 8000790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000794:	4a1b      	ldr	r2, [pc, #108]	@ (8000804 <HAL_I2C_MspInit+0xcc>)
 8000796:	f043 0302 	orr.w	r3, r3, #2
 800079a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800079e:	4b19      	ldr	r3, [pc, #100]	@ (8000804 <HAL_I2C_MspInit+0xcc>)
 80007a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007a4:	f003 0302 	and.w	r3, r3, #2
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80007ac:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80007b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007b4:	2312      	movs	r3, #18
 80007b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ba:	2301      	movs	r3, #1
 80007bc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	2300      	movs	r3, #0
 80007c2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80007c6:	2304      	movs	r3, #4
 80007c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007cc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80007d0:	4619      	mov	r1, r3
 80007d2:	480d      	ldr	r0, [pc, #52]	@ (8000808 <HAL_I2C_MspInit+0xd0>)
 80007d4:	f000 fb1a 	bl	8000e0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80007d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000804 <HAL_I2C_MspInit+0xcc>)
 80007da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80007de:	4a09      	ldr	r2, [pc, #36]	@ (8000804 <HAL_I2C_MspInit+0xcc>)
 80007e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80007e4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80007e8:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <HAL_I2C_MspInit+0xcc>)
 80007ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80007ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80007f6:	bf00      	nop
 80007f8:	37e8      	adds	r7, #232	@ 0xe8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40005800 	.word	0x40005800
 8000804:	58024400 	.word	0x58024400
 8000808:	58020400 	.word	0x58020400

0800080c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000810:	bf00      	nop
 8000812:	e7fd      	b.n	8000810 <NMI_Handler+0x4>

08000814 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000818:	bf00      	nop
 800081a:	e7fd      	b.n	8000818 <HardFault_Handler+0x4>

0800081c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000820:	bf00      	nop
 8000822:	e7fd      	b.n	8000820 <MemManage_Handler+0x4>

08000824 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000828:	bf00      	nop
 800082a:	e7fd      	b.n	8000828 <BusFault_Handler+0x4>

0800082c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000830:	bf00      	nop
 8000832:	e7fd      	b.n	8000830 <UsageFault_Handler+0x4>

08000834 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr

08000842 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr

0800085e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800085e:	b580      	push	{r7, lr}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000862:	f000 f927 	bl	8000ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
	...

0800086c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000870:	4b37      	ldr	r3, [pc, #220]	@ (8000950 <SystemInit+0xe4>)
 8000872:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000876:	4a36      	ldr	r2, [pc, #216]	@ (8000950 <SystemInit+0xe4>)
 8000878:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800087c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000880:	4b34      	ldr	r3, [pc, #208]	@ (8000954 <SystemInit+0xe8>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f003 030f 	and.w	r3, r3, #15
 8000888:	2b06      	cmp	r3, #6
 800088a:	d807      	bhi.n	800089c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800088c:	4b31      	ldr	r3, [pc, #196]	@ (8000954 <SystemInit+0xe8>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f023 030f 	bic.w	r3, r3, #15
 8000894:	4a2f      	ldr	r2, [pc, #188]	@ (8000954 <SystemInit+0xe8>)
 8000896:	f043 0307 	orr.w	r3, r3, #7
 800089a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800089c:	4b2e      	ldr	r3, [pc, #184]	@ (8000958 <SystemInit+0xec>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a2d      	ldr	r2, [pc, #180]	@ (8000958 <SystemInit+0xec>)
 80008a2:	f043 0301 	orr.w	r3, r3, #1
 80008a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80008a8:	4b2b      	ldr	r3, [pc, #172]	@ (8000958 <SystemInit+0xec>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80008ae:	4b2a      	ldr	r3, [pc, #168]	@ (8000958 <SystemInit+0xec>)
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	4929      	ldr	r1, [pc, #164]	@ (8000958 <SystemInit+0xec>)
 80008b4:	4b29      	ldr	r3, [pc, #164]	@ (800095c <SystemInit+0xf0>)
 80008b6:	4013      	ands	r3, r2
 80008b8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80008ba:	4b26      	ldr	r3, [pc, #152]	@ (8000954 <SystemInit+0xe8>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	f003 0308 	and.w	r3, r3, #8
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d007      	beq.n	80008d6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80008c6:	4b23      	ldr	r3, [pc, #140]	@ (8000954 <SystemInit+0xe8>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	f023 030f 	bic.w	r3, r3, #15
 80008ce:	4a21      	ldr	r2, [pc, #132]	@ (8000954 <SystemInit+0xe8>)
 80008d0:	f043 0307 	orr.w	r3, r3, #7
 80008d4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80008d6:	4b20      	ldr	r3, [pc, #128]	@ (8000958 <SystemInit+0xec>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80008dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000958 <SystemInit+0xec>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80008e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000958 <SystemInit+0xec>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80008e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000958 <SystemInit+0xec>)
 80008ea:	4a1d      	ldr	r2, [pc, #116]	@ (8000960 <SystemInit+0xf4>)
 80008ec:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80008ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000958 <SystemInit+0xec>)
 80008f0:	4a1c      	ldr	r2, [pc, #112]	@ (8000964 <SystemInit+0xf8>)
 80008f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80008f4:	4b18      	ldr	r3, [pc, #96]	@ (8000958 <SystemInit+0xec>)
 80008f6:	4a1c      	ldr	r2, [pc, #112]	@ (8000968 <SystemInit+0xfc>)
 80008f8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80008fa:	4b17      	ldr	r3, [pc, #92]	@ (8000958 <SystemInit+0xec>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000900:	4b15      	ldr	r3, [pc, #84]	@ (8000958 <SystemInit+0xec>)
 8000902:	4a19      	ldr	r2, [pc, #100]	@ (8000968 <SystemInit+0xfc>)
 8000904:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000906:	4b14      	ldr	r3, [pc, #80]	@ (8000958 <SystemInit+0xec>)
 8000908:	2200      	movs	r2, #0
 800090a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800090c:	4b12      	ldr	r3, [pc, #72]	@ (8000958 <SystemInit+0xec>)
 800090e:	4a16      	ldr	r2, [pc, #88]	@ (8000968 <SystemInit+0xfc>)
 8000910:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000912:	4b11      	ldr	r3, [pc, #68]	@ (8000958 <SystemInit+0xec>)
 8000914:	2200      	movs	r2, #0
 8000916:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000918:	4b0f      	ldr	r3, [pc, #60]	@ (8000958 <SystemInit+0xec>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a0e      	ldr	r2, [pc, #56]	@ (8000958 <SystemInit+0xec>)
 800091e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000922:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000924:	4b0c      	ldr	r3, [pc, #48]	@ (8000958 <SystemInit+0xec>)
 8000926:	2200      	movs	r2, #0
 8000928:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800092a:	4b10      	ldr	r3, [pc, #64]	@ (800096c <SystemInit+0x100>)
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	4b10      	ldr	r3, [pc, #64]	@ (8000970 <SystemInit+0x104>)
 8000930:	4013      	ands	r3, r2
 8000932:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000936:	d202      	bcs.n	800093e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000938:	4b0e      	ldr	r3, [pc, #56]	@ (8000974 <SystemInit+0x108>)
 800093a:	2201      	movs	r2, #1
 800093c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800093e:	4b0e      	ldr	r3, [pc, #56]	@ (8000978 <SystemInit+0x10c>)
 8000940:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000944:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	e000ed00 	.word	0xe000ed00
 8000954:	52002000 	.word	0x52002000
 8000958:	58024400 	.word	0x58024400
 800095c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000960:	02020200 	.word	0x02020200
 8000964:	01ff0000 	.word	0x01ff0000
 8000968:	01010280 	.word	0x01010280
 800096c:	5c001000 	.word	0x5c001000
 8000970:	ffff0000 	.word	0xffff0000
 8000974:	51008108 	.word	0x51008108
 8000978:	52004000 	.word	0x52004000

0800097c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800097c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000980:	f7ff ff74 	bl	800086c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000984:	480c      	ldr	r0, [pc, #48]	@ (80009b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000986:	490d      	ldr	r1, [pc, #52]	@ (80009bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000988:	4a0d      	ldr	r2, [pc, #52]	@ (80009c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800098a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800098c:	e002      	b.n	8000994 <LoopCopyDataInit>

0800098e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800098e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000992:	3304      	adds	r3, #4

08000994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000998:	d3f9      	bcc.n	800098e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099a:	4a0a      	ldr	r2, [pc, #40]	@ (80009c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800099c:	4c0a      	ldr	r4, [pc, #40]	@ (80009c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800099e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a0:	e001      	b.n	80009a6 <LoopFillZerobss>

080009a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a4:	3204      	adds	r2, #4

080009a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a8:	d3fb      	bcc.n	80009a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009aa:	f003 fb7f 	bl	80040ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ae:	f7ff fd79 	bl	80004a4 <main>
  bx  lr
 80009b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009b4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80009b8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80009bc:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 80009c0:	0800414c 	.word	0x0800414c
  ldr r2, =_sbss
 80009c4:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 80009c8:	2400008c 	.word	0x2400008c

080009cc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009cc:	e7fe      	b.n	80009cc <ADC3_IRQHandler>
	...

080009d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d6:	2003      	movs	r0, #3
 80009d8:	f000 f96e 	bl	8000cb8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80009dc:	f001 fe76 	bl	80026cc <HAL_RCC_GetSysClockFreq>
 80009e0:	4602      	mov	r2, r0
 80009e2:	4b15      	ldr	r3, [pc, #84]	@ (8000a38 <HAL_Init+0x68>)
 80009e4:	699b      	ldr	r3, [r3, #24]
 80009e6:	0a1b      	lsrs	r3, r3, #8
 80009e8:	f003 030f 	and.w	r3, r3, #15
 80009ec:	4913      	ldr	r1, [pc, #76]	@ (8000a3c <HAL_Init+0x6c>)
 80009ee:	5ccb      	ldrb	r3, [r1, r3]
 80009f0:	f003 031f 	and.w	r3, r3, #31
 80009f4:	fa22 f303 	lsr.w	r3, r2, r3
 80009f8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80009fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000a38 <HAL_Init+0x68>)
 80009fc:	699b      	ldr	r3, [r3, #24]
 80009fe:	f003 030f 	and.w	r3, r3, #15
 8000a02:	4a0e      	ldr	r2, [pc, #56]	@ (8000a3c <HAL_Init+0x6c>)
 8000a04:	5cd3      	ldrb	r3, [r2, r3]
 8000a06:	f003 031f 	and.w	r3, r3, #31
 8000a0a:	687a      	ldr	r2, [r7, #4]
 8000a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8000a10:	4a0b      	ldr	r2, [pc, #44]	@ (8000a40 <HAL_Init+0x70>)
 8000a12:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000a14:	4a0b      	ldr	r2, [pc, #44]	@ (8000a44 <HAL_Init+0x74>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a1a:	200f      	movs	r0, #15
 8000a1c:	f000 f814 	bl	8000a48 <HAL_InitTick>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
 8000a28:	e002      	b.n	8000a30 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000a2a:	f7ff fe6b 	bl	8000704 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a2e:	2300      	movs	r3, #0
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	58024400 	.word	0x58024400
 8000a3c:	08004134 	.word	0x08004134
 8000a40:	24000008 	.word	0x24000008
 8000a44:	24000004 	.word	0x24000004

08000a48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000a50:	4b15      	ldr	r3, [pc, #84]	@ (8000aa8 <HAL_InitTick+0x60>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d101      	bne.n	8000a5c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	e021      	b.n	8000aa0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000a5c:	4b13      	ldr	r3, [pc, #76]	@ (8000aac <HAL_InitTick+0x64>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	4b11      	ldr	r3, [pc, #68]	@ (8000aa8 <HAL_InitTick+0x60>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	4619      	mov	r1, r3
 8000a66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 f945 	bl	8000d02 <HAL_SYSTICK_Config>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e00e      	b.n	8000aa0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2b0f      	cmp	r3, #15
 8000a86:	d80a      	bhi.n	8000a9e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a90:	f000 f91d 	bl	8000cce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a94:	4a06      	ldr	r2, [pc, #24]	@ (8000ab0 <HAL_InitTick+0x68>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e000      	b.n	8000aa0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	24000010 	.word	0x24000010
 8000aac:	24000004 	.word	0x24000004
 8000ab0:	2400000c 	.word	0x2400000c

08000ab4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	@ (8000ad4 <HAL_IncTick+0x20>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	461a      	mov	r2, r3
 8000abe:	4b06      	ldr	r3, [pc, #24]	@ (8000ad8 <HAL_IncTick+0x24>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	4a04      	ldr	r2, [pc, #16]	@ (8000ad8 <HAL_IncTick+0x24>)
 8000ac6:	6013      	str	r3, [r2, #0]
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	24000010 	.word	0x24000010
 8000ad8:	24000088 	.word	0x24000088

08000adc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae0:	4b03      	ldr	r3, [pc, #12]	@ (8000af0 <HAL_GetTick+0x14>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	24000088 	.word	0x24000088

08000af4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000afc:	f7ff ffee 	bl	8000adc <HAL_GetTick>
 8000b00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b0c:	d005      	beq.n	8000b1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b38 <HAL_Delay+0x44>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	461a      	mov	r2, r3
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	4413      	add	r3, r2
 8000b18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b1a:	bf00      	nop
 8000b1c:	f7ff ffde 	bl	8000adc <HAL_GetTick>
 8000b20:	4602      	mov	r2, r0
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	68fa      	ldr	r2, [r7, #12]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d8f7      	bhi.n	8000b1c <HAL_Delay+0x28>
  {
  }
}
 8000b2c:	bf00      	nop
 8000b2e:	bf00      	nop
 8000b30:	3710      	adds	r7, #16
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	24000010 	.word	0x24000010

08000b3c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000b40:	4b03      	ldr	r3, [pc, #12]	@ (8000b50 <HAL_GetREVID+0x14>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	0c1b      	lsrs	r3, r3, #16
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	5c001000 	.word	0x5c001000

08000b54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f003 0307 	and.w	r3, r3, #7
 8000b62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b64:	4b0b      	ldr	r3, [pc, #44]	@ (8000b94 <__NVIC_SetPriorityGrouping+0x40>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b6a:	68ba      	ldr	r2, [r7, #8]
 8000b6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b70:	4013      	ands	r3, r2
 8000b72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b7c:	4b06      	ldr	r3, [pc, #24]	@ (8000b98 <__NVIC_SetPriorityGrouping+0x44>)
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b82:	4a04      	ldr	r2, [pc, #16]	@ (8000b94 <__NVIC_SetPriorityGrouping+0x40>)
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	60d3      	str	r3, [r2, #12]
}
 8000b88:	bf00      	nop
 8000b8a:	3714      	adds	r7, #20
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	e000ed00 	.word	0xe000ed00
 8000b98:	05fa0000 	.word	0x05fa0000

08000b9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba0:	4b04      	ldr	r3, [pc, #16]	@ (8000bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	0a1b      	lsrs	r3, r3, #8
 8000ba6:	f003 0307 	and.w	r3, r3, #7
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	6039      	str	r1, [r7, #0]
 8000bc2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000bc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	db0a      	blt.n	8000be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	b2da      	uxtb	r2, r3
 8000bd0:	490c      	ldr	r1, [pc, #48]	@ (8000c04 <__NVIC_SetPriority+0x4c>)
 8000bd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bd6:	0112      	lsls	r2, r2, #4
 8000bd8:	b2d2      	uxtb	r2, r2
 8000bda:	440b      	add	r3, r1
 8000bdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be0:	e00a      	b.n	8000bf8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	4908      	ldr	r1, [pc, #32]	@ (8000c08 <__NVIC_SetPriority+0x50>)
 8000be8:	88fb      	ldrh	r3, [r7, #6]
 8000bea:	f003 030f 	and.w	r3, r3, #15
 8000bee:	3b04      	subs	r3, #4
 8000bf0:	0112      	lsls	r2, r2, #4
 8000bf2:	b2d2      	uxtb	r2, r2
 8000bf4:	440b      	add	r3, r1
 8000bf6:	761a      	strb	r2, [r3, #24]
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	e000e100 	.word	0xe000e100
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b089      	sub	sp, #36	@ 0x24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	f1c3 0307 	rsb	r3, r3, #7
 8000c26:	2b04      	cmp	r3, #4
 8000c28:	bf28      	it	cs
 8000c2a:	2304      	movcs	r3, #4
 8000c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	3304      	adds	r3, #4
 8000c32:	2b06      	cmp	r3, #6
 8000c34:	d902      	bls.n	8000c3c <NVIC_EncodePriority+0x30>
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	3b03      	subs	r3, #3
 8000c3a:	e000      	b.n	8000c3e <NVIC_EncodePriority+0x32>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c40:	f04f 32ff 	mov.w	r2, #4294967295
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	43da      	mvns	r2, r3
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	401a      	ands	r2, r3
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c54:	f04f 31ff 	mov.w	r1, #4294967295
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5e:	43d9      	mvns	r1, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c64:	4313      	orrs	r3, r2
         );
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3724      	adds	r7, #36	@ 0x24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
	...

08000c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c84:	d301      	bcc.n	8000c8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c86:	2301      	movs	r3, #1
 8000c88:	e00f      	b.n	8000caa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb4 <SysTick_Config+0x40>)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c92:	210f      	movs	r1, #15
 8000c94:	f04f 30ff 	mov.w	r0, #4294967295
 8000c98:	f7ff ff8e 	bl	8000bb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c9c:	4b05      	ldr	r3, [pc, #20]	@ (8000cb4 <SysTick_Config+0x40>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ca2:	4b04      	ldr	r3, [pc, #16]	@ (8000cb4 <SysTick_Config+0x40>)
 8000ca4:	2207      	movs	r2, #7
 8000ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	e000e010 	.word	0xe000e010

08000cb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f7ff ff47 	bl	8000b54 <__NVIC_SetPriorityGrouping>
}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b086      	sub	sp, #24
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	60b9      	str	r1, [r7, #8]
 8000cd8:	607a      	str	r2, [r7, #4]
 8000cda:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cdc:	f7ff ff5e 	bl	8000b9c <__NVIC_GetPriorityGrouping>
 8000ce0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	68b9      	ldr	r1, [r7, #8]
 8000ce6:	6978      	ldr	r0, [r7, #20]
 8000ce8:	f7ff ff90 	bl	8000c0c <NVIC_EncodePriority>
 8000cec:	4602      	mov	r2, r0
 8000cee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff ff5f 	bl	8000bb8 <__NVIC_SetPriority>
}
 8000cfa:	bf00      	nop
 8000cfc:	3718      	adds	r7, #24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f7ff ffb2 	bl	8000c74 <SysTick_Config>
 8000d10:	4603      	mov	r3, r0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000d20:	f3bf 8f5f 	dmb	sy
}
 8000d24:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000d26:	4b07      	ldr	r3, [pc, #28]	@ (8000d44 <HAL_MPU_Disable+0x28>)
 8000d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d2a:	4a06      	ldr	r2, [pc, #24]	@ (8000d44 <HAL_MPU_Disable+0x28>)
 8000d2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d30:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000d32:	4b05      	ldr	r3, [pc, #20]	@ (8000d48 <HAL_MPU_Disable+0x2c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	605a      	str	r2, [r3, #4]
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000ed00 	.word	0xe000ed00
 8000d48:	e000ed90 	.word	0xe000ed90

08000d4c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000d54:	4a0b      	ldr	r2, [pc, #44]	@ (8000d84 <HAL_MPU_Enable+0x38>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d88 <HAL_MPU_Enable+0x3c>)
 8000d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d62:	4a09      	ldr	r2, [pc, #36]	@ (8000d88 <HAL_MPU_Enable+0x3c>)
 8000d64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d68:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000d6a:	f3bf 8f4f 	dsb	sy
}
 8000d6e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d70:	f3bf 8f6f 	isb	sy
}
 8000d74:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	e000ed90 	.word	0xe000ed90
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	785a      	ldrb	r2, [r3, #1]
 8000d98:	4b1b      	ldr	r3, [pc, #108]	@ (8000e08 <HAL_MPU_ConfigRegion+0x7c>)
 8000d9a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000d9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e08 <HAL_MPU_ConfigRegion+0x7c>)
 8000d9e:	691b      	ldr	r3, [r3, #16]
 8000da0:	4a19      	ldr	r2, [pc, #100]	@ (8000e08 <HAL_MPU_ConfigRegion+0x7c>)
 8000da2:	f023 0301 	bic.w	r3, r3, #1
 8000da6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000da8:	4a17      	ldr	r2, [pc, #92]	@ (8000e08 <HAL_MPU_ConfigRegion+0x7c>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	7b1b      	ldrb	r3, [r3, #12]
 8000db4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	7adb      	ldrb	r3, [r3, #11]
 8000dba:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000dbc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	7a9b      	ldrb	r3, [r3, #10]
 8000dc2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000dc4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	7b5b      	ldrb	r3, [r3, #13]
 8000dca:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000dcc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	7b9b      	ldrb	r3, [r3, #14]
 8000dd2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000dd4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	7bdb      	ldrb	r3, [r3, #15]
 8000dda:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000ddc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	7a5b      	ldrb	r3, [r3, #9]
 8000de2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000de4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	7a1b      	ldrb	r3, [r3, #8]
 8000dea:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000dec:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	7812      	ldrb	r2, [r2, #0]
 8000df2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000df4:	4a04      	ldr	r2, [pc, #16]	@ (8000e08 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000df6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000df8:	6113      	str	r3, [r2, #16]
}
 8000dfa:	bf00      	nop
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000ed90 	.word	0xe000ed90

08000e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b089      	sub	sp, #36	@ 0x24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000e1a:	4b89      	ldr	r3, [pc, #548]	@ (8001040 <HAL_GPIO_Init+0x234>)
 8000e1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000e1e:	e194      	b.n	800114a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	2101      	movs	r1, #1
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	f000 8186 	beq.w	8001144 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f003 0303 	and.w	r3, r3, #3
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d005      	beq.n	8000e50 <HAL_GPIO_Init+0x44>
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f003 0303 	and.w	r3, r3, #3
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d130      	bne.n	8000eb2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	2203      	movs	r2, #3
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	43db      	mvns	r3, r3
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4013      	ands	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	68da      	ldr	r2, [r3, #12]
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e86:	2201      	movs	r2, #1
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4013      	ands	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	091b      	lsrs	r3, r3, #4
 8000e9c:	f003 0201 	and.w	r2, r3, #1
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f003 0303 	and.w	r3, r3, #3
 8000eba:	2b03      	cmp	r3, #3
 8000ebc:	d017      	beq.n	8000eee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	68db      	ldr	r3, [r3, #12]
 8000ec2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	2203      	movs	r2, #3
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	689a      	ldr	r2, [r3, #8]
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f003 0303 	and.w	r3, r3, #3
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d123      	bne.n	8000f42 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	08da      	lsrs	r2, r3, #3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	3208      	adds	r2, #8
 8000f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	220f      	movs	r2, #15
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	43db      	mvns	r3, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	691a      	ldr	r2, [r3, #16]
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	f003 0307 	and.w	r3, r3, #7
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	08da      	lsrs	r2, r3, #3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3208      	adds	r2, #8
 8000f3c:	69b9      	ldr	r1, [r7, #24]
 8000f3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4013      	ands	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f003 0203 	and.w	r2, r3, #3
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	f000 80e0 	beq.w	8001144 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f84:	4b2f      	ldr	r3, [pc, #188]	@ (8001044 <HAL_GPIO_Init+0x238>)
 8000f86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f8a:	4a2e      	ldr	r2, [pc, #184]	@ (8001044 <HAL_GPIO_Init+0x238>)
 8000f8c:	f043 0302 	orr.w	r3, r3, #2
 8000f90:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f94:	4b2b      	ldr	r3, [pc, #172]	@ (8001044 <HAL_GPIO_Init+0x238>)
 8000f96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fa2:	4a29      	ldr	r2, [pc, #164]	@ (8001048 <HAL_GPIO_Init+0x23c>)
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	089b      	lsrs	r3, r3, #2
 8000fa8:	3302      	adds	r3, #2
 8000faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	f003 0303 	and.w	r3, r3, #3
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	220f      	movs	r2, #15
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a20      	ldr	r2, [pc, #128]	@ (800104c <HAL_GPIO_Init+0x240>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d052      	beq.n	8001074 <HAL_GPIO_Init+0x268>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a1f      	ldr	r2, [pc, #124]	@ (8001050 <HAL_GPIO_Init+0x244>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d031      	beq.n	800103a <HAL_GPIO_Init+0x22e>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a1e      	ldr	r2, [pc, #120]	@ (8001054 <HAL_GPIO_Init+0x248>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d02b      	beq.n	8001036 <HAL_GPIO_Init+0x22a>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a1d      	ldr	r2, [pc, #116]	@ (8001058 <HAL_GPIO_Init+0x24c>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d025      	beq.n	8001032 <HAL_GPIO_Init+0x226>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a1c      	ldr	r2, [pc, #112]	@ (800105c <HAL_GPIO_Init+0x250>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d01f      	beq.n	800102e <HAL_GPIO_Init+0x222>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a1b      	ldr	r2, [pc, #108]	@ (8001060 <HAL_GPIO_Init+0x254>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d019      	beq.n	800102a <HAL_GPIO_Init+0x21e>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a1a      	ldr	r2, [pc, #104]	@ (8001064 <HAL_GPIO_Init+0x258>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d013      	beq.n	8001026 <HAL_GPIO_Init+0x21a>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a19      	ldr	r2, [pc, #100]	@ (8001068 <HAL_GPIO_Init+0x25c>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d00d      	beq.n	8001022 <HAL_GPIO_Init+0x216>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a18      	ldr	r2, [pc, #96]	@ (800106c <HAL_GPIO_Init+0x260>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d007      	beq.n	800101e <HAL_GPIO_Init+0x212>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a17      	ldr	r2, [pc, #92]	@ (8001070 <HAL_GPIO_Init+0x264>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d101      	bne.n	800101a <HAL_GPIO_Init+0x20e>
 8001016:	2309      	movs	r3, #9
 8001018:	e02d      	b.n	8001076 <HAL_GPIO_Init+0x26a>
 800101a:	230a      	movs	r3, #10
 800101c:	e02b      	b.n	8001076 <HAL_GPIO_Init+0x26a>
 800101e:	2308      	movs	r3, #8
 8001020:	e029      	b.n	8001076 <HAL_GPIO_Init+0x26a>
 8001022:	2307      	movs	r3, #7
 8001024:	e027      	b.n	8001076 <HAL_GPIO_Init+0x26a>
 8001026:	2306      	movs	r3, #6
 8001028:	e025      	b.n	8001076 <HAL_GPIO_Init+0x26a>
 800102a:	2305      	movs	r3, #5
 800102c:	e023      	b.n	8001076 <HAL_GPIO_Init+0x26a>
 800102e:	2304      	movs	r3, #4
 8001030:	e021      	b.n	8001076 <HAL_GPIO_Init+0x26a>
 8001032:	2303      	movs	r3, #3
 8001034:	e01f      	b.n	8001076 <HAL_GPIO_Init+0x26a>
 8001036:	2302      	movs	r3, #2
 8001038:	e01d      	b.n	8001076 <HAL_GPIO_Init+0x26a>
 800103a:	2301      	movs	r3, #1
 800103c:	e01b      	b.n	8001076 <HAL_GPIO_Init+0x26a>
 800103e:	bf00      	nop
 8001040:	58000080 	.word	0x58000080
 8001044:	58024400 	.word	0x58024400
 8001048:	58000400 	.word	0x58000400
 800104c:	58020000 	.word	0x58020000
 8001050:	58020400 	.word	0x58020400
 8001054:	58020800 	.word	0x58020800
 8001058:	58020c00 	.word	0x58020c00
 800105c:	58021000 	.word	0x58021000
 8001060:	58021400 	.word	0x58021400
 8001064:	58021800 	.word	0x58021800
 8001068:	58021c00 	.word	0x58021c00
 800106c:	58022000 	.word	0x58022000
 8001070:	58022400 	.word	0x58022400
 8001074:	2300      	movs	r3, #0
 8001076:	69fa      	ldr	r2, [r7, #28]
 8001078:	f002 0203 	and.w	r2, r2, #3
 800107c:	0092      	lsls	r2, r2, #2
 800107e:	4093      	lsls	r3, r2
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001086:	4938      	ldr	r1, [pc, #224]	@ (8001168 <HAL_GPIO_Init+0x35c>)
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	089b      	lsrs	r3, r3, #2
 800108c:	3302      	adds	r3, #2
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001094:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	43db      	mvns	r3, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4013      	ands	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80010ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80010c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d003      	beq.n	80010e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80010e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d003      	beq.n	8001114 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	4313      	orrs	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	43db      	mvns	r3, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4013      	ands	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	3301      	adds	r3, #1
 8001148:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	fa22 f303 	lsr.w	r3, r2, r3
 8001154:	2b00      	cmp	r3, #0
 8001156:	f47f ae63 	bne.w	8000e20 <HAL_GPIO_Init+0x14>
  }
}
 800115a:	bf00      	nop
 800115c:	bf00      	nop
 800115e:	3724      	adds	r7, #36	@ 0x24
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	58000400 	.word	0x58000400

0800116c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d101      	bne.n	800117e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e08b      	b.n	8001296 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b00      	cmp	r3, #0
 8001188:	d106      	bne.n	8001198 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff fad0 	bl	8000738 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2224      	movs	r2, #36	@ 0x24
 800119c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f022 0201 	bic.w	r2, r2, #1
 80011ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685a      	ldr	r2, [r3, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80011bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	689a      	ldr	r2, [r3, #8]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80011cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d107      	bne.n	80011e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	e006      	b.n	80011f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	689a      	ldr	r2, [r3, #8]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80011f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d108      	bne.n	800120e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	685a      	ldr	r2, [r3, #4]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	e007      	b.n	800121e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	685a      	ldr	r2, [r3, #4]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800121c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	6859      	ldr	r1, [r3, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	4b1d      	ldr	r3, [pc, #116]	@ (80012a0 <HAL_I2C_Init+0x134>)
 800122a:	430b      	orrs	r3, r1
 800122c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	68da      	ldr	r2, [r3, #12]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800123c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	691a      	ldr	r2, [r3, #16]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	430a      	orrs	r2, r1
 8001256:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	69d9      	ldr	r1, [r3, #28]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a1a      	ldr	r2, [r3, #32]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	430a      	orrs	r2, r1
 8001266:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f042 0201 	orr.w	r2, r2, #1
 8001276:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2220      	movs	r2, #32
 8001282:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2200      	movs	r2, #0
 8001290:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	02008000 	.word	0x02008000

080012a4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b088      	sub	sp, #32
 80012a8:	af02      	add	r7, sp, #8
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	607a      	str	r2, [r7, #4]
 80012ae:	461a      	mov	r2, r3
 80012b0:	460b      	mov	r3, r1
 80012b2:	817b      	strh	r3, [r7, #10]
 80012b4:	4613      	mov	r3, r2
 80012b6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	2b20      	cmp	r3, #32
 80012c2:	f040 80fd 	bne.w	80014c0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d101      	bne.n	80012d4 <HAL_I2C_Master_Transmit+0x30>
 80012d0:	2302      	movs	r3, #2
 80012d2:	e0f6      	b.n	80014c2 <HAL_I2C_Master_Transmit+0x21e>
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2201      	movs	r2, #1
 80012d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80012dc:	f7ff fbfe 	bl	8000adc <HAL_GetTick>
 80012e0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	2319      	movs	r3, #25
 80012e8:	2201      	movs	r2, #1
 80012ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012ee:	68f8      	ldr	r0, [r7, #12]
 80012f0:	f000 f914 	bl	800151c <I2C_WaitOnFlagUntilTimeout>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e0e1      	b.n	80014c2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	2221      	movs	r2, #33	@ 0x21
 8001302:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	2210      	movs	r2, #16
 800130a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2200      	movs	r2, #0
 8001312:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	893a      	ldrh	r2, [r7, #8]
 800131e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2200      	movs	r2, #0
 8001324:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800132a:	b29b      	uxth	r3, r3
 800132c:	2bff      	cmp	r3, #255	@ 0xff
 800132e:	d906      	bls.n	800133e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	22ff      	movs	r2, #255	@ 0xff
 8001334:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001336:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800133a:	617b      	str	r3, [r7, #20]
 800133c:	e007      	b.n	800134e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001342:	b29a      	uxth	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001348:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800134c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001352:	2b00      	cmp	r3, #0
 8001354:	d024      	beq.n	80013a0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800135a:	781a      	ldrb	r2, [r3, #0]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001366:	1c5a      	adds	r2, r3, #1
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001370:	b29b      	uxth	r3, r3
 8001372:	3b01      	subs	r3, #1
 8001374:	b29a      	uxth	r2, r3
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800137e:	3b01      	subs	r3, #1
 8001380:	b29a      	uxth	r2, r3
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800138a:	b2db      	uxtb	r3, r3
 800138c:	3301      	adds	r3, #1
 800138e:	b2da      	uxtb	r2, r3
 8001390:	8979      	ldrh	r1, [r7, #10]
 8001392:	4b4e      	ldr	r3, [pc, #312]	@ (80014cc <HAL_I2C_Master_Transmit+0x228>)
 8001394:	9300      	str	r3, [sp, #0]
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	68f8      	ldr	r0, [r7, #12]
 800139a:	f000 fa83 	bl	80018a4 <I2C_TransferConfig>
 800139e:	e066      	b.n	800146e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	8979      	ldrh	r1, [r7, #10]
 80013a8:	4b48      	ldr	r3, [pc, #288]	@ (80014cc <HAL_I2C_Master_Transmit+0x228>)
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	68f8      	ldr	r0, [r7, #12]
 80013b0:	f000 fa78 	bl	80018a4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80013b4:	e05b      	b.n	800146e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	6a39      	ldr	r1, [r7, #32]
 80013ba:	68f8      	ldr	r0, [r7, #12]
 80013bc:	f000 f907 	bl	80015ce <I2C_WaitOnTXISFlagUntilTimeout>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e07b      	b.n	80014c2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ce:	781a      	ldrb	r2, [r3, #0]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013da:	1c5a      	adds	r2, r3, #1
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	3b01      	subs	r3, #1
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013f2:	3b01      	subs	r3, #1
 80013f4:	b29a      	uxth	r2, r3
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013fe:	b29b      	uxth	r3, r3
 8001400:	2b00      	cmp	r3, #0
 8001402:	d034      	beq.n	800146e <HAL_I2C_Master_Transmit+0x1ca>
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001408:	2b00      	cmp	r3, #0
 800140a:	d130      	bne.n	800146e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	6a3b      	ldr	r3, [r7, #32]
 8001412:	2200      	movs	r2, #0
 8001414:	2180      	movs	r1, #128	@ 0x80
 8001416:	68f8      	ldr	r0, [r7, #12]
 8001418:	f000 f880 	bl	800151c <I2C_WaitOnFlagUntilTimeout>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e04d      	b.n	80014c2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800142a:	b29b      	uxth	r3, r3
 800142c:	2bff      	cmp	r3, #255	@ 0xff
 800142e:	d90e      	bls.n	800144e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	22ff      	movs	r2, #255	@ 0xff
 8001434:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800143a:	b2da      	uxtb	r2, r3
 800143c:	8979      	ldrh	r1, [r7, #10]
 800143e:	2300      	movs	r3, #0
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f000 fa2c 	bl	80018a4 <I2C_TransferConfig>
 800144c:	e00f      	b.n	800146e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001452:	b29a      	uxth	r2, r3
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800145c:	b2da      	uxtb	r2, r3
 800145e:	8979      	ldrh	r1, [r7, #10]
 8001460:	2300      	movs	r3, #0
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001468:	68f8      	ldr	r0, [r7, #12]
 800146a:	f000 fa1b 	bl	80018a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001472:	b29b      	uxth	r3, r3
 8001474:	2b00      	cmp	r3, #0
 8001476:	d19e      	bne.n	80013b6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	6a39      	ldr	r1, [r7, #32]
 800147c:	68f8      	ldr	r0, [r7, #12]
 800147e:	f000 f8ed 	bl	800165c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e01a      	b.n	80014c2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2220      	movs	r2, #32
 8001492:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6859      	ldr	r1, [r3, #4]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	4b0c      	ldr	r3, [pc, #48]	@ (80014d0 <HAL_I2C_Master_Transmit+0x22c>)
 80014a0:	400b      	ands	r3, r1
 80014a2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2220      	movs	r2, #32
 80014a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2200      	movs	r2, #0
 80014b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2200      	movs	r2, #0
 80014b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80014bc:	2300      	movs	r3, #0
 80014be:	e000      	b.n	80014c2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80014c0:	2302      	movs	r3, #2
  }
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	80002000 	.word	0x80002000
 80014d0:	fe00e800 	.word	0xfe00e800

080014d4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d103      	bne.n	80014f2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2200      	movs	r2, #0
 80014f0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d007      	beq.n	8001510 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	699a      	ldr	r2, [r3, #24]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f042 0201 	orr.w	r2, r2, #1
 800150e:	619a      	str	r2, [r3, #24]
  }
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	4613      	mov	r3, r2
 800152a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800152c:	e03b      	b.n	80015a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	6839      	ldr	r1, [r7, #0]
 8001532:	68f8      	ldr	r0, [r7, #12]
 8001534:	f000 f8d6 	bl	80016e4 <I2C_IsErrorOccurred>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e041      	b.n	80015c6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001548:	d02d      	beq.n	80015a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800154a:	f7ff fac7 	bl	8000adc <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	429a      	cmp	r2, r3
 8001558:	d302      	bcc.n	8001560 <I2C_WaitOnFlagUntilTimeout+0x44>
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d122      	bne.n	80015a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	699a      	ldr	r2, [r3, #24]
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	4013      	ands	r3, r2
 800156a:	68ba      	ldr	r2, [r7, #8]
 800156c:	429a      	cmp	r2, r3
 800156e:	bf0c      	ite	eq
 8001570:	2301      	moveq	r3, #1
 8001572:	2300      	movne	r3, #0
 8001574:	b2db      	uxtb	r3, r3
 8001576:	461a      	mov	r2, r3
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	429a      	cmp	r2, r3
 800157c:	d113      	bne.n	80015a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001582:	f043 0220 	orr.w	r2, r3, #32
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2220      	movs	r2, #32
 800158e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	2200      	movs	r2, #0
 800159e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e00f      	b.n	80015c6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	699a      	ldr	r2, [r3, #24]
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	4013      	ands	r3, r2
 80015b0:	68ba      	ldr	r2, [r7, #8]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	bf0c      	ite	eq
 80015b6:	2301      	moveq	r3, #1
 80015b8:	2300      	movne	r3, #0
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	461a      	mov	r2, r3
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d0b4      	beq.n	800152e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b084      	sub	sp, #16
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	60f8      	str	r0, [r7, #12]
 80015d6:	60b9      	str	r1, [r7, #8]
 80015d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80015da:	e033      	b.n	8001644 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	68b9      	ldr	r1, [r7, #8]
 80015e0:	68f8      	ldr	r0, [r7, #12]
 80015e2:	f000 f87f 	bl	80016e4 <I2C_IsErrorOccurred>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e031      	b.n	8001654 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f6:	d025      	beq.n	8001644 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015f8:	f7ff fa70 	bl	8000adc <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	68ba      	ldr	r2, [r7, #8]
 8001604:	429a      	cmp	r2, r3
 8001606:	d302      	bcc.n	800160e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d11a      	bne.n	8001644 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b02      	cmp	r3, #2
 800161a:	d013      	beq.n	8001644 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001620:	f043 0220 	orr.w	r2, r3, #32
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2220      	movs	r2, #32
 800162c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2200      	movs	r2, #0
 8001634:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2200      	movs	r2, #0
 800163c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e007      	b.n	8001654 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b02      	cmp	r3, #2
 8001650:	d1c4      	bne.n	80015dc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001652:	2300      	movs	r3, #0
}
 8001654:	4618      	mov	r0, r3
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001668:	e02f      	b.n	80016ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	68b9      	ldr	r1, [r7, #8]
 800166e:	68f8      	ldr	r0, [r7, #12]
 8001670:	f000 f838 	bl	80016e4 <I2C_IsErrorOccurred>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e02d      	b.n	80016da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800167e:	f7ff fa2d 	bl	8000adc <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	68ba      	ldr	r2, [r7, #8]
 800168a:	429a      	cmp	r2, r3
 800168c:	d302      	bcc.n	8001694 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d11a      	bne.n	80016ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	f003 0320 	and.w	r3, r3, #32
 800169e:	2b20      	cmp	r3, #32
 80016a0:	d013      	beq.n	80016ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a6:	f043 0220 	orr.w	r2, r3, #32
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2220      	movs	r2, #32
 80016b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2200      	movs	r2, #0
 80016ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e007      	b.n	80016da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	f003 0320 	and.w	r3, r3, #32
 80016d4:	2b20      	cmp	r3, #32
 80016d6:	d1c8      	bne.n	800166a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08a      	sub	sp, #40	@ 0x28
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016f0:	2300      	movs	r3, #0
 80016f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	f003 0310 	and.w	r3, r3, #16
 800170c:	2b00      	cmp	r3, #0
 800170e:	d068      	beq.n	80017e2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2210      	movs	r2, #16
 8001716:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001718:	e049      	b.n	80017ae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001720:	d045      	beq.n	80017ae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001722:	f7ff f9db 	bl	8000adc <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	68ba      	ldr	r2, [r7, #8]
 800172e:	429a      	cmp	r2, r3
 8001730:	d302      	bcc.n	8001738 <I2C_IsErrorOccurred+0x54>
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d13a      	bne.n	80017ae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001742:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800174a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001756:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800175a:	d121      	bne.n	80017a0 <I2C_IsErrorOccurred+0xbc>
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001762:	d01d      	beq.n	80017a0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001764:	7cfb      	ldrb	r3, [r7, #19]
 8001766:	2b20      	cmp	r3, #32
 8001768:	d01a      	beq.n	80017a0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	685a      	ldr	r2, [r3, #4]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001778:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800177a:	f7ff f9af 	bl	8000adc <HAL_GetTick>
 800177e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001780:	e00e      	b.n	80017a0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001782:	f7ff f9ab 	bl	8000adc <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b19      	cmp	r3, #25
 800178e:	d907      	bls.n	80017a0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001790:	6a3b      	ldr	r3, [r7, #32]
 8001792:	f043 0320 	orr.w	r3, r3, #32
 8001796:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800179e:	e006      	b.n	80017ae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	f003 0320 	and.w	r3, r3, #32
 80017aa:	2b20      	cmp	r3, #32
 80017ac:	d1e9      	bne.n	8001782 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	f003 0320 	and.w	r3, r3, #32
 80017b8:	2b20      	cmp	r3, #32
 80017ba:	d003      	beq.n	80017c4 <I2C_IsErrorOccurred+0xe0>
 80017bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0aa      	beq.n	800171a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80017c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d103      	bne.n	80017d4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2220      	movs	r2, #32
 80017d2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80017d4:	6a3b      	ldr	r3, [r7, #32]
 80017d6:	f043 0304 	orr.w	r3, r3, #4
 80017da:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d00b      	beq.n	800180c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80017f4:	6a3b      	ldr	r3, [r7, #32]
 80017f6:	f043 0301 	orr.w	r3, r3, #1
 80017fa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001804:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001812:	2b00      	cmp	r3, #0
 8001814:	d00b      	beq.n	800182e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001816:	6a3b      	ldr	r3, [r7, #32]
 8001818:	f043 0308 	orr.w	r3, r3, #8
 800181c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001826:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001834:	2b00      	cmp	r3, #0
 8001836:	d00b      	beq.n	8001850 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001838:	6a3b      	ldr	r3, [r7, #32]
 800183a:	f043 0302 	orr.w	r3, r3, #2
 800183e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001848:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001850:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001854:	2b00      	cmp	r3, #0
 8001856:	d01c      	beq.n	8001892 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001858:	68f8      	ldr	r0, [r7, #12]
 800185a:	f7ff fe3b 	bl	80014d4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6859      	ldr	r1, [r3, #4]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	4b0d      	ldr	r3, [pc, #52]	@ (80018a0 <I2C_IsErrorOccurred+0x1bc>)
 800186a:	400b      	ands	r3, r1
 800186c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001872:	6a3b      	ldr	r3, [r7, #32]
 8001874:	431a      	orrs	r2, r3
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2220      	movs	r2, #32
 800187e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2200      	movs	r2, #0
 800188e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001892:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001896:	4618      	mov	r0, r3
 8001898:	3728      	adds	r7, #40	@ 0x28
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	fe00e800 	.word	0xfe00e800

080018a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b087      	sub	sp, #28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	607b      	str	r3, [r7, #4]
 80018ae:	460b      	mov	r3, r1
 80018b0:	817b      	strh	r3, [r7, #10]
 80018b2:	4613      	mov	r3, r2
 80018b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80018b6:	897b      	ldrh	r3, [r7, #10]
 80018b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80018bc:	7a7b      	ldrb	r3, [r7, #9]
 80018be:	041b      	lsls	r3, r3, #16
 80018c0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80018c4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80018ca:	6a3b      	ldr	r3, [r7, #32]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80018d2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	685a      	ldr	r2, [r3, #4]
 80018da:	6a3b      	ldr	r3, [r7, #32]
 80018dc:	0d5b      	lsrs	r3, r3, #21
 80018de:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80018e2:	4b08      	ldr	r3, [pc, #32]	@ (8001904 <I2C_TransferConfig+0x60>)
 80018e4:	430b      	orrs	r3, r1
 80018e6:	43db      	mvns	r3, r3
 80018e8:	ea02 0103 	and.w	r1, r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	430a      	orrs	r2, r1
 80018f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80018f6:	bf00      	nop
 80018f8:	371c      	adds	r7, #28
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	03ff63ff 	.word	0x03ff63ff

08001908 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b20      	cmp	r3, #32
 800191c:	d138      	bne.n	8001990 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001924:	2b01      	cmp	r3, #1
 8001926:	d101      	bne.n	800192c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001928:	2302      	movs	r3, #2
 800192a:	e032      	b.n	8001992 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2224      	movs	r2, #36	@ 0x24
 8001938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f022 0201 	bic.w	r2, r2, #1
 800194a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800195a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6819      	ldr	r1, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	430a      	orrs	r2, r1
 800196a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f042 0201 	orr.w	r2, r2, #1
 800197a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2220      	movs	r2, #32
 8001980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800198c:	2300      	movs	r3, #0
 800198e:	e000      	b.n	8001992 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001990:	2302      	movs	r3, #2
  }
}
 8001992:	4618      	mov	r0, r3
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800199e:	b480      	push	{r7}
 80019a0:	b085      	sub	sp, #20
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
 80019a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	2b20      	cmp	r3, #32
 80019b2:	d139      	bne.n	8001a28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d101      	bne.n	80019c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80019be:	2302      	movs	r3, #2
 80019c0:	e033      	b.n	8001a2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2201      	movs	r2, #1
 80019c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2224      	movs	r2, #36	@ 0x24
 80019ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 0201 	bic.w	r2, r2, #1
 80019e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80019f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	021b      	lsls	r3, r3, #8
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	68fa      	ldr	r2, [r7, #12]
 8001a02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f042 0201 	orr.w	r2, r2, #1
 8001a12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2220      	movs	r2, #32
 8001a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001a24:	2300      	movs	r3, #0
 8001a26:	e000      	b.n	8001a2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001a28:	2302      	movs	r3, #2
  }
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
	...

08001a38 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001a40:	4b19      	ldr	r3, [pc, #100]	@ (8001aa8 <HAL_PWREx_ConfigSupply+0x70>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	2b04      	cmp	r3, #4
 8001a4a:	d00a      	beq.n	8001a62 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001a4c:	4b16      	ldr	r3, [pc, #88]	@ (8001aa8 <HAL_PWREx_ConfigSupply+0x70>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	f003 0307 	and.w	r3, r3, #7
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d001      	beq.n	8001a5e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e01f      	b.n	8001a9e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	e01d      	b.n	8001a9e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001a62:	4b11      	ldr	r3, [pc, #68]	@ (8001aa8 <HAL_PWREx_ConfigSupply+0x70>)
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	f023 0207 	bic.w	r2, r3, #7
 8001a6a:	490f      	ldr	r1, [pc, #60]	@ (8001aa8 <HAL_PWREx_ConfigSupply+0x70>)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001a72:	f7ff f833 	bl	8000adc <HAL_GetTick>
 8001a76:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001a78:	e009      	b.n	8001a8e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001a7a:	f7ff f82f 	bl	8000adc <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a88:	d901      	bls.n	8001a8e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e007      	b.n	8001a9e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001a8e:	4b06      	ldr	r3, [pc, #24]	@ (8001aa8 <HAL_PWREx_ConfigSupply+0x70>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a9a:	d1ee      	bne.n	8001a7a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	58024800 	.word	0x58024800

08001aac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08c      	sub	sp, #48	@ 0x30
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d102      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	f000 bc48 	b.w	8002350 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f000 8088 	beq.w	8001bde <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ace:	4b99      	ldr	r3, [pc, #612]	@ (8001d34 <HAL_RCC_OscConfig+0x288>)
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ad8:	4b96      	ldr	r3, [pc, #600]	@ (8001d34 <HAL_RCC_OscConfig+0x288>)
 8001ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001adc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ae0:	2b10      	cmp	r3, #16
 8001ae2:	d007      	beq.n	8001af4 <HAL_RCC_OscConfig+0x48>
 8001ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ae6:	2b18      	cmp	r3, #24
 8001ae8:	d111      	bne.n	8001b0e <HAL_RCC_OscConfig+0x62>
 8001aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001aec:	f003 0303 	and.w	r3, r3, #3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d10c      	bne.n	8001b0e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af4:	4b8f      	ldr	r3, [pc, #572]	@ (8001d34 <HAL_RCC_OscConfig+0x288>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d06d      	beq.n	8001bdc <HAL_RCC_OscConfig+0x130>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d169      	bne.n	8001bdc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	f000 bc21 	b.w	8002350 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b16:	d106      	bne.n	8001b26 <HAL_RCC_OscConfig+0x7a>
 8001b18:	4b86      	ldr	r3, [pc, #536]	@ (8001d34 <HAL_RCC_OscConfig+0x288>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a85      	ldr	r2, [pc, #532]	@ (8001d34 <HAL_RCC_OscConfig+0x288>)
 8001b1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b22:	6013      	str	r3, [r2, #0]
 8001b24:	e02e      	b.n	8001b84 <HAL_RCC_OscConfig+0xd8>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10c      	bne.n	8001b48 <HAL_RCC_OscConfig+0x9c>
 8001b2e:	4b81      	ldr	r3, [pc, #516]	@ (8001d34 <HAL_RCC_OscConfig+0x288>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a80      	ldr	r2, [pc, #512]	@ (8001d34 <HAL_RCC_OscConfig+0x288>)
 8001b34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b38:	6013      	str	r3, [r2, #0]
 8001b3a:	4b7e      	ldr	r3, [pc, #504]	@ (8001d34 <HAL_RCC_OscConfig+0x288>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a7d      	ldr	r2, [pc, #500]	@ (8001d34 <HAL_RCC_OscConfig+0x288>)
 8001b40:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	e01d      	b.n	8001b84 <HAL_RCC_OscConfig+0xd8>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b50:	d10c      	bne.n	8001b6c <HAL_RCC_OscConfig+0xc0>
 8001b52:	4b78      	ldr	r3, [pc, #480]	@ (8001d34 <HAL_RCC_OscConfig+0x288>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a77      	ldr	r2, [pc, #476]	@ (8001d34 <HAL_RCC_OscConfig+0x288>)
 8001b58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b5c:	6013      	str	r3, [r2, #0]
 8001b5e:	4b75      	ldr	r3, [pc, #468]	@ (8001d34 <HAL_RCC_OscConfig+0x288>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a74      	ldr	r2, [pc, #464]	@ (8001d34 <HAL_RCC_OscConfig+0x288>)
 8001b64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	e00b      	b.n	8001b84 <HAL_RCC_OscConfig+0xd8>
 8001b6c:	4b71      	ldr	r3, [pc, #452]	@ (8001d34 <HAL_RCC_OscConfig+0x288>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a70      	ldr	r2, [pc, #448]	@ (8001d34 <HAL_RCC_OscConfig+0x288>)
 8001b72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b76:	6013      	str	r3, [r2, #0]
 8001b78:	4b6e      	ldr	r3, [pc, #440]	@ (8001d34 <HAL_RCC_OscConfig+0x288>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a6d      	ldr	r2, [pc, #436]	@ (8001d34 <HAL_RCC_OscConfig+0x288>)
 8001b7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d013      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b8c:	f7fe ffa6 	bl	8000adc <HAL_GetTick>
 8001b90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b94:	f7fe ffa2 	bl	8000adc <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b64      	cmp	r3, #100	@ 0x64
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e3d4      	b.n	8002350 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ba6:	4b63      	ldr	r3, [pc, #396]	@ (8001d34 <HAL_RCC_OscConfig+0x288>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d0f0      	beq.n	8001b94 <HAL_RCC_OscConfig+0xe8>
 8001bb2:	e014      	b.n	8001bde <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb4:	f7fe ff92 	bl	8000adc <HAL_GetTick>
 8001bb8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bbc:	f7fe ff8e 	bl	8000adc <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b64      	cmp	r3, #100	@ 0x64
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e3c0      	b.n	8002350 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001bce:	4b59      	ldr	r3, [pc, #356]	@ (8001d34 <HAL_RCC_OscConfig+0x288>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1f0      	bne.n	8001bbc <HAL_RCC_OscConfig+0x110>
 8001bda:	e000      	b.n	8001bde <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 80ca 	beq.w	8001d80 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bec:	4b51      	ldr	r3, [pc, #324]	@ (8001d34 <HAL_RCC_OscConfig+0x288>)
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001bf4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001bf6:	4b4f      	ldr	r3, [pc, #316]	@ (8001d34 <HAL_RCC_OscConfig+0x288>)
 8001bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bfa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001bfc:	6a3b      	ldr	r3, [r7, #32]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d007      	beq.n	8001c12 <HAL_RCC_OscConfig+0x166>
 8001c02:	6a3b      	ldr	r3, [r7, #32]
 8001c04:	2b18      	cmp	r3, #24
 8001c06:	d156      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x20a>
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	f003 0303 	and.w	r3, r3, #3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d151      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c12:	4b48      	ldr	r3, [pc, #288]	@ (8001d34 <HAL_RCC_OscConfig+0x288>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0304 	and.w	r3, r3, #4
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d005      	beq.n	8001c2a <HAL_RCC_OscConfig+0x17e>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e392      	b.n	8002350 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001c2a:	4b42      	ldr	r3, [pc, #264]	@ (8001d34 <HAL_RCC_OscConfig+0x288>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f023 0219 	bic.w	r2, r3, #25
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	493f      	ldr	r1, [pc, #252]	@ (8001d34 <HAL_RCC_OscConfig+0x288>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3c:	f7fe ff4e 	bl	8000adc <HAL_GetTick>
 8001c40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c44:	f7fe ff4a 	bl	8000adc <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e37c      	b.n	8002350 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c56:	4b37      	ldr	r3, [pc, #220]	@ (8001d34 <HAL_RCC_OscConfig+0x288>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0304 	and.w	r3, r3, #4
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d0f0      	beq.n	8001c44 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c62:	f7fe ff6b 	bl	8000b3c <HAL_GetREVID>
 8001c66:	4603      	mov	r3, r0
 8001c68:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d817      	bhi.n	8001ca0 <HAL_RCC_OscConfig+0x1f4>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	2b40      	cmp	r3, #64	@ 0x40
 8001c76:	d108      	bne.n	8001c8a <HAL_RCC_OscConfig+0x1de>
 8001c78:	4b2e      	ldr	r3, [pc, #184]	@ (8001d34 <HAL_RCC_OscConfig+0x288>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001c80:	4a2c      	ldr	r2, [pc, #176]	@ (8001d34 <HAL_RCC_OscConfig+0x288>)
 8001c82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c86:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c88:	e07a      	b.n	8001d80 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c8a:	4b2a      	ldr	r3, [pc, #168]	@ (8001d34 <HAL_RCC_OscConfig+0x288>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	031b      	lsls	r3, r3, #12
 8001c98:	4926      	ldr	r1, [pc, #152]	@ (8001d34 <HAL_RCC_OscConfig+0x288>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c9e:	e06f      	b.n	8001d80 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca0:	4b24      	ldr	r3, [pc, #144]	@ (8001d34 <HAL_RCC_OscConfig+0x288>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	061b      	lsls	r3, r3, #24
 8001cae:	4921      	ldr	r1, [pc, #132]	@ (8001d34 <HAL_RCC_OscConfig+0x288>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cb4:	e064      	b.n	8001d80 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d047      	beq.n	8001d4e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001cbe:	4b1d      	ldr	r3, [pc, #116]	@ (8001d34 <HAL_RCC_OscConfig+0x288>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f023 0219 	bic.w	r2, r3, #25
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	491a      	ldr	r1, [pc, #104]	@ (8001d34 <HAL_RCC_OscConfig+0x288>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd0:	f7fe ff04 	bl	8000adc <HAL_GetTick>
 8001cd4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cd8:	f7fe ff00 	bl	8000adc <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e332      	b.n	8002350 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cea:	4b12      	ldr	r3, [pc, #72]	@ (8001d34 <HAL_RCC_OscConfig+0x288>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0304 	and.w	r3, r3, #4
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d0f0      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf6:	f7fe ff21 	bl	8000b3c <HAL_GetREVID>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d819      	bhi.n	8001d38 <HAL_RCC_OscConfig+0x28c>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	2b40      	cmp	r3, #64	@ 0x40
 8001d0a:	d108      	bne.n	8001d1e <HAL_RCC_OscConfig+0x272>
 8001d0c:	4b09      	ldr	r3, [pc, #36]	@ (8001d34 <HAL_RCC_OscConfig+0x288>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001d14:	4a07      	ldr	r2, [pc, #28]	@ (8001d34 <HAL_RCC_OscConfig+0x288>)
 8001d16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d1a:	6053      	str	r3, [r2, #4]
 8001d1c:	e030      	b.n	8001d80 <HAL_RCC_OscConfig+0x2d4>
 8001d1e:	4b05      	ldr	r3, [pc, #20]	@ (8001d34 <HAL_RCC_OscConfig+0x288>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	031b      	lsls	r3, r3, #12
 8001d2c:	4901      	ldr	r1, [pc, #4]	@ (8001d34 <HAL_RCC_OscConfig+0x288>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	604b      	str	r3, [r1, #4]
 8001d32:	e025      	b.n	8001d80 <HAL_RCC_OscConfig+0x2d4>
 8001d34:	58024400 	.word	0x58024400
 8001d38:	4b9a      	ldr	r3, [pc, #616]	@ (8001fa4 <HAL_RCC_OscConfig+0x4f8>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	061b      	lsls	r3, r3, #24
 8001d46:	4997      	ldr	r1, [pc, #604]	@ (8001fa4 <HAL_RCC_OscConfig+0x4f8>)
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	604b      	str	r3, [r1, #4]
 8001d4c:	e018      	b.n	8001d80 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d4e:	4b95      	ldr	r3, [pc, #596]	@ (8001fa4 <HAL_RCC_OscConfig+0x4f8>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a94      	ldr	r2, [pc, #592]	@ (8001fa4 <HAL_RCC_OscConfig+0x4f8>)
 8001d54:	f023 0301 	bic.w	r3, r3, #1
 8001d58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d5a:	f7fe febf 	bl	8000adc <HAL_GetTick>
 8001d5e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d60:	e008      	b.n	8001d74 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d62:	f7fe febb 	bl	8000adc <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e2ed      	b.n	8002350 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d74:	4b8b      	ldr	r3, [pc, #556]	@ (8001fa4 <HAL_RCC_OscConfig+0x4f8>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d1f0      	bne.n	8001d62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0310 	and.w	r3, r3, #16
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f000 80a9 	beq.w	8001ee0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d8e:	4b85      	ldr	r3, [pc, #532]	@ (8001fa4 <HAL_RCC_OscConfig+0x4f8>)
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d96:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d98:	4b82      	ldr	r3, [pc, #520]	@ (8001fa4 <HAL_RCC_OscConfig+0x4f8>)
 8001d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d9c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	2b08      	cmp	r3, #8
 8001da2:	d007      	beq.n	8001db4 <HAL_RCC_OscConfig+0x308>
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	2b18      	cmp	r3, #24
 8001da8:	d13a      	bne.n	8001e20 <HAL_RCC_OscConfig+0x374>
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	f003 0303 	and.w	r3, r3, #3
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d135      	bne.n	8001e20 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001db4:	4b7b      	ldr	r3, [pc, #492]	@ (8001fa4 <HAL_RCC_OscConfig+0x4f8>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d005      	beq.n	8001dcc <HAL_RCC_OscConfig+0x320>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	69db      	ldr	r3, [r3, #28]
 8001dc4:	2b80      	cmp	r3, #128	@ 0x80
 8001dc6:	d001      	beq.n	8001dcc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e2c1      	b.n	8002350 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001dcc:	f7fe feb6 	bl	8000b3c <HAL_GetREVID>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d817      	bhi.n	8001e0a <HAL_RCC_OscConfig+0x35e>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	2b20      	cmp	r3, #32
 8001de0:	d108      	bne.n	8001df4 <HAL_RCC_OscConfig+0x348>
 8001de2:	4b70      	ldr	r3, [pc, #448]	@ (8001fa4 <HAL_RCC_OscConfig+0x4f8>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001dea:	4a6e      	ldr	r2, [pc, #440]	@ (8001fa4 <HAL_RCC_OscConfig+0x4f8>)
 8001dec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001df0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001df2:	e075      	b.n	8001ee0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001df4:	4b6b      	ldr	r3, [pc, #428]	@ (8001fa4 <HAL_RCC_OscConfig+0x4f8>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	069b      	lsls	r3, r3, #26
 8001e02:	4968      	ldr	r1, [pc, #416]	@ (8001fa4 <HAL_RCC_OscConfig+0x4f8>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e08:	e06a      	b.n	8001ee0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e0a:	4b66      	ldr	r3, [pc, #408]	@ (8001fa4 <HAL_RCC_OscConfig+0x4f8>)
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	061b      	lsls	r3, r3, #24
 8001e18:	4962      	ldr	r1, [pc, #392]	@ (8001fa4 <HAL_RCC_OscConfig+0x4f8>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e1e:	e05f      	b.n	8001ee0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	69db      	ldr	r3, [r3, #28]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d042      	beq.n	8001eae <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001e28:	4b5e      	ldr	r3, [pc, #376]	@ (8001fa4 <HAL_RCC_OscConfig+0x4f8>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a5d      	ldr	r2, [pc, #372]	@ (8001fa4 <HAL_RCC_OscConfig+0x4f8>)
 8001e2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e34:	f7fe fe52 	bl	8000adc <HAL_GetTick>
 8001e38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001e3c:	f7fe fe4e 	bl	8000adc <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e280      	b.n	8002350 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e4e:	4b55      	ldr	r3, [pc, #340]	@ (8001fa4 <HAL_RCC_OscConfig+0x4f8>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d0f0      	beq.n	8001e3c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e5a:	f7fe fe6f 	bl	8000b3c <HAL_GetREVID>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d817      	bhi.n	8001e98 <HAL_RCC_OscConfig+0x3ec>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a1b      	ldr	r3, [r3, #32]
 8001e6c:	2b20      	cmp	r3, #32
 8001e6e:	d108      	bne.n	8001e82 <HAL_RCC_OscConfig+0x3d6>
 8001e70:	4b4c      	ldr	r3, [pc, #304]	@ (8001fa4 <HAL_RCC_OscConfig+0x4f8>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001e78:	4a4a      	ldr	r2, [pc, #296]	@ (8001fa4 <HAL_RCC_OscConfig+0x4f8>)
 8001e7a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001e7e:	6053      	str	r3, [r2, #4]
 8001e80:	e02e      	b.n	8001ee0 <HAL_RCC_OscConfig+0x434>
 8001e82:	4b48      	ldr	r3, [pc, #288]	@ (8001fa4 <HAL_RCC_OscConfig+0x4f8>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	069b      	lsls	r3, r3, #26
 8001e90:	4944      	ldr	r1, [pc, #272]	@ (8001fa4 <HAL_RCC_OscConfig+0x4f8>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	604b      	str	r3, [r1, #4]
 8001e96:	e023      	b.n	8001ee0 <HAL_RCC_OscConfig+0x434>
 8001e98:	4b42      	ldr	r3, [pc, #264]	@ (8001fa4 <HAL_RCC_OscConfig+0x4f8>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	061b      	lsls	r3, r3, #24
 8001ea6:	493f      	ldr	r1, [pc, #252]	@ (8001fa4 <HAL_RCC_OscConfig+0x4f8>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	60cb      	str	r3, [r1, #12]
 8001eac:	e018      	b.n	8001ee0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001eae:	4b3d      	ldr	r3, [pc, #244]	@ (8001fa4 <HAL_RCC_OscConfig+0x4f8>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a3c      	ldr	r2, [pc, #240]	@ (8001fa4 <HAL_RCC_OscConfig+0x4f8>)
 8001eb4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001eb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eba:	f7fe fe0f 	bl	8000adc <HAL_GetTick>
 8001ebe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001ec0:	e008      	b.n	8001ed4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001ec2:	f7fe fe0b 	bl	8000adc <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e23d      	b.n	8002350 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001ed4:	4b33      	ldr	r3, [pc, #204]	@ (8001fa4 <HAL_RCC_OscConfig+0x4f8>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1f0      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0308 	and.w	r3, r3, #8
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d036      	beq.n	8001f5a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	695b      	ldr	r3, [r3, #20]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d019      	beq.n	8001f28 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ef4:	4b2b      	ldr	r3, [pc, #172]	@ (8001fa4 <HAL_RCC_OscConfig+0x4f8>)
 8001ef6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ef8:	4a2a      	ldr	r2, [pc, #168]	@ (8001fa4 <HAL_RCC_OscConfig+0x4f8>)
 8001efa:	f043 0301 	orr.w	r3, r3, #1
 8001efe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f00:	f7fe fdec 	bl	8000adc <HAL_GetTick>
 8001f04:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f08:	f7fe fde8 	bl	8000adc <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e21a      	b.n	8002350 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f1a:	4b22      	ldr	r3, [pc, #136]	@ (8001fa4 <HAL_RCC_OscConfig+0x4f8>)
 8001f1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0f0      	beq.n	8001f08 <HAL_RCC_OscConfig+0x45c>
 8001f26:	e018      	b.n	8001f5a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f28:	4b1e      	ldr	r3, [pc, #120]	@ (8001fa4 <HAL_RCC_OscConfig+0x4f8>)
 8001f2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f2c:	4a1d      	ldr	r2, [pc, #116]	@ (8001fa4 <HAL_RCC_OscConfig+0x4f8>)
 8001f2e:	f023 0301 	bic.w	r3, r3, #1
 8001f32:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f34:	f7fe fdd2 	bl	8000adc <HAL_GetTick>
 8001f38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f3c:	f7fe fdce 	bl	8000adc <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e200      	b.n	8002350 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f4e:	4b15      	ldr	r3, [pc, #84]	@ (8001fa4 <HAL_RCC_OscConfig+0x4f8>)
 8001f50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1f0      	bne.n	8001f3c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0320 	and.w	r3, r3, #32
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d039      	beq.n	8001fda <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d01c      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001fa4 <HAL_RCC_OscConfig+0x4f8>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a0c      	ldr	r2, [pc, #48]	@ (8001fa4 <HAL_RCC_OscConfig+0x4f8>)
 8001f74:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f78:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001f7a:	f7fe fdaf 	bl	8000adc <HAL_GetTick>
 8001f7e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f80:	e008      	b.n	8001f94 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f82:	f7fe fdab 	bl	8000adc <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e1dd      	b.n	8002350 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f94:	4b03      	ldr	r3, [pc, #12]	@ (8001fa4 <HAL_RCC_OscConfig+0x4f8>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0f0      	beq.n	8001f82 <HAL_RCC_OscConfig+0x4d6>
 8001fa0:	e01b      	b.n	8001fda <HAL_RCC_OscConfig+0x52e>
 8001fa2:	bf00      	nop
 8001fa4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001fa8:	4b9b      	ldr	r3, [pc, #620]	@ (8002218 <HAL_RCC_OscConfig+0x76c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a9a      	ldr	r2, [pc, #616]	@ (8002218 <HAL_RCC_OscConfig+0x76c>)
 8001fae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001fb2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001fb4:	f7fe fd92 	bl	8000adc <HAL_GetTick>
 8001fb8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fbc:	f7fe fd8e 	bl	8000adc <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e1c0      	b.n	8002350 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001fce:	4b92      	ldr	r3, [pc, #584]	@ (8002218 <HAL_RCC_OscConfig+0x76c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1f0      	bne.n	8001fbc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0304 	and.w	r3, r3, #4
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 8081 	beq.w	80020ea <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001fe8:	4b8c      	ldr	r3, [pc, #560]	@ (800221c <HAL_RCC_OscConfig+0x770>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a8b      	ldr	r2, [pc, #556]	@ (800221c <HAL_RCC_OscConfig+0x770>)
 8001fee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ff2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ff4:	f7fe fd72 	bl	8000adc <HAL_GetTick>
 8001ff8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ffc:	f7fe fd6e 	bl	8000adc <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b64      	cmp	r3, #100	@ 0x64
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e1a0      	b.n	8002350 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800200e:	4b83      	ldr	r3, [pc, #524]	@ (800221c <HAL_RCC_OscConfig+0x770>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0f0      	beq.n	8001ffc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d106      	bne.n	8002030 <HAL_RCC_OscConfig+0x584>
 8002022:	4b7d      	ldr	r3, [pc, #500]	@ (8002218 <HAL_RCC_OscConfig+0x76c>)
 8002024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002026:	4a7c      	ldr	r2, [pc, #496]	@ (8002218 <HAL_RCC_OscConfig+0x76c>)
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	6713      	str	r3, [r2, #112]	@ 0x70
 800202e:	e02d      	b.n	800208c <HAL_RCC_OscConfig+0x5e0>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d10c      	bne.n	8002052 <HAL_RCC_OscConfig+0x5a6>
 8002038:	4b77      	ldr	r3, [pc, #476]	@ (8002218 <HAL_RCC_OscConfig+0x76c>)
 800203a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800203c:	4a76      	ldr	r2, [pc, #472]	@ (8002218 <HAL_RCC_OscConfig+0x76c>)
 800203e:	f023 0301 	bic.w	r3, r3, #1
 8002042:	6713      	str	r3, [r2, #112]	@ 0x70
 8002044:	4b74      	ldr	r3, [pc, #464]	@ (8002218 <HAL_RCC_OscConfig+0x76c>)
 8002046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002048:	4a73      	ldr	r2, [pc, #460]	@ (8002218 <HAL_RCC_OscConfig+0x76c>)
 800204a:	f023 0304 	bic.w	r3, r3, #4
 800204e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002050:	e01c      	b.n	800208c <HAL_RCC_OscConfig+0x5e0>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	2b05      	cmp	r3, #5
 8002058:	d10c      	bne.n	8002074 <HAL_RCC_OscConfig+0x5c8>
 800205a:	4b6f      	ldr	r3, [pc, #444]	@ (8002218 <HAL_RCC_OscConfig+0x76c>)
 800205c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800205e:	4a6e      	ldr	r2, [pc, #440]	@ (8002218 <HAL_RCC_OscConfig+0x76c>)
 8002060:	f043 0304 	orr.w	r3, r3, #4
 8002064:	6713      	str	r3, [r2, #112]	@ 0x70
 8002066:	4b6c      	ldr	r3, [pc, #432]	@ (8002218 <HAL_RCC_OscConfig+0x76c>)
 8002068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800206a:	4a6b      	ldr	r2, [pc, #428]	@ (8002218 <HAL_RCC_OscConfig+0x76c>)
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	6713      	str	r3, [r2, #112]	@ 0x70
 8002072:	e00b      	b.n	800208c <HAL_RCC_OscConfig+0x5e0>
 8002074:	4b68      	ldr	r3, [pc, #416]	@ (8002218 <HAL_RCC_OscConfig+0x76c>)
 8002076:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002078:	4a67      	ldr	r2, [pc, #412]	@ (8002218 <HAL_RCC_OscConfig+0x76c>)
 800207a:	f023 0301 	bic.w	r3, r3, #1
 800207e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002080:	4b65      	ldr	r3, [pc, #404]	@ (8002218 <HAL_RCC_OscConfig+0x76c>)
 8002082:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002084:	4a64      	ldr	r2, [pc, #400]	@ (8002218 <HAL_RCC_OscConfig+0x76c>)
 8002086:	f023 0304 	bic.w	r3, r3, #4
 800208a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d015      	beq.n	80020c0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002094:	f7fe fd22 	bl	8000adc <HAL_GetTick>
 8002098:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800209a:	e00a      	b.n	80020b2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800209c:	f7fe fd1e 	bl	8000adc <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e14e      	b.n	8002350 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020b2:	4b59      	ldr	r3, [pc, #356]	@ (8002218 <HAL_RCC_OscConfig+0x76c>)
 80020b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d0ee      	beq.n	800209c <HAL_RCC_OscConfig+0x5f0>
 80020be:	e014      	b.n	80020ea <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c0:	f7fe fd0c 	bl	8000adc <HAL_GetTick>
 80020c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80020c6:	e00a      	b.n	80020de <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c8:	f7fe fd08 	bl	8000adc <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e138      	b.n	8002350 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80020de:	4b4e      	ldr	r3, [pc, #312]	@ (8002218 <HAL_RCC_OscConfig+0x76c>)
 80020e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1ee      	bne.n	80020c8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f000 812d 	beq.w	800234e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80020f4:	4b48      	ldr	r3, [pc, #288]	@ (8002218 <HAL_RCC_OscConfig+0x76c>)
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80020fc:	2b18      	cmp	r3, #24
 80020fe:	f000 80bd 	beq.w	800227c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002106:	2b02      	cmp	r3, #2
 8002108:	f040 809e 	bne.w	8002248 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800210c:	4b42      	ldr	r3, [pc, #264]	@ (8002218 <HAL_RCC_OscConfig+0x76c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a41      	ldr	r2, [pc, #260]	@ (8002218 <HAL_RCC_OscConfig+0x76c>)
 8002112:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002116:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002118:	f7fe fce0 	bl	8000adc <HAL_GetTick>
 800211c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002120:	f7fe fcdc 	bl	8000adc <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e10e      	b.n	8002350 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002132:	4b39      	ldr	r3, [pc, #228]	@ (8002218 <HAL_RCC_OscConfig+0x76c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1f0      	bne.n	8002120 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800213e:	4b36      	ldr	r3, [pc, #216]	@ (8002218 <HAL_RCC_OscConfig+0x76c>)
 8002140:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002142:	4b37      	ldr	r3, [pc, #220]	@ (8002220 <HAL_RCC_OscConfig+0x774>)
 8002144:	4013      	ands	r3, r2
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800214e:	0112      	lsls	r2, r2, #4
 8002150:	430a      	orrs	r2, r1
 8002152:	4931      	ldr	r1, [pc, #196]	@ (8002218 <HAL_RCC_OscConfig+0x76c>)
 8002154:	4313      	orrs	r3, r2
 8002156:	628b      	str	r3, [r1, #40]	@ 0x28
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215c:	3b01      	subs	r3, #1
 800215e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002166:	3b01      	subs	r3, #1
 8002168:	025b      	lsls	r3, r3, #9
 800216a:	b29b      	uxth	r3, r3
 800216c:	431a      	orrs	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002172:	3b01      	subs	r3, #1
 8002174:	041b      	lsls	r3, r3, #16
 8002176:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800217a:	431a      	orrs	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002180:	3b01      	subs	r3, #1
 8002182:	061b      	lsls	r3, r3, #24
 8002184:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002188:	4923      	ldr	r1, [pc, #140]	@ (8002218 <HAL_RCC_OscConfig+0x76c>)
 800218a:	4313      	orrs	r3, r2
 800218c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800218e:	4b22      	ldr	r3, [pc, #136]	@ (8002218 <HAL_RCC_OscConfig+0x76c>)
 8002190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002192:	4a21      	ldr	r2, [pc, #132]	@ (8002218 <HAL_RCC_OscConfig+0x76c>)
 8002194:	f023 0301 	bic.w	r3, r3, #1
 8002198:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800219a:	4b1f      	ldr	r3, [pc, #124]	@ (8002218 <HAL_RCC_OscConfig+0x76c>)
 800219c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800219e:	4b21      	ldr	r3, [pc, #132]	@ (8002224 <HAL_RCC_OscConfig+0x778>)
 80021a0:	4013      	ands	r3, r2
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80021a6:	00d2      	lsls	r2, r2, #3
 80021a8:	491b      	ldr	r1, [pc, #108]	@ (8002218 <HAL_RCC_OscConfig+0x76c>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80021ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002218 <HAL_RCC_OscConfig+0x76c>)
 80021b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021b2:	f023 020c 	bic.w	r2, r3, #12
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ba:	4917      	ldr	r1, [pc, #92]	@ (8002218 <HAL_RCC_OscConfig+0x76c>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80021c0:	4b15      	ldr	r3, [pc, #84]	@ (8002218 <HAL_RCC_OscConfig+0x76c>)
 80021c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021c4:	f023 0202 	bic.w	r2, r3, #2
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021cc:	4912      	ldr	r1, [pc, #72]	@ (8002218 <HAL_RCC_OscConfig+0x76c>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80021d2:	4b11      	ldr	r3, [pc, #68]	@ (8002218 <HAL_RCC_OscConfig+0x76c>)
 80021d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d6:	4a10      	ldr	r2, [pc, #64]	@ (8002218 <HAL_RCC_OscConfig+0x76c>)
 80021d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80021de:	4b0e      	ldr	r3, [pc, #56]	@ (8002218 <HAL_RCC_OscConfig+0x76c>)
 80021e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e2:	4a0d      	ldr	r2, [pc, #52]	@ (8002218 <HAL_RCC_OscConfig+0x76c>)
 80021e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80021ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002218 <HAL_RCC_OscConfig+0x76c>)
 80021ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002218 <HAL_RCC_OscConfig+0x76c>)
 80021f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80021f6:	4b08      	ldr	r3, [pc, #32]	@ (8002218 <HAL_RCC_OscConfig+0x76c>)
 80021f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021fa:	4a07      	ldr	r2, [pc, #28]	@ (8002218 <HAL_RCC_OscConfig+0x76c>)
 80021fc:	f043 0301 	orr.w	r3, r3, #1
 8002200:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002202:	4b05      	ldr	r3, [pc, #20]	@ (8002218 <HAL_RCC_OscConfig+0x76c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a04      	ldr	r2, [pc, #16]	@ (8002218 <HAL_RCC_OscConfig+0x76c>)
 8002208:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800220c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220e:	f7fe fc65 	bl	8000adc <HAL_GetTick>
 8002212:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002214:	e011      	b.n	800223a <HAL_RCC_OscConfig+0x78e>
 8002216:	bf00      	nop
 8002218:	58024400 	.word	0x58024400
 800221c:	58024800 	.word	0x58024800
 8002220:	fffffc0c 	.word	0xfffffc0c
 8002224:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002228:	f7fe fc58 	bl	8000adc <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e08a      	b.n	8002350 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800223a:	4b47      	ldr	r3, [pc, #284]	@ (8002358 <HAL_RCC_OscConfig+0x8ac>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d0f0      	beq.n	8002228 <HAL_RCC_OscConfig+0x77c>
 8002246:	e082      	b.n	800234e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002248:	4b43      	ldr	r3, [pc, #268]	@ (8002358 <HAL_RCC_OscConfig+0x8ac>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a42      	ldr	r2, [pc, #264]	@ (8002358 <HAL_RCC_OscConfig+0x8ac>)
 800224e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002252:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002254:	f7fe fc42 	bl	8000adc <HAL_GetTick>
 8002258:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800225c:	f7fe fc3e 	bl	8000adc <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e070      	b.n	8002350 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800226e:	4b3a      	ldr	r3, [pc, #232]	@ (8002358 <HAL_RCC_OscConfig+0x8ac>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1f0      	bne.n	800225c <HAL_RCC_OscConfig+0x7b0>
 800227a:	e068      	b.n	800234e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800227c:	4b36      	ldr	r3, [pc, #216]	@ (8002358 <HAL_RCC_OscConfig+0x8ac>)
 800227e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002280:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002282:	4b35      	ldr	r3, [pc, #212]	@ (8002358 <HAL_RCC_OscConfig+0x8ac>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002286:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800228c:	2b01      	cmp	r3, #1
 800228e:	d031      	beq.n	80022f4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	f003 0203 	and.w	r2, r3, #3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800229a:	429a      	cmp	r2, r3
 800229c:	d12a      	bne.n	80022f4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	091b      	lsrs	r3, r3, #4
 80022a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d122      	bne.n	80022f4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d11a      	bne.n	80022f4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	0a5b      	lsrs	r3, r3, #9
 80022c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022ca:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d111      	bne.n	80022f4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	0c1b      	lsrs	r3, r3, #16
 80022d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022dc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80022de:	429a      	cmp	r2, r3
 80022e0:	d108      	bne.n	80022f4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	0e1b      	lsrs	r3, r3, #24
 80022e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022ee:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d001      	beq.n	80022f8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e02b      	b.n	8002350 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80022f8:	4b17      	ldr	r3, [pc, #92]	@ (8002358 <HAL_RCC_OscConfig+0x8ac>)
 80022fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022fc:	08db      	lsrs	r3, r3, #3
 80022fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002302:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	429a      	cmp	r2, r3
 800230c:	d01f      	beq.n	800234e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800230e:	4b12      	ldr	r3, [pc, #72]	@ (8002358 <HAL_RCC_OscConfig+0x8ac>)
 8002310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002312:	4a11      	ldr	r2, [pc, #68]	@ (8002358 <HAL_RCC_OscConfig+0x8ac>)
 8002314:	f023 0301 	bic.w	r3, r3, #1
 8002318:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800231a:	f7fe fbdf 	bl	8000adc <HAL_GetTick>
 800231e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002320:	bf00      	nop
 8002322:	f7fe fbdb 	bl	8000adc <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232a:	4293      	cmp	r3, r2
 800232c:	d0f9      	beq.n	8002322 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800232e:	4b0a      	ldr	r3, [pc, #40]	@ (8002358 <HAL_RCC_OscConfig+0x8ac>)
 8002330:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002332:	4b0a      	ldr	r3, [pc, #40]	@ (800235c <HAL_RCC_OscConfig+0x8b0>)
 8002334:	4013      	ands	r3, r2
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800233a:	00d2      	lsls	r2, r2, #3
 800233c:	4906      	ldr	r1, [pc, #24]	@ (8002358 <HAL_RCC_OscConfig+0x8ac>)
 800233e:	4313      	orrs	r3, r2
 8002340:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002342:	4b05      	ldr	r3, [pc, #20]	@ (8002358 <HAL_RCC_OscConfig+0x8ac>)
 8002344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002346:	4a04      	ldr	r2, [pc, #16]	@ (8002358 <HAL_RCC_OscConfig+0x8ac>)
 8002348:	f043 0301 	orr.w	r3, r3, #1
 800234c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3730      	adds	r7, #48	@ 0x30
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	58024400 	.word	0x58024400
 800235c:	ffff0007 	.word	0xffff0007

08002360 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d101      	bne.n	8002374 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e19c      	b.n	80026ae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002374:	4b8a      	ldr	r3, [pc, #552]	@ (80025a0 <HAL_RCC_ClockConfig+0x240>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 030f 	and.w	r3, r3, #15
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	429a      	cmp	r2, r3
 8002380:	d910      	bls.n	80023a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002382:	4b87      	ldr	r3, [pc, #540]	@ (80025a0 <HAL_RCC_ClockConfig+0x240>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f023 020f 	bic.w	r2, r3, #15
 800238a:	4985      	ldr	r1, [pc, #532]	@ (80025a0 <HAL_RCC_ClockConfig+0x240>)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	4313      	orrs	r3, r2
 8002390:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002392:	4b83      	ldr	r3, [pc, #524]	@ (80025a0 <HAL_RCC_ClockConfig+0x240>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	429a      	cmp	r2, r3
 800239e:	d001      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e184      	b.n	80026ae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d010      	beq.n	80023d2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	691a      	ldr	r2, [r3, #16]
 80023b4:	4b7b      	ldr	r3, [pc, #492]	@ (80025a4 <HAL_RCC_ClockConfig+0x244>)
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80023bc:	429a      	cmp	r2, r3
 80023be:	d908      	bls.n	80023d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80023c0:	4b78      	ldr	r3, [pc, #480]	@ (80025a4 <HAL_RCC_ClockConfig+0x244>)
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	4975      	ldr	r1, [pc, #468]	@ (80025a4 <HAL_RCC_ClockConfig+0x244>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0308 	and.w	r3, r3, #8
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d010      	beq.n	8002400 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	695a      	ldr	r2, [r3, #20]
 80023e2:	4b70      	ldr	r3, [pc, #448]	@ (80025a4 <HAL_RCC_ClockConfig+0x244>)
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d908      	bls.n	8002400 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80023ee:	4b6d      	ldr	r3, [pc, #436]	@ (80025a4 <HAL_RCC_ClockConfig+0x244>)
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	496a      	ldr	r1, [pc, #424]	@ (80025a4 <HAL_RCC_ClockConfig+0x244>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0310 	and.w	r3, r3, #16
 8002408:	2b00      	cmp	r3, #0
 800240a:	d010      	beq.n	800242e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	699a      	ldr	r2, [r3, #24]
 8002410:	4b64      	ldr	r3, [pc, #400]	@ (80025a4 <HAL_RCC_ClockConfig+0x244>)
 8002412:	69db      	ldr	r3, [r3, #28]
 8002414:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002418:	429a      	cmp	r2, r3
 800241a:	d908      	bls.n	800242e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800241c:	4b61      	ldr	r3, [pc, #388]	@ (80025a4 <HAL_RCC_ClockConfig+0x244>)
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	495e      	ldr	r1, [pc, #376]	@ (80025a4 <HAL_RCC_ClockConfig+0x244>)
 800242a:	4313      	orrs	r3, r2
 800242c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0320 	and.w	r3, r3, #32
 8002436:	2b00      	cmp	r3, #0
 8002438:	d010      	beq.n	800245c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69da      	ldr	r2, [r3, #28]
 800243e:	4b59      	ldr	r3, [pc, #356]	@ (80025a4 <HAL_RCC_ClockConfig+0x244>)
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002446:	429a      	cmp	r2, r3
 8002448:	d908      	bls.n	800245c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800244a:	4b56      	ldr	r3, [pc, #344]	@ (80025a4 <HAL_RCC_ClockConfig+0x244>)
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	4953      	ldr	r1, [pc, #332]	@ (80025a4 <HAL_RCC_ClockConfig+0x244>)
 8002458:	4313      	orrs	r3, r2
 800245a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d010      	beq.n	800248a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	68da      	ldr	r2, [r3, #12]
 800246c:	4b4d      	ldr	r3, [pc, #308]	@ (80025a4 <HAL_RCC_ClockConfig+0x244>)
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	f003 030f 	and.w	r3, r3, #15
 8002474:	429a      	cmp	r2, r3
 8002476:	d908      	bls.n	800248a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002478:	4b4a      	ldr	r3, [pc, #296]	@ (80025a4 <HAL_RCC_ClockConfig+0x244>)
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	f023 020f 	bic.w	r2, r3, #15
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	4947      	ldr	r1, [pc, #284]	@ (80025a4 <HAL_RCC_ClockConfig+0x244>)
 8002486:	4313      	orrs	r3, r2
 8002488:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b00      	cmp	r3, #0
 8002494:	d055      	beq.n	8002542 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002496:	4b43      	ldr	r3, [pc, #268]	@ (80025a4 <HAL_RCC_ClockConfig+0x244>)
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	4940      	ldr	r1, [pc, #256]	@ (80025a4 <HAL_RCC_ClockConfig+0x244>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d107      	bne.n	80024c0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024b0:	4b3c      	ldr	r3, [pc, #240]	@ (80025a4 <HAL_RCC_ClockConfig+0x244>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d121      	bne.n	8002500 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e0f6      	b.n	80026ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b03      	cmp	r3, #3
 80024c6:	d107      	bne.n	80024d8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80024c8:	4b36      	ldr	r3, [pc, #216]	@ (80025a4 <HAL_RCC_ClockConfig+0x244>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d115      	bne.n	8002500 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e0ea      	b.n	80026ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d107      	bne.n	80024f0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80024e0:	4b30      	ldr	r3, [pc, #192]	@ (80025a4 <HAL_RCC_ClockConfig+0x244>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d109      	bne.n	8002500 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e0de      	b.n	80026ae <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024f0:	4b2c      	ldr	r3, [pc, #176]	@ (80025a4 <HAL_RCC_ClockConfig+0x244>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d101      	bne.n	8002500 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e0d6      	b.n	80026ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002500:	4b28      	ldr	r3, [pc, #160]	@ (80025a4 <HAL_RCC_ClockConfig+0x244>)
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	f023 0207 	bic.w	r2, r3, #7
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	4925      	ldr	r1, [pc, #148]	@ (80025a4 <HAL_RCC_ClockConfig+0x244>)
 800250e:	4313      	orrs	r3, r2
 8002510:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002512:	f7fe fae3 	bl	8000adc <HAL_GetTick>
 8002516:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002518:	e00a      	b.n	8002530 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800251a:	f7fe fadf 	bl	8000adc <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002528:	4293      	cmp	r3, r2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e0be      	b.n	80026ae <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002530:	4b1c      	ldr	r3, [pc, #112]	@ (80025a4 <HAL_RCC_ClockConfig+0x244>)
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	429a      	cmp	r2, r3
 8002540:	d1eb      	bne.n	800251a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d010      	beq.n	8002570 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68da      	ldr	r2, [r3, #12]
 8002552:	4b14      	ldr	r3, [pc, #80]	@ (80025a4 <HAL_RCC_ClockConfig+0x244>)
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	f003 030f 	and.w	r3, r3, #15
 800255a:	429a      	cmp	r2, r3
 800255c:	d208      	bcs.n	8002570 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800255e:	4b11      	ldr	r3, [pc, #68]	@ (80025a4 <HAL_RCC_ClockConfig+0x244>)
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	f023 020f 	bic.w	r2, r3, #15
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	490e      	ldr	r1, [pc, #56]	@ (80025a4 <HAL_RCC_ClockConfig+0x244>)
 800256c:	4313      	orrs	r3, r2
 800256e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002570:	4b0b      	ldr	r3, [pc, #44]	@ (80025a0 <HAL_RCC_ClockConfig+0x240>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 030f 	and.w	r3, r3, #15
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	d214      	bcs.n	80025a8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257e:	4b08      	ldr	r3, [pc, #32]	@ (80025a0 <HAL_RCC_ClockConfig+0x240>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f023 020f 	bic.w	r2, r3, #15
 8002586:	4906      	ldr	r1, [pc, #24]	@ (80025a0 <HAL_RCC_ClockConfig+0x240>)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	4313      	orrs	r3, r2
 800258c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800258e:	4b04      	ldr	r3, [pc, #16]	@ (80025a0 <HAL_RCC_ClockConfig+0x240>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	429a      	cmp	r2, r3
 800259a:	d005      	beq.n	80025a8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e086      	b.n	80026ae <HAL_RCC_ClockConfig+0x34e>
 80025a0:	52002000 	.word	0x52002000
 80025a4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0304 	and.w	r3, r3, #4
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d010      	beq.n	80025d6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	691a      	ldr	r2, [r3, #16]
 80025b8:	4b3f      	ldr	r3, [pc, #252]	@ (80026b8 <HAL_RCC_ClockConfig+0x358>)
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d208      	bcs.n	80025d6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80025c4:	4b3c      	ldr	r3, [pc, #240]	@ (80026b8 <HAL_RCC_ClockConfig+0x358>)
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	4939      	ldr	r1, [pc, #228]	@ (80026b8 <HAL_RCC_ClockConfig+0x358>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0308 	and.w	r3, r3, #8
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d010      	beq.n	8002604 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	695a      	ldr	r2, [r3, #20]
 80025e6:	4b34      	ldr	r3, [pc, #208]	@ (80026b8 <HAL_RCC_ClockConfig+0x358>)
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d208      	bcs.n	8002604 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80025f2:	4b31      	ldr	r3, [pc, #196]	@ (80026b8 <HAL_RCC_ClockConfig+0x358>)
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	492e      	ldr	r1, [pc, #184]	@ (80026b8 <HAL_RCC_ClockConfig+0x358>)
 8002600:	4313      	orrs	r3, r2
 8002602:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0310 	and.w	r3, r3, #16
 800260c:	2b00      	cmp	r3, #0
 800260e:	d010      	beq.n	8002632 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	699a      	ldr	r2, [r3, #24]
 8002614:	4b28      	ldr	r3, [pc, #160]	@ (80026b8 <HAL_RCC_ClockConfig+0x358>)
 8002616:	69db      	ldr	r3, [r3, #28]
 8002618:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800261c:	429a      	cmp	r2, r3
 800261e:	d208      	bcs.n	8002632 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002620:	4b25      	ldr	r3, [pc, #148]	@ (80026b8 <HAL_RCC_ClockConfig+0x358>)
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	4922      	ldr	r1, [pc, #136]	@ (80026b8 <HAL_RCC_ClockConfig+0x358>)
 800262e:	4313      	orrs	r3, r2
 8002630:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0320 	and.w	r3, r3, #32
 800263a:	2b00      	cmp	r3, #0
 800263c:	d010      	beq.n	8002660 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	69da      	ldr	r2, [r3, #28]
 8002642:	4b1d      	ldr	r3, [pc, #116]	@ (80026b8 <HAL_RCC_ClockConfig+0x358>)
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800264a:	429a      	cmp	r2, r3
 800264c:	d208      	bcs.n	8002660 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800264e:	4b1a      	ldr	r3, [pc, #104]	@ (80026b8 <HAL_RCC_ClockConfig+0x358>)
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	4917      	ldr	r1, [pc, #92]	@ (80026b8 <HAL_RCC_ClockConfig+0x358>)
 800265c:	4313      	orrs	r3, r2
 800265e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002660:	f000 f834 	bl	80026cc <HAL_RCC_GetSysClockFreq>
 8002664:	4602      	mov	r2, r0
 8002666:	4b14      	ldr	r3, [pc, #80]	@ (80026b8 <HAL_RCC_ClockConfig+0x358>)
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	0a1b      	lsrs	r3, r3, #8
 800266c:	f003 030f 	and.w	r3, r3, #15
 8002670:	4912      	ldr	r1, [pc, #72]	@ (80026bc <HAL_RCC_ClockConfig+0x35c>)
 8002672:	5ccb      	ldrb	r3, [r1, r3]
 8002674:	f003 031f 	and.w	r3, r3, #31
 8002678:	fa22 f303 	lsr.w	r3, r2, r3
 800267c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800267e:	4b0e      	ldr	r3, [pc, #56]	@ (80026b8 <HAL_RCC_ClockConfig+0x358>)
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	4a0d      	ldr	r2, [pc, #52]	@ (80026bc <HAL_RCC_ClockConfig+0x35c>)
 8002688:	5cd3      	ldrb	r3, [r2, r3]
 800268a:	f003 031f 	and.w	r3, r3, #31
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	fa22 f303 	lsr.w	r3, r2, r3
 8002694:	4a0a      	ldr	r2, [pc, #40]	@ (80026c0 <HAL_RCC_ClockConfig+0x360>)
 8002696:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002698:	4a0a      	ldr	r2, [pc, #40]	@ (80026c4 <HAL_RCC_ClockConfig+0x364>)
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800269e:	4b0a      	ldr	r3, [pc, #40]	@ (80026c8 <HAL_RCC_ClockConfig+0x368>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fe f9d0 	bl	8000a48 <HAL_InitTick>
 80026a8:	4603      	mov	r3, r0
 80026aa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80026ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3718      	adds	r7, #24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	58024400 	.word	0x58024400
 80026bc:	08004134 	.word	0x08004134
 80026c0:	24000008 	.word	0x24000008
 80026c4:	24000004 	.word	0x24000004
 80026c8:	2400000c 	.word	0x2400000c

080026cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b089      	sub	sp, #36	@ 0x24
 80026d0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026d2:	4bb3      	ldr	r3, [pc, #716]	@ (80029a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80026da:	2b18      	cmp	r3, #24
 80026dc:	f200 8155 	bhi.w	800298a <HAL_RCC_GetSysClockFreq+0x2be>
 80026e0:	a201      	add	r2, pc, #4	@ (adr r2, 80026e8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80026e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e6:	bf00      	nop
 80026e8:	0800274d 	.word	0x0800274d
 80026ec:	0800298b 	.word	0x0800298b
 80026f0:	0800298b 	.word	0x0800298b
 80026f4:	0800298b 	.word	0x0800298b
 80026f8:	0800298b 	.word	0x0800298b
 80026fc:	0800298b 	.word	0x0800298b
 8002700:	0800298b 	.word	0x0800298b
 8002704:	0800298b 	.word	0x0800298b
 8002708:	08002773 	.word	0x08002773
 800270c:	0800298b 	.word	0x0800298b
 8002710:	0800298b 	.word	0x0800298b
 8002714:	0800298b 	.word	0x0800298b
 8002718:	0800298b 	.word	0x0800298b
 800271c:	0800298b 	.word	0x0800298b
 8002720:	0800298b 	.word	0x0800298b
 8002724:	0800298b 	.word	0x0800298b
 8002728:	08002779 	.word	0x08002779
 800272c:	0800298b 	.word	0x0800298b
 8002730:	0800298b 	.word	0x0800298b
 8002734:	0800298b 	.word	0x0800298b
 8002738:	0800298b 	.word	0x0800298b
 800273c:	0800298b 	.word	0x0800298b
 8002740:	0800298b 	.word	0x0800298b
 8002744:	0800298b 	.word	0x0800298b
 8002748:	0800277f 	.word	0x0800277f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800274c:	4b94      	ldr	r3, [pc, #592]	@ (80029a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0320 	and.w	r3, r3, #32
 8002754:	2b00      	cmp	r3, #0
 8002756:	d009      	beq.n	800276c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002758:	4b91      	ldr	r3, [pc, #580]	@ (80029a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	08db      	lsrs	r3, r3, #3
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	4a90      	ldr	r2, [pc, #576]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002764:	fa22 f303 	lsr.w	r3, r2, r3
 8002768:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800276a:	e111      	b.n	8002990 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800276c:	4b8d      	ldr	r3, [pc, #564]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800276e:	61bb      	str	r3, [r7, #24]
      break;
 8002770:	e10e      	b.n	8002990 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002772:	4b8d      	ldr	r3, [pc, #564]	@ (80029a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002774:	61bb      	str	r3, [r7, #24]
      break;
 8002776:	e10b      	b.n	8002990 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002778:	4b8c      	ldr	r3, [pc, #560]	@ (80029ac <HAL_RCC_GetSysClockFreq+0x2e0>)
 800277a:	61bb      	str	r3, [r7, #24]
      break;
 800277c:	e108      	b.n	8002990 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800277e:	4b88      	ldr	r3, [pc, #544]	@ (80029a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002782:	f003 0303 	and.w	r3, r3, #3
 8002786:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002788:	4b85      	ldr	r3, [pc, #532]	@ (80029a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800278a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800278c:	091b      	lsrs	r3, r3, #4
 800278e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002792:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002794:	4b82      	ldr	r3, [pc, #520]	@ (80029a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800279e:	4b80      	ldr	r3, [pc, #512]	@ (80029a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027a2:	08db      	lsrs	r3, r3, #3
 80027a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	fb02 f303 	mul.w	r3, r2, r3
 80027ae:	ee07 3a90 	vmov	s15, r3
 80027b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027b6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f000 80e1 	beq.w	8002984 <HAL_RCC_GetSysClockFreq+0x2b8>
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	f000 8083 	beq.w	80028d0 <HAL_RCC_GetSysClockFreq+0x204>
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	f200 80a1 	bhi.w	8002914 <HAL_RCC_GetSysClockFreq+0x248>
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d003      	beq.n	80027e0 <HAL_RCC_GetSysClockFreq+0x114>
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d056      	beq.n	800288c <HAL_RCC_GetSysClockFreq+0x1c0>
 80027de:	e099      	b.n	8002914 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80027e0:	4b6f      	ldr	r3, [pc, #444]	@ (80029a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0320 	and.w	r3, r3, #32
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d02d      	beq.n	8002848 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80027ec:	4b6c      	ldr	r3, [pc, #432]	@ (80029a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	08db      	lsrs	r3, r3, #3
 80027f2:	f003 0303 	and.w	r3, r3, #3
 80027f6:	4a6b      	ldr	r2, [pc, #428]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80027f8:	fa22 f303 	lsr.w	r3, r2, r3
 80027fc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	ee07 3a90 	vmov	s15, r3
 8002804:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	ee07 3a90 	vmov	s15, r3
 800280e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002816:	4b62      	ldr	r3, [pc, #392]	@ (80029a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800281e:	ee07 3a90 	vmov	s15, r3
 8002822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002826:	ed97 6a02 	vldr	s12, [r7, #8]
 800282a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80029b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800282e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002836:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800283a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800283e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002842:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002846:	e087      	b.n	8002958 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	ee07 3a90 	vmov	s15, r3
 800284e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002852:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80029b4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800285a:	4b51      	ldr	r3, [pc, #324]	@ (80029a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002862:	ee07 3a90 	vmov	s15, r3
 8002866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800286a:	ed97 6a02 	vldr	s12, [r7, #8]
 800286e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80029b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800287a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800287e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002886:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800288a:	e065      	b.n	8002958 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	ee07 3a90 	vmov	s15, r3
 8002892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002896:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80029b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800289a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800289e:	4b40      	ldr	r3, [pc, #256]	@ (80029a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028a6:	ee07 3a90 	vmov	s15, r3
 80028aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80028b2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80029b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80028b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80028c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80028ce:	e043      	b.n	8002958 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	ee07 3a90 	vmov	s15, r3
 80028d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028da:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80029bc <HAL_RCC_GetSysClockFreq+0x2f0>
 80028de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028e2:	4b2f      	ldr	r3, [pc, #188]	@ (80029a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028ea:	ee07 3a90 	vmov	s15, r3
 80028ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80028f6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80029b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80028fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002902:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800290a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800290e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002912:	e021      	b.n	8002958 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	ee07 3a90 	vmov	s15, r3
 800291a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800291e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80029b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002926:	4b1e      	ldr	r3, [pc, #120]	@ (80029a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800292e:	ee07 3a90 	vmov	s15, r3
 8002932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002936:	ed97 6a02 	vldr	s12, [r7, #8]
 800293a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80029b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800293e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002946:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800294a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800294e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002952:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002956:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002958:	4b11      	ldr	r3, [pc, #68]	@ (80029a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800295a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295c:	0a5b      	lsrs	r3, r3, #9
 800295e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002962:	3301      	adds	r3, #1
 8002964:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	ee07 3a90 	vmov	s15, r3
 800296c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002970:	edd7 6a07 	vldr	s13, [r7, #28]
 8002974:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002978:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800297c:	ee17 3a90 	vmov	r3, s15
 8002980:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002982:	e005      	b.n	8002990 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002984:	2300      	movs	r3, #0
 8002986:	61bb      	str	r3, [r7, #24]
      break;
 8002988:	e002      	b.n	8002990 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800298a:	4b07      	ldr	r3, [pc, #28]	@ (80029a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800298c:	61bb      	str	r3, [r7, #24]
      break;
 800298e:	bf00      	nop
  }

  return sysclockfreq;
 8002990:	69bb      	ldr	r3, [r7, #24]
}
 8002992:	4618      	mov	r0, r3
 8002994:	3724      	adds	r7, #36	@ 0x24
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	58024400 	.word	0x58024400
 80029a4:	03d09000 	.word	0x03d09000
 80029a8:	003d0900 	.word	0x003d0900
 80029ac:	017d7840 	.word	0x017d7840
 80029b0:	46000000 	.word	0x46000000
 80029b4:	4c742400 	.word	0x4c742400
 80029b8:	4a742400 	.word	0x4a742400
 80029bc:	4bbebc20 	.word	0x4bbebc20

080029c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029c4:	b0ca      	sub	sp, #296	@ 0x128
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029cc:	2300      	movs	r3, #0
 80029ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029d2:	2300      	movs	r3, #0
 80029d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80029e4:	2500      	movs	r5, #0
 80029e6:	ea54 0305 	orrs.w	r3, r4, r5
 80029ea:	d049      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80029ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029f2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80029f6:	d02f      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80029f8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80029fc:	d828      	bhi.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80029fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a02:	d01a      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002a04:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a08:	d822      	bhi.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002a0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a12:	d007      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002a14:	e01c      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a16:	4bb8      	ldr	r3, [pc, #736]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a1a:	4ab7      	ldr	r2, [pc, #732]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002a22:	e01a      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a28:	3308      	adds	r3, #8
 8002a2a:	2102      	movs	r1, #2
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f001 f9d1 	bl	8003dd4 <RCCEx_PLL2_Config>
 8002a32:	4603      	mov	r3, r0
 8002a34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002a38:	e00f      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a3e:	3328      	adds	r3, #40	@ 0x28
 8002a40:	2102      	movs	r1, #2
 8002a42:	4618      	mov	r0, r3
 8002a44:	f001 fa78 	bl	8003f38 <RCCEx_PLL3_Config>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002a4e:	e004      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002a56:	e000      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002a58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d10a      	bne.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002a62:	4ba5      	ldr	r3, [pc, #660]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a66:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a70:	4aa1      	ldr	r2, [pc, #644]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a72:	430b      	orrs	r3, r1
 8002a74:	6513      	str	r3, [r2, #80]	@ 0x50
 8002a76:	e003      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a88:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002a8c:	f04f 0900 	mov.w	r9, #0
 8002a90:	ea58 0309 	orrs.w	r3, r8, r9
 8002a94:	d047      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a9c:	2b04      	cmp	r3, #4
 8002a9e:	d82a      	bhi.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002aa0:	a201      	add	r2, pc, #4	@ (adr r2, 8002aa8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa6:	bf00      	nop
 8002aa8:	08002abd 	.word	0x08002abd
 8002aac:	08002acb 	.word	0x08002acb
 8002ab0:	08002ae1 	.word	0x08002ae1
 8002ab4:	08002aff 	.word	0x08002aff
 8002ab8:	08002aff 	.word	0x08002aff
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002abc:	4b8e      	ldr	r3, [pc, #568]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac0:	4a8d      	ldr	r2, [pc, #564]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ac2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ac6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ac8:	e01a      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ace:	3308      	adds	r3, #8
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f001 f97e 	bl	8003dd4 <RCCEx_PLL2_Config>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ade:	e00f      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ae4:	3328      	adds	r3, #40	@ 0x28
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f001 fa25 	bl	8003f38 <RCCEx_PLL3_Config>
 8002aee:	4603      	mov	r3, r0
 8002af0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002af4:	e004      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002afc:	e000      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002afe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10a      	bne.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b08:	4b7b      	ldr	r3, [pc, #492]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b0c:	f023 0107 	bic.w	r1, r3, #7
 8002b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b16:	4a78      	ldr	r2, [pc, #480]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b18:	430b      	orrs	r3, r1
 8002b1a:	6513      	str	r3, [r2, #80]	@ 0x50
 8002b1c:	e003      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b2e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002b32:	f04f 0b00 	mov.w	fp, #0
 8002b36:	ea5a 030b 	orrs.w	r3, sl, fp
 8002b3a:	d04c      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b46:	d030      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002b48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b4c:	d829      	bhi.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002b4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002b50:	d02d      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002b52:	2bc0      	cmp	r3, #192	@ 0xc0
 8002b54:	d825      	bhi.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002b56:	2b80      	cmp	r3, #128	@ 0x80
 8002b58:	d018      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002b5a:	2b80      	cmp	r3, #128	@ 0x80
 8002b5c:	d821      	bhi.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d002      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002b62:	2b40      	cmp	r3, #64	@ 0x40
 8002b64:	d007      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002b66:	e01c      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b68:	4b63      	ldr	r3, [pc, #396]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b6c:	4a62      	ldr	r2, [pc, #392]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002b74:	e01c      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b7a:	3308      	adds	r3, #8
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f001 f928 	bl	8003dd4 <RCCEx_PLL2_Config>
 8002b84:	4603      	mov	r3, r0
 8002b86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002b8a:	e011      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b90:	3328      	adds	r3, #40	@ 0x28
 8002b92:	2100      	movs	r1, #0
 8002b94:	4618      	mov	r0, r3
 8002b96:	f001 f9cf 	bl	8003f38 <RCCEx_PLL3_Config>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002ba0:	e006      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ba8:	e002      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002baa:	bf00      	nop
 8002bac:	e000      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002bae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10a      	bne.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002bb8:	4b4f      	ldr	r3, [pc, #316]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bbc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bc6:	4a4c      	ldr	r2, [pc, #304]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bc8:	430b      	orrs	r3, r1
 8002bca:	6513      	str	r3, [r2, #80]	@ 0x50
 8002bcc:	e003      	b.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002bd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bde:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002be2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002be6:	2300      	movs	r3, #0
 8002be8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002bec:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	d053      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bfa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002bfe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c02:	d035      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002c04:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c08:	d82e      	bhi.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002c0a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002c0e:	d031      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002c10:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002c14:	d828      	bhi.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002c16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c1a:	d01a      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002c1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c20:	d822      	bhi.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002c26:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002c2a:	d007      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002c2c:	e01c      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c2e:	4b32      	ldr	r3, [pc, #200]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c32:	4a31      	ldr	r2, [pc, #196]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c38:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c3a:	e01c      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c40:	3308      	adds	r3, #8
 8002c42:	2100      	movs	r1, #0
 8002c44:	4618      	mov	r0, r3
 8002c46:	f001 f8c5 	bl	8003dd4 <RCCEx_PLL2_Config>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002c50:	e011      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c56:	3328      	adds	r3, #40	@ 0x28
 8002c58:	2100      	movs	r1, #0
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f001 f96c 	bl	8003f38 <RCCEx_PLL3_Config>
 8002c60:	4603      	mov	r3, r0
 8002c62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c66:	e006      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c6e:	e002      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002c70:	bf00      	nop
 8002c72:	e000      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002c74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10b      	bne.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002c7e:	4b1e      	ldr	r3, [pc, #120]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c82:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c8a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002c8e:	4a1a      	ldr	r2, [pc, #104]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c90:	430b      	orrs	r3, r1
 8002c92:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c94:	e003      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002caa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002cae:	2300      	movs	r3, #0
 8002cb0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002cb4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002cb8:	460b      	mov	r3, r1
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	d056      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cc2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002cc6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002cca:	d038      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002ccc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002cd0:	d831      	bhi.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002cd2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002cd6:	d034      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002cd8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002cdc:	d82b      	bhi.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002cde:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ce2:	d01d      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002ce4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ce8:	d825      	bhi.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d006      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002cee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002cf2:	d00a      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002cf4:	e01f      	b.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002cf6:	bf00      	nop
 8002cf8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cfc:	4ba2      	ldr	r3, [pc, #648]	@ (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d00:	4aa1      	ldr	r2, [pc, #644]	@ (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d08:	e01c      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d0e:	3308      	adds	r3, #8
 8002d10:	2100      	movs	r1, #0
 8002d12:	4618      	mov	r0, r3
 8002d14:	f001 f85e 	bl	8003dd4 <RCCEx_PLL2_Config>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002d1e:	e011      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d24:	3328      	adds	r3, #40	@ 0x28
 8002d26:	2100      	movs	r1, #0
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f001 f905 	bl	8003f38 <RCCEx_PLL3_Config>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d34:	e006      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d3c:	e002      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002d3e:	bf00      	nop
 8002d40:	e000      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002d42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10b      	bne.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002d4c:	4b8e      	ldr	r3, [pc, #568]	@ (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d50:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d58:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002d5c:	4a8a      	ldr	r2, [pc, #552]	@ (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d5e:	430b      	orrs	r3, r1
 8002d60:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d62:	e003      	b.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d74:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002d78:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002d82:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002d86:	460b      	mov	r3, r1
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	d03a      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d92:	2b30      	cmp	r3, #48	@ 0x30
 8002d94:	d01f      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002d96:	2b30      	cmp	r3, #48	@ 0x30
 8002d98:	d819      	bhi.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002d9a:	2b20      	cmp	r3, #32
 8002d9c:	d00c      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002d9e:	2b20      	cmp	r3, #32
 8002da0:	d815      	bhi.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d019      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002da6:	2b10      	cmp	r3, #16
 8002da8:	d111      	bne.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002daa:	4b77      	ldr	r3, [pc, #476]	@ (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dae:	4a76      	ldr	r2, [pc, #472]	@ (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002db0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002db4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002db6:	e011      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dbc:	3308      	adds	r3, #8
 8002dbe:	2102      	movs	r1, #2
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f001 f807 	bl	8003dd4 <RCCEx_PLL2_Config>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002dcc:	e006      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002dd4:	e002      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002dd6:	bf00      	nop
 8002dd8:	e000      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002dda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ddc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10a      	bne.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002de4:	4b68      	ldr	r3, [pc, #416]	@ (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002de6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002de8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002df2:	4a65      	ldr	r2, [pc, #404]	@ (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002df4:	430b      	orrs	r3, r1
 8002df6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002df8:	e003      	b.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002dfe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002e0e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002e12:	2300      	movs	r3, #0
 8002e14:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002e18:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	d051      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e2c:	d035      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002e2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e32:	d82e      	bhi.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002e34:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002e38:	d031      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002e3a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002e3e:	d828      	bhi.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002e40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e44:	d01a      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002e46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e4a:	d822      	bhi.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d003      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002e50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e54:	d007      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002e56:	e01c      	b.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e58:	4b4b      	ldr	r3, [pc, #300]	@ (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e5c:	4a4a      	ldr	r2, [pc, #296]	@ (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002e64:	e01c      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e6a:	3308      	adds	r3, #8
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f000 ffb0 	bl	8003dd4 <RCCEx_PLL2_Config>
 8002e74:	4603      	mov	r3, r0
 8002e76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002e7a:	e011      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e80:	3328      	adds	r3, #40	@ 0x28
 8002e82:	2100      	movs	r1, #0
 8002e84:	4618      	mov	r0, r3
 8002e86:	f001 f857 	bl	8003f38 <RCCEx_PLL3_Config>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002e90:	e006      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e98:	e002      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002e9a:	bf00      	nop
 8002e9c:	e000      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002e9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ea0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10a      	bne.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002ea8:	4b37      	ldr	r3, [pc, #220]	@ (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002eaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eac:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eb6:	4a34      	ldr	r2, [pc, #208]	@ (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002eb8:	430b      	orrs	r3, r1
 8002eba:	6513      	str	r3, [r2, #80]	@ 0x50
 8002ebc:	e003      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ebe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ec2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ece:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002ed2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002edc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	d056      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002eec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ef0:	d033      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002ef2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ef6:	d82c      	bhi.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002ef8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002efc:	d02f      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002efe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002f02:	d826      	bhi.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002f04:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f08:	d02b      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002f0a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f0e:	d820      	bhi.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002f10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f14:	d012      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002f16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f1a:	d81a      	bhi.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d022      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002f20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f24:	d115      	bne.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f2a:	3308      	adds	r3, #8
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f000 ff50 	bl	8003dd4 <RCCEx_PLL2_Config>
 8002f34:	4603      	mov	r3, r0
 8002f36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002f3a:	e015      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f40:	3328      	adds	r3, #40	@ 0x28
 8002f42:	2101      	movs	r1, #1
 8002f44:	4618      	mov	r0, r3
 8002f46:	f000 fff7 	bl	8003f38 <RCCEx_PLL3_Config>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002f50:	e00a      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f58:	e006      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002f5a:	bf00      	nop
 8002f5c:	e004      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002f5e:	bf00      	nop
 8002f60:	e002      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002f62:	bf00      	nop
 8002f64:	e000      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002f66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d10d      	bne.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002f70:	4b05      	ldr	r3, [pc, #20]	@ (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f74:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f7e:	4a02      	ldr	r2, [pc, #8]	@ (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f80:	430b      	orrs	r3, r1
 8002f82:	6513      	str	r3, [r2, #80]	@ 0x50
 8002f84:	e006      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002f86:	bf00      	nop
 8002f88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f9c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002fa0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002faa:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002fae:	460b      	mov	r3, r1
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	d055      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002fbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fc0:	d033      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002fc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fc6:	d82c      	bhi.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fcc:	d02f      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002fce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fd2:	d826      	bhi.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002fd4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002fd8:	d02b      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002fda:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002fde:	d820      	bhi.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002fe0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fe4:	d012      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002fe6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fea:	d81a      	bhi.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d022      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002ff0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ff4:	d115      	bne.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ffa:	3308      	adds	r3, #8
 8002ffc:	2101      	movs	r1, #1
 8002ffe:	4618      	mov	r0, r3
 8003000:	f000 fee8 	bl	8003dd4 <RCCEx_PLL2_Config>
 8003004:	4603      	mov	r3, r0
 8003006:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800300a:	e015      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800300c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003010:	3328      	adds	r3, #40	@ 0x28
 8003012:	2101      	movs	r1, #1
 8003014:	4618      	mov	r0, r3
 8003016:	f000 ff8f 	bl	8003f38 <RCCEx_PLL3_Config>
 800301a:	4603      	mov	r3, r0
 800301c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003020:	e00a      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003028:	e006      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800302a:	bf00      	nop
 800302c:	e004      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800302e:	bf00      	nop
 8003030:	e002      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003032:	bf00      	nop
 8003034:	e000      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003036:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003038:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800303c:	2b00      	cmp	r3, #0
 800303e:	d10b      	bne.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003040:	4ba3      	ldr	r3, [pc, #652]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003044:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800304c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003050:	4a9f      	ldr	r2, [pc, #636]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003052:	430b      	orrs	r3, r1
 8003054:	6593      	str	r3, [r2, #88]	@ 0x58
 8003056:	e003      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003058:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800305c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003060:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003068:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800306c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003070:	2300      	movs	r3, #0
 8003072:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003076:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800307a:	460b      	mov	r3, r1
 800307c:	4313      	orrs	r3, r2
 800307e:	d037      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003080:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003086:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800308a:	d00e      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800308c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003090:	d816      	bhi.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003092:	2b00      	cmp	r3, #0
 8003094:	d018      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003096:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800309a:	d111      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800309c:	4b8c      	ldr	r3, [pc, #560]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800309e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a0:	4a8b      	ldr	r2, [pc, #556]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80030a8:	e00f      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80030aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030ae:	3308      	adds	r3, #8
 80030b0:	2101      	movs	r1, #1
 80030b2:	4618      	mov	r0, r3
 80030b4:	f000 fe8e 	bl	8003dd4 <RCCEx_PLL2_Config>
 80030b8:	4603      	mov	r3, r0
 80030ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80030be:	e004      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80030c6:	e000      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80030c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10a      	bne.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80030d2:	4b7f      	ldr	r3, [pc, #508]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030d6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80030da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030e0:	4a7b      	ldr	r2, [pc, #492]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030e2:	430b      	orrs	r3, r1
 80030e4:	6513      	str	r3, [r2, #80]	@ 0x50
 80030e6:	e003      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80030f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80030fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003100:	2300      	movs	r3, #0
 8003102:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003106:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800310a:	460b      	mov	r3, r1
 800310c:	4313      	orrs	r3, r2
 800310e:	d039      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003114:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003116:	2b03      	cmp	r3, #3
 8003118:	d81c      	bhi.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800311a:	a201      	add	r2, pc, #4	@ (adr r2, 8003120 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800311c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003120:	0800315d 	.word	0x0800315d
 8003124:	08003131 	.word	0x08003131
 8003128:	0800313f 	.word	0x0800313f
 800312c:	0800315d 	.word	0x0800315d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003130:	4b67      	ldr	r3, [pc, #412]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003134:	4a66      	ldr	r2, [pc, #408]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003136:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800313a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800313c:	e00f      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800313e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003142:	3308      	adds	r3, #8
 8003144:	2102      	movs	r1, #2
 8003146:	4618      	mov	r0, r3
 8003148:	f000 fe44 	bl	8003dd4 <RCCEx_PLL2_Config>
 800314c:	4603      	mov	r3, r0
 800314e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003152:	e004      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800315a:	e000      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800315c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800315e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10a      	bne.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003166:	4b5a      	ldr	r3, [pc, #360]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800316a:	f023 0103 	bic.w	r1, r3, #3
 800316e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003172:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003174:	4a56      	ldr	r2, [pc, #344]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003176:	430b      	orrs	r3, r1
 8003178:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800317a:	e003      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800317c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003180:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003184:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003190:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003194:	2300      	movs	r3, #0
 8003196:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800319a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800319e:	460b      	mov	r3, r1
 80031a0:	4313      	orrs	r3, r2
 80031a2:	f000 809f 	beq.w	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031a6:	4b4b      	ldr	r3, [pc, #300]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a4a      	ldr	r2, [pc, #296]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80031ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031b2:	f7fd fc93 	bl	8000adc <HAL_GetTick>
 80031b6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031ba:	e00b      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031bc:	f7fd fc8e 	bl	8000adc <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b64      	cmp	r3, #100	@ 0x64
 80031ca:	d903      	bls.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80031d2:	e005      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031d4:	4b3f      	ldr	r3, [pc, #252]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d0ed      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80031e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d179      	bne.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80031e8:	4b39      	ldr	r3, [pc, #228]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031ea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80031ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80031f4:	4053      	eors	r3, r2
 80031f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d015      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031fe:	4b34      	ldr	r3, [pc, #208]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003202:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003206:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800320a:	4b31      	ldr	r3, [pc, #196]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800320c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800320e:	4a30      	ldr	r2, [pc, #192]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003210:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003214:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003216:	4b2e      	ldr	r3, [pc, #184]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800321a:	4a2d      	ldr	r2, [pc, #180]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800321c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003220:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003222:	4a2b      	ldr	r2, [pc, #172]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003224:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003228:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800322a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800322e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003232:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003236:	d118      	bne.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003238:	f7fd fc50 	bl	8000adc <HAL_GetTick>
 800323c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003240:	e00d      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003242:	f7fd fc4b 	bl	8000adc <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800324c:	1ad2      	subs	r2, r2, r3
 800324e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003252:	429a      	cmp	r2, r3
 8003254:	d903      	bls.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800325c:	e005      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800325e:	4b1c      	ldr	r3, [pc, #112]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003260:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d0eb      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800326a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800326e:	2b00      	cmp	r3, #0
 8003270:	d129      	bne.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003276:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800327a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800327e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003282:	d10e      	bne.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003284:	4b12      	ldr	r3, [pc, #72]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800328c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003290:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003294:	091a      	lsrs	r2, r3, #4
 8003296:	4b10      	ldr	r3, [pc, #64]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003298:	4013      	ands	r3, r2
 800329a:	4a0d      	ldr	r2, [pc, #52]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800329c:	430b      	orrs	r3, r1
 800329e:	6113      	str	r3, [r2, #16]
 80032a0:	e005      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80032a2:	4b0b      	ldr	r3, [pc, #44]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	4a0a      	ldr	r2, [pc, #40]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032a8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80032ac:	6113      	str	r3, [r2, #16]
 80032ae:	4b08      	ldr	r3, [pc, #32]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032b0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80032b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80032ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032be:	4a04      	ldr	r2, [pc, #16]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032c0:	430b      	orrs	r3, r1
 80032c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80032c4:	e00e      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80032ce:	e009      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80032d0:	58024400 	.word	0x58024400
 80032d4:	58024800 	.word	0x58024800
 80032d8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80032e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ec:	f002 0301 	and.w	r3, r2, #1
 80032f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80032f4:	2300      	movs	r3, #0
 80032f6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80032fa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80032fe:	460b      	mov	r3, r1
 8003300:	4313      	orrs	r3, r2
 8003302:	f000 8089 	beq.w	8003418 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800330a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800330c:	2b28      	cmp	r3, #40	@ 0x28
 800330e:	d86b      	bhi.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003310:	a201      	add	r2, pc, #4	@ (adr r2, 8003318 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003316:	bf00      	nop
 8003318:	080033f1 	.word	0x080033f1
 800331c:	080033e9 	.word	0x080033e9
 8003320:	080033e9 	.word	0x080033e9
 8003324:	080033e9 	.word	0x080033e9
 8003328:	080033e9 	.word	0x080033e9
 800332c:	080033e9 	.word	0x080033e9
 8003330:	080033e9 	.word	0x080033e9
 8003334:	080033e9 	.word	0x080033e9
 8003338:	080033bd 	.word	0x080033bd
 800333c:	080033e9 	.word	0x080033e9
 8003340:	080033e9 	.word	0x080033e9
 8003344:	080033e9 	.word	0x080033e9
 8003348:	080033e9 	.word	0x080033e9
 800334c:	080033e9 	.word	0x080033e9
 8003350:	080033e9 	.word	0x080033e9
 8003354:	080033e9 	.word	0x080033e9
 8003358:	080033d3 	.word	0x080033d3
 800335c:	080033e9 	.word	0x080033e9
 8003360:	080033e9 	.word	0x080033e9
 8003364:	080033e9 	.word	0x080033e9
 8003368:	080033e9 	.word	0x080033e9
 800336c:	080033e9 	.word	0x080033e9
 8003370:	080033e9 	.word	0x080033e9
 8003374:	080033e9 	.word	0x080033e9
 8003378:	080033f1 	.word	0x080033f1
 800337c:	080033e9 	.word	0x080033e9
 8003380:	080033e9 	.word	0x080033e9
 8003384:	080033e9 	.word	0x080033e9
 8003388:	080033e9 	.word	0x080033e9
 800338c:	080033e9 	.word	0x080033e9
 8003390:	080033e9 	.word	0x080033e9
 8003394:	080033e9 	.word	0x080033e9
 8003398:	080033f1 	.word	0x080033f1
 800339c:	080033e9 	.word	0x080033e9
 80033a0:	080033e9 	.word	0x080033e9
 80033a4:	080033e9 	.word	0x080033e9
 80033a8:	080033e9 	.word	0x080033e9
 80033ac:	080033e9 	.word	0x080033e9
 80033b0:	080033e9 	.word	0x080033e9
 80033b4:	080033e9 	.word	0x080033e9
 80033b8:	080033f1 	.word	0x080033f1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80033bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033c0:	3308      	adds	r3, #8
 80033c2:	2101      	movs	r1, #1
 80033c4:	4618      	mov	r0, r3
 80033c6:	f000 fd05 	bl	8003dd4 <RCCEx_PLL2_Config>
 80033ca:	4603      	mov	r3, r0
 80033cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80033d0:	e00f      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80033d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033d6:	3328      	adds	r3, #40	@ 0x28
 80033d8:	2101      	movs	r1, #1
 80033da:	4618      	mov	r0, r3
 80033dc:	f000 fdac 	bl	8003f38 <RCCEx_PLL3_Config>
 80033e0:	4603      	mov	r3, r0
 80033e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80033e6:	e004      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80033ee:	e000      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80033f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10a      	bne.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80033fa:	4bbf      	ldr	r3, [pc, #764]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80033fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033fe:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003406:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003408:	4abb      	ldr	r2, [pc, #748]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800340a:	430b      	orrs	r3, r1
 800340c:	6553      	str	r3, [r2, #84]	@ 0x54
 800340e:	e003      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003410:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003414:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003418:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800341c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003420:	f002 0302 	and.w	r3, r2, #2
 8003424:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003428:	2300      	movs	r3, #0
 800342a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800342e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003432:	460b      	mov	r3, r1
 8003434:	4313      	orrs	r3, r2
 8003436:	d041      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800343c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800343e:	2b05      	cmp	r3, #5
 8003440:	d824      	bhi.n	800348c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003442:	a201      	add	r2, pc, #4	@ (adr r2, 8003448 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003448:	08003495 	.word	0x08003495
 800344c:	08003461 	.word	0x08003461
 8003450:	08003477 	.word	0x08003477
 8003454:	08003495 	.word	0x08003495
 8003458:	08003495 	.word	0x08003495
 800345c:	08003495 	.word	0x08003495
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003464:	3308      	adds	r3, #8
 8003466:	2101      	movs	r1, #1
 8003468:	4618      	mov	r0, r3
 800346a:	f000 fcb3 	bl	8003dd4 <RCCEx_PLL2_Config>
 800346e:	4603      	mov	r3, r0
 8003470:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003474:	e00f      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800347a:	3328      	adds	r3, #40	@ 0x28
 800347c:	2101      	movs	r1, #1
 800347e:	4618      	mov	r0, r3
 8003480:	f000 fd5a 	bl	8003f38 <RCCEx_PLL3_Config>
 8003484:	4603      	mov	r3, r0
 8003486:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800348a:	e004      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003492:	e000      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003494:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003496:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800349a:	2b00      	cmp	r3, #0
 800349c:	d10a      	bne.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800349e:	4b96      	ldr	r3, [pc, #600]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80034a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034a2:	f023 0107 	bic.w	r1, r3, #7
 80034a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034ac:	4a92      	ldr	r2, [pc, #584]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80034ae:	430b      	orrs	r3, r1
 80034b0:	6553      	str	r3, [r2, #84]	@ 0x54
 80034b2:	e003      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c4:	f002 0304 	and.w	r3, r2, #4
 80034c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80034cc:	2300      	movs	r3, #0
 80034ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80034d2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80034d6:	460b      	mov	r3, r1
 80034d8:	4313      	orrs	r3, r2
 80034da:	d044      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80034dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034e4:	2b05      	cmp	r3, #5
 80034e6:	d825      	bhi.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80034e8:	a201      	add	r2, pc, #4	@ (adr r2, 80034f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80034ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ee:	bf00      	nop
 80034f0:	0800353d 	.word	0x0800353d
 80034f4:	08003509 	.word	0x08003509
 80034f8:	0800351f 	.word	0x0800351f
 80034fc:	0800353d 	.word	0x0800353d
 8003500:	0800353d 	.word	0x0800353d
 8003504:	0800353d 	.word	0x0800353d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003508:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800350c:	3308      	adds	r3, #8
 800350e:	2101      	movs	r1, #1
 8003510:	4618      	mov	r0, r3
 8003512:	f000 fc5f 	bl	8003dd4 <RCCEx_PLL2_Config>
 8003516:	4603      	mov	r3, r0
 8003518:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800351c:	e00f      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800351e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003522:	3328      	adds	r3, #40	@ 0x28
 8003524:	2101      	movs	r1, #1
 8003526:	4618      	mov	r0, r3
 8003528:	f000 fd06 	bl	8003f38 <RCCEx_PLL3_Config>
 800352c:	4603      	mov	r3, r0
 800352e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003532:	e004      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800353a:	e000      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800353c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800353e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10b      	bne.n	800355e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003546:	4b6c      	ldr	r3, [pc, #432]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800354a:	f023 0107 	bic.w	r1, r3, #7
 800354e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003552:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003556:	4a68      	ldr	r2, [pc, #416]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003558:	430b      	orrs	r3, r1
 800355a:	6593      	str	r3, [r2, #88]	@ 0x58
 800355c:	e003      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800355e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003562:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800356a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356e:	f002 0320 	and.w	r3, r2, #32
 8003572:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003576:	2300      	movs	r3, #0
 8003578:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800357c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003580:	460b      	mov	r3, r1
 8003582:	4313      	orrs	r3, r2
 8003584:	d055      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800358a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800358e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003592:	d033      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003594:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003598:	d82c      	bhi.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800359a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800359e:	d02f      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80035a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035a4:	d826      	bhi.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80035a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80035aa:	d02b      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80035ac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80035b0:	d820      	bhi.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80035b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80035b6:	d012      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80035b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80035bc:	d81a      	bhi.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d022      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80035c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80035c6:	d115      	bne.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035cc:	3308      	adds	r3, #8
 80035ce:	2100      	movs	r1, #0
 80035d0:	4618      	mov	r0, r3
 80035d2:	f000 fbff 	bl	8003dd4 <RCCEx_PLL2_Config>
 80035d6:	4603      	mov	r3, r0
 80035d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80035dc:	e015      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80035de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035e2:	3328      	adds	r3, #40	@ 0x28
 80035e4:	2102      	movs	r1, #2
 80035e6:	4618      	mov	r0, r3
 80035e8:	f000 fca6 	bl	8003f38 <RCCEx_PLL3_Config>
 80035ec:	4603      	mov	r3, r0
 80035ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80035f2:	e00a      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035fa:	e006      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80035fc:	bf00      	nop
 80035fe:	e004      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003600:	bf00      	nop
 8003602:	e002      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003604:	bf00      	nop
 8003606:	e000      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003608:	bf00      	nop
    }

    if (ret == HAL_OK)
 800360a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800360e:	2b00      	cmp	r3, #0
 8003610:	d10b      	bne.n	800362a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003612:	4b39      	ldr	r3, [pc, #228]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003614:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003616:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800361a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800361e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003622:	4a35      	ldr	r2, [pc, #212]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003624:	430b      	orrs	r3, r1
 8003626:	6553      	str	r3, [r2, #84]	@ 0x54
 8003628:	e003      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800362a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800362e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800363a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800363e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003642:	2300      	movs	r3, #0
 8003644:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003648:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800364c:	460b      	mov	r3, r1
 800364e:	4313      	orrs	r3, r2
 8003650:	d058      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003656:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800365a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800365e:	d033      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003660:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003664:	d82c      	bhi.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003666:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800366a:	d02f      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800366c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003670:	d826      	bhi.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003672:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003676:	d02b      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003678:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800367c:	d820      	bhi.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800367e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003682:	d012      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003684:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003688:	d81a      	bhi.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800368a:	2b00      	cmp	r3, #0
 800368c:	d022      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800368e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003692:	d115      	bne.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003694:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003698:	3308      	adds	r3, #8
 800369a:	2100      	movs	r1, #0
 800369c:	4618      	mov	r0, r3
 800369e:	f000 fb99 	bl	8003dd4 <RCCEx_PLL2_Config>
 80036a2:	4603      	mov	r3, r0
 80036a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80036a8:	e015      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80036aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ae:	3328      	adds	r3, #40	@ 0x28
 80036b0:	2102      	movs	r1, #2
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 fc40 	bl	8003f38 <RCCEx_PLL3_Config>
 80036b8:	4603      	mov	r3, r0
 80036ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80036be:	e00a      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036c6:	e006      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80036c8:	bf00      	nop
 80036ca:	e004      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80036cc:	bf00      	nop
 80036ce:	e002      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80036d0:	bf00      	nop
 80036d2:	e000      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80036d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10e      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036de:	4b06      	ldr	r3, [pc, #24]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80036e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036e2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80036e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80036ee:	4a02      	ldr	r2, [pc, #8]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80036f0:	430b      	orrs	r3, r1
 80036f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80036f4:	e006      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80036f6:	bf00      	nop
 80036f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003700:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003704:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800370c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003710:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003714:	2300      	movs	r3, #0
 8003716:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800371a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800371e:	460b      	mov	r3, r1
 8003720:	4313      	orrs	r3, r2
 8003722:	d055      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003728:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800372c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003730:	d033      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003732:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003736:	d82c      	bhi.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003738:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800373c:	d02f      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800373e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003742:	d826      	bhi.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003744:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003748:	d02b      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800374a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800374e:	d820      	bhi.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003750:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003754:	d012      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003756:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800375a:	d81a      	bhi.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800375c:	2b00      	cmp	r3, #0
 800375e:	d022      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003760:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003764:	d115      	bne.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800376a:	3308      	adds	r3, #8
 800376c:	2100      	movs	r1, #0
 800376e:	4618      	mov	r0, r3
 8003770:	f000 fb30 	bl	8003dd4 <RCCEx_PLL2_Config>
 8003774:	4603      	mov	r3, r0
 8003776:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800377a:	e015      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800377c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003780:	3328      	adds	r3, #40	@ 0x28
 8003782:	2102      	movs	r1, #2
 8003784:	4618      	mov	r0, r3
 8003786:	f000 fbd7 	bl	8003f38 <RCCEx_PLL3_Config>
 800378a:	4603      	mov	r3, r0
 800378c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003790:	e00a      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003798:	e006      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800379a:	bf00      	nop
 800379c:	e004      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800379e:	bf00      	nop
 80037a0:	e002      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80037a2:	bf00      	nop
 80037a4:	e000      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80037a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10b      	bne.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80037b0:	4ba1      	ldr	r3, [pc, #644]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037b4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80037b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80037c0:	4a9d      	ldr	r2, [pc, #628]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037c2:	430b      	orrs	r3, r1
 80037c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80037c6:	e003      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80037d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d8:	f002 0308 	and.w	r3, r2, #8
 80037dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80037e0:	2300      	movs	r3, #0
 80037e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80037e6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80037ea:	460b      	mov	r3, r1
 80037ec:	4313      	orrs	r3, r2
 80037ee:	d01e      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80037f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037fc:	d10c      	bne.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80037fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003802:	3328      	adds	r3, #40	@ 0x28
 8003804:	2102      	movs	r1, #2
 8003806:	4618      	mov	r0, r3
 8003808:	f000 fb96 	bl	8003f38 <RCCEx_PLL3_Config>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d002      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003818:	4b87      	ldr	r3, [pc, #540]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800381a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800381c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003824:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003828:	4a83      	ldr	r2, [pc, #524]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800382a:	430b      	orrs	r3, r1
 800382c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800382e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003836:	f002 0310 	and.w	r3, r2, #16
 800383a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800383e:	2300      	movs	r3, #0
 8003840:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003844:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003848:	460b      	mov	r3, r1
 800384a:	4313      	orrs	r3, r2
 800384c:	d01e      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800384e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003852:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003856:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800385a:	d10c      	bne.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800385c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003860:	3328      	adds	r3, #40	@ 0x28
 8003862:	2102      	movs	r1, #2
 8003864:	4618      	mov	r0, r3
 8003866:	f000 fb67 	bl	8003f38 <RCCEx_PLL3_Config>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d002      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003876:	4b70      	ldr	r3, [pc, #448]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800387a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800387e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003882:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003886:	4a6c      	ldr	r2, [pc, #432]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003888:	430b      	orrs	r3, r1
 800388a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800388c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003894:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003898:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800389c:	2300      	movs	r3, #0
 800389e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80038a2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80038a6:	460b      	mov	r3, r1
 80038a8:	4313      	orrs	r3, r2
 80038aa:	d03e      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80038ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80038b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038b8:	d022      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80038ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038be:	d81b      	bhi.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d003      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80038c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038c8:	d00b      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80038ca:	e015      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038d0:	3308      	adds	r3, #8
 80038d2:	2100      	movs	r1, #0
 80038d4:	4618      	mov	r0, r3
 80038d6:	f000 fa7d 	bl	8003dd4 <RCCEx_PLL2_Config>
 80038da:	4603      	mov	r3, r0
 80038dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80038e0:	e00f      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80038e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e6:	3328      	adds	r3, #40	@ 0x28
 80038e8:	2102      	movs	r1, #2
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 fb24 	bl	8003f38 <RCCEx_PLL3_Config>
 80038f0:	4603      	mov	r3, r0
 80038f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80038f6:	e004      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038fe:	e000      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003900:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003902:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10b      	bne.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800390a:	4b4b      	ldr	r3, [pc, #300]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800390c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800390e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003916:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800391a:	4a47      	ldr	r2, [pc, #284]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800391c:	430b      	orrs	r3, r1
 800391e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003920:	e003      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003922:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003926:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800392a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800392e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003932:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003936:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003938:	2300      	movs	r3, #0
 800393a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800393c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003940:	460b      	mov	r3, r1
 8003942:	4313      	orrs	r3, r2
 8003944:	d03b      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800394a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800394e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003952:	d01f      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003954:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003958:	d818      	bhi.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800395a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800395e:	d003      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003960:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003964:	d007      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003966:	e011      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003968:	4b33      	ldr	r3, [pc, #204]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800396a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800396c:	4a32      	ldr	r2, [pc, #200]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800396e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003972:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003974:	e00f      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800397a:	3328      	adds	r3, #40	@ 0x28
 800397c:	2101      	movs	r1, #1
 800397e:	4618      	mov	r0, r3
 8003980:	f000 fada 	bl	8003f38 <RCCEx_PLL3_Config>
 8003984:	4603      	mov	r3, r0
 8003986:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800398a:	e004      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003992:	e000      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003994:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003996:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10b      	bne.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800399e:	4b26      	ldr	r3, [pc, #152]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039a2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80039a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ae:	4a22      	ldr	r2, [pc, #136]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039b0:	430b      	orrs	r3, r1
 80039b2:	6553      	str	r3, [r2, #84]	@ 0x54
 80039b4:	e003      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80039be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80039ca:	673b      	str	r3, [r7, #112]	@ 0x70
 80039cc:	2300      	movs	r3, #0
 80039ce:	677b      	str	r3, [r7, #116]	@ 0x74
 80039d0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80039d4:	460b      	mov	r3, r1
 80039d6:	4313      	orrs	r3, r2
 80039d8:	d034      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80039da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d003      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80039e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039e8:	d007      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80039ea:	e011      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039ec:	4b12      	ldr	r3, [pc, #72]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f0:	4a11      	ldr	r2, [pc, #68]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80039f8:	e00e      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039fe:	3308      	adds	r3, #8
 8003a00:	2102      	movs	r1, #2
 8003a02:	4618      	mov	r0, r3
 8003a04:	f000 f9e6 	bl	8003dd4 <RCCEx_PLL2_Config>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003a0e:	e003      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10d      	bne.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003a20:	4b05      	ldr	r3, [pc, #20]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a24:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a2e:	4a02      	ldr	r2, [pc, #8]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a30:	430b      	orrs	r3, r1
 8003a32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a34:	e006      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003a36:	bf00      	nop
 8003a38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003a50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a52:	2300      	movs	r3, #0
 8003a54:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003a56:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	d00c      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a64:	3328      	adds	r3, #40	@ 0x28
 8003a66:	2102      	movs	r1, #2
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f000 fa65 	bl	8003f38 <RCCEx_PLL3_Config>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d002      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a82:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003a86:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a88:	2300      	movs	r3, #0
 8003a8a:	667b      	str	r3, [r7, #100]	@ 0x64
 8003a8c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003a90:	460b      	mov	r3, r1
 8003a92:	4313      	orrs	r3, r2
 8003a94:	d038      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003aa2:	d018      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003aa4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003aa8:	d811      	bhi.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003aaa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003aae:	d014      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003ab0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ab4:	d80b      	bhi.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d011      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003aba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003abe:	d106      	bne.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ac0:	4bc3      	ldr	r3, [pc, #780]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac4:	4ac2      	ldr	r2, [pc, #776]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ac6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003aca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003acc:	e008      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ad4:	e004      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003ad6:	bf00      	nop
 8003ad8:	e002      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003ada:	bf00      	nop
 8003adc:	e000      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003ade:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ae0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10b      	bne.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ae8:	4bb9      	ldr	r3, [pc, #740]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003aea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aec:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003af4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003af8:	4ab5      	ldr	r2, [pc, #724]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003afa:	430b      	orrs	r3, r1
 8003afc:	6553      	str	r3, [r2, #84]	@ 0x54
 8003afe:	e003      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b10:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003b14:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b16:	2300      	movs	r3, #0
 8003b18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b1a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003b1e:	460b      	mov	r3, r1
 8003b20:	4313      	orrs	r3, r2
 8003b22:	d009      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b24:	4baa      	ldr	r3, [pc, #680]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b28:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b32:	4aa7      	ldr	r2, [pc, #668]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b34:	430b      	orrs	r3, r1
 8003b36:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b40:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003b44:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b46:	2300      	movs	r3, #0
 8003b48:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b4a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4313      	orrs	r3, r2
 8003b52:	d00a      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003b54:	4b9e      	ldr	r3, [pc, #632]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b60:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003b64:	4a9a      	ldr	r2, [pc, #616]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b66:	430b      	orrs	r3, r1
 8003b68:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b72:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003b76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b78:	2300      	movs	r3, #0
 8003b7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b7c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003b80:	460b      	mov	r3, r1
 8003b82:	4313      	orrs	r3, r2
 8003b84:	d009      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b86:	4b92      	ldr	r3, [pc, #584]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b8a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b94:	4a8e      	ldr	r2, [pc, #568]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b96:	430b      	orrs	r3, r1
 8003b98:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003ba6:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ba8:	2300      	movs	r3, #0
 8003baa:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bac:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	d00e      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003bb6:	4b86      	ldr	r3, [pc, #536]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	4a85      	ldr	r2, [pc, #532]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bbc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003bc0:	6113      	str	r3, [r2, #16]
 8003bc2:	4b83      	ldr	r3, [pc, #524]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bc4:	6919      	ldr	r1, [r3, #16]
 8003bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003bce:	4a80      	ldr	r2, [pc, #512]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bd0:	430b      	orrs	r3, r1
 8003bd2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bdc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003be0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003be2:	2300      	movs	r3, #0
 8003be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003be6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003bea:	460b      	mov	r3, r1
 8003bec:	4313      	orrs	r3, r2
 8003bee:	d009      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003bf0:	4b77      	ldr	r3, [pc, #476]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bf4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bfe:	4a74      	ldr	r2, [pc, #464]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c00:	430b      	orrs	r3, r1
 8003c02:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003c10:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c12:	2300      	movs	r3, #0
 8003c14:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c16:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	d00a      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c20:	4b6b      	ldr	r3, [pc, #428]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c24:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c30:	4a67      	ldr	r2, [pc, #412]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c32:	430b      	orrs	r3, r1
 8003c34:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c3e:	2100      	movs	r1, #0
 8003c40:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c48:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	d011      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c56:	3308      	adds	r3, #8
 8003c58:	2100      	movs	r1, #0
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 f8ba 	bl	8003dd4 <RCCEx_PLL2_Config>
 8003c60:	4603      	mov	r3, r0
 8003c62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003c66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c7e:	2100      	movs	r1, #0
 8003c80:	6239      	str	r1, [r7, #32]
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c88:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	d011      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c96:	3308      	adds	r3, #8
 8003c98:	2101      	movs	r1, #1
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 f89a 	bl	8003dd4 <RCCEx_PLL2_Config>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003ca6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cb2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	61b9      	str	r1, [r7, #24]
 8003cc2:	f003 0304 	and.w	r3, r3, #4
 8003cc6:	61fb      	str	r3, [r7, #28]
 8003cc8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003ccc:	460b      	mov	r3, r1
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	d011      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cd6:	3308      	adds	r3, #8
 8003cd8:	2102      	movs	r1, #2
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 f87a 	bl	8003dd4 <RCCEx_PLL2_Config>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003ce6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d003      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cf2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfe:	2100      	movs	r1, #0
 8003d00:	6139      	str	r1, [r7, #16]
 8003d02:	f003 0308 	and.w	r3, r3, #8
 8003d06:	617b      	str	r3, [r7, #20]
 8003d08:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	d011      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d16:	3328      	adds	r3, #40	@ 0x28
 8003d18:	2100      	movs	r1, #0
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 f90c 	bl	8003f38 <RCCEx_PLL3_Config>
 8003d20:	4603      	mov	r3, r0
 8003d22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8003d26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d003      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3e:	2100      	movs	r1, #0
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	f003 0310 	and.w	r3, r3, #16
 8003d46:	60fb      	str	r3, [r7, #12]
 8003d48:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	d011      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d56:	3328      	adds	r3, #40	@ 0x28
 8003d58:	2101      	movs	r1, #1
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f000 f8ec 	bl	8003f38 <RCCEx_PLL3_Config>
 8003d60:	4603      	mov	r3, r0
 8003d62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003d66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7e:	2100      	movs	r1, #0
 8003d80:	6039      	str	r1, [r7, #0]
 8003d82:	f003 0320 	and.w	r3, r3, #32
 8003d86:	607b      	str	r3, [r7, #4]
 8003d88:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	d011      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d96:	3328      	adds	r3, #40	@ 0x28
 8003d98:	2102      	movs	r1, #2
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 f8cc 	bl	8003f38 <RCCEx_PLL3_Config>
 8003da0:	4603      	mov	r3, r0
 8003da2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003da6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d003      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003db2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003db6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	e000      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dd0:	58024400 	.word	0x58024400

08003dd4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003dde:	2300      	movs	r3, #0
 8003de0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003de2:	4b53      	ldr	r3, [pc, #332]	@ (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003de6:	f003 0303 	and.w	r3, r3, #3
 8003dea:	2b03      	cmp	r3, #3
 8003dec:	d101      	bne.n	8003df2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e099      	b.n	8003f26 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003df2:	4b4f      	ldr	r3, [pc, #316]	@ (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a4e      	ldr	r2, [pc, #312]	@ (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003df8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003dfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dfe:	f7fc fe6d 	bl	8000adc <HAL_GetTick>
 8003e02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003e04:	e008      	b.n	8003e18 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003e06:	f7fc fe69 	bl	8000adc <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d901      	bls.n	8003e18 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e086      	b.n	8003f26 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003e18:	4b45      	ldr	r3, [pc, #276]	@ (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1f0      	bne.n	8003e06 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003e24:	4b42      	ldr	r3, [pc, #264]	@ (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e28:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	031b      	lsls	r3, r3, #12
 8003e32:	493f      	ldr	r1, [pc, #252]	@ (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	628b      	str	r3, [r1, #40]	@ 0x28
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	3b01      	subs	r3, #1
 8003e48:	025b      	lsls	r3, r3, #9
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	431a      	orrs	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	3b01      	subs	r3, #1
 8003e54:	041b      	lsls	r3, r3, #16
 8003e56:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	3b01      	subs	r3, #1
 8003e62:	061b      	lsls	r3, r3, #24
 8003e64:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003e68:	4931      	ldr	r1, [pc, #196]	@ (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003e6e:	4b30      	ldr	r3, [pc, #192]	@ (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e72:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	492d      	ldr	r1, [pc, #180]	@ (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003e80:	4b2b      	ldr	r3, [pc, #172]	@ (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e84:	f023 0220 	bic.w	r2, r3, #32
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	4928      	ldr	r1, [pc, #160]	@ (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003e92:	4b27      	ldr	r3, [pc, #156]	@ (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e96:	4a26      	ldr	r2, [pc, #152]	@ (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003e98:	f023 0310 	bic.w	r3, r3, #16
 8003e9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003e9e:	4b24      	ldr	r3, [pc, #144]	@ (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003ea0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ea2:	4b24      	ldr	r3, [pc, #144]	@ (8003f34 <RCCEx_PLL2_Config+0x160>)
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	69d2      	ldr	r2, [r2, #28]
 8003eaa:	00d2      	lsls	r2, r2, #3
 8003eac:	4920      	ldr	r1, [pc, #128]	@ (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003eb2:	4b1f      	ldr	r3, [pc, #124]	@ (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb6:	4a1e      	ldr	r2, [pc, #120]	@ (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003eb8:	f043 0310 	orr.w	r3, r3, #16
 8003ebc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d106      	bne.n	8003ed2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003ec4:	4b1a      	ldr	r3, [pc, #104]	@ (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec8:	4a19      	ldr	r2, [pc, #100]	@ (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003eca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003ece:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003ed0:	e00f      	b.n	8003ef2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d106      	bne.n	8003ee6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003ed8:	4b15      	ldr	r3, [pc, #84]	@ (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003edc:	4a14      	ldr	r2, [pc, #80]	@ (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003ede:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ee2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003ee4:	e005      	b.n	8003ef2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003ee6:	4b12      	ldr	r3, [pc, #72]	@ (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eea:	4a11      	ldr	r2, [pc, #68]	@ (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003eec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003ef0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a0e      	ldr	r2, [pc, #56]	@ (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003ef8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003efc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003efe:	f7fc fded 	bl	8000adc <HAL_GetTick>
 8003f02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003f04:	e008      	b.n	8003f18 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003f06:	f7fc fde9 	bl	8000adc <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d901      	bls.n	8003f18 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e006      	b.n	8003f26 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003f18:	4b05      	ldr	r3, [pc, #20]	@ (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d0f0      	beq.n	8003f06 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	58024400 	.word	0x58024400
 8003f34:	ffff0007 	.word	0xffff0007

08003f38 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f42:	2300      	movs	r3, #0
 8003f44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f46:	4b53      	ldr	r3, [pc, #332]	@ (8004094 <RCCEx_PLL3_Config+0x15c>)
 8003f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f4a:	f003 0303 	and.w	r3, r3, #3
 8003f4e:	2b03      	cmp	r3, #3
 8003f50:	d101      	bne.n	8003f56 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e099      	b.n	800408a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003f56:	4b4f      	ldr	r3, [pc, #316]	@ (8004094 <RCCEx_PLL3_Config+0x15c>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a4e      	ldr	r2, [pc, #312]	@ (8004094 <RCCEx_PLL3_Config+0x15c>)
 8003f5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f62:	f7fc fdbb 	bl	8000adc <HAL_GetTick>
 8003f66:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003f68:	e008      	b.n	8003f7c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003f6a:	f7fc fdb7 	bl	8000adc <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d901      	bls.n	8003f7c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e086      	b.n	800408a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003f7c:	4b45      	ldr	r3, [pc, #276]	@ (8004094 <RCCEx_PLL3_Config+0x15c>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1f0      	bne.n	8003f6a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003f88:	4b42      	ldr	r3, [pc, #264]	@ (8004094 <RCCEx_PLL3_Config+0x15c>)
 8003f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f8c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	051b      	lsls	r3, r3, #20
 8003f96:	493f      	ldr	r1, [pc, #252]	@ (8004094 <RCCEx_PLL3_Config+0x15c>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	628b      	str	r3, [r1, #40]	@ 0x28
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	3b01      	subs	r3, #1
 8003fac:	025b      	lsls	r3, r3, #9
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	041b      	lsls	r3, r3, #16
 8003fba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	061b      	lsls	r3, r3, #24
 8003fc8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003fcc:	4931      	ldr	r1, [pc, #196]	@ (8004094 <RCCEx_PLL3_Config+0x15c>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003fd2:	4b30      	ldr	r3, [pc, #192]	@ (8004094 <RCCEx_PLL3_Config+0x15c>)
 8003fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	492d      	ldr	r1, [pc, #180]	@ (8004094 <RCCEx_PLL3_Config+0x15c>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003fe4:	4b2b      	ldr	r3, [pc, #172]	@ (8004094 <RCCEx_PLL3_Config+0x15c>)
 8003fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	4928      	ldr	r1, [pc, #160]	@ (8004094 <RCCEx_PLL3_Config+0x15c>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003ff6:	4b27      	ldr	r3, [pc, #156]	@ (8004094 <RCCEx_PLL3_Config+0x15c>)
 8003ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ffa:	4a26      	ldr	r2, [pc, #152]	@ (8004094 <RCCEx_PLL3_Config+0x15c>)
 8003ffc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004000:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004002:	4b24      	ldr	r3, [pc, #144]	@ (8004094 <RCCEx_PLL3_Config+0x15c>)
 8004004:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004006:	4b24      	ldr	r3, [pc, #144]	@ (8004098 <RCCEx_PLL3_Config+0x160>)
 8004008:	4013      	ands	r3, r2
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	69d2      	ldr	r2, [r2, #28]
 800400e:	00d2      	lsls	r2, r2, #3
 8004010:	4920      	ldr	r1, [pc, #128]	@ (8004094 <RCCEx_PLL3_Config+0x15c>)
 8004012:	4313      	orrs	r3, r2
 8004014:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004016:	4b1f      	ldr	r3, [pc, #124]	@ (8004094 <RCCEx_PLL3_Config+0x15c>)
 8004018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800401a:	4a1e      	ldr	r2, [pc, #120]	@ (8004094 <RCCEx_PLL3_Config+0x15c>)
 800401c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004020:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d106      	bne.n	8004036 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004028:	4b1a      	ldr	r3, [pc, #104]	@ (8004094 <RCCEx_PLL3_Config+0x15c>)
 800402a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800402c:	4a19      	ldr	r2, [pc, #100]	@ (8004094 <RCCEx_PLL3_Config+0x15c>)
 800402e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004032:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004034:	e00f      	b.n	8004056 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d106      	bne.n	800404a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800403c:	4b15      	ldr	r3, [pc, #84]	@ (8004094 <RCCEx_PLL3_Config+0x15c>)
 800403e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004040:	4a14      	ldr	r2, [pc, #80]	@ (8004094 <RCCEx_PLL3_Config+0x15c>)
 8004042:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004046:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004048:	e005      	b.n	8004056 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800404a:	4b12      	ldr	r3, [pc, #72]	@ (8004094 <RCCEx_PLL3_Config+0x15c>)
 800404c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800404e:	4a11      	ldr	r2, [pc, #68]	@ (8004094 <RCCEx_PLL3_Config+0x15c>)
 8004050:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004054:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004056:	4b0f      	ldr	r3, [pc, #60]	@ (8004094 <RCCEx_PLL3_Config+0x15c>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a0e      	ldr	r2, [pc, #56]	@ (8004094 <RCCEx_PLL3_Config+0x15c>)
 800405c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004060:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004062:	f7fc fd3b 	bl	8000adc <HAL_GetTick>
 8004066:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004068:	e008      	b.n	800407c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800406a:	f7fc fd37 	bl	8000adc <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b02      	cmp	r3, #2
 8004076:	d901      	bls.n	800407c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e006      	b.n	800408a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800407c:	4b05      	ldr	r3, [pc, #20]	@ (8004094 <RCCEx_PLL3_Config+0x15c>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d0f0      	beq.n	800406a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004088:	7bfb      	ldrb	r3, [r7, #15]
}
 800408a:	4618      	mov	r0, r3
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	58024400 	.word	0x58024400
 8004098:	ffff0007 	.word	0xffff0007

0800409c <memset>:
 800409c:	4402      	add	r2, r0
 800409e:	4603      	mov	r3, r0
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d100      	bne.n	80040a6 <memset+0xa>
 80040a4:	4770      	bx	lr
 80040a6:	f803 1b01 	strb.w	r1, [r3], #1
 80040aa:	e7f9      	b.n	80040a0 <memset+0x4>

080040ac <__libc_init_array>:
 80040ac:	b570      	push	{r4, r5, r6, lr}
 80040ae:	4d0d      	ldr	r5, [pc, #52]	@ (80040e4 <__libc_init_array+0x38>)
 80040b0:	4c0d      	ldr	r4, [pc, #52]	@ (80040e8 <__libc_init_array+0x3c>)
 80040b2:	1b64      	subs	r4, r4, r5
 80040b4:	10a4      	asrs	r4, r4, #2
 80040b6:	2600      	movs	r6, #0
 80040b8:	42a6      	cmp	r6, r4
 80040ba:	d109      	bne.n	80040d0 <__libc_init_array+0x24>
 80040bc:	4d0b      	ldr	r5, [pc, #44]	@ (80040ec <__libc_init_array+0x40>)
 80040be:	4c0c      	ldr	r4, [pc, #48]	@ (80040f0 <__libc_init_array+0x44>)
 80040c0:	f000 f818 	bl	80040f4 <_init>
 80040c4:	1b64      	subs	r4, r4, r5
 80040c6:	10a4      	asrs	r4, r4, #2
 80040c8:	2600      	movs	r6, #0
 80040ca:	42a6      	cmp	r6, r4
 80040cc:	d105      	bne.n	80040da <__libc_init_array+0x2e>
 80040ce:	bd70      	pop	{r4, r5, r6, pc}
 80040d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80040d4:	4798      	blx	r3
 80040d6:	3601      	adds	r6, #1
 80040d8:	e7ee      	b.n	80040b8 <__libc_init_array+0xc>
 80040da:	f855 3b04 	ldr.w	r3, [r5], #4
 80040de:	4798      	blx	r3
 80040e0:	3601      	adds	r6, #1
 80040e2:	e7f2      	b.n	80040ca <__libc_init_array+0x1e>
 80040e4:	08004144 	.word	0x08004144
 80040e8:	08004144 	.word	0x08004144
 80040ec:	08004144 	.word	0x08004144
 80040f0:	08004148 	.word	0x08004148

080040f4 <_init>:
 80040f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040f6:	bf00      	nop
 80040f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040fa:	bc08      	pop	{r3}
 80040fc:	469e      	mov	lr, r3
 80040fe:	4770      	bx	lr

08004100 <_fini>:
 8004100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004102:	bf00      	nop
 8004104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004106:	bc08      	pop	{r3}
 8004108:	469e      	mov	lr, r3
 800410a:	4770      	bx	lr
